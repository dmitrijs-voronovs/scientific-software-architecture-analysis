quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,filename,wiki,url,total_similar,target_keywords,target_matched_words
Performance,". ROOT: ROOT::Math::FastInverter< 3 > Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Static Public Member Functions |; List of all members ; ROOT::Math::FastInverter< 3 > Class Reference. ; 3x3 direct matrix inversion using Cramer Rule use only for FastInverter ; Definition at line 266 of file Dinv.h. Static Public Member Functions; template<class T > ; static bool Dinv (MatRepSym< T, 3 > &rhs);  Inversion for a 3x3 symmetric matrix. ;  ; template<class MatrixRep > ; static bool Dinv (MatrixRep &rhs);  Inversion for a 3x3 matrix. ;  . #include <Math/Dinv.h>; Member Function Documentation. ◆ Dinv() [1/2]. template<class T > . bool ROOT::Math::FastInverter< 3 >::Dinv ; (; MatRepSym< T, 3 > & ; rhs). static . Inversion for a 3x3 symmetric matrix. ; Definition at line 42 of file CramerInversionSym.icc. ◆ Dinv() [2/2]. template<class MatrixRep > . bool ROOT::Math::FastInverter< 3 >::Dinv ; (; MatrixRep & ; rhs). static . Inversion for a 3x3 matrix. ; Definition at line 44 of file CramerInversion.icc. The documentation for this class was generated from the following files:; math/smatrix/inc/Math/Dinv.h; math/smatrix/inc/Math/CramerInversion.icc; math/smatrix/inc/Math/CramerInversionSym.icc. ROOTMathFastInverter< 3 >. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:20 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1FastInverter_3_013_01_4.html:98,Load,Loading,98,doc/master/classROOT_1_1Math_1_1FastInverter_3_013_01_4.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1FastInverter_3_013_01_4.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::FastInverter< 4 > Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Static Public Member Functions |; List of all members ; ROOT::Math::FastInverter< 4 > Class Reference. ; 4x4 matrix inversion using Cramers rule. ; Definition at line 282 of file Dinv.h. Static Public Member Functions; template<class T > ; static bool Dinv (MatRepSym< T, 4 > &rhs);  Inversion for a 4x4 symmetric matrix. ;  ; template<class MatrixRep > ; static bool Dinv (MatrixRep &rhs);  Inversion for a 4x4 matrix. ;  . #include <Math/Dinv.h>; Member Function Documentation. ◆ Dinv() [1/2]. template<class T > . bool ROOT::Math::FastInverter< 4 >::Dinv ; (; MatRepSym< T, 4 > & ; rhs). static . Inversion for a 4x4 symmetric matrix. ; Definition at line 128 of file CramerInversionSym.icc. ◆ Dinv() [2/2]. template<class MatrixRep > . bool ROOT::Math::FastInverter< 4 >::Dinv ; (; MatrixRep & ; rhs). static . Inversion for a 4x4 matrix. ; Definition at line 135 of file CramerInversion.icc. The documentation for this class was generated from the following files:; math/smatrix/inc/Math/Dinv.h; math/smatrix/inc/Math/CramerInversion.icc; math/smatrix/inc/Math/CramerInversionSym.icc. ROOTMathFastInverter< 4 >. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:20 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1FastInverter_3_014_01_4.html:98,Load,Loading,98,doc/master/classROOT_1_1Math_1_1FastInverter_3_014_01_4.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1FastInverter_3_014_01_4.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::FastInverter< 5 > Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Static Public Member Functions |; List of all members ; ROOT::Math::FastInverter< 5 > Class Reference. ; 5x5 Matrix inversion using Cramers rule. ; Definition at line 297 of file Dinv.h. Static Public Member Functions; template<class T > ; static bool Dinv (MatRepSym< T, 5 > &rhs);  Inversion for a 5x5 symmetric matrix. ;  ; template<class MatrixRep > ; static bool Dinv (MatrixRep &rhs);  Inversion for a 5x5 matrix. ;  . #include <Math/Dinv.h>; Member Function Documentation. ◆ Dinv() [1/2]. template<class T > . bool ROOT::Math::FastInverter< 5 >::Dinv ; (; MatRepSym< T, 5 > & ; rhs). static . Inversion for a 5x5 symmetric matrix. ; Definition at line 245 of file CramerInversionSym.icc. ◆ Dinv() [2/2]. template<class MatrixRep > . bool ROOT::Math::FastInverter< 5 >::Dinv ; (; MatrixRep & ; rhs). static . Inversion for a 5x5 matrix. ; Definition at line 277 of file CramerInversion.icc. The documentation for this class was generated from the following files:; math/smatrix/inc/Math/Dinv.h; math/smatrix/inc/Math/CramerInversion.icc; math/smatrix/inc/Math/CramerInversionSym.icc. ROOTMathFastInverter< 5 >. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:20 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1FastInverter_3_015_01_4.html:98,Load,Loading,98,doc/master/classROOT_1_1Math_1_1FastInverter_3_015_01_4.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1FastInverter_3_015_01_4.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::FastInverter< idim, n > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Static Public Member Functions |; List of all members ; ROOT::Math::FastInverter< idim, n > Class Template Reference. ; template<unsigned int idim, unsigned int n = idim>; class ROOT::Math::FastInverter< idim, n >Fast Matrix Inverter class Class to specialize calls to Dinv. ; Dinv computes the inverse of a square matrix if dimension idim and order n. The content of the matrix will be replaced by its inverse. In case the inversion fails, the matrix content is destroyed. Invert specializes Dinv by the matrix order. E.g. if the order of the matrix is less than 5 , the class implements Cramers rule. Be careful that for matrix with high condition the accuracy of the Cramer rule is much poorer; AuthorL. Moneta ; Definition at line 144 of file Dinv.h. Static Public Member Functions; template<class T > ; static bool Dinv (MatRepSym< T, idim > &rhs);  ; template<class MatrixRep > ; static bool Dinv (MatrixRep &rhs);  . #include <Math/Dinv.h>; Member Function Documentation. ◆ Dinv() [1/2]. template<unsigned int idim, unsigned int n = idim> . template<class T > . static bool ROOT::Math::FastInverter< idim, n >::Dinv ; (; MatRepSym< T, idim > & ; rhs). inlinestatic . Definition at line 152 of file Dinv.h. ◆ Dinv() [2/2]. template<unsigned int idim, unsigned int n = idim> . template<class MatrixRep > . static bool ROOT::Math::FastInverter< idim, n >::Dinv ; (; MatrixRep & ; rhs). inlinestatic . Definition at line 148 of file Dinv.h. The documentation for this class was generated from the following file:; math/smatrix/inc/Math/Dinv.h. ROOTMathFastInverter. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:20 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1FastInverter.html:113,Load,Loading,113,doc/master/classROOT_1_1Math_1_1FastInverter.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1FastInverter.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::FitTransformFunction< FMFunc > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::FitTransformFunction< FMFunc > Class Template Reference. ; template<class FMFunc>; class ROOT::Math::FitTransformFunction< FMFunc >Internal class used by GSLNLSMinimizer to implement the transformation of the chi2 function used by GSL Non-linear Least-square fitting The class is template on the FitMethodFunction type to support both gradient and non gradient functions. ; Definition at line 40 of file GSLNLSMinimizer.cxx. Public Member Functions;  FitTransformFunction (const FMFunc &f, std::unique_ptr< MinimTransformFunction > transFunc);  ; virtual ~FitTransformFunction ();  ; virtual IMultiGenFunction * Clone () const;  ; virtual double DataElement (const double *x, unsigned i, double *g=nullptr, double *=nullptr, bool=false) const;  ; void GradientTransformation (const double *x, const double *gext, double *gint) const;  transform gradient vector (external -> internal) at internal point x ;  ; void InvStepTransformation (const double *x, const double *sext, double *sint) const;  inverse transformation for steps (external -> internal) at external point x ;  ; void InvTransformation (const double *xext, double *xint) const;  inverse transformation (external -> internal) ;  ; void MatrixTransformation (const double *x, const double *cint, double *cext) const;  ; virtual unsigned int NDim () const;  ; unsigned int NTot () const;  ; const double * Transformation (const double *x) const;  . Private Member Functions;  FitTransformFunction (const FitTransformFunction &rhs)=delete;  ; virtual double DoDerivative (const double *, unsigned int) const;  ; virtual double DoEval (const double *x) const;  ; FitTransformFunction & operator= (const FitTransformFunction &rhs)=delete;  . Private A",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1FitTransformFunction.html:120,Load,Loading,120,doc/master/classROOT_1_1Math_1_1FitTransformFunction.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1FitTransformFunction.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::Functor Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::Functor Class ReferenceMath » MathCore » Function Classes and Interfaces » Generic Function Evaluation Interfaces. ; Documentation for class Functor class. ; It is used to wrap in a very simple and convenient way multi-dimensional function objects. It can wrap all the following types: . any C++ callable object implementation double operator()( const double * ) . a free C function of type double ()(const double * ) . an std::function of type std::function<double (double const *)> . a member function with the correct signature like Foo::Eval(const double * ). In this case one pass the object pointer and a pointer to the member function (&Foo::Eval) . The function dimension is required when constructing the functor. ; Definition at line 47 of file Functor.h. Public Member Functions;  Functor ();  Default constructor. ;  ; template<class PtrObj , typename MemFn > ;  Functor (const PtrObj &p, MemFn memFn, unsigned int dim);  Construct from a pointer to member function (multi-dim type). ;  ;  Functor (std::function< double(double const *)> const &f, unsigned int dim);  Construct from a callable object of multi-dimension with the right signature (implementing double operator()(const double *x)). ;  ; Functor * Clone () const override;  Clone a function. ;  ; unsigned int NDim () const override;  Retrieve the dimension of the function. ;  ;  Public Member Functions inherited from ROOT::Math::IBaseFunctionMultiDimTempl< double >; virtual ~IBaseFunctionMultiDimTempl ()=default;  ; virtual bool HasGradient () const;  ; double operator() (const double *x) const;  Evaluate the function at a point x[]. ;  . Private Member Functions; double DoEval (const double *x) const override;  Implementation of the evaluation function. Mu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1Functor.html:88,Load,Loading,88,doc/master/classROOT_1_1Math_1_1Functor.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Functor.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::Functor1D Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::Functor1D Class ReferenceMath » MathCore » Function Classes and Interfaces » Generic Function Evaluation Interfaces. ; Functor1D class for one-dimensional functions. ; It is used to wrap in a very simple and convenient way: . any C++ callable object implementation double operator()( double ) . a free C function of type double ()(double ) . a member function with the correct signature like Foo::Eval(double ). In this case one pass the object pointer and a pointer to the member function (&Foo::Eval) . Definition at line 95 of file Functor.h. Public Member Functions;  Functor1D ()=default;  Default constructor. ;  ; template<class PtrObj , typename MemFn > ;  Functor1D (const PtrObj &p, MemFn memFn);  ;  Functor1D (std::function< double(double)> const &f);  Construct from a callable object with the right signature implementing double operator() (double x). ;  ; Functor1D * Clone () const override;  Clone a function. ;  ;  Public Member Functions inherited from ROOT::Math::IBaseFunctionOneDim; virtual ~IBaseFunctionOneDim ()=default;  ; virtual bool HasGradient () const;  ; double operator() (const double *x) const;  Evaluate the function at a point x[]. ;  ; double operator() (double x) const;  Evaluate the function at a point x. ;  . Private Member Functions; double DoEval (double x) const override;  implementation of the evaluation function. Must be implemented by derived classes ;  . Private Attributes; std::function< double(double)> fFunc;  . Additional Inherited Members;  Public Types inherited from ROOT::Math::IBaseFunctionOneDim; typedef IBaseFunctionOneDim BaseFunc;  . #include <Math/Functor.h>. Inheritance diagram for ROOT::Math::Functor1D:. This browser is not able to show SVG: try Firefox, Chrome, Safa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1Functor1D.html:90,Load,Loading,90,doc/master/classROOT_1_1Math_1_1Functor1D.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Functor1D.html,1,['Load'],['Loading']
Performance,. ROOT: ROOT::Math::GSL1DMinimizerWrapper Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::Math::GSL1DMinimizerWrapper Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » One-dimensional Minimization. ; wrapper class for gsl_min_fminimizer structure ; Definition at line 44 of file GSL1DMinimizerWrapper.h. Public Member Functions;  GSL1DMinimizerWrapper (const GSL1DMinimizerWrapper &)=delete;  ;  GSL1DMinimizerWrapper (const gsl_min_fminimizer_type *T);  ;  GSL1DMinimizerWrapper (GSL1DMinimizerWrapper &&)=delete;  ; virtual ~GSL1DMinimizerWrapper ();  ; gsl_min_fminimizer * Get () const;  ; GSL1DMinimizerWrapper & operator= (const GSL1DMinimizerWrapper &)=delete;  ; GSL1DMinimizerWrapper & operator= (GSL1DMinimizerWrapper &&)=delete;  . Private Attributes; gsl_min_fminimizer * fMinimizer;  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/math/mathmore/src/GSL1DMinimizerWrapper.h>; Constructor & Destructor Documentation. ◆ GSL1DMinimizerWrapper() [1/3]. ROOT::Math::GSL1DMinimizerWrapper::GSL1DMinimizerWrapper ; (; const gsl_min_fminimizer_type * ; T). inline . Definition at line 47 of file GSL1DMinimizerWrapper.h. ◆ ~GSL1DMinimizerWrapper(). virtual ROOT::Math::GSL1DMinimizerWrapper::~GSL1DMinimizerWrapper ; (; ). inlinevirtual . Definition at line 51 of file GSL1DMinimizerWrapper.h. ◆ GSL1DMinimizerWrapper() [2/3]. ROOT::Math::GSL1DMinimizerWrapper::GSL1DMinimizerWrapper ; (; const GSL1DMinimizerWrapper & ; ). delete . ◆ GSL1DMinimizerWrapper() [3/3]. ROOT::Math::GSL1DMinimizerWrapper::GSL1DMinimizerWrapper ; (; GSL1DMinimizerWrapper && ; ). delete . Member Function Documentation. ◆ Get(). gsl_min_fminimizer * ROOT::Math::GSL1DMinimizerWrapper::Get ; (; ); const. inline . Definition at line 61 of file GSL1DMinimizerWrapper.h. ◆ operator=() [1/2]. GSL1DMinimizerWr,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSL1DMinimizerWrapper.html:102,Load,Loading,102,doc/master/classROOT_1_1Math_1_1GSL1DMinimizerWrapper.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSL1DMinimizerWrapper.html,1,['Load'],['Loading']
Performance,. ROOT: ROOT::Math::GSLChebSeries Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::Math::GSLChebSeries Class Reference. ; wrapper class for C struct gsl_cheb_series ; Definition at line 44 of file GSLChebSeries.h. Public Member Functions;  GSLChebSeries (const GSLChebSeries &)=delete;  ;  GSLChebSeries (GSLChebSeries &&)=delete;  ;  GSLChebSeries (size_t n);  ; virtual ~GSLChebSeries ();  ; gsl_cheb_series * get () const;  ; GSLChebSeries & operator= (const GSLChebSeries &)=delete;  ; GSLChebSeries & operator= (GSLChebSeries &&)=delete;  . Private Attributes; gsl_cheb_series * m_cs;  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/math/mathmore/src/GSLChebSeries.h>; Constructor & Destructor Documentation. ◆ GSLChebSeries() [1/3]. ROOT::Math::GSLChebSeries::GSLChebSeries ; (; size_t ; n). inline . Definition at line 47 of file GSLChebSeries.h. ◆ ~GSLChebSeries(). virtual ROOT::Math::GSLChebSeries::~GSLChebSeries ; (; ). inlinevirtual . Definition at line 52 of file GSLChebSeries.h. ◆ GSLChebSeries() [2/3]. ROOT::Math::GSLChebSeries::GSLChebSeries ; (; const GSLChebSeries & ; ). delete . ◆ GSLChebSeries() [3/3]. ROOT::Math::GSLChebSeries::GSLChebSeries ; (; GSLChebSeries && ; ). delete . Member Function Documentation. ◆ get(). gsl_cheb_series * ROOT::Math::GSLChebSeries::get ; (; ); const. inline . Definition at line 62 of file GSLChebSeries.h. ◆ operator=() [1/2]. GSLChebSeries & ROOT::Math::GSLChebSeries::operator= ; (; const GSLChebSeries & ; ). delete . ◆ operator=() [2/2]. GSLChebSeries & ROOT::Math::GSLChebSeries::operator= ; (; GSLChebSeries && ; ). delete . Member Data Documentation. ◆ m_cs. gsl_cheb_series* ROOT::Math::GSLChebSeries::m_cs. private . Definition at line 66 of file GSLChebSeries.h. math/mathmore/src/GSLChebSeries.h. ROOTMathGSLChebSeries. ROOT master - Reference,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLChebSeries.html:94,Load,Loading,94,doc/master/classROOT_1_1Math_1_1GSLChebSeries.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLChebSeries.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::GSLDerivator Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; List of all members ; ROOT::Math::GSLDerivator Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Differentiation. ; Class for computing numerical derivative of a function based on the GSL numerical algorithm This class is implemented using the numerical derivatives algorithms provided by GSL (see GSL Online Manual ). ; Definition at line 62 of file GSLDerivator.h. Public Member Functions;  GSLDerivator ();  Default Constructor of a GSLDerivator class based on GSL numerical differentiation algorithms. ;  ; virtual ~GSLDerivator ();  destructor (no operations) ;  ; double EvalBackward (double x, double h);  Computes the numerical derivative at a point x using an adaptive backward difference algorithm with a step size h. ;  ; double EvalCentral (double x, double h);  Computes the numerical derivative at a point x using an adaptive central difference algorithm with a step size h. ;  ; double EvalForward (double x, double h);  Computes the numerical derivative at a point x using an adaptive forward difference algorithm with a step size h. ;  ; void SetFunction (const IGenFunction &f);  Set the function for calculating the derivatives. ;  ; void SetFunction (GSLFuncPointer f, void *p=nullptr);  Set the function f for evaluating the derivative using a GSL function pointer type. ;  . — Static methods —; int fStatus;  ; double fResult;  ; double fError;  ; GSLFunctionWrapper fFunction;  ; int Status () const;  return the error status of the last integral calculation ;  ; double Result () const;  return the result of the last derivative calculation ;  ; double Error () const;  return the estimate of the absolute error of the last derivative calculation ;  ; static double EvalCentral (const IGenFunction &f, double x, double h);  Computes the numerical derivative of a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLDerivator.html:93,Load,Loading,93,doc/master/classROOT_1_1Math_1_1GSLDerivator.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLDerivator.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::GSLError Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; ROOT::Math::GSLError Class Reference. ; class to change GSL Error handler to use ROOT one. ; It is used only when building the dictionary (G__DICTIONARY is defined) and not in the stand-alone version of the library. In that case the default GSL error handler is used ; Definition at line 38 of file GSLError.cxx. Public Member Functions;  GSLError ();  . Static Public Member Functions; static void Handler (const char *reason, const char *file, int line, int gsl_errno);  . Constructor & Destructor Documentation. ◆ GSLError(). ROOT::Math::GSLError::GSLError ; (; ). inline . Definition at line 42 of file GSLError.cxx. Member Function Documentation. ◆ Handler(). static void ROOT::Math::GSLError::Handler ; (; const char * ; reason, . const char * ; file, . int ; line, . int ; gsl_errno . ). inlinestatic . Definition at line 47 of file GSLError.cxx. The documentation for this class was generated from the following file:; math/mathmore/src/GSLError.cxx. ROOTMathGSLError. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:20 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLError.html:89,Load,Loading,89,doc/master/classROOT_1_1Math_1_1GSLError.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLError.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::GSLFunctionAdapter< UserFunc > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; ROOT::Math::GSLFunctionAdapter< UserFunc > Class Template Reference. ; template<class UserFunc>; class ROOT::Math::GSLFunctionAdapter< UserFunc >Class for adapting any C++ functor class to C function pointers used by GSL. ; The templated C++ function class must implement:; double operator( double x) and if the derivatives are required: double Gradient( double x); This class defines static methods with will be used to fill the gsl_function and gsl_function_fdf structs used by GSL. See for examples the GSL online manual ; Definition at line 63 of file GSLFunctionAdapter.h. Public Member Functions;  GSLFunctionAdapter ();  ; virtual ~GSLFunctionAdapter ();  . Static Public Member Functions; static double Df (double x, void *p);  ; static double F (double x, void *p);  ; static void Fdf (double x, void *p, double *f, double *df);  . #include <Math/GSLFunctionAdapter.h>; Constructor & Destructor Documentation. ◆ GSLFunctionAdapter(). template<class UserFunc > . ROOT::Math::GSLFunctionAdapter< UserFunc >::GSLFunctionAdapter ; (; ). inline . Definition at line 67 of file GSLFunctionAdapter.h. ◆ ~GSLFunctionAdapter(). template<class UserFunc > . virtual ROOT::Math::GSLFunctionAdapter< UserFunc >::~GSLFunctionAdapter ; (; ). inlinevirtual . Definition at line 68 of file GSLFunctionAdapter.h. Member Function Documentation. ◆ Df(). template<class UserFunc > . static double ROOT::Math::GSLFunctionAdapter< UserFunc >::Df ; (; double ; x, . void * ; p . ). inlinestatic . Definition at line 77 of file GSLFunctionAdapter.h. ◆ F(). template<class UserFunc > . static double ROOT::Math::GSLFunctionAdapter< UserFunc >::F ; (; double ; x, . void * ; p . ). inlinestatic . Definition at line 70 of file GSLFunctionAdapter.h. ◆ Fdf(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLFunctionAdapter.html:120,Load,Loading,120,doc/master/classROOT_1_1Math_1_1GSLFunctionAdapter.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLFunctionAdapter.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::GSLFunctionDerivWrapper Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::Math::GSLFunctionDerivWrapper Class Reference. ; class to wrap a gsl_function_fdf (with derivatives) ; Definition at line 105 of file GSLFunctionWrapper.h. Public Member Functions;  GSLFunctionDerivWrapper ();  ; double Derivative (double x);  ; void Fdf (double x, double &f, double &df);  ; gsl_function_fdf * GetFunc ();  ; bool IsValid ();  check if function is valid (has been set) ;  ; double operator() (double x);  ; void SetDerivPointer (GSLFuncPointer f);  ; void SetFdfPointer (GSLFdfPointer f);  ; void SetFuncPointer (GSLFuncPointer f);  ; void SetParams (void *p);  . Private Attributes; gsl_function_fdf fFunc;  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/math/mathmore/src/GSLFunctionWrapper.h>; Constructor & Destructor Documentation. ◆ GSLFunctionDerivWrapper(). ROOT::Math::GSLFunctionDerivWrapper::GSLFunctionDerivWrapper ; (; ). inline . Definition at line 109 of file GSLFunctionWrapper.h. Member Function Documentation. ◆ Derivative(). double ROOT::Math::GSLFunctionDerivWrapper::Derivative ; (; double ; x). inline . Definition at line 129 of file GSLFunctionWrapper.h. ◆ Fdf(). void ROOT::Math::GSLFunctionDerivWrapper::Fdf ; (; double ; x, . double & ; f, . double & ; df . ). inline . Definition at line 131 of file GSLFunctionWrapper.h. ◆ GetFunc(). gsl_function_fdf * ROOT::Math::GSLFunctionDerivWrapper::GetFunc ; (; ). inline . Definition at line 124 of file GSLFunctionWrapper.h. ◆ IsValid(). bool ROOT::Math::GSLFunctionDerivWrapper::IsValid ; (; ). inline . check if function is valid (has been set) ; Definition at line 136 of file GSLFunctionWrapper.h. ◆ operator()(). double ROOT::Math::GSLFunctionDerivWrapper::operator() ; (; double ; x). inline . Definition at line 127 of fil",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLFunctionDerivWrapper.html:104,Load,Loading,104,doc/master/classROOT_1_1Math_1_1GSLFunctionDerivWrapper.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLFunctionDerivWrapper.html,1,['Load'],['Loading']
Performance,. ROOT: ROOT::Math::GSLFunctionWrapper Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::Math::GSLFunctionWrapper Class Reference. ; Wrapper class to the gsl_function C structure. ; This class to fill the GSL C structure gsl_function with the C++ function objcet. Use the class ROOT::Math::GSLFunctionAdapter to adapt the C++ function object to the right signature (function pointer type) requested by GSL ; Definition at line 57 of file GSLFunctionWrapper.h. Public Member Functions;  GSLFunctionWrapper ();  ; GSLFuncPointer FunctionPtr ();  ; gsl_function * GetFunc ();  ; bool IsValid ();  check if function is valid (has been set) ;  ; double operator() (double x);  ; void SetFuncPointer (GSLFuncPointer f);  set in the GSL C struct the pointer to the function evaluation ;  ; template<class FuncType > ; void SetFunction (const FuncType &f);  fill the GSL C struct from a generic C++ callable object implementing operator() ;  ; void SetParams (void *p);  set in the GSL C struct the extra-object pointer ;  . Private Attributes; gsl_function fFunc;  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/math/mathmore/src/GSLFunctionWrapper.h>; Constructor & Destructor Documentation. ◆ GSLFunctionWrapper(). ROOT::Math::GSLFunctionWrapper::GSLFunctionWrapper ; (; ). inline . Definition at line 61 of file GSLFunctionWrapper.h. Member Function Documentation. ◆ FunctionPtr(). GSLFuncPointer ROOT::Math::GSLFunctionWrapper::FunctionPtr ; (; ). inline . Definition at line 85 of file GSLFunctionWrapper.h. ◆ GetFunc(). gsl_function * ROOT::Math::GSLFunctionWrapper::GetFunc ; (; ). inline . Definition at line 83 of file GSLFunctionWrapper.h. ◆ IsValid(). bool ROOT::Math::GSLFunctionWrapper::IsValid ; (; ). inline . check if function is valid (has been set) ; Definition at line 91 of file GSLFunctionWrapper.h.,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLFunctionWrapper.html:99,Load,Loading,99,doc/master/classROOT_1_1Math_1_1GSLFunctionWrapper.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLFunctionWrapper.html,1,['Load'],['Loading']
Performance,. ROOT: ROOT::Math::GSLIntegrationWorkspace Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::Math::GSLIntegrationWorkspace Class Reference. . Definition at line 44 of file GSLIntegrationWorkspace.h. Public Member Functions;  GSLIntegrationWorkspace (size_t n);  ;  ~GSLIntegrationWorkspace ();  ; gsl_integration_workspace * GetWS ();  . Private Attributes; gsl_integration_workspace * fWs;  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/math/mathmore/src/GSLIntegrationWorkspace.h>; Constructor & Destructor Documentation. ◆ GSLIntegrationWorkspace(). ROOT::Math::GSLIntegrationWorkspace::GSLIntegrationWorkspace ; (; size_t ; n). inline . Definition at line 48 of file GSLIntegrationWorkspace.h. ◆ ~GSLIntegrationWorkspace(). ROOT::Math::GSLIntegrationWorkspace::~GSLIntegrationWorkspace ; (; ). inline . Definition at line 51 of file GSLIntegrationWorkspace.h. Member Function Documentation. ◆ GetWS(). gsl_integration_workspace * ROOT::Math::GSLIntegrationWorkspace::GetWS ; (; ). inline . Definition at line 55 of file GSLIntegrationWorkspace.h. Member Data Documentation. ◆ fWs. gsl_integration_workspace* ROOT::Math::GSLIntegrationWorkspace::fWs. private . Definition at line 58 of file GSLIntegrationWorkspace.h. math/mathmore/src/GSLIntegrationWorkspace.h. ROOTMathGSLIntegrationWorkspace. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:20 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrationWorkspace.html:104,Load,Loading,104,doc/master/classROOT_1_1Math_1_1GSLIntegrationWorkspace.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrationWorkspace.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::GSLIntegrator Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::GSLIntegrator Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; Class for performing numerical integration of a function in one dimension. ; It uses the numerical integration algorithms of GSL, which reimplements the algorithms used in the QUADPACK, a numerical integration package written in Fortran.; Various types of adaptive and non-adaptive integration are supported. These include integration over infinite and semi-infinite ranges and singular integrals.; The integration type is selected using the Integration::type enumeration in the class constructor. The default type is adaptive integration with singularity (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule. In the case of ADAPTIVE type, the integration rule can also be specified via the Integration::GKRule. The default rule is 31 points.; In the case of integration over infinite and semi-infinite ranges, the type used is always ADAPTIVESINGULAR applying a transformation from the original interval into (0,1).; The ADAPTIVESINGULAR type is the most sophicticated type. When performances are important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or ADAPTIVE with a lower Gauss-Kronrod rule.; For detailed description on GSL integration algorithms see the GSL Manual. ; Definition at line 90 of file GSLIntegrator.h. Public Member Functions;  GSLIntegrator (const char *type, int rule, double absTol, double relTol, size_t size);  constructor of GSL Integrator. ;  ;  GSLIntegrator (const Integration::Type type, const Integration::GKRule rule, double absTol=1.E-9, double relTol=1E-6, size_t size=1",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html:94,Load,Loading,94,doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,2,"['Load', 'perform']","['Loading', 'performing']"
Performance,". ROOT: ROOT::Math::GSLInterpolator Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::Math::GSLInterpolator Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Interpolation Classes. ; Interpolation class based on GSL interpolation functions. ; Definition at line 55 of file GSLInterpolator.h. Public Member Functions;  GSLInterpolator (const GSLInterpolator &)=delete;  ;  GSLInterpolator (const Interpolation::Type type, const std::vector< double > &x, const std::vector< double > &y);  ;  GSLInterpolator (GSLInterpolator &&)=delete;  ;  GSLInterpolator (unsigned int ndata, Interpolation::Type type);  ; virtual ~GSLInterpolator ();  ; double Deriv (double x) const;  ; double Deriv2 (double x) const;  ; double Eval (double x) const;  ; bool Init (unsigned int ndata, const double *x, const double *y);  ; double Integ (double a, double b) const;  ; std::string Name ();  ; GSLInterpolator & operator= (const GSLInterpolator &)=delete;  ; GSLInterpolator & operator= (GSLInterpolator &&)=delete;  . Private Attributes; gsl_interp_accel * fAccel;  ; const gsl_interp_type * fInterpType;  ; bool fResetNErrors;  ; gsl_spline * fSpline;  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/math/mathmore/src/GSLInterpolator.h>; Constructor & Destructor Documentation. ◆ GSLInterpolator() [1/4]. ROOT::Math::GSLInterpolator::GSLInterpolator ; (; unsigned int ; ndata, . Interpolation::Type ; type . ). Definition at line 41 of file GSLInterpolator.cxx. ◆ GSLInterpolator() [2/4]. ROOT::Math::GSLInterpolator::GSLInterpolator ; (; const Interpolation::Type ; type, . const std::vector< double > & ; x, . const std::vector< double > & ; y . ). ◆ ~GSLInterpolator(). ROOT::Math::GSLInterpolator::~GSLInterpolator ; (; ). virtual . Definition at line 115 of file GSLInterpolator.cxx. ◆ GSLInterpolat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLInterpolator.html:96,Load,Loading,96,doc/master/classROOT_1_1Math_1_1GSLInterpolator.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLInterpolator.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::GSLMCIntegrationWorkspace Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; List of all members ; ROOT::Math::GSLMCIntegrationWorkspace Class Referenceabstract. . Definition at line 49 of file GSLMCIntegrationWorkspace.h. Public Member Functions;  GSLMCIntegrationWorkspace ();  ; virtual ~GSLMCIntegrationWorkspace ();  ; virtual void Clear ();  free the workspace deleting the GSL pointer ;  ; virtual bool Init (size_t dim)=0;  initialize the workspace creating the GSL pointer if it is not there ;  ; virtual size_t NDim () const;  ; virtual std::unique_ptr< ROOT::Math::IOptions > Options () const =0;  retrieve option pointer corresponding to parameters create a new object to be managed by the user ;  ; virtual bool ReInit ()=0;  re-initialize an existing the workspace ;  ; virtual void SetOptions (const ROOT::Math::IOptions &)=0;  set options ;  ; virtual MCIntegration::Type Type () const =0;  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/math/mathmore/src/GSLMCIntegrationWorkspace.h>. Inheritance diagram for ROOT::Math::GSLMCIntegrationWorkspace:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ GSLMCIntegrationWorkspace(). ROOT::Math::GSLMCIntegrationWorkspace::GSLMCIntegrationWorkspace ; (; ). inline . Definition at line 53 of file GSLMCIntegrationWorkspace.h. ◆ ~GSLMCIntegrationWorkspace(). virtual ROOT::Math::GSLMCIntegrationWorkspace::~GSLMCIntegrationWorkspace ; (; ). inlinevirtual . Definition at line 55 of file GSLMCIntegrationWorkspace.h. Member Function Documentation. ◆ Clear(). virtual void ROOT::Math::GSLMCIntegrationWorkspace::Clear ; (; ). inlinevirtual . free the workspace deleting the GSL pointer ; Reimplemented in ROOT::Math::GSLVegasIntegrationWorkspace, ROOT::Math::GSLMiserIntegrationWorkspace, and ROOT::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMCIntegrationWorkspace.html:106,Load,Loading,106,doc/master/classROOT_1_1Math_1_1GSLMCIntegrationWorkspace.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMCIntegrationWorkspace.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::GSLMCIntegrator Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::GSLMCIntegrator Class Reference. . Definition at line 74 of file GSLMCIntegrator.h. Public Types; typedef double(* GSLMonteFuncPointer) (double *, size_t, void *);  ; typedef MCIntegration::Type Type;  . Public Member Functions;  GSLMCIntegrator (const char *type, double absTol, double relTol, unsigned int calls);  constructor of GSL MCIntegrator. ;  ;  GSLMCIntegrator (MCIntegration::Type type=MCIntegration::kVEGAS, double absTol=-1, double relTol=-1, unsigned int calls=0);  constructor of GSL MCIntegrator. ;  ;  ~GSLMCIntegrator () override;  destructor ;  ; double ChiSqr ();  returns chi-squared per degree of freedom for the estimate of the integral in the Vegas algorithm ;  ; double Error () const override;  return the estimate of the absolute Error of the last Integral calculation ;  ; std::unique_ptr< ROOT::Math::IOptions > ExtraOptions () const;  get the specific options (for Vegas or Miser) in term of string- name. ;  ; MCIntegration::Type GetType () const;  return the type (need to be called GetType to avoid a conflict with typedef) ;  ; const char * GetTypeName () const;  return the name ;  ; double Integral (const double *a, const double *b) override;  evaluate the integral using the previously defined function ;  ; double Integral (const GSLMonteFuncPointer &f, unsigned int dim, double *a, double *b, void *p=nullptr);  evaluate the Integral of a function f over the defined hypercube (a,b) ;  ; int NEval () const override;  return number of function evaluations in calculating the integral (This is an fixed by the user) ;  ; ROOT::Math::IntegratorMultiDimOptions Options () const override;  get the option used for the integration ;  ; double Result (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html:96,Load,Loading,96,doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::GSLMinimizer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::Math::GSLMinimizer Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Multi-dimensional Minimization. ; GSLMinimizer class. ; Implementation of the ROOT::Math::Minimizer interface using the GSL multi-dimensional minimization algorithms.; See GSL doc from more info on the GSL minimization algorithms.; The class implements the ROOT::Math::Minimizer interface and can be instantiated using the ROOT plugin manager (plugin name is ""GSLMultiMin""). The various minimization algorithms (conjugatefr, conjugatepr, bfgs, etc..) can be passed as enumerations and also as a string. The default algorithm is conjugatefr (Fletcher-Reeves conjugate gradient algorithm). ; Definition at line 79 of file GSLMinimizer.h. Public Member Functions;  GSLMinimizer (const char *type);  Constructor with a string giving name of algorithm. ;  ;  GSLMinimizer (ROOT::Math::EGSLMinimizerType type=ROOT::Math::kConjugateFR);  Default constructor. ;  ;  ~GSLMinimizer () override;  Destructor. ;  ; double CovMatrix (unsigned int, unsigned int) const override;  return covariance matrices elements if the variable is fixed the matrix is zero The ordering of the variables is the same as in errors ;  ; double Edm () const override;  return expected distance reached from the minimum ;  ; const double * Errors () const override;  return errors at the minimum ;  ; const double * MinGradient () const override;  return pointer to gradient values at the minimum ;  ; bool Minimize () override;  method to perform the minimization ;  ; unsigned int NCalls () const override;  number of function calls to reach the minimum ;  ; bool ProvidesError () const override;  minimizer provides error and error matrix ;  ; void SetFunction (const ROOT::Math::IMultiGenFunction &func) ov",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html:93,Load,Loading,93,doc/master/classROOT_1_1Math_1_1GSLMinimizer.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::GSLMinimizer1D Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; ROOT::Math::GSLMinimizer1D Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » One-dimensional Minimization. ; Minimizer for arbitrary one dimensional functions. ; Implemented using GSL, for detailed description see: GSL online doc; The algorithms uspported are only bracketing algorithm which do not use derivatives information. The algorithms which can be chosen at construction time are GOLDENSECTION, which is the simplest method but the slowest and BRENT (the default one) which combines the golden section with a parabolic interpolation.; This class does not support copying ; Definition at line 81 of file GSLMinimizer1D.h. Public Member Functions;  GSLMinimizer1D (const GSLMinimizer1D &)=delete;  ;  GSLMinimizer1D (GSLMinimizer1D &&)=delete;  ;  GSLMinimizer1D (Minim1D::Type type=Minim1D::kBRENT);  Construct the minimizer passing the minimizer type using the Minim1D::Algorithm enumeration. ;  ;  ~GSLMinimizer1D () override;  Destructor: free allocated resources. ;  ; double FValLower () const override;  Return function value at current lower bound of the minimization interval. ;  ; double FValMinimum () const override;  Return function value at current estimate of the minimum. ;  ; double FValUpper () const override;  Return function value at current upper bound of the minimization interval. ;  ; int Iterate ();  Perform a minimizer iteration and if an unexpected problem occurs then an error code will be returned. ;  ; int Iterations () const override;  Return number of iteration used to find minimum. ;  ; bool Minimize (int maxIter, double absTol, double relTol) override;  Find minimum position iterating until convergence specified by the absolute and relative tolerance or the maximum num",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer1D.html:95,Load,Loading,95,doc/master/classROOT_1_1Math_1_1GSLMinimizer1D.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer1D.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::GSLMiserIntegrationWorkspace Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::GSLMiserIntegrationWorkspace Class Reference. ; Workspace for MISER. ; Definition at line 162 of file GSLMCIntegrationWorkspace.h. Public Member Functions;  GSLMiserIntegrationWorkspace (size_t dim=0);  ; void Clear () override;  free the workspace deleting the GSL pointer ;  ; gsl_monte_miser_state * GetWS ();  ; bool Init (size_t dim) override;  initialize the workspace creating the GSL pointer if it is not there ;  ; size_t NDim () const override;  ; std::unique_ptr< ROOT::Math::IOptions > Options () const override;  retrieve option pointer corresponding to parameters create a new object to be managed by the user ;  ; MiserParameters & Parameters ();  ; const MiserParameters & Parameters () const;  ; bool ReInit () override;  re-initialize an existing the workspace ;  ; virtual void SetOptions (const ROOT::Math::IOptions &opt) override;  set options ;  ; void SetParameters (const MiserParameters &p);  ; MCIntegration::Type Type () const override;  ;  Public Member Functions inherited from ROOT::Math::GSLMCIntegrationWorkspace;  GSLMCIntegrationWorkspace ();  ; virtual ~GSLMCIntegrationWorkspace ();  . Private Member Functions; void SetMiserParameters ();  . Private Attributes; bool fHaveNewParams;  ; MiserParameters fParams;  ; gsl_monte_miser_state * fWs;  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/math/mathmore/src/GSLMCIntegrationWorkspace.h>. Inheritance diagram for ROOT::Math::GSLMiserIntegrationWorkspace:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ GSLMiserIntegrationWorkspace(). ROOT::Math::GSLMiserIntegrationWorkspace::GSLMiserIntegrationWorksp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMiserIntegrationWorkspace.html:109,Load,Loading,109,doc/master/classROOT_1_1Math_1_1GSLMiserIntegrationWorkspace.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMiserIntegrationWorkspace.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::GSLMonteFunctionAdapter< UserFunc > Struct Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Static Public Member Functions |; List of all members ; ROOT::Math::GSLMonteFunctionAdapter< UserFunc > Struct Template Reference. ; template<class UserFunc>; struct ROOT::Math::GSLMonteFunctionAdapter< UserFunc >; Definition at line 59 of file GSLMonteFunctionAdapter.h. Static Public Member Functions; static double F (double *x, size_t, void *p);  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/math/mathmore/src/GSLMonteFunctionAdapter.h>; Member Function Documentation. ◆ F(). template<class UserFunc > . static double ROOT::Math::GSLMonteFunctionAdapter< UserFunc >::F ; (; double * ; x, . size_t ; , . void * ; p . ). inlinestatic . Definition at line 61 of file GSLMonteFunctionAdapter.h. The documentation for this struct was generated from the following file:; math/mathmore/src/GSLMonteFunctionAdapter.h. ROOTMathGSLMonteFunctionAdapter. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:21 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structROOT_1_1Math_1_1GSLMonteFunctionAdapter.html:126,Load,Loading,126,doc/master/structROOT_1_1Math_1_1GSLMonteFunctionAdapter.html,https://root.cern,https://root.cern/doc/master/structROOT_1_1Math_1_1GSLMonteFunctionAdapter.html,1,['Load'],['Loading']
Performance,. ROOT: ROOT::Math::GSLMonteFunctionWrapper Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::Math::GSLMonteFunctionWrapper Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration » Numerical Monte Carlo Integration Classes. ; wrapper to a multi-dim function withtout derivatives for Monte Carlo multi-dimensional integration algorithm ; Definition at line 57 of file GSLMonteFunctionWrapper.h. Public Member Functions;  GSLMonteFunctionWrapper ();  ; gsl_monte_function * GetFunc ();  ; double operator() (const double *x);  evaluate the function and derivatives ;  ; void SetDim (unsigned int n);  ; void SetFuncPointer (GSLMonteFuncPointer f);  ; template<class FuncType > ; void SetFunction (const FuncType &f);  Fill gsl function structure from a C++ Function class. ;  ; void SetParams (void *p);  . Private Attributes; gsl_monte_function fFunc;  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/math/mathmore/src/GSLMonteFunctionWrapper.h>; Constructor & Destructor Documentation. ◆ GSLMonteFunctionWrapper(). ROOT::Math::GSLMonteFunctionWrapper::GSLMonteFunctionWrapper ; (; ). inline . Definition at line 61 of file GSLMonteFunctionWrapper.h. Member Function Documentation. ◆ GetFunc(). gsl_monte_function * ROOT::Math::GSLMonteFunctionWrapper::GetFunc ; (; ). inline . Definition at line 82 of file GSLMonteFunctionWrapper.h. ◆ operator()(). double ROOT::Math::GSLMonteFunctionWrapper::operator() ; (; const double * ; x). inline . evaluate the function and derivatives ; Definition at line 85 of file GSLMonteFunctionWrapper.h. ◆ SetDim(). void ROOT::Math::GSLMonteFunctionWrapper::SetDim ; (; unsigned int ; n). inline . Definition at line 69 of file GSLMonteFunctionWrapper.h. ◆ SetFuncPointer(). void ROOT::Math::GSLMonteFunctionWrapper::SetFuncPointer ; (; GSL,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMonteFunctionWrapper.html:104,Load,Loading,104,doc/master/classROOT_1_1Math_1_1GSLMonteFunctionWrapper.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMonteFunctionWrapper.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::GSLMultiFit Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::Math::GSLMultiFit Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Multi-dimensional Minimization. ; GSLMultiFit, internal class for implementing GSL non linear least square GSL fitting. ; Definition at line 53 of file GSLMultiFit.h. Public Member Functions;  GSLMultiFit (const gsl_multifit_fdfsolver_type *type=nullptr);  Default constructor No need to specify the type so far since only one solver exists so far. ;  ;  GSLMultiFit (const GSLMultiFit &)=delete;  ;  GSLMultiFit (GSLMultiFit &&)=delete;  ;  ~GSLMultiFit ();  Destructor (no operations) ;  ; const double * CovarMatrix () const;  return covariance matrix of the parameters ;  ; void CreateSolver (unsigned int npoints, unsigned int npar);  create the minimizer from the type and size of number of fitting points and number of parameters ;  ; double Edm () const;  ; const double * Gradient () const;  gradient value at the minimum ;  ; int Iterate ();  ; std::string Name () const;  ; GSLMultiFit & operator= (const GSLMultiFit &rhs)=delete;  ; GSLMultiFit & operator= (GSLMultiFit &&rhs)=delete;  ; template<class Func > ; int Set (const std::vector< Func > &funcVec, const double *x);  set the solver parameters ;  ; int TestDelta (double absTol, double relTol) const;  test using abs and relative tolerance |dx| < absTol + relTol*|x| for every component ;  ; int TestGradient (double absTol) const;  test gradient (ask from solver gradient vector) ;  ; const double * X () const;  parameter values at the minimum ;  . Private Attributes; gsl_matrix * fCov;  ; GSLMultiFitFunctionWrapper fFunc;  ; gsl_multifit_fdfsolver * fSolver;  ; gsl_vector * fTmp;  ; const gsl_multifit_fdfsolver_type * fType;  ; gsl_vector * fVec;  . #include </home/sftnight/build/workspace/root-makedo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiFit.html:92,Load,Loading,92,doc/master/classROOT_1_1Math_1_1GSLMultiFit.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiFit.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::GSLMultiFitFunctionAdapter< FuncVector > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Static Public Member Functions |; List of all members ; ROOT::Math::GSLMultiFitFunctionAdapter< FuncVector > Class Template ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Multi-dimensional Minimization. ; template<class FuncVector>; class ROOT::Math::GSLMultiFitFunctionAdapter< FuncVector >Class for adapting a C++ functor class to C function pointers used by GSL MultiFit Algorithm The templated C++ function class must implement: ; double operator( const double * x) and if the derivatives are required: void Gradient( const double * x, double * g) and void FdF( const double * x, double &f, double * g); This class defines static methods with will be used to fill the gsl_multimin_function and gsl_multimin_function_fdf structs used by GSL. See for examples the GSL online manual ; Definition at line 69 of file GSLMultiFitFunctionAdapter.h. Static Public Member Functions; static int Df (const gsl_vector *x, void *p, gsl_matrix *h);  ; static int F (const gsl_vector *x, void *p, gsl_vector *f);  ; static int FDf (const gsl_vector *x, void *p, gsl_vector *f, gsl_matrix *h);  evaluate derivative and function at the same time ;  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/math/mathmore/src/GSLMultiFitFunctionAdapter.h>; Member Function Documentation. ◆ Df(). template<class FuncVector > . static int ROOT::Math::GSLMultiFitFunctionAdapter< FuncVector >::Df ; (; const gsl_vector * ; x, . void * ; p, . gsl_matrix * ; h . ). inlinestatic . Definition at line 86 of file GSLMultiFitFunctionAdapter.h. ◆ F(). template<class FuncVector > . static int ROOT::Math::GSLMultiFitFunctionAdapter< FuncVector >::F ; (; const gsl_vector * ; x, . void * ; p, . gsl_vector * ; f . ). inlinestatic . Definition at line 73 of file GSLMultiFitFunctionAda",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiFitFunctionAdapter.html:130,Load,Loading,130,doc/master/classROOT_1_1Math_1_1GSLMultiFitFunctionAdapter.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiFitFunctionAdapter.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::GSLMultiFitFunctionWrapper Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::Math::GSLMultiFitFunctionWrapper Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Multi-dimensional Minimization. ; wrapper to a multi-dim function withtout derivatives for multi-dimensional minimization algorithm ; Definition at line 58 of file GSLMultiFitFunctionWrapper.h. Public Member Functions;  GSLMultiFitFunctionWrapper ();  ; gsl_multifit_function_fdf * GetFunc ();  ; template<class FuncVector > ; void SetFunction (const FuncVector &f, unsigned int nres, unsigned int npar);  Fill gsl function structure from a C++ function iterator and size and number of residuals. ;  . Private Attributes; gsl_multifit_function_fdf fFunc;  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/math/mathmore/src/GSLMultiFitFunctionWrapper.h>; Constructor & Destructor Documentation. ◆ GSLMultiFitFunctionWrapper(). ROOT::Math::GSLMultiFitFunctionWrapper::GSLMultiFitFunctionWrapper ; (; ). inline . Definition at line 62 of file GSLMultiFitFunctionWrapper.h. Member Function Documentation. ◆ GetFunc(). gsl_multifit_function_fdf * ROOT::Math::GSLMultiFitFunctionWrapper::GetFunc ; (; ). inline . Definition at line 90 of file GSLMultiFitFunctionWrapper.h. ◆ SetFunction(). template<class FuncVector > . void ROOT::Math::GSLMultiFitFunctionWrapper::SetFunction ; (; const FuncVector & ; f, . unsigned int ; nres, . unsigned int ; npar . ). inline . Fill gsl function structure from a C++ function iterator and size and number of residuals. ; Definition at line 79 of file GSLMultiFitFunctionWrapper.h. Member Data Documentation. ◆ fFunc. gsl_multifit_function_fdf ROOT::Math::GSLMultiFitFunctionWrapper::fFunc. private . Definition at line 95 of file GSLMultiFitFunctionWrapper.h. math/mathmore/src/GS",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiFitFunctionWrapper.html:107,Load,Loading,107,doc/master/classROOT_1_1Math_1_1GSLMultiFitFunctionWrapper.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiFitFunctionWrapper.html,1,['Load'],['Loading']
Performance,. ROOT: ROOT::Math::GSLMultiMinDerivFunctionWrapper Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::Math::GSLMultiMinDerivFunctionWrapper Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Multi-dimensional Minimization. ; Wrapper for a multi-dimensional function with derivatives used in GSL multidim minimization algorithm. ; Definition at line 104 of file GSLMultiMinFunctionWrapper.h. Public Member Functions;  GSLMultiMinDerivFunctionWrapper ();  ; gsl_multimin_function_fdf * GetFunc ();  ; bool IsValid ();  check if function is valid (has been set) ;  ; void SetDerivPointer (GSLMultiMinDfPointer f);  ; void SetDim (unsigned int n);  ; void SetFdfPointer (GSLMultiMinFdfPointer f);  ; void SetFuncPointer (GSLMultiMinFuncPointer f);  ; template<class FuncType > ; void SetFunction (const FuncType &f);  Fill gsl function structure from a C++ Function class. ;  ; void SetParams (void *p);  . Private Attributes; gsl_multimin_function_fdf fFunc;  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/math/mathmore/src/GSLMultiMinFunctionWrapper.h>; Constructor & Destructor Documentation. ◆ GSLMultiMinDerivFunctionWrapper(). ROOT::Math::GSLMultiMinDerivFunctionWrapper::GSLMultiMinDerivFunctionWrapper ; (; ). inline . Definition at line 108 of file GSLMultiMinFunctionWrapper.h. Member Function Documentation. ◆ GetFunc(). gsl_multimin_function_fdf * ROOT::Math::GSLMultiMinDerivFunctionWrapper::GetFunc ; (; ). inline . Definition at line 136 of file GSLMultiMinFunctionWrapper.h. ◆ IsValid(). bool ROOT::Math::GSLMultiMinDerivFunctionWrapper::IsValid ; (; ). inline . check if function is valid (has been set) ; Definition at line 147 of file GSLMultiMinFunctionWrapper.h. ◆ SetDerivPointer(). void ROOT::Math::GSLMultiMinDerivFunctionWrapper::SetDerivPointer ; (; GSLMultiMinDfPoin,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiMinDerivFunctionWrapper.html:112,Load,Loading,112,doc/master/classROOT_1_1Math_1_1GSLMultiMinDerivFunctionWrapper.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiMinDerivFunctionWrapper.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::GSLMultiMinFunctionAdapter< UserFunc > Struct Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Static Public Member Functions |; List of all members ; ROOT::Math::GSLMultiMinFunctionAdapter< UserFunc > Struct Template ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Multi-dimensional Minimization. ; template<class UserFunc>; struct ROOT::Math::GSLMultiMinFunctionAdapter< UserFunc >Class for adapting any multi-dimension C++ functor class to C function pointers used by GSL MultiMin algorithms. ; The templated C++ function class must implement:; double operator( const double * x) and if the derivatives are required: void Gradient( const double * x, double * g); This class defines static methods with will be used to fill the gsl_multimin_function and gsl_multimin_function_fdf structs used by GSL. See for examples the GSL online manual ; Definition at line 66 of file GSLMultiMinFunctionAdapter.h. Static Public Member Functions; static void Df (const gsl_vector *x, void *p, gsl_vector *g);  ; static double F (const gsl_vector *x, void *p);  ; static void Fdf (const gsl_vector *x, void *p, double *f, gsl_vector *g);  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/math/mathmore/src/GSLMultiMinFunctionAdapter.h>; Member Function Documentation. ◆ Df(). template<class UserFunc > . static void ROOT::Math::GSLMultiMinFunctionAdapter< UserFunc >::Df ; (; const gsl_vector * ; x, . void * ; p, . gsl_vector * ; g . ). inlinestatic . Definition at line 76 of file GSLMultiMinFunctionAdapter.h. ◆ F(). template<class UserFunc > . static double ROOT::Math::GSLMultiMinFunctionAdapter< UserFunc >::F ; (; const gsl_vector * ; x, . void * ; p . ). inlinestatic . Definition at line 68 of file GSLMultiMinFunctionAdapter.h. ◆ Fdf(). template<class UserFunc > . static void ROOT::Math::GSLMultiMinFunctionAdapter< UserFunc >::Fdf ; (; const gsl_ve",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structROOT_1_1Math_1_1GSLMultiMinFunctionAdapter.html:129,Load,Loading,129,doc/master/structROOT_1_1Math_1_1GSLMultiMinFunctionAdapter.html,https://root.cern,https://root.cern/doc/master/structROOT_1_1Math_1_1GSLMultiMinFunctionAdapter.html,1,['Load'],['Loading']
Performance,. ROOT: ROOT::Math::GSLMultiMinFunctionWrapper Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::Math::GSLMultiMinFunctionWrapper Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Multi-dimensional Minimization. ; wrapper to a multi-dim function withtout derivatives for multi-dimensional minimization algorithm ; Definition at line 58 of file GSLMultiMinFunctionWrapper.h. Public Member Functions;  GSLMultiMinFunctionWrapper ();  ; gsl_multimin_function * GetFunc ();  ; bool IsValid ();  ; void SetDim (unsigned int n);  ; void SetFuncPointer (GSLMultiMinFuncPointer f);  ; template<class FuncType > ; void SetFunction (const FuncType &f);  Fill gsl function structure from a C++ Function class. ;  ; void SetParams (void *p);  . Private Attributes; gsl_multimin_function fFunc;  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/math/mathmore/src/GSLMultiMinFunctionWrapper.h>; Constructor & Destructor Documentation. ◆ GSLMultiMinFunctionWrapper(). ROOT::Math::GSLMultiMinFunctionWrapper::GSLMultiMinFunctionWrapper ; (; ). inline . Definition at line 62 of file GSLMultiMinFunctionWrapper.h. Member Function Documentation. ◆ GetFunc(). gsl_multimin_function * ROOT::Math::GSLMultiMinFunctionWrapper::GetFunc ; (; ). inline . Definition at line 83 of file GSLMultiMinFunctionWrapper.h. ◆ IsValid(). bool ROOT::Math::GSLMultiMinFunctionWrapper::IsValid ; (; ). inline . Definition at line 85 of file GSLMultiMinFunctionWrapper.h. ◆ SetDim(). void ROOT::Math::GSLMultiMinFunctionWrapper::SetDim ; (; unsigned int ; n). inline . Definition at line 70 of file GSLMultiMinFunctionWrapper.h. ◆ SetFuncPointer(). void ROOT::Math::GSLMultiMinFunctionWrapper::SetFuncPointer ; (; GSLMultiMinFuncPointer ; f). inline . Definition at line 69 of file GSLMultiMinFunctionWrapper.h. ◆ SetFunction(). t,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiMinFunctionWrapper.html:107,Load,Loading,107,doc/master/classROOT_1_1Math_1_1GSLMultiMinFunctionWrapper.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiMinFunctionWrapper.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::GSLMultiMinimizer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::Math::GSLMultiMinimizer Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Multi-dimensional Minimization. ; GSLMultiMinimizer class , for minimizing multi-dimensional function using derivatives. ; Definition at line 54 of file GSLMultiMinimizer.h. Public Member Functions;  GSLMultiMinimizer (const GSLMultiMinimizer &)=delete;  ;  GSLMultiMinimizer (GSLMultiMinimizer &&)=delete;  ;  GSLMultiMinimizer (ROOT::Math::EGSLMinimizerType type);  Default constructor. ;  ;  ~GSLMultiMinimizer ();  Destructor. ;  ; void CreateMinimizer (unsigned int n);  create the minimizer from the type and size ;  ; double * Gradient () const;  gradient value at the minimum ;  ; int Iterate ();  ; double Minimum () const;  function value at the minimum ;  ; std::string Name () const;  ; GSLMultiMinimizer & operator= (const GSLMultiMinimizer &rhs)=delete;  ; GSLMultiMinimizer & operator= (GSLMultiMinimizer &&rhs)=delete;  ; int Restart ();  restart minimization from current point ;  ; int Set (const ROOT::Math::IMultiGradFunction &func, const double *x, double stepSize, double tol);  set the function to be minimize the initial minimizer parameters, step size and tolerance in the line search ;  ; int TestGradient (const double *g, double absTol) const;  test gradient (require a vector gradient) ;  ; int TestGradient (double absTol) const;  test gradient (ask from minimizer gradient vector) ;  ; double * X () const;  x values at the minimum ;  . Private Attributes; GSLMultiMinDerivFunctionWrapper fFunc;  ; gsl_multimin_fdfminimizer * fMinimizer;  ; const gsl_multimin_fdfminimizer_type * fType;  ; gsl_vector * fVec;  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/math/mathmore/src/GSLMultiMinimizer.h>",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiMinimizer.html:98,Load,Loading,98,doc/master/classROOT_1_1Math_1_1GSLMultiMinimizer.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiMinimizer.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::GSLMultiRootBaseSolver Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; List of all members ; ROOT::Math::GSLMultiRootBaseSolver Class ReferenceabstractMath » MathCore | Math » MathMore » Numerical Algorithms » Multidimensional ROOT finding. ; GSLMultiRootBaseSolver, internal class for implementing GSL multi-root finders This is the base class for GSLMultiRootSolver (solver not using derivatives) and GSLMUltiRootDerivSolver (solver using derivatives) ; Definition at line 57 of file GSLMultiRootSolver.h. Public Member Functions; virtual ~GSLMultiRootBaseSolver ();  virtual Destructor ;  ; const double * Dx () const;  return function steps ;  ; const double * FVal () const;  return function values ;  ; bool InitSolver (const std::vector< ROOT::Math::IMultiGenFunction * > &funcVec, const double *x);  init the solver with function list and initial values ;  ; virtual int Iterate ()=0;  perform an iteration ;  ; virtual const std::string & Name () const =0;  return name ;  ; int TestDelta (double absTol, double relTol) const;  test using abs and relative tolerance |dx| < absTol + relTol*|x| for every component ;  ; int TestResidual (double absTol) const;  test using abs tolerance Sum |f|_i < absTol ;  ; const double * X () const;  solution values at the current iteration ;  . Private Member Functions; virtual gsl_vector * GetDx () const =0;  ; virtual gsl_vector * GetF () const =0;  ; virtual gsl_vector * GetRoot () const =0;  ; virtual int SetSolver (const std::vector< ROOT::Math::IMultiGenFunction * > &funcVec, const double *x)=0;  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/math/mathmore/src/GSLMultiRootSolver.h>. Inheritance diagram for ROOT::Math::GSLMultiRootBaseSolver:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootBaseSolver.html:103,Load,Loading,103,doc/master/classROOT_1_1Math_1_1GSLMultiRootBaseSolver.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootBaseSolver.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::GSLMultiRootDerivFunctionWrapper Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::Math::GSLMultiRootDerivFunctionWrapper Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Multidimensional ROOT finding. ; wrapper to a multi-dim function with derivatives for multi roots algorithm ; Definition at line 96 of file GSLMultiRootFunctionWrapper.h. Public Member Functions;  GSLMultiRootDerivFunctionWrapper ();  ; gsl_multiroot_function_fdf * GetFunctions ();  ; template<class FuncVector > ; void SetFunctions (const FuncVector &f, unsigned int n);  Fill gsl function structure from a C++ function iterator and size and number of residuals. ;  . Private Attributes; gsl_multiroot_function_fdf fFunc;  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/math/mathmore/src/GSLMultiRootFunctionWrapper.h>; Constructor & Destructor Documentation. ◆ GSLMultiRootDerivFunctionWrapper(). ROOT::Math::GSLMultiRootDerivFunctionWrapper::GSLMultiRootDerivFunctionWrapper ; (; ). inline . Definition at line 100 of file GSLMultiRootFunctionWrapper.h. Member Function Documentation. ◆ GetFunctions(). gsl_multiroot_function_fdf * ROOT::Math::GSLMultiRootDerivFunctionWrapper::GetFunctions ; (; ). inline . Definition at line 122 of file GSLMultiRootFunctionWrapper.h. ◆ SetFunctions(). template<class FuncVector > . void ROOT::Math::GSLMultiRootDerivFunctionWrapper::SetFunctions ; (; const FuncVector & ; f, . unsigned int ; n . ). inline . Fill gsl function structure from a C++ function iterator and size and number of residuals. ; Definition at line 112 of file GSLMultiRootFunctionWrapper.h. Member Data Documentation. ◆ fFunc. gsl_multiroot_function_fdf ROOT::Math::GSLMultiRootDerivFunctionWrapper::fFunc. private . Definition at line 127 of file GSLMultiRootFunctionWrapper.h. math/m",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootDerivFunctionWrapper.html:113,Load,Loading,113,doc/master/classROOT_1_1Math_1_1GSLMultiRootDerivFunctionWrapper.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootDerivFunctionWrapper.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::GSLMultiRootDerivSolver Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::Math::GSLMultiRootDerivSolver Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Multidimensional ROOT finding. ; GSLMultiRootDerivSolver, internal class for implementing GSL multi-root finders using derivatives. ; Definition at line 255 of file GSLMultiRootSolver.h. Public Member Functions;  GSLMultiRootDerivSolver (const gsl_multiroot_fdfsolver_type *type, int n);  Constructor. ;  ;  GSLMultiRootDerivSolver (const GSLMultiRootDerivSolver &)=delete;  ;  GSLMultiRootDerivSolver (GSLMultiRootDerivSolver &&)=delete;  ;  ~GSLMultiRootDerivSolver () override;  Destructor (no operations) ;  ; void CreateSolver (const gsl_multiroot_fdfsolver_type *type, unsigned int n);  create the solver from the type and size of number of fitting points and number of parameters ;  ; gsl_vector * GetDx () const override;  return function steps ;  ; gsl_vector * GetF () const override;  return function values ;  ; gsl_vector * GetRoot () const override;  solution values at the current iteration ;  ; int Iterate () override;  perform an iteration ;  ; const std::string & Name () const override;  return name ;  ; GSLMultiRootDerivSolver & operator= (const GSLMultiRootDerivSolver &rhs)=delete;  ; GSLMultiRootDerivSolver & operator= (GSLMultiRootDerivSolver &&rhs)=delete;  ; int SetSolver (const std::vector< ROOT::Math::IMultiGenFunction * > &funcVec, const double *x) override;  set the solver parameters for the case of derivative ;  ;  Public Member Functions inherited from ROOT::Math::GSLMultiRootBaseSolver; virtual ~GSLMultiRootBaseSolver ();  virtual Destructor ;  ; const double * Dx () const;  return function steps ;  ; const double * FVal () const;  return function values ;  ; bool InitSolver (const std::vector< ROOT::Math::IMu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootDerivSolver.html:104,Load,Loading,104,doc/master/classROOT_1_1Math_1_1GSLMultiRootDerivSolver.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootDerivSolver.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::GSLMultiRootFinder Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; ROOT::Math::GSLMultiRootFinder Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Multidimensional ROOT finding. ; Class for Multidimensional root finding algorithms bassed on GSL. ; This class is used to solve a non-linear system of equations:; f1(x1,....xn) = 0 f2(x1,....xn) = 0 .................. fn(x1,....xn) = 0; See the GSL online manual for information on the GSL MultiRoot finding algorithms; The available GSL algorithms require the derivatives of the supplied functions or not (they are computed internally by GSL). In the first case the user needs to provide a list of multidimensional functions implementing the gradient interface (ROOT::Math::IMultiGradFunction) while in the second case it is enough to supply a list of functions impelmenting the ROOT::Math::IMultiGenFunction interface. The available algorithms requiring derivatives (see also the GSL documentation ) are the followings: . ROOT::Math::GSLMultiRootFinder::kHybridSJ with name ""HybridSJ"": modified Powell's hybrid method as implemented in HYBRJ in MINPACK . ROOT::Math::GSLMultiRootFinder::kHybridJ with name ""HybridJ"": unscaled version of the previous algorithm . ROOT::Math::GSLMultiRootFinder::kNewton with name ""Newton"": Newton method . ROOT::Math::GSLMultiRootFinder::kGNewton with name ""GNewton"": modified Newton method . The algorithms without derivatives (see also the GSL documentation ) are the followings: . ROOT::Math::GSLMultiRootFinder::kHybridS with name ""HybridS"": same as HybridSJ but using finate difference approximation for the derivatives . ROOT::Math::GSLMultiRootFinder::kHybrid with name ""Hybrid"": unscaled version of the previous algorithm . ROOT::Math::GSLMul",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootFinder.html:99,Load,Loading,99,doc/master/classROOT_1_1Math_1_1GSLMultiRootFinder.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootFinder.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::GSLMultiRootFunctionAdapter< FuncVector > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Static Public Member Functions |; List of all members ; ROOT::Math::GSLMultiRootFunctionAdapter< FuncVector > Class Template ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Multidimensional ROOT finding. ; template<class FuncVector>; class ROOT::Math::GSLMultiRootFunctionAdapter< FuncVector >Class for adapting a C++ functor class to C function pointers used by GSL MultiRoot Algorithm The templated C++ function class must implement: ; double operator( const double * x) and if the derivatives are required: void Gradient( const double * x, double * g) and void FdF( const double * x, double &f, double * g) ; Definition at line 68 of file GSLMultiRootFunctionAdapter.h. Static Public Member Functions; static int Df (const gsl_vector *x, void *p, gsl_matrix *h);  ; static int F (const gsl_vector *x, void *p, gsl_vector *f);  ; static int FDf (const gsl_vector *x, void *p, gsl_vector *f, gsl_matrix *h);  evaluate derivative and function at the same time ;  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/math/mathmore/src/GSLMultiRootFunctionAdapter.h>; Member Function Documentation. ◆ Df(). template<class FuncVector > . static int ROOT::Math::GSLMultiRootFunctionAdapter< FuncVector >::Df ; (; const gsl_vector * ; x, . void * ; p, . gsl_matrix * ; h . ). inlinestatic . Definition at line 87 of file GSLMultiRootFunctionAdapter.h. ◆ F(). template<class FuncVector > . static int ROOT::Math::GSLMultiRootFunctionAdapter< FuncVector >::F ; (; const gsl_vector * ; x, . void * ; p, . gsl_vector * ; f . ). inlinestatic . Definition at line 74 of file GSLMultiRootFunctionAdapter.h. ◆ FDf(). template<class FuncVector > . static int ROOT::Math::GSLMultiRootFunctionAdapter< FuncVector >::FDf ; (; const gsl_vector * ; x, . void * ; p, . gsl_ve",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootFunctionAdapter.html:131,Load,Loading,131,doc/master/classROOT_1_1Math_1_1GSLMultiRootFunctionAdapter.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootFunctionAdapter.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::GSLMultiRootFunctionWrapper Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::Math::GSLMultiRootFunctionWrapper Class Reference. ; wrapper to a multi-dim function without derivatives for multi roots algorithm ; Definition at line 57 of file GSLMultiRootFunctionWrapper.h. Public Member Functions;  GSLMultiRootFunctionWrapper ();  ; gsl_multiroot_function * GetFunctions ();  ; template<class FuncVector > ; void SetFunctions (const FuncVector &f, unsigned int n);  Fill gsl function structure from a C++ function iterator and size and number of residuals. ;  . Private Attributes; gsl_multiroot_function fFunc;  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/math/mathmore/src/GSLMultiRootFunctionWrapper.h>; Constructor & Destructor Documentation. ◆ GSLMultiRootFunctionWrapper(). ROOT::Math::GSLMultiRootFunctionWrapper::GSLMultiRootFunctionWrapper ; (; ). inline . Definition at line 61 of file GSLMultiRootFunctionWrapper.h. Member Function Documentation. ◆ GetFunctions(). gsl_multiroot_function * ROOT::Math::GSLMultiRootFunctionWrapper::GetFunctions ; (; ). inline . Definition at line 79 of file GSLMultiRootFunctionWrapper.h. ◆ SetFunctions(). template<class FuncVector > . void ROOT::Math::GSLMultiRootFunctionWrapper::SetFunctions ; (; const FuncVector & ; f, . unsigned int ; n . ). inline . Fill gsl function structure from a C++ function iterator and size and number of residuals. ; Definition at line 71 of file GSLMultiRootFunctionWrapper.h. Member Data Documentation. ◆ fFunc. gsl_multiroot_function ROOT::Math::GSLMultiRootFunctionWrapper::fFunc. private . Definition at line 84 of file GSLMultiRootFunctionWrapper.h. math/mathmore/src/GSLMultiRootFunctionWrapper.h. ROOTMathGSLMultiRootFunctionWrapper. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:21 (GV",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootFunctionWrapper.html:108,Load,Loading,108,doc/master/classROOT_1_1Math_1_1GSLMultiRootFunctionWrapper.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootFunctionWrapper.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::GSLMultiRootSolver Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::Math::GSLMultiRootSolver Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Multidimensional ROOT finding. ; GSLMultiRootSolver, internal class for implementing GSL multi-root finders not using derivatives. ; Definition at line 155 of file GSLMultiRootSolver.h. Public Member Functions;  GSLMultiRootSolver (const gsl_multiroot_fsolver_type *type, int n);  Constructor from type and simension of system (number of functions) ;  ;  GSLMultiRootSolver (const GSLMultiRootSolver &)=delete;  ;  GSLMultiRootSolver (GSLMultiRootSolver &&)=delete;  ;  ~GSLMultiRootSolver () override;  Destructor (no operations) ;  ; void CreateSolver (const gsl_multiroot_fsolver_type *type, unsigned int n);  ; gsl_vector * GetDx () const override;  return function steps ;  ; gsl_vector * GetF () const override;  return function values ;  ; gsl_vector * GetRoot () const override;  solution values at the current iteration ;  ; int Iterate () override;  perform an iteration ;  ; const std::string & Name () const override;  return name ;  ; GSLMultiRootSolver & operator= (const GSLMultiRootSolver &rhs)=delete;  ; GSLMultiRootSolver & operator= (GSLMultiRootSolver &&rhs)=delete;  ; int SetSolver (const std::vector< ROOT::Math::IMultiGenFunction * > &funcVec, const double *x) override;  set the solver parameters ;  ;  Public Member Functions inherited from ROOT::Math::GSLMultiRootBaseSolver; virtual ~GSLMultiRootBaseSolver ();  virtual Destructor ;  ; const double * Dx () const;  return function steps ;  ; const double * FVal () const;  return function values ;  ; bool InitSolver (const std::vector< ROOT::Math::IMultiGenFunction * > &funcVec, const double *x);  init the solver with function list and initial values ;  ; int TestDelta (double absTo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootSolver.html:99,Load,Loading,99,doc/master/classROOT_1_1Math_1_1GSLMultiRootSolver.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootSolver.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::GSLNLSMinimizer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; ROOT::Math::GSLNLSMinimizer Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Multi-dimensional Minimization. ; GSLNLSMinimizer class for Non Linear Least Square fitting It Uses the Levemberg-Marquardt algorithm from GSL Non Linear Least Square fitting. ; Definition at line 59 of file GSLNLSMinimizer.h. Public Member Functions;  GSLNLSMinimizer (int type=0);  Default constructor. ;  ;  ~GSLNLSMinimizer () override;  Destructor (no operations) ;  ; double CovMatrix (unsigned int, unsigned int) const override;  return covariance matrices elements if the variable is fixed the matrix is zero The ordering of the variables is the same as in errors ;  ; int CovMatrixStatus () const override;  return covariance matrix status ;  ; double Edm () const override;  return expected distance reached from the minimum ;  ; const double * Errors () const override;  return errors at the minimum ;  ; const double * MinGradient () const override;  return pointer to gradient values at the minimum ;  ; bool Minimize () override;  method to perform the minimization ;  ; unsigned int NCalls () const override;  number of function calls to reach the minimum ;  ; bool ProvidesError () const override;  number of free variables (real dimension of the problem) this is <= Function().NDim() which is the total ;  ; void SetFunction (const ROOT::Math::IMultiGenFunction &func) override;  set the function to minimize ;  ;  Public Member Functions inherited from ROOT::Math::BasicMinimizer;  BasicMinimizer ();  Default constructor. ;  ;  ~BasicMinimizer () override;  Destructor. ;  ; bool FixVariable (unsigned int ivar) override;  fix an existing variable ;  ; bool GetVariableSettings (unsigned int ivar, ROOT::Fit::ParameterSett",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html:96,Load,Loading,96,doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::GSLPlainIntegrationWorkspace Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::Math::GSLPlainIntegrationWorkspace Class Reference. . Definition at line 239 of file GSLMCIntegrationWorkspace.h. Public Member Functions;  GSLPlainIntegrationWorkspace ();  ; void Clear () override;  free the workspace deleting the GSL pointer ;  ; gsl_monte_plain_state * GetWS ();  ; bool Init (size_t dim) override;  initialize the workspace creating the GSL pointer if it is not there ;  ; size_t NDim () const override;  ; std::unique_ptr< ROOT::Math::IOptions > Options () const override;  retrieve option pointer corresponding to parameters create a new object to be managed by the user ;  ; bool ReInit () override;  re-initialize an existing the workspace ;  ; virtual void SetOptions (const ROOT::Math::IOptions &) override;  set options ;  ; MCIntegration::Type Type () const override;  ;  Public Member Functions inherited from ROOT::Math::GSLMCIntegrationWorkspace;  GSLMCIntegrationWorkspace ();  ; virtual ~GSLMCIntegrationWorkspace ();  . Private Attributes; gsl_monte_plain_state * fWs;  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/math/mathmore/src/GSLMCIntegrationWorkspace.h>. Inheritance diagram for ROOT::Math::GSLPlainIntegrationWorkspace:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ GSLPlainIntegrationWorkspace(). ROOT::Math::GSLPlainIntegrationWorkspace::GSLPlainIntegrationWorkspace ; (; ). inline . Definition at line 243 of file GSLMCIntegrationWorkspace.h. Member Function Documentation. ◆ Clear(). void ROOT::Math::GSLPlainIntegrationWorkspace::Clear ; (; ). inlineoverridevirtual . free the workspace deleting the GSL pointer ; Reimplemented from ROOT::Math::GSLMCIntegrationWorkspac",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLPlainIntegrationWorkspace.html:109,Load,Loading,109,doc/master/classROOT_1_1Math_1_1GSLPlainIntegrationWorkspace.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLPlainIntegrationWorkspace.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::GSLQRngNiederreiter2 Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; List of all members ; ROOT::Math::GSLQRngNiederreiter2 Class ReferenceMath » MathCore » Interface classes for Random number generation. ; Niederreiter generator gsl_qrng_niederreiter_2 from here ; Definition at line 169 of file GSLQuasiRandom.h. Public Member Functions;  GSLQRngNiederreiter2 ();  ;  Public Member Functions inherited from ROOT::Math::GSLQuasiRandomEngine;  GSLQuasiRandomEngine ();  default constructor. ;  ;  GSLQuasiRandomEngine (const GSLQuasiRandomEngine &eng);  Copy constructor : clone the contained GSL generator. ;  ;  GSLQuasiRandomEngine (GSLQRngWrapper *rng);  create from an existing rng. ;  ; virtual ~GSLQuasiRandomEngine ();  call Terminate() ;  ; bool GenerateArray (double *begin, double *end) const;  Generate an array of quasi random numbers The iterators points to the random numbers. ;  ; void Initialize (unsigned int dimension);  initialize the generator giving the dimension of the sequence If no rng is present the default one based on Mersenne and Twister is created ;  ; std::string Name () const;  return name of generator ;  ; unsigned int NDim () const;  return the dimension of generator ;  ; double operator() () const;  Generate a random number between ]0,1[. ;  ; bool operator() (double *x) const;  Fill array x with random numbers between ]0,1[. ;  ; GSLQuasiRandomEngine & operator= (const GSLQuasiRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; unsigned int Size () const;  return the state size of generator ;  ; bool Skip (unsigned int n) const;  Skip the next n random numbers. ;  ; void Terminate ();  delete pointer to contained rng ;  . Additional Inherited Members;  Protected Member Functions inherited from ROOT::Math::GSLQuasiRandomEngine; void SetType (GSLQRngWrapper *r);  internal method used b",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLQRngNiederreiter2.html:101,Load,Loading,101,doc/master/classROOT_1_1Math_1_1GSLQRngNiederreiter2.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLQRngNiederreiter2.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::GSLQRngSobol Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; List of all members ; ROOT::Math::GSLQRngSobol Class ReferenceMath » MathCore » Interface classes for Random number generation. ; Sobol generator gsl_qrng_sobol from here ; Definition at line 156 of file GSLQuasiRandom.h. Public Member Functions;  GSLQRngSobol ();  ;  Public Member Functions inherited from ROOT::Math::GSLQuasiRandomEngine;  GSLQuasiRandomEngine ();  default constructor. ;  ;  GSLQuasiRandomEngine (const GSLQuasiRandomEngine &eng);  Copy constructor : clone the contained GSL generator. ;  ;  GSLQuasiRandomEngine (GSLQRngWrapper *rng);  create from an existing rng. ;  ; virtual ~GSLQuasiRandomEngine ();  call Terminate() ;  ; bool GenerateArray (double *begin, double *end) const;  Generate an array of quasi random numbers The iterators points to the random numbers. ;  ; void Initialize (unsigned int dimension);  initialize the generator giving the dimension of the sequence If no rng is present the default one based on Mersenne and Twister is created ;  ; std::string Name () const;  return name of generator ;  ; unsigned int NDim () const;  return the dimension of generator ;  ; double operator() () const;  Generate a random number between ]0,1[. ;  ; bool operator() (double *x) const;  Fill array x with random numbers between ]0,1[. ;  ; GSLQuasiRandomEngine & operator= (const GSLQuasiRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; unsigned int Size () const;  return the state size of generator ;  ; bool Skip (unsigned int n) const;  Skip the next n random numbers. ;  ; void Terminate ();  delete pointer to contained rng ;  . Additional Inherited Members;  Protected Member Functions inherited from ROOT::Math::GSLQuasiRandomEngine; void SetType (GSLQRngWrapper *r);  internal method used by the derived class to set the type of g",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLQRngSobol.html:93,Load,Loading,93,doc/master/classROOT_1_1Math_1_1GSLQRngSobol.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLQRngSobol.html,1,['Load'],['Loading']
Performance,. ROOT: ROOT::Math::GSLQRngWrapper Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::Math::GSLQRngWrapper Class Reference. ; GSLQRngWrapper class to wrap gsl_qrng structure. ; Definition at line 26 of file GSLQRngWrapper.h. Public Member Functions;  GSLQRngWrapper ();  Default constructor. ;  ;  GSLQRngWrapper (const gsl_qrng *r);  construct from an existing gsl_qrng it is managed externally - so will not be deleted at the end ;  ;  GSLQRngWrapper (const gsl_qrng_type *type);  Constructor with type. ;  ;  GSLQRngWrapper (GSLQRngWrapper &r);  Copy constructor - clone the GSL object and manage it. ;  ;  ~GSLQRngWrapper ();  Destructor (free the rng if not done before) ;  ; void Allocate (unsigned int dimension);  ; unsigned int Dimension () const;  ; void Free ();  ; GSLQRngWrapper & operator= (const GSLQRngWrapper &rhs);  Assignment operator. ;  ; gsl_qrng * Rng ();  ; const gsl_qrng * Rng () const;  ; void SetDefaultType ();  ; void SetType (const gsl_qrng_type *type);  . Private Attributes; bool fOwn;  ; gsl_qrng * fRng;  ; const gsl_qrng_type * fRngType;  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/math/mathmore/src/GSLQRngWrapper.h>; Constructor & Destructor Documentation. ◆ GSLQRngWrapper() [1/4]. ROOT::Math::GSLQRngWrapper::GSLQRngWrapper ; (; ). inline . Default constructor. ; Definition at line 34 of file GSLQRngWrapper.h. ◆ GSLQRngWrapper() [2/4]. ROOT::Math::GSLQRngWrapper::GSLQRngWrapper ; (; const gsl_qrng_type * ; type). inline . Constructor with type. ; Definition at line 44 of file GSLQRngWrapper.h. ◆ GSLQRngWrapper() [3/4]. ROOT::Math::GSLQRngWrapper::GSLQRngWrapper ; (; const gsl_qrng * ; r). inline . construct from an existing gsl_qrng it is managed externally - so will not be deleted at the end ; Definition at line 55 of file GSLQRngWrapper.h. ◆ GSLQRngWrapper(),MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLQRngWrapper.html:95,Load,Loading,95,doc/master/classROOT_1_1Math_1_1GSLQRngWrapper.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLQRngWrapper.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::GSLQuasiRandomEngine Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; ROOT::Math::GSLQuasiRandomEngine Class ReferenceMath » MathCore » Interface classes for Random number generation. ; GSLQuasiRandomEngine Base class for all GSL quasi random engines, normally user instantiate the derived classes which creates internally the generator and uses the class ROOT::Math::QuasiRandom. ; Definition at line 52 of file GSLQuasiRandom.h. Public Member Functions;  GSLQuasiRandomEngine ();  default constructor. ;  ;  GSLQuasiRandomEngine (const GSLQuasiRandomEngine &eng);  Copy constructor : clone the contained GSL generator. ;  ;  GSLQuasiRandomEngine (GSLQRngWrapper *rng);  create from an existing rng. ;  ; virtual ~GSLQuasiRandomEngine ();  call Terminate() ;  ; bool GenerateArray (double *begin, double *end) const;  Generate an array of quasi random numbers The iterators points to the random numbers. ;  ; void Initialize (unsigned int dimension);  initialize the generator giving the dimension of the sequence If no rng is present the default one based on Mersenne and Twister is created ;  ; std::string Name () const;  return name of generator ;  ; unsigned int NDim () const;  return the dimension of generator ;  ; double operator() () const;  Generate a random number between ]0,1[. ;  ; bool operator() (double *x) const;  Fill array x with random numbers between ]0,1[. ;  ; GSLQuasiRandomEngine & operator= (const GSLQuasiRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; unsigned int Size () const;  return the state size of generator ;  ; bool Skip (unsigned int n) const;  Skip the next n random numbers. ;  ; void Terminate ();  delete pointer to contained rng ;  . Protected Member Functions; void SetType (GSLQRngWrapper *r);  internal method",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLQuasiRandomEngine.html:101,Load,Loading,101,doc/master/classROOT_1_1Math_1_1GSLQuasiRandomEngine.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLQuasiRandomEngine.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::GSLRandomEngine Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Friends |; List of all members ; ROOT::Math::GSLRandomEngine Class ReferenceMath » MathCore » Interface classes for Random number generation. ; GSLRandomEngine Base class for all GSL random engines, normally user instantiate the derived classes which creates internally the generator. ; The main GSL generators (see here) are available as derived classes In addition to generate uniform numbers it provides method for generating numbers according to pre-defined distributions using the GSL functions from GSL random number distributions. ; Definition at line 65 of file GSLRndmEngines.h. Public Member Functions;  GSLRandomEngine ();  default constructor. ;  ;  GSLRandomEngine (const GSLRandomEngine &eng);  Copy constructor : clone the contained GSL generator. ;  ;  GSLRandomEngine (GSLRngWrapper *rng);  create from an existing rng. ;  ; virtual ~GSLRandomEngine ();  call Terminate() ;  ; void Initialize ();  initialize the generator If no rng is present the default one based on Mersenne and Twister is created ;  ; unsigned long IntRndm () const;  Generate an integer number between [0,max_generator-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRandomEngine.html:96,Load,Loading,96,doc/master/classROOT_1_1Math_1_1GSLRandomEngine.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRandomEngine.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::GSLRngCMRG Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; List of all members ; ROOT::Math::GSLRngCMRG Class ReferenceMath » MathCore » Interface classes for Random number generation. ; Combined multiple recursive generator (L'Ecuyer) see here ; Definition at line 454 of file GSLRndmEngines.h. Public Types; typedef GSLRandomEngine BaseType;  . Public Member Functions;  GSLRngCMRG ();  ;  Public Member Functions inherited from ROOT::Math::GSLRandomEngine;  GSLRandomEngine ();  default constructor. ;  ;  GSLRandomEngine (const GSLRandomEngine &eng);  Copy constructor : clone the contained GSL generator. ;  ;  GSLRandomEngine (GSLRngWrapper *rng);  create from an existing rng. ;  ; virtual ~GSLRandomEngine ();  call Terminate() ;  ; void Initialize ();  initialize the generator If no rng is present the default one based on Mersenne and Twister is created ;  ; unsigned long IntRndm () const;  Generate an integer number between [0,max_generator-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of random numbers The iterators points to the random numbers. ;  ; template<class Iterator > ; void RandomArray (Iterator begin, Iterator end) const;  Generate an array of random numbers. ;  ; double Rnd",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngCMRG.html:91,Load,Loading,91,doc/master/classROOT_1_1Math_1_1GSLRngCMRG.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngCMRG.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::GSLRngGFSR4 Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; List of all members ; ROOT::Math::GSLRngGFSR4 Class ReferenceMath » MathCore » Interface classes for Random number generation. ; Lagged Fibonacci generator by Ziff see here ; Definition at line 441 of file GSLRndmEngines.h. Public Types; typedef GSLRandomEngine BaseType;  . Public Member Functions;  GSLRngGFSR4 ();  ;  Public Member Functions inherited from ROOT::Math::GSLRandomEngine;  GSLRandomEngine ();  default constructor. ;  ;  GSLRandomEngine (const GSLRandomEngine &eng);  Copy constructor : clone the contained GSL generator. ;  ;  GSLRandomEngine (GSLRngWrapper *rng);  create from an existing rng. ;  ; virtual ~GSLRandomEngine ();  call Terminate() ;  ; void Initialize ();  initialize the generator If no rng is present the default one based on Mersenne and Twister is created ;  ; unsigned long IntRndm () const;  Generate an integer number between [0,max_generator-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of random numbers The iterators points to the random numbers. ;  ; template<class Iterator > ; void RandomArray (Iterator begin, Iterator end) const;  Generate an array of random numbers. ;  ; double Rndm () const;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngGFSR4.html:92,Load,Loading,92,doc/master/classROOT_1_1Math_1_1GSLRngGFSR4.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngGFSR4.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::GSLRngMRG Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; List of all members ; ROOT::Math::GSLRngMRG Class ReferenceMath » MathCore » Interface classes for Random number generation. ; 5-th order multiple recursive generator (L'Ecuyer, Blouin and Coutre) see here ; Definition at line 467 of file GSLRndmEngines.h. Public Types; typedef GSLRandomEngine BaseType;  . Public Member Functions;  GSLRngMRG ();  ;  Public Member Functions inherited from ROOT::Math::GSLRandomEngine;  GSLRandomEngine ();  default constructor. ;  ;  GSLRandomEngine (const GSLRandomEngine &eng);  Copy constructor : clone the contained GSL generator. ;  ;  GSLRandomEngine (GSLRngWrapper *rng);  create from an existing rng. ;  ; virtual ~GSLRandomEngine ();  call Terminate() ;  ; void Initialize ();  initialize the generator If no rng is present the default one based on Mersenne and Twister is created ;  ; unsigned long IntRndm () const;  Generate an integer number between [0,max_generator-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of random numbers The iterators points to the random numbers. ;  ; template<class Iterator > ; void RandomArray (Iterator begin, Iterator end) const;  Generate an array of random number",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngMRG.html:90,Load,Loading,90,doc/master/classROOT_1_1Math_1_1GSLRngMRG.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngMRG.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::GSLRngMT Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; List of all members ; ROOT::Math::GSLRngMT Class ReferenceMath » MathCore » Interface classes for Random number generation. ; Mersenne-Twister generator gsl_rng_mt19937 from here ; Definition at line 341 of file GSLRndmEngines.h. Public Types; typedef GSLRandomEngine BaseType;  . Public Member Functions;  GSLRngMT ();  ;  Public Member Functions inherited from ROOT::Math::GSLRandomEngine;  GSLRandomEngine ();  default constructor. ;  ;  GSLRandomEngine (const GSLRandomEngine &eng);  Copy constructor : clone the contained GSL generator. ;  ;  GSLRandomEngine (GSLRngWrapper *rng);  create from an existing rng. ;  ; virtual ~GSLRandomEngine ();  call Terminate() ;  ; void Initialize ();  initialize the generator If no rng is present the default one based on Mersenne and Twister is created ;  ; unsigned long IntRndm () const;  Generate an integer number between [0,max_generator-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of random numbers The iterators points to the random numbers. ;  ; template<class Iterator > ; void RandomArray (Iterator begin, Iterator end) const;  Generate an array of random numbers. ;  ; double Rndm () const;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngMT.html:89,Load,Loading,89,doc/master/classROOT_1_1Math_1_1GSLRngMT.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngMT.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::GSLRngMinStd Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; List of all members ; ROOT::Math::GSLRngMinStd Class ReferenceMath » MathCore » Interface classes for Random number generation. ; MINSTD generator (Park and Miller) see here ; Definition at line 507 of file GSLRndmEngines.h. Public Types; typedef GSLRandomEngine BaseType;  . Public Member Functions;  GSLRngMinStd ();  ;  Public Member Functions inherited from ROOT::Math::GSLRandomEngine;  GSLRandomEngine ();  default constructor. ;  ;  GSLRandomEngine (const GSLRandomEngine &eng);  Copy constructor : clone the contained GSL generator. ;  ;  GSLRandomEngine (GSLRngWrapper *rng);  create from an existing rng. ;  ; virtual ~GSLRandomEngine ();  call Terminate() ;  ; void Initialize ();  initialize the generator If no rng is present the default one based on Mersenne and Twister is created ;  ; unsigned long IntRndm () const;  Generate an integer number between [0,max_generator-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of random numbers The iterators points to the random numbers. ;  ; template<class Iterator > ; void RandomArray (Iterator begin, Iterator end) const;  Generate an array of random numbers. ;  ; double Rndm () con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngMinStd.html:93,Load,Loading,93,doc/master/classROOT_1_1Math_1_1GSLRngMinStd.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngMinStd.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::GSLRngMixMax Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; List of all members ; ROOT::Math::GSLRngMixMax Class ReferenceMath » MathCore » Interface classes for Random number generation. ; MixMax generator based on ROOT::Math::MixMaxEngine of N=240. ; Definition at line 517 of file GSLRndmEngines.h. Public Types; typedef GSLRandomEngine BaseType;  . Public Member Functions;  GSLRngMixMax ();  ;  ~GSLRngMixMax () override;  ;  Public Member Functions inherited from ROOT::Math::GSLRandomEngine;  GSLRandomEngine ();  default constructor. ;  ;  GSLRandomEngine (const GSLRandomEngine &eng);  Copy constructor : clone the contained GSL generator. ;  ;  GSLRandomEngine (GSLRngWrapper *rng);  create from an existing rng. ;  ; virtual ~GSLRandomEngine ();  call Terminate() ;  ; void Initialize ();  initialize the generator If no rng is present the default one based on Mersenne and Twister is created ;  ; unsigned long IntRndm () const;  Generate an integer number between [0,max_generator-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of random numbers The iterators points to the random numbers. ;  ; template<class Iterator > ; void RandomArray (Iterator begin, Iterator end) const;  Generate an ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngMixMax.html:93,Load,Loading,93,doc/master/classROOT_1_1Math_1_1GSLRngMixMax.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngMixMax.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::GSLRngROOTWrapper< Engine > Struct Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Static Public Member Functions |; Public Attributes |; List of all members ; ROOT::Math::GSLRngROOTWrapper< Engine > Struct Template Reference. ; template<class Engine>; struct ROOT::Math::GSLRngROOTWrapper< Engine >class for wrapping ROOT Engines in gsl_rng types which can be used as extra GSL random number generators For this we need to implement functions which will be called by gsl_rng. ; The functions (Seed, Rndm, IntRndm) are passed in the gsl_rng_type and used to build a gsl_rng object. When gsl_rng is alloacated, only the memory state is allocated using calloc(1,size), which gives a memory block of the given bytes and it initializes to zero. Therefore no constructor of GSLRngROOTWrapper can be called and also we cannot call non-static member function of the class. The underlined ROOT engine is then built and deleted using the functions CreateEngine() and FreeEngine(), called by the specific GSLRandomEngine class that instantiates for the the generator (e.g. GSLRngMixMax) ; Definition at line 39 of file GSLRngROOTWrapper.h. Static Public Member Functions; static void CreateEngine (gsl_rng *r);  ; static void FreeEngine (gsl_rng *r);  ; static unsigned long IntRndm (void *p);  ; static unsigned long Max ();  ; static unsigned long Min ();  ; static std::string Name ();  ; static double Rndm (void *p);  ; static void Seed (void *p, unsigned long seed);  ; static size_t Size ();  . Public Attributes; Engine * fEngine = nullptr;  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/math/mathmore/src/GSLRngROOTWrapper.h>; Member Function Documentation. ◆ CreateEngine(). template<class Engine > . static void ROOT::Math::GSLRngROOTWrapper< Engine >::CreateEngine ; (; gsl_rng * ; r). inlinestatic . Definition at line 46 of file GSLRngROOTWrapper.h. ◆ FreeEngi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structROOT_1_1Math_1_1GSLRngROOTWrapper.html:118,Load,Loading,118,doc/master/structROOT_1_1Math_1_1GSLRngROOTWrapper.html,https://root.cern,https://root.cern/doc/master/structROOT_1_1Math_1_1GSLRngROOTWrapper.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::GSLRngRanLux Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; List of all members ; ROOT::Math::GSLRngRanLux Class ReferenceMath » MathCore » Interface classes for Random number generation. ; Old Ranlux generator (James, Luscher) (default luxury level, p = 223) (This is eequivalent to TRandom1 with default luxury level) see here ; Definition at line 355 of file GSLRndmEngines.h. Public Types; typedef GSLRandomEngine BaseType;  . Public Member Functions;  GSLRngRanLux ();  ;  Public Member Functions inherited from ROOT::Math::GSLRandomEngine;  GSLRandomEngine ();  default constructor. ;  ;  GSLRandomEngine (const GSLRandomEngine &eng);  Copy constructor : clone the contained GSL generator. ;  ;  GSLRandomEngine (GSLRngWrapper *rng);  create from an existing rng. ;  ; virtual ~GSLRandomEngine ();  call Terminate() ;  ; void Initialize ();  initialize the generator If no rng is present the default one based on Mersenne and Twister is created ;  ; unsigned long IntRndm () const;  Generate an integer number between [0,max_generator-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of random numbers The iterators points to the random numbers. ;  ; template<class Iterator > ; void RandomArray (Ite",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanLux.html:93,Load,Loading,93,doc/master/classROOT_1_1Math_1_1GSLRngRanLux.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanLux.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::GSLRngRanLuxD1 Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; List of all members ; ROOT::Math::GSLRngRanLuxD1 Class ReferenceMath » MathCore » Interface classes for Random number generation. ; Double precision (48 bits) version of Second generation of Ranlux generator with luxury level of 1 (It throws away 202 value for every 12 used) see here ; Definition at line 399 of file GSLRndmEngines.h. Public Types; typedef GSLRandomEngine BaseType;  . Public Member Functions;  GSLRngRanLuxD1 ();  ;  Public Member Functions inherited from ROOT::Math::GSLRandomEngine;  GSLRandomEngine ();  default constructor. ;  ;  GSLRandomEngine (const GSLRandomEngine &eng);  Copy constructor : clone the contained GSL generator. ;  ;  GSLRandomEngine (GSLRngWrapper *rng);  create from an existing rng. ;  ; virtual ~GSLRandomEngine ();  call Terminate() ;  ; void Initialize ();  initialize the generator If no rng is present the default one based on Mersenne and Twister is created ;  ; unsigned long IntRndm () const;  Generate an integer number between [0,max_generator-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of random numbers The iterators points to the random numbers. ;  ; template<class Iterator > ; v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanLuxD1.html:95,Load,Loading,95,doc/master/classROOT_1_1Math_1_1GSLRngRanLuxD1.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanLuxD1.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::GSLRngRanLuxD2 Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; List of all members ; ROOT::Math::GSLRngRanLuxD2 Class ReferenceMath » MathCore » Interface classes for Random number generation. ; Double precision (48 bits) version of Second generation of Ranlux generator with luxury level of 2 (It throws away 397 value for every 12 used) see here ; Definition at line 413 of file GSLRndmEngines.h. Public Types; typedef GSLRandomEngine BaseType;  . Public Member Functions;  GSLRngRanLuxD2 ();  ;  Public Member Functions inherited from ROOT::Math::GSLRandomEngine;  GSLRandomEngine ();  default constructor. ;  ;  GSLRandomEngine (const GSLRandomEngine &eng);  Copy constructor : clone the contained GSL generator. ;  ;  GSLRandomEngine (GSLRngWrapper *rng);  create from an existing rng. ;  ; virtual ~GSLRandomEngine ();  call Terminate() ;  ; void Initialize ();  initialize the generator If no rng is present the default one based on Mersenne and Twister is created ;  ; unsigned long IntRndm () const;  Generate an integer number between [0,max_generator-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of random numbers The iterators points to the random numbers. ;  ; template<class Iterator > ; v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanLuxD2.html:95,Load,Loading,95,doc/master/classROOT_1_1Math_1_1GSLRngRanLuxD2.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanLuxD2.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::GSLRngRanLuxS1 Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; List of all members ; ROOT::Math::GSLRngRanLuxS1 Class ReferenceMath » MathCore » Interface classes for Random number generation. ; Second generation of Ranlux generator for single precision with luxury level of 1 (It throws away 202 values for every 12 used) see here ; Definition at line 369 of file GSLRndmEngines.h. Public Types; typedef GSLRandomEngine BaseType;  . Public Member Functions;  GSLRngRanLuxS1 ();  ;  Public Member Functions inherited from ROOT::Math::GSLRandomEngine;  GSLRandomEngine ();  default constructor. ;  ;  GSLRandomEngine (const GSLRandomEngine &eng);  Copy constructor : clone the contained GSL generator. ;  ;  GSLRandomEngine (GSLRngWrapper *rng);  create from an existing rng. ;  ; virtual ~GSLRandomEngine ();  call Terminate() ;  ; void Initialize ();  initialize the generator If no rng is present the default one based on Mersenne and Twister is created ;  ; unsigned long IntRndm () const;  Generate an integer number between [0,max_generator-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of random numbers The iterators points to the random numbers. ;  ; template<class Iterator > ; void RandomArray ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanLuxS1.html:95,Load,Loading,95,doc/master/classROOT_1_1Math_1_1GSLRngRanLuxS1.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanLuxS1.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::GSLRngRanLuxS2 Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; List of all members ; ROOT::Math::GSLRngRanLuxS2 Class ReferenceMath » MathCore » Interface classes for Random number generation. ; Second generation of Ranlux generator for Single precision with luxury level of 2 (It throws away 397 value for every 12 used) see here ; Definition at line 384 of file GSLRndmEngines.h. Public Types; typedef GSLRandomEngine BaseType;  . Public Member Functions;  GSLRngRanLuxS2 ();  ;  Public Member Functions inherited from ROOT::Math::GSLRandomEngine;  GSLRandomEngine ();  default constructor. ;  ;  GSLRandomEngine (const GSLRandomEngine &eng);  Copy constructor : clone the contained GSL generator. ;  ;  GSLRandomEngine (GSLRngWrapper *rng);  create from an existing rng. ;  ; virtual ~GSLRandomEngine ();  call Terminate() ;  ; void Initialize ();  initialize the generator If no rng is present the default one based on Mersenne and Twister is created ;  ; unsigned long IntRndm () const;  Generate an integer number between [0,max_generator-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of random numbers The iterators points to the random numbers. ;  ; template<class Iterator > ; void RandomArray (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanLuxS2.html:95,Load,Loading,95,doc/master/classROOT_1_1Math_1_1GSLRngRanLuxS2.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanLuxS2.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::GSLRngRanMar Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; List of all members ; ROOT::Math::GSLRngRanMar Class ReferenceMath » MathCore » Interface classes for Random number generation. ; RANMAR generator see here ; Definition at line 494 of file GSLRndmEngines.h. Public Types; typedef GSLRandomEngine BaseType;  . Public Member Functions;  GSLRngRanMar ();  ;  Public Member Functions inherited from ROOT::Math::GSLRandomEngine;  GSLRandomEngine ();  default constructor. ;  ;  GSLRandomEngine (const GSLRandomEngine &eng);  Copy constructor : clone the contained GSL generator. ;  ;  GSLRandomEngine (GSLRngWrapper *rng);  create from an existing rng. ;  ; virtual ~GSLRandomEngine ();  call Terminate() ;  ; void Initialize ();  initialize the generator If no rng is present the default one based on Mersenne and Twister is created ;  ; unsigned long IntRndm () const;  Generate an integer number between [0,max_generator-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of random numbers The iterators points to the random numbers. ;  ; template<class Iterator > ; void RandomArray (Iterator begin, Iterator end) const;  Generate an array of random numbers. ;  ; double Rndm () const;  Generate a ra",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanMar.html:93,Load,Loading,93,doc/master/classROOT_1_1Math_1_1GSLRngRanMar.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanMar.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::GSLRngRand Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; List of all members ; ROOT::Math::GSLRngRand Class ReferenceMath » MathCore » Interface classes for Random number generation. ; BSD rand() generator gsl_rmg_rand from here ; Definition at line 481 of file GSLRndmEngines.h. Public Types; typedef GSLRandomEngine BaseType;  . Public Member Functions;  GSLRngRand ();  ;  Public Member Functions inherited from ROOT::Math::GSLRandomEngine;  GSLRandomEngine ();  default constructor. ;  ;  GSLRandomEngine (const GSLRandomEngine &eng);  Copy constructor : clone the contained GSL generator. ;  ;  GSLRandomEngine (GSLRngWrapper *rng);  create from an existing rng. ;  ; virtual ~GSLRandomEngine ();  call Terminate() ;  ; void Initialize ();  initialize the generator If no rng is present the default one based on Mersenne and Twister is created ;  ; unsigned long IntRndm () const;  Generate an integer number between [0,max_generator-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of random numbers The iterators points to the random numbers. ;  ; template<class Iterator > ; void RandomArray (Iterator begin, Iterator end) const;  Generate an array of random numbers. ;  ; double Rndm () const;  G",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRand.html:91,Load,Loading,91,doc/master/classROOT_1_1Math_1_1GSLRngRand.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRand.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::GSLRngTaus Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; List of all members ; ROOT::Math::GSLRngTaus Class ReferenceMath » MathCore » Interface classes for Random number generation. ; Tausworthe generator by L'Ecuyer see here ; Definition at line 428 of file GSLRndmEngines.h. Public Types; typedef GSLRandomEngine BaseType;  . Public Member Functions;  GSLRngTaus ();  ;  Public Member Functions inherited from ROOT::Math::GSLRandomEngine;  GSLRandomEngine ();  default constructor. ;  ;  GSLRandomEngine (const GSLRandomEngine &eng);  Copy constructor : clone the contained GSL generator. ;  ;  GSLRandomEngine (GSLRngWrapper *rng);  create from an existing rng. ;  ; virtual ~GSLRandomEngine ();  call Terminate() ;  ; void Initialize ();  initialize the generator If no rng is present the default one based on Mersenne and Twister is created ;  ; unsigned long IntRndm () const;  Generate an integer number between [0,max_generator-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of random numbers The iterators points to the random numbers. ;  ; template<class Iterator > ; void RandomArray (Iterator begin, Iterator end) const;  Generate an array of random numbers. ;  ; double Rndm () const;  Gen",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngTaus.html:91,Load,Loading,91,doc/master/classROOT_1_1Math_1_1GSLRngTaus.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngTaus.html,1,['Load'],['Loading']
Performance,. ROOT: ROOT::Math::GSLRngWrapper Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::Math::GSLRngWrapper Class Reference. ; GSLRngWrapper class to wrap gsl_rng structure. ; Definition at line 25 of file GSLRngWrapper.h. Public Member Functions;  GSLRngWrapper ();  Default constructor. ;  ;  GSLRngWrapper (const gsl_rng *r);  construct from an existing gsl_rng it is managed externally - so will not be deleted at the end ;  ;  GSLRngWrapper (const gsl_rng_type *type);  Constructor with type. ;  ;  GSLRngWrapper (GSLRngWrapper &r);  Copy constructor - clone the GSL object and manage it. ;  ;  ~GSLRngWrapper ();  Destructor (free the rng if not done before) ;  ; void Allocate ();  ; void Free ();  ; GSLRngWrapper & operator= (const GSLRngWrapper &rhs);  Assignment operator. ;  ; void PrintState () const;  ; gsl_rng * Rng ();  ; const gsl_rng * Rng () const;  ; void SetDefaultType ();  ; void SetType (const gsl_rng_type *type);  . Private Attributes; bool fOwn;  ; gsl_rng * fRng;  ; const gsl_rng_type * fRngType;  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/math/mathmore/src/GSLRngWrapper.h>; Constructor & Destructor Documentation. ◆ GSLRngWrapper() [1/4]. ROOT::Math::GSLRngWrapper::GSLRngWrapper ; (; ). inline . Default constructor. ; Definition at line 33 of file GSLRngWrapper.h. ◆ GSLRngWrapper() [2/4]. ROOT::Math::GSLRngWrapper::GSLRngWrapper ; (; const gsl_rng_type * ; type). inline . Constructor with type. ; Definition at line 43 of file GSLRngWrapper.h. ◆ GSLRngWrapper() [3/4]. ROOT::Math::GSLRngWrapper::GSLRngWrapper ; (; const gsl_rng * ; r). inline . construct from an existing gsl_rng it is managed externally - so will not be deleted at the end ; Definition at line 54 of file GSLRngWrapper.h. ◆ GSLRngWrapper() [4/4]. ROOT::Math::GSLRngWrapper::GSLRngWrapper ; (; GSLRngWrapper,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngWrapper.html:94,Load,Loading,94,doc/master/classROOT_1_1Math_1_1GSLRngWrapper.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngWrapper.html,1,['Load'],['Loading']
Performance,. ROOT: ROOT::Math::GSLRootFSolver Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::Math::GSLRootFSolver Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » One-dimensional Root-Finding. ; Root-Finder implementation class using GSL. ; Definition at line 47 of file GSLRootFSolver.h. Public Member Functions;  GSLRootFSolver (const gsl_root_fsolver_type *type);  ; virtual ~GSLRootFSolver ();  ; gsl_root_fsolver * Solver () const;  . Private Attributes; gsl_root_fsolver * fSolver;  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/math/mathmore/src/GSLRootFSolver.h>; Constructor & Destructor Documentation. ◆ GSLRootFSolver(). ROOT::Math::GSLRootFSolver::GSLRootFSolver ; (; const gsl_root_fsolver_type * ; type). inline . Definition at line 51 of file GSLRootFSolver.h. ◆ ~GSLRootFSolver(). virtual ROOT::Math::GSLRootFSolver::~GSLRootFSolver ; (; ). inlinevirtual . Definition at line 54 of file GSLRootFSolver.h. Member Function Documentation. ◆ Solver(). gsl_root_fsolver * ROOT::Math::GSLRootFSolver::Solver ; (; ); const. inline . Definition at line 65 of file GSLRootFSolver.h. Member Data Documentation. ◆ fSolver. gsl_root_fsolver* ROOT::Math::GSLRootFSolver::fSolver. private . Definition at line 69 of file GSLRootFSolver.h. math/mathmore/src/GSLRootFSolver.h. ROOTMathGSLRootFSolver. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:21 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRootFSolver.html:95,Load,Loading,95,doc/master/classROOT_1_1Math_1_1GSLRootFSolver.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRootFSolver.html,1,['Load'],['Loading']
Performance,. ROOT: ROOT::Math::GSLRootFdFSolver Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::Math::GSLRootFdFSolver Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » One-dimensional Root-Finding. ; Root-Finder with derivatives implementation class using GSL. ; Definition at line 47 of file GSLRootFdFSolver.h. Public Member Functions;  GSLRootFdFSolver (const gsl_root_fdfsolver_type *type);  ; virtual ~GSLRootFdFSolver ();  ; gsl_root_fdfsolver * Solver () const;  . Private Attributes; gsl_root_fdfsolver * fSolver;  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/math/mathmore/src/GSLRootFdFSolver.h>; Constructor & Destructor Documentation. ◆ GSLRootFdFSolver(). ROOT::Math::GSLRootFdFSolver::GSLRootFdFSolver ; (; const gsl_root_fdfsolver_type * ; type). inline . Definition at line 51 of file GSLRootFdFSolver.h. ◆ ~GSLRootFdFSolver(). virtual ROOT::Math::GSLRootFdFSolver::~GSLRootFdFSolver ; (; ). inlinevirtual . Definition at line 54 of file GSLRootFdFSolver.h. Member Function Documentation. ◆ Solver(). gsl_root_fdfsolver * ROOT::Math::GSLRootFdFSolver::Solver ; (; ); const. inline . Definition at line 65 of file GSLRootFdFSolver.h. Member Data Documentation. ◆ fSolver. gsl_root_fdfsolver* ROOT::Math::GSLRootFdFSolver::fSolver. private . Definition at line 69 of file GSLRootFdFSolver.h. math/mathmore/src/GSLRootFdFSolver.h. ROOTMathGSLRootFdFSolver. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:21 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRootFdFSolver.html:97,Load,Loading,97,doc/master/classROOT_1_1Math_1_1GSLRootFdFSolver.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRootFdFSolver.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::GSLRootFinder Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; ROOT::Math::GSLRootFinder Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » One-dimensional Root-Finding. ; Base class for GSL Root-Finding algorithms for one dimensional functions which do not use function derivatives. ; For finding the roots users should not use this class directly but instantiate the derived classes, for example ROOT::Math::Roots::Brent for using the Brent algorithm. All the classes defining the alhorithms are defined in the header Math/RootFinderAlgorithm.h They possible types implementing root bracketing algorithms which they do not require function derivatives are: . ROOT::Math::Roots::Bisection . ROOT::Math::Roots::FalsePos . ROOT::Math::Roots::Brent . See also the specific classes for the documentation. See the GSL online manual for information on the GSL Root-Finding algorithms ; Definition at line 73 of file GSLRootFinder.h. Public Types; typedef double(* GSLFuncPointer) (double, void *);  . Public Member Functions;  GSLRootFinder ();  ;  GSLRootFinder (const GSLRootFinder &)=delete;  ;  GSLRootFinder (GSLRootFinder &&)=delete;  ;  ~GSLRootFinder () override;  ; int Iterate () override;  This method is implemented only by the GSLRootFinder and GSLRootFinderDeriv classes and will return an error if it's not one of them. ;  ; int Iterations () const override;  Return number of iterations. ;  ; const char * Name () const override;  double GSLRootFinder::XLower() const { return fXlow; } ;  ; GSLRootFinder & operator= (const GSLRootFinder &)=delete;  ; GSLRootFinder & operator= (GSLRootFinder &&)=delete;  ; double Root () const override;  Returns the previously calculated root. ;  ; bool SetFunction (const IGenFunction &f, double xlow, double xup) overrid",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRootFinder.html:94,Load,Loading,94,doc/master/classROOT_1_1Math_1_1GSLRootFinder.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRootFinder.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::GSLRootFinderDeriv Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; ROOT::Math::GSLRootFinderDeriv Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » One-dimensional Root-Finding. ; Base class for GSL Root-Finding algorithms for one dimensional functions which use function derivatives. ; For finding the roots users should not use this class directly but instantiate the derived classes, for example ROOT::Math::Roots::Newton for using the Newton algorithm. All the classes defining the alhorithms are defined in the header Math/RootFinderAlgorithm.h They possible types implementing root bracketing algorithms which use function derivatives are: . ROOT::Math::Roots::Newton . ROOT::Math::Roots::Secant . ROOT::Math::Roots::Steffenson . See also those classes for the documentation. See the GSL online manual for information on the GSL Root-Finding algorithms ; Definition at line 74 of file GSLRootFinderDeriv.h. Public Types; typedef void(* GSLFdFPointer) (double, void *, double *, double *);  ; typedef double(* GSLFuncPointer) (double, void *);  . Public Member Functions;  GSLRootFinderDeriv ();  ;  GSLRootFinderDeriv (const GSLRootFinderDeriv &)=delete;  ;  GSLRootFinderDeriv (GSLRootFinderDeriv &&)=delete;  ;  ~GSLRootFinderDeriv () override;  ; int Iterate () override;  iterate (return GSL_SUCCESS in case of successful iteration) ;  ; int Iterations () const override;  Return number of iterations. ;  ; const char * Name () const override;  Return name of root finder algorithm. ;  ; GSLRootFinderDeriv & operator= (const GSLRootFinderDeriv &)=delete;  ; GSLRootFinderDeriv & operator= (GSLRootFinderDeriv &&)=delete;  ; double Root () const override;  Returns the previously calculated root. ;  ; bool SetFunction (const IGradFunction &f, double xstart",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRootFinderDeriv.html:99,Load,Loading,99,doc/master/classROOT_1_1Math_1_1GSLRootFinderDeriv.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRootFinderDeriv.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::GSLRootHelper Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Functions ; ROOT::Math::GSLRootHelper Namespace Reference. Helper functions to test convergence of Root-Finding algorithms. ; More... Functions; int TestDelta (double x1, double x0, double epsAbs, double epsRel);  ; int TestInterval (double xlow, double xup, double epsAbs, double epsRel);  ; int TestResidual (double f, double epsAbs);  . Detailed Description; Helper functions to test convergence of Root-Finding algorithms. ; Used by ROOT::Math::RootFinder class (see there for the doc) ; Function Documentation. ◆ TestDelta(). int ROOT::Math::GSLRootHelper::TestDelta ; (; double ; x1, . double ; x0, . double ; epsAbs, . double ; epsRel . ). Definition at line 47 of file GSLRootHelper.cxx. ◆ TestInterval(). int ROOT::Math::GSLRootHelper::TestInterval ; (; double ; xlow, . double ; xup, . double ; epsAbs, . double ; epsRel . ). Definition at line 42 of file GSLRootHelper.cxx. ◆ TestResidual(). int ROOT::Math::GSLRootHelper::TestResidual ; (; double ; f, . double ; epsAbs . ). Definition at line 52 of file GSLRootHelper.cxx. ROOTMathGSLRootHelper. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:25 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1GSLRootHelper.html:98,Load,Loading,98,doc/master/namespaceROOT_1_1Math_1_1GSLRootHelper.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1GSLRootHelper.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::GSLSimAn Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Functions ; ROOT::Math::GSLSimAn Namespace Reference. Functions; void Copy (void *source, void *dest);  ; void * CopyCtor (void *xp);  ; void Destroy (void *xp);  ; double Dist (void *xp, void *yp);  ; double E (void *xp);  ; void Print (void *xp);  ; void Step (const gsl_rng *r, void *xp, double step_size);  . Function Documentation. ◆ Copy(). void ROOT::Math::GSLSimAn::Copy ; (; void * ; source, . void * ; dest . ). Definition at line 149 of file GSLSimAnnealing.cxx. ◆ CopyCtor(). void * ROOT::Math::GSLSimAn::CopyCtor ; (; void * ; xp). Definition at line 157 of file GSLSimAnnealing.cxx. ◆ Destroy(). void ROOT::Math::GSLSimAn::Destroy ; (; void * ; xp). Definition at line 163 of file GSLSimAnnealing.cxx. ◆ Dist(). double ROOT::Math::GSLSimAn::Dist ; (; void * ; xp, . void * ; yp . ). Definition at line 129 of file GSLSimAnnealing.cxx. ◆ E(). double ROOT::Math::GSLSimAn::E ; (; void * ; xp). Definition at line 110 of file GSLSimAnnealing.cxx. ◆ Print(). void ROOT::Math::GSLSimAn::Print ; (; void * ; xp). Definition at line 139 of file GSLSimAnnealing.cxx. ◆ Step(). void ROOT::Math::GSLSimAn::Step ; (; const gsl_rng * ; r, . void * ; xp, . double ; step_size . ). Definition at line 117 of file GSLSimAnnealing.cxx. ROOTMathGSLSimAn. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:25 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1GSLSimAn.html:93,Load,Loading,93,doc/master/namespaceROOT_1_1Math_1_1GSLSimAn.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1GSLSimAn.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::GSLSimAnFunc Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; ROOT::Math::GSLSimAnFunc Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Multi-dimensional Minimization. ; GSLSimAnFunc class description. ; Interface class for the objetive function to be used in simulated annealing If user wants to re-implement some of the methods (like the one defining the metric) which are used by the the simulated annealing algorithm must build a user derived class. NOTE: Derived classes must re-implement the assignment and copy constructor to call them of the parent class ; Definition at line 50 of file GSLSimAnnealing.h. Public Member Functions;  GSLSimAnFunc (const ROOT::Math::IMultiGenFunction &func, const double *x);  construct from an interface of a multi-dimensional function ;  ;  GSLSimAnFunc (const ROOT::Math::IMultiGenFunction &func, const double *x, const double *scale);  construct from an interface of a multi-dimensional function Use optionally a scale factor (for each coordinate) which can be used to scale the step sizes (this is used for example by the minimization algorithm) ;  ; virtual ~GSLSimAnFunc ();  virtual destructor (no operations) ;  ; virtual GSLSimAnFunc * Clone () const;  clone method. ;  ; virtual double Distance (const GSLSimAnFunc &func) const;  calculate the distance (metric) between this one and another configuration Presently a cartesian metric is used. ;  ; virtual double Energy () const;  evaluate the energy ( objective function value) re-implement by derived classes if needed to be modified ;  ; virtual GSLSimAnFunc & FastCopy (const GSLSimAnFunc &f);  fast copy method called by GSL simulated annealing internally copy only the things which have been changed must be re-implemented by derived classes if needed ;  ; unsigned int NDim ()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnFunc.html:93,Load,Loading,93,doc/master/classROOT_1_1Math_1_1GSLSimAnFunc.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnFunc.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::GSLSimAnMinimizer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; ROOT::Math::GSLSimAnMinimizer Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Multi-dimensional Minimization. ; GSLSimAnMinimizer class for minimization using simulated annealing using the algorithm from GSL. ; It implements the ROOT::Minimizer interface and a plug-in (name ""GSLSimAn"") exists to instantiate this class via the plug-in manager Configuration (Setting/getting) the options is done through the methods defined in the ROOT::Math::Minimizer class. The user needs to call the base class method ROOT::Math::Minimizer::SetOptions to set the corresponding options. Here is some code example for increasing n_tries from 200 (default) to 1000 ROOT::Math::GenAlgoOptions simanOpt;; simanOpt.SetValue(""n_tries"", 1000);; ROOT::Math::MinimizerOptions opt;; opt.SetExtraOptions(simanOpt);; minimizer->SetOptions(opt);; ROOT::Math::GenAlgoOptionsclass implementing generic options for a numerical algorithm Just store the options in a map of strin...Definition GenAlgoOptions.h:32; ROOT::Math::IOptions::SetValuevoid SetValue(const char *name, double val)generic methods for retrieving optionsDefinition IOptions.h:42; ROOT::Math::MinimizerOptionsMinimizer options.Definition MinimizerOptions.h:40; ROOT::Math::MinimizerOptions::SetExtraOptionsvoid SetExtraOptions(const IOptions &opt)set extra options (in this case pointer is cloned)Definition MinimizerOptions.cxx:210. Definition at line 75 of file GSLSimAnMinimizer.h. Public Member Functions;  GSLSimAnMinimizer (int type=0);  Default constructor. ;  ;  ~GSLSimAnMinimizer () override;  Destructor (no operations) ;  ; bool Minimize () override;  method to perform the minimization ;  ; const GSLSimAnParams & MinimizerParameters () const;  Get current minimiz",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html:98,Load,Loading,98,doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::GSLSimAnParams Struct Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; ROOT::Math::GSLSimAnParams Struct ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Multi-dimensional Minimization. ; structure holding the simulated annealing parameters ; Definition at line 161 of file GSLSimAnnealing.h. Public Member Functions;  GSLSimAnParams ();  . Public Attributes; int iters_fixed_T;  ; double k;  parameters for the Boltzman distribution ;  ; double mu_t;  ; int n_tries;  ; double step_size;  ; double t_initial;  ; double t_min;  . #include <Math/GSLSimAnnealing.h>; Constructor & Destructor Documentation. ◆ GSLSimAnParams(). ROOT::Math::GSLSimAnParams::GSLSimAnParams ; (; ). inline . Definition at line 164 of file GSLSimAnnealing.h. Member Data Documentation. ◆ iters_fixed_T. int ROOT::Math::GSLSimAnParams::iters_fixed_T. Definition at line 177 of file GSLSimAnnealing.h. ◆ k. double ROOT::Math::GSLSimAnParams::k. parameters for the Boltzman distribution ; Definition at line 180 of file GSLSimAnnealing.h. ◆ mu_t. double ROOT::Math::GSLSimAnParams::mu_t. Definition at line 182 of file GSLSimAnnealing.h. ◆ n_tries. int ROOT::Math::GSLSimAnParams::n_tries. Definition at line 176 of file GSLSimAnnealing.h. ◆ step_size. double ROOT::Math::GSLSimAnParams::step_size. Definition at line 178 of file GSLSimAnnealing.h. ◆ t_initial. double ROOT::Math::GSLSimAnParams::t_initial. Definition at line 181 of file GSLSimAnnealing.h. ◆ t_min. double ROOT::Math::GSLSimAnParams::t_min. Definition at line 183 of file GSLSimAnnealing.h. Collaboration diagram for ROOT::Math::GSLSimAnParams:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; The documentation for this struct was generated from the following file:; math/mathmore/inc/Math/GSLSimAnnealing.h. ROOTMathGSLSimAnParams. ROO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structROOT_1_1Math_1_1GSLSimAnParams.html:96,Load,Loading,96,doc/master/structROOT_1_1Math_1_1GSLSimAnParams.html,https://root.cern,https://root.cern/doc/master/structROOT_1_1Math_1_1GSLSimAnParams.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::GSLSimAnnealing Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::Math::GSLSimAnnealing Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Multi-dimensional Minimization. ; GSLSimAnnealing class for performing a simulated annealing search of a multidimensional function. ; Definition at line 193 of file GSLSimAnnealing.h. Public Member Functions;  GSLSimAnnealing ();  Default constructor. ;  ;  GSLSimAnnealing (const GSLSimAnnealing &)=delete;  ;  GSLSimAnnealing (GSLSimAnnealing &&)=delete;  ;  ~GSLSimAnnealing ();  Destructor (no operations) ;  ; GSLSimAnnealing & operator= (const GSLSimAnnealing &rhs)=delete;  ; GSLSimAnnealing & operator= (GSLSimAnnealing &&rhs)=delete;  ; GSLSimAnParams & Params ();  ; const GSLSimAnParams & Params () const;  ; void SetParams (const GSLSimAnParams &params);  ; int Solve (const ROOT::Math::IMultiGenFunction &func, const double *x0, const double *scale, double *xmin, bool debug=false);  solve the simulated annealing given a multi-dim function, the initial vector parameters and a vector containing the scaling factors for the parameters ;  ; int Solve (GSLSimAnFunc &func, bool debug=false);  solve the simulated annealing given a GSLSimAnFunc object The object will contain the initial state at the beginning and the final minimum state at the end ;  . Private Attributes; GSLSimAnParams fParams;  . #include <Math/GSLSimAnnealing.h>; Constructor & Destructor Documentation. ◆ GSLSimAnnealing() [1/3]. ROOT::Math::GSLSimAnnealing::GSLSimAnnealing ; (; ). Default constructor. ; Definition at line 174 of file GSLSimAnnealing.cxx. ◆ ~GSLSimAnnealing(). ROOT::Math::GSLSimAnnealing::~GSLSimAnnealing ; (; ). inline . Destructor (no operations) ; Definition at line 205 of file GSLSimAnnealing.h. ◆ GSLSimAnnealing() [2/3]. ROOT::Math::GSLSimAnnealing::GSLSimAnn",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnnealing.html:96,Load,Loading,96,doc/master/classROOT_1_1Math_1_1GSLSimAnnealing.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnnealing.html,2,"['Load', 'perform']","['Loading', 'performing']"
Performance,". ROOT: ROOT::Math::GSLVegasIntegrationWorkspace Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::GSLVegasIntegrationWorkspace Class Reference. ; workspace for VEGAS ; Definition at line 85 of file GSLMCIntegrationWorkspace.h. Public Member Functions;  GSLVegasIntegrationWorkspace (size_t dim=0);  ; double Chisq () const;  ; void Clear () override;  free the workspace deleting the GSL pointer ;  ; gsl_monte_vegas_state * GetWS ();  ; bool Init (size_t dim) override;  initialize the workspace creating the GSL pointer if it is not there ;  ; size_t NDim () const override;  ; std::unique_ptr< IOptions > Options () const override;  retrieve option pointer corresponding to parameters create a new object to be managed by the user ;  ; VegasParameters & Parameters ();  ; const VegasParameters & Parameters () const;  ; bool ReInit () override;  re-initialize an existing the workspace ;  ; double Result () const;  ; virtual void SetOptions (const ROOT::Math::IOptions &opt) override;  set options ;  ; void SetParameters (const struct VegasParameters &p);  ; double Sigma () const;  ; MCIntegration::Type Type () const override;  ;  Public Member Functions inherited from ROOT::Math::GSLMCIntegrationWorkspace;  GSLMCIntegrationWorkspace ();  ; virtual ~GSLMCIntegrationWorkspace ();  . Private Member Functions; void SetVegasParameters ();  . Private Attributes; VegasParameters fParams;  ; gsl_monte_vegas_state * fWs;  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/math/mathmore/src/GSLMCIntegrationWorkspace.h>. Inheritance diagram for ROOT::Math::GSLVegasIntegrationWorkspace:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ GSLVegasIntegrationWorkspace(). ROOT::Math::GSLVega",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLVegasIntegrationWorkspace.html:109,Load,Loading,109,doc/master/classROOT_1_1Math_1_1GSLVegasIntegrationWorkspace.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLVegasIntegrationWorkspace.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::GaussIntegrator Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; List of all members ; ROOT::Math::GaussIntegrator Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; User class for performing function integration. ; It will use the Gauss Method for function integration in a given interval. This class is implemented from TF1::Integral(). ; Definition at line 40 of file GaussIntegrator.h. Public Member Functions;  GaussIntegrator (double absTol=-1, double relTol=-1);  Default Constructor. ;  ;  ~GaussIntegrator () override;  Destructor. ;  ; void AbsValue (bool flag);  Static function: set the fgAbsValue flag. ;  ; double Error () const override;  Return the estimate of the absolute Error of the last Integral calculation. ;  ; double Integral () override;  Returns Integral of function on an infinite interval. ;  ; double Integral (const std::vector< double > &pts) override;  This method is not implemented. ;  ; double Integral (double a, double b) override;  Returns Integral of function between a and b. ;  ; double IntegralCauchy (double a, double b, double c) override;  This method is not implemented. ;  ; double IntegralLow (double b) override;  Returns Integral of function on a lower semi-infinite interval. ;  ; double IntegralUp (double a) override;  Returns Integral of function on an upper semi-infinite interval. ;  ; ROOT::Math::IntegratorOneDimOptions Options () const override;  get the option used for the integration ;  ; double Result () const override;  Returns the result of the last Integral calculation. ;  ; void SetAbsTolerance (double eps) override;  This method is not implemented. ;  ; void SetFunction (const IGenFunction &) override;  Set integration function (flag control if function must be copied inside).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GaussIntegrator.html:96,Load,Loading,96,doc/master/classROOT_1_1Math_1_1GaussIntegrator.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GaussIntegrator.html,2,"['Load', 'perform']","['Loading', 'performing']"
Performance,". ROOT: ROOT::Math::GaussLegendreIntegrator Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; ROOT::Math::GaussLegendreIntegrator Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; User class for performing function integration. ; It will use the Gauss-Legendre Method for function integration in a given interval. This class is implemented from TF1::Integral(). ; Definition at line 37 of file GaussLegendreIntegrator.h. Public Member Functions;  GaussLegendreIntegrator (int num=10, double eps=1e-12);  Basic constructor of GaussLegendreIntegrator. ;  ;  ~GaussLegendreIntegrator () override;  Default Destructor. ;  ; int GetNumberPoints () const;  ; void GetWeightVectors (double *x, double *w) const;  Returns the arrays x and w containing the abscissa and weight of the Gauss-Legendre n-point quadrature formula. ;  ; int NEval () const override;  return number of function evaluations in calculating the integral This is equivalent to the number of points ;  ; ROOT::Math::IntegratorOneDimOptions Options () const override;  get the option used for the integration ;  ; void SetAbsTolerance (double) override;  This method is not implemented. ;  ; void SetNumberPoints (int num);  Set the number of points used in the calculation of the integral. ;  ; void SetOptions (const ROOT::Math::IntegratorOneDimOptions &opt) override;  set the options (should be re-implemented by derived classes -if more options than tolerance exist ;  ; void SetRelTolerance (double) override;  Set the desired relative Error. ;  ;  Public Member Functions inherited from ROOT::Math::GaussIntegrator;  GaussIntegrator (double absTol=-1, double relTol=-1);  Default Constructor. ;  ;  ~GaussIntegrator () override;  Destructor. ;  ; void AbsValue (bool flag);  Static function: set the fgAbsValue ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GaussLegendreIntegrator.html:104,Load,Loading,104,doc/master/classROOT_1_1Math_1_1GaussLegendreIntegrator.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GaussLegendreIntegrator.html,2,"['Load', 'perform']","['Loading', 'performing']"
Performance,". ROOT: ROOT::Math::GenAlgoOptUtil Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Functions |; Variables ; ROOT::Math::GenAlgoOptUtil Namespace Reference. Functions; IOptions * DoFindDefault (std::string &algoname, OptionsMap &gOpts);  . Variables; static OptionsMap gAlgoOptions;  . Function Documentation. ◆ DoFindDefault(). IOptions * ROOT::Math::GenAlgoOptUtil::DoFindDefault ; (; std::string & ; algoname, . OptionsMap & ; gOpts . ). Definition at line 33 of file GenAlgoOptions.cxx. Variable Documentation. ◆ gAlgoOptions. OptionsMap ROOT::Math::GenAlgoOptUtil::gAlgoOptions. static . Definition at line 30 of file GenAlgoOptions.cxx. ROOTMathGenAlgoOptUtil. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:25 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1GenAlgoOptUtil.html:99,Load,Loading,99,doc/master/namespaceROOT_1_1Math_1_1GenAlgoOptUtil.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1GenAlgoOptUtil.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::GenAlgoOptions Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Static Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::GenAlgoOptions Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms. ; class implementing generic options for a numerical algorithm Just store the options in a map of string-value pairs ; Definition at line 32 of file GenAlgoOptions.h. Public Member Functions;  GenAlgoOptions ();  ;  ~GenAlgoOptions () override;  ; IOptions * Clone () const override;  generic methods for retrieving options ;  ; std::vector< std::string > GetAllIntKeys ();  ; std::vector< std::string > GetAllNamedKeys ();  ; std::vector< std::string > GetAllRealKeys ();  ; bool GetIntValue (const char *name, int &val) const override;  ; bool GetNamedValue (const char *name, std::string &val) const override;  ; bool GetRealValue (const char *name, double &val) const override;  ; void Print (std::ostream &os=std::cout) const override;  print options ;  ; void SetIntValue (const char *name, int val) override;  ; void SetNamedValue (const char *name, const char *val) override;  ; void SetRealValue (const char *name, double val) override;  Method that needs to be re-implemented by the derived classes. ;  ;  Public Member Functions inherited from ROOT::Math::IOptions;  IOptions ();  ; virtual ~IOptions ();  ; template<typename T > ; bool GetValue (const char *name, T &t) const;  ; int IValue (const char *name) const;  ; std::string NamedValue (const char *name) const;  ; double RValue (const char *name) const;  ; void SetValue (const char *name, const char *val);  ; void SetValue (const char *name, double val);  generic methods for retrieving options ;  ; void SetValue (const char *name, int val);  . Static Public Member Functions; static IOptions & Default (const char *algoname);  ; st",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GenAlgoOptions.html:95,Load,Loading,95,doc/master/classROOT_1_1Math_1_1GenAlgoOptions.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GenAlgoOptions.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::GenVector Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Functions ; ROOT::Math::GenVector Namespace Reference. Functions; void Throw (const char *s);  function throwing exception, by creating internally a GenVector_exception only when needed ;  . Function Documentation. ◆ Throw(). void ROOT::Math::GenVector::Throw ; (; const char * ; s). inline . function throwing exception, by creating internally a GenVector_exception only when needed ; Definition at line 80 of file GenVector_exception.h. ROOTMathGenVector. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:25 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1GenVector.html:94,Load,Loading,94,doc/master/namespaceROOT_1_1Math_1_1GenVector.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1GenVector.html,1,['Load'],['Loading']
Performance,. ROOT: ROOT::Math::GenVector_detail Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes ; ROOT::Math::GenVector_detail Namespace Reference. Classes; class  BitReproducible;  ; class  BitReproducibleException;  . ROOTMathGenVector_detail. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:25 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1GenVector__detail.html:101,Load,Loading,101,doc/master/namespaceROOT_1_1Math_1_1GenVector__detail.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1GenVector__detail.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::GenVector_exception Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Static Private Member Functions |; Friends |; List of all members ; ROOT::Math::GenVector_exception Class Reference. . Definition at line 36 of file GenVector_exception.h. Public Member Functions;  GenVector_exception (const std::string &s);  . Static Public Member Functions; static bool DisableThrow ();  ; static bool EnableThrow ();  . Static Private Member Functions; static bool & IsOn ();  . Friends; void GenVector::Throw (const char *);  ; void Throw (GenVector_exception &);  throw explicitly GenVector exceptions ;  . #include <Math/GenVector/GenVector_exception.h>. Inheritance diagram for ROOT::Math::GenVector_exception:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ GenVector_exception(). ROOT::Math::GenVector_exception::GenVector_exception ; (; const std::string & ; s). inline . Definition at line 38 of file GenVector_exception.h. Member Function Documentation. ◆ DisableThrow(). static bool ROOT::Math::GenVector_exception::DisableThrow ; (; ). inlinestatic . Definition at line 49 of file GenVector_exception.h. ◆ EnableThrow(). static bool ROOT::Math::GenVector_exception::EnableThrow ; (; ). inlinestatic . Definition at line 43 of file GenVector_exception.h. ◆ IsOn(). static bool & ROOT::Math::GenVector_exception::IsOn ; (; ). inlinestaticprivate . Definition at line 60 of file GenVector_exception.h. Friends And Related Symbol Documentation. ◆ GenVector::Throw. void GenVector::Throw ; (; const char * ; ). friend . ◆ Throw. void Throw ; (; GenVector_exception & ; e). friend . throw explicitly GenVector exceptions ; Definition at line 72 of file GenVector_exception.h. math/genvector/inc/Math/GenVector/GenVector_exception.h. ROOTMathGenVector_exception. R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GenVector__exception.html:100,Load,Loading,100,doc/master/classROOT_1_1Math_1_1GenVector__exception.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GenVector__exception.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::GeneralHessianCalc< T > Struct Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Static Public Member Functions |; List of all members ; ROOT::Math::GeneralHessianCalc< T > Struct Template Reference. ; template<class T>; struct ROOT::Math::GeneralHessianCalc< T >; Definition at line 308 of file WrappedMultiTF1.h. Static Public Member Functions; static bool Hessian (TF1 *, const T *, const double *, T *);  ; static bool IsAvailable (TF1 *);  . #include <Math/WrappedMultiTF1.h>; Member Function Documentation. ◆ Hessian(). template<class T > . static bool ROOT::Math::GeneralHessianCalc< T >::Hessian ; (; TF1 * ; , . const T * ; , . const double * ; , . T * ;  . ). inlinestatic . Definition at line 309 of file WrappedMultiTF1.h. ◆ IsAvailable(). template<class T > . static bool ROOT::Math::GeneralHessianCalc< T >::IsAvailable ; (; TF1 * ; ). inlinestatic . Definition at line 314 of file WrappedMultiTF1.h. The documentation for this struct was generated from the following file:; hist/hist/inc/Math/WrappedMultiTF1.h. ROOTMathGeneralHessianCalc. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:20 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structROOT_1_1Math_1_1GeneralHessianCalc.html:114,Load,Loading,114,doc/master/structROOT_1_1Math_1_1GeneralHessianCalc.html,https://root.cern,https://root.cern/doc/master/structROOT_1_1Math_1_1GeneralHessianCalc.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::GeneralHessianCalc< double > Struct Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Static Public Member Functions |; List of all members ; ROOT::Math::GeneralHessianCalc< double > Struct Reference. . Definition at line 318 of file WrappedMultiTF1.h. Static Public Member Functions; static bool Hessian (TF1 *func, const double *x, const double *par, double *h);  ; static bool IsAvailable (TF1 *func);  . #include <Math/WrappedMultiTF1.h>; Member Function Documentation. ◆ Hessian(). static bool ROOT::Math::GeneralHessianCalc< double >::Hessian ; (; TF1 * ; func, . const double * ; x, . const double * ; par, . double * ; h . ). inlinestatic . Definition at line 319 of file WrappedMultiTF1.h. ◆ IsAvailable(). static bool ROOT::Math::GeneralHessianCalc< double >::IsAvailable ; (; TF1 * ; func). inlinestatic . Definition at line 337 of file WrappedMultiTF1.h. The documentation for this struct was generated from the following file:; hist/hist/inc/Math/WrappedMultiTF1.h. ROOTMathGeneralHessianCalc< double >. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:20 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structROOT_1_1Math_1_1GeneralHessianCalc_3_01double_01_4.html:110,Load,Loading,110,doc/master/structROOT_1_1Math_1_1GeneralHessianCalc_3_01double_01_4.html,https://root.cern,https://root.cern/doc/master/structROOT_1_1Math_1_1GeneralHessianCalc_3_01double_01_4.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::GeneralLinearFunctionDerivation< T > Struct Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Static Public Member Functions |; List of all members ; ROOT::Math::GeneralLinearFunctionDerivation< T > Struct Template Reference. ; template<class T>; struct ROOT::Math::GeneralLinearFunctionDerivation< T >Auxiliar class to bypass the (provisional) lack of vectorization in TFormula::EvalPar. ; WrappedMultiTF1Templ::DoParameterDerivation calls TFormula::EvalPar in the case of a general linear function built with TFormula using ++; as EvalPar is not vectorized, in order to generalize DoParameterDerivative with a general type T, we use this auxiliar class to branch the code in compile time with the double specialization (that can call EvalPar) and the general implementation (that throws an error in the case of general linear function). ; Definition at line 203 of file WrappedMultiTF1.h. Static Public Member Functions; static T DoParameterDerivative (const WrappedMultiTF1Templ< T > *, const T *, unsigned int);  . #include <Math/WrappedMultiTF1.h>; Member Function Documentation. ◆ DoParameterDerivative(). template<class T > . static T ROOT::Math::GeneralLinearFunctionDerivation< T >::DoParameterDerivative ; (; const WrappedMultiTF1Templ< T > * ; , . const T * ; , . unsigned int ;  . ). inlinestatic . Definition at line 204 of file WrappedMultiTF1.h. The documentation for this struct was generated from the following file:; hist/hist/inc/Math/WrappedMultiTF1.h. ROOTMathGeneralLinearFunctionDerivation. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:20 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structROOT_1_1Math_1_1GeneralLinearFunctionDerivation.html:127,Load,Loading,127,doc/master/structROOT_1_1Math_1_1GeneralLinearFunctionDerivation.html,https://root.cern,https://root.cern/doc/master/structROOT_1_1Math_1_1GeneralLinearFunctionDerivation.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::GeneralLinearFunctionDerivation< double > Struct Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Static Public Member Functions |; List of all members ; ROOT::Math::GeneralLinearFunctionDerivation< double > Struct Reference. . Definition at line 214 of file WrappedMultiTF1.h. Static Public Member Functions; static double DoParameterDerivative (const WrappedMultiTF1Templ< double > *wrappedFunc, const double *x, unsigned int ipar);  . #include <Math/WrappedMultiTF1.h>; Member Function Documentation. ◆ DoParameterDerivative(). static double ROOT::Math::GeneralLinearFunctionDerivation< double >::DoParameterDerivative ; (; const WrappedMultiTF1Templ< double > * ; wrappedFunc, . const double * ; x, . unsigned int ; ipar . ). inlinestatic . Definition at line 216 of file WrappedMultiTF1.h. The documentation for this struct was generated from the following file:; hist/hist/inc/Math/WrappedMultiTF1.h. ROOTMathGeneralLinearFunctionDerivation< double >. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:20 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structROOT_1_1Math_1_1GeneralLinearFunctionDerivation_3_01double_01_4.html:123,Load,Loading,123,doc/master/structROOT_1_1Math_1_1GeneralLinearFunctionDerivation_3_01double_01_4.html,https://root.cern,https://root.cern/doc/master/structROOT_1_1Math_1_1GeneralLinearFunctionDerivation_3_01double_01_4.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::GeneticMinimizer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; ROOT::Math::GeneticMinimizer Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Multi-dimensional Minimization. ; GeneticMinimizer. ; Minimizer class based on the Gentic algorithm implemented in TMVA ; Definition at line 61 of file GeneticMinimizer.h. Public Member Functions;  GeneticMinimizer (int i=0);  ;  ~GeneticMinimizer () override;  ; void Clear () override;  reset for consecutive minimization - implement if needed ;  ; double CovMatrix (unsigned int i, unsigned int j) const override;  return covariance matrices element for variables ivar,jvar if the variable is fixed the return value is zero The ordering of the variables is the same as in the parameter and errors vectors ;  ; double Edm () const override;  return expected distance reached from the minimum (re-implement if minimizer provides it ;  ; const double * Errors () const override;  return errors at the minimum ;  ; const double * MinGradient () const override;  return pointer to gradient values at the minimum ;  ; bool Minimize () override;  method to perform the minimization ;  ; const GeneticMinimizerParameters & MinimizerParameters () const;  ; double MinValue () const override;  return minimum function value ;  ; unsigned int NCalls () const override;  number of function calls to reach the minimum ;  ; unsigned int NDim () const override;  this is <= Function().NDim() which is the total number of variables (free+ constrained ones) ;  ; unsigned int NFree () const override;  number of free variables (real dimension of the problem) this is <= Function().NDim() which is the total (re-implement if minimizer supports bounded parameters) ;  ; ROOT::Math::MinimizerOptions Options () const override;  retrieve the minimizer opt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html:97,Load,Loading,97,doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::GeneticMinimizerParameters Struct Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; ROOT::Math::GeneticMinimizerParameters Struct Reference. . Definition at line 35 of file GeneticMinimizer.h. Public Member Functions;  GeneticMinimizerParameters ();  . Public Attributes; Double_t fConvCrit;  ; Int_t fCycles;  ; Int_t fNsteps;  ; Int_t fPopSize;  ; Double_t fSC_factor;  ; Int_t fSC_rate;  ; Int_t fSC_steps;  ; Int_t fSeed;  . #include <Math/GeneticMinimizer.h>; Constructor & Destructor Documentation. ◆ GeneticMinimizerParameters(). ROOT::Math::GeneticMinimizerParameters::GeneticMinimizerParameters ; (; ). Definition at line 82 of file GeneticMinimizer.cxx. Member Data Documentation. ◆ fConvCrit. Double_t ROOT::Math::GeneticMinimizerParameters::fConvCrit. Definition at line 43 of file GeneticMinimizer.h. ◆ fCycles. Int_t ROOT::Math::GeneticMinimizerParameters::fCycles. Definition at line 39 of file GeneticMinimizer.h. ◆ fNsteps. Int_t ROOT::Math::GeneticMinimizerParameters::fNsteps. Definition at line 38 of file GeneticMinimizer.h. ◆ fPopSize. Int_t ROOT::Math::GeneticMinimizerParameters::fPopSize. Definition at line 37 of file GeneticMinimizer.h. ◆ fSC_factor. Double_t ROOT::Math::GeneticMinimizerParameters::fSC_factor. Definition at line 42 of file GeneticMinimizer.h. ◆ fSC_rate. Int_t ROOT::Math::GeneticMinimizerParameters::fSC_rate. Definition at line 41 of file GeneticMinimizer.h. ◆ fSC_steps. Int_t ROOT::Math::GeneticMinimizerParameters::fSC_steps. Definition at line 40 of file GeneticMinimizer.h. ◆ fSeed. Int_t ROOT::Math::GeneticMinimizerParameters::fSeed. Definition at line 44 of file GeneticMinimizer.h. Collaboration diagram for ROOT::Math::GeneticMinimizerParameters:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; The documentation for this struct was genera",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structROOT_1_1Math_1_1GeneticMinimizerParameters.html:108,Load,Loading,108,doc/master/structROOT_1_1Math_1_1GeneticMinimizerParameters.html,https://root.cern,https://root.cern/doc/master/structROOT_1_1Math_1_1GeneticMinimizerParameters.html,1,['Load'],['Loading']
Performance,. ROOT: ROOT::Math::GlobalCoordinateSystemTag Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. ROOT::Math::GlobalCoordinateSystemTag Class ReferenceMath » Physics Vectors. ; Tag for identifying vectors based on a global coordinate system. ; See alsoOverview of the physics vector library ; Definition at line 49 of file CoordinateSystemTags.h. #include <Math/GenVector/CoordinateSystemTags.h>; The documentation for this class was generated from the following file:; math/genvector/inc/Math/GenVector/CoordinateSystemTags.h. ROOTMathGlobalCoordinateSystemTag. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:20 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GlobalCoordinateSystemTag.html:106,Load,Loading,106,doc/master/classROOT_1_1Math_1_1GlobalCoordinateSystemTag.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GlobalCoordinateSystemTag.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::GoFTest Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Static Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::GoFTest Class ReferenceMath » MathCore » Goodness of Fit Tests. ; GoFTest class implementing the 1 sample and 2 sample goodness of fit tests for uni-variate distributions and data. ; The class implements the AndersonDarling and the KolmogorovSmirnov tests; In the case of the 1-sample test the user needs to provide:; input data; theoretical distribution. The distribution can be provided as a function object (functor) or an object implementing the ROOT::Math::IGenFunction interface. One can provide either the PDF (default) of the CDF (cumulative distribution) One can also provide a pre-defined function. In that case one needs to give also the distribution parameters otherwise the default values will be used. The pre-defined distributions are:; kGaussian with default parameter mean=0, sigma=1; kExponential with default parameter rate=1; kLogNormal with default parameter meanlog=0, sigmalog=1. Note that one should not use data computed distribution parameters, otherwise the test will be biased. The 1-sample KS test using data computed quantities is called Lilliefors test (see https://en.wikipedia.org/wiki/Lilliefors_test) . Definition at line 65 of file GoFTest.h. Public Types; enum  EDistribution { ;   kUndefined; , kUserDefined; , kGaussian; , kLogNormal; , ;   kExponential. };  H0 distributions for using only with 1-sample tests. More...;  ; enum  ETestType { kAD; , kAD2s; , kKS; , kKS2s; };  Goodness of Fit test types for using with the class's unary functions as a shorthand for the in-built methods. More...;  ; enum  EUserDistribution { kCDF; , kPDF; };  User input distribution option. More...;  . Public Member Functions;  GoFT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html:88,Load,Loading,88,doc/master/classROOT_1_1Math_1_1GoFTest.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::GradFunctor Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::GradFunctor Class ReferenceMath » MathCore » Function Classes and Interfaces » Generic Function Evaluation Interfaces. ; GradFunctor class for Multidimensional gradient functions. ; It is used to wrap in a very C++ callable object to make gradient functions. It can be constructed in three different way: . from an object implementing both double operator()( const double * ) for the function evaluation and double Derivative(const double *, int icoord) for the partial derivatives . from an object implementing any member function like Foo::XXX(const double *) for the function evaluation and any member function like Foo::XXX(const double *, int icoord) for the partial derivatives . from two function objects implementing double operator()( const double * ) for the function evaluation and another function object implementing double operator() (const double *, int icoord) for the partial derivatives . from two function objects . The function dimension is required when constructing the functor. ; Definition at line 142 of file Functor.h. Public Member Functions;  GradFunctor ()=default;  Default constructor. ;  ; template<typename Func > ;  GradFunctor (const Func &f, unsigned int dim);  construct from a callable object of multi-dimension implementing operator()(const double *x) and Derivative(const double * x,icoord) ;  ; template<class PtrObj , typename MemFn , typename DerivMemFn , std::enable_if_t< std::is_floating_point< decltype((std::declval< std::remove_pointer_t< PtrObj > >().*std::declval< DerivMemFn >())(std::declval< const double * >(), std::declval< int >()))>::value , bool > ;  GradFunctor (const PtrObj &p, MemFn memFn, DerivMemFn gradFn, unsigned int dim);  Construct from a pointer to member function a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GradFunctor.html:92,Load,Loading,92,doc/master/classROOT_1_1Math_1_1GradFunctor.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GradFunctor.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::GradFunctor1D Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::GradFunctor1D Class ReferenceMath » MathCore » Function Classes and Interfaces » Generic Function Evaluation Interfaces. ; GradFunctor1D class for one-dimensional gradient functions. ; It is used to wrap in a very C++ callable object to make a 1D gradient functions. It can be constructed in three different way: . from an object implementing both double operator()( double ) for the function evaluation and double Derivative(double ) for the partial derivatives . from an object implementing any member function like Foo::XXX(double ) for the function evaluation and any other member function like Foo::YYY(double ) for the derivative. . from an 2 function objects implementing double operator()( double ) . One object provides the function evaluation, the other the derivative. . Definition at line 269 of file Functor.h. Public Member Functions;  GradFunctor1D ()=default;  Default constructor. ;  ; template<typename Func > ;  GradFunctor1D (const Func &f);  Construct from an object with the right signature, implementing both operator() (double x) and Derivative(double x). ;  ; template<class PtrObj , typename MemFn , typename GradMemFn > ;  GradFunctor1D (const PtrObj &p, MemFn memFn, GradMemFn gradFn);  construct from a pointer to class and two pointers to member functions, one for the function evaluation and the other for the derivative. ;  ;  GradFunctor1D (std::function< double(double)> const &f, std::function< double(double)> const &g);  Specialized constructor from 2 function objects implementing double operator()(double x). ;  ; GradFunctor1D * Clone () const override;  Clone a function. ;  ;  Public Member Functions inherited from ROOT::Math::IGradientFunctionOneDim; double Derivative (const double *x) cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GradFunctor1D.html:94,Load,Loading,94,doc/master/classROOT_1_1Math_1_1GradFunctor1D.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GradFunctor1D.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::IBaseFunctionMultiDimTempl< T > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Member Functions |; List of all members ; ROOT::Math::IBaseFunctionMultiDimTempl< T > Class Template ReferenceabstractMath » MathCore » Function Classes and Interfaces » Generic Function Evaluation Interfaces. ; template<class T>; class ROOT::Math::IBaseFunctionMultiDimTempl< T >Documentation for the abstract class IBaseFunctionMultiDim. ; Interface (abstract class) for generic functions objects of multi-dimension Provides a method to evaluate the function given a vector of coordinate values, by implementing operator() (const double *). In addition it defines the interface for copying functions via the pure virtual method Clone() and the interface for getting the function dimension via the NDim() method. Derived classes must implement the pure private virtual method DoEval(const double *) for the function evaluation in addition to NDim() and Clone(). ; Definition at line 61 of file IFunction.h. Public Types; typedef T BackendType;  ; typedef IBaseFunctionMultiDimTempl< T > BaseFunc;  . Public Member Functions; virtual ~IBaseFunctionMultiDimTempl ()=default;  ; virtual IBaseFunctionMultiDimTempl< T > * Clone () const =0;  Clone a function. ;  ; virtual bool HasGradient () const;  ; virtual unsigned int NDim () const =0;  Retrieve the dimension of the function. ;  ; T operator() (const T *x) const;  Evaluate the function at a point x[]. ;  . Private Member Functions; virtual T DoEval (const T *x) const =0;  Implementation of the evaluation function. Must be implemented by derived classes. ;  . #include <Math/IFunction.h>. Inheritance diagram for ROOT::Math::IBaseFunctionMultiDimTempl< T >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ BackendType. template<cl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1IBaseFunctionMultiDimTempl.html:121,Load,Loading,121,doc/master/classROOT_1_1Math_1_1IBaseFunctionMultiDimTempl.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IBaseFunctionMultiDimTempl.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::IBaseFunctionOneDim Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Member Functions |; List of all members ; ROOT::Math::IBaseFunctionOneDim Class ReferenceabstractMath » MathCore » Function Classes and Interfaces » Generic Function Evaluation Interfaces. ; Interface (abstract class) for generic functions objects of one-dimension Provides a method to evaluate the function given a value (simple double) by implementing operator() (const double ). ; In addition it defines the interface for copying functions via the pure virtual method Clone(). Derived classes must implement the pure virtual private method DoEval(double ) for the function evaluation in addition to Clone(). An interface for evaluating the function passing a vector (like for multidim functions) is also provided ; Definition at line 112 of file IFunction.h. Public Types; typedef IBaseFunctionOneDim BaseFunc;  . Public Member Functions; virtual ~IBaseFunctionOneDim ()=default;  ; virtual IBaseFunctionOneDim * Clone () const =0;  Clone a function. ;  ; virtual bool HasGradient () const;  ; double operator() (const double *x) const;  Evaluate the function at a point x[]. ;  ; double operator() (double x) const;  Evaluate the function at a point x. ;  . Private Member Functions; virtual double DoEval (double x) const =0;  implementation of the evaluation function. Must be implemented by derived classes ;  . #include <Math/IFunction.h>. Inheritance diagram for ROOT::Math::IBaseFunctionOneDim:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ BaseFunc. typedef IBaseFunctionOneDim ROOT::Math::IBaseFunctionOneDim::BaseFunc. Definition at line 116 of file IFunction.h. Constructor & Destructor Documentation. ◆ ~IBaseFunctionOneDim(). virtual ROOT::Math::IBaseFunctionOneDim::~IBaseFunctionOneDim ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1IBaseFunctionOneDim.html:100,Load,Loading,100,doc/master/classROOT_1_1Math_1_1IBaseFunctionOneDim.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IBaseFunctionOneDim.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::IBaseParam Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; List of all members ; ROOT::Math::IBaseParam Class ReferenceabstractMath » MathCore » Function Classes and Interfaces » Parametric Function Evaluation Interfaces. ; Documentation for the abstract class IBaseParam. ; It defines the interface for dealing with the function parameters This is used only for internal convenience, to avoid redefining the Parameter API for the one and the multi-dim functions. Concrete class should derive from ROOT::Math::IParamFunction and not from this class. ; Definition at line 51 of file IParamFunction.h. Public Member Functions; virtual ~IBaseParam ();  Virtual Destructor (no operations) ;  ; virtual unsigned int NPar () const =0;  Return the number of Parameters. ;  ; virtual std::string ParameterName (unsigned int i) const;  Return the name of the i-th parameter (starting from zero) Overwrite if want to avoid the default name (""Par_0, Par_1, ..."") ;  ; virtual const double * Parameters () const =0;  Access the parameter values. ;  ; virtual void SetParameters (const double *p)=0;  Set the parameter values. ;  . #include <Math/IParamFunction.h>. Inheritance diagram for ROOT::Math::IBaseParam:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ ~IBaseParam(). virtual ROOT::Math::IBaseParam::~IBaseParam ; (; ). inlinevirtual . Virtual Destructor (no operations) ; Definition at line 59 of file IParamFunction.h. Member Function Documentation. ◆ NPar(). virtual unsigned int ROOT::Math::IBaseParam::NPar ; (; ); const. pure virtual . Return the number of Parameters. ; Implemented in ROOT::Math::ParamFunction< IParamGradFunction >, ROOT::Math::WrappedMultiTF1Templ< T >, ROOT::Math::WrappedTF1, ROOT::Math::MultiDimParamFunctionAdapter, ROOT::Math::MultiDimParamGradFunctionAdapter, RO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1IBaseParam.html:91,Load,Loading,91,doc/master/classROOT_1_1Math_1_1IBaseParam.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IBaseParam.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::IGradientFunctionMultiDimTempl< T > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Member Functions |; List of all members ; ROOT::Math::IGradientFunctionMultiDimTempl< T > Class Template ReferenceabstractMath » MathCore » Function Classes and Interfaces » Generic Function Evaluation Interfaces. ; template<class T>; class ROOT::Math::IGradientFunctionMultiDimTempl< T >Interface (abstract class) for multi-dimensional functions providing a gradient calculation. ; The method ROOT::Math::IFunction::Gradient calculates the full gradient vector, ROOT::Math::IFunction::Derivative calculates the partial derivative for each coordinate and ROOT::Math::Fdf calculates the gradient and the function value at the same time. The pure private virtual method DoDerivative() must be implemented by the derived classes, while Gradient and FdF are by default implemented using DoDerivative, butthey can be overloaded by the derived classes to improve the efficiency in the derivative calculation.; Gradient interface (abstract class) defining the signature for calculating the gradient of a multi-dimensional function. Three methods are provided:; Gradient(const double *x, double * grad) evaluate the full gradient vector at the vector value x; Derivative(const double * x, int icoord) evaluate the partial derivative for the icoord coordinate; FdF(const double *x, double &f, double * g) evaluate at the same time gradient and function/ . Definition at line 168 of file IFunction.h. Public Types; typedef IBaseFunctionMultiDimTempl< T > BaseFunc;  ; typedef IGradientFunctionMultiDimTempl< T > BaseGrad;  ;  Public Types inherited from ROOT::Math::IBaseFunctionMultiDimTempl< T >; typedef T BackendType;  ; typedef IBaseFunctionMultiDimTempl< T > BaseFunc;  . Public Member Functions; T Derivative (const T *x, unsigned int icoord, T *previous_grad, T *pre",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1IGradientFunctionMultiDimTempl.html:125,Load,Loading,125,doc/master/classROOT_1_1Math_1_1IGradientFunctionMultiDimTempl.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IGradientFunctionMultiDimTempl.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::IGradientFunctionOneDim Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Member Functions |; List of all members ; ROOT::Math::IGradientFunctionOneDim Class ReferenceabstractMath » MathCore » Function Classes and Interfaces » Generic Function Evaluation Interfaces. ; Interface (abstract class) for one-dimensional functions providing a gradient calculation. ; The method ROOT::Math::IFunction::Derivative calculates the derivative and ROOT::Math::Fdf calculates the derivative and the function values at the same time. The pure private virtual method DoDerivative() must be implemented by the derived classes, while FdF is by default implemented using DoDerivative, but it can be overloaded by the derived classes to improve the efficiency in the derivative calculation.; Specialized Gradient interface(abstract class) for one dimensional functions It provides a method to evaluate the derivative of the function, Derivative and a method to evaluate at the same time the function and the derivative FdF ; Definition at line 254 of file IFunction.h. Public Types; typedef IBaseFunctionOneDim BaseFunc;  ; typedef IGradientFunctionOneDim BaseGrad;  ;  Public Types inherited from ROOT::Math::IBaseFunctionOneDim; typedef IBaseFunctionOneDim BaseFunc;  . Public Member Functions; double Derivative (const double *x) const;  Compatibility method with multi-dimensional interface for partial derivative. ;  ; double Derivative (double x) const;  Return the derivative of the function at a point x Use the private method DoDerivative. ;  ; void FdF (const double *x, double &f, double *df) const;  Compatibility method with multi-dimensional interface for Gradient and function evaluation. ;  ; virtual void FdF (double x, double &f, double &df) const;  Optimized method to evaluate at the same time the function value and derivative at a point x. ;  ; void Gradi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1IGradientFunctionOneDim.html:104,Load,Loading,104,doc/master/classROOT_1_1Math_1_1IGradientFunctionOneDim.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IGradientFunctionOneDim.html,1,['Load'],['Loading']
Performance,. ROOT: ROOT::Math::IGradientMultiDimTempl< T > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. ROOT::Math::IGradientMultiDimTempl< T > Class Template Reference. ; template<class T>; class ROOT::Math::IGradientMultiDimTempl< T >; Definition at line 27 of file IFunctionfwd.h.; The documentation for this class was generated from the following file:; math/mathcore/inc/Math/IFunctionfwd.h. ROOTMathIGradientMultiDimTempl. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:21 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1IGradientMultiDimTempl.html:117,Load,Loading,117,doc/master/classROOT_1_1Math_1_1IGradientMultiDimTempl.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IGradientMultiDimTempl.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::IMinimizer1D Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; List of all members ; ROOT::Math::IMinimizer1D Class ReferenceabstractMath » MathCore | Math » MathMore » Numerical Algorithms » One-dimensional Minimization. ; Interface class for numerical methods for one-dimensional minimization. ; Definition at line 39 of file IMinimizer1D.h. Public Member Functions;  IMinimizer1D ();  ; virtual ~IMinimizer1D ();  ; virtual double FValLower () const =0;  Return function value at current lower bound of the minimization interval. ;  ; virtual double FValMinimum () const =0;  Return function value at current estimate of the minimum. ;  ; virtual double FValUpper () const =0;  Return function value at current upper bound of the minimization interval. ;  ; virtual int Iterations () const =0;  Return number of iteration used to find minimum. ;  ; virtual bool Minimize (int maxIter, double absTol, double relTol)=0;  Find minimum position iterating until convergence specified by the absolute and relative tolerance or the maximum number of iteration is reached Return true if iterations converged successfully @param maxIter maximum number of iteration @param absTol desired absolute error in the minimum position @param absTol desired relative error in the minimum position. ;  ; virtual const char * Name () const =0;  Return name of minimization algorithm. ;  ; virtual int Status () const =0;  Returns the status of the previous estimate. ;  ; virtual double XLower () const =0;  Return current lower bound of the minimization interval. ;  ; virtual double XMinimum () const =0;  Return current estimate of the position of the minimum. ;  ; virtual double XUpper () const =0;  Return current upper bound of the minimization interval. ;  . #include <Math/IMinimizer1D.h>. Inheritance diagram for ROOT::Math::IMinimizer1D:. This browser is not able to show SVG: try Firefox, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1IMinimizer1D.html:93,Load,Loading,93,doc/master/classROOT_1_1Math_1_1IMinimizer1D.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IMinimizer1D.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::IOptions Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; List of all members ; ROOT::Math::IOptions Class ReferenceabstractMath » MathCore | Math » MathMore » Numerical Algorithms. ; Generic interface for defining configuration options of a numerical algorithm. ; Definition at line 28 of file IOptions.h. Public Member Functions;  IOptions ();  ; virtual ~IOptions ();  ; virtual IOptions * Clone () const =0;  ; virtual bool GetIntValue (const char *, int &) const;  ; virtual bool GetNamedValue (const char *, std::string &) const;  ; virtual bool GetRealValue (const char *, double &) const;  ; template<typename T > ; bool GetValue (const char *name, T &t) const;  ; int IValue (const char *name) const;  ; std::string NamedValue (const char *name) const;  ; virtual void Print (std::ostream &=std::cout) const;  print options ;  ; double RValue (const char *name) const;  ; virtual void SetIntValue (const char *, int);  ; virtual void SetNamedValue (const char *, const char *);  ; virtual void SetRealValue (const char *, double);  method which need to be re-implemented by the derived classes ;  ; void SetValue (const char *name, const char *val);  ; void SetValue (const char *name, double val);  generic methods for retrieving options ;  ; void SetValue (const char *name, int val);  . Private Member Functions; bool DoGetValue (const char *name, double &val) const;  ; bool DoGetValue (const char *name, int &val) const;  ; bool DoGetValue (const char *name, std::string &val) const;  . #include <Math/IOptions.h>. Inheritance diagram for ROOT::Math::IOptions:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ IOptions(). ROOT::Math::IOptions::IOptions ; (; ). inline . Definition at line 32 of file IOptions.h. ◆ ~IOptions(). virtual ROOT::Math::IOp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1IOptions.html:89,Load,Loading,89,doc/master/classROOT_1_1Math_1_1IOptions.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IOptions.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::IParametricFunctionMultiDimTempl< T > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Member Functions |; List of all members ; ROOT::Math::IParametricFunctionMultiDimTempl< T > Class Template ReferenceabstractMath » MathCore » Function Classes and Interfaces » Parametric Function Evaluation Interfaces. ; template<class T>; class ROOT::Math::IParametricFunctionMultiDimTempl< T >IParamFunction interface (abstract class) describing multi-dimensional parametric functions It is a derived class from ROOT::Math::IBaseFunctionMultiDim and ROOT::Math::IBaseParam. ; Provides the interface for evaluating a function passing a coordinate vector and a parameter vector. ; Definition at line 107 of file IParamFunction.h. Public Types; typedef IBaseFunctionMultiDimTempl< T > BaseFunc;  ;  Public Types inherited from ROOT::Math::IBaseFunctionMultiDimTempl< T >; typedef T BackendType;  ; typedef IBaseFunctionMultiDimTempl< T > BaseFunc;  . Public Member Functions; T operator() (const T *x) const;  ; T operator() (const T *x, const double *p) const;  Evaluate function at a point x and for given parameters p. ;  ;  Public Member Functions inherited from ROOT::Math::IBaseFunctionMultiDimTempl< T >; virtual ~IBaseFunctionMultiDimTempl ()=default;  ; virtual IBaseFunctionMultiDimTempl< T > * Clone () const =0;  Clone a function. ;  ; virtual bool HasGradient () const;  ; virtual unsigned int NDim () const =0;  Retrieve the dimension of the function. ;  ; T operator() (const T *x) const;  Evaluate the function at a point x[]. ;  ;  Public Member Functions inherited from ROOT::Math::IBaseParam; virtual ~IBaseParam ();  Virtual Destructor (no operations) ;  ; virtual unsigned int NPar () const =0;  Return the number of Parameters. ;  ; virtual std::string ParameterName (unsigned int i) const;  Return the name of the i-th parameter (starting f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricFunctionMultiDimTempl.html:127,Load,Loading,127,doc/master/classROOT_1_1Math_1_1IParametricFunctionMultiDimTempl.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricFunctionMultiDimTempl.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::IParametricFunctionOneDim Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Member Functions |; List of all members ; ROOT::Math::IParametricFunctionOneDim Class ReferenceabstractMath » MathCore » Function Classes and Interfaces » Parametric Function Evaluation Interfaces. ; Specialized IParamFunction interface (abstract class) for one-dimensional parametric functions It is a derived class from ROOT::Math::IBaseFunctionOneDim and ROOT::Math::IBaseParam. ; Definition at line 159 of file IParamFunction.h. Public Types; typedef IBaseFunctionOneDim BaseFunc;  ;  Public Types inherited from ROOT::Math::IBaseFunctionOneDim; typedef IBaseFunctionOneDim BaseFunc;  . Public Member Functions; double operator() (const double *x, const double *p) const;  multidim-like interface ;  ; double operator() (double x, const double *p) const;  Evaluate function at a point x and for given parameters p. ;  ;  Public Member Functions inherited from ROOT::Math::IBaseFunctionOneDim; virtual ~IBaseFunctionOneDim ()=default;  ; virtual IBaseFunctionOneDim * Clone () const =0;  Clone a function. ;  ; virtual bool HasGradient () const;  ; double operator() (const double *x) const;  Evaluate the function at a point x[]. ;  ; double operator() (double x) const;  Evaluate the function at a point x. ;  ;  Public Member Functions inherited from ROOT::Math::IBaseParam; virtual ~IBaseParam ();  Virtual Destructor (no operations) ;  ; virtual unsigned int NPar () const =0;  Return the number of Parameters. ;  ; virtual std::string ParameterName (unsigned int i) const;  Return the name of the i-th parameter (starting from zero) Overwrite if want to avoid the default name (""Par_0, Par_1, ..."") ;  ; virtual const double * Parameters () const =0;  Access the parameter values. ;  ; virtual void SetParameters (const double *p)=0;  Set the parameter values. ;  . Private ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricFunctionOneDim.html:106,Load,Loading,106,doc/master/classROOT_1_1Math_1_1IParametricFunctionOneDim.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricFunctionOneDim.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::IParametricGradFunctionMultiDimTempl< T > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Member Functions |; List of all members ; ROOT::Math::IParametricGradFunctionMultiDimTempl< T > Class Template ReferenceabstractMath » MathCore » Function Classes and Interfaces » Parametric Function Evaluation Interfaces. ; template<class T>; class ROOT::Math::IParametricGradFunctionMultiDimTempl< T >Interface (abstract class) for parametric gradient multi-dimensional functions providing in addition to function evaluation with respect to the coordinates also the gradient with respect to the parameters, via the method ParameterGradient. ; It is a derived class from ROOT::Math::IParametricFunctionMultiDim.; The pure private virtual method DoParameterGradient must be implemented by the derived classes in addition to those inherited by the base abstract classes. ; Definition at line 227 of file IParamFunction.h. Public Types; using BaseFunc = typename IParametricFunctionMultiDimTempl< T >::BaseFunc;  ; using BaseGradFunc = IGradientFunctionMultiDimTempl< T >;  ; using BaseParamFunc = IParametricFunctionMultiDimTempl< T >;  ;  Public Types inherited from ROOT::Math::IParametricFunctionMultiDimTempl< T >; typedef IBaseFunctionMultiDimTempl< T > BaseFunc;  ;  Public Types inherited from ROOT::Math::IBaseFunctionMultiDimTempl< T >; typedef T BackendType;  ; typedef IBaseFunctionMultiDimTempl< T > BaseFunc;  . Public Member Functions;  ~IParametricGradFunctionMultiDimTempl () override;  Virtual Destructor (no operations) ;  ; virtual bool HasParameterHessian () const;  ; T operator() (const T *x) const;  ; T operator() (const T *x, const double *p) const;  ; T ParameterDerivative (const T *x, const double *p, unsigned int ipar=0) const;  Evaluate the partial derivative w.r.t a parameter ipar from values and parameters. ;  ; T ParameterD",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricGradFunctionMultiDimTempl.html:131,Load,Loading,131,doc/master/classROOT_1_1Math_1_1IParametricGradFunctionMultiDimTempl.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricGradFunctionMultiDimTempl.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::IParametricGradFunctionOneDim Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Member Functions |; List of all members ; ROOT::Math::IParametricGradFunctionOneDim Class ReferenceabstractMath » MathCore » Function Classes and Interfaces » Parametric Function Evaluation Interfaces. ; Interface (abstract class) for parametric one-dimensional gradient functions providing in addition to function evaluation with respect the coordinates also the gradient with respect to the parameters, via the method ParameterGradient. ; It is a derived class from ROOT::Math::IParametricFunctionOneDim.; The pure private virtual method DoParameterGradient must be implemented by the derived classes in addition to those inherited by the base abstract classes. ; Definition at line 327 of file IParamFunction.h. Public Types; typedef IParametricFunctionOneDim::BaseFunc BaseFunc;  ; typedef IGradientFunctionOneDim BaseGradFunc;  ; typedef IParametricFunctionOneDim BaseParamFunc;  ;  Public Types inherited from ROOT::Math::IParametricFunctionOneDim; typedef IBaseFunctionOneDim BaseFunc;  ;  Public Types inherited from ROOT::Math::IBaseFunctionOneDim; typedef IBaseFunctionOneDim BaseFunc;  . Public Member Functions;  ~IParametricGradFunctionOneDim () override;  Virtual Destructor (no operations) ;  ; double ParameterDerivative (const double *x, const double *p, unsigned int ipar=0) const;  Partial derivative with respect a parameter Compatibility interface with multi-dimensional functions. ;  ; double ParameterDerivative (const double *x, unsigned int ipar=0) const;  Evaluate partial derivative using cached parameter values (multi-dim like interface) ;  ; double ParameterDerivative (double x, const double *p, unsigned int ipar=0) const;  Partial derivative with respect a parameter. ;  ; double ParameterDerivative (double x, unsigned int ipar=0) const;  Evalua",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricGradFunctionOneDim.html:110,Load,Loading,110,doc/master/classROOT_1_1Math_1_1IParametricGradFunctionOneDim.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricGradFunctionOneDim.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::IRootFinderMethod Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; List of all members ; ROOT::Math::IRootFinderMethod Class ReferenceabstractMath » MathCore | Math » MathMore » Numerical Algorithms » One-dimensional Root-Finding. ; Interface for finding function roots of one-dimensional functions. ; Definition at line 34 of file IRootFinderMethod.h. Public Member Functions;  IRootFinderMethod ();  Default Constructor. ;  ; virtual ~IRootFinderMethod ();  Default Destructor. ;  ; virtual int Iterate ();  This method is implemented only by the GSLRootFinder and GSLRootFinderDeriv classes and will return an error if it's not one of them. ;  ; virtual int Iterations () const;  Return number of iterations used to find the root Must be implemented by derived classes. ;  ; virtual const char * Name () const =0;  Return name of root finder algorithm. ;  ; virtual double Root () const =0;  Returns the previously calculated root. ;  ; virtual bool SetFunction (const ROOT::Math::IGenFunction &, double, double);  Sets the function for the rest of the algorithms. ;  ; virtual bool SetFunction (const ROOT::Math::IGradFunction &, double);  Sets the function for algorithms using derivatives. ;  ; virtual bool Solve (int maxIter=100, double absTol=1E-8, double relTol=1E-10)=0;  Stimates the root for the function. ;  ; virtual int Status () const =0;  Returns the status of the previous estimate. ;  . #include <Math/IRootFinderMethod.h>. Inheritance diagram for ROOT::Math::IRootFinderMethod:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ ~IRootFinderMethod(). virtual ROOT::Math::IRootFinderMethod::~IRootFinderMethod ; (; ). inlinevirtual . Default Destructor. ; Definition at line 37 of file IRootFinderMethod.h. ◆ IRootFinderMethod(). ROOT::Math::IRootFinderMethod::IRootFinderMe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1IRootFinderMethod.html:98,Load,Loading,98,doc/master/classROOT_1_1Math_1_1IRootFinderMethod.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IRootFinderMethod.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::Impl Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Functions ; ROOT::Math::Impl Namespace Reference. Classes; class  Plane3D;  Class describing a geometrical plane in 3 dimensions. More...;  ; class  Transform3D;  Basic 3D Transformation class describing a rotation and then a translation The internal data are a 3D rotation data (represented as a 3x3 matrix) and a 3D vector data. More...;  ; class  Translation3D;  Class describing a 3 dimensional translation. More...;  . Functions; template<typename Scalar > ; Scalar Eta_FromRhoZ (Scalar rho, Scalar z);  Calculate eta given rho and zeta. ;  ; template<typename Scalar > ; Scalar Eta_FromTheta (Scalar theta, Scalar r);  Implementation of eta from -log(tan(theta/2)). ;  ; template<class T > ; Transform3D< T > operator* (const AxisAngle &r, const Transform3D< T > &t);  ; template<class T > ; Transform3D< T > operator* (const AxisAngle &r, const Translation3D< T > &t);  ; template<class T > ; Transform3D< T > operator* (const EulerAngles &r, const Transform3D< T > &t);  ; template<class T > ; Transform3D< T > operator* (const EulerAngles &r, const Translation3D< T > &t);  ; template<class T > ; Transform3D< T > operator* (const Quaternion &r, const Transform3D< T > &t);  ; template<class T > ; Transform3D< T > operator* (const Quaternion &r, const Translation3D< T > &t);  ; template<class T > ; Transform3D< T > operator* (const Rotation3D &r, const Transform3D< T > &t);  combine a rotation and a transformation to give a transform3d First the transformation then the rotation ;  ; template<class T > ; Transform3D< T > operator* (const Rotation3D &r, const Translation3D< T > &t);  combine a translation and a rotation to give a transform3d First the translation then the rotation ;  ; template<class T > ; Transform3D< T > operator* (const RotationX &r, const Transform3D< T > &t);  ; template<class T > ; Transform3D< T > operator* (const Rotat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1Impl.html:89,Load,Loading,89,doc/master/namespaceROOT_1_1Math_1_1Impl.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1Impl.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::Impl::Plane3D< T > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::Impl::Plane3D< T > Class Template ReferenceMath » Physics Vectors. ; template<typename T = double>; class ROOT::Math::Impl::Plane3D< T >Class describing a geometrical plane in 3 dimensions. ; A Plane3D is a 2 dimensional surface spanned by two linearly independent vectors. The plane is described by the equation \( a*x + b*y + c*z + d = 0 \) where (a,b,c) are the components of the normal vector to the plane \( n = (a,b,c) \) and \( d = - n \dot x \), where x is any point belonging to plane. More information on the mathematics describing a plane in 3D is available on MathWord. The Plane3D class contains the 4 scalar values in T which represent the four coefficients, fA, fB, fC, fD. fA, fB, fC are the normal components normalized to 1, i.e. fA**2 + fB**2 + fC**2 = 1; See alsoOverview of the physics vector library ; Definition at line 53 of file Plane3D.h. Public Types; typedef PositionVector3D< Cartesian3D< T >, DefaultCoordinateSystemTag > Point;  ; typedef T Scalar;  ; typedef DisplacementVector3D< Cartesian3D< T >, DefaultCoordinateSystemTag > Vector;  . Public Member Functions;  Plane3D ();  default constructor create plane z = 0 ;  ; template<class T1 , class T2 , class U > ;  Plane3D (const DisplacementVector3D< T1, U > &n, const PositionVector3D< T2, U > &p);  Construct from a generic DisplacementVector3D (normal vector) and PositionVector3D (point coplanar to the plane) ;  ;  Plane3D (const Plane3D &)=default;  ;  Plane3D (const Point &p1, const Point &p2, const Point &p3);  constructor from three Cartesian point belonging to the plane ;  ; template<class T1 , class T2 , class T3 , class U > ;  Plane3D (const PositionVector3D< T1, U > &p1, co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1Impl_1_1Plane3D.html:108,Load,Loading,108,doc/master/classROOT_1_1Math_1_1Impl_1_1Plane3D.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Impl_1_1Plane3D.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::Impl::Transform3D< T > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; ROOT::Math::Impl::Transform3D< T > Class Template ReferenceMath » Physics Vectors. ; template<typename T = double>; class ROOT::Math::Impl::Transform3D< T >Basic 3D Transformation class describing a rotation and then a translation The internal data are a 3D rotation data (represented as a 3x3 matrix) and a 3D vector data. ; They are represented and held in this class like a 3x4 matrix (a simple array of 12 numbers).; The class can be constructed from any 3D rotation object (ROOT::Math::Rotation3D, ROOT::Math::AxisAngle, ROOT::Math::Quaternion, etc...) and/or a 3D Vector (ROOT::Math::DislacementVector3D or via ROOT::Math::Translation ) representing a Translation. The Transformation is defined by applying first the rotation and then the translation. A transformation defined by applying first a translation and then a rotation is equivalent to the transformation obtained applying first the rotation and then a translation equivalent to the rotated vector. The operator * can be used to obtain directly such transformations, in addition to combine various transformations. Keep in mind that the operator * (like in the case of rotations ) is not commutative. The operator * is used (in addition to operator() ) to apply a transformations on the vector (DisplacementVector3D and LorentzVector classes) and point (PositionVector3D) classes. In the case of Vector objects the transformation only rotates them and does not translate them. Only Point objects are able to be both rotated and translated.; See alsoOverview of the physics vector library ; Definition at line 80 of file Transform3D.h. Public Types; enum  ETransform3DMatrixIndex { ;   kXX = 0; , kXY = 1; , kXZ = 2; , kDX = 3; , ;   kYX = 4; , k",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1Impl_1_1Transform3D.html:112,Load,Loading,112,doc/master/classROOT_1_1Math_1_1Impl_1_1Transform3D.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Impl_1_1Transform3D.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::Impl::Translation3D< T > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::Math::Impl::Translation3D< T > Class Template ReferenceMath » Physics Vectors. ; template<typename T = double>; class ROOT::Math::Impl::Translation3D< T >Class describing a 3 dimensional translation. ; It can be combined (using the operator *) with the ROOT::Math::Rotation3D classes and ROOT::Math::Transform3D to obtained combined transformations and to operate on points and vectors. Note that a the translation applied to a Vector object (DisplacementVector3D and LorentzVector classes) performs a noop, i.e. it returns the same vector. A translation can be applied only to the Point objects (PositionVector3D classes).; See alsoOverview of the physics vector library ; Definition at line 53 of file Translation3D.h. Public Types; typedef T Scalar;  ; typedef DisplacementVector3D< Cartesian3D< T >, DefaultCoordinateSystemTag > Vector;  . Public Member Functions;  Translation3D ();  Default constructor ( zero translation ) ;  ; template<class CoordSystem , class Tag > ; constexpr Translation3D (const DisplacementVector3D< CoordSystem, Tag > &v);  Construct from any Displacement vector in ant tag and coordinate system. ;  ; template<class CoordSystem , class Tag > ;  Translation3D (const PositionVector3D< CoordSystem, Tag > &p1, const PositionVector3D< CoordSystem, Tag > &p2);  Construct transformation from one coordinate system defined one point (the origin) to a new coordinate system defined by other point (origin ) ;  ; template<class IT > ;  Translation3D (IT begin, IT end);  Construct given a pair of pointers or iterators defining the beginning and end of an array of 3 Scalars representing the z,y,z of the translation vector. ;  ;  Translation3D (T dx, T dy, T dz);  Construct from x,y,z values representing ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1Impl_1_1Translation3D.html:114,Load,Loading,114,doc/master/classROOT_1_1Math_1_1Impl_1_1Translation3D.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Impl_1_1Translation3D.html,2,"['Load', 'perform']","['Loading', 'performs']"
Performance,. ROOT: ROOT::Math::IntegMultiDim Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Variables ; ROOT::Math::IntegMultiDim Namespace Reference. Variables; static double gDefaultAbsTolerance = 0.0;  ; static int gDefaultIntegrator = IntegrationMultiDim::kADAPTIVE;  ; static unsigned int gDefaultNCalls = 100000;  ; static double gDefaultRelTolerance = 1.E-09;  ; static unsigned int gDefaultWKSize = 100000;  . Variable Documentation. ◆ gDefaultAbsTolerance. double ROOT::Math::IntegMultiDim::gDefaultAbsTolerance = 0.0. static . Definition at line 52 of file IntegratorOptions.cxx. ◆ gDefaultIntegrator. int ROOT::Math::IntegMultiDim::gDefaultIntegrator = IntegrationMultiDim::kADAPTIVE. static . Definition at line 49 of file IntegratorOptions.cxx. ◆ gDefaultNCalls. unsigned int ROOT::Math::IntegMultiDim::gDefaultNCalls = 100000. static . Definition at line 55 of file IntegratorOptions.cxx. ◆ gDefaultRelTolerance. double ROOT::Math::IntegMultiDim::gDefaultRelTolerance = 1.E-09. static . Definition at line 53 of file IntegratorOptions.cxx. ◆ gDefaultWKSize. unsigned int ROOT::Math::IntegMultiDim::gDefaultWKSize = 100000. static . Definition at line 54 of file IntegratorOptions.cxx. ROOTMathIntegMultiDim. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:25 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1IntegMultiDim.html:98,Load,Loading,98,doc/master/namespaceROOT_1_1Math_1_1IntegMultiDim.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1IntegMultiDim.html,1,['Load'],['Loading']
Performance,. ROOT: ROOT::Math::IntegOneDim Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Variables ; ROOT::Math::IntegOneDim Namespace Reference. Variables; static double gDefaultAbsTolerance = 1.E-09;  ; static int gDefaultIntegrator = IntegrationOneDim::kGAUSS;  ; static unsigned int gDefaultNPoints = gDefaultNPointsGSLAdaptive;  ; static unsigned int gDefaultNPointsGSLAdaptive = 3;  ; static unsigned int gDefaultNPointsLegendre = 10;  ; static double gDefaultRelTolerance = 1.E-09;  ; static unsigned int gDefaultWKSize = 1000;  . Variable Documentation. ◆ gDefaultAbsTolerance. double ROOT::Math::IntegOneDim::gDefaultAbsTolerance = 1.E-09. static . Definition at line 37 of file IntegratorOptions.cxx. ◆ gDefaultIntegrator. int ROOT::Math::IntegOneDim::gDefaultIntegrator = IntegrationOneDim::kGAUSS. static . Definition at line 35 of file IntegratorOptions.cxx. ◆ gDefaultNPoints. unsigned int ROOT::Math::IntegOneDim::gDefaultNPoints = gDefaultNPointsGSLAdaptive. static . Definition at line 42 of file IntegratorOptions.cxx. ◆ gDefaultNPointsGSLAdaptive. unsigned int ROOT::Math::IntegOneDim::gDefaultNPointsGSLAdaptive = 3. static . Definition at line 41 of file IntegratorOptions.cxx. ◆ gDefaultNPointsLegendre. unsigned int ROOT::Math::IntegOneDim::gDefaultNPointsLegendre = 10. static . Definition at line 40 of file IntegratorOptions.cxx. ◆ gDefaultRelTolerance. double ROOT::Math::IntegOneDim::gDefaultRelTolerance = 1.E-09. static . Definition at line 38 of file IntegratorOptions.cxx. ◆ gDefaultWKSize. unsigned int ROOT::Math::IntegOneDim::gDefaultWKSize = 1000. static . Definition at line 39 of file IntegratorOptions.cxx. ROOTMathIntegOneDim. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:25 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1IntegOneDim.html:96,Load,Loading,96,doc/master/namespaceROOT_1_1Math_1_1IntegOneDim.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1IntegOneDim.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::IntegOptionsUtil Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Functions ; ROOT::Math::IntegOptionsUtil Namespace Reference. Classes; struct  OptionTrait;  ; struct  OptionTrait< IntegratorMultiDimOptions >;  ; struct  OptionTrait< IntegratorOneDimOptions >;  . Functions; template<class OptionType > ; void Print (std::ostream &os, const OptionType &opt);  ; template<class OptionType > ; void PrintDefault (const char *name, std::ostream &os);  print default options ;  . Function Documentation. ◆ Print(). template<class OptionType > . void ROOT::Math::IntegOptionsUtil::Print ; (; std::ostream & ; os, . const OptionType & ; opt . ). Definition at line 91 of file IntegratorOptions.cxx. ◆ PrintDefault(). template<class OptionType > . void ROOT::Math::IntegOptionsUtil::PrintDefault ; (; const char * ; name, . std::ostream & ; os . ). print default options ; Definition at line 108 of file IntegratorOptions.cxx. ROOTMathIntegOptionsUtil. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:25 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1IntegOptionsUtil.html:101,Load,Loading,101,doc/master/namespaceROOT_1_1Math_1_1IntegOptionsUtil.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1IntegOptionsUtil.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::IntegrandTransform Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::IntegrandTransform Class Reference. ; Auxiliary inner class for mapping infinite and semi-infinite integrals. ; Definition at line 234 of file GaussIntegrator.h. Public Types; enum  ESemiInfinitySign { kMinus = -1; , kPlus = +1; };  ;  Public Types inherited from ROOT::Math::IBaseFunctionOneDim; typedef IBaseFunctionOneDim BaseFunc;  . Public Member Functions;  IntegrandTransform (const double boundary, ESemiInfinitySign sign, const IGenFunction *integrand);  ;  IntegrandTransform (const IGenFunction *integrand);  ; IGenFunction * Clone () const override;  Clone a function. ;  ; double DoEval (double x) const override;  implementation of the evaluation function. Must be implemented by derived classes ;  ; double operator() (double x) const;  ;  Public Member Functions inherited from ROOT::Math::IBaseFunctionOneDim; virtual ~IBaseFunctionOneDim ()=default;  ; virtual bool HasGradient () const;  ; double operator() (const double *x) const;  Evaluate the function at a point x[]. ;  ; double operator() (double x) const;  Evaluate the function at a point x. ;  . Private Member Functions; double DoEval (double x, double boundary, int sign) const;  . Private Attributes; double fBoundary;  ; bool fInfiniteInterval;  ; const IGenFunction * fIntegrand;  ; ESemiInfinitySign fSign;  . #include <Math/GaussIntegrator.h>. Inheritance diagram for ROOT::Math::IntegrandTransform:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ ESemiInfinitySign. enum ROOT::Math::IntegrandTransform::ESemiInfinitySign. EnumeratorkMinus ; kPlus . Definition at line 236 of file GaussIntegrator.h. Constructor & Destructor Documentation. ◆ In",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegrandTransform.html:99,Load,Loading,99,doc/master/classROOT_1_1Math_1_1IntegrandTransform.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegrandTransform.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::Integration Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Enumerations ; ROOT::Math::Integration Namespace Reference. Enumerations; enum  GKRule { ;   kGAUSS15 = 1; , kGAUSS21 = 2; , kGAUSS31 = 3; , kGAUSS41 = 4; , ;   kGAUSS51 = 5; , kGAUSS61 = 6. };  enumeration specifying the Gauss-KronRod integration rule for ADAPTIVE integration type More...;  . ROOTMathIntegration. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:25 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1Integration.html:96,Load,Loading,96,doc/master/namespaceROOT_1_1Math_1_1Integration.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1Integration.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::IntegrationMultiDim Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Enumerations ; ROOT::Math::IntegrationMultiDim Namespace Reference. Enumerations; enum  Type { ;   kDEFAULT = -1; , kADAPTIVE; , kVEGAS; , kMISER; , ;   kPLAIN. };  enumeration specifying the integration types. More...;  . ROOTMathIntegrationMultiDim. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:25 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1IntegrationMultiDim.html:104,Load,Loading,104,doc/master/namespaceROOT_1_1Math_1_1IntegrationMultiDim.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1IntegrationMultiDim.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::IntegrationOneDim Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Enumerations ; ROOT::Math::IntegrationOneDim Namespace Reference. Enumerations; enum  Type { ;   kDEFAULT = -1; , kGAUSS; , kLEGENDRE; , kADAPTIVE; , ;   kADAPTIVESINGULAR; , kNONADAPTIVE. };  enumeration specifying the integration types. More...;  . ROOTMathIntegrationOneDim. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:25 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1IntegrationOneDim.html:102,Load,Loading,102,doc/master/namespaceROOT_1_1Math_1_1IntegrationOneDim.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1IntegrationOneDim.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::IntegratorMultiDim Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::IntegratorMultiDim Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; User class for performing multidimensional integration. ; By default uses adaptive multi-dimensional integration using the algorithm from Genz Mallik implemented in the class ROOT::Math::AdaptiveIntegratorMultiDim otherwise it can uses via the plug-in manager the MC integration class (ROOT::Math::GSLMCIntegration) from MathMore. ; Definition at line 47 of file IntegratorMultiDim.h. Public Types; typedef IntegrationMultiDim::Type Type;  . Public Member Functions;  IntegratorMultiDim (const IMultiGenFunction &f, IntegrationMultiDim::Type type=IntegrationMultiDim::kDEFAULT, double absTol=-1, double relTol=-1, unsigned int ncall=0);  Generic Constructor of multi dimensional Integrator passing a function. ;  ;  IntegratorMultiDim (IntegrationMultiDim::Type type=IntegrationMultiDim::kDEFAULT, double absTol=-1, double relTol=-1, unsigned int ncall=0);  Generic constructor of multi dimensional Integrator. ;  ; virtual ~IntegratorMultiDim ();  Template Constructor of multi dimensional Integrator passing a generic function. ;  ; double Error () const;  return integration error ;  ; VirtualIntegratorMultiDim * GetIntegrator ();  return a pointer to integrator object ;  ; double Integral (const double *xmin, const double *xmax);  evaluate the integral with the previously given function between xmin[] and xmax[] ;  ; double Integral (const IMultiGenFunction &f, const double *xmin, const double *xmax);  evaluate the integral passing a new function ;  ; template<class Function > ; double Integral (Function &f, unsigned in",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html:99,Load,Loading,99,doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html,2,"['Load', 'perform']","['Loading', 'performing']"
Performance,. ROOT: ROOT::Math::IntegratorMultiDimOptions Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; ROOT::Math::IntegratorMultiDimOptions Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; Numerical multi dimensional integration options. ; Definition at line 194 of file IntegratorOptions.h. Public Member Functions;  IntegratorMultiDimOptions (const IntegratorMultiDimOptions &rhs);  copy constructor ;  ;  IntegratorMultiDimOptions (IOptions *extraOpts=nullptr);  constructor using the default options can pass a pointer to extra options (N.B. ;  ;  ~IntegratorMultiDimOptions () override;  ; std::string Integrator () const override;  name of multi-dim integrator ;  ; IntegrationMultiDim::Type IntegratorType () const;  type of the integrator (return the enumeration type) ;  ; unsigned int NCalls () const;  maximum number of function calls ;  ; IntegratorMultiDimOptions & operator= (const IntegratorMultiDimOptions &rhs);  assignment operator ;  ; void Print (std::ostream &os=std::cout) const;  print all the options ;  ; void SetIntegrator (const char *name);  set multi-dim integrator name ;  ; void SetNCalls (unsigned int calls);  set maximum number of function calls ;  ;  Public Member Functions inherited from ROOT::Math::BaseIntegratorOptions;  BaseIntegratorOptions (const BaseIntegratorOptions &opt);  ; virtual ~BaseIntegratorOptions ();  protected constructor to avoid user creating this class ;  ; double AbsTolerance () const;  non-static methods for retrieving options ;  ; IOptions * ExtraOptions () const;  return extra options ;  ; BaseIntegratorOptions & operator= (const BaseIntegratorOptions &opt);  assignment operators ;  ; double RelTolerance () const;  absolute tolerance ;  ; void SetAbsTolerance (double tol);  non-static methods for setting options ;  ; void SetExtra,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDimOptions.html:106,Load,Loading,106,doc/master/classROOT_1_1Math_1_1IntegratorMultiDimOptions.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDimOptions.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::IntegratorOneDim Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::IntegratorOneDim Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; User Class for performing numerical integration of a function in one dimension. ; It uses the plug-in manager to load advanced numerical integration algorithms from GSL, which reimplements the algorithms used in the QUADPACK, a numerical integration package written in Fortran.; Various types of adaptive and non-adaptive integration are supported. These include integration over infinite and semi-infinite ranges and singular integrals.; The integration type is selected using the Integration::type enumeration in the class constructor. The default type is adaptive integration with singularity (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule. In the case of ADAPTIVE type, the integration rule can also be specified via the Integration::GKRule. The default rule is 31 points.; In the case of integration over infinite and semi-infinite ranges, the type used is always ADAPTIVESINGULAR applying a transformation from the original interval into (0,1).; The ADAPTIVESINGULAR type is the most sophisticated type. When performances are important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or ADAPTIVE with a lower Gauss-Kronrod rule.; For detailed description on GSL integration algorithms see the GSL Manual. ; Definition at line 98 of file Integrator.h. Public Types; typedef IntegrationOneDim::Type Type;  . Public Member Functions;  IntegratorOneDim (const IGenFunction &f, IntegrationOneDim::Type type=IntegrationOneDim::kDEFAULT, double ab",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:97,Load,Loading,97,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,3,"['Load', 'load', 'perform']","['Loading', 'load', 'performing']"
Performance,. ROOT: ROOT::Math::IntegratorOneDimOptions Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; ROOT::Math::IntegratorOneDimOptions Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; Numerical one dimensional integration options. ; Definition at line 113 of file IntegratorOptions.h. Public Member Functions;  IntegratorOneDimOptions (const IntegratorOneDimOptions &rhs);  copy constructor ;  ;  IntegratorOneDimOptions (IOptions *extraOpts=nullptr);  constructor using the default options can pass a pointer to extra options (N.B. ;  ;  ~IntegratorOneDimOptions () override;  ; std::string Integrator () const override;  name of 1D integrator ;  ; IntegrationOneDim::Type IntegratorType () const;  type of the integrator (return the enumeration type) ;  ; unsigned int NPoints () const;  Number of points used by current integration rule. ;  ; IntegratorOneDimOptions & operator= (const IntegratorOneDimOptions &rhs);  assignment operator ;  ; void Print (std::ostream &os=std::cout) const;  print all the options ;  ; void SetIntegrator (const char *name);  set 1D integrator name ;  ; void SetNPoints (unsigned int n);  Set number of points for active integration rule. ;  ;  Public Member Functions inherited from ROOT::Math::BaseIntegratorOptions;  BaseIntegratorOptions (const BaseIntegratorOptions &opt);  ; virtual ~BaseIntegratorOptions ();  protected constructor to avoid user creating this class ;  ; double AbsTolerance () const;  non-static methods for retrieving options ;  ; IOptions * ExtraOptions () const;  return extra options ;  ; BaseIntegratorOptions & operator= (const BaseIntegratorOptions &opt);  assignment operators ;  ; double RelTolerance () const;  absolute tolerance ;  ; void SetAbsTolerance (double tol);  non-static methods for setting options ;  ; void SetExtraOptio,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html:104,Load,Loading,104,doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html,1,['Load'],['Loading']
Performance,. ROOT: ROOT::Math::Internal Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Functions ; ROOT::Math::Internal Namespace Reference. Functions; TF1 * CopyTF1Ptr (const TF1 *funcToCopy);  ; double DerivPrecision (double eps);  . Function Documentation. ◆ CopyTF1Ptr(). TF1 * ROOT::Math::Internal::CopyTF1Ptr ; (; const TF1 * ; funcToCopy). Definition at line 33 of file WrappedTF1.cxx. ◆ DerivPrecision(). double ROOT::Math::Internal::DerivPrecision ; (; double ; eps). Definition at line 25 of file WrappedTF1.cxx. ROOTMathInternal. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:25 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1Internal.html:93,Load,Loading,93,doc/master/namespaceROOT_1_1Math_1_1Internal.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1Internal.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::Interpolation Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Enumerations ; ROOT::Math::Interpolation Namespace Reference. Enumerations; enum  Type { ;   kLINEAR; , kPOLYNOMIAL; , kCSPLINE; , kCSPLINE_PERIODIC; , ;   kAKIMA; , kAKIMA_PERIODIC. };  Enumeration defining the types of interpolation methods availables. More...;  . ROOTMathInterpolation. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:25 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1Interpolation.html:98,Load,Loading,98,doc/master/namespaceROOT_1_1Math_1_1Interpolation.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1Interpolation.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::Interpolator Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::Math::Interpolator Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Interpolation Classes. ; Class for performing function interpolation of points. ; The class is instantiated with an interpolation methods, passed as an enumeration in the constructor. See Interpolation::Type for the available interpolation algorithms, which are implemented using GSL. See also the <A HREF=http://www.gnu.org/software/gsl/manual/html_node/Interpolation.html"">GSL manual for more information. The class provides additional methods for computing derivatives and integrals of interpolating functions.; This class does not support copying. ; Definition at line 66 of file Interpolator.h. Public Member Functions;  Interpolator (const Interpolator &)=delete;  ;  Interpolator (const std::vector< double > &x, const std::vector< double > &y, Interpolation::Type type=Interpolation::kCSPLINE);  Constructs an interpolator class from vector of data points \( (x_i, y_i )\) and with Interpolation::Type type. ;  ;  Interpolator (Interpolator &&)=delete;  ;  Interpolator (unsigned int ndata=0, Interpolation::Type type=Interpolation::kCSPLINE);  Constructs an interpolator class from number of data points and with Interpolation::Type type. ;  ; virtual ~Interpolator ();  ; double Deriv (double x) const;  Return the derivative of the interpolated function at point x. ;  ; double Deriv2 (double x) const;  Return the second derivative of the interpolated function at point x. ;  ; double Eval (double x) const;  Return the interpolated value at point x. ;  ; double Integ (double a, double b) const;  Return the Integral of the interpolated function over the range [a,b]. ;  ; Interpolator & operator= (const Interpolator &)=delete;  ; Interpolator & operator= (Interp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1Interpolator.html:93,Load,Loading,93,doc/master/classROOT_1_1Math_1_1Interpolator.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Interpolator.html,2,"['Load', 'perform']","['Loading', 'performing']"
Performance,". ROOT: ROOT::Math::Inverter< 0 > Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Static Public Member Functions |; List of all members ; ROOT::Math::Inverter< 0 > Class Reference. ; Inverter<0>. ; In case of zero order, do nothing.; AuthorT. Glebe ; Definition at line 167 of file Dinv.h. Static Public Member Functions; template<class MatrixRep > ; static bool Dinv (MatrixRep &);  . #include <Math/Dinv.h>; Member Function Documentation. ◆ Dinv(). template<class MatrixRep > . static bool ROOT::Math::Inverter< 0 >::Dinv ; (; MatrixRep & ; ). inlinestatic . Definition at line 171 of file Dinv.h. The documentation for this class was generated from the following file:; math/smatrix/inc/Math/Dinv.h. ROOTMathInverter< 0 >. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:22 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1Inverter_3_010_01_4.html:94,Load,Loading,94,doc/master/classROOT_1_1Math_1_1Inverter_3_010_01_4.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Inverter_3_010_01_4.html,1,['Load'],['Loading']
Performance,. ROOT: ROOT::Math::Inverter< 1 > Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Static Public Member Functions |; List of all members ; ROOT::Math::Inverter< 1 > Class Reference. ; 1x1 matrix inversion \(a_{11} \to 1/a_{11}\) ; AuthorT. Glebe ; Definition at line 184 of file Dinv.h. Static Public Member Functions; template<class MatrixRep > ; static bool Dinv (MatrixRep &rhs);  . #include <Math/Dinv.h>; Member Function Documentation. ◆ Dinv(). template<class MatrixRep > . static bool ROOT::Math::Inverter< 1 >::Dinv ; (; MatrixRep & ; rhs). inlinestatic . Definition at line 188 of file Dinv.h. The documentation for this class was generated from the following file:; math/smatrix/inc/Math/Dinv.h. ROOTMathInverter< 1 >. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:22 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1Inverter_3_011_01_4.html:94,Load,Loading,94,doc/master/classROOT_1_1Math_1_1Inverter_3_011_01_4.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Inverter_3_011_01_4.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::Inverter< 2 > Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Static Public Member Functions |; List of all members ; ROOT::Math::Inverter< 2 > Class Reference. ; 2x2 matrix inversion using Cramers rule. ; AuthorT. Glebe ; Definition at line 209 of file Dinv.h. Static Public Member Functions; template<class T > ; static bool Dinv (MatRepSym< T, 2 > &rep);  ; template<class MatrixRep > ; static bool Dinv (MatrixRep &rhs);  . #include <Math/Dinv.h>; Member Function Documentation. ◆ Dinv() [1/2]. template<class T > . static bool ROOT::Math::Inverter< 2 >::Dinv ; (; MatRepSym< T, 2 > & ; rep). inlinestatic . Definition at line 236 of file Dinv.h. ◆ Dinv() [2/2]. template<class MatrixRep > . static bool ROOT::Math::Inverter< 2 >::Dinv ; (; MatrixRep & ; rhs). inlinestatic . Definition at line 213 of file Dinv.h. The documentation for this class was generated from the following file:; math/smatrix/inc/Math/Dinv.h. ROOTMathInverter< 2 >. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:22 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1Inverter_3_012_01_4.html:94,Load,Loading,94,doc/master/classROOT_1_1Math_1_1Inverter_3_012_01_4.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Inverter_3_012_01_4.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::Inverter< idim, n > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Static Public Member Functions |; List of all members ; ROOT::Math::Inverter< idim, n > Class Template Reference. ; template<unsigned int idim, unsigned int n = idim>; class ROOT::Math::Inverter< idim, n >Matrix Inverter class Class to specialize calls to Dinv. ; Dinv computes the inverse of a square matrix if dimension idim and order n. The content of the matrix will be replaced by its inverse. In case the inversion fails, the matrix content is destroyed. Invert specializes Dinv by the matrix order. E.g. if the order of the matrix is two, the routine Inverter<2> is called which implements Cramers rule.; AuthorT. Glebe ; Definition at line 69 of file Dinv.h. Static Public Member Functions; template<class T > ; static int DfactMatrix (MatRepStd< T, idim, n > &rhs, T &det, unsigned int *work);  LU Factorization method for inversion of general square matrices (see implementation in Math/MatrixInversion.icc) ;  ; template<class T > ; static int DfinvMatrix (MatRepStd< T, idim, n > &rhs, unsigned int *work);  LU inversion of general square matrices. ;  ; template<class T > ; static bool Dinv (MatRepSym< T, idim > &rhs);  symmetric matrix inversion using Bunch-kaufman pivoting method implementation in Math/MatrixInversion.icc ;  ; template<class MatrixRep > ; static bool Dinv (MatrixRep &rhs);  matrix inversion for a generic square matrix using LU factorization (code originally from CERNLIB and then ported in C++ for CLHEP) implementation is in file Math/MatrixInversion.icc ;  ; template<class T > ; static void InvertBunchKaufman (MatRepSym< T, idim > &rhs, int &ifail);  Bunch-Kaufman method for inversion of symmetric matrices. ;  . #include <Math/Dinv.h>; Member Function Documentation. ◆ DfactMatrix(). template<unsigned int idim, unsigned int n> . template<class T > . int ROOT::Math::Inverter< idim, n >::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1Inverter.html:109,Load,Loading,109,doc/master/classROOT_1_1Math_1_1Inverter.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Inverter.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::KDTree< _DataPoint > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::KDTree< _DataPoint > Class Template Reference. ; template<class _DataPoint>; class ROOT::Math::KDTree< _DataPoint >; Definition at line 35 of file KDTree.h. Classes; class  BaseNode;  ; class  BinNode;  ; class  ComparePoints;  ; class  Cut;  ; class  HeadNode;  ; class  iterator;  ; class  SplitNode;  ; class  TerminalNode;  . Public Types; typedef BinNode Bin;  ; enum  eSplitOption { kEffective = 0; , kBinContent; };  ; typedef _DataPoint point_type;  ; typedef _DataPoint::value_type value_type;  . Public Member Functions;  KDTree (UInt_t iBucketSize);  ;  ~KDTree ();  ; void EmptyBins ();  ; iterator End ();  ; const iterator End () const;  ; const Bin * FindBin (const point_type &rPoint) const;  ; iterator First ();  ; const iterator First () const;  ; void Freeze ();  ; Double_t GetBucketSize () const;  ; void GetClosestPoints (const point_type &rRef, UInt_t nPoints, std::vector< std::pair< const _DataPoint *, Double_t > > &vFoundPoints) const;  ; Double_t GetEffectiveEntries () const;  ; UInt_t GetEntries () const;  ; KDTree< _DataPoint > * GetFrozenCopy ();  ; UInt_t GetNBins () const;  ; void GetPointsWithinDist (const point_type &rRef, value_type fDist, std::vector< const point_type * > &vFoundPoints) const;  ; Double_t GetTotalSumw () const;  ; Double_t GetTotalSumw2 () const;  ; Bool_t Insert (const point_type &rData);  ; Bool_t IsFrozen () const;  ; iterator Last ();  ; const iterator Last () const;  ; void Print ();  ; void Reset ();  ; void SetOwner (Bool_t bIsOwner=true);  ; void SetSplitOption (eSplitOption opt);  . Static Public Member Functions; static UInt_t Dimension ();  . Private Member Functions;  KDTree ();",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1KDTree.html:110,Load,Loading,110,doc/master/classROOT_1_1Math_1_1KDTree.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1KDTree.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::KahanSum< T, N > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; ROOT::Math::KahanSum< T, N > Class Template Reference. ; template<typename T = double, unsigned int N = 1>; class ROOT::Math::KahanSum< T, N >The Kahan summation is a compensated summation algorithm, which significantly reduces numerical errors when adding a sequence of finite-precision floating point numbers. ; This is done by keeping a separate running compensation (a variable to accumulate small errors). Auto-vectorisable accumulation; This class can internally use multiple accumulators (template parameter N). When filled from a collection that supports index access from a contiguous block of memory, compilers such as gcc, clang and icc can auto-vectorise the accumulation. This happens by cycling through the internal accumulators based on the value of ""`index % N`"", so N accumulators can be filled from a block of N numbers in a single instruction.; The usage of multiple accumulators might slightly increase the precision in comparison to the single-accumulator version with N = 1. This depends on the order and magnitude of the numbers being accumulated. Therefore, in rare cases, the accumulation result can change in dependence of N, even when the data are identical. The magnitude of such differences is well below the precision of the floating point type, and will therefore mostly show in the compensation sum(see Carry()). Increasing the number of accumulators therefore only makes sense to speed up the accumulation, but not to increase precision.; Parameters. TThe type of the values to be accumulated. ; NNumber of accumulators. Defaults to 1. Ideal values are the widths of a vector register on the relevant architecture. Depending on the instruction set, good values are:; AVX2-float: 8; AVX2-double: 4",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1KahanSum.html:106,Load,Loading,106,doc/master/classROOT_1_1Math_1_1KahanSum.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1KahanSum.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::LCGEngine Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::LCGEngine Class Reference. . Definition at line 33 of file LCGEngine.h. Public Types; typedef TRandomEngine BaseType;  ; typedef uint32_t Result_t;  ; typedef uint32_t StateInt_t;  . Public Member Functions;  LCGEngine ();  ;  ~LCGEngine () override;  ; uint32_t IntRndm ();  ; double operator() ();  ; double Rndm () override;  ; void SetSeed (uint32_t seed);  ;  Public Member Functions inherited from ROOT::Math::TRandomEngine; virtual ~TRandomEngine ();  . Static Public Member Functions; static unsigned int MaxInt ();  maximum integer that can be generated ;  ; static unsigned int MinInt ();  minimum integer that can be generated ;  ; static std::string Name ();  Name of the generator. ;  ; static int Size ();  Size of the generator state. ;  . Protected Member Functions; int Counter () const;  ; void GetState (std::vector< uint32_t > &state);  ; void SetState (const std::vector< uint32_t > &state);  . Private Member Functions; double Rndm_impl ();  . Private Attributes; uint32_t fSeed;  . #include <Math/LCGEngine.h>. Inheritance diagram for ROOT::Math::LCGEngine:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ BaseType. typedef TRandomEngine ROOT::Math::LCGEngine::BaseType. Definition at line 38 of file LCGEngine.h. ◆ Result_t. typedef uint32_t ROOT::Math::LCGEngine::Result_t. Definition at line 39 of file LCGEngine.h. ◆ StateInt_t. typedef uint32_t ROOT::Math::LCGEngine::StateInt_t. Definition at line 40 of file LCGEngine.h. Constructor & Destructor Documentation. ◆ LCGEngine(). ROOT::Math::LCGEngine::LCGEngine ; (; ). inline . Definition at line 42 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1LCGEngine.html:90,Load,Loading,90,doc/master/classROOT_1_1Math_1_1LCGEngine.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1LCGEngine.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::LSResidualFunc< Func > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::LSResidualFunc< Func > Class Template ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Multi-dimensional Minimization. ; template<class Func>; class ROOT::Math::LSResidualFunc< Func >LSResidualFunc class description. ; Internal class used for accessing the residuals of the Least Square function and their derivatives which are estimated numerically using GSL numerical derivation. The class contains a pointer to the fit method function and an index specifying the i-th residual and wraps it in a multi-dim gradient function interface ROOT::Math::IGradientFunctionMultiDim. The class is used by ROOT::Math::GSLNLSMinimizer (GSL non linear least square fitter) ; Definition at line 135 of file GSLNLSMinimizer.cxx. Public Member Functions;  LSResidualFunc ();  ;  LSResidualFunc (const Func &func, unsigned int i);  ;  LSResidualFunc (const LSResidualFunc< Func > &rhs);  ; IMultiGenFunction * Clone () const override;  Clone a function. ;  ; void FdF (const double *x, double &f, double *g) const override;  ; void Gradient (const double *x, double *g) const override;  ; unsigned int NDim () const override;  Retrieve the dimension of the function. ;  ; LSResidualFunc< Func > & operator= (const LSResidualFunc< Func > &rhs);  ;  Public Member Functions inherited from ROOT::Math::IGradientFunctionMultiDimTempl< T >; T Derivative (const T *x, unsigned int icoord, T *previous_grad, T *previous_g2, T *previous_gstep) const;  In some cases, the derivative algorithm will use information from the previous step, these can be passed in with this overload. ;  ; T Derivative (const T *x, unsigned int icoord=0) const;  Return the partial derivative with respect to the passed coordinate. ;  ; virtua",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1LSResidualFunc.html:112,Load,Loading,112,doc/master/classROOT_1_1Math_1_1LSResidualFunc.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1LSResidualFunc.html,1,['Load'],['Loading']
Performance,. ROOT: ROOT::Math::LocalCoordinateSystemTag Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. ROOT::Math::LocalCoordinateSystemTag Class ReferenceMath » Physics Vectors. ; Tag for identifying vectors based on a local coordinate system. ; See alsoOverview of the physics vector library ; Definition at line 59 of file CoordinateSystemTags.h. #include <Math/GenVector/CoordinateSystemTags.h>; The documentation for this class was generated from the following file:; math/genvector/inc/Math/GenVector/CoordinateSystemTags.h. ROOTMathLocalCoordinateSystemTag. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:22 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1LocalCoordinateSystemTag.html:105,Load,Loading,105,doc/master/classROOT_1_1Math_1_1LocalCoordinateSystemTag.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1LocalCoordinateSystemTag.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::LorentzRotation Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::Math::LorentzRotation Class ReferenceMath » Physics Vectors. ; Lorentz transformation class with the (4D) transformation represented by a 4x4 orthosymplectic matrix. ; See also Boost, BoostX, BoostY and BoostZ for classes representing specialized Lorentz transformations. Also, the 3-D rotation classes can be considered to be special Lorentz transformations which do not mix space and time components.; See alsoOverview of the physics vector library ; Definition at line 55 of file LorentzRotation.h. Public Types; enum  ELorentzRotationMatrixIndex { ;   kXX = 0; , kXY = 1; , kXZ = 2; , kXT = 3; , ;   kYX = 4; , kYY = 5; , kYZ = 6; , kYT = 7; , ;   kZX = 8; , kZY = 9; , kZZ = 10; , kZT = 11; , ;   kTX = 12; , kTY = 13; , kTZ = 14; , kTT = 15. };  ; typedef double Scalar;  . Public Member Functions;  LorentzRotation ();  Default constructor (identity transformation) ;  ;  LorentzRotation (AxisAngle const &a);  ;  LorentzRotation (Boost const &b);  Construct from a pure boost. ;  ;  LorentzRotation (BoostX const &bx);  ;  LorentzRotation (BoostY const &by);  ;  LorentzRotation (BoostZ const &bz);  ; template<class Foreign4Vector > ;  LorentzRotation (const Foreign4Vector &v1, const Foreign4Vector &v2, const Foreign4Vector &v3, const Foreign4Vector &v4);  Construct from four orthosymplectic vectors (which must have methods x(), y(), z() and t()) which will be used as the columns of the Lorentz rotation matrix. ;  ; template<class ForeignMatrix > ; constexpr LorentzRotation (const ForeignMatrix &m);  Construct from a linear algebra matrix of size at least 4x4, which must support operator()(i,j) to obtain elements (0,3) thru (3,3). ;  ;  LorentzRotation (EulerAngles const &e);  ; template<class IT > ;  LorentzRotation (IT begin, IT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1LorentzRotation.html:96,Load,Loading,96,doc/master/classROOT_1_1Math_1_1LorentzRotation.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1LorentzRotation.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::LorentzVector< CoordSystem > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; ROOT::Math::LorentzVector< CoordSystem > Class Template ReferenceMath » Physics Vectors. ; template<class CoordSystem>; class ROOT::Math::LorentzVector< CoordSystem >Class describing a generic LorentzVector in the 4D space-time, using the specified coordinate system for the spatial vector part. ; The metric used for the LorentzVector is (-,-,-,+). In the case of LorentzVector we don't distinguish the concepts of points and displacement vectors as in the 3D case, since the main use case for 4D Vectors is to describe the kinematics of relativistic particles. A LorentzVector behaves like a DisplacementVector in 4D. The Minkowski components could be viewed as v and t, or for kinematic 4-vectors, as p and E.; ROOT provides specialisations and aliases to them of the ROOT::Math::LorentzVector template:; ROOT::Math::PtEtaPhiMVector based on pt (rho),eta,phi and M (t) coordinates in double precision; ROOT::Math::PtEtaPhiEVector based on pt (rho),eta,phi and E (t) coordinates in double precision; ROOT::Math::PxPyPzMVector based on px,py,pz and M (mass) coordinates in double precision; ROOT::Math::PxPyPzEVector based on px,py,pz and E (energy) coordinates in double precision; ROOT::Math::XYZTVector based on x,y,z,t coordinates (cartesian) in double precision (same as PxPyPzEVector); ROOT::Math::XYZTVectorF based on x,y,z,t coordinates (cartesian) in float precision (same as PxPyPzEVector but float). See alsoOverview of the physics vector library ; Definition at line 59 of file LorentzVector.h. Public Types; typedef DisplacementVector3D< Cartesian3D< Scalar > > BetaVector;  ; typedef CoordSystem CoordinateType;  ; typedef CoordSystem::Scalar Scalar;  . Public Member Functions;  LorentzVect",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1LorentzVector.html:118,Load,Loading,118,doc/master/classROOT_1_1Math_1_1LorentzVector.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1LorentzVector.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::MCIntegration Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Enumerations ; ROOT::Math::MCIntegration Namespace Reference. Enumerations; enum  Mode { kIMPORTANCE; , kSTRATIFIED; , kIMPORTANCE_ONLY; };  . Enumeration Type Documentation. ◆ Mode. enum ROOT::Math::MCIntegration::Mode. EnumeratorkIMPORTANCE ; kSTRATIFIED ; kIMPORTANCE_ONLY . Definition at line 49 of file MCIntegrationTypes.h. ROOTMathMCIntegration. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:25 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1MCIntegration.html:98,Load,Loading,98,doc/master/namespaceROOT_1_1Math_1_1MCIntegration.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1MCIntegration.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::MatRepStd< T, D1, D2 > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::Math::MatRepStd< T, D1, D2 > Class Template ReferenceMath » SMatrix Package » Expression Template Classes. ; template<class T, unsigned int D1, unsigned int D2 = D1>; class ROOT::Math::MatRepStd< T, D1, D2 >Expression wrapper class for Matrix objects. ; Definition at line 54 of file MatrixRepresentationsStatic.h. Public Types; enum  { kRows = D1; , kCols = D2; , kSize = D1*D2; };  ; typedef T value_type;  . Public Member Functions; T apply (unsigned int i) const;  ; T * Array ();  ; const T * Array () const;  ; T & operator() (unsigned int i, unsigned int j);  ; const T & operator() (unsigned int i, unsigned int j) const;  ; template<class R > ; MatRepStd< T, D1, D2 > & operator+= (const R &rhs);  ; template<class R > ; MatRepStd< T, D1, D2 > & operator-= (const R &rhs);  ; template<class R > ; MatRepStd< T, D1, D2 > & operator= (const R &rhs);  ; template<class R > ; bool operator== (const R &rhs) const;  ; T & operator[] (unsigned int i);  ; const T & operator[] (unsigned int i) const;  . Private Attributes; T fArray [kSize];  . #include <Math/MatrixRepresentationsStatic.h>; Member Typedef Documentation. ◆ value_type. template<class T , unsigned int D1, unsigned int D2 = D1> . typedef T ROOT::Math::MatRepStd< T, D1, D2 >::value_type. Definition at line 58 of file MatrixRepresentationsStatic.h. Member Enumeration Documentation. ◆ anonymous enum. template<class T , unsigned int D1, unsigned int D2 = D1> . anonymous enum. EnumeratorkRows return no. of matrix rows . kCols return no. of matrix columns . kSize return no of elements: rows*columns . Definition at line 103 of file MatrixRepresentationsStatic.h. Member Function Documentation. ◆ apply(). template<class T , unsigned int D1, unsigned int D2 = D1> . T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1MatRepStd.html:112,Load,Loading,112,doc/master/classROOT_1_1Math_1_1MatRepStd.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1MatRepStd.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::MatRepSym< T, D > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; ROOT::Math::MatRepSym< T, D > Class Template ReferenceMath » SMatrix Package » SMatrix Storage Representation. ; template<class T, unsigned int D>; class ROOT::Math::MatRepSym< T, D >MatRepSym Matrix storage representation for a symmetric matrix of dimension NxN This class is a template on the contained type and on the symmetric matrix size, N. ; It has as data member an array of type T of size N*(N+1)/2, containing the lower diagonal block of the matrix. The order follows the lower diagonal block, still in a row-major convention. For example for a symmetric 3x3 matrix the order of the 6 elements \( \left[a_0,a_1.....a_5 \right]\) is: ; \[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \]. Definition at line 213 of file MatrixRepresentationsStatic.h. Public Types; enum  { kRows = D; , kCols = D; , kSize = D*(D+1)/2; };  ; typedef T value_type;  . Public Member Functions;  MatRepSym ();  ; T apply (unsigned int i) const;  ; T * Array ();  ; const T * Array () const;  ; T & operator() (unsigned int i, unsigned int j);  ; T const & operator() (unsigned int i, unsigned int j) const;  ; MatRepSym< T, D > & operator+= (const MatRepSym &rhs);  ; template<class R > ; MatRepSym< T, D > & operator+= (const R &);  self addition : only symmetric to symmetric allowed ;  ; MatRepSym< T, D > & operator-= (const MatRepSym &rhs);  ; template<class R > ; MatRepSym< T, D > & operator-= (const R &);  self subtraction : only symmetric to symmetric allowed ;  ; MatRepSym< T, D > & operator= (const MatRepSym &rhs);  ; template<class R > ; MatRepSym< T, D > & operator= (const R &);  assignment : only symmetric to symmetric allowed ;  ; template<c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1MatRepSym.html:107,Load,Loading,107,doc/master/classROOT_1_1Math_1_1MatRepSym.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1MatRepSym.html,1,['Load'],['Loading']
Performance,. ROOT: ROOT::Math::MathMoreLib Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Static Public Member Functions |; List of all members ; ROOT::Math::MathMoreLib Class Reference. . Definition at line 60 of file PdfFuncMathMore.h. Static Public Member Functions; static void Load ();  . #include <Math/PdfFuncMathMore.h>; Member Function Documentation. ◆ Load(). void ROOT::Math::MathMoreLib::Load ; (; ). static . Definition at line 73 of file PdfFuncMathMore.cxx. The documentation for this class was generated from the following files:; math/mathmore/inc/Math/PdfFuncMathMore.h; math/mathmore/src/PdfFuncMathMore.cxx. ROOTMathMathMoreLib. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:22 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1MathMoreLib.html:92,Load,Loading,92,doc/master/classROOT_1_1Math_1_1MathMoreLib.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1MathMoreLib.html,4,['Load'],"['Load', 'Loading']"
Performance,". ROOT: ROOT::Math::MatrixMulOp< MatrixA, MatrixB, T, D > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Attributes |; List of all members ; ROOT::Math::MatrixMulOp< MatrixA, MatrixB, T, D > Class Template ReferenceMath » SMatrix Package » Expression Template Classes. ; template<class MatrixA, class MatrixB, class T, unsigned int D>; class ROOT::Math::MatrixMulOp< MatrixA, MatrixB, T, D >Class for Matrix-Matrix multiplication. ; Definition at line 348 of file MatrixFunctions.h. Public Member Functions;  MatrixMulOp (const MatrixA &lhs, const MatrixB &rhs);  ;  ~MatrixMulOp ();  ; T apply (unsigned int i) const;  calc \(\sum_{j} a_{ik} * b_{kj}\) ;  ; bool IsInUse (const T *p) const;  ; T operator() (unsigned int i, unsigned j) const;  . Protected Attributes; const MatrixA & lhs_;  ; const MatrixB & rhs_;  . #include <Math/MatrixFunctions.h>; Constructor & Destructor Documentation. ◆ MatrixMulOp(). template<class MatrixA , class MatrixB , class T , unsigned int D> . ROOT::Math::MatrixMulOp< MatrixA, MatrixB, T, D >::MatrixMulOp ; (; const MatrixA & ; lhs, . const MatrixB & ; rhs . ). inline . Definition at line 351 of file MatrixFunctions.h. ◆ ~MatrixMulOp(). template<class MatrixA , class MatrixB , class T , unsigned int D> . ROOT::Math::MatrixMulOp< MatrixA, MatrixB, T, D >::~MatrixMulOp ; (; ). inline . Definition at line 355 of file MatrixFunctions.h. Member Function Documentation. ◆ apply(). template<class MatrixA , class MatrixB , class T , unsigned int D> . T ROOT::Math::MatrixMulOp< MatrixA, MatrixB, T, D >::apply ; (; unsigned int ; i); const. inline . calc \(\sum_{j} a_{ik} * b_{kj}\) ; Definition at line 358 of file MatrixFunctions.h. ◆ IsInUse(). template<class MatrixA , class MatrixB , class T , unsigned int D> . bool ROOT::Math::MatrixMulOp< MatrixA, MatrixB, T, D >::IsInUse ; (; const T * ; p); const. inline . Definition at line 366 of",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1MatrixMulOp.html:127,Load,Loading,127,doc/master/classROOT_1_1Math_1_1MatrixMulOp.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1MatrixMulOp.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::MersenneTwisterEngine Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Types |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::MersenneTwisterEngine Class ReferenceMath » MathCore » Interface classes for Random number generation. ; Random number generator class based on M. ; Matsumoto and T. Nishimura, Mersenne Twister: A 623-dimensionally equidistributed uniform pseudorandom number generator ACM Transactions on Modeling and Computer Simulation, Vol. 8, No. 1, January 1998, pp 3–30.; For more information see the Mersenne Twister homepage [http://www.math.keio.ac.jp/~matumoto/emt.html]; Advantage:. large period 2**19937 -1; relatively fast (slightly slower than TRandom1 and TRandom2 but much faster than TRandom1). Note that this is a 32 bit implementation. Only 32 bits of the returned double numbers are random. in case more precision is needed, one should use an engine providing at least 48 random bits.; Drawback: a relative large internal state of 624 integers ; Definition at line 50 of file MersenneTwisterEngine.h. Public Types; typedef TRandomEngine BaseType;  ; typedef uint32_t Result_t;  ; typedef uint32_t StateInt_t;  . Public Member Functions;  MersenneTwisterEngine (uint32_t seed=4357);  ;  ~MersenneTwisterEngine () override;  ; uint32_t IntRndm ();  ; double operator() ();  ; double Rndm () override;  ; void SetSeed (Result_t seed);  set the seed x ;  ;  Public Member Functions inherited from ROOT::Math::TRandomEngine; virtual ~TRandomEngine ();  . Static Public Member Functions; static unsigned int MaxInt ();  maximum integer that can be generated ;  ; static unsigned int MinInt ();  minimum integer that can be generated ;  ; static std::string Name ();  ; static int Size ();  . Protected Member Functions; int Counter ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1MersenneTwisterEngine.html:102,Load,Loading,102,doc/master/classROOT_1_1Math_1_1MersenneTwisterEngine.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1MersenneTwisterEngine.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::MinOp< T > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Static Public Member Functions |; List of all members ; ROOT::Math::MinOp< T > Class Template ReferenceMath » SMatrix Package » Expression Template Classes. ; template<class T>; class ROOT::Math::MinOp< T >Subtraction Operation Class. ; Definition at line 287 of file BinaryOperators.h. Static Public Member Functions; static T apply (const T &lhs, const T &rhs);  . #include <Math/BinaryOperators.h>; Member Function Documentation. ◆ apply(). template<class T > . static T ROOT::Math::MinOp< T >::apply ; (; const T & ; lhs, . const T & ; rhs . ). inlinestatic . Definition at line 289 of file BinaryOperators.h. The documentation for this class was generated from the following file:; math/smatrix/inc/Math/BinaryOperators.h. ROOTMathMinOp. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:22 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1MinOp.html:100,Load,Loading,100,doc/master/classROOT_1_1Math_1_1MinOp.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1MinOp.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::Minim Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Variables ; ROOT::Math::Minim Namespace Reference. Variables; static double gDefaultErrorDef = 1.;  ; static IOptions * gDefaultExtraOptions = nullptr;  ; static int gDefaultMaxCalls = 0;  ; static int gDefaultMaxIter = 0;  ; static std::string gDefaultMinimAlgo = ""Migrad"";  ; static std::string gDefaultMinimizer;  ; static double gDefaultPrecision = -1;  ; static int gDefaultPrintLevel = 0;  ; static int gDefaultStrategy = 1;  ; static double gDefaultTolerance = 1.E-2;  . Variable Documentation. ◆ gDefaultErrorDef. double ROOT::Math::Minim::gDefaultErrorDef = 1. static . Definition at line 32 of file MinimizerOptions.cxx. ◆ gDefaultExtraOptions. IOptions* ROOT::Math::Minim::gDefaultExtraOptions = nullptr. static . Definition at line 39 of file MinimizerOptions.cxx. ◆ gDefaultMaxCalls. int ROOT::Math::Minim::gDefaultMaxCalls = 0. static . Definition at line 35 of file MinimizerOptions.cxx. ◆ gDefaultMaxIter. int ROOT::Math::Minim::gDefaultMaxIter = 0. static . Definition at line 36 of file MinimizerOptions.cxx. ◆ gDefaultMinimAlgo. std::string ROOT::Math::Minim::gDefaultMinimAlgo = ""Migrad"". static . Definition at line 31 of file MinimizerOptions.cxx. ◆ gDefaultMinimizer. std::string ROOT::Math::Minim::gDefaultMinimizer. static . Definition at line 30 of file MinimizerOptions.cxx. ◆ gDefaultPrecision. double ROOT::Math::Minim::gDefaultPrecision = -1. static . Definition at line 34 of file MinimizerOptions.cxx. ◆ gDefaultPrintLevel. int ROOT::Math::Minim::gDefaultPrintLevel = 0. static . Definition at line 38 of file MinimizerOptions.cxx. ◆ gDefaultStrategy. int ROOT::Math::Minim::gDefaultStrategy = 1. static . Definition at line 37 of file MinimizerOptions.cxx. ◆ gDefaultTolerance. double ROOT::Math::Minim::gDefaultTolerance = 1.E-2. static . Definition at line 33 of file MinimizerOptions.cxx. ROOTMathMinim. ROOT master - Reference Guide Gen",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1Minim.html:90,Load,Loading,90,doc/master/namespaceROOT_1_1Math_1_1Minim.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1Minim.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::Minim1D Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Enumerations ; ROOT::Math::Minim1D Namespace Reference. Enumerations; enum  Type { kGOLDENSECTION; , kBRENT; };  Enumeration with One Dimensional Minimizer Algorithms. More...;  . ROOTMathMinim1D. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:25 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1Minim1D.html:92,Load,Loading,92,doc/master/namespaceROOT_1_1Math_1_1Minim1D.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1Minim1D.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::MinimTransformFunction Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::MinimTransformFunction Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Multi-dimensional Minimization. ; MinimTransformFunction class to perform a transformations on the variables to deal with fixed or limited variables (support both double and single bounds) The class manages the passed function pointer. ; Definition at line 41 of file MinimTransformFunction.h. Public Types; typedef ROOT::Math::IMultiGradFunction::BaseFunc BaseFunc;  ; typedef ROOT::Math::IMultiGradFunction BaseGradFunc;  ;  Public Types inherited from ROOT::Math::IGradientFunctionMultiDimTempl< T >; typedef IBaseFunctionMultiDimTempl< T > BaseFunc;  ; typedef IGradientFunctionMultiDimTempl< T > BaseGrad;  ;  Public Types inherited from ROOT::Math::IBaseFunctionMultiDimTempl< T >; typedef T BackendType;  ; typedef IBaseFunctionMultiDimTempl< T > BaseFunc;  . Public Member Functions;  MinimTransformFunction (const IMultiGradFunction *f, const std::vector< ROOT::Math::EMinimVariableType > &types, const std::vector< double > &values, const std::map< unsigned int, std::pair< double, double > > &bounds);  Constructor from a IMultiGradFunction interface that is externally managed vector specifying the variable types (free, bounded or fixed, defined in enum EMinimVariableTypes ) variable values (used for the fixed ones) and a map with the bounds (for the bounded variables) ;  ;  ~MinimTransformFunction () override;  Destructor (no operation) ;  ; IMultiGenFunction * Clone () const override;  clone: not supported (since unique_ptr used in the fVariables) ;  ; void GradientTransformation (const double *x, const double *gExt, double *gInt) const;  transform gradient vector (external -> internal) at",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1MinimTransformFunction.html:103,Load,Loading,103,doc/master/classROOT_1_1Math_1_1MinimTransformFunction.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1MinimTransformFunction.html,2,"['Load', 'perform']","['Loading', 'perform']"
Performance,". ROOT: ROOT::Math::MinimTransformVariable Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::Math::MinimTransformVariable Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Multi-dimensional Minimization. ; MinimTransformVariable class Contains meta information of the variables such as bounds, fix flags and deals with transformation of the variable The class does not contain the values and the step size (error) of the variable This is an internal class used by the MinimTransformFunction class. ; Definition at line 48 of file MinimTransformVariable.h. Public Member Functions;  MinimTransformVariable ();  Default Constructor for an unlimited variable. ;  ;  MinimTransformVariable (const MinimTransformVariable &rhs);  ;  MinimTransformVariable (double lower, double upper, SinVariableTransformation *trafo);  ;  MinimTransformVariable (double lower, SqrtLowVariableTransformation *trafo);  ;  MinimTransformVariable (double upper, SqrtUpVariableTransformation *trafo);  ;  MinimTransformVariable (double value);  ; double DerivativeIntToExt (double x) const;  ; double ExternalToInternal (double x) const;  ; double FixValue () const;  ; bool HasLowerBound () const;  ; bool HasUpperBound () const;  ; double InternalToExternal (double x) const;  ; bool IsFixed () const;  ; bool IsLimited () const;  ; double LowerBound () const;  ; MinimTransformVariable & operator= (const MinimTransformVariable &rhs);  ; double UpperBound () const;  . Private Attributes; bool fBounds;  has double bound ;  ; bool fFix;  fix variable ;  ; bool fLowBound;  has lower bound ;  ; double fLower;  lower parameter limit ;  ; std::unique_ptr< MinimizerVariableTransformation > fTransform;  pointer to the minimizer transformation ;  ; bool fUpBound;  has upper bound param ;  ; double fUpper;  upper parameter limit ;  . #include <Math/Minim",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1MinimTransformVariable.html:103,Load,Loading,103,doc/master/classROOT_1_1Math_1_1MinimTransformVariable.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1MinimTransformVariable.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::Minimizer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Attributes |; List of all members ; ROOT::Math::Minimizer Class ReferenceabstractMath » MathCore | Math » MathMore » Numerical Algorithms » Multi-dimensional Minimization. ; Abstract Minimizer class, defining the interface for the various minimizer (like Minuit2, Minuit, GSL, etc..) in ROOT. ; Plug-in's exist in ROOT to be able to instantiate the derived classes without linking the library using the static function ROOT::Math::Factory::CreateMinimizer.; Here is the list of all possible minimizers and their respective methods (algorithms) that can be instantiated: The name shown below can be used to create them. More documentation can be found in the respective class. Minuit (class TMinuitMinimizer); Migrad (default); MigradImproved (Migrad with adding a method to improve minimization when ends-up in a local minimum, see par. 6.3 of Minuit tutorial on Function Minimization); Simplex; Minimize (a combination of Simplex + Migrad); Minimize; Scan; Seek. Minuit2 (class ROOT::Minuit2::Minuit2Minimizer); Migrad (default); Simplex; Minimize; Fumili (Fumili2); Scan. Fumili (class TFumiliMinimizer); GSLMultiMin (class ROOT::Math::GSLMinimizer) available when ROOT is built with mathmore support; BFGS2 (Default); BFGS; ConjugateFR; ConjugatePR; SteepestDescent. GSLMultiFit (class ROOT::Math::GSLNLMinimizer) available when ROOT is built mathmore support; GSLSimAn (class ROOT::Math::GSLSimAnMinimizer) available when ROOT is built with mathmore support; Genetic (class ROOT::Math::GeneticMinimizer); RMinimizer (class ROOT::Math::RMinimizer) available when ROOT is built with r support; BFGS (default); L-BFGS-S; Nelder-Mead; CG; and more methods, see the Details in the documentation of the function optimix of the optmix R package. The Minimizer class provides the interface to perform the minimization",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1Minimizer.html:90,Load,Loading,90,doc/master/classROOT_1_1Math_1_1Minimizer.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Minimizer.html,1,['Load'],['Loading']
Performance,. ROOT: ROOT::Math::MinimizerOptions Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; ROOT::Math::MinimizerOptions Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Multi-dimensional Minimization. ; Minimizer options. ; Class defining the options for the minimizer. It contains also static methods for setting the default Minimizer option values that will be used by default by all Minimizer instances. To see the current default options do: ROOT::Math::MinimizerOptions::PrintDefault();. Definition at line 40 of file MinimizerOptions.h. Public Member Functions;  MinimizerOptions ();  ;  MinimizerOptions (const MinimizerOptions &opt);  ;  ~MinimizerOptions ();  ; double ErrorDef () const;  error definition ;  ; const IOptions * ExtraOptions () const;  return extra options (NULL pointer if they are not present) ;  ; unsigned int MaxFunctionCalls () const;  max number of function calls ;  ; unsigned int MaxIterations () const;  max iterations ;  ; const std::string & MinimizerAlgorithm () const;  type of algorithm ;  ; const std::string & MinimizerType () const;  type of minimizer ;  ; MinimizerOptions & operator= (const MinimizerOptions &opt);  assignment operators ;  ; double Precision () const;  precision in the objective function calculation (value <=0 means left to default) ;  ; void Print (std::ostream &os=std::cout) const;  print all the options ;  ; int PrintLevel () const;  non-static methods for retrieving options ;  ; void ResetToDefaultOptions ();  non-static methods for setting options ;  ; void SetErrorDef (double err);  set error def ;  ; void SetExtraOptions (const IOptions &opt);  set extra options (in this case pointer is cloned) ;  ; void SetMaxFunctionCalls (unsigned int maxfcn);  set maximum of function calls ;  ; void SetMaxIterations (unsigned int maxite,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1MinimizerOptions.html:97,Load,Loading,97,doc/master/classROOT_1_1Math_1_1MinimizerOptions.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1MinimizerOptions.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::MinimizerVariableTransformation Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; List of all members ; ROOT::Math::MinimizerVariableTransformation Class ReferenceabstractMath » MathCore | Math » MathMore » Numerical Algorithms » Multi-dimensional Minimization. ; Base class for MinimizerVariable transformations defining the functions to deal with bounded parameters. ; Definition at line 20 of file MinimizerVariableTransformation.h. Public Member Functions; virtual ~MinimizerVariableTransformation ();  ; virtual double DInt2Ext (double value, double lower, double upper) const =0;  ; virtual double Ext2int (double value, double lower, double upper) const =0;  ; virtual double Int2ext (double value, double lower, double upper) const =0;  . #include <Math/MinimizerVariableTransformation.h>. Inheritance diagram for ROOT::Math::MinimizerVariableTransformation:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ ~MinimizerVariableTransformation(). virtual ROOT::Math::MinimizerVariableTransformation::~MinimizerVariableTransformation ; (; ). inlinevirtual . Definition at line 24 of file MinimizerVariableTransformation.h. Member Function Documentation. ◆ DInt2Ext(). virtual double ROOT::Math::MinimizerVariableTransformation::DInt2Ext ; (; double ; value, . double ; lower, . double ; upper . ); const. pure virtual . Implemented in ROOT::Math::SinVariableTransformation, ROOT::Math::SqrtLowVariableTransformation, and ROOT::Math::SqrtUpVariableTransformation. ◆ Ext2int(). virtual double ROOT::Math::MinimizerVariableTransformation::Ext2int ; (; double ; value, . double ; lower, . double ; upper . ); const. pure virtual . Implemented in ROOT::Math::SinVariableTransformation, ROOT::Math::SqrtLowVariableTransformation, and ROOT::Math::SqrtUpVariableTransformation. ◆ Int2ext(). virtua",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1MinimizerVariableTransformation.html:112,Load,Loading,112,doc/master/classROOT_1_1Math_1_1MinimizerVariableTransformation.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1MinimizerVariableTransformation.html,1,['Load'],['Loading']
Performance,. ROOT: ROOT::Math::Minus< T > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Static Public Member Functions |; List of all members ; ROOT::Math::Minus< T > Class Template ReferenceMath » SMatrix Package » Expression Template Classes. ; template<class T>; class ROOT::Math::Minus< T >Unary Minus Operation Class. ; Definition at line 44 of file UnaryOperators.h. Static Public Member Functions; static T apply (const T &rhs);  . #include <Math/UnaryOperators.h>; Member Function Documentation. ◆ apply(). template<class T > . static T ROOT::Math::Minus< T >::apply ; (; const T & ; rhs). inlinestatic . Definition at line 46 of file UnaryOperators.h. The documentation for this class was generated from the following file:; math/smatrix/inc/Math/UnaryOperators.h. ROOTMathMinus. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:22 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1Minus.html:100,Load,Loading,100,doc/master/classROOT_1_1Math_1_1Minus.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Minus.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::MinusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepStd< T, D1, D2 > > Struct Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Static Public Member Functions |; List of all members ; ROOT::Math::MinusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepStd< T, D1, D2 > > Struct Template Reference. ; template<class T, unsigned int D1, unsigned int D2, class A>; struct ROOT::Math::MinusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepStd< T, D1, D2 > >Specialization for symmetrix -= general : NOT Allowed operation. ; Definition at line 345 of file HelperOps.h. Static Public Member Functions; static void Evaluate (SMatrix< T, D1, D2, MatRepSym< T, D1 > > &, const Expr< A, T, D1, D2, MatRepStd< T, D1, D2 > > &);  . #include <Math/HelperOps.h>; Member Function Documentation. ◆ Evaluate(). template<class T , unsigned int D1, unsigned int D2, class A > . static void ROOT::Math::MinusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepStd< T, D1, D2 > >::Evaluate ; (; SMatrix< T, D1, D2, MatRepSym< T, D1 > > & ; , . const Expr< A, T, D1, D2, MatRepStd< T, D1, D2 > > & ;  . ). inlinestatic . Definition at line 347 of file HelperOps.h. The documentation for this struct was generated from the following file:; math/smatrix/inc/Math/HelperOps.h. ROOTMathMinusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepStd< T, D1, D2 > >. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:22 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structROOT_1_1Math_1_1MinusEquals_3_01T_00_01D1_00_01D2_00_01A_00_01MatRepSym_3_01T_00_01D1_01_4ad9d4d8067a43d465b917221840bb9ae.html:162,Load,Loading,162,doc/master/structROOT_1_1Math_1_1MinusEquals_3_01T_00_01D1_00_01D2_00_01A_00_01MatRepSym_3_01T_00_01D1_01_4ad9d4d8067a43d465b917221840bb9ae.html,https://root.cern,https://root.cern/doc/master/structROOT_1_1Math_1_1MinusEquals_3_01T_00_01D1_00_01D2_00_01A_00_01MatRepSym_3_01T_00_01D1_01_4ad9d4d8067a43d465b917221840bb9ae.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::MinusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepSym< T, D1 > > Struct Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Static Public Member Functions |; List of all members ; ROOT::Math::MinusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepSym< T, D1 > > Struct Template Reference. ; template<class T, unsigned int D1, unsigned int D2, class A>; struct ROOT::Math::MinusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepSym< T, D1 > >Specialization for symmetric matrices. ; Evaluate the expression performing a -= operation for symmetric matrices Need to have a separate functions to avoid to modify two times the off-diagonal elements (i.e applying two times the expression) Need to check whether creating a temporary object with the expression result (like in op: A -= A + B ) ; Definition at line 315 of file HelperOps.h. Static Public Member Functions; static void Evaluate (SMatrix< T, D1, D2, MatRepSym< T, D1 > > &lhs, const Expr< A, T, D1, D2, MatRepSym< T, D1 > > &rhs);  . #include <Math/HelperOps.h>; Member Function Documentation. ◆ Evaluate(). template<class T , unsigned int D1, unsigned int D2, class A > . static void ROOT::Math::MinusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepSym< T, D1 > >::Evaluate ; (; SMatrix< T, D1, D2, MatRepSym< T, D1 > > & ; lhs, . const Expr< A, T, D1, D2, MatRepSym< T, D1 > > & ; rhs . ). inlinestatic . Definition at line 317 of file HelperOps.h. The documentation for this struct was generated from the following file:; math/smatrix/inc/Math/HelperOps.h. ROOTMathMinusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepSym< T, D1 > >. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:22 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structROOT_1_1Math_1_1MinusEquals_3_01T_00_01D1_00_01D2_00_01A_00_01MatRepSym_3_01T_00_01D1_01_430c9cf3013fba6ff738c698e3426727e.html:158,Load,Loading,158,doc/master/structROOT_1_1Math_1_1MinusEquals_3_01T_00_01D1_00_01D2_00_01A_00_01MatRepSym_3_01T_00_01D1_01_430c9cf3013fba6ff738c698e3426727e.html,https://root.cern,https://root.cern/doc/master/structROOT_1_1Math_1_1MinusEquals_3_01T_00_01D1_00_01D2_00_01A_00_01MatRepSym_3_01T_00_01D1_01_430c9cf3013fba6ff738c698e3426727e.html,2,"['Load', 'perform']","['Loading', 'performing']"
Performance,". ROOT: ROOT::Math::MinusEquals< T, D1, D2, A, R1, R2 > Struct Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Static Public Member Functions |; List of all members ; ROOT::Math::MinusEquals< T, D1, D2, A, R1, R2 > Struct Template Reference. ; template<class T, unsigned int D1, unsigned int D2, class A, class R1, class R2>; struct ROOT::Math::MinusEquals< T, D1, D2, A, R1, R2 >Evaluate the expression performing a -= operation Need to check whether creating a temporary object with the expression result (like in op: A -= A * B ) ; Definition at line 279 of file HelperOps.h. Static Public Member Functions; static void Evaluate (SMatrix< T, D1, D2, R1 > &lhs, const Expr< A, T, D1, D2, R2 > &rhs);  . #include <Math/HelperOps.h>; Member Function Documentation. ◆ Evaluate(). template<class T , unsigned int D1, unsigned int D2, class A , class R1 , class R2 > . static void ROOT::Math::MinusEquals< T, D1, D2, A, R1, R2 >::Evaluate ; (; SMatrix< T, D1, D2, R1 > & ; lhs, . const Expr< A, T, D1, D2, R2 > & ; rhs . ). inlinestatic . Definition at line 281 of file HelperOps.h. The documentation for this struct was generated from the following file:; math/smatrix/inc/Math/HelperOps.h. ROOTMathMinusEquals. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:22 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structROOT_1_1Math_1_1MinusEquals.html:126,Load,Loading,126,doc/master/structROOT_1_1Math_1_1MinusEquals.html,https://root.cern,https://root.cern/doc/master/structROOT_1_1Math_1_1MinusEquals.html,2,"['Load', 'perform']","['Loading', 'performing']"
Performance,". ROOT: ROOT::Math::MiserParameters Struct Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; ROOT::Math::MiserParameters Struct ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration » Numerical Monte Carlo Integration Classes. ; Structure collecting parameters for MISER multidimensional integration. ; Definition at line 77 of file MCParameters.h. Public Member Functions;  MiserParameters (const ROOT::Math::IOptions &opt, size_t dim=10);  ;  MiserParameters (size_t dim=10);  ; std::unique_ptr< ROOT::Math::IOptions > MakeIOptions () const;  convert to options (return object is managed by the user) ;  ; MiserParameters & operator= (const ROOT::Math::IOptions &opt);  ; void SetDefaultValues (size_t dim=10);  default MISER parameters (copied from gsl/monte/vegas.c) ;  . Public Attributes; double alpha;  ; double dither;  ; double estimate_frac;  ; size_t min_calls;  ; size_t min_calls_per_bisection;  . #include <Math/MCParameters.h>; Constructor & Destructor Documentation. ◆ MiserParameters() [1/2]. ROOT::Math::MiserParameters::MiserParameters ; (; size_t ; dim = 10). inline . Definition at line 86 of file MCParameters.h. ◆ MiserParameters() [2/2]. ROOT::Math::MiserParameters::MiserParameters ; (; const ROOT::Math::IOptions & ; opt, . size_t ; dim = 10 . ). Definition at line 98 of file MCParameters.cxx. Member Function Documentation. ◆ MakeIOptions(). std::unique_ptr< ROOT::Math::IOptions > ROOT::Math::MiserParameters::MakeIOptions ; (; ); const. convert to options (return object is managed by the user) ; Definition at line 122 of file MCParameters.cxx. ◆ operator=(). MiserParameters & ROOT::Math::MiserParameters::operator= ; (; const ROOT::Math::IOptions & ; opt). Definition at line 103 of file MCParameters.cxx. ◆ SetDefaultValues(). void ROOT::Math::MiserParameters::SetDefaultValues ; (; size_t ; dim ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structROOT_1_1Math_1_1MiserParameters.html:97,Load,Loading,97,doc/master/structROOT_1_1Math_1_1MiserParameters.html,https://root.cern,https://root.cern/doc/master/structROOT_1_1Math_1_1MiserParameters.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::MixMaxEngine< N, SkipNumber > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::MixMaxEngine< N, SkipNumber > Class Template ReferenceMath » MathCore » Interface classes for Random number generation. ; template<int N, int SkipNumber>; class ROOT::Math::MixMaxEngine< N, SkipNumber >MixMaxEngine is a wrapper class for the MIXMAX Random number generator. ; MIXMAX is a matrix-recursive random number generator introduced by G. Savvidy.; The real implementation of the generator, written in C, is in the mixmax.h and mixmax.cxx files. This generator code is available also at hepforge: http://mixmax.hepforge.org The MIXMAX code has been created and developed by Konstantin Savvidy and it is released under GNU Lesser General Public License v3.; This wrapper class provides 3 different variants of MIXMAX according to the template para extra parameter N. The extra parameter, SkipNumber, is used to perform additional iterations of the generator before returning the random numbers. For example, when SkipNumber = 2, the generator will have two extra iterations that will be discarder. MIXMAX with N = 240. This is a new version of the generator (version 2.0beta) described in the 2016 paper (3rd reference), with special number \(s=487013230256099140\), \(m=2^{51}+1\) and having a period of \(10^{4389}\).; MIXMAX with N = 17, from the 2.0 beta version with \(s=0\) and \(m=2^{36}+1\). The period of the generator is \(10^{294}\).; MIXMAX with N = 256 from the 1.0 version. The period is (for SkipNumber=0) \(10^{4682}\). For this generator we recommend in ROOT using a default value of `SkipNumber=2, while for the previous two generators skipping is not needed. This table describes the properties of the MIX",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1MixMaxEngine.html:119,Load,Loading,119,doc/master/classROOT_1_1Math_1_1MixMaxEngine.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1MixMaxEngine.html,1,['Load'],['Loading']
Performance,. ROOT: ROOT::Math::MixMaxEngineImpl< N > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; List of all members ; ROOT::Math::MixMaxEngineImpl< N > Class Template Reference. ; template<int N>; class ROOT::Math::MixMaxEngineImpl< N >; Definition at line 52 of file MixMaxEngineImpl.h. Public Member Functions;  MixMaxEngineImpl (uint64_t);  ;  ~MixMaxEngineImpl ();  ; int Counter ();  ; void GetState (std::vector< uint64_t > &);  ; double IntRndm ();  ; void Iterate ();  ; double Rndm ();  ; void SetCounter (int);  ; void SetSeed (uint64_t);  ; void SetState (const std::vector< uint64_t > &);  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/math/mathcore/src/MixMaxEngineImpl.h>; Constructor & Destructor Documentation. ◆ MixMaxEngineImpl(). template<int N> . ROOT::Math::MixMaxEngineImpl< N >::MixMaxEngineImpl ; (; uint64_t ; ). inline . Definition at line 54 of file MixMaxEngineImpl.h. ◆ ~MixMaxEngineImpl(). template<int N> . ROOT::Math::MixMaxEngineImpl< N >::~MixMaxEngineImpl ; (; ). inline . Definition at line 57 of file MixMaxEngineImpl.h. Member Function Documentation. ◆ Counter(). template<int N> . int ROOT::Math::MixMaxEngineImpl< N >::Counter ; (; ). inline . Definition at line 63 of file MixMaxEngineImpl.h. ◆ GetState(). template<int N> . void ROOT::Math::MixMaxEngineImpl< N >::GetState ; (; std::vector< uint64_t > & ; ). inline . Definition at line 62 of file MixMaxEngineImpl.h. ◆ IntRndm(). template<int N> . double ROOT::Math::MixMaxEngineImpl< N >::IntRndm ; (; ). inline . Definition at line 60 of file MixMaxEngineImpl.h. ◆ Iterate(). template<int N> . void ROOT::Math::MixMaxEngineImpl< N >::Iterate ; (; ). inline . Definition at line 65 of file MixMaxEngineImpl.h. ◆ Rndm(). template<int N> . double ROOT::Math::MixMaxEngineImpl< N >::Rndm ; (; ). inline . Definition at line 59 of file MixMaxEngineImpl.h. ◆ SetCounte,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1MixMaxEngineImpl.html:111,Load,Loading,111,doc/master/classROOT_1_1Math_1_1MixMaxEngineImpl.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1MixMaxEngineImpl.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::MixMaxEngineImpl< ROOT_MM_N > Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; ROOT::Math::MixMaxEngineImpl< ROOT_MM_N > Class Reference. . Definition at line 70 of file MixMaxEngineImpl.h. Public Types; typedef MixMaxEngine< ROOT_MM_N, 0 >::Result_t Result_t;  ; typedef MixMaxEngine< ROOT_MM_N, 0 >::StateInt_t StateInt_t;  . Public Member Functions;  MixMaxEngineImpl (uint64_t seed);  ;  ~MixMaxEngineImpl ();  ; void Branch (uint32_t *seedvec);  ; int Counter () const;  ; void GetState (std::vector< StateInt_t > &state) const;  ; Result_t IntRndm ();  ; void Iterate ();  ; void ReadState (const char filename[]);  ; double Rndm ();  ; void RndmArray (int n, double *array);  ; void SetCounter (int val);  ; void SetSeed (Result_t seed);  ; void SetSeedFast (Result_t seed);  ; void SetState (const std::vector< StateInt_t > &state);  . Static Public Member Functions; static int Size ();  . Private Attributes; rng_state_t * fRngState;  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/math/mathcore/src/MixMaxEngineImpl.h>; Member Typedef Documentation. ◆ Result_t. typedef MixMaxEngine<ROOT_MM_N,0>::Result_t ROOT::Math::MixMaxEngineImpl< ROOT_MM_N >::Result_t. Definition at line 75 of file MixMaxEngineImpl.h. ◆ StateInt_t. typedef MixMaxEngine<ROOT_MM_N,0>::StateInt_t ROOT::Math::MixMaxEngineImpl< ROOT_MM_N >::StateInt_t. Definition at line 74 of file MixMaxEngineImpl.h. Constructor & Destructor Documentation. ◆ MixMaxEngineImpl(). ROOT::Math::MixMaxEngineImpl< ROOT_MM_N >::MixMaxEngineImpl ; (; uint64_t ; seed). inline . Definition at line 77 of file MixMaxEngineImpl.h. ◆ ~MixMaxEngineImpl(). ROOT::Math::MixMaxEngineImpl< ROOT_MM_N >::~MixMaxEngineImpl ; (; ). inline . Definition at line 81 of file MixMaxEngineImpl.h. Member F",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1MixMaxEngineImpl_3_01ROOT__MM__N_01_4.html:110,Load,Loading,110,doc/master/classROOT_1_1Math_1_1MixMaxEngineImpl_3_01ROOT__MM__N_01_4.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1MixMaxEngineImpl_3_01ROOT__MM__N_01_4.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::MulOp< T > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Static Public Member Functions |; List of all members ; ROOT::Math::MulOp< T > Class Template ReferenceMath » SMatrix Package » Expression Template Classes. ; template<class T>; class ROOT::Math::MulOp< T >Multiplication (element-wise) Operation Class. ; Definition at line 529 of file BinaryOperators.h. Static Public Member Functions; static T apply (const T &lhs, const T &rhs);  . #include <Math/BinaryOperators.h>; Member Function Documentation. ◆ apply(). template<class T > . static T ROOT::Math::MulOp< T >::apply ; (; const T & ; lhs, . const T & ; rhs . ). inlinestatic . Definition at line 531 of file BinaryOperators.h. The documentation for this class was generated from the following file:; math/smatrix/inc/Math/BinaryOperators.h. ROOTMathMulOp. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:22 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1MulOp.html:100,Load,Loading,100,doc/master/classROOT_1_1Math_1_1MulOp.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1MulOp.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::MultPolicy< T, R1, R2 > Struct Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; List of all members ; ROOT::Math::MultPolicy< T, R1, R2 > Struct Template Reference. ; template<class T, class R1, class R2>; struct ROOT::Math::MultPolicy< T, R1, R2 >matrix-matrix multiplication policy ; Definition at line 31 of file BinaryOpPolicy.h. Public Types; enum  { N1 = R1::kRows; , N2 = R2::kCols; };  ; typedef MatRepStd< T, N1, N2 > RepType;  . #include <Math/BinaryOpPolicy.h>; Member Typedef Documentation. ◆ RepType. template<class T , class R1 , class R2 > . typedef MatRepStd<T, N1, N2> ROOT::Math::MultPolicy< T, R1, R2 >::RepType. Definition at line 37 of file BinaryOpPolicy.h. Member Enumeration Documentation. ◆ anonymous enum. template<class T , class R1 , class R2 > . anonymous enum. EnumeratorN1 ; N2 . Definition at line 33 of file BinaryOpPolicy.h. The documentation for this struct was generated from the following file:; math/smatrix/inc/Math/BinaryOpPolicy.h. ROOTMathMultPolicy. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:22 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structROOT_1_1Math_1_1MultPolicy.html:114,Load,Loading,114,doc/master/structROOT_1_1Math_1_1MultPolicy.html,https://root.cern,https://root.cern/doc/master/structROOT_1_1Math_1_1MultPolicy.html,1,['Load'],['Loading']
Performance,. ROOT: ROOT::Math::MultiDimParamFunctionAdapter Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::MultiDimParamFunctionAdapter Class ReferenceMath » MathCore » Function Classes and Interfaces » Parametric Function Evaluation Interfaces. ; MultiDimParamFunctionAdapter class to wrap a one-dimensional parametric function in a multi dimensional parametric function interface This is used typically in fitting where internally the function is stored as multidimensional. ; To wrap a non-parametric one-dim function in a multi-dim interface one can use simply a ROOT::Math::WrappedFunction<ROOT::Math::IGenFunction> or ROOT::Math::Functor and ROOT::Math::GradFunctor for gradient functions; This class differs from WrappedParamFunction in the fact that the parameters are not stored in the adapter class and optionally it keeps a cloned and managed copy of the adapter class. ; Definition at line 41 of file MultiDimParamFunctionAdapter.h. Public Types; typedef IParamMultiFunction::BaseFunc BaseFunc;  ;  Public Types inherited from ROOT::Math::IParametricFunctionMultiDimTempl< double >; typedef IBaseFunctionMultiDimTempl< double > BaseFunc;  ;  Public Types inherited from ROOT::Math::IBaseFunctionMultiDimTempl< T >; typedef T BackendType;  ; typedef IBaseFunctionMultiDimTempl< T > BaseFunc;  . Public Member Functions;  MultiDimParamFunctionAdapter (const IParamFunction &f);  Constructor from a parametric one dim function interface from a const reference Own the function in this case. ;  ;  MultiDimParamFunctionAdapter (const MultiDimParamFunctionAdapter &rhs);  Copy constructor. ;  ;  MultiDimParamFunctionAdapter (IParamFunction &f);  Constructor from a parametric one dim function interface from a non-const reference Do not own the function in this case. ;  ;  ~MultiDimParamFunctionAdapter,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1MultiDimParamFunctionAdapter.html:109,Load,Loading,109,doc/master/classROOT_1_1Math_1_1MultiDimParamFunctionAdapter.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1MultiDimParamFunctionAdapter.html,1,['Load'],['Loading']
Performance,. ROOT: ROOT::Math::MultiDimParamGradFunctionAdapter Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::MultiDimParamGradFunctionAdapter Class ReferenceMath » MathCore » Function Classes and Interfaces » Parametric Function Evaluation Interfaces. ; MultiDimParamGradFunctionAdapter class to wrap a one-dimensional parametric gradient function in a multi dimensional parametric gradient function interface This is used typically in fitting where internally the function is stored as multidimensional. ; To wrap a non-parametric one-dim gradient function in a multi-dim interface one can use simply a a ROOT::Math::GradFunctor; The parameters are not stored in the adapter class and by default the pointer to the 1D function is owned. This means that deleting the class deletes also the 1D function and copying the class copies also the 1D function This class differs from WrappedParamFunction in the fact that the parameters are not stored in the adapter class and optionally it keeps a cloned and managed copy of the adapter class. ; Definition at line 172 of file MultiDimParamFunctionAdapter.h. Public Types; typedef IParamMultiGradFunction::BaseFunc BaseFunc;  ;  Public Types inherited from ROOT::Math::IParametricGradFunctionMultiDimTempl< T >; using BaseFunc = typename IParametricFunctionMultiDimTempl< T >::BaseFunc;  ; using BaseGradFunc = IGradientFunctionMultiDimTempl< T >;  ; using BaseParamFunc = IParametricFunctionMultiDimTempl< T >;  ;  Public Types inherited from ROOT::Math::IParametricFunctionMultiDimTempl< T >; typedef IBaseFunctionMultiDimTempl< T > BaseFunc;  ;  Public Types inherited from ROOT::Math::IBaseFunctionMultiDimTempl< T >; typedef T BackendType;  ; typedef IBaseFunctionMultiDimTempl< T > BaseFunc;  . Public Member Functions;  MultiDimParamGradFunctionAdapter (const,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1MultiDimParamGradFunctionAdapter.html:113,Load,Loading,113,doc/master/classROOT_1_1Math_1_1MultiDimParamGradFunctionAdapter.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1MultiDimParamGradFunctionAdapter.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::MultiGenFunctionFitness Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::Math::MultiGenFunctionFitness Class Reference. . Definition at line 18 of file GeneticMinimizer.cxx. Public Member Functions;  MultiGenFunctionFitness (const ROOT::Math::IMultiGenFunction &function);  ; Double_t EstimatorFunction (std::vector< double > &factors) override;  ; Double_t Evaluate (const std::vector< double > &factors) const;  ; void FixParameter (unsigned int ipar, double value, bool fix=true);  ; unsigned int NCalls () const;  ; unsigned int NDims () const;  ; unsigned int NTotal () const;  ; const std::vector< double > & Transform (const std::vector< double > &factors) const;  ;  Public Member Functions inherited from TMVA::IFitterTarget;  IFitterTarget ();  constructor ;  ; virtual ~IFitterTarget ();  ; virtual TClass * IsA () const;  ; virtual void ProgressNotifier (TString, TString);  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Private Attributes; std::vector< int > fFixedParFlag;  ; const ROOT::Math::IMultiGenFunction & fFunc;  ; unsigned int fNCalls;  ; unsigned int fNFree;  ; std::vector< double > fValues;  . Additional Inherited Members;  Static Public Member Functions inherited from TMVA::IFitterTarget; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Inheritance diagram for ROOT::Math::MultiGenFunctionFitness:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ MultiGenFunctionFitness(). ROOT::Math::MultiGenFunctionFitness::MultiGenFunctionFitness ; (; const ROOT::Math::IMultiGenFunction & ; function). inline . Definition at line 27 of file GeneticMinimizer",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1MultiGenFunctionFitness.html:104,Load,Loading,104,doc/master/classROOT_1_1Math_1_1MultiGenFunctionFitness.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1MultiGenFunctionFitness.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::MultiNumGradFunction Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; ROOT::Math::MultiNumGradFunction Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Multi-dimensional Minimization. ; MultiNumGradFunction class to wrap a normal function in a gradient function using numerical gradient calculation provided by the class Derivator (based on GSL numerical derivation) ; Definition at line 49 of file MultiNumGradFunction.h. Public Member Functions;  MultiNumGradFunction (const IMultiGenFunction &f);  Constructor from a IMultiGenFunction interface. ;  ; template<class FuncType > ;  MultiNumGradFunction (FuncType f, int n);  Constructor from a generic function (pointer or reference) and number of dimension implementing operator () (double * x) ;  ;  ~MultiNumGradFunction () override;  Destructor (no operations) ;  ; IMultiGenFunction * Clone () const override;  Clone a function. ;  ; unsigned int NCalls () const;  ; unsigned int NDim () const override;  Retrieve the dimension of the function. ;  ; void SetOwnership (bool on=true);  ;  Public Member Functions inherited from ROOT::Math::IGradientFunctionMultiDimTempl< T >; T Derivative (const T *x, unsigned int icoord, T *previous_grad, T *previous_g2, T *previous_gstep) const;  In some cases, the derivative algorithm will use information from the previous step, these can be passed in with this overload. ;  ; T Derivative (const T *x, unsigned int icoord=0) const;  Return the partial derivative with respect to the passed coordinate. ;  ; virtual void FdF (const T *x, T &f, T *df) const;  Optimized method to evaluate at the same time the function value and derivative at a point x. ;  ; virtual void Gradient (const T *x, T *grad) const;  Evaluate all the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1MultiNumGradFunction.html:101,Load,Loading,101,doc/master/classROOT_1_1Math_1_1MultiNumGradFunction.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1MultiNumGradFunction.html,1,['Load'],['Loading']
Performance,. ROOT: ROOT::Math::NullTypeFunc1D Struct Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. ROOT::Math::NullTypeFunc1D Struct Reference. . Definition at line 26 of file WrappedFunction.h. #include <Math/WrappedFunction.h>; The documentation for this struct was generated from the following file:; math/mathcore/inc/Math/WrappedFunction.h. ROOTMathNullTypeFunc1D. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:22 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structROOT_1_1Math_1_1NullTypeFunc1D.html:96,Load,Loading,96,doc/master/structROOT_1_1Math_1_1NullTypeFunc1D.html,https://root.cern,https://root.cern/doc/master/structROOT_1_1Math_1_1NullTypeFunc1D.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::OneDimMultiFunctionAdapter< MultiFuncType > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::OneDimMultiFunctionAdapter< MultiFuncType > Class Template ReferenceMath » MathCore » Function Classes and Interfaces » Generic Function Evaluation Interfaces. ; template<class MultiFuncType = const ROOT::Math::IMultiGenFunction &>; class ROOT::Math::OneDimMultiFunctionAdapter< MultiFuncType >OneDimMultiFunctionAdapter class to wrap a multidimensional function in one dimensional one. ; Given a f(x1,x2,x3,....xn) transforms in a f( x_i) given the coordinate intex i and the vector x[] of the coordinates. It provides the possibility to copy and own the data array of the coordinates or to maintain internally a pointer to an external array for being more efficient. In this last case the user must guarantee the life of the given passed pointer ; Definition at line 56 of file OneDimFunctionAdapter.h. Public Member Functions;  OneDimMultiFunctionAdapter (const OneDimMultiFunctionAdapter &rhs);  ;  OneDimMultiFunctionAdapter (MultiFuncType f, const double *x, unsigned int icoord=0, const double *p=nullptr);  Constructor from the function object , pointer to an external array of x values and coordinate we want to adapt. ;  ;  OneDimMultiFunctionAdapter (MultiFuncType f, unsigned int dim=1, unsigned int icoord=0, const double *p=nullptr);  Constructor from the function object , dimension of the function and and coordinate we want to adapt. ;  ;  ~OneDimMultiFunctionAdapter () override;  Destructor (no operations) ;  ; OneDimMultiFunctionAdapter * Clone () const override;  clone ;  ; void SetCoord (int icoord);  ; void SetX (const double *x);  set values ;  ; void SetX (double *x);  set pointer without copying the values ;  ; template<class Iterator > ; void SetX (Iterator begin,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1OneDimMultiFunctionAdapter.html:133,Load,Loading,133,doc/master/classROOT_1_1Math_1_1OneDimMultiFunctionAdapter.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1OneDimMultiFunctionAdapter.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::OneDimParamFunctionAdapter< ParamFuncType > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::OneDimParamFunctionAdapter< ParamFuncType > Class Template ReferenceMath » MathCore » Function Classes and Interfaces » Generic Function Evaluation Interfaces. ; template<class ParamFuncType = ROOT::Math::IParamMultiFunction &>; class ROOT::Math::OneDimParamFunctionAdapter< ParamFuncType >OneDimParamFunctionAdapter class to wrap a multi-dim parametric function in one dimensional one. ; Given a f(x[],p1,...pn) transforms in a f( p_i) given the param index i and the vectors x[] and p[] of the coordinates and parameters It has to be used carefully, since for efficiency reason it does not copy the parameter object but re-uses the given pointer for the p[] vector. The ParamFuncType reference by default is not const because the operator()(x,p) is not a const method ; Definition at line 213 of file OneDimFunctionAdapter.h. Public Member Functions;  OneDimParamFunctionAdapter (ParamFuncType f, const double *x, const double *p, unsigned int ipar=0);  Constructor from the function object , x value and coordinate we want to adapt. ;  ;  ~OneDimParamFunctionAdapter () override;  Destructor (no operations) ;  ; OneDimParamFunctionAdapter * Clone () const override;  clone ;  ;  Public Member Functions inherited from ROOT::Math::IBaseFunctionOneDim; virtual ~IBaseFunctionOneDim ()=default;  ; virtual bool HasGradient () const;  ; double operator() (const double *x) const;  Evaluate the function at a point x[]. ;  ; double operator() (double x) const;  Evaluate the function at a point x. ;  . Private Member Functions; double DoEval (double x) const override;  evaluate function at the values x[] given in the constructor and as function of the coordinate fCoord. ;  . Private Attributes",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1OneDimParamFunctionAdapter.html:133,Load,Loading,133,doc/master/classROOT_1_1Math_1_1OneDimParamFunctionAdapter.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1OneDimParamFunctionAdapter.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::PDFIntegral Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::Math::PDFIntegral Class Reference. . Definition at line 77 of file GoFTest.cxx. Public Member Functions;  PDFIntegral (const IGenFunction &pdf, Double_t xmin=0, Double_t xmax=-1);  ;  ~PDFIntegral () override;  ; IGenFunction * Clone () const override;  Clone a function. ;  ; Double_t DoEval (Double_t x) const override;  implementation of the evaluation function. Must be implemented by derived classes ;  ;  Public Member Functions inherited from ROOT::Math::IBaseFunctionOneDim; virtual ~IBaseFunctionOneDim ()=default;  ; virtual bool HasGradient () const;  ; double operator() (const double *x) const;  Evaluate the function at a point x[]. ;  ; double operator() (double x) const;  Evaluate the function at a point x. ;  . Private Attributes; IntegratorOneDim fIntegral;  ; Double_t fNorm;  ; const IGenFunction * fPDF;  ; Double_t fXmax;  ; Double_t fXmin;  . Additional Inherited Members;  Public Types inherited from ROOT::Math::IBaseFunctionOneDim; typedef IBaseFunctionOneDim BaseFunc;  . Inheritance diagram for ROOT::Math::PDFIntegral:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ ~PDFIntegral(). ROOT::Math::PDFIntegral::~PDFIntegral ; (; ). inlineoverride . Definition at line 85 of file GoFTest.cxx. ◆ PDFIntegral(). ROOT::Math::PDFIntegral::PDFIntegral ; (; const IGenFunction & ; pdf, . Double_t ; xmin = 0, . Double_t ; xmax = -1 . ). inline . Definition at line 87 of file GoFTest.cxx. Member Function Documentation. ◆ Clone(). IGenFunction * ROOT::Math::PDFIntegral::Clone ; (; ); const. inlineoverridevirtual . Clone a function. ; Each derived class will implement their version of the private DoClone method. ; Implements ROOT::Math::IBaseFunctionOneDim",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1PDFIntegral.html:92,Load,Loading,92,doc/master/classROOT_1_1Math_1_1PDFIntegral.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1PDFIntegral.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::ParamFunction< IPFType > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Protected Attributes |; Private Attributes |; List of all members ; ROOT::Math::ParamFunction< IPFType > Class Template ReferenceMath » MathCore » Function Classes and Interfaces » Parametric Function Evaluation Interfaces. ; template<class IPFType>; class ROOT::Math::ParamFunction< IPFType >Base template class for all Parametric Functions. ; The template argument is the type of parameteric function interface is implementing like Parameteric 1D, Multi-Dim or gradient parametric.; A parameteric function is a Generic Function with parameters, so it is a function object which carries a state, the parameters. The parameters are described with a standard vector of doubles.; This class contains the default implementations for the methods defined in the IParamFunction interface for dealing with parameters Specific parameteric function classes should derive from this class if they want to profit from default implementations for the abstract methods. The derived classes need to implement only the DoEvalPar( x, p) and Clone() methods for non-gradient parameteric functions or DoParameterDerivative(x,p,ipar) for gradient par functions ; Definition at line 67 of file ParamFunction.h. Public Types; typedef IPFType::BaseFunc BaseFunc;  ; typedef IPFType BaseParFunc;  . Public Member Functions;  ParamFunction (unsigned int npar=0);  Construct a parameteric function with npar parameters. ;  ; virtual ~ParamFunction ();  ; unsigned int NPar () const;  Return the number of parameters. ;  ; virtual const double * Parameters () const;  Access the parameter values. ;  ; virtual void SetParameters (const double *p);  Set the parameter values. ;  . Protected Attributes; std::vector< double > fParams;  . Private Attributes; unsigned int fNpar;  Return true if the calculation of",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1ParamFunction.html:114,Load,Loading,114,doc/master/classROOT_1_1Math_1_1ParamFunction.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1ParamFunction.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::ParamFunctionBase< T > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; List of all members ; ROOT::Math::ParamFunctionBase< T > Class Template ReferenceabstractN-D parametric functions. ; template<class T>; class ROOT::Math::ParamFunctionBase< T >class defining the signature for multi-dim parametric functions ; Definition at line 45 of file ParamFunctor.h. Public Member Functions; virtual ~ParamFunctionBase ();  ; virtual ParamFunctionBase * Clone () const =0;  ; virtual T operator() (const T *x, const double *p)=0;  ; virtual T operator() (T *x, double *p)=0;  . #include <Math/ParamFunctor.h>; Constructor & Destructor Documentation. ◆ ~ParamFunctionBase(). template<class T > . virtual ROOT::Math::ParamFunctionBase< T >::~ParamFunctionBase ; (; ). inlinevirtual . Definition at line 47 of file ParamFunctor.h. Member Function Documentation. ◆ Clone(). template<class T > . virtual ParamFunctionBase * ROOT::Math::ParamFunctionBase< T >::Clone ; (; ); const. pure virtual . ◆ operator()() [1/2]. template<class T > . virtual T ROOT::Math::ParamFunctionBase< T >::operator() ; (; const T * ; x, . const double * ; p . ). pure virtual . ◆ operator()() [2/2]. template<class T > . virtual T ROOT::Math::ParamFunctionBase< T >::operator() ; (; T * ; x, . double * ; p . ). pure virtual . The documentation for this class was generated from the following file:; math/mathcore/inc/Math/ParamFunctor.h. ROOTMathParamFunctionBase. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:23 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1ParamFunctionBase.html:112,Load,Loading,112,doc/master/classROOT_1_1Math_1_1ParamFunctionBase.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1ParamFunctionBase.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::ParamFunctorHandler< ParentFunctor, Func > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Private Types |; Private Attributes |; List of all members ; ROOT::Math::ParamFunctorHandler< ParentFunctor, Func > Class Template ReferenceN-D parametric functions. ; template<class ParentFunctor, class Func>; class ROOT::Math::ParamFunctorHandler< ParentFunctor, Func >ParamFunctor Handler class is responsible for wrapping any other functor and pointer to free C functions. ; It can be created from any function implementing the correct signature corresponding to the requested type ; Definition at line 66 of file ParamFunctor.h. Classes; struct  FuncEvaluator;  ; struct  FuncEvaluator< F *, T >;  ; struct  FuncEvaluator< F *const, T >;  . Public Member Functions;  ParamFunctorHandler (const Func &fun);  ; virtual ~ParamFunctorHandler ();  ; ParamFunctorHandler * Clone () const;  ; EvalType operator() (const EvalType *x, const double *p);  ; EvalType operator() (EvalType *x, double *p);  ; EvalType operator() (EvalType x, double *p);  . Private Types; typedef ParentFunctor::Impl Base;  ; typedef ParentFunctor::EvalType EvalType;  . Private Attributes; Func fFunc;  . #include <Math/ParamFunctor.h>. Inheritance diagram for ROOT::Math::ParamFunctorHandler< ParentFunctor, Func >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ Base. template<class ParentFunctor , class Func > . typedef ParentFunctor::Impl ROOT::Math::ParamFunctorHandler< ParentFunctor, Func >::Base. private . Definition at line 69 of file ParamFunctor.h. ◆ EvalType. template<class ParentFunctor , class Func > . typedef ParentFunctor::EvalType ROOT::Math::ParamFunctorHandler< ParentFunctor, Func >::EvalType. private . Definition at line 68 of file ParamFunctor.h. Constructor & Destructor Documentation",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1ParamFunctorHandler.html:132,Load,Loading,132,doc/master/classROOT_1_1Math_1_1ParamFunctorHandler.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1ParamFunctorHandler.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::ParamFunctorTempl< T > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::Math::ParamFunctorTempl< T > Class Template ReferenceMath » MathCore » Function Classes and Interfaces » Parametric Function Evaluation Interfaces. ; template<class T>; class ROOT::Math::ParamFunctorTempl< T >Param Functor class for Multidimensional functions. ; It is used to wrap in a very simple and convenient way any other C++ callable object (implementation double operator( const double *, const double * ) ) or a member function with the correct signature, like Foo::EvalPar(const double *, const double *) ; Definition at line 274 of file ParamFunctor.h. Public Types; typedef T EvalType;  ; typedef T(* FreeFunc) (T *, double *);  ; typedef ParamFunctionBase< T > Impl;  . Public Member Functions;  ParamFunctorTempl ();  Default constructor. ;  ; template<typename Func > ;  ParamFunctorTempl (const Func &f);  construct from another generic Functor of multi-dimension ;  ;  ParamFunctorTempl (const ParamFunctorTempl &rhs);  Copy constructor. ;  ; template<class PtrObj , typename MemFn > ;  ParamFunctorTempl (const PtrObj &p, MemFn memFn);  construct from a pointer to member function (multi-dim type) ;  ;  ParamFunctorTempl (const std::function< T(const T *f, const Double_t *param)> &func);  ;  ParamFunctorTempl (FreeFunc f);  ; virtual ~ParamFunctorTempl ();  Destructor (no operations) ;  ; bool Empty () const;  ; void * GetImpl ();  ; T operator() (const T *x, const double *p);  ; T operator() (T *x, double *p);  ; ParamFunctorTempl & operator= (const ParamFunctorTempl &rhs);  Assignment operator. ;  ; void SetFunction (Impl *f);  . Private Attributes; Impl * fImpl;  . #include <Math/ParamFunctor.h>; Member Typedef Documentation. ◆ EvalType. template<class T > . typedef T ROOT::Math::ParamFunctorTempl< T >",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1ParamFunctorTempl.html:112,Load,Loading,112,doc/master/classROOT_1_1Math_1_1ParamFunctorTempl.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1ParamFunctorTempl.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::ParamMemFunHandler< ParentFunctor, PointerToObj, PointerToMemFn > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Private Types |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::ParamMemFunHandler< ParentFunctor, PointerToObj, PointerToMemFn > Class Template ReferenceN-D parametric functions. ; template<class ParentFunctor, typename PointerToObj, typename PointerToMemFn>; class ROOT::Math::ParamMemFunHandler< ParentFunctor, PointerToObj, PointerToMemFn >ParamFunctor Handler to Wrap pointers to member functions. ; Definition at line 174 of file ParamFunctor.h. Classes; struct  MemFuncEvaluator;  . Public Member Functions;  ParamMemFunHandler (const PointerToObj &pObj, PointerToMemFn pMemFn);  constructor from a pointer to the class and a pointer to the function ;  ; virtual ~ParamMemFunHandler ();  ; ParamMemFunHandler * Clone () const;  ; double operator() (const double *x, const double *p);  ; double operator() (double *x, double *p);  ; double operator() (double x, double *p);  . Private Types; typedef ParentFunctor::Impl Base;  . Private Member Functions;  ParamMemFunHandler (const ParamMemFunHandler &)=delete;  ; ParamMemFunHandler & operator= (const ParamMemFunHandler &)=delete;  . Private Attributes; PointerToMemFn fMemFn;  ; PointerToObj fObj;  . #include <Math/ParamFunctor.h>. Inheritance diagram for ROOT::Math::ParamMemFunHandler< ParentFunctor, PointerToObj, PointerToMemFn >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ Base. template<class ParentFunctor , typename PointerToObj , typename PointerToMemFn > . typedef ParentFunctor::Impl ROOT::Math::ParamMemFunHandler< ParentFunctor, PointerToObj, PointerToMemFn >::Base. private . Definition at line 176 of file ParamFunctor.h. Constructor & Destructor Do",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1ParamMemFunHandler.html:155,Load,Loading,155,doc/master/classROOT_1_1Math_1_1ParamMemFunHandler.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1ParamMemFunHandler.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::PlaceExpr< T, D1, D2, D3, D4, A, MatRepSym< T, D1 >, MatRepStd< T, D3, D4 > > Struct Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Static Public Member Functions |; List of all members ; ROOT::Math::PlaceExpr< T, D1, D2, D3, D4, A, MatRepSym< T, D1 >, MatRepStd< T, D3, D4 > > Struct Template Reference. ; template<class T, unsigned int D1, unsigned int D2, unsigned int D3, unsigned int D4, class A>; struct ROOT::Math::PlaceExpr< T, D1, D2, D3, D4, A, MatRepSym< T, D1 >, MatRepStd< T, D3, D4 > >; Definition at line 407 of file HelperOps.h. Static Public Member Functions; static void Evaluate (SMatrix< T, D1, D2, MatRepSym< T, D1 > > &, const Expr< A, T, D3, D4, MatRepStd< T, D3, D4 > > &, unsigned int, unsigned int);  . #include <Math/HelperOps.h>; Member Function Documentation. ◆ Evaluate(). template<class T , unsigned int D1, unsigned int D2, unsigned int D3, unsigned int D4, class A > . static void ROOT::Math::PlaceExpr< T, D1, D2, D3, D4, A, MatRepSym< T, D1 >, MatRepStd< T, D3, D4 > >::Evaluate ; (; SMatrix< T, D1, D2, MatRepSym< T, D1 > > & ; , . const Expr< A, T, D3, D4, MatRepStd< T, D3, D4 > > & ; , . unsigned int ; , . unsigned int ;  . ). inlinestatic . Definition at line 408 of file HelperOps.h. The documentation for this struct was generated from the following file:; math/smatrix/inc/Math/HelperOps.h. ROOTMathPlaceExpr< T, D1, D2, D3, D4, A, MatRepSym< T, D1 >, MatRepStd< T, D3, D4 > >. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:23 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structROOT_1_1Math_1_1PlaceExpr_3_01T_00_01D1_00_01D2_00_01D3_00_01D4_00_01A_00_01MatRepSym_3_01bbbf80e649b356e9c71644b2b3a2891b.html:168,Load,Loading,168,doc/master/structROOT_1_1Math_1_1PlaceExpr_3_01T_00_01D1_00_01D2_00_01D3_00_01D4_00_01A_00_01MatRepSym_3_01bbbf80e649b356e9c71644b2b3a2891b.html,https://root.cern,https://root.cern/doc/master/structROOT_1_1Math_1_1PlaceExpr_3_01T_00_01D1_00_01D2_00_01D3_00_01D4_00_01A_00_01MatRepSym_3_01bbbf80e649b356e9c71644b2b3a2891b.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::PlaceExpr< T, D1, D2, D3, D4, A, MatRepSym< T, D1 >, MatRepSym< T, D3 > > Struct Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Static Public Member Functions |; List of all members ; ROOT::Math::PlaceExpr< T, D1, D2, D3, D4, A, MatRepSym< T, D1 >, MatRepSym< T, D3 > > Struct Template Reference. ; template<class T, unsigned int D1, unsigned int D2, unsigned int D3, unsigned int D4, class A>; struct ROOT::Math::PlaceExpr< T, D1, D2, D3, D4, A, MatRepSym< T, D1 >, MatRepSym< T, D3 > >; Definition at line 438 of file HelperOps.h. Static Public Member Functions; static void Evaluate (SMatrix< T, D1, D2, MatRepSym< T, D1 > > &lhs, const Expr< A, T, D3, D4, MatRepSym< T, D3 > > &rhs, unsigned int row, unsigned int col);  . #include <Math/HelperOps.h>; Member Function Documentation. ◆ Evaluate(). template<class T , unsigned int D1, unsigned int D2, unsigned int D3, unsigned int D4, class A > . static void ROOT::Math::PlaceExpr< T, D1, D2, D3, D4, A, MatRepSym< T, D1 >, MatRepSym< T, D3 > >::Evaluate ; (; SMatrix< T, D1, D2, MatRepSym< T, D1 > > & ; lhs, . const Expr< A, T, D3, D4, MatRepSym< T, D3 > > & ; rhs, . unsigned int ; row, . unsigned int ; col . ). inlinestatic . Definition at line 439 of file HelperOps.h. The documentation for this struct was generated from the following file:; math/smatrix/inc/Math/HelperOps.h. ROOTMathPlaceExpr< T, D1, D2, D3, D4, A, MatRepSym< T, D1 >, MatRepSym< T, D3 > >. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:23 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structROOT_1_1Math_1_1PlaceExpr_3_01T_00_01D1_00_01D2_00_01D3_00_01D4_00_01A_00_01MatRepSym_3_01e871d0c5723de551219df5c2a31b167b.html:164,Load,Loading,164,doc/master/structROOT_1_1Math_1_1PlaceExpr_3_01T_00_01D1_00_01D2_00_01D3_00_01D4_00_01A_00_01MatRepSym_3_01e871d0c5723de551219df5c2a31b167b.html,https://root.cern,https://root.cern/doc/master/structROOT_1_1Math_1_1PlaceExpr_3_01T_00_01D1_00_01D2_00_01D3_00_01D4_00_01A_00_01MatRepSym_3_01e871d0c5723de551219df5c2a31b167b.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::PlaceExpr< T, D1, D2, D3, D4, A, R1, R2 > Struct Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Static Public Member Functions |; List of all members ; ROOT::Math::PlaceExpr< T, D1, D2, D3, D4, A, R1, R2 > Struct Template Reference. ; template<class T, unsigned int D1, unsigned int D2, unsigned int D3, unsigned int D4, class A, class R1, class R2>; struct ROOT::Math::PlaceExpr< T, D1, D2, D3, D4, A, R1, R2 >; Definition at line 379 of file HelperOps.h. Static Public Member Functions; static void Evaluate (SMatrix< T, D1, D2, R1 > &lhs, const Expr< A, T, D3, D4, R2 > &rhs, unsigned int row, unsigned int col);  . #include <Math/HelperOps.h>; Member Function Documentation. ◆ Evaluate(). template<class T , unsigned int D1, unsigned int D2, unsigned int D3, unsigned int D4, class A , class R1 , class R2 > . static void ROOT::Math::PlaceExpr< T, D1, D2, D3, D4, A, R1, R2 >::Evaluate ; (; SMatrix< T, D1, D2, R1 > & ; lhs, . const Expr< A, T, D3, D4, R2 > & ; rhs, . unsigned int ; row, . unsigned int ; col . ). inlinestatic . Definition at line 380 of file HelperOps.h. The documentation for this struct was generated from the following file:; math/smatrix/inc/Math/HelperOps.h. ROOTMathPlaceExpr. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:23 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structROOT_1_1Math_1_1PlaceExpr.html:132,Load,Loading,132,doc/master/structROOT_1_1Math_1_1PlaceExpr.html,https://root.cern,https://root.cern/doc/master/structROOT_1_1Math_1_1PlaceExpr.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::PlaceMatrix< T, D1, D2, D3, D4, MatRepSym< T, D1 >, MatRepStd< T, D3, D4 > > Struct Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Static Public Member Functions |; List of all members ; ROOT::Math::PlaceMatrix< T, D1, D2, D3, D4, MatRepSym< T, D1 >, MatRepStd< T, D3, D4 > > Struct Template Reference. ; template<class T, unsigned int D1, unsigned int D2, unsigned int D3, unsigned int D4>; struct ROOT::Math::PlaceMatrix< T, D1, D2, D3, D4, MatRepSym< T, D1 >, MatRepStd< T, D3, D4 > >; Definition at line 395 of file HelperOps.h. Static Public Member Functions; static void Evaluate (SMatrix< T, D1, D2, MatRepSym< T, D1 > > &, const SMatrix< T, D3, D4, MatRepStd< T, D3, D4 > > &, unsigned int, unsigned int);  . #include <Math/HelperOps.h>; Member Function Documentation. ◆ Evaluate(). template<class T , unsigned int D1, unsigned int D2, unsigned int D3, unsigned int D4> . static void ROOT::Math::PlaceMatrix< T, D1, D2, D3, D4, MatRepSym< T, D1 >, MatRepStd< T, D3, D4 > >::Evaluate ; (; SMatrix< T, D1, D2, MatRepSym< T, D1 > > & ; , . const SMatrix< T, D3, D4, MatRepStd< T, D3, D4 > > & ; , . unsigned int ; , . unsigned int ;  . ). inlinestatic . Definition at line 396 of file HelperOps.h. The documentation for this struct was generated from the following file:; math/smatrix/inc/Math/HelperOps.h. ROOTMathPlaceMatrix< T, D1, D2, D3, D4, MatRepSym< T, D1 >, MatRepStd< T, D3, D4 > >. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:23 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structROOT_1_1Math_1_1PlaceMatrix_3_01T_00_01D1_00_01D2_00_01D3_00_01D4_00_01MatRepSym_3_01T_00_9bfe951e8bbfe3f976b2661125c16c80.html:167,Load,Loading,167,doc/master/structROOT_1_1Math_1_1PlaceMatrix_3_01T_00_01D1_00_01D2_00_01D3_00_01D4_00_01MatRepSym_3_01T_00_9bfe951e8bbfe3f976b2661125c16c80.html,https://root.cern,https://root.cern/doc/master/structROOT_1_1Math_1_1PlaceMatrix_3_01T_00_01D1_00_01D2_00_01D3_00_01D4_00_01MatRepSym_3_01T_00_9bfe951e8bbfe3f976b2661125c16c80.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::PlaceMatrix< T, D1, D2, D3, D4, MatRepSym< T, D1 >, MatRepSym< T, D3 > > Struct Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Static Public Member Functions |; List of all members ; ROOT::Math::PlaceMatrix< T, D1, D2, D3, D4, MatRepSym< T, D1 >, MatRepSym< T, D3 > > Struct Template Reference. ; template<class T, unsigned int D1, unsigned int D2, unsigned int D3, unsigned int D4>; struct ROOT::Math::PlaceMatrix< T, D1, D2, D3, D4, MatRepSym< T, D1 >, MatRepSym< T, D3 > >; Definition at line 420 of file HelperOps.h. Static Public Member Functions; static void Evaluate (SMatrix< T, D1, D2, MatRepSym< T, D1 > > &lhs, const SMatrix< T, D3, D4, MatRepSym< T, D3 > > &rhs, unsigned int row, unsigned int col);  . #include <Math/HelperOps.h>; Member Function Documentation. ◆ Evaluate(). template<class T , unsigned int D1, unsigned int D2, unsigned int D3, unsigned int D4> . static void ROOT::Math::PlaceMatrix< T, D1, D2, D3, D4, MatRepSym< T, D1 >, MatRepSym< T, D3 > >::Evaluate ; (; SMatrix< T, D1, D2, MatRepSym< T, D1 > > & ; lhs, . const SMatrix< T, D3, D4, MatRepSym< T, D3 > > & ; rhs, . unsigned int ; row, . unsigned int ; col . ). inlinestatic . Definition at line 421 of file HelperOps.h. The documentation for this struct was generated from the following file:; math/smatrix/inc/Math/HelperOps.h. ROOTMathPlaceMatrix< T, D1, D2, D3, D4, MatRepSym< T, D1 >, MatRepSym< T, D3 > >. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:23 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structROOT_1_1Math_1_1PlaceMatrix_3_01T_00_01D1_00_01D2_00_01D3_00_01D4_00_01MatRepSym_3_01T_00_d20a681b5cea15d2ec1d7c5ae41f4728.html:163,Load,Loading,163,doc/master/structROOT_1_1Math_1_1PlaceMatrix_3_01T_00_01D1_00_01D2_00_01D3_00_01D4_00_01MatRepSym_3_01T_00_d20a681b5cea15d2ec1d7c5ae41f4728.html,https://root.cern,https://root.cern/doc/master/structROOT_1_1Math_1_1PlaceMatrix_3_01T_00_01D1_00_01D2_00_01D3_00_01D4_00_01MatRepSym_3_01T_00_d20a681b5cea15d2ec1d7c5ae41f4728.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::PlaceMatrix< T, D1, D2, D3, D4, R1, R2 > Struct Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Static Public Member Functions |; List of all members ; ROOT::Math::PlaceMatrix< T, D1, D2, D3, D4, R1, R2 > Struct Template Reference. ; template<class T, unsigned int D1, unsigned int D2, unsigned int D3, unsigned int D4, class R1, class R2>; struct ROOT::Math::PlaceMatrix< T, D1, D2, D3, D4, R1, R2 >Structure to deal when a submatrix is placed in a matrix. ; We have different cases according to the matrix representation ; Definition at line 361 of file HelperOps.h. Static Public Member Functions; static void Evaluate (SMatrix< T, D1, D2, R1 > &lhs, const SMatrix< T, D3, D4, R2 > &rhs, unsigned int row, unsigned int col);  . #include <Math/HelperOps.h>; Member Function Documentation. ◆ Evaluate(). template<class T , unsigned int D1, unsigned int D2, unsigned int D3, unsigned int D4, class R1 , class R2 > . static void ROOT::Math::PlaceMatrix< T, D1, D2, D3, D4, R1, R2 >::Evaluate ; (; SMatrix< T, D1, D2, R1 > & ; lhs, . const SMatrix< T, D3, D4, R2 > & ; rhs, . unsigned int ; row, . unsigned int ; col . ). inlinestatic . Definition at line 363 of file HelperOps.h. The documentation for this struct was generated from the following file:; math/smatrix/inc/Math/HelperOps.h. ROOTMathPlaceMatrix. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:23 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structROOT_1_1Math_1_1PlaceMatrix.html:131,Load,Loading,131,doc/master/structROOT_1_1Math_1_1PlaceMatrix.html,https://root.cern,https://root.cern/doc/master/structROOT_1_1Math_1_1PlaceMatrix.html,1,['Load'],['Loading']
Performance,. ROOT: ROOT::Math::PlainParameters Struct Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. ROOT::Math::PlainParameters Struct Reference. . Definition at line 101 of file MCParameters.h. #include <Math/MCParameters.h>; The documentation for this struct was generated from the following file:; math/mathmore/inc/Math/MCParameters.h. ROOTMathPlainParameters. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:23 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structROOT_1_1Math_1_1PlainParameters.html:97,Load,Loading,97,doc/master/structROOT_1_1Math_1_1PlainParameters.html,https://root.cern,https://root.cern/doc/master/structROOT_1_1Math_1_1PlainParameters.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::PlusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepStd< T, D1, D2 > > Struct Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Static Public Member Functions |; List of all members ; ROOT::Math::PlusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepStd< T, D1, D2 > > Struct Template Reference. ; template<class T, unsigned int D1, unsigned int D2, class A>; struct ROOT::Math::PlusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepStd< T, D1, D2 > >Specialization for symmetrix += general : NOT Allowed operation. ; Definition at line 261 of file HelperOps.h. Static Public Member Functions; static void Evaluate (SMatrix< T, D1, D2, MatRepSym< T, D1 > > &, const Expr< A, T, D1, D2, MatRepStd< T, D1, D2 > > &);  . #include <Math/HelperOps.h>; Member Function Documentation. ◆ Evaluate(). template<class T , unsigned int D1, unsigned int D2, class A > . static void ROOT::Math::PlusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepStd< T, D1, D2 > >::Evaluate ; (; SMatrix< T, D1, D2, MatRepSym< T, D1 > > & ; , . const Expr< A, T, D1, D2, MatRepStd< T, D1, D2 > > & ;  . ). inlinestatic . Definition at line 263 of file HelperOps.h. The documentation for this struct was generated from the following file:; math/smatrix/inc/Math/HelperOps.h. ROOTMathPlusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepStd< T, D1, D2 > >. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:23 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structROOT_1_1Math_1_1PlusEquals_3_01T_00_01D1_00_01D2_00_01A_00_01MatRepSym_3_01T_00_01D1_01_4_5eeb62950eb424c35f6b8a98dbf18743.html:161,Load,Loading,161,doc/master/structROOT_1_1Math_1_1PlusEquals_3_01T_00_01D1_00_01D2_00_01A_00_01MatRepSym_3_01T_00_01D1_01_4_5eeb62950eb424c35f6b8a98dbf18743.html,https://root.cern,https://root.cern/doc/master/structROOT_1_1Math_1_1PlusEquals_3_01T_00_01D1_00_01D2_00_01A_00_01MatRepSym_3_01T_00_01D1_01_4_5eeb62950eb424c35f6b8a98dbf18743.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::PlusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepSym< T, D1 > > Struct Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Static Public Member Functions |; List of all members ; ROOT::Math::PlusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepSym< T, D1 > > Struct Template Reference. ; template<class T, unsigned int D1, unsigned int D2, class A>; struct ROOT::Math::PlusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepSym< T, D1 > >Specialization for symmetric matrices Evaluate the expression performing a += operation for symmetric matrices Need to have a separate functions to avoid to modify two times the off-diagonal elements (i.e applying two times the expression) Need to check whether creating a temporary object with the expression result (like in op: A += A * B ) ; Definition at line 232 of file HelperOps.h. Static Public Member Functions; static void Evaluate (SMatrix< T, D1, D2, MatRepSym< T, D1 > > &lhs, const Expr< A, T, D1, D2, MatRepSym< T, D1 > > &rhs);  . #include <Math/HelperOps.h>; Member Function Documentation. ◆ Evaluate(). template<class T , unsigned int D1, unsigned int D2, class A > . static void ROOT::Math::PlusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepSym< T, D1 > >::Evaluate ; (; SMatrix< T, D1, D2, MatRepSym< T, D1 > > & ; lhs, . const Expr< A, T, D1, D2, MatRepSym< T, D1 > > & ; rhs . ). inlinestatic . Definition at line 234 of file HelperOps.h. The documentation for this struct was generated from the following file:; math/smatrix/inc/Math/HelperOps.h. ROOTMathPlusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepSym< T, D1 > >. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:23 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structROOT_1_1Math_1_1PlusEquals_3_01T_00_01D1_00_01D2_00_01A_00_01MatRepSym_3_01T_00_01D1_01_4_ab389af18e6c21fe987654dcf40e7fea.html:157,Load,Loading,157,doc/master/structROOT_1_1Math_1_1PlusEquals_3_01T_00_01D1_00_01D2_00_01A_00_01MatRepSym_3_01T_00_01D1_01_4_ab389af18e6c21fe987654dcf40e7fea.html,https://root.cern,https://root.cern/doc/master/structROOT_1_1Math_1_1PlusEquals_3_01T_00_01D1_00_01D2_00_01A_00_01MatRepSym_3_01T_00_01D1_01_4_ab389af18e6c21fe987654dcf40e7fea.html,2,"['Load', 'perform']","['Loading', 'performing']"
Performance,". ROOT: ROOT::Math::PlusEquals< T, D1, D2, A, R1, R2 > Struct Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Static Public Member Functions |; List of all members ; ROOT::Math::PlusEquals< T, D1, D2, A, R1, R2 > Struct Template Reference. ; template<class T, unsigned int D1, unsigned int D2, class A, class R1, class R2>; struct ROOT::Math::PlusEquals< T, D1, D2, A, R1, R2 >Evaluate the expression performing a += operation Need to check whether creating a temporary object with the expression result (like in op: A += A * B ) ; Definition at line 195 of file HelperOps.h. Static Public Member Functions; static void Evaluate (SMatrix< T, D1, D2, R1 > &lhs, const Expr< A, T, D1, D2, R2 > &rhs);  . #include <Math/HelperOps.h>; Member Function Documentation. ◆ Evaluate(). template<class T , unsigned int D1, unsigned int D2, class A , class R1 , class R2 > . static void ROOT::Math::PlusEquals< T, D1, D2, A, R1, R2 >::Evaluate ; (; SMatrix< T, D1, D2, R1 > & ; lhs, . const Expr< A, T, D1, D2, R2 > & ; rhs . ). inlinestatic . Definition at line 197 of file HelperOps.h. The documentation for this struct was generated from the following file:; math/smatrix/inc/Math/HelperOps.h. ROOTMathPlusEquals. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:23 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structROOT_1_1Math_1_1PlusEquals.html:125,Load,Loading,125,doc/master/structROOT_1_1Math_1_1PlusEquals.html,https://root.cern,https://root.cern/doc/master/structROOT_1_1Math_1_1PlusEquals.html,2,"['Load', 'perform']","['Loading', 'performing']"
Performance,". ROOT: ROOT::Math::Polar2D< T > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Attributes |; Private Member Functions |; Static Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::Polar2D< T > Class Template ReferenceMath » Physics Vectors. ; template<class T>; class ROOT::Math::Polar2D< T >Class describing a polar 2D coordinate system based on r and phi Phi is restricted to be in the range [-PI,PI) ; See alsoOverview of the physics vector library; Class describing a 2D Polar coordinate system; (r, phi coordinates) ; Definition at line 45 of file Polar2D.h. Public Types; typedef T Scalar;  . Public Member Functions;  Polar2D ();  Default constructor with r=1,phi=0. ;  ; template<class CoordSystem > ; constexpr Polar2D (const CoordSystem &v);  Construct from any Vector or coordinate system implementing R() and Phi() ;  ;  Polar2D (const Polar2D &v);  copy constructor ;  ;  Polar2D (T r, T phi);  Construct from the polar coordinates: r and phi. ;  ; void GetCoordinates (Scalar &r, Scalar &phi) const;  get internal data into 2 Scalar numbers ;  ; Scalar Mag2 () const;  ; void Negate ();  negate the vector ;  ; bool operator!= (const Polar2D &rhs) const;  ; template<class CoordSystem > ; Polar2D & operator= (const CoordSystem &c);  generic assignment operator from any coordinate system ;  ; Polar2D & operator= (const Polar2D &v);  assignment operator ;  ; bool operator== (const Polar2D &rhs) const;  Exact equality. ;  ; Scalar Phi () const;  ; Scalar R () const;  ; void Rotate (T angle);  rotate the vector ;  ; void Scale (T a);  scale by a scalar quantity - for polar coordinates r changes ;  ; void SetCoordinates (Scalar r, Scalar phi);  Set internal data based on 2 Scalar numbers. ;  ; void SetPhi (const T &phi);  set the phi coordinate value keeping r constant ;  ; void SetR (const T &r);  set the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1Polar2D.html:102,Load,Loading,102,doc/master/classROOT_1_1Math_1_1Polar2D.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Polar2D.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::Polar3D< T > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Attributes |; Private Member Functions |; Static Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::Polar3D< T > Class Template ReferenceMath » Physics Vectors. ; template<class T>; class ROOT::Math::Polar3D< T >Class describing a polar coordinate system based on r, theta and phi Phi is restricted to be in the range [-PI,PI) ; Class describing a 3D Polar coordinate system (r, theta, phi coordinates); See alsoOverview of the physics vector library ; Definition at line 45 of file Polar3D.h. Public Types; typedef T Scalar;  . Public Member Functions;  Polar3D ();  Default constructor with r=theta=phi=0. ;  ; template<class CoordSystem > ; constexpr Polar3D (const CoordSystem &v);  Construct from any Vector or coordinate system implementing R(), Theta() and Phi() ;  ;  Polar3D (const Polar3D &v);  copy constructor ;  ;  Polar3D (T r, T theta, T phi);  Construct from the polar coordinates: r, theta and phi. ;  ; Scalar Eta () const;  ; void GetCoordinates (Scalar &r, Scalar &theta, Scalar &phi) const;  get internal data into 3 Scalar numbers ;  ; void GetCoordinates (Scalar dest[]) const;  get internal data into an array of 3 Scalar numbers ;  ; Scalar Mag2 () const;  ; void Negate ();  negate the vector ;  ; bool operator!= (const Polar3D &rhs) const;  ; template<class CoordSystem > ; Polar3D & operator= (const CoordSystem &c);  generic assignment operator from any coordinate system ;  ; Polar3D & operator= (const Polar3D &v);  assignment operator ;  ; bool operator== (const Polar3D &rhs) const;  Exact equality. ;  ; Scalar Perp2 () const;  ; Scalar Phi () const;  ; Scalar R () const;  ; Scalar Rho () const;  ; void Scale (T a);  scale by a scalar quantity - for polar coordinates r changes ;  ; void SetCoordinates (const S",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1Polar3D.html:102,Load,Loading,102,doc/master/classROOT_1_1Math_1_1Polar3D.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Polar3D.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::Polynomial Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::Polynomial Class ReferenceMath » MathCore » Function Classes and Interfaces » Parametric Function Evaluation Interfaces. ; Parametric Function class describing polynomials of order n. ; P(x) = p[0] + p[1]*x + p[2]*x**2 + ....... + p[n]*x**n; The class implements also the derivatives, dP(x)/dx and the dP(x)/dp[i].; The class provides also the method to find the roots of the polynomial. It uses analytical methods up to quartic polynomials.; Implements both the Parameteric function interface and the gradient interface since it provides the analytical gradient with respect to x ; Definition at line 64 of file Polynomial.h. Public Types; typedef ParamFunction< IParamGradFunction > ParFunc;  ;  Public Types inherited from ROOT::Math::ParamFunction< IParamGradFunction >; typedef IPFType::BaseFunc BaseFunc;  ; typedef IParamGradFunction BaseParFunc;  ;  Public Types inherited from ROOT::Math::IParametricGradFunctionOneDim; typedef IParametricFunctionOneDim::BaseFunc BaseFunc;  ; typedef IGradientFunctionOneDim BaseGradFunc;  ; typedef IParametricFunctionOneDim BaseParamFunc;  ;  Public Types inherited from ROOT::Math::IParametricFunctionOneDim; typedef IBaseFunctionOneDim BaseFunc;  ;  Public Types inherited from ROOT::Math::IBaseFunctionOneDim; typedef IBaseFunctionOneDim BaseFunc;  ;  Public Types inherited from ROOT::Math::IGradientFunctionOneDim; typedef IBaseFunctionOneDim BaseFunc;  ; typedef IGradientFunctionOneDim BaseGrad;  . Public Member Functions;  Polynomial (double a, double b);  Construct a Polynomial of degree 1 : a*x + b. ;  ;  Polynomial (double a, double b, double c);  Construct a Polynomial of degree 2 : a*x**2 + b*x + c. ;  ;  Polynomial (double a, double b, double c, double d);  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1Polynomial.html:91,Load,Loading,91,doc/master/classROOT_1_1Math_1_1Polynomial.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Polynomial.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::PositionVector2D< CoordSystem, Tag > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; ROOT::Math::PositionVector2D< CoordSystem, Tag > Class Template ReferenceMath » Physics Vectors. ; template<class CoordSystem, class Tag = DefaultCoordinateSystemTag>; class ROOT::Math::PositionVector2D< CoordSystem, Tag >Class describing a generic position vector (point) in 2 dimensions. ; Class describing a 2D Position vector.; This class is templated on the type of Coordinate system. One example is the XYPoint which is a vector based on double precision x,y data members by using the ROOT::Math::Cartesian2D<double> Coordinate system. The class is having also an extra template parameter, the coordinate system tag, to be able to identify (tag) vector described in different reference coordinate system, like global or local coordinate systems.; See alsoOverview of the physics vector library ; Definition at line 50 of file PositionVector2D.h. Public Types; typedef Tag CoordinateSystemTag;  ; typedef CoordSystem CoordinateType;  ; typedef CoordSystem::Scalar Scalar;  . Public Member Functions; constexpr PositionVector2D ();  Default constructor. ;  ; template<class T > ; constexpr PositionVector2D (const DisplacementVector2D< T, Tag > &p);  Construct from an arbitrary displacement vector. ;  ; template<class ForeignVector > ; constexpr PositionVector2D (const ForeignVector &v);  Construct from a foreign 2D vector type, for example, Hep2Vector Precondition: v must implement methods x() and y() ;  ; template<class T > ; constexpr PositionVector2D (const PositionVector2D< T, Tag > &v);  Construct from a position vector expressed in different coordinates, or using a different Scalar type. ;  ; constexpr PositionVector2D (const Scalar &a, const Scalar",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1PositionVector2D.html:126,Load,Loading,126,doc/master/classROOT_1_1Math_1_1PositionVector2D.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1PositionVector2D.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::PositionVector3D< CoordSystem, Tag > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; ROOT::Math::PositionVector3D< CoordSystem, Tag > Class Template ReferenceMath » Physics Vectors. ; template<class CoordSystem, class Tag = DefaultCoordinateSystemTag>; class ROOT::Math::PositionVector3D< CoordSystem, Tag >Class describing a generic position vector (point) in 3 dimensions. ; Class describing a 3D Position vector.; This class is templated on the type of Coordinate system. One example is the XYZPoint which is a vector based on double precision x,y,z data members by using the ROOT::Math::Cartesian3D<double> Coordinate system. The class is having also an extra template parameter, the coordinate system tag, to be able to identify (tag) vector described in different reference coordinate system, like global or local coordinate systems.; See alsoOverview of the physics vector library ; Definition at line 55 of file PositionVector3D.h. Public Types; typedef Tag CoordinateSystemTag;  ; typedef CoordSystem CoordinateType;  ; typedef CoordSystem::Scalar Scalar;  . Public Member Functions; constexpr PositionVector3D ();  Default constructor. ;  ; template<class T > ; constexpr PositionVector3D (const DisplacementVector3D< T, Tag > &p);  Construct from an arbitrary displacement vector. ;  ; template<class ForeignVector > ; constexpr PositionVector3D (const ForeignVector &v);  Construct from a foreign 3D vector type, for example, Hep3Vector Precondition: v must implement methods x(), y() and z() ;  ; template<class T > ; constexpr PositionVector3D (const PositionVector3D< T, Tag > &v);  Construct from a position vector expressed in different coordinates, or using a different Scalar type. ;  ; constexpr PositionVector3D (const Scalar &a, cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1PositionVector3D.html:126,Load,Loading,126,doc/master/classROOT_1_1Math_1_1PositionVector3D.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1PositionVector3D.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::PtEtaPhiE4D< ScalarType > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Attributes |; Private Member Functions |; Static Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::PtEtaPhiE4D< ScalarType > Class Template ReferenceMath » Physics Vectors. ; template<class ScalarType>; class ROOT::Math::PtEtaPhiE4D< ScalarType >Class describing a 4D cylindrical coordinate system using Pt , Phi, Eta and E (or rho, phi, eta , T) The metric used is (-,-,-,+). ; Phi is restricted to be in the range [-PI,PI); See alsoOverview of the physics vector library ; Definition at line 54 of file PtEtaPhiE4D.h. Public Types; typedef ScalarType Scalar;  . Public Member Functions;  PtEtaPhiE4D ();  Default constructor gives zero 4-vector. ;  ; template<class CoordSystem > ; constexpr PtEtaPhiE4D (const CoordSystem &c);  Generic constructor from any 4D coordinate system implementing Pt(), Eta(), Phi() and E() ;  ;  PtEtaPhiE4D (const PtEtaPhiE4D &v);  copy constructor ;  ;  PtEtaPhiE4D (Scalar pt, Scalar eta, Scalar phi, Scalar e);  Constructor from pt, eta, phi, e values. ;  ; Scalar E () const;  ; Scalar Et () const;  transverse energy ;  ; Scalar Et2 () const;  transverse energy squared ;  ; Scalar Eta () const;  ; void GetCoordinates (Scalar &pt, Scalar &eta, Scalar &phi, Scalar &e) const;  get internal data into 4 Scalar numbers ;  ; void GetCoordinates (Scalar dest[]) const;  get internal data into an array of 4 Scalar numbers ;  ; Scalar M () const;  invariant mass ;  ; Scalar M2 () const;  vector magnitude squared (or mass squared) ;  ; Scalar Mag () const;  ; Scalar Mag2 () const;  ; Scalar Mt () const;  transverse mass ;  ; Scalar Mt2 () const;  transverse mass squared ;  ; void Negate ();  negate the 4-vector ;  ; bool operator!= (const PtEtaPhiE4D &rhs) const;  ; template<class CoordSystem > ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1PtEtaPhiE4D.html:115,Load,Loading,115,doc/master/classROOT_1_1Math_1_1PtEtaPhiE4D.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1PtEtaPhiE4D.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::PtEtaPhiM4D< ScalarType > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Attributes |; Private Member Functions |; Static Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::PtEtaPhiM4D< ScalarType > Class Template ReferenceMath » Physics Vectors. ; template<class ScalarType>; class ROOT::Math::PtEtaPhiM4D< ScalarType >Class describing a 4D cylindrical coordinate system using Pt , Phi, Eta and M (mass) The metric used is (-,-,-,+). ; Spacelike particles (M2 < 0) are described with negative mass values, but in this case m2 must always be less than P2 to preserve a positive value of E2 Phi is restricted to be in the range [-PI,PI); See alsoOverview of the physics vector library ; Definition at line 54 of file PtEtaPhiM4D.h. Public Types; typedef ScalarType Scalar;  . Public Member Functions;  PtEtaPhiM4D ();  Default constructor gives zero 4-vector (with zero mass) ;  ; template<class CoordSystem > ; constexpr PtEtaPhiM4D (const CoordSystem &c);  Generic constructor from any 4D coordinate system implementing Pt(), Eta(), Phi() and M() ;  ;  PtEtaPhiM4D (const PtEtaPhiM4D &v);  copy constructor ;  ;  PtEtaPhiM4D (Scalar pt, Scalar eta, Scalar phi, Scalar mass);  Constructor from pt, eta, phi, mass values. ;  ; Scalar E () const;  Energy (timelike component of momentum-energy 4-vector) ;  ; Scalar E2 () const;  energy squared ;  ; Scalar Et () const;  transverse energy ;  ; Scalar Et2 () const;  transverse energy squared ;  ; Scalar Eta () const;  ; void GetCoordinates (Scalar &pt, Scalar &eta, Scalar &phi, Scalar &mass) const;  get internal data into 4 Scalar numbers ;  ; void GetCoordinates (Scalar dest[]) const;  get internal data into an array of 4 Scalar numbers ;  ; Scalar M () const;  M() is the invariant mass; in this coordinate system it can be negagative if set that way. ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1PtEtaPhiM4D.html:115,Load,Loading,115,doc/master/classROOT_1_1Math_1_1PtEtaPhiM4D.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1PtEtaPhiM4D.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::PxPyPzE4D< ScalarType > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Attributes |; Private Attributes |; List of all members ; ROOT::Math::PxPyPzE4D< ScalarType > Class Template ReferenceMath » Physics Vectors. ; template<class ScalarType = double>; class ROOT::Math::PxPyPzE4D< ScalarType >Class describing a 4D cartesian coordinate system (x, y, z, t coordinates) or momentum-energy vectors stored as (Px, Py, Pz, E). ; The metric used is (-,-,-,+); See alsoOverview of the physics vector library ; Definition at line 44 of file PxPyPzE4D.h. Public Types; typedef ScalarType Scalar;  . Public Member Functions;  PxPyPzE4D ();  Default constructor with x=y=z=t=0. ;  ; template<class CoordSystem > ; constexpr PxPyPzE4D (const CoordSystem &v);  construct from any vector or coordinate system class implementing x(), y() and z() and t() ;  ;  PxPyPzE4D (const PxPyPzE4D &v);  copy constructor ;  ;  PxPyPzE4D (Scalar px, Scalar py, Scalar pz, Scalar e);  Constructor from x, y , z , t values. ;  ; Scalar E () const;  ; Scalar Et () const;  transverse energy ;  ; Scalar Et2 () const;  transverse energy squared ;  ; Scalar Eta () const;  pseudorapidity ;  ; void GetCoordinates (Scalar &px, Scalar &py, Scalar &pz, Scalar &e) const;  get internal data into 4 Scalar numbers ;  ; void GetCoordinates (Scalar dest[]) const;  get internal data into an array of 4 Scalar numbers ;  ; Scalar M () const;  invariant mass ;  ; Scalar M2 () const;  vector magnitude squared (or mass squared) ;  ; Scalar Mag () const;  ; Scalar Mag2 () const;  ; Scalar Mt () const;  transverse mass ;  ; Scalar Mt2 () const;  transverse mass squared ;  ; void Negate ();  negate the 4-vector ;  ; bool operator!= (const PxPyPzE4D &rhs) const;  ; template<class AnyCoordSystem > ; PxPyPzE4D & operator= (const AnyCoordSystem &v);  Assignment from a generic coordi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1PxPyPzE4D.html:113,Load,Loading,113,doc/master/classROOT_1_1Math_1_1PxPyPzE4D.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1PxPyPzE4D.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::PxPyPzM4D< ScalarType > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Attributes |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::PxPyPzM4D< ScalarType > Class Template ReferenceMath » Physics Vectors. ; template<class ScalarType = double>; class ROOT::Math::PxPyPzM4D< ScalarType >Class describing a 4D coordinate system or momentum-energy vectors stored as (Px, Py, Pz, M). ; This system is useful to describe ultra-relativistic particles (like electrons at LHC) to avoid numerical errors evaluating the mass when E >>> m The metric used is (-,-,-,+) Spacelike particles (M2 < 0) are described with negative mass values, but in this case m2 must always be less than P2 to preserve a positive value of E2; See alsoOverview of the physics vector library ; Definition at line 49 of file PxPyPzM4D.h. Public Types; typedef ScalarType Scalar;  . Public Member Functions;  PxPyPzM4D ();  Default constructor with x=y=z=m=0. ;  ; template<class CoordSystem > ; constexpr PxPyPzM4D (const CoordSystem &v);  construct from any 4D coordinate system class implementing X(), Y(), X() and M() ;  ;  PxPyPzM4D (const PxPyPzM4D &v);  copy constructor ;  ;  PxPyPzM4D (Scalar px, Scalar py, Scalar pz, Scalar m);  Constructor from x, y , z , m values. ;  ; Scalar E () const;  Energy. ;  ; Scalar E2 () const;  energy squared ;  ; Scalar Et () const;  transverse energy ;  ; Scalar Et2 () const;  transverse energy squared ;  ; Scalar Eta () const;  pseudorapidity ;  ; void GetCoordinates (Scalar &px, Scalar &py, Scalar &pz, Scalar &m) const;  get internal data into 4 Scalar numbers ;  ; void GetCoordinates (Scalar dest[]) const;  get internal data into an array of 4 Scalar numbers ;  ; Scalar M () const;  ; Scalar M2 () const;  vector magnitude squared (or mass squared) In case of negative mass (spacelike pa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1PxPyPzM4D.html:113,Load,Loading,113,doc/master/classROOT_1_1Math_1_1PxPyPzM4D.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1PxPyPzM4D.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::QuasiRandom< Engine > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::Math::QuasiRandom< Engine > Class Template ReferenceMath » MathCore » Interface classes for Random number generation | Math » MathMore » QuasiRandom number generators and distributions. ; template<class Engine>; class ROOT::Math::QuasiRandom< Engine >User class for MathMore random numbers template on the Engine type. ; The API of this class followed that of the class ROOT::Math::Random It must be implemented using as Engine one of the derived classes of ROOT::Math::GSLQuasiRandomEngine, like ROOT::Math::GSLQrngSobol ; Definition at line 60 of file QuasiRandom.h. Public Member Functions;  QuasiRandom (const Engine &e, unsigned int dimension=1);  Create a QuasiRandom generator based on a provided generic engine. ;  ;  QuasiRandom (unsigned int dimension=1);  Create a QuasiRandom generator. ;  ;  ~QuasiRandom ();  Destructor: call Terminate() function of engine to free any allocated resource. ;  ; unsigned int EngineSize () const;  Return the size of the generator state. ;  ; std::string Name () const;  Return the name of the generator. ;  ; unsigned int NDim () const;  Return the dimension of the generator. ;  ; double Next ();  Generate next quasi random numbers point (1 - dimension) ;  ; bool Next (double *x);  Generate next quasi random numbers points. ;  ; double Rndm ();  Generate quasi random numbers between ]0,1[ 0 and 1 are excluded Function to be compatible with ROOT TRandom compatibility. ;  ; bool RndmArray (int n, double *array);  Generate an array of random numbers between ]0,1[ Function to preserve ROOT Trandom compatibility The array will be filled as x1,y1,z1,....x2,y2,z2,... ;  ; bool Skip (unsigned int n);  skip the next n number and jumb directly to the current state + n ;  ; std::string Type () const;  Re",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1QuasiRandom.html:111,Load,Loading,111,doc/master/classROOT_1_1Math_1_1QuasiRandom.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1QuasiRandom.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::Quaternion Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::Math::Quaternion Class ReferenceMath » Physics Vectors. ; Rotation class with the (3D) rotation represented by a unit quaternion (u, i, j, k). ; This is the optimal representation for multiplication of multiple rotations, and for computation of group-manifold-invariant distance between two rotations. See also ROOT::Math::AxisAngle, ROOT::Math::EulerAngles, and ROOT::Math::Rotation3D.; See alsoOverview of the physics vector library ; Definition at line 49 of file Quaternion.h. Public Types; typedef double Scalar;  ; typedef DisplacementVector3D< Cartesian3D< double >, DefaultCoordinateSystemTag > XYZVector;  Rotation operation on a cartesian vector. ;  . Public Member Functions;  Quaternion ();  Default constructor (identity rotation) ;  ; template<class OtherRotation > ; constexpr Quaternion (const OtherRotation &r);  Construct from another supported rotation type (see gv_detail::convert ) ;  ; template<class IT > ;  Quaternion (IT begin, IT end);  Construct given a pair of pointers or iterators defining the beginning and end of an array of four Scalars. ;  ;  Quaternion (Scalar u, Scalar i, Scalar j, Scalar k);  Construct from four Scalars representing the coefficients of u, i, j, k. ;  ; Scalar Distance (const Quaternion &q) const;  Distance between two rotations in Quaternion form Note: The rotation group is isomorphic to a 3-sphere with diametrically opposite points identified. ;  ; template<class IT > ; void GetComponents (IT begin) const;  Get the components into data specified by an iterator begin. ;  ; template<class IT > ; void GetComponents (IT begin, IT end) const;  Get the components into data specified by an iterator begin and another to the end of the desired data (4 past start). ;  ; void GetComponents (Scalar &",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1Quaternion.html:91,Load,Loading,91,doc/master/classROOT_1_1Math_1_1Quaternion.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Quaternion.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::RMinimizer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Attributes |; Private Attributes |; List of all members ; ROOT::Math::RMinimizer Class Reference. ; RMinimizer class. ; Minimizer class that uses the ROOT/R interface to pass functions and minimize them in R.; The class implements the ROOT::Math::Minimizer interface and can be instantiated using the ROOT plugin manager (plugin name is ""RMinimizer""). The various minimization algorithms (BFGS, Nelder-Mead, SANN, etc..) can be passed as an option. The default algorithm is BFGS.; The library for this and future R/ROOT classes is currently libRtools.so ; Definition at line 33 of file RMinimizer.h. Public Member Functions;  RMinimizer (Option_t *method);  Default constructor. ;  ;  ~RMinimizer () override;  Destructor. ;  ; double CovMatrix (unsigned int ivar, unsigned int jvar) const override;  return covariance matrices element for variables ivar,jvar if the variable is fixed the return value is zero The ordering of the variables is the same as in the parameter and errors vectors ;  ; const double * Errors () const override;  return errors at the minimum ;  ; bool GetCovMatrix (double *covMat) const override;  Fill the passed array with the covariance matrix elements if the variable is fixed or const the value is zero. ;  ; double HessMatrix (unsigned int i, unsigned int j) const;  Returns the ith jth component of the Hessian matrix. ;  ; bool Minimize () override;  Function to find the minimum. ;  ; unsigned int NCalls () const override;  Returns the number of function calls. ;  ; bool ProvidesError () const override;  minimizer provides error and error matrix ;  ;  Public Member Functions inherited from ROOT::Math::BasicMinimizer;  BasicMinimizer ();  Default constructor. ;  ;  ~BasicMinimizer () override;  Destructor. ;  ; bool FixVariable (unsigned int ivar) override;  fix an exist",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1RMinimizer.html:91,Load,Loading,91,doc/master/classROOT_1_1Math_1_1RMinimizer.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1RMinimizer.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::Random< Engine > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; ROOT::Math::Random< Engine > Class Template ReferenceMath » MathCore » Interface classes for Random number generation. ; template<class Engine>; class ROOT::Math::Random< Engine >Documentation for the Random class. ; Definition at line 43 of file Random.h. Public Types; typedef Engine::BaseType EngineBaseType;  ; typedef RandomFunctions< Engine, EngineBaseType > RndmFunctions;  . Public Member Functions;  Random ();  ;  Random (unsigned int seed);  ; double Beta (double a, double b);  Beta distribution. ;  ; unsigned int Binomial (unsigned int ntot, double prob);  discrete distributions ;  ; double BreitWigner (double mean=0., double gamma=1);  Breit Wigner distribution. ;  ; double ChiSquare (double nu);  chi-square ;  ; void Circle (double &x, double &y, double r=1);  generate random numbers in a 2D circle of radius 1 ;  ; unsigned int EngineSize () const;  Return the size of the generator state. ;  ; double Exp (double tau);  Exponential distribution. ;  ; double FDist (double nu1, double nu2);  F-distribution. ;  ; RandomFunctions< Engine, EngineBaseType > & Functions ();  ; double Gamma (double a, double b);  Gamma distribution. ;  ; double Gaus (double mean=0, double sigma=1);  ; uint64_t Integer ();  ; double Landau (double m=0, double s=1);  Landau distribution. ;  ; double Logistic (double a);  Logistic distribution. ;  ; double LogNormal (double zeta, double sigma);  Log-normal distribution. ;  ; std::vector< unsigned int > Multinomial (unsigned int ntot, const std::vector< double > &p);  Multinomial distribution. ;  ; unsigned int NegativeBinomial (double n, double prob);  Negative Binomial distribution First parameter is n, second is probability To be consistent with Rando",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1Random.html:106,Load,Loading,106,doc/master/classROOT_1_1Math_1_1Random.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Random.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::RandomFunctions< Engine, EngineBaseType > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; ROOT::Math::RandomFunctions< Engine, EngineBaseType > Class Template Reference. ; template<class Engine, class EngineBaseType>; class ROOT::Math::RandomFunctions< Engine, EngineBaseType >; Definition at line 140 of file RandomFunctions.h. Public Member Functions;  RandomFunctions (Engine &rng);  ;  ~RandomFunctions ();  destructor (no op) we do not maintain the engine) ;  ; double Beta (double, double);  ; int Binomial (int ntot, double prob);  Generate binomial numbers. ;  ; double BreitWigner (double mean, double gamma);  Return a number distributed following a BreitWigner function with mean and gamma. ;  ; double ChiSquare (double);  ; void Circle (double &x, double &y, double r);  Generates random vectors, uniformly distributed over a circle of given radius. ;  ; double Exp (double tau);  Returns an exponential deviate. ;  ; double FDist (double, double);  ; double Gamma (double, double);  methods which are only for GSL random generators ;  ; double Gaus (double mean, double sigma);  generate Gaussian number using default method ;  ; double GausACR (double mean, double sigma);  generate random numbers according to the Acceptance-Complement-Ratio method ;  ; double GausBM (double mean, double sigma);  generate Gaussian number using Box-Muller method ;  ; double Landau (double mu, double sigma);  Generate a random number following a Landau distribution with location parameter mu and scale parameter sigma: Landau( (x-mu)/sigma ) ;  ; double Logistic (double);  ; double LogNormal (double, double);  ; std::vector< unsigned int > MultiNomial (unsigned int, const std::vector< double > &);  ; unsigned int NegativeBinomial (double, double);  ; double operator() ();  non-virtual method",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1RandomFunctions.html:131,Load,Loading,131,doc/master/classROOT_1_1Math_1_1RandomFunctions.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1RandomFunctions.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::RandomFunctions< EngineType, ROOT::Math::GSLRandomEngine > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; List of all members ; ROOT::Math::RandomFunctions< EngineType, ROOT::Math::GSLRandomEngine > Class Template ReferenceMath » MathCore » Interface classes for Random number generation. ; template<class EngineType>; class ROOT::Math::RandomFunctions< EngineType, ROOT::Math::GSLRandomEngine >Specialized implementation of the Random functions based on the GSL library. ; These will work onlmy with a GSLRandomEngine type ; Definition at line 43 of file GSLRandomFunctions.h. Public Member Functions;  RandomFunctions ();  ;  RandomFunctions (EngineType &rng);  ; double Beta (double a, double b);  Beta distribution. ;  ; unsigned int Binomial (unsigned int ntot, double prob);  Binomial distribution. ;  ; double BreitWigner (double mean=0., double gamma=1);  Breit Wigner distribution. ;  ; double ChiSquare (double nu);  Chi square distribution. ;  ; void Circle (double &x, double &y, double r=1);  generate random numbers in a 2D circle of radious 1 ;  ; EngineType & Engine ();  ; double Exp (double tau);  Exponential distribution. ;  ; double FDist (double nu1, double nu2);  F distribution. ;  ; double Gamma (double a, double b);  Gamma distribution. ;  ; double Gaus (double mean=0, double sigma=1);  Gaussian distribution. ;  ; double GausBM (double mean=0, double sigma=1);  Gaussian distribution (Box-Muller method) ;  ; double GausR (double mean=0, double sigma=1);  Gaussian distribution (Ratio Method) ;  ; void Gaussian2D (double sigmaX, double sigmaY, double rho, double &x, double &y);  Bivariate Gaussian distribution with correlation. ;  ; void GaussianND (size_t n, const double *meanVec, const double *covMatrix, double *x, double *lmat=nullptr);  Multi-variate Gaussian distribution with correlation. ;  ; double GaussianTail (double a, double",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1RandomFunctions_3_01EngineType_00_01ROOT_1_1Math_1_1GSLRandomEngine_01_4.html:148,Load,Loading,148,doc/master/classROOT_1_1Math_1_1RandomFunctions_3_01EngineType_00_01ROOT_1_1Math_1_1GSLRandomEngine_01_4.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1RandomFunctions_3_01EngineType_00_01ROOT_1_1Math_1_1GSLRandomEngine_01_4.html,1,['Load'],['Loading']
Performance,. ROOT: ROOT::Math::RandomFunctionsImpl< EngineBaseType > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; List of all members ; ROOT::Math::RandomFunctionsImpl< EngineBaseType > Class Template Reference. ; template<class EngineBaseType>; class ROOT::Math::RandomFunctionsImpl< EngineBaseType >Definition of the generic implementation class for the RandomFunctions. ; Needs to have specialized implementations on the different type of engines ; Definition at line 58 of file RandomFunctions.h. Public Member Functions; void SetEngine (void *);  . #include <Math/RandomFunctions.h>; Member Function Documentation. ◆ SetEngine(). template<class EngineBaseType > . void ROOT::Math::RandomFunctionsImpl< EngineBaseType >::SetEngine ; (; void * ; ). inline . Definition at line 60 of file RandomFunctions.h. The documentation for this class was generated from the following file:; math/mathcore/inc/Math/RandomFunctions.h. ROOTMathRandomFunctionsImpl. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:23 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1RandomFunctionsImpl.html:127,Load,Loading,127,doc/master/classROOT_1_1Math_1_1RandomFunctionsImpl.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1RandomFunctionsImpl.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::RandomFunctionsImpl< TRandomEngine > Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; ROOT::Math::RandomFunctionsImpl< TRandomEngine > Class Reference. ; Implementation class for the RandomFunction for all the engined that derives from TRandomEngine class, which defines an interface which has TRandomEngine::Rndm() In this way we can have a common implementation for the RandomFunctions. ; Definition at line 70 of file RandomFunctions.h. Public Member Functions;  RandomFunctionsImpl ();  class constructor ;  ; int Binomial (int ntot, double prob);  Generate binomial numbers. ;  ; double BreitWigner (double mean, double gamma);  Return a number distributed following a BreitWigner function with mean and gamma. ;  ; void Circle (double &x, double &y, double r);  Generates random vectors, uniformly distributed over a circle of given radius. ;  ; double Exp (double tau);  Returns an exponential deviate. ;  ; double GausACR (double mean, double sigma);  generate random numbers according to the Acceptance-Complement-Ratio method ;  ; double GausBM (double mean, double sigma);  generate Gaussian number using Box-Muller method ;  ; double Landau (double mu, double sigma);  Generate a random number following a Landau distribution with location parameter mu and scale parameter sigma: Landau( (x-mu)/sigma ) ;  ; int Poisson (double mean);  Generates a random integer N according to a Poisson law. ;  ; double PoissonD (double mean);  Generates a random number according to a Poisson law. ;  ; void Rannor (double &a, double &b);  Generate numbers distributed following a gaussian with mean=0 and sigma=1. ;  ; void SetEngine (void *r);  ; void Sphere (double &x, double &y, double &z, double r);  Generates random vectors, uniformly distributed over the surface of a sphere of given radius. ;  ; doub",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1RandomFunctionsImpl_3_01TRandomEngine_01_4.html:117,Load,Loading,117,doc/master/classROOT_1_1Math_1_1RandomFunctionsImpl_3_01TRandomEngine_01_4.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1RandomFunctionsImpl_3_01TRandomEngine_01_4.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::RanluxppCompatEngineGslRanlxd< p > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Types |; Private Attributes |; List of all members ; ROOT::Math::RanluxppCompatEngineGslRanlxd< p > Class Template Referencefinal. ; template<int p>; class ROOT::Math::RanluxppCompatEngineGslRanlxd< p >Compatibility engine for gsl_rng_ranlxd* from the GNU Scientific Library. ; Definition at line 137 of file RanluxppEngine.h. Public Member Functions;  RanluxppCompatEngineGslRanlxd (uint64_t seed=1);  ;  ~RanluxppCompatEngineGslRanlxd () override;  ; uint64_t IntRndm ();  Generate a random integer value with 48 bits. ;  ; double operator() ();  Generate a floating point random number (non-virtual method) ;  ; double Rndm () override;  Generate a floating point random number with 48 bits of randomness. ;  ; void SetSeed (uint64_t seed);  Initialize and seed the state of the generator. ;  ; void Skip (uint64_t n);  Skip n random numbers without generating them. ;  ;  Public Member Functions inherited from ROOT::Math::TRandomEngine; virtual ~TRandomEngine ();  . Static Public Member Functions; static const char * Name ();  Get name of the generator. ;  . Private Types; using ImplType = RanluxppEngineImpl< 48, p >;  . Private Attributes; std::unique_ptr< ImplType > fImpl;  . #include <Math/RanluxppEngine.h>. Inheritance diagram for ROOT::Math::RanluxppCompatEngineGslRanlxd< p >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ ImplType. template<int p> . using ROOT::Math::RanluxppCompatEngineGslRanlxd< p >::ImplType = RanluxppEngineImpl<48, p>. private . Definition at line 140 of file RanluxppEngine.h. Constructor & Destructor Documentation. ◆ RanluxppCompatEngineGslRanlxd(). template<int p> . ROOT::Math::RanluxppCompatEngineGslRanlxd< p >::Ranl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1RanluxppCompatEngineGslRanlxd.html:124,Load,Loading,124,doc/master/classROOT_1_1Math_1_1RanluxppCompatEngineGslRanlxd.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1RanluxppCompatEngineGslRanlxd.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::RanluxppCompatEngineGslRanlxs< p > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Types |; Private Attributes |; List of all members ; ROOT::Math::RanluxppCompatEngineGslRanlxs< p > Class Template Referencefinal. ; template<int p>; class ROOT::Math::RanluxppCompatEngineGslRanlxs< p >Compatibility engine for gsl_rng_ranlxs* from the GNU Scientific Library. ; Definition at line 100 of file RanluxppEngine.h. Public Member Functions;  RanluxppCompatEngineGslRanlxs (uint64_t seed=1);  ;  ~RanluxppCompatEngineGslRanlxs () override;  ; uint64_t IntRndm ();  Generate a random integer value with 24 bits. ;  ; double operator() ();  Generate a floating point random number (non-virtual method) ;  ; double Rndm () override;  Generate a floating point random number with 24 bits of randomness. ;  ; void SetSeed (uint64_t seed);  Initialize and seed the state of the generator. ;  ; void Skip (uint64_t n);  Skip n random numbers without generating them. ;  ;  Public Member Functions inherited from ROOT::Math::TRandomEngine; virtual ~TRandomEngine ();  . Static Public Member Functions; static const char * Name ();  Get name of the generator. ;  . Private Types; using ImplType = RanluxppEngineImpl< 24, p >;  . Private Attributes; std::unique_ptr< ImplType > fImpl;  . #include <Math/RanluxppEngine.h>. Inheritance diagram for ROOT::Math::RanluxppCompatEngineGslRanlxs< p >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ ImplType. template<int p> . using ROOT::Math::RanluxppCompatEngineGslRanlxs< p >::ImplType = RanluxppEngineImpl<24, p>. private . Definition at line 103 of file RanluxppEngine.h. Constructor & Destructor Documentation. ◆ RanluxppCompatEngineGslRanlxs(). template<int p> . ROOT::Math::RanluxppCompatEngineGslRanlxs< p >::Ranl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1RanluxppCompatEngineGslRanlxs.html:124,Load,Loading,124,doc/master/classROOT_1_1Math_1_1RanluxppCompatEngineGslRanlxs.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1RanluxppCompatEngineGslRanlxs.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::RanluxppCompatEngineJames< p > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Types |; Private Attributes |; List of all members ; ROOT::Math::RanluxppCompatEngineJames< p > Class Template Referencefinal. ; template<int p>; class ROOT::Math::RanluxppCompatEngineJames< p >; Definition at line 61 of file RanluxppEngine.h. Public Member Functions;  RanluxppCompatEngineJames (uint64_t seed=314159265);  ;  ~RanluxppCompatEngineJames () override;  ; uint64_t IntRndm ();  Generate a random integer value with 24 bits. ;  ; double operator() ();  Generate a floating point random number (non-virtual method) ;  ; double Rndm () override;  Generate a floating point random number with 24 bits of randomness. ;  ; void SetSeed (uint64_t seed);  Initialize and seed the state of the generator. ;  ; void Skip (uint64_t n);  Skip n random numbers without generating them. ;  ;  Public Member Functions inherited from ROOT::Math::TRandomEngine; virtual ~TRandomEngine ();  . Static Public Member Functions; static const char * Name ();  Get name of the generator. ;  . Private Types; using ImplType = RanluxppEngineImpl< 24, p >;  . Private Attributes; std::unique_ptr< ImplType > fImpl;  . #include <Math/RanluxppEngine.h>. Inheritance diagram for ROOT::Math::RanluxppCompatEngineJames< p >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ ImplType. template<int p> . using ROOT::Math::RanluxppCompatEngineJames< p >::ImplType = RanluxppEngineImpl<24, p>. private . Definition at line 64 of file RanluxppEngine.h. Constructor & Destructor Documentation. ◆ RanluxppCompatEngineJames(). template<int p> . ROOT::Math::RanluxppCompatEngineJames< p >::RanluxppCompatEngineJames ; (; uint64_t ; seed = 314159265). Definition at line 445 of file RanluxppEngineIm",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1RanluxppCompatEngineJames.html:120,Load,Loading,120,doc/master/classROOT_1_1Math_1_1RanluxppCompatEngineJames.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1RanluxppCompatEngineJames.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::RanluxppCompatEngineLuescherImpl< w, p > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::Math::RanluxppCompatEngineLuescherImpl< w, p > Class Template Reference. ; template<int w, int p>; class ROOT::Math::RanluxppCompatEngineLuescherImpl< w, p >; Definition at line 575 of file RanluxppEngineImpl.cxx. Public Member Functions; uint64_t NextRandomBits ();  Return the next random bits, generate a new block if necessary. ;  ; double NextRandomFloat ();  Return a floating point number, converted from the next random bits. ;  ; void SetSeed (uint32_t s, bool ranlxd);  Initialize and seed the state of the generator as in Lüscher's ranlxs. ;  ; void Skip (uint64_t n);  Skip n random numbers without generating them. ;  . Private Attributes; int fNextState = 0;  The index of the next state. ;  ; RanluxppEngineImpl< w, p > fStates [4];  The states of this generator. ;  . Member Function Documentation. ◆ NextRandomBits(). template<int w, int p> . uint64_t ROOT::Math::RanluxppCompatEngineLuescherImpl< w, p >::NextRandomBits ; (; ). inline . Return the next random bits, generate a new block if necessary. ; Definition at line 583 of file RanluxppEngineImpl.cxx. ◆ NextRandomFloat(). template<int w, int p> . double ROOT::Math::RanluxppCompatEngineLuescherImpl< w, p >::NextRandomFloat ; (; ). inline . Return a floating point number, converted from the next random bits. ; Definition at line 591 of file RanluxppEngineImpl.cxx. ◆ SetSeed(). template<int w, int p> . void ROOT::Math::RanluxppCompatEngineLuescherImpl< w, p >::SetSeed ; (; uint32_t ; s, . bool ; ranlxd . ). inline . Initialize and seed the state of the generator as in Lüscher's ranlxs. ; Definition at line 599 of file RanluxppEngineImpl.cxx. ◆ Skip(). template<int w, int p> . void ROOT::Math::RanluxppCompatEngineLuescherImpl< w, p >::Skip ; (; uint6",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1RanluxppCompatEngineLuescherImpl.html:130,Load,Loading,130,doc/master/classROOT_1_1Math_1_1RanluxppCompatEngineLuescherImpl.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1RanluxppCompatEngineLuescherImpl.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::RanluxppCompatEngineLuescherRanlxd< p > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Types |; Private Attributes |; List of all members ; ROOT::Math::RanluxppCompatEngineLuescherRanlxd< p > Class Template Referencefinal. ; template<int p>; class ROOT::Math::RanluxppCompatEngineLuescherRanlxd< p >Compatibility engine for Lüscher's ranlxd implementation written in C. ; Definition at line 212 of file RanluxppEngine.h. Public Member Functions;  RanluxppCompatEngineLuescherRanlxd (uint64_t seed=314159265);  ;  ~RanluxppCompatEngineLuescherRanlxd () override;  ; uint64_t IntRndm ();  Generate a random integer value with 48 bits. ;  ; double operator() ();  Generate a floating point random number (non-virtual method) ;  ; double Rndm () override;  Generate a floating point random number with 48 bits of randomness. ;  ; void SetSeed (uint64_t seed);  Initialize and seed the state of the generator. ;  ; void Skip (uint64_t n);  Skip n random numbers without generating them. ;  ;  Public Member Functions inherited from ROOT::Math::TRandomEngine; virtual ~TRandomEngine ();  . Static Public Member Functions; static const char * Name ();  Get name of the generator. ;  . Private Types; using ImplType = RanluxppCompatEngineLuescherImpl< 48, p >;  . Private Attributes; std::unique_ptr< ImplType > fImpl;  . #include <Math/RanluxppEngine.h>. Inheritance diagram for ROOT::Math::RanluxppCompatEngineLuescherRanlxd< p >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ ImplType. template<int p> . using ROOT::Math::RanluxppCompatEngineLuescherRanlxd< p >::ImplType = RanluxppCompatEngineLuescherImpl<48, p>. private . Definition at line 215 of file RanluxppEngine.h. Constructor & Destructor Documentation. ◆ RanluxppCompatEngineLuescherRanlxd(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1RanluxppCompatEngineLuescherRanlxd.html:129,Load,Loading,129,doc/master/classROOT_1_1Math_1_1RanluxppCompatEngineLuescherRanlxd.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1RanluxppCompatEngineLuescherRanlxd.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::RanluxppCompatEngineLuescherRanlxs< p > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Types |; Private Attributes |; List of all members ; ROOT::Math::RanluxppCompatEngineLuescherRanlxs< p > Class Template Referencefinal. ; template<int p>; class ROOT::Math::RanluxppCompatEngineLuescherRanlxs< p >Compatibility engine for Lüscher's ranlxs implementation written in C. ; Definition at line 175 of file RanluxppEngine.h. Public Member Functions;  RanluxppCompatEngineLuescherRanlxs (uint64_t seed=314159265);  ;  ~RanluxppCompatEngineLuescherRanlxs () override;  ; uint64_t IntRndm ();  Generate a random integer value with 24 bits. ;  ; double operator() ();  Generate a floating point random number (non-virtual method) ;  ; double Rndm () override;  Generate a floating point random number with 24 bits of randomness. ;  ; void SetSeed (uint64_t seed);  Initialize and seed the state of the generator. ;  ; void Skip (uint64_t n);  Skip n random numbers without generating them. ;  ;  Public Member Functions inherited from ROOT::Math::TRandomEngine; virtual ~TRandomEngine ();  . Static Public Member Functions; static const char * Name ();  Get name of the generator. ;  . Private Types; using ImplType = RanluxppCompatEngineLuescherImpl< 24, p >;  . Private Attributes; std::unique_ptr< ImplType > fImpl;  . #include <Math/RanluxppEngine.h>. Inheritance diagram for ROOT::Math::RanluxppCompatEngineLuescherRanlxs< p >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ ImplType. template<int p> . using ROOT::Math::RanluxppCompatEngineLuescherRanlxs< p >::ImplType = RanluxppCompatEngineLuescherImpl<24, p>. private . Definition at line 178 of file RanluxppEngine.h. Constructor & Destructor Documentation. ◆ RanluxppCompatEngineLuescherRanlxs(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1RanluxppCompatEngineLuescherRanlxs.html:129,Load,Loading,129,doc/master/classROOT_1_1Math_1_1RanluxppCompatEngineLuescherRanlxs.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1RanluxppCompatEngineLuescherRanlxs.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::RanluxppCompatEngineStdRanlux24 Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Types |; Private Attributes |; List of all members ; ROOT::Math::RanluxppCompatEngineStdRanlux24 Class Referencefinal. ; Compatibility engine for std::ranlux24 from the C++ standard. ; Definition at line 245 of file RanluxppEngine.h. Public Member Functions;  RanluxppCompatEngineStdRanlux24 (uint64_t seed=19780503);  ;  ~RanluxppCompatEngineStdRanlux24 () override;  ; uint64_t IntRndm ();  Generate a random integer value with 24 bits. ;  ; double operator() ();  Generate a floating point random number (non-virtual method) ;  ; double Rndm () override;  Generate a floating point random number with 24 bits of randomness. ;  ; void SetSeed (uint64_t seed);  Initialize and seed the state of the generator. ;  ; void Skip (uint64_t n);  Skip n random numbers without generating them. ;  ;  Public Member Functions inherited from ROOT::Math::TRandomEngine; virtual ~TRandomEngine ();  . Static Public Member Functions; static const char * Name ();  Get name of the generator. ;  . Private Types; using ImplType = RanluxppEngineImpl< 24, 223, 23 >;  . Private Attributes; std::unique_ptr< ImplType > fImpl;  . #include <Math/RanluxppEngine.h>. Inheritance diagram for ROOT::Math::RanluxppCompatEngineStdRanlux24:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ ImplType. using ROOT::Math::RanluxppCompatEngineStdRanlux24::ImplType = RanluxppEngineImpl<24, 223, 23>. private . Definition at line 248 of file RanluxppEngine.h. Constructor & Destructor Documentation. ◆ RanluxppCompatEngineStdRanlux24(). ROOT::Math::RanluxppCompatEngineStdRanlux24::RanluxppCompatEngineStdRanlux24 ; (; uint64_t ; seed = 19780503). Definition at line 749 of file RanluxppEngineImpl.cxx. ◆ ~Ranlu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1RanluxppCompatEngineStdRanlux24.html:112,Load,Loading,112,doc/master/classROOT_1_1Math_1_1RanluxppCompatEngineStdRanlux24.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1RanluxppCompatEngineStdRanlux24.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::RanluxppCompatEngineStdRanlux48 Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Types |; Private Attributes |; List of all members ; ROOT::Math::RanluxppCompatEngineStdRanlux48 Class Referencefinal. ; Compatibility engine for std::ranlux48 from the C++ standard. ; Definition at line 273 of file RanluxppEngine.h. Public Member Functions;  RanluxppCompatEngineStdRanlux48 (uint64_t seed=19780503);  ;  ~RanluxppCompatEngineStdRanlux48 () override;  ; uint64_t IntRndm ();  Generate a random integer value with 48 bits. ;  ; double operator() ();  Generate a floating point random number (non-virtual method) ;  ; double Rndm () override;  Generate a floating point random number with 48 bits of randomness. ;  ; void SetSeed (uint64_t seed);  Initialize and seed the state of the generator. ;  ; void Skip (uint64_t n);  Skip n random numbers without generating them. ;  ;  Public Member Functions inherited from ROOT::Math::TRandomEngine; virtual ~TRandomEngine ();  . Static Public Member Functions; static const char * Name ();  Get name of the generator. ;  . Private Types; using ImplType = RanluxppEngineImpl< 48, 2 *389, 11 >;  . Private Attributes; std::unique_ptr< ImplType > fImpl;  . #include <Math/RanluxppEngine.h>. Inheritance diagram for ROOT::Math::RanluxppCompatEngineStdRanlux48:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ ImplType. using ROOT::Math::RanluxppCompatEngineStdRanlux48::ImplType = RanluxppEngineImpl<48, 2 * 389, 11>. private . Definition at line 276 of file RanluxppEngine.h. Constructor & Destructor Documentation. ◆ RanluxppCompatEngineStdRanlux48(). ROOT::Math::RanluxppCompatEngineStdRanlux48::RanluxppCompatEngineStdRanlux48 ; (; uint64_t ; seed = 19780503). Definition at line 782 of file RanluxppEngineImpl.cxx. ◆",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1RanluxppCompatEngineStdRanlux48.html:112,Load,Loading,112,doc/master/classROOT_1_1Math_1_1RanluxppCompatEngineStdRanlux48.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1RanluxppCompatEngineStdRanlux48.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::RanluxppEngine< p > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Types |; Private Attributes |; List of all members ; ROOT::Math::RanluxppEngine< p > Class Template Referencefinal. ; template<int p>; class ROOT::Math::RanluxppEngine< p >Implementation of the RANLUX++ generator. ; RANLUX++ is an LCG equivalent of RANLUX using 576 bit numbers.; The idea of the generator (such as the initialization method) and the algorithm for the modulo operation are described in A. Sibidanov, A revision of the subtract-with-borrow random numbergenerators, Computer Physics Communications*, 221(2017), 299-303, preprint https://arxiv.org/pdf/1705.03123.pdf; The code is loosely based on the Assembly implementation by A. Sibidanov available at https://github.com/sibidanov/ranluxpp/.; Compared to the original generator, this implementation contains a fix to ensure that the modulo operation of the LCG always returns the smallest value congruent to the modulus (based on notes by M. Lüscher). Also, the generator converts the LCG state back to RANLUX numbers (implementation based on notes by M. Lüscher). This avoids a bias in the generated numbers because the upper bits of the LCG state, that is smaller than the modulus \( m = 2^{576} - 2^{240} + 1 \) (not a power of 2!), have a higher probability of being 0 than 1. And finally, this implementation draws 48 random bits for each generated floating point number (instead of 52 bits as in the original generator) to maintain the theoretical properties from understanding the original transition function of RANLUX as a chaotic dynamical system. ; Definition at line 27 of file RanluxppEngine.h. Public Member Functions;  RanluxppEngine (uint64_t seed=314159265);  ;  ~RanluxppEngine () override;  ; uint64_t IntRndm ();  Generate a random integer value with 48 bits. ;  ; double opera",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1RanluxppEngine.html:109,Load,Loading,109,doc/master/classROOT_1_1Math_1_1RanluxppEngine.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1RanluxppEngine.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::RanluxppEngineImpl< w, p, u > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; Static Private Attributes |; Friends |; List of all members ; ROOT::Math::RanluxppEngineImpl< w, p, u > Class Template Reference. ; template<int w, int p, int u>; class ROOT::Math::RanluxppEngineImpl< w, p, u >; Definition at line 149 of file RanluxppEngineImpl.cxx. Public Member Functions; uint64_t NextRandomBits ();  Return the next random bits, generate a new block if necessary. ;  ; double NextRandomFloat ();  Return a floating point number, converted from the next random bits. ;  ; void SetSeedGsl (uint32_t s, bool ranlxd);  Initialize and seed the state of the generator as in gsl_rng_ranlx*. ;  ; void SetSeedJames (uint64_t s);  Initialize and seed the state of the generator as in James' implementation. ;  ; void SetSeedSibidanov (uint64_t s);  Initialize and seed the state of the generator as proposed by Sibidanov. ;  ; void SetSeedStd24 (uint64_t s);  Initialize and seed the state of the generator as described by the C++ standard. ;  ; void SetSeedStd48 (uint64_t s);  Initialize and seed the state of the generator as described by the C++ standard. ;  ; void Skip (uint64_t n);  Skip n random numbers without generating them. ;  . Private Member Functions; void Advance ();  Produce next block of random bits. ;  ; void Advance (const uint64_t *a);  Advance with given multiplier. ;  ; void Skip24 ();  Skip 24 RANLUX numbers. ;  . Private Attributes; unsigned fCarry;  Carry bit of the RANLUX state. ;  ; int fPosition = 0;  Current position in bits. ;  ; uint64_t fState [9];  RANLUX state of the generator. ;  . Static Private Attributes; static constexpr const uint64_t * kA = RanluxppData<p>::kA;  ; static constexpr int kMaxPos = (u == 0) ? 9 * 64 : u * w;  . Friends; class RanluxppCompatEngineLuescherImpl< w, p >",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1RanluxppEngineImpl.html:119,Load,Loading,119,doc/master/classROOT_1_1Math_1_1RanluxppEngineImpl.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1RanluxppEngineImpl.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::RetrieveMatrix< T, D1, D2, D3, D4, MatRepSym< T, D1 >, MatRepStd< T, D3, D4 > > Struct Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Static Public Member Functions |; List of all members ; ROOT::Math::RetrieveMatrix< T, D1, D2, D3, D4, MatRepSym< T, D1 >, MatRepStd< T, D3, D4 > > Struct Template Reference. ; template<class T, unsigned int D1, unsigned int D2, unsigned int D3, unsigned int D4>; struct ROOT::Math::RetrieveMatrix< T, D1, D2, D3, D4, MatRepSym< T, D1 >, MatRepStd< T, D3, D4 > >; Definition at line 481 of file HelperOps.h. Static Public Member Functions; static void Evaluate (SMatrix< T, D1, D2, MatRepSym< T, D1 > > &, const SMatrix< T, D3, D4, MatRepStd< T, D3, D4 > > &, unsigned int, unsigned int);  . #include <Math/HelperOps.h>; Member Function Documentation. ◆ Evaluate(). template<class T , unsigned int D1, unsigned int D2, unsigned int D3, unsigned int D4> . static void ROOT::Math::RetrieveMatrix< T, D1, D2, D3, D4, MatRepSym< T, D1 >, MatRepStd< T, D3, D4 > >::Evaluate ; (; SMatrix< T, D1, D2, MatRepSym< T, D1 > > & ; , . const SMatrix< T, D3, D4, MatRepStd< T, D3, D4 > > & ; , . unsigned int ; , . unsigned int ;  . ). inlinestatic . Definition at line 482 of file HelperOps.h. The documentation for this struct was generated from the following file:; math/smatrix/inc/Math/HelperOps.h. ROOTMathRetrieveMatrix< T, D1, D2, D3, D4, MatRepSym< T, D1 >, MatRepStd< T, D3, D4 > >. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:23 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structROOT_1_1Math_1_1RetrieveMatrix_3_01T_00_01D1_00_01D2_00_01D3_00_01D4_00_01MatRepSym_3_01T_e30ff0328f3a8a31d82ee857be0ae304.html:170,Load,Loading,170,doc/master/structROOT_1_1Math_1_1RetrieveMatrix_3_01T_00_01D1_00_01D2_00_01D3_00_01D4_00_01MatRepSym_3_01T_e30ff0328f3a8a31d82ee857be0ae304.html,https://root.cern,https://root.cern/doc/master/structROOT_1_1Math_1_1RetrieveMatrix_3_01T_00_01D1_00_01D2_00_01D3_00_01D4_00_01MatRepSym_3_01T_e30ff0328f3a8a31d82ee857be0ae304.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::RetrieveMatrix< T, D1, D2, D3, D4, MatRepSym< T, D1 >, MatRepSym< T, D3 > > Struct Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Static Public Member Functions |; List of all members ; ROOT::Math::RetrieveMatrix< T, D1, D2, D3, D4, MatRepSym< T, D1 >, MatRepSym< T, D3 > > Struct Template Reference. ; template<class T, unsigned int D1, unsigned int D2, unsigned int D3, unsigned int D4>; struct ROOT::Math::RetrieveMatrix< T, D1, D2, D3, D4, MatRepSym< T, D1 >, MatRepSym< T, D3 > >; Definition at line 493 of file HelperOps.h. Static Public Member Functions; static void Evaluate (SMatrix< T, D1, D2, MatRepSym< T, D1 > > &lhs, const SMatrix< T, D3, D4, MatRepSym< T, D3 > > &rhs, unsigned int row, unsigned int col);  . #include <Math/HelperOps.h>; Member Function Documentation. ◆ Evaluate(). template<class T , unsigned int D1, unsigned int D2, unsigned int D3, unsigned int D4> . static void ROOT::Math::RetrieveMatrix< T, D1, D2, D3, D4, MatRepSym< T, D1 >, MatRepSym< T, D3 > >::Evaluate ; (; SMatrix< T, D1, D2, MatRepSym< T, D1 > > & ; lhs, . const SMatrix< T, D3, D4, MatRepSym< T, D3 > > & ; rhs, . unsigned int ; row, . unsigned int ; col . ). inlinestatic . Definition at line 494 of file HelperOps.h. The documentation for this struct was generated from the following file:; math/smatrix/inc/Math/HelperOps.h. ROOTMathRetrieveMatrix< T, D1, D2, D3, D4, MatRepSym< T, D1 >, MatRepSym< T, D3 > >. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:23 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structROOT_1_1Math_1_1RetrieveMatrix_3_01T_00_01D1_00_01D2_00_01D3_00_01D4_00_01MatRepSym_3_01T_4ccba38a48d60cbc2ebb58dc0ce640f3.html:166,Load,Loading,166,doc/master/structROOT_1_1Math_1_1RetrieveMatrix_3_01T_00_01D1_00_01D2_00_01D3_00_01D4_00_01MatRepSym_3_01T_4ccba38a48d60cbc2ebb58dc0ce640f3.html,https://root.cern,https://root.cern/doc/master/structROOT_1_1Math_1_1RetrieveMatrix_3_01T_00_01D1_00_01D2_00_01D3_00_01D4_00_01MatRepSym_3_01T_4ccba38a48d60cbc2ebb58dc0ce640f3.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::RetrieveMatrix< T, D1, D2, D3, D4, R1, R2 > Struct Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Static Public Member Functions |; List of all members ; ROOT::Math::RetrieveMatrix< T, D1, D2, D3, D4, R1, R2 > Struct Template Reference. ; template<class T, unsigned int D1, unsigned int D2, unsigned int D3, unsigned int D4, class R1, class R2>; struct ROOT::Math::RetrieveMatrix< T, D1, D2, D3, D4, R1, R2 >Structure for getting sub matrices We have different cases according to the matrix representations. ; Definition at line 461 of file HelperOps.h. Static Public Member Functions; static void Evaluate (SMatrix< T, D1, D2, R1 > &lhs, const SMatrix< T, D3, D4, R2 > &rhs, unsigned int row, unsigned int col);  . #include <Math/HelperOps.h>; Member Function Documentation. ◆ Evaluate(). template<class T , unsigned int D1, unsigned int D2, unsigned int D3, unsigned int D4, class R1 , class R2 > . static void ROOT::Math::RetrieveMatrix< T, D1, D2, D3, D4, R1, R2 >::Evaluate ; (; SMatrix< T, D1, D2, R1 > & ; lhs, . const SMatrix< T, D3, D4, R2 > & ; rhs, . unsigned int ; row, . unsigned int ; col . ). inlinestatic . Definition at line 463 of file HelperOps.h. The documentation for this struct was generated from the following file:; math/smatrix/inc/Math/HelperOps.h. ROOTMathRetrieveMatrix. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:23 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structROOT_1_1Math_1_1RetrieveMatrix.html:134,Load,Loading,134,doc/master/structROOT_1_1Math_1_1RetrieveMatrix.html,https://root.cern,https://root.cern/doc/master/structROOT_1_1Math_1_1RetrieveMatrix.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::RichardsonDerivator Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Attributes |; List of all members ; ROOT::Math::RichardsonDerivator Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Differentiation. ; User class for calculating the derivatives of a function. ; It can calculate first (method Derivative1), second (method Derivative2) and third (method Derivative3) of a function.; It uses the Richardson extrapolation method for function derivation in a given interval. The method use 2 derivative estimates (one computed with step h and one computed with step h/2) to compute a third, more accurate estimation. It is equivalent to the 5-point method, which can be obtained with a Taylor expansion. A step size should be given, depending on x and f(x). An optimal step size value minimizes the truncation error of the expansion and the rounding error in evaluating x+h and f(x+h). A too small h will yield a too large rounding error while a too large h will give a large truncation error in the derivative approximation. A good discussion can be found in discussed in Chapter 5.7 of Numerical Recipes in C. By default a value of 0.001 is uses, acceptable in many cases.; This class is implemented using code previously in TF1::Derivate{,2,3}(). Now TF1 uses this class. ; Definition at line 55 of file RichardsonDerivator.h. Public Member Functions;  RichardsonDerivator (const RichardsonDerivator &rhs);  Copy constructor. ;  ;  RichardsonDerivator (const ROOT::Math::IGenFunction &f, double h=0.001, bool copyFunc=false);  Construct from function and step size. ;  ;  RichardsonDerivator (double h=0.001);  Default Constructor. ;  ;  ~RichardsonDerivator ();  Destructor: Removes function if needed. ;  ; double Derivative1 (const IGenFunction &f, double x, double h);  First Derivative calculation passing function object and step",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1RichardsonDerivator.html:100,Load,Loading,100,doc/master/classROOT_1_1Math_1_1RichardsonDerivator.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1RichardsonDerivator.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::RootFinder Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::Math::RootFinder Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » One-dimensional Root-Finding. ; User Class to find the Root of one dimensional functions. ; The GSL Methods are implemented in MathMore and they are loaded automatically via the plug-in manager; The possible types of Root-finding algorithms are: . Root Bracketing Algorithms which do not require function derivatives . RootFinder::kBRENT (default method implemented in MathCore) . RootFinder::kGSL_BISECTION . RootFinder::kGSL_FALSE_POS . RootFinder::kGSL_BRENT . Root Finding Algorithms using Derivatives . RootFinder::kGSL_NEWTON . RootFinder::kGSL_SECANT . RootFinder::kGSL_STEFFENSON . This class does not cupport copying ; Definition at line 73 of file RootFinder.h. Public Types; enum  EType { ;   kBRENT; , kGSL_BISECTION; , kGSL_FALSE_POS; , kGSL_BRENT; , ;   kGSL_NEWTON; , kGSL_SECANT; , kGSL_STEFFENSON. };  . Public Member Functions;  RootFinder (const RootFinder &)=delete;  ;  RootFinder (RootFinder &&)=delete;  ;  RootFinder (RootFinder::EType type=RootFinder::kBRENT);  Construct a Root-Finder algorithm. ;  ; virtual ~RootFinder ();  ; int Iterate ();  Perform a single iteration and return the Status. ;  ; int Iterations () const;  Return the number of iteration performed to find the Root. ;  ; const char * Name () const;  Return the current and latest estimate of the lower value of the Root-finding interval (for bracketing algorithms) ;  ; RootFinder & operator= (const RootFinder &rhs)=delete;  ; RootFinder & operator= (RootFinder &&rhs)=delete;  ; double Root () const;  Return the current and latest estimate of the Root. ;  ; bool SetFunction (const IGenFunction &f, double xlow, double xup);  Provide to the solver the function and th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1RootFinder.html:91,Load,Loading,91,doc/master/classROOT_1_1Math_1_1RootFinder.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1RootFinder.html,2,"['Load', 'load']","['Loading', 'loaded']"
Performance,". ROOT: ROOT::Math::Roots Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes ; ROOT::Math::Roots Namespace Reference. Root-Finding Algorithms. ; More... Classes; class  Bisection;  Roots::Bisection Bisection algorithm, simplest algorithm for bracketing the roots of a function, but slowest one. More...;  ; class  Brent;  Brent-Dekker algorithm which combines an interpolation strategy with the bisection algorithm See the GSL manual for more information. More...;  ; class  FalsePos;  False Position algorithm based on linear interpolation. More...;  ; class  Newton;  a Newton algorithm, which computes the derivative at each iteration See the GSL manual for more information More...;  ; class  Secant;  Secant algorithm, simplified version of Newton method, which does not require the derivative at every step. More...;  ; class  Steffenson;  Steffenson method, providing the fastes convergence. More...;  . Detailed Description; Root-Finding Algorithms. . ROOTMathRoots. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:25 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1Roots.html:90,Load,Loading,90,doc/master/namespaceROOT_1_1Math_1_1Roots.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1Roots.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::Rotation3D Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::Math::Rotation3D Class ReferenceMath » Physics Vectors. ; Rotation class with the (3D) rotation represented by a 3x3 orthogonal matrix. ; This is the optimal representation for application to vectors. See also ROOT::Math::AxisAngle, ROOT::Math::EulerAngles, and ROOT::Math::Quaternion for classes which have conversion operators to Rotation3D.; All Rotations types (not only Rotation3D) can be applied to all 3D Vector classes (like ROOT::Math::DisplacementVector3D and ROOT::Math::PositionVector3D) and also to the 4D Vectors (ROOT::Math::LorentzVector classes), acting on the 3D components. A rotation operation is applied by using the operator() or the operator *. With the operator * is possible also to combine rotations. Note that the operator is NOT commutative, the order how the rotations are applied is relevant.; See alsoOverview of the physics vector library ; Definition at line 67 of file Rotation3D.h. Public Types; enum  ERotation3DMatrixIndex { ;   kXX = 0; , kXY = 1; , kXZ = 2; , kYX = 3; , ;   kYY = 4; , kYZ = 5; , kZX = 6; , kZY = 7; , ;   kZZ = 8. };  ; typedef double Scalar;  . Public Member Functions;  Rotation3D ();  Default constructor (identity rotation) ;  ;  Rotation3D (AxisAngle const &a);  Construct from an AxisAngle. ;  ; template<class ForeignMatrix > ; constexpr Rotation3D (const ForeignMatrix &m);  Construct from a linear algebra matrix of size at least 3x3, which must support operator()(i,j) to obtain elements (0,0) thru (2,2). ;  ; template<class ForeignVector > ;  Rotation3D (const ForeignVector &v1, const ForeignVector &v2, const ForeignVector &v3);  Construct from three orthonormal vectors (which must have methods x(), y() and z()) which will be used as the columns of the rotation matrix. ;  ;  Rotatio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1Rotation3D.html:91,Load,Loading,91,doc/master/classROOT_1_1Math_1_1Rotation3D.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Rotation3D.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::RotationX Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::Math::RotationX Class ReferenceMath » Physics Vectors. ; Rotation class representing a 3D rotation about the X axis by the angle of rotation. ; For efficiency reason, in addition to the angle, the sine and cosine of the angle are held; See alsoOverview of the physics vector library ; Definition at line 45 of file RotationX.h. Public Types; typedef double Scalar;  . Public Member Functions;  RotationX ();  Default constructor (identity rotation) ;  ;  RotationX (Scalar angle);  Construct from an angle. ;  ; Scalar Angle () const;  Angle of rotation. ;  ; Scalar CosAngle () const;  ; void GetAngle (Scalar &angle) const;  Get the angle. ;  ; void GetComponents (Scalar &angle) const;  ; RotationX Inverse () const;  Return inverse of a rotation. ;  ; void Invert ();  Invert a rotation in place. ;  ; bool operator!= (const RotationX &rhs) const;  ; template<class CoordSystem , class U > ; DisplacementVector3D< CoordSystem, U > operator() (const DisplacementVector3D< CoordSystem, U > &v) const;  Rotation operation on a cartesian vector. ;  ; template<class ForeignVector > ; ForeignVector operator() (const ForeignVector &v) const;  Rotation operation on an arbitrary vector v. ;  ; template<class CoordSystem > ; LorentzVector< CoordSystem > operator() (const LorentzVector< CoordSystem > &v) const;  Rotation operation on a Lorentz vector in any 4D coordinate system. ;  ; template<class CoordSystem , class U > ; PositionVector3D< CoordSystem, U > operator() (const PositionVector3D< CoordSystem, U > &v) const;  Rotation operation on a position vector in any coordinate system. ;  ; template<class AVector > ; AVector operator* (const AVector &v) const;  Overload operator * for rotation on a vector. ;  ; RotationX operator* (const RotationX &",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1RotationX.html:90,Load,Loading,90,doc/master/classROOT_1_1Math_1_1RotationX.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1RotationX.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::RotationY Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::Math::RotationY Class ReferenceMath » Physics Vectors. ; Rotation class representing a 3D rotation about the Y axis by the angle of rotation. ; For efficiency reason, in addition to the angle, the sine and cosine of the angle are held; See alsoOverview of the physics vector library ; Definition at line 45 of file RotationY.h. Public Types; typedef double Scalar;  . Public Member Functions;  RotationY ();  Default constructor (identity rotation) ;  ;  RotationY (Scalar angle);  Construct from an angle. ;  ; Scalar Angle () const;  Angle of rotation. ;  ; Scalar CosAngle () const;  ; void GetAngle (Scalar &angle) const;  Get the angle. ;  ; void GetComponents (Scalar &angle) const;  ; RotationY Inverse () const;  Return inverse of a rotation. ;  ; void Invert ();  Invert a rotation in place. ;  ; bool operator!= (const RotationY &rhs) const;  ; template<class CoordSystem , class U > ; DisplacementVector3D< CoordSystem, U > operator() (const DisplacementVector3D< CoordSystem, U > &v) const;  Rotation operation on a displacement vector in any coordinate system. ;  ; template<class ForeignVector > ; ForeignVector operator() (const ForeignVector &v) const;  Rotation operation on an arbitrary vector v. ;  ; template<class CoordSystem > ; LorentzVector< CoordSystem > operator() (const LorentzVector< CoordSystem > &v) const;  Rotation operation on a Lorentz vector in any 4D coordinate system. ;  ; template<class CoordSystem , class U > ; PositionVector3D< CoordSystem, U > operator() (const PositionVector3D< CoordSystem, U > &v) const;  Rotation operation on a position vector in any coordinate system. ;  ; template<class AVector > ; AVector operator* (const AVector &v) const;  Overload operator * for rotation on a vector. ;  ; RotationY ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1RotationY.html:90,Load,Loading,90,doc/master/classROOT_1_1Math_1_1RotationY.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1RotationY.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::RotationZ Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::Math::RotationZ Class ReferenceMath » Physics Vectors. ; Rotation class representing a 3D rotation about the Z axis by the angle of rotation. ; For efficiency reason, in addition to the angle, the sine and cosine of the angle are held; See alsoOverview of the physics vector library ; Definition at line 45 of file RotationZ.h. Public Types; typedef double Scalar;  . Public Member Functions;  RotationZ ();  Default constructor (identity rotation) ;  ;  RotationZ (Scalar angle);  Construct from an angle. ;  ; Scalar Angle () const;  Angle of rotation. ;  ; Scalar CosAngle () const;  ; void GetAngle (Scalar &angle) const;  Get the angle. ;  ; void GetComponents (Scalar &angle) const;  ; RotationZ Inverse () const;  Return inverse of a rotation. ;  ; void Invert ();  Invert a rotation in place. ;  ; bool operator!= (const RotationZ &rhs) const;  ; template<class CoordSystem , class U > ; DisplacementVector3D< CoordSystem, U > operator() (const DisplacementVector3D< CoordSystem, U > &v) const;  Rotation operation on a displacement vector in any coordinate system. ;  ; template<class ForeignVector > ; ForeignVector operator() (const ForeignVector &v) const;  Rotation operation on an arbitrary vector v. ;  ; template<class CoordSystem > ; LorentzVector< CoordSystem > operator() (const LorentzVector< CoordSystem > &v) const;  Rotation operation on a Lorentz vector in any 4D coordinate system. ;  ; template<class CoordSystem , class U > ; PositionVector3D< CoordSystem, U > operator() (const PositionVector3D< CoordSystem, U > &v) const;  Rotation operation on a position vector in any coordinate system. ;  ; template<class AVector > ; AVector operator* (const AVector &v) const;  Overload operator * for rotation on a vector. ;  ; RotationZ ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1RotationZ.html:90,Load,Loading,90,doc/master/classROOT_1_1Math_1_1RotationZ.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1RotationZ.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::RotationZYX Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::RotationZYX Class ReferenceMath » Physics Vectors. ; Rotation class with the (3D) rotation represented by angles describing first a rotation of an angle phi (yaw) about the Z axis, followed by a rotation of an angle theta (pitch) about the Y axis, followed by a third rotation of an angle psi (roll) about the X axis. ; Note that the rotations are extrinsic rotations happening around a fixed coordinate system. This is different than the convention of the ROOT::Math::EulerAngles class, where the rotation are intrinsic. Also it has not to be confused with the typical Goldstein definition of the Euler Angles (Z-X-Z or 313 sequence) which is used by the ROOT::Math::EulerAngles class, while the sequence here is Z-Y-X or 321. Applying a RotationZYX(phi, theta, psi) to a vector is then equal to applying RotationX(psi) * RotationY(theta) * RotationZ(phi) to the same vector.; See alsoOverview of the physics vector library ; Definition at line 63 of file RotationZYX.h. Public Types; typedef double Scalar;  . Public Member Functions;  RotationZYX ();  Default constructor. ;  ; template<class OtherRotation > ; constexpr RotationZYX (const OtherRotation &r);  Construct from another supported rotation type (see gv_detail::convert ) ;  ; template<class IT > ;  RotationZYX (IT begin, IT end);  Construct given a pair of pointers or iterators defining the beginning and end of an array of three Scalars, to be treated as the angles phi, theta and psi. ;  ;  RotationZYX (Scalar phi, Scalar theta, Scalar psi);  Constructor from phi, theta and psi. ;  ; template<class R > ; Scalar Distance (const R &r) const;  Distance between two rotations. ;  ; template<class IT > ; void GetComponents (IT begin) const;  Get ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1RotationZYX.html:92,Load,Loading,92,doc/master/classROOT_1_1Math_1_1RotationZYX.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1RotationZYX.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::RowOffsets< D > Struct Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; ROOT::Math::RowOffsets< D > Struct Template Reference. ; template<unsigned int D>; struct ROOT::Math::RowOffsets< D >Static structure to keep the conversion from (i,j) to offsets in the storage data for a symmetric matrix. ; Definition at line 131 of file MatrixRepresentationsStatic.h. Public Member Functions;  RowOffsets ();  ; int apply (unsigned int i) const;  ; int operator() (unsigned int i, unsigned int j) const;  . Public Attributes; int fOff [D *D];  . #include <Math/MatrixRepresentationsStatic.h>; Constructor & Destructor Documentation. ◆ RowOffsets(). template<unsigned int D> . ROOT::Math::RowOffsets< D >::RowOffsets ; (; ). inline . Definition at line 132 of file MatrixRepresentationsStatic.h. Member Function Documentation. ◆ apply(). template<unsigned int D> . int ROOT::Math::RowOffsets< D >::apply ; (; unsigned int ; i); const. inline . Definition at line 145 of file MatrixRepresentationsStatic.h. ◆ operator()(). template<unsigned int D> . int ROOT::Math::RowOffsets< D >::operator() ; (; unsigned int ; i, . unsigned int ; j . ); const. inline . Definition at line 144 of file MatrixRepresentationsStatic.h. Member Data Documentation. ◆ fOff. template<unsigned int D> . int ROOT::Math::RowOffsets< D >::fOff[D *D]. Definition at line 146 of file MatrixRepresentationsStatic.h. Collaboration diagram for ROOT::Math::RowOffsets< D >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; The documentation for this struct was generated from the following file:; math/smatrix/inc/Math/MatrixRepresentationsStatic.h. ROOTMathRowOffsets. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:23 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structROOT_1_1Math_1_1RowOffsets.html:106,Load,Loading,106,doc/master/structROOT_1_1Math_1_1RowOffsets.html,https://root.cern,https://root.cern/doc/master/structROOT_1_1Math_1_1RowOffsets.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::SDeterminant< n, idim > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Static Public Member Functions |; List of all members ; ROOT::Math::SDeterminant< n, idim > Class Template Reference. ; template<unsigned int n, unsigned int idim = n>; class ROOT::Math::SDeterminant< n, idim >Dsfact. ; Compute determinant of a symmetric, positive definite matrix of dimension \(idim\) and order \(n\).; AuthorT. Glebe ; Definition at line 49 of file Dsfact.h. Static Public Member Functions; template<class T > ; static bool Dsfact (MatRepStd< T, n, idim > &rhs, T &det);  ; template<class T > ; static bool Dsfact (MatRepSym< T, n > &rhs, T &det);  . #include <Math/Dsfact.h>; Member Function Documentation. ◆ Dsfact() [1/2]. template<unsigned int n, unsigned int idim = n> . template<class T > . static bool ROOT::Math::SDeterminant< n, idim >::Dsfact ; (; MatRepStd< T, n, idim > & ; rhs, . T & ; det . ). inlinestatic . Definition at line 53 of file Dsfact.h. ◆ Dsfact() [2/2]. template<unsigned int n, unsigned int idim = n> . template<class T > . static bool ROOT::Math::SDeterminant< n, idim >::Dsfact ; (; MatRepSym< T, n > & ; rhs, . T & ; det . ). inlinestatic . Definition at line 118 of file Dsfact.h. The documentation for this class was generated from the following file:; math/smatrix/inc/Math/Dsfact.h. ROOTMathSDeterminant. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:23 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1SDeterminant.html:113,Load,Loading,113,doc/master/classROOT_1_1Math_1_1SDeterminant.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1SDeterminant.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::SInverter< T, n, idim > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Static Public Member Functions |; List of all members ; ROOT::Math::SInverter< T, n, idim > Class Template Reference. ; template<class T, int n, int idim>; class ROOT::Math::SInverter< T, n, idim >Dsinv. ; Compute inverse of a symmetric, positive definite matrix of dimension \(idim\) and order \(n\).; AuthorT. Glebe ; Definition at line 44 of file Dsinv.h. Static Public Member Functions; static bool Dsinv (MatRepSym< T, n > &rhs);  ; template<class MatrixRep > ; static bool Dsinv (MatrixRep &rhs);  . #include <Math/Dsinv.h>; Member Function Documentation. ◆ Dsinv() [1/2]. template<class T , int n, int idim> . static bool ROOT::Math::SInverter< T, n, idim >::Dsinv ; (; MatRepSym< T, n > & ; rhs). inlinestatic . Definition at line 144 of file Dsinv.h. ◆ Dsinv() [2/2]. template<class T , int n, int idim> . template<class MatrixRep > . static bool ROOT::Math::SInverter< T, n, idim >::Dsinv ; (; MatrixRep & ; rhs). inlinestatic . Definition at line 49 of file Dsinv.h. The documentation for this class was generated from the following file:; math/smatrix/inc/Math/Dsinv.h. ROOTMathSInverter. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:23 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1SInverter.html:113,Load,Loading,113,doc/master/classROOT_1_1Math_1_1SInverter.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1SInverter.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::SMatrix< T, D1, D2, R > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; List of all members ; ROOT::Math::SMatrix< T, D1, D2, R > Class Template ReferenceMath » SMatrix Package » Matrix and Vector classes. ; template<class T, unsigned int D1, unsigned int D2 = D1, class R = MatRepStd<T, D1, D2>>; class ROOT::Math::SMatrix< T, D1, D2, R >SMatrix: a generic fixed size D1 x D2 Matrix class. ; The class is template on the scalar type, on the matrix sizes: D1 = number of rows and D2 = number of columns amd on the representation storage type. By default the representation is MatRepStd<T,D1,D2> (standard D1xD2 of type T), but it can be of type MatRepSym<T,D> for symmetric matrices DxD, where the storage is only D*(D+1)/2.; See SMatrix Class Properties.; Original author is Thorsten Glebe HERA-B Collaboration, MPI Heidelberg (Germany); AuthorsT. Glebe, L. Moneta and J. Palacios ; Definition at line 101 of file SMatrix.h. Classes; class  SMatrixRow;  ; class  SMatrixRow_const;  . Public Types; — Matrix dimension —; enum  { kRows = D1; , kCols = D2; , kSize = D1*D2; };  Enumeration defining the matrix dimension, number of rows, columns and size = rows*columns) More...;  ; — Typedefs —; typedef T value_type;  contained scalar type ;  ; typedef R rep_type;  storage representation type ;  ; typedef T * iterator;  STL iterator interface. ;  ; typedef const T * const_iterator;  STL const_iterator interface. ;  . Public Member Functions; — Constructors and Assignment —;  SMatrix ();  Default constructor: ;  ;  SMatrix (SMatrixNoInit);  construct from without initialization ;  ;  SMatrix (SMatrixIdentity);  construct from an identity matrix ;  ;  SMatrix (const SMatrix< T, D1, D2, R > &rhs);  copy constructor (from a matrix of the same representation ;  ; template<class R2 > ;  SMatrix (const SMatrix< T, D1, D2, R2 > &rhs);  construct from a matrix with different representa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1SMatrix.html:113,Load,Loading,113,doc/master/classROOT_1_1Math_1_1SMatrix.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1SMatrix.html,1,['Load'],['Loading']
Performance,. ROOT: ROOT::Math::SMatrixIdentity Struct Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. ROOT::Math::SMatrixIdentity Struct Reference. . Definition at line 72 of file SMatrix.h. #include <Math/SMatrix.h>; The documentation for this struct was generated from the following file:; math/smatrix/inc/Math/SMatrix.h. ROOTMathSMatrixIdentity. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:24 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structROOT_1_1Math_1_1SMatrixIdentity.html:97,Load,Loading,97,doc/master/structROOT_1_1Math_1_1SMatrixIdentity.html,https://root.cern,https://root.cern/doc/master/structROOT_1_1Math_1_1SMatrixIdentity.html,1,['Load'],['Loading']
Performance,. ROOT: ROOT::Math::SMatrixNoInit Struct Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. ROOT::Math::SMatrixNoInit Struct Reference. . Definition at line 73 of file SMatrix.h. #include <Math/SMatrix.h>; The documentation for this struct was generated from the following file:; math/smatrix/inc/Math/SMatrix.h. ROOTMathSMatrixNoInit. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:24 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structROOT_1_1Math_1_1SMatrixNoInit.html:95,Load,Loading,95,doc/master/structROOT_1_1Math_1_1SMatrixNoInit.html,https://root.cern,https://root.cern/doc/master/structROOT_1_1Math_1_1SMatrixNoInit.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::SVector< T, D > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; List of all members ; ROOT::Math::SVector< T, D > Class Template ReferenceMath » SMatrix Package » Matrix and Vector classes. ; template<class T, unsigned int D>; class ROOT::Math::SVector< T, D >SVector: a generic fixed size Vector class. ; The class is template on the scalar type and on the vector size D. See SVector Class Properties; Original author is Thorsten Glebe HERA-B Collaboration, MPI Heidelberg (Germany); AuthorsT. Glebe, L. Moneta and J. Palacios ; Definition at line 75 of file SVector.h. Public Types; — Typedefs —; typedef T value_type;  contained scalar type ;  ; typedef T * iterator;  STL iterator interface. ;  ; typedef const T * const_iterator;  STL const_iterator interface. ;  . Public Member Functions; — Constructors —;  SVector ();  Default constructor: vector filled with zero values. ;  ; template<class A > ;  SVector (const VecExpr< A, T, D > &rhs);  construct from a vector expression ;  ;  SVector (const SVector< T, D > &rhs);  copy constructor ;  ;  SVector (const T *a, unsigned int len);  fill from array with len must be equal to D! ;  ;  SVector (const_iterator begin, const_iterator end);  fill from a SVector iterator of type T* (for ambiguities iterator cannot be generic ) ;  ;  SVector (const T &a1);  construct a vector of size 1 from a single scalar value ;  ;  SVector (const T &a1, const T &a2);  construct a vector of size 2 from 2 scalar values ;  ;  SVector (const T &a1, const T &a2, const T &a3);  construct a vector of size 3 from 3 scalar values ;  ;  SVector (const T &a1, const T &a2, const T &a3, const T &a4);  construct a vector of size 4 from 4 scalar values ;  ;  SVector (const T &a1, const T &a2, const T &a3, const T &a4, const T &a5);  construct a vector of size 5 from 5 scalar values ;  ;  SVector (const T &a1, const T &a2, const T &a3, const T &a4, const T &a5,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1SVector.html:105,Load,Loading,105,doc/master/classROOT_1_1Math_1_1SVector.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1SVector.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::Sampler Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Variables ; ROOT::Math::Sampler Namespace Reference. Variables; static std::string gDefaultAlgorithm1D = ""auto"";  ; static std::string gDefaultAlgorithmND = ""vnrou"";  ; static int gDefaultPrintLevel = 0;  ; static std::string gDefaultSampler = ""Unuran"";  . Variable Documentation. ◆ gDefaultAlgorithm1D. std::string ROOT::Math::Sampler::gDefaultAlgorithm1D = ""auto"". static . Definition at line 25 of file DistSamplerOptions.cxx. ◆ gDefaultAlgorithmND. std::string ROOT::Math::Sampler::gDefaultAlgorithmND = ""vnrou"". static . Definition at line 26 of file DistSamplerOptions.cxx. ◆ gDefaultPrintLevel. int ROOT::Math::Sampler::gDefaultPrintLevel = 0. static . Definition at line 27 of file DistSamplerOptions.cxx. ◆ gDefaultSampler. std::string ROOT::Math::Sampler::gDefaultSampler = ""Unuran"". static . Definition at line 24 of file DistSamplerOptions.cxx. ROOTMathSampler. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:25 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1Sampler.html:92,Load,Loading,92,doc/master/namespaceROOT_1_1Math_1_1Sampler.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1Sampler.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::SinVariableTransformation Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; List of all members ; ROOT::Math::SinVariableTransformation Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Multi-dimensional Minimization. ; Sin Transformation class for dealing with double bounded variables. ; Definition at line 38 of file MinimizerVariableTransformation.h. Public Member Functions;  ~SinVariableTransformation () override;  ; double DInt2Ext (double value, double lower, double upper) const override;  ; double Ext2int (double value, double lower, double upper) const override;  ; double Int2ext (double value, double lower, double upper) const override;  ;  Public Member Functions inherited from ROOT::Math::MinimizerVariableTransformation; virtual ~MinimizerVariableTransformation ();  . #include <Math/MinimizerVariableTransformation.h>. Inheritance diagram for ROOT::Math::SinVariableTransformation:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ ~SinVariableTransformation(). ROOT::Math::SinVariableTransformation::~SinVariableTransformation ; (; ). inlineoverride . Definition at line 42 of file MinimizerVariableTransformation.h. Member Function Documentation. ◆ DInt2Ext(). double ROOT::Math::SinVariableTransformation::DInt2Ext ; (; double ; value, . double ; lower, . double ; upper . ); const. overridevirtual . Implements ROOT::Math::MinimizerVariableTransformation.; Definition at line 50 of file MinimizerVariableTransformation.cxx. ◆ Ext2int(). double ROOT::Math::SinVariableTransformation::Ext2int ; (; double ; value, . double ; lower, . double ; upper . ); const. overridevirtual . Implements ROOT::Math::MinimizerVariableTransformation.; Definition at line 23 of file MinimizerVariableTransformation.cxx. ◆ Int2ext(). double ROOT::Math::SinVariableT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1SinVariableTransformation.html:106,Load,Loading,106,doc/master/classROOT_1_1Math_1_1SinVariableTransformation.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1SinVariableTransformation.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::SkipFunction< 0 > Struct Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Static Public Member Functions |; List of all members ; ROOT::Math::SkipFunction< 0 > Struct Reference. . Definition at line 84 of file MixMaxEngine.icc. Static Public Member Functions; template<class Engine > ; static void Apply (Engine *, int, int);  . Member Function Documentation. ◆ Apply(). template<class Engine > . static void ROOT::Math::SkipFunction< 0 >::Apply ; (; Engine * ; , . int ; , . int ;  . ). inlinestatic . Definition at line 86 of file MixMaxEngine.icc. The documentation for this struct was generated from the following file:; math/mathcore/inc/Math/MixMaxEngine.icc. ROOTMathSkipFunction< 0 >. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:23 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structROOT_1_1Math_1_1SkipFunction_3_010_01_4.html:99,Load,Loading,99,doc/master/structROOT_1_1Math_1_1SkipFunction_3_010_01_4.html,https://root.cern,https://root.cern/doc/master/structROOT_1_1Math_1_1SkipFunction_3_010_01_4.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::SkipFunction< SkipNumber > Struct Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Static Public Member Functions |; List of all members ; ROOT::Math::SkipFunction< SkipNumber > Struct Template Reference. ; template<int SkipNumber>; struct ROOT::Math::SkipFunction< SkipNumber >; Definition at line 73 of file MixMaxEngine.icc. Static Public Member Functions; template<class Engine > ; static void Apply (Engine *rng, int counter, int n);  . Member Function Documentation. ◆ Apply(). template<int SkipNumber> . template<class Engine > . static void ROOT::Math::SkipFunction< SkipNumber >::Apply ; (; Engine * ; rng, . int ; counter, . int ; n . ). inlinestatic . Definition at line 75 of file MixMaxEngine.icc. The documentation for this struct was generated from the following file:; math/mathcore/inc/Math/MixMaxEngine.icc. ROOTMathSkipFunction. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:23 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structROOT_1_1Math_1_1SkipFunction.html:117,Load,Loading,117,doc/master/structROOT_1_1Math_1_1SkipFunction.html,https://root.cern,https://root.cern/doc/master/structROOT_1_1Math_1_1SkipFunction.html,1,['Load'],['Loading']
Performance,. ROOT: ROOT::Math::Sqr< T > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Static Public Member Functions |; List of all members ; ROOT::Math::Sqr< T > Class Template ReferenceMath » SMatrix Package » Expression Template Classes. ; template<class T>; class ROOT::Math::Sqr< T >Unary Square Operation Class. ; Definition at line 194 of file UnaryOperators.h. Static Public Member Functions; static T apply (const T &rhs);  . #include <Math/UnaryOperators.h>; Member Function Documentation. ◆ apply(). template<class T > . static T ROOT::Math::Sqr< T >::apply ; (; const T & ; rhs). inlinestatic . Definition at line 196 of file UnaryOperators.h. The documentation for this class was generated from the following file:; math/smatrix/inc/Math/UnaryOperators.h. ROOTMathSqr. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:24 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1Sqr.html:98,Load,Loading,98,doc/master/classROOT_1_1Math_1_1Sqr.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Sqr.html,1,['Load'],['Loading']
Performance,. ROOT: ROOT::Math::Sqrt< T > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Static Public Member Functions |; List of all members ; ROOT::Math::Sqrt< T > Class Template ReferenceMath » SMatrix Package » Expression Template Classes. ; template<class T>; class ROOT::Math::Sqrt< T >Unary Square Root Operation Class. ; Definition at line 269 of file UnaryOperators.h. Static Public Member Functions; static T apply (const T &rhs);  . #include <Math/UnaryOperators.h>; Member Function Documentation. ◆ apply(). template<class T > . static T ROOT::Math::Sqrt< T >::apply ; (; const T & ; rhs). inlinestatic . Definition at line 271 of file UnaryOperators.h. The documentation for this class was generated from the following file:; math/smatrix/inc/Math/UnaryOperators.h. ROOTMathSqrt. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:24 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1Sqrt.html:99,Load,Loading,99,doc/master/classROOT_1_1Math_1_1Sqrt.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Sqrt.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::SqrtLowVariableTransformation Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; List of all members ; ROOT::Math::SqrtLowVariableTransformation Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Multi-dimensional Minimization. ; Sqrt Transformation class for dealing with lower bounded variables. ; Definition at line 58 of file MinimizerVariableTransformation.h. Public Member Functions;  ~SqrtLowVariableTransformation () override;  ; double DInt2Ext (double value, double lower, double upper) const override;  ; double Ext2int (double value, double lower, double upper) const override;  ; double Int2ext (double value, double lower, double upper) const override;  ;  Public Member Functions inherited from ROOT::Math::MinimizerVariableTransformation; virtual ~MinimizerVariableTransformation ();  . #include <Math/MinimizerVariableTransformation.h>. Inheritance diagram for ROOT::Math::SqrtLowVariableTransformation:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ ~SqrtLowVariableTransformation(). ROOT::Math::SqrtLowVariableTransformation::~SqrtLowVariableTransformation ; (; ). inlineoverride . Definition at line 61 of file MinimizerVariableTransformation.h. Member Function Documentation. ◆ DInt2Ext(). double ROOT::Math::SqrtLowVariableTransformation::DInt2Ext ; (; double ; value, . double ; lower, . double ; upper . ); const. overridevirtual . Implements ROOT::Math::MinimizerVariableTransformation.; Definition at line 76 of file MinimizerVariableTransformation.cxx. ◆ Ext2int(). double ROOT::Math::SqrtLowVariableTransformation::Ext2int ; (; double ; value, . double ; lower, . double ; upper . ); const. overridevirtual . Implements ROOT::Math::MinimizerVariableTransformation.; Definition at line 66 of file MinimizerVariableTransformation.cxx. ◆ Int2ex",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1SqrtLowVariableTransformation.html:110,Load,Loading,110,doc/master/classROOT_1_1Math_1_1SqrtLowVariableTransformation.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1SqrtLowVariableTransformation.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::SqrtUpVariableTransformation Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; List of all members ; ROOT::Math::SqrtUpVariableTransformation Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Multi-dimensional Minimization. ; Sqrt Transformation class for dealing with upper bounded variables. ; Definition at line 74 of file MinimizerVariableTransformation.h. Public Member Functions;  ~SqrtUpVariableTransformation () override;  ; double DInt2Ext (double value, double lower, double upper) const override;  ; double Ext2int (double value, double lower, double upper) const override;  ; double Int2ext (double value, double lower, double upper) const override;  ;  Public Member Functions inherited from ROOT::Math::MinimizerVariableTransformation; virtual ~MinimizerVariableTransformation ();  . #include <Math/MinimizerVariableTransformation.h>. Inheritance diagram for ROOT::Math::SqrtUpVariableTransformation:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ ~SqrtUpVariableTransformation(). ROOT::Math::SqrtUpVariableTransformation::~SqrtUpVariableTransformation ; (; ). inlineoverride . Definition at line 77 of file MinimizerVariableTransformation.h. Member Function Documentation. ◆ DInt2Ext(). double ROOT::Math::SqrtUpVariableTransformation::DInt2Ext ; (; double ; value, . double ; lower, . double ; upper . ); const. overridevirtual . Implements ROOT::Math::MinimizerVariableTransformation.; Definition at line 100 of file MinimizerVariableTransformation.cxx. ◆ Ext2int(). double ROOT::Math::SqrtUpVariableTransformation::Ext2int ; (; double ; value, . double ; lower, . double ; upper . ); const. overridevirtual . Implements ROOT::Math::MinimizerVariableTransformation.; Definition at line 92 of file MinimizerVariableTransformation.cxx. ◆ Int2ext(). dou",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1SqrtUpVariableTransformation.html:109,Load,Loading,109,doc/master/classROOT_1_1Math_1_1SqrtUpVariableTransformation.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1SqrtUpVariableTransformation.html,1,['Load'],['Loading']
Performance,. ROOT: ROOT::Math::StdEngine< Generator > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; ROOT::Math::StdEngine< Generator > Class Template ReferenceMath » MathCore » Interface classes for Random number generation. ; template<class Generator>; class ROOT::Math::StdEngine< Generator >Class to wrap engines from the C++ standard random library in the ROOT Random interface. ; These cases are then used by the generic TRandomGen class to provide TRandom interrace generators for the C++ random generators.; See for examples the TRandomMT64 and TRandomRanlux48 generators which are typede's to TRandomGen instantiated with some random engine from the C++ standard library. ; Definition at line 73 of file StdEngine.h. Public Types; typedef StdRandomEngine BaseType;  ; typedef Generator::result_type Result_t;  . Public Member Functions;  StdEngine ();  ; Result_t IntRndm ();  ; double operator() ();  ; double Rndm ();  ; void SetSeed (Result_t seed);  . Static Public Member Functions; static uint64_t MaxInt ();  ; static const char * Name ();  . Private Attributes; double fCONS;  ; Generator fGen;  . #include <Math/StdEngine.h>; Member Typedef Documentation. ◆ BaseType. template<class Generator > . typedef StdRandomEngine ROOT::Math::StdEngine< Generator >::BaseType. Definition at line 78 of file StdEngine.h. ◆ Result_t. template<class Generator > . typedef Generator::result_type ROOT::Math::StdEngine< Generator >::Result_t. Definition at line 79 of file StdEngine.h. Constructor & Destructor Documentation. ◆ StdEngine(). template<class Generator > . ROOT::Math::StdEngine< Generator >::StdEngine ; (; ). inline . Definition at line 81 of file StdEngine.h. Member Function Documentation. ◆ IntRndm(). template<class Generator > . Result_t ROOT::Math::StdEngine< Generator >::IntRndm ; (,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1StdEngine.html:112,Load,Loading,112,doc/master/classROOT_1_1Math_1_1StdEngine.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1StdEngine.html,1,['Load'],['Loading']
Performance,. ROOT: ROOT::Math::StdEngineType< Generator > Struct Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Static Public Member Functions |; List of all members ; ROOT::Math::StdEngineType< Generator > Struct Template Reference. ; template<class Generator>; struct ROOT::Math::StdEngineType< Generator >; Definition at line 26 of file StdEngine.h. Static Public Member Functions; static const char * Name ();  . #include <Math/StdEngine.h>; Member Function Documentation. ◆ Name(). template<class Generator > . static const char * ROOT::Math::StdEngineType< Generator >::Name ; (; ). inlinestatic . Definition at line 27 of file StdEngine.h. The documentation for this struct was generated from the following file:; math/mathcore/inc/Math/StdEngine.h. ROOTMathStdEngineType. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:24 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structROOT_1_1Math_1_1StdEngineType.html:117,Load,Loading,117,doc/master/structROOT_1_1Math_1_1StdEngineType.html,https://root.cern,https://root.cern/doc/master/structROOT_1_1Math_1_1StdEngineType.html,1,['Load'],['Loading']
Performance,. ROOT: ROOT::Math::StdRandomEngine Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. ROOT::Math::StdRandomEngine Class Reference. . Definition at line 23 of file StdEngine.h. #include <Math/StdEngine.h>; The documentation for this class was generated from the following file:; math/mathcore/inc/Math/StdEngine.h. ROOTMathStdRandomEngine. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:24 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1StdRandomEngine.html:96,Load,Loading,96,doc/master/classROOT_1_1Math_1_1StdRandomEngine.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1StdRandomEngine.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::TDataPoint< K, _val_type > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; ROOT::Math::TDataPoint< K, _val_type > Class Template Reference. ; template<unsigned int K, typename _val_type = float>; class ROOT::Math::TDataPoint< K, _val_type >; Definition at line 27 of file TDataPoint.h. Public Types; enum  { kDimension = K; };  ; typedef _val_type value_type;  . Public Member Functions;  TDataPoint ();  ; template<typename _coord_typ > ;  TDataPoint (const _coord_typ *pData, _val_type fWeight=1);  ; template<typename _coord_type > ;  TDataPoint (const _coord_type *pData, _val_type fWeight);  ; template<typename _val > ; value_type Distance (const TDataPoint< K, _val > &rPoint) const;  ; template<typename _val > ; _val_type Distance (const TDataPoint< K, _val > &rPoint) const;  ; value_type GetCoordinate (unsigned int iAxis) const;  ; value_type GetWeight () const;  ; Bool_t Less (TDataPoint &rPoint, unsigned int iAxis) const;  ; void SetCoordinate (unsigned int iAxis, _val_type fValue);  ; void SetWeight (float fWeight);  . Static Public Member Functions; static UInt_t Dimension ();  . Private Attributes; value_type m_fWeight;  weight at this point ;  ; value_type m_vCoordinates [K];  coordinates ;  . #include <Math/TDataPoint.h>; Member Typedef Documentation. ◆ value_type. template<unsigned int K, typename _val_type = float> . typedef _val_type ROOT::Math::TDataPoint< K, _val_type >::value_type. Definition at line 30 of file TDataPoint.h. Member Enumeration Documentation. ◆ anonymous enum. template<unsigned int K, typename _val_type = float> . anonymous enum. EnumeratorkDimension . Definition at line 31 of file TDataPoint.h. Constructor & Destructor Documentation. ◆ TDataPoint() [1/3]. template<unsigned int K, typename _val_type > . ROOT::Math::TDat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1TDataPoint.html:116,Load,Loading,116,doc/master/classROOT_1_1Math_1_1TDataPoint.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1TDataPoint.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::TDataPointN< _val_type > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; ROOT::Math::TDataPointN< _val_type > Class Template Reference. ; template<typename _val_type = float>; class ROOT::Math::TDataPointN< _val_type >; Definition at line 30 of file TDataPointN.h. Public Types; typedef _val_type value_type;  . Public Member Functions;  TDataPointN ();  ; template<typename _coord_typ > ;  TDataPointN (const _coord_typ *pData, value_type fWeight=1);  ; template<typename _coord_type > ;  TDataPointN (const _coord_type *pData, _val_type fWeight);  ; template<typename _val > ;  TDataPointN (const TDataPointN< _val > &);  ; virtual ~TDataPointN ();  ; template<typename _val > ; _val_type Distance (const TDataPointN< _val > &rPoint) const;  ; _val_type GetCoordinate (unsigned int iAxis) const;  ; _val_type GetWeight () const;  ; bool Less (TDataPointN &rPoint, unsigned int iAxis) const;  ; void SetCoordinate (unsigned int iAxis, value_type fValue);  ; void SetWeight (float fWeight);  . Static Public Member Functions; static UInt_t Dimension ();  ; static void SetDimension (UInt_t dim);  . Private Attributes; value_type m_fWeight;  ; value_type * m_vCoordinates;  . Static Private Attributes; static UInt_t kDimension = 0;  . #include <Math/TDataPointN.h>; Member Typedef Documentation. ◆ value_type. template<typename _val_type = float> . typedef _val_type ROOT::Math::TDataPointN< _val_type >::value_type. Definition at line 36 of file TDataPointN.h. Constructor & Destructor Documentation. ◆ TDataPointN() [1/4]. template<typename _val_type > . ROOT::Math::TDataPointN< _val_type >::TDataPointN. Definition at line 30 of file TDataPointN.icc. ◆ TDataPointN() [2/4]. template<typename _val_type = float> . template<typename _coord_typ > ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1TDataPointN.html:114,Load,Loading,114,doc/master/classROOT_1_1Math_1_1TDataPointN.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1TDataPointN.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::TRandomEngine Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; List of all members ; ROOT::Math::TRandomEngine Class Referenceabstract. . Definition at line 19 of file TRandomEngine.h. Public Member Functions; virtual ~TRandomEngine ();  ; virtual double Rndm ()=0;  . #include <Math/TRandomEngine.h>. Inheritance diagram for ROOT::Math::TRandomEngine:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ ~TRandomEngine(). virtual ROOT::Math::TRandomEngine::~TRandomEngine ; (; ). inlinevirtual . Definition at line 22 of file TRandomEngine.h. Member Function Documentation. ◆ Rndm(). virtual double ROOT::Math::TRandomEngine::Rndm ; (; ). pure virtual . Implemented in ROOT::Math::LCGEngine, ROOT::Math::MersenneTwisterEngine, ROOT::Math::MixMaxEngine< N, SkipNumber >, ROOT::Math::RanluxppEngine< p >, ROOT::Math::RanluxppCompatEngineJames< p >, ROOT::Math::RanluxppCompatEngineGslRanlxs< p >, ROOT::Math::RanluxppCompatEngineGslRanlxd< p >, ROOT::Math::RanluxppCompatEngineLuescherRanlxs< p >, ROOT::Math::RanluxppCompatEngineLuescherRanlxd< p >, ROOT::Math::RanluxppCompatEngineStdRanlux24, ROOT::Math::RanluxppCompatEngineStdRanlux48, TRandom, TRandom1, TRandom1, TRandom2, TRandom2, TRandom3, TRandom3, TRandomGen< Engine >, and TRandomGen< Engine >. The documentation for this class was generated from the following file:; math/mathcore/inc/Math/TRandomEngine.h. ROOTMathTRandomEngine. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:24 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1TRandomEngine.html:94,Load,Loading,94,doc/master/classROOT_1_1Math_1_1TRandomEngine.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1TRandomEngine.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::TensorMulOp< Vector1, Vector2 > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Attributes |; List of all members ; ROOT::Math::TensorMulOp< Vector1, Vector2 > Class Template ReferenceMath » SMatrix Package » Expression Template Classes. ; template<class Vector1, class Vector2>; class ROOT::Math::TensorMulOp< Vector1, Vector2 >Class for Tensor Multiplication (outer product) of two vectors giving a matrix. ; Definition at line 837 of file MatrixFunctions.h. Public Member Functions;  TensorMulOp (const Vector1 &lhs, const Vector2 &rhs);  ;  ~TensorMulOp ();  ; Vector1::value_type apply (unsigned int i) const;  Vector2::kSize is the number of columns in the resulting matrix. ;  ; bool IsInUse (const typename Vector1::value_type *) const;  ; Vector1::value_type operator() (unsigned int i, unsigned j) const;  . Protected Attributes; const Vector1 & lhs_;  ; const Vector2 & rhs_;  . #include <Math/MatrixFunctions.h>; Constructor & Destructor Documentation. ◆ TensorMulOp(). template<class Vector1 , class Vector2 > . ROOT::Math::TensorMulOp< Vector1, Vector2 >::TensorMulOp ; (; const Vector1 & ; lhs, . const Vector2 & ; rhs . ). inline . Definition at line 840 of file MatrixFunctions.h. ◆ ~TensorMulOp(). template<class Vector1 , class Vector2 > . ROOT::Math::TensorMulOp< Vector1, Vector2 >::~TensorMulOp ; (; ). inline . Definition at line 845 of file MatrixFunctions.h. Member Function Documentation. ◆ apply(). template<class Vector1 , class Vector2 > . Vector1::value_type ROOT::Math::TensorMulOp< Vector1, Vector2 >::apply ; (; unsigned int ; i); const. inline . Vector2::kSize is the number of columns in the resulting matrix. ; Definition at line 848 of file MatrixFunctions.h. ◆ IsInUse(). template<class Vector1 , class Vector2 > . bool ROOT::Math::TensorMulOp< Vector1, Vector2 >::IsInUse ; (; const typename Vector1::value_type * ; ); cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1TensorMulOp.html:121,Load,Loading,121,doc/master/classROOT_1_1Math_1_1TensorMulOp.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1TensorMulOp.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::TranspPolicy< T, D1, D2, MatRepSym< T, D1 > > Struct Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; List of all members ; ROOT::Math::TranspPolicy< T, D1, D2, MatRepSym< T, D1 > > Struct Template Reference. ; template<class T, unsigned int D1, unsigned int D2>; struct ROOT::Math::TranspPolicy< T, D1, D2, MatRepSym< T, D1 > >; Definition at line 73 of file BinaryOpPolicy.h. Public Types; typedef MatRepSym< T, D1 > RepType;  . #include <Math/BinaryOpPolicy.h>; Member Typedef Documentation. ◆ RepType. template<class T , unsigned int D1, unsigned int D2> . typedef MatRepSym<T, D1> ROOT::Math::TranspPolicy< T, D1, D2, MatRepSym< T, D1 > >::RepType. Definition at line 75 of file BinaryOpPolicy.h. The documentation for this struct was generated from the following file:; math/smatrix/inc/Math/BinaryOpPolicy.h. ROOTMathTranspPolicy< T, D1, D2, MatRepSym< T, D1 > >. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:24 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structROOT_1_1Math_1_1TranspPolicy_3_01T_00_01D1_00_01D2_00_01MatRepSym_3_01T_00_01D1_01_4_01_4.html:136,Load,Loading,136,doc/master/structROOT_1_1Math_1_1TranspPolicy_3_01T_00_01D1_00_01D2_00_01MatRepSym_3_01T_00_01D1_01_4_01_4.html,https://root.cern,https://root.cern/doc/master/structROOT_1_1Math_1_1TranspPolicy_3_01T_00_01D1_00_01D2_00_01MatRepSym_3_01T_00_01D1_01_4_01_4.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::TranspPolicy< T, D1, D2, R > Struct Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; List of all members ; ROOT::Math::TranspPolicy< T, D1, D2, R > Struct Template Reference. ; template<class T, unsigned int D1, unsigned int D2, class R>; struct ROOT::Math::TranspPolicy< T, D1, D2, R >matrix transpose policy ; Definition at line 63 of file BinaryOpPolicy.h. Public Types; enum  { N1 = R::kRows; , N2 = R::kCols; };  ; typedef MatRepStd< T, N2, N1 > RepType;  . #include <Math/BinaryOpPolicy.h>; Member Typedef Documentation. ◆ RepType. template<class T , unsigned int D1, unsigned int D2, class R > . typedef MatRepStd<T, N2, N1> ROOT::Math::TranspPolicy< T, D1, D2, R >::RepType. Definition at line 69 of file BinaryOpPolicy.h. Member Enumeration Documentation. ◆ anonymous enum. template<class T , unsigned int D1, unsigned int D2, class R > . anonymous enum. EnumeratorN1 ; N2 . Definition at line 65 of file BinaryOpPolicy.h. The documentation for this struct was generated from the following file:; math/smatrix/inc/Math/BinaryOpPolicy.h. ROOTMathTranspPolicy. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:24 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structROOT_1_1Math_1_1TranspPolicy.html:119,Load,Loading,119,doc/master/structROOT_1_1Math_1_1TranspPolicy.html,https://root.cern,https://root.cern/doc/master/structROOT_1_1Math_1_1TranspPolicy.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::TransposeOp< Matrix, T, D1, D2 > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Attributes |; List of all members ; ROOT::Math::TransposeOp< Matrix, T, D1, D2 > Class Template ReferenceMath » SMatrix Package » Expression Template Classes. ; template<class Matrix, class T, unsigned int D1, unsigned int D2 = D1>; class ROOT::Math::TransposeOp< Matrix, T, D1, D2 >Class for Transpose Operations. ; Definition at line 503 of file MatrixFunctions.h. Public Member Functions;  TransposeOp (const Matrix &rhs);  ;  ~TransposeOp ();  ; T apply (unsigned int i) const;  ; bool IsInUse (const T *p) const;  ; T operator() (unsigned int i, unsigned j) const;  . Protected Attributes; const Matrix & rhs_;  . #include <Math/MatrixFunctions.h>; Constructor & Destructor Documentation. ◆ TransposeOp(). template<class Matrix , class T , unsigned int D1, unsigned int D2 = D1> . ROOT::Math::TransposeOp< Matrix, T, D1, D2 >::TransposeOp ; (; const Matrix & ; rhs). inline . Definition at line 506 of file MatrixFunctions.h. ◆ ~TransposeOp(). template<class Matrix , class T , unsigned int D1, unsigned int D2 = D1> . ROOT::Math::TransposeOp< Matrix, T, D1, D2 >::~TransposeOp ; (; ). inline . Definition at line 510 of file MatrixFunctions.h. Member Function Documentation. ◆ apply(). template<class Matrix , class T , unsigned int D1, unsigned int D2 = D1> . T ROOT::Math::TransposeOp< Matrix, T, D1, D2 >::apply ; (; unsigned int ; i); const. inline . Definition at line 513 of file MatrixFunctions.h. ◆ IsInUse(). template<class Matrix , class T , unsigned int D1, unsigned int D2 = D1> . bool ROOT::Math::TransposeOp< Matrix, T, D1, D2 >::IsInUse ; (; const T * ; p); const. inline . Definition at line 520 of file MatrixFunctions.h. ◆ operator()(). template<class Matrix , class T , unsigned int D1, unsigned int D2 = D1> . T ROOT::Math::TransposeOp< Matrix, T, D1, D2 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1TransposeOp.html:122,Load,Loading,122,doc/master/classROOT_1_1Math_1_1TransposeOp.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1TransposeOp.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::UnaryOp< Operator, RHS, T > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Attributes |; List of all members ; ROOT::Math::UnaryOp< Operator, RHS, T > Class Template ReferenceMath » SMatrix Package » Expression Template Classes. ; template<class Operator, class RHS, class T>; class ROOT::Math::UnaryOp< Operator, RHS, T >UnaryOperation class A class representing unary operators in the parse tree. ; The objects are stored by reference; AuthorT. Glebe ; Definition at line 361 of file Expression.h. Public Member Functions;  UnaryOp (Operator, const RHS &rhs);  ;  ~UnaryOp ();  ; T apply (unsigned int i) const;  ; bool IsInUse (const T *p) const;  ; T operator() (unsigned int i, unsigned int j) const;  . Protected Attributes; const RHS & rhs_;  . #include <Math/Expression.h>; Constructor & Destructor Documentation. ◆ UnaryOp(). template<class Operator , class RHS , class T > . ROOT::Math::UnaryOp< Operator, RHS, T >::UnaryOp ; (; Operator ; , . const RHS & ; rhs . ). inline . Definition at line 364 of file Expression.h. ◆ ~UnaryOp(). template<class Operator , class RHS , class T > . ROOT::Math::UnaryOp< Operator, RHS, T >::~UnaryOp ; (; ). inline . Definition at line 368 of file Expression.h. Member Function Documentation. ◆ apply(). template<class Operator , class RHS , class T > . T ROOT::Math::UnaryOp< Operator, RHS, T >::apply ; (; unsigned int ; i); const. inline . Definition at line 371 of file Expression.h. ◆ IsInUse(). template<class Operator , class RHS , class T > . bool ROOT::Math::UnaryOp< Operator, RHS, T >::IsInUse ; (; const T * ; p); const. inline . Definition at line 378 of file Expression.h. ◆ operator()(). template<class Operator , class RHS , class T > . T ROOT::Math::UnaryOp< Operator, RHS, T >::operator() ; (; unsigned int ; i, . unsigned int ; j . ); const. inline . Definition at line 374 of file Expression.h. M",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1UnaryOp.html:117,Load,Loading,117,doc/master/classROOT_1_1Math_1_1UnaryOp.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1UnaryOp.html,1,['Load'],['Loading']
Performance,. ROOT: ROOT::Math::Util Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Functions ; ROOT::Math::Util Namespace Reference. namespace defining Utility functions needed by mathcore ; More... Functions; template<class T > ; T EvalLog (T x);  safe evaluation of log(x) with a protections against negative or zero argument to the log smooth linear extrapolation below function values smaller than epsilon (better than a simple cut-off) ;  ; template<class T > ; std::string ToString (const T &val);  Utility function for conversion to strings. ;  . Detailed Description; namespace defining Utility functions needed by mathcore ; Function Documentation. ◆ EvalLog(). template<class T > . T ROOT::Math::Util::EvalLog ; (; T ; x). inline . safe evaluation of log(x) with a protections against negative or zero argument to the log smooth linear extrapolation below function values smaller than epsilon (better than a simple cut-off) ; Definition at line 64 of file Util.h. ◆ ToString(). template<class T > . std::string ROOT::Math::Util::ToString ; (; const T & ; val). Utility function for conversion to strings. ; Definition at line 50 of file Util.h. ROOTMathUtil. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:25 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1Util.html:89,Load,Loading,89,doc/master/namespaceROOT_1_1Math_1_1Util.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1Util.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::Vavilov Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; ROOT::Math::Vavilov Class ReferenceabstractMath » MathCore | Math » MathMore » Statistical functions. ; Base class describing a Vavilov distribution. ; The Vavilov distribution is defined in P.V. Vavilov: Ionization losses of high-energy heavy particles, Sov. Phys. JETP 5 (1957) 749 [Zh. Eksp. Teor. Fiz. 32 (1957) 920].; The probability density function of the Vavilov distribution as function of Landau's parameter is given by: ; \[ p(\lambda_L; \kappa, \beta^2) =; \frac{1}{2 \pi i}\int_{c-i\infty}^{c+i\infty} \phi(s) e^{\lambda_L s} ds\]. where \(\phi(s) = e^{C} e^{\psi(s)}\) with \( C = \kappa (1+\beta^2 \gamma )\) and \(\psi(s)= s \ln \kappa + (s+\beta^2 \kappa); \cdot \left ( \int \limits_{0}^{1}; \frac{1 - e^{\frac{-st}{\kappa}}}{t} \,d t- \gamma \right ); - \kappa \, e^{\frac{-s}{\kappa}}\). \( \gamma = 0.5772156649\dots\) is Euler's constant.; For the class Vavilov, Pdf returns the Vavilov distribution as function of Landau's parameter \(\lambda_L = \lambda_V/\kappa - \ln \kappa\), which is the convention used in the CERNLIB routines, and in the tables by S.M. Seltzer and M.J. Berger: Energy loss stragglin of protons and mesons: Tabulation of the Vavilov distribution, pp 187-203 in: National Research Council (U.S.), Committee on Nuclear Science: Studies in penetration of charged particles in matter, Nat. Akad. Sci. Publication 1133, Nucl. Sci. Series Report No. 39, Washington (Nat. Akad. Sci.) 1964, 388 pp. Available from Google books; Therefore, for small values of \(\kappa < 0.01\), pdf approaches the Landau distribution.; For values \(\kappa > 10\), the Gauss approximation should be used with \(\mu\) and \(\sigma\) given by Vavilov::Mean(kappa, beta2) and sqrt(Vavilov::Variance(kappa, beta2).; The original Vavilov pdf is obtained ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1Vavilov.html:88,Load,Loading,88,doc/master/classROOT_1_1Math_1_1Vavilov.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Vavilov.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::VavilovAccurate Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Static Private Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; ROOT::Math::VavilovAccurate Class ReferenceMath » MathCore | Math » MathMore » Statistical functions. ; Class describing a Vavilov distribution. ; The probability density function of the Vavilov distribution as function of Landau's parameter is given by: ; \[ p(\lambda_L; \kappa, \beta^2) =; \frac{1}{2 \pi i}\int_{c-i\infty}^{c+i\infty} \phi(s) e^{\lambda_L s} ds\]. where \(\phi(s) = e^{C} e^{\psi(s)}\) with \( C = \kappa (1+\beta^2 \gamma )\) and \(\psi(s)= s \ln \kappa + (s+\beta^2 \kappa); \cdot \left ( \int \limits_{0}^{1}; \frac{1 - e^{\frac{-st}{\kappa}}}{t} \,d t- \gamma \right ); - \kappa \, e^{\frac{-s}{\kappa}}\). \( \gamma = 0.5772156649\dots\) is Euler's constant.; For the class VavilovAccurate, Pdf returns the Vavilov distribution as function of Landau's parameter \(\lambda_L = \lambda_V/\kappa - \ln \kappa\), which is the convention used in the CERNLIB routines, and in the tables by S.M. Seltzer and M.J. Berger: Energy loss stragglin of protons and mesons: Tabulation of the Vavilov distribution, pp 187-203 in: National Research Council (U.S.), Committee on Nuclear Science: Studies in penetration of charged particles in matter, Nat. Akad. Sci. Publication 1133, Nucl. Sci. Series Report No. 39, Washington (Nat. Akad. Sci.) 1964, 388 pp. Available from Google books; Therefore, for small values of \(\kappa < 0.01\), pdf approaches the Landau distribution.; For values \(\kappa > 10\), the Gauss approximation should be used with \(\mu\) and \(\sigma\) given by Vavilov::mean(kappa, beta2) and sqrt(Vavilov::variance(kappa, beta2).; The original Vavilov pdf is obtained by v.Pdf(lambdaV/kappa-log(kappa))/kappa.; For",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1VavilovAccurate.html:96,Load,Loading,96,doc/master/classROOT_1_1Math_1_1VavilovAccurate.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1VavilovAccurate.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::VavilovAccurateCdf Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::Math::VavilovAccurateCdf Class ReferenceMath » MathCore | Math » MathMore » Statistical functions. ; Class describing the Vavilov cdf. ; The probability density function of the Vavilov distribution is given by: ; \[ p(\lambda; \kappa, \beta^2) =; \frac{1}{2 \pi i}\int_{c-i\infty}^{c+i\infty} \phi(s) e^{\lambda s} ds\]. where \(\phi(s) = e^{C} e^{\psi(s)}\) with \( C = \kappa (1+\beta^2 \gamma )\) and ; \[\psi(s) = s \ln \kappa + (s+\beta^2 \kappa); \cdot \left ( \int \limits_{0}^{1}; \frac{1 - e^{\frac{-st}{\kappa}}}{t} \, dt - \gamma \right ); - \kappa \, e^{\frac{-s}{\kappa}}\]. . \( \gamma = 0.5772156649\dots\) is Euler's constant.; The parameters are:; 0: Norm: Normalization constant; 1: x0: Location parameter; 2: xi: Width parameter; 3: kappa: Parameter \(\kappa\) of the Vavilov distribution; 4: beta2: Parameter \(\beta^2\) of the Vavilov distribution. Benno List, June 2010 ; Definition at line 72 of file VavilovAccurateCdf.h. Public Member Functions;  VavilovAccurateCdf ();  Default constructor. ;  ;  VavilovAccurateCdf (const double *p);  Constructor with parameter values. ;  ;  ~VavilovAccurateCdf () override;  Destructor. ;  ; IBaseFunctionOneDim * Clone () const override;  Return a clone of the object. ;  ; double DoEval (double x) const override;  Evaluate the function. ;  ; double DoEvalPar (double x, const double *p) const override;  Evaluate the function, using parameters p. ;  ; unsigned int NPar () const override;  Return the number of Parameters. ;  ; std::string ParameterName (unsigned int i) const override;  Return the name of the i-th parameter (starting from zero) Overwrite if want to avoid the default name (""Par_0, Par_1, ..."") ;  ; const double * Parameters () const override;  Access the parameter values. ;  ; v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1VavilovAccurateCdf.html:99,Load,Loading,99,doc/master/classROOT_1_1Math_1_1VavilovAccurateCdf.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1VavilovAccurateCdf.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::VavilovAccuratePdf Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::Math::VavilovAccuratePdf Class ReferenceMath » MathCore | Math » MathMore » Statistical functions. ; Class describing the Vavilov pdf. ; The probability density function of the Vavilov distribution is given by: ; \[ p(\lambda; \kappa, \beta^2) =; \frac{1}{2 \pi i}\int_{c-i\infty}^{c+i\infty} \phi(s) e^{\lambda s} ds\]. where \(\phi(s) = e^{C} e^{\psi(s)}\) with \( C = \kappa (1+\beta^2 \gamma )\) and ; \[\psi(s) = s \ln \kappa + (s+\beta^2 \kappa); \cdot \left ( \int \limits_{0}^{1}; \frac{1 - e^{\frac{-st}{\kappa}}}{t} \, dt- \gamma \right ); - \kappa \, e^{\frac{-s}{\kappa}}\]. . \( \gamma = 0.5772156649\dots\) is Euler's constant.; The parameters are:; 0: Norm: Normalization constant; 1: x0: Location parameter; 2: xi: Width parameter; 3: kappa: Parameter \(\kappa\) of the Vavilov distribution; 4: beta2: Parameter \(\beta^2\) of the Vavilov distribution. Benno List, June 2010 ; Definition at line 72 of file VavilovAccuratePdf.h. Public Member Functions;  VavilovAccuratePdf ();  Default constructor. ;  ;  VavilovAccuratePdf (const double *p);  Constructor with parameter values. ;  ;  ~VavilovAccuratePdf () override;  Destructor. ;  ; IBaseFunctionOneDim * Clone () const override;  Return a clone of the object. ;  ; double DoEval (double x) const override;  Evaluate the function. ;  ; double DoEvalPar (double x, const double *p) const override;  Evaluate the function, using parameters p. ;  ; unsigned int NPar () const override;  Return the number of Parameters. ;  ; std::string ParameterName (unsigned int i) const override;  Return the name of the i-th parameter (starting from zero) ;  ; const double * Parameters () const override;  Access the parameter values. ;  ; void SetParameters (const double *p) override;  Set the parameter va",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1VavilovAccuratePdf.html:99,Load,Loading,99,doc/master/classROOT_1_1Math_1_1VavilovAccuratePdf.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1VavilovAccuratePdf.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::VavilovAccurateQuantile Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::Math::VavilovAccurateQuantile Class ReferenceMath » MathCore | Math » MathMore » Statistical functions. ; Class describing the Vavilov quantile function. ; The probability density function of the Vavilov distribution is given by: ; \[ p(\lambda; \kappa, \beta^2) =; \frac{1}{2 \pi i}\int_{c-i\infty}^{c+i\infty} \phi(s) e^{\lambda s} ds\]. where \(\phi(s) = e^{C} e^{\psi(s)}\) with \( C = \kappa (1+\beta^2 \gamma )\) and ; \[\psi(s) = s \ln \kappa + (s+\beta^2 \kappa); \cdot \left ( \int \limits_{0}^{1}; \frac{1 - e^{\frac{-st}{\kappa}}}{t} \, dt- \gamma \right ); - \kappa \, e^{\frac{-s}{\kappa}}\]. . \( \gamma = 0.5772156649\dots\) is Euler's constant.; The parameters are:; 0: Norm: Normalization constant; 1: x0: Location parameter; 2: xi: Width parameter; 3: kappa: Parameter \(\kappa\) of the Vavilov distribution; 4: beta2: Parameter \(\beta^2\) of the Vavilov distribution. Benno List, June 2010 ; Definition at line 72 of file VavilovAccurateQuantile.h. Public Member Functions;  VavilovAccurateQuantile ();  Default constructor. ;  ;  VavilovAccurateQuantile (const double *p);  Constructor with parameter values. ;  ;  ~VavilovAccurateQuantile () override;  Destructor. ;  ; IBaseFunctionOneDim * Clone () const override;  Return a clone of the object. ;  ; double DoEval (double x) const override;  Evaluate the function. ;  ; double DoEvalPar (double x, const double *p) const override;  Evaluate the function, using parameters p. ;  ; unsigned int NPar () const override;  Return the number of Parameters. ;  ; std::string ParameterName (unsigned int i) const override;  Return the name of the i-th parameter (starting from zero) ;  ; const double * Parameters () const override;  Access the parameter values. ;  ; void SetParameters (cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1VavilovAccurateQuantile.html:104,Load,Loading,104,doc/master/classROOT_1_1Math_1_1VavilovAccurateQuantile.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1VavilovAccurateQuantile.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::VavilovFast Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; ROOT::Math::VavilovFast Class ReferenceMath » MathCore | Math » MathMore » Statistical functions. ; Class describing a Vavilov distribution. ; The probability density function of the Vavilov distribution as function of Landau's parameter is given by: ; \[ p(\lambda_L; \kappa, \beta^2) =; \frac{1}{2 \pi i}\int_{c-i\infty}^{c+i\infty} \phi(s) e^{\lambda_L s} ds\]. where \(\phi(s) = e^{C} e^{\psi(s)}\) with \( C = \kappa (1+\beta^2 \gamma )\) and \(\psi(s)= s \ln \kappa + (s+\beta^2 \kappa); \cdot \left ( \int \limits_{0}^{1}; \frac{1 - e^{\frac{-st}{\kappa}}}{t} \,d t- \gamma \right ); - \kappa \, e^{\frac{-s}{\kappa}}\). \( \gamma = 0.5772156649\dots\) is Euler's constant.; For the class VavilovFast, Pdf returns the Vavilov distribution as function of Landau's parameter \(\lambda_L = \lambda_V/\kappa - \ln \kappa\), which is the convention used in the CERNLIB routines, and in the tables by S.M. Seltzer and M.J. Berger: Energy loss stragglin of protons and mesons: Tabulation of the Vavilov distribution, pp 187-203 in: National Research Council (U.S.), Committee on Nuclear Science: Studies in penetration of charged particles in matter, Nat. Akad. Sci. Publication 1133, Nucl. Sci. Series Report No. 39, Washington (Nat. Akad. Sci.) 1964, 388 pp. Available from Google books; Therefore, for small values of \(\kappa < 0.01\), pdf approaches the Landau distribution.; For values \(\kappa > 10\), the Gauss approximation should be used with \(\mu\) and \(\sigma\) given by Vavilov::mean(kappa, beta2) and sqrt(Vavilov::variance(kappa, beta2).; For values \(\kappa > 10\), the Gauss approximation should be used with \(\mu\) and \(\sigma\) given by Vavilov::mean(kappa, beta2) and sqrt(Vavilov::variance",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1VavilovFast.html:92,Load,Loading,92,doc/master/classROOT_1_1Math_1_1VavilovFast.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1VavilovFast.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::VecExpr< ExprType, T, D > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::Math::VecExpr< ExprType, T, D > Class Template ReferenceMath » SMatrix Package » Expression Template Classes. ; template<class ExprType, class T, unsigned int D>; class ROOT::Math::VecExpr< ExprType, T, D >Expression wrapper class for Vector objects. ; Definition at line 64 of file Expression.h. Public Types; enum  { kRows = D; };  ; typedef T value_type;  . Public Member Functions;  VecExpr (const ExprType &rhs);  ;  ~VecExpr ();  ; T apply (unsigned int i) const;  ; bool IsInUse (const T *p) const;  function to determine if any use operand is being used (has same memory address) ;  ; T operator() (unsigned int i) const;  ; std::ostream & print (std::ostream &os) const;  used by operator<<() ;  . Private Attributes; ExprType rhs_;  . #include <Math/Expression.h>; Member Typedef Documentation. ◆ value_type. template<class ExprType , class T , unsigned int D> . typedef T ROOT::Math::VecExpr< ExprType, T, D >::value_type. Definition at line 67 of file Expression.h. Member Enumeration Documentation. ◆ anonymous enum. template<class ExprType , class T , unsigned int D> . anonymous enum. EnumeratorkRows . Definition at line 93 of file Expression.h. Constructor & Destructor Documentation. ◆ VecExpr(). template<class ExprType , class T , unsigned int D> . ROOT::Math::VecExpr< ExprType, T, D >::VecExpr ; (; const ExprType & ; rhs). inline . Definition at line 70 of file Expression.h. ◆ ~VecExpr(). template<class ExprType , class T , unsigned int D> . ROOT::Math::VecExpr< ExprType, T, D >::~VecExpr ; (; ). inline . Definition at line 74 of file Expression.h. Member Function Documentation. ◆ apply(). template<class ExprType , class T , unsigned int D> . T ROOT::Math::VecExpr< ExprType, T, D >::apply ; (; unsigned",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1VecExpr.html:115,Load,Loading,115,doc/master/classROOT_1_1Math_1_1VecExpr.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1VecExpr.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::VectorMatrixColOp< Vector, Matrix, D1 > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Protected Attributes |; List of all members ; ROOT::Math::VectorMatrixColOp< Vector, Matrix, D1 > Class Template ReferenceMath » SMatrix Package » Expression Template Classes. ; template<class Vector, class Matrix, unsigned int D1>; class ROOT::Math::VectorMatrixColOp< Vector, Matrix, D1 >Class for Vector-Matrix multiplication. ; Definition at line 174 of file MatrixFunctions.h. Public Types; typedef Vector::value_type T;  . Public Member Functions;  VectorMatrixColOp (const Vector &lhs, const Matrix &rhs);  ;  ~VectorMatrixColOp ();  ; Matrix::value_type apply (unsigned int i) const;  calc \( \sum_{j} a_{ij} * v_j \) ;  ; bool IsInUse (const T *p) const;  . Protected Attributes; const Vector & lhs_;  ; const Matrix & rhs_;  . #include <Math/MatrixFunctions.h>; Member Typedef Documentation. ◆ T. template<class Vector , class Matrix , unsigned int D1> . typedef Vector::value_type ROOT::Math::VectorMatrixColOp< Vector, Matrix, D1 >::T. Definition at line 177 of file MatrixFunctions.h. Constructor & Destructor Documentation. ◆ VectorMatrixColOp(). template<class Vector , class Matrix , unsigned int D1> . ROOT::Math::VectorMatrixColOp< Vector, Matrix, D1 >::VectorMatrixColOp ; (; const Vector & ; lhs, . const Matrix & ; rhs . ). inline . Definition at line 179 of file MatrixFunctions.h. ◆ ~VectorMatrixColOp(). template<class Vector , class Matrix , unsigned int D1> . ROOT::Math::VectorMatrixColOp< Vector, Matrix, D1 >::~VectorMatrixColOp ; (; ). inline . Definition at line 183 of file MatrixFunctions.h. Member Function Documentation. ◆ apply(). template<class Vector , class Matrix , unsigned int D1> . Matrix::value_type ROOT::Math::VectorMatrixColOp< Vector, Matrix, D1 >::apply ; (; unsigned int ; i); const. inline . calc \( \sum_{j} a_{ij} *",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1VectorMatrixColOp.html:129,Load,Loading,129,doc/master/classROOT_1_1Math_1_1VectorMatrixColOp.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1VectorMatrixColOp.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::VectorMatrixRowOp< Matrix, Vector, D2 > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Protected Attributes |; List of all members ; ROOT::Math::VectorMatrixRowOp< Matrix, Vector, D2 > Class Template Reference. ; template<class Matrix, class Vector, unsigned int D2>; class ROOT::Math::VectorMatrixRowOp< Matrix, Vector, D2 >; Definition at line 109 of file MatrixFunctions.h. Public Types; typedef Vector::value_type T;  . Public Member Functions;  VectorMatrixRowOp (const Matrix &lhs, const Vector &rhs);  ;  ~VectorMatrixRowOp ();  ; Matrix::value_type apply (unsigned int i) const;  calc \( \sum_{j} a_{ij} * v_j \) ;  ; bool IsInUse (const T *p) const;  . Protected Attributes; const Matrix & lhs_;  ; const Vector & rhs_;  . #include <Math/MatrixFunctions.h>; Member Typedef Documentation. ◆ T. template<class Matrix , class Vector , unsigned int D2> . typedef Vector::value_type ROOT::Math::VectorMatrixRowOp< Matrix, Vector, D2 >::T. Definition at line 112 of file MatrixFunctions.h. Constructor & Destructor Documentation. ◆ VectorMatrixRowOp(). template<class Matrix , class Vector , unsigned int D2> . ROOT::Math::VectorMatrixRowOp< Matrix, Vector, D2 >::VectorMatrixRowOp ; (; const Matrix & ; lhs, . const Vector & ; rhs . ). inline . Definition at line 115 of file MatrixFunctions.h. ◆ ~VectorMatrixRowOp(). template<class Matrix , class Vector , unsigned int D2> . ROOT::Math::VectorMatrixRowOp< Matrix, Vector, D2 >::~VectorMatrixRowOp ; (; ). inline . Definition at line 119 of file MatrixFunctions.h. Member Function Documentation. ◆ apply(). template<class Matrix , class Vector , unsigned int D2> . Matrix::value_type ROOT::Math::VectorMatrixRowOp< Matrix, Vector, D2 >::apply ; (; unsigned int ; i); const. inline . calc \( \sum_{j} a_{ij} * v_j \) ; Definition at line 122 of file MatrixFunctions.h. ◆ IsInUse(). template<class Matr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1VectorMatrixRowOp.html:129,Load,Loading,129,doc/master/classROOT_1_1Math_1_1VectorMatrixRowOp.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1VectorMatrixRowOp.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::VectorUtil Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Functions ; ROOT::Math::VectorUtil Namespace ReferenceMath » Physics Vectors. Global Helper functions for generic Vector classes. ; More... Functions; template<class Vector1 , class Vector2 > ; double Angle (const Vector1 &v1, const Vector2 &v2);  Find Angle between two vectors. ;  ; template<class LVector , class BoostVector > ; LVector boost (const LVector &v, const BoostVector &b);  Boost a generic Lorentz Vector class using a generic 3D Vector class describing the boost The only requirement on the vector is that implements the X(), Y(), Z(), T() and SetXYZT methods. ;  ; template<class LVector , class T > ; LVector boostX (const LVector &v, T beta);  Boost a generic Lorentz Vector class along the X direction with a factor beta The only requirement on the vector is that implements the X(), Y(), Z(), T() and SetXYZT methods. ;  ; template<class LVector > ; LVector boostY (const LVector &v, double beta);  Boost a generic Lorentz Vector class along the Y direction with a factor beta The only requirement on the vector is that implements the X(), Y(), Z(), T() methods and be constructed from x,y,z,t values The beta of the boost must be <= 1 or a nul Lorentz Vector will be returned. ;  ; template<class LVector > ; LVector boostZ (const LVector &v, double beta);  Boost a generic Lorentz Vector class along the Z direction with a factor beta The only requirement on the vector is that implements the X(), Y(), Z(), T() methods and be constructed from x,y,z,t values The beta of the boost must be <= 1 or a nul Lorentz Vector will be returned. ;  ; template<class Vector1 , class Vector2 > ; double CosTheta (const Vector1 &v1, const Vector2 &v2);  Find CosTheta Angle between two generic 3D vectors pre-requisite: vectors implement the X(), Y() and Z() ;  ; template<class Vector1 , class Vector2 > ; Vector1::Scalar DeltaPhi (const Vector1 &v1, const ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1VectorUtil.html:95,Load,Loading,95,doc/master/namespaceROOT_1_1Math_1_1VectorUtil.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1VectorUtil.html,1,['Load'],['Loading']
Performance,. ROOT: ROOT::Math::VegasParameters Struct Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; ROOT::Math::VegasParameters Struct ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration » Numerical Monte Carlo Integration Classes. ; Structures collecting parameters for VEGAS multidimensional integration For implementation of default parameters see file mathmore/src/GSLMCIntegrationWorkspace.h. ; Definition at line 46 of file MCParameters.h. Public Member Functions;  VegasParameters ();  ;  VegasParameters (const ROOT::Math::IOptions &opt);  ; std::unique_ptr< ROOT::Math::IOptions > MakeIOptions () const;  Convert to options. ;  ; VegasParameters & operator= (const ROOT::Math::IOptions &opt);  ; void SetDefaultValues ();  default VEGAS parameters (copied from gsl/monte/vegas.c) ;  . Public Attributes; double alpha;  ; size_t iterations;  ; int mode;  ; int stage;  ; int verbose;  . #include <Math/MCParameters.h>; Constructor & Destructor Documentation. ◆ VegasParameters() [1/2]. ROOT::Math::VegasParameters::VegasParameters ; (; ). inline . Definition at line 54 of file MCParameters.h. ◆ VegasParameters() [2/2]. ROOT::Math::VegasParameters::VegasParameters ; (; const ROOT::Math::IOptions & ; opt). Definition at line 48 of file MCParameters.cxx. Member Function Documentation. ◆ MakeIOptions(). std::unique_ptr< ROOT::Math::IOptions > ROOT::Math::VegasParameters::MakeIOptions ; (; ); const. Convert to options. ; Definition at line 72 of file MCParameters.cxx. ◆ operator=(). VegasParameters & ROOT::Math::VegasParameters::operator= ; (; const ROOT::Math::IOptions & ; opt). Definition at line 53 of file MCParameters.cxx. ◆ SetDefaultValues(). void ROOT::Math::VegasParameters::SetDefaultValues ; (; ). default VEGAS parameters (copied from gsl/monte/vegas.c) ; Definition at line 39 of file MCParameters.cxx. Membe,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structROOT_1_1Math_1_1VegasParameters.html:97,Load,Loading,97,doc/master/structROOT_1_1Math_1_1VegasParameters.html,https://root.cern,https://root.cern/doc/master/structROOT_1_1Math_1_1VegasParameters.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::VirtualIntegrator Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; List of all members ; ROOT::Math::VirtualIntegrator Class ReferenceabstractMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; Abstract class for all numerical integration methods (1D and multi-dim) Interface defining the common methods for the numerical integrator classes of one and multi dimensions The derived class VirtualIntegratorOneDim defines the methods for one-dimensional integration. ; The derived class VirtualIntegratorMultiDim defines the method for multi-dimensional integration. The concrete classes for one dimension (e.g. GSLIntegrator) or multi-dimension (e.g. GSLMCIntegrator) can be created using the plug-in manager. Users should not use directly this class but the concrete classes ROOT::Math::IntegratorOneDim or ROOT::Math::IntegratorMultiDim ; Definition at line 48 of file VirtualIntegrator.h. Public Member Functions; virtual ~VirtualIntegrator ();  destructor: no operation ;  ; virtual double Error () const =0;  return the estimate of the absolute Error of the last Integral calculation ;  ; virtual int NEval () const;  return number of function evaluations in calculating the integral (if integrator do not implement this function returns -1) ;  ; virtual double Result () const =0;  return the Result of the last Integral calculation ;  ; virtual void SetAbsTolerance (double)=0;  set the desired absolute Error ;  ; virtual void SetRelTolerance (double)=0;  set the desired relative Error ;  ; virtual int Status () const =0;  return the Error Status of the last Integral calculation ;  . #include <Math/VirtualIntegrator.h>. Inheritance diagram for ROOT::Math::VirtualIntegrator:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ ~VirtualIntegrator(). virt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1VirtualIntegrator.html:98,Load,Loading,98,doc/master/classROOT_1_1Math_1_1VirtualIntegrator.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1VirtualIntegrator.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::VirtualIntegratorMultiDim Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; List of all members ; ROOT::Math::VirtualIntegratorMultiDim Class ReferenceabstractMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; Interface (abstract) class for multi numerical integration It must be implemented by the concrete Integrator classes like ROOT::Math::GSLMCIntegrator. ; Plug-in's exist in ROOT to be able to instantiate the derived classes via the plug-in manager. Users should not use directly this class but the concrete classes ROOT::Math::IntegratorMultiDim. ; Definition at line 160 of file VirtualIntegrator.h. Public Member Functions;  ~VirtualIntegratorMultiDim () override;  destructor: no operation ;  ; virtual double Integral (const double *, const double *)=0;  evaluate multi-dim integral ;  ; virtual ROOT::Math::IntegratorMultiDimOptions Options () const =0;  get the option used for the integration implement by derived class otherwise return default ones ;  ; virtual void SetFunction (const IMultiGenFunction &)=0;  setting a multi-dim function ;  ; virtual void SetOptions (const ROOT::Math::IntegratorMultiDimOptions &opt);  set the options (if needed must be re-implemented by derived classes) ;  ; virtual ROOT::Math::IntegrationMultiDim::Type Type () const;  return type of integrator ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegrator; virtual ~VirtualIntegrator ();  destructor: no operation ;  ; virtual double Error () const =0;  return the estimate of the absolute Error of the last Integral calculation ;  ; virtual int NEval () const;  return number of function evaluations in calculating the integral (if integrator do not implement this function returns -1) ;  ; virtual double Result () const =0;  return the Result of the last Integral calculation ;  ; virtual void SetAbsTolerance (double)=0;  set",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1VirtualIntegratorMultiDim.html:106,Load,Loading,106,doc/master/classROOT_1_1Math_1_1VirtualIntegratorMultiDim.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1VirtualIntegratorMultiDim.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::VirtualIntegratorOneDim Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; List of all members ; ROOT::Math::VirtualIntegratorOneDim Class ReferenceabstractMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; Interface (abstract) class for 1D numerical integration It must be implemented by the concrete Integrator classes like ROOT::Math::GSLIntegrator. ; Plug-in's exist in ROOT to be able to instantiate the derived classes via the plug-in manager. Users should not use directly this class but the concrete classes ROOT::Math::IntegratorOneDim. ; Definition at line 101 of file VirtualIntegrator.h. Public Member Functions;  ~VirtualIntegratorOneDim () override;  destructor: no operation ;  ; virtual double Integral ()=0;  evaluate un-defined integral (between -inf, + inf) ;  ; virtual double Integral (const std::vector< double > &pts)=0;  evaluate integral with singular points ;  ; virtual double Integral (double a, double b)=0;  evaluate integral ;  ; virtual double IntegralCauchy (double a, double b, double c)=0;  evaluate Cauchy integral ;  ; virtual double IntegralLow (double b)=0;  evaluate integral over the (-inf, b) ;  ; virtual double IntegralUp (double a)=0;  evaluate integral over the (a, +inf) ;  ; virtual ROOT::Math::IntegratorOneDimOptions Options () const =0;  get the option used for the integration must be implemented by derived class ;  ; virtual void SetFunction (const IGenFunction &)=0;  set integration function ;  ; virtual void SetOptions (const ROOT::Math::IntegratorOneDimOptions &opt);  set the options (should be re-implemented by derived classes -if more options than tolerance exist ;  ; virtual ROOT::Math::IntegrationOneDim::Type Type () const;  return type of integrator ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegrator; virtual ~VirtualIntegrator ();  destructor: no operation ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1VirtualIntegratorOneDim.html:104,Load,Loading,104,doc/master/classROOT_1_1Math_1_1VirtualIntegratorOneDim.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1VirtualIntegratorOneDim.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::WrappedFunction< Func > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::WrappedFunction< Func > Class Template ReferenceMath » MathCore » Function Classes and Interfaces » Generic Function Evaluation Interfaces. ; template<typename Func = FreeFunctionPtr>; class ROOT::Math::WrappedFunction< Func >Template class to wrap any C++ callable object which takes one argument i.e. ; implementing operator() (double x) in a One-dimensional function interface. It provides a ROOT::Math::IGenFunction-like signature; Note: If you want to wrap just the reference (to avoid copying) you need to use Func& or const Func & as template parameter. The former should be used when the operator() is not a const method of Func ; Definition at line 45 of file WrappedFunction.h. Public Member Functions;  WrappedFunction (Func f);  construct from the pointer to the object and the member function ;  ; WrappedFunction * Clone () const override;  clone (required by the interface) ;  ;  Public Member Functions inherited from ROOT::Math::IBaseFunctionOneDim; virtual ~IBaseFunctionOneDim ()=default;  ; virtual bool HasGradient () const;  ; double operator() (const double *x) const;  Evaluate the function at a point x[]. ;  ; double operator() (double x) const;  Evaluate the function at a point x. ;  . Private Member Functions; double DoEval (double x) const override;  implementation of the evaluation function. Must be implemented by derived classes ;  . Private Attributes; Func fFunc;  . Additional Inherited Members;  Public Types inherited from ROOT::Math::IBaseFunctionOneDim; typedef IBaseFunctionOneDim BaseFunc;  . #include <Math/WrappedFunction.h>. Inheritance diagram for ROOT::Math::WrappedFunction< Func >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instea",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1WrappedFunction.html:113,Load,Loading,113,doc/master/classROOT_1_1Math_1_1WrappedFunction.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1WrappedFunction.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::WrappedMemFunction< FuncObj, MemFuncPtr > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::WrappedMemFunction< FuncObj, MemFuncPtr > Class Template ReferenceMath » MathCore » Function Classes and Interfaces » Generic Function Evaluation Interfaces. ; template<typename FuncObj, typename MemFuncPtr>; class ROOT::Math::WrappedMemFunction< FuncObj, MemFuncPtr >Template class to wrap any member function of a class taking a double and returning a double in a 1D function interface For example, if you have a class like: struct X { double Eval(double x); }; you can wrapped in the following way: WrappedMemFunction<X, double ( X::* ) (double) > f;. ; Definition at line 95 of file WrappedFunction.h. Public Member Functions;  WrappedMemFunction (FuncObj &obj, MemFuncPtr memFn);  construct from the pointer to the object and the member function ;  ; WrappedMemFunction * Clone () const override;  clone (required by the interface) ;  ;  Public Member Functions inherited from ROOT::Math::IBaseFunctionOneDim; virtual ~IBaseFunctionOneDim ()=default;  ; virtual bool HasGradient () const;  ; double operator() (const double *x) const;  Evaluate the function at a point x[]. ;  ; double operator() (double x) const;  Evaluate the function at a point x. ;  . Private Member Functions; double DoEval (double x) const override;  implementation of the evaluation function. Must be implemented by derived classes ;  . Private Attributes; MemFuncPtr fMemFunc;  ; FuncObj * fObj;  . Additional Inherited Members;  Public Types inherited from ROOT::Math::IBaseFunctionOneDim; typedef IBaseFunctionOneDim BaseFunc;  . #include <Math/WrappedFunction.h>. Inheritance diagram for ROOT::Math::WrappedMemFunction< FuncObj, MemFuncPtr >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1WrappedMemFunction.html:131,Load,Loading,131,doc/master/classROOT_1_1Math_1_1WrappedMemFunction.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1WrappedMemFunction.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::WrappedMemMultiFunction< FuncObj, MemFuncPtr > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::WrappedMemMultiFunction< FuncObj, MemFuncPtr > Class Template Reference. ; template<typename FuncObj, typename MemFuncPtr>; class ROOT::Math::WrappedMemMultiFunction< FuncObj, MemFuncPtr >; Definition at line 182 of file WrappedFunction.h. Public Member Functions;  WrappedMemMultiFunction (FuncObj &obj, MemFuncPtr memFn, unsigned int dim=1);  construct from the pointer to the object and the member function ;  ; WrappedMemMultiFunction * Clone () const override;  clone (required by the interface) ;  ; unsigned int NDim () const override;  Retrieve the dimension of the function. ;  ;  Public Member Functions inherited from ROOT::Math::IBaseFunctionMultiDimTempl< T >; virtual ~IBaseFunctionMultiDimTempl ()=default;  ; virtual bool HasGradient () const;  ; T operator() (const T *x) const;  Evaluate the function at a point x[]. ;  . Private Member Functions; double DoEval (const double *x) const override;  . Private Attributes; unsigned int fDim;  ; MemFuncPtr fMemFunc;  ; FuncObj * fObj;  . Additional Inherited Members;  Public Types inherited from ROOT::Math::IBaseFunctionMultiDimTempl< T >; typedef T BackendType;  ; typedef IBaseFunctionMultiDimTempl< T > BaseFunc;  . #include <Math/WrappedFunction.h>. Inheritance diagram for ROOT::Math::WrappedMemMultiFunction< FuncObj, MemFuncPtr >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ WrappedMemMultiFunction(). template<typename FuncObj , typename MemFuncPtr > . ROOT::Math::WrappedMemMultiFunction< FuncObj, MemFuncPtr >::WrappedMemMultiFunction ; (; FuncObj & ; obj, . MemFuncPtr ; memFn, . unsigned int ; dim = 1 . ). inline . cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1WrappedMemMultiFunction.html:136,Load,Loading,136,doc/master/classROOT_1_1Math_1_1WrappedMemMultiFunction.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1WrappedMemMultiFunction.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::WrappedMultiFunction< Func > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::WrappedMultiFunction< Func > Class Template ReferenceMath » MathCore » Function Classes and Interfaces » Generic Function Evaluation Interfaces. ; template<typename Func = FreeMultiFunctionPtr>; class ROOT::Math::WrappedMultiFunction< Func >Template class to wrap any C++ callable object implementing operator() (const double * x) in a multi-dimensional function interface. ; It provides a ROOT::Math::IGenMultiFunction-like signature; Note: If you want to wrap just the reference (to avoid copying) you need to use Func& or const Func & as template parameter. The former should be used when the operator() is not a const method of Func ; Definition at line 143 of file WrappedFunction.h. Public Member Functions;  WrappedMultiFunction (Func f, unsigned int dim=1);  construct from the pointer to the object and the member function ;  ; WrappedMultiFunction * Clone () const override;  clone (required by the interface) ;  ; unsigned int NDim () const override;  Retrieve the dimension of the function. ;  ;  Public Member Functions inherited from ROOT::Math::IBaseFunctionMultiDimTempl< T >; virtual ~IBaseFunctionMultiDimTempl ()=default;  ; virtual bool HasGradient () const;  ; T operator() (const T *x) const;  Evaluate the function at a point x[]. ;  . Private Member Functions; double DoEval (const double *x) const override;  . Private Attributes; unsigned int fDim;  ; Func fFunc;  . Additional Inherited Members;  Public Types inherited from ROOT::Math::IBaseFunctionMultiDimTempl< T >; typedef T BackendType;  ; typedef IBaseFunctionMultiDimTempl< T > BaseFunc;  . #include <Math/WrappedFunction.h>. Inheritance diagram for ROOT::Math::WrappedMultiFunction< Func >:. This browser is not able to show ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1WrappedMultiFunction.html:118,Load,Loading,118,doc/master/classROOT_1_1Math_1_1WrappedMultiFunction.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1WrappedMultiFunction.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::WrappedMultiTF1Templ< T > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; List of all members ; ROOT::Math::WrappedMultiTF1Templ< T > Class Template ReferenceMath » MathCore » Function Classes and Interfaces. ; template<class T>; class ROOT::Math::WrappedMultiTF1Templ< T >Class to Wrap a ROOT Function class (like TF1) in a IParamMultiFunction interface of multi-dimensions to be used in the ROOT::Math numerical algorithm. ; This wrapper class does not own the TF1 pointer, so it assumes it exists during the wrapper lifetime. The class copy the TF1 pointer only when it owns it.; The class from ROOT version 6.03 does not contain anymore a copy of the parameters. The parameters are stored in the TF1 class. ; Definition at line 48 of file WrappedMultiTF1.h. Public Types; typedef ROOT::Math::IParametricFunctionMultiDimTempl< T >::BaseFunc BaseFunc;  ; typedef ROOT::Math::IParametricGradFunctionMultiDimTempl< T > BaseParamFunc;  ;  Public Types inherited from ROOT::Math::IParametricGradFunctionMultiDimTempl< T >; using BaseFunc = typename IParametricFunctionMultiDimTempl< T >::BaseFunc;  ; using BaseGradFunc = IGradientFunctionMultiDimTempl< T >;  ; using BaseParamFunc = IParametricFunctionMultiDimTempl< T >;  ;  Public Types inherited from ROOT::Math::IParametricFunctionMultiDimTempl< T >; typedef IBaseFunctionMultiDimTempl< T > BaseFunc;  ;  Public Types inherited from ROOT::Math::IBaseFunctionMultiDimTempl< T >; typedef T BackendType;  ; typedef IBaseFunctionMultiDimTempl< T > BaseFunc;  . Public Member Functions;  WrappedMultiTF1Templ (const WrappedMultiTF1Templ< T > &rhs);  Copy constructor. ;  ;  WrappedMultiTF1Templ (TF1 &f, unsigned int dim=0);  constructor from a function pointer to a TF1 If dim = 0 dimension is taken from TF1::GetNdim(). ;  ;  ~WrappedMultiTF1Templ () override;  Destructor (no operations). ;  ; WrappedMult",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1WrappedMultiTF1Templ.html:115,Load,Loading,115,doc/master/classROOT_1_1Math_1_1WrappedMultiTF1Templ.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1WrappedMultiTF1Templ.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::WrappedParamFunction< FuncPtr > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::WrappedParamFunction< FuncPtr > Class Template ReferenceMath » MathCore » Function Classes and Interfaces » Parametric Function Evaluation Interfaces. ; template<typename FuncPtr = FreeParamMultiFunctionPtr>; class ROOT::Math::WrappedParamFunction< FuncPtr >WrappedParamFunction class to wrap any multi-dimensional function object implementing the operator()(const double * x, const double * p) in an interface-like IParamFunction with a vector storing and caching internally the parameter values. ; Definition at line 44 of file WrappedParamFunction.h. Public Member Functions; template<class Iterator > ;  WrappedParamFunction (FuncPtr func, unsigned int dim, Iterator begin, Iterator end);  Constructor a wrapped function from a pointer to a callable object, the function dimension and an iterator specifying begin and end of parameters. ;  ;  WrappedParamFunction (FuncPtr func, unsigned int dim=1, unsigned int npar=0, double *par=nullptr);  Constructor a wrapped function from a pointer to a callable object, the function dimension and number of parameters which are set to zero by default. ;  ; IMultiGenFunction * Clone () const override;  clone the function ;  ; unsigned int NDim () const override;  Retrieve the dimension of the function. ;  ; unsigned int NPar () const override;  Return the number of Parameters. ;  ; const double * Parameters () const override;  Access the parameter values. ;  ; void SetParameters (const double *p) override;  Set the parameter values. ;  ;  Public Member Functions inherited from ROOT::Math::IParametricFunctionMultiDimTempl< double >; double operator() (const double *x) const;  ; double operator() (const double *x, const double *p) const;  Evaluate functi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1WrappedParamFunction.html:121,Load,Loading,121,doc/master/classROOT_1_1Math_1_1WrappedParamFunction.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1WrappedParamFunction.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::WrappedParamFunctionGen< FuncPtr > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::WrappedParamFunctionGen< FuncPtr > Class Template ReferenceMath » MathCore » Function Classes and Interfaces » Parametric Function Evaluation Interfaces. ; template<typename FuncPtr = FreeMultiFunctionPtr>; class ROOT::Math::WrappedParamFunctionGen< FuncPtr >WrappedParamGenFunction class to wrap any multi-dimensional function implementing the operator()(const double * ) in an interface-like IParamFunction, by fixing some of the variables and define them as parameters. ; i.e. transform any multi-dim function in a parametric function ; Definition at line 143 of file WrappedParamFunction.h. Public Member Functions;  WrappedParamFunctionGen (const FuncPtr &func, unsigned int dim, unsigned int npar, const double *par, const unsigned int *idx);  Constructor a wrapped function from a pointer to a generic callable object implementation operator()(const double *), the new function dimension, the number of parameters (number of fixed variables) and an array specifying the index of the fixed variables which became parameters in the new API. ;  ;  WrappedParamFunctionGen (FuncPtr &func, unsigned int dim, unsigned int npar, const double *par, const unsigned int *idx);  Constructor as before but taking now a non - const pointer to a callable object. ;  ; IMultiGenFunction * Clone () const override;  clone the function ;  ; unsigned int NDim () const override;  Retrieve the dimension of the function. ;  ; unsigned int NPar () const override;  Return the number of Parameters. ;  ; const double * Parameters () const override;  Access the parameter values. ;  ; void SetParameters (const double *p) override;  Set the parameter values. ;  ;  Public Member Functions inherited from ROOT::Math::IPar",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1WrappedParamFunctionGen.html:124,Load,Loading,124,doc/master/classROOT_1_1Math_1_1WrappedParamFunctionGen.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1WrappedParamFunctionGen.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::WrappedTF1 Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; List of all members ; ROOT::Math::WrappedTF1 Class ReferenceMath » MathCore » Function Classes and Interfaces. ; Class to Wrap a ROOT Function class (like TF1) in a IParamFunction interface of one dimensions to be used in the ROOT::Math numerical algorithms The wrapper does not own bby default the TF1 pointer, so it assumes it exists during the wrapper lifetime. ; The class from ROOT version 6.03 does not contain anymore a copy of the parameters. The parameters are stored in the TF1 class. ; Definition at line 39 of file WrappedTF1.h. Public Types; typedef ROOT::Math::IParamGradFunction::BaseFunc BaseFunc;  ; typedef ROOT::Math::IParamGradFunction BaseGradFunc;  ; typedef ROOT::Math::IGradientFunctionOneDim IGrad;  ;  Public Types inherited from ROOT::Math::IParametricGradFunctionOneDim; typedef IParametricFunctionOneDim::BaseFunc BaseFunc;  ; typedef IGradientFunctionOneDim BaseGradFunc;  ; typedef IParametricFunctionOneDim BaseParamFunc;  ;  Public Types inherited from ROOT::Math::IParametricFunctionOneDim; typedef IBaseFunctionOneDim BaseFunc;  ;  Public Types inherited from ROOT::Math::IBaseFunctionOneDim; typedef IBaseFunctionOneDim BaseFunc;  ;  Public Types inherited from ROOT::Math::IGradientFunctionOneDim; typedef IBaseFunctionOneDim BaseFunc;  ; typedef IGradientFunctionOneDim BaseGrad;  . Public Member Functions;  WrappedTF1 (const WrappedTF1 &rhs);  Copy constructor. ;  ;  WrappedTF1 (TF1 &f);  constructor from a TF1 function pointer. ;  ;  ~WrappedTF1 () override;  Destructor (no operations). ;  ; WrappedTF1 & operator= (const WrappedTF1 &rhs);  Assignment operator. ;  ; interface inherited from IFunction; ROOT::Math::IGenFunction * Clone () const override;  Clone the wrapper but not the original function. ;  ;  Public Member Functions inherited from ROOT::Math::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1WrappedTF1.html:91,Load,Loading,91,doc/master/classROOT_1_1Math_1_1WrappedTF1.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1WrappedTF1.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::detail Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Enumerations |; Functions ; ROOT::Math::detail Namespace Reference. Classes; class  manipulator;  . Enumerations; enum  manip_t { open; , sep; , close; , bitforbit; };  . Functions; template<class char_t , class traits_t > ; char_t get_manip (std::basic_ios< char_t, traits_t > &ios, manip_t m);  ; int ios_data (int k);  ; template<class char_t , class traits_t > ; std::basic_ostream< char_t, traits_t > & operator<< (std::basic_ostream< char_t, traits_t > &os, detail::manipulator< char_t > const &manip);  ; template<class char_t , class traits_t > ; std::basic_istream< char_t, traits_t > & operator>> (std::basic_istream< char_t, traits_t > &is, detail::manipulator< char_t > const &manip);  ; template<class char_t , class traits_t > ; std::basic_istream< char_t, traits_t > & require_delim (std::basic_istream< char_t, traits_t > &is, manip_t m);  ; template<class char_t , class traits_t > ; void set_manip (std::basic_ios< char_t, traits_t > &ios, manip_t m, char_t ch);  . Enumeration Type Documentation. ◆ manip_t. enum ROOT::Math::detail::manip_t. Enumeratoropen ; sep ; close ; bitforbit . Definition at line 35 of file GenVectorIO.h. Function Documentation. ◆ get_manip(). template<class char_t , class traits_t > . char_t ROOT::Math::detail::get_manip ; (; std::basic_ios< char_t, traits_t > & ; ios, . manip_t ; m . ). inline . Definition at line 54 of file GenVectorIO.h. ◆ ios_data(). int ROOT::Math::detail::ios_data ; (; int ; k). inline . Definition at line 39 of file GenVectorIO.h. ◆ operator<<(). template<class char_t , class traits_t > . std::basic_ostream< char_t, traits_t > & ROOT::Math::detail::operator<< ; (; std::basic_ostream< char_t, traits_t > & ; os, . detail::manipulator< char_t > const & ; manip . ). inline . Definition at line 113 of file GenVectorIO.h. ◆ operator>>(). template<class char_t , class traits_t > . std::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1detail.html:91,Load,Loading,91,doc/master/namespaceROOT_1_1Math_1_1detail.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1detail.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::detail::manipulator< char_t > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::Math::detail::manipulator< char_t > Class Template Reference. ; template<class char_t>; class ROOT::Math::detail::manipulator< char_t >; Definition at line 85 of file GenVectorIO.h. Public Member Functions;  manipulator (manip_t m, char_t ch=0);  ; template<class traits_t > ; void set (std::basic_ios< char_t, traits_t > &ios) const;  . Private Attributes; char_t fChar;  ; manip_t fMan;  . #include <Math/GenVector/GenVectorIO.h>; Constructor & Destructor Documentation. ◆ manipulator(). template<class char_t > . ROOT::Math::detail::manipulator< char_t >::manipulator ; (; manip_t ; m, . char_t ; ch = 0 . ). inlineexplicit . Definition at line 89 of file GenVectorIO.h. Member Function Documentation. ◆ set(). template<class char_t > . template<class traits_t > . void ROOT::Math::detail::manipulator< char_t >::set ; (; std::basic_ios< char_t, traits_t > & ; ios); const. inline . Definition at line 98 of file GenVectorIO.h. Member Data Documentation. ◆ fChar. template<class char_t > . char_t ROOT::Math::detail::manipulator< char_t >::fChar. private . Definition at line 105 of file GenVectorIO.h. ◆ fMan. template<class char_t > . manip_t ROOT::Math::detail::manipulator< char_t >::fMan. private . Definition at line 104 of file GenVectorIO.h. math/genvector/inc/Math/GenVector/GenVectorIO.h. ROOTMathdetailmanipulator. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:25 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1detail_1_1manipulator.html:119,Load,Loading,119,doc/master/classROOT_1_1Math_1_1detail_1_1manipulator.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1detail_1_1manipulator.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::gv_detail Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Enumerations |; Functions ; ROOT::Math::gv_detail Namespace Reference. Classes; struct  ERROR_This_Rotation_Conversion_is_NOT_Supported;  . Enumerations; enum  ERotation3DMatrixIndex { ;   kXX = Rotation3D::kXX; , kXY = Rotation3D::kXY; , kXZ = Rotation3D::kXZ; , kYX = Rotation3D::kYX; , ;   kYY = Rotation3D::kYY; , kYZ = Rotation3D::kYZ; , kZX = Rotation3D::kZX; , kZY = Rotation3D::kZY; , ;   kZZ = Rotation3D::kZZ; , kXX = Rotation3D::kXX; , kXY = Rotation3D::kXY; , kXZ = Rotation3D::kXZ; , ;   kYX = Rotation3D::kYX; , kYY = Rotation3D::kYY; , kYZ = Rotation3D::kYZ; , kZX = Rotation3D::kZX; , ;   kZY = Rotation3D::kZY; , kZZ = Rotation3D::kZZ. };  ; enum  ERotation3DMatrixIndex { ;   kXX = Rotation3D::kXX; , kXY = Rotation3D::kXY; , kXZ = Rotation3D::kXZ; , kYX = Rotation3D::kYX; , ;   kYY = Rotation3D::kYY; , kYZ = Rotation3D::kYZ; , kZX = Rotation3D::kZX; , kZY = Rotation3D::kZY; , ;   kZZ = Rotation3D::kZZ; , kXX = Rotation3D::kXX; , kXY = Rotation3D::kXY; , kXZ = Rotation3D::kXZ; , ;   kYX = Rotation3D::kYX; , kYY = Rotation3D::kYY; , kYZ = Rotation3D::kYZ; , kZX = Rotation3D::kZX; , ;   kZY = Rotation3D::kZY; , kZZ = Rotation3D::kZZ. };  . Functions; void convert (AxisAngle const &from, EulerAngles &to);  ; void convert (AxisAngle const &from, Quaternion &to);  ; void convert (AxisAngle const &from, Rotation3D &to);  ; void convert (AxisAngle const &from, RotationZYX &to);  ; void convert (EulerAngles const &from, AxisAngle &to);  ; void convert (EulerAngles const &from, Quaternion &to);  ; void convert (EulerAngles const &from, Rotation3D &to);  ; void convert (EulerAngles const &from, RotationZYX &to);  ; void convert (Quaternion const &from, AxisAngle &to);  ; void convert (Quaternion const &from, EulerAngles &to);  ; void convert (Quaternion const &from, Rotation3D &to);  ; void convert (Quaternion const &from, Rotat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1gv__detail.html:94,Load,Loading,94,doc/master/namespaceROOT_1_1Math_1_1gv__detail.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1gv__detail.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::meta_col_dot< 0 > Struct Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Static Public Member Functions |; List of all members ; ROOT::Math::meta_col_dot< 0 > Struct Reference. . Definition at line 157 of file MatrixFunctions.h. Static Public Member Functions; template<class Matrix , class Vector > ; static Matrix::value_type f (const Matrix &lhs, const Vector &rhs, const unsigned int offset);  . #include <Math/MatrixFunctions.h>; Member Function Documentation. ◆ f(). template<class Matrix , class Vector > . static Matrix::value_type ROOT::Math::meta_col_dot< 0 >::f ; (; const Matrix & ; lhs, . const Vector & ; rhs, . const unsigned int ; offset . ). inlinestatic . Definition at line 159 of file MatrixFunctions.h. The documentation for this struct was generated from the following file:; math/smatrix/inc/Math/MatrixFunctions.h. ROOTMathmeta_col_dot< 0 >. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:22 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structROOT_1_1Math_1_1meta__col__dot_3_010_01_4.html:99,Load,Loading,99,doc/master/structROOT_1_1Math_1_1meta__col__dot_3_010_01_4.html,https://root.cern,https://root.cern/doc/master/structROOT_1_1Math_1_1meta__col__dot_3_010_01_4.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::meta_col_dot< I > Struct Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Static Public Member Functions |; List of all members ; ROOT::Math::meta_col_dot< I > Struct Template Reference. ; template<unsigned int I>; struct ROOT::Math::meta_col_dot< I >; Definition at line 143 of file MatrixFunctions.h. Static Public Member Functions; template<class Matrix , class Vector > ; static Matrix::value_type f (const Matrix &lhs, const Vector &rhs, const unsigned int offset);  . #include <Math/MatrixFunctions.h>; Member Function Documentation. ◆ f(). template<unsigned int I> . template<class Matrix , class Vector > . static Matrix::value_type ROOT::Math::meta_col_dot< I >::f ; (; const Matrix & ; lhs, . const Vector & ; rhs, . const unsigned int ; offset . ). inlinestatic . Definition at line 145 of file MatrixFunctions.h. The documentation for this struct was generated from the following file:; math/smatrix/inc/Math/MatrixFunctions.h. ROOTMathmeta_col_dot. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:22 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structROOT_1_1Math_1_1meta__col__dot.html:108,Load,Loading,108,doc/master/structROOT_1_1Math_1_1meta__col__dot.html,https://root.cern,https://root.cern/doc/master/structROOT_1_1Math_1_1meta__col__dot.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::meta_dot< 0 > Struct Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Static Public Member Functions |; List of all members ; ROOT::Math::meta_dot< 0 > Struct Reference. . Definition at line 146 of file Functions.h. Static Public Member Functions; template<class A , class B , class T > ; static T f (const A &lhs, const B &rhs, const T &);  . #include <Math/Functions.h>; Member Function Documentation. ◆ f(). template<class A , class B , class T > . static T ROOT::Math::meta_dot< 0 >::f ; (; const A & ; lhs, . const B & ; rhs, . const T & ;  . ). inlinestatic . Definition at line 148 of file Functions.h. The documentation for this struct was generated from the following file:; math/smatrix/inc/Math/Functions.h. ROOTMathmeta_dot< 0 >. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:22 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structROOT_1_1Math_1_1meta__dot_3_010_01_4.html:95,Load,Loading,95,doc/master/structROOT_1_1Math_1_1meta__dot_3_010_01_4.html,https://root.cern,https://root.cern/doc/master/structROOT_1_1Math_1_1meta__dot_3_010_01_4.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::meta_dot< I > Struct Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Static Public Member Functions |; List of all members ; ROOT::Math::meta_dot< I > Struct Template Reference. ; template<unsigned int I>; struct ROOT::Math::meta_dot< I >; Definition at line 134 of file Functions.h. Static Public Member Functions; template<class A , class B , class T > ; static T f (const A &lhs, const B &rhs, const T &x);  . #include <Math/Functions.h>; Member Function Documentation. ◆ f(). template<unsigned int I> . template<class A , class B , class T > . static T ROOT::Math::meta_dot< I >::f ; (; const A & ; lhs, . const B & ; rhs, . const T & ; x . ). inlinestatic . Definition at line 136 of file Functions.h. The documentation for this struct was generated from the following file:; math/smatrix/inc/Math/Functions.h. ROOTMathmeta_dot. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:22 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structROOT_1_1Math_1_1meta__dot.html:104,Load,Loading,104,doc/master/structROOT_1_1Math_1_1meta__dot.html,https://root.cern,https://root.cern/doc/master/structROOT_1_1Math_1_1meta__dot.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::meta_mag< 0 > Struct Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Static Public Member Functions |; List of all members ; ROOT::Math::meta_mag< 0 > Struct Reference. . Definition at line 211 of file Functions.h. Static Public Member Functions; template<class A , class T > ; static T f (const A &rhs, const T &);  . #include <Math/Functions.h>; Member Function Documentation. ◆ f(). template<class A , class T > . static T ROOT::Math::meta_mag< 0 >::f ; (; const A & ; rhs, . const T & ;  . ). inlinestatic . Definition at line 213 of file Functions.h. The documentation for this struct was generated from the following file:; math/smatrix/inc/Math/Functions.h. ROOTMathmeta_mag< 0 >. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:22 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structROOT_1_1Math_1_1meta__mag_3_010_01_4.html:95,Load,Loading,95,doc/master/structROOT_1_1Math_1_1meta__mag_3_010_01_4.html,https://root.cern,https://root.cern/doc/master/structROOT_1_1Math_1_1meta__mag_3_010_01_4.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::meta_mag< I > Struct Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Static Public Member Functions |; List of all members ; ROOT::Math::meta_mag< I > Struct Template Reference. ; template<unsigned int I>; struct ROOT::Math::meta_mag< I >; Definition at line 199 of file Functions.h. Static Public Member Functions; template<class A , class T > ; static T f (const A &rhs, const T &x);  . #include <Math/Functions.h>; Member Function Documentation. ◆ f(). template<unsigned int I> . template<class A , class T > . static T ROOT::Math::meta_mag< I >::f ; (; const A & ; rhs, . const T & ; x . ). inlinestatic . Definition at line 201 of file Functions.h. The documentation for this struct was generated from the following file:; math/smatrix/inc/Math/Functions.h. ROOTMathmeta_mag. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:22 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structROOT_1_1Math_1_1meta__mag.html:104,Load,Loading,104,doc/master/structROOT_1_1Math_1_1meta__mag.html,https://root.cern,https://root.cern/doc/master/structROOT_1_1Math_1_1meta__mag.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::meta_matrix_dot< 0 > Struct Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Static Public Member Functions |; List of all members ; ROOT::Math::meta_matrix_dot< 0 > Struct Reference. . Definition at line 319 of file MatrixFunctions.h. Static Public Member Functions; template<class MatrixA , class MatrixB > ; static MatrixA::value_type f (const MatrixA &lhs, const MatrixB &rhs, const unsigned int offset);  ; template<class MatrixA , class MatrixB > ; static MatrixA::value_type g (const MatrixA &lhs, const MatrixB &rhs, unsigned int i, unsigned int j);  . #include <Math/MatrixFunctions.h>; Member Function Documentation. ◆ f(). template<class MatrixA , class MatrixB > . static MatrixA::value_type ROOT::Math::meta_matrix_dot< 0 >::f ; (; const MatrixA & ; lhs, . const MatrixB & ; rhs, . const unsigned int ; offset . ). inlinestatic . Definition at line 322 of file MatrixFunctions.h. ◆ g(). template<class MatrixA , class MatrixB > . static MatrixA::value_type ROOT::Math::meta_matrix_dot< 0 >::g ; (; const MatrixA & ; lhs, . const MatrixB & ; rhs, . unsigned int ; i, . unsigned int ; j . ). inlinestatic . Definition at line 331 of file MatrixFunctions.h. The documentation for this struct was generated from the following file:; math/smatrix/inc/Math/MatrixFunctions.h. ROOTMathmeta_matrix_dot< 0 >. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:22 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structROOT_1_1Math_1_1meta__matrix__dot_3_010_01_4.html:102,Load,Loading,102,doc/master/structROOT_1_1Math_1_1meta__matrix__dot_3_010_01_4.html,https://root.cern,https://root.cern/doc/master/structROOT_1_1Math_1_1meta__matrix__dot_3_010_01_4.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::meta_matrix_dot< I > Struct Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Static Public Member Functions |; List of all members ; ROOT::Math::meta_matrix_dot< I > Struct Template Reference. ; template<unsigned int I>; struct ROOT::Math::meta_matrix_dot< I >; Definition at line 292 of file MatrixFunctions.h. Static Public Member Functions; template<class MatrixA , class MatrixB > ; static MatrixA::value_type f (const MatrixA &lhs, const MatrixB &rhs, const unsigned int offset);  ; template<class MatrixA , class MatrixB > ; static MatrixA::value_type g (const MatrixA &lhs, const MatrixB &rhs, unsigned int i, unsigned int j);  . #include <Math/MatrixFunctions.h>; Member Function Documentation. ◆ f(). template<unsigned int I> . template<class MatrixA , class MatrixB > . static MatrixA::value_type ROOT::Math::meta_matrix_dot< I >::f ; (; const MatrixA & ; lhs, . const MatrixB & ; rhs, . const unsigned int ; offset . ). inlinestatic . Definition at line 295 of file MatrixFunctions.h. ◆ g(). template<unsigned int I> . template<class MatrixA , class MatrixB > . static MatrixA::value_type ROOT::Math::meta_matrix_dot< I >::g ; (; const MatrixA & ; lhs, . const MatrixB & ; rhs, . unsigned int ; i, . unsigned int ; j . ). inlinestatic . Definition at line 305 of file MatrixFunctions.h. The documentation for this struct was generated from the following file:; math/smatrix/inc/Math/MatrixFunctions.h. ROOTMathmeta_matrix_dot. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:22 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structROOT_1_1Math_1_1meta__matrix__dot.html:111,Load,Loading,111,doc/master/structROOT_1_1Math_1_1meta__matrix__dot.html,https://root.cern,https://root.cern/doc/master/structROOT_1_1Math_1_1meta__matrix__dot.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::meta_row_dot< 0 > Struct Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Static Public Member Functions |; List of all members ; ROOT::Math::meta_row_dot< 0 > Struct Reference. . Definition at line 97 of file MatrixFunctions.h. Static Public Member Functions; template<class A , class B > ; static A::value_type f (const A &lhs, const B &rhs, const unsigned int offset);  . #include <Math/MatrixFunctions.h>; Member Function Documentation. ◆ f(). template<class A , class B > . static A::value_type ROOT::Math::meta_row_dot< 0 >::f ; (; const A & ; lhs, . const B & ; rhs, . const unsigned int ; offset . ). inlinestatic . Definition at line 99 of file MatrixFunctions.h. The documentation for this struct was generated from the following file:; math/smatrix/inc/Math/MatrixFunctions.h. ROOTMathmeta_row_dot< 0 >. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:22 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structROOT_1_1Math_1_1meta__row__dot_3_010_01_4.html:99,Load,Loading,99,doc/master/structROOT_1_1Math_1_1meta__row__dot_3_010_01_4.html,https://root.cern,https://root.cern/doc/master/structROOT_1_1Math_1_1meta__row__dot_3_010_01_4.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::meta_row_dot< I > Struct Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Static Public Member Functions |; List of all members ; ROOT::Math::meta_row_dot< I > Struct Template Reference. ; template<unsigned int I>; struct ROOT::Math::meta_row_dot< I >; Definition at line 84 of file MatrixFunctions.h. Static Public Member Functions; template<class A , class B > ; static A::value_type f (const A &lhs, const B &rhs, const unsigned int offset);  . #include <Math/MatrixFunctions.h>; Member Function Documentation. ◆ f(). template<unsigned int I> . template<class A , class B > . static A::value_type ROOT::Math::meta_row_dot< I >::f ; (; const A & ; lhs, . const B & ; rhs, . const unsigned int ; offset . ). inlinestatic . Definition at line 86 of file MatrixFunctions.h. The documentation for this struct was generated from the following file:; math/smatrix/inc/Math/MatrixFunctions.h. ROOTMathmeta_row_dot. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:22 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structROOT_1_1Math_1_1meta__row__dot.html:108,Load,Loading,108,doc/master/structROOT_1_1Math_1_1meta__row__dot.html,https://root.cern,https://root.cern/doc/master/structROOT_1_1Math_1_1meta__row__dot.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Math::rowOffsetsUtils Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Functions ; ROOT::Math::rowOffsetsUtils Namespace Reference. Classes; struct  indices;  ; struct  make_indices;  ; struct  make_indices_impl;  ; struct  make_indices_impl< I, indices< Indices... >, N >;  ; struct  make_indices_impl< N, indices< Indices... >, N >;  . Functions; template<int I0, class F , int... I> ; constexpr std::array< decltype(std::declval< F >()(std::declval< int >())), sizeof...(I)> do_make (F f, indices< I... >);  ; template<int N, int I0 = 0, class F > ; constexpr std::array< decltype(std::declval< F >()(std::declval< int >())), N > make (F f);  . Function Documentation. ◆ do_make(). template<int I0, class F , int... I> . constexpr std::array< decltype(std::declval< F >()(std::declval< int >())), sizeof...(I)> ROOT::Math::rowOffsetsUtils::do_make ; (; F ; f, . indices< I... > ;  . ). constexpr . Definition at line 178 of file MatrixRepresentationsStatic.h. ◆ make(). template<int N, int I0 = 0, class F > . constexpr std::array< decltype(std::declval< F >()(std::declval< int >())), N > ROOT::Math::rowOffsetsUtils::make ; (; F ; f). constexpr . Definition at line 186 of file MatrixRepresentationsStatic.h. ROOTMathrowOffsetsUtils. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:25 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1rowOffsetsUtils.html:100,Load,Loading,100,doc/master/namespaceROOT_1_1Math_1_1rowOffsetsUtils.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1rowOffsetsUtils.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::MathMore Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Functions ; ROOT::MathMore Namespace Reference. Functions; double chisquared_quantile (double z, double r);  Re-implementation in MathMore of the Inverse ( \(D^{-1}(z)\)) of the cumulative distribution function of the lower tail of the \(\chi^2\) distribution with \(r\) degrees of freedom (ROOT::Math::chisquared_cdf). ;  ; double gamma_quantile (double z, double alpha, double theta);  Re-implementation in MathMore of the Inverse ( \(D^{-1}(z)\)) of the cumulative distribution function of the lower tail of the gamma distribution (ROOT::Math::gamma_cdf). ;  . ROOTMathMore. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:25 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1MathMore.html:87,Load,Loading,87,doc/master/namespaceROOT_1_1MathMore.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1MathMore.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::MathMore Namespace Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. Functions ; ROOT::MathMore Namespace Reference. Functions; double chisquared_quantile (double z, double r);  Re-implementation in MathMore of the Inverse ( \(D^{-1}(z)\)) of the cumulative distribution function of the lower tail of the \(\chi^2\) distribution with \(r\) degrees of freedom (ROOT::Math::chisquared_cdf). ;  ; double gamma_quantile (double z, double alpha, double theta);  Re-implementation in MathMore of the Inverse ( \(D^{-1}(z)\)) of the cumulative distribution function of the lower tail of the gamma distribution (ROOT::Math::gamma_cdf). ;  . ROOTMathMore. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:14:02 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/namespaceROOT_1_1MathMore.html:86,Load,Loading,86,doc/v632/namespaceROOT_1_1MathMore.html,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1MathMore.html,1,['Load'],['Loading']
Performance,. ROOT: ROOT::Meta Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; ROOT::Meta Namespace Reference. Namespaces; namespace  Selection;  . ROOTMeta. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:25 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Meta.html:83,Load,Loading,83,doc/master/namespaceROOT_1_1Meta.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Meta.html,1,['Load'],['Loading']
Performance,. ROOT: ROOT::Meta Namespace Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; ROOT::Meta Namespace Reference. Namespaces; namespace  Selection;  . ROOTMeta. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:14:02 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/namespaceROOT_1_1Meta.html:82,Load,Loading,82,doc/v632/namespaceROOT_1_1Meta.html,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Meta.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Minuit Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Enumerations ; ROOT::Minuit Namespace Reference. Enumerations; enum  EMinimizerType { ;   kMigrad; , kSimplex; , kCombined; , kMigradImproved; , ;   kScan; , kSeek. };  . Enumeration Type Documentation. ◆ EMinimizerType. enum ROOT::Minuit::EMinimizerType. EnumeratorkMigrad ; kSimplex ; kCombined ; kMigradImproved ; kScan ; kSeek . Definition at line 31 of file TMinuitMinimizer.h. ROOTMinuit. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:25 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Minuit.html:85,Load,Loading,85,doc/master/namespaceROOT_1_1Minuit.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Minuit.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Minuit Namespace Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. Enumerations ; ROOT::Minuit Namespace Reference. Enumerations; enum  EMinimizerType { ;   kMigrad; , kSimplex; , kCombined; , kMigradImproved; , ;   kScan; , kSeek. };  . Enumeration Type Documentation. ◆ EMinimizerType. enum ROOT::Minuit::EMinimizerType. EnumeratorkMigrad ; kSimplex ; kCombined ; kMigradImproved ; kScan ; kSeek . Definition at line 31 of file TMinuitMinimizer.h. ROOTMinuit. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:14:02 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/namespaceROOT_1_1Minuit.html:84,Load,Loading,84,doc/v632/namespaceROOT_1_1Minuit.html,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Minuit.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Minuit2 Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Typedefs |; Enumerations |; Functions |; Variables ; ROOT::Minuit2 Namespace Reference. Classes; class  ABObj;  ; class  ABObj< sym, LASymMatrix, double >;  ; class  ABObj< vec, LAVector, double >;  ; class  ABProd;  ; class  ABSum;  ; class  AlgebraicProdType;  ; class  AlgebraicProdType< gen, gen >;  ; class  AlgebraicProdType< gen, sym >;  ; class  AlgebraicProdType< gen, vec >;  ; class  AlgebraicProdType< sym, gen >;  ; class  AlgebraicProdType< sym, sym >;  ; class  AlgebraicProdType< sym, vec >;  ; class  AlgebraicProdType< T, T >;  ; class  AlgebraicProdType< vec, gen >;  ; class  AlgebraicProdType< vec, sym >;  ; class  AlgebraicSumType;  ; class  AlgebraicSumType< gen, vec >;  ; class  AlgebraicSumType< sym, vec >;  ; class  AlgebraicSumType< T, T >;  ; class  AlgebraicSumType< vec, gen >;  ; class  AlgebraicSumType< vec, sym >;  ; class  AnalyticalGradientCalculator;  ; class  BFGSErrorUpdator;  Update of the covariance matrix for the Variable Metric minimizer (MIGRAD) More...;  ; class  BFGSMinimizerType;  ; class  CombinedMinimizer;  Combined minimizer: combination of Migrad and Simplex. More...;  ; class  CombinedMinimumBuilder;  ; class  ContoursError;  ; class  DavidonErrorUpdator;  Update of the covariance matrix for the Variable Metric minimizer (MIGRAD) More...;  ; struct  DerivatorElement;  ; class  ExternalInternalGradientCalculator;  Similar to the AnalyticalGradientCalculator, the ExternalInternalGradientCalculator supplies Minuit with an externally calculated gradient. More...;  ; class  FCNAdapter;  template wrapped class for adapting to FCNBase signature More...;  ; class  FCNBase;  Interface (abstract class) defining the function to be minimized, which has to be implemented by the user. More...;  ; class  FCNGradAdapter;  template wrapped class for adapting to FCNBase signature a IGradFunction More...;  ; cl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Minuit2.html:86,Load,Loading,86,doc/master/namespaceROOT_1_1Minuit2.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Minuit2.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Minuit2 Namespace Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Typedefs |; Enumerations |; Functions |; Variables ; ROOT::Minuit2 Namespace Reference. Classes; class  ABObj;  ; class  ABObj< sym, LASymMatrix, double >;  ; class  ABObj< vec, LAVector, double >;  ; class  ABProd;  ; class  ABSum;  ; class  AlgebraicProdType;  ; class  AlgebraicProdType< gen, gen >;  ; class  AlgebraicProdType< gen, sym >;  ; class  AlgebraicProdType< gen, vec >;  ; class  AlgebraicProdType< sym, gen >;  ; class  AlgebraicProdType< sym, sym >;  ; class  AlgebraicProdType< sym, vec >;  ; class  AlgebraicProdType< T, T >;  ; class  AlgebraicProdType< vec, gen >;  ; class  AlgebraicProdType< vec, sym >;  ; class  AlgebraicSumType;  ; class  AlgebraicSumType< gen, vec >;  ; class  AlgebraicSumType< sym, vec >;  ; class  AlgebraicSumType< T, T >;  ; class  AlgebraicSumType< vec, gen >;  ; class  AlgebraicSumType< vec, sym >;  ; class  AnalyticalGradientCalculator;  ; class  BFGSErrorUpdator;  Update of the covariance matrix for the Variable Metric minimizer (MIGRAD) More...;  ; class  BFGSMinimizerType;  ; class  CombinedMinimizer;  Combined minimizer: combination of Migrad and Simplex. More...;  ; class  CombinedMinimumBuilder;  ; class  ContoursError;  ; class  DavidonErrorUpdator;  Update of the covariance matrix for the Variable Metric minimizer (MIGRAD) More...;  ; struct  DerivatorElement;  ; class  ExternalInternalGradientCalculator;  Similar to the AnalyticalGradientCalculator, the ExternalInternalGradientCalculator supplies Minuit with an externally calculated gradient. More...;  ; class  FCNAdapter;  template wrapped class for adapting to FCNBase signature More...;  ; class  FCNBase;  Interface (abstract class) defining the function to be minimized, which has to be implemented by the user. More...;  ; class  FCNGradAdapter;  template wrapped class for adapting to FCNBase signature a IGradFunction More...;  ; cla",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/namespaceROOT_1_1Minuit2.html:85,Load,Loading,85,doc/v632/namespaceROOT_1_1Minuit2.html,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Minuit2.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Minuit2::Minuit2Minimizer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; ROOT::Minuit2::Minuit2Minimizer Class ReferenceMath » Minuit2 Minimization Library. ; Minuit2Minimizer class implementing the ROOT::Math::Minimizer interface for Minuit2 minimization algorithm. ; In ROOT it can be instantiated using the plug-in manager (plug-in ""Minuit2"") Using a string (used by the plugin manager) or via an enumeration an one can set all the possible minimization algorithms (Migrad, Simplex, Combined, Scan and Fumili).; Refer to the guide for an introduction how Minuit works. ; Definition at line 54 of file Minuit2Minimizer.h. Public Member Functions;  Minuit2Minimizer (const char *type);  Constructor with a char (used by PM) ;  ;  Minuit2Minimizer (ROOT::Minuit2::EMinimizerType type=ROOT::Minuit2::kMigrad);  Default constructor. ;  ;  ~Minuit2Minimizer () override;  Destructor (no operations) ;  ; void Clear () override;  reset for consecutive minimization - implement if needed ;  ; bool Contour (unsigned int i, unsigned int j, unsigned int &npoints, double *xi, double *xj) override;  find the contour points (xi,xj) of the function for parameter i and j around the minimum The contour will be find for value of the function = Min + ErrorUp(); ;  ; double Correlation (unsigned int i, unsigned int j) const override;  return correlation coefficient between variable i and j. ;  ; double CovMatrix (unsigned int i, unsigned int j) const override;  return covariance matrix elements if the variable is fixed or const the value is zero The ordering of the variables is the same as in errors and parameter value. ;  ; int CovMatrixStatus () const override;  return the status of the covariance matrix status = -1 : not available (inversion failed or Hesse failed) status = 0 : available but not positive defin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Minuit2_1_1Minuit2Minimizer.html:100,Load,Loading,100,doc/master/classROOT_1_1Minuit2_1_1Minuit2Minimizer.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Minuit2_1_1Minuit2Minimizer.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Quartz Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Functions |; Variables ; ROOT::Quartz Namespace Reference. Classes; class  CGAAStateGuard;  ; class  CGStateGuard;  ; class  TextLine;  . Functions; void DrawBox (CGContextRef ctx, Int_t x1, Int_t y1, Int_t x2, Int_t y2, bool hollow);  ; void DrawFillArea (CGContextRef ctx, Int_t n, TPoint *xy, Bool_t drawShadow);  ; void DrawLine (CGContextRef ctx, Int_t x1, Int_t y1, Int_t x2, Int_t y2);  ; void DrawMarkerDot (CGContextRef ctx, unsigned n, const TPoint *xy, Size_t markerSize);  ; void DrawMarkerFourSquaresPlus (CGContextRef ctx, unsigned n, const TPoint *xy, Size_t markerSize);  ; void DrawMarkerFourSquaresX (CGContextRef ctx, unsigned n, const TPoint *xy, Size_t markerSize);  ; void DrawMarkerFullCross (CGContextRef ctx, unsigned n, const TPoint *xy, Size_t markerSize);  ; void DrawMarkerFullCrossX (CGContextRef ctx, unsigned n, const TPoint *xy, Size_t markerSize);  ; void DrawMarkerFullDiamond (CGContextRef ctx, unsigned n, const TPoint *xy, Size_t markerSize);  ; void DrawMarkerFullDotLarge (CGContextRef ctx, unsigned n, const TPoint *xy, Size_t markerSize);  ; void DrawMarkerFullDotMedium (CGContextRef ctx, unsigned n, const TPoint *xy);  ; void DrawMarkerFullDotSmall (CGContextRef ctx, unsigned n, const TPoint *xy);  ; void DrawMarkerFullDoubleDiamond (CGContextRef ctx, unsigned n, const TPoint *xy, Size_t markerSize);  ; void DrawMarkerFullFourTrianglesPlus (CGContextRef ctx, unsigned n, const TPoint *xy, Size_t markerSize);  ; void DrawMarkerFullFourTrianglesX (CGContextRef ctx, unsigned n, const TPoint *xy, Size_t markerSize);  ; void DrawMarkerFullSquare (CGContextRef ctx, unsigned n, const TPoint *xy, Size_t markerSize);  ; void DrawMarkerFullStar (CGContextRef ctx, unsigned n, const TPoint *xy, Size_t markerSize);  ; void DrawMarkerFullThreeTriangles (CGContextRef ctx, unsigned n, const TPoint *xy, Size_t markerSize);  ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Quartz.html:85,Load,Loading,85,doc/master/namespaceROOT_1_1Quartz.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Quartz.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::Quartz Namespace Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Functions |; Variables ; ROOT::Quartz Namespace Reference. Classes; class  CGAAStateGuard;  ; class  CGStateGuard;  ; class  TextLine;  . Functions; void DrawBox (CGContextRef ctx, Int_t x1, Int_t y1, Int_t x2, Int_t y2, bool hollow);  ; void DrawFillArea (CGContextRef ctx, Int_t n, TPoint *xy, Bool_t drawShadow);  ; void DrawLine (CGContextRef ctx, Int_t x1, Int_t y1, Int_t x2, Int_t y2);  ; void DrawMarkerDot (CGContextRef ctx, unsigned n, const TPoint *xy, Size_t markerSize);  ; void DrawMarkerFourSquaresPlus (CGContextRef ctx, unsigned n, const TPoint *xy, Size_t markerSize);  ; void DrawMarkerFourSquaresX (CGContextRef ctx, unsigned n, const TPoint *xy, Size_t markerSize);  ; void DrawMarkerFullCross (CGContextRef ctx, unsigned n, const TPoint *xy, Size_t markerSize);  ; void DrawMarkerFullCrossX (CGContextRef ctx, unsigned n, const TPoint *xy, Size_t markerSize);  ; void DrawMarkerFullDiamond (CGContextRef ctx, unsigned n, const TPoint *xy, Size_t markerSize);  ; void DrawMarkerFullDotLarge (CGContextRef ctx, unsigned n, const TPoint *xy, Size_t markerSize);  ; void DrawMarkerFullDotMedium (CGContextRef ctx, unsigned n, const TPoint *xy);  ; void DrawMarkerFullDotSmall (CGContextRef ctx, unsigned n, const TPoint *xy);  ; void DrawMarkerFullDoubleDiamond (CGContextRef ctx, unsigned n, const TPoint *xy, Size_t markerSize);  ; void DrawMarkerFullFourTrianglesPlus (CGContextRef ctx, unsigned n, const TPoint *xy, Size_t markerSize);  ; void DrawMarkerFullFourTrianglesX (CGContextRef ctx, unsigned n, const TPoint *xy, Size_t markerSize);  ; void DrawMarkerFullSquare (CGContextRef ctx, unsigned n, const TPoint *xy, Size_t markerSize);  ; void DrawMarkerFullStar (CGContextRef ctx, unsigned n, const TPoint *xy, Size_t markerSize);  ; void DrawMarkerFullThreeTriangles (CGContextRef ctx, unsigned n, const TPoint *xy, Size_t markerSize);  ; v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/namespaceROOT_1_1Quartz.html:84,Load,Loading,84,doc/v632/namespaceROOT_1_1Quartz.html,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Quartz.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::R Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Typedefs |; Functions |; Variables ; ROOT::R Namespace Reference. namespace associated R package for ROOT. ; More... Classes; class  class_;  ; class  TRDataFrame;  This is a class to create DataFrames from ROOT to R. More...;  ; class  TRFunctionExport;  This is a class to pass functions from ROOT to R. More...;  ; class  TRFunctionImport;  This is a class to pass functions from ROOT to R. More...;  ; class  TRInterface;  ROOT R was implemented using the R Project library and the modules Rcpp and RInside More...;  ; class  TRObject;  This is a class to get ROOT's objects from R's objects. More...;  . Typedefs; typedef Rcpp::TRInternalFunction_Impl< Rcpp::PreserveStorage > TRInternalFunction;  . Functions; template<class T > ; void function (const Char_t *name_, T fun, const Char_t *docstring=0);  ; const Rcpp::internal::NamedPlaceHolder & Label (Rcpp::_);  ; char * R_completion_generator (const char *text, int state);  ; char ** R_custom_completion (const char *text, int start, int end);  . Variables; const Rcpp::internal::NamedPlaceHolder & Label;  ; VARIABLE_IS_NOT_USED SEXP ModuleSymRef = NULL;  ; SEXP RComp_assignBufferSym;  ; SEXP RComp_assignEndSym;  ; SEXP RComp_assignStartSym;  ; SEXP RComp_assignTokenSym;  ; SEXP RComp_completeTokenSym;  ; SEXP RComp_getFileCompSym;  ; SEXP RComp_retrieveCompsSym;  ; SEXP rcompgen_rho;  . Detailed Description; namespace associated R package for ROOT. ; Typedef Documentation. ◆ TRInternalFunction. typedef Rcpp::TRInternalFunction_Impl<Rcpp::PreserveStorage> ROOT::R::TRInternalFunction. Definition at line 61 of file TRInternalFunction.h. Function Documentation. ◆ function(). template<class T > . void ROOT::R::function ; (; const Char_t * ; name_, . T ; fun, . const Char_t * ; docstring = 0 . ). Definition at line 167 of file RExports.h. ◆ Label(). const Rcpp::internal::NamedPlaceHolder & ROOT::R::La",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1R.html:80,Load,Loading,80,doc/master/namespaceROOT_1_1R.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1R.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::R Namespace Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Typedefs |; Functions |; Variables ; ROOT::R Namespace Reference. namespace associated R package for ROOT. ; More... Classes; class  class_;  ; class  TRDataFrame;  This is a class to create DataFrames from ROOT to R. More...;  ; class  TRFunctionExport;  This is a class to pass functions from ROOT to R. More...;  ; class  TRFunctionImport;  This is a class to pass functions from ROOT to R. More...;  ; class  TRInterface;  ROOT R was implemented using the R Project library and the modules Rcpp and RInside More...;  ; class  TRObject;  This is a class to get ROOT's objects from R's objects. More...;  . Typedefs; typedef Rcpp::TRInternalFunction_Impl< Rcpp::PreserveStorage > TRInternalFunction;  . Functions; template<class T > ; void function (const Char_t *name_, T fun, const Char_t *docstring=0);  ; const Rcpp::internal::NamedPlaceHolder & Label (Rcpp::_);  ; char * R_completion_generator (const char *text, int state);  ; char ** R_custom_completion (const char *text, int start, int end);  . Variables; const Rcpp::internal::NamedPlaceHolder & Label;  ; VARIABLE_IS_NOT_USED SEXP ModuleSymRef = NULL;  ; SEXP RComp_assignBufferSym;  ; SEXP RComp_assignEndSym;  ; SEXP RComp_assignStartSym;  ; SEXP RComp_assignTokenSym;  ; SEXP RComp_completeTokenSym;  ; SEXP RComp_getFileCompSym;  ; SEXP RComp_retrieveCompsSym;  ; SEXP rcompgen_rho;  . Detailed Description; namespace associated R package for ROOT. ; Typedef Documentation. ◆ TRInternalFunction. typedef Rcpp::TRInternalFunction_Impl<Rcpp::PreserveStorage> ROOT::R::TRInternalFunction. Definition at line 61 of file TRInternalFunction.h. Function Documentation. ◆ function(). template<class T > . void ROOT::R::function ; (; const Char_t * ; name_, . T ; fun, . const Char_t * ; docstring = 0 . ). Definition at line 167 of file RExports.h. ◆ Label(). const Rcpp::internal::NamedPlaceHolder & ROOT::R::Lab",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/namespaceROOT_1_1R.html:79,Load,Loading,79,doc/v632/namespaceROOT_1_1R.html,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1R.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::R::TRDataFrame Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Friends |; List of all members ; ROOT::R::TRDataFrame Class ReferenceR Interface for Statistical Computing. ; This is a class to create DataFrames from ROOT to R. ; TRDataFrame class; DataFrame is a very important datatype in R and in ROOTR we have a class to manipulate; dataframes called TRDataFrame, with a lot of very useful operators overloaded to work with TRDataFrame's objects; in a similar way that in the R environment but from c++ in ROOT.; Example:. Lets to create need data to play with dataframe features. Creating variables. TVectorD v1(3);; std::vector<Double_t> v2(3);; std::array<Int_t,3> v3{ {1,2,3} };; std::list<std::string> names;; TVectorT< Double_t >; v2@ v2Definition rootcling_impl.cxx:3702; v3@ v3Definition rootcling_impl.cxx:3703; v1@ v1Definition rootcling_impl.cxx:3701; Assigning values . v1[0]=1;; v1[1]=2;; v1[2]=3;; ; v2[0]=0.101;; v2[1]=0.202;; v2[2]=0.303;; ; names.push_back(""v1"");; names.push_back(""v2"");; names.push_back(""v3"");; ; ROOT::R::TRInterface &r=ROOT::R::TRInterface::Instance();; rOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t rDefinition TGWin32VirtualXProxy.cxx:168; ROOT::R::TRInterfaceROOT R was implemented using the R Project library and the modules Rcpp and RInsideDefinition TRInterface.h:136; ROOT::R::TRInterface::Instancestatic TRInterface & Instance()static method to get an TRInterface instance referenceDefinition TRInterface.cxx:187; In R the dataframe have associate to every column a label, in ROOTR you can have the same label using the class ROOT::R::Label to create a TRDataFrame where you data have a label associate. Cre",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1R_1_1TRDataFrame.html:89,Load,Loading,89,doc/master/classROOT_1_1R_1_1TRDataFrame.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRDataFrame.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::R::TRFunctionExport Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Friends |; List of all members ; ROOT::R::TRFunctionExport Class ReferenceR Interface for Statistical Computing. ; This is a class to pass functions from ROOT to R. ; TRFunctionExport class; The TRFunctionExport class lets you pass ROOT's functions to R's environment. The next example was based in ; https://root.cern/doc/master/NumericalMinimization_8C.html ; http://stat.ethz.ch/R-manual/R-devel/library/stats/html/optim.html. Let \( f(x,y)=(x-1)^{2} + 100(y-x^{2})^{2} \) , which is called the Rosenbrock function.; It's known that this function has a minimum when \( y = x^{2}\) , and \( x = 1.\) Let's get the minimum using R's optim package through ROOTR's interface. In the code this function was called ""Double_t RosenBrock(const TVectorD xx )"", because for optim, the input in your function definition must be a single vector.; The Gradient is formed by; \( \frac{\partial f}{\partial x} = -400x(y - x^{2}) - 2(1 - x) \); \( \frac{\partial f}{\partial y} = 200(y - x^{2}); \); The ""TVectorD RosenBrockGrad(const TVectorD xx )"" function must have a single vector as the argument a it will return a single vetor.; #include<TRInterface.h>; ; //in the next function the pointer *double must be changed by TVectorD, because the pointer has no; //sense in R's environment.; Double_t RosenBrock(const TVectorD xx ); {; const Double_t x = xx[0];; const Double_t y = xx[1];; const Double_t tmp1 = y-x*x;; const Double_t tmp2 = 1-x;; return 100*tmp1*tmp1+tmp2*tmp2;; }; ; TVectorD RosenBrockGrad(const TVectorD xx ); {; const Double_t x = xx[0];; const Double_t y = xx[1];; TVectorD grad(2);; grad[0]=-400 * x * (y - x * x) - 2 * (1 - x);; grad[1]=200 * (y - x * x);; return grad;; }; ; ; void Minimization(); {; ROOT::R::TRInterface &r=ROOT::R::TRInterface::In",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionExport.html:94,Load,Loading,94,doc/master/classROOT_1_1R_1_1TRFunctionExport.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionExport.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::R::TRFunctionImport Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Friends |; List of all members ; ROOT::R::TRFunctionImport Class ReferenceR Interface for Statistical Computing. ; This is a class to pass functions from ROOT to R. ; TRFunctionImport class; The TRFunctionImport class lets you call R's functions to ROOT's environment; The object associated to this class have a set of overloaded operators to use the object like function. #include<TRInterface.h>; ; using namespace ROOT::R;; void Function(); {; TRInterface &r = TRInterface::Instance();; r.SetVerbose(1);; ////////////////////////////////////////; //defining functions to be used from R//; ////////////////////////////////////////; TRFunctionImport c(""c"");; TRFunctionImport list(""list"");; TRFunctionImport asformula(""as.formula"");; TRFunctionImport nls(""nls"");; TRFunctionImport confint(""confint"");; TRFunctionImport summary(""summary"");; TRFunctionImport print(""print"");; TRFunctionImport plot(""plot"");; TRFunctionImport lines(""lines"");; TRFunctionImport devnew(""dev.new"");; TRFunctionImport devoff(""dev.off"");; TRFunctionImport min(""min"");; TRFunctionImport max(""max"");; TRFunctionImport seq(""seq"");; TRFunctionImport predict(""predict"");; ; r<<""options(device='png')"";//enable plot in png file; ; ////////////////////////; //doing the procedure //; ////////////////////////; TRObject xdata = c(-2,-1.64,-1.33,-0.7,0,0.45,1.2,1.64,2.32,2.9);; TRObject ydata = c(0.699369,0.700462,0.695354,1.03905,1.97389,2.41143,1.91091,0.919576,-0.730975,-1.42001);; ; TRDataFrame data;; data[""xdata""]=xdata;; data[""ydata""]=ydata;; ; //fit = nls(ydata ~ p1*cos(p2*xdata) + p2*sin(p1*xdata), start=list(p1=1,p2=0.2)) <- R code; TRObject fit = nls(asformula(""ydata ~ p1*cos(p2*xdata) + p2*sin(p1*xdata)""),Label[""data""]=data, Label[""start""]=list(L",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionImport.html:94,Load,Loading,94,doc/master/classROOT_1_1R_1_1TRFunctionImport.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionImport.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::R::TRInterface Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; ROOT::R::TRInterface Class ReferenceR Interface for Statistical Computing. ; ROOT R was implemented using the R Project library and the modules Rcpp and RInside ; TRInterface class; The TRInterface class lets you process R code from ROOT.; You can call R libraries and their functions, plot results in R or ROOT,; and use the power of ROOT and R at the same time.; It also lets you pass scalars, vectors and matrices from ROOT to R; and from R to ROOT using TRObject; but you can to use overloaded operators [],<< and >> ; to work with ROOTR like work with streams of data. TRInterface class can not be instantiated directly, but you can create objects using the static methods TRInterface& Instance() and TRInterface* InstancePtr() to create your own objects. Show an example below: Create an exponential fit, the idea is to create a set of numbers x,y with noise from ROOT, pass them to R and fit the data to \( x^3 \), get the fitted coefficient(power) and plot the data, the known function and the fitted function. TCanvas *c1 = new TCanvas(""c1"",""Curve Fit"",700,500);; c1->SetGrid();; ; // draw a frame for multiples graphs; TMultiGraph *mg = new TMultiGraph();; ; // create the first graph (points with gaussian noise); const Int_t n = 24;; Double_t x[n] ;; Double_t y[n] ;; //Generate points along a X^3 with noise; TRandom rg;; rg.SetSeed(520);; for (Int_t i = 0; i < n; i++) {; x[i] = rg.Uniform(0, 1);; y[i] = TMath::Power(x[i], 3) + rg.Gaus() * 0.06;; }; ; TGraph *gr1 = new TGraph(n,x,y);; gr1->SetMarkerColor(kBlue);; gr1->SetMarkerStyle(8);; gr1->SetMarkerSize(1);; mg->Add(gr1);; ; // create second graph; TF1 *f_known=new TF1(""f_known"",""pow(x,3)"",0,1);; TGraph *gr2 = new TGraph(f_known);; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html:89,Load,Loading,89,doc/master/classROOT_1_1R_1_1TRInterface.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::R::TRObject Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; Friends |; List of all members ; ROOT::R::TRObject Class ReferenceR Interface for Statistical Computing. ; This is a class to get ROOT's objects from R's objects. ; TRObject class; The TRObject class lets you obtain ROOT's objects from R's objects.; It has some basic template operators to convert R's objects into ROOT's datatypes. A simple example. #include<TRInterface.h>; void Proxy(); {; ROOT::R::TRInterface &r=ROOT::R::TRInterface::Instance();; ROOT::R::TRObject obj;; obj=r.Eval(""seq(1,10)"");; TVectorD v=obj;; v.Print();; }; Proxyvoid Proxy()Definition Proxy.C:4; rOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t rDefinition TGWin32VirtualXProxy.cxx:168; TRInterface.h; ROOT::R::TRInterfaceROOT R was implemented using the R Project library and the modules Rcpp and RInsideDefinition TRInterface.h:136; ROOT::R::TRInterface::Instancestatic TRInterface & Instance()static method to get an TRInterface instance referenceDefinition TRInterface.cxx:187; ROOT::R::TRObjectThis is a class to get ROOT's objects from R's objects.Definition TRObject.h:70; TObject::Printvirtual void Print(Option_t *option="""") constThis method must be overridden when a class wants to print itself.Definition TObject.cxx:642; TVectorT< Double_t >; v@ vDefinition rootcling_impl.cxx:3699; Output Vector (10) is as follows; ; | 1 |; ------------------; 0 |1; 1 |2; 2 |3; 3 |4; 4 |5; 5 |6; 6 |7; 7 |8; 8 |9; 9 |10; Users Guide ; https://oproject.org/pages/ROOT R Users Guide. Definition at line 70 of file TRObject.h. Public Member Functions;  TRObject ();  Default constructor. ;  ;  TRObject (SEXP robj);  Construct a TRObject ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1R_1_1TRObject.html:86,Load,Loading,86,doc/master/classROOT_1_1R_1_1TRObject.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRObject.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::RBrowser Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Protected Attributes |; Friends |; List of all members ; ROOT::RBrowser Class ReferenceWeb Widgets » Browsable object | Web Widgets. ; Web-based ROOT files and objects browser. . Definition at line 27 of file RBrowser.hxx. Public Member Functions;  RBrowser (bool use_rcanvas=false);  constructor ;  ; virtual ~RBrowser ();  destructor ;  ; bool ActivateWidget (const std::string &title, const std::string &kind="""");  Activate widget in RBrowser One should specify title and (optionally) kind of widget like ""tcanvas"" or ""geom"". ;  ; void AddRCanvas ();  ; void AddTCanvas ();  ; void ClearOnClose (const std::shared_ptr< void > &handle);  Set handle which will be cleared when connection is closed. ;  ; bool GetCatchWindowShow () const;  Is RWebWindow::Show calls catched for embeding of created widgets. ;  ; bool GetUseRCanvas () const;  ; std::string GetWindowUrl (bool remote);  Return URL parameter for the window showing ROOT Browser See ROOT::RWebWindow::GetUrl docu for more details. ;  ; void Hide ();  hide Browser ;  ; void SetCatchWindowShow (bool on=true);  Enable/disable catch of RWebWindow::Show calls to embed created widgets, default on. ;  ; void SetUseRCanvas (bool on=true);  ; void SetWorkingPath (const std::string &path);  Set working path in the browser. ;  ; void Show (const RWebDisplayArgs &args="""", bool always_start_new_browser=false);  show Browser in specified place ;  . Protected Member Functions; std::shared_ptr< RBrowserWidget > AddCatchedWidget (RWebWindow *win, const std::string &kind);  Add widget catched from external scripts. ;  ; void AddInitWidget (const std::string &kind);  Create new widget and send init message to the client. ;  ; std::shared_ptr< RBrowserWidget > AddWidget (const std::string &kind);  Creates new widget. ;  ; void CheckWidgtesMo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RBrowser.html:83,Load,Loading,83,doc/master/classROOT_1_1RBrowser.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RBrowser.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::RBrowser Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Protected Attributes |; Friends |; List of all members ; ROOT::RBrowser Class ReferenceWeb Widgets » Browsable object. ; Web-based ROOT files and objects browser. . Definition at line 27 of file RBrowser.hxx. Public Member Functions;  RBrowser (bool use_rcanvas=false);  constructor ;  ; virtual ~RBrowser ();  destructor ;  ; bool ActivateWidget (const std::string &title, const std::string &kind="""");  Activate widget in RBrowser One should specify title and (optionally) kind of widget like ""tcanvas"" or ""geom"". ;  ; void AddRCanvas ();  ; void AddTCanvas ();  ; void ClearOnClose (const std::shared_ptr< void > &handle);  Set handle which will be cleared when connection is closed. ;  ; bool GetCatchWindowShow () const;  Is RWebWindow::Show calls catched for embeding of created widgets. ;  ; bool GetUseRCanvas () const;  ; std::string GetWindowUrl (bool remote);  Return URL parameter for the window showing ROOT Browser See ROOT::RWebWindow::GetUrl docu for more details. ;  ; void Hide ();  hide Browser ;  ; void SetCatchWindowShow (bool on=true);  Enable/disable catch of RWebWindow::Show calls to embed created widgets, default on. ;  ; void SetUseRCanvas (bool on=true);  ; void SetWorkingPath (const std::string &path);  Set working path in the browser. ;  ; void Show (const RWebDisplayArgs &args="""", bool always_start_new_browser=false);  show Browser in specified place ;  . Protected Member Functions; std::shared_ptr< RBrowserWidget > AddCatchedWidget (RWebWindow *win, const std::string &kind);  Add widget catched from external scripts. ;  ; void AddInitWidget (const std::string &kind);  Create new widget and send init message to the client. ;  ; std::shared_ptr< RBrowserWidget > AddWidget (const std::string &kind);  Creates new widget. ;  ; void CheckWidgtesModified ();  Che",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RBrowser.html:82,Load,Loading,82,doc/v632/classROOT_1_1RBrowser.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RBrowser.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::RBrowserCatchedWidget Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; ROOT::RBrowserCatchedWidget Class Reference. . Definition at line 235 of file RBrowser.cxx. Public Member Functions;  RBrowserCatchedWidget (const std::string &name, RWebWindow *win, const std::string &kind);  ; std::string GetKind () const override;  ; std::string GetTitle () override;  ; std::string GetUrl () override;  ; bool IsValid () override;  ; void Show (const std::string &) override;  ;  Public Member Functions inherited from ROOT::RBrowserWidget;  RBrowserWidget (const std::string &name);  ; virtual ~RBrowserWidget ()=default;  ; virtual void CheckModified ();  ; virtual bool DrawElement (std::shared_ptr< Browsable::RElement > &, const std::string &="""");  ; RBrowser * GetBrowser () const;  ; const std::string & GetName () const;  ; const Browsable::RElementPath_t & GetPath () const;  ; virtual void ResetConn ();  ; virtual std::string SendWidgetContent ();  ; std::string SendWidgetTitle ();  Returns string which can be send to browser client to set/change title of the widget tab. ;  ; virtual void SetActive ();  ; void SetPath (const Browsable::RElementPath_t &path);  . Public Attributes; std::string fCatchedKind;  ; RWebWindow * fWindow {nullptr};  . Inheritance diagram for ROOT::RBrowserCatchedWidget:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RBrowserCatchedWidget(). ROOT::RBrowserCatchedWidget::RBrowserCatchedWidget ; (; const std::string & ; name, . RWebWindow * ; win, . const std::string & ; kind . ). inline . Definition at line 251 of file RBrowser.cxx. Member Function Documentation. ◆ GetKind(). std::string ROOT::RBrowserCatchedWidget::GetKind ; (; ); const. inlineoverridevirtual . Implements ROOT::RBrowserWidget.; Definition at li",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RBrowserCatchedWidget.html:96,Load,Loading,96,doc/master/classROOT_1_1RBrowserCatchedWidget.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RBrowserCatchedWidget.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::RBrowserCatchedWidget Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; ROOT::RBrowserCatchedWidget Class Reference. . Definition at line 235 of file RBrowser.cxx. Public Member Functions;  RBrowserCatchedWidget (const std::string &name, RWebWindow *win, const std::string &kind);  ; std::string GetKind () const override;  ; std::string GetTitle () override;  ; std::string GetUrl () override;  ; void Show (const std::string &) override;  ;  Public Member Functions inherited from ROOT::RBrowserWidget;  RBrowserWidget (const std::string &name);  ; virtual ~RBrowserWidget ()=default;  ; virtual void CheckModified ();  ; virtual bool DrawElement (std::shared_ptr< Browsable::RElement > &, const std::string &="""");  ; RBrowser * GetBrowser () const;  ; const std::string & GetName () const;  ; const Browsable::RElementPath_t & GetPath () const;  ; virtual void ResetConn ();  ; virtual std::string SendWidgetContent ();  ; std::string SendWidgetTitle ();  Returns string which can be send to browser client to set/change title of the widget tab. ;  ; virtual void SetActive ();  ; void SetPath (const Browsable::RElementPath_t &path);  . Public Attributes; std::string fCatchedKind;  ; RWebWindow * fWindow {nullptr};  . Inheritance diagram for ROOT::RBrowserCatchedWidget:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RBrowserCatchedWidget(). ROOT::RBrowserCatchedWidget::RBrowserCatchedWidget ; (; const std::string & ; name, . RWebWindow * ; win, . const std::string & ; kind . ). inline . Definition at line 249 of file RBrowser.cxx. Member Function Documentation. ◆ GetKind(). std::string ROOT::RBrowserCatchedWidget::GetKind ; (; ); const. inlineoverridevirtual . Implements ROOT::RBrowserWidget.; Definition at line 243 of file RBrowser.cxx. ◆",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RBrowserCatchedWidget.html:95,Load,Loading,95,doc/v632/classROOT_1_1RBrowserCatchedWidget.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RBrowserCatchedWidget.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::RBrowserData Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; ROOT::RBrowserData Class ReferenceWeb Widgets » Browsable object. ; Way to browse (hopefully) everything in ROOT. ; Definition at line 37 of file RBrowserData.hxx. Public Member Functions;  RBrowserData ();  Default constructor. ;  ;  RBrowserData (std::shared_ptr< Browsable::RElement > elem);  ; virtual ~RBrowserData ();  Destructor. ;  ; void ClearCache ();  Clear internal objects cache. ;  ; void CreateDefaultElements ();  Create default elements shown in the RBrowser. ;  ; Browsable::RElementPath_t DecomposePath (const std::string &path, bool relative_to_work_element);  Decompose path to elements Returns array of names for each element in the path, first element either ""/"" or ""."" If returned array empty - it is error. ;  ; std::shared_ptr< Browsable::RElement > GetElement (const std::string &str);  Returns element with path, specified as string. ;  ; std::shared_ptr< Browsable::RElement > GetElementFromTop (const Browsable::RElementPath_t &path);  Returns element with path, specified as Browsable::RElementPath_t. ;  ; std::shared_ptr< Browsable::RElement > GetSubElement (const Browsable::RElementPath_t &path);  Returns sub-element starting from top, using cached data. ;  ; const Browsable::RElementPath_t & GetWorkingPath () const;  ; std::string ProcessRequest (const RBrowserRequest &request);  Process browser request, returns string with JSON of RBrowserReply data. ;  ; bool RemoveFromCache (const Browsable::RElementPath_t &path);  Remove path (and all sub-paths) from cache Returns true if any element was removed. ;  ; bool RemoveFromCache (void *obj);  Remove object from cache If nullptr specified - removes no-longer-valid elements Returns true if any element was removed. ;  ; void SetTopElement (std::shared",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RBrowserData.html:87,Load,Loading,87,doc/master/classROOT_1_1RBrowserData.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RBrowserData.html,2,"['Load', 'cache']","['Loading', 'cache']"
Performance,". ROOT: ROOT::RBrowserData Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; ROOT::RBrowserData Class ReferenceWeb Widgets » Browsable object. ; Way to browse (hopefully) everything in ROOT. ; Definition at line 37 of file RBrowserData.hxx. Public Member Functions;  RBrowserData ();  Default constructor. ;  ;  RBrowserData (std::shared_ptr< Browsable::RElement > elem);  ; virtual ~RBrowserData ();  Destructor. ;  ; void ClearCache ();  Clear internal objects cache. ;  ; void CreateDefaultElements ();  Create default elements shown in the RBrowser. ;  ; Browsable::RElementPath_t DecomposePath (const std::string &path, bool relative_to_work_element);  Decompose path to elements Returns array of names for each element in the path, first element either ""/"" or ""."" If returned array empty - it is error. ;  ; std::shared_ptr< Browsable::RElement > GetElement (const std::string &str);  Returns element with path, specified as string. ;  ; std::shared_ptr< Browsable::RElement > GetElementFromTop (const Browsable::RElementPath_t &path);  Returns element with path, specified as Browsable::RElementPath_t. ;  ; std::shared_ptr< Browsable::RElement > GetSubElement (const Browsable::RElementPath_t &path);  Returns sub-element starting from top, using cached data. ;  ; const Browsable::RElementPath_t & GetWorkingPath () const;  ; std::string ProcessRequest (const RBrowserRequest &request);  Process browser request, returns string with JSON of RBrowserReply data. ;  ; bool RemoveFromCache (const Browsable::RElementPath_t &path);  Remove path (and all sub-paths) from cache Returns true if any element was removed. ;  ; bool RemoveFromCache (void *obj);  Remove object from cache If nullptr specified - removes no-longer-valid elements Returns true if any element was removed. ;  ; void SetTopElement (std::shared_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RBrowserData.html:86,Load,Loading,86,doc/v632/classROOT_1_1RBrowserData.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RBrowserData.html,2,"['Load', 'cache']","['Loading', 'cache']"
Performance,". ROOT: ROOT::RBrowserDataCleanup Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::RBrowserDataCleanup Class Reference. . Definition at line 43 of file RBrowserData.cxx. Public Member Functions;  RBrowserDataCleanup (RBrowserData &_data);  ; void RecursiveRemove (TObject *obj) override;  Recursively remove this object from a list. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RBrowserDataCleanup.html:94,Load,Loading,94,doc/master/classROOT_1_1RBrowserDataCleanup.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RBrowserDataCleanup.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::RBrowserDataCleanup Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::RBrowserDataCleanup Class Reference. . Definition at line 43 of file RBrowserData.cxx. Public Member Functions;  RBrowserDataCleanup (RBrowserData &_data);  ; void RecursiveRemove (TObject *obj) override;  Recursively remove this object from a list. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RBrowserDataCleanup.html:93,Load,Loading,93,doc/v632/classROOT_1_1RBrowserDataCleanup.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RBrowserDataCleanup.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::RBrowserEditorWidget Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; ROOT::RBrowserEditorWidget Class Reference. . Definition at line 60 of file RBrowser.cxx. Public Member Functions;  RBrowserEditorWidget (const std::string &name, bool is_editor=true);  ; virtual ~RBrowserEditorWidget ()=default;  ; bool DrawElement (std::shared_ptr< Browsable::RElement > &elem, const std::string &="""") override;  ; std::string GetKind () const override;  ; std::string GetTitle () override;  ; std::string GetUrl () override;  ; void ResetConn () override;  ; std::string SendWidgetContent () override;  ; void Show (const std::string &) override;  ;  Public Member Functions inherited from ROOT::RBrowserWidget;  RBrowserWidget (const std::string &name);  ; virtual ~RBrowserWidget ()=default;  ; virtual void CheckModified ();  ; RBrowser * GetBrowser () const;  ; const std::string & GetName () const;  ; const Browsable::RElementPath_t & GetPath () const;  ; virtual bool IsValid ();  ; std::string SendWidgetTitle ();  Returns string which can be send to browser client to set/change title of the widget tab. ;  ; virtual void SetActive ();  ; void SetPath (const Browsable::RElementPath_t &path);  . Public Attributes; std::string fContent;  ; std::string fFileName;  ; bool fFirstSend {false};  ! if editor content was send at least once ;  ; bool fIsEditor {true};  ! either editor or image viewer ;  ; std::string fItemPath;  ! item path in the browser ;  ; std::string fTitle;  . Inheritance diagram for ROOT::RBrowserEditorWidget:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RBrowserEditorWidget(). ROOT::RBrowserEditorWidget::RBrowserEditorWidget ; (; const std::string & ; name, . bool ; is_editor = true . ). inline . Definition at line 70 of file",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RBrowserEditorWidget.html:95,Load,Loading,95,doc/master/classROOT_1_1RBrowserEditorWidget.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RBrowserEditorWidget.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::RBrowserEditorWidget Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; ROOT::RBrowserEditorWidget Class Reference. . Definition at line 60 of file RBrowser.cxx. Public Member Functions;  RBrowserEditorWidget (const std::string &name, bool is_editor=true);  ; virtual ~RBrowserEditorWidget ()=default;  ; bool DrawElement (std::shared_ptr< Browsable::RElement > &elem, const std::string &="""") override;  ; std::string GetKind () const override;  ; std::string GetTitle () override;  ; std::string GetUrl () override;  ; void ResetConn () override;  ; std::string SendWidgetContent () override;  ; void Show (const std::string &) override;  ;  Public Member Functions inherited from ROOT::RBrowserWidget;  RBrowserWidget (const std::string &name);  ; virtual ~RBrowserWidget ()=default;  ; virtual void CheckModified ();  ; RBrowser * GetBrowser () const;  ; const std::string & GetName () const;  ; const Browsable::RElementPath_t & GetPath () const;  ; std::string SendWidgetTitle ();  Returns string which can be send to browser client to set/change title of the widget tab. ;  ; virtual void SetActive ();  ; void SetPath (const Browsable::RElementPath_t &path);  . Public Attributes; std::string fContent;  ; std::string fFileName;  ; bool fFirstSend {false};  ! if editor content was send at least once ;  ; bool fIsEditor {true};  ! either editor or image viewer ;  ; std::string fItemPath;  ! item path in the browser ;  ; std::string fTitle;  . Inheritance diagram for ROOT::RBrowserEditorWidget:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RBrowserEditorWidget(). ROOT::RBrowserEditorWidget::RBrowserEditorWidget ; (; const std::string & ; name, . bool ; is_editor = true . ). inline . Definition at line 70 of file RBrowser.cxx. ◆ ~RBrowserEdi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RBrowserEditorWidget.html:94,Load,Loading,94,doc/v632/classROOT_1_1RBrowserEditorWidget.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RBrowserEditorWidget.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::RBrowserInfoWidget Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Public Attributes |; List of all members ; ROOT::RBrowserInfoWidget Class Reference. . Definition at line 136 of file RBrowser.cxx. Public Types; enum  { kMaxContentLen = 10000000; };  . Public Member Functions;  RBrowserInfoWidget (const std::string &name);  ; virtual ~RBrowserInfoWidget ()=default;  ; bool DrawElement (std::shared_ptr< Browsable::RElement > &, const std::string &="""") override;  ; std::string GetKind () const override;  ; std::string GetTitle () override;  ; std::string GetUrl () override;  ; void Refresh ();  ; void RefreshFromLogs (const std::string &promt, const std::vector< std::string > &logs);  ; void ResetConn () override;  ; std::string SendWidgetContent () override;  ; void Show (const std::string &) override;  ;  Public Member Functions inherited from ROOT::RBrowserWidget;  RBrowserWidget (const std::string &name);  ; virtual ~RBrowserWidget ()=default;  ; virtual void CheckModified ();  ; RBrowser * GetBrowser () const;  ; const std::string & GetName () const;  ; const Browsable::RElementPath_t & GetPath () const;  ; virtual bool IsValid ();  ; std::string SendWidgetTitle ();  Returns string which can be send to browser client to set/change title of the widget tab. ;  ; virtual void SetActive ();  ; void SetPath (const Browsable::RElementPath_t &path);  . Public Attributes; std::string fContent;  ; bool fFirstSend {false};  ! if editor content was send at least once ;  ; std::string fTitle;  . Inheritance diagram for ROOT::RBrowserInfoWidget:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ anonymous enum. anonymous enum. EnumeratorkMaxContentLen . Definition at line 139 of file RBrowser.cxx. Constructor & Destructor Documentation. ◆ RBrowserInfoWidget(). ROOT::R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RBrowserInfoWidget.html:93,Load,Loading,93,doc/master/classROOT_1_1RBrowserInfoWidget.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RBrowserInfoWidget.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::RBrowserInfoWidget Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Public Attributes |; List of all members ; ROOT::RBrowserInfoWidget Class Reference. . Definition at line 136 of file RBrowser.cxx. Public Types; enum  { kMaxContentLen = 10000000; };  . Public Member Functions;  RBrowserInfoWidget (const std::string &name);  ; virtual ~RBrowserInfoWidget ()=default;  ; bool DrawElement (std::shared_ptr< Browsable::RElement > &, const std::string &="""") override;  ; std::string GetKind () const override;  ; std::string GetTitle () override;  ; std::string GetUrl () override;  ; void Refresh ();  ; void RefreshFromLogs (const std::string &promt, const std::vector< std::string > &logs);  ; void ResetConn () override;  ; std::string SendWidgetContent () override;  ; void Show (const std::string &) override;  ;  Public Member Functions inherited from ROOT::RBrowserWidget;  RBrowserWidget (const std::string &name);  ; virtual ~RBrowserWidget ()=default;  ; virtual void CheckModified ();  ; RBrowser * GetBrowser () const;  ; const std::string & GetName () const;  ; const Browsable::RElementPath_t & GetPath () const;  ; std::string SendWidgetTitle ();  Returns string which can be send to browser client to set/change title of the widget tab. ;  ; virtual void SetActive ();  ; void SetPath (const Browsable::RElementPath_t &path);  . Public Attributes; std::string fContent;  ; bool fFirstSend {false};  ! if editor content was send at least once ;  ; std::string fTitle;  . Inheritance diagram for ROOT::RBrowserInfoWidget:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ anonymous enum. anonymous enum. EnumeratorkMaxContentLen . Definition at line 139 of file RBrowser.cxx. Constructor & Destructor Documentation. ◆ RBrowserInfoWidget(). ROOT::RBrowserInfoWidget::RBrowserIn",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RBrowserInfoWidget.html:92,Load,Loading,92,doc/v632/classROOT_1_1RBrowserInfoWidget.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RBrowserInfoWidget.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::RBrowserReply Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Attributes |; List of all members ; ROOT::RBrowserReply Class ReferenceWeb Widgets » Browsable object. ; Reply on browser request. ; Definition at line 27 of file RBrowserReply.hxx. Public Attributes; int first {0};  first node in returned list ;  ; int nchilds {0};  total number of childs in the node ;  ; std::vector< const Browsable::RItem * > nodes;  list of pointers, no ownership! ;  ; std::vector< std::string > path;  reply path ;  . #include <ROOT/RBrowserReply.hxx>; Member Data Documentation. ◆ first. int ROOT::RBrowserReply::first {0}. first node in returned list ; Definition at line 31 of file RBrowserReply.hxx. ◆ nchilds. int ROOT::RBrowserReply::nchilds {0}. total number of childs in the node ; Definition at line 30 of file RBrowserReply.hxx. ◆ nodes. std::vector<const Browsable::RItem *> ROOT::RBrowserReply::nodes. list of pointers, no ownership! ; Definition at line 32 of file RBrowserReply.hxx. ◆ path. std::vector<std::string> ROOT::RBrowserReply::path. reply path ; Definition at line 29 of file RBrowserReply.hxx. Libraries for ROOT::RBrowserReply:. [legend]; The documentation for this class was generated from the following file:; gui/browserv7/inc/ROOT/RBrowserReply.hxx. ROOTRBrowserReply. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:58 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RBrowserReply.html:88,Load,Loading,88,doc/master/classROOT_1_1RBrowserReply.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RBrowserReply.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::RBrowserReply Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Attributes |; List of all members ; ROOT::RBrowserReply Class ReferenceWeb Widgets » Browsable object. ; Reply on browser request. ; Definition at line 27 of file RBrowserReply.hxx. Public Attributes; int first {0};  first node in returned list ;  ; int nchilds {0};  total number of childs in the node ;  ; std::vector< const Browsable::RItem * > nodes;  list of pointers, no ownership! ;  ; std::vector< std::string > path;  reply path ;  . #include <ROOT/RBrowserReply.hxx>; Member Data Documentation. ◆ first. int ROOT::RBrowserReply::first {0}. first node in returned list ; Definition at line 31 of file RBrowserReply.hxx. ◆ nchilds. int ROOT::RBrowserReply::nchilds {0}. total number of childs in the node ; Definition at line 30 of file RBrowserReply.hxx. ◆ nodes. std::vector<const Browsable::RItem *> ROOT::RBrowserReply::nodes. list of pointers, no ownership! ; Definition at line 32 of file RBrowserReply.hxx. ◆ path. std::vector<std::string> ROOT::RBrowserReply::path. reply path ; Definition at line 29 of file RBrowserReply.hxx. Libraries for ROOT::RBrowserReply:. [legend]; The documentation for this class was generated from the following file:; gui/browserv7/inc/ROOT/RBrowserReply.hxx. ROOTRBrowserReply. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:13:35 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RBrowserReply.html:87,Load,Loading,87,doc/v632/classROOT_1_1RBrowserReply.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RBrowserReply.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::RBrowserRequest Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Attributes |; List of all members ; ROOT::RBrowserRequest Class ReferenceWeb Widgets » Browsable object. ; Request send from client to get content of path element. ; Definition at line 26 of file RBrowserRequest.hxx. Public Attributes; int first {0};  first child to request ;  ; bool hidden {false};  show hidden files ;  ; int lastcycle {0};  show only last cycle, -1 - off, 0 - not change, +1 on, ;  ; int number {0};  number of childs to request, 0 - all childs ;  ; std::vector< std::string > path;  requested path ;  ; std::string regex;  applied regex ;  ; bool reload {false};  force items reload ;  ; bool reverse {false};  reverse item order ;  ; std::string sort;  kind of sorting ;  . #include <ROOT/RBrowserRequest.hxx>; Member Data Documentation. ◆ first. int ROOT::RBrowserRequest::first {0}. first child to request ; Definition at line 29 of file RBrowserRequest.hxx. ◆ hidden. bool ROOT::RBrowserRequest::hidden {false}. show hidden files ; Definition at line 33 of file RBrowserRequest.hxx. ◆ lastcycle. int ROOT::RBrowserRequest::lastcycle {0}. show only last cycle, -1 - off, 0 - not change, +1 on, ; Definition at line 35 of file RBrowserRequest.hxx. ◆ number. int ROOT::RBrowserRequest::number {0}. number of childs to request, 0 - all childs ; Definition at line 30 of file RBrowserRequest.hxx. ◆ path. std::vector<std::string> ROOT::RBrowserRequest::path. requested path ; Definition at line 28 of file RBrowserRequest.hxx. ◆ regex. std::string ROOT::RBrowserRequest::regex. applied regex ; Definition at line 36 of file RBrowserRequest.hxx. ◆ reload. bool ROOT::RBrowserRequest::reload {false}. force items reload ; Definition at line 34 of file RBrowserRequest.hxx. ◆ reverse. bool ROOT::RBrowserRequest::reverse {false}. reverse item order ; Definition at line 32 of file RBrowserRequest.hxx. ◆ sort. std::string ROO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RBrowserRequest.html:90,Load,Loading,90,doc/master/classROOT_1_1RBrowserRequest.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RBrowserRequest.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::RBrowserRequest Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Attributes |; List of all members ; ROOT::RBrowserRequest Class ReferenceWeb Widgets » Browsable object. ; Request send from client to get content of path element. ; Definition at line 26 of file RBrowserRequest.hxx. Public Attributes; int first {0};  first child to request ;  ; bool hidden {false};  show hidden files ;  ; int lastcycle {0};  show only last cycle, -1 - off, 0 - not change, +1 on, ;  ; int number {0};  number of childs to request, 0 - all childs ;  ; std::vector< std::string > path;  requested path ;  ; std::string regex;  applied regex ;  ; bool reload {false};  force items reload ;  ; bool reverse {false};  reverse item order ;  ; std::string sort;  kind of sorting ;  . #include <ROOT/RBrowserRequest.hxx>; Member Data Documentation. ◆ first. int ROOT::RBrowserRequest::first {0}. first child to request ; Definition at line 29 of file RBrowserRequest.hxx. ◆ hidden. bool ROOT::RBrowserRequest::hidden {false}. show hidden files ; Definition at line 33 of file RBrowserRequest.hxx. ◆ lastcycle. int ROOT::RBrowserRequest::lastcycle {0}. show only last cycle, -1 - off, 0 - not change, +1 on, ; Definition at line 35 of file RBrowserRequest.hxx. ◆ number. int ROOT::RBrowserRequest::number {0}. number of childs to request, 0 - all childs ; Definition at line 30 of file RBrowserRequest.hxx. ◆ path. std::vector<std::string> ROOT::RBrowserRequest::path. requested path ; Definition at line 28 of file RBrowserRequest.hxx. ◆ regex. std::string ROOT::RBrowserRequest::regex. applied regex ; Definition at line 36 of file RBrowserRequest.hxx. ◆ reload. bool ROOT::RBrowserRequest::reload {false}. force items reload ; Definition at line 34 of file RBrowserRequest.hxx. ◆ reverse. bool ROOT::RBrowserRequest::reverse {false}. reverse item order ; Definition at line 32 of file RBrowserRequest.hxx. ◆ sort. std::string ROOT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RBrowserRequest.html:89,Load,Loading,89,doc/v632/classROOT_1_1RBrowserRequest.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RBrowserRequest.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::RBrowserTimer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; ROOT::RBrowserTimer Class Reference. . Definition at line 47 of file RBrowser.cxx. Public Member Functions;  RBrowserTimer (Long_t milliSec, Bool_t mode, RBrowser &br);  !< browser processing postponed requests ;  ; void Timeout () override;  timeout handler used to process postponed requests in main ROOT thread ;  ;  Public Member Functions inherited from TTimer;  TTimer (const char *command, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (Long_t milliSec=0, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (TObject *obj, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ; virtual ~TTimer ();  ; void Add () override;  ; Bool_t CheckTimer (const TTime &now);  Check if timer timed out. ;  ; TTime GetAbsTime () const;  ; const char * GetCommand () const;  ; TObject * GetObject ();  ; TTime GetTime () const;  ; UInt_t GetTimerID ();  ; Bool_t HasTimedOut () const;  ; TClass * IsA () const override;  ; Bool_t IsAsync () const;  ; Bool_t IsInterruptingSyscalls () const;  ; Bool_t IsRunning ();  This function checks if the timer is running within gSystem (Has been started and did not finish yet). ;  ; Bool_t IsSync () const;  ; Bool_t Notify () override;  Notify when timer times out. ;  ; void Remove () override;  ; void Reset ();  Reset the timer. ;  ; void SetCommand (const char *command);  Set the interpreter command to be executed at time out. ;  ; void SetInterruptSyscalls (Bool_t set=kTRUE);  When the argument is true the a-synchronous timer (SIGALRM) signal handler is set so that interrupted syscalls will not be restarted by the kernel. ;  ; void SetObject (TObject *object);  Set the object to be notified at time out. ;  ; void Se",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RBrowserTimer.html:88,Load,Loading,88,doc/master/classROOT_1_1RBrowserTimer.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RBrowserTimer.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::RBrowserTimer Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; ROOT::RBrowserTimer Class Reference. . Definition at line 47 of file RBrowser.cxx. Public Member Functions;  RBrowserTimer (Long_t milliSec, Bool_t mode, RBrowser &br);  !< browser processing postponed requests ;  ; void Timeout () override;  timeout handler used to process postponed requests in main ROOT thread ;  ;  Public Member Functions inherited from TTimer;  TTimer (const char *command, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (Long_t milliSec=0, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (TObject *obj, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ; virtual ~TTimer ();  ; void Add () override;  ; Bool_t CheckTimer (const TTime &now);  Check if timer timed out. ;  ; TTime GetAbsTime () const;  ; const char * GetCommand () const;  ; TObject * GetObject ();  ; TTime GetTime () const;  ; UInt_t GetTimerID ();  ; Bool_t HasTimedOut () const;  ; TClass * IsA () const override;  ; Bool_t IsAsync () const;  ; Bool_t IsInterruptingSyscalls () const;  ; Bool_t IsRunning ();  This function checks if the timer is running within gSystem (Has been started and did not finish yet). ;  ; Bool_t IsSync () const;  ; Bool_t Notify () override;  Notify when timer times out. ;  ; void Remove () override;  ; void Reset ();  Reset the timer. ;  ; void SetCommand (const char *command);  Set the interpreter command to be executed at time out. ;  ; void SetInterruptSyscalls (Bool_t set=kTRUE);  When the argument is true the a-synchronous timer (SIGALRM) signal handler is set so that interrupted syscalls will not be restarted by the kernel. ;  ; void SetObject (TObject *object);  Set the object to be notified at time out. ;  ; void Set",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RBrowserTimer.html:87,Load,Loading,87,doc/v632/classROOT_1_1RBrowserTimer.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RBrowserTimer.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::RBrowserWidget Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; Friends |; List of all members ; ROOT::RBrowserWidget Class ReferenceabstractWeb Widgets » Browsable object. ; Abstract Web-based widget, which can be used in the RBrowser Used to embed canvas, geometry viewer and potentially any other widgets. ; Definition at line 32 of file RBrowserWidget.hxx. Public Member Functions;  RBrowserWidget (const std::string &name);  ; virtual ~RBrowserWidget ()=default;  ; virtual void CheckModified ();  ; virtual bool DrawElement (std::shared_ptr< Browsable::RElement > &, const std::string &="""");  ; RBrowser * GetBrowser () const;  ; virtual std::string GetKind () const =0;  ; const std::string & GetName () const;  ; const Browsable::RElementPath_t & GetPath () const;  ; virtual std::string GetTitle ();  ; virtual std::string GetUrl ()=0;  ; virtual bool IsValid ();  ; virtual void ResetConn ();  ; virtual std::string SendWidgetContent ();  ; std::string SendWidgetTitle ();  Returns string which can be send to browser client to set/change title of the widget tab. ;  ; virtual void SetActive ();  ; void SetPath (const Browsable::RElementPath_t &path);  ; virtual void Show (const std::string &)=0;  . Private Attributes; RBrowser * fBrowser {nullptr};  ; std::string fName;  ! widget name ;  ; Browsable::RElementPath_t fPath;  ! path of drawn element ;  . Friends; class RBrowser;  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/gui/browserv7/src/RBrowserWidget.hxx>. Inheritance diagram for ROOT::RBrowserWidget:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RBrowserWidget(). ROOT::RBrowserWidget::RBrowserWidget ; (; const std::string & ; name). inlineexplicit . Definition at line 44 of file RBrowserWidget.hxx. ◆ ~RB",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RBrowserWidget.html:89,Load,Loading,89,doc/master/classROOT_1_1RBrowserWidget.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RBrowserWidget.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::RBrowserWidget Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; Friends |; List of all members ; ROOT::RBrowserWidget Class ReferenceabstractWeb Widgets » Browsable object. ; Abstract Web-based widget, which can be used in the RBrowser Used to embed canvas, geometry viewer and potentially any other widgets. ; Definition at line 32 of file RBrowserWidget.hxx. Public Member Functions;  RBrowserWidget (const std::string &name);  ; virtual ~RBrowserWidget ()=default;  ; virtual void CheckModified ();  ; virtual bool DrawElement (std::shared_ptr< Browsable::RElement > &, const std::string &="""");  ; RBrowser * GetBrowser () const;  ; virtual std::string GetKind () const =0;  ; const std::string & GetName () const;  ; const Browsable::RElementPath_t & GetPath () const;  ; virtual std::string GetTitle ();  ; virtual std::string GetUrl ()=0;  ; virtual void ResetConn ();  ; virtual std::string SendWidgetContent ();  ; std::string SendWidgetTitle ();  Returns string which can be send to browser client to set/change title of the widget tab. ;  ; virtual void SetActive ();  ; void SetPath (const Browsable::RElementPath_t &path);  ; virtual void Show (const std::string &)=0;  . Private Attributes; RBrowser * fBrowser {nullptr};  ; std::string fName;  ! widget name ;  ; Browsable::RElementPath_t fPath;  ! path of drawn element ;  . Friends; class RBrowser;  . #include </home/sftnight/build/workspace/root-makedoc-v632/rootspi/rdoc/src/v6-32-00-patches/gui/browserv7/src/RBrowserWidget.hxx>. Inheritance diagram for ROOT::RBrowserWidget:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RBrowserWidget(). ROOT::RBrowserWidget::RBrowserWidget ; (; const std::string & ; name). inlineexplicit . Definition at line 44 of file RBrowserWidget.hxx. ◆ ~RBrowserWidget(). virtu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RBrowserWidget.html:88,Load,Loading,88,doc/v632/classROOT_1_1RBrowserWidget.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RBrowserWidget.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::RBrowserWidgetProvider Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Static Protected Member Functions |; List of all members ; ROOT::RBrowserWidgetProvider Class Referenceabstract. . Definition at line 72 of file RBrowserWidget.hxx. Public Member Functions;  RBrowserWidgetProvider (const std::string &kind);  Constructor. ;  ; virtual ~RBrowserWidgetProvider ();  Destructor. ;  . Static Public Member Functions; static std::shared_ptr< RBrowserWidget > CreateWidget (const std::string &kind, const std::string &name);  Create specified widget. ;  ; static std::shared_ptr< RBrowserWidget > CreateWidgetFor (const std::string &kind, const std::string &name, std::shared_ptr< Browsable::RElement > &element);  Create specified widget for existing object. ;  . Protected Types; using ProvidersMap_t = std::map< std::string, RBrowserWidgetProvider * >;  . Protected Member Functions; virtual std::shared_ptr< RBrowserWidget > Create (const std::string &)=0;  ; virtual std::shared_ptr< RBrowserWidget > CreateFor (const std::string &, std::shared_ptr< Browsable::RElement > &);  . Static Protected Member Functions; static ProvidersMap_t & GetMap ();  Returns static map of existing providers. ;  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/gui/browserv7/src/RBrowserWidget.hxx>. Inheritance diagram for ROOT::RBrowserWidgetProvider:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ ProvidersMap_t. using ROOT::RBrowserWidgetProvider::ProvidersMap_t = std::map<std::string, RBrowserWidgetProvider*>. protected . Definition at line 74 of file RBrowserWidget.hxx. Constructor & Destructor Documentation. ◆ RBrowserWidgetProvider(). RBrowserWidgetProvider::RBrowserWidgetProvider ; (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RBrowserWidgetProvider.html:97,Load,Loading,97,doc/master/classROOT_1_1RBrowserWidgetProvider.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RBrowserWidgetProvider.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::RBrowserWidgetProvider Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Static Protected Member Functions |; List of all members ; ROOT::RBrowserWidgetProvider Class Referenceabstract. . Definition at line 70 of file RBrowserWidget.hxx. Public Member Functions;  RBrowserWidgetProvider (const std::string &kind);  Constructor. ;  ; virtual ~RBrowserWidgetProvider ();  Destructor. ;  . Static Public Member Functions; static std::shared_ptr< RBrowserWidget > CreateWidget (const std::string &kind, const std::string &name);  Create specified widget. ;  ; static std::shared_ptr< RBrowserWidget > CreateWidgetFor (const std::string &kind, const std::string &name, std::shared_ptr< Browsable::RElement > &element);  Create specified widget for existing object. ;  . Protected Types; using ProvidersMap_t = std::map< std::string, RBrowserWidgetProvider * >;  . Protected Member Functions; virtual std::shared_ptr< RBrowserWidget > Create (const std::string &)=0;  ; virtual std::shared_ptr< RBrowserWidget > CreateFor (const std::string &, std::shared_ptr< Browsable::RElement > &);  . Static Protected Member Functions; static ProvidersMap_t & GetMap ();  Returns static map of existing providers. ;  . #include </home/sftnight/build/workspace/root-makedoc-v632/rootspi/rdoc/src/v6-32-00-patches/gui/browserv7/src/RBrowserWidget.hxx>. Inheritance diagram for ROOT::RBrowserWidgetProvider:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ ProvidersMap_t. using ROOT::RBrowserWidgetProvider::ProvidersMap_t = std::map<std::string, RBrowserWidgetProvider*>. protected . Definition at line 72 of file RBrowserWidget.hxx. Constructor & Destructor Documentation. ◆ RBrowserWidgetProvider(). RBrowserWidgetProvider::RBrowserWidgetProvi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RBrowserWidgetProvider.html:96,Load,Loading,96,doc/v632/classROOT_1_1RBrowserWidgetProvider.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RBrowserWidgetProvider.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::RCompressionSetting Struct Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Static Public Member Functions |; List of all members ; ROOT::RCompressionSetting Struct Reference. ; The global settings depend on a global variable named R__ZipMode which can be modified by a global function named R__SetZipMode. ; Both are defined in Bits.h. The default is to use the global setting and the default of the global setting is to use the ZLIB compression algorithm.; The LZMA algorithm (from the XZ package) is also available. The LZMA compression usually results in greater compression factors, but takes more CPU time and memory when compressing. LZMA memory usage is particularly high for compression levels 8 and 9.; Finally, the LZ4 package results in worse compression ratios than ZLIB but achieves much faster decompression rates. The current algorithms support level 1 to 9. The higher the level the greater the compression and more CPU time and memory resources used during compression. Level 0 means no compression.; Recommendation for the compression algorithm's levels:; ZLIB is recommended to be used with compression level 1 [101]; LZMA is recommended to be used with compression level 7-8 (higher is better, since in the case of LZMA we don't care about compression/decompression speed) [207 - 208]; LZ4 is recommended to be used with compression level 4 [404]; ZSTD is recommended to be used with compression level 5 [505] . Definition at line 46 of file Compression.h. Classes; struct  EAlgorithm;  ; struct  EDefaults;  ; struct  ELevel;  . Static Public Member Functions; static EAlgorithm::EValues AlgorithmFromCompressionSettings (int compSettings);  ; static std::string AlgorithmToString (EAlgorithm::EValues algorithm);  . #include <Compression.h>; Member Function Documentation. ◆ AlgorithmFromCompressionSettings(). static EAlgorithm::EValues ROOT::RCompressionSetting::AlgorithmFromCompressi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structROOT_1_1RCompressionSetting.html:95,Load,Loading,95,doc/master/structROOT_1_1RCompressionSetting.html,https://root.cern,https://root.cern/doc/master/structROOT_1_1RCompressionSetting.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::RCompressionSetting Struct Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Static Public Member Functions |; List of all members ; ROOT::RCompressionSetting Struct Reference. ; The global settings depend on a global variable named R__ZipMode which can be modified by a global function named R__SetZipMode. ; Both are defined in Bits.h. The default is to use the global setting and the default of the global setting is to use the ZLIB compression algorithm.; The LZMA algorithm (from the XZ package) is also available. The LZMA compression usually results in greater compression factors, but takes more CPU time and memory when compressing. LZMA memory usage is particularly high for compression levels 8 and 9.; Finally, the LZ4 package results in worse compression ratios than ZLIB but achieves much faster decompression rates. The current algorithms support level 1 to 9. The higher the level the greater the compression and more CPU time and memory resources used during compression. Level 0 means no compression.; Recommendation for the compression algorithm's levels:; ZLIB is recommended to be used with compression level 1 [101]; LZMA is recommended to be used with compression level 7-8 (higher is better, since in the case of LZMA we don't care about compression/decompression speed) [207 - 208]; LZ4 is recommended to be used with compression level 4 [404]; ZSTD is recommended to be used with compression level 5 [505] . Definition at line 45 of file Compression.h. Classes; struct  EAlgorithm;  ; struct  EDefaults;  ; struct  ELevel;  . Static Public Member Functions; static std::string AlgorithmToString (EAlgorithm::EValues algorithm);  . #include <Compression.h>; Member Function Documentation. ◆ AlgorithmToString(). static std::string ROOT::RCompressionSetting::AlgorithmToString ; (; EAlgorithm::EValues ; algorithm). static . The documentation for this struct was generated from the follow",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/structROOT_1_1RCompressionSetting.html:94,Load,Loading,94,doc/v632/structROOT_1_1RCompressionSetting.html,https://root.cern,https://root.cern/doc/v632/structROOT_1_1RCompressionSetting.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::RCompressionSetting::EAlgorithm Struct Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; List of all members ; ROOT::RCompressionSetting::EAlgorithm Struct Reference. . Definition at line 86 of file Compression.h. Public Types; enum  EValues { ;   kInherit = -1; , kUseGlobal = 0; , kZLIB; , kLZMA; , ;   kOldCompressionAlgo; , kLZ4; , kZSTD; , kUndefined. };  Note: this is only temporarily a struct and will become a enum class hence the name convention used. More...;  . #include <Compression.h>; Member Enumeration Documentation. ◆ EValues. enum ROOT::RCompressionSetting::EAlgorithm::EValues. Note: this is only temporarily a struct and will become a enum class hence the name convention used. . EnumeratorkInherit Some objects use this value to denote that the compression algorithm should be inherited from the parent object (e.g., TBranch should get the algorithm from the TTree) . kUseGlobal Use the global compression algorithm. . kZLIB Use ZLIB compression. . kLZMA Use LZMA compression. . kOldCompressionAlgo Use the old compression algorithm. . kLZ4 Use LZ4 compression. . kZSTD Use ZSTD compression. . kUndefined Undefined compression algorithm (must be kept the last of the list in case a new algorithm is added). . Definition at line 88 of file Compression.h. The documentation for this struct was generated from the following file:; core/zip/inc/Compression.h. ROOTRCompressionSettingEAlgorithm. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:58 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structROOT_1_1RCompressionSetting_1_1EAlgorithm.html:107,Load,Loading,107,doc/master/structROOT_1_1RCompressionSetting_1_1EAlgorithm.html,https://root.cern,https://root.cern/doc/master/structROOT_1_1RCompressionSetting_1_1EAlgorithm.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::RCompressionSetting::EAlgorithm Struct Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; List of all members ; ROOT::RCompressionSetting::EAlgorithm Struct Reference. . Definition at line 83 of file Compression.h. Public Types; enum  EValues { ;   kInherit = -1; , kUseGlobal = 0; , kZLIB; , kLZMA; , ;   kOldCompressionAlgo; , kLZ4; , kZSTD; , kUndefined. };  Note: this is only temporarily a struct and will become a enum class hence the name. More...;  . #include <Compression.h>; Member Enumeration Documentation. ◆ EValues. enum ROOT::RCompressionSetting::EAlgorithm::EValues. Note: this is only temporarily a struct and will become a enum class hence the name. ; convention used. . EnumeratorkInherit Some objects use this value to denote that the compression algorithm should be inherited from the parent object (e.g., TBranch should get the algorithm from the TTree) . kUseGlobal Use the global compression algorithm. . kZLIB Use ZLIB compression. . kLZMA Use LZMA compression. . kOldCompressionAlgo Use the old compression algorithm. . kLZ4 Use LZ4 compression. . kZSTD Use ZSTD compression. . kUndefined Undefined compression algorithm (must be kept the last of the list in case a new algorithm is added). . Definition at line 85 of file Compression.h. The documentation for this struct was generated from the following file:; core/zip/inc/Compression.h. ROOTRCompressionSettingEAlgorithm. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:13:36 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/structROOT_1_1RCompressionSetting_1_1EAlgorithm.html:106,Load,Loading,106,doc/v632/structROOT_1_1RCompressionSetting_1_1EAlgorithm.html,https://root.cern,https://root.cern/doc/v632/structROOT_1_1RCompressionSetting_1_1EAlgorithm.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::RCompressionSetting::EDefaults Struct Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; List of all members ; ROOT::RCompressionSetting::EDefaults Struct Reference. . Definition at line 47 of file Compression.h. Public Types; enum  EValues { ;   kUseGlobal = 0; , kUseCompiledDefault = 101; , kUseAnalysis = 404; , kUseGeneralPurpose = 505; , ;   kUseSmallest = 207. };  Note: this is only temporarily a struct and will become a enum class hence the name convention used. More...;  . #include <Compression.h>; Member Enumeration Documentation. ◆ EValues. enum ROOT::RCompressionSetting::EDefaults::EValues. Note: this is only temporarily a struct and will become a enum class hence the name convention used. . EnumeratorkUseGlobal Use the global compression setting for this process; may be affected by rootrc. . kUseCompiledDefault Use the compile-time default setting. . kUseAnalysis Use the default analysis setting; fast reading but poor compression ratio. . kUseGeneralPurpose Use the new recommended general-purpose setting; it is a best trade-off between compression ratio/decompression speed. . kUseSmallest Use the setting that results in the smallest files; very slow read and write. . Definition at line 49 of file Compression.h. The documentation for this struct was generated from the following file:; core/zip/inc/Compression.h. ROOTRCompressionSettingEDefaults. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:58 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structROOT_1_1RCompressionSetting_1_1EDefaults.html:106,Load,Loading,106,doc/master/structROOT_1_1RCompressionSetting_1_1EDefaults.html,https://root.cern,https://root.cern/doc/master/structROOT_1_1RCompressionSetting_1_1EDefaults.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::RCompressionSetting::ELevel Struct Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; List of all members ; ROOT::RCompressionSetting::ELevel Struct Reference. . Definition at line 63 of file Compression.h. Public Types; enum  EValues { ;   kInherit = -1; , kUncompressed = 0; , kUseMin = 1; , kDefaultZLIB = 1; , ;   kDefaultLZ4 = 4; , kDefaultZSTD = 5; , kDefaultOld = 6; , kDefaultLZMA = 7. };  Note: this is only temporarily a struct and will become a enum class hence the name convention used. More...;  . #include <Compression.h>; Member Enumeration Documentation. ◆ EValues. enum ROOT::RCompressionSetting::ELevel::EValues. Note: this is only temporarily a struct and will become a enum class hence the name convention used. . EnumeratorkInherit Some objects use this value to denote that the compression algorithm should be inherited from the parent object. . kUncompressed Compression level reserved for ""uncompressed state"". . kUseMin Compression level reserved when we are not sure what to use (1 is for the fastest compression) . kDefaultZLIB Compression level reserved for ZLIB compression algorithm (fastest compression) . kDefaultLZ4 Compression level reserved for LZ4 compression algorithm (trade-off between file ratio/decompression speed) . kDefaultZSTD Compression level reserved for ZSTD compression algorithm (trade-off between file ratio/decompression speed) . kDefaultOld Compression level reserved for old ROOT compression algorithm. . kDefaultLZMA Compression level reserved for LZMA compression algorithm (slowest compression with smallest files) . Definition at line 65 of file Compression.h. The documentation for this struct was generated from the following file:; core/zip/inc/Compression.h. ROOTRCompressionSettingELevel. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:58 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structROOT_1_1RCompressionSetting_1_1ELevel.html:103,Load,Loading,103,doc/master/structROOT_1_1RCompressionSetting_1_1ELevel.html,https://root.cern,https://root.cern/doc/master/structROOT_1_1RCompressionSetting_1_1ELevel.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::RDF Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces |; Classes |; Typedefs |; Functions ; ROOT::RDF Namespace Reference. Namespaces; namespace  Experimental;  ; namespace  Internal;  . Classes; class  RArrowDS;  RDataFrame data source class to interface with Apache Arrow. More...;  ; class  RCsvDS;  RDataFrame data source class for reading CSV files. More...;  ; class  RCutFlowReport;  ; class  RDataSource;  RDataSource defines an API that RDataFrame can use to read arbitrary data formats. More...;  ; class  RDFDescription;  A DFDescription contains useful information about a given RDataFrame computation graph. More...;  ; class  RDFTypeNameGetter;  Helper to get the contents of a given column. More...;  ; class  RDisplay;  This class is the textual representation of the content of a columnar dataset. More...;  ; class  RInterface;  The public interface to the RDataFrame federation of classes. More...;  ; class  RInterfaceBase;  ; class  RLazyDS;  A RDataSource implementation which is built on top of result proxies. More...;  ; class  RResultHandle;  A type-erased version of RResultPtr and RResultMap. More...;  ; class  RResultPtr;  Smart pointer for the return type of actions. More...;  ; class  RSampleInfo;  This type represents a sample identifier, to be used in conjunction with RDataFrame features such as DefinePerSample() and per-sample callbacks. More...;  ; struct  RSnapshotOptions;  A collection of options to steer the creation of the dataset on file. More...;  ; class  RSqliteDS;  RSqliteDS is an RDF data source implementation for SQL result sets from sqlite3 files. More...;  ; class  RTrivialDS;  A simple data-source implementation, for demo purposes. More...;  ; class  RVariationsDescription;  A descriptor for the systematic variations known to a given RDataFrame node. More...;  ; class  TCutInfo;  ; class  TH1DModel;  A struct which stores the parameters of a TH1D. More...;  ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1RDF.html:82,Load,Loading,82,doc/master/namespaceROOT_1_1RDF.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1RDF.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::RDF Namespace Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces |; Classes |; Typedefs |; Functions ; ROOT::RDF Namespace Reference. Namespaces; namespace  Experimental;  ; namespace  Internal;  . Classes; class  RArrowDS;  RDataFrame data source class to interface with Apache Arrow. More...;  ; class  RCsvDS;  RDataFrame data source class for reading CSV files. More...;  ; class  RCutFlowReport;  ; class  RDataSource;  RDataSource defines an API that RDataFrame can use to read arbitrary data formats. More...;  ; class  RDFDescription;  A DFDescription contains useful information about a given RDataFrame computation graph. More...;  ; class  RDFTypeNameGetter;  Helper to get the contents of a given column. More...;  ; class  RDisplay;  This class is the textual representation of the content of a columnar dataset. More...;  ; class  RInterface;  The public interface to the RDataFrame federation of classes. More...;  ; class  RInterfaceBase;  ; class  RLazyDS;  A RDataSource implementation which is built on top of result proxies. More...;  ; class  RResultHandle;  A type-erased version of RResultPtr and RResultMap. More...;  ; class  RResultPtr;  Smart pointer for the return type of actions. More...;  ; class  RSampleInfo;  This type represents a sample identifier, to be used in conjunction with RDataFrame features such as DefinePerSample() and per-sample callbacks. More...;  ; struct  RSnapshotOptions;  A collection of options to steer the creation of the dataset on file. More...;  ; class  RSqliteDS;  RSqliteDS is an RDF data source implementation for SQL result sets from sqlite3 files. More...;  ; class  RTrivialDS;  A simple data-source implementation, for demo purposes. More...;  ; class  RVariationsDescription;  A descriptor for the systematic variations known to a given RDataFrame node. More...;  ; class  TCutInfo;  ; class  TH1DModel;  A struct which stores the parameters of a TH1D. More...;  ; c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/namespaceROOT_1_1RDF.html:81,Load,Loading,81,doc/v632/namespaceROOT_1_1RDF.html,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1RDF.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::RDF::Experimental Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Typedefs |; Functions ; ROOT::RDF::Experimental Namespace Reference. Classes; class  ProgressBarAction;  ; class  ProgressHelper;  RDF progress helper. More...;  ; class  RDatasetSpec;  The dataset specification for RDataFrame. More...;  ; class  RMetaData;  Class behaving as a heterogenuous dictionary to store the metadata of a dataset. More...;  ; class  RResultMap;  ; class  RSample;  Class representing a sample which is a grouping of trees and their fileglobs, and, optionally, the sample's metadata information via the RMetaData object. More...;  . Typedefs; using SnapshotPtr_t = ROOT::RDF::RResultPtr< ROOT::RDF::RInterface< ROOT::Detail::RDF::RLoopManager, void > >;  . Functions; void AddProgressBar (ROOT::RDataFrame df);  Add ProgressBar to an RDataFrame. ;  ; void AddProgressBar (ROOT::RDF::RNode df);  Add ProgressBar to a ROOT::RDF::RNode. ;  ; RDataFrame FromRNTuple (ROOT::RNTuple *ntuple);  ; RDataFrame FromRNTuple (std::string_view ntupleName, const std::vector< std::string > &fileNames);  ; RDataFrame FromRNTuple (std::string_view ntupleName, std::string_view fileName);  ; ROOT::RDataFrame FromSpec (const std::string &jsonFile);  Factory method to create an RDataFrame from a JSON specification file. ;  ; template<typename T > ; RResultMap< T > VariationsFor (RResultPtr< T > resPtr);  Produce all required systematic variations for the given result. ;  ; SnapshotPtr_t VariationsFor (SnapshotPtr_t resPtr);  . Typedef Documentation. ◆ SnapshotPtr_t. using ROOT::RDF::Experimental::SnapshotPtr_t = typedef ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager, void> >. Definition at line 269 of file RDFHelpers.hxx. Function Documentation. ◆ AddProgressBar() [1/2]. void ROOT::RDF::Experimental::AddProgressBar ; (; ROOT::RDataFrame ; df). Add ProgressBar to an RDataFrame. ; Parameters. [in]dfRDataFram",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1RDF_1_1Experimental.html:96,Load,Loading,96,doc/master/namespaceROOT_1_1RDF_1_1Experimental.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1RDF_1_1Experimental.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::RDF::Experimental::RDatasetSpec Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; ROOT::RDF::Experimental::RDatasetSpec Class ReferenceDataframe. ; The dataset specification for RDataFrame. ; This class allows users to create the dataset specification for RDataFrame to which they add samples (using the RSample class object) with tree names and file names, and, optionally, the metadata information (using the RMetaData class objects). Adding global friend trees and/or setting the range of events to be processed are also available.; Note, there exists yet another method to build RDataFrame from the dataset information using the JSON file format: FromSpec(). ; Definition at line 47 of file RDatasetSpec.hxx. Classes; struct  REntryRange;  . Public Member Functions;  RDatasetSpec ()=default;  ; RDatasetSpec & AddSample (RSample sample);  Add sample (RSample class object) to the RDatasetSpec object. ;  ; Long64_t GetEntryRangeBegin () const;  Returns the first entry as defined by the global range provided in the specification. ;  ; Long64_t GetEntryRangeEnd () const;  Returns the last entry as defined by the global range provided in the specification. ;  ; const std::vector< std::string > GetFileNameGlobs () const;  Returns the collection of the dataset's paths to files, or globs if specified in input. ;  ; const ROOT::TreeUtils::RFriendInfo & GetFriendInfo () const;  Returns the reference to the friend tree information. ;  ; const std::vector< RMetaData > GetMetaData () const;  Returns the collection of the dataset's metadata (RMetaData class objects). ;  ; const std::vector< std::string > GetSampleNames () const;  Returns the collection of the dataset's sample names. ;  ; const std::vector< std::string > GetTreeNames () const;  Returns the collection of the dataset's tr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RDF_1_1Experimental_1_1RDatasetSpec.html:106,Load,Loading,106,doc/master/classROOT_1_1RDF_1_1Experimental_1_1RDatasetSpec.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1Experimental_1_1RDatasetSpec.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::RDF::Experimental::RResultMap< T > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; ROOT::RDF::Experimental::RResultMap< T > Class Template Reference. ; template<typename T>; class ROOT::RDF::Experimental::RResultMap< T >; Definition at line 98 of file RResultMap.hxx. Public Types; using const_iterator = typename decltype(fMap)::const_iterator;  ; using iterator = typename decltype(fMap)::iterator;  . Public Member Functions; iterator begin ();  Iterator to walk through key-value pairs of all variations for a given object. ;  ; const_iterator cbegin ();  ; const_iterator cend () const;  ; iterator end ();  ; const std::vector< std::string > & GetKeys () const;  ; T & operator[] (const std::string &key);  . Private Member Functions;  RResultMap (std::shared_ptr< T > &&nominalResult, std::vector< std::shared_ptr< T > > &&variedResults, std::vector< std::string > &&keys, ROOT::Detail::RDF::RLoopManager &lm, std::shared_ptr< ROOT::Internal::RDF::RActionBase > nominalAction, std::shared_ptr< ROOT::Internal::RDF::RActionBase > variedAction);  ; void RunEventLoopIfNeeded ();  . Private Attributes; std::vector< std::string > fKeys;  ; ROOT::Detail::RDF::RLoopManager * fLoopManager;  ; std::unordered_map< std::string, std::shared_ptr< T > > fMap;  ; std::shared_ptr< ROOT::Internal::RDF::RActionBase > fNominalAction;  ; std::shared_ptr< ROOT::Internal::RDF::RActionBase > fVariedAction;  . Friends; class ::ROOT::RDF::RResultHandle;  ; std::unique_ptr< ROOT::Detail::RDF::RMergeableVariations< T > > ROOT::Detail::RDF::GetMergeableValue (RResultMap< T > &rmap);  ; RResultMap ROOT::Internal::RDF::CloneResultAndAction (const RResultMap< T > &inmap);  ; RResultMap ROOT::Internal::RDF::MakeResultMap (std::shared_ptr< T > nominalResult, std::vector< std::shared_ptr< T ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RDF_1_1Experimental_1_1RResultMap.html:118,Load,Loading,118,doc/master/classROOT_1_1RDF_1_1Experimental_1_1RResultMap.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1Experimental_1_1RResultMap.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::RDF::RCsvDS Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Private Types |; Private Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; ROOT::RDF::RCsvDS Class ReferencefinalDataframe. ; RDataFrame data source class for reading CSV files. ; The RCsvDS class implements a CSV file reader for RDataFrame.; A RDataFrame that reads from a CSV file can be constructed using the factory method ROOT::RDF::FromCSV, which accepts five parameters:; Path to the CSV file.; Boolean that specifies whether the first row of the CSV file contains headers or not (optional, default true). If false, header names will be automatically generated as Col0, Col1, ..., ColN.; Delimiter (optional, default ',').; Chunk size (optional, default is -1 to read all) - number of lines to read at a time; Column Types (optional, default is an empty map). A map with column names as keys and their type (expressed as a single character, see below) as values. The type of columns that do not appear in the map is inferred from the data. The supported types are:; Integer: stored as a 64-bit long long int; can be specified in the column types map with 'L'.; Floating point number: stored with double precision; specified with 'D'.; Boolean: matches the literals true and false; specified with 'O'.; String: stored as an std::string, matches anything that does not fall into any of the previous types; specified with 'T'. These are some formatting rules expected by the RCsvDS implementation:; All records must have the same number of fields, in the same order.; Any field may be quoted. ""1997"",""Ford"",""E350"". Fields with embedded delimiters (e.g. comma) must be quoted. 1997,Ford,E350,""Super, luxurious truck"". Fields with double-quote characters must be quoted, and each of the embedded double-quote characters must be represented by a pair of",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RDF_1_1RCsvDS.html:86,Load,Loading,86,doc/master/classROOT_1_1RDF_1_1RCsvDS.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RCsvDS.html,1,['Load'],['Loading']
Performance,. ROOT: ROOT::RDF::RCutFlowReport Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; ROOT::RDF::RCutFlowReport Class Reference. . Definition at line 49 of file RCutFlowReport.hxx. Public Types; using const_iterator = typename std::vector< TCutInfo >::const_iterator;  . Public Member Functions; const TCutInfo & At (std::string_view cutName);  ; const_iterator begin () const;  ; const_iterator end () const;  ; const TCutInfo & operator[] (std::string_view cutName);  ; void Print ();  . Private Member Functions; void AddCut (TCutInfo &&ci);  . Private Attributes; std::vector< TCutInfo > fCutInfos;  . Friends; class ROOT::Detail::RDF::RFilterBase;  . #include <ROOT/RDF/RCutFlowReport.hxx>; Member Typedef Documentation. ◆ const_iterator. using ROOT::RDF::RCutFlowReport::const_iterator = typename std::vector<TCutInfo>::const_iterator. Definition at line 57 of file RCutFlowReport.hxx. Member Function Documentation. ◆ AddCut(). void ROOT::RDF::RCutFlowReport::AddCut ; (; TCutInfo && ; ci). inlineprivate . Definition at line 54 of file RCutFlowReport.hxx. ◆ At(). const TCutInfo & ROOT::RDF::RCutFlowReport::At ; (; std::string_view ; cutName). inline . Definition at line 60 of file RCutFlowReport.hxx. ◆ begin(). const_iterator ROOT::RDF::RCutFlowReport::begin ; (; ); const. inline . Definition at line 61 of file RCutFlowReport.hxx. ◆ end(). const_iterator ROOT::RDF::RCutFlowReport::end ; (; ); const. inline . Definition at line 62 of file RCutFlowReport.hxx. ◆ operator[](). const TCutInfo & ROOT::RDF::RCutFlowReport::operator[] ; (; std::string_view ; cutName). Definition at line 33 of file RCutFlowReport.cxx. ◆ Print(). void ROOT::RDF::RCutFlowReport::Print ; (; ). Definition at line 21 of file RCutFlowReport.cxx. Friends And Related Symbol Documentation. ◆ ROOT::Detail::RDF::RFilter,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RDF_1_1RCutFlowReport.html:94,Load,Loading,94,doc/master/classROOT_1_1RDF_1_1RCutFlowReport.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RCutFlowReport.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::RDF::RDFDescription Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; Friends |; List of all members ; ROOT::RDF::RDFDescription Class ReferenceDataframe. ; A DFDescription contains useful information about a given RDataFrame computation graph. ; A DFDescription is returned by the Describe() RDataFrame method. Each DFDescription object can output either a brief or full description. ; Definition at line 27 of file RDFDescription.hxx. Public Member Functions;  RDFDescription (const std::string &briefDescription, const std::string &fullDescription, unsigned int filecount);  ; std::string AsString (bool shortFormat=false) const;  ; unsigned int GetNFiles () const;  ; void Print (bool shortFormat=false) const;  . Private Attributes; std::string fBriefDescription;  ; unsigned int fFileCount;  ; std::string fFullDescription;  . Friends; std::ostream & operator<< (std::ostream &os, const RDFDescription &description);  . #include <ROOT/RDF/RDFDescription.hxx>; Constructor & Destructor Documentation. ◆ RDFDescription(). ROOT::RDF::RDFDescription::RDFDescription ; (; const std::string & ; briefDescription, . const std::string & ; fullDescription, . unsigned int ; filecount . ). Definition at line 17 of file RDFDescription.cxx. Member Function Documentation. ◆ AsString(). std::string ROOT::RDF::RDFDescription::AsString ; (; bool ; shortFormat = false); const. Definition at line 21 of file RDFDescription.cxx. ◆ GetNFiles(). unsigned int ROOT::RDF::RDFDescription::GetNFiles ; (; ); const. inline . Definition at line 38 of file RDFDescription.hxx. ◆ Print(). void ROOT::RDF::RDFDescription::Print ; (; bool ; shortFormat = false); const. Definition at line 29 of file RDFDescription.cxx. Friends And Related Symbol Documentation. ◆ operator<<. std::ostream & operator<< ; (; std::ostream & ; os, . const RDFDescription & ; description . ). friend . Definit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RDF_1_1RDFDescription.html:94,Load,Loading,94,doc/master/classROOT_1_1RDF_1_1RDFDescription.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RDFDescription.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::RDF::RDataSource Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Types |; Protected Member Functions |; List of all members ; ROOT::RDF::RDataSource Class ReferenceabstractDataframe. ; RDataSource defines an API that RDataFrame can use to read arbitrary data formats. ; A concrete RDataSource implementation (i.e. a class that inherits from RDataSource and implements all of its pure methods) provides an adaptor that RDataFrame can leverage to read any kind of tabular data formats. RDataFrame calls into RDataSource to retrieve information about the data, retrieve (thread-local) readers or ""cursors"" for selected columns and to advance the readers to the desired data entry.; The sequence of calls that RDataFrame (or any other client of a RDataSource) performs is the following:. SetNSlots() : inform RDataSource of the desired level of parallelism; GetColumnReaders() : retrieve from RDataSource per-thread readers for the desired columns; Initialize() : inform RDataSource that an event-loop is about to start; GetEntryRanges() : retrieve from RDataSource a set of ranges of entries that can be processed concurrently; InitSlot() : inform RDataSource that a certain thread is about to start working on a certain range of entries; SetEntry() : inform RDataSource that a certain thread is about to start working on a certain entry; FinalizeSlot() : inform RDataSource that a certain thread finished working on a certain range of entries; Finalize() : inform RDataSource that an event-loop finished. RDataSource implementations must support running multiple event-loops consecutively (although sequentially) on the same dataset.; SetNSlots() is called once per RDataSource object, typically when it is associated to a RDataFrame.; GetColumnReaders() can be called several times, potentially with the same arguments, also in-between event-loops, but not during an event-loop.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RDF_1_1RDataSource.html:91,Load,Loading,91,doc/master/classROOT_1_1RDF_1_1RDataSource.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RDataSource.html,2,"['Load', 'perform']","['Loading', 'performs']"
Performance,". ROOT: ROOT::RDF::RDisplay Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Types |; Private Member Functions |; Private Attributes |; Static Private Attributes |; Friends |; List of all members ; ROOT::RDF::RDisplay Class ReferenceDataframe. ; This class is the textual representation of the content of a columnar dataset. ; This class is provided to the user, and it can be used to print on screen the entries of the dataset requested through the Display action in a compact representation or to return the full representation of the events as a string. In order to apply proper formatting the content is buffered in memory as strings. ; Definition at line 65 of file RDisplay.hxx. Public Member Functions;  RDisplay (const VecStr_t &columnNames, const VecStr_t &types, size_t nMaxCollectionElements);  Creates an RDisplay to print the event values. ;  ; std::string AsString () const;  Returns the representation as a string. ;  ; void Print () const;  Prints the representation to the standard output. ;  . Private Types; using DElement_t = ROOT::Internal::RDF::RDisplayElement;  ; using VecStr_t = std::vector< std::string >;  . Private Member Functions; void AddCollectionToRow (const VecStr_t &collection);  Adds a collection to the table. ;  ; bool AddInterpreterString (std::stringstream &, bool &element, const int &index);  Appends a string if the T type is boolean. ;  ; bool AddInterpreterString (std::stringstream &, ROOT::RVec< char > &charArr, const int &index);  AddInterpreterString overload for arrays of chars. ;  ; template<typename T , std::enable_if_t< ROOT::Internal::RDF::IsDataContainer< T >::value &&std::is_arithmetic_v< typename T::value_type > &&!std::is_same_v< typename T::value_type, bool >, int > = 0> ; bool AddInterpreterString (std::stringstream &, T &collection, const int &index);  Represent a collection of values as a collection of strings. ;  ; templa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RDF_1_1RDisplay.html:88,Load,Loading,88,doc/master/classROOT_1_1RDF_1_1RDisplay.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RDisplay.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::RDF::RInterface< Proxied, DataSource > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Private Types |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; ROOT::RDF::RInterface< Proxied, DataSource > Class Template ReferenceDataframe. ; template<typename Proxied, typename DataSource = void>; class ROOT::RDF::RInterface< Proxied, DataSource >The public interface to the RDataFrame federation of classes. ; Template Parameters. ProxiedOne of the ""node"" base types (e.g. RLoopManager, RFilterBase). The user never specifies this type manually. ; DataSourceThe type of the RDataSource which is providing the data to the data frame. There is no source by default. The documentation of each method features a one liner illustrating how to use the method, for example showing how the majority of the template parameters are automatically deduced requiring no or very little effort by the user. ; Definition at line 113 of file RInterface.hxx. Public Member Functions;  RInterface (const RInterface &)=default;  Copy-ctor for RInterface. ;  ; template<typename T = Proxied, typename = std::enable_if_t<std::is_same<T, RLoopManager>::value, int>> ;  RInterface (const std::shared_ptr< RLoopManager > &proxied);  Build a RInterface from a RLoopManager. ;  ;  RInterface (RInterface &&)=default;  Move-ctor for RInterface. ;  ; template<typename AccFun , typename MergeFun , typename R = typename TTraits::CallableTraits<AccFun>::ret_type, typename ArgTypes = typename TTraits::CallableTraits<AccFun>::arg_types, typename ArgTypesNoDecay = typename TTraits::CallableTraits<AccFun>::arg_types_nodecay, typename U = TTraits::TakeFirstParameter_t<ArgTypes>, typename T = TTraits::TakeFirstParameter_t<TTraits::RemoveFirstParameter_t<ArgTypes>>> ; RResultPtr< U > Aggregate (AccFun aggregator, MergeFun merger, std::string_view c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:122,Load,Loading,122,doc/master/classROOT_1_1RDF_1_1RInterface.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::RDF::RInterfaceBase Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; ROOT::RDF::RInterfaceBase Class Reference. . Definition at line 52 of file RInterfaceBase.hxx. Public Member Functions;  RInterfaceBase (RDFDetail::RLoopManager &lm, const RDFInternal::RColumnRegister &colRegister);  ;  RInterfaceBase (std::shared_ptr< RDFDetail::RLoopManager > lm);  ; RDFDescription Describe ();  Return information about the dataframe. ;  ; ColumnNames_t GetColumnNames ();  Returns the names of the available columns. ;  ; std::string GetColumnType (std::string_view column);  Return the type of a given column as a string. ;  ; ColumnNames_t GetDefinedColumnNames ();  Returns the names of the defined columns. ;  ; unsigned int GetNFiles ();  ; unsigned int GetNRuns () const;  Gets the number of event loops run. ;  ; unsigned int GetNSlots () const;  Gets the number of data processing slots. ;  ; RVariationsDescription GetVariations () const;  Return a descriptor for the systematic variations registered in this branch of the computation graph. ;  ; bool HasColumn (std::string_view columnName);  Checks if a column is present in the dataset. ;  . Protected Member Functions; void AddDefaultColumns ();  ; template<typename... ColumnTypes> ; void CheckAndFillDSColumns (ColumnNames_t validCols, TTraits::TypeList< ColumnTypes... > typeList);  ; void CheckIMTDisabled (std::string_view callerName);  ; template<typename ActionTag , typename... ColTypes, typename ActionResultType , typename RDFNode , typename HelperArgType = ActionResultType, std::enable_if_t< RDFInternal::RNeedJitting< ColTypes... >::value, int > = 0> ; RResultPtr< ActionResultType > CreateAction (const ColumnNames_t &columns, const std::shared_ptr< ActionResultType > &r, const std::shared_ptr< HelperArgType > &helperArg, const std::shared_pt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterfaceBase.html:94,Load,Loading,94,doc/master/classROOT_1_1RDF_1_1RInterfaceBase.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterfaceBase.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::RDF::RResultPtr< T > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Attributes |; Private Types |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; ROOT::RDF::RResultPtr< T > Class Template ReferenceDataframe. ; template<typename T>; class ROOT::RDF::RResultPtr< T >Smart pointer for the return type of actions. ; A wrapper around the result of RDataFrame actions able to trigger calculations lazily. Template Parameters. TType of the action result. A smart pointer which allows to access the result of a RDataFrame action. The methods of the encapsulated object can be accessed via the arrow operator. Upon invocation of the arrow operator or dereferencing (operator*), the loop on the events and calculations of all scheduled actions are executed if needed. It is possible to iterate on the result proxy if the proxied object is a collection. for (auto& myItem : myResultProxy) { ... };; If iteration is not supported by the type of the proxied object, a compilation error is thrown. ; Definition at line 119 of file RResultPtr.hxx. Public Types; using Value_t = T;  Convenience alias to simplify access to proxied type. ;  . Public Member Functions;  RResultPtr ()=default;  ;  RResultPtr (const RResultPtr &)=default;  ; template<typename T2 , std::enable_if_t< std::is_constructible< std::shared_ptr< T >, std::shared_ptr< T2 > >::value, int > = 0> ;  RResultPtr (const RResultPtr< T2 > &r);  Convert a RResultPtr<T2> to a RResultPtr<T>. ;  ;  RResultPtr (RResultPtr &&)=default;  ; RIterationHelper< T >::Iterator_t begin ();  Return an iterator to the beginning of the contained object if this makes sense, throw a compilation error otherwise. ;  ; RIterationHelper< T >::Iterator_t end ();  Return an iterator to the end of the contained object if this makes sense, throw a compilation error otherwise. ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html:104,Load,Loading,104,doc/master/classROOT_1_1RDF_1_1RResultPtr.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::RDF::RSampleInfo Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::RDF::RSampleInfo Class Reference. ; This type represents a sample identifier, to be used in conjunction with RDataFrame features such as DefinePerSample() and per-sample callbacks. ; When the input data comes from a TTree, the string representation of RSampleInfo (which is returned by AsString() and that can be queried e.g. with Contains()) is of the form ""<filename>/<treename>"".; In multi-thread runs, different tasks might process different entry ranges of the same sample, so RSampleInfo also provides methods to inspect which part of a sample is being taken into consideration. ; Definition at line 35 of file RSampleInfo.hxx. Public Member Functions;  RSampleInfo ()=default;  ;  RSampleInfo (const RSampleInfo &)=default;  ;  RSampleInfo (RSampleInfo &&)=default;  ;  RSampleInfo (std::string_view id, std::pair< ULong64_t, ULong64_t > entryRange, const ROOT::RDF::Experimental::RSample *sample=nullptr);  ;  ~RSampleInfo ()=default;  ; const std::string & AsString () const;  Return a string representation of the sample name. ;  ; bool Contains (std::string_view substr) const;  Check whether the sample name contains the given substring. ;  ; bool Empty () const;  Check whether the sample name is empty. ;  ; std::pair< ULong64_t, ULong64_t > EntryRange () const;  Return the entry range in the sample that is being taken into consideration. ;  ; double GetD (const std::string &key) const;  Return the metadata value of type double given the key. ;  ; int GetI (const std::string &key) const;  Return the metadata value of type int given the key. ;  ; std::string GetS (const std::string &key) const;  Return the metadata value of type string given the key. ;  ; unsigned int GetSampleId () const;  Get the sample id as an int. ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RDF_1_1RSampleInfo.html:91,Load,Loading,91,doc/master/classROOT_1_1RDF_1_1RSampleInfo.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RSampleInfo.html,2,"['Load', 'multi-thread']","['Loading', 'multi-thread']"
Performance,". ROOT: ROOT::RDF::RSnapshotOptions Struct Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Public Attributes |; List of all members ; ROOT::RDF::RSnapshotOptions Struct Reference. ; A collection of options to steer the creation of the dataset on file. ; Definition at line 22 of file RSnapshotOptions.hxx. Public Types; using ECAlgo = ROOT::RCompressionSetting::EAlgorithm::EValues;  . Public Member Functions;  RSnapshotOptions ()=default;  ;  RSnapshotOptions (const RSnapshotOptions &)=default;  ;  RSnapshotOptions (RSnapshotOptions &&)=default;  ;  RSnapshotOptions (std::string_view mode, ECAlgo comprAlgo, int comprLevel, int autoFlush, int splitLevel, bool lazy, bool overwriteIfExists=false, bool vector2RVec=true);  . Public Attributes; int fAutoFlush = 0;  AutoFlush value for output tree. ;  ; ECAlgo fCompressionAlgorithm;  Compression algorithm of output file. ;  ; int fCompressionLevel = 1;  Compression level of output file. ;  ; bool fLazy = false;  Do not start the event loop when Snapshot is called. ;  ; std::string fMode = ""RECREATE"";  Mode of creation of output file. ;  ; bool fOverwriteIfExists = false;  If fMode is ""UPDATE"", overwrite object in output file if it already exists. ;  ; int fSplitLevel = 99;  Split level of output tree. ;  ; bool fVector2RVec = true;  If set to true will convert std::vector columns to RVec when saving to disk. ;  . #include <ROOT/RSnapshotOptions.hxx>; Member Typedef Documentation. ◆ ECAlgo. using ROOT::RDF::RSnapshotOptions::ECAlgo = ROOT::RCompressionSetting::EAlgorithm::EValues. Definition at line 23 of file RSnapshotOptions.hxx. Constructor & Destructor Documentation. ◆ RSnapshotOptions() [1/4]. ROOT::RDF::RSnapshotOptions::RSnapshotOptions ; (; ). default . ◆ RSnapshotOptions() [2/4]. ROOT::RDF::RSnapshotOptions::RSnapshotOptions ; (; const RSnapshotOptions & ; ). default . ◆ RSnapshotOptions() [3/4]. ROOT::RDF::RS",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structROOT_1_1RDF_1_1RSnapshotOptions.html:97,Load,Loading,97,doc/master/structROOT_1_1RDF_1_1RSnapshotOptions.html,https://root.cern,https://root.cern/doc/master/structROOT_1_1RDF_1_1RSnapshotOptions.html,1,['Load'],['Loading']
Performance,. ROOT: ROOT::RDF::RVariationsDescription Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Types |; Private Attributes |; List of all members ; ROOT::RDF::RVariationsDescription Class Reference. ; A descriptor for the systematic variations known to a given RDataFrame node. ; Definition at line 28 of file RVariationsDescription.hxx. Public Member Functions;  RVariationsDescription (const Variations_t &variations);  ; std::string AsString () const;  ; void Print () const;  . Private Types; using Variations_t = std::vector< const ROOT::Internal::RDF::RVariationBase * >;  . Private Attributes; std::string fStringRepr;  . #include <ROOT/RDF/RVariationsDescription.hxx>; Member Typedef Documentation. ◆ Variations_t. using ROOT::RDF::RVariationsDescription::Variations_t = std::vector<const ROOT::Internal::RDF::RVariationBase *>. private . Definition at line 30 of file RVariationsDescription.hxx. Constructor & Destructor Documentation. ◆ RVariationsDescription(). ROOT::RDF::RVariationsDescription::RVariationsDescription ; (; const Variations_t & ; variations). Definition at line 49 of file RVariationsDescription.cxx. Member Function Documentation. ◆ AsString(). std::string ROOT::RDF::RVariationsDescription::AsString ; (; ); const. inline . Definition at line 35 of file RVariationsDescription.hxx. ◆ Print(). void ROOT::RDF::RVariationsDescription::Print ; (; ); const. Definition at line 53 of file RVariationsDescription.cxx. Member Data Documentation. ◆ fStringRepr. std::string ROOT::RDF::RVariationsDescription::fStringRepr. private . Definition at line 29 of file RVariationsDescription.hxx. Libraries for ROOT::RDF::RVariationsDescription:. [legend]; The documentation for this class was generated from the following files:; tree/dataframe/inc/ROOT/RDF/RVariationsDescription.hxx; tree/dataframe/src/RVariationsDescription.cxx. ROOTRDFRVariationsDescription. ROOT master - Ref,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RDF_1_1RVariationsDescription.html:102,Load,Loading,102,doc/master/classROOT_1_1RDF_1_1RVariationsDescription.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RVariationsDescription.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::RDF::TH1DModel Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; ROOT::RDF::TH1DModel Class ReferenceDataframe. ; A struct which stores the parameters of a TH1D. ; Definition at line 30 of file HistoModels.hxx. Public Member Functions;  TH1DModel ()=default;  ;  TH1DModel (const ::TH1D &h);  ;  TH1DModel (const char *name, const char *title, int nbinsx, const double *xbins);  ;  TH1DModel (const char *name, const char *title, int nbinsx, const float *xbins);  ;  TH1DModel (const char *name, const char *title, int nbinsx, double xlow, double xup);  ;  TH1DModel (const TH1DModel &)=default;  ;  ~TH1DModel ();  ; std::shared_ptr<::TH1D > GetHistogram () const;  . Public Attributes; std::vector< double > fBinXEdges;  ; TString fName;  ; int fNbinsX = 128;  ; TString fTitle;  ; double fXLow = 0.;  ; double fXUp = 64.;  . #include <ROOT/RDF/HistoModels.hxx>; Constructor & Destructor Documentation. ◆ TH1DModel() [1/6]. ROOT::RDF::TH1DModel::TH1DModel ; (; ). default . ◆ TH1DModel() [2/6]. ROOT::RDF::TH1DModel::TH1DModel ; (; const TH1DModel & ; ). default . ◆ ~TH1DModel(). ROOT::RDF::TH1DModel::~TH1DModel ; (; ). Definition at line 114 of file RDFHistoModels.cxx. ◆ TH1DModel() [3/6]. ROOT::RDF::TH1DModel::TH1DModel ; (; const ::TH1D & ; h). Definition at line 85 of file RDFHistoModels.cxx. ◆ TH1DModel() [4/6]. ROOT::RDF::TH1DModel::TH1DModel ; (; const char * ; name, . const char * ; title, . int ; nbinsx, . double ; xlow, . double ; xup . ). Definition at line 89 of file RDFHistoModels.cxx. ◆ TH1DModel() [5/6]. ROOT::RDF::TH1DModel::TH1DModel ; (; const char * ; name, . const char * ; title, . int ; nbinsx, . const float * ; xbins . ). Definition at line 93 of file RDFHistoModels.cxx. ◆ TH1DModel() [6/6]. ROOT::RDF::TH1DModel::TH1DModel ; (; const char * ; name, . const char * ; title, . int ; nbinsx, . const double * ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structROOT_1_1RDF_1_1TH1DModel.html:89,Load,Loading,89,doc/master/structROOT_1_1RDF_1_1TH1DModel.html,https://root.cern,https://root.cern/doc/master/structROOT_1_1RDF_1_1TH1DModel.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::RDF::TH2DModel Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; ROOT::RDF::TH2DModel Class ReferenceDataframe. ; A struct which stores the parameters of a TH2D. ; Definition at line 48 of file HistoModels.hxx. Public Member Functions;  TH2DModel ()=default;  ;  TH2DModel (const ::TH2D &h);  ;  TH2DModel (const char *name, const char *title, int nbinsx, const double *xbins, int nbinsy, const double *ybins);  ;  TH2DModel (const char *name, const char *title, int nbinsx, const double *xbins, int nbinsy, double ylow, double yup);  ;  TH2DModel (const char *name, const char *title, int nbinsx, const float *xbins, int nbinsy, const float *ybins);  ;  TH2DModel (const char *name, const char *title, int nbinsx, double xlow, double xup, int nbinsy, const double *ybins);  ;  TH2DModel (const char *name, const char *title, int nbinsx, double xlow, double xup, int nbinsy, double ylow, double yup);  ;  TH2DModel (const TH2DModel &)=default;  ;  ~TH2DModel ();  ; std::shared_ptr<::TH2D > GetHistogram () const;  . Public Attributes; std::vector< double > fBinXEdges;  ; std::vector< double > fBinYEdges;  ; TString fName;  ; int fNbinsX = 128;  ; int fNbinsY = 128;  ; TString fTitle;  ; double fXLow = 0.;  ; double fXUp = 64.;  ; double fYLow = 0.;  ; double fYUp = 64.;  . #include <ROOT/RDF/HistoModels.hxx>; Constructor & Destructor Documentation. ◆ TH2DModel() [1/8]. ROOT::RDF::TH2DModel::TH2DModel ; (; ). default . ◆ TH2DModel() [2/8]. ROOT::RDF::TH2DModel::TH2DModel ; (; const TH2DModel & ; ). default . ◆ ~TH2DModel(). ROOT::RDF::TH2DModel::~TH2DModel ; (; ). Definition at line 172 of file RDFHistoModels.cxx. ◆ TH2DModel() [3/8]. ROOT::RDF::TH2DModel::TH2DModel ; (; const ::TH2D & ; h). Definition at line 118 of file RDFHistoModels.cxx. ◆ TH2DModel() [4/8]. ROOT::RDF::TH2DModel::TH2DModel ; (; const char * ; name, . const cha",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structROOT_1_1RDF_1_1TH2DModel.html:89,Load,Loading,89,doc/master/structROOT_1_1RDF_1_1TH2DModel.html,https://root.cern,https://root.cern/doc/master/structROOT_1_1RDF_1_1TH2DModel.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::RDF::TH3DModel Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; ROOT::RDF::TH3DModel Class ReferenceDataframe. ; A struct which stores the parameters of a TH3D. ; Definition at line 73 of file HistoModels.hxx. Public Member Functions;  TH3DModel ()=default;  ;  TH3DModel (const ::TH3D &h);  ;  TH3DModel (const char *name, const char *title, int nbinsx, const double *xbins, int nbinsy, const double *ybins, int nbinsz, const double *zbins);  ;  TH3DModel (const char *name, const char *title, int nbinsx, const float *xbins, int nbinsy, const float *ybins, int nbinsz, const float *zbins);  ;  TH3DModel (const char *name, const char *title, int nbinsx, double xlow, double xup, int nbinsy, double ylow, double yup, int nbinsz, double zlow, double zup);  ;  TH3DModel (const TH3DModel &)=default;  ;  ~TH3DModel ();  ; std::shared_ptr<::TH3D > GetHistogram () const;  . Public Attributes; std::vector< double > fBinXEdges;  ; std::vector< double > fBinYEdges;  ; std::vector< double > fBinZEdges;  ; TString fName;  ; int fNbinsX = 128;  ; int fNbinsY = 128;  ; int fNbinsZ = 128;  ; TString fTitle;  ; double fXLow = 0.;  ; double fXUp = 64.;  ; double fYLow = 0.;  ; double fYUp = 64.;  ; double fZLow = 0.;  ; double fZUp = 64.;  . #include <ROOT/RDF/HistoModels.hxx>; Constructor & Destructor Documentation. ◆ TH3DModel() [1/6]. ROOT::RDF::TH3DModel::TH3DModel ; (; ). default . ◆ TH3DModel() [2/6]. ROOT::RDF::TH3DModel::TH3DModel ; (; const TH3DModel & ; ). default . ◆ ~TH3DModel(). ROOT::RDF::TH3DModel::~TH3DModel ; (; ). Definition at line 217 of file RDFHistoModels.cxx. ◆ TH3DModel() [3/6]. ROOT::RDF::TH3DModel::TH3DModel ; (; const ::TH3D & ; h). Definition at line 176 of file RDFHistoModels.cxx. ◆ TH3DModel() [4/6]. ROOT::RDF::TH3DModel::TH3DModel ; (; const char * ; name, . const char * ; title, . int ; nbinsx, . double ; x",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structROOT_1_1RDF_1_1TH3DModel.html:89,Load,Loading,89,doc/master/structROOT_1_1RDF_1_1TH3DModel.html,https://root.cern,https://root.cern/doc/master/structROOT_1_1RDF_1_1TH3DModel.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::RDF::THnDModel Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; ROOT::RDF::THnDModel Class ReferenceDataframe. ; A struct which stores the parameters of a THnD. ; Definition at line 102 of file HistoModels.hxx. Public Member Functions;  THnDModel ()=default;  ;  THnDModel (const ::THnD &h);  ;  THnDModel (const char *name, const char *title, int dim, const int *nbins, const double *xmin, const double *xmax);  ;  THnDModel (const char *name, const char *title, int dim, const int *nbins, const std::vector< std::vector< double > > &xbins);  ;  THnDModel (const char *name, const char *title, int dim, const std::vector< int > &nbins, const std::vector< double > &xmin, const std::vector< double > &xmax);  ;  THnDModel (const char *name, const char *title, int dim, const std::vector< int > &nbins, const std::vector< std::vector< double > > &xbins);  ;  THnDModel (const THnDModel &)=default;  ;  ~THnDModel ();  ; std::shared_ptr<::THnD > GetHistogram () const;  . Public Attributes; std::vector< std::vector< double > > fBinEdges;  ; int fDim;  ; TString fName;  ; std::vector< int > fNbins;  ; TString fTitle;  ; std::vector< double > fXmax;  ; std::vector< double > fXmin;  . #include <ROOT/RDF/HistoModels.hxx>; Constructor & Destructor Documentation. ◆ THnDModel() [1/7]. ROOT::RDF::THnDModel::THnDModel ; (; ). default . ◆ THnDModel() [2/7]. ROOT::RDF::THnDModel::THnDModel ; (; const THnDModel & ; ). default . ◆ ~THnDModel(). ROOT::RDF::THnDModel::~THnDModel ; (; ). Definition at line 284 of file RDFHistoModels.cxx. ◆ THnDModel() [3/7]. ROOT::RDF::THnDModel::THnDModel ; (; const ::THnD & ; h). Definition at line 221 of file RDFHistoModels.cxx. ◆ THnDModel() [4/7]. ROOT::RDF::THnDModel::THnDModel ; (; const char * ; name, . const char * ; title, . int ; dim, . const int * ; nbins, . const double * ; xmin, . const double * ; x",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structROOT_1_1RDF_1_1THnDModel.html:89,Load,Loading,89,doc/master/structROOT_1_1RDF_1_1THnDModel.html,https://root.cern,https://root.cern/doc/master/structROOT_1_1RDF_1_1THnDModel.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::RDF::TProfile1DModel Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; ROOT::RDF::TProfile1DModel Class ReferenceDataframe. ; A struct which stores the parameters of a TProfile. ; Definition at line 126 of file HistoModels.hxx. Public Member Functions;  TProfile1DModel ()=default;  ;  TProfile1DModel (const ::TProfile &h);  ;  TProfile1DModel (const char *name, const char *title, int nbinsx, const double *xbins, const char *option="""");  ;  TProfile1DModel (const char *name, const char *title, int nbinsx, const double *xbins, double ylow, double yup, const char *option="""");  ;  TProfile1DModel (const char *name, const char *title, int nbinsx, const float *xbins, const char *option="""");  ;  TProfile1DModel (const char *name, const char *title, int nbinsx, double xlow, double xup, const char *option="""");  ;  TProfile1DModel (const char *name, const char *title, int nbinsx, double xlow, double xup, double ylow, double yup, const char *option="""");  ;  TProfile1DModel (const TProfile1DModel &)=default;  ;  ~TProfile1DModel ();  ; std::shared_ptr<::TProfile > GetProfile () const;  . Public Attributes; std::vector< double > fBinXEdges;  ; TString fName;  ; int fNbinsX = 128;  ; TString fOption;  ; TString fTitle;  ; double fXLow = 0.;  ; double fXUp = 64.;  ; double fYLow = 0.;  ; double fYUp = 0.;  . #include <ROOT/RDF/HistoModels.hxx>; Constructor & Destructor Documentation. ◆ TProfile1DModel() [1/8]. ROOT::RDF::TProfile1DModel::TProfile1DModel ; (; ). default . ◆ TProfile1DModel() [2/8]. ROOT::RDF::TProfile1DModel::TProfile1DModel ; (; const TProfile1DModel & ; ). default . ◆ ~TProfile1DModel(). ROOT::RDF::TProfile1DModel::~TProfile1DModel ; (; ). Definition at line 336 of file RDFHistoModels.cxx. ◆ TProfile1DModel() [3/8]. ROOT::RDF::TProfile1DModel::TProfile1DModel ; (; const ::TProfile & ; h). Definition at line 288 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structROOT_1_1RDF_1_1TProfile1DModel.html:95,Load,Loading,95,doc/master/structROOT_1_1RDF_1_1TProfile1DModel.html,https://root.cern,https://root.cern/doc/master/structROOT_1_1RDF_1_1TProfile1DModel.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::RDF::TProfile2DModel Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; ROOT::RDF::TProfile2DModel Class ReferenceDataframe. ; A struct which stores the parameters of a TProfile2D. ; Definition at line 151 of file HistoModels.hxx. Public Member Functions;  TProfile2DModel ()=default;  ;  TProfile2DModel (const ::TProfile2D &h);  ;  TProfile2DModel (const char *name, const char *title, int nbinsx, const double *xbins, int nbinsy, const double *ybins, const char *option="""");  ;  TProfile2DModel (const char *name, const char *title, int nbinsx, const double *xbins, int nbinsy, double ylow, double yup, const char *option="""");  ;  TProfile2DModel (const char *name, const char *title, int nbinsx, double xlow, double xup, int nbinsy, const double *ybins, const char *option="""");  ;  TProfile2DModel (const char *name, const char *title, int nbinsx, double xlow, double xup, int nbinsy, double ylow, double yup, const char *option="""");  ;  TProfile2DModel (const char *name, const char *title, int nbinsx, double xlow, double xup, int nbinsy, double ylow, double yup, double zlow, double zup, const char *option="""");  ;  TProfile2DModel (const TProfile2DModel &)=default;  ;  ~TProfile2DModel ();  ; std::shared_ptr<::TProfile2D > GetProfile () const;  . Public Attributes; std::vector< double > fBinXEdges;  ; std::vector< double > fBinYEdges;  ; TString fName;  ; int fNbinsX = 128;  ; int fNbinsY = 128;  ; TString fOption;  ; TString fTitle;  ; double fXLow = 0.;  ; double fXUp = 64.;  ; double fYLow = 0.;  ; double fYUp = 64.;  ; double fZLow = 0.;  ; double fZUp = 0.;  . #include <ROOT/RDF/HistoModels.hxx>; Constructor & Destructor Documentation. ◆ TProfile2DModel() [1/8]. ROOT::RDF::TProfile2DModel::TProfile2DModel ; (; ). default . ◆ TProfile2DModel() [2/8]. ROOT::RDF::TProfile2DModel::TProfile2DModel ; (; const TProfile2DModel &",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structROOT_1_1RDF_1_1TProfile2DModel.html:95,Load,Loading,95,doc/master/structROOT_1_1RDF_1_1TProfile2DModel.html,https://root.cern,https://root.cern/doc/master/structROOT_1_1RDF_1_1TProfile2DModel.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::RDataFrame Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; List of all members ; ROOT::RDataFrame Class ReferenceDataframe. ; ROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree , CSV and other data formats, in C++ or Python. ; In addition, multi-threading and other low-level optimisations allow users to exploit all the resources available on their machines completely transparently.; Skip to the class reference or keep reading for the user guide.; In a nutshell: ROOT::EnableImplicitMT(); // Tell ROOT you want to go parallel; ROOT::RDataFrame d(""myTree"", ""file_*.root""); // Interface to TTree and TChain; auto myHisto = d.Histo1D(""Branch_A""); // This books the (lazy) filling of a histogram; myHisto->Draw(); // Event loop is run here, upon first access to a result; d#define d(i)Definition RSha256.hxx:102; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; ROOT::EnableImplicitMTvoid EnableImplicitMT(UInt_t numthreads=0)Enable ROOT's implicit multi-threading for all objects and methods that provide an internal paralleli...Definition TROOT.cxx:539; Calculations are expressed in terms of a type-safe functional chain of actions and transformations, RDataFrame takes care of their execution. The implementation automatically puts in place several low level optimisations such as multi-thread parallelization and caching. For the impatient user; You can directly see RDataFrame in action in our tutorials, in C++ or Python. Table of Contents. Cheat sheet; Introduction; Crash course; Working with collections; Transformations: manipulating data; Actions: getting results; Distributed execution in Python; Performance tips and parallel execution; More features; Systematic variations; RDataFrame objects as function arguments and re",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RDataFrame.html:85,Load,Loading,85,doc/master/classROOT_1_1RDataFrame.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html,2,"['Load', 'multi-thread']","['Loading', 'multi-threading']"
Performance,". ROOT: ROOT::RDataFrame Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; List of all members ; ROOT::RDataFrame Class ReferenceDataframe. ; ROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree , CSV and other data formats, in C++ or Python. ; In addition, multi-threading and other low-level optimisations allow users to exploit all the resources available on their machines completely transparently.; Skip to the class reference or keep reading for the user guide.; In a nutshell: ROOT::EnableImplicitMT(); // Tell ROOT you want to go parallel; ROOT::RDataFrame d(""myTree"", ""file_*.root""); // Interface to TTree and TChain; auto myHisto = d.Histo1D(""Branch_A""); // This books the (lazy) filling of a histogram; myHisto->Draw(); // Event loop is run here, upon first access to a result; d#define d(i)Definition RSha256.hxx:102; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; ROOT::EnableImplicitMTvoid EnableImplicitMT(UInt_t numthreads=0)Enable ROOT's implicit multi-threading for all objects and methods that provide an internal paralleli...Definition TROOT.cxx:539; Calculations are expressed in terms of a type-safe functional chain of actions and transformations, RDataFrame takes care of their execution. The implementation automatically puts in place several low level optimisations such as multi-thread parallelization and caching. For the impatient user; You can directly see RDataFrame in action in our tutorials, in C++ or Python. Table of Contents. Cheat sheet; Introduction; Crash course; Working with collections; Transformations: manipulating data; Actions: getting results; Distributed execution in Python; Performance tips and parallel execution; More features; Systematic variations; RDataFrame objects as function arguments and ret",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:84,Load,Loading,84,doc/v632/classROOT_1_1RDataFrame.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html,2,"['Load', 'multi-thread']","['Loading', 'multi-threading']"
Performance,". ROOT: ROOT::RFileDialog Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; Friends |; List of all members ; ROOT::RFileDialog Class ReferenceWeb Widgets » Browsable object | Web Widgets. ; Web-based FileDialog. ; Initial message send to client to configure layout. ; Definition at line 41 of file RFileDialog.hxx. Public Types; enum  EDialogTypes { kOpenFile; , kSaveAs; , kNewFile; };  . Public Member Functions;  RFileDialog (EDialogTypes kind=kOpenFile, const std::string &title="""", const std::string &fname="""");  constructor When title not specified, default will be used ;  ; virtual ~RFileDialog ();  destructor ;  ; bool GetCanChangePath () const;  Returns true if working path can be change with gui elements. ;  ; const std::string & GetFileName () const;  ; const auto & GetNameFilters () const;  Returns array of name filters. ;  ; std::string GetSelectedFilter () const;  Returns selected filter Can differ from specified value - if it does not match to existing entry in NameFilters. ;  ; const EDialogTypes & GetType () const;  ; std::string GetWorkingPath () const;  Returns current working path. ;  ; void Hide ();  Hide ROOT Browser. ;  ; bool IsCompleted () const;  ; void SetCallback (RFileDialogCallback_t callback);  Assign callback. ;  ; void SetCanChangePath (bool on=true);  Configure if working path in dialog can be changed via gui elements. ;  ; void SetNameFilters (const std::vector< std::string > &arr);  Set array of name filters like ""Text files (*.txt)"", ""Any files (*)"", ""Image files (*png *.jpg)"" Should be specified before starting dialog. ;  ; void SetSelectedFilter (const std::string &name);  Configure selected filter Has to be one of the string from NameFilters entry. ;  ; void SetWorkingPath (const std::string &);  Ch",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RFileDialog.html:86,Load,Loading,86,doc/master/classROOT_1_1RFileDialog.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RFileDialog.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::RFileDialog Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; Friends |; List of all members ; ROOT::RFileDialog Class ReferenceWeb Widgets » Browsable object. ; Web-based FileDialog. ; web-based FileDialog.; Initial message send to client to configure layout. ; Definition at line 41 of file RFileDialog.hxx. Public Types; enum  EDialogTypes { kOpenFile; , kSaveAs; , kNewFile; };  . Public Member Functions;  RFileDialog (EDialogTypes kind=kOpenFile, const std::string &title="""", const std::string &fname="""");  constructor When title not specified, default will be used ;  ; virtual ~RFileDialog ();  destructor ;  ; bool GetCanChangePath () const;  Returns true if working path can be change with gui elements. ;  ; const std::string & GetFileName () const;  ; const auto & GetNameFilters () const;  Returns array of name filters. ;  ; std::string GetSelectedFilter () const;  Returns selected filter Can differ from specified value - if it does not match to existing entry in NameFilters. ;  ; const EDialogTypes & GetType () const;  ; std::string GetWorkingPath () const;  Returns current working path. ;  ; void Hide ();  Hide ROOT Browser. ;  ; bool IsCompleted () const;  ; void SetCallback (RFileDialogCallback_t callback);  Assign callback. ;  ; void SetCanChangePath (bool on=true);  Configure if working path in dialog can be changed via gui elements. ;  ; void SetNameFilters (const std::vector< std::string > &arr);  Set array of name filters like ""Text files (*.txt)"", ""Any files (*)"", ""Image files (*png *.jpg)"" Should be specified before starting dialog. ;  ; void SetSelectedFilter (const std::string &name);  Configure selected filter Has to be one of the string from NameFilters entry. ;  ; void SetWorkingPath (const std::string",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RFileDialog.html:85,Load,Loading,85,doc/v632/classROOT_1_1RFileDialog.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RFileDialog.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::RGeoItem Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Attributes |; List of all members ; ROOT::RGeoItem Class ReferenceWeb Widgets » Browsable object. ; Representation of single item in the geometry browser. ; Definition at line 91 of file RGeomData.hxx. Public Member Functions;  RGeoItem ()=default;  Default constructor. ;  ;  RGeoItem (const std::string &_name, int _nchilds, int _nodeid, const std::string &_color, const std::string &_material="""", int _vis=0, int _pvis=0);  ;  ~RGeoItem () override=default;  ; void SetTop (bool on=true);  ;  Public Member Functions inherited from ROOT::Browsable::RItem;  RItem ()=default;  ;  RItem (const std::string &_name, int _nchilds=0, const std::string &_icon="""");  ; virtual ~RItem ()=default;  ; virtual bool Compare (const RItem *b, const std::string &) const;  ; const std::string & GetIcon () const;  ; const std::string & GetMTime () const;  ; const std::string & GetName () const;  ; const std::string & GetSize () const;  ; const std::string & GetTitle () const;  ; virtual bool IsFolder () const;  ; virtual bool IsHidden () const;  ; void SetChecked (bool on=true);  ; void SetExpanded (bool on=true);  ; void SetIcon (const std::string &_icon);  ; void SetMTime (const std::string &_mtime);  ; void SetName (const std::string &_name);  ; void SetSize (const std::string &_size);  ; void SetSize (Long64_t _size);  ; void SetTitle (const std::string &_title);  . Protected Attributes; std::string color;  color ;  ; int id {0};  node id ;  ; std::string material;  material ;  ; int pvis {0};  visibility of physical node ;  ; bool top {false};  indicates if node selected as top ;  ; int vis {0};  visibility of logical node ;  ;  Protected Attributes inherited from ROOT::Browsable::RItem; bool checked {false};  is checked, not yet used ;  ; bool expanded {false};  is expanded ;  ; std::string fsize;  item siz",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RGeoItem.html:83,Load,Loading,83,doc/master/classROOT_1_1RGeoItem.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeoItem.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::RGeoItem Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Attributes |; List of all members ; ROOT::RGeoItem Class ReferenceWeb Widgets » Browsable object. ; Representation of single item in the geometry browser. ; Definition at line 91 of file RGeomData.hxx. Public Member Functions;  RGeoItem ()=default;  Default constructor. ;  ;  RGeoItem (const std::string &_name, int _nchilds, int _nodeid, const std::string &_color, const std::string &_material="""", int _vis=0, int _pvis=0);  ;  ~RGeoItem () override=default;  ; void SetTop (bool on=true);  ;  Public Member Functions inherited from ROOT::Browsable::RItem;  RItem ()=default;  ;  RItem (const std::string &_name, int _nchilds=0, const std::string &_icon="""");  ; virtual ~RItem ()=default;  ; virtual bool Compare (const RItem *b, const std::string &) const;  ; const std::string & GetIcon () const;  ; const std::string & GetMTime () const;  ; const std::string & GetName () const;  ; const std::string & GetSize () const;  ; const std::string & GetTitle () const;  ; virtual bool IsFolder () const;  ; virtual bool IsHidden () const;  ; void SetChecked (bool on=true);  ; void SetExpanded (bool on=true);  ; void SetIcon (const std::string &_icon);  ; void SetMTime (const std::string &_mtime);  ; void SetName (const std::string &_name);  ; void SetSize (const std::string &_size);  ; void SetSize (Long64_t _size);  ; void SetTitle (const std::string &_title);  . Protected Attributes; std::string color;  color ;  ; int id {0};  node id ;  ; std::string material;  material ;  ; int pvis {0};  visibility of physical node ;  ; bool top {false};  indicates if node selected as top ;  ; int vis {0};  visibility of logical node ;  ;  Protected Attributes inherited from ROOT::Browsable::RItem; bool checked {false};  is checked, not yet used ;  ; bool expanded {false};  is expanded ;  ; std::string fsize;  item size",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RGeoItem.html:82,Load,Loading,82,doc/v632/classROOT_1_1RGeoItem.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeoItem.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::RGeoPainter Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::RGeoPainter Class Reference. . Definition at line 20 of file RGeoPainter.hxx. Public Member Functions;  RGeoPainter (TGeoManager *manager);  ;  ~RGeoPainter () override;  ; void AddSize3D (Int_t, Int_t, Int_t) override;  ; TVirtualGeoTrack * AddTrack (Int_t, Int_t, TObject *) override;  ; void AddTrackPoint (Double_t *, Double_t *, Bool_t=kFALSE) override;  ; void BombTranslation (const Double_t *, Double_t *) override;  ; void CheckBoundaryErrors (Int_t=1000000, Double_t=-1.) override;  ; void CheckBoundaryReference (Int_t=-1) override;  ; void CheckGeometry (Int_t, Double_t, Double_t, Double_t) const override;  ; void CheckGeometryFull (Bool_t=kTRUE, Bool_t=kTRUE, Int_t=10000, const Double_t *=nullptr) override;  ; void CheckOverlaps (const TGeoVolume *, Double_t=0.1, Option_t *="""") const override;  ; void CheckPoint (Double_t=0, Double_t=0, Double_t=0, Option_t *="""", Double_t=0.) override;  ; void CheckShape (TGeoShape *, Int_t, Int_t, Option_t *) override;  ; Int_t CountVisibleNodes () override;  ; void DefaultAngles () override;  ; void DefaultColors () override;  ; Int_t DistanceToPrimitiveVol (TGeoVolume *, Int_t, Int_t) override;  ; void Draw (Option_t *="""") override;  Default Draw method for all objects. ;  ; void DrawBatemanSol (TGeoBatemanSol *, Option_t *="""") override;  ; void DrawCurrentPoint (Int_t) override;  ; void DrawOnly (Option_t *="""") override;  ; void DrawOverlap (void *, Option_t *="""") override;  ; void DrawPanel () override;  ; void DrawPath (const char *, Option_t *="""") override;  ; void DrawPolygon (const TGeoPolygon *) override;  ; void DrawShape (TGeoShape *, Option_t *="""") override;  ; void DrawVolume (TGeoVolume *, Option_t *="""") override;  ; void EditGeometry (Option_t *="""") override;  ; void EstimateCameraMove (Doub",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RGeoPainter.html:86,Load,Loading,86,doc/master/classROOT_1_1RGeoPainter.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeoPainter.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::RGeoPainter Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::RGeoPainter Class Reference. . Definition at line 20 of file RGeoPainter.hxx. Public Member Functions;  RGeoPainter (TGeoManager *manager);  ;  ~RGeoPainter () override;  ; void AddSize3D (Int_t, Int_t, Int_t) override;  ; TVirtualGeoTrack * AddTrack (Int_t, Int_t, TObject *) override;  ; void AddTrackPoint (Double_t *, Double_t *, Bool_t=kFALSE) override;  ; void BombTranslation (const Double_t *, Double_t *) override;  ; void CheckBoundaryErrors (Int_t=1000000, Double_t=-1.) override;  ; void CheckBoundaryReference (Int_t=-1) override;  ; void CheckGeometry (Int_t, Double_t, Double_t, Double_t) const override;  ; void CheckGeometryFull (Bool_t=kTRUE, Bool_t=kTRUE, Int_t=10000, const Double_t *=nullptr) override;  ; void CheckOverlaps (const TGeoVolume *, Double_t=0.1, Option_t *="""") const override;  ; void CheckPoint (Double_t=0, Double_t=0, Double_t=0, Option_t *="""", Double_t=0.) override;  ; void CheckShape (TGeoShape *, Int_t, Int_t, Option_t *) override;  ; Int_t CountVisibleNodes () override;  ; void DefaultAngles () override;  ; void DefaultColors () override;  ; Int_t DistanceToPrimitiveVol (TGeoVolume *, Int_t, Int_t) override;  ; void Draw (Option_t *="""") override;  Default Draw method for all objects. ;  ; void DrawBatemanSol (TGeoBatemanSol *, Option_t *="""") override;  ; void DrawCurrentPoint (Int_t) override;  ; void DrawOnly (Option_t *="""") override;  ; void DrawOverlap (void *, Option_t *="""") override;  ; void DrawPanel () override;  ; void DrawPath (const char *, Option_t *="""") override;  ; void DrawPolygon (const TGeoPolygon *) override;  ; void DrawShape (TGeoShape *, Option_t *="""") override;  ; void DrawVolume (TGeoVolume *, Option_t *="""") override;  ; void EditGeometry (Option_t *="""") override;  ; void EstimateCameraMove (Doubl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RGeoPainter.html:85,Load,Loading,85,doc/v632/classROOT_1_1RGeoPainter.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeoPainter.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::RGeomBrowserIter Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::RGeomBrowserIter Class Reference. ; Iterator of hierarchical geometry structures. ; Definition at line 60 of file RGeomData.cxx. Public Member Functions;  RGeomBrowserIter (RGeomDescription &desc);  ; std::vector< int > CurrentIds () const;  Returns array of ids to currently selected node. ;  ; bool Enter ();  ; const std::string & GetColor () const;  ; const std::string & GetMaterial () const;  ; const std::string & GetName () const;  ; int GetNodeId () const;  ; int GetVisible () const;  ; bool HasChilds () const;  ; bool IsValid () const;  ; bool Leave ();  ; bool Navigate (const std::string &path);  Navigate to specified path - path specified as string and should start with ""/"". ;  ; bool Navigate (const std::vector< std::string > &path);  Navigate to specified path .  ; bool Navigate (TGeoVolume *vol);  Navigate to specified volume - find first occurrence. ;  ; bool Next ();  ; bool NextNode ();  ; int NumChilds () const;  ; bool Reset ();  . Private Attributes; unsigned fChild {0};  ; RGeomDescription & fDesc;  ; int fNodeId {0};  ; int fParentId {-1};  ; std::vector< int > fStackChilds;  ; std::vector< int > fStackParents;  . Constructor & Destructor Documentation. ◆ RGeomBrowserIter(). ROOT::RGeomBrowserIter::RGeomBrowserIter ; (; RGeomDescription & ; desc). inline . Definition at line 71 of file RGeomData.cxx. Member Function Documentation. ◆ CurrentIds(). std::vector< int > ROOT::RGeomBrowserIter::CurrentIds ; (; ); const. inline . Returns array of ids to currently selected node. ; Definition at line 248 of file RGeomData.cxx. ◆ Enter(). bool ROOT::RGeomBrowserIter::Enter ; (; ). inline . Definition at line 89 of file RGeomData.cxx. ◆ GetColor(). const std::string & ROOT::RGeomBrowserIter::GetColor ; (; ); const. inline . Definition",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RGeomBrowserIter.html:91,Load,Loading,91,doc/master/classROOT_1_1RGeomBrowserIter.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeomBrowserIter.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::RGeomBrowserIter Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::RGeomBrowserIter Class Reference. ; Iterator of hierarchical geometry structures. ; Definition at line 60 of file RGeomData.cxx. Public Member Functions;  RGeomBrowserIter (RGeomDescription &desc);  ; std::vector< int > CurrentIds () const;  Returns array of ids to currently selected node. ;  ; bool Enter ();  ; const std::string & GetColor () const;  ; const std::string & GetMaterial () const;  ; const std::string & GetName () const;  ; int GetNodeId () const;  ; int GetVisible () const;  ; bool HasChilds () const;  ; bool IsValid () const;  ; bool Leave ();  ; bool Navigate (const std::string &path);  Navigate to specified path - path specified as string and should start with ""/"". ;  ; bool Navigate (const std::vector< std::string > &path);  Navigate to specified path .  ; bool Navigate (TGeoVolume *vol);  Navigate to specified volume - find first occurrence. ;  ; bool Next ();  ; bool NextNode ();  ; int NumChilds () const;  ; bool Reset ();  . Private Attributes; unsigned fChild {0};  ; RGeomDescription & fDesc;  ; int fNodeId {0};  ; int fParentId {-1};  ; std::vector< int > fStackChilds;  ; std::vector< int > fStackParents;  . Constructor & Destructor Documentation. ◆ RGeomBrowserIter(). ROOT::RGeomBrowserIter::RGeomBrowserIter ; (; RGeomDescription & ; desc). inline . Definition at line 71 of file RGeomData.cxx. Member Function Documentation. ◆ CurrentIds(). std::vector< int > ROOT::RGeomBrowserIter::CurrentIds ; (; ); const. inline . Returns array of ids to currently selected node. ; Definition at line 248 of file RGeomData.cxx. ◆ Enter(). bool ROOT::RGeomBrowserIter::Enter ; (; ). inline . Definition at line 89 of file RGeomData.cxx. ◆ GetColor(). const std::string & ROOT::RGeomBrowserIter::GetColor ; (; ); const. inline . Definition ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RGeomBrowserIter.html:90,Load,Loading,90,doc/v632/classROOT_1_1RGeomBrowserIter.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeomBrowserIter.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::RGeomConfig Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Attributes |; List of all members ; ROOT::RGeomConfig Class Reference. ; Configuration parameters which can be configured on the client Send as is to-from client. ; Definition at line 162 of file RGeomData.hxx. Public Attributes; int build_shapes {1};  when shapes build on server 0 - never, 1 - TGeoComposite, 2 - plus non-cylindrical, 3 - all ;  ; std::string drawopt;  draw options for TGeoPainter ;  ; int maxnumfaces {0};  maximal number of faces ;  ; int maxnumnodes {0};  maximal number of nodes ;  ; int nsegm {0};  number of segments for cylindrical shapes ;  ; bool showtop {false};  show geometry top volume, off by default ;  ; int vislevel {0};  visible level ;  . #include <ROOT/RGeomData.hxx>; Member Data Documentation. ◆ build_shapes. int ROOT::RGeomConfig::build_shapes {1}. when shapes build on server 0 - never, 1 - TGeoComposite, 2 - plus non-cylindrical, 3 - all ; Definition at line 168 of file RGeomData.hxx. ◆ drawopt. std::string ROOT::RGeomConfig::drawopt. draw options for TGeoPainter ; Definition at line 170 of file RGeomData.hxx. ◆ maxnumfaces. int ROOT::RGeomConfig::maxnumfaces {0}. maximal number of faces ; Definition at line 166 of file RGeomData.hxx. ◆ maxnumnodes. int ROOT::RGeomConfig::maxnumnodes {0}. maximal number of nodes ; Definition at line 165 of file RGeomData.hxx. ◆ nsegm. int ROOT::RGeomConfig::nsegm {0}. number of segments for cylindrical shapes ; Definition at line 169 of file RGeomData.hxx. ◆ showtop. bool ROOT::RGeomConfig::showtop {false}. show geometry top volume, off by default ; Definition at line 167 of file RGeomData.hxx. ◆ vislevel. int ROOT::RGeomConfig::vislevel {0}. visible level ; Definition at line 164 of file RGeomData.hxx. Libraries for ROOT::RGeomConfig:. [legend]; The documentation for this class was generated from the following file:; geom/webviewer/inc/ROOT/RGeomD",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RGeomConfig.html:86,Load,Loading,86,doc/master/classROOT_1_1RGeomConfig.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeomConfig.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::RGeomConfig Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Attributes |; List of all members ; ROOT::RGeomConfig Class Reference. ; Configuration parameters which can be configured on the client Send as is to-from client. ; Definition at line 162 of file RGeomData.hxx. Public Attributes; int build_shapes {1};  when shapes build on server 0 - never, 1 - TGeoComposite, 2 - plus non-cylindrical, 3 - all ;  ; std::string drawopt;  draw options for TGeoPainter ;  ; int maxnumfaces {0};  maximal number of faces ;  ; int maxnumnodes {0};  maximal number of nodes ;  ; int nsegm {0};  number of segments for cylindrical shapes ;  ; bool showtop {false};  show geometry top volume, off by default ;  ; int vislevel {0};  visible level ;  . #include <ROOT/RGeomData.hxx>; Member Data Documentation. ◆ build_shapes. int ROOT::RGeomConfig::build_shapes {1}. when shapes build on server 0 - never, 1 - TGeoComposite, 2 - plus non-cylindrical, 3 - all ; Definition at line 168 of file RGeomData.hxx. ◆ drawopt. std::string ROOT::RGeomConfig::drawopt. draw options for TGeoPainter ; Definition at line 170 of file RGeomData.hxx. ◆ maxnumfaces. int ROOT::RGeomConfig::maxnumfaces {0}. maximal number of faces ; Definition at line 166 of file RGeomData.hxx. ◆ maxnumnodes. int ROOT::RGeomConfig::maxnumnodes {0}. maximal number of nodes ; Definition at line 165 of file RGeomData.hxx. ◆ nsegm. int ROOT::RGeomConfig::nsegm {0}. number of segments for cylindrical shapes ; Definition at line 169 of file RGeomData.hxx. ◆ showtop. bool ROOT::RGeomConfig::showtop {false}. show geometry top volume, off by default ; Definition at line 167 of file RGeomData.hxx. ◆ vislevel. int ROOT::RGeomConfig::vislevel {0}. visible level ; Definition at line 164 of file RGeomData.hxx. Libraries for ROOT::RGeomConfig:. [legend]; The documentation for this class was generated from the following file:; geom/webviewer/inc/ROOT/RGeomDa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RGeomConfig.html:85,Load,Loading,85,doc/v632/classROOT_1_1RGeomConfig.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeomConfig.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::RGeomDescription Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; ROOT::RGeomDescription Class Reference. . Definition at line 210 of file RGeomData.hxx. Classes; class  ShapeDescr;  . Public Member Functions;  RGeomDescription ()=default;  ; void AddSignalHandler (const void *handler, RGeomSignalFunc_t func);  Add signal handler. ;  ; void Build (TGeoManager *mgr, const std::string &volname="""");  Collect information about geometry hierarchy into flat list like it done in JSROOT ClonedNodes.createClones. ;  ; void Build (TGeoVolume *vol);  Collect information about geometry from single volume like it done in JSROOT ClonedNodes.createClones. ;  ; bool ChangeConfiguration (const std::string &json);  Change configuration by client Returns true if any parameter was really changed. ;  ; bool ChangeNodeVisibility (const std::vector< std::string > &path, bool on);  Change visibility for specified element Returns true if changes was performed. ;  ; bool ClearAllPhysVisibility ();  Reset all custom visibility settings. ;  ; void ClearCache ();  Clear cached data, need to be clear when connection broken. ;  ; void ClearDrawData ();  Clear raw data. Will be rebuild when next connection will be established. ;  ; bool ClearPhysNodeVisibility (const std::vector< std::string > &path);  Reset custom visibility of physical node by path. ;  ; int FindNodeId (const std::vector< int > &stack);  Returns nodeid for given stack array, returns -1 in case of failure. ;  ; std::string GetActiveItem () const;  ; std::vector< int > GetClickedItem () const;  ; std::string GetDrawJson () const;  ; std::string GetDrawOptions () const;  Returns draw options, used for JSROOT TGeoPainter. ;  ; std::vector< int > GetHighlightedItem () const;  ; int GetJsonComp () const;  Returns JSON compression le",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RGeomDescription.html:91,Load,Loading,91,doc/master/classROOT_1_1RGeomDescription.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeomDescription.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::RGeomDescription Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; ROOT::RGeomDescription Class Reference. . Definition at line 210 of file RGeomData.hxx. Classes; class  ShapeDescr;  . Public Member Functions;  RGeomDescription ()=default;  ; void AddSignalHandler (const void *handler, RGeomSignalFunc_t func);  Add signal handler. ;  ; void Build (TGeoManager *mgr, const std::string &volname="""");  Collect information about geometry hierarchy into flat list like it done in JSROOT ClonedNodes.createClones. ;  ; void Build (TGeoVolume *vol);  Collect information about geometry from single volume like it done in JSROOT ClonedNodes.createClones. ;  ; bool ChangeConfiguration (const std::string &json);  Change configuration by client Returns true if any parameter was really changed. ;  ; bool ChangeNodeVisibility (const std::vector< std::string > &path, bool on);  Change visibility for specified element Returns true if changes was performed. ;  ; bool ClearAllPhysVisibility ();  Reset all custom visibility settings. ;  ; void ClearCache ();  Clear cached data, need to be clear when connection broken. ;  ; void ClearDrawData ();  Clear raw data. Will be rebuild when next connection will be established. ;  ; bool ClearPhysNodeVisibility (const std::vector< std::string > &path);  Reset custom visibility of physical node by path. ;  ; int FindNodeId (const std::vector< int > &stack);  Returns nodeid for given stack array, returns -1 in case of failure. ;  ; std::string GetActiveItem () const;  ; std::vector< int > GetClickedItem () const;  ; std::string GetDrawJson () const;  ; std::string GetDrawOptions () const;  Returns draw options, used for JSROOT TGeoPainter. ;  ; std::vector< int > GetHighlightedItem () const;  ; int GetJsonComp () const;  Returns JSON compression lev",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RGeomDescription.html:90,Load,Loading,90,doc/v632/classROOT_1_1RGeomDescription.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeomDescription.html,1,['Load'],['Loading']
Performance,. ROOT: ROOT::RGeomDrawing Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Attributes |; List of all members ; ROOT::RGeomDrawing Class Reference. ; Object with full description for drawing geometry It includes list of visible items and list of nodes required to build them. ; Definition at line 177 of file RGeomData.hxx. Public Attributes; RGeomConfig * cfg {nullptr};  current configurations ;  ; std::vector< RGeomNode * > nodes;  all used nodes to display visible items and not known for client ;  ; int numnodes {0};  total number of nodes in description ;  ; std::vector< RGeomVisible > visibles;  all visible items ;  . #include <ROOT/RGeomData.hxx>; Member Data Documentation. ◆ cfg. RGeomConfig* ROOT::RGeomDrawing::cfg {nullptr}. current configurations ; Definition at line 179 of file RGeomData.hxx. ◆ nodes. std::vector<RGeomNode*> ROOT::RGeomDrawing::nodes. all used nodes to display visible items and not known for client ; Definition at line 181 of file RGeomData.hxx. ◆ numnodes. int ROOT::RGeomDrawing::numnodes {0}. total number of nodes in description ; Definition at line 180 of file RGeomData.hxx. ◆ visibles. std::vector<RGeomVisible> ROOT::RGeomDrawing::visibles. all visible items ; Definition at line 182 of file RGeomData.hxx. Libraries for ROOT::RGeomDrawing:. [legend]; The documentation for this class was generated from the following file:; geom/webviewer/inc/ROOT/RGeomData.hxx. ROOTRGeomDrawing. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:59 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RGeomDrawing.html:87,Load,Loading,87,doc/master/classROOT_1_1RGeomDrawing.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeomDrawing.html,1,['Load'],['Loading']
Performance,. ROOT: ROOT::RGeomDrawing Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Attributes |; List of all members ; ROOT::RGeomDrawing Class Reference. ; Object with full description for drawing geometry It includes list of visible items and list of nodes required to build them. ; Definition at line 177 of file RGeomData.hxx. Public Attributes; RGeomConfig * cfg {nullptr};  current configurations ;  ; std::vector< RGeomNode * > nodes;  all used nodes to display visible items and not known for client ;  ; int numnodes {0};  total number of nodes in description ;  ; std::vector< RGeomVisible > visibles;  all visible items ;  . #include <ROOT/RGeomData.hxx>; Member Data Documentation. ◆ cfg. RGeomConfig* ROOT::RGeomDrawing::cfg {nullptr}. current configurations ; Definition at line 179 of file RGeomData.hxx. ◆ nodes. std::vector<RGeomNode*> ROOT::RGeomDrawing::nodes. all used nodes to display visible items and not known for client ; Definition at line 181 of file RGeomData.hxx. ◆ numnodes. int ROOT::RGeomDrawing::numnodes {0}. total number of nodes in description ; Definition at line 180 of file RGeomData.hxx. ◆ visibles. std::vector<RGeomVisible> ROOT::RGeomDrawing::visibles. all visible items ; Definition at line 182 of file RGeomData.hxx. Libraries for ROOT::RGeomDrawing:. [legend]; The documentation for this class was generated from the following file:; geom/webviewer/inc/ROOT/RGeomData.hxx. ROOTRGeomDrawing. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:13:36 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RGeomDrawing.html:86,Load,Loading,86,doc/v632/classROOT_1_1RGeomDrawing.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeomDrawing.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::RGeomHierarchy Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; ROOT::RGeomHierarchy Class ReferenceWeb Widgets. ; Web-based ROOT geometry hierarchy viewer. ; Definition at line 26 of file RGeomHierarchy.hxx. Public Member Functions;  RGeomHierarchy (RGeomDescription &desc, bool use_server_threads=false);  constructor ;  ; virtual ~RGeomHierarchy ();  destructor ;  ; void BrowseTo (const std::string &itemname);  Let browse to specified location. ;  ; void ClearOnClose (const std::shared_ptr< void > &handle);  Set handle which will be cleared when connection is closed Must be called after window is shown. ;  ; RGeomDescription & Description ();  ; void Show (const RWebDisplayArgs &args="""");  Show hierarchy in web window. ;  ; void Update ();  Update client - reload hierarchy. ;  . Protected Member Functions; void ProcessSignal (const std::string &kind);  Process signals from geometry description object. ;  ; void WebWindowCallback (unsigned connid, const std::string &arg);  Process data from client. ;  . Protected Attributes; RGeomDescription & fDesc;  ! geometry description, shared with external ;  ; std::shared_ptr< RWebWindow > fWebWindow;  ! web window to show geometry ;  . #include <ROOT/RGeomHierarchy.hxx>; Constructor & Destructor Documentation. ◆ RGeomHierarchy(). RGeomHierarchy::RGeomHierarchy ; (; RGeomDescription & ; desc, . bool ; use_server_threads = false . ). constructor ; Definition at line 32 of file RGeomHierarchy.cxx. ◆ ~RGeomHierarchy(). RGeomHierarchy::~RGeomHierarchy ; (; ). virtual . destructor ; Definition at line 48 of file RGeomHierarchy.cxx. Member Function Documentation. ◆ BrowseTo(). void RGeomHierarchy::BrowseTo ; (; const std::string & ; itemname). Let browse to specified location. ; Definition at line 156 of file RGeomHierarchy.cxx. ◆ ClearOnClose(). ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RGeomHierarchy.html:89,Load,Loading,89,doc/master/classROOT_1_1RGeomHierarchy.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeomHierarchy.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::RGeomHierarchy Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; ROOT::RGeomHierarchy Class Reference. . Definition at line 26 of file RGeomHierarchy.hxx. Public Member Functions;  RGeomHierarchy (RGeomDescription &desc, bool use_server_threads=false);  constructor ;  ; virtual ~RGeomHierarchy ();  destructor ;  ; void BrowseTo (const std::string &itemname);  Let browse to specified location. ;  ; void ClearOnClose (const std::shared_ptr< void > &handle);  Set handle which will be cleared when connection is closed Must be called after window is shown. ;  ; RGeomDescription & Description ();  ; void Show (const RWebDisplayArgs &args="""");  Show hierarchy in web window. ;  ; void Update ();  Update client - reload hierarchy. ;  . Protected Member Functions; void ProcessSignal (const std::string &kind);  Process signals from geometry description object. ;  ; void WebWindowCallback (unsigned connid, const std::string &arg);  Process data from client. ;  . Protected Attributes; RGeomDescription & fDesc;  ! geometry description, shared with external ;  ; std::shared_ptr< RWebWindow > fWebWindow;  ! web window to show geometry ;  . #include <ROOT/RGeomHierarchy.hxx>; Constructor & Destructor Documentation. ◆ RGeomHierarchy(). RGeomHierarchy::RGeomHierarchy ; (; RGeomDescription & ; desc, . bool ; use_server_threads = false . ). constructor ; Definition at line 24 of file RGeomHierarchy.cxx. ◆ ~RGeomHierarchy(). RGeomHierarchy::~RGeomHierarchy ; (; ). virtual . destructor ; Definition at line 41 of file RGeomHierarchy.cxx. Member Function Documentation. ◆ BrowseTo(). void RGeomHierarchy::BrowseTo ; (; const std::string & ; itemname). Let browse to specified location. ; Definition at line 149 of file RGeomHierarchy.cxx. ◆ ClearOnClose(). void RGeomHierarchy::ClearOnClose ; (; const std::shared",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RGeomHierarchy.html:88,Load,Loading,88,doc/v632/classROOT_1_1RGeomHierarchy.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeomHierarchy.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::RGeomNode Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; ROOT::RGeomNode Class Reference. ; Full node description including matrices and other attributes. ; Definition at line 71 of file RGeomData.hxx. Public Member Functions;  RGeomNode (int _id=0);  ; bool CanDisplay () const;  True when there is shape and it can be displayed. ;  ;  Public Member Functions inherited from ROOT::RGeomNodeBase;  RGeomNodeBase (int _id=0);  ; const char * GetArg (int kind);  Returns argument for regexp. ;  ; bool IsVisible () const;  . Public Attributes; int idshift {-1};  ! used to jump over then scan all geom hierarchy ;  ; std::vector< float > matr;  matrix for the node, can have reduced number of elements ;  ; int nfaces {0};  ! number of shape faces ;  ; float opacity {1.};  ! opacity of the color ;  ; bool useflag {false};  ! extra flag, used for selection ;  ; double vol {0};  ! volume estimation ;  ;  Public Attributes inherited from ROOT::RGeomNodeBase; std::vector< int > chlds;  list of childs id ;  ; std::string color;  rgb code in hex format ;  ; int id {0};  node id, index in array ;  ; std::string material;  name of the material ;  ; std::string name;  node name ;  ; bool nochlds {false};  how far in hierarchy depth should be scanned ;  ; int sortid {0};  ! place in sorted array, to check cuts, or id of original node when used search structures ;  ; int vis {0};  visibility flag, 0 - off, 1 - only when level==0, 99 - always ;  . #include <ROOT/RGeomData.hxx>. Inheritance diagram for ROOT::RGeomNode:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RGeomNode(). ROOT::RGeomNode::RGeomNode ; (; int ; _id = 0). inline . Definition at line 80 of file RGeomData.hxx. Member Function Documentation. ◆ CanDisplay(). bool ROOT::RGeomNode::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RGeomNode.html:84,Load,Loading,84,doc/master/classROOT_1_1RGeomNode.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeomNode.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::RGeomNode Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; ROOT::RGeomNode Class Reference. ; Full node description including matrices and other attributes. ; Definition at line 71 of file RGeomData.hxx. Public Member Functions;  RGeomNode (int _id=0);  ; bool CanDisplay () const;  True when there is shape and it can be displayed. ;  ;  Public Member Functions inherited from ROOT::RGeomNodeBase;  RGeomNodeBase (int _id=0);  ; const char * GetArg (int kind);  Returns argument for regexp. ;  ; bool IsVisible () const;  . Public Attributes; int idshift {-1};  ! used to jump over then scan all geom hierarchy ;  ; std::vector< float > matr;  matrix for the node, can have reduced number of elements ;  ; int nfaces {0};  ! number of shape faces ;  ; float opacity {1.};  ! opacity of the color ;  ; bool useflag {false};  ! extra flag, used for selection ;  ; double vol {0};  ! volume estimation ;  ;  Public Attributes inherited from ROOT::RGeomNodeBase; std::vector< int > chlds;  list of childs id ;  ; std::string color;  rgb code in hex format ;  ; int id {0};  node id, index in array ;  ; std::string material;  name of the material ;  ; std::string name;  node name ;  ; bool nochlds {false};  how far in hierarchy depth should be scanned ;  ; int sortid {0};  ! place in sorted array, to check cuts, or id of original node when used search structures ;  ; int vis {0};  visibility flag, 0 - off, 1 - only when level==0, 99 - always ;  . #include <ROOT/RGeomData.hxx>. Inheritance diagram for ROOT::RGeomNode:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RGeomNode(). ROOT::RGeomNode::RGeomNode ; (; int ; _id = 0). inline . Definition at line 80 of file RGeomData.hxx. Member Function Documentation. ◆ CanDisplay(). bool ROOT::RGeomNode::C",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RGeomNode.html:83,Load,Loading,83,doc/v632/classROOT_1_1RGeomNode.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeomNode.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::RGeomNodeBase Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; ROOT::RGeomNodeBase Class Reference. ; Base description of geometry node, required only to build hierarchy. ; Definition at line 44 of file RGeomData.hxx. Public Member Functions;  RGeomNodeBase (int _id=0);  ; const char * GetArg (int kind);  Returns argument for regexp. ;  ; bool IsVisible () const;  . Public Attributes; std::vector< int > chlds;  list of childs id ;  ; std::string color;  rgb code in hex format ;  ; int id {0};  node id, index in array ;  ; std::string material;  name of the material ;  ; std::string name;  node name ;  ; bool nochlds {false};  how far in hierarchy depth should be scanned ;  ; int sortid {0};  ! place in sorted array, to check cuts, or id of original node when used search structures ;  ; int vis {0};  visibility flag, 0 - off, 1 - only when level==0, 99 - always ;  . #include <ROOT/RGeomData.hxx>. Inheritance diagram for ROOT::RGeomNodeBase:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RGeomNodeBase(). ROOT::RGeomNodeBase::RGeomNodeBase ; (; int ; _id = 0). inline . Definition at line 56 of file RGeomData.hxx. Member Function Documentation. ◆ GetArg(). const char * ROOT::RGeomNodeBase::GetArg ; (; int ; kind). inline . Returns argument for regexp. ; Definition at line 61 of file RGeomData.hxx. ◆ IsVisible(). bool ROOT::RGeomNodeBase::IsVisible ; (; ); const. inline . Definition at line 58 of file RGeomData.hxx. Member Data Documentation. ◆ chlds. std::vector<int> ROOT::RGeomNodeBase::chlds. list of childs id ; Definition at line 48 of file RGeomData.hxx. ◆ color. std::string ROOT::RGeomNodeBase::color. rgb code in hex format ; Definition at line 52 of file RGeomData.hxx. ◆ id. int ROOT::RGeomNodeBase::id {0}. node id, index",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RGeomNodeBase.html:88,Load,Loading,88,doc/master/classROOT_1_1RGeomNodeBase.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeomNodeBase.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::RGeomNodeBase Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; ROOT::RGeomNodeBase Class Reference. ; Base description of geometry node, required only to build hierarchy. ; Definition at line 44 of file RGeomData.hxx. Public Member Functions;  RGeomNodeBase (int _id=0);  ; const char * GetArg (int kind);  Returns argument for regexp. ;  ; bool IsVisible () const;  . Public Attributes; std::vector< int > chlds;  list of childs id ;  ; std::string color;  rgb code in hex format ;  ; int id {0};  node id, index in array ;  ; std::string material;  name of the material ;  ; std::string name;  node name ;  ; bool nochlds {false};  how far in hierarchy depth should be scanned ;  ; int sortid {0};  ! place in sorted array, to check cuts, or id of original node when used search structures ;  ; int vis {0};  visibility flag, 0 - off, 1 - only when level==0, 99 - always ;  . #include <ROOT/RGeomData.hxx>. Inheritance diagram for ROOT::RGeomNodeBase:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RGeomNodeBase(). ROOT::RGeomNodeBase::RGeomNodeBase ; (; int ; _id = 0). inline . Definition at line 56 of file RGeomData.hxx. Member Function Documentation. ◆ GetArg(). const char * ROOT::RGeomNodeBase::GetArg ; (; int ; kind). inline . Returns argument for regexp. ; Definition at line 61 of file RGeomData.hxx. ◆ IsVisible(). bool ROOT::RGeomNodeBase::IsVisible ; (; ); const. inline . Definition at line 58 of file RGeomData.hxx. Member Data Documentation. ◆ chlds. std::vector<int> ROOT::RGeomNodeBase::chlds. list of childs id ; Definition at line 48 of file RGeomData.hxx. ◆ color. std::string ROOT::RGeomNodeBase::color. rgb code in hex format ; Definition at line 52 of file RGeomData.hxx. ◆ id. int ROOT::RGeomNodeBase::id {0}. node id, index ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RGeomNodeBase.html:87,Load,Loading,87,doc/v632/classROOT_1_1RGeomNodeBase.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeomNodeBase.html,1,['Load'],['Loading']
Performance,. ROOT: ROOT::RGeomNodeInfo Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Attributes |; List of all members ; ROOT::RGeomNodeInfo Class Reference. ; Node information including rendering data. ; Definition at line 187 of file RGeomData.hxx. Public Attributes; std::string node_name;  node name ;  ; std::string node_type;  node class name ;  ; std::vector< std::string > path;  full path to node ;  ; RGeomRenderInfo * ri {nullptr};  rendering information (if applicable) ;  ; std::string shape_name;  shape class name (if any) ;  ; std::string shape_type;  shape type (if any) ;  . #include <ROOT/RGeomData.hxx>; Member Data Documentation. ◆ node_name. std::string ROOT::RGeomNodeInfo::node_name. node name ; Definition at line 191 of file RGeomData.hxx. ◆ node_type. std::string ROOT::RGeomNodeInfo::node_type. node class name ; Definition at line 190 of file RGeomData.hxx. ◆ path. std::vector<std::string> ROOT::RGeomNodeInfo::path. full path to node ; Definition at line 189 of file RGeomData.hxx. ◆ ri. RGeomRenderInfo* ROOT::RGeomNodeInfo::ri {nullptr}. rendering information (if applicable) ; Definition at line 195 of file RGeomData.hxx. ◆ shape_name. std::string ROOT::RGeomNodeInfo::shape_name. shape class name (if any) ; Definition at line 193 of file RGeomData.hxx. ◆ shape_type. std::string ROOT::RGeomNodeInfo::shape_type. shape type (if any) ; Definition at line 192 of file RGeomData.hxx. Libraries for ROOT::RGeomNodeInfo:. [legend]; The documentation for this class was generated from the following file:; geom/webviewer/inc/ROOT/RGeomData.hxx. ROOTRGeomNodeInfo. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:59 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RGeomNodeInfo.html:88,Load,Loading,88,doc/master/classROOT_1_1RGeomNodeInfo.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeomNodeInfo.html,1,['Load'],['Loading']
Performance,. ROOT: ROOT::RGeomNodeInfo Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Attributes |; List of all members ; ROOT::RGeomNodeInfo Class Reference. ; Node information including rendering data. ; Definition at line 187 of file RGeomData.hxx. Public Attributes; std::string node_name;  node name ;  ; std::string node_type;  node class name ;  ; std::vector< std::string > path;  full path to node ;  ; RGeomRenderInfo * ri {nullptr};  rendering information (if applicable) ;  ; std::string shape_name;  shape class name (if any) ;  ; std::string shape_type;  shape type (if any) ;  . #include <ROOT/RGeomData.hxx>; Member Data Documentation. ◆ node_name. std::string ROOT::RGeomNodeInfo::node_name. node name ; Definition at line 191 of file RGeomData.hxx. ◆ node_type. std::string ROOT::RGeomNodeInfo::node_type. node class name ; Definition at line 190 of file RGeomData.hxx. ◆ path. std::vector<std::string> ROOT::RGeomNodeInfo::path. full path to node ; Definition at line 189 of file RGeomData.hxx. ◆ ri. RGeomRenderInfo* ROOT::RGeomNodeInfo::ri {nullptr}. rendering information (if applicable) ; Definition at line 195 of file RGeomData.hxx. ◆ shape_name. std::string ROOT::RGeomNodeInfo::shape_name. shape class name (if any) ; Definition at line 193 of file RGeomData.hxx. ◆ shape_type. std::string ROOT::RGeomNodeInfo::shape_type. shape type (if any) ; Definition at line 192 of file RGeomData.hxx. Libraries for ROOT::RGeomNodeInfo:. [legend]; The documentation for this class was generated from the following file:; geom/webviewer/inc/ROOT/RGeomData.hxx. ROOTRGeomNodeInfo. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:13:36 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RGeomNodeInfo.html:87,Load,Loading,87,doc/v632/classROOT_1_1RGeomNodeInfo.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeomNodeInfo.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::RGeomNodeVisibility Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; ROOT::RGeomNodeVisibility Class Reference. ; Custom settings for physical Node visibility. ; Definition at line 199 of file RGeomData.hxx. Public Member Functions;  RGeomNodeVisibility (const std::vector< int > &_stack, bool _visible);  . Public Attributes; std::vector< int > stack;  path to the node ;  ; bool visible {false};  visible flag ;  . #include <ROOT/RGeomData.hxx>; Constructor & Destructor Documentation. ◆ RGeomNodeVisibility(). ROOT::RGeomNodeVisibility::RGeomNodeVisibility ; (; const std::vector< int > & ; _stack, . bool ; _visible . ). inline . Definition at line 203 of file RGeomData.hxx. Member Data Documentation. ◆ stack. std::vector<int> ROOT::RGeomNodeVisibility::stack. path to the node ; Definition at line 201 of file RGeomData.hxx. ◆ visible. bool ROOT::RGeomNodeVisibility::visible {false}. visible flag ; Definition at line 202 of file RGeomData.hxx. Libraries for ROOT::RGeomNodeVisibility:. [legend]; The documentation for this class was generated from the following file:; geom/webviewer/inc/ROOT/RGeomData.hxx. ROOTRGeomNodeVisibility. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:59 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RGeomNodeVisibility.html:94,Load,Loading,94,doc/master/classROOT_1_1RGeomNodeVisibility.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeomNodeVisibility.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::RGeomNodeVisibility Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; ROOT::RGeomNodeVisibility Class Reference. ; Custom settings for physical Node visibility. ; Definition at line 199 of file RGeomData.hxx. Public Member Functions;  RGeomNodeVisibility (const std::vector< int > &_stack, bool _visible);  . Public Attributes; std::vector< int > stack;  path to the node ;  ; bool visible {false};  visible flag ;  . #include <ROOT/RGeomData.hxx>; Constructor & Destructor Documentation. ◆ RGeomNodeVisibility(). ROOT::RGeomNodeVisibility::RGeomNodeVisibility ; (; const std::vector< int > & ; _stack, . bool ; _visible . ). inline . Definition at line 203 of file RGeomData.hxx. Member Data Documentation. ◆ stack. std::vector<int> ROOT::RGeomNodeVisibility::stack. path to the node ; Definition at line 201 of file RGeomData.hxx. ◆ visible. bool ROOT::RGeomNodeVisibility::visible {false}. visible flag ; Definition at line 202 of file RGeomData.hxx. Libraries for ROOT::RGeomNodeVisibility:. [legend]; The documentation for this class was generated from the following file:; geom/webviewer/inc/ROOT/RGeomData.hxx. ROOTRGeomNodeVisibility. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:13:36 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RGeomNodeVisibility.html:93,Load,Loading,93,doc/v632/classROOT_1_1RGeomNodeVisibility.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeomNodeVisibility.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::RGeomRawRenderInfo Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; ROOT::RGeomRawRenderInfo Class Reference. ; Render info with raw data. ; Definition at line 127 of file RGeomData.hxx. Public Member Functions;  ~RGeomRawRenderInfo () override=default;  ;  Public Member Functions inherited from ROOT::RGeomRenderInfo; virtual ~RGeomRenderInfo ()=default;  virtual destructor required for the I/O ;  . Public Attributes; std::vector< int > idx;  vertex indexes, always triangles ;  ; std::vector< unsigned char > raw;  float vertices as raw data, JSON_base64 ;  . #include <ROOT/RGeomData.hxx>. Inheritance diagram for ROOT::RGeomRawRenderInfo:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ ~RGeomRawRenderInfo(). ROOT::RGeomRawRenderInfo::~RGeomRawRenderInfo ; (; ). overridedefault . Member Data Documentation. ◆ idx. std::vector<int> ROOT::RGeomRawRenderInfo::idx. vertex indexes, always triangles ; Definition at line 130 of file RGeomData.hxx. ◆ raw. std::vector<unsigned char> ROOT::RGeomRawRenderInfo::raw. float vertices as raw data, JSON_base64 ; Definition at line 129 of file RGeomData.hxx. Libraries for ROOT::RGeomRawRenderInfo:. [legend]; The documentation for this class was generated from the following file:; geom/webviewer/inc/ROOT/RGeomData.hxx. ROOTRGeomRawRenderInfo. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:59 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RGeomRawRenderInfo.html:93,Load,Loading,93,doc/master/classROOT_1_1RGeomRawRenderInfo.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeomRawRenderInfo.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::RGeomRawRenderInfo Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; ROOT::RGeomRawRenderInfo Class Reference. ; Render info with raw data. ; Definition at line 127 of file RGeomData.hxx. Public Member Functions;  ~RGeomRawRenderInfo () override=default;  ;  Public Member Functions inherited from ROOT::RGeomRenderInfo; virtual ~RGeomRenderInfo ()=default;  virtual destructor required for the I/O ;  . Public Attributes; std::vector< int > idx;  vertex indexes, always triangles ;  ; std::vector< unsigned char > raw;  float vertices as raw data, JSON_base64 ;  . #include <ROOT/RGeomData.hxx>. Inheritance diagram for ROOT::RGeomRawRenderInfo:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ ~RGeomRawRenderInfo(). ROOT::RGeomRawRenderInfo::~RGeomRawRenderInfo ; (; ). overridedefault . Member Data Documentation. ◆ idx. std::vector<int> ROOT::RGeomRawRenderInfo::idx. vertex indexes, always triangles ; Definition at line 130 of file RGeomData.hxx. ◆ raw. std::vector<unsigned char> ROOT::RGeomRawRenderInfo::raw. float vertices as raw data, JSON_base64 ; Definition at line 129 of file RGeomData.hxx. Libraries for ROOT::RGeomRawRenderInfo:. [legend]; The documentation for this class was generated from the following file:; geom/webviewer/inc/ROOT/RGeomData.hxx. ROOTRGeomRawRenderInfo. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:13:36 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RGeomRawRenderInfo.html:92,Load,Loading,92,doc/v632/classROOT_1_1RGeomRawRenderInfo.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeomRawRenderInfo.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::RGeomRenderInfo Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; List of all members ; ROOT::RGeomRenderInfo Class Reference. ; Base class for render info block. ; Definition at line 120 of file RGeomData.hxx. Public Member Functions; virtual ~RGeomRenderInfo ()=default;  virtual destructor required for the I/O ;  . #include <ROOT/RGeomData.hxx>. Inheritance diagram for ROOT::RGeomRenderInfo:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ ~RGeomRenderInfo(). virtual ROOT::RGeomRenderInfo::~RGeomRenderInfo ; (; ). virtualdefault . virtual destructor required for the I/O . The documentation for this class was generated from the following file:; geom/webviewer/inc/ROOT/RGeomData.hxx. ROOTRGeomRenderInfo. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:59 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RGeomRenderInfo.html:90,Load,Loading,90,doc/master/classROOT_1_1RGeomRenderInfo.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeomRenderInfo.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::RGeomRenderInfo Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; List of all members ; ROOT::RGeomRenderInfo Class Reference. ; Base class for render info block. ; Definition at line 120 of file RGeomData.hxx. Public Member Functions; virtual ~RGeomRenderInfo ()=default;  virtual destructor required for the I/O ;  . #include <ROOT/RGeomData.hxx>. Inheritance diagram for ROOT::RGeomRenderInfo:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ ~RGeomRenderInfo(). virtual ROOT::RGeomRenderInfo::~RGeomRenderInfo ; (; ). virtualdefault . virtual destructor required for the I/O . The documentation for this class was generated from the following file:; geom/webviewer/inc/ROOT/RGeomData.hxx. ROOTRGeomRenderInfo. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:13:36 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RGeomRenderInfo.html:89,Load,Loading,89,doc/v632/classROOT_1_1RGeomRenderInfo.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeomRenderInfo.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::RGeomShapeRenderInfo Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; ROOT::RGeomShapeRenderInfo Class Reference. ; Render info with shape itself - client can produce shape better. ; Definition at line 135 of file RGeomData.hxx. Public Member Functions;  ~RGeomShapeRenderInfo () override=default;  ;  Public Member Functions inherited from ROOT::RGeomRenderInfo; virtual ~RGeomRenderInfo ()=default;  virtual destructor required for the I/O ;  . Public Attributes; TGeoShape * shape {nullptr};  original shape - can be much less than binary data ;  . #include <ROOT/RGeomData.hxx>. Inheritance diagram for ROOT::RGeomShapeRenderInfo:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ ~RGeomShapeRenderInfo(). ROOT::RGeomShapeRenderInfo::~RGeomShapeRenderInfo ; (; ). overridedefault . Member Data Documentation. ◆ shape. TGeoShape* ROOT::RGeomShapeRenderInfo::shape {nullptr}. original shape - can be much less than binary data ; Definition at line 137 of file RGeomData.hxx. Libraries for ROOT::RGeomShapeRenderInfo:. [legend]; The documentation for this class was generated from the following file:; geom/webviewer/inc/ROOT/RGeomData.hxx. ROOTRGeomShapeRenderInfo. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:59 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RGeomShapeRenderInfo.html:95,Load,Loading,95,doc/master/classROOT_1_1RGeomShapeRenderInfo.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeomShapeRenderInfo.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::RGeomShapeRenderInfo Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; ROOT::RGeomShapeRenderInfo Class Reference. ; Render info with shape itself - client can produce shape better. ; Definition at line 135 of file RGeomData.hxx. Public Member Functions;  ~RGeomShapeRenderInfo () override=default;  ;  Public Member Functions inherited from ROOT::RGeomRenderInfo; virtual ~RGeomRenderInfo ()=default;  virtual destructor required for the I/O ;  . Public Attributes; TGeoShape * shape {nullptr};  original shape - can be much less than binary data ;  . #include <ROOT/RGeomData.hxx>. Inheritance diagram for ROOT::RGeomShapeRenderInfo:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ ~RGeomShapeRenderInfo(). ROOT::RGeomShapeRenderInfo::~RGeomShapeRenderInfo ; (; ). overridedefault . Member Data Documentation. ◆ shape. TGeoShape* ROOT::RGeomShapeRenderInfo::shape {nullptr}. original shape - can be much less than binary data ; Definition at line 137 of file RGeomData.hxx. Libraries for ROOT::RGeomShapeRenderInfo:. [legend]; The documentation for this class was generated from the following file:; geom/webviewer/inc/ROOT/RGeomData.hxx. ROOTRGeomShapeRenderInfo. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:13:36 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RGeomShapeRenderInfo.html:94,Load,Loading,94,doc/v632/classROOT_1_1RGeomShapeRenderInfo.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeomShapeRenderInfo.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::RGeomViewer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; ROOT::RGeomViewer Class ReferenceWeb Widgets. ; Web-based ROOT geometry viewer. ; Definition at line 27 of file RGeomViewer.hxx. Public Member Functions;  RGeomViewer (TGeoManager *mgr=nullptr, const std::string &volname="""");  constructor ;  ; virtual ~RGeomViewer ();  destructor ;  ; void ClearOnClose (const std::shared_ptr< void > &handle);  Set handle which will be cleared when connection is closed Must be called after window is shown. ;  ; RGeomDescription & Description ();  ; bool GetShowColumns () const;  ; bool GetShowHierarchy () const;  Returns default hierarchy browser visibility. ;  ; const std::string & GetTitle () const;  ; std::string GetWindowAddr () const;  Return web window address (name) used for geometry viewer. ;  ; std::string GetWindowUrl (bool remote);  Return web window URL which can be used for connection See ROOT::RWebWindow::GetUrl docu for more details. ;  ; void SaveAsMacro (const std::string &fname);  Save viewer configuration as macro. ;  ; void SaveImage (const std::string &fname=""geometry.png"", int width=0, int height=0);  Produce PNG image of the geometry If web-browser is shown and drawing completed, image is requested from the browser. ;  ; void SelectVolume (const std::string &volname);  Select visible top volume, all other volumes will be disabled. ;  ; void SetDrawOptions (const std::string &opt);  Configures draw option for geometry Normally has effect before first drawing of the geometry When geometry displayed, only ""axis"" and ""rotate"" options are updated. ;  ; void SetGeometry (TGeoManager *mgr, const std::string &volname="""");  assign new geometry to the viewer ;  ; void SetLimits (int nnodes=5000, int nfaces=100000);  Configures maximal number of visible nodes and faces. ;  ; vo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RGeomViewer.html:86,Load,Loading,86,doc/master/classROOT_1_1RGeomViewer.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeomViewer.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::RGeomViewer Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; ROOT::RGeomViewer Class Reference. . Definition at line 27 of file RGeomViewer.hxx. Public Member Functions;  RGeomViewer (TGeoManager *mgr=nullptr, const std::string &volname="""");  constructor ;  ; virtual ~RGeomViewer ();  destructor ;  ; void ClearOnClose (const std::shared_ptr< void > &handle);  Set handle which will be cleared when connection is closed Must be called after window is shown. ;  ; RGeomDescription & Description ();  ; bool GetShowColumns () const;  ; bool GetShowHierarchy () const;  Returns default hierarchy browser visibility. ;  ; const std::string & GetTitle () const;  ; std::string GetWindowAddr () const;  Return web window address (name) used for geometry viewer. ;  ; std::string GetWindowUrl (bool remote);  Return web window URL which can be used for connection See ROOT::RWebWindow::GetUrl docu for more details. ;  ; void SaveAsMacro (const std::string &fname);  Save viewer configuration as macro. ;  ; void SaveImage (const std::string &fname=""geometry.png"", int width=0, int height=0);  Produce PNG image of the geometry If web-browser is shown and drawing completed, image is requested from the browser. ;  ; void SelectVolume (const std::string &volname);  Select visible top volume, all other volumes will be disabled. ;  ; void SetDrawOptions (const std::string &opt);  Configures draw option for geometry Normally has effect before first drawing of the geometry When geometry displayed, only ""axis"" and ""rotate"" options are updated. ;  ; void SetGeometry (TGeoManager *mgr, const std::string &volname="""");  assign new geometry to the viewer ;  ; void SetLimits (int nnodes=5000, int nfaces=100000);  Configures maximal number of visible nodes and faces. ;  ; void SetOnlyVolume (TGeoVolume *vol);  Draw only",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RGeomViewer.html:85,Load,Loading,85,doc/v632/classROOT_1_1RGeomViewer.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeomViewer.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::RGeomVisible Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; ROOT::RGeomVisible Class Reference. ; RGeomVisible contains description of visible node It is path to the node plus reference to shape rendering data. ; Definition at line 145 of file RGeomData.hxx. Public Member Functions;  RGeomVisible ()=default;  ;  RGeomVisible (int _nodeid, int _seqid, const std::vector< int > &_stack);  . Public Attributes; std::string color;  color in rgb format ;  ; int nodeid {0};  selected node id, ;  ; double opacity {1};  opacity ;  ; RGeomRenderInfo * ri {nullptr};  render information for the shape, can be same for different nodes ;  ; int seqid {0};  sequence id, used for merging later ;  ; std::vector< int > stack;  path to the node, index in list of childs ;  . #include <ROOT/RGeomData.hxx>; Constructor & Destructor Documentation. ◆ RGeomVisible() [1/2]. ROOT::RGeomVisible::RGeomVisible ; (; ). default . ◆ RGeomVisible() [2/2]. ROOT::RGeomVisible::RGeomVisible ; (; int ; _nodeid, . int ; _seqid, . const std::vector< int > & ; _stack . ). inline . Definition at line 155 of file RGeomData.hxx. Member Data Documentation. ◆ color. std::string ROOT::RGeomVisible::color. color in rgb format ; Definition at line 150 of file RGeomData.hxx. ◆ nodeid. int ROOT::RGeomVisible::nodeid {0}. selected node id, ; Definition at line 147 of file RGeomData.hxx. ◆ opacity. double ROOT::RGeomVisible::opacity {1}. opacity ; Definition at line 151 of file RGeomData.hxx. ◆ ri. RGeomRenderInfo* ROOT::RGeomVisible::ri {nullptr}. render information for the shape, can be same for different nodes ; Definition at line 152 of file RGeomData.hxx. ◆ seqid. int ROOT::RGeomVisible::seqid {0}. sequence id, used for merging later ; Definition at line 148 of file RGeomData.hxx. ◆ stack. std::vector<int> ROOT::RGeomVisible::stack. path to the node, index in l",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RGeomVisible.html:87,Load,Loading,87,doc/master/classROOT_1_1RGeomVisible.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeomVisible.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::RGeomVisible Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; ROOT::RGeomVisible Class Reference. ; RGeomVisible contains description of visible node It is path to the node plus reference to shape rendering data. ; Definition at line 145 of file RGeomData.hxx. Public Member Functions;  RGeomVisible ()=default;  ;  RGeomVisible (int _nodeid, int _seqid, const std::vector< int > &_stack);  . Public Attributes; std::string color;  color in rgb format ;  ; int nodeid {0};  selected node id, ;  ; double opacity {1};  opacity ;  ; RGeomRenderInfo * ri {nullptr};  render information for the shape, can be same for different nodes ;  ; int seqid {0};  sequence id, used for merging later ;  ; std::vector< int > stack;  path to the node, index in list of childs ;  . #include <ROOT/RGeomData.hxx>; Constructor & Destructor Documentation. ◆ RGeomVisible() [1/2]. ROOT::RGeomVisible::RGeomVisible ; (; ). default . ◆ RGeomVisible() [2/2]. ROOT::RGeomVisible::RGeomVisible ; (; int ; _nodeid, . int ; _seqid, . const std::vector< int > & ; _stack . ). inline . Definition at line 155 of file RGeomData.hxx. Member Data Documentation. ◆ color. std::string ROOT::RGeomVisible::color. color in rgb format ; Definition at line 150 of file RGeomData.hxx. ◆ nodeid. int ROOT::RGeomVisible::nodeid {0}. selected node id, ; Definition at line 147 of file RGeomData.hxx. ◆ opacity. double ROOT::RGeomVisible::opacity {1}. opacity ; Definition at line 151 of file RGeomData.hxx. ◆ ri. RGeomRenderInfo* ROOT::RGeomVisible::ri {nullptr}. render information for the shape, can be same for different nodes ; Definition at line 152 of file RGeomData.hxx. ◆ seqid. int ROOT::RGeomVisible::seqid {0}. sequence id, used for merging later ; Definition at line 148 of file RGeomData.hxx. ◆ stack. std::vector<int> ROOT::RGeomVisible::stack. path to the node, index in li",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RGeomVisible.html:86,Load,Loading,86,doc/v632/classROOT_1_1RGeomVisible.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeomVisible.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::RNTuple Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Static Public Attributes |; Private Attributes |; Friends |; List of all members ; ROOT::RNTuple Class ReferencefinalNTuple-related classes. ; Representation of an RNTuple data set in a ROOT file. ; The class points to the header and footer keys, which in turn have the references to the pages (via page lists). Only the RNTuple key will be listed in the list of keys. Like TBaskets, the pages are ""invisible"" keys. Byte offset references in the RNTuple header and footer reference directly the data part of page records, skipping the TFile key part.; In the list of keys, this object appears as ""ROOT::RNTuple"". It is the user-facing representation of an RNTuple data set in a ROOT file and it provides an API entry point to an RNTuple stored in a ROOT file. Its main purpose is to construct a page source for an RNTuple, which in turn can be used to read an RNTuple with an RDF or an RNTupleReader.; For instance, for an RNTuple called ""Events"" in a ROOT file, usage can be auto f = TFile::Open(""data.root"");; auto ntpl = f->Get<ROOT::RNTuple>(""Events"");; auto reader = RNTupleReader::Open(ntpl);; f#define f(i)Definition RSha256.hxx:104; ROOT::RNTupleRepresentation of an RNTuple data set in a ROOT file.Definition RNTuple.hxx:69; TFile::Openstatic TFile * Open(const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0)Create / open a file.Definition TFile.cxx:4089. Definition at line 69 of file RNTuple.hxx. Public Member Functions;  RNTuple ()=default;  ;  ~RNTuple ()=default;  ; std::uint64_t GetLenFooter () const;  ; std::uint64_t GetLenHeader () const;  ; std::uint64_t GetMaxKeySize () const;  ; std::uint64_t GetNBytesFooter () const;  ; std::uint64_t GetNBytesHeader () const;  ; std::uint",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RNTuple.html:82,Load,Loading,82,doc/master/classROOT_1_1RNTuple.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RNTuple.html,1,['Load'],['Loading']
Performance,. ROOT: ROOT::RNTupleCardinality< SizeT > Struct Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Public Attributes |; List of all members ; ROOT::RNTupleCardinality< SizeT > Struct Template Reference. ; template<typename SizeT>; struct ROOT::RNTupleCardinality< SizeT >Helper types to present an offset column as array of collection sizes. ; See RField<RNTupleCardinality<SizeT>> for details. ; Definition at line 32 of file RNTupleUtil.hxx. Public Types; using ValueType = SizeT;  . Public Member Functions;  RNTupleCardinality ();  ; constexpr RNTupleCardinality (ValueType value);  ;  operator ValueType () const;  ; RNTupleCardinality & operator= (const ValueType value);  . Public Attributes; ValueType fValue;  . #include <ROOT/RNTupleUtil.hxx>; Member Typedef Documentation. ◆ ValueType. template<typename SizeT > . using ROOT::RNTupleCardinality< SizeT >::ValueType = SizeT. Definition at line 36 of file RNTupleUtil.hxx. Constructor & Destructor Documentation. ◆ RNTupleCardinality() [1/2]. template<typename SizeT > . ROOT::RNTupleCardinality< SizeT >::RNTupleCardinality ; (; ). inline . Definition at line 38 of file RNTupleUtil.hxx. ◆ RNTupleCardinality() [2/2]. template<typename SizeT > . constexpr ROOT::RNTupleCardinality< SizeT >::RNTupleCardinality ; (; ValueType ; value). inlineexplicitconstexpr . Definition at line 39 of file RNTupleUtil.hxx. Member Function Documentation. ◆ operator ValueType(). template<typename SizeT > . ROOT::RNTupleCardinality< SizeT >::operator ValueType ; (; ); const. inline . Definition at line 45 of file RNTupleUtil.hxx. ◆ operator=(). template<typename SizeT > . RNTupleCardinality & ROOT::RNTupleCardinality< SizeT >::operator= ; (; const ValueType ; value). inline . Definition at line 40 of file RNTupleUtil.hxx. Member Data Documentation. ◆ fValue. template<typename SizeT > . ValueType ROOT::RNTupleCardinality< SizeT >::fV,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structROOT_1_1RNTupleCardinality.html:112,Load,Loading,112,doc/master/structROOT_1_1RNTupleCardinality.html,https://root.cern,https://root.cern/doc/master/structROOT_1_1RNTupleCardinality.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::ROpaqueTaskArena Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. ROOT::ROpaqueTaskArena Class Reference. . Definition at line 4 of file ROpaqueTaskArena.hxx. #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/core/imt/src/ROpaqueTaskArena.hxx>. Inheritance diagram for ROOT::ROpaqueTaskArena:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]. core/imt/src/ROpaqueTaskArena.hxx. ROOTROpaqueTaskArena. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:59 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1ROpaqueTaskArena.html:91,Load,Loading,91,doc/master/classROOT_1_1ROpaqueTaskArena.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1ROpaqueTaskArena.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::ROpaqueTaskArena Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. ROOT::ROpaqueTaskArena Class Reference. . Definition at line 4 of file ROpaqueTaskArena.hxx. #include </home/sftnight/build/workspace/root-makedoc-v632/rootspi/rdoc/src/v6-32-00-patches/core/imt/src/ROpaqueTaskArena.hxx>. Inheritance diagram for ROOT::ROpaqueTaskArena:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]. core/imt/src/ROpaqueTaskArena.hxx. ROOTROpaqueTaskArena. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:13:36 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1ROpaqueTaskArena.html:90,Load,Loading,90,doc/v632/classROOT_1_1ROpaqueTaskArena.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1ROpaqueTaskArena.html,1,['Load'],['Loading']
Performance,. ROOT: ROOT::RQt5CreatorReg Struct Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; List of all members ; ROOT::RQt5CreatorReg Struct Reference. . Definition at line 284 of file rootqt5.cpp. Public Member Functions;  RQt5CreatorReg ();  . Constructor & Destructor Documentation. ◆ RQt5CreatorReg(). ROOT::RQt5CreatorReg::RQt5CreatorReg ; (; ). inline . Definition at line 285 of file rootqt5.cpp. The documentation for this struct was generated from the following file:; gui/qt5webdisplay/rootqt5.cpp. ROOTRQt5CreatorReg. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:59 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structROOT_1_1RQt5CreatorReg.html:90,Load,Loading,90,doc/master/structROOT_1_1RQt5CreatorReg.html,https://root.cern,https://root.cern/doc/master/structROOT_1_1RQt5CreatorReg.html,1,['Load'],['Loading']
Performance,. ROOT: ROOT::RQt5CreatorReg Struct Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; List of all members ; ROOT::RQt5CreatorReg Struct Reference. . Definition at line 284 of file rootqt5.cpp. Public Member Functions;  RQt5CreatorReg ();  . Constructor & Destructor Documentation. ◆ RQt5CreatorReg(). ROOT::RQt5CreatorReg::RQt5CreatorReg ; (; ). inline . Definition at line 285 of file rootqt5.cpp. The documentation for this struct was generated from the following file:; gui/qt5webdisplay/rootqt5.cpp. ROOTRQt5CreatorReg. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:13:36 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/structROOT_1_1RQt5CreatorReg.html:89,Load,Loading,89,doc/v632/structROOT_1_1RQt5CreatorReg.html,https://root.cern,https://root.cern/doc/v632/structROOT_1_1RQt5CreatorReg.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::RQt5WebDisplayHandle Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; ROOT::RQt5WebDisplayHandle Class ReferenceWeb Display » QT5 Web Display. . Definition at line 92 of file rootqt5.cpp. Classes; class  Qt5Creator;  . Public Member Functions;  RQt5WebDisplayHandle (const std::string &url);  ;  ~RQt5WebDisplayHandle () override;  ; bool Resize (int width, int height) override;  resize web window - if possible ;  ;  Public Member Functions inherited from ROOT::RWebDisplayHandle;  RWebDisplayHandle (const std::string &url);  constructor ;  ; virtual ~RWebDisplayHandle ()=default;  required virtual destructor for correct cleanup at the end ;  ; const std::string & GetContent () const;  get content ;  ; const std::string & GetUrl () const;  returns url of start web display ;  ; void SetContent (const std::string &cont);  set content ;  . Static Public Member Functions; static void AddCreator ();  ;  Static Public Member Functions inherited from ROOT::RWebDisplayHandle; static bool CanProduceImages (const std::string &browser="""");  Returns true if image production for specified browser kind is supported If browser not specified - use currently configured browser or try to test existing web browsers. ;  ; static std::unique_ptr< RWebDisplayHandle > Display (const RWebDisplayArgs &args);  Create web display. ;  ; static bool DisplayUrl (const std::string &url);  Display provided url in configured web browser. ;  ; static std::string GetImageFormat (const std::string &fname);  Detect image format There is special handling of "".screenshot.pdf"" and "".screenshot.png"" extensions Creation of such files relies on headless browser functionality and fully supported only by Chrome browser. ;  ; static bool NeedHttpServer (const RWebDisplayArgs &args);  Check if http server required f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RQt5WebDisplayHandle.html:95,Load,Loading,95,doc/master/classROOT_1_1RQt5WebDisplayHandle.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RQt5WebDisplayHandle.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::RQt5WebDisplayHandle Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; ROOT::RQt5WebDisplayHandle Class ReferenceWeb Display » QT5 Web Display. . Definition at line 92 of file rootqt5.cpp. Classes; class  Qt5Creator;  . Public Member Functions;  RQt5WebDisplayHandle (const std::string &url);  ;  ~RQt5WebDisplayHandle () override;  ; bool Resize (int width, int height) override;  resize web window - if possible ;  ;  Public Member Functions inherited from ROOT::RWebDisplayHandle;  RWebDisplayHandle (const std::string &url);  constructor ;  ; virtual ~RWebDisplayHandle ()=default;  required virtual destructor for correct cleanup at the end ;  ; const std::string & GetContent () const;  get content ;  ; const std::string & GetUrl () const;  returns url of start web display ;  ; void SetContent (const std::string &cont);  set content ;  . Static Public Member Functions; static void AddCreator ();  ;  Static Public Member Functions inherited from ROOT::RWebDisplayHandle; static bool CanProduceImages (const std::string &browser="""");  Returns true if image production for specified browser kind is supported If browser not specified - use currently configured browser or try to test existing web browsers. ;  ; static std::unique_ptr< RWebDisplayHandle > Display (const RWebDisplayArgs &args);  Create web display. ;  ; static bool DisplayUrl (const std::string &url);  Display provided url in configured web browser. ;  ; static bool NeedHttpServer (const RWebDisplayArgs &args);  Check if http server required for display. ;  ; static bool ProduceImage (const std::string &fname, const std::string &json, int width=800, int height=600, const char *batch_file=nullptr);  Produce image file using JSON data as source Invokes JSROOT drawing functionality in headless browser - Google Chrome ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RQt5WebDisplayHandle.html:94,Load,Loading,94,doc/v632/classROOT_1_1RQt5WebDisplayHandle.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RQt5WebDisplayHandle.html,1,['Load'],['Loading']
Performance,. ROOT: ROOT::RQt6CreatorReg Struct Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; List of all members ; ROOT::RQt6CreatorReg Struct Reference. . Definition at line 243 of file rootqt6.cpp. Public Member Functions;  RQt6CreatorReg ();  . Constructor & Destructor Documentation. ◆ RQt6CreatorReg(). ROOT::RQt6CreatorReg::RQt6CreatorReg ; (; ). inline . Definition at line 244 of file rootqt6.cpp. The documentation for this struct was generated from the following file:; gui/qt6webdisplay/rootqt6.cpp. ROOTRQt6CreatorReg. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:59 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structROOT_1_1RQt6CreatorReg.html:90,Load,Loading,90,doc/master/structROOT_1_1RQt6CreatorReg.html,https://root.cern,https://root.cern/doc/master/structROOT_1_1RQt6CreatorReg.html,1,['Load'],['Loading']
Performance,. ROOT: ROOT::RQt6CreatorReg Struct Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; List of all members ; ROOT::RQt6CreatorReg Struct Reference. . Definition at line 243 of file rootqt6.cpp. Public Member Functions;  RQt6CreatorReg ();  . Constructor & Destructor Documentation. ◆ RQt6CreatorReg(). ROOT::RQt6CreatorReg::RQt6CreatorReg ; (; ). inline . Definition at line 244 of file rootqt6.cpp. The documentation for this struct was generated from the following file:; gui/qt6webdisplay/rootqt6.cpp. ROOTRQt6CreatorReg. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:13:36 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/structROOT_1_1RQt6CreatorReg.html:89,Load,Loading,89,doc/v632/structROOT_1_1RQt6CreatorReg.html,https://root.cern,https://root.cern/doc/v632/structROOT_1_1RQt6CreatorReg.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::RQt6WebDisplayHandle Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; ROOT::RQt6WebDisplayHandle Class ReferenceWeb Display » QT6 Web Display. . Definition at line 68 of file rootqt6.cpp. Classes; class  Qt6Creator;  . Public Member Functions;  RQt6WebDisplayHandle (const std::string &url);  ;  ~RQt6WebDisplayHandle () override;  ; bool Resize (int width, int height) override;  resize web window - if possible ;  ;  Public Member Functions inherited from ROOT::RWebDisplayHandle;  RWebDisplayHandle (const std::string &url);  constructor ;  ; virtual ~RWebDisplayHandle ()=default;  required virtual destructor for correct cleanup at the end ;  ; const std::string & GetContent () const;  get content ;  ; const std::string & GetUrl () const;  returns url of start web display ;  ; void SetContent (const std::string &cont);  set content ;  . Static Public Member Functions; static void AddCreator ();  ;  Static Public Member Functions inherited from ROOT::RWebDisplayHandle; static bool CanProduceImages (const std::string &browser="""");  Returns true if image production for specified browser kind is supported If browser not specified - use currently configured browser or try to test existing web browsers. ;  ; static std::unique_ptr< RWebDisplayHandle > Display (const RWebDisplayArgs &args);  Create web display. ;  ; static bool DisplayUrl (const std::string &url);  Display provided url in configured web browser. ;  ; static std::string GetImageFormat (const std::string &fname);  Detect image format There is special handling of "".screenshot.pdf"" and "".screenshot.png"" extensions Creation of such files relies on headless browser functionality and fully supported only by Chrome browser. ;  ; static bool NeedHttpServer (const RWebDisplayArgs &args);  Check if http server required f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RQt6WebDisplayHandle.html:95,Load,Loading,95,doc/master/classROOT_1_1RQt6WebDisplayHandle.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RQt6WebDisplayHandle.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::RQt6WebDisplayHandle Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; ROOT::RQt6WebDisplayHandle Class ReferenceWeb Display » QT6 Web Display. . Definition at line 68 of file rootqt6.cpp. Classes; class  Qt6Creator;  . Public Member Functions;  RQt6WebDisplayHandle (const std::string &url);  ;  ~RQt6WebDisplayHandle () override;  ; bool Resize (int width, int height) override;  resize web window - if possible ;  ;  Public Member Functions inherited from ROOT::RWebDisplayHandle;  RWebDisplayHandle (const std::string &url);  constructor ;  ; virtual ~RWebDisplayHandle ()=default;  required virtual destructor for correct cleanup at the end ;  ; const std::string & GetContent () const;  get content ;  ; const std::string & GetUrl () const;  returns url of start web display ;  ; void SetContent (const std::string &cont);  set content ;  . Static Public Member Functions; static void AddCreator ();  ;  Static Public Member Functions inherited from ROOT::RWebDisplayHandle; static bool CanProduceImages (const std::string &browser="""");  Returns true if image production for specified browser kind is supported If browser not specified - use currently configured browser or try to test existing web browsers. ;  ; static std::unique_ptr< RWebDisplayHandle > Display (const RWebDisplayArgs &args);  Create web display. ;  ; static bool DisplayUrl (const std::string &url);  Display provided url in configured web browser. ;  ; static bool NeedHttpServer (const RWebDisplayArgs &args);  Check if http server required for display. ;  ; static bool ProduceImage (const std::string &fname, const std::string &json, int width=800, int height=600, const char *batch_file=nullptr);  Produce image file using JSON data as source Invokes JSROOT drawing functionality in headless browser - Google Chrome ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RQt6WebDisplayHandle.html:94,Load,Loading,94,doc/v632/classROOT_1_1RQt6WebDisplayHandle.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RQt6WebDisplayHandle.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::RRangeCast< T, isDynamic, Range_t > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::RRangeCast< T, isDynamic, Range_t > Class Template Reference. ; template<typename T, bool isDynamic, typename Range_t>; class ROOT::RRangeCast< T, isDynamic, Range_t >Wraps any collection that can be used in range-based loops and applies static_cast<T> or dynamic_cast<T> to each element. ; Template Parameters. TThe new type to convert to. ; isDynamicIf true, dynamic_cast is used, otherwise static_cast is used. ; Range_tThe type of the input range, which should be usually a reference type to avoid copying. . Definition at line 135 of file RRangeCast.hxx. Public Types; using const_iterator = Internal::TypedIter< T, decltype(std::cbegin(std::declval< Range_t >())), isDynamic >;  ; using iterator = Internal::TypedIter< T, decltype(std::begin(std::declval< Range_t >())), isDynamic >;  . Public Member Functions;  RRangeCast (Range_t &&inputRange);  ; iterator begin ();  ; const_iterator begin () const;  ; iterator end ();  ; const_iterator end () const;  . Private Attributes; Range_t fInputRange;  . #include <ROOT/RRangeCast.hxx>. Inheritance diagram for ROOT::RRangeCast< T, isDynamic, Range_t >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ const_iterator. template<typename T , bool isDynamic, typename Range_t > . using ROOT::RRangeCast< T, isDynamic, Range_t >::const_iterator = Internal::TypedIter<T, decltype(std::cbegin(std::declval<Range_t>())), isDynamic>. Definition at line 144 of file RRangeCast.hxx. ◆ iterator. template<typename T , bool isDynamic, typename Range_t > . using ROOT::RRangeCast< T, isDynamic, Range_t >::iterator = Internal::TypedIter<T, decltype(std::begin(std::declval<Range_t>())), isDynamic>. Definit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RRangeCast.html:119,Load,Loading,119,doc/master/classROOT_1_1RRangeCast.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RRangeCast.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::RRangeCast< T, isDynamic, Range_t > Class Template Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::RRangeCast< T, isDynamic, Range_t > Class Template Reference. ; template<typename T, bool isDynamic, typename Range_t>; class ROOT::RRangeCast< T, isDynamic, Range_t >Wraps any collection that can be used in range-based loops and applies static_cast<T> or dynamic_cast<T> to each element. ; Template Parameters. TThe new type to convert to. ; isDynamicIf true, dynamic_cast is used, otherwise static_cast is used. ; Range_tThe type of the input range, which should be usually a reference type to avoid copying. . Definition at line 135 of file RRangeCast.hxx. Public Types; using const_iterator = Internal::TypedIter< T, decltype(std::cbegin(std::declval< Range_t >())), isDynamic >;  ; using iterator = Internal::TypedIter< T, decltype(std::begin(std::declval< Range_t >())), isDynamic >;  . Public Member Functions;  RRangeCast (Range_t &&inputRange);  ; iterator begin ();  ; const_iterator begin () const;  ; iterator end ();  ; const_iterator end () const;  . Private Attributes; Range_t fInputRange;  . #include <ROOT/RRangeCast.hxx>. Inheritance diagram for ROOT::RRangeCast< T, isDynamic, Range_t >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ const_iterator. template<typename T , bool isDynamic, typename Range_t > . using ROOT::RRangeCast< T, isDynamic, Range_t >::const_iterator = Internal::TypedIter<T, decltype(std::cbegin(std::declval<Range_t>())), isDynamic>. Definition at line 144 of file RRangeCast.hxx. ◆ iterator. template<typename T , bool isDynamic, typename Range_t > . using ROOT::RRangeCast< T, isDynamic, Range_t >::iterator = Internal::TypedIter<T, decltype(std::begin(std::declval<Range_t>())), isDynamic>. Definiti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RRangeCast.html:118,Load,Loading,118,doc/v632/classROOT_1_1RRangeCast.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RRangeCast.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::RTreeDrawInvokeTimer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; ROOT::RTreeDrawInvokeTimer Class Reference. . Definition at line 86 of file RTreeViewer.cxx. Public Member Functions;  RTreeDrawInvokeTimer (Long_t milliSec, bool mode, RTreeViewer &viewer);  constructor ;  ; void Timeout () override;  timeout handler used to process postponed requests in main ROOT thread ;  ;  Public Member Functions inherited from TTimer;  TTimer (const char *command, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (Long_t milliSec=0, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (TObject *obj, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ; virtual ~TTimer ();  ; void Add () override;  ; Bool_t CheckTimer (const TTime &now);  Check if timer timed out. ;  ; TTime GetAbsTime () const;  ; const char * GetCommand () const;  ; TObject * GetObject ();  ; TTime GetTime () const;  ; UInt_t GetTimerID ();  ; Bool_t HasTimedOut () const;  ; TClass * IsA () const override;  ; Bool_t IsAsync () const;  ; Bool_t IsInterruptingSyscalls () const;  ; Bool_t IsRunning ();  This function checks if the timer is running within gSystem (Has been started and did not finish yet). ;  ; Bool_t IsSync () const;  ; Bool_t Notify () override;  Notify when timer times out. ;  ; void Remove () override;  ; void Reset ();  Reset the timer. ;  ; void SetCommand (const char *command);  Set the interpreter command to be executed at time out. ;  ; void SetInterruptSyscalls (Bool_t set=kTRUE);  When the argument is true the a-synchronous timer (SIGALRM) signal handler is set so that interrupted syscalls will not be restarted by the kernel. ;  ; void SetObject (TObject *object);  Set the object to be notified at time out. ;  ; void Se",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RTreeDrawInvokeTimer.html:95,Load,Loading,95,doc/master/classROOT_1_1RTreeDrawInvokeTimer.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RTreeDrawInvokeTimer.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::RTreeDrawInvokeTimer Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; ROOT::RTreeDrawInvokeTimer Class Reference. . Definition at line 86 of file RTreeViewer.cxx. Public Member Functions;  RTreeDrawInvokeTimer (Long_t milliSec, bool mode, RTreeViewer &viewer);  constructor ;  ; void Timeout () override;  timeout handler used to process postponed requests in main ROOT thread ;  ;  Public Member Functions inherited from TTimer;  TTimer (const char *command, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (Long_t milliSec=0, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (TObject *obj, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ; virtual ~TTimer ();  ; void Add () override;  ; Bool_t CheckTimer (const TTime &now);  Check if timer timed out. ;  ; TTime GetAbsTime () const;  ; const char * GetCommand () const;  ; TObject * GetObject ();  ; TTime GetTime () const;  ; UInt_t GetTimerID ();  ; Bool_t HasTimedOut () const;  ; TClass * IsA () const override;  ; Bool_t IsAsync () const;  ; Bool_t IsInterruptingSyscalls () const;  ; Bool_t IsRunning ();  This function checks if the timer is running within gSystem (Has been started and did not finish yet). ;  ; Bool_t IsSync () const;  ; Bool_t Notify () override;  Notify when timer times out. ;  ; void Remove () override;  ; void Reset ();  Reset the timer. ;  ; void SetCommand (const char *command);  Set the interpreter command to be executed at time out. ;  ; void SetInterruptSyscalls (Bool_t set=kTRUE);  When the argument is true the a-synchronous timer (SIGALRM) signal handler is set so that interrupted syscalls will not be restarted by the kernel. ;  ; void SetObject (TObject *object);  Set the object to be notified at time out. ;  ; void Set",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RTreeDrawInvokeTimer.html:94,Load,Loading,94,doc/v632/classROOT_1_1RTreeDrawInvokeTimer.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RTreeDrawInvokeTimer.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::RTreeDrawMonitoring Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::RTreeDrawMonitoring Class Reference. . Definition at line 31 of file RTreeViewer.cxx. Public Member Functions;  RTreeDrawMonitoring (Int_t period, RTreeViewer &viewer);  ; bool SendFileCloseEvent (TFile *) override;  ; bool SendFileOpenProgress (TFile *, TList *, const char *, bool=false) override;  ; bool SendFileReadProgress (TFile *) override;  ; bool SendFileWriteProgress (TFile *) override;  ; bool SendInfoDescription (const char *) override;  ; bool SendInfoStatus (const char *) override;  ; bool SendInfoTime () override;  ; bool SendInfoUser (const char *=nullptr) override;  ; bool SendParameters (TList *, const char *=nullptr) override;  ; bool SendProcessingProgress (Double_t nevent, Double_t, bool=false) override;  ; bool SendProcessingStatus (const char *, bool=false) override;  ; void SetLogLevel (const char *=""WARNING"") override;  ; void Verbose (bool) override;  ;  Public Member Functions inherited from TVirtualMonitoringWriter;  TVirtualMonitoringWriter ();  ;  TVirtualMonitoringWriter (const char *name, Double_t value);  ; virtual ~TVirtualMonitoringWriter ();  destructor ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RTreeDrawMonitoring.html:94,Load,Loading,94,doc/master/classROOT_1_1RTreeDrawMonitoring.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RTreeDrawMonitoring.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::RTreeDrawMonitoring Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::RTreeDrawMonitoring Class Reference. . Definition at line 31 of file RTreeViewer.cxx. Public Member Functions;  RTreeDrawMonitoring (Int_t period, RTreeViewer &viewer);  ; bool SendFileCloseEvent (TFile *) override;  ; bool SendFileOpenProgress (TFile *, TList *, const char *, bool=false) override;  ; bool SendFileReadProgress (TFile *) override;  ; bool SendFileWriteProgress (TFile *) override;  ; bool SendInfoDescription (const char *) override;  ; bool SendInfoStatus (const char *) override;  ; bool SendInfoTime () override;  ; bool SendInfoUser (const char *=nullptr) override;  ; bool SendParameters (TList *, const char *=nullptr) override;  ; bool SendProcessingProgress (Double_t nevent, Double_t, bool=false) override;  ; bool SendProcessingStatus (const char *, bool=false) override;  ; void SetLogLevel (const char *=""WARNING"") override;  ; void Verbose (bool) override;  ;  Public Member Functions inherited from TVirtualMonitoringWriter;  TVirtualMonitoringWriter ();  ;  TVirtualMonitoringWriter (const char *name, Double_t value);  ; virtual ~TVirtualMonitoringWriter ();  destructor ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the S",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RTreeDrawMonitoring.html:93,Load,Loading,93,doc/v632/classROOT_1_1RTreeDrawMonitoring.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RTreeDrawMonitoring.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::RTreeViewer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; ROOT::RTreeViewer Class ReferenceWeb Widgets. ; Web-based ROOT TTree viewer. ; Definition at line 34 of file RTreeViewer.hxx. Classes; struct  RBranchInfo;  ; struct  RConfig;  . Public Types; using PerformDrawCallback_t = std::function< void(const std::string &)>;  . Public Member Functions;  RTreeViewer (TTree *tree=nullptr);  constructor ;  ; virtual ~RTreeViewer ();  destructor ;  ; bool GetShowHierarchy () const;  Returns default hierarchy browser visibility. ;  ; const std::string & GetTitle () const;  ; std::string GetWindowAddr () const;  Return address of web window used for tree viewer. ;  ; std::string GetWindowUrl (bool remote);  Return URL of web window used for tree viewer See ROOT::RWebWindow::GetUrl docu for more details. ;  ; void SetCallback (PerformDrawCallback_t func);  ; void SetShowHierarchy (bool on=true);  Configures default hierarchy browser visibility, only has effect before showing web window. ;  ; void SetTitle (const std::string &title);  ; void SetTree (TTree *tree);  assign new TTree to the viewer ;  ; void Show (const RWebDisplayArgs &args="""", bool always_start_new_browser=false);  Show or update viewer in web window If web browser already started - just refresh drawing like ""reload"" button does If no web window exists or. ;  ; bool SuggestBranch (const TBranch *branch);  Suggest to use branch in the gui Normally just assign as last edited expression. ;  ; bool SuggestExpression (const std::string &expr);  Suggest to use expression in the gui Normally just assign as last edited expression. ;  ; bool SuggestLeaf (const TLeaf *leaf);  Suggest to use leaf in the gui Normally just assign as last edited expression. ;  ; void Upd",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RTreeViewer.html:86,Load,Loading,86,doc/master/classROOT_1_1RTreeViewer.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RTreeViewer.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::RTreeViewer Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; ROOT::RTreeViewer Class Reference. . Definition at line 34 of file RTreeViewer.hxx. Classes; struct  RBranchInfo;  ; struct  RConfig;  . Public Types; using PerformDrawCallback_t = std::function< void(const std::string &)>;  . Public Member Functions;  RTreeViewer (TTree *tree=nullptr);  constructor ;  ; virtual ~RTreeViewer ();  destructor ;  ; bool GetShowHierarchy () const;  Returns default hierarchy browser visibility. ;  ; const std::string & GetTitle () const;  ; std::string GetWindowAddr () const;  Return address of web window used for tree viewer. ;  ; std::string GetWindowUrl (bool remote);  Return URL of web window used for tree viewer See ROOT::RWebWindow::GetUrl docu for more details. ;  ; void SetCallback (PerformDrawCallback_t func);  ; void SetShowHierarchy (bool on=true);  Configures default hierarchy browser visibility, only has effect before showing web window. ;  ; void SetTitle (const std::string &title);  ; void SetTree (TTree *tree);  assign new TTree to the viewer ;  ; void Show (const RWebDisplayArgs &args="""", bool always_start_new_browser=false);  Show or update viewer in web window If web browser already started - just refresh drawing like ""reload"" button does If no web window exists or. ;  ; bool SuggestBranch (const TBranch *branch);  Suggest to use branch in the gui Normally just assign as last edited expression. ;  ; bool SuggestExpression (const std::string &expr);  Suggest to use expression in the gui Normally just assign as last edited expression. ;  ; bool SuggestLeaf (const TLeaf *leaf);  Suggest to use leaf in the gui Normally just assign as last edited expression. ;  ; void Update ();  Update tree viewer in all web disp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RTreeViewer.html:85,Load,Loading,85,doc/v632/classROOT_1_1RTreeViewer.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RTreeViewer.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::RWebBrowserHandle Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Types |; Private Attributes |; List of all members ; ROOT::RWebBrowserHandle Class Reference. ; Specialized handle to hold information about running browser process Used to correctly cleanup all processes and temporary directories. ; Definition at line 105 of file RWebDisplayHandle.cxx. Public Member Functions;  RWebBrowserHandle (const std::string &url, const std::string &tmpdir, const std::string &tmpfile, browser_process_id pid);  ;  RWebBrowserHandle (const std::string &url, const std::string &tmpdir, const std::string &tmpfile, const std::string &dump);  ;  ~RWebBrowserHandle () override;  ;  Public Member Functions inherited from ROOT::RWebDisplayHandle;  RWebDisplayHandle (const std::string &url);  constructor ;  ; virtual ~RWebDisplayHandle ()=default;  required virtual destructor for correct cleanup at the end ;  ; const std::string & GetContent () const;  get content ;  ; const std::string & GetUrl () const;  returns url of start web display ;  ; virtual bool Resize (int, int);  resize web window - if possible ;  ; void SetContent (const std::string &cont);  set content ;  . Private Types; typedef pid_t browser_process_id;  . Private Attributes; bool fHasPid {false};  ; browser_process_id fPid;  ; std::string fTmpDir;  temporary directory to delete at the end ;  ; std::string fTmpFile;  temporary file to remove ;  . Additional Inherited Members;  Static Public Member Functions inherited from ROOT::RWebDisplayHandle; static bool CanProduceImages (const std::string &browser="""");  Returns true if image production for specified browser kind is supported If browser not specified - use currently configured browser or try to test existing web browsers. ;  ; static std::unique_ptr< RWebDisplayHandle > Display (const RWebDisplayArgs &args);  Create web display. ;  ; static bool Dis",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RWebBrowserHandle.html:92,Load,Loading,92,doc/master/classROOT_1_1RWebBrowserHandle.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebBrowserHandle.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::RWebBrowserHandle Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Types |; Private Attributes |; List of all members ; ROOT::RWebBrowserHandle Class Reference. ; Specialized handle to hold information about running browser process Used to correctly cleanup all processes and temporary directories. ; Definition at line 103 of file RWebDisplayHandle.cxx. Public Member Functions;  RWebBrowserHandle (const std::string &url, const std::string &tmpdir, const std::string &tmpfile, browser_process_id pid);  ;  RWebBrowserHandle (const std::string &url, const std::string &tmpdir, const std::string &tmpfile, const std::string &dump);  ;  ~RWebBrowserHandle () override;  ;  Public Member Functions inherited from ROOT::RWebDisplayHandle;  RWebDisplayHandle (const std::string &url);  constructor ;  ; virtual ~RWebDisplayHandle ()=default;  required virtual destructor for correct cleanup at the end ;  ; const std::string & GetContent () const;  get content ;  ; const std::string & GetUrl () const;  returns url of start web display ;  ; virtual bool Resize (int, int);  resize web window - if possible ;  ; void SetContent (const std::string &cont);  set content ;  . Private Types; typedef pid_t browser_process_id;  . Private Attributes; bool fHasPid {false};  ; browser_process_id fPid;  ; std::string fTmpDir;  temporary directory to delete at the end ;  ; std::string fTmpFile;  temporary file to remove ;  . Additional Inherited Members;  Static Public Member Functions inherited from ROOT::RWebDisplayHandle; static bool CanProduceImages (const std::string &browser="""");  Returns true if image production for specified browser kind is supported If browser not specified - use currently configured browser or try to test existing web browsers. ;  ; static std::unique_ptr< RWebDisplayHandle > Display (const RWebDisplayArgs &args);  Create web display. ;  ; static bool Disp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RWebBrowserHandle.html:91,Load,Loading,91,doc/v632/classROOT_1_1RWebBrowserHandle.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebBrowserHandle.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::RWebBrowserImp Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::RWebBrowserImp Class Reference. . Definition at line 22 of file RWebBrowserImp.hxx. Public Member Functions;  RWebBrowserImp (TBrowser *b, const char *title, Int_t x, Int_t y, UInt_t width, UInt_t height, Option_t *opt="""");  Constructor with x,y, width and height parameters. ;  ;  RWebBrowserImp (TBrowser *b, const char *title, UInt_t width, UInt_t height, Option_t *opt="""");  Constructor with width and height parameters. ;  ;  RWebBrowserImp (TBrowser *b=nullptr);  Default constructor. ;  ; virtual ~RWebBrowserImp ();  Constructor with width and height parameters. ;  ; void BrowseObj (TObject *) final;  Browse specified object. ;  ; void Iconify () final;  Iconify browser. ;  ; Bool_t IsWeb () const final;  ; void Refresh (Bool_t=kFALSE) final;  Refresh browser. ;  ; void Show () final;  Show browser. ;  ;  Public Member Functions inherited from TBrowserImp;  TBrowserImp (TBrowser *b, const char *title, Int_t x, Int_t y, UInt_t width, UInt_t height, Option_t *opt="""");  Constructor with browser x, y, width and height. ;  ;  TBrowserImp (TBrowser *b, const char *title, UInt_t width, UInt_t height, Option_t *opt="""");  Constructor with browser width and height. ;  ;  TBrowserImp (TBrowser *b=nullptr);  Default constructor. ;  ; virtual ~TBrowserImp ()=default;  ; virtual void Add (TObject *, const char *, Int_t);  ; virtual void AddCheckBox (TObject *, Bool_t=kFALSE);  ; TBrowser * Browser () const;  ; virtual void CheckObjectItem (TObject *, Bool_t=kFALSE);  ; virtual void CloseTabs ();  ; virtual Longptr_t ExecPlugin (const char *, const char *, const char *, Int_t, Int_t);  ; virtual void ExecuteDefaultAction (TObject *);  ; virtual TBrowser * GetBrowser () const;  ; virtual Option_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RWebBrowserImp.html:89,Load,Loading,89,doc/master/classROOT_1_1RWebBrowserImp.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebBrowserImp.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::RWebBrowserImp Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::RWebBrowserImp Class Reference. . Definition at line 22 of file RWebBrowserImp.hxx. Public Member Functions;  RWebBrowserImp (TBrowser *b, const char *title, Int_t x, Int_t y, UInt_t width, UInt_t height, Option_t *opt="""");  Constructor with x,y, width and height parameters. ;  ;  RWebBrowserImp (TBrowser *b, const char *title, UInt_t width, UInt_t height, Option_t *opt="""");  Constructor with width and height parameters. ;  ;  RWebBrowserImp (TBrowser *b=nullptr);  Default constructor. ;  ; virtual ~RWebBrowserImp ();  Constructor with width and height parameters. ;  ; void BrowseObj (TObject *) final;  Browse specified object. ;  ; void Iconify () final;  Iconify browser. ;  ; void Refresh (Bool_t=kFALSE) final;  Refresh browser. ;  ; void Show () final;  Show browser. ;  ;  Public Member Functions inherited from TBrowserImp;  TBrowserImp (TBrowser *b, const char *title, Int_t x, Int_t y, UInt_t width, UInt_t height, Option_t *opt="""");  Constructor with browser x, y, width and height. ;  ;  TBrowserImp (TBrowser *b, const char *title, UInt_t width, UInt_t height, Option_t *opt="""");  Constructor with browser width and height. ;  ;  TBrowserImp (TBrowser *b=nullptr);  Default constructor. ;  ; virtual ~TBrowserImp ()=default;  ; virtual void Add (TObject *, const char *, Int_t);  ; virtual void AddCheckBox (TObject *, Bool_t=kFALSE);  ; TBrowser * Browser () const;  ; virtual void CheckObjectItem (TObject *, Bool_t=kFALSE);  ; virtual void CloseTabs ();  ; virtual Longptr_t ExecPlugin (const char *, const char *, const char *, Int_t, Int_t);  ; virtual void ExecuteDefaultAction (TObject *);  ; virtual TBrowser * GetBrowser () const;  ; virtual Option_t * GetDrawOption () const;  ; virt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RWebBrowserImp.html:88,Load,Loading,88,doc/v632/classROOT_1_1RWebBrowserImp.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebBrowserImp.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::RWebDisplayArgs Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Friends |; List of all members ; ROOT::RWebDisplayArgs Class ReferenceWeb Display. ; Holds different arguments for starting browser with RWebDisplayHandle::Display() method. ; Definition at line 33 of file RWebDisplayArgs.hxx. Public Types; enum  EBrowserKind { ;   kChrome; , kEdge; , kSafari; , kFirefox; , ;   kNative; , kCEF; , kQt5; , kQt6; , ;   kLocal; , kDefault; , kServer; , kEmbedded; , ;   kOff; , kOn; , kCustom. };  . Public Member Functions;  RWebDisplayArgs ();  Default constructor. ;  ;  RWebDisplayArgs (const char *browser);  Constructor. ;  ;  RWebDisplayArgs (const std::string &browser);  Constructor. ;  ;  RWebDisplayArgs (int width, int height, int x=-1, int y=-1, const std::string &browser="""");  Constructor. ;  ;  RWebDisplayArgs (std::shared_ptr< RWebWindow > master, unsigned conndid=0, int channel=-1);  Constructor. ;  ; virtual ~RWebDisplayArgs ();  Destructor. ;  ; void AppendUrlOpt (const std::string &opt);  append extra url options, add ""&"" as separator if required ;  ; EBrowserKind GetBrowserKind () const;  returns configured browser kind, see EBrowserKind for supported values ;  ; std::string GetBrowserName () const;  Returns configured browser name. ;  ; std::string GetCustomExec () const;  returns custom executable to start web browser ;  ; void * GetDriverData () const;  [internal] returns web-driver data, used to start window ;  ; const std::string & GetExtraArgs () const;  get extra command line arguments for starting web browser command ;  ; std::string GetFullUrl () const;  returns window url with append options ;  ; int GetHeight () const;  returns preferable web window height ;  ; THttpServer * GetHttpServer () const;  returns http server instance, used f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RWebDisplayArgs.html:90,Load,Loading,90,doc/master/classROOT_1_1RWebDisplayArgs.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebDisplayArgs.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::RWebDisplayArgs Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Friends |; List of all members ; ROOT::RWebDisplayArgs Class ReferenceWeb Display. ; Holds different arguments for starting browser with RWebDisplayHandle::Display() method. ; Definition at line 33 of file RWebDisplayArgs.hxx. Public Types; enum  EBrowserKind { ;   kChrome; , kEdge; , kFirefox; , kNative; , ;   kCEF; , kQt5; , kQt6; , kLocal; , ;   kDefault; , kServer; , kEmbedded; , kOff; , ;   kOn; , kCustom. };  . Public Member Functions;  RWebDisplayArgs ();  Default constructor. ;  ;  RWebDisplayArgs (const char *browser);  Constructor. ;  ;  RWebDisplayArgs (const std::string &browser);  Constructor. ;  ;  RWebDisplayArgs (int width, int height, int x=-1, int y=-1, const std::string &browser="""");  Constructor. ;  ;  RWebDisplayArgs (std::shared_ptr< RWebWindow > master, unsigned conndid=0, int channel=-1);  Constructor. ;  ; virtual ~RWebDisplayArgs ();  Destructor. ;  ; void AppendUrlOpt (const std::string &opt);  append extra url options, add ""&"" as separator if required ;  ; EBrowserKind GetBrowserKind () const;  returns configured browser kind, see EBrowserKind for supported values ;  ; std::string GetBrowserName () const;  Returns configured browser name. ;  ; std::string GetCustomExec () const;  returns custom executable to start web browser ;  ; void * GetDriverData () const;  [internal] returns web-driver data, used to start window ;  ; const std::string & GetExtraArgs () const;  get extra command line arguments for starting web browser command ;  ; std::string GetFullUrl () const;  returns window url with append options ;  ; int GetHeight () const;  returns preferable web window height ;  ; THttpServer * GetHttpServer () const;  returns http server instance, used for window di",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RWebDisplayArgs.html:89,Load,Loading,89,doc/v632/classROOT_1_1RWebDisplayArgs.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebDisplayArgs.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::RWebDisplayHandle Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Static Protected Member Functions |; Private Attributes |; List of all members ; ROOT::RWebDisplayHandle Class ReferenceWeb Display. ; Handle of created web-based display Depending from type of web display, holds handle of started browser process or other display-specific information to correctly stop and cleanup display. ; Definition at line 25 of file RWebDisplayHandle.hxx. Classes; class  BrowserCreator;  ; class  ChromeCreator;  ; class  Creator;  !< page content More...;  ; class  FirefoxCreator;  ; class  SafariCreator;  . Public Member Functions;  RWebDisplayHandle (const std::string &url);  constructor ;  ; virtual ~RWebDisplayHandle ()=default;  required virtual destructor for correct cleanup at the end ;  ; const std::string & GetContent () const;  get content ;  ; const std::string & GetUrl () const;  returns url of start web display ;  ; virtual bool Resize (int, int);  resize web window - if possible ;  ; void SetContent (const std::string &cont);  set content ;  . Static Public Member Functions; static bool CanProduceImages (const std::string &browser="""");  Returns true if image production for specified browser kind is supported If browser not specified - use currently configured browser or try to test existing web browsers. ;  ; static std::unique_ptr< RWebDisplayHandle > Display (const RWebDisplayArgs &args);  Create web display. ;  ; static bool DisplayUrl (const std::string &url);  Display provided url in configured web browser. ;  ; static std::string GetImageFormat (const std::string &fname);  Detect image format There is special handling of "".screenshot.pdf"" and "".screenshot.png"" extensions Creation of such files relies on headless browser functionality and fully supported only by Chrome browser. ;  ; static bool NeedHttpServ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RWebDisplayHandle.html:92,Load,Loading,92,doc/master/classROOT_1_1RWebDisplayHandle.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebDisplayHandle.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::RWebDisplayHandle Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Static Protected Member Functions |; Private Attributes |; List of all members ; ROOT::RWebDisplayHandle Class ReferenceWeb Display. ; Handle of created web-based display Depending from type of web display, holds handle of started browser process or other display-specific information to correctly stop and cleanup display. ; Definition at line 25 of file RWebDisplayHandle.hxx. Classes; class  BrowserCreator;  ; class  ChromeCreator;  ; class  Creator;  !< page content More...;  ; class  FirefoxCreator;  . Public Member Functions;  RWebDisplayHandle (const std::string &url);  constructor ;  ; virtual ~RWebDisplayHandle ()=default;  required virtual destructor for correct cleanup at the end ;  ; const std::string & GetContent () const;  get content ;  ; const std::string & GetUrl () const;  returns url of start web display ;  ; virtual bool Resize (int, int);  resize web window - if possible ;  ; void SetContent (const std::string &cont);  set content ;  . Static Public Member Functions; static bool CanProduceImages (const std::string &browser="""");  Returns true if image production for specified browser kind is supported If browser not specified - use currently configured browser or try to test existing web browsers. ;  ; static std::unique_ptr< RWebDisplayHandle > Display (const RWebDisplayArgs &args);  Create web display. ;  ; static bool DisplayUrl (const std::string &url);  Display provided url in configured web browser. ;  ; static bool NeedHttpServer (const RWebDisplayArgs &args);  Check if http server required for display. ;  ; static bool ProduceImage (const std::string &fname, const std::string &json, int width=800, int height=600, const char *batch_file=nullptr);  Produce image file using JSON data as source Invokes JSROOT drawing functiona",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RWebDisplayHandle.html:91,Load,Loading,91,doc/v632/classROOT_1_1RWebDisplayHandle.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebDisplayHandle.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::RWebWindow Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Private Types |; Private Member Functions |; Static Private Member Functions |; Private Attributes |; Static Private Attributes |; Friends |; List of all members ; ROOT::RWebWindow Class ReferenceWeb Display. ; Represents web window, which can be shown in web browser or any other supported environment. ; Window can be configured to run either in the normal or in the batch (headless) mode. In second case no any graphical elements will be created. For the normal window one can configure geometry (width and height), which are applied when window shown.; Each window can be shown several times (if allowed) in different places - either as the CEF (chromium embedded) window or in the standard web browser. When started, window will open and show HTML page, configured with RWebWindow::SetDefaultPage() method.; Typically (but not necessarily) clients open web socket connection to the window and one can exchange data, using RWebWindow::Send() method and call-back function assigned via RWebWindow::SetDataCallBack(). ; Definition at line 54 of file RWebWindow.hxx. Classes; struct  MasterConn;  ; struct  QueueEntry;  ; struct  QueueItem;  ; struct  WebConn;  . Public Member Functions;  RWebWindow ();  RWebWindow constructor Should be defined here because of std::unique_ptr<RWebWindowWSHandler> ;  ;  ~RWebWindow ();  RWebWindow destructor Closes all connections and remove window from manager. ;  ; void AssignThreadId ();  Assign thread id which has to be used for callbacks WARNING!!! only for expert use Automatically done at the moment when any callback function is invoked Can be invoked once again if window Run method will be invoked from other thread Normally should be invoked before Show() method is called. ;  ; bool CanSend (unsigned connid, bool direct=true) cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RWebWindow.html:85,Load,Loading,85,doc/master/classROOT_1_1RWebWindow.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::RWebWindow Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Private Types |; Private Member Functions |; Static Private Member Functions |; Private Attributes |; Static Private Attributes |; Friends |; List of all members ; ROOT::RWebWindow Class ReferenceWeb Display. ; Represents web window, which can be shown in web browser or any other supported environment. ; Window can be configured to run either in the normal or in the batch (headless) mode. In second case no any graphical elements will be created. For the normal window one can configure geometry (width and height), which are applied when window shown.; Each window can be shown several times (if allowed) in different places - either as the CEF (chromium embedded) window or in the standard web browser. When started, window will open and show HTML page, configured with RWebWindow::SetDefaultPage() method.; Typically (but not necessarily) clients open web socket connection to the window and one can exchange data, using RWebWindow::Send() method and call-back function assigned via RWebWindow::SetDataCallBack(). ; Definition at line 52 of file RWebWindow.hxx. Classes; struct  MasterConn;  ; struct  QueueEntry;  ; struct  QueueItem;  ; struct  WebConn;  . Public Member Functions;  RWebWindow ();  RWebWindow constructor Should be defined here because of std::unique_ptr<RWebWindowWSHandler> ;  ;  ~RWebWindow ();  RWebWindow destructor Closes all connections and remove window from manager. ;  ; void AssignThreadId ();  Assign thread id which has to be used for callbacks WARNING!!! only for expert use Automatically done at the moment when any callback function is invoked Can be invoked once again if window Run method will be invoked from other thread Normally should be invoked before Show() method is called. ;  ; bool CanSend (unsigned connid, bool direct=true) const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:84,Load,Loading,84,doc/v632/classROOT_1_1RWebWindow.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::RWebWindowWSHandler Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; Protected Member Functions |; List of all members ; ROOT::RWebWindowWSHandler Class Reference. ; just wrapper to deliver websockets call-backs to the RWebWindow class ; Definition at line 30 of file RWebWindowWSHandler.hxx. Public Member Functions;  RWebWindowWSHandler (RWebWindow &wind, const char *name);  constructor ;  ;  ~RWebWindowWSHandler () override=default;  ; Bool_t AllowMTProcess () const override;  Allow processing of WS actions in arbitrary thread. ;  ; Bool_t AllowMTSend () const override;  Allows usage of special threads for send operations. ;  ; Bool_t CanServeFiles () const override;  returns true when window allowed to serve files relative to default page ;  ; void CompleteWSSend (UInt_t wsid) override;  React on completion of multi-threaded send operation. ;  ; TString GetDefaultPageContent () override;  returns content of default web-page THttpWSHandler interface ;  ; Bool_t ProcessWS (THttpCallArg *arg) override;  Process websocket request - called from THttpServer thread THttpWSHandler interface. ;  ;  Public Member Functions inherited from THttpWSHandler; virtual ~THttpWSHandler ();  destructor Make sure that all sending threads are stopped correctly ;  ; void CloseWS (UInt_t wsid);  Close connection with given websocket id. ;  ; Int_t GetNumWS ();  Returns current number of websocket connections. ;  ; UInt_t GetWS (Int_t num=0);  Return websocket id with given sequential number Number of websockets returned with GetNumWS() method. ;  ; Bool_t HasWS (UInt_t wsid);  Return kTRUE if websocket with given ID exists. ;  ; TClass * IsA () const override;  ; Bool_t IsDisabled () const;  Returns true when processing of websockets is disabled, set shortly before handler need to be destroyed. ;  ; Bool_t IsSyncMode () con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RWebWindowWSHandler.html:94,Load,Loading,94,doc/master/classROOT_1_1RWebWindowWSHandler.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindowWSHandler.html,2,"['Load', 'multi-thread']","['Loading', 'multi-threaded']"
Performance,". ROOT: ROOT::RWebWindowWSHandler Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; Protected Member Functions |; List of all members ; ROOT::RWebWindowWSHandler Class Reference. ; just wrapper to deliver websockets call-backs to the RWebWindow class ; Definition at line 30 of file RWebWindowWSHandler.hxx. Public Member Functions;  RWebWindowWSHandler (RWebWindow &wind, const char *name);  constructor ;  ;  ~RWebWindowWSHandler () override=default;  ; Bool_t AllowMTProcess () const override;  Allow processing of WS actions in arbitrary thread. ;  ; Bool_t AllowMTSend () const override;  Allows usage of special threads for send operations. ;  ; Bool_t CanServeFiles () const override;  returns true when window allowed to serve files relative to default page ;  ; void CompleteWSSend (UInt_t wsid) override;  React on completion of multi-threaded send operation. ;  ; TString GetDefaultPageContent () override;  returns content of default web-page THttpWSHandler interface ;  ; Bool_t ProcessWS (THttpCallArg *arg) override;  Process websocket request - called from THttpServer thread THttpWSHandler interface. ;  ;  Public Member Functions inherited from THttpWSHandler; virtual ~THttpWSHandler ();  destructor Make sure that all sending threads are stopped correctly ;  ; void CloseWS (UInt_t wsid);  Close connection with given websocket id. ;  ; Int_t GetNumWS ();  Returns current number of websocket connections. ;  ; UInt_t GetWS (Int_t num=0);  Return websocket id with given sequential number Number of websockets returned with GetNumWS() method. ;  ; Bool_t HasWS (UInt_t wsid);  Return kTRUE if websocket with given ID exists. ;  ; TClass * IsA () const override;  ; Bool_t IsDisabled () const;  Returns true when processing of websockets is disabled, set shortly before handler need to be destroyed. ;  ; Bool_t IsSyncMode () cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RWebWindowWSHandler.html:93,Load,Loading,93,doc/v632/classROOT_1_1RWebWindowWSHandler.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindowWSHandler.html,2,"['Load', 'multi-thread']","['Loading', 'multi-threaded']"
Performance,". ROOT: ROOT::RWebWindowsManager Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Static Private Member Functions |; Private Attributes |; Friends |; List of all members ; ROOT::RWebWindowsManager Class ReferenceWeb Display. ; Central instance to create and show web-based windows like Canvas or FitPanel. ; Manager responsible to creating THttpServer instance, which is used for RWebWindow's communication with clients.; Method RWebWindows::Show() used to show window in specified location. ; Definition at line 40 of file RWebWindowsManager.hxx. Public Member Functions;  RWebWindowsManager ();  window manager constructor Required here for correct usage of unique_ptr<THttpServer> ;  ;  ~RWebWindowsManager ();  window manager destructor Required here for correct usage of unique_ptr<THttpServer> ;  ; std::shared_ptr< RWebWindow > CreateWindow ();  Creates new window To show window, RWebWindow::Show() have to be called. ;  ; THttpServer * GetServer () const;  Returns THttpServer instance. ;  ; std::string GetServerAddr () const;  Returns http address of the server, empty string when not available. ;  ; void SetDeleteCallback (WebWindowDeleteCallback_t func);  Assign show callback which can catch window showing, used by RBrowser. ;  ; void SetShowCallback (WebWindowShowCallback_t func);  Assign show callback which can catch window showing, used by RBrowser. ;  ; void Terminate ();  Terminate http server and ROOT application. ;  . Static Public Member Functions; static void AddServerLocation (const std::string &server_prefix, const std::string &files_path);  Configure server location which can be used for loading of custom scripts or files When THttpServer instance of RWebWindowsManager will be created, THttpServer::AddLocation() method with correspondent arguments will be invoked. ;  ; static void AssignMainThrd ();  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html:93,Load,Loading,93,doc/master/classROOT_1_1RWebWindowsManager.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::RWebWindowsManager Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Static Private Member Functions |; Private Attributes |; Friends |; List of all members ; ROOT::RWebWindowsManager Class ReferenceWeb Display. ; Central instance to create and show web-based windows like Canvas or FitPanel. ; Manager responsible to creating THttpServer instance, which is used for RWebWindow's communication with clients.; Method RWebWindows::Show() used to show window in specified location. ; Definition at line 36 of file RWebWindowsManager.hxx. Public Member Functions;  RWebWindowsManager ();  window manager constructor Required here for correct usage of unique_ptr<THttpServer> ;  ;  ~RWebWindowsManager ();  window manager destructor Required here for correct usage of unique_ptr<THttpServer> ;  ; std::shared_ptr< RWebWindow > CreateWindow ();  Creates new window To show window, RWebWindow::Show() have to be called. ;  ; THttpServer * GetServer () const;  Returns THttpServer instance. ;  ; std::string GetServerAddr () const;  Returns http address of the server, empty string when not available. ;  ; void SetShowCallback (WebWindowShowCallback_t func);  Assign show callback which can catch window showing, used by RBrowser. ;  ; void Terminate ();  Terminate http server and ROOT application. ;  . Static Public Member Functions; static void AssignMainThrd ();  Re-assigns main thread id Normally main thread id recognized at the moment when library is loaded It supposed to be a thread where gApplication->Run() will be called If application runs in separate thread, one have to call this method to let RWebWindowsManager correctly recognize such situation. ;  ; static std::shared_ptr< RWebWindowsManager > & Instance ();  Returns default window manager Used to display all standard ROOT elements like TCanvas or TFitPanel. ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RWebWindowsManager.html:92,Load,Loading,92,doc/v632/classROOT_1_1RWebWindowsManager.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindowsManager.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::TBufferMerger Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::TBufferMerger Class ReferenceInput/Output Library. ; TBufferMerger is a class to facilitate writing data in parallel from multiple threads, while writing to a single output file. ; Its purpose is similar to TParallelMergingFile, but instead of using processes that connect to a network socket, TBufferMerger uses threads that each write to a TBufferMergerFile, which in turn push data into a queue managed by the TBufferMerger. ; Definition at line 41 of file TBufferMerger.hxx. Public Member Functions;  TBufferMerger (const char *name, Option_t *option=""RECREATE"", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault);  Constructor. ;  ;  TBufferMerger (std::unique_ptr< TFile > output);  Constructor. ;  ; virtual ~TBufferMerger ();  Destructor. ;  ;  _R__DEPRECATED_LATER (""The queuing mechanism in TBufferMerger was removed in ROOT v6.32"") size_t GetAutoSave() const;  ;  _R__DEPRECATED_LATER (""The queuing mechanism in TBufferMerger was removed in ROOT v6.32"") size_t GetBuffered() const;  ;  _R__DEPRECATED_LATER (""The queuing mechanism in TBufferMerger was removed in ROOT v6.32"") size_t GetQueueSize() const;  ;  _R__DEPRECATED_LATER (""The queuing mechanism in TBufferMerger was removed in ROOT v6.32"") void SetAutoSave(size_t);  ;  _R__DEPRECATED_LATER (""The queuing mechanism in TBufferMerger was removed in ROOT v6.32"") void SetCompressTemporaryKeys(Bool_t;  ; std::shared_ptr< TBufferMergerFile > GetFile ();  Returns a TBufferMergerFile to which data can be written. ;  ; const char * GetMergeOptions ();  Returns the current merge options. ;  ; Bool_t GetNotrees () const;  Returns whether the file has been marked as not containing any TTree objects and thus that steps that are specific to TTree can be skippe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1TBufferMerger.html:88,Load,Loading,88,doc/master/classROOT_1_1TBufferMerger.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1TBufferMerger.html,2,"['Load', 'queue']","['Loading', 'queue']"
Performance,". ROOT: ROOT::TBufferMerger Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::TBufferMerger Class ReferenceInput/Output Library. ; TBufferMerger is a class to facilitate writing data in parallel from multiple threads, while writing to a single output file. ; Its purpose is similar to TParallelMergingFile, but instead of using processes that connect to a network socket, TBufferMerger uses threads that each write to a TBufferMergerFile, which in turn push data into a queue managed by the TBufferMerger. ; Definition at line 41 of file TBufferMerger.hxx. Public Member Functions;  TBufferMerger (const char *name, Option_t *option=""RECREATE"", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault);  Constructor. ;  ;  TBufferMerger (std::unique_ptr< TFile > output);  Constructor. ;  ; virtual ~TBufferMerger ();  Destructor. ;  ;  _R__DEPRECATED_LATER (""The queuing mechanism in TBufferMerger was removed in ROOT v6.32"") size_t GetAutoSave() const;  ;  _R__DEPRECATED_LATER (""The queuing mechanism in TBufferMerger was removed in ROOT v6.32"") size_t GetBuffered() const;  ;  _R__DEPRECATED_LATER (""The queuing mechanism in TBufferMerger was removed in ROOT v6.32"") size_t GetQueueSize() const;  ;  _R__DEPRECATED_LATER (""The queuing mechanism in TBufferMerger was removed in ROOT v6.32"") void SetAutoSave(size_t);  ;  _R__DEPRECATED_LATER (""The queuing mechanism in TBufferMerger was removed in ROOT v6.32"") void SetCompressTemporaryKeys(Bool_t;  ; std::shared_ptr< TBufferMergerFile > GetFile ();  Returns a TBufferMergerFile to which data can be written. ;  ; const char * GetMergeOptions ();  Returns the current merge options. ;  ; Bool_t GetNotrees () const;  Returns whether the file has been marked as not containing any TTree objects and thus that steps that are specific to TTree can be skipped",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1TBufferMerger.html:87,Load,Loading,87,doc/v632/classROOT_1_1TBufferMerger.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TBufferMerger.html,2,"['Load', 'queue']","['Loading', 'queue']"
Performance,". ROOT: ROOT::TBufferMergerFile Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; ROOT::TBufferMergerFile Class ReferenceInput/Output Library. ; A TBufferMergerFile is similar to a TMemFile, but when data is written to it, it is appended to the TBufferMerger queue. ; The TBufferMerger merges all data into the output file on disk. ; Definition at line 143 of file TBufferMerger.hxx. Public Member Functions;  ~TBufferMergerFile () override;  Destructor. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Int_t Write (const char *name=nullptr, Int_t opt=0, Int_t bufsize=0) override;  Write data into a TBufferFile and append it to TBufferMerger. ;  ;  Public Member Functions inherited from TMemFile;  TMemFile (const char *name, char *buffer, Long64_t size, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Long64_t defBlockSize=0LL);  Usual Constructor. See the TFile constructor for details. Copy data from buffer. ;  ;  TMemFile (const char *name, const ZeroCopyView_t &datarange);  Constructor to create a TMemFile re-using external C-Style storage. ;  ;  TMemFile (const char *name, ExternalDataPtr_t data);  Constructor to create a TMemFile re-using external storage. ;  ;  TMemFile (const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Long64_t defBlockSize=0LL);  Usual Constructor. ;  ;  TMemFile (const char *name, std::unique_ptr< TBufferFile > buffer);  Constructor to create a read-only TMemFile using an std::unique_ptr<TBufferFile> ;  ;  TMemFile (const TMemFile &orig);  Copying the c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html:92,Load,Loading,92,doc/master/classROOT_1_1TBufferMergerFile.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html,2,"['Load', 'queue']","['Loading', 'queue']"
Performance,". ROOT: ROOT::TBufferMergerFile Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; ROOT::TBufferMergerFile Class ReferenceInput/Output Library. ; A TBufferMergerFile is similar to a TMemFile, but when data is written to it, it is appended to the TBufferMerger queue. ; The TBufferMerger merges all data into the output file on disk. ; Definition at line 143 of file TBufferMerger.hxx. Public Member Functions;  ~TBufferMergerFile () override;  Destructor. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Int_t Write (const char *name=nullptr, Int_t opt=0, Int_t bufsize=0) override;  Write data into a TBufferFile and append it to TBufferMerger. ;  ;  Public Member Functions inherited from TMemFile;  TMemFile (const char *name, char *buffer, Long64_t size, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Long64_t defBlockSize=0LL);  Usual Constructor. See the TFile constructor for details. Copy data from buffer. ;  ;  TMemFile (const char *name, const ZeroCopyView_t &datarange);  Constructor to create a TMemFile re-using external C-Style storage. ;  ;  TMemFile (const char *name, ExternalDataPtr_t data);  Constructor to create a TMemFile re-using external storage. ;  ;  TMemFile (const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Long64_t defBlockSize=0LL);  Usual Constructor. ;  ;  TMemFile (const char *name, std::unique_ptr< TBufferFile > buffer);  Constructor to create a read-only TMemFile using an std::unique_ptr<TBufferFile> ;  ;  TMemFile (const TMemFile &orig);  Copying the co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html:91,Load,Loading,91,doc/v632/classROOT_1_1TBufferMergerFile.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html,2,"['Load', 'queue']","['Loading', 'queue']"
Performance,". ROOT: ROOT::TClassAlt Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; ROOT::TClassAlt Class Reference. . Definition at line 128 of file TClassTable.cxx. Public Member Functions;  TClassAlt (const char *alternate, const char *normName, TClassAlt *next);  ;  ~TClassAlt ();  . Public Attributes; const char * fName;  ; std::unique_ptr< TClassAlt > fNext;  ; const char * fNormName;  . Constructor & Destructor Documentation. ◆ TClassAlt(). ROOT::TClassAlt::TClassAlt ; (; const char * ; alternate, . const char * ; normName, . TClassAlt * ; next . ). inline . Definition at line 130 of file TClassTable.cxx. ◆ ~TClassAlt(). ROOT::TClassAlt::~TClassAlt ; (; ). inline . Definition at line 134 of file TClassTable.cxx. Member Data Documentation. ◆ fName. const char* ROOT::TClassAlt::fName. Definition at line 138 of file TClassTable.cxx. ◆ fNext. std::unique_ptr<TClassAlt> ROOT::TClassAlt::fNext. Definition at line 140 of file TClassTable.cxx. ◆ fNormName. const char* ROOT::TClassAlt::fNormName. Definition at line 139 of file TClassTable.cxx. core/cont/src/TClassTable.cxx. ROOTTClassAlt. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:00 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1TClassAlt.html:84,Load,Loading,84,doc/master/classROOT_1_1TClassAlt.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1TClassAlt.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::TClassAlt Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; ROOT::TClassAlt Class Reference. . Definition at line 128 of file TClassTable.cxx. Public Member Functions;  TClassAlt (const char *alternate, const char *normName, TClassAlt *next);  ;  ~TClassAlt ();  . Public Attributes; const char * fName;  ; std::unique_ptr< TClassAlt > fNext;  ; const char * fNormName;  . Constructor & Destructor Documentation. ◆ TClassAlt(). ROOT::TClassAlt::TClassAlt ; (; const char * ; alternate, . const char * ; normName, . TClassAlt * ; next . ). inline . Definition at line 130 of file TClassTable.cxx. ◆ ~TClassAlt(). ROOT::TClassAlt::~TClassAlt ; (; ). inline . Definition at line 134 of file TClassTable.cxx. Member Data Documentation. ◆ fName. const char* ROOT::TClassAlt::fName. Definition at line 138 of file TClassTable.cxx. ◆ fNext. std::unique_ptr<TClassAlt> ROOT::TClassAlt::fNext. Definition at line 140 of file TClassTable.cxx. ◆ fNormName. const char* ROOT::TClassAlt::fNormName. Definition at line 139 of file TClassTable.cxx. core/cont/src/TClassTable.cxx. ROOTTClassAlt. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:13:37 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1TClassAlt.html:83,Load,Loading,83,doc/v632/classROOT_1_1TClassAlt.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TClassAlt.html,1,['Load'],['Loading']
Performance,. ROOT: ROOT::TClassRec Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; ROOT::TClassRec Class Reference. . Definition at line 106 of file TClassTable.cxx. Public Member Functions;  TClassRec (TClassRec *next);  ;  ~TClassRec ();  . Public Attributes; Int_t fBits;  ; DictFuncPtr_t fDict;  ; Version_t fId;  ; const std::type_info * fInfo;  ; char * fName;  ; TClassRec * fNext;  ; TProtoClass * fProto;  . Constructor & Destructor Documentation. ◆ TClassRec(). ROOT::TClassRec::TClassRec ; (; TClassRec * ; next). inline . Definition at line 108 of file TClassTable.cxx. ◆ ~TClassRec(). ROOT::TClassRec::~TClassRec ; (; ). inline . Definition at line 112 of file TClassTable.cxx. Member Data Documentation. ◆ fBits. Int_t ROOT::TClassRec::fBits. Definition at line 121 of file TClassTable.cxx. ◆ fDict. DictFuncPtr_t ROOT::TClassRec::fDict. Definition at line 122 of file TClassTable.cxx. ◆ fId. Version_t ROOT::TClassRec::fId. Definition at line 120 of file TClassTable.cxx. ◆ fInfo. const std::type_info* ROOT::TClassRec::fInfo. Definition at line 123 of file TClassTable.cxx. ◆ fName. char* ROOT::TClassRec::fName. Definition at line 119 of file TClassTable.cxx. ◆ fNext. TClassRec* ROOT::TClassRec::fNext. Definition at line 125 of file TClassTable.cxx. ◆ fProto. TProtoClass* ROOT::TClassRec::fProto. Definition at line 124 of file TClassTable.cxx. core/cont/src/TClassTable.cxx. ROOTTClassRec. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:00 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1TClassRec.html:84,Load,Loading,84,doc/master/classROOT_1_1TClassRec.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1TClassRec.html,1,['Load'],['Loading']
Performance,. ROOT: ROOT::TClassRec Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; ROOT::TClassRec Class Reference. . Definition at line 106 of file TClassTable.cxx. Public Member Functions;  TClassRec (TClassRec *next);  ;  ~TClassRec ();  . Public Attributes; Int_t fBits;  ; DictFuncPtr_t fDict;  ; Version_t fId;  ; const std::type_info * fInfo;  ; char * fName;  ; TClassRec * fNext;  ; TProtoClass * fProto;  . Constructor & Destructor Documentation. ◆ TClassRec(). ROOT::TClassRec::TClassRec ; (; TClassRec * ; next). inline . Definition at line 108 of file TClassTable.cxx. ◆ ~TClassRec(). ROOT::TClassRec::~TClassRec ; (; ). inline . Definition at line 112 of file TClassTable.cxx. Member Data Documentation. ◆ fBits. Int_t ROOT::TClassRec::fBits. Definition at line 121 of file TClassTable.cxx. ◆ fDict. DictFuncPtr_t ROOT::TClassRec::fDict. Definition at line 122 of file TClassTable.cxx. ◆ fId. Version_t ROOT::TClassRec::fId. Definition at line 120 of file TClassTable.cxx. ◆ fInfo. const std::type_info* ROOT::TClassRec::fInfo. Definition at line 123 of file TClassTable.cxx. ◆ fName. char* ROOT::TClassRec::fName. Definition at line 119 of file TClassTable.cxx. ◆ fNext. TClassRec* ROOT::TClassRec::fNext. Definition at line 125 of file TClassTable.cxx. ◆ fProto. TProtoClass* ROOT::TClassRec::fProto. Definition at line 124 of file TClassTable.cxx. core/cont/src/TClassTable.cxx. ROOTTClassRec. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:13:37 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1TClassRec.html:83,Load,Loading,83,doc/v632/classROOT_1_1TClassRec.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TClassRec.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::TExecutorCRTP< SubC > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Types |; Private Member Functions |; List of all members ; ROOT::TExecutorCRTP< SubC > Class Template Reference. ; template<class SubC>; class ROOT::TExecutorCRTP< SubC >This class defines an interface to execute the same task multiple times, possibly in parallel and with different arguments every time. . ROOT::TExecutorCRTP<SubC>::Map; The two possible usages of the Map method are:. Map(F func, unsigned nTimes): func is executed nTimes with no arguments; Map(F func, T& args): func is executed on each element of the collection of arguments args. The Map function forwards the call to MapImpl, to be implemented by the child classes.; For either signature, func is executed as many times as needed by a pool of n workers, where n typically defaults to the number of available cores.; A collection containing the result of each execution is returned.; Note: the user is responsible for the deletion of any object that might be created upon execution of func, returned objects included. ROOT::TExecutorCRTP derived classes never delete what they return, they simply forget it.; Parameters. funca callable object, such as a lambda expression, an std::function, a functor object or a function that takes zero arguments (for the first signature) or one (for the second signature). ; argsa standard vector, a ROOT::TSeq of integer type or an initializer list for the second signature. An integer only for the first. Note: in cases where the function to be executed takes more than zero/one argument but all are fixed except zero/one, the function can be wrapped in a lambda or via std::bind to give it the right signature.; Return value:; An std::vector. The elements in the container will be the objects returned by func. The ordering of the elements corresponds to the ordering of the arguments. R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1TExecutorCRTP.html:105,Load,Loading,105,doc/master/classROOT_1_1TExecutorCRTP.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1TExecutorCRTP.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::TExecutorCRTP< SubC > Class Template Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Types |; Private Member Functions |; List of all members ; ROOT::TExecutorCRTP< SubC > Class Template Reference. ; template<class SubC>; class ROOT::TExecutorCRTP< SubC >This class defines an interface to execute the same task multiple times, possibly in parallel and with different arguments every time. . ROOT::TExecutorCRTP<SubC>::Map; The two possible usages of the Map method are:. Map(F func, unsigned nTimes): func is executed nTimes with no arguments; Map(F func, T& args): func is executed on each element of the collection of arguments args. The Map function forwards the call to MapImpl, to be implemented by the child classes.; For either signature, func is executed as many times as needed by a pool of n workers, where n typically defaults to the number of available cores.; A collection containing the result of each execution is returned.; Note: the user is responsible for the deletion of any object that might be created upon execution of func, returned objects included. ROOT::TExecutorCRTP derived classes never delete what they return, they simply forget it.; Parameters. funca callable object, such as a lambda expression, an std::function, a functor object or a function that takes zero arguments (for the first signature) or one (for the second signature). ; argsa standard vector, a ROOT::TSeq of integer type or an initializer list for the second signature. An integer only for the first. Note: in cases where the function to be executed takes more than zero/one argument but all are fixed except zero/one, the function can be wrapped in a lambda or via std::bind to give it the right signature.; Return value:; An std::vector. The elements in the container will be the objects returned by func. The ordering of the elements corresponds to the ordering of the arguments. RO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1TExecutorCRTP.html:104,Load,Loading,104,doc/v632/classROOT_1_1TExecutorCRTP.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TExecutorCRTP.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::TF1Helper Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Functions ; ROOT::TF1Helper Namespace Reference. Classes; class  TGradientParFunction;  function class representing the derivative with respect a parameter of a given TF1 More...;  . Functions; double IntegralError (TF1 *func, Int_t ndim, const double *a, const double *b, const double *params, const double *covmat, double epsilon);  . Function Documentation. ◆ IntegralError(). double ROOT::TF1Helper::IntegralError ; (; TF1 * ; func, . Int_t ; ndim, . const double * ; a, . const double * ; b, . const double * ; params, . const double * ; covmat, . double ; epsilon . ). Definition at line 39 of file TF1Helper.cxx. ROOTTF1Helper. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:28 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1TF1Helper.html:88,Load,Loading,88,doc/master/namespaceROOT_1_1TF1Helper.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1TF1Helper.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::TF1Helper Namespace Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Functions ; ROOT::TF1Helper Namespace Reference. Classes; class  TGradientParFunction;  function class representing the derivative with respect a parameter of a given TF1 More...;  . Functions; double IntegralError (TF1 *func, Int_t ndim, const double *a, const double *b, const double *params, const double *covmat, double epsilon);  . Function Documentation. ◆ IntegralError(). double ROOT::TF1Helper::IntegralError ; (; TF1 * ; func, . Int_t ; ndim, . const double * ; a, . const double * ; b, . const double * ; params, . const double * ; covmat, . double ; epsilon . ). Definition at line 39 of file TF1Helper.cxx. ROOTTF1Helper. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:14:05 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/namespaceROOT_1_1TF1Helper.html:87,Load,Loading,87,doc/v632/namespaceROOT_1_1TF1Helper.html,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1TF1Helper.html,1,['Load'],['Loading']
Performance,. ROOT: ROOT::TForNamespace Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. ROOT::TForNamespace Class Reference. . Definition at line 392 of file TClassTable.cxx.; The documentation for this class was generated from the following file:; core/cont/src/TClassTable.cxx. ROOTTForNamespace. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:00 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1TForNamespace.html:88,Load,Loading,88,doc/master/classROOT_1_1TForNamespace.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1TForNamespace.html,1,['Load'],['Loading']
Performance,. ROOT: ROOT::TForNamespace Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. ROOT::TForNamespace Class Reference. . Definition at line 392 of file TClassTable.cxx.; The documentation for this class was generated from the following file:; core/cont/src/TClassTable.cxx. ROOTTForNamespace. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:13:37 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1TForNamespace.html:87,Load,Loading,87,doc/v632/classROOT_1_1TForNamespace.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TForNamespace.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::TIOFeatures Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Attributes |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; ROOT::TIOFeatures Class ReferenceTree Library. ; TIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TTree. ; This class allows access to experimental and non-default features.; When one of these features are activated, forward compatibility breaks may occur. That is, older versions of ROOT may not be able to read files written by this version of ROOT that have enabled these non-default features.; To utilize TIOFeatures, create the object, set the desired feature flags, then attach it to a TTree. All subsequently created branches (and their baskets) will be serialized using those particular features.; Example usage: ROOT::TIOFeatures features;; features.Set(ROOT::Experimental::EIOFeatures::kGenerateOffsetMap);; ttree_ref.SetIOFeatures(features);; ROOT::TIOFeaturesTIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TT...Definition TIOFeatures.hxx:69; ROOT::TIOFeatures::Setbool Set(EIOFeatures bits)Set a specific IO feature.Definition TIOFeatures.cxx:139; ROOT::Experimental::EIOFeatures::kGenerateOffsetMap@ kGenerateOffsetMap; The method TTree::SetIOFeatures creates a copy of the feature set; subsequent changes to the TIOFeatures object do not propagate to the TTree. ; Definition at line 69 of file TIOFeatures.hxx. Public Member Functions;  TIOFeatures ();  ; void Clear (EIOFeatures bits);  Clear a specific IO feature from this set. ;  ; void Clear (Experimental::EIOFeatures bits);  Clear a specific IO feature from this set. ;  ; void Clear (Experimental::EIOUnsupportedFeatures bits);  Clear a specific IO feature from this set. ;  ; void Print () const;  Print a human-readable representation of th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1TIOFeatures.html:86,Load,Loading,86,doc/master/classROOT_1_1TIOFeatures.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1TIOFeatures.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::TIOFeatures Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Attributes |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; ROOT::TIOFeatures Class ReferenceTree Library. ; TIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TTree. ; This class allows access to experimental and non-default features.; When one of these features are activated, forward compatibility breaks may occur. That is, older versions of ROOT may not be able to read files written by this version of ROOT that have enabled these non-default features.; To utilize TIOFeatures, create the object, set the desired feature flags, then attach it to a TTree. All subsequently created branches (and their baskets) will be serialized using those particular features.; Example usage: ROOT::TIOFeatures features;; features.Set(ROOT::Experimental::EIOFeatures::kGenerateOffsetMap);; ttree_ref.SetIOFeatures(features);; ROOT::TIOFeaturesTIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TT...Definition TIOFeatures.hxx:69; ROOT::TIOFeatures::Setbool Set(EIOFeatures bits)Set a specific IO feature.Definition TIOFeatures.cxx:139; ROOT::Experimental::EIOFeatures::kGenerateOffsetMap@ kGenerateOffsetMap; The method TTree::SetIOFeatures creates a copy of the feature set; subsequent changes to the TIOFeatures object do not propagate to the TTree. ; Definition at line 69 of file TIOFeatures.hxx. Public Member Functions;  TIOFeatures ();  ; void Clear (EIOFeatures bits);  Clear a specific IO feature from this set. ;  ; void Clear (Experimental::EIOFeatures bits);  Clear a specific IO feature from this set. ;  ; void Clear (Experimental::EIOUnsupportedFeatures bits);  Clear a specific IO feature from this set. ;  ; void Print () const;  Print a human-readable representation of the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1TIOFeatures.html:85,Load,Loading,85,doc/v632/classROOT_1_1TIOFeatures.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TIOFeatures.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::TMapDeclIdToTClass Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::TMapDeclIdToTClass Class Reference. . Definition at line 433 of file TClass.cxx. Public Types; typedef DeclIdMap_t::const_iterator const_iterator;  ; typedef multimap< TDictionary::DeclId_t, TClass * > DeclIdMap_t;  ; typedef std::pair< const_iterator, const_iterator > equal_range;  ; typedef DeclIdMap_t::key_type key_type;  ; typedef DeclIdMap_t::mapped_type mapped_type;  ; typedef DeclIdMap_t::size_type size_type;  . Public Member Functions; void Add (const key_type &key, mapped_type obj);  ; size_type CountElementsWithKey (const key_type &key);  ; equal_range Find (const key_type &key) const;  ; void Remove (const key_type &key);  . Private Attributes; DeclIdMap_t fMap;  . Member Typedef Documentation. ◆ const_iterator. typedef DeclIdMap_t::const_iterator ROOT::TMapDeclIdToTClass::const_iterator. Definition at line 439 of file TClass.cxx. ◆ DeclIdMap_t. typedef multimap<TDictionary::DeclId_t, TClass*> ROOT::TMapDeclIdToTClass::DeclIdMap_t. Definition at line 436 of file TClass.cxx. ◆ equal_range. typedef std::pair<const_iterator, const_iterator> ROOT::TMapDeclIdToTClass::equal_range. Definition at line 440 of file TClass.cxx. ◆ key_type. typedef DeclIdMap_t::key_type ROOT::TMapDeclIdToTClass::key_type. Definition at line 437 of file TClass.cxx. ◆ mapped_type. typedef DeclIdMap_t::mapped_type ROOT::TMapDeclIdToTClass::mapped_type. Definition at line 438 of file TClass.cxx. ◆ size_type. typedef DeclIdMap_t::size_type ROOT::TMapDeclIdToTClass::size_type. Definition at line 441 of file TClass.cxx. Member Function Documentation. ◆ Add(). void ROOT::TMapDeclIdToTClass::Add ; (; const key_type & ; key, . mapped_type ; obj . ). inline . Definition at line 447 of file TClass.cxx. ◆ CountElementsWithKey(). size_type ROOT::TMapDeclI",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1TMapDeclIdToTClass.html:93,Load,Loading,93,doc/master/classROOT_1_1TMapDeclIdToTClass.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1TMapDeclIdToTClass.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::TMapDeclIdToTClass Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::TMapDeclIdToTClass Class Reference. . Definition at line 433 of file TClass.cxx. Public Types; typedef DeclIdMap_t::const_iterator const_iterator;  ; typedef multimap< TDictionary::DeclId_t, TClass * > DeclIdMap_t;  ; typedef std::pair< const_iterator, const_iterator > equal_range;  ; typedef DeclIdMap_t::key_type key_type;  ; typedef DeclIdMap_t::mapped_type mapped_type;  ; typedef DeclIdMap_t::size_type size_type;  . Public Member Functions; void Add (const key_type &key, mapped_type obj);  ; size_type CountElementsWithKey (const key_type &key);  ; equal_range Find (const key_type &key) const;  ; void Remove (const key_type &key);  . Private Attributes; DeclIdMap_t fMap;  . Member Typedef Documentation. ◆ const_iterator. typedef DeclIdMap_t::const_iterator ROOT::TMapDeclIdToTClass::const_iterator. Definition at line 439 of file TClass.cxx. ◆ DeclIdMap_t. typedef multimap<TDictionary::DeclId_t, TClass*> ROOT::TMapDeclIdToTClass::DeclIdMap_t. Definition at line 436 of file TClass.cxx. ◆ equal_range. typedef std::pair<const_iterator, const_iterator> ROOT::TMapDeclIdToTClass::equal_range. Definition at line 440 of file TClass.cxx. ◆ key_type. typedef DeclIdMap_t::key_type ROOT::TMapDeclIdToTClass::key_type. Definition at line 437 of file TClass.cxx. ◆ mapped_type. typedef DeclIdMap_t::mapped_type ROOT::TMapDeclIdToTClass::mapped_type. Definition at line 438 of file TClass.cxx. ◆ size_type. typedef DeclIdMap_t::size_type ROOT::TMapDeclIdToTClass::size_type. Definition at line 441 of file TClass.cxx. Member Function Documentation. ◆ Add(). void ROOT::TMapDeclIdToTClass::Add ; (; const key_type & ; key, . mapped_type ; obj . ). inline . Definition at line 447 of file TClass.cxx. ◆ CountElementsWithKey(). size_type ROOT::TMapDeclId",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1TMapDeclIdToTClass.html:92,Load,Loading,92,doc/v632/classROOT_1_1TMapDeclIdToTClass.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TMapDeclIdToTClass.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::TMapTypeToClassRec Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::TMapTypeToClassRec Class Reference. . Definition at line 144 of file TClassTable.cxx. Public Types; typedef IdMap_t::const_iterator const_iterator;  ; typedef std::map< std::string, TClassRec * > IdMap_t;  ; typedef IdMap_t::key_type key_type;  ; typedef IdMap_t::mapped_type mapped_type;  ; typedef IdMap_t::size_type size_type;  . Public Member Functions; void Add (const key_type &key, mapped_type &obj);  ; mapped_type Find (const key_type &key) const;  ; void Print ();  ; void Remove (const key_type &key);  . Private Attributes; IdMap_t fMap;  . Member Typedef Documentation. ◆ const_iterator. typedef IdMap_t::const_iterator ROOT::TMapTypeToClassRec::const_iterator. Definition at line 151 of file TClassTable.cxx. ◆ IdMap_t. typedef std::map<std::string, TClassRec*> ROOT::TMapTypeToClassRec::IdMap_t. Definition at line 149 of file TClassTable.cxx. ◆ key_type. typedef IdMap_t::key_type ROOT::TMapTypeToClassRec::key_type. Definition at line 150 of file TClassTable.cxx. ◆ mapped_type. typedef IdMap_t::mapped_type ROOT::TMapTypeToClassRec::mapped_type. Definition at line 157 of file TClassTable.cxx. ◆ size_type. typedef IdMap_t::size_type ROOT::TMapTypeToClassRec::size_type. Definition at line 152 of file TClassTable.cxx. Member Function Documentation. ◆ Add(). void ROOT::TMapTypeToClassRec::Add ; (; const key_type & ; key, . mapped_type & ; obj . ). inline . Definition at line 164 of file TClassTable.cxx. ◆ Find(). mapped_type ROOT::TMapTypeToClassRec::Find ; (; const key_type & ; key); const. inline . Definition at line 168 of file TClassTable.cxx. ◆ Print(). void ROOT::TMapTypeToClassRec::Print ; (; ). inline . Definition at line 177 of file TClassTable.cxx. ◆ Remove(). void ROOT::TMapTypeToClassRec::Remove ; (; const key_type",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1TMapTypeToClassRec.html:93,Load,Loading,93,doc/master/classROOT_1_1TMapTypeToClassRec.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1TMapTypeToClassRec.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::TMapTypeToClassRec Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::TMapTypeToClassRec Class Reference. . Definition at line 144 of file TClassTable.cxx. Public Types; typedef IdMap_t::const_iterator const_iterator;  ; typedef std::map< std::string, TClassRec * > IdMap_t;  ; typedef IdMap_t::key_type key_type;  ; typedef IdMap_t::mapped_type mapped_type;  ; typedef IdMap_t::size_type size_type;  . Public Member Functions; void Add (const key_type &key, mapped_type &obj);  ; mapped_type Find (const key_type &key) const;  ; void Print ();  ; void Remove (const key_type &key);  . Private Attributes; IdMap_t fMap;  . Member Typedef Documentation. ◆ const_iterator. typedef IdMap_t::const_iterator ROOT::TMapTypeToClassRec::const_iterator. Definition at line 151 of file TClassTable.cxx. ◆ IdMap_t. typedef std::map<std::string, TClassRec*> ROOT::TMapTypeToClassRec::IdMap_t. Definition at line 149 of file TClassTable.cxx. ◆ key_type. typedef IdMap_t::key_type ROOT::TMapTypeToClassRec::key_type. Definition at line 150 of file TClassTable.cxx. ◆ mapped_type. typedef IdMap_t::mapped_type ROOT::TMapTypeToClassRec::mapped_type. Definition at line 157 of file TClassTable.cxx. ◆ size_type. typedef IdMap_t::size_type ROOT::TMapTypeToClassRec::size_type. Definition at line 152 of file TClassTable.cxx. Member Function Documentation. ◆ Add(). void ROOT::TMapTypeToClassRec::Add ; (; const key_type & ; key, . mapped_type & ; obj . ). inline . Definition at line 164 of file TClassTable.cxx. ◆ Find(). mapped_type ROOT::TMapTypeToClassRec::Find ; (; const key_type & ; key); const. inline . Definition at line 168 of file TClassTable.cxx. ◆ Print(). void ROOT::TMapTypeToClassRec::Print ; (; ). inline . Definition at line 177 of file TClassTable.cxx. ◆ Remove(). void ROOT::TMapTypeToClassRec::Remove ; (; const key_type ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1TMapTypeToClassRec.html:92,Load,Loading,92,doc/v632/classROOT_1_1TMapTypeToClassRec.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TMapTypeToClassRec.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::TMapTypeToTClass Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::TMapTypeToTClass Class Reference. . Definition at line 365 of file TClass.cxx. Public Types; typedef IdMap_t::const_iterator const_iterator;  ; typedef std::map< std::string, TClass * > IdMap_t;  ; typedef IdMap_t::key_type key_type;  ; typedef IdMap_t::mapped_type mapped_type;  ; typedef IdMap_t::size_type size_type;  . Public Member Functions; void Add (const key_type &key, mapped_type &obj);  ; mapped_type Find (const key_type &key) const;  ; void Remove (const key_type &key);  . Private Attributes; IdMap_t fMap;  . Member Typedef Documentation. ◆ const_iterator. typedef IdMap_t::const_iterator ROOT::TMapTypeToTClass::const_iterator. Definition at line 372 of file TClass.cxx. ◆ IdMap_t. typedef std::map<std::string,TClass*> ROOT::TMapTypeToTClass::IdMap_t. Definition at line 370 of file TClass.cxx. ◆ key_type. typedef IdMap_t::key_type ROOT::TMapTypeToTClass::key_type. Definition at line 371 of file TClass.cxx. ◆ mapped_type. typedef IdMap_t::mapped_type ROOT::TMapTypeToTClass::mapped_type. Definition at line 378 of file TClass.cxx. ◆ size_type. typedef IdMap_t::size_type ROOT::TMapTypeToTClass::size_type. Definition at line 373 of file TClass.cxx. Member Function Documentation. ◆ Add(). void ROOT::TMapTypeToTClass::Add ; (; const key_type & ; key, . mapped_type & ; obj . ). inline . Definition at line 385 of file TClass.cxx. ◆ Find(). mapped_type ROOT::TMapTypeToTClass::Find ; (; const key_type & ; key); const. inline . Definition at line 390 of file TClass.cxx. ◆ Remove(). void ROOT::TMapTypeToTClass::Remove ; (; const key_type & ; key). inline . Definition at line 398 of file TClass.cxx. Member Data Documentation. ◆ fMap. IdMap_t ROOT::TMapTypeToTClass::fMap. private . Definition at line 382 of file TClass.cxx. core/meta",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1TMapTypeToTClass.html:91,Load,Loading,91,doc/master/classROOT_1_1TMapTypeToTClass.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1TMapTypeToTClass.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::TMapTypeToTClass Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::TMapTypeToTClass Class Reference. . Definition at line 365 of file TClass.cxx. Public Types; typedef IdMap_t::const_iterator const_iterator;  ; typedef std::map< std::string, TClass * > IdMap_t;  ; typedef IdMap_t::key_type key_type;  ; typedef IdMap_t::mapped_type mapped_type;  ; typedef IdMap_t::size_type size_type;  . Public Member Functions; void Add (const key_type &key, mapped_type &obj);  ; mapped_type Find (const key_type &key) const;  ; void Remove (const key_type &key);  . Private Attributes; IdMap_t fMap;  . Member Typedef Documentation. ◆ const_iterator. typedef IdMap_t::const_iterator ROOT::TMapTypeToTClass::const_iterator. Definition at line 372 of file TClass.cxx. ◆ IdMap_t. typedef std::map<std::string,TClass*> ROOT::TMapTypeToTClass::IdMap_t. Definition at line 370 of file TClass.cxx. ◆ key_type. typedef IdMap_t::key_type ROOT::TMapTypeToTClass::key_type. Definition at line 371 of file TClass.cxx. ◆ mapped_type. typedef IdMap_t::mapped_type ROOT::TMapTypeToTClass::mapped_type. Definition at line 378 of file TClass.cxx. ◆ size_type. typedef IdMap_t::size_type ROOT::TMapTypeToTClass::size_type. Definition at line 373 of file TClass.cxx. Member Function Documentation. ◆ Add(). void ROOT::TMapTypeToTClass::Add ; (; const key_type & ; key, . mapped_type & ; obj . ). inline . Definition at line 385 of file TClass.cxx. ◆ Find(). mapped_type ROOT::TMapTypeToTClass::Find ; (; const key_type & ; key); const. inline . Definition at line 390 of file TClass.cxx. ◆ Remove(). void ROOT::TMapTypeToTClass::Remove ; (; const key_type & ; key). inline . Definition at line 398 of file TClass.cxx. Member Data Documentation. ◆ fMap. IdMap_t ROOT::TMapTypeToTClass::fMap. private . Definition at line 382 of file TClass.cxx. core/meta/",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1TMapTypeToTClass.html:90,Load,Loading,90,doc/v632/classROOT_1_1TMapTypeToTClass.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TMapTypeToTClass.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::TMetaUtils Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces |; Classes |; Typedefs |; Enumerations |; Functions |; Variables ; ROOT::TMetaUtils Namespace Reference. Namespaces; namespace  AST2SourceTools;  ; namespace  propNames;  . Classes; class  AnnotatedRecordDecl;  ; class  RConstructorType;  ; class  TClingLookupHelper;  ; class  TNormalizedCtxt;  ; class  TNormalizedCtxtImpl;  . Typedefs; typedef void(* CallWriteStreamer_t) (const AnnotatedRecordDecl &cl, const cling::Interpreter &interp, const TNormalizedCtxt &normCtxt, std::ostream &dictStream, bool isAutoStreamer);  ; typedef std::list< RConstructorType > RConstructorTypes;  . Enumerations; enum  DataMemberInfo__ValidArrayIndex_error_code { ;   VALID; , NOT_INT; , NOT_DEF; , IS_PRIVATE; , ;   UNKNOWN. };  ; enum class  EIOCtorCategory : short { kAbsent; , kDefault; , kIOPtrType; , kIORefType; };  . Functions; clang::QualType AddDefaultParameters (clang::QualType instanceType, const cling::Interpreter &interpret, const TNormalizedCtxt &normCtxt);  Add any unspecified template parameters to the class template instance, mentioned anywhere in the type. ;  ; bool BeginsWith (const std::string &theString, const std::string &theSubstring);  ; EIOCtorCategory CheckConstructor (const clang::CXXRecordDecl *, const RConstructorType &, const cling::Interpreter &interp);  Check if class has constructor of provided type - either default or with single argument. ;  ; bool CheckDefaultConstructor (const clang::CXXRecordDecl *, const cling::Interpreter &interp);  Checks if default constructor exists and accessible. ;  ; EIOCtorCategory CheckIOConstructor (const clang::CXXRecordDecl *, const char *, const clang::CXXRecordDecl *, const cling::Interpreter &interp);  Checks IO constructor - must be public and with specified argument. ;  ; bool CheckPublicFuncWithProto (clang::CXXRecordDecl const *, char const *, char const *, const cling::Interpreter ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1TMetaUtils.html:89,Load,Loading,89,doc/master/namespaceROOT_1_1TMetaUtils.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1TMetaUtils.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::TMetaUtils Namespace Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces |; Classes |; Typedefs |; Enumerations |; Functions |; Variables ; ROOT::TMetaUtils Namespace Reference. Namespaces; namespace  AST2SourceTools;  ; namespace  propNames;  . Classes; class  AnnotatedRecordDecl;  ; class  RConstructorType;  ; class  TClingLookupHelper;  ; class  TNormalizedCtxt;  ; class  TNormalizedCtxtImpl;  . Typedefs; typedef void(* CallWriteStreamer_t) (const AnnotatedRecordDecl &cl, const cling::Interpreter &interp, const TNormalizedCtxt &normCtxt, std::ostream &dictStream, bool isAutoStreamer);  ; typedef std::list< RConstructorType > RConstructorTypes;  . Enumerations; enum  DataMemberInfo__ValidArrayIndex_error_code { ;   VALID; , NOT_INT; , NOT_DEF; , IS_PRIVATE; , ;   UNKNOWN. };  ; enum class  EIOCtorCategory : short { kAbsent; , kDefault; , kIOPtrType; , kIORefType; };  . Functions; clang::QualType AddDefaultParameters (clang::QualType instanceType, const cling::Interpreter &interpret, const TNormalizedCtxt &normCtxt);  Add any unspecified template parameters to the class template instance, mentioned anywhere in the type. ;  ; bool BeginsWith (const std::string &theString, const std::string &theSubstring);  ; EIOCtorCategory CheckConstructor (const clang::CXXRecordDecl *, const RConstructorType &, const cling::Interpreter &interp);  Check if class has constructor of provided type - either default or with single argument. ;  ; bool CheckDefaultConstructor (const clang::CXXRecordDecl *, const cling::Interpreter &interp);  Checks if default constructor exists and accessible. ;  ; EIOCtorCategory CheckIOConstructor (const clang::CXXRecordDecl *, const char *, const clang::CXXRecordDecl *, const cling::Interpreter &interp);  Checks IO constructor - must be public and with specified argument. ;  ; bool CheckPublicFuncWithProto (clang::CXXRecordDecl const *, char const *, char const *, const cling::Interpreter &",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/namespaceROOT_1_1TMetaUtils.html:88,Load,Loading,88,doc/v632/namespaceROOT_1_1TMetaUtils.html,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1TMetaUtils.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::TMetaUtils::TClingLookupHelper Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::TMetaUtils::TClingLookupHelper Class Reference. . Definition at line 160 of file TClingUtils.h. Public Types; typedef bool(* AutoParse_t) (const char *name);  ; typedef bool(* ExistingTypeCheck_t) (const std::string &tname, std::string &result);  . Public Member Functions;  TClingLookupHelper (cling::Interpreter &interpreter, TNormalizedCtxt &normCtxt, ExistingTypeCheck_t existingTypeCheck, AutoParse_t autoParse, bool *shuttingDownPtr, const int *pgDebug=nullptr);  ; virtual ~TClingLookupHelper ();  ; bool ExistingTypeCheck (const std::string &tname, std::string &result) override;  Helper routine to ry hard to avoid looking up in the Cling database as this could enduce an unwanted autoparsing. ;  ; void GetPartiallyDesugaredName (std::string &nameLong) override;  ; bool GetPartiallyDesugaredNameWithScopeHandling (const std::string &tname, std::string &result, bool dropstd=true) override;  We assume that we have a simple type: [const] typename[*&][const]. ;  ; bool IsAlreadyPartiallyDesugaredName (const std::string &nondef, const std::string &nameLong) override;  ; bool IsDeclaredScope (const std::string &base, bool &isInlined) override;  ; void ShuttingDownSignal () override;  ;  Public Member Functions inherited from TClassEdit::TInterpreterLookupHelper;  TInterpreterLookupHelper ();  ; virtual ~TInterpreterLookupHelper ();  . Private Member Functions; bool WantDiags () const;  . Private Attributes; AutoParse_t fAutoParse;  ; ExistingTypeCheck_t fExistingTypeCheck;  ; cling::Interpreter * fInterpreter;  ; bool * fInterpreterIsShuttingDownPtr;  ; TNormalizedCtxt * fNormalizedCtxt;  ; const int * fPDebug;  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/m",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1TMetaUtils_1_1TClingLookupHelper.html:105,Load,Loading,105,doc/master/classROOT_1_1TMetaUtils_1_1TClingLookupHelper.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1TMetaUtils_1_1TClingLookupHelper.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::TMetaUtils::TNormalizedCtxt Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::TMetaUtils::TNormalizedCtxt Class Reference. . Definition at line 138 of file TClingUtils.h. Public Types; using Config_t = cling::utils::Transform::Config;  ; using TemplPtrIntMap_t = std::map< const clang::ClassTemplateDecl *, int >;  ; using TypesCont_t = std::set< const clang::Type * >;  . Public Member Functions;  TNormalizedCtxt (const cling::LookupHelper &lh);  ;  TNormalizedCtxt (const TNormalizedCtxt &other);  ;  ~TNormalizedCtxt ();  ; void AddTemplAndNargsToKeep (const clang::ClassTemplateDecl *templ, unsigned int i);  ; const Config_t & GetConfig () const;  ; int GetNargsToKeep (const clang::ClassTemplateDecl *templ) const;  ; const TemplPtrIntMap_t GetTemplNargsToKeepMap () const;  ; const TypesCont_t & GetTypeWithAlternative () const;  ; void keepTypedef (const cling::LookupHelper &lh, const char *name, bool replace=false);  . Private Attributes; TNormalizedCtxtImpl * fImpl;  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/core/clingutils/res/TClingUtils.h>; Member Typedef Documentation. ◆ Config_t. using ROOT::TMetaUtils::TNormalizedCtxt::Config_t = cling::utils::Transform::Config. Definition at line 142 of file TClingUtils.h. ◆ TemplPtrIntMap_t. using ROOT::TMetaUtils::TNormalizedCtxt::TemplPtrIntMap_t = std::map<const clang::ClassTemplateDecl*, int>. Definition at line 144 of file TClingUtils.h. ◆ TypesCont_t. using ROOT::TMetaUtils::TNormalizedCtxt::TypesCont_t = std::set<const clang::Type*>. Definition at line 143 of file TClingUtils.h. Constructor & Destructor Documentation. ◆ TNormalizedCtxt() [1/2]. ROOT::TMetaUtils::TNormalizedCtxt::TNormalizedCtxt ; (; const cling::LookupHelper & ; lh). Definition at line 285 of file TClingUtils.cxx. ◆ TNormalizedCtxt() ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1TMetaUtils_1_1TNormalizedCtxt.html:102,Load,Loading,102,doc/master/classROOT_1_1TMetaUtils_1_1TNormalizedCtxt.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1TMetaUtils_1_1TNormalizedCtxt.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::TModuleGenerator Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Types |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::TModuleGenerator Class Reference. . Definition at line 36 of file TModuleGenerator.h. Public Types; enum  ESourceFileKind { kSFKNotC; , kSFKHeader; , kSFKSource; , kSFKLinkdef; };  . Public Member Functions;  TModuleGenerator (clang::CompilerInstance *CI, bool inlineHeader, const std::string &shLibFileName, bool isInPCH);  ;  ~TModuleGenerator ();  ; const std::string & GetContentName () const;  ; const std::string & GetDemangledDictionaryName () const;  ; const std::string & GetDictionaryName () const;  ; int GetErrorCount () const;  ; const std::vector< std::string > & GetHeaders () const;  ; const std::vector< std::string > & GetIncludePaths () const;  ; const std::string & GetModuleDirName () const;  ; const std::string & GetModuleFileName () const;  ; const std::string & GetUmbrellaName () const;  ; bool IsPCH () const;  ; void ParseArgs (const std::vector< std::string > &args);  Parse -I -D -U headers.h SomethingLinkdef.h. ;  ; void WriteContentHeader (std::ostream &out) const;  Write a header file describing the content of this module through a series of variables inside the namespace ROOT::Dict::[DictionaryName]. ;  ; std::ostream & WritePPDefines (std::ostream &out) const;  Write #ifndef FOO # define FOO=bar #endif ;  ; std::ostream & WritePPUndefines (std::ostream &out) const;  Write #ifdef FOO # undef FOO #endif ;  ; void WriteRegistrationSource (std::ostream &out, const std::string &fwdDeclnArgsToKeepString, const std::string &headersClassesMapString, const std::string &fwdDeclsString, const std::string &extraIncludes, bool hasCxxModule) const;  ; void WriteUmbrellaHeader (std::ostream &out) const;  Write a header file pulling in the content of this module through a seri",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1TModuleGenerator.html:91,Load,Loading,91,doc/master/classROOT_1_1TModuleGenerator.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1TModuleGenerator.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::TModuleGenerator Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Types |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::TModuleGenerator Class Reference. . Definition at line 36 of file TModuleGenerator.h. Public Types; enum  ESourceFileKind { kSFKNotC; , kSFKHeader; , kSFKSource; , kSFKLinkdef; };  . Public Member Functions;  TModuleGenerator (clang::CompilerInstance *CI, bool inlineHeader, const std::string &shLibFileName, bool isInPCH);  ;  ~TModuleGenerator ();  ; const std::string & GetContentName () const;  ; const std::string & GetDemangledDictionaryName () const;  ; const std::string & GetDictionaryName () const;  ; int GetErrorCount () const;  ; const std::vector< std::string > & GetHeaders () const;  ; const std::vector< std::string > & GetIncludePaths () const;  ; const std::string & GetModuleDirName () const;  ; const std::string & GetModuleFileName () const;  ; const std::string & GetUmbrellaName () const;  ; bool IsPCH () const;  ; void ParseArgs (const std::vector< std::string > &args);  Parse -I -D -U headers.h SomethingLinkdef.h. ;  ; void WriteContentHeader (std::ostream &out) const;  Write a header file describing the content of this module through a series of variables inside the namespace ROOT::Dict::[DictionaryName]. ;  ; std::ostream & WritePPDefines (std::ostream &out) const;  Write #ifndef FOO # define FOO=bar #endif ;  ; std::ostream & WritePPUndefines (std::ostream &out) const;  Write #ifdef FOO # undef FOO #endif ;  ; void WriteRegistrationSource (std::ostream &out, const std::string &fwdDeclnArgsToKeepString, const std::string &headersClassesMapString, const std::string &fwdDeclsString, const std::string &extraIncludes, bool hasCxxModule) const;  ; void WriteUmbrellaHeader (std::ostream &out) const;  Write a header file pulling in the content of this module through a serie",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1TModuleGenerator.html:90,Load,Loading,90,doc/v632/classROOT_1_1TModuleGenerator.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TModuleGenerator.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::TNumSlots Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Attributes |; Friends |; List of all members ; ROOT::TNumSlots Class Reference. ; Defines the number of threads in some of ROOT's interfaces. ; Definition at line 42 of file TThreadedObject.hxx. Public Attributes; unsigned int fVal;  . Friends; bool operator!= (TNumSlots lhs, TNumSlots rhs);  ; bool operator== (TNumSlots lhs, TNumSlots rhs);  . #include <ROOT/TThreadedObject.hxx>; Friends And Related Symbol Documentation. ◆ operator!=. bool operator!= ; (; TNumSlots ; lhs, . TNumSlots ; rhs . ). friend . Definition at line 45 of file TThreadedObject.hxx. ◆ operator==. bool operator== ; (; TNumSlots ; lhs, . TNumSlots ; rhs . ). friend . Definition at line 44 of file TThreadedObject.hxx. Member Data Documentation. ◆ fVal. unsigned int ROOT::TNumSlots::fVal. Definition at line 43 of file TThreadedObject.hxx. Collaboration diagram for ROOT::TNumSlots:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; The documentation for this class was generated from the following file:; core/thread/inc/ROOT/TThreadedObject.hxx. ROOTTNumSlots. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:00 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structROOT_1_1TNumSlots.html:84,Load,Loading,84,doc/master/structROOT_1_1TNumSlots.html,https://root.cern,https://root.cern/doc/master/structROOT_1_1TNumSlots.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::TNumSlots Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Attributes |; Friends |; List of all members ; ROOT::TNumSlots Class Reference. ; Defines the number of threads in some of ROOT's interfaces. ; Definition at line 42 of file TThreadedObject.hxx. Public Attributes; unsigned int fVal;  . Friends; bool operator!= (TNumSlots lhs, TNumSlots rhs);  ; bool operator== (TNumSlots lhs, TNumSlots rhs);  . #include <ROOT/TThreadedObject.hxx>; Friends And Related Symbol Documentation. ◆ operator!=. bool operator!= ; (; TNumSlots ; lhs, . TNumSlots ; rhs . ). friend . Definition at line 45 of file TThreadedObject.hxx. ◆ operator==. bool operator== ; (; TNumSlots ; lhs, . TNumSlots ; rhs . ). friend . Definition at line 44 of file TThreadedObject.hxx. Member Data Documentation. ◆ fVal. unsigned int ROOT::TNumSlots::fVal. Definition at line 43 of file TThreadedObject.hxx. Collaboration diagram for ROOT::TNumSlots:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; The documentation for this class was generated from the following file:; core/thread/inc/ROOT/TThreadedObject.hxx. ROOTTNumSlots. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:13:37 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/structROOT_1_1TNumSlots.html:83,Load,Loading,83,doc/v632/structROOT_1_1TNumSlots.html,https://root.cern,https://root.cern/doc/v632/structROOT_1_1TNumSlots.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::TProcessExecutor Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Types |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::TProcessExecutor Class ReferenceParallelized classes. ; This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. . ROOT::TProcessExecutor::Map; This class inherits its interfaces from ROOT::TExecutor; . The two possible usages of the Map method are:. Map(F func, unsigned nTimes): func is executed nTimes with no arguments; Map(F func, T& args): func is executed on each element of the collection of arguments args. For either signature, func is executed as many times as needed by a pool of fNWorkers workers; the number of workers can be passed to the constructor or set via SetNWorkers. It typically defaults to the number of cores.; A collection containing the result of each execution is returned.; Note: the user is responsible for the deletion of any object that might be created upon execution of func, returned objects included: ROOT::TProcessExecutor never deletes what it returns, it simply forgets it.; Note: that the usage of ROOT::TProcessExecutor::Map is indicated only when the task to be executed takes more than a few seconds, otherwise the overhead introduced by Map will outrun the benefits of parallel execution on most machines.; Parameters. funca callable object, such as a lambda expression, an std::function, a functor object or a function that takes zero arguments (for the first signature) or one (for the second signature). ; argsa standard vector, a ROOT::TSeq of integer type or an initializer list for the second signature. An integer only for the first. . Note: in cases where the function to be executed takes more than zero/one argument but all are fixed except zero/one, the function can be wrapped in a lambda ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1TProcessExecutor.html:91,Load,Loading,91,doc/master/classROOT_1_1TProcessExecutor.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1TProcessExecutor.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::TProcessExecutor Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Types |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::TProcessExecutor Class ReferenceParallelized classes. ; This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. . ROOT::TProcessExecutor::Map; This class inherits its interfaces from ROOT::TExecutor; . The two possible usages of the Map method are:. Map(F func, unsigned nTimes): func is executed nTimes with no arguments; Map(F func, T& args): func is executed on each element of the collection of arguments args. For either signature, func is executed as many times as needed by a pool of fNWorkers workers; the number of workers can be passed to the constructor or set via SetNWorkers. It typically defaults to the number of cores.; A collection containing the result of each execution is returned.; Note: the user is responsible for the deletion of any object that might be created upon execution of func, returned objects included: ROOT::TProcessExecutor never deletes what it returns, it simply forgets it.; Note: that the usage of ROOT::TProcessExecutor::Map is indicated only when the task to be executed takes more than a few seconds, otherwise the overhead introduced by Map will outrun the benefits of parallel execution on most machines.; Parameters. funca callable object, such as a lambda expression, an std::function, a functor object or a function that takes zero arguments (for the first signature) or one (for the second signature). ; argsa standard vector, a ROOT::TSeq of integer type or an initializer list for the second signature. An integer only for the first. . Note: in cases where the function to be executed takes more than zero/one argument but all are fixed except zero/one, the function can be wrapped in a lambda o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1TProcessExecutor.html:90,Load,Loading,90,doc/v632/classROOT_1_1TProcessExecutor.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TProcessExecutor.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::TRWMutexImp< MutexT, RecurseCountsT > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; ROOT::TRWMutexImp< MutexT, RecurseCountsT > Class Template Reference. ; template<typename MutexT, typename RecurseCountsT = ROOT::Internal::RecurseCounts>; class ROOT::TRWMutexImp< MutexT, RecurseCountsT >; Definition at line 22 of file TRWMutexImp.h. Public Member Functions; void Apply (std::unique_ptr< StateDelta > &&delta) override;  Apply the mutex state delta. ;  ; TVirtualRWMutex * Factory (Bool_t=kFALSE) override;  Create mutex and return pointer to it. ;  ; std::unique_ptr< State > GetStateBefore () override;  Get the mutex state before the current lock was taken. ;  ; TClass * IsA () const override;  ; Hint_t * ReadLock () override;  Take the Read Lock of the mutex. ;  ; void ReadUnLock (Hint_t *) override;  Release the read lock of the mutex. ;  ; std::unique_ptr< StateDelta > Rewind (const State &earlierState) override;  Restore the mutex state to state. ;  ; void Streamer (TBuffer &R__b) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Hint_t * WriteLock () override;  Take the Write Lock of the mutex. ;  ; void WriteUnLock (Hint_t *) override;  Release the read lock of the mutex. ;  ;  Public Member Functions inherited from ROOT::TVirtualRWMutex; Int_t CleanUp () override;  ; TClass * IsA () const override;  ; Int_t Lock () override;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Int_t TryLock () override;  ; Int_t UnLock () override;  ;  Public Member Functions inherited from TVirtualMutex;  TVirtualMutex (Bool_t=kFALSE);  ; virtual ~TVirtualMutex ();  ; Int_t Acquire ();  ; Int_t Release ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Funct",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1TRWMutexImp.html:121,Load,Loading,121,doc/master/classROOT_1_1TRWMutexImp.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1TRWMutexImp.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::TRWMutexImp< MutexT, RecurseCountsT > Class Template Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; ROOT::TRWMutexImp< MutexT, RecurseCountsT > Class Template Reference. ; template<typename MutexT, typename RecurseCountsT = ROOT::Internal::RecurseCounts>; class ROOT::TRWMutexImp< MutexT, RecurseCountsT >; Definition at line 22 of file TRWMutexImp.h. Public Member Functions; void Apply (std::unique_ptr< StateDelta > &&delta) override;  Apply the mutex state delta. ;  ; TVirtualRWMutex * Factory (Bool_t=kFALSE) override;  Create mutex and return pointer to it. ;  ; std::unique_ptr< State > GetStateBefore () override;  Get the mutex state before the current lock was taken. ;  ; TClass * IsA () const override;  ; Hint_t * ReadLock () override;  Take the Read Lock of the mutex. ;  ; void ReadUnLock (Hint_t *) override;  Release the read lock of the mutex. ;  ; std::unique_ptr< StateDelta > Rewind (const State &earlierState) override;  Restore the mutex state to state. ;  ; void Streamer (TBuffer &R__b) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Hint_t * WriteLock () override;  Take the Write Lock of the mutex. ;  ; void WriteUnLock (Hint_t *) override;  Release the read lock of the mutex. ;  ;  Public Member Functions inherited from ROOT::TVirtualRWMutex; Int_t CleanUp () override;  ; TClass * IsA () const override;  ; Int_t Lock () override;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Int_t TryLock () override;  ; Int_t UnLock () override;  ;  Public Member Functions inherited from TVirtualMutex;  TVirtualMutex (Bool_t=kFALSE);  ; virtual ~TVirtualMutex ();  ; Int_t Acquire ();  ; Int_t Release ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1TRWMutexImp.html:120,Load,Loading,120,doc/v632/classROOT_1_1TRWMutexImp.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TRWMutexImp.html,1,['Load'],['Loading']
Performance,. ROOT: ROOT::TRWSpinLock Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::TRWSpinLock Class Reference. . Definition at line 22 of file TRWSpinLock.hxx. Public Member Functions;  TRWSpinLock ();  Regular constructor. ;  ; void ReadLock ();  Acquire the lock in read mode. ;  ; void ReadUnLock ();  Release the lock in read mode. ;  ; void WriteLock ();  Acquire the lock in write mode. ;  ; void WriteUnLock ();  Release the lock in write mode. ;  . Private Attributes; std::condition_variable_any fCond;  ! RWlock internal condition variable ;  ; ROOT::TSpinMutex fMutex;  ! RWlock internal mutex ;  ; std::atomic< int > fReaderReservation;  ! A reader wants access ;  ; std::atomic< int > fReaders;  ! Number of readers ;  ; std::atomic< bool > fWriter;  ! Is there a writer? ;  ; std::atomic< int > fWriterReservation;  ! A writer wants access ;  . #include <ROOT/TRWSpinLock.hxx>; Constructor & Destructor Documentation. ◆ TRWSpinLock(). ROOT::TRWSpinLock::TRWSpinLock ; (; ). inline . Regular constructor. ; Definition at line 34 of file TRWSpinLock.hxx. Member Function Documentation. ◆ ReadLock(). void TRWSpinLock::ReadLock ; (; ). Acquire the lock in read mode. ; Definition at line 35 of file TRWSpinLock.cxx. ◆ ReadUnLock(). void TRWSpinLock::ReadUnLock ; (; ). Release the lock in read mode. ; Definition at line 61 of file TRWSpinLock.cxx. ◆ WriteLock(). void TRWSpinLock::WriteLock ; (; ). Acquire the lock in write mode. ; Definition at line 77 of file TRWSpinLock.cxx. ◆ WriteUnLock(). void TRWSpinLock::WriteUnLock ; (; ). Release the lock in write mode. ; Definition at line 102 of file TRWSpinLock.cxx. Member Data Documentation. ◆ fCond. std::condition_variable_any ROOT::TRWSpinLock::fCond. private . ! RWlock internal condition variable ; Definition at line 29 of file TRWSpinLock.hxx. ◆ fMutex. ROOT::TSpinMutex ROOT::TRWSpinLock,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1TRWSpinLock.html:86,Load,Loading,86,doc/master/classROOT_1_1TRWSpinLock.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1TRWSpinLock.html,1,['Load'],['Loading']
Performance,. ROOT: ROOT::TRWSpinLock Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::TRWSpinLock Class Reference. . Definition at line 22 of file TRWSpinLock.hxx. Public Member Functions;  TRWSpinLock ();  Regular constructor. ;  ; void ReadLock ();  Acquire the lock in read mode. ;  ; void ReadUnLock ();  Release the lock in read mode. ;  ; void WriteLock ();  Acquire the lock in write mode. ;  ; void WriteUnLock ();  Release the lock in write mode. ;  . Private Attributes; std::condition_variable_any fCond;  ! RWlock internal condition variable ;  ; ROOT::TSpinMutex fMutex;  ! RWlock internal mutex ;  ; std::atomic< int > fReaderReservation;  ! A reader wants access ;  ; std::atomic< int > fReaders;  ! Number of readers ;  ; std::atomic< bool > fWriter;  ! Is there a writer? ;  ; std::atomic< int > fWriterReservation;  ! A writer wants access ;  . #include <ROOT/TRWSpinLock.hxx>; Constructor & Destructor Documentation. ◆ TRWSpinLock(). ROOT::TRWSpinLock::TRWSpinLock ; (; ). inline . Regular constructor. ; Definition at line 34 of file TRWSpinLock.hxx. Member Function Documentation. ◆ ReadLock(). void TRWSpinLock::ReadLock ; (; ). Acquire the lock in read mode. ; Definition at line 35 of file TRWSpinLock.cxx. ◆ ReadUnLock(). void TRWSpinLock::ReadUnLock ; (; ). Release the lock in read mode. ; Definition at line 61 of file TRWSpinLock.cxx. ◆ WriteLock(). void TRWSpinLock::WriteLock ; (; ). Acquire the lock in write mode. ; Definition at line 77 of file TRWSpinLock.cxx. ◆ WriteUnLock(). void TRWSpinLock::WriteUnLock ; (; ). Release the lock in write mode. ; Definition at line 102 of file TRWSpinLock.cxx. Member Data Documentation. ◆ fCond. std::condition_variable_any ROOT::TRWSpinLock::fCond. private . ! RWlock internal condition variable ; Definition at line 29 of file TRWSpinLock.hxx. ◆ fMutex. ROOT::TSpinMutex ROOT::TRWSpinLock:,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1TRWSpinLock.html:85,Load,Loading,85,doc/v632/classROOT_1_1TRWSpinLock.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TRWSpinLock.html,1,['Load'],['Loading']
Performance,. ROOT: ROOT::TRWSpinLockReadGuard Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::TRWSpinLockReadGuard Class Reference. . Definition at line 42 of file TRWSpinLock.hxx. Public Member Functions;  TRWSpinLockReadGuard (TRWSpinLock &lock);  ;  ~TRWSpinLockReadGuard ();  . Private Attributes; TRWSpinLock & fLock;  . #include <ROOT/TRWSpinLock.hxx>; Constructor & Destructor Documentation. ◆ TRWSpinLockReadGuard(). TRWSpinLockReadGuard::TRWSpinLockReadGuard ; (; TRWSpinLock & ; lock). Definition at line 114 of file TRWSpinLock.cxx. ◆ ~TRWSpinLockReadGuard(). TRWSpinLockReadGuard::~TRWSpinLockReadGuard ; (; ). Definition at line 119 of file TRWSpinLock.cxx. Member Data Documentation. ◆ fLock. TRWSpinLock& ROOT::TRWSpinLockReadGuard::fLock. private . Definition at line 44 of file TRWSpinLock.hxx. Libraries for ROOT::TRWSpinLockReadGuard:. [legend]; The documentation for this class was generated from the following files:; core/thread/inc/ROOT/TRWSpinLock.hxx; core/thread/src/TRWSpinLock.cxx. ROOTTRWSpinLockReadGuard. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:00 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1TRWSpinLockReadGuard.html:95,Load,Loading,95,doc/master/classROOT_1_1TRWSpinLockReadGuard.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1TRWSpinLockReadGuard.html,1,['Load'],['Loading']
Performance,. ROOT: ROOT::TRWSpinLockReadGuard Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::TRWSpinLockReadGuard Class Reference. . Definition at line 42 of file TRWSpinLock.hxx. Public Member Functions;  TRWSpinLockReadGuard (TRWSpinLock &lock);  ;  ~TRWSpinLockReadGuard ();  . Private Attributes; TRWSpinLock & fLock;  . #include <ROOT/TRWSpinLock.hxx>; Constructor & Destructor Documentation. ◆ TRWSpinLockReadGuard(). TRWSpinLockReadGuard::TRWSpinLockReadGuard ; (; TRWSpinLock & ; lock). Definition at line 114 of file TRWSpinLock.cxx. ◆ ~TRWSpinLockReadGuard(). TRWSpinLockReadGuard::~TRWSpinLockReadGuard ; (; ). Definition at line 119 of file TRWSpinLock.cxx. Member Data Documentation. ◆ fLock. TRWSpinLock& ROOT::TRWSpinLockReadGuard::fLock. private . Definition at line 44 of file TRWSpinLock.hxx. Libraries for ROOT::TRWSpinLockReadGuard:. [legend]; The documentation for this class was generated from the following files:; core/thread/inc/ROOT/TRWSpinLock.hxx; core/thread/src/TRWSpinLock.cxx. ROOTTRWSpinLockReadGuard. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:13:37 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1TRWSpinLockReadGuard.html:94,Load,Loading,94,doc/v632/classROOT_1_1TRWSpinLockReadGuard.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TRWSpinLockReadGuard.html,1,['Load'],['Loading']
Performance,. ROOT: ROOT::TRWSpinLockWriteGuard Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::TRWSpinLockWriteGuard Class Reference. . Definition at line 51 of file TRWSpinLock.hxx. Public Member Functions;  TRWSpinLockWriteGuard (TRWSpinLock &lock);  ;  ~TRWSpinLockWriteGuard ();  . Private Attributes; TRWSpinLock & fLock;  . #include <ROOT/TRWSpinLock.hxx>; Constructor & Destructor Documentation. ◆ TRWSpinLockWriteGuard(). TRWSpinLockWriteGuard::TRWSpinLockWriteGuard ; (; TRWSpinLock & ; lock). Definition at line 124 of file TRWSpinLock.cxx. ◆ ~TRWSpinLockWriteGuard(). TRWSpinLockWriteGuard::~TRWSpinLockWriteGuard ; (; ). Definition at line 129 of file TRWSpinLock.cxx. Member Data Documentation. ◆ fLock. TRWSpinLock& ROOT::TRWSpinLockWriteGuard::fLock. private . Definition at line 53 of file TRWSpinLock.hxx. Libraries for ROOT::TRWSpinLockWriteGuard:. [legend]; The documentation for this class was generated from the following files:; core/thread/inc/ROOT/TRWSpinLock.hxx; core/thread/src/TRWSpinLock.cxx. ROOTTRWSpinLockWriteGuard. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:00 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1TRWSpinLockWriteGuard.html:96,Load,Loading,96,doc/master/classROOT_1_1TRWSpinLockWriteGuard.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1TRWSpinLockWriteGuard.html,1,['Load'],['Loading']
Performance,. ROOT: ROOT::TRWSpinLockWriteGuard Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::TRWSpinLockWriteGuard Class Reference. . Definition at line 51 of file TRWSpinLock.hxx. Public Member Functions;  TRWSpinLockWriteGuard (TRWSpinLock &lock);  ;  ~TRWSpinLockWriteGuard ();  . Private Attributes; TRWSpinLock & fLock;  . #include <ROOT/TRWSpinLock.hxx>; Constructor & Destructor Documentation. ◆ TRWSpinLockWriteGuard(). TRWSpinLockWriteGuard::TRWSpinLockWriteGuard ; (; TRWSpinLock & ; lock). Definition at line 124 of file TRWSpinLock.cxx. ◆ ~TRWSpinLockWriteGuard(). TRWSpinLockWriteGuard::~TRWSpinLockWriteGuard ; (; ). Definition at line 129 of file TRWSpinLock.cxx. Member Data Documentation. ◆ fLock. TRWSpinLock& ROOT::TRWSpinLockWriteGuard::fLock. private . Definition at line 53 of file TRWSpinLock.hxx. Libraries for ROOT::TRWSpinLockWriteGuard:. [legend]; The documentation for this class was generated from the following files:; core/thread/inc/ROOT/TRWSpinLock.hxx; core/thread/src/TRWSpinLock.cxx. ROOTTRWSpinLockWriteGuard. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:13:37 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1TRWSpinLockWriteGuard.html:95,Load,Loading,95,doc/v632/classROOT_1_1TRWSpinLockWriteGuard.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TRWSpinLockWriteGuard.html,1,['Load'],['Loading']
Performance,. ROOT: ROOT::TReadLockGuard Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::TReadLockGuard Class Reference. . Definition at line 112 of file TVirtualRWMutex.h. Public Member Functions;  TReadLockGuard (TVirtualRWMutex *mutex);  ;  ~TReadLockGuard ();  ; TClass * IsA () const;  ; void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Private Member Functions;  TReadLockGuard (const TReadLockGuard &)=delete;  ; TReadLockGuard & operator= (const TReadLockGuard &)=delete;  . Private Attributes; TVirtualRWMutex::Hint_t * fHint;  ; TVirtualRWMutex *const fMutex;  . #include <TVirtualRWMutex.h>; Constructor & Destructor Documentation. ◆ TReadLockGuard() [1/2]. ROOT::TReadLockGuard::TReadLockGuard ; (; const TReadLockGuard & ; ). privatedelete . ◆ TReadLockGuard() [2/2]. ROOT::TReadLockGuard::TReadLockGuard ; (; TVirtualRWMutex * ; mutex). inline . Definition at line 122 of file TVirtualRWMutex.h. ◆ ~TReadLockGuard(). ROOT::TReadLockGuard::~TReadLockGuard ; (; ). inline . Definition at line 126 of file TVirtualRWMutex.h. Member Function Documentation. ◆ Class(). static TClass * ROOT::TReadLockGuard::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * ROOT::TReadLockGuard::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t ROOT::TReadLockGuard::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 128 of file TVirtualRWMutex.h. ◆ DeclFileName(). static const char * ROOT::TReadLockGuard::DeclFileName ; (; ). i,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1TReadLockGuard.html:89,Load,Loading,89,doc/master/classROOT_1_1TReadLockGuard.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1TReadLockGuard.html,1,['Load'],['Loading']
Performance,. ROOT: ROOT::TReadLockGuard Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::TReadLockGuard Class Reference. . Definition at line 112 of file TVirtualRWMutex.h. Public Member Functions;  TReadLockGuard (TVirtualRWMutex *mutex);  ;  ~TReadLockGuard ();  ; TClass * IsA () const;  ; void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Private Member Functions;  TReadLockGuard (const TReadLockGuard &)=delete;  ; TReadLockGuard & operator= (const TReadLockGuard &)=delete;  . Private Attributes; TVirtualRWMutex::Hint_t * fHint;  ; TVirtualRWMutex *const fMutex;  . #include <TVirtualRWMutex.h>; Constructor & Destructor Documentation. ◆ TReadLockGuard() [1/2]. ROOT::TReadLockGuard::TReadLockGuard ; (; const TReadLockGuard & ; ). privatedelete . ◆ TReadLockGuard() [2/2]. ROOT::TReadLockGuard::TReadLockGuard ; (; TVirtualRWMutex * ; mutex). inline . Definition at line 122 of file TVirtualRWMutex.h. ◆ ~TReadLockGuard(). ROOT::TReadLockGuard::~TReadLockGuard ; (; ). inline . Definition at line 126 of file TVirtualRWMutex.h. Member Function Documentation. ◆ Class(). static TClass * ROOT::TReadLockGuard::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * ROOT::TReadLockGuard::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t ROOT::TReadLockGuard::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 128 of file TVirtualRWMutex.h. ◆ DeclFileName(). static const char * ROOT::TReadLockGuard::DeclFileName ; (; ). in,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1TReadLockGuard.html:88,Load,Loading,88,doc/v632/classROOT_1_1TReadLockGuard.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TReadLockGuard.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::TReentrantRWLock< MutexT, RecurseCountsT > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::TReentrantRWLock< MutexT, RecurseCountsT > Class Template Reference. ; template<typename MutexT = ROOT::TSpinMutex, typename RecurseCountsT = Internal::RecurseCounts>; class ROOT::TReentrantRWLock< MutexT, RecurseCountsT >; Definition at line 279 of file TReentrantRWLock.hxx. Public Types; using State = TVirtualRWMutex::State;  ; using StateDelta = TVirtualRWMutex::StateDelta;  . Public Member Functions;  TReentrantRWLock ();  Regular constructor. ;  ; void Apply (std::unique_ptr< StateDelta > &&delta);  Re-apply a delta. ;  ; std::unique_ptr< State > GetStateBefore ();  Get the lock state before the most recent write lock was taken. ;  ; TVirtualRWMutex::Hint_t * ReadLock ();  Acquire the lock in read mode. ;  ; void ReadUnLock (TVirtualRWMutex::Hint_t *);  Release the lock in read mode. ;  ; std::unique_ptr< StateDelta > Rewind (const State &earlierState);  Rewind to an earlier mutex state, returning the delta. ;  ; TVirtualRWMutex::Hint_t * WriteLock ();  Acquire the lock in write mode. ;  ; void WriteUnLock (TVirtualRWMutex::Hint_t *);  Release the lock in write mode. ;  . Private Member Functions; void AssertReadCountLocIsFromCurrentThread (const size_t *presumedLocalReadersCount);  Assert that presumedLocalReadersCount really matches the local read count. ;  . Private Attributes; std::condition_variable_any fCond;  ! RWlock internal condition variable ;  ; MutexT fMutex;  ! RWlock internal mutex ;  ; std::atomic< int > fReaderReservation;  ! A reader wants access ;  ; std::atomic< int > fReaders;  ! Number of readers ;  ; RecurseCountsT fRecurseCounts;  ! Trackers for re-entry in the lock by the same thread. ;  ; std::atomic< bool > fWriter;  ! Is there a wri",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1TReentrantRWLock.html:126,Load,Loading,126,doc/master/classROOT_1_1TReentrantRWLock.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1TReentrantRWLock.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::TReentrantRWLock< MutexT, RecurseCountsT > Class Template Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::TReentrantRWLock< MutexT, RecurseCountsT > Class Template Reference. ; template<typename MutexT = ROOT::TSpinMutex, typename RecurseCountsT = Internal::RecurseCounts>; class ROOT::TReentrantRWLock< MutexT, RecurseCountsT >; Definition at line 279 of file TReentrantRWLock.hxx. Public Types; using State = TVirtualRWMutex::State;  ; using StateDelta = TVirtualRWMutex::StateDelta;  . Public Member Functions;  TReentrantRWLock ();  Regular constructor. ;  ; void Apply (std::unique_ptr< StateDelta > &&delta);  Re-apply a delta. ;  ; std::unique_ptr< State > GetStateBefore ();  Get the lock state before the most recent write lock was taken. ;  ; TVirtualRWMutex::Hint_t * ReadLock ();  Acquire the lock in read mode. ;  ; void ReadUnLock (TVirtualRWMutex::Hint_t *);  Release the lock in read mode. ;  ; std::unique_ptr< StateDelta > Rewind (const State &earlierState);  Rewind to an earlier mutex state, returning the delta. ;  ; TVirtualRWMutex::Hint_t * WriteLock ();  Acquire the lock in write mode. ;  ; void WriteUnLock (TVirtualRWMutex::Hint_t *);  Release the lock in write mode. ;  . Private Member Functions; void AssertReadCountLocIsFromCurrentThread (const size_t *presumedLocalReadersCount);  Assert that presumedLocalReadersCount really matches the local read count. ;  . Private Attributes; std::condition_variable_any fCond;  ! RWlock internal condition variable ;  ; MutexT fMutex;  ! RWlock internal mutex ;  ; std::atomic< int > fReaderReservation;  ! A reader wants access ;  ; std::atomic< int > fReaders;  ! Number of readers ;  ; RecurseCountsT fRecurseCounts;  ! Trackers for re-entry in the lock by the same thread. ;  ; std::atomic< bool > fWriter;  ! Is there a writ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1TReentrantRWLock.html:125,Load,Loading,125,doc/v632/classROOT_1_1TReentrantRWLock.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TReentrantRWLock.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::TSchemaRule Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Static Private Member Functions |; Private Attributes |; List of all members ; ROOT::TSchemaRule Class Reference. . Definition at line 19 of file TSchemaRule.h. Classes; class  TSources;  . Public Types; typedef void(* ReadFuncPtr_t) (char *, TVirtualObject *);  ; typedef void(* ReadRawFuncPtr_t) (char *, TBuffer &);  ; enum  RuleType_t { kReadRule = 0; , kReadRawRule = 1; , kNone = 99999; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TSchemaRule ();  Default Constructor. ;  ;  TSchemaRule (const TSchemaRule &rhs);  Copy Constructor. ;  ; virtual ~TSchemaRule ();  Destructor. ;  ; void AsString (TString &out, const char *options="""") const;  Add to the string 'out' the string representation of the rule. ;  ; void Clear (Option_t *="""") override;  Zero out this rule object. ;  ; Bool_t Conflicts (const TSchemaRule *rule) const;  Check if this rule conflicts with the given one. ;  ; const char * GetAttributes () const;  Get the attributes code of this rule. ;  ; const char * GetCode () const;  Get the source code of this rule. ;  ; Bool_t GetEmbed () const;  Return true if this rule should be saved in",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1TSchemaRule.html:86,Load,Loading,86,doc/master/classROOT_1_1TSchemaRule.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1TSchemaRule.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::TSchemaRule Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Static Private Member Functions |; Private Attributes |; List of all members ; ROOT::TSchemaRule Class Reference. . Definition at line 19 of file TSchemaRule.h. Classes; class  TSources;  . Public Types; typedef void(* ReadFuncPtr_t) (char *, TVirtualObject *);  ; typedef void(* ReadRawFuncPtr_t) (char *, TBuffer &);  ; enum  RuleType_t { kReadRule = 0; , kReadRawRule = 1; , kNone = 99999; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TSchemaRule ();  Default Constructor. ;  ;  TSchemaRule (const TSchemaRule &rhs);  Copy Constructor. ;  ; virtual ~TSchemaRule ();  Destructor. ;  ; void AsString (TString &out, const char *options="""") const;  Add to the string 'out' the string representation of the rule. ;  ; void Clear (Option_t *="""") override;  Zero out this rule object. ;  ; Bool_t Conflicts (const TSchemaRule *rule) const;  Check if this rule conflicts with the given one. ;  ; const char * GetAttributes () const;  Get the attributes code of this rule. ;  ; const char * GetCode () const;  Get the source code of this rule. ;  ; Bool_t GetEmbed () const;  Return true if this rule should be saved in ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1TSchemaRule.html:85,Load,Loading,85,doc/v632/classROOT_1_1TSchemaRule.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TSchemaRule.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::TSchemaRule::TSources Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; ROOT::TSchemaRule::TSources Class Reference. . Definition at line 23 of file TSchemaRule.h. Public Member Functions;  TSources (const char *name=nullptr, const char *title=nullptr, const char *dims=nullptr);  ; const char * GetDimensions ();  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1TSchemaRule_1_1TSources.html:96,Load,Loading,96,doc/master/classROOT_1_1TSchemaRule_1_1TSources.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1TSchemaRule_1_1TSources.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::TSeq< T > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::TSeq< T > Class Template ReferenceCore ROOT classes » Containers. ; template<class T>; class ROOT::TSeq< T >A pseudo container class which is a generator of indices. ; Template Parameters. TType of the numerical sequence. A pseudo container class which is a generator of indices. The model is the xrange built-in function of Python. Possible usages: Loop on a sequence of integers for (auto i : TSeqI(10)) {; cout << ""Element "" << i << endl;; }; ROOT::TSeqA pseudo container class which is a generator of indices.Definition TSeq.hxx:67; Loop on a sequence of integers in steps for (auto i : TSeqI(-5, 29, 6)) {; cout << ""Element "" << i << endl;; }; Loop backwards on a sequence of integers for (auto i : TSeqI(50, 30, -3)) {; cout << ""Element "" << i << endl;; }; Use an stl algorithm, for_each TSeqUL ulSeq(2,30,3);; std::for_each(std::begin(ulSeq),std::end(ulSeq),[](ULong_t i){cout << ""For each: "" << i <<endl;});; ULong_tunsigned long ULong_tDefinition RtypesCore.h:55; Random access: cout << ""Random access: 3rd element is "" << ulSeq[2] << endl;; A function to create sequences inferring the type: for (auto i : MakeSeq(1000000000000UL, 1000000000003UL)) {; cout << ""Element "" << i << endl;; }; ROOT::MakeSeqTSeq< T > MakeSeq(T end)Definition TSeq.hxx:209. Definition at line 67 of file TSeq.hxx. Classes; class  iterator;  . Public Types; using difference_type = typename std::make_signed< T >::type;  ; using value_type = T;  . Public Member Functions;  TSeq (T theBegin, T theEnd, T theStep=1);  ;  TSeq (T theEnd);  ; iterator begin () const;  ; bool empty () const;  ; iterator end () const;  ; T const & front () const;  ; T operator[] (T s) const;  ; std::size_t size () const;  ; T step () const;  . Pri",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1TSeq.html:93,Load,Loading,93,doc/master/classROOT_1_1TSeq.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1TSeq.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::TSeq< T > Class Template Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::TSeq< T > Class Template ReferenceCore ROOT classes » Containers. ; template<class T>; class ROOT::TSeq< T >A pseudo container class which is a generator of indices. ; Template Parameters. TType of the numerical sequence. A pseudo container class which is a generator of indices. The model is the xrange built-in function of Python. Possible usages: Loop on a sequence of integers for (auto i : TSeqI(10)) {; cout << ""Element "" << i << endl;; }; ROOT::TSeqA pseudo container class which is a generator of indices.Definition TSeq.hxx:67; Loop on a sequence of integers in steps for (auto i : TSeqI(-5, 29, 6)) {; cout << ""Element "" << i << endl;; }; Loop backwards on a sequence of integers for (auto i : TSeqI(50, 30, -3)) {; cout << ""Element "" << i << endl;; }; Use an stl algorithm, for_each TSeqUL ulSeq(2,30,3);; std::for_each(std::begin(ulSeq),std::end(ulSeq),[](ULong_t i){cout << ""For each: "" << i <<endl;});; ULong_tunsigned long ULong_tDefinition RtypesCore.h:55; Random access: cout << ""Random access: 3rd element is "" << ulSeq[2] << endl;; A function to create sequences inferring the type: for (auto i : MakeSeq(1000000000000UL, 1000000000003UL)) {; cout << ""Element "" << i << endl;; }; ROOT::MakeSeqTSeq< T > MakeSeq(T end)Definition TSeq.hxx:209. Definition at line 67 of file TSeq.hxx. Classes; class  iterator;  . Public Types; using difference_type = typename std::make_signed< T >::type;  ; using value_type = T;  . Public Member Functions;  TSeq (T theBegin, T theEnd, T theStep=1);  ;  TSeq (T theEnd);  ; iterator begin () const;  ; bool empty () const;  ; iterator end () const;  ; T const & front () const;  ; T operator[] (T s) const;  ; std::size_t size () const;  ; T step () const;  . Priv",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1TSeq.html:92,Load,Loading,92,doc/v632/classROOT_1_1TSeq.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TSeq.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::TSequentialExecutor Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::TSequentialExecutor Class Reference. . Definition at line 25 of file TSequentialExecutor.hxx. Public Member Functions;  TSequentialExecutor ()=default;  ;  TSequentialExecutor (const TSequentialExecutor &)=delete;  ; template<class F , class T > ; void Foreach (F func, const std::vector< T > &args);  Execute a function over the elements of an immutable vector, dividing the execution in nChunks. ;  ; template<class F , class INTEGER > ; void Foreach (F func, ROOT::TSeq< INTEGER > args);  Execute a function over a sequence of indexes, dividing the execution in nChunks. ;  ; template<class F , class T > ; void Foreach (F func, std::initializer_list< T > args);  Execute a function over the elements of an initializer_list, dividing the execution in nChunks. ;  ; template<class F , class T > ; void Foreach (F func, std::vector< T > &args);  Execute a function over the elements of a vector, dividing the execution in nChunks. ;  ; template<class F > ; void Foreach (F func, unsigned nTimes);  Execute a function without arguments several times, dividing the execution in nChunks. ;  ; unsigned GetPoolSize () const;  Return the number of workers in the sequential executor: a single one. ;  ; TSequentialExecutor & operator= (const TSequentialExecutor &)=delete;  ;  Public Member Functions inherited from ROOT::TExecutorCRTP< TSequentialExecutor >;  TExecutorCRTP ()=default;  ;  TExecutorCRTP (const TExecutorCRTP &)=delete;  ; auto Map (F func, const std::vector< T > &args) -> std::vector< InvokeResult_t< F, T > >;  Execute a function over the elements of an immutable vector. ;  ; auto Map (F func, ROOT::TSeq< INTEGER > args) -> std::vector< InvokeResult_t< F, INTEGER > >;  Execute a function over a sequence of indexes. ;  ; a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1TSequentialExecutor.html:94,Load,Loading,94,doc/master/classROOT_1_1TSequentialExecutor.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1TSequentialExecutor.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::TSequentialExecutor Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::TSequentialExecutor Class Reference. . Definition at line 25 of file TSequentialExecutor.hxx. Public Member Functions;  TSequentialExecutor ()=default;  ;  TSequentialExecutor (const TSequentialExecutor &)=delete;  ; template<class F , class T > ; void Foreach (F func, const std::vector< T > &args);  Execute a function over the elements of an immutable vector, dividing the execution in nChunks. ;  ; template<class F , class INTEGER > ; void Foreach (F func, ROOT::TSeq< INTEGER > args);  Execute a function over a sequence of indexes, dividing the execution in nChunks. ;  ; template<class F , class T > ; void Foreach (F func, std::initializer_list< T > args);  Execute a function over the elements of an initializer_list, dividing the execution in nChunks. ;  ; template<class F , class T > ; void Foreach (F func, std::vector< T > &args);  Execute a function over the elements of a vector, dividing the execution in nChunks. ;  ; template<class F > ; void Foreach (F func, unsigned nTimes);  Execute a function without arguments several times, dividing the execution in nChunks. ;  ; unsigned GetPoolSize () const;  Return the number of workers in the sequential executor: a single one. ;  ; TSequentialExecutor & operator= (const TSequentialExecutor &)=delete;  ;  Public Member Functions inherited from ROOT::TExecutorCRTP< TSequentialExecutor >;  TExecutorCRTP ()=default;  ;  TExecutorCRTP (const TExecutorCRTP &)=delete;  ; auto Map (F func, const std::vector< T > &args) -> std::vector< InvokeResult_t< F, T > >;  Execute a function over the elements of an immutable vector. ;  ; auto Map (F func, ROOT::TSeq< INTEGER > args) -> std::vector< InvokeResult_t< F, INTEGER > >;  Execute a function over a sequence of indexes. ;  ; au",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1TSequentialExecutor.html:93,Load,Loading,93,doc/v632/classROOT_1_1TSequentialExecutor.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TSequentialExecutor.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::TSpinMutex Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::TSpinMutex Class ReferenceParallelized classes. ; A spin mutex class which respects the STL interface for mutexes. ; This class allows to acquire spin locks also in combination with templates in the STL such as std::unique_lock or std::condition_variable_any. For example:; ROOT::TSpinMutex m;; std::condition_variable cv;; bool ready = false;; ; void worker_thread(); {; // Wait until main() sends data; std::unique_lock<ROOT::TSpinMutex> lk(m);; cv.wait(lk, []{return ready;});; [...]; }; worker_threadstatic void * worker_thread(void *thread_func_param)Definition civetweb.c:19085; ROOT::TSpinMutexA spin mutex class which respects the STL interface for mutexes.Definition TSpinMutex.hxx:42; mTMarker mDefinition textangle.C:8; {.cpp} ; Definition at line 42 of file TSpinMutex.hxx. Public Member Functions;  TSpinMutex ()=default;  ;  TSpinMutex (const TSpinMutex &)=delete;  ;  ~TSpinMutex ()=default;  ; void lock ();  ; TSpinMutex & operator= (const TSpinMutex &)=delete;  ; bool try_lock ();  ; void unlock ();  . Private Attributes; std::atomic_flag fAFlag = ATOMIC_FLAG_INIT;  . #include <ROOT/TSpinMutex.hxx>; Constructor & Destructor Documentation. ◆ TSpinMutex() [1/2]. ROOT::TSpinMutex::TSpinMutex ; (; ). default . ◆ TSpinMutex() [2/2]. ROOT::TSpinMutex::TSpinMutex ; (; const TSpinMutex & ; ). delete . ◆ ~TSpinMutex(). ROOT::TSpinMutex::~TSpinMutex ; (; ). default . Member Function Documentation. ◆ lock(). void ROOT::TSpinMutex::lock ; (; ). inline . Definition at line 53 of file TSpinMutex.hxx. ◆ operator=(). TSpinMutex & ROOT::TSpinMutex::operator= ; (; const TSpinMutex & ; ). delete . ◆ try_lock(). bool ROOT::TSpinMutex::try_lock ; (; ). inline . Definition at line 55 of file TSpinMutex.hxx. ◆ unlock(). void ROOT::TSpinMutex::unlock ; (; ). inline . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1TSpinMutex.html:85,Load,Loading,85,doc/master/classROOT_1_1TSpinMutex.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1TSpinMutex.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::TSpinMutex Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::TSpinMutex Class ReferenceParallelized classes. ; A spin mutex class which respects the STL interface for mutexes. ; This class allows to acquire spin locks also in combination with templates in the STL such as std::unique_lock or std::condition_variable_any. For example:; ROOT::TSpinMutex m;; std::condition_variable cv;; bool ready = false;; ; void worker_thread(); {; // Wait until main() sends data; std::unique_lock<ROOT::TSpinMutex> lk(m);; cv.wait(lk, []{return ready;});; [...]; }; worker_threadstatic void * worker_thread(void *thread_func_param)Definition civetweb.c:19086; ROOT::TSpinMutexA spin mutex class which respects the STL interface for mutexes.Definition TSpinMutex.hxx:42; mTMarker mDefinition textangle.C:8; {.cpp} ; Definition at line 42 of file TSpinMutex.hxx. Public Member Functions;  TSpinMutex ()=default;  ;  TSpinMutex (const TSpinMutex &)=delete;  ;  ~TSpinMutex ()=default;  ; void lock ();  ; TSpinMutex & operator= (const TSpinMutex &)=delete;  ; bool try_lock ();  ; void unlock ();  . Private Attributes; std::atomic_flag fAFlag = ATOMIC_FLAG_INIT;  . #include <ROOT/TSpinMutex.hxx>; Constructor & Destructor Documentation. ◆ TSpinMutex() [1/2]. ROOT::TSpinMutex::TSpinMutex ; (; ). default . ◆ TSpinMutex() [2/2]. ROOT::TSpinMutex::TSpinMutex ; (; const TSpinMutex & ; ). delete . ◆ ~TSpinMutex(). ROOT::TSpinMutex::~TSpinMutex ; (; ). default . Member Function Documentation. ◆ lock(). void ROOT::TSpinMutex::lock ; (; ). inline . Definition at line 53 of file TSpinMutex.hxx. ◆ operator=(). TSpinMutex & ROOT::TSpinMutex::operator= ; (; const TSpinMutex & ; ). delete . ◆ try_lock(). bool ROOT::TSpinMutex::try_lock ; (; ). inline . Definition at line 55 of file TSpinMutex.hxx. ◆ unlock(). void ROOT::TSpinMutex::unlock ; (; ). inline . D",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1TSpinMutex.html:84,Load,Loading,84,doc/v632/classROOT_1_1TSpinMutex.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TSpinMutex.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::TThreadExecutor Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::TThreadExecutor Class ReferenceParallelized classes. ; This class provides a simple interface to execute the same task multiple times in parallel threads, possibly with different arguments every time. . ROOT::TThreadExecutor::Map; This class inherits its interfaces from ROOT::TExecutorCRTP; , adapting them for multithreaded parallelism and extends them supporting:; Parallel Foreach operations.; Custom task granularity and partial reduction, by specifying reduction function and the number of chunks as extra parameters for the Map call. This is specially useful to reduce the size of intermediate results when dealing with a sizeable number of elements in the input data. The two possible usages of the Map method are:. Map(F func, unsigned nTimes): func is executed nTimes with no arguments; Map(F func, T& args): func is executed on each element of the collection of arguments args. For either signature, func is executed as many times as needed by a pool of nThreads threads, where nThreads typically defaults to the number of cores.; A collection containing the result of each execution is returned.; Note: the user is responsible for the deletion of any object that might be created upon execution of func, returned objects included: ROOT::TThreadExecutor never deletes what it returns, it simply forgets it.; Parameters. funca callable object, such as a lambda expression, an std::function, a functor object or a function that takes zero arguments (for the first signature) or one (for the second signature). ; argsa standard vector, a ROOT::TSeq of integer type or an initializer list for the second signature. An integer only for the first. . Note: in cases where the function to be executed takes more than zero/one argument but all",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1TThreadExecutor.html:90,Load,Loading,90,doc/master/classROOT_1_1TThreadExecutor.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1TThreadExecutor.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::TThreadExecutor Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::TThreadExecutor Class ReferenceParallelized classes. ; This class provides a simple interface to execute the same task multiple times in parallel threads, possibly with different arguments every time. . ROOT::TThreadExecutor::Map; This class inherits its interfaces from ROOT::TExecutorCRTP; , adapting them for multithreaded parallelism and extends them supporting:; Parallel Foreach operations.; Custom task granularity and partial reduction, by specifying reduction function and the number of chunks as extra parameters for the Map call. This is specially useful to reduce the size of intermediate results when dealing with a sizeable number of elements in the input data. The two possible usages of the Map method are:. Map(F func, unsigned nTimes): func is executed nTimes with no arguments; Map(F func, T& args): func is executed on each element of the collection of arguments args. For either signature, func is executed as many times as needed by a pool of nThreads threads, where nThreads typically defaults to the number of cores.; A collection containing the result of each execution is returned.; Note: the user is responsible for the deletion of any object that might be created upon execution of func, returned objects included: ROOT::TThreadExecutor never deletes what it returns, it simply forgets it.; Parameters. funca callable object, such as a lambda expression, an std::function, a functor object or a function that takes zero arguments (for the first signature) or one (for the second signature). ; argsa standard vector, a ROOT::TSeq of integer type or an initializer list for the second signature. An integer only for the first. . Note: in cases where the function to be executed takes more than zero/one argument but all ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1TThreadExecutor.html:89,Load,Loading,89,doc/v632/classROOT_1_1TThreadExecutor.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TThreadExecutor.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::TThreadedObject< T > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Attributes |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::TThreadedObject< T > Class Template ReferenceParallelized classes. ; template<class T>; class ROOT::TThreadedObject< T >A wrapper to make object instances thread private, lazily. ; Template Parameters. TClass of the object to be made thread private (e.g. TH1F). A wrapper which makes objects thread private. The methods of the underlying object can be invoked via the arrow operator. The object is created in a specific thread lazily, i.e. upon invocation of one of its methods. The correct object pointer from within a particular thread can be accessed with the overloaded arrow operator or with the Get method. In case an elaborate thread management is in place, e.g. in presence of stream of operations or ""processing slots"", it is also possible to manually select the correct object pointer explicitly. ; Definition at line 151 of file TThreadedObject.hxx. Public Member Functions; template<class ... ARGS> ;  TThreadedObject (ARGS &&... args);  Construct the TThreadedObject and the ""model"" of the thread private objects. ;  ;  TThreadedObject (const TThreadedObject &)=delete;  ; template<class... ARGS> ;  TThreadedObject (TNumSlots initSlots, ARGS &&... args);  Construct the TThreadedObject with initSlots empty slots and the ""model"" of the thread private objects. ;  ; std::shared_ptr< T > Get ();  Access the pointer corresponding to the current slot. ;  ; std::shared_ptr< T > GetAtSlot (unsigned i);  Access a particular processing slot. ;  ; T * GetAtSlotRaw (unsigned i) const;  Access a particular slot which corresponds to a single thread. ;  ; std::shared_ptr< T > GetAtSlotUnchecked (unsigned i) const;  Access a particular slot which corresponds to a single thread. ;  ; unsigned Get",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1TThreadedObject.html:104,Load,Loading,104,doc/master/classROOT_1_1TThreadedObject.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1TThreadedObject.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::TThreadedObject< T > Class Template Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Attributes |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::TThreadedObject< T > Class Template ReferenceParallelized classes. ; template<class T>; class ROOT::TThreadedObject< T >A wrapper to make object instances thread private, lazily. ; Template Parameters. TClass of the object to be made thread private (e.g. TH1F). A wrapper which makes objects thread private. The methods of the underlying object can be invoked via the arrow operator. The object is created in a specific thread lazily, i.e. upon invocation of one of its methods. The correct object pointer from within a particular thread can be accessed with the overloaded arrow operator or with the Get method. In case an elaborate thread management is in place, e.g. in presence of stream of operations or ""processing slots"", it is also possible to manually select the correct object pointer explicitly. ; Definition at line 151 of file TThreadedObject.hxx. Public Member Functions; template<class ... ARGS> ;  TThreadedObject (ARGS &&... args);  Construct the TThreadedObject and the ""model"" of the thread private objects. ;  ;  TThreadedObject (const TThreadedObject &)=delete;  ; template<class... ARGS> ;  TThreadedObject (TNumSlots initSlots, ARGS &&... args);  Construct the TThreadedObject with initSlots empty slots and the ""model"" of the thread private objects. ;  ; std::shared_ptr< T > Get ();  Access the pointer corresponding to the current slot. ;  ; std::shared_ptr< T > GetAtSlot (unsigned i);  Access a particular processing slot. ;  ; T * GetAtSlotRaw (unsigned i) const;  Access a particular slot which corresponds to a single thread. ;  ; std::shared_ptr< T > GetAtSlotUnchecked (unsigned i) const;  Access a particular slot which corresponds to a single thread. ;  ; unsigned GetN",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1TThreadedObject.html:103,Load,Loading,103,doc/v632/classROOT_1_1TThreadedObject.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TThreadedObject.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::TThreadedObjectUtils Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Typedefs |; Functions ; ROOT::TThreadedObjectUtils Namespace Reference. Typedefs; template<class T > ; using MergeFunctionType = std::function< void(std::shared_ptr< T >, std::vector< std::shared_ptr< T > > &)>;  . Functions; template<class T > ; void MergeTObjects (std::shared_ptr< T > target, std::vector< std::shared_ptr< T > > &objs);  Merge TObjects. ;  . Typedef Documentation. ◆ MergeFunctionType. template<class T > . using ROOT::TThreadedObjectUtils::MergeFunctionType = typedef std::function<void(std::shared_ptr<T>, std::vector<std::shared_ptr<T> >&)>. Definition at line 119 of file TThreadedObject.hxx. Function Documentation. ◆ MergeTObjects(). template<class T > . void ROOT::TThreadedObjectUtils::MergeTObjects ; (; std::shared_ptr< T > ; target, . std::vector< std::shared_ptr< T > > & ; objs . ). Merge TObjects. ; Definition at line 123 of file TThreadedObject.hxx. ROOTTThreadedObjectUtils. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:28 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1TThreadedObjectUtils.html:99,Load,Loading,99,doc/master/namespaceROOT_1_1TThreadedObjectUtils.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1TThreadedObjectUtils.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::TThreadedObjectUtils Namespace Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. Typedefs |; Functions ; ROOT::TThreadedObjectUtils Namespace Reference. Typedefs; template<class T > ; using MergeFunctionType = std::function< void(std::shared_ptr< T >, std::vector< std::shared_ptr< T > > &)>;  . Functions; template<class T > ; void MergeTObjects (std::shared_ptr< T > target, std::vector< std::shared_ptr< T > > &objs);  Merge TObjects. ;  . Typedef Documentation. ◆ MergeFunctionType. template<class T > . using ROOT::TThreadedObjectUtils::MergeFunctionType = typedef std::function<void(std::shared_ptr<T>, std::vector<std::shared_ptr<T> >&)>. Definition at line 119 of file TThreadedObject.hxx. Function Documentation. ◆ MergeTObjects(). template<class T > . void ROOT::TThreadedObjectUtils::MergeTObjects ; (; std::shared_ptr< T > ; target, . std::vector< std::shared_ptr< T > > & ; objs . ). Merge TObjects. ; Definition at line 123 of file TThreadedObject.hxx. ROOTTThreadedObjectUtils. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:14:05 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/namespaceROOT_1_1TThreadedObjectUtils.html:98,Load,Loading,98,doc/v632/namespaceROOT_1_1TThreadedObjectUtils.html,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1TThreadedObjectUtils.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::TTreeProcessorMP Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Types |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::TTreeProcessorMP Class ReferenceParallelized classes. ; This class provides an interface to process a TTree dataset in parallel with multi-process technology. . ROOT::TTreeProcessorMP::Process; The possible usages of the Process method are the following:. Process(<dataset>, F func, const std::string& treeName, ULong64_t nToProcess): func is executed nToProcess times with argument a TTreeReader&, initialized for the TTree with name treeName, from the dataset <dataset>. The dataset can be expressed as: const std::string& fileName -> single file name; const std::vector<std::string>& fileNames -> vector of file names; TFileCollection& files -> collection of TFileInfo objects; TChain& files -> TChain with the file paths; TTree& tree -> Reference to an existing TTree object; namechar name[80]Definition TGX11.cxx:110; TChainA chain is a collection of files containing TTree objects.Definition TChain.h:33; TFileCollectionClass that contains a list of TFileInfo's and accumulated meta data information about its entries.Definition TFileCollection.h:39; TFileInfoClass describing a generic file including meta information.Definition TFileInfo.h:39; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; For legacy, the following signature is also supported:; Process(<dataset>, TSelector& selector, const std::string& treeName, ULong64_t nToProcess): where selector is a TSelector derived class describing the analysis and the other arguments have the same meaning as above. For either set of signatures, the processing function is executed as many times as needed by a pool of fNWorkers workers; the number of workers can be passed to the constructor or set via SetNWorkers. It defaults to the number of cores.;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1TTreeProcessorMP.html:91,Load,Loading,91,doc/master/classROOT_1_1TTreeProcessorMP.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1TTreeProcessorMP.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::TTreeProcessorMP Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Types |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::TTreeProcessorMP Class ReferenceParallelized classes. ; This class provides an interface to process a TTree dataset in parallel with multi-process technology. . ROOT::TTreeProcessorMP::Process; The possible usages of the Process method are the following:. Process(<dataset>, F func, const std::string& treeName, ULong64_t nToProcess): func is executed nToProcess times with argument a TTreeReader&, initialized for the TTree with name treeName, from the dataset <dataset>. The dataset can be expressed as: const std::string& fileName -> single file name; const std::vector<std::string>& fileNames -> vector of file names; TFileCollection& files -> collection of TFileInfo objects; TChain& files -> TChain with the file paths; TTree& tree -> Reference to an existing TTree object; namechar name[80]Definition TGX11.cxx:110; TChainA chain is a collection of files containing TTree objects.Definition TChain.h:33; TFileCollectionClass that contains a list of TFileInfo's and accumulated meta data information about its entries.Definition TFileCollection.h:39; TFileInfoClass describing a generic file including meta information.Definition TFileInfo.h:39; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; For legacy, the following signature is also supported:; Process(<dataset>, TSelector& selector, const std::string& treeName, ULong64_t nToProcess): where selector is a TSelector derived class describing the analysis and the other arguments have the same meaning as above. For either set of signatures, the processing function is executed as many times as needed by a pool of fNWorkers workers; the number of workers can be passed to the constructor or set via SetNWorkers. It defaults to the number of cores.; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1TTreeProcessorMP.html:90,Load,Loading,90,doc/v632/classROOT_1_1TTreeProcessorMP.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TTreeProcessorMP.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::TTreeProcessorMT Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; ROOT::TTreeProcessorMT Class ReferenceParallelized classes. ; A class to process the entries of a TTree in parallel. ; By means of its Process method, ROOT::TTreeProcessorMT provides a way to process the entries of a TTree in parallel. When invoking TTreeProcessor::Process, the user passes a function whose only parameter is a TTreeReader. The function iterates on a subrange of entries by using that TTreeReader.; The implementation of ROOT::TTreeProcessorMT parallelizes the processing of the subranges, each corresponding to a cluster in the TTree. This is possible thanks to the use of a ROOT::TThreadedObject, so that each thread works with its own TFile and TTree objects. ; Definition at line 80 of file TTreeProcessorMT.hxx. Public Member Functions;  TTreeProcessorMT (const std::vector< std::string_view > &filenames, std::string_view treename="""", UInt_t nThreads=0u, const std::pair< Long64_t, Long64_t > &globalRange={0, std::numeric_limits< Long64_t >::max()});  ;  TTreeProcessorMT (std::initializer_list< std::string_view > filenames, std::string_view treename="""", UInt_t nThreads=0u, const std::pair< Long64_t, Long64_t > &globalRange={0, std::numeric_limits< Long64_t >::max()});  ;  TTreeProcessorMT (std::string_view filename, std::string_view treename="""", UInt_t nThreads=0u, const std::pair< Long64_t, Long64_t > &globalRange={0, std::numeric_limits< Long64_t >::max()});  ;  TTreeProcessorMT (TTree &tree, const TEntryList &entries, UInt_t nThreads=0u, const std::vector< std::string > &suppressErrorsForMissingBranches={});  Constructor based on a TTree and a TEntryList. ;  ;  TTreeProcessorMT (TTree &tree, UInt_t nThreads=0u, const std::pair< Long64_t, Long64_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1TTreeProcessorMT.html:91,Load,Loading,91,doc/master/classROOT_1_1TTreeProcessorMT.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1TTreeProcessorMT.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::TTreeProcessorMT Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; ROOT::TTreeProcessorMT Class ReferenceParallelized classes. ; A class to process the entries of a TTree in parallel. ; By means of its Process method, ROOT::TTreeProcessorMT provides a way to process the entries of a TTree in parallel. When invoking TTreeProcessor::Process, the user passes a function whose only parameter is a TTreeReader. The function iterates on a subrange of entries by using that TTreeReader.; The implementation of ROOT::TTreeProcessorMT parallelizes the processing of the subranges, each corresponding to a cluster in the TTree. This is possible thanks to the use of a ROOT::TThreadedObject, so that each thread works with its own TFile and TTree objects. ; Definition at line 79 of file TTreeProcessorMT.hxx. Public Member Functions;  TTreeProcessorMT (const std::vector< std::string_view > &filenames, std::string_view treename="""", UInt_t nThreads=0u, const std::pair< Long64_t, Long64_t > &globalRange={0, std::numeric_limits< Long64_t >::max()});  ;  TTreeProcessorMT (std::initializer_list< std::string_view > filenames, std::string_view treename="""", UInt_t nThreads=0u, const std::pair< Long64_t, Long64_t > &globalRange={0, std::numeric_limits< Long64_t >::max()});  ;  TTreeProcessorMT (std::string_view filename, std::string_view treename="""", UInt_t nThreads=0u, const std::pair< Long64_t, Long64_t > &globalRange={0, std::numeric_limits< Long64_t >::max()});  ;  TTreeProcessorMT (TTree &tree, const TEntryList &entries, UInt_t nThreads=0u);  Constructor based on a TTree and a TEntryList. ;  ;  TTreeProcessorMT (TTree &tree, UInt_t nThreads=0u, const std::pair< Long64_t, Long64_t > &globalRange={0, std::numeric_limits< Long64_t >::max()});  ; void Pr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1TTreeProcessorMT.html:90,Load,Loading,90,doc/v632/classROOT_1_1TTreeProcessorMT.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TTreeProcessorMT.html,1,['Load'],['Loading']
Performance,. ROOT: ROOT::TVirtualRWMutex Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; List of all members ; ROOT::TVirtualRWMutex Class Referenceabstract. . Definition at line 39 of file TVirtualRWMutex.h. Classes; class  State;  Earlier lock state as returned by GetState() that can be passed to Restore() More...;  ; struct  StateAndRecurseCount;  ; class  StateDelta;  State as returned by GetStateDelta() that can be passed to Restore() More...;  . Public Member Functions; virtual void Apply (std::unique_ptr< StateDelta > &&delta)=0;  ; Int_t CleanUp () override;  ; TVirtualRWMutex * Factory (Bool_t=kFALSE) override=0;  ; virtual std::unique_ptr< State > GetStateBefore ()=0;  ; TClass * IsA () const override;  ; Int_t Lock () override;  ; virtual Hint_t * ReadLock ()=0;  ; virtual void ReadUnLock (Hint_t *)=0;  ; virtual std::unique_ptr< StateDelta > Rewind (const State &earlierState)=0;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Int_t TryLock () override;  ; Int_t UnLock () override;  ; virtual Hint_t * WriteLock ()=0;  ; virtual void WriteUnLock (Hint_t *)=0;  ;  Public Member Functions inherited from TVirtualMutex;  TVirtualMutex (Bool_t=kFALSE);  ; virtual ~TVirtualMutex ();  ; Int_t Acquire ();  ; Int_t Release ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TVirtualMutex; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . #include <TVirtualRWMutex.h>. Inheritance diagram for ROOT::TVirtualRWMutex:. This brows,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1TVirtualRWMutex.html:90,Load,Loading,90,doc/master/classROOT_1_1TVirtualRWMutex.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1TVirtualRWMutex.html,1,['Load'],['Loading']
Performance,. ROOT: ROOT::TVirtualRWMutex Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; List of all members ; ROOT::TVirtualRWMutex Class Referenceabstract. . Definition at line 39 of file TVirtualRWMutex.h. Classes; class  State;  Earlier lock state as returned by GetState() that can be passed to Restore() More...;  ; struct  StateAndRecurseCount;  ; class  StateDelta;  State as returned by GetStateDelta() that can be passed to Restore() More...;  . Public Member Functions; virtual void Apply (std::unique_ptr< StateDelta > &&delta)=0;  ; Int_t CleanUp () override;  ; TVirtualRWMutex * Factory (Bool_t=kFALSE) override=0;  ; virtual std::unique_ptr< State > GetStateBefore ()=0;  ; TClass * IsA () const override;  ; Int_t Lock () override;  ; virtual Hint_t * ReadLock ()=0;  ; virtual void ReadUnLock (Hint_t *)=0;  ; virtual std::unique_ptr< StateDelta > Rewind (const State &earlierState)=0;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Int_t TryLock () override;  ; Int_t UnLock () override;  ; virtual Hint_t * WriteLock ()=0;  ; virtual void WriteUnLock (Hint_t *)=0;  ;  Public Member Functions inherited from TVirtualMutex;  TVirtualMutex (Bool_t=kFALSE);  ; virtual ~TVirtualMutex ();  ; Int_t Acquire ();  ; Int_t Release ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TVirtualMutex; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . #include <TVirtualRWMutex.h>. Inheritance diagram for ROOT::TVirtualRWMutex:. This browse,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1TVirtualRWMutex.html:89,Load,Loading,89,doc/v632/classROOT_1_1TVirtualRWMutex.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TVirtualRWMutex.html,1,['Load'],['Loading']
Performance,. ROOT: ROOT::TWriteLockGuard Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::TWriteLockGuard Class Reference. . Definition at line 131 of file TVirtualRWMutex.h. Public Member Functions;  TWriteLockGuard (TVirtualRWMutex *mutex);  ;  ~TWriteLockGuard ();  ; TClass * IsA () const;  ; void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Private Member Functions;  TWriteLockGuard (const TWriteLockGuard &)=delete;  ; TWriteLockGuard & operator= (const TWriteLockGuard &)=delete;  . Private Attributes; TVirtualRWMutex::Hint_t * fHint;  ; TVirtualRWMutex *const fMutex;  . #include <TVirtualRWMutex.h>; Constructor & Destructor Documentation. ◆ TWriteLockGuard() [1/2]. ROOT::TWriteLockGuard::TWriteLockGuard ; (; const TWriteLockGuard & ; ). privatedelete . ◆ TWriteLockGuard() [2/2]. ROOT::TWriteLockGuard::TWriteLockGuard ; (; TVirtualRWMutex * ; mutex). inline . Definition at line 141 of file TVirtualRWMutex.h. ◆ ~TWriteLockGuard(). ROOT::TWriteLockGuard::~TWriteLockGuard ; (; ). inline . Definition at line 145 of file TVirtualRWMutex.h. Member Function Documentation. ◆ Class(). static TClass * ROOT::TWriteLockGuard::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * ROOT::TWriteLockGuard::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t ROOT::TWriteLockGuard::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 147 of file TVirtualRWMutex.h. ◆ DeclFileName(). static const char * ROOT::TWriteLockGuard::,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1TWriteLockGuard.html:90,Load,Loading,90,doc/master/classROOT_1_1TWriteLockGuard.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1TWriteLockGuard.html,1,['Load'],['Loading']
Performance,. ROOT: ROOT::TWriteLockGuard Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::TWriteLockGuard Class Reference. . Definition at line 131 of file TVirtualRWMutex.h. Public Member Functions;  TWriteLockGuard (TVirtualRWMutex *mutex);  ;  ~TWriteLockGuard ();  ; TClass * IsA () const;  ; void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Private Member Functions;  TWriteLockGuard (const TWriteLockGuard &)=delete;  ; TWriteLockGuard & operator= (const TWriteLockGuard &)=delete;  . Private Attributes; TVirtualRWMutex::Hint_t * fHint;  ; TVirtualRWMutex *const fMutex;  . #include <TVirtualRWMutex.h>; Constructor & Destructor Documentation. ◆ TWriteLockGuard() [1/2]. ROOT::TWriteLockGuard::TWriteLockGuard ; (; const TWriteLockGuard & ; ). privatedelete . ◆ TWriteLockGuard() [2/2]. ROOT::TWriteLockGuard::TWriteLockGuard ; (; TVirtualRWMutex * ; mutex). inline . Definition at line 141 of file TVirtualRWMutex.h. ◆ ~TWriteLockGuard(). ROOT::TWriteLockGuard::~TWriteLockGuard ; (; ). inline . Definition at line 145 of file TVirtualRWMutex.h. Member Function Documentation. ◆ Class(). static TClass * ROOT::TWriteLockGuard::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * ROOT::TWriteLockGuard::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t ROOT::TWriteLockGuard::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 147 of file TVirtualRWMutex.h. ◆ DeclFileName(). static const char * ROOT::TWriteLockGuard::D,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1TWriteLockGuard.html:89,Load,Loading,89,doc/v632/classROOT_1_1TWriteLockGuard.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TWriteLockGuard.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::TestSupport Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Functions |; Variables ; ROOT::TestSupport Namespace Reference. Classes; class  CheckDiagsRAII;  Install a ROOT diagnostic handler to analyse diagnostics. More...;  ; class  FilterDiagsRAII;  Allows a user function to catch and filter/analyse ROOT and cling diagnostics, e.g. More...;  ; struct  ForbidDiagnostics;  Error handler for gtests that generates failures for every received diagnostic > kInfo when this file is linked to. More...;  . Functions; std::ostream & operator<< (std::ostream &stream, CheckDiagsRAII::Diag_t const &diag);  . Variables; static struct ROOT::TestSupport::ForbidDiagnostics noDiagCheckerInstance;  . Function Documentation. ◆ operator<<(). std::ostream & ROOT::TestSupport::operator<< ; (; std::ostream & ; stream, . CheckDiagsRAII::Diag_t const & ; diag . ). Definition at line 138 of file TestSupport.cxx. Variable Documentation. ◆ noDiagCheckerInstance. struct ROOT::TestSupport::ForbidDiagnostics ROOT::TestSupport::noDiagCheckerInstance. static . ROOTTestSupport. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:28 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1TestSupport.html:90,Load,Loading,90,doc/master/namespaceROOT_1_1TestSupport.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1TestSupport.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::TestSupport Namespace Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Functions |; Variables ; ROOT::TestSupport Namespace Reference. Classes; class  CheckDiagsRAII;  Install a ROOT diagnostic handler to analyse diagnostics. More...;  ; class  FilterDiagsRAII;  Allows a user function to catch and filter/analyse ROOT and cling diagnostics, e.g. More...;  ; struct  ForbidDiagnostics;  Error handler for gtests that generates failures for every received diagnostic > kInfo when this file is linked to. More...;  . Functions; std::ostream & operator<< (std::ostream &stream, CheckDiagsRAII::Diag_t const &diag);  . Variables; static struct ROOT::TestSupport::ForbidDiagnostics noDiagCheckerInstance;  . Function Documentation. ◆ operator<<(). std::ostream & ROOT::TestSupport::operator<< ; (; std::ostream & ; stream, . CheckDiagsRAII::Diag_t const & ; diag . ). Definition at line 138 of file TestSupport.cxx. Variable Documentation. ◆ noDiagCheckerInstance. struct ROOT::TestSupport::ForbidDiagnostics ROOT::TestSupport::noDiagCheckerInstance. static . ROOTTestSupport. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:14:05 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/namespaceROOT_1_1TestSupport.html:89,Load,Loading,89,doc/v632/namespaceROOT_1_1TestSupport.html,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1TestSupport.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::TreeUtils Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Functions ; ROOT::TreeUtils Namespace Reference. Classes; struct  InvalidTupleType;  ; struct  InvalidTupleType< TNtuple >;  ; struct  InvalidTupleType< TNtupleD >;  ; struct  RFriendInfo;  Information about friend trees of a certain TTree or TChain object. More...;  . Functions; template<class DataType , class Tuple > ; Long64_t FillNtupleFromStream (std::istream &inputStream, Tuple &tuple, char delimiter, bool strictMode);  Function to fill tuples (TNtuple/TNtupleD) from a simple ASCII data file. ;  ; template Long64_t FillNtupleFromStream< Double_t, TNtupleD > (std::istream &, TNtupleD &, char, bool);  ; template Long64_t FillNtupleFromStream< Float_t, TNtuple > (std::istream &, TNtuple &, char, bool);  ; bool NextCharacterIsEOL (std::istream &input);  Either '\r' | '\n' or eof of some problem. ;  ; void SkipComment (std::istream &input);  Skips everything from '#' to (including) '\r' or '\n'. ;  ; void SkipEmptyLines (std::istream &input);  Skips empty lines (newline-characters), ws-lines (consisting only of whitespace characters + newline-characters). ;  ; void SkipWSCharacters (std::istream &input);  Skip whitespace characters, but not newline-characters we support ('\r' or '\n'). ;  . Function Documentation. ◆ FillNtupleFromStream(). template<class DataType , class Tuple > . Long64_t ROOT::TreeUtils::FillNtupleFromStream ; (; std::istream & ; inputStream, . Tuple & ; tuple, . char ; delimiter, . bool ; strictMode . ). Function to fill tuples (TNtuple/TNtupleD) from a simple ASCII data file. ; With auto and decltype - we can get rid of DataType parameter :) (or with a simple typedef inside ntuple class). An input file consists of non-empty lines (separated by newline-characters), possibly empty lines, and comments (treated as empty lines). Each non-empty line should contain N numbers - entry for a tuple. Non-strict mode lets y",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1TreeUtils.html:88,Load,Loading,88,doc/master/namespaceROOT_1_1TreeUtils.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1TreeUtils.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::TreeUtils Namespace Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Functions ; ROOT::TreeUtils Namespace Reference. Classes; struct  InvalidTupleType;  ; struct  InvalidTupleType< TNtuple >;  ; struct  InvalidTupleType< TNtupleD >;  ; struct  RFriendInfo;  Information about friend trees of a certain TTree or TChain object. More...;  . Functions; template<class DataType , class Tuple > ; Long64_t FillNtupleFromStream (std::istream &inputStream, Tuple &tuple, char delimiter, bool strictMode);  Function to fill tuples (TNtuple/TNtupleD) from a simple ASCII data file. ;  ; template Long64_t FillNtupleFromStream< Double_t, TNtupleD > (std::istream &, TNtupleD &, char, bool);  ; template Long64_t FillNtupleFromStream< Float_t, TNtuple > (std::istream &, TNtuple &, char, bool);  ; bool NextCharacterIsEOL (std::istream &input);  Either '\r' | '\n' or eof of some problem. ;  ; void SkipComment (std::istream &input);  Skips everything from '#' to (including) '\r' or '\n'. ;  ; void SkipEmptyLines (std::istream &input);  Skips empty lines (newline-characters), ws-lines (consisting only of whitespace characters + newline-characters). ;  ; void SkipWSCharacters (std::istream &input);  Skip whitespace characters, but not newline-characters we support ('\r' or '\n'). ;  . Function Documentation. ◆ FillNtupleFromStream(). template<class DataType , class Tuple > . Long64_t ROOT::TreeUtils::FillNtupleFromStream ; (; std::istream & ; inputStream, . Tuple & ; tuple, . char ; delimiter, . bool ; strictMode . ). Function to fill tuples (TNtuple/TNtupleD) from a simple ASCII data file. ; With auto and decltype - we can get rid of DataType parameter :) (or with a simple typedef inside ntuple class). An input file consists of non-empty lines (separated by newline-characters), possibly empty lines, and comments (treated as empty lines). Each non-empty line should contain N numbers - entry for a tuple. Non-strict mode lets yo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/namespaceROOT_1_1TreeUtils.html:87,Load,Loading,87,doc/v632/namespaceROOT_1_1TreeUtils.html,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1TreeUtils.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::TypeTraits Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes ; ROOT::TypeTraits Namespace Reference. ROOT type_traits extensions. ; More... Classes; struct  HasBeginAndEnd;  ; struct  IsSignedNumeral;  Checks for signed integers types that are not characters. More...;  ; class  IsSmartOrDumbPtr;  ; class  IsSmartOrDumbPtr< std::shared_ptr< P > >;  ; class  IsSmartOrDumbPtr< std::unique_ptr< P > >;  ; struct  IsUnsignedNumeral;  Checks for unsigned integer types that are not characters. More...;  ; struct  RemoveFirst;  ; struct  RemoveFirstParameter;  Remove first of possibly many template parameters. More...;  ; struct  RemoveFirstParameter< U< T, Rest... > >;  ; struct  TakeFirstParameter;  Return first of possibly many template parameters. More...;  ; struct  TakeFirstParameter< Template< T, Rest... > >;  ; struct  TakeFirstType;  ; struct  TypeList;  Lightweight storage for a collection of types. More...;  . Detailed Description; ROOT type_traits extensions. . ROOTTypeTraits. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:28 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1TypeTraits.html:89,Load,Loading,89,doc/master/namespaceROOT_1_1TypeTraits.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1TypeTraits.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::TypeTraits Namespace Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes ; ROOT::TypeTraits Namespace Reference. ROOT type_traits extensions. ; More... Classes; struct  HasBeginAndEnd;  ; struct  IsSignedNumeral;  Checks for signed integers types that are not characters. More...;  ; class  IsSmartOrDumbPtr;  ; class  IsSmartOrDumbPtr< std::shared_ptr< P > >;  ; class  IsSmartOrDumbPtr< std::unique_ptr< P > >;  ; struct  IsUnsignedNumeral;  Checks for unsigned integer types that are not characters. More...;  ; struct  RemoveFirst;  ; struct  RemoveFirstParameter;  Remove first of possibly many template parameters. More...;  ; struct  RemoveFirstParameter< U< T, Rest... > >;  ; struct  TakeFirstParameter;  Return first of possibly many template parameters. More...;  ; struct  TakeFirstParameter< Template< T, Rest... > >;  ; struct  TakeFirstType;  ; struct  TypeList;  Lightweight storage for a collection of types. More...;  . Detailed Description; ROOT type_traits extensions. . ROOTTypeTraits. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:14:05 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/namespaceROOT_1_1TypeTraits.html:88,Load,Loading,88,doc/v632/namespaceROOT_1_1TypeTraits.html,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1TypeTraits.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::TypeTraits::TypeList< Types > Struct Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Static Public Attributes |; List of all members ; ROOT::TypeTraits::TypeList< Types > Struct Template Reference. ; template<typename... Types>; struct ROOT::TypeTraits::TypeList< Types >Lightweight storage for a collection of types. ; Differently from std::tuple, no instantiation of objects of stored types is performed ; Definition at line 25 of file TypeTraits.hxx. Static Public Attributes; static constexpr std::size_t list_size = sizeof...(Types);  . #include <ROOT/TypeTraits.hxx>; Member Data Documentation. ◆ list_size. template<typename... Types> . constexpr std::size_t ROOT::TypeTraits::TypeList< Types >::list_size = sizeof...(Types). staticconstexpr . Definition at line 26 of file TypeTraits.hxx. Collaboration diagram for ROOT::TypeTraits::TypeList< Types >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; The documentation for this struct was generated from the following file:; core/foundation/inc/ROOT/TypeTraits.hxx. ROOTTypeTraitsTypeList. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:28 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structROOT_1_1TypeTraits_1_1TypeList.html:114,Load,Loading,114,doc/master/structROOT_1_1TypeTraits_1_1TypeList.html,https://root.cern,https://root.cern/doc/master/structROOT_1_1TypeTraits_1_1TypeList.html,2,"['Load', 'perform']","['Loading', 'performed']"
Performance,". ROOT: ROOT::VecOps Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Functions ; ROOT::VecOps Namespace Reference. Classes; class  RVec;  A ""std::vector""-like collection of values implementing handy operation to analyse them. More...;  ; class  RVecN;  . Functions; template<typename T > ; auto All (const RVec< T > &v) -> decltype(v[0]==false);  Return true if all of the elements equate to true, return false otherwise. ;  ; template<typename T0 , typename T1 = T0, typename T2 = T0, typename T3 = T0, typename T4 = T0, typename T5 = T0, typename Common_t = std::common_type_t<T0, T1>> ; Common_t Angle (T0 x1, T1 y1, T2 z1, T3 x2, T4 y2, T5 z2);  Return the angle between two three-vectors given the quantities x coordinate (x), y coordinate (y), z coordinate (y). ;  ; template<typename T > ; auto Any (const RVec< T > &v) -> decltype(v[0]==true);  Return true if any of the elements equates to true, return false otherwise. ;  ; template<typename T > ; std::size_t ArgMax (const RVec< T > &v);  Get the index of the greatest element of an RVec In case of multiple occurrences of the maximum values, the index corresponding to the first occurrence is returned. ;  ; template<typename T > ; std::size_t ArgMin (const RVec< T > &v);  Get the index of the smallest element of an RVec In case of multiple occurrences of the minimum values, the index corresponding to the first occurrence is returned. ;  ; template<typename T > ; RVec< typename RVec< T >::size_type > Argsort (const RVec< T > &v);  Return an RVec of indices that sort the input RVec. ;  ; template<typename T , typename Compare > ; RVec< typename RVec< T >::size_type > Argsort (const RVec< T > &v, Compare &&c);  Return an RVec of indices that sort the input RVec based on a comparison function. ;  ; template<typename T , unsigned N> ; size_t CapacityInBytes (const RVecN< T, N > &X);  ; template<typename T > ; RVec< RVec< typename RVec< T >::size_type > > Combinati",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1VecOps.html:85,Load,Loading,85,doc/master/namespaceROOT_1_1VecOps.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1VecOps.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::VecOps Namespace Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Functions ; ROOT::VecOps Namespace Reference. Classes; class  RVec;  A ""std::vector""-like collection of values implementing handy operation to analyse them. More...;  ; class  RVecN;  . Functions; template<typename T > ; auto All (const RVec< T > &v) -> decltype(v[0]==false);  Return true if all of the elements equate to true, return false otherwise. ;  ; template<typename T > ; auto Any (const RVec< T > &v) -> decltype(v[0]==true);  Return true if any of the elements equates to true, return false otherwise. ;  ; template<typename T > ; std::size_t ArgMax (const RVec< T > &v);  Get the index of the greatest element of an RVec In case of multiple occurrences of the maximum values, the index corresponding to the first occurrence is returned. ;  ; template<typename T > ; std::size_t ArgMin (const RVec< T > &v);  Get the index of the smallest element of an RVec In case of multiple occurrences of the minimum values, the index corresponding to the first occurrence is returned. ;  ; template<typename T > ; RVec< typename RVec< T >::size_type > Argsort (const RVec< T > &v);  Return an RVec of indices that sort the input RVec. ;  ; template<typename T , typename Compare > ; RVec< typename RVec< T >::size_type > Argsort (const RVec< T > &v, Compare &&c);  Return an RVec of indices that sort the input RVec based on a comparison function. ;  ; template<typename T , unsigned N> ; size_t CapacityInBytes (const RVecN< T, N > &X);  ; template<typename T > ; RVec< RVec< typename RVec< T >::size_type > > Combinations (const RVec< T > &v, const typename RVec< T >::size_type n);  Return the indices that represent all unique combinations of the elements of a given RVec. ;  ; template<typename T1 , typename T2 > ; RVec< RVec< typename RVec< T1 >::size_type > > Combinations (const RVec< T1 > &v1, const RVec< T2 > &v2);  Return the indices that represent all c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/namespaceROOT_1_1VecOps.html:84,Load,Loading,84,doc/v632/namespaceROOT_1_1VecOps.html,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1VecOps.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::VecOps::RVec< T > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Types |; Friends |; List of all members ; ROOT::VecOps::RVec< T > Class Template ReferenceVecOps. ; template<typename T>; class ROOT::VecOps::RVec< T >A ""std::vector""-like collection of values implementing handy operation to analyse them. ; Template Parameters. TThe type of the contained objects. A RVec is a container designed to make analysis of values' collections fast and easy. Its storage is contiguous in memory and its interface is designed such to resemble to the one of the stl vector. In addition the interface features methods and external functions to ease the manipulation and analysis of the data in the RVec.; NoteROOT::VecOps::RVec can also be spelled simply ROOT::RVec. Shorthand aliases such as ROOT::RVecI or ROOT::RVecD are also available as template instantiations of RVec of fundamental types. The full list of available aliases:; RVecB (bool); RVecC (char); RVecD (double); RVecF (float); RVecI (int); RVecL (long); RVecLL (long long); RVecU (unsigned); RVecUL (unsigned long); RVecULL (unsigned long long). RVec does not attempt to be exception safe. Exceptions thrown by element constructors during insertions, swaps or other operations will be propagated potentially leaving the RVec object in an invalid state. RVec methods (e.g. at or size) follow the STL naming convention instead of the ROOT naming convention in order to make RVec a drop-in replacement for std::vector. Table of Contents. Example; Arithmetic operations, logical operations and mathematical functions; Owning and adopting memory; Sorting and manipulation of indices; Usage in combination with RDataFrame; Reference for the RVec class; Reference for RVec helper functions. Example; Suppose to have an event featuring a collection of muons with a certain pseudorapidity, momentum and charge,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1VecOps_1_1RVec.html:101,Load,Loading,101,doc/master/classROOT_1_1VecOps_1_1RVec.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1VecOps_1_1RVec.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::VecOps::RVec< T > Class Template Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Types |; Friends |; List of all members ; ROOT::VecOps::RVec< T > Class Template ReferenceVecOps. ; template<typename T>; class ROOT::VecOps::RVec< T >A ""std::vector""-like collection of values implementing handy operation to analyse them. ; Template Parameters. TThe type of the contained objects. A RVec is a container designed to make analysis of values' collections fast and easy. Its storage is contiguous in memory and its interface is designed such to resemble to the one of the stl vector. In addition the interface features methods and external functions to ease the manipulation and analysis of the data in the RVec.; NoteROOT::VecOps::RVec can also be spelled simply ROOT::RVec. Shorthand aliases such as ROOT::RVecI or ROOT::RVecD are also available as template instantiations of RVec of fundamental types. The full list of available aliases:; RVecB (bool); RVecC (char); RVecD (double); RVecF (float); RVecI (int); RVecL (long); RVecLL (long long); RVecU (unsigned); RVecUL (unsigned long); RVecULL (unsigned long long). RVec does not attempt to be exception safe. Exceptions thrown by element constructors during insertions, swaps or other operations will be propagated potentially leaving the RVec object in an invalid state. RVec methods (e.g. at or size) follow the STL naming convention instead of the ROOT naming convention in order to make RVec a drop-in replacement for std::vector. Table of Contents. Example; Arithmetic operations, logical operations and mathematical functions; Owning and adopting memory; Sorting and manipulation of indices; Usage in combination with RDataFrame; Reference for the RVec class; Reference for RVec helper functions. Example; Suppose to have an event featuring a collection of muons with a certain pseudorapidity, momentum and charge, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1VecOps_1_1RVec.html:100,Load,Loading,100,doc/v632/classROOT_1_1VecOps_1_1RVec.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1VecOps_1_1RVec.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::VecOps::RVecN< T, N > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; List of all members ; ROOT::VecOps::RVecN< T, N > Class Template ReferenceVecOps. ; template<typename T, unsigned int N>; class ROOT::VecOps::RVecN< T, N >; Definition at line 1151 of file RVec.hxx. Public Types; using const_reference = typename Internal::VecOps::SmallVectorTemplateCommon< T >::const_reference;  ; using reference = typename Internal::VecOps::SmallVectorTemplateCommon< T >::reference;  ; using size_type = typename Internal::VecOps::SmallVectorTemplateCommon< T >::size_type;  ; using value_type = typename Internal::VecOps::SmallVectorTemplateCommon< T >::value_type;  ;  Public Types inherited from ROOT::Detail::VecOps::RVecImpl< T >; using const_iterator = typename SuperClass::const_iterator;  ; using iterator = typename SuperClass::iterator;  ; using reference = typename SuperClass::reference;  ; using size_type = typename SuperClass::size_type;  ;  Public Types inherited from ROOT::Internal::VecOps::SmallVectorTemplateCommon< T >; using const_iterator = const T *;  ; using const_pointer = const T *;  ; using const_reference = const T &;  ; using const_reverse_iterator = std::reverse_iterator< const_iterator >;  ; using difference_type = ptrdiff_t;  ; using iterator = T *;  ; using pointer = T *;  ; using reference = T &;  ; using reverse_iterator = std::reverse_iterator< iterator >;  ; using size_type = size_t;  ; using value_type = T;  ;  Public Types inherited from ROOT::Internal::VecOps::SmallVectorBase; using Size_T = int32_t;  . Public Member Functions;  RVecN ();  ;  RVecN (const RVecN &RHS);  ;  RVecN (const std::vector< T > &RHS);  ;  RVecN (Detail::VecOps::RVecImpl< T > &&RHS);  ; template<typename ItTy , typename = typename std::enable_if<std::is_convertible< typename std::iterator_traits<ItTy>::iterator_category, std::input_iterator_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1VecOps_1_1RVecN.html:105,Load,Loading,105,doc/master/classROOT_1_1VecOps_1_1RVecN.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1VecOps_1_1RVecN.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::option Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Typedefs |; Enumerations |; Functions ; ROOT::option Namespace Reference. The namespace of The Lean Mean C++ Option Parser. ; More... Classes; struct  Arg;  Functions for checking the validity of option arguments. More...;  ; struct  Descriptor;  Describes an option, its help text (usage) and how it should be parsed. More...;  ; struct  FullArg;  ; class  Option;  A parsed option from the command line together with its argument if it has one. More...;  ; class  Parser;  Checks argument vectors for validity and parses them into data structures that are easier to work with. More...;  ; struct  PrintUsageImplementation;  ; struct  Stats;  Determines the minimum lengths of the buffer and options arrays used for Parser. More...;  . Typedefs; typedef ArgStatus(* CheckArg) (const Option &option, bool msg);  Signature of functions that check if an argument is valid for a certain type of option. ;  . Enumerations; enum  ArgStatus { ARG_NONE; , ARG_OK; , ARG_IGNORE; , ARG_ILLEGAL; };  Possible results when checking if an argument is valid for a certain option. More...;  . Functions; template<typename Temporary > ; void printUsage (const Temporary &prn, const Descriptor usage[], int width=80, int last_column_min_percent=50, int last_column_own_line_max_percent=75);  ; template<typename Function > ; void printUsage (Function *prn, const Descriptor usage[], int width=80, int last_column_min_percent=50, int last_column_own_line_max_percent=75);  ; template<typename Function , typename Stream > ; void printUsage (Function *prn, Stream *stream, const Descriptor usage[], int width=80, int last_column_min_percent=50, int last_column_own_line_max_percent=75);  ; template<typename OStream > ; void printUsage (OStream &prn, const Descriptor usage[], int width=80, int last_column_min_percent=50, int last_column_own_line_max_percent=75);  Outputs a nicely fo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1option.html:85,Load,Loading,85,doc/master/namespaceROOT_1_1option.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1option.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::option Namespace Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Typedefs |; Enumerations |; Functions ; ROOT::option Namespace Reference. The namespace of The Lean Mean C++ Option Parser. ; More... Classes; struct  Arg;  Functions for checking the validity of option arguments. More...;  ; struct  Descriptor;  Describes an option, its help text (usage) and how it should be parsed. More...;  ; struct  FullArg;  ; class  Option;  A parsed option from the command line together with its argument if it has one. More...;  ; class  Parser;  Checks argument vectors for validity and parses them into data structures that are easier to work with. More...;  ; struct  PrintUsageImplementation;  ; struct  Stats;  Determines the minimum lengths of the buffer and options arrays used for Parser. More...;  . Typedefs; typedef ArgStatus(* CheckArg) (const Option &option, bool msg);  Signature of functions that check if an argument is valid for a certain type of option. ;  . Enumerations; enum  ArgStatus { ARG_NONE; , ARG_OK; , ARG_IGNORE; , ARG_ILLEGAL; };  Possible results when checking if an argument is valid for a certain option. More...;  . Functions; template<typename Temporary > ; void printUsage (const Temporary &prn, const Descriptor usage[], int width=80, int last_column_min_percent=50, int last_column_own_line_max_percent=75);  ; template<typename Function > ; void printUsage (Function *prn, const Descriptor usage[], int width=80, int last_column_min_percent=50, int last_column_own_line_max_percent=75);  ; template<typename Function , typename Stream > ; void printUsage (Function *prn, Stream *stream, const Descriptor usage[], int width=80, int last_column_min_percent=50, int last_column_own_line_max_percent=75);  ; template<typename OStream > ; void printUsage (OStream &prn, const Descriptor usage[], int width=80, int last_column_min_percent=50, int last_column_own_line_max_percent=75);  Outputs a nicely for",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/namespaceROOT_1_1option.html:84,Load,Loading,84,doc/v632/namespaceROOT_1_1option.html,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1option.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::option::Option Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; Private Member Functions |; Static Private Member Functions |; Private Attributes |; List of all members ; ROOT::option::Option Class Reference. ; A parsed option from the command line together with its argument if it has one. ; The Parser chains all parsed options with the same Descriptor::index together to form a linked list. This allows you to easily implement all of the common ways of handling repeated options and enable/disable pairs. Test for presence of a switch in the argument vector: if ( options[QUIET] ) ... ; ; Evaluate –enable-foo/–disable-foo pair where the last one used wins: if ( options[FOO].last()->type() == DISABLE ) ... ; ROOT::option::Option::typeint type() constReturns Descriptor::type of this Option's Descriptor, or 0 if this Option is invalid (unused).Definition OptionParser.h:544; ROOT::option::Option::lastOption * last()Returns a pointer to the last element of the linked list.Definition OptionParser.h:643; ; Cumulative option (-v verbose, -vv more verbose, -vvv even more verbose): int verbosity = options[VERBOSE].count(); ; ; Iterate over all –file=<fname> arguments: for (Option* opt = options[FILE]; opt; opt = opt->next()); fname = opt->arg; ... ; ROOT::option::OptionA parsed option from the command line together with its argument if it has one.Definition OptionParser.h:454; ROOT::option::Option::nextOption * next()Returns a pointer to the next element of the linked list or NULL if called on last().Definition OptionParser.h:682; . Definition at line 453 of file OptionParser.h. Public Member Functions;  Option ();  Creates a new Option that is a one-element linked list and has NULL desc, name, arg and namelen. ;  ;  Option (const Descriptor *desc_, const char *name_, const char *arg_);  Creates a new Option that is a one-element linked list and has",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1option_1_1Option.html:89,Load,Loading,89,doc/master/classROOT_1_1option_1_1Option.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1option_1_1Option.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::option::Option Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; Private Member Functions |; Static Private Member Functions |; Private Attributes |; List of all members ; ROOT::option::Option Class Reference. ; A parsed option from the command line together with its argument if it has one. ; The Parser chains all parsed options with the same Descriptor::index together to form a linked list. This allows you to easily implement all of the common ways of handling repeated options and enable/disable pairs. Test for presence of a switch in the argument vector: if ( options[QUIET] ) ... ; ; Evaluate –enable-foo/–disable-foo pair where the last one used wins: if ( options[FOO].last()->type() == DISABLE ) ... ; ROOT::option::Option::typeint type() constReturns Descriptor::type of this Option's Descriptor, or 0 if this Option is invalid (unused).Definition OptionParser.h:544; ROOT::option::Option::lastOption * last()Returns a pointer to the last element of the linked list.Definition OptionParser.h:643; ; Cumulative option (-v verbose, -vv more verbose, -vvv even more verbose): int verbosity = options[VERBOSE].count(); ; ; Iterate over all –file=<fname> arguments: for (Option* opt = options[FILE]; opt; opt = opt->next()); fname = opt->arg; ... ; ROOT::option::OptionA parsed option from the command line together with its argument if it has one.Definition OptionParser.h:454; ROOT::option::Option::nextOption * next()Returns a pointer to the next element of the linked list or NULL if called on last().Definition OptionParser.h:682; . Definition at line 453 of file OptionParser.h. Public Member Functions;  Option ();  Creates a new Option that is a one-element linked list and has NULL desc, name, arg and namelen. ;  ;  Option (const Descriptor *desc_, const char *name_, const char *arg_);  Creates a new Option that is a one-element linked list and has ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1option_1_1Option.html:88,Load,Loading,88,doc/v632/classROOT_1_1option_1_1Option.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1option_1_1Option.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::option::Parser Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Private Member Functions |; Private Attributes |; Friends |; List of all members ; ROOT::option::Parser Class Reference. ; Checks argument vectors for validity and parses them into data structures that are easier to work with. ; Example:int main(int argc, char* argv[]); {; argc-=(argc>0); argv+=(argc>0); // skip program name argv[0] if present; option::Stats stats(usage, argc, argv);; option::Option options[stats.options_max], buffer[stats.buffer_max];; option::Parser parse(usage, argc, argv, options, buffer);; ; if (parse.error()); return 1;; ; if (options[HELP]); ...; mainint main()Definition Prototype.cxx:12; ROOT::option::OptionA parsed option from the command line together with its argument if it has one.Definition OptionParser.h:454; ROOT::option::ParserChecks argument vectors for validity and parses them into data structures that are easier to work wit...Definition OptionParser.h:1062; ROOT::option::Parser::parsevoid parse(bool gnu, const Descriptor usage[], int argc, const char **argv, Option options[], Option buffer[], int min_abbr_len=0, bool single_minus_longopt=false, int bufmax=-1)Parses the given argument vector.Definition OptionParser.h:1500; ROOT::option::StatsDetermines the minimum lengths of the buffer and options arrays used for Parser.Definition OptionParser.h:932; ; Definition at line 1061 of file OptionParser.h. Classes; struct  Action;  ; class  StoreOptionAction;  . Public Member Functions;  Parser ();  Creates a new Parser. ;  ;  Parser (bool gnu, const Descriptor usage[], int argc, char **argv, Option options[], Option buffer[], int min_abbr_len=0, bool single_minus_longopt=false, int bufmax=-1);  Parser(...) with non-const argv. ;  ;  Parser (bool gnu, const Descriptor usage[], int argc, const char **argv, Option options[], Option buffer[], int min_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1option_1_1Parser.html:89,Load,Loading,89,doc/master/classROOT_1_1option_1_1Parser.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1option_1_1Parser.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::option::Parser Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Private Member Functions |; Private Attributes |; Friends |; List of all members ; ROOT::option::Parser Class Reference. ; Checks argument vectors for validity and parses them into data structures that are easier to work with. ; Example:int main(int argc, char* argv[]); {; argc-=(argc>0); argv+=(argc>0); // skip program name argv[0] if present; option::Stats stats(usage, argc, argv);; option::Option options[stats.options_max], buffer[stats.buffer_max];; option::Parser parse(usage, argc, argv, options, buffer);; ; if (parse.error()); return 1;; ; if (options[HELP]); ...; mainint main()Definition Prototype.cxx:12; ROOT::option::OptionA parsed option from the command line together with its argument if it has one.Definition OptionParser.h:454; ROOT::option::ParserChecks argument vectors for validity and parses them into data structures that are easier to work wit...Definition OptionParser.h:1062; ROOT::option::Parser::parsevoid parse(bool gnu, const Descriptor usage[], int argc, const char **argv, Option options[], Option buffer[], int min_abbr_len=0, bool single_minus_longopt=false, int bufmax=-1)Parses the given argument vector.Definition OptionParser.h:1500; ROOT::option::StatsDetermines the minimum lengths of the buffer and options arrays used for Parser.Definition OptionParser.h:932; ; Definition at line 1061 of file OptionParser.h. Classes; struct  Action;  ; class  StoreOptionAction;  . Public Member Functions;  Parser ();  Creates a new Parser. ;  ;  Parser (bool gnu, const Descriptor usage[], int argc, char **argv, Option options[], Option buffer[], int min_abbr_len=0, bool single_minus_longopt=false, int bufmax=-1);  Parser(...) with non-const argv. ;  ;  Parser (bool gnu, const Descriptor usage[], int argc, const char **argv, Option options[], Option buffer[], int min_a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1option_1_1Parser.html:88,Load,Loading,88,doc/v632/classROOT_1_1option_1_1Parser.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1option_1_1Parser.html,1,['Load'],['Loading']
Performance,. ROOT: ROOT::v5 Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces |; Classes |; Functions ; ROOT::v5 Namespace Reference. Namespaces; namespace  TFastFun;  . Classes; struct  TF1Data;  ; class  TFormula;  The FORMULA class (ROOT version 5) More...;  ; class  TFormulaPrimitive;  The Formula Primitive class. More...;  ; class  TOperOffset;  . Functions; void TMath_GenerInterface ();  . Function Documentation. ◆ TMath_GenerInterface(). void ROOT::v5::TMath_GenerInterface ; (; ). Definition at line 8 of file TFormulaMathInterface.cxx. ROOTv5. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:28 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1v5.html:81,Load,Loading,81,doc/master/namespaceROOT_1_1v5.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1v5.html,1,['Load'],['Loading']
Performance,. ROOT: ROOT::v5 Namespace Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces |; Classes |; Functions ; ROOT::v5 Namespace Reference. Namespaces; namespace  TFastFun;  . Classes; struct  TF1Data;  ; class  TFormula;  The FORMULA class (ROOT version 5) More...;  ; class  TFormulaPrimitive;  The Formula Primitive class. More...;  ; class  TOperOffset;  . Functions; void TMath_GenerInterface ();  . Function Documentation. ◆ TMath_GenerInterface(). void ROOT::v5::TMath_GenerInterface ; (; ). Definition at line 8 of file TFormulaMathInterface.cxx. ROOTv5. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:14:05 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/namespaceROOT_1_1v5.html:80,Load,Loading,80,doc/v632/namespaceROOT_1_1v5.html,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1v5.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::v5::TF1Data Struct Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; List of all members ; ROOT::v5::TF1Data Struct Reference. . Definition at line 37 of file TF1Data.h. Public Member Functions;  TF1Data ();  F1 default constructor. ;  ;  ~TF1Data () override;  TF1 default destructor. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void Streamer (TBuffer &b, Int_t version, UInt_t start, UInt_t count, const TClass *onfile_class=nullptr);  specialized streamer function being able to read old TF1 versions as TF1Data in memory ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from ROOT::v5::TFormula;  TFormula ();  Formula default constructor. ;  ;  TFormula (const char *name, const char *formula);  Normal Formula constructor. ;  ;  TFormula (const TFormula &formula);  Default constructor. ;  ;  ~TFormula () override;  Formula default destructor. ;  ; virtual void Analyze (const char *schain, Int_t &err, Int_t offset=0);  Analyze a sub-expression in one formula. ;  ; virtual Bool_t AnalyzeFunction (TString &chaine, Int_t &err, Int_t offset=0);  Check if the chain as function call. ;  ; void Clear (Option_t *option="""") override;  Resets the objects. ;  ; virtual Int_t Compile (const char *expression="""");  Compile expression already stored in fTitle. ;  ; void Copy (TObject &formula) const override;  Copy this formula. ;  ; virtual char * DefinedString (Int_t code);  Return address of string corresponding to special code. ;  ; virtual Double_t DefinedValue (Int_t code);  Return value corresponding to special code. ;  ; virtual Int_t DefinedVariable (TString &variable, Int_t &action);  Check if expression is in the list of defined variables. ;  ; virtual Double_t Eval (Double_t x, Double_t y=0, Double_t z=",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structROOT_1_1v5_1_1TF1Data.html:87,Load,Loading,87,doc/master/structROOT_1_1v5_1_1TF1Data.html,https://root.cern,https://root.cern/doc/master/structROOT_1_1v5_1_1TF1Data.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::v5::TFormula Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Protected Attributes |; Private Attributes |; List of all members ; ROOT::v5::TFormula Class ReferenceHistogram Library. ; The FORMULA class (ROOT version 5) ; Example of valid expressions:. sin(x)/x; [0]*sin(x) + [1]*exp(-[2]*x); x + y**2; x^2 + y^2; [0]*pow([1],4); 2*pi*sqrt(x/y); gaus(0)*expo(3) + ypol3(5)*x; gausn(0)*expo(3) + ypol3(5)*x. In the last example above:; gaus(0) is a substitute for [0]*exp(-0.5*((x-[1])/[2])**2) and (0) means start numbering parameters at 0; gausn(0) is a substitute for [0]*exp(-0.5*((x-[1])/[2])**2)/(sqrt(2*pi)*[2])) and (0) means start numbering parameters at 0; expo(3) is a substitute for exp([3]+[4]*x); pol3(5) is a substitute for par[5]+par[6]*x+par[7]*x**2+par[8]*x**3 (here Pol3 stands for Polynomial of degree 3); TMath functions can be part of the expression, eg:. TMath::Landau(x)*sin(x); TMath::Erf(x). Comparisons operators are also supported (&&, ||, ==, <=, >=, !) Examples: sin(x*(x<0.5 || x>1)); If the result of a comparison is TRUE, the result is 1, otherwise 0.; Already predefined names can be given. For example, if the formula; TFormula old(sin(x*(x<0.5 || x>1))) one can assign a name to the formula. By default the name of the object = title = formula itself. old.SetName(""old""). then, old can be reused in a new expression. TFormula new(""x*old"") is equivalent to: TFormula new(""x*sin(x*(x<0.5 || x>1))""); Up to 4 dimensions are supported (indicated by x, y, z, t) An expression may have 0 parameters or a list of parameters indicated by the sequence [par_number]; A graph showing the logic to compile and analyze a formula is shown in TFormula::Compile and TFormula::Analyze. Once a formula has been compiled, it can be evaluated for a given set of parameters. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1v5_1_1TFormula.html:87,Load,Loading,87,doc/master/classROOT_1_1v5_1_1TFormula.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1v5_1_1TFormula.html,1,['Load'],['Loading']
Performance,". ROOT: ROOT::v5::TFormulaPrimitive Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Static Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; Friends |; List of all members ; ROOT::v5::TFormulaPrimitive Class ReferenceHistogram Library. ; The Formula Primitive class. ; Helper class for TFormula to speed up TFormula evaluation TFormula can use all functions registered in the list of TFormulaPrimitives User can add new function to the list of primitives if FormulaPrimitive with given name is already defined new primitive is ignored; Example:; TFormulaPrimitive::AddFormula(new TFormulaPrimitive(""Pow2"",""Pow2"",TFastFun::Pow2));; TF1 f1(""f1"",""Pow2(x)"");; ROOT::v5::TFormulaPrimitive::AddFormulastatic Int_t AddFormula(TFormulaPrimitive *formula)Add formula to the list of primitive formulas.Definition TFormulaPrimitive_v5.cxx:190; ROOT::v5::TFormulaPrimitive::TFormulaPrimitiveTFormulaPrimitive()Default constructor.Definition TFormulaPrimitive_v5.cxx:84; TF11-Dim function classDefinition TF1.h:233; f1TF1 * f1Definition legend1.C:11; ROOT::v5::TFastFun::Pow2Double_t Pow2(Double_t x)Definition TFormulaPrimitive_v5.cxx:255. TFormulaPrimitive is used to get direct acces to the function pointers; GenFunc - pointers to the static function; TFunc - pointers to the data member functions. The following sufixes are currently used, to describe function arguments:. G - generic layout - pointer to double (arguments), pointer to double (parameters); 10 - double; 110 - double, double; 1110 - double, double, double . Definition at line 37 of file TFormulaPrimitive.h. Public Types; typedef Double_t(* GenFunc0) ();  ; typedef Double_t(* GenFunc10) (Double_t);  ; typedef Double_t(* GenFunc110) (Double_t, Double_t);  ; typedef Double_t(* GenFunc1110) (Double_t, Double_t, Double_t);  ; typ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1v5_1_1TFormulaPrimitive.html:96,Load,Loading,96,doc/master/classROOT_1_1v5_1_1TFormulaPrimitive.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1v5_1_1TFormulaPrimitive.html,1,['Load'],['Loading']
Performance,". ROOT: RecHit Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; List of all members ; RecHit Class Reference. . Definition at line 88 of file collection_proxies.C. Public Member Functions;  RecHit (float pt, float x, float y, float z);  ; virtual TClass * IsA () const;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRecHit.html:75,Load,Loading,75,doc/master/classRecHit.html,https://root.cern,https://root.cern/doc/master/classRecHit.html,1,['Load'],['Loading']
Performance,". ROOT: Rectangle_t Struct Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Attributes |; List of all members ; Rectangle_t Struct Reference. ; Rectangle structure (maps to the X11 XRectangle structure) ; Definition at line 361 of file GuiTypes.h. Public Attributes; UShort_t fHeight;  ; UShort_t fWidth;  ; Short_t fX;  ; Short_t fY;  . #include <GuiTypes.h>; Member Data Documentation. ◆ fHeight. UShort_t Rectangle_t::fHeight. Definition at line 363 of file GuiTypes.h. ◆ fWidth. UShort_t Rectangle_t::fWidth. Definition at line 363 of file GuiTypes.h. ◆ fX. Short_t Rectangle_t::fX. Definition at line 362 of file GuiTypes.h. ◆ fY. Short_t Rectangle_t::fY. Definition at line 362 of file GuiTypes.h. Collaboration diagram for Rectangle_t:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; The documentation for this struct was generated from the following file:; core/gui/inc/GuiTypes.h. Rectangle_t. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:37 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structRectangle__t.html:81,Load,Loading,81,doc/master/structRectangle__t.html,https://root.cern,https://root.cern/doc/master/structRectangle__t.html,1,['Load'],['Loading']
Performance,". ROOT: RedirectHandle_t Struct Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; RedirectHandle_t Struct Reference. . Definition at line 207 of file TSystem.h. Public Member Functions;  RedirectHandle_t (const char *n=nullptr);  ; void Reset ();  . Public Attributes; TString fFile;  ; Int_t fReadOffSet {-1};  ; Int_t fStdErrDup {-1};  ; TString fStdErrTty;  ; Int_t fStdOutDup {-1};  ; TString fStdOutTty;  . #include <TSystem.h>; Constructor & Destructor Documentation. ◆ RedirectHandle_t(). RedirectHandle_t::RedirectHandle_t ; (; const char * ; n = nullptr). inline . Definition at line 214 of file TSystem.h. Member Function Documentation. ◆ Reset(). void RedirectHandle_t::Reset ; (; ). inline . Definition at line 215 of file TSystem.h. Member Data Documentation. ◆ fFile. TString RedirectHandle_t::fFile. Definition at line 208 of file TSystem.h. ◆ fReadOffSet. Int_t RedirectHandle_t::fReadOffSet {-1}. Definition at line 213 of file TSystem.h. ◆ fStdErrDup. Int_t RedirectHandle_t::fStdErrDup {-1}. Definition at line 212 of file TSystem.h. ◆ fStdErrTty. TString RedirectHandle_t::fStdErrTty. Definition at line 210 of file TSystem.h. ◆ fStdOutDup. Int_t RedirectHandle_t::fStdOutDup {-1}. Definition at line 211 of file TSystem.h. ◆ fStdOutTty. TString RedirectHandle_t::fStdOutTty. Definition at line 209 of file TSystem.h. Collaboration diagram for RedirectHandle_t:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; The documentation for this struct was generated from the following file:; core/base/inc/TSystem.h. RedirectHandle_t. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:37 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structRedirectHandle__t.html:86,Load,Loading,86,doc/master/structRedirectHandle__t.html,https://root.cern,https://root.cern/doc/master/structRedirectHandle__t.html,1,['Load'],['Loading']
Performance,". ROOT: Roo1DTable Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; Roo1DTable Class ReferenceRooFit » RooFit Core. ; One-dimensional table. ; A table is the category equivalent of a plot. To create a table use the RooDataSet::table() method. ; Definition at line 23 of file Roo1DTable.h. Public Member Functions;  Roo1DTable ();  ;  Roo1DTable (const char *name, const char *title, const RooAbsCategory &cat);  Create an empty table from abstract category. ;  ;  Roo1DTable (const Roo1DTable &other);  Copy constructor. ;  ;  ~Roo1DTable () override;  Destructor. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default contents to print. ;  ; void fill (RooAbsCategory &cat, double weight=1.0) override;  Increment the counter of the table slot with the name corresponding to that of the current category state. ;  ; double get (const char *label, bool silent=false) const;  Return the table entry named 'label'. ;  ; double get (const int index, bool silent=false) const;  Return the table entry named 'label'. ;  ; double getFrac (const char *label, bool silent=false) const;  Return the fraction of entries in the table contained in the slot named 'label'. ;  ; double getFrac (const int index, bool silent=false) const;  Return the fraction of entries in the table contained in the slot named 'label'. ;  ; double getOverflow () const;  Return the number of overflow entries in the table. ;  ; TClass * IsA () const override;  ; bool isIdentical (const RooTable &other, bool verbose) override;  Return true if table is identical in contents to given reference table. ;  ; void Print (Option_t *options=nullptr) const override;  This method must be overridden when a class wants to print itself. ;  ; void printClassName (std::ostream &os) const override;  Print the class name of the table. ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRoo1DTable.html:79,Load,Loading,79,doc/master/classRoo1DTable.html,https://root.cern,https://root.cern/doc/master/classRoo1DTable.html,1,['Load'],['Loading']
Performance,". ROOT: Roo2DKeysPdf Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; Private Member Functions |; Private Attributes |; List of all members ; Roo2DKeysPdf Class ReferenceRooFit » RooFit. ; Two-dimensional kernel estimation PDF. ; This function has been superseded by the more general RooNDKeysPdf. ; Definition at line 25 of file Roo2DKeysPdf.h. Public Member Functions;  Roo2DKeysPdf (const char *name, const char *title, RooAbsReal &xx, RooAbsReal &yy, RooDataSet &data, TString options=""a"", double widthScaleFactor=1.0);  Constructor. ;  ;  Roo2DKeysPdf (const Roo2DKeysPdf &other, const char *name=nullptr);  Copy constructor. ;  ;  ~Roo2DKeysPdf () override;  Destructor. ;  ; Int_t calculateBandWidth (Int_t kernel=-999);  Calculates the kernel bandwidth for x & y and the probability look up table _p[i][j]. ;  ; TObject * clone (const char *newname) const override;  ; double evaluate () const override;  Evaluates the kernel estimation for x,y, interpolating between the points if necessary. ;  ; Int_t getBandWidthType () const;  ; double getMean (const char *axis) const;  ; void getOptions (void) const;  ; double getSigma (const char *axis) const;  ; TClass * IsA () const override;  ; Int_t loadDataSet (RooDataSet &data, TString options);  Loads a new data set into the class instance. ;  ; void PrintInfo (std::ostream &) const;  Prints out _p[_nPoints][_nPoints] indicating the domain limits. ;  ; void setOptions (TString options);  ; void setWidthScaleFactor (double widthScaleFactor);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeHistToFile (char *outputFile, const char *histName) const;  Plots the PDF as a histogram and saves it to a file, so that it can be loaded in as a Roo2DHist PDF in the future to save on ca",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRoo2DKeysPdf.html:81,Load,Loading,81,doc/master/classRoo2DKeysPdf.html,https://root.cern,https://root.cern/doc/master/classRoo2DKeysPdf.html,1,['Load'],['Loading']
Performance,". ROOT: RooAbsAnaConvPdf Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Friends |; List of all members ; RooAbsAnaConvPdf Class ReferenceabstractRooFit » RooFit Core. ; Base class for PDFs that represent a physics model that can be analytically convolved with a resolution model. ; To achieve factorization between the physics model and the resolution model, each physics model must be able to be written in the form ; \[; \mathrm{Phys}(x, \bar{a}, \bar{b}) = \sum_k \mathrm{coef}_k(\bar{a}) * \mathrm{basis}_k(x,\bar{b}); \]. where \( \mathrm{basis}_k \) are a limited number of functions in terms of the variable to be convoluted, and \( \mathrm{coef}_k \) are coefficients independent of the convolution variable.; Classes derived from RooResolutionModel implement ; \[; R_k(x,\bar{b},\bar{c}) = \int \mathrm{basis}_k(x', \bar{b}) \cdot \mathrm{resModel}(x-x',\bar{c}) \; \mathrm{d}x',; \]. which RooAbsAnaConvPdf uses to construct the pdf for [ Phys (x) R ] : ; \[; \mathrm{PDF}(x,\bar{a},\bar{b},\bar{c}) = \sum_k \mathrm{coef}_k(\bar{a}) * R_k(x,\bar{b},\bar{c}); \]. A minimal implementation of a RooAbsAnaConvPdf physics model consists of. A constructor that declares the required basis functions using the declareBasis() method. The declareBasis() function assigns a unique identifier code to each declare basis; An implementation of coefficient(Int_t code) returning the coefficient value for each declared basis function. Optionally, analytical integrals can be provided for the coefficient functions. The interface for this is quite similar to that for integrals of regular PDFs. Two functions, Int_t getCoefAnalyticalIntegral(Int_t coef, RooArgSet& allVars, RooArgSet& analVars, const char* rangeName) const; double coefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName) co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsAnaConvPdf.html:85,Load,Loading,85,doc/master/classRooAbsAnaConvPdf.html,https://root.cern,https://root.cern/doc/master/classRooAbsAnaConvPdf.html,1,['Load'],['Loading']
Performance,". ROOT: RooAbsArg Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; Friends |; List of all members ; RooAbsArg Class ReferenceabstractRooFit » RooFit Core. ; Common abstract base class for objects that represent a value and a ""shape"" in RooFit. ; Values or shapes usually depend on values or shapes of other RooAbsArg instances. Connecting several RooAbsArg in a computation graph models an expression tree that can be evaluated. Building a computation graph of RooFit objects; Therefore, RooAbsArg provides functionality to connect objects of type RooAbsArg into a computation graph to pass values between those objects. A value can e.g. be a real-valued number, (instances of RooAbsReal), or an integer, that is, category index (instances of RooAbsCategory). The third subclass of RooAbsArg is RooStringVar, but it is rarely used.; The ""shapes"" that a RooAbsArg can possess can e.g. be the definition range of an observable, or how many states a category object has. In computations, values are expected to change often, while shapes remain mostly constant (unless e.g. a new range is set for an observable).; Nodes of a computation graph are connected using instances of RooAbsProxy. If Node B declares a member RooTemplateProxy<TypeOfNodeA>, Node A will be registered as a server of values to Node B, and Node B will know that it is a client of node A. Using functions like dependsOn(), or getObservables() / getParameters(), the relation of A --> B can be queried. Using graphVizTree(), one can create a visualisation of the expression tree.; An instance of RooAbsArg can have named attributes. It also has flags to indicate that either its value or its shape were changed (= it is dirty",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsArg.html:78,Load,Loading,78,doc/master/classRooAbsArg.html,https://root.cern,https://root.cern/doc/master/classRooAbsArg.html,1,['Load'],['Loading']
Performance,". ROOT: RooAbsArg::ProxyListCache Struct Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Attributes |; List of all members ; RooAbsArg::ProxyListCache Struct Reference. . Definition at line 660 of file RooAbsArg.h. Public Attributes; std::vector< RooAbsProxy * > cache;  ; bool isDirty = true;  . #include <RooAbsArg.h>; Member Data Documentation. ◆ cache. std::vector<RooAbsProxy*> RooAbsArg::ProxyListCache::cache. Definition at line 661 of file RooAbsArg.h. ◆ isDirty. bool RooAbsArg::ProxyListCache::isDirty = true. Definition at line 662 of file RooAbsArg.h. Collaboration diagram for RooAbsArg::ProxyListCache:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; The documentation for this struct was generated from the following file:; roofit/roofitcore/inc/RooAbsArg.h. RooAbsArgProxyListCache. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:38 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structRooAbsArg_1_1ProxyListCache.html:95,Load,Loading,95,doc/master/structRooAbsArg_1_1ProxyListCache.html,https://root.cern,https://root.cern/doc/master/structRooAbsArg_1_1ProxyListCache.html,4,"['Load', 'cache']","['Loading', 'cache']"
Performance,". ROOT: RooAbsBinning Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; RooAbsBinning Class ReferenceabstractRooFit » RooFit Core. ; Abstract base class for RooRealVar binning definitions. ; This class defines the interface to retrieve bin boundaries, ranges etc. ; Definition at line 25 of file RooAbsBinning.h. Public Member Functions;  RooAbsBinning (const char *name=nullptr);  ;  RooAbsBinning (const RooAbsBinning &other, const char *name=nullptr);  ; virtual double * array () const =0;  ; virtual double averageBinWidth () const =0;  ; virtual double binCenter (Int_t bin) const =0;  ; virtual double binHigh (Int_t bin) const =0;  ; virtual double binLow (Int_t bin) const =0;  ; int binNumber (double x) const;  Returns the bin number corresponding to the value x. ;  ; virtual void binNumbers (double const *x, int *bins, std::size_t n, int coef=1) const =0;  Compute the bin indices for multiple values of x. ;  ; virtual double binWidth (Int_t bin) const =0;  ; virtual RooAbsBinning * clone (const char *name=nullptr) const =0;  ; TObject * Clone (const char *newname=nullptr) const override;  Make a clone of an object using the Streamer facility. ;  ; virtual double highBound () const =0;  ; virtual RooAbsReal * highBoundFunc () const;  Return pointer to RooAbsReal parameterized upper bound, if any. ;  ; virtual void insertHook (RooAbsRealLValue &) const;  Hook interface function to execute code upon insertion into a RooAbsRealLValue. ;  ; TClass * IsA () const override;  ; virtual bool isParameterized () const;  Interface function. ;  ; virtual bool isShareable () const;  If true (default), the range definition can be shared across clones of a RooRealVar. ;  ; virtual bool isUniform () const;  ; virtual double lowBound () const =0;  ; virtual RooAbsReal * lowBoundFunc () const;  Return pointer to RooAbsReal parameter",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsBinning.html:82,Load,Loading,82,doc/master/classRooAbsBinning.html,https://root.cern,https://root.cern/doc/master/classRooAbsBinning.html,1,['Load'],['Loading']
Performance,". ROOT: RooAbsCache Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; RooAbsCache Class ReferenceRooFit » RooFit Core. ; Abstract base class for data members of RooAbsArgs that cache other (composite) RooAbsArg expressions. ; The RooAbsCache interface defines the interaction between the owning RooAbsArg object and the cache data member to communicate server redirects, operation mode changes and constant term optimization management calls. ; Definition at line 27 of file RooAbsCache.h. Public Member Functions;  RooAbsCache (const RooAbsCache &, RooAbsArg *owner=nullptr);  Copy constructor. Takes owner as argument and registers cache with owne. ;  ;  RooAbsCache (RooAbsArg *owner=nullptr);  Constructor. Takes owner as argument and register cache with owner. ;  ; virtual ~RooAbsCache ();  Destructor. Unregisters cache with owner. ;  ; virtual void findConstantNodes (const RooArgSet &, RooArgSet &, RooLinkedList &);  Interface for constant term node finding calls. ;  ; virtual TClass * IsA () const;  ; virtual void operModeHook ();  Interface for operation mode changes. ;  ; virtual void optimizeCacheMode (const RooArgSet &, RooArgSet &, RooLinkedList &);  Interface for processing of cache mode optimization calls. ;  ; virtual void printCompactTreeHook (std::ostream &, const char *);  Interface for printing of cache guts in tree mode printing. ;  ; virtual bool redirectServersHook (const RooAbsCollection &, bool, bool, bool);  Interface for server redirect calls. ;  ; void setOwner (RooAbsArg *owner);  Reset the owner, triggering the owner to register this cache in its list of caches. ;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void wireCache ();  . Static Public Member Functions; static TClass * Class ();  ; static const cha",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsCache.html:80,Load,Loading,80,doc/master/classRooAbsCache.html,https://root.cern,https://root.cern/doc/master/classRooAbsCache.html,6,"['Load', 'cache', 'optimiz']","['Loading', 'cache', 'optimization']"
Performance,". ROOT: RooAbsCachedPdf Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Attributes |; Friends |; List of all members ; RooAbsCachedPdf Class ReferenceabstractRooFit » RooFit Core. ; Abstract base class for p.d.f.s that need or want to cache their evaluate() output in a RooHistPdf defined in terms of the used observables. ; This base class manages the creation and storage of all RooHistPdf cache p.d.fs and the RooDataHists that define their shape. Implementations of RooAbsCachedPdf must define member function fillCacheObject() which serves to fill an already created RooDataHist with the p.d.fs function values. In addition the member functions actualObservables() and actualParameters() must be define which report what the actual observables to be cached are for a given set of observables passed by the user to getVal() and on which parameters need to be tracked for changes to trigger a refilling of the cache histogram. ; Definition at line 25 of file RooAbsCachedPdf.h. Classes; class  AnaIntConfig;  ; class  PdfCacheElem;  . Public Types; using CacheElem = PdfCacheElem;  ;  Public Types inherited from RooAbsPdf; enum  ExtendMode { CanNotBeExtended; , CanBeExtended; , MustBeExtended; };  ;  Public Types inherited from RooAbsReal; enum  ErrorLoggingMode { PrintErrors; , CollectErrors; , CountErrors; , Ignore; };  ; enum  ScaleType { Raw; , Relative; , NumEvent; , RelativeExpected; };  ; using value_type = double;  ;  Public Types inherited from RooAbsArg; enum  CacheMode { Always =0; , NotAdvised =1; , Never =2; };  ; enum  ConstOpCode { Activate =0; , DeActivate =1; , ConfigChange =2; , ValueChange =3; };  ; enum  OperMode { Auto =0; , AClean =1; , ADirty =2; };  ; using RefCountList_t = RooSTLRefCountList< RooAbsArg >;  ; using RefCountListLegacyItera",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsCachedPdf.html:84,Load,Loading,84,doc/master/classRooAbsCachedPdf.html,https://root.cern,https://root.cern/doc/master/classRooAbsCachedPdf.html,5,"['Load', 'cache']","['Loading', 'cache', 'cached']"
Performance,". ROOT: RooAbsCachedReal Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Protected Attributes |; Private Attributes |; Friends |; List of all members ; RooAbsCachedReal Class ReferenceabstractRooFit » RooFit Core. ; Abstract base class for functions that need or want to cache their evaluate() output in a RooHistFunc defined in terms of the used observables. ; This base class manages the creation and storage of all RooHistFunc cache p.d.fs and the RooDataHists that define their shape. Implementations of RooAbsCachedReal must define member function fillCacheObject() which serves to fill an already created RooDataHist with the functions function values. In addition the member functions actualObservables() and actualParameters() must be define which report what the actual observables to be cached are for a given set of observables passed by the user to getVal() and on which parameters need to be tracked for changes to trigger a refilling of the cache histogram. ; Definition at line 24 of file RooAbsCachedReal.h. Classes; class  FuncCacheElem;  . Public Member Functions;  RooAbsCachedReal ();  ;  RooAbsCachedReal (const char *name, const char *title, Int_t ipOrder=0);  Constructor. ;  ;  RooAbsCachedReal (const RooAbsCachedReal &other, const char *name=nullptr);  Copy constructor. ;  ; double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Forward call to implementation in relevant RooHistFunc instance. ;  ; void disableCache (bool flag);  ; bool forceAnalyticalInt (const RooAbsArg &) const override;  ; Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &analVars, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Return analytical integration capabilities of the RooHistFunc that correspond",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsCachedReal.html:85,Load,Loading,85,doc/master/classRooAbsCachedReal.html,https://root.cern,https://root.cern/doc/master/classRooAbsCachedReal.html,3,"['Load', 'cache']","['Loading', 'cache']"
Performance,". ROOT: RooAbsCategory Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; Private Attributes |; Friends |; List of all members ; RooAbsCategory Class ReferenceabstractRooFit » RooFit Core. ; A space to attach TBranches. ; RooAbsCategory is the base class for objects that represent a discrete value with a finite number of states.; Each state is denoted by an integer and a name. Both can be used to retrieve and set states, but referring to states by index is more efficient. Conversion between index and name can be done using lookupName() or lookupIndex(). It is possible to iterate through all defined states using begin() and end().; For category classes deriving from RooAbsCategory, states can only be evaluated, i.e., queried. Refer to RooAbsCategoryLValue and its derived classes for categories where states can also be set. The simplest category class whose states can be set, queried and saved in a dataset, refer to RooCategory. Interface change in ROOT-6.22; Category data were based in the class RooCatType, holding an index state and a category name truncated to 256 characters. This wastes 64 bytes of storage space per entry, and prevents fast retrieval of category data. Since ROOT-6.22, categories are only represented by an integer. RooAbsCategory::lookupName() can be used to retrieve the corresponding state name. There is no limit for the length of the state name.; To not break old code, the old RooCatType interfaces are still available. Whenever possible, the following replacements should be used:; lookupType() \( \rightarrow \) lookupName() / lookupIndex(); typeIterator() \( \rightarrow \) range-based for loop / begin() / end(); isValidIndex(Int_t index) \( \rightarrow \) hasIndex(); isValid(const RooCatType&) \( \rightarrow \) ha",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsCategory.html:83,Load,Loading,83,doc/master/classRooAbsCategory.html,https://root.cern,https://root.cern/doc/master/classRooAbsCategory.html,1,['Load'],['Loading']
Performance,". ROOT: RooAbsCategoryLValue Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Friends |; List of all members ; RooAbsCategoryLValue Class ReferenceabstractRooFit » RooFit Core. ; Abstract base class for objects that represent a discrete value that can be set from the outside, i.e. ; that may appear on the left hand side of an assignment (""*lvalue*"").; Each implementation must provide the functions setIndex()/setLabel() to allow direct modification of the value. RooAbsCategoryLValue may be derived, but its functional relation to other RooAbsArgs must be invertible. ; Definition at line 26 of file RooAbsCategoryLValue.h. Public Member Functions;  RooAbsCategoryLValue ();  ;  RooAbsCategoryLValue (const char *name, const char *title);  Constructor. ;  ;  RooAbsCategoryLValue (const RooAbsCategoryLValue &other, const char *name=nullptr);  Copy constructor. ;  ; Int_t getBin (const char *=nullptr) const override;  Get the index of the plot bin for the current value of this category. ;  ; Int_t getBin (const RooAbsBinning *) const override;  ; std::list< std::string > getBinningNames () const override;  ; const RooAbsBinning * getBinningPtr (const char *) const override;  ; double getBinWidth (Int_t, const char *=nullptr) const override;  ; TClass * IsA () const override;  ; bool isLValue () const override;  Is this argument an l-value, i.e., can it appear on the left-hand side of an assignment expression? LValues are also special since they can potentially be analytically integrated and generated. ;  ; Int_t numBins (const char *rangeName=nullptr) const override;  Return the number of fit bins ( = number of types ) ;  ; RooAbsArg & operator= (const char *label);  Assignment operator from string pointer. ;  ; RooAbsArg & operator= (const RooAbsCategory &other);  Assignment from another RooAbsCategory. ;  ; RooAbs",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsCategoryLValue.html:89,Load,Loading,89,doc/master/classRooAbsCategoryLValue.html,https://root.cern,https://root.cern/doc/master/classRooAbsCategoryLValue.html,1,['Load'],['Loading']
Performance,". ROOT: RooAbsCollection Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; Private Types |; Private Member Functions |; Static Private Member Functions |; Private Attributes |; List of all members ; RooAbsCollection Class ReferenceabstractRooFit » RooFit Core. ; Abstract container object that can hold multiple RooAbsArg objects. ; Collections are ordered and can contain multiple objects of the same name, (but a derived implementation can enforce unique names). The storage of objects is implemented using the container denoted by RooAbsCollection::Storage_t. PyROOT; Some member functions of RooAbsCollection that take a RooCmdArg as argument also support keyword arguments. So far, this applies to RooAbsCollection::printLatex. For example, the following code is equivalent in PyROOT: # Directly passing a RooCmdArg:; params.printLatex(ROOT.RooFit.Sibling(initParams), ROOT.RooFit.Columns(2)); ; # With keyword arguments:; params.printLatex(Sibling=initParams, Columns =2). Definition at line 65 of file RooAbsCollection.h. Classes; struct  RooAbsArgPtrOrDouble;  . Public Types; using const_iterator = Storage_t::const_iterator;  ; using Storage_t = std::vector< RooAbsArg * >;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1U",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsCollection.html:85,Load,Loading,85,doc/master/classRooAbsCollection.html,https://root.cern,https://root.cern/doc/master/classRooAbsCollection.html,1,['Load'],['Loading']
Performance,". ROOT: RooAbsCollection Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; Private Types |; Private Member Functions |; Static Private Member Functions |; Private Attributes |; List of all members ; RooAbsCollection Class ReferenceabstractRooFit » RooFit Core. ; Abstract container object that can hold multiple RooAbsArg objects. ; Collections are ordered and can contain multiple objects of the same name, (but a derived implementation can enforce unique names). The storage of objects is implemented using the container denoted by RooAbsCollection::Storage_t. PyROOT; Some member functions of RooAbsCollection that take a RooCmdArg as argument also support keyword arguments. So far, this applies to RooAbsCollection::printLatex. For example, the following code is equivalent in PyROOT: # Directly passing a RooCmdArg:; params.printLatex(ROOT.RooFit.Sibling(initParams), ROOT.RooFit.Columns(2)); ; # With keyword arguments:; params.printLatex(Sibling=initParams, Columns =2). Definition at line 65 of file RooAbsCollection.h. Classes; struct  RooAbsArgPtrOrDouble;  . Public Types; using const_iterator = Storage_t::const_iterator;  ; using Storage_t = std::vector< RooAbsArg * >;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1UL",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooAbsCollection.html:84,Load,Loading,84,doc/v632/classRooAbsCollection.html,https://root.cern,https://root.cern/doc/v632/classRooAbsCollection.html,1,['Load'],['Loading']
Performance,". ROOT: RooAbsData Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; RooAbsData Class ReferenceabstractRooFit » RooFit Core. ; Abstract base class for binned and unbinned datasets. ; The abstract interface defines plotting and tabulating entry points for its contents and provides an iterator over its elements (bins for binned data sets, data points for unbinned datasets). Storing global observables in RooFit datasets; RooFit groups model variables into observables and parameters, depending on if their values are stored in the dataset. For fits with parameter constraints, there is a third kind of variables, called global observables. These represent the results of auxiliary measurements that constrain the nuisance parameters. In the RooFit implementation, a likelihood is generally the sum of two terms:; the likelihood of the data given the parameters, where the normalization set is the set of observables (implemented by RooNLLVar); the constraint term, where the normalization set is the set of global observables (implemented by RooConstraintSum). Before this release, the global observable values were always taken from the model/pdf. With this release, a mechanism is added to store a snapshot of global observables in any RooDataSet or RooDataHist. For toy studies where the global observables assume a different values for each toy, the bookkeeping of the set of global observables and in particular their values is much easier with this change.; Usage example for a model with global observables g1 and g2: using namespace RooFit;; ; std::unique_ptr<RooAbsData> data{model.generate(x, 1000)}; // data has only the single observables x; data->setGlobalObse",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsData.html:79,Load,Loading,79,doc/master/classRooAbsData.html,https://root.cern,https://root.cern/doc/master/classRooAbsData.html,1,['Load'],['Loading']
Performance,". ROOT: RooAbsDataStore Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; RooAbsDataStore Class ReferenceabstractRooFit » RooFit Core. ; Abstract base class for a data collection. ; Definition at line 34 of file RooAbsDataStore.h. Public Member Functions;  RooAbsDataStore ();  ;  RooAbsDataStore (const RooAbsDataStore &other, const char *newname=nullptr);  ;  RooAbsDataStore (const RooAbsDataStore &other, const RooArgSet &vars, const char *newname=nullptr);  ;  RooAbsDataStore (RooStringView name, RooStringView title, const RooArgSet &vars);  ; virtual RooAbsArg * addColumn (RooAbsArg &var, bool adjustRange=true)=0;  ; RooArgSet * addColumns (const RooArgList &varList);  ; virtual void append (RooAbsDataStore &other)=0;  ; virtual void attachBuffers (const RooArgSet &extObs)=0;  ; virtual void attachCache (const RooAbsArg *newOwner, const RooArgSet &cachedVars)=0;  ; virtual void cacheArgs (const RooAbsArg *cacheOwner, RooArgSet &varSet, const RooArgSet *nset=nullptr, bool skipZeroWeights=false)=0;  ; const RooArgSet & cachedVars () const;  ; virtual const RooAbsArg * cacheOwner ()=0;  ; virtual bool changeObservableName (const char *from, const char *to)=0;  ; virtual void checkInit () const;  ; virtual RooAbsDataStore * clone (const char *newname=nullptr) const =0;  ; virtual RooAbsDataStore * clone (const RooArgSet &vars, const char *newname=nullptr) const =0;  ; int defaultPrintContents (Option_t *) const override;  Define default print options, for a given print style. ;  ; bool dirtyProp () const;  ; virtual void dump ();  ; virtual Int_t fill ()=0;  ; virtual void forceCacheUpdate ();  ; virtual const RooArgSet * get () const;  ; virtual const RooArgSet * get (Int_t index) const =0;  ; virtual RooAbsData::RealSpans getBatches (std::size_t first, std::size_t len) const =0;  Retrieve bat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsDataStore.html:84,Load,Loading,84,doc/master/classRooAbsDataStore.html,https://root.cern,https://root.cern/doc/master/classRooAbsDataStore.html,1,['Load'],['Loading']
Performance,". ROOT: RooAbsFunc Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; RooAbsFunc Class ReferenceabstractRooFit » RooFit Core. ; Abstract interface for evaluating a real-valued function of one real variable and performing numerical algorithms on it. ; The purpose of this interface is to decouple RooAbsArg-specific implementations from numerical algorithms that only need a simple function evaluation interface. The domain of the function is assumed to be an n-dimensional box with edge coordinates specified by the the getMinLimit() and getMaxLimit() methods. ; Definition at line 27 of file RooAbsFunc.h. Public Member Functions;  RooAbsFunc (const RooAbsFunc &other);  ;  RooAbsFunc (UInt_t dimension);  ; virtual ~RooAbsFunc ();  ; virtual std::list< double > * binBoundaries (Int_t) const;  ; UInt_t getDimension () const;  ; virtual double getMaxLimit (UInt_t dimension) const =0;  ; virtual double getMinLimit (UInt_t dimension) const =0;  ; virtual const char * getName () const;  Name of function binding. ;  ; virtual TClass * IsA () const;  ; bool isValid () const;  ; Int_t numCall () const;  Return number of function calls since last reset. ;  ; virtual double operator() (const double xvector[]) const =0;  ; virtual std::list< double > * plotSamplingHint (RooAbsRealLValue &, double, double) const;  Interface for returning an optional hint for initial sampling points when constructing a curve projected on observable. ;  ; void resetNumCall () const;  Reset function call counter. ;  ; virtual void restoreXVec () const;  ; virtual void saveXVec () const;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version (); ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsFunc.html:79,Load,Loading,79,doc/master/classRooAbsFunc.html,https://root.cern,https://root.cern/doc/master/classRooAbsFunc.html,2,"['Load', 'perform']","['Loading', 'performing']"
Performance,". ROOT: RooAbsGenContext Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooAbsGenContext Class ReferenceabstractRooFit » RooFit Core. ; Abstract base class for generator contexts of RooAbsPdf objects. ; A generator context is an object that controls the generation of events from a given p.d.f in one or more sessions. This class defines the common interface for all such contexts and organizes storage of common components, such as the observables definition, the prototype data etc.. ; Definition at line 26 of file RooAbsGenContext.h. Public Member Functions;  RooAbsGenContext (const RooAbsPdf &model, const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool _verbose=false);  Constructor. ;  ; virtual void attach (const RooArgSet &params);  Interface to attach given parameters to object in this context. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default contents when printing. ;  ; StyleOption defaultPrintStyle (Option_t *opt) const override;  Define default print style. ;  ; virtual RooDataSet * generate (double nEvents=0, bool skipInit=false, bool extendedMode=false);  Generate the specified number of events with nEvents>0 and and return a dataset containing the generated events. ;  ; virtual void generateEvent (RooArgSet &theEvent, Int_t remaining)=0;  ; virtual void initGenerator (const RooArgSet &theEvent);  Interface function to initialize context for generation for given set of observables. ;  ; TClass * IsA () const override;  ; bool isValid () const;  ; bool isVerbose () const;  ; void Print (Option_t *options=nullptr) const override;  This method must be overridden when a class wants to print itself. ;  ; void printArgs (std::ostream &os) const override;  Print arguments of context, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsGenContext.html:85,Load,Loading,85,doc/master/classRooAbsGenContext.html,https://root.cern,https://root.cern/doc/master/classRooAbsGenContext.html,1,['Load'],['Loading']
Performance,". ROOT: RooAbsHiddenReal Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; List of all members ; RooAbsHiddenReal Class ReferenceRooFit » RooFit Core. ; Base class for objects that want to hide their return value from interactive use, e.g. ; for implementations of parameter unblinding functions. This class overrides all printing methods with versions that do not reveal the objects value and it has a protected version of getVal() ; Definition at line 25 of file RooAbsHiddenReal.h. Public Member Functions;  RooAbsHiddenReal ();  ;  RooAbsHiddenReal (const char *name, const char *title, const char *unit="""");  Constructor. ;  ;  RooAbsHiddenReal (const char *name, const char *title, RooAbsCategory &blindState, const char *unit="""");  Constructor. ;  ;  RooAbsHiddenReal (const RooAbsHiddenReal &other, const char *name=nullptr);  Copy constructor. ;  ; double getHiddenVal (const RooArgSet *nset=nullptr) const;  ; TClass * IsA () const override;  ; bool isHidden () const;  ; void printValue (std::ostream &stream) const override;  Special version of printValue that doesn't reveal the objects value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Special version of readFromStream that disallows reading from stream. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Special version of writeToStream that disallows reading from stream. ;  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsHiddenReal.html:85,Load,Loading,85,doc/master/classRooAbsHiddenReal.html,https://root.cern,https://root.cern/doc/master/classRooAbsHiddenReal.html,1,['Load'],['Loading']
Performance,". ROOT: RooAbsMCStudyModule Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; RooAbsMCStudyModule Class ReferenceRooFit » RooFit Core. ; Base class for add-on modules to RooMCStudy that can perform additional calculations on each generate+fit cycle managed by RooMCStudy. ; This class can insert code to be executed before each generation step, between the generation and fitting step and after the fitting step. Any summary output variables declared in the RooDataSet exported through summaryData() is merged with the 'master' summary dataset in RooMCStudy.; Look at RooDLLSignificanceMCSModule for an example of an implementation. ; Definition at line 30 of file RooAbsMCStudyModule.h. Public Member Functions;  RooAbsMCStudyModule (const char *name, const char *title);  Constructor. ;  ;  RooAbsMCStudyModule (const RooAbsMCStudyModule &other);  Copy constructor. ;  ; bool doInitializeInstance (RooMCStudy &);  Initializer method called upon attachment to given RooMCStudy object. ;  ; virtual RooDataSet * finalizeRun ();  Method called at the end of each RooMCStudy run. ;  ; virtual bool initializeInstance ();  Initializer called immediately after attachment to RooMCStudy object and initialization of module base class. ;  ; virtual bool initializeRun (Int_t);  Method called at the beginning of each RooMCStudy run. ;  ; TClass * IsA () const override;  ; virtual bool processAfterFit (Int_t);  Method called after fit has been performed. ;  ; virtual bool processBeforeGen (Int_t);  Method called after resetting of generator parameters to initial values and before call to generator context Any modifications to generator parameters will affect next generation operation (only) ;  ; virtual bool processBetweenGenAndFit (Int_t);  Method called after generation of toy data sample an",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsMCStudyModule.html:88,Load,Loading,88,doc/master/classRooAbsMCStudyModule.html,https://root.cern,https://root.cern/doc/master/classRooAbsMCStudyModule.html,2,"['Load', 'perform']","['Loading', 'perform']"
Performance,". ROOT: RooAbsMoment Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; RooAbsMoment Class ReferenceRooFit » RooFit Core. . Definition at line 27 of file RooAbsMoment.h. Public Member Functions;  RooAbsMoment ()=default;  ;  RooAbsMoment (const char *name, const char *title, RooAbsReal &func, RooRealVar &x, Int_t order=1, bool takeRoot=false);  ;  RooAbsMoment (const RooAbsMoment &other, const char *name=nullptr);  ; bool central () const;  ; TClass * IsA () const override;  ; RooAbsReal * mean ();  ; Int_t order () const;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; virtual double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; virtual double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; TF1 * asTF (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a ROOT TF1,2,3 object bound to this RooAbsReal with given definition of observables and parameters. ;  ; virtual std::list< double > * binBoundari",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsMoment.html:81,Load,Loading,81,doc/master/classRooAbsMoment.html,https://root.cern,https://root.cern/doc/master/classRooAbsMoment.html,1,['Load'],['Loading']
Performance,". ROOT: RooAbsPdf Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; RooAbsPdf Class ReferenceRooFit » RooFit Core. ; Abstract interface for all probability density functions. . RooAbsPdf, the base class of all PDFs; RooAbsPdf is the base class for all probability density functions (PDFs). The class provides hybrid analytical/numerical normalization for its implementations, error tracing, and a Monte Carlo generator interface. A Minimal PDF Implementation; A minimal implementation of a PDF class derived from RooAbsPdf should override the evaluate() function. This function should return the PDF's value (which does not need to be normalised).; Normalization/Integration; Although the normalization of a PDF is an integral part of a probability density function, normalization is treated separately in RooAbsPdf. The reason is that a RooAbsPdf object is more than a PDF: it can be a building block for a more complex composite PDF if any of its variables are functions instead of variables. In such cases, the normalization of the composite PDF may not simply be integral over the dependents of the top-level PDF: these are functions with potentially non-trivial Jacobian terms themselves. NoteTherefore, no explicit attempt should be made to normalize the function output in evaluate(). In particular, normalisation constants can be omitted to speed up the function evaluations, and included later in the integration of the PDF (see below), which is rarely called in comparison to the evaluate() function.; In addition, RooAbsPdf objects do not have a static concept of what variables are parameters, and what variables are dependents (which need to be integrated over ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsPdf.html:78,Load,Loading,78,doc/master/classRooAbsPdf.html,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html,1,['Load'],['Loading']
Performance,". ROOT: RooAbsPdf::CacheElem Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; RooAbsPdf::CacheElem Class Reference. ; Normalization set with for above integral. ; Definition at line 322 of file RooAbsPdf.h. Public Member Functions;  CacheElem (RooAbsReal &norm);  ;  ~CacheElem () override;  Destructor of normalization cache element. ;  ; RooArgList containedArgs (Action) override;  ;  Public Member Functions inherited from RooAbsCacheElement;  RooAbsCacheElement ();  ; virtual ~RooAbsCacheElement ();  ; virtual void findConstantNodes (const RooArgSet &obs, RooArgSet &cacheList, RooLinkedList &processedNodes);  Interface for constant term optimization calls. ;  ; virtual TClass * IsA () const;  ; virtual void operModeHook (RooAbsArg::OperMode);  Interface for changes of operation mode. ;  ; virtual void optimizeCacheMode (const RooArgSet &obs, RooArgSet &optNodes, RooLinkedList &processedNodes);  Interface for cache optimization calls. ;  ; virtual void printCompactTreeHook (std::ostream &, const char *, Int_t curElem, Int_t totElem);  Hook function to print cache guts in tree printing mode of RooAbsArgs. ;  ; virtual bool redirectServersHook (const RooAbsCollection &, bool, bool, bool);  Interface for server redirect calls. ;  ; void setOwner (RooAbsArg *owner);  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Public Attributes; std::unique_ptr< RooAbsReal > _norm;  . Additional Inherited Members;  Public Types inherited from RooAbsCacheElement; enum  Action { OperModeChange; , OptimizeCaching; , FindConstantNodes; };  ;  Static Public Member Functions inherited from RooAbsCacheElement; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Protected Attributes inherited f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsPdf_1_1CacheElem.html:19,Cache,CacheElem,19,doc/master/classRooAbsPdf_1_1CacheElem.html,https://root.cern,https://root.cern/doc/master/classRooAbsPdf_1_1CacheElem.html,8,"['Cache', 'Load', 'cache', 'optimiz']","['CacheElem', 'Loading', 'cache', 'cacheList', 'optimization']"
Performance,". ROOT: RooAbsPdf::GenSpec Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; RooAbsPdf::GenSpec Class Reference. . Definition at line 72 of file RooAbsPdf.h. Public Member Functions;  GenSpec ()=default;  ; virtual ~GenSpec ();  ; virtual TClass * IsA () const;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Private Member Functions;  GenSpec (const GenSpec &other);  ;  GenSpec (RooAbsGenContext *context, const RooArgSet &whatVars, RooDataSet *protoData, Int_t nGen, bool extended, bool randProto, bool resampleProto, TString dsetName, bool init=false);  . Private Attributes; TString _dsetName;  ; bool _extended = false;  ; std::unique_ptr< RooAbsGenContext > _genContext;  ; bool _init = false;  ; Int_t _nGen = 0;  ; RooDataSet * _protoData = nullptr;  ; bool _randProto = false;  ; bool _resampleProto = false;  ; RooArgSet _whatVars;  . Friends; class RooAbsPdf;  . #include <RooAbsPdf.h>; Constructor & Destructor Documentation. ◆ ~GenSpec(). RooAbsPdf::GenSpec::~GenSpec ; (; ). virtualdefault . ◆ GenSpec() [1/3]. RooAbsPdf::GenSpec::GenSpec ; (; ). default . ◆ GenSpec() [2/3]. RooAbsPdf::GenSpec::GenSpec ; (; RooAbsGenContext * ; context, . const RooArgSet & ; whatVars, . RooDataSet * ; protoData, . Int_t ; nGen, . bool ; extended, . bool ; randProto, . bool ; resampleProto, . TString ; dsetName, . bool ; init = false . ). private . Definition at line 2685 of file RooAbsPdf.cxx. ◆ GenSpec() [3/3]. RooAbsPdf::GenSpec::GenSpec ; (; const GenSpec & ; other). private . Member Function Documentation. ◆ Class(). static TCla",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsPdf_1_1GenSpec.html:87,Load,Loading,87,doc/master/classRooAbsPdf_1_1GenSpec.html,https://root.cern,https://root.cern/doc/master/classRooAbsPdf_1_1GenSpec.html,1,['Load'],['Loading']
Performance,". ROOT: RooAbsProxy Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Friends |; List of all members ; RooAbsProxy Class ReferenceabstractRooFit » RooFit Core. ; Abstract interface for proxy classes. ; Proxy classes hold pointers to other Roofit objects and process serverRedirect changes so that the proxied pointers are updated accordingly on a clone or copy of of the owning class ; Definition at line 37 of file RooAbsProxy.h. Public Member Functions;  RooAbsProxy ();  ;  RooAbsProxy (const char *name, const RooAbsProxy &other);  Copy constructor. ;  ; virtual ~RooAbsProxy ();  ; virtual TClass * IsA () const;  ; virtual const char * name () const;  ; const RooArgSet * nset () const;  ; virtual void print (std::ostream &os, bool addContents=false) const;  Print proxy name. ;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Member Functions; virtual void changeNormSet (const RooArgSet *newNormSet);  Destructor. ;  ; virtual bool changePointer (const RooAbsCollection &newServerSet, bool nameChange=false, bool factoryInitMode=false)=0;  ; virtual bool changePointer (std::unordered_map< RooAbsArg *, RooAbsArg * > const &replacements)=0;  . Protected Attributes; RooArgSet * _nset = nullptr;  ! Normalization set to be used for evaluation of RooAbsPdf contents ;  . Friends; class RooAbsArg;  ; class RooAbsPdf;  . #include <RooAbsProxy.h>. Inheritance diagram for RooAbsProxy:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooAbsProxy() [1/2]. RooAbsProx",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsProxy.html:80,Load,Loading,80,doc/master/classRooAbsProxy.html,https://root.cern,https://root.cern/doc/master/classRooAbsProxy.html,1,['Load'],['Loading']
Performance,". ROOT: RooAbsReal Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; Friends |; List of all members ; RooAbsReal Class ReferenceabstractRooFit » RooFit Core. ; Abstract base class for objects that represent a real value and implements functionality common to all real-valued objects such as the ability to plot them, to construct integrals of them, the ability to advertise (partial) analytical integrals etc. ; Implementation of RooAbsReal may be derived, thus no interface is provided to modify the contents. PyROOT; Some member functions of RooAbsReal that take a RooCmdArg as argument also support keyword arguments. So far, this applies to RooAbsReal::plotOn, RooAbsReal::createHistogram, RooAbsReal::chi2FitTo, RooAbsReal::createChi2, RooAbsReal::createRunningIntegral and RooAbsReal::createIntegral For example, the following code is equivalent in PyROOT: # Directly passing a RooCmdArg:; var.plotOn(frame, ROOT.RooFit.Components(""background"")); ; # With keyword arguments:; var.plotOn(frame, Components=""background""). Definition at line 59 of file RooAbsReal.h. Classes; class  EvalError;  ; class  EvalErrorContext;  Context to temporarily change the error logging mode as long as the context is alive. More...;  ; struct  GlobalSelectComponentRAII;  ; struct  PlotOpt;  ; class  Ref;  A RooAbsReal::Ref can be constructed from a RooAbsReal& or a double that will be implicitly converted to a RooConstVar&. More...;  . Public Types; enum  ErrorLoggingMode { PrintErrors; , CollectErrors; , CountErrors; , Ignore; };  ; enum  ScaleType { Raw; , Relative; , NumEvent; , RelativeExpected; };  ; using value_type = double;  ;  Public Types inherited from RooAbsArg; enum  CacheMode { Alw",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsReal.html:79,Load,Loading,79,doc/master/classRooAbsReal.html,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html,1,['Load'],['Loading']
Performance,". ROOT: RooAbsReal Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; Friends |; List of all members ; RooAbsReal Class ReferenceabstractRooFit » RooFit Core. ; Abstract base class for objects that represent a real value and implements functionality common to all real-valued objects such as the ability to plot them, to construct integrals of them, the ability to advertise (partial) analytical integrals etc. ; Implementation of RooAbsReal may be derived, thus no interface is provided to modify the contents. PyROOT; Some member functions of RooAbsReal that take a RooCmdArg as argument also support keyword arguments. So far, this applies to RooAbsReal::plotOn, RooAbsReal::createHistogram, RooAbsReal::chi2FitTo, RooAbsReal::createChi2, RooAbsReal::createRunningIntegral and RooAbsReal::createIntegral For example, the following code is equivalent in PyROOT: # Directly passing a RooCmdArg:; var.plotOn(frame, ROOT.RooFit.Components(""background"")); ; # With keyword arguments:; var.plotOn(frame, Components=""background""). Definition at line 59 of file RooAbsReal.h. Classes; class  EvalError;  ; class  EvalErrorContext;  Context to temporarily change the error logging mode as long as the context is alive. More...;  ; struct  GlobalSelectComponentRAII;  ; struct  PlotOpt;  ; class  Ref;  A RooAbsReal::Ref can be constructed from a RooAbsReal& or a double that will be implicitly converted to a RooConstVar&. More...;  . Public Types; enum  ErrorLoggingMode { PrintErrors; , CollectErrors; , CountErrors; , Ignore; };  ; typedef std::map< constRooAbsArg *, std::pair< std::string, std::list< EvalError > > >::const_iterator EvalErrorIter;  ; enum  ScaleType { Raw; , Relative; , NumEven",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooAbsReal.html:78,Load,Loading,78,doc/v632/classRooAbsReal.html,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html,1,['Load'],['Loading']
Performance,. ROOT: RooAbsReal::EvalError Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; RooAbsReal::EvalError Class Reference. . Definition at line 307 of file RooAbsReal.h. Public Member Functions;  EvalError ();  ;  EvalError (const EvalError &other);  ; void setMessage (const char *tmp);  ; void setServerValues (const char *tmp);  . Public Attributes; std::string _msg;  ; std::string _srvval;  . #include <RooAbsReal.h>; Constructor & Destructor Documentation. ◆ EvalError() [1/2]. RooAbsReal::EvalError::EvalError ; (; ). inline . Definition at line 309 of file RooAbsReal.h. ◆ EvalError() [2/2]. RooAbsReal::EvalError::EvalError ; (; const EvalError & ; other). inline . Definition at line 310 of file RooAbsReal.h. Member Function Documentation. ◆ setMessage(). void RooAbsReal::EvalError::setMessage ; (; const char * ; tmp). inline . Definition at line 311 of file RooAbsReal.h. ◆ setServerValues(). void RooAbsReal::EvalError::setServerValues ; (; const char * ; tmp). inline . Definition at line 312 of file RooAbsReal.h. Member Data Documentation. ◆ _msg. std::string RooAbsReal::EvalError::_msg. Definition at line 313 of file RooAbsReal.h. ◆ _srvval. std::string RooAbsReal::EvalError::_srvval. Definition at line 314 of file RooAbsReal.h. Libraries for RooAbsReal::EvalError:. [legend]; The documentation for this class was generated from the following file:; roofit/roofitcore/inc/RooAbsReal.h. RooAbsRealEvalError. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:41 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsReal_1_1EvalError.html:90,Load,Loading,90,doc/master/classRooAbsReal_1_1EvalError.html,https://root.cern,https://root.cern/doc/master/classRooAbsReal_1_1EvalError.html,1,['Load'],['Loading']
Performance,". ROOT: RooAbsReal::PlotOpt Struct Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Attributes |; List of all members ; RooAbsReal::PlotOpt Struct Reference. . Definition at line 463 of file RooAbsReal.h. Public Attributes; const char * addToCurveName = nullptr;  ; double addToWgtOther = 1.0;  ; double addToWgtSelf = 1.0;  ; bool binProjData = false;  ; bool curveInvisible = false;  ; const char * curveName = nullptr;  ; const char * curveNameSuffix = """";  ; bool doeeval = false;  ; Option_t * drawOptions = ""L"";  ; double eeval = 0.0;  ; const RooFitResult * errorFR = nullptr;  ; RooFit::MPSplit interleave = RooFit::Interleave;  ; const char * normRangeName = nullptr;  ; Int_t numCPU = 1;  ; Int_t numee = 10;  ; bool postRangeFracScale = false;  ; double precision = 1e-3;  ; bool progress = false;  ; const RooAbsData * projData = nullptr;  ; const RooArgSet * projDataSet = nullptr;  ; const char * projectionRangeName = nullptr;  ; const RooArgSet * projSet = nullptr;  ; double rangeHi = 0.0;  ; double rangeLo = 0.0;  ; double scaleFactor = 1.0;  ; bool shiftToZero = false;  ; ScaleType stype = Relative;  ; RooCurve::WingMode wmode = RooCurve::Extended;  . #include <RooAbsReal.h>; Member Data Documentation. ◆ addToCurveName. const char* RooAbsReal::PlotOpt::addToCurveName = nullptr. Definition at line 481 of file RooAbsReal.h. ◆ addToWgtOther. double RooAbsReal::PlotOpt::addToWgtOther = 1.0. Definition at line 483 of file RooAbsReal.h. ◆ addToWgtSelf. double RooAbsReal::PlotOpt::addToWgtSelf = 1.0. Definition at line 482 of file RooAbsReal.h. ◆ binProjData. bool RooAbsReal::PlotOpt::binProjData = false. Definition at line 468 of file RooAbsReal.h. ◆ curveInvisible. bool RooAbsReal::PlotOpt::curveInvisible = false. Definition at line 479 of file RooAbsReal.h. ◆ curveName. const char* RooAbsReal::PlotOpt::curveName = nullptr. Definition at line 480 of file RooAbsReal.h. ◆ curveNameSuffix. const cha",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structRooAbsReal_1_1PlotOpt.html:89,Load,Loading,89,doc/master/structRooAbsReal_1_1PlotOpt.html,https://root.cern,https://root.cern/doc/master/structRooAbsReal_1_1PlotOpt.html,1,['Load'],['Loading']
Performance,". ROOT: RooAbsRealLValue Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; List of all members ; RooAbsRealLValue Class ReferenceabstractRooFit » RooFit Core. ; Abstract base class for objects that represent a real value that may appear on the left hand side of an equation ('lvalue'). ; Each implementation must provide a setVal() member to allow direct modification of the value. RooAbsRealLValue may be derived, but its functional relation to other RooAbsArg must be invertible; This class has methods that export the defined range of the lvalue, but doesn't hold its values because these limits may be derived from limits of client object. The range serve as integration range when interpreted as a observable and a boundaries when interpreted as a parameter. PyROOT; Some member functions of RooAbsRealLValue that take a RooCmdArg as argument also support keyword arguments. So far, this applies to RooAbsRealLValue::createHistogram and RooAbsRealLValue::frame. For example, the following code is equivalent in PyROOT: # Directly passing a RooCmdArg:; frame = x.frame(ROOT.RooFit.Name(""xframe""), ROOT.RooFit.Title(""RooPlot with decorations""), ROOT.RooFit.Bins(40)); ; # With keyword arguments:; frame = x.frame(Name=""xframe"", Title=""RooPlot with decorations"", Bins=40). Definition at line 31 of file RooAbsRealLValue.h. Public Member Functions;  RooAbsRealLValue ();  ;  RooAbsRealLValue (const char *name, const char *title, const char *unit="""");  Constructor. ;  ;  RooAbsRealLValue (const RooAbsRealLValue &other, const char *name=nullptr);  Copy constructor. ;  ; TH1F * createHistogram (const char *name, const char *yAxisLabel) const;  Create an empty 1D-histogram with appropriate scale and labels for this variable. ;  ; TH1F * createHistogram (const char *name, const char *yAxisLabel, const RooAbsBinning &bins) const;  Crea",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsRealLValue.html:85,Load,Loading,85,doc/master/classRooAbsRealLValue.html,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html,1,['Load'],['Loading']
Performance,". ROOT: RooAbsStudy Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Attributes |; Friends |; List of all members ; RooAbsStudy Class ReferenceabstractRooFit » RooFit Core. ; Abstract base class for RooStudyManager modules. ; Definition at line 33 of file RooAbsStudy.h. Public Member Functions;  RooAbsStudy ()=default;  ;  RooAbsStudy (const char *name, const char *title);  Constructor. ;  ;  RooAbsStudy (const RooAbsStudy &other);  Copy constructor. ;  ;  ~RooAbsStudy () override;  Destructor. ;  ; virtual bool attach (RooWorkspace &);  ; virtual RooAbsStudy * clone (const char *newname="""") const =0;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; RooLinkedList * detailedData ();  ; virtual void dump ();  ; virtual bool execute ();  ; virtual bool finalize ();  ; virtual bool initialize ();  ; TClass * IsA () const override;  ; void releaseDetailData ();  ; void storeDetailedOutput (bool flag);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; RooDataSet * summaryData ();  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer); ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsStudy.html:80,Load,Loading,80,doc/master/classRooAbsStudy.html,https://root.cern,https://root.cern/doc/master/classRooAbsStudy.html,1,['Load'],['Loading']
Performance,". ROOT: RooAddGenContext Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooAddGenContext Class ReferenceRooFit » RooFit Core. ; Efficient implementation of the generator context specific for RooAddPdf PDFs. ; The strategy of RooAddGenContext is to defer generation of each component to a dedicated generator context for that component and to randomly choose one of those context to generate an event, with a probability proportional to its associated coefficient. ; Definition at line 32 of file RooAddGenContext.h. Public Member Functions;  RooAddGenContext (const RooAddModel &model, const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool _verbose=false);  Constructor. ;  ;  RooAddGenContext (const RooAddPdf &model, const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool _verbose=false);  Constructor. ;  ; void attach (const RooArgSet &params) override;  Attach given set of variables to internal p.d.f. clone. ;  ; TClass * IsA () const override;  ; void printMultiline (std::ostream &os, Int_t content, bool verbose=false, TString indent="""") const override;  Print the details of the context. ;  ; void setProtoDataOrder (Int_t *lut) override;  Forward the setProtoDataOrder call to the component generator contexts. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsGenContext;  RooAbsGenContext (const RooAbsPdf &model, const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool _verbose=false);  Constructor. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default contents when pri",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAddGenContext.html:85,Load,Loading,85,doc/master/classRooAddGenContext.html,https://root.cern,https://root.cern/doc/master/classRooAddGenContext.html,1,['Load'],['Loading']
Performance,". ROOT: RooAddModel Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Protected Attributes |; Friends |; List of all members ; RooAddModel Class Reference. ; RooAddModel is an efficient implementation of a sum of PDFs of the form. . \[; c_1 \cdot \mathrm{PDF}_1 + c_2 \cdot \mathrm{PDF}_2 + ... + c_n \cdot \mathrm{PDF}_n; \]. or ; \[; c_1 \cdot \mathrm{PDF}_1 + c_2 \cdot \mathrm{PDF}_2 + ... + \left( 1-\sum_{i=1}^{n-1} c_i \right) \cdot \mathrm{PDF}_n; \]. The first form is for extended likelihood fits, where the expected number of events is \( \sum_i c_i \). The coefficients \( c_i \) can either be explicitly provided, or, if all components support extended likelihood fits, they can be calculated from the contribution of each PDF to the total number of expected events.; In the second form, the sum of the coefficients is enforced to be one, and the coefficient of the last PDF is calculated from that condition.; RooAddModel relies on each component PDF to be normalized, and will perform no normalization other than calculating the proper last coefficient \( c_n \), if requested. An (enforced) condition for this assumption is that each \( \mathrm{PDF}_i \) is independent of each coefficient \( i \). ; Definition at line 27 of file RooAddModel.h. Classes; class  IntCacheElem;  . Public Member Functions;  RooAddModel ();  ;  RooAddModel (const char *name, const char *title, const RooArgList &pdfList, const RooArgList &coefList, bool ownPdfList=false);  Generic constructor from list of PDFs and list of coefficients. ;  ;  RooAddModel (const RooAddModel &other, const char *name=nullptr);  Copy constructor. ;  ; double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Return analytical integral defined by given scenario code. ;  ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAddModel.html:80,Load,Loading,80,doc/master/classRooAddModel.html,https://root.cern,https://root.cern/doc/master/classRooAddModel.html,1,['Load'],['Loading']
Performance,". ROOT: RooAddPdf Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; RooAddPdf Class ReferenceRooFit » RooFit Core. ; Efficient implementation of a sum of PDFs of the form. . \[; \sum_{i=1}^{n} c_i \cdot \mathrm{PDF}_i; \]. or ; \[; c_1\cdot\mathrm{PDF}_1 + c_2\cdot\mathrm{PDF}_2 \; + \; ... \; + \; \left( 1-\sum_{i=1}^{n-1}c_i \right) \cdot \mathrm{PDF}_n; \]. The first form is for extended likelihood fits, where the expected number of events is \( \sum_i c_i \). The coefficients \( c_i \) can either be explicitly provided, or, if all components support extended likelihood fits, they can be calculated from the contribution of each PDF to the total expected number of events.; In the second form, the sum of the coefficients is required to be 1 or less, and the coefficient of the last PDF is calculated automatically from the condition that the sum of all coefficients has to be 1. Recursive coefficients; It is also possible to parameterise the coefficients recursively. \[; \sum_{i=1}^n c_i \prod_{j=1}^{i-1} \left[ (1-c_j) \right] \cdot \mathrm{PDF}_i \\; = c_1 \cdot \mathrm{PDF}_1 + (1-c_1)\, c_2 \cdot \mathrm{PDF}_2 + \ldots + (1-c_1)\ldots(1-c_{n-1}) \cdot 1 \cdot \mathrm{PDF}_n \\; \]. In this form the sum of the coefficients is always less than 1.0 for all possible values of the individual coefficients between 0 and 1. NoteDon't pass the \( n^\mathrm{th} \) coefficient. It is always 1, since the normalisation condition removes one degree of freedom.; RooAddPdf relies on each component PDF to be normalized and will perform no normalization other than calculating the proper last coefficient \( c_n \), if requested. An (enforced) condition for this assumption is that each \( \mathrm{PDF}_i \) is independen",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAddPdf.html:78,Load,Loading,78,doc/master/classRooAddPdf.html,https://root.cern,https://root.cern/doc/master/classRooAddPdf.html,1,['Load'],['Loading']
Performance,". ROOT: RooAddPdf Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; RooAddPdf Class ReferenceRooFit » RooFit Core. ; Efficient implementation of a sum of PDFs of the form. . \[; \sum_{i=1}^{n} c_i \cdot \mathrm{PDF}_i; \]. or ; \[; c_1\cdot\mathrm{PDF}_1 + c_2\cdot\mathrm{PDF}_2 \; + \; ... \; + \; \left( 1-\sum_{i=1}^{n-1}c_i \right) \cdot \mathrm{PDF}_n; \]. The first form is for extended likelihood fits, where the expected number of events is \( \sum_i c_i \). The coefficients \( c_i \) can either be explicitly provided, or, if all components support extended likelihood fits, they can be calculated from the contribution of each PDF to the total expected number of events.; In the second form, the sum of the coefficients is required to be 1 or less, and the coefficient of the last PDF is calculated automatically from the condition that the sum of all coefficients has to be 1. Recursive coefficients; It is also possible to parameterise the coefficients recursively. \[; \sum_{i=1}^n c_i \prod_{j=1}^{i-1} \left[ (1-c_j) \right] \cdot \mathrm{PDF}_i \\; = c_1 \cdot \mathrm{PDF}_1 + (1-c_1)\, c_2 \cdot \mathrm{PDF}_2 + \ldots + (1-c_1)\ldots(1-c_{n-1}) \cdot 1 \cdot \mathrm{PDF}_n \\; \]. In this form the sum of the coefficients is always less than 1.0 for all possible values of the individual coefficients between 0 and 1. NoteDon't pass the \( n^\mathrm{th} \) coefficient. It is always 1, since the normalisation condition removes one degree of freedom.; RooAddPdf relies on each component PDF to be normalized and will perform no normalization other than calculating the proper last coefficient \( c_n \), if requested. An (enforced) condition for this assumption is that each \( \mathrm{PDF}_i \) is independent",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooAddPdf.html:77,Load,Loading,77,doc/v632/classRooAddPdf.html,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html,1,['Load'],['Loading']
Performance,". ROOT: RooAddition Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooAddition Class ReferenceRooFit » RooFit Core. ; Calculates the sum of a set of RooAbsReal terms, or when constructed with two sets, it sums the product of the terms in the two sets. ; Definition at line 27 of file RooAddition.h. Classes; class  CacheElem;  . Public Member Functions;  RooAddition ();  ;  RooAddition (const char *name, const char *title, const RooArgList &sumSet);  Constructor with a single set consisting of RooAbsReal. ;  ;  RooAddition (const char *name, const char *title, const RooArgList &sumSet1, const RooArgList &sumSet2);  Constructor with two sets of RooAbsReals. ;  ;  RooAddition (const RooAddition &other, const char *name=nullptr);  Copy constructor. ;  ; double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const override;  Calculate integral internally from appropriate integral cache. ;  ; std::list< double > * binBoundaries (RooAbsRealLValue &, double, double) const override;  Retrieve bin boundaries if this distribution is binned in obs. ;  ; TObject * clone (const char *newname) const override;  ; double defaultErrorLevel () const override;  Return the default error level for MINUIT error analysis If the addition contains one or more RooNLLVars and no RooChi2Vars, return the defaultErrorLevel() of RooNLLVar. ;  ; void doEval (RooFit::EvalContext &) const override;  Compute addition of PDFs in batches. ;  ; bool forceAnalyticalInt (const RooAbsArg &) const override;  ; Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &numVars, const char *rangeName=nullptr) const override;  Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ;  ; TClass * IsA () const override;  ; bool isBinnedDist",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAddition.html:80,Load,Loading,80,doc/master/classRooAddition.html,https://root.cern,https://root.cern/doc/master/classRooAddition.html,2,"['Cache', 'Load']","['CacheElem', 'Loading']"
Performance,". ROOT: RooArgList Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; List of all members ; RooArgList Class Reference. ; RooArgList is a container object that can hold multiple RooAbsArg objects. ; The container has list semantics which means that:. Contained objects are ordered, The iterator follows the object insertion order.; Objects can be retrieved by name and index; Multiple objects with the same name are allowed. Ownership of contents.; Unowned objects are inserted with the add() method. Owned objects are added with addOwned() or addClone(). A RooArgSet either owns all of it contents, or none, which is determined by the first <add> call. Once an ownership status is selected, inappropriate <add> calls will return error status. Clearing the list via removeAll() resets the ownership status. Arguments supplied in the constructor are always added as unowned elements. ; Definition at line 22 of file RooArgList.h. Public Member Functions;  RooArgList ();  Default constructor. ;  ;  RooArgList (const char *name);  Empty list constructor. ;  ;  RooArgList (const RooAbsCollection &coll);  Constructor from another RooAbsCollection. ;  ;  RooArgList (const RooArgList &other, const char *name="""");  Copy constructor. ;  ;  RooArgList (const TCollection &tcoll, const char *name="""");  Constructor from a root TCollection. ;  ; template<typename... Args_t> ;  RooArgList (double arg, Args_t &&... moreArgsOrName);  ; template<typename Iterator_t , typename value_type = typename std::remove_pointer<typename std::iterator_traits<Iterator_t>::value_type>, typename = std::enable_if<std::is_convertible<const value_type*, const RooAbsArg*>::value>> ;  RooArgList (Iterator_t beginIt, Iterator_t endIt, const char *name="""");  Construct from iterators. ;  ; template<typename... Args_t> ;  RooArgList (Ro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooArgList.html:79,Load,Loading,79,doc/master/classRooArgList.html,https://root.cern,https://root.cern/doc/master/classRooArgList.html,1,['Load'],['Loading']
Performance,". ROOT: RooArgProxy Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Friends |; List of all members ; RooArgProxy Class ReferenceRooFit » RooFit Core. ; Abstract interface for RooAbsArg proxy classes. ; A RooArgProxy is the general mechanism to store references to other RooAbsArgs inside a RooAbsArg.; Creating a RooArgProxy adds the proxied object to the proxy owners server list (thus receiving value/shape dirty flags from it) and registers itself with the owning class. The latter allows the owning class to change the proxied pointer when the server it points to gets redirected (e.g. in a copy or clone operation). ; Definition at line 24 of file RooArgProxy.h. Public Member Functions;  RooArgProxy ()=default;  Default constructor. ;  ;  RooArgProxy (const char *name, const char *desc, RooAbsArg *owner, bool valueServer, bool shapeServer, bool proxyOwnsArg=false);  Constructor with owner and proxied variable. ;  ;  RooArgProxy (const char *name, const char *desc, RooAbsArg *owner, RooAbsArg &arg, bool valueServer, bool shapeServer, bool proxyOwnsArg=false);  Constructor with owner and proxied variable. ;  ;  RooArgProxy (const char *name, RooAbsArg *owner, const RooArgProxy &other);  Copy constructor. ;  ;  RooArgProxy (RooArgProxy &&other)=delete;  ;  RooArgProxy (RooArgProxy const &other)=delete;  ;  ~RooArgProxy () override;  Destructor. ;  ; RooAbsArg * absArg () const;  Return pointer to contained argument. ;  ; TClass * IsA () const override;  ; bool isShapeServer () const;  Returns true if contents is shape server of owner. ;  ; bool isValueServer () const;  Returns true of contents is value server of owner. ;  ; const char * name () const override;  Return name of proxy. ;  ; RooArgProxy & operator= (RooArgProxy &&other)=delete;  ; RooArgProxy & operator= (RooArgProxy const &o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooArgProxy.html:80,Load,Loading,80,doc/master/classRooArgProxy.html,https://root.cern,https://root.cern/doc/master/classRooArgProxy.html,1,['Load'],['Loading']
Performance,". ROOT: RooArgSet Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; List of all members ; RooArgSet Class Reference. ; RooArgSet is a container object that can hold multiple RooAbsArg objects. ; The container has set semantics which means that:. Every object it contains must have a unique name returned by GetName().; Contained objects are not ordered, although the set can be traversed using an iterator returned by createIterator(). The iterator does not necessarily follow the object insertion order.; Objects can be retrieved by name only, and not by index. Ownership of contents; Unowned objects are inserted with the add() method. Owned objects are added with addOwned() or addClone(). A RooArgSet either owns all of it contents, or none, which is determined by the first add call. Once an ownership status is selected, inappropriate add calls will return error status. Clearing the list via removeAll() resets the ownership status. Arguments supplied in the constructor are always added as unowned elements. Uniquely identifying RooArgSet objects; WarningBefore v6.28, it was ensured that no RooArgSet objects on the heap were located at an address that had already been used for a RooArgSet before. With v6.28, this is not guaranteed anymore. Hence, if your code uses pointer comparisons to uniquely identify RooArgSet instances, please consider using the new RooArgSet::uniqueId(). ; Definition at line 24 of file RooArgSet.h. Public Member Functions;  RooArgSet ();  Default constructor. ;  ;  RooArgSet (const char *name);  Empty set constructor. ;  ; template<typename... Args_t> ;  RooArgSet (const RooAbsArg &arg, Args_t &&... moreArgsOrName);  Construct a (non-owning) RooArgSet from one or more RooFit objects. ;  ;  RooArgSet (const RooAbsCollection &coll);  Constructor from a RooArgList. ;  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooArgSet.html:78,Load,Loading,78,doc/master/classRooArgSet.html,https://root.cern,https://root.cern/doc/master/classRooArgSet.html,1,['Load'],['Loading']
Performance,". ROOT: RooArgusBG Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooArgusBG Class ReferenceRooFit » RooFit. ; RooArgusBG is a RooAbsPdf implementation describing the ARGUS background shape. . \[; \mathrm{Argus}(m, m_0, c, p) = \mathcal{N} \cdot m \cdot \left[ 1 - \left( \frac{m}{m_0} \right)^2 \right]^p; \cdot \exp\left[ c \cdot \left(1 - \left(\frac{m}{m_0}\right)^2 \right) \right]; \]. Definition at line 22 of file RooArgusBG.h. Public Member Functions;  RooArgusBG ();  ;  RooArgusBG (const char *name, const char *title, RooAbsReal &_m, RooAbsReal &_m0, RooAbsReal &_c);  ;  RooArgusBG (const char *name, const char *title, RooAbsReal &_m, RooAbsReal &_m0, RooAbsReal &_c, RooAbsReal &_p);  ;  RooArgusBG (const char *name, const char *title, RooAbsReal::Ref _m, RooAbsReal::Ref _m0, RooAbsReal::Ref _c, RooAbsReal::Ref _p=0.5);  Constructor. ;  ;  RooArgusBG (const RooArgusBG &other, const char *name=nullptr);  Constructor. ;  ; double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const override;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; TObject * clone (const char *newname) const override;  ; Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const override;  Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsPdf;  RooAbsPdf ();  Default constructor. ;  ;  RooAbsPdf (const char *name, const char *title, double minVal, double maxVal);  Constructor with name, title, and plot range. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooArgusBG.html:79,Load,Loading,79,doc/master/classRooArgusBG.html,https://root.cern,https://root.cern/doc/master/classRooArgusBG.html,1,['Load'],['Loading']
Performance,". ROOT: RooBCPEffDecay Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; RooBCPEffDecay Class ReferenceRooFit » RooFit. ; PDF describing decay time distribution of B meson including effects of standard model CP violation. ; This function can be analytically convolved with any RooResolutionModel implementation. ; Definition at line 23 of file RooBCPEffDecay.h. Public Types; enum  DecayType { SingleSided; , DoubleSided; , Flipped; };  ;  Public Types inherited from RooAbsPdf; enum  ExtendMode { CanNotBeExtended; , CanBeExtended; , MustBeExtended; };  ;  Public Types inherited from RooAbsReal; enum  ErrorLoggingMode { PrintErrors; , CollectErrors; , CountErrors; , Ignore; };  ; enum  ScaleType { Raw; , Relative; , NumEvent; , RelativeExpected; };  ; using value_type = double;  ;  Public Types inherited from RooAbsArg; enum  CacheMode { Always =0; , NotAdvised =1; , Never =2; };  ; enum  ConstOpCode { Activate =0; , DeActivate =1; , ConfigChange =2; , ValueChange =3; };  ; enum  OperMode { Auto =0; , AClean =1; , ADirty =2; };  ; using RefCountList_t = RooSTLRefCountList< RooAbsArg >;  ; using RefCountListLegacyIterator_t = TIteratorToSTLInterface< RefCountList_t::Container_t >;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObjec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBCPEffDecay.html:83,Load,Loading,83,doc/master/classRooBCPEffDecay.html,https://root.cern,https://root.cern/doc/master/classRooBCPEffDecay.html,1,['Load'],['Loading']
Performance,". ROOT: RooBCPGenDecay Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; RooBCPGenDecay Class ReferenceRooFit » RooFit. ; Implement standard CP physics model with S and C (no mention of lambda) Suitably stolen and modified from RooBCPEffDecay. ; Definition at line 23 of file RooBCPGenDecay.h. Public Types; enum  DecayType { SingleSided; , DoubleSided; , Flipped; };  ;  Public Types inherited from RooAbsPdf; enum  ExtendMode { CanNotBeExtended; , CanBeExtended; , MustBeExtended; };  ;  Public Types inherited from RooAbsReal; enum  ErrorLoggingMode { PrintErrors; , CollectErrors; , CountErrors; , Ignore; };  ; enum  ScaleType { Raw; , Relative; , NumEvent; , RelativeExpected; };  ; using value_type = double;  ;  Public Types inherited from RooAbsArg; enum  CacheMode { Always =0; , NotAdvised =1; , Never =2; };  ; enum  ConstOpCode { Activate =0; , DeActivate =1; , ConfigChange =2; , ValueChange =3; };  ; enum  OperMode { Auto =0; , AClean =1; , ADirty =2; };  ; using RefCountList_t = RooSTLRefCountList< RooAbsArg >;  ; using RefCountListLegacyIterator_t = TIteratorToSTLInterface< RefCountList_t::Container_t >;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintabl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBCPGenDecay.html:83,Load,Loading,83,doc/master/classRooBCPGenDecay.html,https://root.cern,https://root.cern/doc/master/classRooBCPGenDecay.html,2,"['Cache', 'Load']","['CacheMode', 'Loading']"
Performance,". ROOT: RooBDecay Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; RooBDecay Class ReferenceRooFit » RooFit. ; Most general description of B decay time distribution with effects of CP violation, mixing and life time differences. ; This function can be analytically convolved with any RooResolutionModel implementation. ; Definition at line 24 of file RooBDecay.h. Public Types; enum  DecayType { SingleSided; , DoubleSided; , Flipped; };  ;  Public Types inherited from RooAbsPdf; enum  ExtendMode { CanNotBeExtended; , CanBeExtended; , MustBeExtended; };  ;  Public Types inherited from RooAbsReal; enum  ErrorLoggingMode { PrintErrors; , CollectErrors; , CountErrors; , Ignore; };  ; enum  ScaleType { Raw; , Relative; , NumEvent; , RelativeExpected; };  ; using value_type = double;  ;  Public Types inherited from RooAbsArg; enum  CacheMode { Always =0; , NotAdvised =1; , Never =2; };  ; enum  ConstOpCode { Activate =0; , DeActivate =1; , ConfigChange =2; , ValueChange =3; };  ; enum  OperMode { Auto =0; , AClean =1; , ADirty =2; };  ; using RefCountList_t = RooSTLRefCountList< RooAbsArg >;  ; using RefCountListLegacyIterator_t = TIteratorToSTLInterface< RefCountList_t::Container_t >;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidOb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBDecay.html:78,Load,Loading,78,doc/master/classRooBDecay.html,https://root.cern,https://root.cern/doc/master/classRooBDecay.html,1,['Load'],['Loading']
Performance,". ROOT: RooBMixDecay Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; RooBMixDecay Class ReferenceRooFit » RooFit. ; Class RooBMixDecay is a RooAbsAnaConvPdf implementation that describes the decay of B mesons with the effects of B0/B0bar mixing. ; This function can be analytically convolved with any RooResolutionModel implementation ; Definition at line 23 of file RooBMixDecay.h. Public Types; enum  DecayType { SingleSided; , DoubleSided; , Flipped; };  ;  Public Types inherited from RooAbsPdf; enum  ExtendMode { CanNotBeExtended; , CanBeExtended; , MustBeExtended; };  ;  Public Types inherited from RooAbsReal; enum  ErrorLoggingMode { PrintErrors; , CollectErrors; , CountErrors; , Ignore; };  ; enum  ScaleType { Raw; , Relative; , NumEvent; , RelativeExpected; };  ; using value_type = double;  ;  Public Types inherited from RooAbsArg; enum  CacheMode { Always =0; , NotAdvised =1; , Never =2; };  ; enum  ConstOpCode { Activate =0; , DeActivate =1; , ConfigChange =2; , ValueChange =3; };  ; enum  OperMode { Auto =0; , AClean =1; , ADirty =2; };  ; using RefCountList_t = RooSTLRefCountList< RooAbsArg >;  ; using RefCountListLegacyIterator_t = TIteratorToSTLInterface< RefCountList_t::Container_t >;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBMixDecay.html:81,Load,Loading,81,doc/master/classRooBMixDecay.html,https://root.cern,https://root.cern/doc/master/classRooBMixDecay.html,1,['Load'],['Loading']
Performance,". ROOT: RooBernstein Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; RooBernstein Class ReferenceRooFit » RooFit. ; Bernstein basis polynomials are positive-definite in the range [0,1]. ; In this implementation, we extend [0,1] to be the range of the parameter. There are n+1 Bernstein basis polynomials of degree n: ; \[; B_{i,n}(x) = \begin{pmatrix}n \\\ i \end{pmatrix} x^i \cdot (1-x)^{n-i}; \]. Thus, by providing n coefficients that are positive-definite, there is a natural way to have well-behaved polynomial PDFs. For any n, the n+1 polynomials 'form a partition of unity', i.e., they sum to one for all values of x. They can be used as a basis to span the space of polynomials with degree n or less: ; \[; PDF(x, c_0, ..., c_n) = \mathcal{N} \cdot \sum_{i=0}^{n} c_i \cdot B_{i,n}(x).; \]. By giving n+1 coefficients in the constructor, this class constructs the n+1 polynomials of degree n, and sums them to form an element of the space of polynomials of degree n. \( \mathcal{N} \) is a normalisation constant that takes care of the cases where the \( c_i \) are not all equal to one.; See also http://www.idav.ucdavis.edu/education/CAGDNotes/Bernstein-Polynomials.pdf ; Definition at line 22 of file RooBernstein.h. Public Member Functions;  RooBernstein ()=default;  ;  RooBernstein (const char *name, const char *title, RooAbsRealLValue &_x, const RooArgList &_coefList);  ;  RooBernstein (const RooBernstein &other, const char *name=nullptr);  ; double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const override;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; std::string buildCallToAnalyticIntegral (Int_t code, const char *rangeName, RooFit::Detail::CodeSquashContext &ctx) const override;  This function defines the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBernstein.html:81,Load,Loading,81,doc/master/classRooBernstein.html,https://root.cern,https://root.cern/doc/master/classRooBernstein.html,1,['Load'],['Loading']
Performance,". ROOT: RooBifurGauss Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooBifurGauss Class ReferenceRooFit » RooFit. ; Bifurcated Gaussian p.d.f with different widths on left and right side of maximum value. ; Definition at line 22 of file RooBifurGauss.h. Public Member Functions;  RooBifurGauss ();  ;  RooBifurGauss (const char *name, const char *title, RooAbsReal &_x, RooAbsReal &_mean, RooAbsReal &_sigmaL, RooAbsReal &_sigmaR);  ;  RooBifurGauss (const RooBifurGauss &other, const char *name=nullptr);  ; double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const override;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; std::string buildCallToAnalyticIntegral (Int_t code, const char *rangeName, RooFit::Detail::CodeSquashContext &ctx) const override;  This function defines the analytical integral translation for the class. ;  ; TObject * clone (const char *newname) const override;  ; Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const override;  Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void translate (RooFit::Detail::CodeSquashContext &ctx) const override;  This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ;  ;  Public Member Functions inherited from RooAbsPdf;  RooAbsPdf ();  Default constructor. ;  ;  RooAbsPdf (const char *name, const char *title, double minVal, double maxVal);  Constructor with name, title, and plot range. ;  ;  RooAbsPdf",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBifurGauss.html:82,Load,Loading,82,doc/master/classRooBifurGauss.html,https://root.cern,https://root.cern/doc/master/classRooBifurGauss.html,1,['Load'],['Loading']
Performance,". ROOT: RooBinSamplingPdf Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; RooBinSamplingPdf Class Reference. ; The RooBinSamplingPdf is supposed to be used as an adapter between a continuous PDF and a binned distribution. ; When RooFit is used to fit binned data, and the PDF is continuous, it takes the probability density at the bin centre as a proxy for the probability averaged (integrated) over the entire bin. This is correct only if the second derivative of the function vanishes, though. This is shown in the plots below.; For PDFs that have larger curvatures, the RooBinSamplingPdf can be used. It integrates the PDF in each bin using an adaptive integrator. This usually requires 21 times more function evaluations, but significantly reduces biases due to better sampling of the PDF. The integrator can be accessed from the outside using integrator(). This can be used to change the integration rules, so less/more function evaluations are performed. The target precision of the integrator can be set in the constructor. How to use it; There are two ways to use this class:; Manually wrap a PDF: RooBinSamplingPdf binSampler(""<name>"", ""title"", <binned observable of PDF>, <original PDF> [, <precision for integrator>]);; binSampler.fitTo(data);; dataOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void dataDefinition TGWin32VirtualXProxy.cxx:104; RooBinSamplingPdfThe RooBinSamplingPdf is supposed to be used as an adapter between a continuous PDF and a binned dist...Definition RooBinSamplingPdf.h:28; RooBinSamplingPdf::integratorstd::unique_ptr< ROOT::Math::IntegratorOneDim > & integrator() constDirect access to the unique_ptr holding",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBinSamplingPdf.html:86,Load,Loading,86,doc/master/classRooBinSamplingPdf.html,https://root.cern,https://root.cern/doc/master/classRooBinSamplingPdf.html,1,['Load'],['Loading']
Performance,". ROOT: RooBinWidthFunction Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; RooBinWidthFunction Class ReferenceRooFit » RooFit Core. ; Returns the bin width (or volume) given a RooHistFunc. ; It can be used to normalise by bin width or to compute event densities. Using the extra argument of the constructor, it can also return the inverse of the bin width (or volume). ; Definition at line 25 of file RooBinWidthFunction.h. Public Member Functions;  RooBinWidthFunction ();  Create an empty instance. ;  ;  RooBinWidthFunction (const char *name, const char *title, const RooHistFunc &histFunc, bool divideByBinWidth);  Create an instance. ;  ;  RooBinWidthFunction (const RooBinWidthFunction &other, const char *newname=nullptr);  Copy an existing object. ;  ; std::list< double > * binBoundaries (RooAbsRealLValue &obs, double xlo, double xhi) const override;  Return bin boundaries of internal RooHistFunc. ;  ; TObject * clone (const char *newname=nullptr) const override;  Copy the object and return as TObject*. ;  ; std::unique_ptr< RooAbsArg > compileForNormSet (RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const override;  ; bool divideByBinWidth () const;  ; void doEval (RooFit::EvalContext &) const override;  Compute bin index for all values of the observable(s) in evalData, and return their volumes or inverse volumes, depending on the configuration chosen in the constructor. ;  ; double evaluate () const override;  Compute current bin of observable, and return its volume or inverse volume, depending on configuration chosen in the constructor. ;  ; const RooHistFunc & histFunc () const;  ; TClass * IsA () const override;  ; bool isBinnedDistribution (const RooArgSet &obs) const override;  Test if internal RooHistFunc is binned. ;  ; std::list< double >",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBinWidthFunction.html:88,Load,Loading,88,doc/master/classRooBinWidthFunction.html,https://root.cern,https://root.cern/doc/master/classRooBinWidthFunction.html,1,['Load'],['Loading']
Performance,". ROOT: RooBinnedGenContext Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooBinnedGenContext Class ReferenceRooFit » RooFit Core. ; Efficient implementation of the generator context specific for binned pdfs. ; Definition at line 26 of file RooBinnedGenContext.h. Public Member Functions;  RooBinnedGenContext (const RooAbsPdf &model, const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool _verbose=false);  Constructor. ;  ;  ~RooBinnedGenContext () override;  ; void attach (const RooArgSet &params) override;  Attach given set of variables to internal p.d.f. clone. ;  ; RooDataSet * generate (double nEvents=0.0, bool skipInit=false, bool extendedMode=false) override;  Generate the specified number of events with nEvents>0 and and return a dataset containing the generated events. ;  ; TClass * IsA () const override;  ; void printMultiline (std::ostream &os, Int_t content, bool verbose=false, TString indent="""") const override;  Print the details of the context. ;  ; void setExpectedData (bool) override;  ; void setProtoDataOrder (Int_t *) override;  Set the traversal order of prototype data to that in the lookup tables passed as argument. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsGenContext;  RooAbsGenContext (const RooAbsPdf &model, const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool _verbose=false);  Constructor. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default contents when printing. ;  ; StyleOption defaultPrintStyle (Option_t *opt) const override;  Define default print style. ;  ; bool isV",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBinnedGenContext.html:88,Load,Loading,88,doc/master/classRooBinnedGenContext.html,https://root.cern,https://root.cern/doc/master/classRooBinnedGenContext.html,1,['Load'],['Loading']
Performance,". ROOT: RooBinning Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooBinning Class ReferenceRooFit » RooFit Core. ; Implements a RooAbsBinning in terms of an array of boundary values, posing no constraints on the choice of binning, thus allowing variable bin sizes. ; Various methods allow the user to add single bin boundaries, mirrored pairs, or sets of uniformly spaced boundaries. ; Definition at line 27 of file RooBinning.h. Public Member Functions;  RooBinning (const RooBinning &other, const char *name=nullptr);  Copy constructor. ;  ;  RooBinning (double xlo=-RooNumber::infinity(), double xhi=RooNumber::infinity(), const char *name=nullptr);  Constructor for an initially empty binning defining the range [xlo,xhi]. ;  ;  RooBinning (Int_t nBins, const double *boundaries, const char *name=nullptr);  Constructor for a binning in the range[xlo,xhi] with 'nbins' bin boundaries listed array 'boundaries'. ;  ;  RooBinning (Int_t nBins, double xlo, double xhi, const char *name=nullptr);  Constructor for a uniform binning in 'nbins' bins in the range [xlo,xhi]. ;  ;  ~RooBinning () override;  Destructor. ;  ; bool addBoundary (double boundary);  Add bin boundary at given value. ;  ; void addBoundaryPair (double boundary, double mirrorPoint=0);  Add pair of boundaries: one at 'boundary' and one at 2*mirrorPoint-boundary. ;  ; void addUniform (Int_t nBins, double xlo, double xhi);  Add array of nbins uniformly sized bins in range [xlo,xhi]. ;  ; double * array () const override;  Return array of boundary values. ;  ; double averageBinWidth () const override;  Return the average bin width. ;  ; double binCenter (Int_t bin) const override;  Return the position of the center of bin 'bin'. ;  ; double binHigh (Int_t bin) const override;  Return the upper bound of the req",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBinning.html:79,Load,Loading,79,doc/master/classRooBinning.html,https://root.cern,https://root.cern/doc/master/classRooBinning.html,1,['Load'],['Loading']
Performance,". ROOT: RooBinningCategory Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooBinningCategory Class ReferenceRooFit » RooFit Core. ; Provides a real-to-category mapping defined by a series of thresholds. ; It evaluates the value of inputVar passed in the constructor, and converts this into a bin number using a binning defined for the inputVar. The name of this binning is passed in the constructor. ; Definition at line 23 of file RooBinningCategory.h. Public Member Functions;  RooBinningCategory ()=default;  ;  RooBinningCategory (const char *name, const char *title, RooAbsRealLValue &inputVar, const char *binningName=nullptr, const char *catTypeName=nullptr);  Constructor with input function to be mapped and name and index of default output state of unmapped values. ;  ;  RooBinningCategory (const RooBinningCategory &other, const char *name=nullptr);  Copy constructor. ;  ; TObject * clone (const char *newname) const override;  ; TClass * IsA () const override;  ; void printMultiline (std::ostream &os, Int_t content, bool verbose=false, TString indent="""") const override;  Printing interface (human readable) ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsCategory;  RooAbsCategory ();  ;  RooAbsCategory (const char *name, const char *title);  Constructor. ;  ;  RooAbsCategory (const RooAbsCategory &other, const char *name=nullptr);  Copy constructor, copies the registered category states from the original. ;  ;  ~RooAbsCategory () override;  Destructor. ;  ; std::map< std::string, value_type >::const_iterator begin () const;  Iterator for category state names. Points to pairs of index and name. ;  ; RooFit::OwningPtr< R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBinningCategory.html:87,Load,Loading,87,doc/master/classRooBinningCategory.html,https://root.cern,https://root.cern/doc/master/classRooBinningCategory.html,1,['Load'],['Loading']
Performance,". ROOT: RooBreitWigner Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooBreitWigner Class ReferenceRooFit » RooFit. ; Class RooBreitWigner is a RooAbsPdf implementation that models a non-relativistic Breit-Wigner shape. ; Definition at line 25 of file RooBreitWigner.h. Public Member Functions;  RooBreitWigner ();  ;  RooBreitWigner (const char *name, const char *title, RooAbsReal &_x, RooAbsReal &_mean, RooAbsReal &_width);  ;  RooBreitWigner (const RooBreitWigner &other, const char *name=nullptr);  ; double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const override;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; TObject * clone (const char *newname) const override;  ; Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const override;  Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsPdf;  RooAbsPdf ();  Default constructor. ;  ;  RooAbsPdf (const char *name, const char *title, double minVal, double maxVal);  Constructor with name, title, and plot range. ;  ;  RooAbsPdf (const char *name, const char *title=nullptr);  Constructor with name and title only. ;  ;  ~RooAbsPdf () override;  Destructor. ;  ; double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Analytical integral with normalization (see RooAbsReal::analyticalIntegralWN() for further information). ;  ; virtual RooAbsGenContext * autoGenContext (const RooArgSet",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBreitWigner.html:83,Load,Loading,83,doc/master/classRooBreitWigner.html,https://root.cern,https://root.cern/doc/master/classRooBreitWigner.html,1,['Load'],['Loading']
Performance,". ROOT: RooBukinPdf Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooBukinPdf Class ReferenceRooFit » RooFit. ; The RooBukinPdf implements the NovosibirskA function. ; For the parameters, see RooBukinPdf().; Credits: May 26, 2003. A.Bukin, Budker INP, Novosibirsk. http://www.slac.stanford.edu/BFROOT/www/Organization/CollabMtgs/2003/detJuly2003/Tues3a/bukin.ps ; Definition at line 29 of file RooBukinPdf.h. Public Member Functions;  RooBukinPdf ();  ;  RooBukinPdf (const char *name, const char *title, RooAbsReal &_x, RooAbsReal &_Xp, RooAbsReal &_sigp, RooAbsReal &_xi, RooAbsReal &_rho1, RooAbsReal &_rho2);  Construct a Bukin PDF. ;  ;  RooBukinPdf (const RooBukinPdf &other, const char *name=nullptr);  Copy a Bukin PDF. ;  ; TObject * clone (const char *newname) const override;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsPdf;  RooAbsPdf ();  Default constructor. ;  ;  RooAbsPdf (const char *name, const char *title, double minVal, double maxVal);  Constructor with name, title, and plot range. ;  ;  RooAbsPdf (const char *name, const char *title=nullptr);  Constructor with name and title only. ;  ;  ~RooAbsPdf () override;  Destructor. ;  ; double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Analytical integral with normalization (see RooAbsReal::analyticalIntegralWN() for further information). ;  ; virtual RooAbsGenContext * autoGenContext (const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false, bool autoBinned=true, const char *binnedTag="""") const;  ; virtual Roo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBukinPdf.html:80,Load,Loading,80,doc/master/classRooBukinPdf.html,https://root.cern,https://root.cern/doc/master/classRooBukinPdf.html,1,['Load'],['Loading']
Performance,". ROOT: RooCBShape Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooCBShape Class ReferenceRooFit » RooFit. ; PDF implementing the Crystal Ball line shape. ; Definition at line 24 of file RooCBShape.h. Public Member Functions;  RooCBShape ();  ;  RooCBShape (const char *name, const char *title, RooAbsReal &_m, RooAbsReal &_m0, RooAbsReal &_sigma, RooAbsReal &_alpha, RooAbsReal &_n);  ;  RooCBShape (const RooCBShape &other, const char *name=nullptr);  ; double analyticalIntegral (Int_t, const char *rangeName=nullptr) const override;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; std::string buildCallToAnalyticIntegral (Int_t code, const char *rangeName, RooFit::Detail::CodeSquashContext &ctx) const override;  This function defines the analytical integral translation for the class. ;  ; TObject * clone (const char *newname) const override;  ; Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const override;  Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ;  ; Int_t getMaxVal (const RooArgSet &vars) const override;  Advertise that we know the maximum of self for given (m0,alpha,n,sigma) ;  ; TClass * IsA () const override;  ; double maxVal (Int_t code) const override;  Return maximum value for set of observables identified by code assigned in getMaxVal. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void translate (RooFit::Detail::CodeSquashContext &ctx) const override;  This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ;  ;  Public Member Function",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCBShape.html:79,Load,Loading,79,doc/master/classRooCBShape.html,https://root.cern,https://root.cern/doc/master/classRooCBShape.html,1,['Load'],['Loading']
Performance,". ROOT: RooCFunction1Binding< VO, VI > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooCFunction1Binding< VO, VI > Class Template ReferenceRooFit » RooFit. ; template<class VO, class VI>; class RooCFunction1Binding< VO, VI >RooCFunction1Binding is a templated implementation of class RooAbsReal that binds generic C(++) functions to a RooAbsReal argument thus allowing generic C++ functions to be used as RooFit functions. ; Instances of function binding classes are fully functional RooFit function objects with one exception: if the bound function is not a standard TMath or MathMore function the class cannot be persisted in a RooWorkspace without registering the function pointer first using RooCFunction1Binding<T1,T2>::register(). ; Definition at line 218 of file RooCFunction1Binding.h. Public Member Functions;  RooCFunction1Binding ();  ;  RooCFunction1Binding (const char *name, const char *title, VO(*_func)(VI), RooAbsReal &_x);  ;  RooCFunction1Binding (const RooCFunction1Binding &other, const char *name=nullptr);  ; TObject * clone (const char *newname) const override;  ; TClass * IsA () const override;  ; void printArgs (std::ostream &os) const override;  Print object arguments, ie its proxies. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCFunction1Binding.html:108,Load,Loading,108,doc/master/classRooCFunction1Binding.html,https://root.cern,https://root.cern/doc/master/classRooCFunction1Binding.html,1,['Load'],['Loading']
Performance,". ROOT: RooCFunction1PdfBinding< VO, VI > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooCFunction1PdfBinding< VO, VI > Class Template Reference. ; template<class VO, class VI>; class RooCFunction1PdfBinding< VO, VI >; Definition at line 281 of file RooCFunction1Binding.h. Public Member Functions;  RooCFunction1PdfBinding ();  ;  RooCFunction1PdfBinding (const char *name, const char *title, VO(*_func)(VI), RooAbsReal &_x);  ;  RooCFunction1PdfBinding (const RooCFunction1PdfBinding &other, const char *name=nullptr);  ; TObject * clone (const char *newname) const override;  ; TClass * IsA () const override;  ; void printArgs (std::ostream &os) const override;  Print object arguments, ie its proxies. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsPdf;  RooAbsPdf ();  Default constructor. ;  ;  RooAbsPdf (const char *name, const char *title, double minVal, double maxVal);  Constructor with name, title, and plot range. ;  ;  RooAbsPdf (const char *name, const char *title=nullptr);  Constructor with name and title only. ;  ;  ~RooAbsPdf () override;  Destructor. ;  ; double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Analytical integral with normalization (see RooAbsReal::analyticalIntegralWN() for further information). ;  ; virtual RooAbsGenContext * autoGenContext (const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false, bool autoBinned=true, const char *binnedTag="""") const;  ; virtual RooAbsGenContext * binnedGenContext (const RooArgSet &vars, bool verbose=false) const;  Return a binned g",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCFunction1PdfBinding.html:111,Load,Loading,111,doc/master/classRooCFunction1PdfBinding.html,https://root.cern,https://root.cern/doc/master/classRooCFunction1PdfBinding.html,1,['Load'],['Loading']
Performance,". ROOT: RooCFunction1Ref< VO, VI > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Types |; Static Private Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; RooCFunction1Ref< VO, VI > Class Template Reference. ; template<class VO, class VI>; class RooCFunction1Ref< VO, VI >; Definition at line 89 of file RooCFunction1Binding.h. Public Member Functions;  RooCFunction1Ref (VO(*ptr)(VI)=nullptr);  ; const char * argName (Int_t iarg);  ; RooCFunction1Map< double, double > & fmap ();  ; RooCFunction1Map< double, int > & fmap ();  ; TClass * IsA () const override;  ; const char * name () const;  ; VO operator() (VI x) const;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract metho",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCFunction1Ref.html:104,Load,Loading,104,doc/master/classRooCFunction1Ref.html,https://root.cern,https://root.cern/doc/master/classRooCFunction1Ref.html,1,['Load'],['Loading']
Performance,". ROOT: RooCFunction2Binding< VO, VI1, VI2 > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooCFunction2Binding< VO, VI1, VI2 > Class Template ReferenceRooFit » RooFit. ; template<class VO, class VI1, class VI2>; class RooCFunction2Binding< VO, VI1, VI2 >RooCFunction2Binding is a templated implementation of class RooAbsReal that binds generic C(++) functions to a RooAbsReal argument thus allowing generic C++ functions to be used as RooFit functions. ; Instances of function binding classes are fully functional RooFit function objects with one exception: if the bound function is not a standard TMath or MathMore function the class cannot be persisted in a RooWorkspace without registering the function pointer first using RooCFunction2Binding<T1,T2,T3>::register(). ; Definition at line 228 of file RooCFunction2Binding.h. Public Member Functions;  RooCFunction2Binding ();  ;  RooCFunction2Binding (const char *name, const char *title, VO(*_func)(VI1, VI2), RooAbsReal &_x, RooAbsReal &_y);  ;  RooCFunction2Binding (const RooCFunction2Binding &other, const char *name=nullptr);  ; TObject * clone (const char *newname) const override;  ; TClass * IsA () const override;  ; void printArgs (std::ostream &os) const override;  Print object arguments, ie its proxies. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCFunction2Binding.html:114,Load,Loading,114,doc/master/classRooCFunction2Binding.html,https://root.cern,https://root.cern/doc/master/classRooCFunction2Binding.html,1,['Load'],['Loading']
Performance,". ROOT: RooCFunction2PdfBinding< VO, VI1, VI2 > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooCFunction2PdfBinding< VO, VI1, VI2 > Class Template Reference. ; template<class VO, class VI1, class VI2>; class RooCFunction2PdfBinding< VO, VI1, VI2 >; Definition at line 295 of file RooCFunction2Binding.h. Public Member Functions;  RooCFunction2PdfBinding ();  ;  RooCFunction2PdfBinding (const char *name, const char *title, VO(*_func)(VI1, VI2), RooAbsReal &_x, RooAbsReal &_y);  ;  RooCFunction2PdfBinding (const RooCFunction2PdfBinding &other, const char *name=nullptr);  ; TObject * clone (const char *newname) const override;  ; TClass * IsA () const override;  ; void printArgs (std::ostream &os) const override;  Print object arguments, ie its proxies. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsPdf;  RooAbsPdf ();  Default constructor. ;  ;  RooAbsPdf (const char *name, const char *title, double minVal, double maxVal);  Constructor with name, title, and plot range. ;  ;  RooAbsPdf (const char *name, const char *title=nullptr);  Constructor with name and title only. ;  ;  ~RooAbsPdf () override;  Destructor. ;  ; double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Analytical integral with normalization (see RooAbsReal::analyticalIntegralWN() for further information). ;  ; virtual RooAbsGenContext * autoGenContext (const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false, bool autoBinned=true, const char *binnedTag="""") const;  ; virtual RooAbsGenContext * binnedGenContext (const RooArgSet ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCFunction2PdfBinding.html:117,Load,Loading,117,doc/master/classRooCFunction2PdfBinding.html,https://root.cern,https://root.cern/doc/master/classRooCFunction2PdfBinding.html,1,['Load'],['Loading']
Performance,". ROOT: RooCFunction2Ref< VO, VI1, VI2 > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Types |; Static Private Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; RooCFunction2Ref< VO, VI1, VI2 > Class Template Reference. ; template<class VO, class VI1, class VI2>; class RooCFunction2Ref< VO, VI1, VI2 >; Definition at line 98 of file RooCFunction2Binding.h. Public Member Functions;  RooCFunction2Ref (VO(*ptr)(VI1, VI2)=nullptr);  ; const char * argName (Int_t iarg);  ; TClass * IsA () const override;  ; const char * name () const;  ; VO operator() (VI1 x, VI2 y) const;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCFunction2Ref.html:110,Load,Loading,110,doc/master/classRooCFunction2Ref.html,https://root.cern,https://root.cern/doc/master/classRooCFunction2Ref.html,1,['Load'],['Loading']
Performance,". ROOT: RooCFunction3Binding< VO, VI1, VI2, VI3 > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooCFunction3Binding< VO, VI1, VI2, VI3 > Class Template ReferenceRooFit » RooFit. ; template<class VO, class VI1, class VI2, class VI3>; class RooCFunction3Binding< VO, VI1, VI2, VI3 >RooCFunction3Binding is a templated implementation of class RooAbsReal that binds generic C(++) functions to a RooAbsReal argument thus allowing generic C++ functions to be used as RooFit functions. ; Instances of function binding classes are fully functional RooFit function objects with one exception: if the bound function is not a standard TMath or MathMore function the class cannot be persisted in a RooWorkspace without registering the function pointer first using RooCFunction3Binding<T1,T2,T3,T4>::register(). ; Definition at line 238 of file RooCFunction3Binding.h. Public Member Functions;  RooCFunction3Binding ();  ;  RooCFunction3Binding (const char *name, const char *title, VO(*_func)(VI1, VI2, VI3), RooAbsReal &_x, RooAbsReal &_y, RooAbsReal &_z);  ;  RooCFunction3Binding (const RooCFunction3Binding &other, const char *name=nullptr);  ; TObject * clone (const char *newname) const override;  ; TClass * IsA () const override;  ; void printArgs (std::ostream &os) const override;  Print object arguments, ie its proxies. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const cha",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCFunction3Binding.html:119,Load,Loading,119,doc/master/classRooCFunction3Binding.html,https://root.cern,https://root.cern/doc/master/classRooCFunction3Binding.html,1,['Load'],['Loading']
Performance,". ROOT: RooCFunction3PdfBinding< VO, VI1, VI2, VI3 > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooCFunction3PdfBinding< VO, VI1, VI2, VI3 > Class Template Reference. ; template<class VO, class VI1, class VI2, class VI3>; class RooCFunction3PdfBinding< VO, VI1, VI2, VI3 >; Definition at line 308 of file RooCFunction3Binding.h. Public Member Functions;  RooCFunction3PdfBinding ();  ;  RooCFunction3PdfBinding (const char *name, const char *title, VO(*_func)(VI1, VI2, VI3), RooAbsReal &_x, RooAbsReal &_y, RooAbsReal &_z);  ;  RooCFunction3PdfBinding (const RooCFunction3PdfBinding &other, const char *name=nullptr);  ; TObject * clone (const char *newname) const override;  ; TClass * IsA () const override;  ; void printArgs (std::ostream &os) const override;  Print object arguments, ie its proxies. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsPdf;  RooAbsPdf ();  Default constructor. ;  ;  RooAbsPdf (const char *name, const char *title, double minVal, double maxVal);  Constructor with name, title, and plot range. ;  ;  RooAbsPdf (const char *name, const char *title=nullptr);  Constructor with name and title only. ;  ;  ~RooAbsPdf () override;  Destructor. ;  ; double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Analytical integral with normalization (see RooAbsReal::analyticalIntegralWN() for further information). ;  ; virtual RooAbsGenContext * autoGenContext (const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false, bool autoBinned=true, const char *binnedTag="""") const;  ; virtual RooAbs",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCFunction3PdfBinding.html:122,Load,Loading,122,doc/master/classRooCFunction3PdfBinding.html,https://root.cern,https://root.cern/doc/master/classRooCFunction3PdfBinding.html,1,['Load'],['Loading']
Performance,". ROOT: RooCFunction3Ref< VO, VI1, VI2, VI3 > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Types |; Static Private Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; RooCFunction3Ref< VO, VI1, VI2, VI3 > Class Template Reference. ; template<class VO, class VI1, class VI2, class VI3>; class RooCFunction3Ref< VO, VI1, VI2, VI3 >; Definition at line 100 of file RooCFunction3Binding.h. Public Member Functions;  RooCFunction3Ref (VO(*ptr)(VI1, VI2, VI3)=nullptr);  ; const char * argName (Int_t iarg);  ; TClass * IsA () const override;  ; const char * name () const;  ; VO operator() (VI1 x, VI2 y, VI3 z) const;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCFunction3Ref.html:115,Load,Loading,115,doc/master/classRooCFunction3Ref.html,https://root.cern,https://root.cern/doc/master/classRooCFunction3Ref.html,1,['Load'],['Loading']
Performance,". ROOT: RooCFunction4Binding< VO, VI1, VI2, VI3, VI4 > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooCFunction4Binding< VO, VI1, VI2, VI3, VI4 > Class Template ReferenceRooFit » RooFit. ; template<class VO, class VI1, class VI2, class VI3, class VI4>; class RooCFunction4Binding< VO, VI1, VI2, VI3, VI4 >RooCFunction4Binding is a templated implementation of class RooAbsReal that binds generic C(++) functions to a RooAbsReal argument thus allowing generic C++ functions to be used as RooFit functions. ; Instances of function binding classes are fully functional RooFit function objects with one exception: if the bound function is not a standard TMath or MathMore function the class cannot be persisted in a RooWorkspace without registering the function pointer first using RooCFunction4Binding<T1,T2,T3,T4>::register(). ; Definition at line 225 of file RooCFunction4Binding.h. Public Member Functions;  RooCFunction4Binding ();  ;  RooCFunction4Binding (const char *name, const char *title, VO(*_func)(VI1, VI2, VI3, VI4), RooAbsReal &_x, RooAbsReal &_y, RooAbsReal &_z, RooAbsReal &_w);  ;  RooCFunction4Binding (const RooCFunction4Binding &other, const char *name=nullptr);  ; TObject * clone (const char *newname) const override;  ; TClass * IsA () const override;  ; void printArgs (std::ostream &os) const override;  Print object arguments, ie its proxies. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCFunction4Binding.html:124,Load,Loading,124,doc/master/classRooCFunction4Binding.html,https://root.cern,https://root.cern/doc/master/classRooCFunction4Binding.html,1,['Load'],['Loading']
Performance,". ROOT: RooCFunction4PdfBinding< VO, VI1, VI2, VI3, VI4 > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooCFunction4PdfBinding< VO, VI1, VI2, VI3, VI4 > Class Template Reference. ; template<class VO, class VI1, class VI2, class VI3, class VI4>; class RooCFunction4PdfBinding< VO, VI1, VI2, VI3, VI4 >; Definition at line 297 of file RooCFunction4Binding.h. Public Member Functions;  RooCFunction4PdfBinding ();  ;  RooCFunction4PdfBinding (const char *name, const char *title, VO(*_func)(VI1, VI2, VI3, VI4), RooAbsReal &_x, RooAbsReal &_y, RooAbsReal &_z, RooAbsReal &_w);  ;  RooCFunction4PdfBinding (const RooCFunction4PdfBinding &other, const char *name=nullptr);  ; TObject * clone (const char *newname) const override;  ; TClass * IsA () const override;  ; void printArgs (std::ostream &os) const override;  Print object arguments, ie its proxies. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsPdf;  RooAbsPdf ();  Default constructor. ;  ;  RooAbsPdf (const char *name, const char *title, double minVal, double maxVal);  Constructor with name, title, and plot range. ;  ;  RooAbsPdf (const char *name, const char *title=nullptr);  Constructor with name and title only. ;  ;  ~RooAbsPdf () override;  Destructor. ;  ; double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Analytical integral with normalization (see RooAbsReal::analyticalIntegralWN() for further information). ;  ; virtual RooAbsGenContext * autoGenContext (const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false, bool autoBinned=true, con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCFunction4PdfBinding.html:127,Load,Loading,127,doc/master/classRooCFunction4PdfBinding.html,https://root.cern,https://root.cern/doc/master/classRooCFunction4PdfBinding.html,1,['Load'],['Loading']
Performance,". ROOT: RooCFunction4Ref< VO, VI1, VI2, VI3, VI4 > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Types |; Static Private Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; RooCFunction4Ref< VO, VI1, VI2, VI3, VI4 > Class Template Reference. ; template<class VO, class VI1, class VI2, class VI3, class VI4>; class RooCFunction4Ref< VO, VI1, VI2, VI3, VI4 >; Definition at line 96 of file RooCFunction4Binding.h. Public Member Functions;  RooCFunction4Ref (VO(*ptr)(VI1, VI2, VI3, VI4)=nullptr);  ; const char * argName (Int_t iarg);  ; TClass * IsA () const override;  ; const char * name () const;  ; VO operator() (VI1 x, VI2 y, VI3 z, VI4 w) const;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCFunction4Ref.html:120,Load,Loading,120,doc/master/classRooCFunction4Ref.html,https://root.cern,https://root.cern/doc/master/classRooCFunction4Ref.html,1,['Load'],['Loading']
Performance,". ROOT: RooCachedPdf Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooCachedPdf Class ReferenceRooFit » RooFit Core. ; Implementation of RooAbsCachedPdf that can cache any external RooAbsPdf input function provided in the constructor. ; Definition at line 20 of file RooCachedPdf.h. Public Member Functions;  RooCachedPdf ();  ;  RooCachedPdf (const char *name, const char *title, RooAbsPdf &_pdf);  Constructor taking name, title and function to be cached. ;  ;  RooCachedPdf (const char *name, const char *title, RooAbsPdf &_pdf, const RooArgSet &cacheObs);  Constructor taking name, title and function to be cached and fixed choice of variable to cache. ;  ;  RooCachedPdf (const RooCachedPdf &other, const char *name=nullptr);  Copy constructor. ;  ; TObject * clone (const char *newname) const override;  ; TClass * IsA () const override;  ; void preferredObservableScanOrder (const RooArgSet &obs, RooArgSet &orderedObs) const override;  Defer preferred scan order to cached pdf preference. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsCachedPdf;  RooAbsCachedPdf ();  ;  RooAbsCachedPdf (const char *name, const char *title, int ipOrder=0);  Constructor. ;  ;  RooAbsCachedPdf (const RooAbsCachedPdf &other, const char *name=nullptr);  Copy constructor. ;  ; double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Implements internal (analytical) integration capabilities. ;  ; std::unique_ptr< RooAbsArg > compileForNormSet (RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const override;  ; bool forceAnalyticalInt (const RooAbsArg &dep) const override;  Fo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCachedPdf.html:81,Load,Loading,81,doc/master/classRooCachedPdf.html,https://root.cern,https://root.cern/doc/master/classRooCachedPdf.html,6,"['Load', 'cache']","['Loading', 'cache', 'cacheObs', 'cached']"
Performance,". ROOT: RooCachedReal Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooCachedReal Class ReferenceRooFit » RooFit Core. ; Implementation of RooAbsCachedReal that can cache any external RooAbsReal input function provided in the constructor. ; Definition at line 20 of file RooCachedReal.h. Public Member Functions;  RooCachedReal ();  ;  RooCachedReal (const char *name, const char *title, RooAbsReal &_func);  Constructor taking name, title and function to be cached. ;  ;  RooCachedReal (const char *name, const char *title, RooAbsReal &_func, const RooArgSet &cacheObs);  Constructor taking name, title and function to be cached and fixed choice of variable to cache. ;  ;  RooCachedReal (const RooCachedReal &other, const char *name=nullptr);  Copy constructor. ;  ; bool cacheSource () const;  ; TObject * clone (const char *newname) const override;  ; bool getCdfBoundaries () const;  If true the c.d.f boundary mode is active. ;  ; TClass * IsA () const override;  ; void setCacheSource (bool flag);  ; void setCdfBoundaries (bool flag);  If flag is true the RooHistFunc that represent the cache histogram will use special boundary conditions for use with cumulative distribution functions: at the lower bound the function is forced to converge at zero and the upper bound is the function is forced to converge at 1.0. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsCachedReal;  RooAbsCachedReal ();  ;  RooAbsCachedReal (const char *name, const char *title, Int_t ipOrder=0);  Constructor. ;  ;  RooAbsCachedReal (const RooAbsCachedReal &other, const char *name=nullptr);  Copy constructor. ;  ; double analyticalIntegralWN (Int_t code, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCachedReal.html:82,Load,Loading,82,doc/master/classRooCachedReal.html,https://root.cern,https://root.cern/doc/master/classRooCachedReal.html,6,"['Load', 'cache']","['Loading', 'cache', 'cacheObs', 'cached']"
Performance,". ROOT: RooCatType Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Friends |; List of all members ; RooCatType Class ReferenceRooFit » RooFit Legacy. ; RooCatType is an auxiliary class for RooAbsCategory and defines a a single category state. ; The class holds a string label and an integer index value which define the state ; Definition at line 23 of file RooCatTypeLegacy.h. Public Member Functions;  RooCatType ();  ;  RooCatType (const char *name, Int_t value);  Constructor with state name and index value. ;  ;  RooCatType (const RooCatType &other);  Copy constructor. ;  ; void assignFast (const RooCatType &other);  ; TObject * Clone (const char *) const override;  Make a clone of an object using the Streamer facility. ;  ; const Text_t * GetName () const override;  Returns name of object. ;  ; Int_t getVal () const;  ; TClass * IsA () const override;  ; RooCatType & operator= (const RooCatType &other);  ; bool operator== (const char *label) const;  ; bool operator== (const RooCatType &other) const;  ; bool operator== (Int_t index) const;  ; void Print (Option_t *options=nullptr) const override;  This method must be overridden when a class wants to print itself. ;  ; void printClassName (std::ostream &os) const override;  Print the class name of the state. ;  ; void printName (std::ostream &os) const override;  Print the name of the state. ;  ; void printTitle (std::ostream &os) const override;  Print the title of the state. ;  ; void printValue (std::ostream &os) const override;  Print the value (index integer) of the state. ;  ; void SetName (const Text_t *name);  Constructor with name argument. ;  ; void setVal (Int_t newValue);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited fr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCatType.html:79,Load,Loading,79,doc/master/classRooCatType.html,https://root.cern,https://root.cern/doc/master/classRooCatType.html,1,['Load'],['Loading']
Performance,". ROOT: RooCategory Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Types |; Private Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; RooCategory Class ReferencefinalRooFit » RooFit Core. ; Object to represent discrete states. ; States have names and index numbers, and the index numbers can be written into datasets and used in calculations. A category is ""fundamental"", i.e., its value doesn't depend on the value of other objects. (Objects in datasets cannot depend on other objects' values, they need to be self-consistent.); A category object can be used to e.g. conduct a simultaneous fit of the same observable in multiple categories. Setting up a category. A category can be set up like this: RooCategory myCat(""myCat"", ""Lepton multiplicity category"", {; {""0Lep"", 0},; {""1Lep"", 1},; {""2Lep"", 2},; {""3Lep"", 3}; });; RooCategoryObject to represent discrete states.Definition RooCategory.h:28. Like this: RooCategory myCat(""myCat"", ""Asymmetry"");; myCat[""left""] = -1;; myCat[""right""] = 1;. Or like this: RooCategory myCat(""myCat"", ""Asymmetry"");; myCat.defineType(""left"", -1);; myCat.defineType(""right"", 1);; Inspect the pairs of state names and state numbers like this: for (const auto& nameIdx : myCat) {; std::cout << nameIdx.first << "" --> "" << nameIdx.second << std::endl;; }. Changing category states; Category states can be modified either by using the index state (faster) or state names. For example: myCat.setIndex(5);; myCat.setLabel(""left"");; for (const auto& otherNameIdx : otherCat) {; myCat.setIndex(otherNameIdx);; }; Also refer to RooFit Tutorials, especially rf404_categories.C for an introduction, and to rf405_realtocatfuncs.C and rf406_cattocatfuncs.C for advanced uses of categories. PyROOT; Constructor of RooCategory takes a map as an argument also supports ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCategory.html:80,Load,Loading,80,doc/master/classRooCategory.html,https://root.cern,https://root.cern/doc/master/classRooCategory.html,1,['Load'],['Loading']
Performance,". ROOT: RooChangeTracker Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooChangeTracker Class ReferenceRooFit » RooFit Core. ; Meta object that tracks value changes in a given set of RooAbsArgs by registering itself as value client of these objects. ; The change tracker can perform an additional validation step where it also compares the numeric values of the tracked arguments with reference values to ensure that values have actually changed. This may be useful in case some of the tracked observables are in binned datasets where each observable propagates a valueDirty flag when an event is loaded even though usually only one observable actually changes. ; Definition at line 23 of file RooChangeTracker.h. Public Member Functions;  RooChangeTracker ()=default;  ;  RooChangeTracker (const char *name, const char *title, const RooArgSet &trackSet, bool checkValues=false);  Constructor. ;  ;  RooChangeTracker (const RooChangeTracker &other, const char *name=nullptr);  Copy constructor. ;  ; TObject * clone (const char *newname) const override;  ; bool hasChanged (bool clearState);  Returns true if state has changed since last call with clearState=true. ;  ; TClass * IsA () const override;  ; RooArgSet parameters () const;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &ot",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooChangeTracker.html:85,Load,Loading,85,doc/master/classRooChangeTracker.html,https://root.cern,https://root.cern/doc/master/classRooChangeTracker.html,3,"['Load', 'load', 'perform']","['Loading', 'loaded', 'perform']"
Performance,". ROOT: RooChebychev Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; RooChebychev Class ReferenceRooFit » RooFit. ; Chebychev polynomial p.d.f. ; of the first kind.; The coefficient that goes with \( T_0(x)=1 \) (i.e. the constant polynomial) is implicitly assumed to be 1, and the list of coefficients supplied by callers starts with the coefficient that goes with \( T_1(x)=x \) (i.e. the linear term). ; Definition at line 25 of file RooChebychev.h. Public Member Functions;  RooChebychev ();  ;  RooChebychev (const char *name, const char *title, RooAbsReal &_x, const RooArgList &_coefList);  Constructor. ;  ;  RooChebychev (const RooChebychev &other, const char *name=nullptr);  ; double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const override;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; std::string buildCallToAnalyticIntegral (Int_t code, const char *rangeName, RooFit::Detail::CodeSquashContext &ctx) const override;  This function defines the analytical integral translation for the class. ;  ; TObject * clone (const char *newname) const override;  ; Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const override;  Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ;  ; TClass * IsA () const override;  ; void selectNormalizationRange (const char *rangeName=nullptr, bool force=false) override;  Interface function to force use of a given normalization range to interpret function value. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void translate (RooFit::Detail::CodeSquashContext &ctx) const override;  This f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooChebychev.html:81,Load,Loading,81,doc/master/classRooChebychev.html,https://root.cern,https://root.cern/doc/master/classRooChebychev.html,1,['Load'],['Loading']
Performance,". ROOT: RooChi2MCSModule Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; RooChi2MCSModule Class ReferenceRooFit » RooFit. ; RooChi2MCSModule is an add-on module to RooMCStudy that calculates the chi-squared of fitted p.d.f with respect to a binned version of the data. ; For each fit the chi-squared, the reduced chi-squared the number of degrees of freedom and the probability of the chi-squared is store in the summary dataset. ; Definition at line 22 of file RooChi2MCSModule.h. Public Member Functions;  RooChi2MCSModule ();  ;  RooChi2MCSModule (const RooChi2MCSModule &other);  Copy constructor. ;  ;  ~RooChi2MCSModule () override;  Destructor. ;  ; RooDataSet * finalizeRun () override;  Return auxiliary dataset with results of chi2 analysis calculations of this module so that it is merged with RooMCStudy::fitParDataSet() by RooMCStudy. ;  ; bool initializeInstance () override;  Initialize module after attachment to RooMCStudy object. ;  ; bool initializeRun (Int_t) override;  Initialize module at beginning of RooCMStudy run. ;  ; TClass * IsA () const override;  ; bool processAfterFit (Int_t) override;  Bin dataset and calculate chi2 of p.d.f w.r.t binned dataset. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsMCStudyModule;  RooAbsMCStudyModule (const char *name, const char *title);  Constructor. ;  ;  RooAbsMCStudyModule (const RooAbsMCStudyModule &other);  Copy constructor. ;  ; bool doInitializeInstance (RooMCStudy &);  Initializer method called upon attachment to given RooMCStudy object. ;  ; virtual bool processBeforeGen (Int_t);  Method called after resetting of generator parameters to initial values and before call to generator context Any m",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooChi2MCSModule.html:85,Load,Loading,85,doc/master/classRooChi2MCSModule.html,https://root.cern,https://root.cern/doc/master/classRooChi2MCSModule.html,1,['Load'],['Loading']
Performance,". ROOT: RooChi2Var Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; List of all members ; RooChi2Var Class ReferenceRooFit » RooFit Core. ; Simple \( \chi^2 \) calculation from a binned dataset and a PDF. ; It calculates:. \begin{align*}; \chi^2 &= \sum_{\mathrm{bins}} \left( \frac{N_\mathrm{PDF,bin} - N_\mathrm{Data,bin}}{\Delta_\mathrm{bin}} \right)^2 \\; N_\mathrm{PDF,bin} &=; \begin{cases}; \mathrm{pdf}(\text{bin centre}) \cdot V_\mathrm{bin} \cdot N_\mathrm{Data,tot} &\text{normal PDF}\\; \mathrm{pdf}(\text{bin centre}) \cdot V_\mathrm{bin} \cdot N_\mathrm{Data,expected} &\text{extended PDF}; \end{cases} \\; \Delta_\mathrm{bin} &=; \begin{cases}; \sqrt{N_\mathrm{PDF,bin}} &\text{if } \mathtt{DataError == RooAbsData::Expected}\\; \mathtt{data{\rightarrow}weightError()} &\text{otherwise} \\; \end{cases}; \end{align*}. If the dataset doesn't have user-defined errors, errors are assumed to be \( \sqrt{N} \). In extended PDF mode, N_tot (total number of data events) is substituted with N_expected, the expected number of events that the PDF predicts.; NoteIf the dataset has errors stored, empty bins will prevent the calculation of \( \chi^2 \), because those have zero error. This leads to messages like: [#0] ERROR:Eval -- RooChi2Var::RooChi2Var(chi2_GenPdf_data_hist) INFINITY ERROR: bin 2 has zero error; RooChi2Var::RooChi2VarRooChi2Var(const char *name, const char *title, RooAbsReal &func, RooDataHist &data, bool extended, RooDataHist::ErrorType etype, RooAbsTestStatistic::Configuration const &cfg=RooAbsTestStatistic::Configuration{})Definition RooChi2Var.cxx:67. In this case, one can use the expected errors of the PDF instead of the data errors: RooChi2Var chi2(..., ..., RooFit::DataError(RooAbsData::Expected), ...);; RooAbsData::Expected@ Ex",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooChi2Var.html:79,Load,Loading,79,doc/master/classRooChi2Var.html,https://root.cern,https://root.cern/doc/master/classRooChi2Var.html,1,['Load'],['Loading']
Performance,". ROOT: RooChiSquarePdf Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; RooChiSquarePdf Class ReferenceRooFit » RooFit. ; The PDF of the Chi Square distribution for n degrees of freedom. ; Oddly, this is hard to find in ROOT (except via relation to GammaDist). Here we also implement the analytic integral. ; Definition at line 22 of file RooChiSquarePdf.h. Public Member Functions;  RooChiSquarePdf ();  ;  RooChiSquarePdf (const char *name, const char *title, RooAbsReal &x, RooAbsReal &ndof);  ;  RooChiSquarePdf (const RooChiSquarePdf &other, const char *name=nullptr);  ; double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const override;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; TObject * clone (const char *newname) const override;  ; Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const override;  No analytical calculation available (yet) of integrals over subranges. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsPdf;  RooAbsPdf ();  Default constructor. ;  ;  RooAbsPdf (const char *name, const char *title, double minVal, double maxVal);  Constructor with name, title, and plot range. ;  ;  RooAbsPdf (const char *name, const char *title=nullptr);  Constructor with name and title only. ;  ;  ~RooAbsPdf () override;  Destructor. ;  ; double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Analytical integral with normalization (see RooAbsReal::analyticalIntegralWN() for further information). ;  ; virtual RooAbsGenCont",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooChiSquarePdf.html:84,Load,Loading,84,doc/master/classRooChiSquarePdf.html,https://root.cern,https://root.cern/doc/master/classRooChiSquarePdf.html,1,['Load'],['Loading']
Performance,". ROOT: RooCmdArg Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; RooCmdArg Class ReferenceRooFit » RooFit Core. ; Named container for two doubles, two integers two object points and three string pointers that can be passed as generic named arguments to a variety of RooFit end user methods. ; To achieved the named syntax, RooCmdArg objects are created using global helper functions defined in RooGlobalFunc.h that create and fill these generic containers ; Definition at line 26 of file RooCmdArg.h. Public Member Functions;  RooCmdArg ();  Default constructor. ;  ;  RooCmdArg (const char *name, Int_t i1, Int_t i2=0, double d1=0.0, double d2=0.0, const char *s1=nullptr, const char *s2=nullptr, const TObject *o1=nullptr, const TObject *o2=nullptr, const RooCmdArg *ca=nullptr, const char *s3=nullptr, const RooArgSet *c1=nullptr, const RooArgSet *c2=nullptr);  Constructor from payload parameters. ;  ;  RooCmdArg (const RooCmdArg &other);  Copy constructor. ;  ;  ~RooCmdArg () override;  Destructor. ;  ; void addArg (const RooCmdArg &arg);  Utility function to add nested RooCmdArg to payload of this RooCmdArg. ;  ; TObject * Clone (const char *newName=nullptr) const override;  Make a clone of an object using the Streamer facility. ;  ; double getDouble (Int_t idx) const;  Return double stored in slot idx. ;  ; Int_t getInt (Int_t idx) const;  ; const TObject * getObject (Int_t idx) const;  Return TObject stored in slot idx. ;  ; const RooArgSet * getSet (Int_t idx) const;  Return RooArgSet stored in slot idx. ;  ; const char * getString (Int_t idx) const;  Return string stored in slot idx. ;  ; TClass * IsA () const override;  ; const char * opcode () const;  ; RooCmdArg & operator= (const RooCmdArg &other);  Assignment operator. ;  ; bool prefixSubArgs () const;  ; void ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCmdArg.html:78,Load,Loading,78,doc/master/classRooCmdArg.html,https://root.cern,https://root.cern/doc/master/classRooCmdArg.html,1,['Load'],['Loading']
Performance,". ROOT: RooCmdConfig Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; RooCmdConfig Class ReferenceRooFit » RooFit Core. ; Configurable parser for RooCmdArg named arguments. ; It maps the contents of named arguments named to integers, doubles, strings and TObjects that can be retrieved after processing a set of RooCmdArgs. The parser also has options to enforce syntax rules such as (conditionally) required arguments, mutually exclusive arguments and dependencies between arguments. ; Definition at line 32 of file RooCmdConfig.h. Classes; struct  Var;  . Public Member Functions;  RooCmdConfig (const RooCmdConfig &other);  Copy constructor. ;  ;  RooCmdConfig (RooStringView methodName);  Constructor taking descriptive name of owner/user which is used as prefix for any warning or error messages generated by this parser. ;  ; void allowUndefined (bool flag=true);  If flag is true the processing of unrecognized RooCmdArgs is not considered an error. ;  ; void defineDependency (const char *refArgName, const char *neededArgName);  Define that processing argument name refArgName requires processing of argument named neededArgName to successfully complete parsing. ;  ; bool defineDouble (const char *name, const char *argName, int doubleNum, double defValue=0.0);  Define double property name 'name' mapped to double in slot 'doubleNum' in RooCmdArg with name argName Define default value for this double property to be defVal in case named argument is not processed. ;  ; bool defineInt (const char *name, const char *argName, int intNum, int defValue=0);  Define integer property name 'name' mapped to integer in slot 'intNum' in RooCmdArg with name argName Define default value for this int property to be defVal in case named argument is not processed. ;  ; void defineMutex (const char *);  ; templ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCmdConfig.html:81,Load,Loading,81,doc/master/classRooCmdConfig.html,https://root.cern,https://root.cern/doc/master/classRooCmdConfig.html,1,['Load'],['Loading']
Performance,". ROOT: RooCollectionProxy< RooCollection_t > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; RooCollectionProxy< RooCollection_t > Class Template ReferenceRooFit » RooFit Core. ; template<class RooCollection_t>; class RooCollectionProxy< RooCollection_t >Concrete proxy for RooArgSet or RooArgList objects. ; A RooCollectionProxy is the general mechanism to store a RooArgSet or RooArgList with RooAbsArgs in a RooAbsArg. Creating a RooCollectionProxy adds all members of the proxied RooArgSet to the proxy owners server list (thus receiving value/shape dirty flags from it) and registers itself with the owning class. The latter allows the owning class to update the pointers of RooArgSet or RooArgList contents to reflect the serverRedirect changes. ; Definition at line 40 of file RooCollectionProxy.h. Public Member Functions;  RooCollectionProxy ();  ;  RooCollectionProxy (const char *inName, const char *, RooAbsArg *owner, bool defValueServer=true, bool defShapeServer=false);  Construct proxy with given name and description, with given owner The default value and shape dirty propagation of the set contents to the set owner is controlled by flags defValueServer and defShapeServer. ;  ; template<class Other_t > ;  RooCollectionProxy (const char *inName, RooAbsArg *owner, const Other_t &other);  Copy constructor. ;  ;  ~RooCollectionProxy () override;  ; virtual bool add (const RooAbsArg &var, bool silent=false);  Add the specified argument to list. ;  ; bool add (const RooAbsArg &var, bool silent=false) override;  Overloaded RooCollection_t::add() method inserts 'var' into set and registers 'var' as server to owner with default value and shape dirty flag propagation. ;  ; bool add (const RooAbsArg &var, bool valueServer, bool shapeServer, bool silent);  Overloade",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCollectionProxy.html:115,Load,Loading,115,doc/master/classRooCollectionProxy.html,https://root.cern,https://root.cern/doc/master/classRooCollectionProxy.html,1,['Load'],['Loading']
Performance,". ROOT: RooCompositeDataStore Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooCompositeDataStore Class ReferenceRooFit » RooFit Core. ; Combines several disjunct datasets into one. ; This is useful for simultaneous PDFs that do not depend on the same observable such as a PDF depending on x combined with another one depending on y. The composite storage will store two different datasets, {x} and {y}, but they can be passed as a single dataset to RooFit operations. A category tag will define which dataset has to be passed to which likelihood.; When iterated from start to finish, datasets will be traversed in the order of the category index. ; Definition at line 33 of file RooCompositeDataStore.h. Public Member Functions;  RooCompositeDataStore ();  ;  RooCompositeDataStore (const RooCompositeDataStore &other, const char *newname=nullptr);  Convert map by label to map by index for more efficient internal use. ;  ;  RooCompositeDataStore (const RooCompositeDataStore &other, const RooArgSet &vars, const char *newname=nullptr);  Update index category pointer, if it is contained in input argument vars. ;  ;  RooCompositeDataStore (RooStringView name, RooStringView title, const RooArgSet &vars, RooCategory &indexCat, std::map< std::string, RooAbsDataStore * > const &inputData);  Convert map by label to map by index for more efficient internal use. ;  ;  ~RooCompositeDataStore () override;  Destructor. ;  ; RooAbsArg * addColumn (RooAbsArg &var, bool adjustRange=true) override;  WVE ownership issue here!! Caller (a RooAbsData) should take ownership of all arguments, but only does for the first one here... ;  ; void append (RooAbsDataStore &other) override;  ; void attachBuffers (const RooArgSet &extObs) override;  ; void cacheArgs (const RooAbsArg *owner, RooArgSet &",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCompositeDataStore.html:90,Load,Loading,90,doc/master/classRooCompositeDataStore.html,https://root.cern,https://root.cern/doc/master/classRooCompositeDataStore.html,1,['Load'],['Loading']
Performance,". ROOT: RooConstVar Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; List of all members ; RooConstVar Class ReferencefinalRooFit » RooFit Core. ; Represents a constant real-valued object. ; Definition at line 23 of file RooConstVar.h. Public Member Functions;  RooConstVar ();  ;  RooConstVar (const char *name, const char *title, double value);  Constructor with value. ;  ;  RooConstVar (const RooConstVar &other, const char *name=nullptr);  Copy constructor. ;  ; void changeVal (double value);  Change the value of this constant. ;  ; TObject * clone (const char *newname) const override;  ; double getValV (const RooArgSet *) const override;  Return (constant) value. ;  ; TClass * IsA () const override;  ; bool isDerived () const override;  Returns false, as the value of the constant doesn't depend on other objects. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void translate (RooFit::Detail::CodeSquashContext &ctx) const override;  This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ;  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream. ;  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; virtual double analyticalIntegral (Int_t code",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooConstVar.html:80,Load,Loading,80,doc/master/classRooConstVar.html,https://root.cern,https://root.cern/doc/master/classRooConstVar.html,1,['Load'],['Loading']
Performance,". ROOT: RooConstraintSum Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooConstraintSum Class ReferenceRooFit » RooFit Core. ; Calculates the sum of the -(log) likelihoods of a set of RooAbsPfs that represent constraint functions. ; This class is used to calculate the composite -log(L) of constraints to be added to the regular -log(L) in RooAbsPdf::fitTo() with Constrain(..) arguments. ; Definition at line 27 of file RooConstraintSum.h. Public Member Functions;  RooConstraintSum ();  ;  RooConstraintSum (const char *name, const char *title, const RooArgSet &constraintSet, const RooArgSet &paramSet, bool takeGlobalObservablesFromData=false);  Constructor with set of constraint p.d.f.s. All elements in constraintSet must inherit from RooAbsPdf. ;  ;  RooConstraintSum (const RooConstraintSum &other, const char *name=nullptr);  Copy constructor. ;  ; TObject * clone (const char *newname) const override;  ; std::unique_ptr< RooAbsArg > compileForNormSet (RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const override;  ; void doEval (RooFit::EvalContext &) const override;  Base function for computing multiple values of a RooAbsReal. ;  ; TClass * IsA () const override;  ; const RooArgList & list ();  ; bool setData (RooAbsData &data, bool cloneData=true) override;  Replace the variables in this RooConstraintSum with the global observables in the dataset if they match by name. ;  ; bool setData (RooAbsData const &data, bool cloneData=true);  Replace the variables in this RooConstraintSum with the global observables in the dataset if they match by name. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void translate (RooFit::Detail::CodeSquashContext &ctx)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooConstraintSum.html:85,Load,Loading,85,doc/master/classRooConstraintSum.html,https://root.cern,https://root.cern/doc/master/classRooConstraintSum.html,1,['Load'],['Loading']
Performance,". ROOT: RooConvCoefVar Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; RooConvCoefVar Class ReferenceRooFit » RooFit Core. ; Auxiliary class that represents the coefficient of a RooAbsAnaConvPdf implementation as a separate RooAbsReal object to be able to interface these coefficient terms with the generic RooRealIntegral integration mechanism. ; Definition at line 28 of file RooConvCoefVar.h. Public Member Functions;  RooConvCoefVar ();  Default constructor. ;  ;  RooConvCoefVar (const char *name, const char *title, const RooAbsAnaConvPdf &input, Int_t coefIdx, const RooArgSet *varList=nullptr);  Constructor given a RooAbsAnaConvPdf a coefficient index and a set with the convoluted observable(s). ;  ;  RooConvCoefVar (const RooConvCoefVar &other, const char *name=nullptr);  Copy constructor. ;  ; double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const override;  Return analytical integral of chosen coefficient. ;  ; TObject * clone (const char *newname) const override;  ; double evaluate () const override;  Return value of chosen coefficient. ;  ; Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const override;  Return analytical integration capabilities of chosen coefficient. ;  ; double getValV (const RooArgSet *nset=nullptr) const override;  Return value of chosen coefficient. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooConvCoefVar.html:83,Load,Loading,83,doc/master/classRooConvCoefVar.html,https://root.cern,https://root.cern/doc/master/classRooConvCoefVar.html,1,['Load'],['Loading']
Performance,". ROOT: RooConvGenContext Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooConvGenContext Class ReferenceRooFit » RooFit Core. ; Efficient implementation of the generator context specific for RooAbsAnaConvPdf objects. ; The physics model is generated with a truth resolution model and the requested resolution model is generated separately as a PDF. The convolution variable of the physics model is subsequently explicitly smeared with the resolution model distribution. ; Definition at line 31 of file RooConvGenContext.h. Public Member Functions;  RooConvGenContext (const RooAbsAnaConvPdf &model, const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool _verbose=false);  Constructor for specialized generator context for analytical convolutions. ;  ;  RooConvGenContext (const RooFFTConvPdf &model, const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool _verbose=false);  Constructor for specialized generator context for FFT numerical convolutions. ;  ;  RooConvGenContext (const RooNumConvPdf &model, const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool _verbose=false);  Constructor for specialized generator context for numerical convolutions. ;  ; void attach (const RooArgSet &params) override;  Attach given set of arguments to internal clones of pdf and resolution model. ;  ; void generateEvent (RooArgSet &theEvent, Int_t remaining) override;  Generate a single event. ;  ; void initGenerator (const RooArgSet &theEvent) override;  One-time initialization of generator context, attaches the context to the supplied event container. ;  ; TClass * IsA () const override;  ; void printMultiline (std::ostream &os, Int_t content, bool verbose=f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooConvGenContext.html:86,Load,Loading,86,doc/master/classRooConvGenContext.html,https://root.cern,https://root.cern/doc/master/classRooConvGenContext.html,1,['Load'],['Loading']
Performance,". ROOT: RooCrystalBall Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; RooCrystalBall Class ReferencefinalRooFit » RooFit. ; PDF implementing the generalized Asymmetrical Double-Sided Crystall Ball line shape. . \[; f(m;m_0,\sigma,\alpha_L,n_L,\alpha_R,n_R) =; \begin{cases}; A_L \cdot (B_L - \frac{m - m_0}{\sigma_L})^{-n_L}, & \mbox{for }\frac{m - m_0}{\sigma_L} < -\alpha_L \\; \exp \left( - \frac{1}{2} \cdot \left[ \frac{m - m_0}{\sigma_L} \right]^2 \right), & \mbox{for }\frac{m - m_0}{\sigma_L} \leq 0 \\; \exp \left( - \frac{1}{2} \cdot \left[ \frac{m - m_0}{\sigma_R} \right]^2 \right), & \mbox{for }\frac{m - m_0}{\sigma_R} \leq \alpha_R \\; A_R \cdot (B_R + \frac{m - m_0}{\sigma_R})^{-n_R}, & \mbox{otherwise}, \\; \end{cases}; \]. times some normalization factor, where ; \[; \begin{align}; A_i &= \left(\frac{n_i}{\left| \alpha_i \right|}\right)^{n_i} \cdot \exp\left(- \frac {\left| \alpha_i \right|^2}{2}\right) \\; B_i &= \frac{n_i}{\left| \alpha_i \right|} - \left| \alpha_i \right| \\; \end{align}; \]. Definition at line 13 of file RooCrystalBall.h. Public Member Functions;  RooCrystalBall ();  ;  RooCrystalBall (const char *name, const char *title, RooAbsReal &x, RooAbsReal &x0, RooAbsReal &sigmaL, RooAbsReal &sigmaR, RooAbsReal &alphaL, RooAbsReal &nL, RooAbsReal &alphaR, RooAbsReal &nR);  Creates the fully parametrized crystal ball shape with asymmetric Gaussian core and asymmetric tails. ;  ;  RooCrystalBall (const char *name, const char *title, RooAbsReal &x, RooAbsReal &x0, RooAbsReal &sigmaLR, RooAbsReal &alpha, RooAbsReal &n, bool doubleSided=false);  Create a crystal ball shape with symmetric Gaussian core and only a tail on one side (just like RooCBShape) or two symmetric tails (like RooSDSCBShape). ;  ;  RooCrystalBall (const char *name, const char",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCrystalBall.html:83,Load,Loading,83,doc/master/classRooCrystalBall.html,https://root.cern,https://root.cern/doc/master/classRooCrystalBall.html,1,['Load'],['Loading']
Performance,". ROOT: RooCurve Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Static Private Member Functions |; List of all members ; RooCurve Class ReferenceRooFit » RooFit Core. ; One-dimensional graphical representation of a real-valued function. ; A curve is approximated by straight line segments with end points chosen to give a ""good"" approximation to the true curve. The goodness of the approximation is controlled by a precision and a resolution parameter.; A RooCurve derives from TGraph, so it can either be drawn as a line (default) or as points: RooPlot *p = y.plotOn(x.frame());; p->getAttMarker(""curve_y"")->SetMarkerStyle(20);; p->setDrawOptions(""curve_y"",""PL"");; p->Draw();; pwinID h TVirtualViewer3D TVirtualGLPainter pDefinition TGWin32VirtualGLProxy.cxx:51; RooPlotPlot frame and a container for graphics objects within that frame.Definition RooPlot.h:45; TObject::Drawvirtual void Draw(Option_t *option="""")Default Draw method for all objects.Definition TObject.cxx:280; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; To retrieve a RooCurve from a RooPlot, use RooPlot::getCurve(). ; Definition at line 36 of file RooCurve.h. Public Types; enum  WingMode { NoWings =0; , Straight =1; , Extended =2; };  ;  Public Types inherited from TGraph; enum  EStatusBits { ;   kNoStats = (1ULL << ( 9 )); , kClipFrame = (1ULL << ( 10 )); , kResetHisto = (1ULL << ( 17 )); , kNotEditable = (1ULL << ( 18 )); , ;   kIsSortedX = (1ULL << ( 19 )); , kIsHighlight = (1ULL << ( 20 )). };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL <",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCurve.html:77,Load,Loading,77,doc/master/classRooCurve.html,https://root.cern,https://root.cern/doc/master/classRooCurve.html,1,['Load'],['Loading']
Performance,". ROOT: RooCustomizer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooCustomizer Class Reference. ; RooCustomizer is a factory class to produce clones of a prototype composite PDF object with the same structure but different leaf servers (parameters or dependents). ; RooCustomizer supports two kinds of modifications:. replaceArg(leaf_arg, repl_arg): Replaces each occurrence of leaf_arg with repl_arg in the composite pdf.; splitArg(split_arg): Build multiple clones of the same prototype. Each occurrence of split_arg is replaced with a clone of split_arg named split_arg_[MCstate], where [MCstate] is the name of the 'master category state' that indexes the clones to be built. Example: Change the decay constant of an exponential for each run; Splitting is particularly useful when building simultaneous fits to subsets of the data sample with different background properties. In such a case, the user builds a single prototype PDF representing the structure of the signal and background and splits the dataset into categories with different background properties. Using RooCustomizer a PDF for each subfit can be constructed from the prototype that has same structure and signal parameters, but different instances of the background parameters: e.g. ...; RooExponential bg(""bg"",""background"",x,alpha) ;; RooGaussian sig(""sig"",""signal"",x,mean,sigma) ;; RooAddPdf pdf(""pdf"",""pdf"",sig,bg,sigfrac) ;; ; RooDataSet data(""data"",""dataset"",RooArgSet(x,runblock),...); ; RooCategory runblock(""runblock"",""run block"") ;; runblock.defineType(""run1"") ;; runblock.defineType(""run2"") ;; ; RooArgSet splitLeaves;; RooCustomizer cust(pdf,runblock,splitLeaves);; cust.splitArg(alpha,runblock);; ; RooAbsPdf* pdf_run1 = cust.build(""run1"") ;; RooAbsPdf* pdf_run2 = cust.build(""run2"") ;; ; RooSimultaneous simpdf(""simpdf"",""simpdf"",RooArgS",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCustomizer.html:82,Load,Loading,82,doc/master/classRooCustomizer.html,https://root.cern,https://root.cern/doc/master/classRooCustomizer.html,1,['Load'],['Loading']
Performance,". ROOT: RooDLLSignificanceMCSModule Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; RooDLLSignificanceMCSModule Class ReferenceRooFit » RooFit Core. ; Add-on module to RooMCStudy that calculates the significance of a signal by comparing the likelihood of a fit fit with a given parameter floating with a fit with that given parameter fixed to a nominal value (usually zero). ; The difference in the -log(L) of those two fits can be interpreted as the probability that a statistical background fluctation may result in a signal as large or larger than the signal observed. This interpretation is contingent on underlying normal sampling distributions and a MC study is a good way to test that assumption. ; Definition at line 23 of file RooDLLSignificanceMCSModule.h. Public Member Functions;  RooDLLSignificanceMCSModule (const char *parName, double nullHypoValue=0.0);  Constructor of module with parameter name to be interpreted as nSignal and the value of the null hypothesis for nSignal (usually zero) ;  ;  RooDLLSignificanceMCSModule (const RooDLLSignificanceMCSModule &other);  Copy constructor. ;  ;  RooDLLSignificanceMCSModule (const RooRealVar &param, double nullHypoValue=0.0);  Constructor of module with parameter to be interpreted as nSignal and the value of the null hypothesis for nSignal (usually zero) ;  ;  ~RooDLLSignificanceMCSModule () override;  ; RooDataSet * finalizeRun () override;  Return auxiliary dataset with results of delta(-log(L)) calculations of this module so that it is merged with RooMCStudy::fitParDataSet() by RooMCStudy. ;  ; bool initializeInstance () override;  Initialize module after attachment to RooMCStudy object. ;  ; bool initializeRun (Int_t) override;  Initialize module at beginning of RooCMStudy run. ;  ; TClass * IsA () const override;  ; bool processAfterFit (Int_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooDLLSignificanceMCSModule.html:96,Load,Loading,96,doc/master/classRooDLLSignificanceMCSModule.html,https://root.cern,https://root.cern/doc/master/classRooDLLSignificanceMCSModule.html,1,['Load'],['Loading']
Performance,". ROOT: RooDataHist Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Static Private Member Functions |; Private Attributes |; Friends |; List of all members ; RooDataHist Class ReferenceRooFit » RooFit Core. ; Container class to hold N-dimensional binned data. ; Each bin's central coordinates in N-dimensional space are represented by a RooArgSet containing RooRealVar, RooCategory or RooStringVar objects, thus data can be binned in real and/or discrete dimensions.; There is an unbinned equivalent, RooDataSet. Inspecting a datahist; Inspect a datahist using Print() to get the coordinates and weight() to get the bin contents: datahist->Print(""V"");; datahist->get(0)->Print(""V""); std::cout << ""w="" << datahist->weight(0) << std::endl;; datahist->get(1)->Print(""V""); std::cout << ""w="" << datahist->weight(1) << std::endl;; ... Plotting data.; See RooAbsData::plotOn(). Creating a datahist using RDataFrame; See alsoRooAbsDataHelper, rf408_RDataFrameToRooFit.C. PyROOT; Constructor of RooDataHist takes a RooCmdArg as argument also supports keyword arguments. For example, the following code is equivalent in PyROOT: # Directly passing a RooCmdArg:; dh = ROOT.RooDataHist(""dh"", ""dh"", ROOT.RooArgList(x), ROOT.RooFit.Import(""SampleA"", histo)); ; # With keyword arguments:; dh = ROOT.RooDataHist(""dh"", ""dh"", ROOT.RooArgList(x), Import=(""SampleA"", histo)). Definition at line 40 of file RooDataHist.h. Classes; struct  VarInfo;  Structure to cache information on the histogram variable that is frequently used for histogram weights retrieval. More...;  . Public Member Functions;  RooDataHist ();  Default constructor. ;  ;  RooDataHist (const RooDataHist &other, const char *newname=nullptr);  Copy constructor. ;  ;  RooDataHist (RooStringView name, RooSt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooDataHist.html:80,Load,Loading,80,doc/master/classRooDataHist.html,https://root.cern,https://root.cern/doc/master/classRooDataHist.html,1,['Load'],['Loading']
Performance,". ROOT: RooDataSet Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; RooDataSet Class ReferenceRooFit » RooFit Core. ; Container class to hold unbinned data. ; The binned equivalent is RooDataHist. In RooDataSet, each data point in N-dimensional space is represented by a RooArgSet of RooRealVar, RooCategory or RooStringVar objects, which can be retrieved using get().; Since RooDataSet saves every event, it allows for fits with highest precision. With a large amount of data, however, it could be beneficial to represent them in binned form, i.e., RooDataHist. Binning the data will incur a loss of information, though. RooDataHist on the other hand may suffer from the curse of dimensionality if a high-dimensional problem with a lot of bins on each axis is tackled. Inspecting a dataset; Inspect a dataset using Print() with the ""verbose"" option: dataset->Print(""V"");; dataset->get(0)->Print(""V"");; dataset->get(1)->Print(""V"");; ... Plotting data.; See RooAbsData::plotOn(). Storage strategy; There are two storage backends:; RooVectorDataStore (default): std::vectors in memory. They are fast, but they cannot be serialised if the dataset exceeds a size of 1 Gb; RooTreeDataStore: Uses a TTree, which can be file backed if a file is opened before creating the dataset. This significantly reduces the memory pressure, as the baskets of the tree can be written to a file, and only the basket that's currently being read stays in RAM.; Enable tree-backed storage similar to this: TFile outputFile(""filename.root"", ""RECREATE"");; RooAbsData::setDefaultStorageType(RooAbsData::Tree);; RooDataSet mydata(...);; RooAbsData::setDefaultStorageTypestatic void setDefaultStorageType(StorageType s)Definition RooAbsData.cxx:130; RooAbsData",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooDataSet.html:79,Load,Loading,79,doc/master/classRooDataSet.html,https://root.cern,https://root.cern/doc/master/classRooDataSet.html,1,['Load'],['Loading']
Performance,". ROOT: RooDecay Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; RooDecay Class ReferenceRooFit » RooFit. ; Single or double sided decay function that can be analytically convolved with any RooResolutionModel implementation. ; It declares the basis functions for the analytical convolution with a RooResolutionModel. See RooAbsAnaConvPdf. ; \[; \mathrm{basis} = \begin{cases}; \exp\left(-\frac{t}{\tau}\right) & \mathrm{SingleSided} \\; \exp\left( \frac{t}{\tau}\right) & \mathrm{Flipped} \\; \exp\left(-\frac{|t|}{\tau}\right) & \mathrm{DoubleSided}; \end{cases}; \]. PyROOT; Some constructors of classes like RooDecay, RooBDecay, RooBCPGenDecay, RooBCPEffDecay and RooBMixDecay that take an enum DecayType as argument also support keyword arguments. For example, the following code is equivalent in PyROOT: # Directly passing keyword argument with string corresponding to enum value name:; decay_tm = ROOT.RooDecay(""decay_tm"", ""decay"", dt, tau, tm, ROOT.RooDecay.DoubleSided); ; # With enum value:; decay_tm = ROOT.RooDecay(""decay_tm"", ""decay"", dt, tau, tm, type=""DoubleSided""). Definition at line 22 of file RooDecay.h. Public Types; enum  DecayType { SingleSided; , DoubleSided; , Flipped; };  ;  Public Types inherited from RooAbsPdf; enum  ExtendMode { CanNotBeExtended; , CanBeExtended; , MustBeExtended; };  ;  Public Types inherited from RooAbsReal; enum  ErrorLoggingMode { PrintErrors; , CollectErrors; , CountErrors; , Ignore; };  ; enum  ScaleType { Raw; , Relative; , NumEvent; , RelativeExpected; };  ; using value_type = double;  ;  Public Types inherited from RooAbsArg; enum  CacheMode { Always =0; , NotAdvised =1; , Never =2; };  ; enum  ConstOpCode { Activate =0; , DeActivate =1; , ConfigChange =2; , ValueChange =3; };  ; enum  OperMode { Auto =0; , AClean =1; , ADirty =2; };  ; us",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooDecay.html:77,Load,Loading,77,doc/master/classRooDecay.html,https://root.cern,https://root.cern/doc/master/classRooDecay.html,1,['Load'],['Loading']
Performance,". ROOT: RooDerivative Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooDerivative Class ReferenceRooFit » RooFit Core. ; Represents the first, second, or third order derivative of any RooAbsReal as calculated (numerically) by the MathCore Richardson derivator class. ; Definition at line 30 of file RooDerivative.h. Public Member Functions;  RooDerivative ();  Default constructor. ;  ;  RooDerivative (const char *name, const char *title, RooAbsReal &func, RooRealVar &x, const RooArgSet &nset, Int_t order=1, double eps=0.001);  ;  RooDerivative (const char *name, const char *title, RooAbsReal &func, RooRealVar &x, Int_t order=1, double eps=0.001);  ;  RooDerivative (const RooDerivative &other, const char *name=nullptr);  ;  ~RooDerivative () override;  ; TObject * clone (const char *newname) const override;  ; double eps () const;  ; TClass * IsA () const override;  ; Int_t order () const;  ; bool redirectServersHook (const RooAbsCollection &, bool, bool, bool) override;  Zap functor and derivator ;. ;  ; void setEps (double e);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; virtual double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const;  Implemen",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooDerivative.html:82,Load,Loading,82,doc/master/classRooDerivative.html,https://root.cern,https://root.cern/doc/master/classRooDerivative.html,1,['Load'],['Loading']
Performance,". ROOT: RooDouble Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; RooDouble Class ReferenceRooFit » RooFit Core. ; Minimal implementation of a TObject holding a double value. ; Definition at line 22 of file RooDouble.h. Public Member Functions;  RooDouble ();  Default constructor. ;  ;  RooDouble (const RooDouble &other);  ;  RooDouble (double value);  ; Int_t Compare (const TObject *other) const override;  Implement comparison to other TObjects that are also RooDouble to facilitate sorting of RooDoubles in a ROOT container. ;  ; TClass * IsA () const override;  ; bool IsSortable () const override;  We are a sortable object. ;  ;  operator double () const;  Return value of contained double. ;  ; RooDouble & operator= (double value);  Return true if contained double equals value. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooDouble.html:78,Load,Loading,78,doc/master/classRooDouble.html,https://root.cern,https://root.cern/doc/master/classRooDouble.html,1,['Load'],['Loading']
Performance,". ROOT: RooDstD0BG Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooDstD0BG Class ReferenceRooFit » RooFit. ; Special p.d.f shape that can be used to model the background of D*-D0 mass difference distributions. ; It computes. \[; \mathrm{RooDSTD0}(m \, | \, m_0, A, B, C) =; \left(1 - \exp\left(-\frac{m - m_0}{C}\right) \right); \cdot \left(\frac{m}{m_0}\right)^A + B; \cdot \left(\frac{m}{m_0} - 1 \right); \]. Definition at line 26 of file RooDstD0BG.h. Public Member Functions;  RooDstD0BG ();  ;  RooDstD0BG (const char *name, const char *title, RooAbsReal &_dm, RooAbsReal &_dm0, RooAbsReal &_c, RooAbsReal &_a, RooAbsReal &_b);  ;  RooDstD0BG (const RooDstD0BG &other, const char *name=nullptr);  ; double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const override;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; TObject * clone (const char *newname) const override;  ; Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const override;  if (matchArgs(allVars,analVars,dm)) return 1 ; ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsPdf;  RooAbsPdf ();  Default constructor. ;  ;  RooAbsPdf (const char *name, const char *title, double minVal, double maxVal);  Constructor with name, title, and plot range. ;  ;  RooAbsPdf (const char *name, const char *title=nullptr);  Constructor with name and title only. ;  ;  ~RooAbsPdf () override;  Destructor. ;  ; double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Analytical integral ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooDstD0BG.html:79,Load,Loading,79,doc/master/classRooDstD0BG.html,https://root.cern,https://root.cern/doc/master/classRooDstD0BG.html,1,['Load'],['Loading']
Performance,". ROOT: RooEffGenContext Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; RooEffGenContext Class ReferenceRooFit » RooFit Core. ; Specialized generator context for p.d.fs represented by class RooEffProd, which are p.d.fs multiplied with an efficiency function. ; This generator context generates events from such products by first generating events from a dedicated generator context of the input p.d.f. and applying an extra rejection step based on the efficiency function. ; Definition at line 23 of file RooEffGenContext.h. Public Member Functions;  RooEffGenContext (const RooAbsPdf &model, const RooAbsPdf &pdf, const RooAbsReal &eff, const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false, const RooArgSet *forceDirect=nullptr);  Constructor of generator context for RooEffProd products. ;  ; TClass * IsA () const override;  ; void printMultiline (std::ostream &os, Int_t content, bool verbose=false, TString indent="""") const override;  Detailed printing interface. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsGenContext;  RooAbsGenContext (const RooAbsPdf &model, const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool _verbose=false);  Constructor. ;  ; virtual void attach (const RooArgSet &params);  Interface to attach given parameters to object in this context. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default contents when printing. ;  ; StyleOption defaultPrintStyle (Option_t *opt) const override;  Define default print style. ;  ; virtual RooDataSet * generate (do",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooEffGenContext.html:85,Load,Loading,85,doc/master/classRooEffGenContext.html,https://root.cern,https://root.cern/doc/master/classRooEffGenContext.html,1,['Load'],['Loading']
Performance,". ROOT: RooEffProd Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooEffProd Class Reference. ; The class RooEffProd implements the product of a PDF with an efficiency function. ; The normalization integral of the product is calculated numerically, but the event generation is handled by a specialized generator context that implements the event generation in a more efficient for cases where the PDF has an internal generator that is smarter than accept reject. ; Definition at line 19 of file RooEffProd.h. Public Member Functions;  RooEffProd ();  ;  RooEffProd (const char *name, const char *title, RooAbsPdf &pdf, RooAbsReal &efficiency);  Constructs the product of the PDF inPdf with the efficiency function inEff. ;  ;  RooEffProd (const RooEffProd &other, const char *name=nullptr);  Copy constructor. ;  ; TObject * clone (const char *newname) const override;  ; RooAbsGenContext * genContext (const RooArgSet &vars, const RooDataSet *prototype, const RooArgSet *auxProto, bool verbose) const override;  Return specialized generator context for RooEffProds that implements generation in a more efficient way than can be done for generic correlated products. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsPdf;  RooAbsPdf ();  Default constructor. ;  ;  RooAbsPdf (const char *name, const char *title, double minVal, double maxVal);  Constructor with name, title, and plot range. ;  ;  RooAbsPdf (const char *name, const char *title=nullptr);  Constructor with name and title only. ;  ;  ~RooAbsPdf () override;  Destructor. ;  ; double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooEffProd.html:79,Load,Loading,79,doc/master/classRooEffProd.html,https://root.cern,https://root.cern/doc/master/classRooEffProd.html,1,['Load'],['Loading']
Performance,". ROOT: RooEfficiency Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooEfficiency Class ReferenceRooFit » RooFit Core. ; A PDF helper class to fit efficiencies parameterized by a supplied function F. ; Given a dataset with a category C that determines if a given event is accepted or rejected for the efficiency to be measured, this class evaluates as F if C is 'accept' and as (1-F) if C is 'reject'. Values of F below 0 and above 1 are clipped. F may have an arbitrary number of dependents and parameters ; Definition at line 24 of file RooEfficiency.h. Public Member Functions;  RooEfficiency ();  Default constructor. ;  ;  RooEfficiency (const char *name, const char *title, const RooAbsReal &effFunc, const RooAbsCategory &cat, const char *sigCatName);  Construct an N+1 dimensional efficiency p.d.f from an N-dimensional efficiency function and a category cat with two states (0,1) that indicate if a given event should be counted as rejected or accepted respectively. ;  ;  RooEfficiency (const RooEfficiency &other, const char *name=nullptr);  Copy constructor. ;  ; double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const override;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; std::string buildCallToAnalyticIntegral (Int_t code, const char *rangeName, RooFit::Detail::CodeSquashContext &ctx) const override;  This function defines the analytical integral translation for the class. ;  ; TObject * clone (const char *newname) const override;  ; Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const override;  Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ;  ; TClass * IsA () const override;  ; void Streamer (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooEfficiency.html:82,Load,Loading,82,doc/master/classRooEfficiency.html,https://root.cern,https://root.cern/doc/master/classRooEfficiency.html,1,['Load'],['Loading']
Performance,". ROOT: RooEllipse Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; RooEllipse Class ReferenceRooFit » RooFit Core. ; Two-dimensional ellipse that can be used to represent an error contour. ; Definition at line 22 of file RooEllipse.h. Public Member Functions;  RooEllipse ()=default;  ;  RooEllipse (const char *name, double x1, double x2, double s1, double s2, double rho=0, Int_t points=100);  Create a 2-dimensional ellipse centered at (x1,x2) that represents the confidence level contour for a measurement with errors (s1,s2) and correlation coefficient rho. ;  ; double getFitRangeBinW () const override;  ; double getFitRangeNEvt () const override;  ; double getFitRangeNEvt (double, double) const override;  ; TClass * IsA () const override;  ; void Print (Option_t *options=nullptr) const override;  Printing interface. ;  ; void printClassName (std::ostream &os) const override;  Print class name of ellipse on ostream. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Print detailed multi line information on ellipse on ostreamx. ;  ; void printName (std::ostream &os) const override;  Print name of ellipse on ostream. ;  ; void printTitle (std::ostream &os) const override;  Print title of ellipse on ostream. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGraph;  TGraph ();  Graph default constructor. ;  ;  TGraph (const char *filename, const char *format=""%lg %lg"", Option_t *option="""");  Graph constructor reading input from filename. ;  ;  TGraph (const TF1 *f, Option_t *option="""");  Graph constructor importing its parameters from the TF1 object passed as argument. ;  ;  TGraph (const TGraph &gr);  Copy constructor ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooEllipse.html:79,Load,Loading,79,doc/master/classRooEllipse.html,https://root.cern,https://root.cern/doc/master/classRooEllipse.html,1,['Load'],['Loading']
Performance,". ROOT: RooErrorVar Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooErrorVar Class ReferenceRooFit » RooFit Core. ; Auxiliary class that represents the error of a RooRealVar as a separate object. ; The main reason of existence of this class is to facilitate the reuse of existing techniques to perform calculations that involve a RooRealVars error, such as calculating the pull value. ; Definition at line 28 of file RooErrorVar.h. Public Member Functions;  RooErrorVar ();  Default constructor. ;  ;  RooErrorVar (const char *name, const char *title, const RooRealVar &input);  Construct an lvalue variable representing the error of RooRealVar input. ;  ;  RooErrorVar (const RooErrorVar &other, const char *name=nullptr);  ;  ~RooErrorVar () override;  ; TObject * clone (const char *newname) const override;  ; double evaluate () const override;  Evaluate this PDF / function / constant. Needs to be overridden by all derived classes. ;  ; const RooAbsBinning & getBinning (const char *name=nullptr, bool verbose=true, bool createOnTheFly=false) const override;  Return binning with given name. ;  ; RooAbsBinning & getBinning (const char *name=nullptr, bool verbose=true, bool createOnTheFly=false) override;  Return binning with given name. ;  ; std::list< std::string > getBinningNames () const override;  Get a list of all binning names. ;  ; double getValV (const RooArgSet *set=nullptr) const override;  Return value, i.e. error on input variable. ;  ; bool hasBinning (const char *name) const override;  Return true if we have binning with given name. ;  ; TClass * IsA () const override;  ; bool isFundamental () const override;  Is this object a fundamental type that can be added to a dataset? Fundamental-type subclasses override this method to return true. ;  ; virtual Roo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooErrorVar.html:80,Load,Loading,80,doc/master/classRooErrorVar.html,https://root.cern,https://root.cern/doc/master/classRooErrorVar.html,2,"['Load', 'perform']","['Loading', 'perform']"
Performance,". ROOT: RooExpensiveObjectCache Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; RooExpensiveObjectCache Class ReferenceRooFit » RooFit Core. ; Singleton class that serves as repository for objects that are expensive to calculate. ; Owners of such objects can registers these here with associated parameter values for which the object is valid, so that other instances can, at a later moment retrieve these precalculated objects. ; Definition at line 24 of file RooExpensiveObjectCache.h. Classes; class  ExpensiveObject;  . Public Member Functions;  RooExpensiveObjectCache ();  ;  RooExpensiveObjectCache (const RooExpensiveObjectCache &other);  ;  ~RooExpensiveObjectCache () override;  Destructor. ;  ; void clearAll ();  Clear all cache elements. ;  ; bool clearObj (Int_t uniqueID);  Clear cache element with given unique ID Retrieve payload object of cache element with given unique ID. ;  ; bool empty () const;  ; const TObject * getObj (Int_t uniqueID);  Retrieve payload object of cache element with given unique ID. ;  ; void importCacheObjects (RooExpensiveObjectCache &other, const char *ownerName, bool verbose=false);  ; TClass * IsA () const override;  ; void print () const;  ; bool registerObject (const char *ownerName, const char *objectName, TObject &cacheObject, const RooArgSet &params);  Register object associated with given name and given associated parameters with given values in cache. ;  ; const TObject * retrieveObject (const char *name, TClass *tclass, const RooArgSet &params);  Retrieve object from cache that was registered under given name with given parameters, if current parameter values match those that were stored in the registry for this object. ;  ; bool setObj (Int_t uniqueID, TObject *obj);  Place new payload object in cache element with given unique ID. ;  ; I",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooExpensiveObjectCache.html:92,Load,Loading,92,doc/master/classRooExpensiveObjectCache.html,https://root.cern,https://root.cern/doc/master/classRooExpensiveObjectCache.html,2,"['Load', 'cache']","['Loading', 'cache']"
Performance,". ROOT: RooExponential Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooExponential Class ReferenceRooFit » RooFit. ; Exponential PDF. ; It computes ; \[; \mathrm{RooExponential}(x, c) = \mathcal{N} \cdot \exp(c\cdot x),; \]. where \( \mathcal{N} \) is a normalisation constant that depends on the range and values of the arguments. ; Definition at line 22 of file RooExponential.h. Public Member Functions;  RooExponential ();  ;  RooExponential (const char *name, const char *title, RooAbsReal &variable, RooAbsReal &coefficient, bool negateCoefficient=false);  ;  RooExponential (const RooExponential &other, const char *name=nullptr);  ; double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const override;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; std::string buildCallToAnalyticIntegral (Int_t code, const char *rangeName, RooFit::Detail::CodeSquashContext &ctx) const override;  This function defines the analytical integral translation for the class. ;  ; TObject * clone (const char *newname) const override;  ; RooAbsReal const & coefficient () const;  Get the coefficient ""c"". ;  ; Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const override;  Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ;  ; TClass * IsA () const override;  ; bool negateCoefficient () const;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void translate (RooFit::Detail::CodeSquashContext &ctx) const override;  This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooExponential.html:83,Load,Loading,83,doc/master/classRooExponential.html,https://root.cern,https://root.cern/doc/master/classRooExponential.html,1,['Load'],['Loading']
Performance,". ROOT: RooExtendPdf Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; RooExtendPdf Class Reference. ; RooExtendPdf is a wrapper around an existing PDF that adds a parameteric extended likelihood term to the PDF, optionally divided by a fractional term from a partial normalization of the PDF: . \[; n_\mathrm{Expected} = N \quad \text{or} \quad n_\mathrm{Expected} = N / \mathrm{frac}; \]. where \( N \) is supplied as a RooAbsReal to RooExtendPdf. The fractional term is defined as ; \[; \mathrm{frac} = \frac{\int_\mathrm{cutRegion[x]} \mathrm{pdf}(x,y) \; \mathrm{d}x \mathrm{d}y}{; \int_\mathrm{normRegion[x]} \mathrm{pdf}(x,y) \; \mathrm{d}x \mathrm{d}y}; \]. where \( x \) is the set of dependents involved in the selection region and \( y \) is the set of remaining dependents.; \( \mathrm{cutRegion}[x] \) is a limited integration range that is contained in the nominal integration range \( \mathrm{normRegion}[x] \). ; Definition at line 22 of file RooExtendPdf.h. Public Member Functions;  RooExtendPdf ()=default;  ;  RooExtendPdf (const char *name, const char *title, RooAbsPdf &pdf, RooAbsReal &norm, const char *rangeName=nullptr);  ;  RooExtendPdf (const char *name, const char *title, RooAbsPdf &pdf, RooAbsReal::Ref norm, const char *rangeName=nullptr);  Constructor. ;  ;  RooExtendPdf (const RooExtendPdf &other, const char *name=nullptr);  ; double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Forward calculation of analytical integrals to input p.d.f. ;  ; TObject * clone (const char *newname) const override;  ; std::unique_ptr< RooAbsReal > createExpectedEventsFunc (const RooArgSet *nset) const override;  Returns an object that represents the expected number of events for a given normalization set, similar to how createIntegral() ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooExtendPdf.html:81,Load,Loading,81,doc/master/classRooExtendPdf.html,https://root.cern,https://root.cern/doc/master/classRooExtendPdf.html,1,['Load'],['Loading']
Performance,". ROOT: RooExtendedBinding Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooExtendedBinding Class Reference. . Definition at line 20 of file RooExtendedBinding.h. Public Member Functions;  RooExtendedBinding ();  ;  RooExtendedBinding (const char *name, const char *title, RooAbsPdf &_pdf);  ;  RooExtendedBinding (const RooExtendedBinding &other, const char *name=nullptr);  ; TObject * clone (const char *newname) const override;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; virtual double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; virtual double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; TF1 * asTF (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a ROOT TF1,2,3 object bound to this RooAbsReal with given definition of observables and parameters. ;  ; virtual std::list< double > * binBoundaries (RooAbsRealLValue &obs, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooExtendedBinding.html:87,Load,Loading,87,doc/master/classRooExtendedBinding.html,https://root.cern,https://root.cern/doc/master/classRooExtendedBinding.html,1,['Load'],['Loading']
Performance,". ROOT: RooExtendedTerm Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; RooExtendedTerm Class ReferenceRooFit » RooFit Core. ; A p.d.f with no observables that only introduces an extended ML term for a given number of expected events term when an extended ML is constructed. ; Definition at line 22 of file RooExtendedTerm.h. Public Member Functions;  RooExtendedTerm ()=default;  ;  RooExtendedTerm (const char *name, const char *title, const RooAbsReal &n);  Constructor. ;  ;  RooExtendedTerm (const RooExtendedTerm &other, const char *name=nullptr);  Copy constructor. ;  ; TObject * clone (const char *newname) const override;  ; std::unique_ptr< RooAbsReal > createExpectedEventsFunc (const RooArgSet *nset) const override;  Returns an object that represents the expected number of events for a given normalization set, similar to how createIntegral() returns an object that returns the integral. ;  ; double evaluate () const override;  Evaluate this PDF / function / constant. Needs to be overridden by all derived classes. ;  ; double expectedEvents (const RooArgSet *nset) const override;  Return number of expected events, in other words the value of the associated n parameter. ;  ; ExtendMode extendMode () const override;  Returns ability of PDF to provide extended likelihood terms. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsPdf;  RooAbsPdf ();  Default constructor. ;  ;  RooAbsPdf (const char *name, const char *title, double minVal, double maxVal);  Constructor with name, title, and plot range. ;  ;  RooAbsPdf (const char *name, const char *title=nullptr);  Constructor with name and title only. ;  ;  ~RooAbsPdf ()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooExtendedTerm.html:84,Load,Loading,84,doc/master/classRooExtendedTerm.html,https://root.cern,https://root.cern/doc/master/classRooExtendedTerm.html,1,['Load'],['Loading']
Performance,". ROOT: RooFFTConvPdf Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Friends |; List of all members ; RooFFTConvPdf Class ReferenceRooFit » RooFit Core. ; PDF for the numerical (FFT) convolution of two PDFs. ; This class implements a generic one-dimensional numeric convolution of two PDFs, and can convolve any two RooAbsPdfs.; The class exploits the convolution theorem ; \[; f(x) * g(x) \rightarrow F(k_i) \cdot G(k_i); \]. to calculate the convolution by calculating a Real->Complex FFT of both input PDFs, multiplying the complex coefficients and performing the reverse Complex->Real FFT to get the result in the input space. This class uses the ROOT FFT interface to the (free) FFTW3 package (www.fftw.org), and requires that your ROOT installation is compiled with the fftw3=ON (default). Instructions for manually installing fftw below.; Note that the performance in terms of speed and stability of RooFFTConvPdf is vastly superior to that of RooNumConvPdf.; An important feature of FFT convolutions is that the observable is assumed to be cyclical. This is correct for cyclical observables such as angles, but does not hold in general. For non-cyclical variables, wrap-around artifacts may be encountered, e.g. if the PDF is zero at xMin and non-zero at xMax. A rising tail may appear at xMin. This is inevitable when using FFTs. A distribution with 3 bins therefore looks like: ... 0 1 2 0 1 2 0 1 2 ...; Therefore, if bins 0 and 2 are not equal, the FFT sees a cyclical function with a step at the 2|0 boundary, which causes artifacts in Fourier space.; The spillover or discontinuity can be reduced or eliminated by introducing a buffer zone in the FFT calculation. If this feature is activated (on by default), the sampling array for the FFT ca",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFFTConvPdf.html:82,Load,Loading,82,doc/master/classRooFFTConvPdf.html,https://root.cern,https://root.cern/doc/master/classRooFFTConvPdf.html,2,"['Load', 'perform']","['Loading', 'performing']"
Performance,". ROOT: RooFactoryWSTool Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; List of all members ; RooFactoryWSTool Class ReferenceRooFit » RooFit Core. ; Implementation detail of the RooWorkspace. ; It interprets all expressions for RooWorkspace::factory(const char*). ; Definition at line 47 of file RooFactoryWSTool.h. Classes; class  IFace;  ; class  SpecialsIFace;  . Public Member Functions;  RooFactoryWSTool (const RooFactoryWSTool &)=delete;  ;  RooFactoryWSTool (RooWorkspace &ws);  ; RooAddPdf * add (const char *objName, const char *specList, bool recursiveCoefs=false);  ; RooAddition * addfunc (const char *objName, const char *specList);  ; RooRealSumPdf * amplAdd (const char *objName, const char *specList);  ; RooAbsArg & asARG (const char *);  CINT constructor interface, return constructor string argument #idx as RooAbsArg reference found in workspace. ;  ; RooCategory & asCAT (const char *);  CINT constructor interface, return constructor string argument #idx as RooCategory reference found in workspace. ;  ; RooAbsCategory & asCATFUNC (const char *);  CINT constructor interface, return constructor string argument #idx as RooAbsCategory reference found in workspace. ;  ; RooAbsCategoryLValue & asCATLV (const char *);  CINT constructor interface, return constructor string argument #idx as RooAbsCategoryLValue reference found in workspace. ;  ; RooAbsData & asDATA (const char *);  CINT constructor interface, return constructor string argument #idx as RooAbsData object found in workspace. ;  ; RooDataHist & asDHIST (const char *);  CINT constructor interface, return constructor string argument #idx as RooDataHist object found in workspace. ;  ; double asDOUBLE (const char *);  CINT constructor interface",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFactoryWSTool.html:85,Load,Loading,85,doc/master/classRooFactoryWSTool.html,https://root.cern,https://root.cern/doc/master/classRooFactoryWSTool.html,1,['Load'],['Loading']
Performance,". ROOT: RooFirstMoment Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooFirstMoment Class ReferenceRooFit » RooFit Core. . Definition at line 26 of file RooFirstMoment.h. Public Member Functions;  RooFirstMoment ()=default;  ;  RooFirstMoment (const char *name, const char *title, RooAbsReal &func, RooRealVar &x);  ;  RooFirstMoment (const char *name, const char *title, RooAbsReal &func, RooRealVar &x, const RooArgSet &nset, bool intNSet=false);  ;  RooFirstMoment (const RooFirstMoment &other, const char *name=nullptr);  ; TObject * clone (const char *newname) const override;  ; const RooAbsReal & iF ();  ; TClass * IsA () const override;  ; const RooAbsReal & ixF ();  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; const RooAbsReal & xF ();  ;  Public Member Functions inherited from RooAbsMoment;  RooAbsMoment ()=default;  ;  RooAbsMoment (const char *name, const char *title, RooAbsReal &func, RooRealVar &x, Int_t order=1, bool takeRoot=false);  ;  RooAbsMoment (const RooAbsMoment &other, const char *name=nullptr);  ; bool central () const;  ; RooAbsReal * mean ();  ; Int_t order () const;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; virtual do",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFirstMoment.html:83,Load,Loading,83,doc/master/classRooFirstMoment.html,https://root.cern,https://root.cern/doc/master/classRooFirstMoment.html,1,['Load'],['Loading']
Performance,". ROOT: RooFit Core. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes ; RooFit CoreRooFit. ; RooFit core classes. These provide the infrastructure for building likelihood models. . Classes; class  RooFit::Evaluator;  Evaluates a RooAbsReal object in other ways than recursive graph traversal. More...;  ; class  Roo1DTable;  One-dimensional table. More...;  ; class  RooAbsAnaConvPdf;  Base class for PDFs that represent a physics model that can be analytically convolved with a resolution model. More...;  ; class  RooAbsArg;  Common abstract base class for objects that represent a value and a ""shape"" in RooFit. More...;  ; class  RooAbsBinning;  Abstract base class for RooRealVar binning definitions. More...;  ; class  RooAbsCache;  Abstract base class for data members of RooAbsArgs that cache other (composite) RooAbsArg expressions. More...;  ; class  RooAbsCachedPdf;  Abstract base class for p.d.f.s that need or want to cache their evaluate() output in a RooHistPdf defined in terms of the used observables. More...;  ; class  RooAbsCachedReal;  Abstract base class for functions that need or want to cache their evaluate() output in a RooHistFunc defined in terms of the used observables. More...;  ; class  RooAbsCacheElement;  Abstract base class for objects to be stored in RooAbsCache cache manager objects. More...;  ; class  RooAbsCategory;  A space to attach TBranches. More...;  ; class  RooAbsCategoryLValue;  Abstract base class for objects that represent a discrete value that can be set from the outside, i.e. More...;  ; class  RooAbsCollection;  Abstract container object that can hold multiple RooAbsArg objects. More...;  ; class  RooAbsData;  Abstract base class for binned and unbinned datasets. More...;  ; class  RooAbsDataStore;  Abstract base class for a data collection. More...;  ; class  RooAbsFunc;  Abstract interface for evaluating a real-valued function of one real variable and performing numerical algorithms on it. M",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Roofitcore.html:64,Load,Loading,64,doc/master/group__Roofitcore.html,https://root.cern,https://root.cern/doc/master/group__Roofitcore.html,2,"['Load', 'cache']","['Loading', 'cache']"
Performance,". ROOT: RooFit Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces |; Classes |; Typedefs |; Enumerations |; Functions ; RooFit Namespace Reference. The namespace RooFit contains mostly switches that change the behaviour of functions of PDFs (or other types of arguments). ; More... Namespaces; namespace  Detail;  ; namespace  Experimental;  ; namespace  JSONIO;  ; namespace  MultiProcess;  ; namespace  TestStatistics;  Namespace for new RooFit test statistic calculation. ;  . Classes; class  EvalBackend;  ; class  EvalContext;  ; class  Evaluator;  Evaluates a RooAbsReal object in other ways than recursive graph traversal. More...;  ; struct  NodeInfo;  A struct used by the Evaluator to store information on the RooAbsArgs in the computation graph. More...;  ; struct  UniqueId;  A UniqueId can be added as a class member to enhance any class with a unique identifier for each instantiated object. More...;  . Typedefs; typedef double(* CFUNCD1D) (double);  ; typedef double(* CFUNCD1I) (Int_t);  ; typedef double(* CFUNCD2DD) (double, double);  ; typedef double(* CFUNCD2DI) (double, Int_t);  ; typedef double(* CFUNCD2ID) (Int_t, double);  ; typedef double(* CFUNCD2II) (Int_t, Int_t);  ; typedef double(* CFUNCD2UD) (UInt_t, double);  ; typedef double(* CFUNCD3DDB) (double, double, bool);  ; typedef double(* CFUNCD3DDD) (double, double, double);  ; typedef double(* CFUNCD3DII) (double, Int_t, Int_t);  ; typedef double(* CFUNCD3UDD) (UInt_t, double, double);  ; typedef double(* CFUNCD3UDU) (UInt_t, double, UInt_t);  ; typedef double(* CFUNCD3UUD) (UInt_t, UInt_t, double);  ; typedef double(* CFUNCD4DDDB) (double, double, double, bool);  ; typedef double(* CFUNCD4DDDD) (double, double, double, double);  ; typedef double(* CFUNCD4DDDI) (double, double, double, Int_t);  ; using ModelConfig = RooStats::ModelConfig;  ; template<typename T > ; using OwningPtr = T *;  An alias for raw pointers for indicating that the retur",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceRooFit.html:79,Load,Loading,79,doc/master/namespaceRooFit.html,https://root.cern,https://root.cern/doc/master/namespaceRooFit.html,1,['Load'],['Loading']
Performance,". ROOT: RooFit Tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; RooFit TutorialsTutorials. ; These tutorials illustrate the main features of RooFit: the name of the examples and their short description help in figuring out their objective. . Files; file  rf101_basics.C;   Basic functionality: fitting, plotting, toy data generation on one-dimensional PDFs. ;  ; file  rf101_basics.py;   This tutorial illustrates the basic features of RooFit. ;  ; file  rf102_dataimport.C;   Basic functionality: importing data from ROOT TTrees and THx histograms. ;  ; file  rf102_dataimport.py;   'BASIC FUNCTIONALITY' RooFit tutorial macro #102 Importing data from ROOT TTrees and THx histograms ;  ; file  rf103_interprfuncs.C;   Basic functionality: interpreted functions and PDFs. ;  ; file  rf103_interprfuncs.py;   Basic functionality: interpreted functions and pdfs ;  ; file  rf104_classfactory.C;   Basic functionality: The class factory for functions and pdfs ;  ; file  rf104_classfactory.py;   Basic functionality: the class factory for functions and pdfs ;  ; file  rf105_funcbinding.C;   Basic functionality: binding ROOT math functions as RooFit functions and pdfs ;  ; file  rf105_funcbinding.py;   'BASIC FUNCTIONALITY' RooFit tutorial macro #105 Demonstration of binding ROOT Math functions as RooFit functions and pdfs ;  ; file  rf106_plotdecoration.C;   Basic functionality: adding boxes with parameters, statistics to RooPlots, decorating with arrows, text etc... ;  ; file  rf106_plotdecoration.py;   Basic functionality: adding boxes with parameters to RooPlots and decorating with arrows, etc... ;  ; file  rf107_plotstyles.C;   Basic functionality: various plotting styles of data, functions in a RooPlot ;  ; file  rf107_plotstyles.py;   Basic functionality: demonstration of various plotting styles of data, functions in a RooPlot ;  ; file  rf108_plotbinning.C;   Basic functionality: plotting unbinned data with alternate and variabl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tutorial__roofit.html:69,Load,Loading,69,doc/master/group__tutorial__roofit.html,https://root.cern,https://root.cern/doc/master/group__tutorial__roofit.html,1,['Load'],['Loading']
Performance,". ROOT: RooFit. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Modules ; RooFit. ; RooFit is a package for building likelihood models and fitting these to data. ; For an introduction check the RooFit Tutorials, user's guides, courses or the RooFit chapter of the Manual.; For developers, there is also the RooFit Developer Documentation, which serves as a reference on how to extend RooFit with custom classes or for contributing to RooFit itself. . Modules;  RooFit Developer Documentation;  How-to guides on how to extend RooFit with custom classes or to work on RooFit itself. ;  ;  RooFit;  RooFit main classes for building likelihood models, mainly PDFs. ;  ;  RooFit Core;  RooFit core classes. These provide the infrastructure for building likelihood models. ;  ;  RooFit Legacy;  Old RooFit classes. ;  ;  RooFit command arguments;  These arguments can be passed to functions of RooFit objects. ;  ;  RooFit More;  RooFit components that are only available if ROOT was built with the mathmore option. ;  ;  RooStats;  RooStats is a toolkit for statistical tests built on top of RooFit. ;  ;  xRooFit;  A high-level API for RooFit. ;  ;  RooFit Pythonizations;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:33 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Roofitmain.html:59,Load,Loading,59,doc/master/group__Roofitmain.html,https://root.cern,https://root.cern/doc/master/group__Roofitmain.html,1,['Load'],['Loading']
Performance,". ROOT: RooFit::Detail::CodeSquashContext Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Public Attributes |; Private Member Functions |; Private Attributes |; List of all members ; RooFit::Detail::CodeSquashContext Class Reference. ; A class to maintain the context for squashing of RooFit models into code. ; Definition at line 42 of file CodeSquashContext.h. Classes; class  LoopScope;  A class to manage loop scopes using the RAII technique. More...;  . Public Member Functions;  CodeSquashContext (std::map< RooFit::Detail::DataKey, std::size_t > const &outputSizes, std::vector< double > &xlarr, Experimental::RooFuncWrapper &wrapper);  ; void addResult (const char *key, std::string const &value);  Adds (or overwrites) the string representing the result of a node. ;  ; void addResult (RooAbsArg const *key, std::string const &value);  A function to save an expression that includes/depends on the result of the input node. ;  ; void addToCodeBody (RooAbsArg const *klass, std::string const &in);  Adds the input string to the squashed code body. ;  ; void addToCodeBody (std::string const &in, bool isScopeIndep=false);  A variation of the previous addToCodeBody that takes in a bool value that determines if input is independent. ;  ; void addToGlobalScope (std::string const &str);  Adds the given string to the string block that will be emitted at the top of the squashed function. ;  ; void addVecObs (const char *key, int idx);  Since the squashed code represents all observables as a single flattened array, it is important to keep track of the start index for a vector valued observable which can later be expanded to access the correct element. ;  ; std::string assembleCode (std::string const &returnExpr);  Assemble and return the final code with the return expression and global statements. ;  ; std::unique_ptr< LoopScope > beginLoop (RooAbsArg const *in);  Create a R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFit_1_1Detail_1_1CodeSquashContext.html:102,Load,Loading,102,doc/master/classRooFit_1_1Detail_1_1CodeSquashContext.html,https://root.cern,https://root.cern/doc/master/classRooFit_1_1Detail_1_1CodeSquashContext.html,1,['Load'],['Loading']
Performance,". ROOT: RooFit::Detail::CompileContext Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; RooFit::Detail::CompileContext Class Reference. . Definition at line 29 of file NormalizationHelpers.h. Public Member Functions;  CompileContext (RooArgSet const &topLevelNormSet);  ;  ~CompileContext ();  ; bool binnedLikelihoodMode () const;  ; bool binWidthFuncFlag () const;  ; template<class T > ; T * compile (T &arg, RooAbsArg &owner, RooArgSet const &normSet);  ; void compileServer (RooAbsArg &server, RooAbsArg &arg, RooArgSet const &normSet);  ; void compileServers (RooAbsArg &arg, RooArgSet const &normSet);  ; bool likelihoodMode () const;  ; void markAsCompiled (RooAbsArg &arg) const;  ; void setBinnedLikelihoodMode (bool flag);  ; void setBinWidthFuncFlag (bool flag);  ; void setLikelihoodMode (bool flag);  . Private Member Functions; void add (RooAbsArg &arg);  ; RooAbsArg * compileImpl (RooAbsArg &arg, RooAbsArg &owner, RooArgSet const &normSet);  ; RooAbsArg * find (RooAbsArg &arg) const;  ; bool isMarkedAsCompiled (RooAbsArg const &arg) const;  . Private Attributes; bool _binnedLikelihoodMode = false;  ; bool _binWidthFuncFlag = false;  ; std::unordered_map< TNamed const *, RooAbsArg * > _clonedArgsSet;  ; bool _likelihoodMode = false;  ; std::unordered_map< RooAbsArg *, RooAbsArg * > _replacements;  ; RooArgSet const & _topLevelNormSet;  . #include <RooFit/Detail/NormalizationHelpers.h>; Constructor & Destructor Documentation. ◆ CompileContext(). RooFit::Detail::CompileContext::CompileContext ; (; RooArgSet const & ; topLevelNormSet). Definition at line 21 of file NormalizationHelpers.cxx. ◆ ~CompileContext(). RooFit::Detail::CompileContext::~CompileContext ; (; ). Definition at line 23 of file NormalizationHelpers.cxx. Member Function Documentation. ◆ add(). void RooFit::Detail::CompileContext::ad",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFit_1_1Detail_1_1CompileContext.html:99,Load,Loading,99,doc/master/classRooFit_1_1Detail_1_1CompileContext.html,https://root.cern,https://root.cern/doc/master/classRooFit_1_1Detail_1_1CompileContext.html,1,['Load'],['Loading']
Performance,". ROOT: RooFit::Detail::MathFuncs Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Functions ; RooFit::Detail::MathFuncs Namespace Reference. Functions; double approxErf (double arg);  ; double bernstein (double x, double xmin, double xmax, double *coefs, int nCoefs);  The caller needs to make sure that there is at least one coefficient. ;  ; double bernsteinIntegral (double xlo, double xhi, double xmin, double xmax, double *coefs, int nCoefs);  ; double bifurGauss (double x, double mean, double sigmaL, double sigmaR);  ; double bifurGaussIntegral (double xMin, double xMax, double mean, double sigmaL, double sigmaR);  ; double binomial (int n, int k);  Calculates the binomial coefficient n over k. ;  ; double cbShape (double m, double m0, double sigma, double alpha, double n);  ; double cbShapeIntegral (double mMin, double mMax, double m0, double sigma, double alpha, double n);  ; double chebychev (double *coeffs, unsigned int nCoeffs, double x_in, double xMin, double xMax);  ; double chebychevIntegral (double const *coeffs, unsigned int nCoeffs, double xMin, double xMax, double xMinFull, double xMaxFull);  ; double constraintSum (double const *comp, unsigned int compSize);  ; double efficiency (double effFuncVal, int catIndex, int sigCatIndex);  ; double effProd (double eff, double pdf);  ; double exponentialIntegral (double xMin, double xMax, double constant);  ; double fast_fma (double x, double y, double z) noexcept;  use fast FMA if available, fall back to normal arithmetic if not ;  ; double flexibleInterp (unsigned int code, double const *params, unsigned int n, double const *low, double const *high, double boundary, double nominal, int doCutoff);  ; double flexibleInterpSingle (unsigned int code, double low, double high, double boundary, double nominal, double paramVal, double res);  ; double gaussian (double x, double mean, double sigma);  Function to evaluate an un-normalized RooGaussian. ;  ; double gaus",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceRooFit_1_1Detail_1_1MathFuncs.html:98,Load,Loading,98,doc/master/namespaceRooFit_1_1Detail_1_1MathFuncs.html,https://root.cern,https://root.cern/doc/master/namespaceRooFit_1_1Detail_1_1MathFuncs.html,1,['Load'],['Loading']
Performance,". ROOT: RooFit::EvalContext Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Attributes |; Friends |; List of all members ; RooFit::EvalContext Class Reference. . Definition at line 84 of file EvalContext.h. Public Types; enum class  OffsetMode { WithoutOffset; , WithOffset; , OnlyOffset; };  . Public Member Functions; std::span< const double > at (RooAbsArg const *arg, RooAbsArg const *caller=nullptr);  ; template<class T > ; std::span< const double > at (RooTemplateProxy< T > const &proxy);  ; RooBatchCompute::Config config (RooAbsArg const *arg) const;  ; void enableVectorBuffers (bool enable);  ; std::span< double > output ();  ; void resetVectorBuffers ();  ; void resize (std::size_t n);  ; void set (RooAbsArg const *arg, std::span< const double > const &span);  ; void setConfig (RooAbsArg const *arg, RooBatchCompute::Config const &config);  ; void setOutputWithOffset (RooAbsArg const *arg, ROOT::Math::KahanSum< double > val, ROOT::Math::KahanSum< double > const &offset);  Sets the output value with an offset. ;  ; auto size () const;  . Private Attributes; std::size_t _bufferIdx = 0;  ; std::vector< std::vector< double > > _buffers;  ; std::vector< RooBatchCompute::Config > _cfgs;  ; std::vector< std::span< const double > > _ctx;  ; std::span< double > _currentOutput;  ; bool _enableVectorBuffers = false;  ; OffsetMode _offsetMode = OffsetMode::WithoutOffset;  . Friends; class Evaluator;  . #include <RooFit/EvalContext.h>; Member Enumeration Documentation. ◆ OffsetMode. enum class RooFit::EvalContext::OffsetMode. strong . EnumeratorWithoutOffset ; WithOffset ; OnlyOffset . Definition at line 86 of file EvalContext.h. Member Function Documentation. ◆ at() [1/2]. std::span< const double > RooFit::EvalContext::at ; (; RooAbsArg const * ; arg, . RooAbsArg const * ; caller = nullptr . ). Definition at line 35 of file EvalContext.cxx. ◆ at() [2/2",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFit_1_1EvalContext.html:88,Load,Loading,88,doc/master/classRooFit_1_1EvalContext.html,https://root.cern,https://root.cern/doc/master/classRooFit_1_1EvalContext.html,1,['Load'],['Loading']
Performance,". ROOT: RooFit::MultiProcess::HeatmapAnalyzer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; RooFit::MultiProcess::HeatmapAnalyzer Class Reference. ; Reads and processes logfiles produced by RooFit::MultiProcess::ProcessTimer. ; RooFit::MultiProcess::ProcessTimer records timings of multiple processes simultaneously and allows for these timings to be written out in json format, one for each process. This class, the HeatmapAnalyzer, can read these json files and produce a heatmap from them with partial derivatives on the y-axis, likelihood evaluations on the x-axis, and time expenditures on the z-axis. This class also contains some convenience functions for inspecting these log files.; Note that this class requires the logfiles to contain three specific keys in the json:; master:gradient containing an array of gradient timestamps; *eval_task*<task_number> containing an array of task evaluation timestamps.; *eval_partition* containing an array of partition evaluation timestamps . Definition at line 34 of file HeatmapAnalyzer.h. Public Member Functions;  HeatmapAnalyzer (std::string const &logs_dir);  HeatmapAnalyzer Constructor. ;  ;  ~HeatmapAnalyzer ();  ; std::unique_ptr< TH2I > analyze (int analyzed_gradient);  This method is the main functionality in this class. ;  ; std::vector< std::string > const getMetadata ();  ; std::vector< std::string > const getPartitionNames ();  ; std::vector< std::string > const getTaskNames ();  . Private Attributes; std::vector< std::string > eval_partitions_names_;  ; std::unique_ptr< Detail::HeatmapAnalyzerJsonData > jsonData_;  ; TH2I matrix_;  ; std::vector< std::string > tasks_names_;  . #include <RooFit/MultiProcess/HeatmapAnalyzer.h>; Constructor & Destructor Documentation. ◆ HeatmapAnalyzer(). RooFit::MultiProcess::HeatmapAnalyzer::HeatmapAnalyzer ; (; std::string const & ; logs_dir).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFit_1_1MultiProcess_1_1HeatmapAnalyzer.html:106,Load,Loading,106,doc/master/classRooFit_1_1MultiProcess_1_1HeatmapAnalyzer.html,https://root.cern,https://root.cern/doc/master/classRooFit_1_1MultiProcess_1_1HeatmapAnalyzer.html,1,['Load'],['Loading']
Performance,". ROOT: RooFit::TestStatistics::RooRealL Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; RooFit::TestStatistics::RooRealL Class ReferenceRooFit » RooFit Core. ; RooAbsReal that wraps RooAbsL likelihoods for use in RooFit outside of the RooMinimizer context. ; This class provides a simple wrapper to evaluate RooAbsL derived likelihood objects like a regular RooFit real value. Whereas the RooAbsL objects are meant to be used within the context of minimization, RooRealL can be used in any RooFit context, like plotting. The value can be accessed through getVal(), like with other RooFit real variables. ; Definition at line 28 of file RooRealL.h. Public Member Functions;  RooRealL (const char *name, const char *title, std::shared_ptr< RooAbsL > likelihood);  ;  RooRealL (const RooRealL &other, const char *name=nullptr);  ; TObject * clone (const char *newname) const override;  ; double defaultErrorLevel () const override;  ; double getCarry () const;  ; std::shared_ptr< RooAbsL > const & getRooAbsL ();  ; double globalNormalization () const;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; virtual double analyticalIntegral (Int_t code, const ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFit_1_1TestStatistics_1_1RooRealL.html:101,Load,Loading,101,doc/master/classRooFit_1_1TestStatistics_1_1RooRealL.html,https://root.cern,https://root.cern/doc/master/classRooFit_1_1TestStatistics_1_1RooRealL.html,1,['Load'],['Loading']
Performance,. ROOT: RooFit::UniqueId< Class > Struct Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Static Public Attributes |; Private Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; RooFit::UniqueId< Class > Struct Template Reference. ; template<class Class>; struct RooFit::UniqueId< Class >A UniqueId can be added as a class member to enhance any class with a unique identifier for each instantiated object. ; Example: class MyClass {; ; public:; /// Return unique ID by reference.; /// Please always use the name `uniqueId` for the getter.; UniqueId<MyClass> const& uniqueId() const { return _uniqueId; }; ; private:; const UniqueId<MyClass> _uniqueId; //! should be non-persistent; ; };; RooFit::UniqueIdA UniqueId can be added as a class member to enhance any class with a unique identifier for each inst...Definition UniqueId.h:39. Definition at line 39 of file UniqueId.h. Public Types; using Value_t = unsigned long;  . Public Member Functions;  UniqueId ();  Create a new UniqueId with the next value from the static counter. ;  ;  UniqueId (const UniqueId &)=delete;  ;  UniqueId (UniqueId &&)=delete;  ;  operator Value_t () const;  ; bool operator< (UniqueId const &other) const;  ; UniqueId & operator= (const UniqueId &)=delete;  ; UniqueId & operator= (UniqueId &&)=delete;  ; bool operator== (UniqueId const &other) const;  ; constexpr Value_t value () const;  Return numerical value of ID. ;  . Static Public Member Functions; static UniqueId const & nullid ();  Get an ID that is less than the ID of any object (similar to nullptr). ;  . Static Public Attributes; static constexpr Value_t nullval = 0UL;  The value of the nullid. ;  . Private Member Functions;  UniqueId (Value_t val);  . Private Attributes; Value_t _val;  Numerical value of the ID. ;  . Static Private Attributes; static std:,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structRooFit_1_1UniqueId.html:104,Load,Loading,104,doc/master/structRooFit_1_1UniqueId.html,https://root.cern,https://root.cern/doc/master/structRooFit_1_1UniqueId.html,1,['Load'],['Loading']
Performance,". ROOT: RooFitResult Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooFitResult Class Reference. ; RooFitResult is a container class to hold the input and output of a PDF fit to a dataset. ; It contains:. Values of all constant parameters; Initial and final values of floating parameters with error; Correlation matrix and global correlation coefficients; NLL and EDM at minimum. No references to the fitted PDF and dataset are stored ; Definition at line 40 of file RooFitResult.h. Public Member Functions;  RooFitResult (const char *name=nullptr, const char *title=nullptr);  Constructor with name and title. ;  ;  RooFitResult (const RooFitResult &other);  Copy constructor. ;  ;  ~RooFitResult () override;  Destructor. ;  ; virtual TObject * clone () const;  ; TObject * Clone (const char *newname=nullptr) const override;  Make a clone of an object using the Streamer facility. ;  ; TMatrixDSym conditionalCovarianceMatrix (const RooArgList &params) const;  Return a reduced covariance matrix, which is calculated as. ;  ; const RooArgList & constPars () const;  Return list of constant parameters. ;  ; const RooArgList * correlation (const char *parname) const;  Return the set of correlation coefficients of parameter 'par' with all other floating parameters. ;  ; double correlation (const char *parname1, const char *parname2) const;  Return the correlation between parameters 'par1' and 'par2'. ;  ; const RooArgList * correlation (const RooAbsArg &par) const;  Return pointer to list of correlations of all parameters with par. ;  ; double correlation (const RooAbsArg &par1, const RooAbsArg &par2) const;  Return correlation between par1 and par2. ;  ; TH2 * correlationHist (const char *name=""correlation_matrix"") const;  Return TH2D of correlation matrix. ;  ; const TMatri",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFitResult.html:81,Load,Loading,81,doc/master/classRooFitResult.html,https://root.cern,https://root.cern/doc/master/classRooFitResult.html,1,['Load'],['Loading']
Performance,". ROOT: RooFixedProdPdf Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; RooFixedProdPdf Class Reference. ; A RooProdPdf with a fixed normalization set can be replaced by this class. ; Its purpose is to provide the right client-server interface for the evaluation of RooProdPdf cache elements that were created for a given normalization set. ; Definition at line 2318 of file RooProdPdf.cxx. Public Member Functions;  RooFixedProdPdf (const RooFixedProdPdf &other, const char *name=nullptr);  ;  RooFixedProdPdf (std::unique_ptr< RooProdPdf > &&prodPdf, RooArgSet const &normSet);  ; double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const override;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName) const override;  Analytical integral with normalization (see RooAbsReal::analyticalIntegralWN() for further information). ;  ; bool canComputeBatchWithCuda () const override;  ; TObject * clone (const char *newname) const override;  ; std::unique_ptr< RooAbsReal > createExpectedEventsFunc (const RooArgSet *) const override;  Returns an object that represents the expected number of events for a given normalization set, similar to how createIntegral() returns an object that returns the integral. ;  ; void doEval (RooFit::EvalContext &ctx) const override;  Base function for computing multiple values of a RooAbsReal. ;  ; double expectedEvents (const RooArgSet *) const override;  Return expected number of events to be used in calculation of extended likelihood. ;  ; ExtendMode extendMode () const override;  Returns ability of PDF to provide extended likelihood terms. ;  ; bool forceAnalyticalInt (const RooAbsArg &dep) const override;  ; Int_t getAnalyticalIntegral (RooArg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFixedProdPdf.html:84,Load,Loading,84,doc/master/classRooFixedProdPdf.html,https://root.cern,https://root.cern/doc/master/classRooFixedProdPdf.html,2,"['Load', 'cache']","['Loading', 'cache']"
Performance,". ROOT: RooFoamGenerator Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Protected Member Functions |; Protected Attributes |; Friends |; List of all members ; RooFoamGenerator Class ReferenceRooFit » RooFit Core. ; Generic Monte Carlo toy generator that implement the TFOAM sampling technique on any positively valued function. ; The RooFoamGenerator generator is used by the various generator context classes to take care of generation of observables for which p.d.fs do not define internal methods.; The foam generator reacts to the following config options:; nCell[123N]D; nSample; chatLevel Access those using: myPdf->specialGeneratorConfig()->getConfigSection(""RooFoamGenerator"").setRealValue(""nSample"",1e4);. See alsorf902_numgenconfig.C ; Definition at line 32 of file RooFoamGenerator.h. Public Member Functions;  RooFoamGenerator ()=default;  ;  RooFoamGenerator (const RooAbsReal &func, const RooArgSet &genVars, const RooNumGenConfig &config, bool verbose=false, const RooAbsReal *maxFuncVal=nullptr);  ; bool canSampleCategories () const override;  ; bool canSampleConditional () const override;  ; RooAbsNumGenerator * clone (const RooAbsReal &func, const RooArgSet &genVars, const RooArgSet &, const RooNumGenConfig &config, bool verbose=false, const RooAbsReal *maxFuncVal=nullptr) const override;  ; TFoam & engine ();  ; const RooArgSet * generateEvent (UInt_t remaining, double &resampleRatio) override;  are we actually generating anything? (the cache always contains at least our function value) ;  ; std::string const & generatorName () const override;  Return unique name of generator implementation. ;  ;  Public Member Functions inherited from RooAbsNumGenerator;  RooAbsNumGenerator ();  ;  RooAbsNumGenerator (const RooAbsReal &func, const RooArgSet &genVars, bool verbose=false, const RooAbsReal *maxFuncVal=nullptr);  Initialize an accept-reject generator for the s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFoamGenerator.html:85,Load,Loading,85,doc/master/classRooFoamGenerator.html,https://root.cern,https://root.cern/doc/master/classRooFoamGenerator.html,1,['Load'],['Loading']
Performance,". ROOT: RooFormula Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; RooFormula Class ReferenceRooFit » RooFit Core. ; Internally uses ROOT's TFormula to compute user-defined expressions of RooAbsArgs. ; The string expression can be any valid TFormula expression referring to the listed servers either by name or by their ordinal list position. These three are forms equivalent: RooFormula(""formula"", ""x*y"", RooArgList(x,y)) or; RooFormula(""formula"", ""@0*@1"", RooArgList(x,y)); RooFormula(""formula"", ""x[0]*x[1]"", RooArgList(x,y)); RooArgListRooArgList is a container object that can hold multiple RooAbsArg objects.Definition RooArgList.h:22; RooFormulaInternally uses ROOT's TFormula to compute user-defined expressions of RooAbsArgs.Definition RooFormula.h:27; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; Note that x[i] is an expression reserved for TFormula. If a variable with the name x is given, the RooFormula interprets x as a variable name, but x[i] as an index in the list of variables. Category expressions; State information of RooAbsCategories can be accessed using the '::' operator, i.e.*, tagCat::Kaon will resolve to the numerical value of the Kaon state of the RooAbsCategory object named tagCat.; A formula to switch between lepton categories could look like this: RooFormula(""formulaWithCat"",; ""x * (leptonMulti == leptonMulti::one) + y * (leptonMulti == leptonMulti::two)"",; RooArgList(x, y, leptonMulti));. Debugging a formula that won't compile; When the formula is preprocessed, RooFit can print information in the debug stream. These can be retrieved by activating the RooFit::MsgLevel RooFit::DEBUG and the RooFit::MsgTopic RooFit::InputArguments. Check the tutorial rf506_msgservice.C for details. ; Definition at line 27 of file RooFormula.h. Public Member Functions;  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFormula.html:79,Load,Loading,79,doc/master/classRooFormula.html,https://root.cern,https://root.cern/doc/master/classRooFormula.html,1,['Load'],['Loading']
Performance,". ROOT: RooFormulaVar Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; RooFormulaVar Class Reference. ; A RooFormulaVar is a generic implementation of a real-valued object, which takes a RooArgList of servers and a C++ expression string defining how its value should be calculated from the given list of servers. ; RooFormulaVar uses a RooFormula object to perform the expression evaluation.; If RooAbsPdf objects are supplied to RooFormulaVar as servers, their raw (unnormalized) values will be evaluated. Use RooGenericPdf, which constructs generic PDF functions, to access their properly normalized values.; The string expression can be any valid TFormula expression referring to the listed servers either by name or by their ordinal list position. These three are equivalent: RooFormulaVar(""gen"", ""x*y"", RooArgList(x,y)) // reference by name; RooFormulaVar(""gen"", ""@0*@1"", RooArgList(x,y)) // reference by ordinal with @; RooFormulaVar(""gen"", ""x[0]*x[1]"", RooArgList(x,y)) // TFormula-builtin reference by ordinal; RooArgListRooArgList is a container object that can hold multiple RooAbsArg objects.Definition RooArgList.h:22; RooFormulaVar::RooFormulaVarRooFormulaVar()Definition RooFormulaVar.cxx:65; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; Note that x[i] is an expression reserved for TFormula. All variable references are automatically converted to the TFormula-native format. If a variable with the name x is given, the RooFormula interprets x[i] as a list position, but x without brackets as the name of a RooFit object.; The last two versions, while slightly less readable, are more versatile because the names of the arguments are not hard coded. ; Definition at line 30 of file RooFormulaVar.h. Public Member Functi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFormulaVar.html:82,Load,Loading,82,doc/master/classRooFormulaVar.html,https://root.cern,https://root.cern/doc/master/classRooFormulaVar.html,2,"['Load', 'perform']","['Loading', 'perform']"
Performance,". ROOT: RooFracRemainder Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooFracRemainder Class ReferenceRooFit » RooFit Core. ; Calculates the remainder fraction of a sum of RooAbsReal fraction, i.e (1 - sum_i a_i). ; This class is used by RooSimWSTool to as specialization of the remainder fraction term of a parameter with a constrained split ; Definition at line 25 of file RooFracRemainder.h. Public Member Functions;  RooFracRemainder ();  Default constructor. ;  ;  RooFracRemainder (const char *name, const char *title, const RooArgSet &sumSet);  Constructor with given set of input fractions. All arguments in sumSet must be of type RooAbsReal. ;  ;  RooFracRemainder (const RooFracRemainder &other, const char *name=nullptr);  Copy constructor. ;  ; TObject * clone (const char *newname) const override;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; virtual double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; virtual double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const;  Im",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFracRemainder.html:85,Load,Loading,85,doc/master/classRooFracRemainder.html,https://root.cern,https://root.cern/doc/master/classRooFracRemainder.html,1,['Load'],['Loading']
Performance,". ROOT: RooFunctor Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; RooFunctor Class ReferenceRooFit » RooFit Core. ; Lightweight interface adaptor that exports a RooAbsPdf as a functor. ; Definition at line 25 of file RooFunctor.h. Public Member Functions;  RooFunctor (const RooAbsFunc &func);  ;  RooFunctor (const RooAbsReal &func, const RooArgList &observables, const RooArgList &parameters);  Store list of observables. ;  ;  RooFunctor (const RooAbsReal &func, const RooArgList &observables, const RooArgList &parameters, const RooArgSet &nset);  Store normalization set. ;  ;  RooFunctor (const RooFunctor &);  ; virtual ~RooFunctor ();  ; RooAbsFunc & binding ();  ; RooAbsFunc const & binding () const;  ; double eval (const double *) const;  ; double eval (const double *, const double *) const;  ; double eval (double) const;  ; virtual TClass * IsA () const;  ; Int_t nObs () const;  ; Int_t nPar () const;  ; double operator() (const double *x) const;  ; double operator() (const double *x, const double *p) const;  ; double operator() (double x) const;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Attributes; RooAbsFunc * _binding = nullptr;  Function binding. ;  ; Int_t _nobs;  ! Number of observables ; ;  ; Int_t _npar = 0;  ! Number of parameters ; ;  ; RooArgSet _nset;  Normalization observables. ;  ; std::unique_ptr< RooAbsFunc > _ownedBinding;  Do we own the binding function. ;  ; std::vector< double > _x;  ! Transfer array ; ;  . #include <RooFunctor.h>; Constructor & Destructor Documentation. ◆ RooFunctor() [1/4]. RooFunctor::RooFun",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFunctor.html:79,Load,Loading,79,doc/master/classRooFunctor.html,https://root.cern,https://root.cern/doc/master/classRooFunctor.html,1,['Load'],['Loading']
Performance,". ROOT: RooFunctor1DBinding Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooFunctor1DBinding Class ReferenceRooFit » RooFit. ; RooCFunction1Binding is a templated implementation of class RooAbsReal that binds generic C(++) functions to a RooAbsReal argument thus allowing generic C++ functions to be used as RooFit functions. ; Instances of function binding classes are fully functional RooFit function objects with one exception: if the bound function is not a standard TMath or MathMore function the class cannot be persisted in a RooWorkspace without registering the function pointer first using RooCFunction1Binding<T1,T2>::register(). ; Definition at line 33 of file RooFunctor1DBinding.h. Public Member Functions;  RooFunctor1DBinding ();  ;  RooFunctor1DBinding (const char *name, const char *title, const ROOT::Math::IBaseFunctionOneDim &ftor, RooAbsReal &var);  ;  RooFunctor1DBinding (const RooFunctor1DBinding &other, const char *name=nullptr);  ; TObject * clone (const char *newname) const override;  ; TClass * IsA () const override;  ; void printArgs (std::ostream &os) const override;  Print object arguments, ie its proxies. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destruct",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFunctor1DBinding.html:88,Load,Loading,88,doc/master/classRooFunctor1DBinding.html,https://root.cern,https://root.cern/doc/master/classRooFunctor1DBinding.html,1,['Load'],['Loading']
Performance,". ROOT: RooFunctor1DPdfBinding Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooFunctor1DPdfBinding Class ReferenceRooFit » RooFit. . Definition at line 58 of file RooFunctor1DBinding.h. Public Member Functions;  RooFunctor1DPdfBinding ();  ;  RooFunctor1DPdfBinding (const char *name, const char *title, const ROOT::Math::IBaseFunctionOneDim &ftor, RooAbsReal &vars);  ;  RooFunctor1DPdfBinding (const RooFunctor1DPdfBinding &other, const char *name=nullptr);  ; TObject * clone (const char *newname) const override;  ; TClass * IsA () const override;  ; void printArgs (std::ostream &os) const override;  Print object arguments, ie its proxies. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsPdf;  RooAbsPdf ();  Default constructor. ;  ;  RooAbsPdf (const char *name, const char *title, double minVal, double maxVal);  Constructor with name, title, and plot range. ;  ;  RooAbsPdf (const char *name, const char *title=nullptr);  Constructor with name and title only. ;  ;  ~RooAbsPdf () override;  Destructor. ;  ; double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Analytical integral with normalization (see RooAbsReal::analyticalIntegralWN() for further information). ;  ; virtual RooAbsGenContext * autoGenContext (const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false, bool autoBinned=true, const char *binnedTag="""") const;  ; virtual RooAbsGenContext * binnedGenContext (const RooArgSet &vars, bool verbose=false) const;  Return a binned generator context. ;  ; bool canBeExtended () const;  If true, PDF can p",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFunctor1DPdfBinding.html:91,Load,Loading,91,doc/master/classRooFunctor1DPdfBinding.html,https://root.cern,https://root.cern/doc/master/classRooFunctor1DPdfBinding.html,1,['Load'],['Loading']
Performance,". ROOT: RooFunctorBinding Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooFunctorBinding Class ReferenceRooFit » RooFit. ; RooFunctorBinding makes math functions from ROOT usable in RooFit. ; It takes a ROOT::Math::IBaseFunctionMultiDim, and binds the variables of this function to the RooFit variables passed in the constructor.; Instances of function binding classes are fully functional RooFit function objects with one exception: if the bound function is not a standard TMath or MathMore function the class cannot be persisted in a RooWorkspace without registering the function pointer first using RooCFunction1Binding<T1,T2>::register(). ; Definition at line 31 of file RooFunctorBinding.h. Public Member Functions;  RooFunctorBinding ()=default;  ;  RooFunctorBinding (const char *name, const char *title, const ROOT::Math::IBaseFunctionMultiDim &ftor, const RooArgList &vars);  Create a RooFit function that makes ftor usable in RooFit. ;  ;  RooFunctorBinding (const RooFunctorBinding &other, const char *name=nullptr);  ;  ~RooFunctorBinding () override;  ; TObject * clone (const char *newname) const override;  ; TClass * IsA () const override;  ; void printArgs (std::ostream &os) const override;  Print object arguments, ie its proxies. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFunctorBinding.html:86,Load,Loading,86,doc/master/classRooFunctorBinding.html,https://root.cern,https://root.cern/doc/master/classRooFunctorBinding.html,1,['Load'],['Loading']
Performance,". ROOT: RooFunctorPdfBinding Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooFunctorPdfBinding Class ReferenceRooFit » RooFit. ; RooFunctorPdfBinding makes math functions from ROOT usable as PDFs in RooFit. ; It takes a ROOT::Math::IBaseFunctionMultiDim, and binds the variables of this function to the RooFit variables passed in the constructor. When the PDF is evaluated, the bound function is evaluated, and also integrated numerically to normalise it to unity over the range of its observables.; Instances of function binding classes are fully functional RooFit function objects with one exception: if the bound function is not a standard TMath or MathMore function the class cannot be persisted in a RooWorkspace without registering the function pointer first using RooCFunction1Binding<T1,T2>::register(). ; Definition at line 56 of file RooFunctorBinding.h. Public Member Functions;  RooFunctorPdfBinding ()=default;  ;  RooFunctorPdfBinding (const char *name, const char *title, const ROOT::Math::IBaseFunctionMultiDim &ftor, const RooArgList &vars);  Create a RooFit PDF that makes ftor usable as a PDF in RooFit. ;  ;  RooFunctorPdfBinding (const RooFunctorPdfBinding &other, const char *name=nullptr);  ;  ~RooFunctorPdfBinding () override;  ; TObject * clone (const char *newname) const override;  ; TClass * IsA () const override;  ; void printArgs (std::ostream &os) const override;  Print object arguments, ie its proxies. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsPdf;  RooAbsPdf ();  Default constructor. ;  ;  RooAbsPdf (const char *name, const char *title, double minVal, double maxVal);  Constructor with name, title,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFunctorPdfBinding.html:89,Load,Loading,89,doc/master/classRooFunctorPdfBinding.html,https://root.cern,https://root.cern/doc/master/classRooFunctorPdfBinding.html,1,['Load'],['Loading']
Performance,". ROOT: RooGExpModel Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Static Private Member Functions |; Private Attributes |; List of all members ; RooGExpModel Class ReferenceRooFit » RooFit. ; The RooGExpModel is a RooResolutionModel implementation that models a resolution function that is the convolution of a Gaussian with a one-sided exponential. ; Such objects can be used for analytical convolutions with classes inheriting from RooAbsAnaConvPdf. ; \[; \mathrm{GExp} = \exp \left( -\frac{1}{2} \left(\frac{x-\mu}{\sigma} \right)^2 \right)^2; \otimes \exp\left( -\frac{x}{\tau} \right); \]. Definition at line 25 of file RooGExpModel.h. Public Types; enum  Type { Normal; , Flipped; };  ;  Public Types inherited from RooAbsPdf; enum  ExtendMode { CanNotBeExtended; , CanBeExtended; , MustBeExtended; };  ;  Public Types inherited from RooAbsReal; enum  ErrorLoggingMode { PrintErrors; , CollectErrors; , CountErrors; , Ignore; };  ; enum  ScaleType { Raw; , Relative; , NumEvent; , RelativeExpected; };  ; using value_type = double;  ;  Public Types inherited from RooAbsArg; enum  CacheMode { Always =0; , NotAdvised =1; , Never =2; };  ; enum  ConstOpCode { Activate =0; , DeActivate =1; , ConfigChange =2; , ValueChange =3; };  ; enum  OperMode { Auto =0; , AClean =1; , ADirty =2; };  ; using RefCountList_t = RooSTLRefCountList< RooAbsArg >;  ; using RefCountListLegacyIterator_t = TIteratorToSTLInterface< RefCountList_t::Container_t >;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooGExpModel.html:81,Load,Loading,81,doc/master/classRooGExpModel.html,https://root.cern,https://root.cern/doc/master/classRooGExpModel.html,1,['Load'],['Loading']
Performance,". ROOT: RooGamma Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooGamma Class ReferenceRooFit » RooFit. ; Implementation of the Gamma PDF for RooFit/RooStats. . \[; f(x) = \frac{(x-\mu)^{\gamma-1} \cdot \exp^{(-(x-mu) / \beta}}{\Gamma(\gamma) \cdot \beta^{\gamma}}; \]. defined for \( x \geq 0 \) if \( \mu = 0 \); Notes from Kyle Cranmer:; Wikipedia and several sources refer to the Gamma distribution as. \[; G(\mu,\alpha,\beta) = \beta^\alpha \mu^{(\alpha-1)} \frac{e^{(-\beta \mu)}}{\Gamma(\alpha)}; \]. Below is the correspondence:. Wikipedia This Implementation . \( \alpha \) \( \gamma \) . \( \beta \) \( \frac{1}{\beta} \) . \( \mu \) x . 0 \( \mu \) . Note, that for a model Pois(N|mu), a uniform prior on mu, and a measurement N the posterior is in the Wikipedia parameterization Gamma(mu, alpha=N+1, beta=1) thus for this implementation it is:; RooGamma(_x=mu,_gamma=N+1,_beta=1,_mu=0); Also note, that in this case it is equivalent to RooPoison(N,mu) and treating the function as a PDF in mu. ; Definition at line 20 of file RooGamma.h. Public Member Functions;  RooGamma ();  ;  RooGamma (const char *name, const char *title, RooAbsReal &_x, RooAbsReal &_gamma, RooAbsReal &_beta, RooAbsReal &_mu);  ;  RooGamma (const RooGamma &other, const char *name=nullptr);  ; double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const override;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; std::string buildCallToAnalyticIntegral (Int_t code, const char *rangeName, RooFit::Detail::CodeSquashContext &ctx) const override;  This function defines the analytical integral translation for the class. ;  ; TObject * clone (const char *newname) const override;  ; void generateEvent (Int_t code) override;  algorithm adapted from c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooGamma.html:77,Load,Loading,77,doc/master/classRooGamma.html,https://root.cern,https://root.cern/doc/master/classRooGamma.html,1,['Load'],['Loading']
Performance,". ROOT: RooGaussModel Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Private Attributes |; List of all members ; RooGaussModel Class ReferenceRooFit » RooFit. ; Class RooGaussModel implements a RooResolutionModel that models a Gaussian distribution. ; Object of class RooGaussModel can be used for analytical convolutions with classes inheriting from RooAbsAnaConvPdf ; Definition at line 25 of file RooGaussModel.h. Public Member Functions;  RooGaussModel ()=default;  ;  RooGaussModel (const char *name, const char *title, RooAbsRealLValue &x, RooAbsReal &mean, RooAbsReal &sigma);  ;  RooGaussModel (const char *name, const char *title, RooAbsRealLValue &x, RooAbsReal &mean, RooAbsReal &sigma, RooAbsReal &meanSF, RooAbsReal &sigmaSF);  ;  RooGaussModel (const char *name, const char *title, RooAbsRealLValue &x, RooAbsReal &mean, RooAbsReal &sigma, RooAbsReal &msSF);  ;  RooGaussModel (const RooGaussModel &other, const char *name=nullptr);  ; void advertiseAymptoticIntegral (bool flag);  ; void advertiseFlatScaleFactorIntegral (bool flag);  ; double analyticalIntegral (Int_t code, const char *rangeName) const override;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; Int_t basisCode (const char *name) const override;  ; bool canComputeBatchWithCuda () const override;  ; TObject * clone (const char *newname) const override;  ; void doEval (RooFit::EvalContext &) const override;  Base function for computing multiple values of a RooAbsReal. ;  ; void generateEvent (Int_t code) override;  Interface for generation of an event using the algorithm corresponding to the specified code. ;  ; Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const override;  Interface function getAnalyticalIntergra",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooGaussModel.html:82,Load,Loading,82,doc/master/classRooGaussModel.html,https://root.cern,https://root.cern/doc/master/classRooGaussModel.html,1,['Load'],['Loading']
Performance,". ROOT: RooGaussian Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooGaussian Class ReferenceRooFit » RooFit. ; Plain Gaussian p.d.f. ; Definition at line 24 of file RooGaussian.h. Public Member Functions;  RooGaussian ();  ;  RooGaussian (const char *name, const char *title, RooAbsReal &_x, RooAbsReal &_mean, RooAbsReal &_sigma);  ;  RooGaussian (const char *name, const char *title, RooAbsReal::Ref _x, RooAbsReal::Ref _mean, RooAbsReal::Ref _sigma);  ;  RooGaussian (const RooGaussian &other, const char *name=nullptr);  ; double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const override;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; std::string buildCallToAnalyticIntegral (Int_t code, const char *rangeName, RooFit::Detail::CodeSquashContext &ctx) const override;  This function defines the analytical integral translation for the class. ;  ; TObject * clone (const char *newname) const override;  ; void generateEvent (Int_t code) override;  Interface for generation of an event using the algorithm corresponding to the specified code. ;  ; Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const override;  Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ;  ; Int_t getGenerator (const RooArgSet &directVars, RooArgSet &generateVars, bool staticInitOK=true) const override;  Load generatedVars with the subset of directVars that we can generate events for, and return a code that specifies the generator algorithm we will use. ;  ; RooAbsReal const & getMean () const;  Get the mean parameter. ;  ; RooAbsReal const & getSigma () const;  Get the sigma parameter. ;  ; RooAbsReal const & getX () const;  Get the x var",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooGaussian.html:80,Load,Loading,80,doc/master/classRooGaussian.html,https://root.cern,https://root.cern/doc/master/classRooGaussian.html,1,['Load'],['Loading']
Performance,". ROOT: RooGenContext Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooGenContext Class ReferenceRooFit » RooFit Core. ; Implements a universal generator context for all RooAbsPdf classes that do not have or need a specialized generator context. ; This generator context queries the input p.d.f which observables it can generate internally and delegates generation of those observables to the p.d.f if it deems that safe. The other observables are generated use a RooAcceptReject sampling technique. ; Definition at line 29 of file RooGenContext.h. Public Member Functions;  RooGenContext (const RooAbsPdf &model, const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false, const RooArgSet *forceDirect=nullptr);  Initialize a new context for generating events with the specified variables, using the specified PDF model. ;  ;  ~RooGenContext () override;  ; void attach (const RooArgSet &params) override;  Attach the cloned model to the event buffer we will be filling. ;  ; TClass * IsA () const override;  ; void printMultiline (std::ostream &os, Int_t content, bool verbose=false, TString indent="""") const override;  Printing interface. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsGenContext;  RooAbsGenContext (const RooAbsPdf &model, const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool _verbose=false);  Constructor. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default contents when printing. ;  ; StyleOption defaultPrintStyle (Option_t *opt) const override;  Define default print style. ;  ; virtual ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooGenContext.html:82,Load,Loading,82,doc/master/classRooGenContext.html,https://root.cern,https://root.cern/doc/master/classRooGenContext.html,1,['Load'],['Loading']
Performance,". ROOT: RooGenFitStudy Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; RooGenFitStudy Class ReferenceRooFit » RooFit Core. ; Abstract base class for RooStudyManager modules. . PyROOT; Some member functions of RooGenFitStudy that take a RooCmdArg as argument also support keyword arguments. So far, this applies to RooGenFitStudy::setGenConfig. . Definition at line 35 of file RooGenFitStudy.h. Public Member Functions;  RooGenFitStudy (const char *name=nullptr, const char *title=nullptr);  Constructor. ;  ;  RooGenFitStudy (const RooGenFitStudy &other);  Copy constructor. ;  ; bool attach (RooWorkspace &w) override;  Function called after insertion into workspace. ;  ; RooAbsStudy * clone (const char *newname="""") const override;  ; bool execute () override;  Execute one study iteration. ;  ; bool finalize () override;  Finalization of study. ;  ; bool initialize () override;  One-time initialization of study. ;  ; TClass * IsA () const override;  ; void Print (Option_t *options=nullptr) const override;  This method must be overridden when a class wants to print itself. ;  ; void setFitConfig (const char *pdfName, const char *obsName, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={});  ; void setGenConfig (const char *pdfName, const char *obsName, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={});  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsStudy;  RooAbsStudy ()=default;  ;  RooAbsStudy (const char *name, const char *title);  Constructor. ;  ;  RooAbsStudy (const RooAbsStudy &other);  Copy constructor. ;  ;  ~RooAbsStudy () override;  Destructor. ;  ; TObject * Clone (const char *newname="""") con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooGenFitStudy.html:83,Load,Loading,83,doc/master/classRooGenFitStudy.html,https://root.cern,https://root.cern/doc/master/classRooGenFitStudy.html,1,['Load'],['Loading']
Performance,". ROOT: RooGenericPdf Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooGenericPdf Class ReferenceRooFit » RooFit Core. ; Implementation of a probability density function that takes a RooArgList of servers and a C++ expression string defining how its value should be calculated from the given list of servers. ; A fully numerical integration is automatically performed to normalize the given expression. RooGenericPdf uses a RooFormula object to perform the expression evaluation.; The string expression can be any valid TFormula expression referring to the listed servers either by name or by their ordinal list position. These three are equivalent: RooFormulaVar(""gen"", ""x*y"", RooArgList(x,y)) // reference by name; RooFormulaVar(""gen"", ""@0*@1"", RooArgList(x,y)) // reference by ordinal with @; RooFormulaVar(""gen"", ""x[0]*x[1]"", RooArgList(x,y)) // TFormula-builtin reference by ordinal; RooArgListRooArgList is a container object that can hold multiple RooAbsArg objects.Definition RooArgList.h:22; RooFormulaVarA RooFormulaVar is a generic implementation of a real-valued object, which takes a RooArgList of serv...Definition RooFormulaVar.h:30; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; Note that x[i] is an expression reserved for TFormula. All variable references are automatically converted to the TFormula-native format. If a variable with the name x is given, the RooFormula interprets x[i] as a list position, but x without brackets as the name of a RooFit object.; The last two versions, while slightly less readable, are more versatile because the names of the arguments are not hard coded. ; Definition at line 25 of file RooGenericPdf.h. Public Member Functions;  RooGenericPdf ();  ;  RooGenericPdf (const char *name, const char *title, c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooGenericPdf.html:82,Load,Loading,82,doc/master/classRooGenericPdf.html,https://root.cern,https://root.cern/doc/master/classRooGenericPdf.html,3,"['Load', 'perform']","['Loading', 'perform', 'performed']"
Performance,". ROOT: RooHelpers::WrapIntoTObject< T > Struct Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; RooHelpers::WrapIntoTObject< T > Struct Template Reference. ; template<typename T>; struct RooHelpers::WrapIntoTObject< T >Wrap an object into a TObject. Sometimes needed to avoid reinterpret_cast or enable RTTI. ; Definition at line 57 of file RooHelpers.h. Public Member Functions;  WrapIntoTObject (T &obj);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structRooHelpers_1_1WrapIntoTObject.html:111,Load,Loading,111,doc/master/structRooHelpers_1_1WrapIntoTObject.html,https://root.cern,https://root.cern/doc/master/structRooHelpers_1_1WrapIntoTObject.html,1,['Load'],['Loading']
Performance,". ROOT: RooHist Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; RooHist Class ReferenceRooFit » RooFit Core. ; Graphical representation of binned data based on the TGraphAsymmErrors class. ; Error bars are calculated using either Poisson or Binomial statistics. A RooHist is used to represent histograms in a RooPlot. ; Definition at line 29 of file RooHist.h. Public Member Functions;  RooHist ();  ;  RooHist (const RooAbsReal &f, RooAbsRealLValue &x, double xErrorFrac=1.0, double scaleFactor=1.0, const RooArgSet *normVars=nullptr, const RooFitResult *fr=nullptr);  Create histogram from a pdf or function. ;  ;  RooHist (const RooHist &hist1, const RooHist &hist2, double wgt1=1.0, double wgt2=1.0, RooAbsData::ErrorType etype=RooAbsData::Poisson, double xErrorFrac=1.0);  Create histogram as sum of two existing histograms. ;  ;  RooHist (const TH1 &data, double nominalBinWidth=0, double nSigma=1, RooAbsData::ErrorType=RooAbsData::Poisson, double xErrorFrac=1.0, bool correctForBinWidth=true, double scaleFactor=1.);  Create a histogram from the contents of the specified TH1 object which may have fixed or variable bin widths. ;  ;  RooHist (const TH1 &data1, const TH1 &data2, double nominalBinWidth=0, double nSigma=1, RooAbsData::ErrorType=RooAbsData::Poisson, double xErrorFrac=1.0, bool efficiency=false, double scaleFactor=1.0);  Create a histogram from the asymmetry between the specified TH1 objects which may have fixed or variable bin widths, but which must both have the same binning. ;  ;  RooHist (double nominalBinWidth, double nSigma=1, double xErrorFrac=1.0, double scaleFactor=1.0);  Create an empty histogram that can be filled with the addBin() and addAsymmetryBin() methods. ;  ; void addAsymmetryBin (Axis_t binCenter, Int_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooHist.html:76,Load,Loading,76,doc/master/classRooHist.html,https://root.cern,https://root.cern/doc/master/classRooHist.html,1,['Load'],['Loading']
Performance,". ROOT: RooHistConstraint Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooHistConstraint Class ReferenceRooFit » RooFit. ; The RooHistConstraint implements constraint terms for a binned PDF with statistical uncertainties. ; Following the Barlow-Beeston method, it adds Poisson constraints for each bin that constrain the statistical uncertainty of the template histogram.; It can therefore be used to estimate the Monte Carlo uncertainty of a fit.; Check also the tutorial rf709_BarlowBeeston.C ; Definition at line 17 of file RooHistConstraint.h. Public Member Functions;  RooHistConstraint ();  ;  RooHistConstraint (const char *name, const char *title, const RooArgSet &phfSet, int threshold=1000000);  Create a new RooHistConstraint. ;  ;  RooHistConstraint (const RooHistConstraint &other, const char *name=nullptr);  ; TObject * clone (const char *newname) const override;  ; double getLogVal (const RooArgSet *set=nullptr) const override;  Return the log of the current value with given normalization An error message is printed if the argument of the log is negative. ;  ; TClass * IsA () const override;  ; bool selfNormalized () const override;  It makes only sense to use the RooHistConstraint when normalized over the set of all gammas, in which case it is self-normalized because the used TMath::Poisson function is normalized. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsPdf;  RooAbsPdf ();  Default constructor. ;  ;  RooAbsPdf (const char *name, const char *title, double minVal, double maxVal);  Constructor with name, title, and plot range. ;  ;  RooAbsPdf (const char *name, const char *title=nullptr);  Constructor with",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooHistConstraint.html:86,Load,Loading,86,doc/master/classRooHistConstraint.html,https://root.cern,https://root.cern/doc/master/classRooHistConstraint.html,1,['Load'],['Loading']
Performance,". ROOT: RooHistFunc Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Friends |; List of all members ; RooHistFunc Class ReferenceRooFit » RooFit Core. ; A real-valued function sampled from a multidimensional histogram. ; The histogram can have an arbitrary number of real or discrete dimensions and may have negative values. ; Definition at line 31 of file RooHistFunc.h. Public Member Functions;  RooHistFunc ();  ;  RooHistFunc (const char *name, const char *title, const RooArgList &funcObs, const RooArgList &histObs, const RooDataHist &dhist, Int_t intOrder=0);  Constructor from a RooDataHist. ;  ;  RooHistFunc (const char *name, const char *title, const RooArgList &pdfObs, const RooArgList &histObs, std::unique_ptr< RooDataHist > dhist, int intOrder=0);  ;  RooHistFunc (const char *name, const char *title, const RooArgSet &vars, const RooDataHist &dhist, Int_t intOrder=0);  Constructor from a RooDataHist. ;  ;  RooHistFunc (const char *name, const char *title, const RooArgSet &vars, std::unique_ptr< RooDataHist > dhist, int intOrder=0);  ;  RooHistFunc (const RooHistFunc &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooHistFunc () override;  ; double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const override;  Return integral identified by 'code'. ;  ; std::list< double > * binBoundaries (RooAbsRealLValue &, double, double) const override;  Return sampling hint for making curves of (projections) of this function as the recursive division strategy of RooCurve cannot deal efficiently with the vertical lines that occur in a non-interpolated histogram. ;  ; std::string buildCallToAnalyticIntegral (int code, const char *rangeName, RooFit::Detail::CodeSquashContext &ctx) const override;  This function defines the analytical inte",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooHistFunc.html:80,Load,Loading,80,doc/master/classRooHistFunc.html,https://root.cern,https://root.cern/doc/master/classRooHistFunc.html,1,['Load'],['Loading']
Performance,". ROOT: RooHistPdf Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Static Private Member Functions |; Friends |; List of all members ; RooHistPdf Class ReferenceRooFit » RooFit Core. ; A propability density function sampled from a multidimensional histogram. ; The histogram distribution is explicitly normalized by RooHistPdf and can have an arbitrary number of real or discrete dimensions. ; Definition at line 30 of file RooHistPdf.h. Public Member Functions;  RooHistPdf ();  ;  RooHistPdf (const char *name, const char *title, const RooArgList &pdfObs, const RooArgList &histObs, const RooDataHist &dhist, Int_t intOrder=0);  Constructor from a RooDataHist. ;  ;  RooHistPdf (const char *name, const char *title, const RooArgList &pdfObs, const RooArgList &histObs, std::unique_ptr< RooDataHist > dhist, int intOrder=0);  ;  RooHistPdf (const char *name, const char *title, const RooArgSet &vars, const RooDataHist &dhist, Int_t intOrder=0);  Constructor from a RooDataHist. ;  ;  RooHistPdf (const char *name, const char *title, const RooArgSet &vars, std::unique_ptr< RooDataHist > dhist, int intOrder=0);  ;  RooHistPdf (const RooHistPdf &other, const char *name=nullptr);  Copy constructor. ;  ; double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const override;  Return integral identified by 'code'. ;  ; std::list< double > * binBoundaries (RooAbsRealLValue &, double, double) const override;  Return sampling hint for making curves of (projections) of this function as the recursive division strategy of RooCurve cannot deal efficiently with the vertical lines that occur in a non-interpolated histogram. ;  ; std::string buildCallToAnalyticIntegral (int code, const char *rangeName, RooFit::Detail::CodeSquashContext &ctx) const override;  This functio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooHistPdf.html:79,Load,Loading,79,doc/master/classRooHistPdf.html,https://root.cern,https://root.cern/doc/master/classRooHistPdf.html,1,['Load'],['Loading']
Performance,". ROOT: RooIntegralMorph Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Friends |; List of all members ; RooIntegralMorph Class ReferenceRooFit » RooFit. ; Class RooIntegralMorph is an implementation of the histogram interpolation technique described by Alex Read in 'NIM A 425 (1999) 357-369 'Linear interpolation of histograms' for continuous functions rather than histograms. ; The interpolation method, in short, works as follows. Given a p.d.f f1(x) with c.d.f F1(x) and p.d.f f2(x) with c.d.f F2(x); One finds takes a value 'y' of both c.d.fs and determines the corresponding x values x(1,2) at which F(1,2)(x)==y.; The value of the interpolated p.d.f fbar(x) is then calculated as fbar(alpha*x1+(1-alpha)*x2) = f1(x1)*f2(x2) / ( alpha*f2(x2) + (1-alpha)*f1(x1) ) ;. From a technical point of view class RooIntegralMorph is a p.d.f that takes two input p.d.fs f1(x,p) an f2(x,q) and an interpolation parameter to make a p.d.f fbar(x,p,q,alpha). The shapes f1 and f2 are always taken to be end the end-points of the parameter alpha, regardless of what the those numeric values are.; Since the value of fbar(x) cannot be easily calculated for a given value of x, class RooIntegralMorph is an implementation of RooAbsCachedPdf and calculates the shape of the interpolated p.d.f. fbar(x) for all values of x for a given value of alpha,p,q and caches these values in a histogram (as implemented by RooAbsCachedPdf). The binning granularity of the cache can be controlled by the binning named ""cache"" on the RooRealVar representing the observable x. The fbar sampling algorithm is based on a recursive division mechanism with a built-in precision cutoff: First an initial sampling in 64 equally spaced bins is made. Then the value of fbar is calculated in the center of each gap. If the calculated val",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooIntegralMorph.html:85,Load,Loading,85,doc/master/classRooIntegralMorph.html,https://root.cern,https://root.cern/doc/master/classRooIntegralMorph.html,1,['Load'],['Loading']
Performance,". ROOT: RooJeffreysPrior Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Attributes |; List of all members ; RooJeffreysPrior Class ReferenceRooFit » RooFit. ; Implementation of Jeffrey's prior. ; This class estimates the fisher information matrix by generating a binned Asimov dataset from the supplied PDFs, fitting it, retrieving the covariance matrix and inverting it. It returns the square root of the determinant of this matrix. Numerical integration is used to normalise. Since each integration step requires fits to be run, evaluating complicated PDFs may take long.; Check the tutorial rs302_JeffreysPriorDemo.C for a demonstration with a simple PDF. ; Definition at line 17 of file RooJeffreysPrior.h. Classes; struct  CacheElem;  . Public Member Functions;  RooJeffreysPrior ();  ;  RooJeffreysPrior (const char *name, const char *title, RooAbsPdf &nominal, const RooArgList &paramSet, const RooArgList &obsSet);  Construct a new JeffreysPrior. ;  ;  RooJeffreysPrior (const RooJeffreysPrior &other, const char *name=nullptr);  Copy constructor. ;  ; TObject * clone (const char *newname) const override;  ; TClass * IsA () const override;  ; const RooArgList & lowList () const;  ; const RooArgList & paramList () const;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsPdf;  RooAbsPdf ();  Default constructor. ;  ;  RooAbsPdf (const char *name, const char *title, double minVal, double maxVal);  Constructor with name, title, and plot range. ;  ;  RooAbsPdf (const char *name, const char *title=nullptr);  Constructor with name and title only. ;  ;  ~RooAbsPdf () override;  Destructor. ;  ; double analyticalIntegralWN (Int_t code, const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooJeffreysPrior.html:85,Load,Loading,85,doc/master/classRooJeffreysPrior.html,https://root.cern,https://root.cern/doc/master/classRooJeffreysPrior.html,2,"['Cache', 'Load']","['CacheElem', 'Loading']"
Performance,". ROOT: RooJohnson Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Types |; Private Member Functions |; Private Attributes |; List of all members ; RooJohnson Class ReferencefinalRooFit » RooFit. ; Johnson's \( S_{U} \) distribution. ; This PDF results from transforming a normally distributed variable \( x \) to this form: ; \[; z = \gamma + \delta \sinh^{-1}\left( \frac{x - \mu}{\lambda} \right); \]. The resulting PDF is ; \[; \mathrm{PDF}[\mathrm{Johnson}\ S_U] = \frac{\delta}{\lambda\sqrt{2\pi}}; \frac{1}{\sqrt{1 + \left( \frac{x-\mu}{\lambda} \right)^2}}; \;\exp\left[-\frac{1}{2} \left(\gamma + \delta \sinh^{-1}\left(\frac{x-\mu}{\lambda}\right) \right)^2\right].; \]. It is often used to fit a mass difference for charm decays, and therefore the variable \( x \) is called ""mass"" in the implementation. A mass threshold allows to set the PDF to zero to the left of the threshold. References:; Johnson, N. L. (1949). Systems of Frequency Curves Generated by Methods of Translation. Biometrika 36(1/2), 149–176. doi:10.2307/2332539. Definition at line 24 of file RooJohnson.h. Public Member Functions;  RooJohnson ();  ;  RooJohnson (const char *name, const char *title, RooAbsReal &mass, RooAbsReal &mu, RooAbsReal &lambda, RooAbsReal &gamma, RooAbsReal &delta, double massThreshold=-std::numeric_limits< double >::max());  Construct a new Johnson PDF. ;  ;  RooJohnson (const RooJohnson &other, const char *newName=nullptr);  Copy a Johnson PDF. ;  ; double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const override;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; TObject * clone (const char *newname) const override;  ; void generateEvent (Int_t code) override;  Generate events based on code obtained by getGenerator(). ;  ; Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooJohnson.html:79,Load,Loading,79,doc/master/classRooJohnson.html,https://root.cern,https://root.cern/doc/master/classRooJohnson.html,1,['Load'],['Loading']
Performance,". ROOT: RooKeysPdf Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; RooKeysPdf Class ReferenceRooFit » RooFit. ; Class RooKeysPdf implements a one-dimensional kernel estimation p.d.f which model the distribution of an arbitrary input dataset as a superposition of Gaussian kernels, one for each data point, each contributing 1/N to the total integral of the pdf. ; If the 'adaptive mode' is enabled, the width of the Gaussian is adaptively calculated from the local density of events, i.e. narrow for regions with high event density to preserve details and wide for regions with low event density to promote smoothness. The details of the general algorithm are described in the following paper:; Cranmer KS, Kernel Estimation in High-Energy Physics. Computer Physics Communications 136:198-207,2001 - e-Print Archive: hep ex/0011057 ; Definition at line 24 of file RooKeysPdf.h. Public Types; enum  Mirror { ;   NoMirror; , MirrorLeft; , MirrorRight; , MirrorBoth; , ;   MirrorAsymLeft; , MirrorAsymLeftRight; , MirrorAsymRight; , MirrorLeftAsymRight; , ;   MirrorAsymBoth. };  ;  Public Types inherited from RooAbsPdf; enum  ExtendMode { CanNotBeExtended; , CanBeExtended; , MustBeExtended; };  ;  Public Types inherited from RooAbsReal; enum  ErrorLoggingMode { PrintErrors; , CollectErrors; , CountErrors; , Ignore; };  ; enum  ScaleType { Raw; , Relative; , NumEvent; , RelativeExpected; };  ; using value_type = double;  ;  Public Types inherited from RooAbsArg; enum  CacheMode { Always =0; , NotAdvised =1; , Never =2; };  ; enum  ConstOpCode { Activate =0; , DeActivate =1; , ConfigChange =2; , ValueChange =3; };  ; enum  OperMode { Auto =0; , AClean =1; , ADirty =2; };  ; using RefCount",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooKeysPdf.html:79,Load,Loading,79,doc/master/classRooKeysPdf.html,https://root.cern,https://root.cern/doc/master/classRooKeysPdf.html,1,['Load'],['Loading']
Performance,". ROOT: RooLagrangianMorphFunc Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Static Public Attributes |; Private Member Functions |; Private Attributes |; List of all members ; RooLagrangianMorphFunc Class ReferenceRooFit » RooFit. ; Class RooLagrangianMorphing is a implementation of the method of Effective Lagrangian Morphing, described in ATL-PHYS-PUB-2015-047. ; Effective Lagrangian Morphing is a method to construct a continuous signal model in the coupling parameter space. Basic assumption is that shape and cross section of a physical distribution is proportional to it's squared matrix element. The signal model is constructed by a weighted sum over N input distributions. The calculation of the weights is based on Matrix Elements evaluated for the different input scenarios. The number of input files depends on the number of couplings in production and decay vertices, and also whether the decay and production vertices describe the same process or not. ; Definition at line 77 of file RooLagrangianMorphFunc.h. Classes; class  CacheElem;  ; struct  Config;  . Public Types; typedef std::map< const std::string, FlagSet > FlagMap;  ; typedef std::map< const std::string, int > FlagSet;  ; typedef std::map< const std::string, ParamSet > ParamMap;  ; typedef std::map< const std::string, double > ParamSet;  ;  Public Types inherited from RooAbsReal; enum  ErrorLoggingMode { PrintErrors; , CollectErrors; , CountErrors; , Ignore; };  ; enum  ScaleType { Raw; , Relative; , NumEvent; , RelativeExpected; };  ; using value_type = double;  ;  Public Types inherited from RooAbsArg; enum  CacheMode { Always =0; , NotAdvised =1; , Never =2; };  ; enum  ConstOpCode { Activate =0; , DeActivate =1; , ConfigChange =2; , ValueChange =3; };  ; enum  OperMode { Auto =0; , AClean =1; , ADirty =2; };  ; using RefCountList_t = RooSTLR",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooLagrangianMorphFunc.html:91,Load,Loading,91,doc/master/classRooLagrangianMorphFunc.html,https://root.cern,https://root.cern/doc/master/classRooLagrangianMorphFunc.html,1,['Load'],['Loading']
Performance,". ROOT: RooLandau Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooLandau Class ReferenceRooFit » RooFit. ; Landau distribution p.d.f. . PDF of the Landau distribution.; Definition at line 24 of file RooLandau.h. Public Member Functions;  RooLandau ();  ;  RooLandau (const char *name, const char *title, RooAbsReal &_x, RooAbsReal &_mean, RooAbsReal &_sigma);  ;  RooLandau (const char *name, const char *title, RooAbsReal::Ref _x, RooAbsReal::Ref _mean, RooAbsReal::Ref _sigma);  ;  RooLandau (const RooLandau &other, const char *name=nullptr);  ; double analyticalIntegral (Int_t code, const char *rangeName) const override;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; std::string buildCallToAnalyticIntegral (Int_t code, const char *rangeName, RooFit::Detail::CodeSquashContext &ctx) const override;  This function defines the analytical integral translation for the class. ;  ; TObject * clone (const char *newname) const override;  ; void generateEvent (Int_t code) override;  Interface for generation of an event using the algorithm corresponding to the specified code. ;  ; Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const override;  Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ;  ; Int_t getGenerator (const RooArgSet &directVars, RooArgSet &generateVars, bool staticInitOK=true) const override;  Load generatedVars with the subset of directVars that we can generate events for, and return a code that specifies the generator algorithm we will use. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooLandau.html:78,Load,Loading,78,doc/master/classRooLandau.html,https://root.cern,https://root.cern/doc/master/classRooLandau.html,1,['Load'],['Loading']
Performance,". ROOT: RooLegacyExpPoly Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooLegacyExpPoly Class ReferenceRooFit » RooFit. ; RooLegacyExpPoly implements a polynomial PDF of the form. . \[ f(x) =; \mathcal{N} \cdot \exp( \sum_{i} a_{i} * x^{i} ) \]. \( \mathcal{N}; \) is a normalisation constant that is automatically calculated when the function is used in computations.; The sum can be truncated at the low end. See the main constructor RooLegacyExpPoly::RooLegacyExpPoly(const char*, const char*, RooAbsReal&, const RooArgList&, int). Definition at line 18 of file RooLegacyExpPoly.h. Public Member Functions;  RooLegacyExpPoly ();  ;  RooLegacyExpPoly (const char *name, const char *title, RooAbsReal &x, const RooArgList &coefList, int lowestOrder=1);  Create a polynomial in the variable x. ;  ;  RooLegacyExpPoly (const RooLegacyExpPoly &other, const char *name=nullptr);  Copy constructor. ;  ; void adjustLimits ();  ; double analyticalIntegral (int code, const char *rangeName=nullptr) const override;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; TObject * clone (const char *newname) const override;  ; RooArgList const & coefList () const;  Get the coefficient list. ;  ; int getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const override;  Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ;  ; std::string getFormulaExpression (bool expand) const;  ; double getLogVal (const RooArgSet *nset) const override;  Return the log of the current value with given normalization An error message is printed if the argument of the log is negative. ;  ; TClass * IsA () const override;  ; int lowestOrder () const;  Return the order for the first coef",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooLegacyExpPoly.html:85,Load,Loading,85,doc/master/classRooLegacyExpPoly.html,https://root.cern,https://root.cern/doc/master/classRooLegacyExpPoly.html,1,['Load'],['Loading']
Performance,". ROOT: RooLegendre Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooLegendre Class ReferenceRooFit » RooFit. ; Compute the associated Legendre polynomials using ROOT::Math::assoc_legendre(). ; Since the Legendre polynomials have a value range of [-1, 1], these cannot be implemented as a PDF. They can be used in sums, though, for example using a RooRealSumFunc of RooLegendre plus an offset. ; Definition at line 20 of file RooLegendre.h. Public Member Functions;  RooLegendre ();  ;  RooLegendre (const char *name, const char *title, RooAbsReal &ctheta, int l, int m=0);  TODO: for now, we assume that ctheta has a range [-1,1] should map the ctheta range onto this interval, and adjust integrals... ;  ;  RooLegendre (const char *name, const char *title, RooAbsReal &ctheta, int l1, int m1, int l2, int m2);  ;  RooLegendre (const RooLegendre &other, const char *name=nullptr);  ; double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const override;  this was verified to match mathematica for l1 in [0,2], m1 in [0,l1], l2 in [l1,4], m2 in [0,l2] ;  ; TObject * clone (const char *newname) const override;  ; Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const override;  Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ;  ; Int_t getMaxVal (const RooArgSet &vars) const override;  Advertise capability to determine maximum value of function for given set of observables. ;  ; TClass * IsA () const override;  ; double maxVal (Int_t code) const override;  Return maximum value for set of observables identified by code assigned in getMaxVal. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassD",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooLegendre.html:80,Load,Loading,80,doc/master/classRooLegendre.html,https://root.cern,https://root.cern/doc/master/classRooLegendre.html,1,['Load'],['Loading']
Performance,". ROOT: RooLinTransBinning Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooLinTransBinning Class ReferenceRooFit » RooFit Core. ; Special binning implementation for RooLinearVar that transforms the binning of the RooLinearVar input variable in the same way that RooLinearVar does. ; Definition at line 22 of file RooLinTransBinning.h. Public Member Functions;  RooLinTransBinning (const char *name=nullptr);  ;  RooLinTransBinning (const RooAbsBinning &input, double slope=1.0, double offset=0.0, const char *name=nullptr);  Constructor with a given input binning and the slope and offset to be applied to construct the linear transformation. ;  ;  RooLinTransBinning (const RooLinTransBinning &, const char *name=nullptr);  Copy constructor. ;  ; double * array () const override;  Return array of bin boundaries. ;  ; double averageBinWidth () const override;  ; double binCenter (Int_t bin) const override;  ; double binHigh (Int_t bin) const override;  ; double binLow (Int_t bin) const override;  ; void binNumbers (double const *x, int *bins, std::size_t n, int coef) const override;  Compute the bin indices for multiple values of x. ;  ; double binWidth (Int_t bin) const override;  ; RooAbsBinning * clone (const char *name=nullptr) const override;  ; double highBound () const override;  ; TClass * IsA () const override;  ; double lowBound () const override;  ; Int_t numBoundaries () const override;  ; void setMax (double xhi) override;  Change upper bound to xhi. ;  ; void setMin (double xlo) override;  Change lower bound to xlo. ;  ; void setRange (double xlo, double xhi) override;  ; void Streamer (TBuffer &) override;  Custom streamer implementing schema evolution between V1 and V2 persistent binnings. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooLinTransBinning.html:87,Load,Loading,87,doc/master/classRooLinTransBinning.html,https://root.cern,https://root.cern/doc/master/classRooLinTransBinning.html,1,['Load'],['Loading']
Performance,". ROOT: RooLinearCombination Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; RooLinearCombination Class Reference. ; RooLinearCombination is a class that helps perform linear combination of floating point numbers and permits handling them as multiprecision. ; Definition at line 30 of file RooLinearCombination.h. Public Member Functions;  RooLinearCombination ();  ;  RooLinearCombination (const char *name);  ;  RooLinearCombination (const RooLinearCombination &other, const char *name);  ;  ~RooLinearCombination () override;  ; void add (RooFit::SuperFloat c, RooAbsReal *t);  ; std::list< double > * binBoundaries (RooAbsRealLValue &obs, double xlo, double xhi) const override;  Retrieve bin boundaries if this distribution is binned in obs. ;  ; TObject * clone (const char *newname) const override;  ; double evaluate () const override;  Evaluate this PDF / function / constant. Needs to be overridden by all derived classes. ;  ; RooFit::SuperFloat getCoefficient (size_t idx);  ; TClass * IsA () const override;  ; std::list< double > * plotSamplingHint (RooAbsRealLValue &obs, double xlo, double xhi) const override;  Interface for returning an optional hint for initial sampling points when constructing a curve projected on observable obs. ;  ; void printArgs (std::ostream &os) const override;  Print object arguments, ie its proxies. ;  ; void setCoefficient (size_t idx, RooFit::SuperFloat c);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *tit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooLinearCombination.html:89,Load,Loading,89,doc/master/classRooLinearCombination.html,https://root.cern,https://root.cern/doc/master/classRooLinearCombination.html,2,"['Load', 'perform']","['Loading', 'perform']"
Performance,". ROOT: RooLinearVar Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooLinearVar Class Reference. ; RooLinearVar is the most general form of a derived real-valued object that can be used by RooRealIntegral to integrate over. ; The requirements for this are; Can be modified directly (i.e. invertible formula); Jacobian term in integral is constant (but not necessarily 1). This class implements the most general form that satisfies these requirements ; \[; RLV = \mathrm{slope} \cdot x + \mathrm{offset}; \]. \( x \) is required to be a RooRealVar to meet the invertibility criterium, slope and offset are RooAbsReals, but cannot overlap with \( x \), i.e., \( x \) may not be a server of slope and offset.; In the context of a dataset, slope may not contain any real-valued dependents (to satisfyt the constant Jacobian requirement). This check cannot be enforced at construction time, but can be performed at run time through the isJacobianOK(depList) member function. ; Definition at line 29 of file RooLinearVar.h. Public Member Functions;  RooLinearVar ();  ;  RooLinearVar (const char *name, const char *title, RooAbsRealLValue &variable, const RooAbsReal &slope, const RooAbsReal &offset, const char *unit="""");  Constructor with RooAbsRealLValue variable and RooAbsReal slope and offset. ;  ;  RooLinearVar (const RooLinearVar &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooLinearVar () override;  Destructor. ;  ; TObject * clone (const char *newname) const override;  ; const RooAbsBinning & getBinning (const char *name=nullptr, bool verbose=true, bool createOnTheFly=false) const override;  Const version of getBinning() ;  ; RooAbsBinning & getBinning (const char *name=nullptr, bool verbose=true, bool createOnTheFly=false) override;  Retrieve binning of this ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooLinearVar.html:81,Load,Loading,81,doc/master/classRooLinearVar.html,https://root.cern,https://root.cern/doc/master/classRooLinearVar.html,1,['Load'],['Loading']
Performance,". ROOT: RooLinkedList Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Protected Attributes |; Private Types |; Static Private Member Functions |; Private Attributes |; Static Private Attributes |; Friends |; List of all members ; RooLinkedList Class ReferenceRooFit » RooFit Core. ; Collection class for internal use, storing a collection of RooAbsArg pointers in a doubly linked list. ; It can optionally add a hash table to speed up random access in large collections Use RooAbsCollection derived objects for public use (e.g. RooArgSet or RooArgList) ; Definition at line 44 of file RooLinkedList.h. Public Member Functions;  RooLinkedList (const RooLinkedList &other);  Copy constructor. ;  ;  RooLinkedList (Int_t htsize=0);  ;  ~RooLinkedList () override;  Destructor. ;  ; virtual void Add (TObject *arg);  ; TObject * At (int index) const;  Return object stored in sequential position given by index. ;  ; RooLinkedListIterImpl begin () const;  ; void Clear (Option_t *o=nullptr) override;  Remove all elements from collection. ;  ; TObject * Clone (const char *=nullptr) const override;  Make a clone of an object using the Streamer facility. ;  ; void Delete (Option_t *o=nullptr) override;  Remove all elements in collection and delete all elements NB: Collection does not own elements, this function should be used judiciously by caller. ;  ; bool empty () const;  ; RooLinkedListIterImpl end () const;  ; TObject * find (const char *name) const;  Return pointer to object with given name in collection. ;  ; RooAbsArg * findArg (const RooAbsArg *) const;  Return pointer to object with given name in collection. ;  ; TObject * FindObject (const char *name) const override;  Return pointer to object with given name. ;  ; TObject * FindObject (const TObject *obj) const override;  Find object in list. ;  ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooLinkedList.html:82,Load,Loading,82,doc/master/classRooLinkedList.html,https://root.cern,https://root.cern/doc/master/classRooLinkedList.html,1,['Load'],['Loading']
Performance,". ROOT: RooLognormal Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooLognormal Class ReferenceRooFit » RooFit. ; RooFit Lognormal PDF. ; The two parameters are:; m0: the median of the distribution; k = exp(sigma): sigma is called the shape parameter in the TMath parameterization. \[; \mathrm{RooLognormal}(x \, | \, m_0, k) = \frac{1}{\sqrt{2\pi \cdot \ln(k) \cdot x}} \cdot \exp\left(; \frac{-\ln^2(\frac{x}{m_0})}{2 \ln^2(k)} \right) \]. The parameterization here is physics driven and differs from the ROOT::Math::lognormal_pdf() in x,m,s,x0 with:; m = log(m0); s = log(k); x0 = 0 . Definition at line 17 of file RooLognormal.h. Public Member Functions;  RooLognormal ();  ;  RooLognormal (const char *name, const char *title, RooAbsReal &_x, RooAbsReal &_m0, RooAbsReal &_k, bool useStandardParametrization=false);  ;  RooLognormal (const RooLognormal &other, const char *name=nullptr);  ; double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const override;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; std::string buildCallToAnalyticIntegral (int code, const char *rangeName, RooFit::Detail::CodeSquashContext &ctx) const override;  This function defines the analytical integral translation for the class. ;  ; TObject * clone (const char *newname) const override;  ; void generateEvent (Int_t code) override;  Interface for generation of an event using the algorithm corresponding to the specified code. ;  ; Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const override;  Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ;  ; Int_t getGenerator (const RooArgSet &directVars, RooArgSet &generateVars, bool staticInitO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooLognormal.html:81,Load,Loading,81,doc/master/classRooLognormal.html,https://root.cern,https://root.cern/doc/master/classRooLognormal.html,1,['Load'],['Loading']
Performance,". ROOT: RooMCStudy Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Friends |; List of all members ; RooMCStudy Class ReferenceRooFit » RooFit Core. ; Helper class to facilitate Monte Carlo studies such as 'goodness-of-fit' studies, that involve fitting a PDF to multiple toy Monte Carlo sets. ; These may be generated from either same PDF or from a different PDF with similar parameters.; Given a fit and a generator PDF (they might be identical), RooMCStudy can produce toyMC samples and/or fit these. It accumulates the post-fit parameters of each iteration in a dataset. These can be retrieved using fitParams() or fitParDataSet(). This dataset additionally contains the variables; NLL: The value of the negative log-likelihood for each run.; ngen: The number of events generated for each run. Additional plotting routines simplify the task of plotting the distribution of the minimized likelihood, the fitted parameter values, fitted error and pull distribution.; RooMCStudy provides the option to insert add-in modules that modify the generate-and-fit cycle and allow to perform extra steps in the cycle. Output of these modules can be stored alongside the fit results in the aggregate results dataset. These study modules should derive from the class RooAbsMCStudyModule.; Check the RooFit tutorials; rf801_mcstudy.C; rf802_mcstudy_addons.C; rf803_mcstudy_addons2.C; rf804_mcstudy_constr.C for usage examples. PyROOT; Some member functions of RooMCStudy that take a RooCmdArg as argument also support keyword arguments. So far, this applies to constructor RooMCStudy(), RooMCStudy::plotParamOn, RooMCStudy::plotParam, RooMCStudy::plotNLL, RooMCStudy::plotError and RooMCStudy::plotPull. For example, the following code is equivalent in PyROOT: # Directly passing a RooCmdArg:; fr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooMCStudy.html:79,Load,Loading,79,doc/master/classRooMCStudy.html,https://root.cern,https://root.cern/doc/master/classRooMCStudy.html,1,['Load'],['Loading']
Performance,". ROOT: RooMappedCategory Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Static Public Attributes |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Friends |; List of all members ; RooMappedCategory Class Reference. ; RooMappedCategory provides a category-to-category mapping defined by pattern matching on their state labels. ; The mapping function consists of a series of wild card regular expressions. Each expression is matched to the input categories' state labels, and an associated output state label. ; Definition at line 27 of file RooMappedCategory.h. Classes; class  Entry;  . Public Member Functions;  RooMappedCategory ();  ;  RooMappedCategory (const char *name, const char *title, RooAbsCategory &inputCat, const char *defCatName=""NotMapped"", Int_t defCatIdx=NoCatIdx);  ;  RooMappedCategory (const RooMappedCategory &other, const char *name=nullptr);  ;  ~RooMappedCategory () override;  ; TObject * clone (const char *newname) const override;  ; TClass * IsA () const override;  ; bool map (const char *inKeyRegExp, const char *outKeyName, Int_t outKeyNum=NoCatIdx);  ; void printMetaArgs (std::ostream &os) const override;  Customized printing of arguments of a RooMappedCategory to more intuitively reflect the contents of the product operator construction. ;  ; void printMultiline (std::ostream &os, Int_t content, bool verbose=false, TString indent="""") const override;  Print info about this object to the specified stream. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object content",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooMappedCategory.html:86,Load,Loading,86,doc/master/classRooMappedCategory.html,https://root.cern,https://root.cern/doc/master/classRooMappedCategory.html,1,['Load'],['Loading']
Performance,". ROOT: RooMinimizer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; RooMinimizer Class ReferenceRooFit » RooFit Core. ; Wrapper class around ROOT::Math::Minimizer that provides a seamless interface between the minimizer functionality and the native RooFit interface. ; By default the Minimizer is Minuit 2. RooMinimizer can minimize any RooAbsReal function with respect to its parameters. Usual choices for minimization are the object returned by RooAbsPdf::createNLL() or RooAbsReal::createChi2(). RooMinimizer has methods corresponding to MINUIT functions like hesse(), migrad(), minos() etc. In each of these function calls the state of the MINUIT engine is synchronized with the state of the RooFit variables: any change in variables, change in the constant status etc is forwarded to MINUIT prior to execution of the MINUIT call. Afterwards the RooFit objects are resynchronized with the output state of MINUIT: changes parameter values, errors are propagated. Various methods are available to control verbosity, profiling, automatic PDF optimization. ; Definition at line 48 of file RooMinimizer.h. Classes; struct  Config;  Config argument to RooMinimizer constructor. More...;  ; struct  FitResult;  ; class  FitterInterface;  . Public Types; enum  PrintLevel { ;   None = -1; , Reduced = 0; , Normal = 1; , ExtraForProblem = 2; , ;   Maximum = 3. };  ; enum  Strategy { Speed = 0; , Balance = 1; , Robustness = 2; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooMinimizer.html:81,Load,Loading,81,doc/master/classRooMinimizer.html,https://root.cern,https://root.cern/doc/master/classRooMinimizer.html,1,['Load'],['Loading']
Performance,". ROOT: RooMoment Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooMoment Class ReferenceRooFit » RooFit Core. . Definition at line 26 of file RooMoment.h. Public Member Functions;  RooMoment ()=default;  ;  RooMoment (const char *name, const char *title, RooAbsReal &func, RooRealVar &x, const RooArgSet &nset, Int_t order=1, bool central=false, bool takeRoot=false, bool intNSet=false);  ;  RooMoment (const char *name, const char *title, RooAbsReal &func, RooRealVar &x, Int_t order=1, bool central=false, bool takeRoot=false);  ;  RooMoment (const RooMoment &other, const char *name=nullptr);  ; TObject * clone (const char *newname) const override;  ; const RooAbsReal & iF ();  ; TClass * IsA () const override;  ; const RooAbsReal & ixF ();  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; const RooAbsReal & xF ();  ;  Public Member Functions inherited from RooAbsMoment;  RooAbsMoment ()=default;  ;  RooAbsMoment (const char *name, const char *title, RooAbsReal &func, RooRealVar &x, Int_t order=1, bool takeRoot=false);  ;  RooAbsMoment (const RooAbsMoment &other, const char *name=nullptr);  ; bool central () const;  ; RooAbsReal * mean ();  ; Int_t order () const;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooMoment.html:78,Load,Loading,78,doc/master/classRooMoment.html,https://root.cern,https://root.cern/doc/master/classRooMoment.html,1,['Load'],['Loading']
Performance,". ROOT: RooMomentMorph Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Friends |; List of all members ; RooMomentMorph Class ReferenceRooFit » RooFit. . Definition at line 28 of file RooMomentMorph.h. Classes; class  CacheElem;  . Public Types; enum  Setting { ;   Linear; , NonLinear; , NonLinearPosFractions; , NonLinearLinFractions; , ;   SineLinear. };  ;  Public Types inherited from RooAbsPdf; enum  ExtendMode { CanNotBeExtended; , CanBeExtended; , MustBeExtended; };  ;  Public Types inherited from RooAbsReal; enum  ErrorLoggingMode { PrintErrors; , CollectErrors; , CountErrors; , Ignore; };  ; enum  ScaleType { Raw; , Relative; , NumEvent; , RelativeExpected; };  ; using value_type = double;  ;  Public Types inherited from RooAbsArg; enum  CacheMode { Always =0; , NotAdvised =1; , Never =2; };  ; enum  ConstOpCode { Activate =0; , DeActivate =1; , ConfigChange =2; , ValueChange =3; };  ; enum  OperMode { Auto =0; , AClean =1; , ADirty =2; };  ; using RefCountList_t = RooSTLRefCountList< RooAbsArg >;  ; using RefCountListLegacyIterator_t = TIteratorToSTLInterface< RefCountList_t::Container_t >;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooMomentMorph.html:83,Load,Loading,83,doc/master/classRooMomentMorph.html,https://root.cern,https://root.cern/doc/master/classRooMomentMorph.html,2,"['Cache', 'Load']","['CacheElem', 'Loading']"
Performance,". ROOT: RooMomentMorphFunc Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Friends |; List of all members ; RooMomentMorphFunc Class ReferenceRooFit » RooFit. . Definition at line 30 of file RooMomentMorphFunc.h. Classes; class  CacheElem;  . Public Types; enum  Setting { ;   Linear; , NonLinear; , NonLinearPosFractions; , NonLinearLinFractions; , ;   SineLinear. };  ;  Public Types inherited from RooAbsReal; enum  ErrorLoggingMode { PrintErrors; , CollectErrors; , CountErrors; , Ignore; };  ; enum  ScaleType { Raw; , Relative; , NumEvent; , RelativeExpected; };  ; using value_type = double;  ;  Public Types inherited from RooAbsArg; enum  CacheMode { Always =0; , NotAdvised =1; , Never =2; };  ; enum  ConstOpCode { Activate =0; , DeActivate =1; , ConfigChange =2; , ValueChange =3; };  ; enum  OperMode { Auto =0; , AClean =1; , ADirty =2; };  ; using RefCountList_t = RooSTLRefCountList< RooAbsArg >;  ; using RefCountListLegacyIterator_t = TIteratorToSTLInterface< RefCountList_t::Container_t >;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintable; enum  ContentsOption { ;   kName =1; , kClassName =2; , kValue =4; , kArgs =8; , ;   kExtras ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooMomentMorphFunc.html:87,Load,Loading,87,doc/master/classRooMomentMorphFunc.html,https://root.cern,https://root.cern/doc/master/classRooMomentMorphFunc.html,3,"['Cache', 'Load']","['CacheElem', 'CacheMode', 'Loading']"
Performance,". ROOT: RooMomentMorphFuncND Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Friends |; List of all members ; RooMomentMorphFuncND Class ReferenceRooFit » RooFit. . Definition at line 33 of file RooMomentMorphFuncND.h. Classes; class  CacheElem;  ; class  Grid2;  . Public Types; using Base_t = RooAbsReal;  ; using Grid = Grid2;  ; enum  Setting { ;   Linear; , SineLinear; , NonLinear; , NonLinearPosFractions; , ;   NonLinearLinFractions. };  ;  Public Types inherited from RooAbsReal; enum  ErrorLoggingMode { PrintErrors; , CollectErrors; , CountErrors; , Ignore; };  ; enum  ScaleType { Raw; , Relative; , NumEvent; , RelativeExpected; };  ; using value_type = double;  ;  Public Types inherited from RooAbsArg; enum  CacheMode { Always =0; , NotAdvised =1; , Never =2; };  ; enum  ConstOpCode { Activate =0; , DeActivate =1; , ConfigChange =2; , ValueChange =3; };  ; enum  OperMode { Auto =0; , AClean =1; , ADirty =2; };  ; using RefCountList_t = RooSTLRefCountList< RooAbsArg >;  ; using RefCountListLegacyIterator_t = TIteratorToSTLInterface< RefCountList_t::Container_t >;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintable; enum  ContentsOpt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooMomentMorphFuncND.html:89,Load,Loading,89,doc/master/classRooMomentMorphFuncND.html,https://root.cern,https://root.cern/doc/master/classRooMomentMorphFuncND.html,2,"['Cache', 'Load']","['CacheElem', 'Loading']"
Performance,". ROOT: RooMsgService Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; Static Public Attributes |; Protected Member Functions |; Protected Attributes |; List of all members ; RooMsgService Class ReferenceRooFit » RooFit Core. ; Singleton class that organizes messages generated in RooFit. ; Each message has a message level RooFit::MsgLevel (DEBUG,INFO,PROGRESS,WARNING,ERROR or FATAL), an source object, and a RooFit::MsgTopic. RooMsgService allows to filter and redirect messages into streams according to message level, topic, (base) class of originating object, name of originating object and based on attribute labels attached to individual objects. The current default configuration creates streams for all messages at WARNING level or higher (e.g. ERROR and FATAL) and for all INFO message on topics Generation,Plotting, Integration and Minimization and redirects them to stdout. Users can create additional streams for logging of e.g. DEBUG messages on particular topics or objects and/or redirect streams to C++ streams or files.; The singleton instance is accessible through RooMsgService::instance(). Temporarily change the message level; There is a helper, RooHelpers::LocalChangeMsgLevel, that overrides the default message levels as long as it is alive. To suppress everything below WARNING: RooHelpers::LocalChangeMessageLevel changeMsgLvl(RooFit::WARNING);; [ statements that normally generate a lot of output ]; a#define a(i)Definition RSha256.hxx:99; RooFit::WARNING@ WARNINGDefinition RooGlobalFunc.h:60; outputstatic void output(); Temporarily capture a message stream; RooHelpers::HijackMessageStream allows to fully capture a message stream in a std::stringstream. With this, RooFit messages can be evaluated or suppressed. PyROOT; Some member functions of RooMsgService that take a RooCmdArg as argument also supp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooMsgService.html:82,Load,Loading,82,doc/master/classRooMsgService.html,https://root.cern,https://root.cern/doc/master/classRooMsgService.html,1,['Load'],['Loading']
Performance,". ROOT: RooMultiBinomial Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; RooMultiBinomial Class ReferenceRooFit » RooFit. ; RooMultiBinomial is an efficiency function which makes all combinations of efficiencies given as input different efficiency functions for different categories. ; Given a dataset with a category C that determines if a given event is accepted (1) or rejected (0) for the efficiency to be measured, this class evaluates as F if C is 'accept' and as (1-F) if C is 'reject'. Values of F below 0 and above 1 are clipped. F may have an arbitrary number of dependents and parameters; The combination only 'reject' can be chosen to be visible or not visible (and hence this efficiency is then equal to zero). ; Definition at line 24 of file RooMultiBinomial.h. Public Member Functions;  RooMultiBinomial ();  ;  RooMultiBinomial (const char *name, const char *title, const RooArgList &effFuncList, const RooArgList &catList, bool ignoreNonVisible);  Construct the efficiency functions from a list of efficiency functions and a list of categories cat with two states (0,1) that indicate if a given event should be counted as rejected or accepted respectively. ;  ;  RooMultiBinomial (const RooMultiBinomial &other, const char *name=nullptr);  Copy constructor. ;  ; TObject * clone (const char *newname) const override;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooMultiBinomial.html:85,Load,Loading,85,doc/master/classRooMultiBinomial.html,https://root.cern,https://root.cern/doc/master/classRooMultiBinomial.html,1,['Load'],['Loading']
Performance,". ROOT: RooMultiCategory Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Friends |; List of all members ; RooMultiCategory Class ReferenceRooFit » RooFit Core. ; Connects several RooAbsCategory objects into a single category. ; The states of the multi-category consist of all the permutations of the input categories. RooMultiCategory states are automatically defined and updated whenever an input category modifies its list of states.; A RooMultiCategory is not an lvalue, i.e. one cannot set its states. Its state simply follows as a computation from the states of the input categories. This is because the input categories don't need to be lvalues, so their states cannot be set by the MultiCategory. If all input categories are lvalues, the RooSuperCategory can be used. It works like RooMultiCategory, but allows for setting the states. ; Definition at line 28 of file RooMultiCategory.h. Public Member Functions;  RooMultiCategory ();  ;  RooMultiCategory (const char *name, const char *title, const RooArgSet &inputCatList);  Construct a product of the given set of input RooAbsCategories in inInputCatList. ;  ;  RooMultiCategory (const RooMultiCategory &other, const char *name=nullptr);  Copy constructor. ;  ; TObject * clone (const char *newname) const override;  ; const char * getCurrentLabel () const override;  Get current label. ;  ; const RooArgSet & inputCatList () const;  ; TClass * IsA () const override;  ; void printMultiline (std::ostream &os, Int_t content, bool verbose=false, TString indent="""") const override;  Print the state of this object to the specified output stream. ;  ; bool readFromStream (std::istream &, bool, bool) override;  Multi categories cannot be read from streams. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVir",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooMultiCategory.html:85,Load,Loading,85,doc/master/classRooMultiCategory.html,https://root.cern,https://root.cern/doc/master/classRooMultiCategory.html,1,['Load'],['Loading']
Performance,". ROOT: RooMultiVarGaussian Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooMultiVarGaussian Class ReferenceRooFit » RooFit Core. ; Multivariate Gaussian p.d.f. ; with correlations ; Definition at line 31 of file RooMultiVarGaussian.h. Classes; class  AnaIntData;  ; class  BitBlock;  ; class  GenData;  . Public Member Functions;  RooMultiVarGaussian ();  ;  RooMultiVarGaussian (const char *name, const char *title, const RooArgList &xvec, const RooArgList &mu, const TMatrixDBase &covMatrix);  ;  RooMultiVarGaussian (const char *name, const char *title, const RooArgList &xvec, const RooFitResult &fr, bool reduceToConditional=true);  ;  RooMultiVarGaussian (const char *name, const char *title, const RooArgList &xvec, const TMatrixDBase &covMatrix);  ;  RooMultiVarGaussian (const char *name, const char *title, const RooArgList &xvec, const TVectorD &mu, const TMatrixDBase &covMatrix);  ;  RooMultiVarGaussian (const RooMultiVarGaussian &other, const char *name=nullptr);  ; double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const override;  Handle full integral here. ;  ; TObject * clone (const char *newname) const override;  ; const TMatrixDSym & covarianceMatrix () const;  ; void generateEvent (Int_t code) override;  Retrieve generator config from cache. ;  ; Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const override;  Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ;  ; Int_t getGenerator (const RooArgSet &directVars, RooArgSet &generateVars, bool staticInitOK=true) const override;  Special case: generate all observables. ;  ; void initGenerator (Int_t code) override;  Clear the GenData cache as its content is not invariant un",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooMultiVarGaussian.html:88,Load,Loading,88,doc/master/classRooMultiVarGaussian.html,https://root.cern,https://root.cern/doc/master/classRooMultiVarGaussian.html,1,['Load'],['Loading']
Performance,". ROOT: RooNDKeysPdf Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooNDKeysPdf Class ReferenceRooFit » RooFit. ; Generic N-dimensional implementation of a kernel estimation p.d.f. ; This p.d.f. models the distribution of an arbitrary input dataset as a superposition of Gaussian kernels, one for each data point, each contributing 1/N to the total integral of the p.d.f. If the 'adaptive mode' is enabled, the width of the Gaussian is adaptively calculated from the local density of events, i.e. narrow for regions with high event density to preserve details and wide for regions with log event density to promote smoothness. The details of the general algorithm are described in the following paper: Cranmer KS, Kernel Estimation in High-Energy Physics. Computer Physics Communications 136:198-207,2001 - e-Print Archive: hep ex/0011057 For multi-dimensional datasets, the kernels are modeled by multidimensional Gaussians. The kernels are constructed such that they reflect the correlation coefficients between the observables in the input dataset. ; Definition at line 44 of file RooNDKeysPdf.h. Classes; struct  BoxInfo;  . Public Types; enum  Mirror { ;   NoMirror; , MirrorLeft; , MirrorRight; , MirrorBoth; , ;   MirrorAsymLeft; , MirrorAsymLeftRight; , MirrorAsymRight; , MirrorLeftAsymRight; , ;   MirrorAsymBoth. };  ;  Public Types inherited from RooAbsPdf; enum  ExtendMode { CanNotBeExtended; , CanBeExtended; , MustBeExtended; };  ;  Public Types inherited from RooAbsReal; enum  ErrorLoggingMode { PrintErrors; , CollectErrors; , CountErrors; , Ignore; };  ; enum  ScaleType { Raw; , Relative; , NumEvent; , RelativeExpected; };  ; using value_type = double;  ;  Public Types inherited from RooAbsArg; enum  CacheMode { Always =0; , NotAdvised =1",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNDKeysPdf.html:81,Load,Loading,81,doc/master/classRooNDKeysPdf.html,https://root.cern,https://root.cern/doc/master/classRooNDKeysPdf.html,1,['Load'],['Loading']
Performance,". ROOT: RooNameReg Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; Friends |; List of all members ; RooNameReg Class ReferenceRooFit » RooFit Core. ; Registry for const char* names. ; For each unique name (which is not necessarily a unique pointer in the C++ standard), a unique pointer to a TNamed object is returned that can be used for fast searches and comparisons. ; Definition at line 26 of file RooNameReg.h. Public Types; enum  { kRenamedArg = (1ULL << ( 19 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  RooNameReg (const RooNameReg &other)=delete;  ; const TNamed * constPtr (const char *stringPtr);  Return a unique TNamed pointer for given C++ string. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNameReg.html:79,Load,Loading,79,doc/master/classRooNameReg.html,https://root.cern,https://root.cern/doc/master/classRooNameReg.html,1,['Load'],['Loading']
Performance,". ROOT: RooNonCPEigenDecay Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; RooNonCPEigenDecay Class ReferenceRooFit » RooFit. ; Time-dependent RooAbsAnaConvPdf for CP violating decays to Non-CP eigenstates (eg, \( B_0 \rightarrow \rho^\pm \pi^\mp\)). ; For a description of the physics model see the BaBar Physics Book, section 6.5.2.3 . The set of CP parameters used in this class is equivalent to the one used in the Physics Book, but it is not exactly the same. Starting from the set in the BaBar Book, in order to get the parameters used here you have to change the sign of both \(a_c^+\) and \(a_c^-\), and then substitute: ; \[; a_s^Q = S + Q \cdot \delta S \\; a_c^Q = C + Q \cdot \delta C; \]. where Q denotes the charge of the \(\rho\) meson. ; Definition at line 33 of file RooNonCPEigenDecay.h. Public Types; enum  DecayType { SingleSided; , DoubleSided; , Flipped; };  ;  Public Types inherited from RooAbsPdf; enum  ExtendMode { CanNotBeExtended; , CanBeExtended; , MustBeExtended; };  ;  Public Types inherited from RooAbsReal; enum  ErrorLoggingMode { PrintErrors; , CollectErrors; , CountErrors; , Ignore; };  ; enum  ScaleType { Raw; , Relative; , NumEvent; , RelativeExpected; };  ; using value_type = double;  ;  Public Types inherited from RooAbsArg; enum  CacheMode { Always =0; , NotAdvised =1; , Never =2; };  ; enum  ConstOpCode { Activate =0; , DeActivate =1; , ConfigChange =2; , ValueChange =3; };  ; enum  OperMode { Auto =0; , AClean =1; , ADirty =2; };  ; using RefCountList_t = RooSTLRefCountList< RooAbsArg >;  ; using RefCountListLegacyIterator_t = TIteratorToSTLInterface< RefCountList_t::Container_t >;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kB",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNonCPEigenDecay.html:87,Load,Loading,87,doc/master/classRooNonCPEigenDecay.html,https://root.cern,https://root.cern/doc/master/classRooNonCPEigenDecay.html,1,['Load'],['Loading']
Performance,". ROOT: RooNonCentralChiSquare Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooNonCentralChiSquare Class ReferenceRooFit » RooFit. ; The PDF of the Non-Central Chi Square distribution for n degrees of freedom. ; It is the asymptotic distribution of the profile likelihood ratio test q_mu when a different mu' is true. It is Wald's generalization of Wilks' Theorem.; See:; Asymptotic formulae for likelihood-based tests of new physics; By Glen Cowan, Kyle Cranmer, Eilam Gross, Ofer Vitells http://arXiv.org/abs/arXiv:1007.1727; Wikipedia; It requires MathMore to evaluate for non-integer degrees of freedom, k.; When the Mathmore library is available we can use the MathMore libraries implemented using GSL. It makes use of the modified Bessel function of the first kind (for k > 2). For k < 2 it uses the hypergeometric function 0F1. When is not available we use explicit summation of normal chi-squared distributions The usage of the sum can be forced by calling SetForceSum(true);; This implementation could be improved. BOOST has a nice implementation:; http://live.boost.org/doc/libs/1_42_0/libs/math/doc/sf_and_dist/html/math_toolkit/dist/dist_ref/dists/nc_chi_squared_dist.html; http://wesnoth.repositoryhosting.com/trac/wesnoth_wesnoth/browser/trunk/include/boost/math/distributions/non_central_chi_squared.hpp?rev=6 ; Definition at line 20 of file RooNonCentralChiSquare.h. Public Member Functions;  RooNonCentralChiSquare ();  ;  RooNonCentralChiSquare (const char *name, const char *title, RooAbsReal &_x, RooAbsReal &_k, RooAbsReal &_lambda);  ;  RooNonCentralChiSquare (const RooNonCentralChiSquare &other, const char *name=nullptr);  ; double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const override;  Implements the actual analytical integral(s) advert",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNonCentralChiSquare.html:91,Load,Loading,91,doc/master/classRooNonCentralChiSquare.html,https://root.cern,https://root.cern/doc/master/classRooNonCentralChiSquare.html,1,['Load'],['Loading']
Performance,". ROOT: RooNormalizedPdf Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; RooNormalizedPdf Class Reference. ; A RooNormalizedPdf wraps a pdf divided by its integral for a given normalization set into a new self-normalized pdf. ; Definition at line 19 of file RooNormalizedPdf.h. Public Member Functions;  RooNormalizedPdf (const RooNormalizedPdf &other, const char *name);  ;  RooNormalizedPdf (RooAbsPdf &pdf, RooArgSet const &normSet);  ; double analyticalIntegralWN (Int_t code, const RooArgSet *, const char *rangeName=nullptr) const override;  Forward calculation of analytical integrals to input p.d.f. ;  ; bool canComputeBatchWithCuda () const override;  ; TObject * clone (const char *newname) const override;  ; std::unique_ptr< RooAbsReal > createExpectedEventsFunc (const RooArgSet *) const override;  Returns an object that represents the expected number of events for a given normalization set, similar to how createIntegral() returns an object that returns the integral. ;  ; double expectedEvents (const RooArgSet *) const override;  Return expected number of events to be used in calculation of extended likelihood. ;  ; ExtendMode extendMode () const override;  Returns ability of PDF to provide extended likelihood terms. ;  ; bool forceAnalyticalInt (const RooAbsArg &) const override;  ; Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &analVars, const RooArgSet *, const char *rangeName=nullptr) const override;  Forward determination of analytical integration capabilities to input p.d.f. ;  ; bool selfNormalized () const override;  Shows if a PDF is self-normalized, which means that no attempt is made to add a normalization term. ;  ; void translate (RooFit::Detail::CodeSquashContext &ctx) const override;  This function defines a translation for each RooAbsReal based object that can be",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNormalizedPdf.html:85,Load,Loading,85,doc/master/classRooNormalizedPdf.html,https://root.cern,https://root.cern/doc/master/classRooNormalizedPdf.html,1,['Load'],['Loading']
Performance,". ROOT: RooNovosibirsk Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; RooNovosibirsk Class ReferenceRooFit » RooFit. ; RooNovosibirsk implements the Novosibirsk function. ; Function taken from H. Ikeda et al. NIM A441 (2000), p. 401 (Belle Collaboration) ; Definition at line 25 of file RooNovosibirsk.h. Public Member Functions;  RooNovosibirsk ();  ;  RooNovosibirsk (const char *name, const char *title, RooAbsReal &_x, RooAbsReal &_peak, RooAbsReal &_width, RooAbsReal &_tail);  ;  RooNovosibirsk (const RooNovosibirsk &other, const char *name=nullptr);  ; double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const override;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; TObject * clone (const char *newname) const override;  ; Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const override;  Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsPdf;  RooAbsPdf ();  Default constructor. ;  ;  RooAbsPdf (const char *name, const char *title, double minVal, double maxVal);  Constructor with name, title, and plot range. ;  ;  RooAbsPdf (const char *name, const char *title=nullptr);  Constructor with name and title only. ;  ;  ~RooAbsPdf () override;  Destructor. ;  ; double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Analytical integral with normalization (see RooAbsReal::analyticalIntegralWN() for further information). ;  ; virtual",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNovosibirsk.html:83,Load,Loading,83,doc/master/classRooNovosibirsk.html,https://root.cern,https://root.cern/doc/master/classRooNovosibirsk.html,1,['Load'],['Loading']
Performance,". ROOT: RooNumCdf Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; List of all members ; RooNumCdf Class ReferenceRooFit » RooFit Core. ; Implementation of RooNumRunningInt that calculates cumulative distribution functions from p.d.f.s. ; The main difference between RooNumCdf and RooNumRunningInt is that this class imposes special end-point conditions on the interpolated histogram that represents the output so that the value at the lower bound is guaranteed to converge to exactly zero and that the value at the upper bound is guaranteed to converge to exactly one, at all interpolation orders. ; Definition at line 17 of file RooNumCdf.h. Public Member Functions;  RooNumCdf (const char *name, const char *title, RooAbsPdf &_pdf, RooRealVar &_x, const char *binningName=""cache"");  Construct a cumulative distribution function from given input p.d.f over observable x. ;  ;  RooNumCdf (const RooNumCdf &other, const char *name=nullptr);  ; TObject * clone (const char *newname) const override;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooNumRunningInt;  RooNumRunningInt (const char *name, const char *title, RooAbsReal &_func, RooRealVar &_x, const char *binningName=""cache"");  Construct running integral of function '_func' over x_print from the lower bound on _x to the present value of _x using a numeric sampling technique. ;  ;  RooNumRunningInt (const RooNumRunningInt &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooNumRunningInt () override;  Destructor. ;  ; TObject * clone (const char *newname) const override;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNumCdf.html:78,Load,Loading,78,doc/master/classRooNumCdf.html,https://root.cern,https://root.cern/doc/master/classRooNumCdf.html,2,"['Load', 'cache']","['Loading', 'cache']"
Performance,". ROOT: RooNumConvPdf Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Friends |; List of all members ; RooNumConvPdf Class ReferenceRooFit » RooFit Core. ; Numeric 1-dimensional convolution operator PDF. ; This class can convolve any PDF with any other PDF using a straightforward numeric calculation of the convolution integral This class should be used as last resort as numeric convolution calculated this way is computationally intensive and prone to stability fitting problems. The preferred way to compute numeric convolutions is RooFFTConvPdf, which calculates convolutions using Fourier Transforms (requires external free FFTW3 package) RooNumConvPdf implements reasonable defaults that should convolve most functions reasonably well, but results strongly depend on the shape of your input PDFS so always check your result. The default integration engine for the numeric convolution is the adaptive Gauss-Kronrod method, which empirically seems the most robust for this task. You can override the convolution integration settings via the RooNumIntConfig object reference returned by the convIntConfig() member function By default the numeric convolution is integrated from -infinity to +infinity through a x -> 1/x coordinate transformation of the tails. For convolution with a very small bandwidth it may be advantageous (for both CPU consumption and stability) if the integration domain is limited to a finite range. The function setConvolutionWindow(mean,width,scale) allows to set a sliding window around the x value to be calculated taking a RooAbsReal expression for an offset and a width to be taken around the x value. These input expression can be RooFormulaVars or other function objects although the 3d 'scale' argument 'scale' multiplies the width RooAbsReal expression given in the 2nd argume",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNumConvPdf.html:82,Load,Loading,82,doc/master/classRooNumConvPdf.html,https://root.cern,https://root.cern/doc/master/classRooNumConvPdf.html,1,['Load'],['Loading']
Performance,". ROOT: RooNumConvolution Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Friends |; List of all members ; RooNumConvolution Class ReferenceRooFit » RooFit Core. ; Numeric 1-dimensional convolution operator PDF. ; This class can convolve any PDF with any other PDF This class should not be used blindly as numeric convolution is computing intensive and prone to stability fitting problems. If an analytic convolution can be calculated, you should use that or implement it if not available. RooNumConvolution implements reasonable defaults that should convolve most functions reasonably well, but results strongly depend on the shape of your input PDFS so always check your result.; The default integration engine for the numeric convolution is the adaptive Gauss-Kronrod method, which empirically seems the most robust for this task. You can override the convolution integration settings via the RooNumIntConfig object reference returned by the convIntConfig() member function By default the numeric convolution is integrated from -infinity to +infinity through a x -> 1/x coordinate transformation of the tails. For convolution with a very small bandwidth it may be advantageous (for both CPU consumption and stability) if the integration domain is limited to a finite range. The function setConvolutionWindow(mean,width,scale) allows to set a sliding window around the x value to be calculated taking a RooAbsReal expression for an offset and a width to be taken around the x value. These input expression can be RooFormulaVars or other function objects although the 3d 'scale' argument 'scale' multiplies the width RooAbsReal expression given in the 2nd argument, allowing for an appropriate window definition for most cases without need for a RooFormulaVar object: e.g. a Gaussian resolution PDF do setConvolu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNumConvolution.html:86,Load,Loading,86,doc/master/classRooNumConvolution.html,https://root.cern,https://root.cern/doc/master/classRooNumConvolution.html,1,['Load'],['Loading']
Performance,". ROOT: RooNumGenConfig Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; RooNumGenConfig Class ReferenceRooFit » RooFit Core. ; Holds the configuration parameters of the various numeric integrators used by RooRealIntegral. ; RooRealIntegral and RooAbsPdf use this class in the (normalization) integral configuration interface ; Definition at line 25 of file RooNumGenConfig.h. Public Member Functions;  RooNumGenConfig ();  Constructor. ;  ;  RooNumGenConfig (const RooNumGenConfig &other);  Copy constructor. ;  ;  ~RooNumGenConfig () override;  Destructor. ;  ; bool addConfigSection (const RooAbsNumGenerator *proto, const RooArgSet &defaultConfig);  Add a configuration section for a particular integrator. ;  ; StyleOption defaultPrintStyle (Option_t *opt) const override;  ; RooArgSet & getConfigSection (const char *name);  Return section with configuration parameters for integrator with given (class) name. ;  ; const RooArgSet & getConfigSection (const char *name) const;  Retrieve configuration information specific to integrator with given name. ;  ; TClass * IsA () const override;  ; RooCategory & method1D (bool cond, bool cat);  ; const RooCategory & method1D (bool cond, bool cat) const;  ; RooCategory & method2D (bool cond, bool cat);  ; const RooCategory & method2D (bool cond, bool cat) const;  ; RooCategory & methodND (bool cond, bool cat);  ; const RooCategory & methodND (bool cond, bool cat) const;  ; RooNumGenConfig & operator= (const RooNumGenConfig &other);  Assignment operator from other RooNumGenConfig. ;  ; void Print (Option_t *options=nullptr) const override;  This method must be overridden when a class wants to print itself. ;  ; void printMultiline (std::ostream &os, Int_t content, bool verbose, TString indent="""") const override;  Detailed printing interface. ;  ; void Streamer ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNumGenConfig.html:84,Load,Loading,84,doc/master/classRooNumGenConfig.html,https://root.cern,https://root.cern/doc/master/classRooNumGenConfig.html,1,['Load'],['Loading']
Performance,". ROOT: RooNumGenFactory Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Friends |; List of all members ; RooNumGenFactory Class ReferenceRooFit » RooFit Core. ; Factory to instantiate numeric integrators from a given function binding and a given configuration. ; The factory searches for a numeric integrator registered with the factory that has the ability to perform the numeric integration. The choice of method may depend on the number of dimensions integrated, the nature of the integration limits (closed or open ended) and the preference of the caller as encoded in the configuration object. ; Definition at line 30 of file RooNumGenFactory.h. Public Member Functions;  ~RooNumGenFactory () override;  Destructor. ;  ; RooAbsNumGenerator * createSampler (RooAbsReal &func, const RooArgSet &genVars, const RooArgSet &condVars, const RooNumGenConfig &config, bool verbose=false, RooAbsReal *maxFuncVal=nullptr);  Construct a numeric integrator instance that operates on function 'func' and is configured with 'config'. ;  ; const RooAbsNumGenerator * getProtoSampler (const char *name);  Return prototype integrator with given (class) name. ;  ; bool storeProtoSampler (RooAbsNumGenerator *proto, const RooArgSet &defConfig);  Method accepting registration of a prototype numeric integrator along with a RooArgSet of its default configuration options and an optional list of names of other numeric integrators on which this integrator depends. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNumGenFactory.html:85,Load,Loading,85,doc/master/classRooNumGenFactory.html,https://root.cern,https://root.cern/doc/master/classRooNumGenFactory.html,2,"['Load', 'perform']","['Loading', 'perform']"
Performance,". ROOT: RooNumIntConfig Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; RooNumIntConfig Class ReferenceRooFit » RooFit Core. ; Holds the configuration parameters of the various numeric integrators used by RooRealIntegral. ; RooRealIntegral and RooAbsPdf use this class in the (normalization) integral configuration interface ; Definition at line 25 of file RooNumIntConfig.h. Public Member Functions;  RooNumIntConfig ();  Constructor. ;  ;  RooNumIntConfig (const RooNumIntConfig &other);  Copy constructor. ;  ;  ~RooNumIntConfig () override;  Destructor. ;  ; bool addConfigSection (std::string const &name, const RooArgSet &inDefaultConfig, bool canIntegrate1D, bool canIntegrate2D, bool canIntegrateND, bool canIntegrateOpenEnded);  Add a configuration section for a particular integrator. ;  ; StyleOption defaultPrintStyle (Option_t *opt) const override;  ; double epsAbs () const;  ; double epsRel () const;  ; RooArgSet & getConfigSection (const char *name);  Return section with configuration parameters for integrator with given (class) name. ;  ; const RooArgSet & getConfigSection (const char *name) const;  Retrieve configuration information specific to integrator with given name. ;  ; TClass * IsA () const override;  ; RooCategory & method1D ();  ; const RooCategory & method1D () const;  ; RooCategory & method1DOpen ();  ; const RooCategory & method1DOpen () const;  ; RooCategory & method2D ();  ; const RooCategory & method2D () const;  ; RooCategory & method2DOpen ();  ; const RooCategory & method2DOpen () const;  ; RooCategory & methodND ();  ; const RooCategory & methodND () const;  ; RooCategory & methodNDOpen ();  ; const RooCategory & methodNDOpen () const;  ; RooNumIntConfig & operator= (const RooNumIntConfig &other);  Assignment operator from other RooNumIntConfig. ;  ; void Print (Opt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNumIntConfig.html:84,Load,Loading,84,doc/master/classRooNumIntConfig.html,https://root.cern,https://root.cern/doc/master/classRooNumIntConfig.html,1,['Load'],['Loading']
Performance,". ROOT: RooNumIntFactory Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; RooNumIntFactory Class ReferenceRooFit » RooFit Core. ; Factory to instantiate numeric integrators from a given function binding and a given configuration. ; The factory searches for a numeric integrator registered with the factory that has the ability to perform the numeric integration. The choice of method may depend on the number of dimensions integrated, the nature of the integration limits (closed or open ended) and the preference of the caller as encoded in the configuration object. ; Definition at line 33 of file RooNumIntFactory.h. Classes; struct  PluginInfo;  . Public Types; using Creator = std::function< std::unique_ptr< RooAbsIntegrator >(RooAbsFunc const &function, const RooNumIntConfig &config)>;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  RooNumIntFactory (const RooNumIntFactory &other)=delete;  ; std::unique_ptr< RooAbsIntegrator > createIntegrator (RooAbsFunc &func, const RooNumIntConfig &config, int ndim=0, bool isBinned=false) const;  Construct a numeric integrator instance that operates on function 'func' and is configured wi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNumIntFactory.html:85,Load,Loading,85,doc/master/classRooNumIntFactory.html,https://root.cern,https://root.cern/doc/master/classRooNumIntFactory.html,2,"['Load', 'perform']","['Loading', 'perform']"
Performance,". ROOT: RooNumRunningInt Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Friends |; List of all members ; RooNumRunningInt Class ReferenceRooFit » RooFit Core. ; Implementation of RooAbsCachedReal that represents a running integral. . \[ RI(f(x)) = \int_{xlow}^{x} f(x') dx' \]. that is calculated internally with a numeric technique: The input function is first sampled into a histogram, which is then numerically integrated. The output function is an interpolated version of the integrated histogram. The sampling density is controlled by the binning named ""cache"" in the observable x. The shape of the p.d.f is always calculated for the entire domain in x and cached in a histogram. The cache histogram is automatically recalculated when any of the parameters of the input p.d.f. has changed. ; Definition at line 22 of file RooNumRunningInt.h. Classes; class  RICacheElem;  . Public Member Functions;  RooNumRunningInt (const char *name, const char *title, RooAbsReal &_func, RooRealVar &_x, const char *binningName=""cache"");  Construct running integral of function '_func' over x_print from the lower bound on _x to the present value of _x using a numeric sampling technique. ;  ;  RooNumRunningInt (const RooNumRunningInt &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooNumRunningInt () override;  Destructor. ;  ; TObject * clone (const char *newname) const override;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsCachedReal;  RooAbsCachedReal ();  ;  RooAbsCachedReal (const char *name, const char *title, Int_t ipOrder=0);  Constructor. ;  ;  RooAbsCachedReal (const RooAbsCachedReal &other, const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNumRunningInt.html:85,Load,Loading,85,doc/master/classRooNumRunningInt.html,https://root.cern,https://root.cern/doc/master/classRooNumRunningInt.html,4,"['Load', 'cache']","['Loading', 'cache', 'cached']"
Performance,". ROOT: RooObjCacheManager Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Static Protected Attributes |; List of all members ; RooObjCacheManager Class ReferenceRooFit » RooFit Core. ; Implementation of a RooCacheManager<RooAbsCacheElement> that specializes in the storage of cache elements that contain RooAbsArg objects. ; Caches with RooAbsArg derived payload require special care as server redirects cache operation mode changes and constant term optimization calls may need to be forwarded to such cache payload. This cache manager takes care of all these operations by forwarding these calls to the RooAbsCacheElement interface functions, which have a sensible default implementation. ; Definition at line 29 of file RooObjCacheManager.h. Public Member Functions;  RooObjCacheManager (const RooObjCacheManager &other, RooAbsArg *owner=nullptr);  Copy constructor. ;  ;  RooObjCacheManager (RooAbsArg *owner=nullptr, Int_t maxSize=2, bool clearCacheOnServerRedirect=true, bool allowOptimize=false);  Constructor of object cache manager for given owner. ;  ;  ~RooObjCacheManager () override;  Destructor. ;  ; void findConstantNodes (const RooArgSet &, RooArgSet &, RooLinkedList &) override;  If clearOnRedirect is false, forward constant term optimization calls to cache elements. ;  ; void insertObjectHook (RooAbsCacheElement &) override;  Set owner link on all object inserted into cache. ;  ; TClass * IsA () const override;  ; void operModeHook () override;  Intercept changes to cache operation mode and forward to cache elements. ;  ; void optimizeCacheMode (const RooArgSet &, RooArgSet &, RooLinkedList &) override;  Intercept calls to perform automatic optimization of cache mode operation. ;  ; void printCompactTreeHook (std::ostream &, const char *) override;  Add details on cache contents when printing in tree mode. ;  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooObjCacheManager.html:87,Load,Loading,87,doc/master/classRooObjCacheManager.html,https://root.cern,https://root.cern/doc/master/classRooObjCacheManager.html,7,"['Cache', 'Load', 'cache', 'optimiz']","['Caches', 'Loading', 'cache', 'optimization']"
Performance,". ROOT: RooParamBinning Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooParamBinning Class ReferenceRooFit » RooFit Core. ; Implementation of RooAbsBinning that constructs a binning with a range definition that depends on external RooAbsReal objects. ; The external RooAbsReal definitions are explicitly allowed to depend on other observables and parameters, and make it possible to define non-rectangular range definitions in RooFit. Objects of class RooParamBinning are made by the RooRealVar::setRange() that takes RooAbsReal references as arguments ; Definition at line 24 of file RooParamBinning.h. Public Member Functions;  RooParamBinning (const char *name=nullptr);  Default constructor. ;  ;  RooParamBinning (const RooParamBinning &other, const char *name=nullptr);  Copy constructor cout << ""RooParamBinning::cctor("" << this << "") orig = "" << &other << endl ;. ;  ;  RooParamBinning (RooAbsReal &xlo, RooAbsReal &xhi, Int_t nBins, const char *name=nullptr);  Construct binning with 'nBins' bins and with a range parameterized by external RooAbsReals xloIn and xhiIn. ;  ;  ~RooParamBinning () override;  Destructor. ;  ; double * array () const override;  Return array of bin boundaries. ;  ; double averageBinWidth () const override;  ; double binCenter (Int_t bin) const override;  Return the central value of the 'i'-th fit bin. ;  ; double binHigh (Int_t bin) const override;  Return the high edge of the 'i'-th fit bin. ;  ; double binLow (Int_t bin) const override;  Return the low edge of the 'i'-th fit bin. ;  ; void binNumbers (double const *x, int *bins, std::size_t n, int coef) const override;  Return the fit bin index for the current value. ;  ; double binWidth (Int_t bin) const override;  Return average bin width. ;  ; RooAbsBinning * clone (const char *name=",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooParamBinning.html:84,Load,Loading,84,doc/master/classRooParamBinning.html,https://root.cern,https://root.cern/doc/master/classRooParamBinning.html,1,['Load'],['Loading']
Performance,". ROOT: RooParamHistFunc Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Friends |; List of all members ; RooParamHistFunc Class ReferenceRooFit » RooFit. ; A histogram function that assigns scale parameters to every bin. ; Instead of the bare bin contents, it therefore yields: ; \[; \gamma_{i} * \mathrm{bin}_i; \]. The \( \gamma_i \) can therefore be used to parametrise statistical uncertainties of the histogram template. In conjunction with a constraint term, this can be used to implement the Barlow-Beeston method. The constraint can be implemented using RooHistConstraint.; See also the tutorial rf709_BarlowBeeston.C ; Definition at line 24 of file RooParamHistFunc.h. Public Member Functions;  RooParamHistFunc ();  ;  RooParamHistFunc (const char *name, const char *title, RooDataHist &dh, const RooAbsArg &x, const RooParamHistFunc *paramSource=nullptr, bool paramRelative=true);  ;  RooParamHistFunc (const RooParamHistFunc &other, const char *name=nullptr);  ; double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Implement analytical integrations by doing appropriate weighting from component integrals functions to integrators of components. ;  ; std::list< double > * binBoundaries (RooAbsRealLValue &, double, double) const override;  Return sampling hint for making curves of (projections) of this function as the recursive division strategy of RooCurve cannot deal efficiently with the vertical lines that occur in a non-interpolated histogram. ;  ; TObject * clone (const char *newname) const override;  ; bool forceAnalyticalInt (const RooAbsArg &) const override;  ; double getActual (Int_t ibin);  ; Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &analVars, const RooArgSet *normSet, const char *rangeName=nullpt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooParamHistFunc.html:85,Load,Loading,85,doc/master/classRooParamHistFunc.html,https://root.cern,https://root.cern/doc/master/classRooParamHistFunc.html,1,['Load'],['Loading']
Performance,". ROOT: RooParametricStepFunction Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooParametricStepFunction Class ReferenceRooFit » RooFit. ; The Parametric Step Function PDF is a binned distribution whose parameters are the heights of each bin. ; This PDF was first used in BaBar's B0->pi0pi0 paper BABAR Collaboration (B. Aubert et al.) Phys.Rev.Lett.91:241801,2003.; This PDF may be used to describe oddly shaped distributions. It differs from a RooKeysPdf or a RooHistPdf in that a RooParametricStepFunction has free parameters. In particular, any statistical uncertainty in sample used to model this PDF may be understood with these free parameters; this is not possible with non-parametric PDFs.; The RooParametricStepFunction has Nbins-1 free parameters. Note that the limits of the dependent variable must match the low and hi bin limits.; Here is an example showing how to use the RooParametricStepFunction to fit toy data generated from a uniform distribution:; // Define some constant parameters; const int nBins = 10;; const double xMin = 0.0;; const double xMax = 10.0;; const double binWidth = (xMax - xMin) / nBins;; const std::size_t nEvents = 10000;; ; // Fill the bin boundaries; std::vector<double> binBoundaries(nBins + 1);; ; for(int i = 0; i <= nBins; ++i) {; binBoundaries[i] = i * binWidth;; }; ; // The RooParametricStepFunction needs a TArrayD; TArrayD binBoundariesTArr{int(binBoundaries.size()), binBoundaries.data()};; ; RooRealVar x{""x"", ""x"", xMin, xMax};; ; // There are nBins-1 free coefficient parameters, whose sum must be <= 1.0.; // We all set them to 0.1, such that the resulting step function pdf is; // initially uniform.; RooArgList coefList;; for(int i = 0; i < nBins - 1; ++i) {; auto name = std::string(""coef_"") + std::to_string(i);; coefList.addOw",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooParametricStepFunction.html:94,Load,Loading,94,doc/master/classRooParametricStepFunction.html,https://root.cern,https://root.cern/doc/master/classRooParametricStepFunction.html,1,['Load'],['Loading']
Performance,". ROOT: RooPlot Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; List of all members ; RooPlot Class ReferenceRooFit » RooFit Core. ; Plot frame and a container for graphics objects within that frame. ; As a frame, it provides the TH1-style public interface for setting plot ranges, configuring axes, etc. As a container, it holds an arbitrary set of objects that might be histograms of data, curves representing a fit model, or text labels. Use the Draw() method to draw a frame and the objects it contains. Use the various add...() methods to add objects to be drawn. In general, the add...() methods create a private copy of the object you pass them and return a pointer to this copy. The caller owns the input object and this class owns the returned object. All RooAbsReal and RooAbsData derived classes implement plotOn() functions that facilitate to plot themselves on a given RooPlot, e.g. RooPlot *frame = x.frame() ;; data.plotOn(frame) ;; pdf.plotOn(frame) ;; dataOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void dataDefinition TGWin32VirtualXProxy.cxx:104; RooPlotPlot frame and a container for graphics objects within that frame.Definition RooPlot.h:45; RooPlot::framestatic RooPlot * frame(const RooAbsRealLValue &var, double xmin, double xmax, Int_t nBins)Create a new frame for a given variable in x.Definition RooPlot.cxx:225; xDouble_t x[n]Definition legend1.C:17; These high level functions also take care of any projections or other mappings that need to be made to plot a multi-dimensional object onto a one-dimensional plot. ; Definition at line 45 of file RooPlot.h. Classes; class  DrawOpt;  . Public Typ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooPlot.html:76,Load,Loading,76,doc/master/classRooPlot.html,https://root.cern,https://root.cern/doc/master/classRooPlot.html,1,['Load'],['Loading']
Performance,". ROOT: RooPoisson Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooPoisson Class ReferenceRooFit » RooFit. ; Poisson pdf. ; Definition at line 19 of file RooPoisson.h. Public Member Functions;  RooPoisson ();  ;  RooPoisson (const char *name, const char *title, RooAbsReal &_x, RooAbsReal &_mean, bool noRounding=false);  ;  RooPoisson (const char *name, const char *title, RooAbsReal::Ref _x, RooAbsReal::Ref _mean, bool noRounding=false);  Constructor. ;  ;  RooPoisson (const RooPoisson &other, const char *name=nullptr);  Copy constructor. ;  ; double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const override;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; std::string buildCallToAnalyticIntegral (int code, const char *rangeName, RooFit::Detail::CodeSquashContext &ctx) const override;  This function defines the analytical integral translation for the class. ;  ; TObject * clone (const char *newname) const override;  ; void generateEvent (Int_t code) override;  Implement internal generator using TRandom::Poisson. ;  ; Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const override;  Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ;  ; Int_t getGenerator (const RooArgSet &directVars, RooArgSet &generateVars, bool staticInitOK=true) const override;  Advertise internal generator in x. ;  ; RooAbsReal const & getMean () const;  Get the mean parameter. ;  ; bool getNoRounding () const;  ; RooAbsReal const & getX () const;  Get the x variable. ;  ; TClass * IsA () const override;  ; void protectNegativeMean (bool flag=true);  Switch on or off protection against negative means. ;  ; void setNoRounding (bool fl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooPoisson.html:79,Load,Loading,79,doc/master/classRooPoisson.html,https://root.cern,https://root.cern/doc/master/classRooPoisson.html,1,['Load'],['Loading']
Performance,". ROOT: RooPolyFunc Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooPolyFunc Class ReferenceRooFit » RooFit. ; RooPolyFunc implements a polynomial function in multi-variables. ; The polynomial coefficients are implemented as doubles and are not part of the RooFit computation graph. ; Definition at line 28 of file RooPolyFunc.h. Public Member Functions;  RooPolyFunc ();  Default constructor. ;  ;  RooPolyFunc (const char *name, const char *title, const RooAbsCollection &vars);  Parameterised constructor. ;  ;  RooPolyFunc (const char *name, const char *title, RooAbsReal &x, const RooAbsCollection &coefList);  ;  RooPolyFunc (const char *name, const char *title, RooAbsReal &x, RooAbsReal &y, const RooAbsCollection &coefList);  ;  RooPolyFunc (const RooPolyFunc &other, const char *name=nullptr);  Copy constructor. ;  ; void addTerm (double coefficient);  coverity[UNINIT_CTOR] ;  ; void addTerm (double coefficient, const RooAbsCollection &exponents);  ; void addTerm (double coefficient, const RooAbsReal &var1, int exp1);  ; void addTerm (double coefficient, const RooAbsReal &var1, int exp1, const RooAbsReal &var2, int exp2);  ; std::string asString () const;  Return to RooPolyFunc as a string. ;  ; TObject * clone (const char *newname) const override;  ; RooRealVar * getCoefficient (const RooArgList &term);  ; RooRealVar * getExponent (const RooArgList &term, RooRealVar *v);  ; TClass * IsA () const override;  ; RooPolyFunc & operator= (const RooPolyFunc &other)=delete;  ; RooPolyFunc & operator= (RooPolyFunc &&other)=delete;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; const std::vector< std::unique_ptr< RooListProxy > > & terms () const;  ; const RooArgList & va",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooPolyFunc.html:80,Load,Loading,80,doc/master/classRooPolyFunc.html,https://root.cern,https://root.cern/doc/master/classRooPolyFunc.html,1,['Load'],['Loading']
Performance,". ROOT: RooPolyVar Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Static Private Member Functions |; Friends |; List of all members ; RooPolyVar Class ReferenceRooFit » RooFit Core. ; A RooAbsReal implementing a polynomial in terms of a list of RooAbsReal coefficients. . \[f(x) = \sum_{i} a_{i} \cdot x^i \]. Class RooPolyvar implements analytical integrals of all polynomials it can define. ; Definition at line 25 of file RooPolyVar.h. Public Member Functions;  RooPolyVar ();  ;  RooPolyVar (const char *name, const char *title, RooAbsReal &_x, const RooArgList &_coefList, Int_t lowestOrder=0);  Construct polynomial in x with coefficients in coefList. ;  ;  RooPolyVar (const char *name, const char *title, RooAbsReal &x);  Constructor of flat polynomial function. ;  ;  RooPolyVar (const RooPolyVar &other, const char *name=nullptr);  Copy constructor. ;  ; double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const override;  Calculate and return analytical integral over x. ;  ; std::string buildCallToAnalyticIntegral (Int_t code, const char *rangeName, RooFit::Detail::CodeSquashContext &ctx) const override;  This function defines the analytical integral translation for the class. ;  ; TObject * clone (const char *newname) const override;  ; Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const override;  Advertise that we can internally integrate over x. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void translate (RooFit::Detail::CodeSquashContext &ctx) const override;  This function defines a translation for each RooAbsReal based object that can be used to express the class as simp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooPolyVar.html:79,Load,Loading,79,doc/master/classRooPolyVar.html,https://root.cern,https://root.cern/doc/master/classRooPolyVar.html,1,['Load'],['Loading']
Performance,". ROOT: RooPolynomial Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooPolynomial Class ReferenceRooFit » RooFit. ; RooPolynomial implements a polynomial p.d.f of the form. . \[ f(x) = \mathcal{N} \cdot \sum_{i} a_{i} * x^i \]. By default, the coefficient \( a_0 \) is chosen to be 1, as polynomial probability density functions have one degree of freedom less than polynomial functions due to the normalisation condition. \( \mathcal{N} \) is a normalisation constant that is automatically calculated when the polynomial is used in computations.; The sum can be truncated at the low end. See the main constructor RooPolynomial::RooPolynomial(const char*, const char*, RooAbsReal&, const RooArgList&, Int_t) ; Definition at line 25 of file RooPolynomial.h. Public Member Functions;  RooPolynomial ();  ;  RooPolynomial (const char *name, const char *title, RooAbsReal &_x, const RooArgList &_coefList, Int_t lowestOrder=1);  Create a polynomial in the variable x. ;  ;  RooPolynomial (const char *name, const char *title, RooAbsReal &x);  ;  RooPolynomial (const RooPolynomial &other, const char *name=nullptr);  Copy constructor. ;  ; double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const override;  Do the analytical integral according to the code that was returned by getAnalyticalIntegral(). ;  ; std::string buildCallToAnalyticIntegral (Int_t code, const char *rangeName, RooFit::Detail::CodeSquashContext &ctx) const override;  This function defines the analytical integral translation for the class. ;  ; TObject * clone (const char *newname) const override;  ; RooArgList const & coefList () const;  Get the coefficient list. ;  ; Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const override;  Advertise ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooPolynomial.html:82,Load,Loading,82,doc/master/classRooPolynomial.html,https://root.cern,https://root.cern/doc/master/classRooPolynomial.html,1,['Load'],['Loading']
Performance,". ROOT: RooPowerSum Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooPowerSum Class ReferenceRooFit » RooFit. ; RooPowerSum implements a power law PDF of the form. . \[ f(x) = \mathcal{N} \cdot \sum_{i} a_{i} * x^{b_i} \]. Definition at line 20 of file RooPowerSum.h. Public Member Functions;  RooPowerSum ();  ;  RooPowerSum (const char *name, const char *title, RooAbsReal &x, const RooArgList &coefList, const RooArgList &expList);  Create a power law in the variable x. ;  ;  RooPowerSum (const RooPowerSum &other, const char *name=nullptr);  Copy constructor. ;  ; double analyticalIntegral (int code, const char *rangeName=nullptr) const override;  Do the analytical integral according to the code that was returned by getAnalyticalIntegral(). ;  ; RooAbsReal const & base () const;  Get the base of the exponentiated terms (aka. x variable). ;  ; TObject * clone (const char *newname) const override;  ; RooArgList const & coefList () const;  Get the list of coefficients. ;  ; RooArgList const & expList () const;  Get the list of exponents. ;  ; int getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const override;  Advertise to RooFit that this function can be analytically integrated. ;  ; std::string getFormulaExpression (bool expand) const;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsPdf;  RooAbsPdf ();  Default constructor. ;  ;  RooAbsPdf (const char *name, const char *title, double minVal, double maxVal);  Constructor with name, title, and plot range. ;  ;  RooAbsPdf (const char *name, const char *title=nullptr);  Constructor with name an",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooPowerSum.html:80,Load,Loading,80,doc/master/classRooPowerSum.html,https://root.cern,https://root.cern/doc/master/classRooPowerSum.html,1,['Load'],['Loading']
Performance,". ROOT: RooPrintable Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Static Protected Attributes |; List of all members ; RooPrintable Class ReferenceRooFit » RooFit Core. ; A 'mix-in' base class that define the standard RooFit plotting and printing methods. ; Each RooPlotable implementation must define methods that print the objects name, class name, title, value, arguments and extras to a provided stream. The definition of value is class dependent. The definition of arguments is also class dependent, but should always be interpreted as the names (and properties) of any (RooAbsArg) external inputs of a given object. The extras method can be used to print any properties that does not fit in any of the other classes. Each object an also override the definitions made in defaultPrintStyle and defaultPrintContents to determine what is printed (in terms of contents) and how it is printed (inline,single-line or multiline) given a Print() option string. ; Definition at line 25 of file RooPrintable.h. Public Types; enum  ContentsOption { ;   kName =1; , kClassName =2; , kValue =4; , kArgs =8; , ;   kExtras =16; , kAddress =32; , kTitle =64; , kCollectionHeader =128. };  ; enum  StyleOption { ;   kInline =1; , kSingleLine =2; , kStandard =3; , kVerbose =4; , ;   kTreeStructure =5. };  . Public Member Functions;  RooPrintable ();  ; virtual ~RooPrintable ();  ; virtual Int_t defaultPrintContents (Option_t *opt) const;  Default choice of contents to be printed (name and value) ;  ; virtual StyleOption defaultPrintStyle (Option_t *opt) const;  ; virtual TClass * IsA () const;  ; virtual void printAddress (std::ostream &os) const;  Print class name of object. ;  ; virtual void printArgs (std::ostream &os) const;  Interface for printing of object arguments. ;  ; virtual void printClassName (std::ostream &os) const;  Print class name ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooPrintable.html:81,Load,Loading,81,doc/master/classRooPrintable.html,https://root.cern,https://root.cern/doc/master/classRooPrintable.html,1,['Load'],['Loading']
Performance,". ROOT: RooProdGenContext Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooProdGenContext Class ReferenceRooFit » RooFit Core. ; Efficient implementation of the generator context specific for RooProdPdf PDFs. ; The sim-context owns a list of component generator contexts that are used to generate the dependents for each component PDF sequentially. ; Definition at line 30 of file RooProdGenContext.h. Public Member Functions;  RooProdGenContext (const RooProdPdf &model, const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool _verbose=false);  ;  ~RooProdGenContext () override;  Destructor. Delete all owned subgenerator contexts. ;  ; void attach (const RooArgSet &params) override;  Attach generator to given event buffer. ;  ; TClass * IsA () const override;  ; void printMultiline (std::ostream &os, Int_t content, bool verbose=false, TString indent="""") const override;  Detailed printing interface. ;  ; void setProtoDataOrder (Int_t *lut) override;  Set the traversal order of the prototype dataset by the given lookup table. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsGenContext;  RooAbsGenContext (const RooAbsPdf &model, const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool _verbose=false);  Constructor. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default contents when printing. ;  ; StyleOption defaultPrintStyle (Option_t *opt) const override;  Define default print style. ;  ; virtual RooDataSet * generate (double nEvents=0, bool skipInit=false, bool extendedMode=false);  Generate the specified number",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooProdGenContext.html:86,Load,Loading,86,doc/master/classRooProdGenContext.html,https://root.cern,https://root.cern/doc/master/classRooProdGenContext.html,1,['Load'],['Loading']
Performance,". ROOT: RooProdPdf Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; RooProdPdf Class ReferenceRooFit » RooFit Core. ; Efficient implementation of a product of PDFs of the form. . \[ \prod_{i=1}^{N} \mathrm{PDF}_i (x, \ldots) \]. PDFs may share observables. If that is the case any irreducible subset of PDFs that share observables will be normalised with explicit numeric integration as any built-in normalisation will no longer be valid.; Alternatively, products using conditional PDFs can be defined, e.g. \[ F(x|y) \cdot G(y), \]. meaning a PDF \( F(x) \) given \( y \) and a PDF \( G(y) \). In this construction, \( F \) is only normalised w.r.t \( x\), and \( G \) is normalised w.r.t \( y \). The product in this construction is properly normalised.; If exactly one of the component PDFs supports extended likelihood fits, the product will also be usable in extended mode, returning the number of expected events from the extendable component PDF. The extendable component does not have to appear in any specific place in the list. PyROOT; RooProdPdf() constructor takes a RooCmdArg as argument also supports keyword arguments. For example, the following code is equivalent in PyROOT: # Directly passing a RooCmdArg:; model = ROOT.RooProdPdf(; ""model"", ""model"", ROOT.RooArgSet(shapePdf), ROOT.RooFit.Conditional(ROOT.RooArgSet(effPdf), ROOT.RooArgSet(cut)); ); ; # With keyword arguments:; model = ROOT.RooProdPdf(; ""model"", ""model"", ROOT.RooArgSet(shapePdf), Conditional=(ROOT.RooArgSet(effPdf), ROOT.RooArgSet(cut)); ). Definition at line 33 of file RooProdPdf.h. Classes; class  CacheElem;  . Public Member Functions;  RooProdPdf ();  Default constructor. ;  ;  RooProdPdf (const char *name, const char *title, const RooArgList &pdfList, double cutOff=0.0);  Constr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooProdPdf.html:79,Load,Loading,79,doc/master/classRooProdPdf.html,https://root.cern,https://root.cern/doc/master/classRooProdPdf.html,1,['Load'],['Loading']
Performance,". ROOT: RooProduct Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooProduct Class ReferenceRooFit » RooFit Core. ; Represents the product of a given set of RooAbsReal objects. ; Definition at line 29 of file RooProduct.h. Classes; class  CacheElem;  ; class  ProdMap;  . Public Member Functions;  RooProduct ();  Default constructor. ;  ;  RooProduct (const char *name, const char *title, const RooArgList &prodSet);  Construct function representing the product of functions in prodSet. ;  ;  RooProduct (const char *name, const char *title, RooAbsReal &real1, RooAbsReal &real2);  ;  RooProduct (const RooProduct &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooProduct () override;  Destructor. ;  ; void addTerm (RooAbsArg *term);  Add a term to this product. ;  ; double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const override;  Calculate integral internally from appropriate partial integral cache. ;  ; std::list< double > * binBoundaries (RooAbsRealLValue &, double, double) const override;  Forward the plot sampling hint from the p.d.f. that defines the observable obs. ;  ; CacheMode canNodeBeCached () const override;  ; const RooArgList & categoricalComponents () const;  ; TObject * clone (const char *newname) const override;  ; RooArgList components ();  ; bool forceAnalyticalInt (const RooAbsArg &dep) const override;  Force internal handling of integration of given observable if any of the product terms depend on it. ;  ; Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &analVars, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Declare that we handle all integrations internally. ;  ; TClass * IsA () const override;  ; bool isBinnedDistribution (const RooArgSet &obs) const overri",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooProduct.html:79,Load,Loading,79,doc/master/classRooProduct.html,https://root.cern,https://root.cern/doc/master/classRooProduct.html,2,"['Cache', 'Load']","['CacheElem', 'Loading']"
Performance,". ROOT: RooProfileLL Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooProfileLL Class ReferenceRooFit » RooFit Core. ; Implements the profile likelihood estimator for a given likelihood and set of parameters of interest. ; The value return by RooProfileLL is the input likelihood nll minimized w.r.t all nuisance parameters (which are all parameters except for those listed in the constructor) minus the -log(L) of the best fit. Note that this function is slow to evaluate as a MIGRAD minimization step is executed for each function evaluation ; Definition at line 22 of file RooProfileLL.h. Public Member Functions;  RooProfileLL ();  Default constructor Should only be used by proof. ;  ;  RooProfileLL (const char *name, const char *title, RooAbsReal &nll, const RooArgSet &observables);  Constructor of profile likelihood given input likelihood nll w.r.t the given set of variables. ;  ;  RooProfileLL (const RooProfileLL &other, const char *name=nullptr);  Copy constructor. ;  ; bool alwaysStartFromMin () const;  ; const RooArgSet & bestFitObs () const;  ; const RooArgSet & bestFitParams () const;  ; void clearAbsMin ();  ; TObject * clone (const char *newname) const override;  ; RooFit::OwningPtr< RooAbsReal > createProfile (const RooArgSet &paramsOfInterest) override;  Optimized implementation of createProfile for profile likelihoods. ;  ; TClass * IsA () const override;  ; RooMinimizer * minimizer ();  ; RooAbsReal & nll ();  ; Int_t numEval () const;  ; bool redirectServersHook (const RooAbsCollection &, bool, bool, bool) override;  Function that is called at the end of redirectServers(). ;  ; void setAlwaysStartFromMin (bool flag);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVir",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooProfileLL.html:81,Load,Loading,81,doc/master/classRooProfileLL.html,https://root.cern,https://root.cern/doc/master/classRooProfileLL.html,1,['Load'],['Loading']
Performance,". ROOT: RooProjectedPdf Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooProjectedPdf Class ReferenceRooFit » RooFit Core. ; A RooAbsPdf implementation that represent a projection of a given input p.d.f and the object returned by RooAbsPdf::createProjection. ; The actual projection integral for it value and normalization are calculated on the fly in getVal() once the normalization observables are known. Class RooProjectedPdf can cache projected p.d.f.s for multiple normalization observables simultaneously. The createProjection() method of RooProjectedPdf is overloaded and will return a new RooProjectedPdf that performs the projection of itself and the requested additional projections in one integration step The performance of f->createProjection(x)->createProjection(y) is therefore identical to that of f->createProjection(RooArgSet(x,y)); Definition at line 21 of file RooProjectedPdf.h. Classes; class  CacheElem;  . Public Member Functions;  RooProjectedPdf ();  Default constructor. ;  ;  RooProjectedPdf (const char *name, const char *title, RooAbsReal &_intpdf, const RooArgSet &intObs);  Construct projection of input pdf '_intpdf' over observables 'intObs'. ;  ;  RooProjectedPdf (const RooProjectedPdf &other, const char *name=nullptr);  Copy constructor. ;  ; double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Return analytical integral represent by appropriate element of projection cache. ;  ; TObject * clone (const char *newname) const override;  ; std::unique_ptr< RooAbsArg > compileForNormSet (RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const override;  ; RooAbsPdf * createProjection (const RooArgSet &iset) override;  Special version of RooAbsReal::createProjecti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooProjectedPdf.html:84,Load,Loading,84,doc/master/classRooProjectedPdf.html,https://root.cern,https://root.cern/doc/master/classRooProjectedPdf.html,4,"['Load', 'cache', 'perform']","['Loading', 'cache', 'performance', 'performs']"
Performance,". ROOT: RooProofDriverSelector Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; List of all members ; RooProofDriverSelector Class Reference. . Definition at line 16 of file RooProofDriverSelector.h. Public Member Functions;  RooProofDriverSelector (TTree *=nullptr);  ; Int_t GetEntry (Long64_t entry, Int_t getall=0) override;  ; TList * GetOutputList () const override;  ; void Init (TTree *tree) override;  ; TClass * IsA () const override;  ; bool Notify () override;  This method must be overridden to handle object notification (the base implementation is no-op). ;  ; bool Process (Long64_t entry) override;  The Process() function is called for each entry in the tree (or possibly keyed object in the case of PROOF) to be processed. ;  ; void SetInputList (TList *input) override;  ; void SetObject (TObject *obj) override;  ; void SetOption (const char *option) override;  ; void SlaveBegin (TTree *tree) override;  ; void SlaveTerminate () override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Int_t Version () const override;  ;  Public Member Functions inherited from TSelector;  TSelector ();  Default selector ctor. ;  ;  ~TSelector () override;  Selector destructor. ;  ; virtual void Abort (const char *why, EAbort what=kAbortProcess);  Abort processing. ;  ; virtual void Begin (TTree *);  ; virtual EAbort GetAbort () const;  ; virtual TList * GetInputList () const;  ; const char * GetOption () const override;  ; virtual Long64_t GetStatus () const;  ; virtual void ImportOutput (TList *output);  Imports the content of 'output' in the internal output list. ;  ; TClass * IsA () const override;  ; bool Notify () override;  This method must be overridden to handle object notification (the base implementation is no-op). ;  ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooProofDriverSelector.html:91,Load,Loading,91,doc/master/classRooProofDriverSelector.html,https://root.cern,https://root.cern/doc/master/classRooProofDriverSelector.html,1,['Load'],['Loading']
Performance,". ROOT: RooPullVar Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooPullVar Class ReferenceRooFit » RooFit Core. ; Represents the pull of a measurement w.r.t. ; the true value using the measurement and its error. Both the true value and the measured value (with error) are taken from two user-supplied RooRealVars. If the measured parameter has an asymmetric error, the proper side of that error will be used: ; \[; \mathrm{Pull}_x = \frac{x_\mathrm{meas}-x_\mathrm{true}}{\Delta_x}; \]. Definition at line 24 of file RooPullVar.h. Public Member Functions;  RooPullVar ()=default;  ;  RooPullVar (const char *name, const char *title, RooRealVar &measurement, RooAbsReal &truth);  Construct the pull of the RooRealVar 'meas'. ;  ;  RooPullVar (const RooPullVar &other, const char *name=nullptr);  Copy constructor. ;  ; TObject * clone (const char *newname) const override;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; virtual double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; virtual double analyticalIntegralWN (Int_t code, const ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooPullVar.html:79,Load,Loading,79,doc/master/classRooPullVar.html,https://root.cern,https://root.cern/doc/master/classRooPullVar.html,1,['Load'],['Loading']
Performance,". ROOT: RooRandomizeParamMCSModule Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; RooRandomizeParamMCSModule Class ReferenceRooFit » RooFit Core. ; Add-on module to RooMCStudy that allows you to randomize input generation parameters. ; Randomized generation parameters can be sampled from a uniform or Gaussian distribution. For every randomized parameter, an extra variable is added to RooMCStudy::fitParDataSet() named <parname>_gen that indicates the actual value used for generation for each trial. You can also choose to randomize the sum of N parameters, rather than a single parameter. In that case common multiplicative scale factor is applied to each component to bring the sum to the desired target value taken from either uniform or Gaussian sampling. This latter option is for example useful if you want to change the total number of expected events of an extended p.d.f ; Definition at line 24 of file RooRandomizeParamMCSModule.h. Classes; struct  GausParam;  ; struct  GausParamSet;  ; struct  UniParam;  ; struct  UniParamSet;  . Public Member Functions;  RooRandomizeParamMCSModule ();  Constructor. ;  ;  RooRandomizeParamMCSModule (const RooRandomizeParamMCSModule &other);  Copy constructor. ;  ;  ~RooRandomizeParamMCSModule () override;  ; RooDataSet * finalizeRun () override;  Return auxiliary data of this module so that it is merged with RooMCStudy::fitParDataSet() ;  ; bool initializeInstance () override;  Initialize module after attachment to RooMCStudy object. ;  ; bool initializeRun (Int_t) override;  Initialize module at beginning of RooCMStudy run. ;  ; TClass * IsA () const override;  ; bool processBeforeGen (Int_t) override;  Apply all smearings to generator parameters. ;  ; void sampleGaussian (RooRealVar &param, double mean, double sigma);  Request Gaussian smearing ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooRandomizeParamMCSModule.html:95,Load,Loading,95,doc/master/classRooRandomizeParamMCSModule.html,https://root.cern,https://root.cern/doc/master/classRooRandomizeParamMCSModule.html,1,['Load'],['Loading']
Performance,". ROOT: RooRangeBinning Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; RooRangeBinning Class ReferenceRooFit » RooFit Core. ; Binning/range definition that only defines a range but no binning. ; It it used to store named ranges created by the RooRealVar::setRange() method. ; Definition at line 21 of file RooRangeBinning.h. Public Member Functions;  RooRangeBinning (const char *name=nullptr);  Default constructor. ;  ;  RooRangeBinning (const RooRangeBinning &, const char *name=nullptr);  Copy constructor. ;  ;  RooRangeBinning (double xmin, double xmax, const char *name=nullptr);  Construct binning with range [xmin,xmax] with no binning substructure. ;  ; double * array () const override;  ; double averageBinWidth () const override;  ; double binCenter (Int_t) const override;  ; double binHigh (Int_t) const override;  ; double binLow (Int_t) const override;  ; void binNumbers (double const *, int *, std::size_t, int) const override;  Compute the bin indices for multiple values of x. ;  ; double binWidth (Int_t) const override;  ; RooAbsBinning * clone (const char *name=nullptr) const override;  ; double highBound () const override;  ; TClass * IsA () const override;  ; double lowBound () const override;  ; Int_t numBoundaries () const override;  ; void setMax (double xhi) override;  Change upper bound to xhi. ;  ; void setMin (double xlo) override;  Change lower bound to xlo. ;  ; void setRange (double xlo, double xhi) override;  Change limits of the binning to [xlo,xhi]. ;  ; void Streamer (TBuffer &) override;  Custom streamer implementing schema evolution between V1 and V2 persistent binnings. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsBinning;  RooAbsBinning (const char *name=nullptr);  ;  RooAbsBinning (const Roo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooRangeBinning.html:84,Load,Loading,84,doc/master/classRooRangeBinning.html,https://root.cern,https://root.cern/doc/master/classRooRangeBinning.html,1,['Load'],['Loading']
Performance,". ROOT: RooRangeBoolean Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooRangeBoolean Class ReferenceRooFit » RooFit Core. ; Returns 1.0 if variable is within given a range and 0.0 otherwise. ; Definition at line 26 of file RooRangeBoolean.h. Public Member Functions;  RooRangeBoolean ()=default;  ;  RooRangeBoolean (const char *name, const char *title, RooAbsRealLValue &x, const char *rangeName);  ;  RooRangeBoolean (const RooRangeBoolean &other, const char *name=nullptr);  Copy constructor. ;  ; TObject * clone (const char *newname) const override;  ; TClass * IsA () const override;  ; std::list< double > * plotSamplingHint (RooAbsRealLValue &obs, double xlo, double xhi) const override;  Interface for returning an optional hint for initial sampling points when constructing a curve projected on observable obs. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; virtual double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; virtual double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const;  Implements the actual ana",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooRangeBoolean.html:84,Load,Loading,84,doc/master/classRooRangeBoolean.html,https://root.cern,https://root.cern/doc/master/classRooRangeBoolean.html,1,['Load'],['Loading']
Performance,". ROOT: RooRatio Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooRatio Class ReferenceRooFit » RooFit Core. ; Represents the ratio of two RooAbsReal objects. ; Definition at line 21 of file RooRatio.h. Public Member Functions;  RooRatio ();  ;  RooRatio (const char *name, const char *title, const RooArgList &num, const RooArgList &denom);  ;  RooRatio (const char *name, const char *title, double numerator, double denominator);  ;  RooRatio (const char *name, const char *title, double numerator, RooAbsReal &denominator);  ;  RooRatio (const char *name, const char *title, RooAbsReal &numerator, double denominator);  ;  RooRatio (const char *name, const char *title, RooAbsReal &numerator, RooAbsReal &denominator);  ;  RooRatio (const RooRatio &other, const char *name=nullptr);  ;  ~RooRatio () override;  ; TObject * clone (const char *newname) const override;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; virtual double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; virtual double analyticalIntegralWN (Int_t code, const Roo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooRatio.html:77,Load,Loading,77,doc/master/classRooRatio.html,https://root.cern,https://root.cern/doc/master/classRooRatio.html,1,['Load'],['Loading']
Performance,". ROOT: RooRealIntegral Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; List of all members ; RooRealIntegral Class ReferenceRooFit » RooFit Core. ; Performs hybrid numerical/analytical integrals of RooAbsReal objects. ; The class performs none of the actual integration, but only manages the logic of what variables can be integrated analytically, accounts for eventual jacobian terms and defines what numerical integrations needs to be done to complement the analytical integral. The actual analytical integrations (if any) are done in the PDF themselves, the numerical integration is performed in the various implementations of the RooAbsIntegrator base class. ; Definition at line 29 of file RooRealIntegral.h. Public Member Functions;  RooRealIntegral ();  ;  RooRealIntegral (const char *name, const char *title, const RooAbsReal &function, const RooArgSet &depList, const RooArgSet *funcNormSet=nullptr, const RooNumIntConfig *config=nullptr, const char *rangeName=nullptr);  Construct integral of 'function' over observables in 'depList' in range 'rangeName' with normalization observables 'funcNormSet' (for p.d.f.s). ;  ;  RooRealIntegral (const RooRealIntegral &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooRealIntegral () override;  ; const RooArgSet & anaIntVars () const;  ; TObject * clone (const char *newname) const override;  ; std::unique_ptr< RooAbsArg > compileForNormSet (RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const override;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet *nset=nullptr, const RooNumIntConfig *cfg=nullptr, const char *rangeName=nullptr) const override;  Create an object that represents the integral of the fu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooRealIntegral.html:84,Load,Loading,84,doc/master/classRooRealIntegral.html,https://root.cern,https://root.cern/doc/master/classRooRealIntegral.html,4,"['Load', 'Perform', 'perform']","['Loading', 'Performs', 'performed', 'performs']"
Performance,". ROOT: RooRealMPFE Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Types |; Protected Member Functions |; Protected Attributes |; Friends |; List of all members ; RooRealMPFE Class ReferenceRooFit » RooFit Core. ; Multi-processor front-end for parallel calculation of RooAbsReal objects. ; Each RooRealMPFE forks a process that calculates the value of the proxies RooAbsReal object. The (re)calculation of the proxied object is started asynchronously with the calculate() option. A subsequent call to getVal() will return the calculated value when available If the calculation is still in progress when getVal() is called it blocks the calling process until the calculation is done. The forked calculation process is terminated when the front-end object is deleted Simple use demonstration; RooAbsReal* slowFunc ;; ; double val = slowFunc->getVal() // Evaluate slowFunc in current process; ; RooRealMPFE mpfe(""mpfe"",""frontend to slowFunc"",*slowFunc) ;; mpfe.calculate() ; // Start calculation of slow-func in remote process; // .. do other stuff here ..; double val = mpfe.getVal() // Wait for remote calculation to finish and retrieve value; RooAbsRealAbstract base class for objects that represent a real value and implements functionality common to al...Definition RooAbsReal.h:59; RooAbsReal::getValdouble getVal(const RooArgSet *normalisationSet=nullptr) constEvaluate object.Definition RooAbsReal.h:103; RooRealMPFEMulti-processor front-end for parallel calculation of RooAbsReal objects.Definition RooRealMPFE.h:29; For general multiprocessing in ROOT, please refer to the TProcessExecutor class. ; Definition at line 29 of file RooRealMPFE.h. Public Member Functions;  RooRealMPFE (const char *name, const char *title, RooAbsReal &arg, bool calcInline=false);  Construct front-end object for object 'arg' whose evaluation will be calculated asynchronously in a separate process. ;  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooRealMPFE.html:80,Load,Loading,80,doc/master/classRooRealMPFE.html,https://root.cern,https://root.cern/doc/master/classRooRealMPFE.html,1,['Load'],['Loading']
Performance,". ROOT: RooRealSumFunc Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Static Protected Attributes |; List of all members ; RooRealSumFunc Class Reference. . Definition at line 26 of file RooRealSumFunc.h. Public Member Functions;  RooRealSumFunc ();  ;  RooRealSumFunc (const char *name, const char *title);  ;  RooRealSumFunc (const char *name, const char *title, const RooArgList &funcList, const RooArgList &coefList);  ;  RooRealSumFunc (const char *name, const char *title, RooAbsReal &func1, RooAbsReal &func2, RooAbsReal &coef1);  ;  RooRealSumFunc (const RooRealSumFunc &other, const char *name=nullptr);  ;  ~RooRealSumFunc () override;  ; double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; std::list< double > * binBoundaries (RooAbsRealLValue &, double, double) const override;  Retrieve bin boundaries if this distribution is binned in obs. ;  ; CacheMode canNodeBeCached () const override;  ; bool checkObservables (const RooArgSet *nset) const override;  Overloadable function in which derived classes can implement consistency checks of the variables. ;  ; TObject * clone (const char *newname) const override;  ; const RooArgList & coefList () const;  ; std::unique_ptr< RooAbsArg > compileForNormSet (RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const override;  ; double evaluate () const override;  Evaluate this PDF / function / constant. Needs to be overridden by all derived classes. ;  ; bool forceAnalyticalInt (const RooAbsArg &arg) const override;  ; const RooArgList & funcList () const;  ; Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &numVars, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Variant of",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooRealSumFunc.html:83,Load,Loading,83,doc/master/classRooRealSumFunc.html,https://root.cern,https://root.cern/doc/master/classRooRealSumFunc.html,1,['Load'],['Loading']
Performance,". ROOT: RooRealSumFunc Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Static Protected Attributes |; List of all members ; RooRealSumFunc Class Reference. . Definition at line 26 of file RooRealSumFunc.h. Public Member Functions;  RooRealSumFunc ();  ;  RooRealSumFunc (const char *name, const char *title);  ;  RooRealSumFunc (const char *name, const char *title, const RooArgList &funcList, const RooArgList &coefList);  ;  RooRealSumFunc (const char *name, const char *title, RooAbsReal &func1, RooAbsReal &func2, RooAbsReal &coef1);  ;  RooRealSumFunc (const RooRealSumFunc &other, const char *name=nullptr);  ;  ~RooRealSumFunc () override;  ; double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; std::list< double > * binBoundaries (RooAbsRealLValue &, double, double) const override;  Retrieve bin boundaries if this distribution is binned in obs. ;  ; CacheMode canNodeBeCached () const override;  ; bool checkObservables (const RooArgSet *nset) const override;  Overloadable function in which derived classes can implement consistency checks of the variables. ;  ; TObject * clone (const char *newname) const override;  ; const RooArgList & coefList () const;  ; std::unique_ptr< RooAbsArg > compileForNormSet (RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const override;  ; double evaluate () const override;  Evaluate this PDF / function / constant. Needs to be overridden by all derived classes. ;  ; bool forceAnalyticalInt (const RooAbsArg &arg) const override;  ; const RooArgList & funcList () const;  ; Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &numVars, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Variant of ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooRealSumFunc.html:82,Load,Loading,82,doc/v632/classRooRealSumFunc.html,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html,1,['Load'],['Loading']
Performance,". ROOT: RooRealSumPdf Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; Static Private Member Functions |; Friends |; List of all members ; RooRealSumPdf Class ReferenceRooFit » RooFit Core. ; Implements a PDF constructed from a sum of functions: . \[; \mathrm{PDF}(x) = \frac{ \sum_{i=1}^{n-1} \mathrm{coef}_i * \mathrm{func}_i(x) + \left[ 1 - \sum_{i=1}^{n-1} \mathrm{coef}_i \right] * \mathrm{func}_n(x) }; {\sum_{i=1}^{n-1} \mathrm{coef}_i * \int \mathrm{func}_i(x)dx + \left[ 1 - \sum_{i=1}^{n-1} \mathrm{coef}_i \right] * \int \mathrm{func}_n(x) dx }; \]. where \(\mathrm{coef}_i\) and \(\mathrm{func}_i\) are RooAbsReal objects, and \( x \) is the collection of dependents. In the present version \(\mathrm{coef}_i\) may not depend on \( x \), but this limitation could be removed should the need arise.; If the number of coefficients is one less than the number of functions, the PDF is assumed to be normalised. Due to this additional constraint, \(\mathrm{coef}_n\) is computed from the other coefficients. Extending the PDF; If an \( n^\mathrm{th} \) coefficient is provided, the PDF can be used as an extended PDF, i.e. the total number of events will be measured in addition to the fractions of the various functions. This requires setting the last argument of the constructor to true. NoteFor the RooAddPdf, the extension happens automatically. Difference to RooAddPdf / RooRealSumFunc. RooAddPdf is a PDF of PDFs, i.e. its components need to be normalised and non-negative.; RooRealSumPdf is a PDF of functions, i.e., its components can be negative, but their sum cannot be. The normalisation is computed automatically, unless the PDF is extended (see above).; RooRealSumFunc is a sum of functions. It is neither normalised, nor need it be positive. . Definiti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooRealSumPdf.html:82,Load,Loading,82,doc/master/classRooRealSumPdf.html,https://root.cern,https://root.cern/doc/master/classRooRealSumPdf.html,1,['Load'],['Loading']
Performance,". ROOT: RooRealSumPdf Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; Static Private Member Functions |; Friends |; List of all members ; RooRealSumPdf Class ReferenceRooFit » RooFit Core. ; Implements a PDF constructed from a sum of functions: . \[; \mathrm{PDF}(x) = \frac{ \sum_{i=1}^{n-1} \mathrm{coef}_i * \mathrm{func}_i(x) + \left[ 1 - \sum_{i=1}^{n-1} \mathrm{coef}_i \right] * \mathrm{func}_n(x) }; {\sum_{i=1}^{n-1} \mathrm{coef}_i * \int \mathrm{func}_i(x)dx + \left[ 1 - \sum_{i=1}^{n-1} \mathrm{coef}_i \right] * \int \mathrm{func}_n(x) dx }; \]. where \(\mathrm{coef}_i\) and \(\mathrm{func}_i\) are RooAbsReal objects, and \( x \) is the collection of dependents. In the present version \(\mathrm{coef}_i\) may not depend on \( x \), but this limitation could be removed should the need arise.; If the number of coefficients is one less than the number of functions, the PDF is assumed to be normalised. Due to this additional constraint, \(\mathrm{coef}_n\) is computed from the other coefficients. Extending the PDF; If an \( n^\mathrm{th} \) coefficient is provided, the PDF can be used as an extended PDF, i.e. the total number of events will be measured in addition to the fractions of the various functions. This requires setting the last argument of the constructor to true. NoteFor the RooAddPdf, the extension happens automatically. Difference to RooAddPdf / RooRealSumFunc. RooAddPdf is a PDF of PDFs, i.e. its components need to be normalised and non-negative.; RooRealSumPdf is a PDF of functions, i.e., its components can be negative, but their sum cannot be. The normalisation is computed automatically, unless the PDF is extended (see above).; RooRealSumFunc is a sum of functions. It is neither normalised, nor need it be positive. . Definitio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooRealSumPdf.html:81,Load,Loading,81,doc/v632/classRooRealSumPdf.html,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html,1,['Load'],['Loading']
Performance,". ROOT: RooRealVar Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; List of all members ; RooRealVar Class ReferenceRooFit » RooFit Core. ; Variable that can be changed from the outside. ; For example by the user or a fitter.; It can be written into datasets, can hold a (possibly asymmetric) error, and can have several ranges. These can be accessed with names, to e.g. limit fits or integrals to sub ranges. The range without any name is used as default range. ; Definition at line 37 of file RooRealVar.h. Public Member Functions;  RooRealVar ();  Default constructor. ;  ;  RooRealVar (const char *name, const char *title, double minValue, double maxValue, const char *unit="""");  Create a variable allowed to float in the given range. ;  ;  RooRealVar (const char *name, const char *title, double value, const char *unit="""");  Create a constant variable with a value and optional unit. ;  ;  RooRealVar (const char *name, const char *title, double value, double minValue, double maxValue, const char *unit="""");  Create a variable with the given starting value. ;  ;  RooRealVar (const RooRealVar &other, const char *name=nullptr);  Copy Constructor. ;  ;  ~RooRealVar () override;  Destructor. ;  ; TObject * clone (const char *newname) const override;  ; void copyCacheFast (const RooRealVar &other, bool setValDirty=true);  ; Int_t defaultPrintContents (Option_t *opt) const override;  Mapping of Print() option string to RooPrintable contents specifications. ;  ; void deleteSharedProperties ();  Stop sharing properties. ;  ; RooErrorVar * errorVar () const;  Return a RooAbsRealLValue representing the error associated with this variable. ;  ; TString * format (const RooCmdArg &formatArg) const;  Format contents of R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooRealVar.html:79,Load,Loading,79,doc/master/classRooRealVar.html,https://root.cern,https://root.cern/doc/master/classRooRealVar.html,1,['Load'],['Loading']
Performance,. ROOT: RooRealVarSharedProperties Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Friends |; List of all members ; RooRealVarSharedProperties Class ReferenceRooFit » RooFit Core. ; Implementation of RooSharedProperties that stores the properties of a RooRealVar that are shared among clones. ; For RooRealVars these are the definitions of the named ranges. ; Definition at line 39 of file RooRealVarSharedProperties.h. Public Member Functions;  RooRealVarSharedProperties ();  Default constructor. ;  ;  RooRealVarSharedProperties (const char *uuidstr);  Constructor with unique-id string. ;  ;  ~RooRealVarSharedProperties () override;  Destructor. ;  ; void disownBinnings ();  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooSharedProperties;  RooSharedProperties ();  Default constructor. ;  ;  RooSharedProperties (const char *uuidstr);  Constructor with unique-id string. ;  ;  RooSharedProperties (const RooSharedProperties &)=delete;  ;  RooSharedProperties (RooSharedProperties &&)=delete;  ;  ~RooSharedProperties () override;  Destructor. ;  ; void decreaseRefCount ();  ; void increaseRefCount ();  ; bool inSharedList () const;  ; TClass * IsA () const override;  ; RooSharedProperties & operator= (const RooSharedProperties &)=delete;  ; RooSharedProperties & operator= (RooSharedProperties &&)=delete;  ; bool operator== (const RooSharedProperties &other) const;  Return true of unique id of this property is equal to that of other. ;  ; void Print (Option_t *opts=nullptr) const override;  Printing interface. ;  ; Int_t refCount () const;  ; void setInSharedList ();  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooRealVarSharedProperties.html:95,Load,Loading,95,doc/master/classRooRealVarSharedProperties.html,https://root.cern,https://root.cern/doc/master/classRooRealVarSharedProperties.html,1,['Load'],['Loading']
Performance,". ROOT: RooRecursiveFraction Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooRecursiveFraction Class ReferenceRooFit » RooFit Core. ; A RooAbsReal implementation that calculates the plain fraction of sum of RooAddPdf components from a set of recursive fractions: for a given set of input fractions \( {a_i} \), it returns \( a_n * \prod_{i=0}^{n-1} (1 - a_i) \). ; Definition at line 25 of file RooRecursiveFraction.h. Public Member Functions;  RooRecursiveFraction ()=default;  ;  RooRecursiveFraction (const char *name, const char *title, const RooArgList &fracSet);  Constructor of plain RooAddPdf fraction from list of recursive fractions. ;  ;  RooRecursiveFraction (const RooRecursiveFraction &other, const char *name=nullptr);  Copy constructor. ;  ; TObject * clone (const char *newname) const override;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void translate (RooFit::Detail::CodeSquashContext &ctx) const override;  This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ;  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; virtual double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooRecursiveFraction.html:89,Load,Loading,89,doc/master/classRooRecursiveFraction.html,https://root.cern,https://root.cern/doc/master/classRooRecursiveFraction.html,1,['Load'],['Loading']
Performance,". ROOT: RooRefArray Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; RooRefArray Class Reference. . Definition at line 64 of file RooAbsArg.h. Public Member Functions;  RooRefArray ()=default;  ;  RooRefArray (const RooRefArray &other);  ; TClass * IsA () const override;  ; RooRefArray & operator= (const RooRefArray &other)=default;  ; void Streamer (TBuffer &) override;  Stream an object of class RooRefArray. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObjArray;  TObjArray (const TObjArray &a);  Create a copy of TObjArray a. Note, does not copy the kIsOwner flag. ;  ;  TObjArray (Int_t s=TCollection::kInitCapacity, Int_t lowerBound=0);  Create an object array. ;  ; virtual ~TObjArray ();  Delete an array. ;  ; void Add (TObject *obj) override;  ; void AddAfter (const TObject *after, TObject *obj) override;  Add object in the slot after object after. ;  ; void AddAt (TObject *obj, Int_t idx) override;  Add object at position ids. ;  ; virtual void AddAtAndExpand (TObject *obj, Int_t idx);  Add object at position idx. ;  ; virtual Int_t AddAtFree (TObject *obj);  Return the position of the new object. ;  ; void AddBefore (const TObject *before, TObject *obj) override;  Add object in the slot before object before. ;  ; void AddFirst (TObject *obj) override;  Add object in the first slot of the array. ;  ; void AddLast (TObject *obj) override;  Add object in the next empty slot in the array. ;  ; TObject * After (const TObject *obj) const override;  Return the object after obj. Returns 0 if obj is last object. ;  ; TObject * At (Int_t idx) const override;  ; TObject * Before (const TObject *obj) const override;  Return the object before obj. Returns 0 if obj is first object. ;  ; virtual Int_t BinarySearch (TObject *obj, Int_t upto=kMaxInt);  Find obje",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooRefArray.html:80,Load,Loading,80,doc/master/classRooRefArray.html,https://root.cern,https://root.cern/doc/master/classRooRefArray.html,1,['Load'],['Loading']
Performance,". ROOT: RooResolutionModel Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Friends |; List of all members ; RooResolutionModel Class Referenceabstract. ; RooResolutionModel is the base class for PDFs that represent a resolution model that can be convoluted with a physics model of the form. . \[; \mathrm{Phys}(x,a,b) = \sum_k \mathrm{coef}_k(a) * \mathrm{basis}_k(x,b); \]. where basis_k are a limited number of functions in terms of the variable to be convoluted and coef_k are coefficients independent of the convolution variable.; Classes derived from RooResolutionModel implement ; \[; R_k(x,\bar{b},\bar{c}) = \int \mathrm{basis}_k(x',\bar{b}) * \mathrm{resModel}(x-x',\bar{c}) \; \mathrm{d} x',; \]. which RooAbsAnaConvPdf uses to construct the pdf for [ Phys (x) R ] : ; \[; \mathrm{PDF}(x,\bar a, \bar b, \bar c) = \sum_k \mathrm{coef}_k(\bar a) * R_k(x, \bar b, \bar c); \]. A minimal implementation of a RooResolutionModel consists of a Int_t basisCode(const char* name); namechar name[80]Definition TGX11.cxx:110; RooResolutionModel::basisCodevirtual Int_t basisCode(const char *name) const =0; int; function indicating which basis functions this resolution model supports, and double evaluate(),; RooAbsReal::evaluatevirtual double evaluate() const =0Evaluate this PDF / function / constant. Needs to be overridden by all derived classes.; which should implement the resolution model (optionally convoluted with one of the supported basis functions). RooResolutionModel objects can be used as regular PDFs (They inherit from RooAbsPdf), or as resolution model convoluted with a basis function. The implementation of evaluate() can identify the requested mode using basisCode(). If zero, the regular PDF value should be calculated. If non-zero, the model's value convoluted with the basis function ide",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooResolutionModel.html:87,Load,Loading,87,doc/master/classRooResolutionModel.html,https://root.cern,https://root.cern/doc/master/classRooResolutionModel.html,1,['Load'],['Loading']
Performance,. ROOT: RooSTLRefCountList< T > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. RooSTLRefCountList< T > Class Template Reference. ; template<class T>; class RooSTLRefCountList< T >; Definition at line 33 of file RooLinkedList.h.; The documentation for this class was generated from the following file:; roofit/roofitcore/inc/RooLinkedList.h. RooSTLRefCountList. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:09 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooSTLRefCountList.html:101,Load,Loading,101,doc/master/classRooSTLRefCountList.html,https://root.cern,https://root.cern/doc/master/classRooSTLRefCountList.html,1,['Load'],['Loading']
Performance,". ROOT: RooSecondMoment Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooSecondMoment Class ReferenceRooFit » RooFit Core. . Definition at line 27 of file RooSecondMoment.h. Public Member Functions;  RooSecondMoment ()=default;  ;  RooSecondMoment (const char *name, const char *title, RooAbsReal &func, RooRealVar &x, bool central=false, bool takeRoot=false);  ;  RooSecondMoment (const char *name, const char *title, RooAbsReal &func, RooRealVar &x, const RooArgSet &nset, bool central=false, bool takeRoot=false, bool intNSet=false);  ;  RooSecondMoment (const RooSecondMoment &other, const char *name=nullptr);  ; TObject * clone (const char *newname) const override;  ; const RooAbsReal & iF ();  ; TClass * IsA () const override;  ; const RooAbsReal & ixF ();  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; const RooAbsReal & xF ();  ;  Public Member Functions inherited from RooAbsMoment;  RooAbsMoment ()=default;  ;  RooAbsMoment (const char *name, const char *title, RooAbsReal &func, RooRealVar &x, Int_t order=1, bool takeRoot=false);  ;  RooAbsMoment (const RooAbsMoment &other, const char *name=nullptr);  ; bool central () const;  ; RooAbsReal * mean ();  ; Int_t order () const;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *nam",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooSecondMoment.html:84,Load,Loading,84,doc/master/classRooSecondMoment.html,https://root.cern,https://root.cern/doc/master/classRooSecondMoment.html,1,['Load'],['Loading']
Performance,". ROOT: RooSharedProperties Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; RooSharedProperties Class ReferenceRooFit » RooFit Core. ; Class RooSharedProperties is the base class for shared properties that can be stored in RooSharedPropertiesList. ; Definition at line 22 of file RooSharedProperties.h. Classes; class  UUID;  . Public Member Functions;  RooSharedProperties ();  Default constructor. ;  ;  RooSharedProperties (const char *uuidstr);  Constructor with unique-id string. ;  ;  RooSharedProperties (const RooSharedProperties &)=delete;  ;  RooSharedProperties (RooSharedProperties &&)=delete;  ;  ~RooSharedProperties () override;  Destructor. ;  ; void decreaseRefCount ();  ; void increaseRefCount ();  ; bool inSharedList () const;  ; TClass * IsA () const override;  ; RooSharedProperties & operator= (const RooSharedProperties &)=delete;  ; RooSharedProperties & operator= (RooSharedProperties &&)=delete;  ; bool operator== (const RooSharedProperties &other) const;  Return true of unique id of this property is equal to that of other. ;  ; void Print (Option_t *opts=nullptr) const override;  Printing interface. ;  ; Int_t refCount () const;  ; void setInSharedList ();  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; UUID uuid () const;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Br",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooSharedProperties.html:88,Load,Loading,88,doc/master/classRooSharedProperties.html,https://root.cern,https://root.cern/doc/master/classRooSharedProperties.html,1,['Load'],['Loading']
Performance,". ROOT: RooSimGenContext Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooSimGenContext Class ReferenceRooFit » RooFit Core. ; Efficient implementation of the generator context specific for RooSimultaneous PDFs when generating more than one of the component pdfs. ; It runs in two modes:; Proto data with category entries are given: An event from the same category as in the proto data is created.; No proto data: A category is chosen randomly. NoteThis requires that the PDFs are extended, to determine the relative probabilities that an event originates from a certain category. . Definition at line 27 of file RooSimGenContext.h. Public Member Functions;  RooSimGenContext (const RooSimultaneous &model, const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool _verbose=false);  Constructor of specialized generator context for RooSimultaneous p.d.f.s. ;  ;  ~RooSimGenContext () override;  ; void attach (const RooArgSet &params) override;  Attach the index category clone to the given event buffer. ;  ; TClass * IsA () const override;  ; void printMultiline (std::ostream &os, Int_t content, bool verbose=false, TString indent="""") const override;  Detailed printing interface. ;  ; void setProtoDataOrder (Int_t *lut) override;  Set the traversal order of the prototype data to that in the given lookup table. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsGenContext;  RooAbsGenContext (const RooAbsPdf &model, const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool _verbose=false);  Constructor. ;  ; Int_t defaultPrintContents (Option_t *opt) con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooSimGenContext.html:85,Load,Loading,85,doc/master/classRooSimGenContext.html,https://root.cern,https://root.cern/doc/master/classRooSimGenContext.html,1,['Load'],['Loading']
Performance,". ROOT: RooSimSplitGenContext Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooSimSplitGenContext Class ReferenceRooFit » RooFit Core. ; Efficient implementation of the generator context specific for RooSimultaneous PDFs when generating more than one of the component pdfs. ; Definition at line 27 of file RooSimSplitGenContext.h. Public Member Functions;  RooSimSplitGenContext (const RooSimultaneous &model, const RooArgSet &vars, bool _verbose=false, bool autoBinned=true, const char *binnedTag="""");  Constructor of specialized generator context for RooSimultaneous p.d.f.s. ;  ;  ~RooSimSplitGenContext () override;  Destructor. Delete all owned subgenerator contexts. ;  ; void attach (const RooArgSet &params) override;  Attach the index category clone to the given event buffer. ;  ; RooDataSet * generate (double nEvents=0, bool skipInit=false, bool extendedMode=false) override;  Generate the specified number of events with nEvents>0 and and return a dataset containing the generated events. ;  ; TClass * IsA () const override;  ; void printMultiline (std::ostream &os, Int_t content, bool verbose=false, TString indent="""") const override;  Detailed printing interface. ;  ; void setExpectedData (bool) override;  Forward to components. ;  ; void setProtoDataOrder (Int_t *lut) override;  this method is empty because proto datasets are not supported by this context ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsGenContext;  RooAbsGenContext (const RooAbsPdf &model, const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool _verbose=false);  Constructor. ;  ; Int_t defaultPrintContents ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooSimSplitGenContext.html:90,Load,Loading,90,doc/master/classRooSimSplitGenContext.html,https://root.cern,https://root.cern/doc/master/classRooSimSplitGenContext.html,1,['Load'],['Loading']
Performance,". ROOT: RooSimWSTool Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooSimWSTool Class Reference. ; The RooSimWSTool is a tool operating on RooWorkspace objects that can clone PDFs into a series of variations that are joined together into a RooSimultaneous PDF. . Splitting a single PDF; The simplest use case is to take a workspace PDF as prototype and ""split"" a parameter of that PDF into two specialized parameters depending on a category in the dataset.; For example, given a Gaussian PDF \( G(x \,|\, m,s) \) we want to construct a \( G_a(x \,|\, m_a,s) \) and a \( G_b(x \,|\, m_b,s) \) with different mean parameters to be fit to a dataset with observables \( (x,c) \) where \( c \) is a category with states 'a' and 'b'.; Using RooSimWSTool, one can create a simultaneous PDF from \( G_a \) and \( G_b \) from \( G \) with the following commands: RooSimWSTool wst(wspace);; wst.build(""G_sim"", ""G"", SplitParam(""m"",""c""));; RooSimWSToolThe RooSimWSTool is a tool operating on RooWorkspace objects that can clone PDFs into a series of var...Definition RooSimWSTool.h:38; Splitting using a product category; From this simple example one can go to builds of arbitrary complexity by specifying multiple SplitParam arguments on multiple parameters involving multiple splitting categories. Splits can also be performed in the product of multiple categories, i.e., wst.build(""G_sim"", ""G"", SplitParam(""m"",""c,d""));; splits the parameter \( m \) in the product of the states of \( c \) and \( d \).; Constrained split; Another possibility is the ""constrained"" split, which clones the parameter for all but one state and inserts a formula specialization in a chosen state that evaluates to \( 1 - \sum_i(a_i) \) where \( a_i \) are all other specializations. For example, given a category \( c \) with the states ""A"",""B",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooSimWSTool.html:81,Load,Loading,81,doc/master/classRooSimWSTool.html,https://root.cern,https://root.cern/doc/master/classRooSimWSTool.html,1,['Load'],['Loading']
Performance,". ROOT: RooSimWSTool::SplitRule Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Protected Attributes |; Friends |; List of all members ; RooSimWSTool::SplitRule Class Reference. . Definition at line 75 of file RooSimWSTool.h. Public Member Functions;  SplitRule (const char *pdfName="""");  ; void splitParameter (const char *paramList, const char *categoryList);  Specify that parameters names listed in paramNameList be split in (product of) category(s) listed in categoryNameList. ;  ; void splitParameterConstrained (const char *paramNameList, const char *categoryNameList, const char *remainderStateName);  Specify that parameters names listed in paramNameList be split in constrained way in (product of) category(s) listed in categoryNameList and that remainder fraction formula be put in state with name remainderStateName. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooSimWSTool_1_1SplitRule.html:92,Load,Loading,92,doc/master/classRooSimWSTool_1_1SplitRule.html,https://root.cern,https://root.cern/doc/master/classRooSimWSTool_1_1SplitRule.html,1,['Load'],['Loading']
Performance,". ROOT: RooSimultaneous Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Static Private Member Functions |; Private Attributes |; Friends |; List of all members ; RooSimultaneous Class ReferenceRooFit » RooFit Core. ; Facilitates simultaneous fitting of multiple PDFs to subsets of a given dataset. ; The class takes an index category, which is used as a selector for PDFs, and a list of PDFs, each associated with a state of the index category. RooSimultaneous always returns the value of the PDF that is associated with the current value of the index category.; Extended likelihood fitting is supported if all components support extended likelihood mode. The expected number of events by a RooSimultaneous is that of the component p.d.f. selected by the index category.; The index category can be accessed using indexCategory(). Generating events; When generating events from a RooSimultaneous, the index category has to be added to the dataset. Further, the PDF needs to know the relative probabilities of each category, i.e., how many events are in which category. This can be achieved in two ways:; Generating with proto data that have category entries: An event from the same category as in the proto data is created for each event in the proto data. See RooAbsPdf::generate(const RooArgSet&,const RooDataSet&,Int_t,bool,bool,bool) const.; No proto data: A category is chosen randomly. NoteThis requires that the PDFs building the simultaneous are extended. In this way, the relative probability of each category can be calculated from the number of events in each category. PyROOT; Some member functions of RooSimultaneous that take a RooCmdArg as argument also support keyword arguments. So far, this applies to RooSimultaneous::plotOn. For example, the following cod",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooSimultaneous.html:84,Load,Loading,84,doc/master/classRooSimultaneous.html,https://root.cern,https://root.cern/doc/master/classRooSimultaneous.html,1,['Load'],['Loading']
Performance,". ROOT: RooSpHarmonic Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; RooSpHarmonic Class ReferenceRooFit » RooFit. ; Implementation of the so-called real spherical harmonics, using the orthonormal normalization, which are related to spherical harmonics as: . \[; Y_{l0} = Y_l^0 (m=0) \\; Y_{lm} = \frac{1}{\sqrt{2}} \left( Y_l^m + (-1)^m Y_l^{-m} \right) (m>0) \\; Y_{lm} = \frac{1}{i\sqrt{2}} \left( Y_l^{|m|} - (-1)^{|m|} Y_l^{-|m|} \right) (m<0); \]. which implies: ; \[; Y_{l0}(\cos\theta,\phi) = N_{l0} P_l^0 (\cos\theta) (m=0); Y_{lm}(\cos\theta,\phi) = \sqrt{2} N_{lm} P_l^m (\cos\theta) cos(|m|\phi) (m>0); Y_{lm}(\cos\theta,\phi) = \sqrt{2} N_{l|m|} P_l^{|m|}(\cos\theta) sin(|m|\phi) (m<0); \]. where ; \[; N_{lm} = \sqrt{ \frac{2l+1}{4\pi} \frac{ (l-m)! }{ (l+m)! } }; \]. Note that the normalization corresponds to the orthonormal case, and thus we have \( \int d\cos\theta d\phi Y_{lm} Y_{l'm'} = \delta_{ll'} \delta{mm'}\); Note that in addition, this code can also represent the product of two (real) spherical harmonics – it actually uses the fact that \(Y_{00} = \sqrt{\frac{1}{4\pi}}\) in order to represent a single spherical harmonics by multiplying it by \(\sqrt{4\pi} Y_00\), as this makes it trivial to compute the analytical integrals, using the orthogonality properties of \(Y_l^m\)... ; Definition at line 20 of file RooSpHarmonic.h. Public Member Functions;  RooSpHarmonic ();  ;  RooSpHarmonic (const char *name, const char *title, RooAbsReal &ctheta, RooAbsReal &phi, int l, int m);  ;  RooSpHarmonic (const char *name, const char *title, RooAbsReal &ctheta, RooAbsReal &phi, int l1, int m1, int l2, int m2);  ;  RooSpHarmonic (const RooSpHarmonic &other, const char *name=nullptr);  ; double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const ove",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooSpHarmonic.html:82,Load,Loading,82,doc/master/classRooSpHarmonic.html,https://root.cern,https://root.cern/doc/master/classRooSpHarmonic.html,1,['Load'],['Loading']
Performance,". ROOT: RooSpline Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; RooSpline Class ReferenceRooFit » RooFit. ; A RooFit class for creating spline functions. ; This class provides the functionality to create spline functions in RooFit, , using ROOT TSpline. It supports splines of order 3 or 5. It also support interpolation in the log-space (x or y), for example exp(spline({x0}, {log y0})), useful when you have something (as xsections) that is more similar to exponentials than polynomials.; Usage example: RooRealVar x{""x"", ""x"", 0, 5};; ; std::vector<double> x0{1., 2, 3};; std::vector<double> y0{10., 20, 50};; ; RooSpline spline{""myspline"", ""my spline"", x, x0, y0};; ; auto frame = x.frame();; spline.plotOn(frame);; frame->Draw();; RooAbsReal::plotOnvirtual RooPlot * plotOn(RooPlot *frame, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}, const RooCmdArg &arg9={}, const RooCmdArg &arg10={}) constPlot (project) PDF on specified frame.Definition RooAbsReal.cxx:1611; RooPlot::Drawvoid Draw(Option_t *options=nullptr) overrideDraw this plot and all of the elements it contains.Definition RooPlot.cxx:637; RooRealVarVariable that can be changed from the outside.Definition RooRealVar.h:37; RooSplineA RooFit class for creating spline functions.Definition RooSpline.h:27; xDouble_t x[n]Definition legend1.C:17. Definition at line 27 of file RooSpline.h. Public Member Functions;  RooSpline ()=default;  ;  RooSpline (const char *name, const char *title, RooAbsReal &x, const TGraph &gr, int order=3, bool logx=false, bool logy=false);  Constructor for creating a spline from a TGraph. ;  ;  RooSpline (const char *name, const char ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooSpline.html:78,Load,Loading,78,doc/master/classRooSpline.html,https://root.cern,https://root.cern/doc/master/classRooSpline.html,1,['Load'],['Loading']
Performance,". ROOT: RooStats Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces |; Classes |; Enumerations |; Functions |; Variables ; RooStats Namespace ReferenceRooFit » RooStats » HistFactory | RooFit » RooStats. Namespace for the RooStats classes. ; More... Namespaces; namespace  HistFactory;  ; namespace  NumberCountingUtils;  ; namespace  ROOTDict;  . Classes; class  AcceptanceRegion;  ; class  AsymptoticCalculator;  Hypothesis Test Calculator based on the asymptotic formulae for the profile likelihood ratio. More...;  ; class  BayesianCalculator;  BayesianCalculator is a concrete implementation of IntervalCalculator, providing the computation of a credible interval using a Bayesian method. More...;  ; class  BernsteinCorrection;  BernsteinCorrection is a utility in RooStats to augment a nominal PDF with a polynomial correction term. More...;  ; class  BranchStore;  ; class  CombinedCalculator;  CombinedCalculator is an interface class for a tools which can produce both RooStats HypoTestResults and ConfIntervals. More...;  ; class  ConfidenceBelt;  ConfidenceBelt is a concrete implementation of the ConfInterval interface. More...;  ; class  ConfInterval;  ConfInterval is an interface class for a generic interval in the RooStats framework. More...;  ; class  DebuggingSampler;  ; class  DebuggingTestStat;  ; class  DetailedOutputAggregator;  This class is designed to aid in the construction of RooDataSets and RooArgSets, particularly those naturally arising in fitting operations. More...;  ; class  FeldmanCousins;  The FeldmanCousins class (like the Feldman-Cousins technique) is essentially a specific configuration of the more general NeymanConstruction. More...;  ; class  FrequentistCalculator;  Does a frequentist hypothesis test. More...;  ; class  Heaviside;  Represents the Heaviside function. More...;  ; class  HLFactory;  HLFactory is an High Level model Factory allows you to describe your models in a configu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceRooStats.html:81,Load,Loading,81,doc/master/namespaceRooStats.html,https://root.cern,https://root.cern/doc/master/namespaceRooStats.html,1,['Load'],['Loading']
Performance,. ROOT: RooStats Tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; RooStats TutorialsTutorials. ; These tutorials illustrate the main features of RooStats. . Files; file  FourBinInstructional.C;   This example is a generalization of the on/off problem. ;  ; file  FourBinInstructional.py;   This example is a generalization of the on/off problem. ;  ; file  HybridInstructional.C;   Example demonstrating usage of HybridCalcultor ;  ; file  HybridStandardForm.C;   A hypothesis testing example based on number counting with background uncertainty. ;  ; file  IntervalExamples.C;   Example showing confidence intervals with four techniques. ;  ; file  IntervalExamples.py;   Example showing confidence intervals with four techniques. ;  ; file  ModelInspector.C;  RooStats Model Inspector. ;  ; file  MultivariateGaussianTest.C;   Comparison of MCMC and PLC in a multi-variate gaussian problem ;  ; file  MultivariateGaussianTest.py;   Comparison of MCMC and PLC in a multi-variate gaussian problem ;  ; file  OneSidedFrequentistUpperLimitWithBands.C;   OneSidedFrequentistUpperLimitWithBands ;  ; file  rs101_limitexample.C;   Limits: number counting experiment with uncertainty on both the background rate and signal efficiency. ;  ; file  rs101_limitexample.py;   Limits: number counting experiment with uncertainty on both the background rate and signal efficiency. ;  ; file  rs102_hypotestwithshapes.C;   A typical search for a new particle by studying an invariant mass distribution ;  ; file  rs301_splot.C;   SPlot tutorial ;  ; file  rs302_JeffreysPriorDemo.C;   tutorial demonstrating and validates the RooJeffreysPrior class ;  ; file  rs401c_FeldmanCousins.C;   Produces an interval on the mean signal in a number counting experiment with known background using the Feldman-Cousins technique. ;  ; file  rs401c_FeldmanCousins.py;   Produces an interval on the mean signal in a number counting experiment with known background using the Fel,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tutorial__roostats.html:71,Load,Loading,71,doc/master/group__tutorial__roostats.html,https://root.cern,https://root.cern/doc/master/group__tutorial__roostats.html,1,['Load'],['Loading']
Performance,". ROOT: RooStats::AcceptanceRegion Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; RooStats::AcceptanceRegion Class Reference. . Definition at line 95 of file ConfidenceBelt.h. Public Member Functions;  AcceptanceRegion ();  ;  AcceptanceRegion (Int_t lu, double ll, double ul);  ; Int_t GetLookupIndex ();  ; double GetLowerLimit ();  ; double GetUpperLimit ();  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1AcceptanceRegion.html:95,Load,Loading,95,doc/master/classRooStats_1_1AcceptanceRegion.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1AcceptanceRegion.html,1,['Load'],['Loading']
Performance,". ROOT: RooStats::BayesianCalculator Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; RooStats::BayesianCalculator Class ReferenceRooFit » RooStats. ; BayesianCalculator is a concrete implementation of IntervalCalculator, providing the computation of a credible interval using a Bayesian method. ; The class works only for one single parameter of interest and it integrates the likelihood function with the given prior probability density function to compute the posterior probability. The result of the class is a one dimensional interval (class SimpleInterval ), which is obtained from inverting the cumulative posterior distribution. This calculator works then only for model with a single parameter of interest. The model can instead have several nuisance parameters which are integrated (marginalized) in the computation of the posterior function. The integration and normalization of the posterior is computed using numerical integration methods provided by ROOT. See the MCMCCalculator for model with multiple parameters of interest.; The interface allows one to construct the class by passing the data set, probability density function for the model, the prior functions and then the parameter of interest to scan. The nuisance parameters can also be passed to be marginalized when computing the posterior. Alternatively, the class can be constructed by passing the data and the ModelConfig containing all the needed information (model pdf, prior pdf, parameter of interest, nuisance parameters, etc..); After configuring the calculator, one only needs to ask GetInterval(), which will return an SimpleInterval object. By default the extreme of the integral are obtained by inverting directly the cumulative posterior distribution. By using the method SetScanOfPosterior(nbins) the inte",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1BayesianCalculator.html:97,Load,Loading,97,doc/master/classRooStats_1_1BayesianCalculator.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1BayesianCalculator.html,1,['Load'],['Loading']
Performance,". ROOT: RooStats::ConfInterval Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; RooStats::ConfInterval Class ReferenceabstractRooFit » RooStats. ; ConfInterval is an interface class for a generic interval in the RooStats framework. ; Any tool inheriting from IntervalCalculator can return a ConfInterval. There are many types of intervals, they may be a simple range [a,b] in 1 dimension, or they may be disconnected regions in multiple dimensions. So the common interface is simply to ask the interval if a given point ""IsInInterval"". The Interval also knows what confidence level it was constructed at and the space of parameters for which it was constructed. Note, one could use the same class for a Bayesian ""credible interval"". ; Definition at line 35 of file ConfInterval.h. Public Member Functions;  ConfInterval (const char *name=nullptr);  constructor given name and title ;  ; virtual bool CheckParameters (const RooArgSet &) const =0;  check if parameters are correct (i.e. they are the POI of this interval) ;  ; virtual double ConfidenceLevel () const =0;  return confidence level ;  ; virtual RooArgSet * GetParameters () const =0;  return list of parameters of interest defining this interval (return a new cloned list) ;  ; TClass * IsA () const override;  ; virtual bool IsInInterval (const RooArgSet &) const =0;  check if given point is in the interval ;  ; ConfInterval & operator= (const ConfInterval &other);  operator= ;  ; virtual void SetConfidenceLevel (double cl)=0;  used to set confidence level. Keep pure virtual ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1ConfInterval.html:91,Load,Loading,91,doc/master/classRooStats_1_1ConfInterval.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1ConfInterval.html,1,['Load'],['Loading']
Performance,". ROOT: RooStats::ConfidenceBelt Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; RooStats::ConfidenceBelt Class ReferenceRooFit » RooStats. ; ConfidenceBelt is a concrete implementation of the ConfInterval interface. ; It implements simple general purpose interval of arbitrary dimensions and shape. It does not assume the interval is connected. It uses either a RooDataSet (eg. a list of parameter points in the interval) or a RooDataHist (eg. a Histogram-like object for small regions of the parameter space) to store the interval. ; Definition at line 149 of file ConfidenceBelt.h. Public Member Functions;  ConfidenceBelt ()=default;  ;  ConfidenceBelt (const char *name);  Alternate constructor. ;  ;  ConfidenceBelt (const char *name, const char *title);  Alternate constructor. ;  ;  ConfidenceBelt (const char *name, const char *title, RooAbsData &);  Alternate constructor. ;  ;  ConfidenceBelt (const char *name, RooAbsData &);  Alternate constructor. ;  ; void AddAcceptanceRegion (RooArgSet &, AcceptanceRegion region, double cl=-1., double leftside=-1.);  add after creating a region ;  ; void AddAcceptanceRegion (RooArgSet &point, Int_t dataSetIndex, double lower, double upper, double cl=-1., double leftside=-1.);  add without creating a region, more useful for clients ;  ; bool CheckParameters (RooArgSet &) const;  check if parameters are correct. (dummy implementation to start) ;  ; std::vector< double > ConfidenceLevels () const;  ; AcceptanceRegion * GetAcceptanceRegion (RooArgSet &, double cl=-1., double leftside=-1.);  Method to determine if a parameter point is in the interval. ;  ; double GetAcceptanceRegionMax (RooArgSet &, double cl=-1., double leftside=-1.);  ; double GetAcceptanceRegionMin (RooArgSet &, double cl=-1., double leftside=-1.);  ; virtual RooArgSet * GetParameters () cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1ConfidenceBelt.html:93,Load,Loading,93,doc/master/classRooStats_1_1ConfidenceBelt.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1ConfidenceBelt.html,1,['Load'],['Loading']
Performance,". ROOT: RooStats::HLFactory Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; RooStats::HLFactory Class ReferenceRooFit » RooStats. ; HLFactory is an High Level model Factory allows you to describe your models in a configuration file (datacards) acting as an interface with the RooFactoryWSTool. ; Moreover it provides tools for the combination of models and datasets. ; Definition at line 29 of file HLFactory.h. Public Member Functions;  HLFactory ();  Default Constructor. ;  ;  HLFactory (const char *name, const char *fileName=nullptr, bool isVerbose=false);  Constructor. ;  ;  HLFactory (const char *name, RooWorkspace *externalWs, bool isVerbose=false);  Constructor with external RooWorkspace. ;  ;  ~HLFactory () override;  Default Destructor. ;  ; int AddChannel (const char *label, const char *SigBkgPdfName, const char *BkgPdfName=nullptr, const char *datasetName=nullptr);  Add channel for the combination. ;  ; void DumpCfg (const char *);  Dump the Workspace content as configuration file. ;  ; RooAbsPdf * GetTotBkgPdf ();  Get the combined background pdf. ;  ; RooCategory * GetTotCategory ();  Get the combined dataset. ;  ; RooDataSet * GetTotDataSet ();  Get the combined dataset. ;  ; RooAbsPdf * GetTotSigBkgPdf ();  Get the combined signal plus background pdf. ;  ; RooWorkspace * GetWs ();  Get the RooWorkspace containing the models and variables. ;  ; TClass * IsA () const override;  ; int ProcessCard (const char *filename);  Process a configuration file. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1HLFactory.html:88,Load,Loading,88,doc/master/classRooStats_1_1HLFactory.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1HLFactory.html,1,['Load'],['Loading']
Performance,". ROOT: RooStats::Heaviside Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooStats::Heaviside Class ReferenceRooFit » RooStats. ; Represents the Heaviside function. ; Evaluates to 1.0 when ((double)x) >= ((double)c), 0.0 otherwise. ; Definition at line 21 of file Heaviside.h. Public Member Functions;  Heaviside ();  ;  Heaviside (const char *name, const char *title, RooAbsReal &_x, RooAbsReal &_c);  ;  Heaviside (const Heaviside &other, const char *name=nullptr);  ; TObject * clone (const char *newname) const override;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; virtual double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; virtual double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; TF1 * asTF (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a ROOT TF1,2,3 object bound to this RooAbsReal with given definition of observab",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1Heaviside.html:88,Load,Loading,88,doc/master/classRooStats_1_1Heaviside.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1Heaviside.html,1,['Load'],['Loading']
Performance,". ROOT: RooStats::HistFactory::FlexibleInterpVar Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooStats::HistFactory::FlexibleInterpVar Class ReferenceRooFit » RooStats » HistFactory. . Definition at line 22 of file FlexibleInterpVar.h. Public Member Functions;  FlexibleInterpVar ();  Default constructor. ;  ;  FlexibleInterpVar (const char *name, const char *title);  Constructor of flat polynomial function. ;  ;  FlexibleInterpVar (const char *name, const char *title, const RooArgList &_paramList, double nominal, std::vector< double > const &low, std::vector< double > const &high);  ;  FlexibleInterpVar (const char *name, const char *title, const RooArgList &_paramList, double nominal, std::vector< double > const &low, std::vector< double > const &high, std::vector< int > const &code);  ;  FlexibleInterpVar (const FlexibleInterpVar &, const char *);  ;  ~FlexibleInterpVar () override;  Destructor. ;  ; TObject * clone (const char *newname) const override;  ; void doEval (RooFit::EvalContext &) const override;  Base function for computing multiple values of a RooAbsReal. ;  ; const std::vector< double > & high () const;  ; const std::vector< int > & interpolationCodes () const;  ; TClass * IsA () const override;  ; const std::vector< double > & low () const;  ; double nominal () const;  ; void printAllInterpCodes ();  ; virtual void printFlexibleInterpVars (std::ostream &os) const;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Interface for detailed printing of object. ;  ; void setAllInterpCodes (int code);  ; void setGlobalBoundary (double boundary);  ; void setHigh (RooAbsReal &param, double newHigh);  ; void setInterpCode (RooAbsReal &param, int code);  ; void setLow (RooAbsReal &param, d",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1HistFactory_1_1FlexibleInterpVar.html:109,Load,Loading,109,doc/master/classRooStats_1_1HistFactory_1_1FlexibleInterpVar.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1HistFactory_1_1FlexibleInterpVar.html,1,['Load'],['Loading']
Performance,". ROOT: RooStats::HistFactory::HistoToWorkspaceFactoryFast Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Private Attributes |; List of all members ; RooStats::HistFactory::HistoToWorkspaceFactoryFast Class ReferenceRooFit » RooStats » HistFactory. ; This class provides helper functions for creating likelihood models from histograms. ; It is used by RooStats::HistFactory::MakeModelAndMeasurementFast.; A tutorial showing how to create a HistFactory model is hf001_example.C ; Definition at line 44 of file HistoToWorkspaceFactoryFast.h. Classes; struct  Configuration;  . Public Member Functions;  HistoToWorkspaceFactoryFast ();  ;  HistoToWorkspaceFactoryFast (RooStats::HistFactory::Measurement &Meas);  ;  HistoToWorkspaceFactoryFast (RooStats::HistFactory::Measurement &Meas, Configuration const &cfg);  ; TClass * IsA () const override;  ; RooFit::OwningPtr< RooWorkspace > MakeCombinedModel (std::vector< std::string >, std::vector< std::unique_ptr< RooWorkspace > > &);  ; RooFit::OwningPtr< RooWorkspace > MakeSingleChannelModel (Measurement &measurement, Channel &channel);  ; void SetFunctionsToPreprocess (std::vector< std::string > lines);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1HistFactory_1_1HistoToWorkspaceFactoryFast.html:119,Load,Loading,119,doc/master/classRooStats_1_1HistFactory_1_1HistoToWorkspaceFactoryFast.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1HistFactory_1_1HistoToWorkspaceFactoryFast.html,1,['Load'],['Loading']
Performance,". ROOT: RooStats::HistFactory::LinInterpVar Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooStats::HistFactory::LinInterpVar Class ReferenceRooFit » RooStats » HistFactory. ; RooAbsReal that does piecewise-linear interpolations. ; Definition at line 25 of file LinInterpVar.h. Public Member Functions;  LinInterpVar ()=default;  ;  LinInterpVar (const char *name, const char *title);  Constructor of flat polynomial function. ;  ;  LinInterpVar (const char *name, const char *title, const RooArgList &_paramList, double nominal, std::vector< double > low, std::vector< double > high);  ;  LinInterpVar (const LinInterpVar &, const char *);  ; TObject * clone (const char *newname) const override;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; virtual double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; virtual double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; TF1 * asTF (const RooArgList ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1HistFactory_1_1LinInterpVar.html:104,Load,Loading,104,doc/master/classRooStats_1_1HistFactory_1_1LinInterpVar.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1HistFactory_1_1LinInterpVar.html,1,['Load'],['Loading']
Performance,". ROOT: RooStats::HistFactory::Measurement Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; List of all members ; RooStats::HistFactory::Measurement Class ReferenceRooFit » RooStats » HistFactory. ; The RooStats::HistFactory::Measurement class can be used to construct a model by combining multiple RooStats::HistFactory::Channel objects. ; It also allows to set some general properties like the integrated luminosity, its relative uncertainty or the functional form of constraints on nuisance parameters. ; Definition at line 33 of file Measurement.h. Public Member Functions;  Measurement ();  Standard constructor. ;  ;  Measurement (const char *Name, const char *Title="""");  Measurement( const Measurement& other ); // Copy. ;  ; void AddAsimovDataset (RooStats::HistFactory::Asimov dataset);  add an Asimov Dataset ;  ; void AddConstantParam (const std::string &param);  Add a parameter to be set as constant (Similar to ParamSetting method below) ;  ; void AddFunctionObject (const RooStats::HistFactory::PreprocessFunction function);  add a preprocess function object ;  ; void AddPOI (const std::string &POI);  append parameter to vector of PoIs ;  ; void AddPreprocessFunction (std::string name, std::string expression, std::string dependencies);  Add a preprocessed function by giving the function a name, a functional expression, and a string with a bracketed list of dependencies (eg ""SigXsecOverSM[0,3]"") ;  ; void ClearConstantParams ();  empty vector of constant parameters ;  ; void ClearParamValues ();  clear map of parameter values ;  ; std::vector< RooStats::HistFactory::Asimov > & GetAsimovDatasets ();  get vector of defined Asimov Datasets ;  ; int GetBinHigh ();  ; int GetBinLow ();  ; std::vector< std::string > & GetConstantParams ();  get vector of all constant parameters ;  ; std::vector< RooStats::HistFactory::PreprocessFunction > & GetFunctionObjects ();  get vector o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1HistFactory_1_1Measurement.html:103,Load,Loading,103,doc/master/classRooStats_1_1HistFactory_1_1Measurement.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1HistFactory_1_1Measurement.html,1,['Load'],['Loading']
Performance,". ROOT: RooStats::HistFactory::RooBarlowBeestonLL Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooStats::HistFactory::RooBarlowBeestonLL Class ReferenceRooFit » RooStats » HistFactory. ; Class RooBarlowBeestonLL implements the profile likelihood estimator for a given likelihood and set of parameters of interest. ; The value return by RooBarlowBeestonLL is the input likelihood nll minimized w.r.t all nuisance parameters (which are all parameters except for those listed in the constructor) minus the -log(L) of the best fit. Note that this function is slow to evaluate as a MIGRAD minimization step is executed for each function evaluation ; Definition at line 25 of file RooBarlowBeestonLL.h. Classes; class  BarlowCache;  . Public Member Functions;  RooBarlowBeestonLL ();  Default constructor. Should only be used by proof. ;  ;  RooBarlowBeestonLL (const char *name, const char *title, RooAbsReal &nll);  ;  RooBarlowBeestonLL (const RooBarlowBeestonLL &other, const char *name=nullptr);  ; TObject * clone (const char *newname) const override;  ; bool getParameters (const RooArgSet *depList, RooArgSet &outputSet, bool stripDisconnected=true) const override;  Fills a list with leaf nodes in the arg tree starting with ourself as top node that don't match any of the names the args in the supplied argset. ;  ; void initializeBarlowCache ();  ; TClass * IsA () const override;  ; RooAbsReal & nll ();  ; void setDataset (RooAbsData *data);  ; void setPdf (RooAbsPdf *pdf);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1HistFactory_1_1RooBarlowBeestonLL.html:110,Load,Loading,110,doc/master/classRooStats_1_1HistFactory_1_1RooBarlowBeestonLL.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1HistFactory_1_1RooBarlowBeestonLL.html,1,['Load'],['Loading']
Performance,". ROOT: RooStats::HybridPlot Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; RooStats::HybridPlot Class ReferenceRooFit » RooStats. ; This class provides the plots for the result of a study performed with the HybridCalculatorOriginal class. ; Authors: D. Piparo, G. Schott - Universitaet Karlsruhe; An example plot is available here: http://www-ekp.physik.uni-karlsruhe.de/~schott/roostats/hybridplot_example.png ; Definition at line 36 of file HybridPlot.h. Public Member Functions;  HybridPlot (const char *name, const char *title, const std::vector< double > &sb_values, const std::vector< double > &b_values, double testStat_data, int n_bins, bool verbosity=true);  Constructor. ;  ;  ~HybridPlot () override;  Destructor. ;  ; void Draw (const char *options="""") override;  Draw on current pad. ;  ; void DumpToFile (const char *RootFileName, const char *options);  All the objects are written to rootfile. ;  ; void DumpToImage (const char *filename);  Write an image on disk. ;  ; double GetBCenter (double n_sigmas=1, bool display=false);  Get B histo center. ;  ; TH1F * GetBhisto ();  Get B histo. ;  ; double * GetBIntExtremes (double frac);  Get B histo integration extremes to obtain the requested area fraction call delete [] res to release memory. ;  ; double GetBmean ();  Get B histo mean. ;  ; double GetBrms ();  Get B histo RMS. ;  ; TVirtualPad * GetCanvas ();  Get the pad (or canvas) where it has been drawn. ;  ; double GetHistoCenter (TH1 *histo, double n_rms=1, bool display_result=false);  Get the center of the histo. ;  ; double * GetHistoPvals (TH1 *histo, double percentage);  Get the ""effective sigmas"" of the histo, call delete [] res to release memory. ;  ; double GetMedian (TH1 *histo);  Get the median of an histogram. ;  ; double GetSBCenter (double n_sigmas=1, bool display=false);  Ge",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1HybridPlot.html:89,Load,Loading,89,doc/master/classRooStats_1_1HybridPlot.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1HybridPlot.html,2,"['Load', 'perform']","['Loading', 'performed']"
Performance,". ROOT: RooStats::HybridResult Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; RooStats::HybridResult Class ReferenceRooFit » RooStats. ; Class encapsulating the result of the HybridCalculatorOriginal. ; This class is a fresh rewrite in RooStats of RooStatsCms/LimitResults developed by D. Piparo and G. Schott New contributions to this class have been written by Matthias Wolf (error estimation); The objects of this class store and access with lightweight methods the information calculated by LimitResults through a Lent calculation using MC toy experiments. In some ways can be considered an extended and extensible implementation of TConfidenceLevel. ; Definition at line 27 of file HybridResult.h. Public Member Functions;  HybridResult (const char *name, const std::vector< double > &testStat_sb_vals, const std::vector< double > &testStat_b_vals, bool sumLargerValues=true);  Constructor for HybridResult. ;  ;  HybridResult (const char *name=nullptr);  Default constructor. ;  ;  ~HybridResult () override;  Destructor of HybridResult. ;  ; void Add (HybridResult *other);  add additional toy-MC experiments to the current results use the data test statistics of the added object if none is already present (otherwise, ignore the new one) ;  ; double AlternatePValue () const override;  Returns \(CL_{s+b}\) : the S+B p-value. ;  ; double CLbError () const;  The error on the ""confidence level"" of the null hypothesis. ;  ; double CLsError () const;  The error on the ratio \(CL_{s+b}/CL_{b}\). ;  ; double CLsplusbError () const;  The error on the ""confidence level"" of the alternative hypothesis. ;  ; HybridPlot * GetPlot (const char *name, const char *title, int n_bins);  prepare a plot showing a result and return a pointer to a HybridPlot object the needed arguments are: an object name, a title and the num",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1HybridResult.html:91,Load,Loading,91,doc/master/classRooStats_1_1HybridResult.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1HybridResult.html,1,['Load'],['Loading']
Performance,". ROOT: RooStats::HypoTestInverterPlot Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; RooStats::HypoTestInverterPlot Class ReferenceRooFit » RooStats. ; Class to plot a HypoTestInverterResult, the output of the HypoTestInverter calculator. ; It can be used to plot the obtained p-values ( CLb, CLs+b or CLs) for each scanned point, as well as the test statistic distributions (when a calculator based on pseudo-experiments is used) for the two hypotheses. ; Definition at line 26 of file HypoTestInverterPlot.h. Public Member Functions;  HypoTestInverterPlot (const char *name, const char *title, HypoTestInverterResult *results);  constructor with name and title from a HypoTestInverterResult class ;  ;  HypoTestInverterPlot (HypoTestInverterResult *results);  constructor ;  ;  ~HypoTestInverterPlot () override;  destructor ;  ; void Draw (Option_t *opt="""") override;  Draw the scan result in the current canvas Possible options: """" (default): draw observed + expected with 1 and 2 sigma bands SAME : draw in the current axis OBS : draw only the observed plot EXP : draw only the expected plot CLB : draw also CLb 2CL : drow both CLs+b and CLs. ;  ; TClass * IsA () const override;  ; TMultiGraph * MakeExpectedPlot (double sig1=1, double sig2=2);  Make the expected plot and the bands nsig1 and nsig2 indicates the n-sigma value for the bands if nsig1 = 0 no band is computed (only expected value) if nsig2 > nsig1 (default is nsig1=1 and nsig2=2) the second band is also done. ;  ; TGraphErrors * MakePlot (Option_t *opt="""");  return a TGraphErrors with the obtained observed p-values resultinf from the scan By default (Option = """") return CLs or CLsb depending if the flag UseCLs is set If Option = ""CLb"" return CLb plot = ""CLs+b"" return CLs+b plot independently of the flag = ""CLs"" return CLs plot independently o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1HypoTestInverterPlot.html:99,Load,Loading,99,doc/master/classRooStats_1_1HypoTestInverterPlot.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1HypoTestInverterPlot.html,1,['Load'],['Loading']
Performance,". ROOT: RooStats::HypoTestInverterResult Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; Friends |; List of all members ; RooStats::HypoTestInverterResult Class ReferenceRooFit » RooStats. ; HypoTestInverterResult class holds the array of hypothesis test results and compute a confidence interval. ; Based on the RatioFinder code available in the RooStatsCms package developed by Gregory Schott and Danilo Piparo Ported and adapted to RooStats by Gregory Schott Some contributions to this class have been written by Matthias Wolf (error estimation) ; Definition at line 26 of file HypoTestInverterResult.h. Public Types; enum  InterpolOption_t { kLinear; , kSpline; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  HypoTestInverterResult (const char *name, const RooRealVar &scannedVariable, double cl);  constructor ;  ;  HypoTestInverterResult (const char *name=nullptr);  default constructor ;  ;  HypoTestInverterResult (const HypoTestInverterResult &other, const char *name);  copy constructor ;  ;  ~HypoTestInverterResult () override;  destructor ;  ; bool Add (const HypoTestInverterResult &otherResult);  merge with the content of another",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1HypoTestInverterResult.html:101,Load,Loading,101,doc/master/classRooStats_1_1HypoTestInverterResult.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1HypoTestInverterResult.html,1,['Load'],['Loading']
Performance,". ROOT: RooStats::HypoTestPlot Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; RooStats::HypoTestPlot Class ReferenceRooFit » RooStats. ; This class provides the plots for the result of a study performed with any of the HypoTestCalculatorGeneric (e.g. ; HybridCalculator or FrequentistCalculator) class. ; Definition at line 22 of file HypoTestPlot.h. Public Member Functions;  HypoTestPlot ()=default;  Constructor. ;  ;  HypoTestPlot (HypoTestResult &result, Int_t bins, double min, double max, Option_t *opt=""NORMALIZE HIST"");  ;  HypoTestPlot (HypoTestResult &result, Int_t bins=100, Option_t *opt=""NORMALIZE HIST"");  ; void ApplyDefaultStyle (void);  Set default style options (also called in the constructor that takes a HypoTestResult). ;  ; void ApplyResult (HypoTestResult &result, Option_t *opt=""NORMALIZE HIST"");  Applies a HypoTestResult. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooStats::SamplingDistPlot;  SamplingDistPlot (Int_t nbins, double min, double max);  SamplingDistPlot constructor with bin size, min and max. ;  ;  SamplingDistPlot (Int_t nbins=100);  Constructors for SamplingDistribution. ;  ;  ~SamplingDistPlot () override;  Destructor of SamplingDistribution. ;  ; void AddLine (double x1, double y1, double x2, double y2, const char *title=nullptr);  add a line ;  ; double AddSamplingDistribution (const SamplingDistribution *samplingDist, Option_t *drawOptions=""NORMALIZE HIST"");  adds the sampling distribution and returns the scale factor ;  ; double AddSamplingDistributionShaded (const SamplingDistribution *samplingDist, double minShaded, double maxShaded, Option_t *drawOptions=""NORMALIZE HIST"");  Like",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1HypoTestPlot.html:91,Load,Loading,91,doc/master/classRooStats_1_1HypoTestPlot.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1HypoTestPlot.html,2,"['Load', 'perform']","['Loading', 'performed']"
Performance,". ROOT: RooStats::HypoTestResult Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; RooStats::HypoTestResult Class ReferenceRooFit » RooStats. ; HypoTestResult is a base class for results from hypothesis tests. ; Any tool inheriting from HypoTestCalculator can return a HypoTestResult. As such, it stores a p-value for the null-hypothesis (eg. background-only) and an alternate hypothesis (eg. signal+background). The p-values can also be transformed into confidence levels ( \(CL_{b}\), \(CL_{s+b}\)) in a trivial way. The ratio of the \(CL_{s+b}\) to \(CL_{b}\) is often called \(CL_{s}\), and is considered useful, though it is not a probability. Finally, the p-value of the null can be transformed into a number of equivalent Gaussian sigma using the Significance method.; The p-value of the null for a given test statistic is rigorously defined and this is the starting point for the following conventions. Conventions used in this class; The p-value for the null and alternate are on the same side of the observed value of the test statistic. This is the more standard convention and avoids confusion when doing inverted tests.; For exclusion, we also want the formula \(CL_{s} = CL_{s+b} / CL_{b}\) to hold which therefore defines our conventions for \(CL_{s+b}\) and \(CL_{b}\). \(CL_{s}\) was specifically invented for exclusion and therefore all quantities need be related through the assignments as they are for exclusion: \(CL_{s+b} = p_{s+b}\); \(CL_{b} = p_{b}\). This is derived by considering the scenarios of a powerful and not powerful inverted test, where for the not so powerful test, \(CL_{s}\) must be close to one.; For results of Hypothesis tests, \(CL_{s}\) has no similar direct interpretation as for exclusion and can be larger than one. ; Definition at line 22 of file",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1HypoTestResult.html:93,Load,Loading,93,doc/master/classRooStats_1_1HypoTestResult.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1HypoTestResult.html,1,['Load'],['Loading']
Performance,". ROOT: RooStats::LikelihoodInterval Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; RooStats::LikelihoodInterval Class ReferenceRooFit » RooStats. ; LikelihoodInterval is a concrete implementation of the RooStats::ConfInterval interface. ; It implements a connected N-dimensional intervals based on the contour of a likelihood ratio. The boundary of the interval is equivalent to a MINUIT/MINOS contour about the maximum likelihood estimator; The interval does not need to be an ellipse (eg. it is not the HESSE error matrix). The level used to make the contour is the same as that used in MINOS, eg. it uses Wilks' theorem, which states that under certain regularity conditions the function -2* log (profile likelihood ratio) is asymptotically distributed as a chi^2 with N-dof, where N is the number of parameters of interest.; Note, a boundary on the parameter space (eg. s>= 0) or a degeneracy (eg. mass of signal if Nsig = 0) can lead to violations of the conditions necessary for Wilks' theorem to be true.; Also note, one can use any RooAbsReal as the function that will be used in the contour; however, the level of the contour is based on Wilks' theorem as stated above.; References. F. James., Minuit.Long writeup D506, CERN, 1998. . Definition at line 34 of file LikelihoodInterval.h. Public Member Functions;  LikelihoodInterval (const char *name, RooAbsReal *, const RooArgSet *, RooArgSet *=nullptr);  Alternate constructor taking a pointer to the profile likelihood ratio, parameter of interest and optionally a snapshot of best parameter of interest for interval. ;  ;  LikelihoodInterval (const char *name=nullptr);  default constructor ;  ;  ~LikelihoodInterval () override;  destructor ;  ; bool CheckParameters (const RooArgSet &) const override;  check if parameters are ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1LikelihoodInterval.html:97,Load,Loading,97,doc/master/classRooStats_1_1LikelihoodInterval.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1LikelihoodInterval.html,1,['Load'],['Loading']
Performance,". ROOT: RooStats::LikelihoodIntervalPlot Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; RooStats::LikelihoodIntervalPlot Class ReferenceRooFit » RooStats. ; This class provides simple and straightforward utilities to plot a LikelihoodInterval object. ; Definition at line 30 of file LikelihoodIntervalPlot.h. Public Member Functions;  LikelihoodIntervalPlot ();  LikelihoodIntervalPlot default constructor with default parameters. ;  ;  LikelihoodIntervalPlot (LikelihoodInterval *theInterval);  LikelihoodIntervalPlot copy constructor. ;  ; void Draw (const Option_t *options=nullptr) override;  draw the likelihood interval or contour for the 1D case a RooPlot is drawn by default of the profiled Log-Likelihood ratio if option ""TF1"" is used the objects are drawn using a TF1 scanning the LL function in a grid of the set points (by default the TF1 can be customized by setting maximum and the number of points to scan ;  ; TObject * GetPlottedObject () const;  returned plotted object (RooPlot or histograms) ;  ; TClass * IsA () const override;  ; void SetContourColor (const Color_t color);  set the fill contour color ;  ; void SetFillStyle (const Style_t style);  set the fill contour color ;  ; void SetLikelihoodInterval (LikelihoodInterval *theInterval);  ; void SetLineColor (const Color_t color);  set the line color for the 1D interval lines or contours (2D) ;  ; void SetMaximum (const double theMaximum);  ; void SetNPoints (Int_t np);  ; void SetPlotParameters (const RooArgSet *params);  ; void SetPrecision (double eps);  set plot precision (when drawing a RooPlot) ;  ; void SetRange (double x1, double x2);  set plot range (for 1D plot) ;  ; void SetRange (double x1, double y1, double x2, double y2);  set plot range (for 2D plot) ;  ; void Streamer (TBuffer &) override;  Stream an object of class TO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1LikelihoodIntervalPlot.html:101,Load,Loading,101,doc/master/classRooStats_1_1LikelihoodIntervalPlot.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1LikelihoodIntervalPlot.html,1,['Load'],['Loading']
Performance,". ROOT: RooStats::MCMCCalculator Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooStats::MCMCCalculator Class ReferenceRooFit » RooStats. ; Bayesian Calculator estimating an interval or a credible region using the Markov-Chain Monte Carlo method to integrate the likelihood function with the prior to obtain the posterior function. ; By using the Markov-Chain Monte Carlo methods this calculator can work with model which require the integration of a large number of parameters.; MCMCCalculator is a concrete implementation of IntervalCalculator. It uses a MetropolisHastings object to construct a Markov Chain of data points in the parameter space. From this Markov Chain, this class can generate a MCMCInterval as per user specification.; The interface allows one to pass the model, data, and parameters via a workspace and then specify them with names.; After configuring the calculator, one only needs to ask GetInterval(), which will return an ConfInterval (MCMCInterval in this case). ; Definition at line 31 of file MCMCCalculator.h. Public Member Functions;  MCMCCalculator ();  default constructor ;  ;  MCMCCalculator (RooAbsData &data, const ModelConfig &model);  Constructor for automatic configuration with basic settings and a ModelConfig. ;  ; double ConfidenceLevel () const override;  Get the Confidence level for the test. ;  ; MCMCInterval * GetInterval () const override;  Main interface to get a ConfInterval. ;  ; TClass * IsA () const override;  ; virtual void SetAxes (RooArgList &axes);  set which variables to put on each axis ;  ; virtual void SetChainParameters (const RooArgSet &set);  specify the parameters to store in the Markov chain By default all the parameters are stored ;  ; virtual void SetConditionalObservables (const RooArgSet &set);  set the cond",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1MCMCCalculator.html:93,Load,Loading,93,doc/master/classRooStats_1_1MCMCCalculator.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1MCMCCalculator.html,1,['Load'],['Loading']
Performance,". ROOT: RooStats::MCMCInterval Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Static Private Attributes |; List of all members ; RooStats::MCMCInterval Class ReferenceRooFit » RooStats. ; MCMCInterval is a concrete implementation of the RooStats::ConfInterval interface. ; It takes as input Markov Chain of data points in the parameter space generated by Monte Carlo using the Metropolis algorithm. From the Markov Chain, the confidence interval can be determined in two ways:; Using a Kernel-Estimated PDF: (not the default method); A RooNDKeysPdf is constructed from the data set using adaptive kernel width. With this RooNDKeysPdf F, we then integrate over the most likely domain in the parameter space (tallest points in the posterior RooNDKeysPdf) until the target confidence level is reached within an acceptable neighborhood as defined by SetEpsilon(). More specifically: we calculate the following for different cutoff values C until we reach the target confidence level: \(\int_{ F >= C } F; d{normset} \). Important note: this is not the default method because of a bug in constructing the RooNDKeysPdf from a weighted data set. Configure to use this method by calling SetUseKeys(true), and the data set will be interpreted without weights.; Using a binned data set: (the default method); This is the binned analog of the continuous integrative method that uses the kernel-estimated PDF. The points in the Markov Chain are put into a binned data set and the interval is then calculated by adding the heights of the bins in decreasing order until the desired level of confidence has been reached. Note that this means the actual confidence level is >= the confidence level prescribed by the client (unless the user calls SetHistStrict(false)). This method is ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1MCMCInterval.html:91,Load,Loading,91,doc/master/classRooStats_1_1MCMCInterval.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1MCMCInterval.html,1,['Load'],['Loading']
Performance,". ROOT: RooStats::MCMCIntervalPlot Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; RooStats::MCMCIntervalPlot Class ReferenceRooFit » RooStats. ; This class provides simple and straightforward utilities to plot a MCMCInterval object. ; Basic use only requires a few lines once you have an MCMCInterval*:; MCMCIntervalPlot plot(*interval);; plot.Draw();; plotwinID h TVirtualViewer3D TVirtualGLPainter char TVirtualGLPainter plotDefinition TGWin32VirtualGLProxy.cxx:53; RooStats::MCMCIntervalPlotThis class provides simple and straightforward utilities to plot a MCMCInterval object.Definition MCMCIntervalPlot.h:28; TObject::Drawvirtual void Draw(Option_t *option="""")Default Draw method for all objects.Definition TObject.cxx:280; The standard Draw() function will currently draw the confidence interval range with bars if 1-D and a contour if 2-D. The MCMC posterior will also be plotted for the 1-D case. ; Definition at line 28 of file MCMCIntervalPlot.h. Public Member Functions;  MCMCIntervalPlot ();  ;  MCMCIntervalPlot (MCMCInterval &interval);  ;  ~MCMCIntervalPlot () override;  Destructor of SamplingDistribution. ;  ; void Draw (const Option_t *options=nullptr) override;  ; void DrawChainScatter (RooRealVar &xVar, RooRealVar &yVar);  ; void DrawNLLHist (const Option_t *options=nullptr);  ; void DrawNLLVsTime ();  ; void DrawParameterVsTime (RooRealVar &param);  ; void DrawWeightHist (const Option_t *options=nullptr);  ; TClass * IsA () const override;  ; void SetLineColor (Color_t color);  ; void SetLineWidth (Int_t width);  ; void SetMCMCInterval (MCMCInterval &interval);  ; void SetShadeColor (Color_t color);  ; void SetShowBurnIn (bool showBurnIn);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1MCMCIntervalPlot.html:95,Load,Loading,95,doc/master/classRooStats_1_1MCMCIntervalPlot.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1MCMCIntervalPlot.html,1,['Load'],['Loading']
Performance,". ROOT: RooStats::MarkovChain Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; RooStats::MarkovChain Class ReferenceRooFit » RooStats. ; Stores the steps in a Markov Chain of points. ; Allows user to access the weight and NLL value (if applicable) with which a point was added to the MarkovChain. ; Definition at line 33 of file MarkovChain.h. Public Member Functions;  MarkovChain ();  ;  MarkovChain (const char *name, const char *title, RooArgSet &parameters);  ;  MarkovChain (RooArgSet &parameters);  ;  ~MarkovChain () override;  ; virtual void Add (MarkovChain &otherChain, double discardEntries=0.0);  add another markov chain ;  ; virtual void Add (RooArgSet &entry, double nllValue, double weight=1.0);  safely add an entry to the chain ;  ; virtual void AddFast (RooArgSet &entry, double nllValue, double weight=1.0);  add an entry to the chain ONLY IF you have constructed with parameters or called SetParameters ;  ; virtual void AddWithBurnIn (MarkovChain &otherChain, Int_t burnIn=0);  add another markov chain ;  ; virtual const RooArgSet * Get () const;  get the entry at the current position ;  ; virtual const RooArgSet * Get (Int_t i) const;  get the entry at position i ;  ; virtual const RooDataSet * GetAsConstDataSet () const;  ; virtual RooFit::OwningPtr< RooDataHist > GetAsDataHist (const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}) const R__DEPRECATED(6;  Get a clone of the markov chain on which this interval is based as a RooDataHist. ;  ; virtual RooFit::OwningPtr< RooDataHist > GetAsDataHist (RooArgSet *whichVars=nullptr) const;  get this MarkovChain as a RooDataHist whose entries contain the values of whichVars. ;  ; virtual RooF",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1MarkovChain.html:90,Load,Loading,90,doc/master/classRooStats_1_1MarkovChain.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1MarkovChain.html,1,['Load'],['Loading']
Performance,". ROOT: RooStats::MetropolisHastings Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooStats::MetropolisHastings Class ReferenceRooFit » RooStats. ; This class uses the Metropolis-Hastings algorithm to construct a Markov Chain of data points using Monte Carlo. ; In the main algorithm, new points in the parameter space are proposed and then visited based on their relative likelihoods. This class can use any implementation of the ProposalFunction, including non-symmetric proposal functions, to propose parameter points and still maintain detailed balance when constructing the chain.; The ""Likelihood"" function that is sampled when deciding what steps to take in the chain has been given a very generic implementation. The user can create any RooAbsReal based on the parameters and pass it to a MetropolisHastings object with the method SetFunction(RooAbsReal&). Be sure to tell MetropolisHastings whether your RooAbsReal is on a (+/-) regular or log scale, so that it knows what logic to use when sampling your RooAbsReal. For example, a common use is to sample from a -log(Likelihood) distribution (NLL), for which the appropriate configuration calls are SetType(MetropolisHastings::kLog); SetSign(MetropolisHastings::kNegative); If you're using a traditional likelihood function: SetType(MetropolisHastings::kRegular); SetSign(MetropolisHastings::kPositive); You must set these type and sign flags or MetropolisHastings will not construct a MarkovChain.; Also note that in ConstructChain(), the values of the variables are randomized uniformly over their intervals before construction of the MarkovChain begins. ; Definition at line 24 of file MetropolisHastings.h. Public Types; enum  FunctionSign { kNegative; , kPositive; , kSignUnset; };  ; enum  FunctionType { kR",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1MetropolisHastings.html:97,Load,Loading,97,doc/master/classRooStats_1_1MetropolisHastings.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1MetropolisHastings.html,1,['Load'],['Loading']
Performance,". ROOT: RooStats::ModelConfig Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; RooStats::ModelConfig Class ReferencefinalRooFit » RooStats. ; ModelConfig is a simple class that holds configuration information specifying how a model should be used in the context of various RooStats tools. ; A single model can be used in different ways, and this class should carry all that is needed to specify how it should be used. ModelConfig requires a workspace to be set.; A ModelConfig holds sets of parameters of the likelihood function that have different interpretations:; Parameter of interest Parameters that are measured (i.e. fitted).; Nuisance parameters Parameters that are fitted, but their post-fit value is not interesting. Often, they might be constrained because external knowledge about them exists, e.g. from external measurements.; Constraint parameters No direct use in RooFit/RooStats. Can be used by the user for bookkeeping.; Observables Parameters that have been measured externally, i.e. they exist in a dataset. These are not fitted, but read during fitting from the entries of a dataset.; Conditional observables Observables that are not integrated when the normalisation of the PDF is calculated. See e.g. rf306_condpereventerrors in the RooFit tutorials.; Global observables Observables that to the fit look like ""constant"" values, i.e. they are not being fitted and they are not loaded from a dataset, but some knowledge exists that allows to set them to a specific value. Examples: – A signal efficiency measured in a Monte Carlo study. – When constraining a parameter \( b \), the target value ( \( b_0 \)) that this parameter is constrained to: ; \[; \mathrm{Constraint}_b = \mathrm{Gauss}(b_0 \, | \, b, 0.2); \]. External constraints Includ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1ModelConfig.html:90,Load,Loading,90,doc/master/classRooStats_1_1ModelConfig.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1ModelConfig.html,1,['Load'],['Loading']
Performance,". ROOT: RooStats::PdfProposal Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooStats::PdfProposal Class ReferenceRooFit » RooStats. ; PdfProposal is a concrete implementation of the ProposalFunction interface. ; It proposes points across the parameter space in the distribution of the given PDF.; To make Propose(xPrime, x) dependent on x, configure with PdfProposal::AddMapping(varToUpdate, valueToUse). For example, suppose we have:; // our parameter; RooRealVar p(""p"", ""p"", 5, 0, 10);; ; // create mean and sigma for gaussian proposal function; RooRealVar meanP(""meanP"", ""meanP"", 0, 10);; RooRealVar sigma(""sigma"", ""sigma"", 1, 0, 5);; RooGaussian pGaussian(""pGaussian"", ""pGaussian"", p, meanP, sigma);; ; // configure proposal function; PdfProposal pdfProposal(pGaussian);; pdfProposal.AddMapping(meanP, p); // each call of Propose(xPrime, x), meanP in; // the proposal function will be updated to; // the value of p in x. this will center the; // proposal function about x's p when; // proposing for xPrime; ; // To improve performance, PdfProposal has the ability to cache a specified; // number of proposals. If you don't call this function, the default cache size; // is 1, which can be slow.; pdfProposal.SetCacheSize(desiredCacheSize);; pwinID h TVirtualViewer3D TVirtualGLPainter pDefinition TGWin32VirtualGLProxy.cxx:51; RooGaussianPlain Gaussian p.d.f.Definition RooGaussian.h:24; RooRealVarVariable that can be changed from the outside.Definition RooRealVar.h:37; RooStats::PdfProposalPdfProposal is a concrete implementation of the ProposalFunction interface.Definition PdfProposal.h:30; sigmaconst Double_t sigmaDefinition h1analysisProxy.h:11; PdfProposal currently uses a fixed cache size. Adaptive caching methods are in the works for future versions. ; Definition at line",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1PdfProposal.html:90,Load,Loading,90,doc/master/classRooStats_1_1PdfProposal.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1PdfProposal.html,1,['Load'],['Loading']
Performance,". ROOT: RooStats::PointSetInterval Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; RooStats::PointSetInterval Class ReferenceRooFit » RooStats. ; PointSetInterval is a concrete implementation of the ConfInterval interface. ; It implements simple general purpose interval of arbitrary dimensions and shape. It does not assume the interval is connected. It uses either a RooDataSet (eg. a list of parameter points in the interval) or a RooDataHist (eg. a Histogram-like object for small regions of the parameter space) to store the interval. ; Definition at line 21 of file PointSetInterval.h. Public Member Functions;  PointSetInterval (const char *name, RooAbsData &);  constructor from name and data set specifying the interval points ;  ;  PointSetInterval (const char *name=nullptr);  default constructors ;  ; bool CheckParameters (const RooArgSet &) const override;  return a cloned list with the parameter of interest ;  ; double ConfidenceLevel () const override;  return the confidence level for the interval ;  ; RooAbsData * GetParameterPoints () const;  return a copy of the data set (points) defining this interval ;  ; RooArgSet * GetParameters () const override;  return a cloned list with the parameter of interest ;  ; TClass * IsA () const override;  ; bool IsInInterval (const RooArgSet &) const override;  check if parameter is in the interval ;  ; double LowerLimit (RooRealVar &param);  return lower limit on a given parameter ;  ; void SetConfidenceLevel (double cl) override;  set the confidence level for the interval ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; double UpperLimit (RooRealVar &param);  return upper limit on a given parameter ;  ;  Public Member Functions inherited from RooStats:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1PointSetInterval.html:95,Load,Loading,95,doc/master/classRooStats_1_1PointSetInterval.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1PointSetInterval.html,1,['Load'],['Loading']
Performance,". ROOT: RooStats::ProposalFunction Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; RooStats::ProposalFunction Class ReferenceabstractRooFit » RooStats. ; ProposalFunction is an interface for all proposal functions that would be used with a Markov Chain Monte Carlo algorithm. ; Given a current point in the parameter space it proposes a new point. Proposal functions may or may not be symmetric, in the sense that the probability to propose X1 given we are at X2 need not be the same as the probability to propose X2 given that we are at X1. In this case, the IsSymmetric method should return false, and the Metropolis algorithm will need to take into account the proposal density to maintain detailed balance. ; Definition at line 41 of file ProposalFunction.h. Public Member Functions;  ProposalFunction ();  Default constructor. ;  ; virtual bool CheckParameters (RooArgSet &params);  Check the parameters for which the ProposalFunction will propose values to make sure they are all RooRealVars Return true if all objects are RooRealVars, false otherwise. ;  ; virtual double GetProposalDensity (RooArgSet &x1, RooArgSet &x2)=0;  Return the probability of proposing the point x1 given the starting point x2. ;  ; TClass * IsA () const override;  ; virtual bool IsSymmetric (RooArgSet &x1, RooArgSet &x2)=0;  Determine whether or not the proposal density is symmetric for points x1 and x2 - that is, whether the probability of reaching x2 from x1 is equal to the probability of reaching x1 from x2. ;  ; virtual void Propose (RooArgSet &xPrime, RooArgSet &x)=0;  Populate xPrime with the new proposed point, possibly based on the current point x. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1ProposalFunction.html:95,Load,Loading,95,doc/master/classRooStats_1_1ProposalFunction.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1ProposalFunction.html,1,['Load'],['Loading']
Performance,. ROOT: RooStats::ProposalHelper Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooStats::ProposalHelper Class ReferenceRooFit » RooStats. . Definition at line 29 of file ProposalHelper.h. Public Member Functions;  ProposalHelper ();  ;  ~ProposalHelper () override;  ; virtual ProposalFunction * GetProposalFunction ();  Get the ProposalFunction that we've been designing. ;  ; TClass * IsA () const override;  ; virtual void SetCacheSize (Int_t size);  ; virtual void SetClues (RooDataSet &clues);  Set the bank of clues to add to the current proposal density function. ;  ; virtual void SetCluesFraction (double cluesFrac);  set what fraction of the proposal density function should come from the bank of clues ;  ; virtual void SetCluesOptions (const Option_t *options);  set the option string to pass to the RooNDKeysPdf constructor if the bank of clues pdf is being automatically generated by this ProposalHelper ;  ; virtual void SetCovMatrix (const TMatrixDSym &covMatrix);  set the covariance matrix to use for a multi-variate Gaussian proposal ;  ; virtual void SetPdf (RooAbsPdf &pdf);  Set the PDF to be the proposal density function. ;  ; virtual void SetUniformFraction (double uniFrac);  set what fraction of the proposal density function should come from a uniform proposal distribution ;  ; virtual void SetUpdateProposalParameters (bool updateParams);  ; virtual void SetVariables (const RooArgList &vars);  ; virtual void SetVariables (RooArgList &vars);  ; virtual void SetVariables (RooArgSet &vars);  ; virtual void SetWidthRangeDivisor (double divisor);  set what divisor we will use when dividing the range of a variable to determine the width of the proposal function for each dimension e.g. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObje,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1ProposalHelper.html:93,Load,Loading,93,doc/master/classRooStats_1_1ProposalHelper.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1ProposalHelper.html,1,['Load'],['Loading']
Performance,". ROOT: RooStats::SPlot Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Attributes |; List of all members ; RooStats::SPlot Class ReferenceRooFit » RooStats. ; A class to calculate ""sWeights"" used to create an ""sPlot"". ; An sPlot can reweight a dataset to show different components (e.g. signal / background), but it doesn't use cuts, and therefore doesn't have to sort events into signal/background (or other) categories. Instead of assigning a category to each event in the dataset, all events are weighted. To compute the weights, a PDF with different components is analysed, and the weights are added to the dataset. When plotting the dataset with the weights of the signal or background components, the data looks like ""signal"", but all events in the dataset are used.; The result is similar to a likelihood projection plot, but without cuts.; NoteSPlot needs to fit the pdf to the data once, so make sure that all relevant fit arguments such as the fit range are passed in the constructor.; The code is based on `‘SPlot: A statistical tool to unfold data distributions,’' Nucl. Instrum. Meth. A 555, 356 (2005) [arXiv:physics/0402083]. Creating an SPlot; To use this class, you first must have a pdf that includes yield parameters for (possibly several) different species, for example a signal and background yield. Those yields must be of type RooRealVar / RooLinearVar (or anything that derives from RooAbsRealLValue). This is necessary because RooStats needs to be able to set the yields to 0 and 1 to probe the PDF. After constructing the s weights, the yields will be restored to their original values.; To create an instance of the SPlot, supply a data set, the pdf to analyse, and a list which parameters of the pdf are yields. The SPlot will calculate SWeights, and include these as columns in the RooDataSet. The dataset wi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1SPlot.html:84,Load,Loading,84,doc/master/classRooStats_1_1SPlot.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1SPlot.html,1,['Load'],['Loading']
Performance,". ROOT: RooStats::SamplingDistPlot Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Attributes |; List of all members ; RooStats::SamplingDistPlot Class ReferenceRooFit » RooStats. ; This class provides simple and straightforward utilities to plot SamplingDistribution objects. ; Definition at line 33 of file SamplingDistPlot.h. Public Member Functions;  SamplingDistPlot (Int_t nbins, double min, double max);  SamplingDistPlot constructor with bin size, min and max. ;  ;  SamplingDistPlot (Int_t nbins=100);  Constructors for SamplingDistribution. ;  ;  ~SamplingDistPlot () override;  Destructor of SamplingDistribution. ;  ; void AddLine (double x1, double y1, double x2, double y2, const char *title=nullptr);  add a line ;  ; double AddSamplingDistribution (const SamplingDistribution *samplingDist, Option_t *drawOptions=""NORMALIZE HIST"");  adds the sampling distribution and returns the scale factor ;  ; double AddSamplingDistributionShaded (const SamplingDistribution *samplingDist, double minShaded, double maxShaded, Option_t *drawOptions=""NORMALIZE HIST"");  Like AddSamplingDistribution, but also sets a shaded area in the minShaded and maxShaded boundaries. ;  ; void AddTF1 (TF1 *f, const char *title=nullptr, Option_t *drawOptions=""SAME"");  add a TF1 ;  ; void AddTH1 (TH1 *h, Option_t *drawOptions="""");  add a TH1 ;  ; void ApplyDefaultStyle (void);  Applies a predefined style if fApplyStyle is true (default). ;  ; void Draw (Option_t *options=nullptr) override;  Draw this plot and all of the elements it contains. ;  ; void DumpToFile (const char *RootFileName, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault);  write to Root file ;  ; TH1 * GetHistogram (const SamplingDistribution *samplDist=nullptr);  ; RooPlo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1SamplingDistPlot.html:95,Load,Loading,95,doc/master/classRooStats_1_1SamplingDistPlot.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1SamplingDistPlot.html,1,['Load'],['Loading']
Performance,". ROOT: RooStats::SamplingDistribution Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; RooStats::SamplingDistribution Class ReferenceRooFit » RooStats. ; This class simply holds a sampling distribution of some test statistic. ; The distribution can either be an empirical distribution (eg. the samples themselves) or a weighted set of points (eg. for the FFT method). The class supports merging. ; Definition at line 28 of file SamplingDistribution.h. Public Member Functions;  SamplingDistribution ();  Default constructor for SamplingDistribution. ;  ;  SamplingDistribution (const char *name, const char *title, const char *varName=nullptr);  SamplingDistribution constructor (with name and title) ;  ;  SamplingDistribution (const char *name, const char *title, RooDataSet &dataSet, const char *columnName=nullptr, const char *varName=nullptr);  Creates a SamplingDistribution from a RooDataSet for debugging purposes; e.g. ;  ;  SamplingDistribution (const char *name, const char *title, std::vector< double > &samplingDist, const char *varName=nullptr);  Constructor for SamplingDistribution. ;  ;  SamplingDistribution (const char *name, const char *title, std::vector< double > &samplingDist, std::vector< double > &sampleWeights, const char *varName=nullptr);  SamplingDistribution constructor. ;  ;  ~SamplingDistribution () override;  Destructor of SamplingDistribution. ;  ; void Add (const SamplingDistribution *other);  merge two sampling distributions ;  ; double CDF (double x) const;  calculate CDF as a special case of Integral(...) with lower limit equal to -inf ;  ; const std::vector< double > & GetSampleWeights () const;  Get the sampling weights. ;  ; const std::vector< double > & GetSamplingDistribution () const;  Get test statistics values. ;  ; Int_t GetSize () co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1SamplingDistribution.html:99,Load,Loading,99,doc/master/classRooStats_1_1SamplingDistribution.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1SamplingDistribution.html,1,['Load'],['Loading']
Performance,". ROOT: RooStats::SamplingSummary Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; RooStats::SamplingSummary Class Reference. . Definition at line 116 of file ConfidenceBelt.h. Public Member Functions;  SamplingSummary ();  ;  SamplingSummary (AcceptanceRegion &ar);  ; void AddAcceptanceRegion (AcceptanceRegion &ar);  ; AcceptanceRegion & GetAcceptanceRegion (Int_t index=0);  ; Int_t GetParameterPointIndex ();  ; SamplingDistribution * GetSamplingDistribution ();  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1SamplingSummary.html:94,Load,Loading,94,doc/master/classRooStats_1_1SamplingSummary.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1SamplingSummary.html,1,['Load'],['Loading']
Performance,". ROOT: RooStats::SamplingSummaryLookup Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Types |; Private Attributes |; List of all members ; RooStats::SamplingSummaryLookup Class Reference. . Definition at line 30 of file ConfidenceBelt.h. Public Member Functions;  SamplingSummaryLookup ();  ; void Add (double cl, double leftside);  ; double GetConfidenceLevel (Int_t index);  ; double GetLeftSideTailFraction (Int_t index);  ; Int_t GetLookupIndex (double cl, double leftside);  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t Dista",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1SamplingSummaryLookup.html:100,Load,Loading,100,doc/master/classRooStats_1_1SamplingSummaryLookup.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1SamplingSummaryLookup.html,1,['Load'],['Loading']
Performance,". ROOT: RooStats::SequentialProposal Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; RooStats::SequentialProposal Class ReferenceRooFit » RooStats. ; Class implementing a proposal function that samples the parameter space by moving only in one coordinate (chosen randomly) at each step. ; Definition at line 20 of file SequentialProposal.h. Public Member Functions;  SequentialProposal ();  ;  SequentialProposal (double divisor);  ; double GetProposalDensity (RooArgSet &x1, RooArgSet &x2) override;  Return the probability of proposing the point x1 given the starting point x2. ;  ; TClass * IsA () const override;  ; bool IsSymmetric (RooArgSet &x1, RooArgSet &x2) override;  Determine whether or not the proposal density is symmetric for points x1 and x2 - that is, whether the probability of reaching x2 from x1 is equal to the probability of reaching x1 from x2. ;  ; void Propose (RooArgSet &xPrime, RooArgSet &x) override;  Populate xPrime with a new proposed point. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooStats::ProposalFunction;  ProposalFunction ();  Default constructor. ;  ; virtual bool CheckParameters (RooArgSet &params);  Check the parameters for which the ProposalFunction will propose values to make sure they are all RooRealVars Return true if all objects are RooRealVars, false otherwise. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" metho",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1SequentialProposal.html:97,Load,Loading,97,doc/master/classRooStats_1_1SequentialProposal.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1SequentialProposal.html,1,['Load'],['Loading']
Performance,". ROOT: RooStats::SimpleInterval Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; List of all members ; RooStats::SimpleInterval Class ReferenceRooFit » RooStats. ; SimpleInterval is a concrete implementation of the ConfInterval interface. ; It implements simple 1-dimensional intervals in a range [a,b]. In addition, you can ask it for the upper- or lower-bound. ; Definition at line 20 of file SimpleInterval.h. Public Member Functions;  SimpleInterval (const char *name, const RooRealVar &var, double lower, double upper, double cl);  constructor from name, the Parameter of interest and lower/upper bound values ;  ;  SimpleInterval (const char *name=nullptr);  default constructor ;  ;  SimpleInterval (const SimpleInterval &other, const char *name);  default constructor ;  ; bool CheckParameters (const RooArgSet &) const override;  check if parameters are correct (i.e. they are the POI of this interval) ;  ; double ConfidenceLevel () const override;  return the confidence interval ;  ; RooArgSet * GetParameters () const override;  return a cloned list with the parameter of interest ;  ; TClass * IsA () const override;  ; bool IsInInterval (const RooArgSet &) const override;  check if parameter is in the interval ;  ; virtual double LowerLimit ();  return the interval lower limit ;  ; SimpleInterval & operator= (const SimpleInterval &other);  default constructor ;  ; void SetConfidenceLevel (double) override;  set the confidence level for the interval. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual double UpperLimit ();  return the interval upper limit ;  ;  Public Member Functions inherited from RooStats::ConfInterval;  ConfInterval (const char *name=nullptr);  constructor given name and title ;  ; ConfInterval & ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1SimpleInterval.html:93,Load,Loading,93,doc/master/classRooStats_1_1SimpleInterval.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1SimpleInterval.html,1,['Load'],['Loading']
Performance,". ROOT: RooStats::ToyMCPayload Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; RooStats::ToyMCPayload Class Reference. . Definition at line 70 of file ToyMCStudy.h. Public Member Functions;  ToyMCPayload ();  ;  ToyMCPayload (RooDataSet *sd);  ; RooDataSet * GetSamplingDistributions ();  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1ToyMCPayload.html:91,Load,Loading,91,doc/master/classRooStats_1_1ToyMCPayload.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1ToyMCPayload.html,1,['Load'],['Loading']
Performance,". ROOT: RooStats::ToyMCStudy Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; RooStats::ToyMCStudy Class ReferenceRooFit » RooStats. ; ToyMCStudy is an implementation of RooAbsStudy for toy Monte Carlo sampling. ; This class is automatically used by ToyMCSampler when given a ProofConfig. This is also its intended use case. ; Definition at line 30 of file ToyMCStudy.h. Public Member Functions;  ToyMCStudy (const char *name=""ToyMCStudy"", const char *title=""ToyMCStudy"");  need to have constructor without arguments for proof ;  ; RooAbsStudy * clone (const char *="""") const override;  ; bool execute (void) override;  ; bool finalize (void) override;  ; bool initialize (void) override;  ; TClass * IsA () const override;  ; RooDataSet * merge ();  ; void SetParamPoint (const RooArgSet &paramPoint);  ; void SetRandomSeed (unsigned int seed);  ; void SetToyMCSampler (ToyMCSampler &t);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsStudy;  RooAbsStudy ()=default;  ;  RooAbsStudy (const char *name, const char *title);  Constructor. ;  ;  RooAbsStudy (const RooAbsStudy &other);  Copy constructor. ;  ;  ~RooAbsStudy () override;  Destructor. ;  ; virtual bool attach (RooWorkspace &);  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; RooLinkedList * detailedData ();  ; virtual void dump ();  ; void releaseDetailData ();  ; void storeDetailedOutput (bool flag);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; RooDataSet * summaryData ();  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &na",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1ToyMCStudy.html:89,Load,Loading,89,doc/master/classRooStats_1_1ToyMCStudy.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1ToyMCStudy.html,1,['Load'],['Loading']
Performance,". ROOT: RooStats::UniformProposal Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; RooStats::UniformProposal Class ReferenceRooFit » RooStats. ; UniformProposal is a concrete implementation of the ProposalFunction interface for use with a Markov Chain Monte Carlo algorithm. ; This proposal function is a uniformly random distribution over the parameter space. The proposal ignores the current point when it proposes a new point. The proposal function is symmetric, though it may not cause a MetropolisHastings run to converge as quickly as other proposal functions. ; Definition at line 25 of file UniformProposal.h. Public Member Functions;  UniformProposal ()=default;  ; double GetProposalDensity (RooArgSet &x1, RooArgSet &x2) override;  Return the probability of proposing the point x1 given the starting point x2. ;  ; TClass * IsA () const override;  ; bool IsSymmetric (RooArgSet &x1, RooArgSet &x2) override;  Determine whether or not the proposal density is symmetric for points x1 and x2 - that is, whether the probability of reaching x2 from x1 is equal to the probability of reaching x1 from x2. ;  ; void Propose (RooArgSet &xPrime, RooArgSet &x) override;  Populate xPrime with a new proposed point. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooStats::ProposalFunction;  ProposalFunction ();  Default constructor. ;  ; virtual bool CheckParameters (RooArgSet &params);  Check the parameters for which the ProposalFunction will propose values to make sure they are all RooRealVars Return true if all objects are RooRealVars, false otherwise. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1UniformProposal.html:94,Load,Loading,94,doc/master/classRooStats_1_1UniformProposal.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1UniformProposal.html,1,['Load'],['Loading']
Performance,". ROOT: RooStats::UpperLimitMCSModule Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; RooStats::UpperLimitMCSModule Class ReferenceRooFit » RooStats. ; This class allow to compute in the ToyMcStudy framework the ProfileLikelihood upper limit for each toy-MC sample generated. ; Definition at line 27 of file UpperLimitMCSModule.h. Public Member Functions;  UpperLimitMCSModule (const RooArgSet *poi, double CL=0.95);  ;  UpperLimitMCSModule (const UpperLimitMCSModule &other);  Copy constructor. ;  ;  ~UpperLimitMCSModule () override;  Destructor. ;  ; RooDataSet * finalizeRun () override;  Return auxiliary dataset with results of delta(-log(L)) calculations of this module so that it is merged with RooMCStudy::fitParDataSet() by RooMCStudy. ;  ; bool initializeInstance () override;  Initialize module after attachment to RooMCStudy object. ;  ; bool initializeRun (Int_t) override;  Initialize module at beginning of RooCMStudy run. ;  ; TClass * IsA () const override;  ; bool processBetweenGenAndFit (Int_t) override;  Method called after generation of toy data sample and resetting of fit parameters to initial values and before actual fit is performed. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsMCStudyModule;  RooAbsMCStudyModule (const char *name, const char *title);  Constructor. ;  ;  RooAbsMCStudyModule (const RooAbsMCStudyModule &other);  Copy constructor. ;  ; bool doInitializeInstance (RooMCStudy &);  Initializer method called upon attachment to given RooMCStudy object. ;  ; virtual bool processAfterFit (Int_t);  Method called after fit has been performed. ;  ; virtual bool processBeforeGen (Int_t);  Method called after resetting of generator par",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1UpperLimitMCSModule.html:98,Load,Loading,98,doc/master/classRooStats_1_1UpperLimitMCSModule.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1UpperLimitMCSModule.html,1,['Load'],['Loading']
Performance,". ROOT: RooStepFunction Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; RooStepFunction Class ReferenceRooFit » RooFit. ; The Step Function is a binned function whose parameters are the heights of each bin. ; This function may be used to describe oddly shaped distributions. A RooStepFunction has free parameters. In particular, any statistical uncertainty used to model this efficiency may be understood with these free parameters.; Note that in contrast to RooParametricStepFunction, a RooStepFunction is NOT a PDF, but a not-normalized function (RooAbsReal) ; Definition at line 26 of file RooStepFunction.h. Public Member Functions;  RooStepFunction ();  ;  RooStepFunction (const char *name, const char *title, RooAbsReal &x, const RooArgList &coefList, const RooArgList &limits, bool interpolate=false);  Constructor. ;  ;  RooStepFunction (const RooStepFunction &other, const char *name=nullptr);  Copy constructor. ;  ; const RooArgList & boundaries ();  ; TObject * clone (const char *newname) const override;  ; const RooArgList & coefficients ();  ; TClass * IsA () const override;  ; std::list< double > * plotSamplingHint (RooAbsRealLValue &obs, double xlo, double xhi) const override;  Interface for returning an optional hint for initial sampling points when constructing a curve projected on observable obs. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit=""""",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStepFunction.html:84,Load,Loading,84,doc/master/classRooStepFunction.html,https://root.cern,https://root.cern/doc/master/classRooStepFunction.html,1,['Load'],['Loading']
Performance,". ROOT: RooStringVar Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; RooStringVar Class ReferencefinalRooFit » RooFit Core. ; A RooAbsArg implementing string values. ; Definition at line 23 of file RooStringVar.h. Public Member Functions;  RooStringVar ();  ;  RooStringVar (const char *name, const char *title, const char *value, Int_t size=1024);  Constructor with initial value. The size argument is ignored. ;  ;  RooStringVar (const RooStringVar &other, const char *name=nullptr);  Copy constructor. ;  ; TObject * clone (const char *newname) const override;  ; RooFit::OwningPtr< RooAbsArg > createFundamental (const char *newname=nullptr) const override;  Create a fundamental-type object that stores our type of value. ;  ; const char * getVal () const;  ; TClass * IsA () const override;  ; bool isFundamental () const override;  Is this object a fundamental type that can be added to a dataset? Fundamental-type subclasses override this method to return true. ;  ; bool isIdentical (const RooAbsArg &other, bool) const override;  ; virtual operator TString ();  ; virtual RooAbsArg & operator= (const char *newVal);  ; bool operator== (const char *val) const;  ; bool operator== (const RooAbsArg &other) const override;  ; void printValue (std::ostream &os) const override;  Interface to print value of object. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose) override;  Read object contents from given stream. ;  ; void setVal (const char *newVal);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool) const override;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsAr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStringVar.html:81,Load,Loading,81,doc/master/classRooStringVar.html,https://root.cern,https://root.cern/doc/master/classRooStringVar.html,1,['Load'],['Loading']
Performance,". ROOT: RooStringView Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; RooStringView Class Reference. ; The RooStringView is a wrapper around a C-style string that can also be constructed from a std::string or a TString. ; As such, it serves as a drop-in replacement for const char* in public RooFit interfaces, keeping the possibility to pass a C-style string without copying but also accepting a std::string. ; Definition at line 27 of file RooStringView.h. Public Member Functions;  RooStringView (const char *str);  ;  RooStringView (std::string &&str);  ;  RooStringView (std::string const &str);  ;  RooStringView (TString const &str);  ; const char * c_str () const;  ;  operator const char * ();  . Private Attributes; const char * _cstr;  ; std::shared_ptr< std::string > _strp;  . #include <RooStringView.h>; Constructor & Destructor Documentation. ◆ RooStringView() [1/4]. RooStringView::RooStringView ; (; const char * ; str). inline . Definition at line 29 of file RooStringView.h. ◆ RooStringView() [2/4]. RooStringView::RooStringView ; (; TString const & ; str). inline . Definition at line 30 of file RooStringView.h. ◆ RooStringView() [3/4]. RooStringView::RooStringView ; (; std::string const & ; str). inline . Definition at line 31 of file RooStringView.h. ◆ RooStringView() [4/4]. RooStringView::RooStringView ; (; std::string && ; str). inline . Definition at line 33 of file RooStringView.h. Member Function Documentation. ◆ c_str(). const char * RooStringView::c_str ; (; ); const. inline . Definition at line 34 of file RooStringView.h. ◆ operator const char *(). RooStringView::operator const char * ; (; ). inline . Definition at line 35 of file RooStringView.h. Member Data Documentation. ◆ _cstr. const char* RooStringView::_cstr. private . Definition at line 40 of file RooStringView.h. ◆ _strp. std::shared_ptr<std::string> Roo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStringView.html:82,Load,Loading,82,doc/master/classRooStringView.html,https://root.cern,https://root.cern/doc/master/classRooStringView.html,1,['Load'],['Loading']
Performance,". ROOT: RooStudyManager Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooStudyManager Class ReferenceRooFit » RooFit Core. ; Utility class to manage studies that consist of repeated applications of generate-and-fit operations on a workspace. ; Definition at line 33 of file RooStudyManager.h. Public Member Functions;  RooStudyManager (const char *studyPackFileName);  ;  RooStudyManager (RooWorkspace &w);  ;  RooStudyManager (RooWorkspace &w, RooAbsStudy &study);  ; void addStudy (RooAbsStudy &study);  ; TClass * IsA () const override;  ; void prepareBatchInput (const char *studyName, Int_t nExpPerJob, bool unifiedInput);  ; void processBatchOutput (const char *filePat);  ; void run (Int_t nExperiments);  ; void runProof (Int_t nExperiments, const char *proofHost="""", bool showGui=true);  Open PROOF-Lite session. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; std::list< RooAbsStudy * > & studies ();  ; RooWorkspace & wspace ();  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const overri",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStudyManager.html:84,Load,Loading,84,doc/master/classRooStudyManager.html,https://root.cern,https://root.cern/doc/master/classRooStudyManager.html,1,['Load'],['Loading']
Performance,". ROOT: RooStudyPackage Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; RooStudyPackage Class ReferenceRooFit » RooFit Core. ; Utility class to manage studies that consist of repeated applications of generate-and-fit operations on a workspace. ; Definition at line 26 of file RooStudyPackage.h. Public Member Functions;  RooStudyPackage ()=default;  ;  RooStudyPackage (const RooStudyPackage &);  ;  RooStudyPackage (RooWorkspace &w);  ; void addStudy (RooAbsStudy &study);  ; TObject * Clone (const char *="""") const override;  Make a clone of an object using the Streamer facility. ;  ; void driver (Int_t nExperiments);  ; void exportData (TList *olist, Int_t seqno);  ; void finalize ();  Finalize all studies. ;  ; void initialize ();  Make iterator over copy of studies attached to workspace. ;  ; Int_t initRandom ();  Choose random seed for this process in case pass a definite seed to have it deterministic use also worker number. ;  ; TClass * IsA () const override;  ; void run (Int_t nExperiments);  ; void runOne ();  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; std::list< RooAbsStudy * > & studies ();  ; RooWorkspace & wspace ();  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStudyPackage.html:84,Load,Loading,84,doc/master/classRooStudyPackage.html,https://root.cern,https://root.cern/doc/master/classRooStudyPackage.html,1,['Load'],['Loading']
Performance,". ROOT: RooSuperCategory Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; RooSuperCategory Class ReferenceRooFit » RooFit Core. ; Joins several RooAbsCategoryLValue objects into a single category. ; For this, it uses a RooMultiCategory, which takes care of enumerating all the permutations of possible states. In addition, the super category derives from RooAbsCategoryLValue, i.e., it allows for setting its state (opposed to the RooMultiCategory, which just reacts to the states of its subcategories). This requires that all input categories are lvalues as well. This is because a modification of the state of the supercategory will propagate to its input categories. ; Definition at line 27 of file RooSuperCategory.h. Public Member Functions;  RooSuperCategory ();  ;  RooSuperCategory (const char *name, const char *title, const RooArgSet &inputCatList);  Construct a super category from other categories. ;  ;  RooSuperCategory (const RooSuperCategory &other, const char *name=nullptr);  Copy constructor. ;  ; TObject * clone (const char *newname) const override;  ; bool hasRange (const char *rangeName) const override;  Check that any of the input categories has a range with the given name. ;  ; const RooArgSet & inputCatList () const;  ; bool inRange (const char *rangeName) const override;  Check that all input category states are in the given range. ;  ; TClass * IsA () const override;  ; void printMultiline (std::ostream &os, Int_t content, bool verbose=false, TString indent="""") const override;  Print the state of this object to the specified output stream. ;  ; bool setIndex (const std::pair< std::string, value_type > &nameIdxPair, bool printError=true);  Change category state to state specified by another category state. ;  ; bool setIndex (value_type index, bool prin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooSuperCategory.html:85,Load,Loading,85,doc/master/classRooSuperCategory.html,https://root.cern,https://root.cern/doc/master/classRooSuperCategory.html,1,['Load'],['Loading']
Performance,". ROOT: RooTFnBinding Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooTFnBinding Class ReferenceRooFit » RooFit. ; Use TF1, TF2, TF3 functions as RooFit objects. ; To create a function binding, either directly invoke RooTFnBinding::RooTFnBinding() or use the convenience functions RooFit::bindFunction(). ; Definition at line 20 of file RooTFnBinding.h. Public Member Functions;  RooTFnBinding ()=default;  ;  RooTFnBinding (const char *name, const char *title, TF1 *func, const RooArgList &list);  ;  RooTFnBinding (const char *name, const char *title, TF1 *func, const RooArgList &list, const RooArgList &plist);  ;  RooTFnBinding (const RooTFnBinding &other, const char *name=nullptr);  ; TObject * clone (const char *newname) const override;  ; const TF1 & function () const;  ; TClass * IsA () const override;  ; const RooArgList & observables () const;  ; const RooArgList & parameters () const;  ; void printArgs (std::ostream &os) const override;  Print object arguments, ie its proxies. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; virtual double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const;  Implements the actual analytical integral(s) advert",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooTFnBinding.html:82,Load,Loading,82,doc/master/classRooTFnBinding.html,https://root.cern,https://root.cern/doc/master/classRooTFnBinding.html,1,['Load'],['Loading']
Performance,". ROOT: RooTFnPdfBinding Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooTFnPdfBinding Class ReferenceRooFit » RooFit. . Definition at line 20 of file RooTFnPdfBinding.h. Public Member Functions;  RooTFnPdfBinding ()=default;  ;  RooTFnPdfBinding (const char *name, const char *title, TF1 *func, const RooArgList &list);  ;  RooTFnPdfBinding (const RooTFnPdfBinding &other, const char *name=nullptr);  ; TObject * clone (const char *newname) const override;  ; TClass * IsA () const override;  ; void printArgs (std::ostream &os) const override;  Print object arguments, ie its proxies. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsPdf;  RooAbsPdf ();  Default constructor. ;  ;  RooAbsPdf (const char *name, const char *title, double minVal, double maxVal);  Constructor with name, title, and plot range. ;  ;  RooAbsPdf (const char *name, const char *title=nullptr);  Constructor with name and title only. ;  ;  ~RooAbsPdf () override;  Destructor. ;  ; double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Analytical integral with normalization (see RooAbsReal::analyticalIntegralWN() for further information). ;  ; virtual RooAbsGenContext * autoGenContext (const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false, bool autoBinned=true, const char *binnedTag="""") const;  ; virtual RooAbsGenContext * binnedGenContext (const RooArgSet &vars, bool verbose=false) const;  Return a binned generator context. ;  ; bool canBeExtended () const;  If true, PDF can provide extended likelihood term. ;  ; std::unique_ptr< RooA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooTFnPdfBinding.html:85,Load,Loading,85,doc/master/classRooTFnPdfBinding.html,https://root.cern,https://root.cern/doc/master/classRooTFnPdfBinding.html,1,['Load'],['Loading']
Performance,". ROOT: RooTable Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; RooTable Class ReferenceabstractRooFit » RooFit Core. ; Abstract interface for table objects. ; Table objects are the category equivalent of RooPlot objects (which are used for real-valued objects) ; Definition at line 32 of file RooTable.h. Public Member Functions;  RooTable ();  ;  RooTable (const char *name, const char *title);  ;  RooTable (const RooTable &other)=default;  ; virtual void fill (RooAbsCategory &cat, double weight=1.0)=0;  ; TClass * IsA () const override;  ; virtual bool isIdentical (const RooTable &other, bool verbose)=0;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooTable.html:77,Load,Loading,77,doc/master/classRooTable.html,https://root.cern,https://root.cern/doc/master/classRooTable.html,1,['Load'],['Loading']
Performance,". ROOT: RooTemplateProxy< T > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; List of all members ; RooTemplateProxy< T > Class Template ReferenceRooFit » RooFit Core. ; template<class T>; class RooTemplateProxy< T >; Introduction; A RooTemplateProxy is used to hold references to other RooFit objects in an expression tree. A RooGaussian(..., x, mean, sigma) can e.g. store references to x, mean, sigma as RooTemplateProxy<RooAbsReal> _x;; RooTemplateProxy<RooAbsReal> _mean;; RooTemplateProxy<RooAbsReal> _sigma;; RooTemplateProxyDefinition RooTemplateProxy.h:152; Now, the values of these three can be accessed, and the template argument ensures that only objects that evaluate to real numbers (RooAbsReal) can be stored in such a proxy. These can e.g. be variables, PDFs and functions. To store an object that's a RooCategory, one would, for example, use RooTemplateProxy<RooCategory> _category;; Since ROOT 6.22, the proxy can be used like a pointer to an instance of the template argument. For this, it provides operator* and operator->, e.g. double oldValue = _x->getVal(normalisationSet);; *_x = 17.;; RooTemplateProxy's base class RooArgProxy registers the proxied objects as ""servers"" of the object that holds the proxy. When the value of the proxied object is changed, the owner is notified, and can recalculate its own value. Renaming or exchanging objects that serve values to the owner of the proxy is handled automatically. Modernisation of proxies in ROOT 6.22; In ROOT 6.22, the classes RooRealProxy and RooCategoryProxy were replaced by RooTemplateProxy<class T>.; Two typedefs have been defined for backward compatibility:; RooRealProxy = RooTemplateProxy<RooAbsReal>. Any generic object that converts to a real value.; RooCategoryProxy = RooTemplateProxy<RooAbsCategory>. Any category object. To modernise a class, on",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooTemplateProxy.html:99,Load,Loading,99,doc/master/classRooTemplateProxy.html,https://root.cern,https://root.cern/doc/master/classRooTemplateProxy.html,1,['Load'],['Loading']
Performance,". ROOT: RooThresholdCategory Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooThresholdCategory Class ReferenceRooFit » RooFit Core. ; A real-to-category mapping defined by a series of thresholds. ; Definition at line 24 of file RooThresholdCategory.h. Public Member Functions;  RooThresholdCategory ();  ;  RooThresholdCategory (const char *name, const char *title, RooAbsReal &inputVar, const char *defCatName=""Default"", Int_t defCatIdx=0);  Constructor with input function to be mapped and name and index of default output state of unmapped values. ;  ;  RooThresholdCategory (const RooThresholdCategory &other, const char *name=nullptr);  Copy constructor. ;  ; bool addThreshold (double upperLimit, const char *catName, Int_t catIdx=-99999);  Insert threshold at value upperLimit. ;  ; TObject * clone (const char *newname) const override;  ; TClass * IsA () const override;  ; void printMultiline (std::ostream &os, Int_t content, bool verbose=false, TString indent="""") const override;  Print info about this threshold category to the specified stream. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to given stream. ;  ;  Public Member Functions inherited from RooAbsCategory;  RooAbsCategory ();  ;  RooAbsCategory (const char *name, const char *title);  Constructor. ;  ;  RooAbsCategory (const RooAbsCategory &other, const char *name=nullptr);  Copy constructor, copies the registered category states from the original. ;  ;  ~RooAbsCategory () override;  Destructor. ;  ; std::map< std::string, value_type >::const_iterator begin () const;  Iterator for category state names. Points to p",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooThresholdCategory.html:89,Load,Loading,89,doc/master/classRooThresholdCategory.html,https://root.cern,https://root.cern/doc/master/classRooThresholdCategory.html,1,['Load'],['Loading']
Performance,". ROOT: RooTreeData Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; RooTreeData Class Reference. . Definition at line 25 of file RooTreeData.h. Public Member Functions; const TTree * GetTree () const;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class RooAbsData. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsData;  RooAbsData ();  Default constructor. ;  ;  RooAbsData (const RooAbsData &other, const char *newname=nullptr);  Copy constructor. ;  ;  RooAbsData (RooStringView name, RooStringView title, const RooArgSet &vars, RooAbsDataStore *store=nullptr);  Constructor from a set of variables. ;  ;  ~RooAbsData () override;  Destructor. ;  ; virtual void add (const RooArgSet &row, double weight=1)=0;  ; void addOwnedComponent (const char *idxlabel, RooAbsData &data);  ; void attachBuffers (const RooArgSet &extObs);  ; bool canSplitFast () const;  ; virtual bool changeObservableName (const char *from, const char *to);  ; void checkInit () const;  ; virtual void convertToTreeStore ();  Convert vector-based storage to tree-based storage. ;  ; void convertToVectorStore ();  Convert tree-based storage to vector-based storage. ;  ; double correlation (RooRealVar &x, RooRealVar &y, const char *cutSpec=nullptr, const char *cutRange=nullptr) const;  ; RooFit::OwningPtr< TMatrixDSym > correlationMatrix (const char *cutSpec=nullptr, const char *cutRange=nullptr) const;  ; RooFit::OwningPtr< TMatrixDSym > correlationMatrix (const RooArgList &vars, const char *cutSpec=nullptr, const char *cutRange=nullptr) const;  ; double covariance (RooRealVar &x, RooRealVar &y, const char *cutSpec=nullptr, const char *cutRange=nullptr) const;  ; RooFit::OwningPtr< TMatrixDSym > covarianceMatrix (const c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooTreeData.html:80,Load,Loading,80,doc/master/classRooTreeData.html,https://root.cern,https://root.cern/doc/master/classRooTreeData.html,1,['Load'],['Loading']
Performance,". ROOT: RooTreeDataStore Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; Static Private Attributes |; Friends |; List of all members ; RooTreeDataStore Class ReferenceRooFit » RooFit Core. ; TTree-backed data storage. ; When a file is opened before creating the data storage, the storage will be file-backed. This reduces memory pressure because it allows storing the data in the file and reading it on demand. For a completely memory-backed storage, which is faster than the file-backed storage, RooVectorDataStore can be used.; With tree-backed storage, the tree can be found in the file with the name RooTreeDataStore_name_title for a dataset created as RooDataSet(""name"", ""title"", ...).; NoteA file needs to be opened before creating the data storage to enable file-backed storage. TFile outputFile(""filename.root"", ""RECREATE"");; RooAbsData::setDefaultStorageType(RooAbsData::Tree);; RooDataSet mydata(...);; RooAbsData::setDefaultStorageTypestatic void setDefaultStorageType(StorageType s)Definition RooAbsData.cxx:130; RooAbsData::Tree@ TreeDefinition RooAbsData.h:278; RooDataSetContainer class to hold unbinned data.Definition RooDataSet.h:33; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53. One can also change between TTree- and std::vector-backed storage using RooAbsData::convertToTreeStore() and RooAbsData::convertToVectorStore(). ; Definition at line 34 of file RooTreeDataStore.h. Public Member Functions;  RooTreeDataStore ();  ;  RooTreeDataStore (const RooTreeDataStore &other, const char *newname=nullptr);  ;  RooTreeDataStore (const RooTreeDataStore &other, const RooArgSet &vars, const char *newname=nullptr);  ;  RooTreeDataStore (RooStringView name, RooStringView title, const RooArgSet &vars, const char *wg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooTreeDataStore.html:85,Load,Loading,85,doc/master/classRooTreeDataStore.html,https://root.cern,https://root.cern/doc/master/classRooTreeDataStore.html,1,['Load'],['Loading']
Performance,". ROOT: RooTruthModel Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; List of all members ; RooTruthModel Class ReferenceRooFit » RooFit Core. ; Implements a RooResolution model that corresponds to a delta function. ; The truth model supports all basis functions because it evaluates each basis function as as a RooFormulaVar. The 6 basis functions used in B mixing and decay and 2 basis functions used in D mixing have been hand coded for increased execution speed. ; Definition at line 21 of file RooTruthModel.h. Public Member Functions;  RooTruthModel ()=default;  ;  RooTruthModel (const char *name, const char *title, RooAbsRealLValue &x);  Constructor of a truth resolution model, i.e. a delta function in observable 'xIn'. ;  ;  RooTruthModel (const RooTruthModel &other, const char *name=nullptr);  ; double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const override;  Implement analytical integrals when used as p.d.f and for compiled basis functions. ;  ; Int_t basisCode (const char *name) const override;  Return basis code for given basis definition string. ;  ; bool canComputeBatchWithCuda () const override;  ; TObject * clone (const char *newname) const override;  ; void doEval (RooFit::EvalContext &) const override;  Base function for computing multiple values of a RooAbsReal. ;  ; void generateEvent (Int_t code) override;  Implement internal generator for observable x, x=0 for all events following definition of delta function. ;  ; Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const override;  Advertise analytical integrals for compiled basis functions and when used as p.d.f without basis function. ;  ; Int_t getGenerator (const RooArgSet &directVars, RooArgSet &generateVars, bool staticInitOK=true) const override;  Advertise inter",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooTruthModel.html:82,Load,Loading,82,doc/master/classRooTruthModel.html,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html,1,['Load'],['Loading']
Performance,". ROOT: RooUnblindCPAsymVar Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooUnblindCPAsymVar Class ReferenceRooFit » RooFit. ; Implementation of BlindTools' CP asymmetry blinding method A RooUnblindCPAsymVar object is a real valued function object, constructed from a blind value holder and a set of unblinding parameters. ; When supplied to a PDF in lieu of a regular parameter, the blind value holder supplied to the unblinded objects will in a fit be minimized to blind value corresponding to the actual minimum of the parameter. The transformation is chosen such that the the error on the blind parameters is identical to that of the unblind parameter ; Definition at line 27 of file RooUnblindCPAsymVar.h. Public Member Functions;  RooUnblindCPAsymVar ();  Default constructor. ;  ;  RooUnblindCPAsymVar (const char *name, const char *title, const char *blindString, RooAbsReal &cpasym);  Constructor from a given RooAbsReal (to hold the blind value) and a set of blinding parameters. ;  ;  RooUnblindCPAsymVar (const char *name, const char *title, const char *blindString, RooAbsReal &cpasym, RooAbsCategory &blindState);  Constructor from a given RooAbsReal (to hold the blind value) and a set of blinding parameters. ;  ;  RooUnblindCPAsymVar (const RooUnblindCPAsymVar &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooUnblindCPAsymVar () override;  Copy constructor. ;  ; TObject * clone (const char *newname) const override;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsHiddenReal;  RooAbsHiddenReal ();  ;  RooAbsHiddenReal (const char *name, const char *title, const char *unit=""""",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooUnblindCPAsymVar.html:88,Load,Loading,88,doc/master/classRooUnblindCPAsymVar.html,https://root.cern,https://root.cern/doc/master/classRooUnblindCPAsymVar.html,1,['Load'],['Loading']
Performance,". ROOT: RooUnblindOffset Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooUnblindOffset Class ReferenceRooFit » RooFit. ; Implementation of BlindTools' offset blinding method A RooUnblindOffset object is a real valued function object, constructed from a blind value holder and a set of unblinding parameters. ; When supplied to a PDF in lieu of a regular parameter, the blind value holder supplied to the unblinded objects will in a fit be minimized to blind value corresponding to the actual minimum of the parameter. The transformation is chosen such that the the error on the blind parameters is identical to that of the unblind parameter ; Definition at line 23 of file RooUnblindOffset.h. Public Member Functions;  RooUnblindOffset ()=default;  ;  RooUnblindOffset (const char *name, const char *title, const char *blindString, double scale, RooAbsReal &blindValue);  Constructor from a given RooAbsReal (to hold the blind value) and a set of blinding parameters. ;  ;  RooUnblindOffset (const char *name, const char *title, const char *blindString, double scale, RooAbsReal &blindValue, RooAbsCategory &blindState);  Constructor from a given RooAbsReal (to hold the blind value) and a set of blinding parameters. ;  ;  RooUnblindOffset (const RooUnblindOffset &other, const char *name=nullptr);  Copy constructor. ;  ; TObject * clone (const char *newname) const override;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsHiddenReal;  RooAbsHiddenReal ();  ;  RooAbsHiddenReal (const char *name, const char *title, const char *unit="""");  Constructor. ;  ;  RooAbsHiddenReal (const char *name, const char *t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooUnblindOffset.html:85,Load,Loading,85,doc/master/classRooUnblindOffset.html,https://root.cern,https://root.cern/doc/master/classRooUnblindOffset.html,1,['Load'],['Loading']
Performance,". ROOT: RooUnblindPrecision Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooUnblindPrecision Class ReferenceRooFit » RooFit. ; Implementation of BlindTools' precision blinding method A RooUnblindPrecision object is a real valued function object, constructed from a blind value holder and a set of unblinding parameters. ; When supplied to a PDF in lieu of a regular parameter, the blind value holder supplied to the unblinded objects will in a fit be minimized to blind value corresponding to the actual minimum of the parameter. The transformation is chosen such that the the error on the blind parameters is identical to that of the unblind parameter ; Definition at line 26 of file RooUnblindPrecision.h. Public Member Functions;  RooUnblindPrecision ()=default;  ;  RooUnblindPrecision (const char *name, const char *title, const char *blindString, double centralValue, double scale, RooAbsReal &blindValue, bool sin2betaMode=false);  Constructor from a given RooAbsReal (to hold the blind value) and a set of blinding parameters. ;  ;  RooUnblindPrecision (const char *name, const char *title, const char *blindString, double centralValue, double scale, RooAbsReal &blindValue, RooAbsCategory &blindState, bool sin2betaMode=false);  Constructor from a given RooAbsReal (to hold the blind value) and a set of blinding parameters. ;  ;  RooUnblindPrecision (const RooUnblindPrecision &other, const char *name=nullptr);  Copy constructor. ;  ; TObject * clone (const char *newname) const override;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsHiddenReal;  RooAbsHiddenReal ();  ;  RooAbsHiddenReal (const ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooUnblindPrecision.html:88,Load,Loading,88,doc/master/classRooUnblindPrecision.html,https://root.cern,https://root.cern/doc/master/classRooUnblindPrecision.html,1,['Load'],['Loading']
Performance,". ROOT: RooUnblindUniform Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooUnblindUniform Class ReferenceRooFit » RooFit. ; Implementation of BlindTools' offset blinding method. ; A RooUnblindUniform object is a real-valued function object, constructed from a parameter to be blinded and a set of config parameters to change the blinding method. When supplied to a PDF in lieu of the regular parameter, a transformation will be applied such that the likelihood is computed with the actual value of the parameter, but RooFit (, the user, MINUIT) see only the transformed (blinded) value. The transformation is chosen such that the error of the blind parameter is identical to that of the original parameter. ; Definition at line 23 of file RooUnblindUniform.h. Public Member Functions;  RooUnblindUniform ()=default;  ;  RooUnblindUniform (const char *name, const char *title, const char *blindString, double scale, RooAbsReal &blindValue);  Constructor from a given RooAbsReal (to hold the blinded value) and a set of blinding parameters. ;  ;  RooUnblindUniform (const RooUnblindUniform &other, const char *name=nullptr);  Copy constructor. ;  ; TObject * clone (const char *newname) const override;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsHiddenReal;  RooAbsHiddenReal ();  ;  RooAbsHiddenReal (const char *name, const char *title, const char *unit="""");  Constructor. ;  ;  RooAbsHiddenReal (const char *name, const char *title, RooAbsCategory &blindState, const char *unit="""");  Constructor. ;  ;  RooAbsHiddenReal (const RooAbsHiddenReal &other, const char *name=nullptr);  Copy constructor. ;  ; do",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooUnblindUniform.html:86,Load,Loading,86,doc/master/classRooUnblindUniform.html,https://root.cern,https://root.cern/doc/master/classRooUnblindUniform.html,1,['Load'],['Loading']
Performance,". ROOT: RooUniform Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooUniform Class ReferenceRooFit » RooFit. ; Flat p.d.f. ; in N dimensions ; Definition at line 24 of file RooUniform.h. Public Member Functions;  RooUniform ();  ;  RooUniform (const char *name, const char *title, const RooArgSet &_x);  ;  RooUniform (const RooUniform &other, const char *name=nullptr);  ; double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const override;  Implement analytical integral. ;  ; std::string buildCallToAnalyticIntegral (Int_t code, const char *rangeName, RooFit::Detail::CodeSquashContext &ctx) const override;  This function defines the analytical integral translation for the class. ;  ; TObject * clone (const char *newname) const override;  ; void generateEvent (Int_t code) override;  Implement internal generator. ;  ; Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const override;  Advertise analytical integral. ;  ; Int_t getGenerator (const RooArgSet &directVars, RooArgSet &generateVars, bool staticInitOK=true) const override;  Advertise internal generator. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void translate (RooFit::Detail::CodeSquashContext &ctx) const override;  This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ;  ;  Public Member Functions inherited from RooAbsPdf;  RooAbsPdf ();  Default constructor. ;  ;  RooAbsPdf (const char *name, const char *title, double minVal, double maxVal);  Constructor with name, title, and plot range. ;  ;  RooAbsPdf (const char *name, const ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooUniform.html:79,Load,Loading,79,doc/master/classRooUniform.html,https://root.cern,https://root.cern/doc/master/classRooUniform.html,1,['Load'],['Loading']
Performance,". ROOT: RooUniformBinning Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; RooUniformBinning Class ReferenceRooFit » RooFit Core. ; Implementation of RooAbsBinning that provides a uniform binning in 'n' bins between the range end points. ; A RooUniformBinning is 'elastic': if the range changes the binning will change accordingly, unlike e.g. the binning of class RooBinning. ; Definition at line 22 of file RooUniformBinning.h. Public Member Functions;  RooUniformBinning (const char *name=nullptr);  ;  RooUniformBinning (const RooUniformBinning &other, const char *name=nullptr);  Copy constructor. ;  ;  RooUniformBinning (double xlo, double xhi, Int_t nBins, const char *name=nullptr);  Construct range [xlo,xhi] with 'nBins' bins. ;  ; double * array () const override;  Return an array of doubles with the bin boundaries. ;  ; double averageBinWidth () const override;  ; double binCenter (Int_t bin) const override;  Return the central value of the 'i'-th fit bin. ;  ; double binHigh (Int_t bin) const override;  Return the high edge of the 'i'-th fit bin. ;  ; double binLow (Int_t bin) const override;  Return the low edge of the 'i'-th fit bin. ;  ; void binNumbers (double const *x, int *bins, std::size_t n, int coef) const override;  Return the index of the bin that encloses 'x'. ;  ; double binWidth (Int_t bin) const override;  Return the bin width (same for all bins) ;  ; RooAbsBinning * clone (const char *name=nullptr) const override;  ; double highBound () const override;  ; TClass * IsA () const override;  ; bool isUniform () const override;  ; double lowBound () const override;  ; Int_t numBoundaries () const override;  ; void setRange (double xlo, double xhi) override;  Change range to [xlo,xhi]. ;  ; void Streamer (TBuffer &) override;  Custom streamer implementing schema evolution betwe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooUniformBinning.html:86,Load,Loading,86,doc/master/classRooUniformBinning.html,https://root.cern,https://root.cern/doc/master/classRooUniformBinning.html,1,['Load'],['Loading']
Performance,". ROOT: RooVectorDataStore Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; RooVectorDataStore Class ReferenceRooFit » RooFit Core. ; Uses std::vector to store data columns. ; Each of these vectors is associated to an instance of a RooAbsReal, whose values it represents. Those RooAbsReal are the observables of the dataset. In addition to the observables, a data column can be bound to a different instance of a RooAbsReal (e.g., the column ""x"" can be bound to the observable ""x"" of a computation graph using attachBuffers()). In this case, a get() operation writes the value of the requested column into the bound real.; As a faster alternative to loading values one-by-one, one can use the function getBatches(), which returns spans pointing directly to the data. ; Definition at line 41 of file RooVectorDataStore.h. Classes; class  ArraysStruct;  Output struct for the RooVectorDataStore::getArrays() helper function. More...;  ; class  CatVector;  ; class  RealFullVector;  ; class  RealVector;  . Public Member Functions;  RooVectorDataStore ();  ;  RooVectorDataStore (const RooTreeDataStore &other, const RooArgSet &vars, const char *newname=nullptr);  ;  RooVectorDataStore (const RooVectorDataStore &other, const char *newname=nullptr);  Regular copy constructor. ;  ;  RooVectorDataStore (const RooVectorDataStore &other, const RooArgSet &vars, const char *newname=nullptr);  Clone constructor, must connect internal storage to given new external set of variables. ;  ;  RooVectorDataStore (RooStringView name, RooStringView title, const RooArgSet &vars, const char *wgtVarName=nullptr);  ;  RooVectorDataStore (RooStringView name, RooStringView title, RooAbsDataStore &tds, const RooArgSet &vars, const RooFormulaVar *cutVar, const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooVectorDataStore.html:87,Load,Loading,87,doc/master/classRooVectorDataStore.html,https://root.cern,https://root.cern/doc/master/classRooVectorDataStore.html,2,"['Load', 'load']","['Loading', 'loading']"
Performance,". ROOT: RooVoigtian Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Attributes |; List of all members ; RooVoigtian Class ReferenceRooFit » RooFit. ; RooVoigtian is an efficient implementation of the convolution of a Breit-Wigner with a Gaussian, making use of the complex error function. ; RooFitCore provides two algorithms for the evaluation of the complex error function (the default CERNlib C335 algorithm, and a faster, look-up-table based method). By default, RooVoigtian employs the default (CERNlib) algorithm. Select the faster algorithm either in the constructor, or with the selectFastAlgorithm() method.; NoteThe ""width"" parameter that determines the Breit-Wigner shape represents the full width at half maximum (FWHM) of the Breit-Wigner (often referred to as \(\Gamma\) or \(2\gamma\)). ; Definition at line 22 of file RooVoigtian.h. Public Member Functions;  RooVoigtian ();  ;  RooVoigtian (const char *name, const char *title, RooAbsReal &_x, RooAbsReal &_mean, RooAbsReal &_width, RooAbsReal &_sigma, bool doFast=false);  Construct a RooVoigtian PDF, which represents the convolution of a Breit-Wigner with a Gaussian. ;  ;  RooVoigtian (const RooVoigtian &other, const char *name=nullptr);  ; TObject * clone (const char *newname) const override;  ; TClass * IsA () const override;  ; void selectDefaultAlgorithm ();  Disable the fast evaluation of the complex error function using look-up tables (default is the ""slow"" CERNlib algorithm). ;  ; void selectFastAlgorithm ();  Enable the fast evaluation of the complex error function using look-up tables (default is the ""slow"" CERNlib algorithm). ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from Ro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooVoigtian.html:80,Load,Loading,80,doc/master/classRooVoigtian.html,https://root.cern,https://root.cern/doc/master/classRooVoigtian.html,1,['Load'],['Loading']
Performance,". ROOT: RooWorkspace Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; Static Private Attributes |; Friends |; List of all members ; RooWorkspace Class ReferenceRooFit » RooFit Core. ; Persistable container for RooFit projects. ; A workspace can contain and own variables, p.d.f.s, functions and datasets. All objects that live in the workspace are owned by the workspace. The import() method enforces consistency of objects upon insertion into the workspace (e.g. no duplicate object with the same name are allowed) and makes sure all objects in the workspace are connected to each other. Easy accessor methods like pdf(), var() and data() allow to refer to the contents of the workspace by object name. The entire RooWorkspace can be saved into a ROOT TFile and organises the consistent streaming of its contents without duplication. If a RooWorkspace contains custom classes, i.e. classes not in the ROOT distribution, portability of workspaces can be enhanced by storing the source code of those classes in the workspace as well. This process is also organized by the workspace through the importClassCode() method. Seemingly random crashes when reading large workspaces; When reading or loading workspaces with deeply nested PDFs, one can encounter ouf-of-memory errors if the stack size is too small. This manifests in crashes at seemingly random locations, or in the process silently ending. Unfortunately, ROOT neither recover from this situation, nor warn or give useful instructions. When suspecting to have run out of stack memory, check ulimit -s; and try reading again. PyROOT; The RooWorkspace::import function can't be used in PyROOT because import is a reserved python keyword. For this reason, an alternative with a capitalized name is provided: workspace.Import(x). Definition at line 43 of",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooWorkspace.html:81,Load,Loading,81,doc/master/classRooWorkspace.html,https://root.cern,https://root.cern/doc/master/classRooWorkspace.html,1,['Load'],['Loading']
Performance,". ROOT: RooWorkspace::CodeRepo Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; RooWorkspace::CodeRepo Class Reference. . Definition at line 168 of file RooWorkspace.h. Classes; class  ClassFiles;  ; class  ClassRelInfo;  ; class  ExtraHeader;  . Public Member Functions;  CodeRepo (const CodeRepo &other, RooWorkspace *wspace=nullptr);  ;  CodeRepo (RooWorkspace *wspace=nullptr);  ; bool autoImportClass (TClass *tc, bool doReplace=false);  Import code of class 'tc' into the repository. ;  ; bool compileClasses ();  For all classes in the workspace for which no class definition is found in the ROOT class table extract source code stored in code repository into temporary directory set by setClassFileExportDir(), compile classes and link them with current ROOT session. ;  ; bool compiledOK () const;  ; TClass * IsA () const override;  ; std::string listOfClassNames () const;  Return STL string with last of class names contained in the code repository. ;  ; void Streamer (TBuffer &) override;  Custom streamer for the workspace. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooWorkspace_1_1CodeRepo.html:91,Load,Loading,91,doc/master/classRooWorkspace_1_1CodeRepo.html,https://root.cern,https://root.cern/doc/master/classRooWorkspace_1_1CodeRepo.html,1,['Load'],['Loading']
Performance,". ROOT: RooWorkspace::WSDir Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Friends |; List of all members ; RooWorkspace::WSDir Class Reference. . Definition at line 221 of file RooWorkspace.h. Public Member Functions;  WSDir (const char *name, const char *title, RooWorkspace *wspace);  ;  ~WSDir () override;  ; void Add (TObject *, bool) override;  Overload TDirectory interface method to prohibit insertion of objects in read-only directory workspace representation. ;  ; void Append (TObject *, bool) override;  Overload TDirectory interface method to prohibit insertion of objects in read-only directory workspace representation. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TDirectoryFile;  TDirectoryFile ();  Default TDirectoryFile constructor. ;  ;  TDirectoryFile (const char *name, const char *title, Option_t *option="""", TDirectory *motherDir=nullptr);  Create a new TDirectoryFile. ;  ;  ~TDirectoryFile () override;  Destructor. ;  ; Int_t AppendKey (TKey *key) override;  Insert key in the linked list of keys of this directory. ;  ; void Browse (TBrowser *b) override;  Browse the content of the directory. ;  ; void Build (TFile *motherFile=nullptr, TDirectory *motherDir=nullptr) override;  ; Bool_t cd () override;  Change current directory to ""this"" directory. ;  ; Bool_t cd (const char *path) override;  Change current directory the directory described by the path if given one. ;  ; TObject * CloneObject (const TObject *obj, Bool_t autoadd=kTRUE) override;  Make a clone of an object using the Streamer facility. ;  ; void Close (Option_t *option="""") override;  Delete all objects from memory and directory structure itsel",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooWorkspace_1_1WSDir.html:88,Load,Loading,88,doc/master/classRooWorkspace_1_1WSDir.html,https://root.cern,https://root.cern/doc/master/classRooWorkspace_1_1WSDir.html,1,['Load'],['Loading']
Performance,". ROOT: RooWrapperPdf Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; RooWrapperPdf Class Referencefinal. ; The RooWrapperPdf is a class that can be used to convert a function into a PDF. ; During construction, a RooAbsReal has to be passed. When this function is evaluated, the wrapper pdf will in addition evaluate its integral, and normalise the returned value. It will further ensure that negative return values are clipped at zero.; Functions calls such as analytical integral requests or plot sampling hints are simply forwarded to the RooAbsReal that was passed in the constructor. ; Definition at line 24 of file RooWrapperPdf.h. Public Member Functions;  RooWrapperPdf ();  ;  RooWrapperPdf (const char *name, const char *title, RooAbsReal &inputFunction, bool selfNormalized=false);  Construct a new RooWrapperPdf. ;  ;  RooWrapperPdf (const RooWrapperPdf &other, const char *name=nullptr);  ; double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const override;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName) const override;  Analytical integral with normalization (see RooAbsReal::analyticalIntegralWN() for further information). ;  ; std::list< double > * binBoundaries (RooAbsRealLValue &obs, double xlo, double xhi) const override;  Retrieve bin boundaries if this distribution is binned in obs. ;  ; TObject * clone (const char *newname) const override;  ; bool forceAnalyticalInt (const RooAbsArg &dep) const override;  ; Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &numVars, const char *rangeName=nullptr) const override;  Interface function getAnalyticalIntergral advertises the analytical integrals that are supp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooWrapperPdf.html:82,Load,Loading,82,doc/master/classRooWrapperPdf.html,https://root.cern,https://root.cern/doc/master/classRooWrapperPdf.html,1,['Load'],['Loading']
Performance,". ROOT: SMatrix Package. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Modules ; SMatrix PackageMath. ; SMatrix is a C++ package for high performance vector and matrix computations. It can be used only in problems when the size of the matrices is known at compile time, like in the tracking reconstruction of HEP experiments. It is based on a C++ technique, called expression templates, to achieve an high level optimization. The C++ templates can be used to implement vector and matrix expressions such that these expressions can be transformed at compile time to code which is equivalent to hand optimized code in a low-level language like FORTRAN or C (see for example ref. 1); The SMatrix has been developed initially by T. Glebe of the Max-Planck-Institut, Heidelberg, as part of the HeraB analysis framework. A subset of the original package has been now incorporated in the ROOT distribution, with the aim to provide to the LHC experiments a stand-alone and high performant matrix package for reconstruction. The API of the current package differs from the original one, in order to be compliant to the ROOT coding conventions.; SMatrix contains generic Matrix and Vector classes to describe matrix and vector of arbitrary dimensions and of arbitrary type. The classes are templated on the scalar type and on the size of the matrix (number of rows and columns) or the vector. Therefore, the size has to be known at compile time. Since the release 5.10, SMatrix supports symmetric matrices using a storage class (ROOT::Math::MatRepSym) which contains only the N*(N+1)/2 independent element of a NxN symmetric matrix. It is not in the mandate of this package to provide a complete linear algebra functionality for these classes. What is provided are basic Matrix Template Functions and Vector Template Functions, such as the matrix-matrix, matrix-vector, vector-vector operations, plus some extra functionality for square matrices, like inversion, which is base",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__SMatrixGroup.html:68,Load,Loading,68,doc/master/group__SMatrixGroup.html,https://root.cern,https://root.cern/doc/master/group__SMatrixGroup.html,5,"['Load', 'optimiz', 'perform']","['Loading', 'optimization', 'optimized', 'performance', 'performant']"
Performance,. ROOT: SQL tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; SQL tutorialsTutorials. ; Examples showing the SQL classes. . Files; file  sqlcanvas.C;  This is slight modification of ntuple1.C example. ;  ; file  sqlcreatedb.C;  Create a runcatalog table in a MySQL test database. ;  ; file  sqlcreatedb.py;   Create a runcatalog table in a MySQL test database. ;  ; file  sqlfilldb.C;  Fill run catalog with nfiles entries. ;  ; file  sqlfilldb.py;   Fill run catalog with nfiles entries ;  ; file  SQLiteIPLocation.C;   This tutorial demonstrates how TSQLServer can be used to create a connection with a SQlite3 database. ;  ; file  SQLitePlatformDistribution.C;   This tutorial demonstrates how TSQLServer can be used to create a connection with a SQlite3 database. ;  ; file  SQLiteTimeVersionOfRoot.C;   This tutorial demonstrates how TSQLServer can be used to create a connection with a SQlite3 database. ;  ; file  SQLiteVersionsOfRoot.C;   This tutorial demonstrates how TSQLServer can be used to create a connection with a SQlite3 database. ;  ; file  sqlselect.C;  Query example to MySQL test database. ;  ; file  sqlselect.py;  Query example to MySQL test database. ;  ; file  sqltables.C;  This is an example illustrating how the TSQLFile class can be used. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tutorial__sql.html:66,Load,Loading,66,doc/master/group__tutorial__sql.html,https://root.cern,https://root.cern/doc/master/group__tutorial__sql.html,1,['Load'],['Loading']
Performance,". ROOT: SetWindowAttributes_t Struct Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Attributes |; List of all members ; SetWindowAttributes_t Struct Reference. ; Attributes that can be used when creating or changing a window. ; Definition at line 93 of file GuiTypes.h. Public Attributes; ULong_t fBackgroundPixel;  background pixel ;  ; Pixmap_t fBackgroundPixmap;  background or kNone or kParentRelative ;  ; ULong_t fBackingPixel;  value to use in restoring planes ;  ; ULong_t fBackingPlanes;  planes to be preserved if possible ;  ; Int_t fBackingStore;  kNotUseful, kWhenMapped, kAlways ;  ; Int_t fBitGravity;  one of bit gravity values ;  ; ULong_t fBorderPixel;  border pixel value ;  ; Pixmap_t fBorderPixmap;  border of the window ;  ; UInt_t fBorderWidth;  border width in pixels ;  ; Colormap_t fColormap;  color map to be associated with window ;  ; Cursor_t fCursor;  cursor to be displayed (or kNone) ;  ; Long_t fDoNotPropagateMask;  set of events that should not propagate ;  ; Long_t fEventMask;  set of events that should be saved ;  ; Mask_t fMask;  bit mask specifying which fields are valid ;  ; Bool_t fOverrideRedirect;  boolean value for override-redirect ;  ; Bool_t fSaveUnder;  should bits under be saved (popups)? ;  ; Int_t fWinGravity;  one of the window gravity values ;  . #include <GuiTypes.h>; Member Data Documentation. ◆ fBackgroundPixel. ULong_t SetWindowAttributes_t::fBackgroundPixel. background pixel ; Definition at line 95 of file GuiTypes.h. ◆ fBackgroundPixmap. Pixmap_t SetWindowAttributes_t::fBackgroundPixmap. background or kNone or kParentRelative ; Definition at line 94 of file GuiTypes.h. ◆ fBackingPixel. ULong_t SetWindowAttributes_t::fBackingPixel. value to use in restoring planes ; Definition at line 103 of file GuiTypes.h. ◆ fBackingPlanes. ULong_t SetWindowAttributes_t::fBackingPlanes. planes to be preserved if possible ; Definition at line 102 of file GuiTypes.h",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structSetWindowAttributes__t.html:91,Load,Loading,91,doc/master/structSetWindowAttributes__t.html,https://root.cern,https://root.cern/doc/master/structSetWindowAttributes__t.html,1,['Load'],['Loading']
Performance,". ROOT: Shapes. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Modules |; Classes ; ShapesThe Geometry Package. ; Shapes are geometrical objects that provide the basic modeling functionality. . Primitive Shapes; Navigation Methods Performed By Shapes; Creating Shapes; Dividing Shapes; Parametric Shapes. The ""shapes"" provide the definition of the local coordinate system of the volume. Any volume must have a shape. Any shape recognized by the modeller has to derive from the base **TGeoShape** class, providing methods for:. Finding out if a point defined in their local frame is contained or not by the shape;; Computing the distance to enter/exit the shape from a local point, given a known direction;; Computing the maximum distance in any direction from a local point that does NOT result in a boundary crossing of the shape (safe distance);; Computing the cosines of the normal vector to the crossed shape surface, given a starting local point and an ongoing direction. All the features above are globally managed by the modeller in order to provide navigation functionality. In addition to those, shapes have also to implement additional specific abstract methods:. Computation of the minimal box bounding the shape, given that this box have to be aligned with the local coordinates;; Algorithms for dividing the shape along a given axis. The modeller currently provides a set of 20 basic shapes, which we will call primitives. It also provides a special class allowing the creation of shapes as a result of Boolean operations between primitives. These are called composite shapes and the composition operation can be recursive (combined composites). This allows the creation of a quite large number of different shape topologies and combinations. You can have a look and run the tutorial: geodemo.C. Primitive Shapes - the general inheritance scheme; Shapes are named objects and all primitives have constructors like:; TGeoXXX(const char *name,<type> param1",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Shapes__classes.html:59,Load,Loading,59,doc/master/group__Shapes__classes.html,https://root.cern,https://root.cern/doc/master/group__Shapes__classes.html,2,"['Load', 'Perform']","['Loading', 'Performed']"
Performance,". ROOT: Special functions. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Special functionsMath » MathCore | Math » MathMore. ; Special mathematical functions. ; The naming and numbering of the functions is taken from Matt Austern, (Draft) Technical Report on Standard Library Extensions, N1687=04-0127, September 10, 2004; AuthorCreated by Andras Zsenei on Mon Nov 8 2004 . Special Functions from MathCore; double ROOT::Math::erf (double x);  Error function encountered in integrating the normal distribution. ;  ; double ROOT::Math::erfc (double x);  Complementary error function. ;  ; double ROOT::Math::tgamma (double x);  The gamma function is defined to be the extension of the factorial to real numbers. ;  ; double ROOT::Math::lgamma (double x);  Calculates the logarithm of the gamma function. ;  ; double ROOT::Math::inc_gamma (double a, double x);  Calculates the normalized (regularized) lower incomplete gamma function (lower integral) ;  ; double ROOT::Math::inc_gamma_c (double a, double x);  Calculates the normalized (regularized) upper incomplete gamma function (upper integral) ;  ; double ROOT::Math::beta (double x, double y);  Calculates the beta function. ;  ; double ROOT::Math::inc_beta (double x, double a, double b);  Calculates the normalized (regularized) incomplete beta function. ;  ; double ROOT::Math::sinint (double x);  Calculates the sine integral. ;  ; double ROOT::Math::cosint (double x);  Calculates the real part of the cosine integral Re(Ci). ;  . Special Functions from MathMore; double ROOT::Math::assoc_laguerre (unsigned n, double m, double x);  Computes the generalized Laguerre polynomials for \( n \geq 0, m > -1 \). ;  ; double ROOT::Math::assoc_legendre (unsigned l, unsigned m, double x);  Computes the associated Legendre polynomials. ;  ; double ROOT::Math::comp_ellint_1 (double k);  Calculates the complete elliptic integral of the first kind. ;  ; double ROOT::Math::comp_ellint_2 (double k);  Calculates the c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__SpecFunc.html:70,Load,Loading,70,doc/master/group__SpecFunc.html,https://root.cern,https://root.cern/doc/master/group__SpecFunc.html,1,['Load'],['Loading']
Performance,. ROOT: Spectrum tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; Spectrum tutorialsTutorials. ; Examples showing the TSpectrum and TSpectrumPainter usage. . Files; file  Background_compton.C;   Example to illustrate the background estimator (class TSpectrum) including Compton edges. ;  ; file  Background_decr.C;   Example to illustrate the background estimator (class TSpectrum). ;  ; file  Background_gamma256.C;   Example to illustrate the background estimator (class TSpectrum2). ;  ; file  Background_gamma64.C;   Example to illustrate the background estimator (class TSpectrum2). ;  ; file  Background_incr.C;   Example to illustrate the background estimator (class TSpectrum). ;  ; file  Background_order.C;   Example to illustrate the influence of the clipping filter difference order on the estimated background. ;  ; file  Background_smooth.C;   Example to illustrate the background estimator (class TSpectrum) including Compton edges. ;  ; file  Background_synt256.C;   Example to illustrate the background estimator (class TSpectrum2). ;  ; file  Background_width.C;   Example to illustrate the influence of the clipping window width on the estimated background. ;  ; file  Background_width2.C;   Example to illustrate the influence of the clipping window width on the estimated background. ;  ; file  Deconvolution.C;   Example to illustrate deconvolution function (class TSpectrum). ;  ; file  Deconvolution2_1.C;   Example to illustrate the Gold deconvolution (class TSpectrum2). ;  ; file  Deconvolution2_2.C;   Example to illustrate the Gold deconvolution (class TSpectrum2). ;  ; file  Deconvolution2_HR.C;   Example to illustrate boosted Gold deconvolution (class TSpectrum2). ;  ; file  Deconvolution_wide.C;   Example to illustrate deconvolution function (class TSpectrum). ;  ; file  Deconvolution_wide_boost.C;   Example to illustrate deconvolution function (class TSpectrum). ;  ; file  DeconvolutionRL_wide.C;   Example to ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tutorial__spectrum.html:71,Load,Loading,71,doc/master/group__tutorial__spectrum.html,https://root.cern,https://root.cern/doc/master/group__tutorial__spectrum.html,1,['Load'],['Loading']
Performance,". ROOT: Statistical functions from truncated distributions. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Functions ; Statistical functions from truncated distributionsMath » MathCore | Math » MathMore » Statistical functions. ; Statistical functions for the truncated distributions. ; Examples of such functions are the first or the second momentum of the truncated distribution. In the case of the Landau, first and second momentum functions are provided for the Landau distribution truncated only on the right side. These functions are defined in the header file Math/ProbFunc.h or in the global one including all statistical functions Math/StatFunc.h . Functions; double ROOT::Math::landau_xm1 (double x, double xi=1, double x0=0);  First moment (mean) of the truncated Landau distribution. ;  ; double ROOT::Math::landau_xm2 (double x, double xi=1, double x0=0);  Second moment of the truncated Landau distribution. ;  . Function Documentation. ◆ landau_xm1(). double ROOT::Math::landau_xm1 ; (; double ; x, . double ; xi = 1, . double ; x0 = 0 . ). First moment (mean) of the truncated Landau distribution. . \[ \frac{1}{D (x)} \int_{-\infty}^{x} t\, p(t) d t \]. where \(p(x)\) is the Landau distribution and \(D(x)\) its cumulative distribution function.; For detailed description see K.S. Kölbig and B. Schorr, A program package for the Landau distribution, Computer Phys. Comm. 31 (1984) 97-111 [Erratum-ibid. 178 (2008) 972]. The same algorithms as in CERNLIB (XM1LAN) is used; Parameters. xThe argument \(x\) ; xiThe width parameter \(\xi\) ; x0The location parameter \(x_0\) . Definition at line 409 of file ProbFuncMathCore.cxx. ◆ landau_xm2(). double ROOT::Math::landau_xm2 ; (; double ; x, . double ; xi = 1, . double ; x0 = 0 . ). Second moment of the truncated Landau distribution. . \[ \frac{1}{D (x)} \int_{-\infty}^{x} t^2\, p(t) d t \]. where \(p(x)\) is the Landau distribution and \(D(x)\) its cumulative distribution function.; For detailed ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__TruncFunc.html:103,Load,Loading,103,doc/master/group__TruncFunc.html,https://root.cern,https://root.cern/doc/master/group__TruncFunc.html,1,['Load'],['Loading']
Performance,". ROOT: Statistical functions. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Modules |; Namespaces |; Classes ; Statistical functionsMath » MathCore | Math » MathMore. ; Probability density functions, cumulative distribution functions and their inverses (quantiles) for various statistical distributions (continuous and discrete). ; Whenever possible the conventions followed are those of the CRC Concise Encyclopedia of Mathematics, Second Edition (or Mathworld). By convention the distributions are centered around 0, so for example in the case of a Gaussian there is no parameter mu. The user must calculate the shift themselves if they wish.; MathCore provides the majority of the probability density functions, of the cumulative distributions and of the quantiles (inverses of the cumulatives). Additional distributions are also provided by the MathMore library. . Modules;  Probability Density Functions (PDF);  Probability density functions of various statistical distributions (continuous and discrete). ;  ;  Cumulative Distribution Functions (CDF);  Cumulative distribution functions of various distributions. ;  ;  Statistical functions from truncated distributions;  Statistical functions for the truncated distributions. ;  ;  Quantile Functions;  Inverse functions of the cumulative distribution functions and the inverse of the complement of the cumulative distribution functions for various distributions. ;  . Namespaces; namespace  ROOT;  tbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tbb::task_arena without forward declaring tbb::interface7 ;  . Classes; class  ROOT::Math::Vavilov;  Base class describing a Vavilov distribution. More...;  ; class  ROOT::Math::VavilovAccurate;  Class describing a Vavilov distribution. More...;  ; class  ROOT::Math::VavilovAccurateCdf;  Class describing the Vavilov cdf. More...;  ; class  ROOT::Math::VavilovAccuratePdf;  Class describing the Vavilov pdf. M",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__StatFunc.html:74,Load,Loading,74,doc/master/group__StatFunc.html,https://root.cern,https://root.cern/doc/master/group__StatFunc.html,1,['Load'],['Loading']
Performance,". ROOT: Statistical functions. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. Modules |; Namespaces |; Classes ; Statistical functionsMath » MathCore | Math » MathMore. ; Probability density functions, cumulative distribution functions and their inverses (quantiles) for various statistical distributions (continuous and discrete). ; Whenever possible the conventions followed are those of the CRC Concise Encyclopedia of Mathematics, Second Edition (or Mathworld). By convention the distributions are centered around 0, so for example in the case of a Gaussian there is no parameter mu. The user must calculate the shift themselves if they wish.; MathCore provides the majority of the probability density functions, of the cumulative distributions and of the quantiles (inverses of the cumulatives). Additional distributions are also provided by the MathMore library. . Modules;  Probability Density Functions (PDF);  Probability density functions of various statistical distributions (continuous and discrete). ;  ;  Cumulative Distribution Functions (CDF);  Cumulative distribution functions of various distributions. ;  ;  Statistical functions from truncated distributions;  Statistical functions for the truncated distributions. ;  ;  Quantile Functions;  Inverse functions of the cumulative distribution functions and the inverse of the complement of the cumulative distribution functions for various distributions. ;  . Namespaces; namespace  ROOT;  tbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tbb::task_arena without forward declaring tbb::interface7 ;  . Classes; class  ROOT::Math::Vavilov;  Base class describing a Vavilov distribution. More...;  ; class  ROOT::Math::VavilovAccurate;  Class describing a Vavilov distribution. More...;  ; class  ROOT::Math::VavilovAccurateCdf;  Class describing the Vavilov cdf. More...;  ; class  ROOT::Math::VavilovAccuratePdf;  Class describing the Vavilov pdf. Mo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/group__StatFunc.html:73,Load,Loading,73,doc/v632/group__StatFunc.html,https://root.cern,https://root.cern/doc/v632/group__StatFunc.html,1,['Load'],['Loading']
Performance,. ROOT: SysInfo_t Struct Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; List of all members ; SysInfo_t Struct Reference. . Definition at line 148 of file TSystem.h. Public Member Functions;  SysInfo_t ();  ; virtual ~SysInfo_t ();  ; virtual TClass * IsA () const;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Public Attributes; Int_t fBusSpeed;  ; Int_t fCpus;  ; Int_t fCpuSpeed;  ; TString fCpuType;  ; Int_t fL2Cache;  ; TString fModel;  ; TString fOS;  ; Int_t fPhysRam;  . #include <TSystem.h>; Constructor & Destructor Documentation. ◆ SysInfo_t(). SysInfo_t::SysInfo_t ; (; ). inline . Definition at line 157 of file TSystem.h. ◆ ~SysInfo_t(). virtual SysInfo_t::~SysInfo_t ; (; ). inlinevirtual . Definition at line 159 of file TSystem.h. Member Function Documentation. ◆ Class(). static TClass * SysInfo_t::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * SysInfo_t::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t SysInfo_t::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 160 of file TSystem.h. ◆ DeclFileName(). static const char * SysInfo_t::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 160 of file TSystem.h. ◆ IsA(). virtual TClass * SysInfo_t::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Definition at line 160 of file TSystem.h. ◆ Streamer(). virtual void SysInfo_t::Streamer ; (; TBuffer & ; ). virtual . ◆ StreamerNVirtual(). void,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structSysInfo__t.html:79,Load,Loading,79,doc/master/structSysInfo__t.html,https://root.cern,https://root.cern/doc/master/structSysInfo__t.html,1,['Load'],['Loading']
Performance,". ROOT: TARInterruptHandler Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; TARInterruptHandler Class Reference. . Definition at line 123 of file TApplicationRemote.h. Public Member Functions;  TARInterruptHandler (TApplicationRemote *r);  ; Bool_t Notify () override;  TApplicationRemote interrupt handler. ;  ;  Public Member Functions inherited from TSignalHandler;  TSignalHandler (ESignals sig, Bool_t sync=kTRUE);  Create signal event handler. ;  ; virtual ~TSignalHandler ();  ; void Add () override;  Add signal handler to system signal handler list. ;  ; void Delay ();  ; ESignals GetSignal () const;  ; void HandleDelayedSignal ();  ; TClass * IsA () const override;  ; Bool_t IsAsync () const;  ; Bool_t IsSync () const;  ; Bool_t Notify () override;  Notify when signal occurs. ;  ; void Remove () override;  Remove signal handler from system signal handler list. ;  ; void SetSignal (ESignals sig);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TSysEvtHandler;  TSysEvtHandler ();  ; virtual ~TSysEvtHandler ();  ; void Activate ();  Activate a system event handler. ;  ; virtual void Activated ();  ; virtual void Added ();  ; void DeActivate ();  De-activate a system event handler. ;  ; virtual void DeActivated ();  ; TClass * IsA () const override;  ; Bool_t IsActive () const;  ; virtual void Notified ();  ; virtual void Removed ();  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTARInterruptHandler.html:88,Load,Loading,88,doc/master/classTARInterruptHandler.html,https://root.cern,https://root.cern/doc/master/classTARInterruptHandler.html,1,['Load'],['Loading']
Performance,". ROOT: TASImage Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Types |; Private Member Functions |; List of all members ; TASImage Class ReferenceGraphics » 2D Graphics » libAfterImage interface. ; Image class. ; TASImage is the concrete interface to the image processing library libAfterImage.; It allows reading and writing of images in different formats, several image manipulations (scaling, tiling, merging, etc.) and displaying in pads. The size of the image on the screen does not depend on the original size of the image but on the size of the pad. Therefore it is very easy to resize the image on the screen by resizing the pad.; Besides reading an image from a file an image can be defined by a two dimensional array of values. A palette defines the color of each value.; The image can be zoomed by defining a rectangle with the mouse. The color palette can be modified with a GUI, just select StartPaletteEditor() from the context menu.; Several examples showing how to use this class are available in the ROOT tutorials: $ROOTSYS/tutorials/image/ ; Definition at line 31 of file TASImage.h. Public Member Functions;  TASImage ();  Default image constructor. ;  ;  TASImage (const char *file, EImageFileTypes type=kUnknown);  Create an image object and read from specified file. ;  ;  TASImage (const char *name, const Double_t *imageData, UInt_t width, UInt_t height, TImagePalette *palette=nullptr);  Create an image depending on the values of imageData. ;  ;  TASImage (const char *name, const TArrayD &imageData, UInt_t width, TImagePalette *palette=nullptr);  Create an image depending on the values of imageData. ;  ;  TASImage (const char *name, const TVectorD &imageData, UInt_t width, TImagePalette *palette=nullptr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTASImage.html:77,Load,Loading,77,doc/master/classTASImage.html,https://root.cern,https://root.cern/doc/master/classTASImage.html,1,['Load'],['Loading']
Performance,". ROOT: TASImagePlugin Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TASImagePlugin Class Reference. . Definition at line 26 of file TASImagePlugin.h. Public Member Functions;  TASImagePlugin (const char *ext);  ;  ~TASImagePlugin () override;  ; virtual Bool_t ASImage2File (ASImage *);  ; virtual ASImage * File2ASImage (const char *);  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; unsigned char * ReadFile (const char *, UInt_t &, UInt_t &) override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Bool_t WriteFile (const char *, unsigned char *, UInt_t, UInt_t) override;  ;  Public Member Functions inherited from TImagePlugin;  TImagePlugin (const char *ext);  ;  ~TImagePlugin () override;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * C",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTASImagePlugin.html:83,Load,Loading,83,doc/master/classTASImagePlugin.html,https://root.cern,https://root.cern/doc/master/classTASImagePlugin.html,1,['Load'],['Loading']
Performance,". ROOT: TASInputHandler Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; TASInputHandler Class Reference. . Definition at line 115 of file TApplicationServer.cxx. Public Member Functions;  TASInputHandler (TApplicationServer *s, Int_t fd);  ; Bool_t Notify () override;  Handle this input. ;  ; Bool_t ReadNotify () override;  Notify when something can be read from the descriptor associated with this handler. ;  ;  Public Member Functions inherited from TFileHandler;  TFileHandler (int fd, int mask);  Create a file descriptor event handler. ;  ; virtual ~TFileHandler ();  ; void Add () override;  Add file event handler to system file handler list. ;  ; int GetFd () const;  ; virtual Bool_t HasReadInterest ();  True if handler is interested in read events. ;  ; virtual Bool_t HasWriteInterest ();  True if handler is interested in write events. ;  ; TClass * IsA () const override;  ; virtual Bool_t IsReadReady () const;  ; virtual Bool_t IsWriteReady () const;  ; Bool_t Notify () override;  Notify when event occurred on descriptor associated with this handler. ;  ; void Remove () override;  Remove file event handler from system file handler list. ;  ; virtual void ResetReadyMask ();  ; void SetFd (int fd);  ; virtual void SetInterest (Int_t mask);  Set interest mask to 'mask'. ;  ; virtual void SetReadReady ();  ; virtual void SetWriteReady ();  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual Bool_t WriteNotify ();  Notify when something can be written to the descriptor associated with this handler. ;  ;  Public Member Functions inherited from TSysEvtHandler;  TSysEvtHandler ();  ; virtual ~TSysEvtHandler ();  ; void Activate ();  Activate a system event handler. ;  ; virtual void Activated ();  ; virtual void Added ();  ; void ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTASInputHandler.html:84,Load,Loading,84,doc/master/classTASInputHandler.html,https://root.cern,https://root.cern/doc/master/classTASInputHandler.html,1,['Load'],['Loading']
Performance,". ROOT: TASInterruptHandler Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; TASInterruptHandler Class Reference. . Definition at line 72 of file TApplicationServer.cxx. Public Member Functions;  TASInterruptHandler (TApplicationServer *s);  ; Bool_t Notify () override;  Handle this interrupt. ;  ;  Public Member Functions inherited from TSignalHandler;  TSignalHandler (ESignals sig, Bool_t sync=kTRUE);  Create signal event handler. ;  ; virtual ~TSignalHandler ();  ; void Add () override;  Add signal handler to system signal handler list. ;  ; void Delay ();  ; ESignals GetSignal () const;  ; void HandleDelayedSignal ();  ; TClass * IsA () const override;  ; Bool_t IsAsync () const;  ; Bool_t IsSync () const;  ; Bool_t Notify () override;  Notify when signal occurs. ;  ; void Remove () override;  Remove signal handler from system signal handler list. ;  ; void SetSignal (ESignals sig);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TSysEvtHandler;  TSysEvtHandler ();  ; virtual ~TSysEvtHandler ();  ; void Activate ();  Activate a system event handler. ;  ; virtual void Activated ();  ; virtual void Added ();  ; void DeActivate ();  De-activate a system event handler. ;  ; virtual void DeActivated ();  ; TClass * IsA () const override;  ; Bool_t IsActive () const;  ; virtual void Notified ();  ; virtual void Removed ();  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *metho",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTASInterruptHandler.html:88,Load,Loading,88,doc/master/classTASInterruptHandler.html,https://root.cern,https://root.cern/doc/master/classTASInterruptHandler.html,1,['Load'],['Loading']
Performance,". ROOT: TASLogHandler Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; TASLogHandler Class Reference. . Definition at line 101 of file TApplicationServer.h. Public Types; enum  EStatusBits { kFileIsPipe = (1ULL << ( 23 )); };  ;  Public Types inherited from TFileHandler; enum  { kRead = 1; , kWrite = 2; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TASLogHandler (const char *cmd, TSocket *s, const char *pfx="""");  Execute 'cmd' in a pipe and handle output messages from the related file. ;  ;  TASLogHandler (FILE *f, TSocket *s, const char *pfx="""");  Handle available message from the open file 'f'. ;  ; virtual ~TASLogHandler ();  Handle available message in the open file. ;  ; Bool_t IsValid ();  ; Bool_t Notify () override;  Handle available message in the open file. ;  ; Bool_t ReadNotify () override;  Notify when something can be read from the descriptor associated with this handler. ;  ;  Public Member Functions inherited from TFileHandler;  TFileHandler (int fd, int mask);  Create a file descriptor event handler. ;  ; virtual ~TFileHandler ();  ; void Add () override;  Add file event handler to system file handler list. ;  ; int GetF",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTASLogHandler.html:82,Load,Loading,82,doc/master/classTASLogHandler.html,https://root.cern,https://root.cern/doc/master/classTASLogHandler.html,1,['Load'],['Loading']
Performance,". ROOT: TASPaletteEditor Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TASPaletteEditor Class ReferenceGraphics » 2D Graphics » libAfterImage interface. ; This is a GUI window to edit a color palette. ; It is called by a pull down menu item of TASImage. ; Definition at line 39 of file TASPaletteEditor.h. Classes; class  LimitLine;  ; class  PaintPalette;  . Public Member Functions;  TASPaletteEditor (TAttImage *attImage, UInt_t w, UInt_t h);  Palette editor constructor. ;  ;  ~TASPaletteEditor () override;  Palette editor destructor. Deletes all frames and their layout hints. ;  ; void CloseWindow () override;  Close editor. ;  ; TClass * IsA () const override;  ; Bool_t ProcessMessage (Longptr_t msg, Longptr_t param1, Longptr_t param2) override;  Process all editor mouse events. ;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UpdateRange ();  Updates the range of the palette. ;  ;  Public Member Functions inherited from TPaletteEditor;  TPaletteEditor (TAttImage *attImage, UInt_t w, UInt_t h);  Constructor. ;  ; virtual ~TPaletteEditor ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGMainFrame;  TGMainFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=kVerticalFrame);  Create a top level main frame. ;  ;  ~TGMainFrame () override;  TGMainFrame destructor. ;  ; virtual Bool_t BindKey (const TGWindow *w, Int_t keycode, Int_t modifier) const;  Bind key to a window. ;  ; void DontCallClose ();  Typically call this method in the slot connected to the CloseWindow() signal to prevent the calling of the default or any derived CloseWindow() methods to prevent premature or double deletion of this window. ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTASPaletteEditor.html:85,Load,Loading,85,doc/master/classTASPaletteEditor.html,https://root.cern,https://root.cern/doc/master/classTASPaletteEditor.html,1,['Load'],['Loading']
Performance,". ROOT: TASPaletteEditor::LimitLine Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; TASPaletteEditor::LimitLine Class Reference. . Definition at line 52 of file TASPaletteEditor.h. Public Member Functions;  LimitLine (Coord_t x, Coord_t y1, Coord_t y2, TASPaletteEditor *gui);  The blue limit line in the pixel value histogram. ;  ; void Paint (Option_t *option="""") override;  Paint the limit lines. ;  ;  Public Member Functions inherited from TLine;  TLine ();  ;  TLine (const TLine &line);  Line copy constructor. ;  ;  TLine (Double_t x1, Double_t y1, Double_t x2, Double_t y2);  Line normal constructor. ;  ;  ~TLine () override=default;  ; void Copy (TObject &line) const override;  Copy this line to line. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a line. ;  ; virtual TLine * DrawLine (Double_t x1, Double_t y1, Double_t x2, Double_t y2);  Draw this line with new coordinates. ;  ; virtual TLine * DrawLineNDC (Double_t x1, Double_t y1, Double_t x2, Double_t y2);  Draw this line with new coordinates in NDC. ;  ; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override;  Execute action corresponding to one event. ;  ; Rectangle_t GetBBox () override;  Return the bounding Box of the Line. ;  ; TPoint GetBBoxCenter () override;  Return the center of the BoundingBox as TPoint in pixels. ;  ; Double_t GetX1 () const;  ; Double_t GetX2 () const;  ; Double_t GetY1 () const;  ; Double_t GetY2 () const;  ; TClass * IsA () const override;  ; Bool_t IsHorizontal ();  Check whether this line is to be drawn horizontally. ;  ; Bool_t IsVertical ();  Check whether this line is to be drawn vertically. ;  ; void ls (Option_t *option="""") const override;  List this line with its attributes. ;  ; TLine & operator= (const TLine &src);  Assignment operator. ;  ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTASPaletteEditor_1_1LimitLine.html:96,Load,Loading,96,doc/master/classTASPaletteEditor_1_1LimitLine.html,https://root.cern,https://root.cern/doc/master/classTASPaletteEditor_1_1LimitLine.html,1,['Load'],['Loading']
Performance,". ROOT: TASPaletteEditor::PaintPalette Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Attributes |; List of all members ; TASPaletteEditor::PaintPalette Class Reference. . Definition at line 42 of file TASPaletteEditor.h. Public Member Functions;  PaintPalette (TImagePalette **palette, TAttImage *attImage);  ; void Paint (Option_t *option="""") override;  Actually paint the paletter. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObje",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTASPaletteEditor_1_1PaintPalette.html:99,Load,Loading,99,doc/master/classTASPaletteEditor_1_1PaintPalette.html,https://root.cern,https://root.cern/doc/master/classTASPaletteEditor_1_1PaintPalette.html,1,['Load'],['Loading']
Performance,". ROOT: TASPluginGS Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TASPluginGS Class ReferenceGraphics » 2D Graphics » libAfterImage interface. ; Allows to read PS/EPS/PDF files via GhostScript. ; Definition at line 25 of file TASPluginGS.h. Public Member Functions;  TASPluginGS (const char *ext);  ctor ;  ;  ~TASPluginGS () override;  dtor ;  ; ASImage * File2ASImage (const char *filename) override;  read PS/EPS/PDF file and convert it to ASImage ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TASImagePlugin;  TASImagePlugin (const char *ext);  ;  ~TASImagePlugin () override;  ; virtual Bool_t ASImage2File (ASImage *);  ; unsigned char * ReadFile (const char *, UInt_t &, UInt_t &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Bool_t WriteFile (const char *, unsigned char *, UInt_t, UInt_t) override;  ;  Public Member Functions inherited from TImagePlugin;  TImagePlugin (const char *ext);  ;  ~TImagePlugin () override;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTASPluginGS.html:80,Load,Loading,80,doc/master/classTASPluginGS.html,https://root.cern,https://root.cern/doc/master/classTASPluginGS.html,1,['Load'],['Loading']
Performance,". ROOT: TASSigPipeHandler Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; TASSigPipeHandler Class Reference. . Definition at line 95 of file TApplicationServer.cxx. Public Member Functions;  TASSigPipeHandler (TApplicationServer *s);  ; Bool_t Notify () override;  Handle this signal. ;  ;  Public Member Functions inherited from TSignalHandler;  TSignalHandler (ESignals sig, Bool_t sync=kTRUE);  Create signal event handler. ;  ; virtual ~TSignalHandler ();  ; void Add () override;  Add signal handler to system signal handler list. ;  ; void Delay ();  ; ESignals GetSignal () const;  ; void HandleDelayedSignal ();  ; TClass * IsA () const override;  ; Bool_t IsAsync () const;  ; Bool_t IsSync () const;  ; Bool_t Notify () override;  Notify when signal occurs. ;  ; void Remove () override;  Remove signal handler from system signal handler list. ;  ; void SetSignal (ESignals sig);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TSysEvtHandler;  TSysEvtHandler ();  ; virtual ~TSysEvtHandler ();  ; void Activate ();  Activate a system event handler. ;  ; virtual void Activated ();  ; virtual void Added ();  ; void DeActivate ();  De-activate a system event handler. ;  ; virtual void DeActivated ();  ; TClass * IsA () const override;  ; Bool_t IsActive () const;  ; virtual void Notified ();  ; virtual void Removed ();  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTASSigPipeHandler.html:86,Load,Loading,86,doc/master/classTASSigPipeHandler.html,https://root.cern,https://root.cern/doc/master/classTASSigPipeHandler.html,1,['Load'],['Loading']
Performance,". ROOT: TAdvancedGraphicsDialog Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TAdvancedGraphicsDialog Class ReferenceGUI » ROOT Fit Panel. ; Allows to create advanced graphics from the last fit made in the fitpanel. ; This includes the scan graphics, the contour and the confidence levels. ; Definition at line 38 of file TAdvancedGraphicsDialog.h. Public Member Functions;  TAdvancedGraphicsDialog (const TGWindow *p, const TGWindow *main);  ;  ~TAdvancedGraphicsDialog () override;  Cleanup dialog. ;  ; void DoChangedScanPar (Int_t selected);  Changes the Min and Max default values of the scan method, depending on the selected parameter. ;  ; void DoDraw ();  Calls the corresponding method, depending on the selected tab. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGTransientFrame;  TGTransientFrame (const TGWindow *p=nullptr, const TGWindow *main=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=kVerticalFrame);  Create a transient window. ;  ; virtual void CenterOnParent (Bool_t croot=kTRUE, EPlacement pos=kCenter);  Position transient frame centered relative to the parent frame. ;  ; const TGWindow * GetMain () const;  ; TClass * IsA () const override;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a transient frame widget as a C++ statement(s) on output stream out. ;  ; void SaveSource (const char *filename=""Rootdlog.C"", Option_t *option="""") override;  Save the GUI transient frame widget in a C++ macro file. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Publ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTAdvancedGraphicsDialog.html:92,Load,Loading,92,doc/master/classTAdvancedGraphicsDialog.html,https://root.cern,https://root.cern/doc/master/classTAdvancedGraphicsDialog.html,1,['Load'],['Loading']
Performance,". ROOT: TAnnotation Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TAnnotation Class ReferenceGraphics » 2D Graphics » Graphics pad. ; An annotation is a TLatex which can be drawn in a 2D or 3D space. ; Example:; {; auto hsurf1 = new TH2F(""hsurf1"",""3D text example "",30,-4,4,30,-20,20);; float px, py;; for (Int_t i = 0; i < 25000; i++) {; gRandom->Rannor(px,py);; hsurf1->Fill(px-1,5*py);; hsurf1->Fill(2+0.5*px,2*py-10.,0.1);; }; hsurf1->Draw(""SURF1"");; int binx,biny,binz;; int bmax = hsurf1->GetMaximumBin(binx,biny,binz);; double xm = hsurf1->GetXaxis()->GetBinCenter(binx);; double ym = hsurf1->GetYaxis()->GetBinCenter(biny);; double zm = hsurf1->GetMaximum();; auto t = new TAnnotation(xm,ym,zm,Form(""Maximum = %g"",zm));; t->SetTextFont(42);; t->SetTextSize(0.03);; t->Draw();; }; gRandomR__EXTERN TRandom * gRandomDefinition TRandom.h:62; Formchar * Form(const char *fmt,...)Formats a string in a circular formatting buffer.Definition TString.cxx:2489; TAnnotation::TAnnotationTAnnotation()Definition TAnnotation.h:25; TH2F2-D histogram with a float per channel (see TH1 documentation)Definition TH2.h:307; TRandom::Rannorvirtual void Rannor(Float_t &a, Float_t &b)Return 2 numbers distributed following a gaussian with mean=0 and sigma=1.Definition TRandom.cxx:507; int. Another example:; ; void annotation3d(); {; auto c = new TCanvas(""c"", ""c"", 600, 600);; c->SetTheta(30);; c->SetPhi(50);; gStyle->SetOptStat(0);; gStyle->SetHistTopMargin(0);; gStyle->SetOptTitle(kFALSE);; ; // Define and draw a surface; auto f = new TF2(""f"", ""[0]*cos(x)*cos(y)"", -1, 1, -1, 1);; f->SetParameter(0, 1);; double s = 1./f->Integral(-1, 1, -1, 1);; f->SetParameter(0, s);; f->SetNpx(50);; f->SetNpy(50);; ; f->GetXaxis()->SetTitle(""x"");; f->GetXaxis()->SetTitleOffset(1.4);; f->GetXaxis()->SetTitleSize(0.04);; f->GetXaxis()->",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTAnnotation.html:80,Load,Loading,80,doc/master/classTAnnotation.html,https://root.cern,https://root.cern/doc/master/classTAnnotation.html,1,['Load'],['Loading']
Performance,". ROOT: TApplication Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; TApplication Class ReferenceCore ROOT classes » Base ROOT classes. ; This class creates the ROOT Application Environment that interfaces to the windowing system eventloop and eventhandlers. ; This class must be instantiated exactly once in any given application. Normally the specific application class inherits from TApplication (see TRint). ; Definition at line 39 of file TApplication.h. Public Types; enum  EExitOnException { kDontExit; , kExit; , kAbort; };  ; enum  EFileBits { kExpression = (1ULL << ( 14 )); };  ; enum  EStatusBits { kProcessRemotely = (1ULL << ( 15 )); , kDefaultApplication = (1ULL << ( 16 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TApplication (const char *appClassName, Int_t *argc, char **argv, void *options=nullptr, Int_t numOptions=0);  Create an application environment. ;  ; virtual ~TApplication ();  TApplication dtor. ;  ; virtual const char * ApplicationName () const;  ; Int_t Argc () co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTApplication.html:81,Load,Loading,81,doc/master/classTApplication.html,https://root.cern,https://root.cern/doc/master/classTApplication.html,1,['Load'],['Loading']
Performance,". ROOT: TApplicationImp Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TApplicationImp Class ReferenceCore ROOT classes » Base ROOT classes. ; ABC describing GUI independent application implementation protocol. ; Definition at line 29 of file TApplicationImp.h. Public Member Functions;  TApplicationImp ();  ;  TApplicationImp (const char *appClassName, int *argc, char **argv);  ; virtual ~TApplicationImp ();  ; virtual const char * ApplicationName () const;  ; virtual Int_t ExecCommand (TGWin32Command *code, Bool_t synch);  ; virtual void Hide ();  ; virtual void Iconify ();  ; virtual void Init ();  ; virtual TClass * IsA () const;  ; virtual Bool_t IsCmdThread ();  ; virtual void Lower ();  ; virtual void Open ();  ; virtual void Raise ();  ; virtual void Show ();  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Attributes; TString fApplicationName;  . #include <TApplicationImp.h>. Inheritance diagram for TApplicationImp:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TApplicationImp() [1/2]. TApplicationImp::TApplicationImp ; (; ). inline . Definition at line 35 of file TApplicationImp.h. ◆ TApplicationImp() [2/2]. TApplicationImp::TApplicationImp ; (; const char * ; appClassName, . int * ; argc, . char ** ; argv . ). inline . Definition at line 36 of file TApplicationImp.h. ◆ ~TApplicationImp(). virtual TApplicationImp::~TApplicationImp ; (; ). inlinevirtual . Definition at line 37 of file TApplicationImp.h. Member Function Documentation. ◆ Appli",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTApplicationImp.html:84,Load,Loading,84,doc/master/classTApplicationImp.html,https://root.cern,https://root.cern/doc/master/classTApplicationImp.html,1,['Load'],['Loading']
Performance,". ROOT: TApplicationRemote Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; TApplicationRemote Class Reference. . Definition at line 43 of file TApplicationRemote.h. Classes; class  TARFileStat;  . Public Types; enum  ESendFileOpt { kAscii = 0x0; , kBinary = 0x1; , kForce = 0x2; };  ; enum  EStatusBits { kCollecting = (1ULL << ( 17 )); };  ;  Public Types inherited from TApplication; enum  EExitOnException { kDontExit; , kExit; , kAbort; };  ; enum  EFileBits { kExpression = (1ULL << ( 14 )); };  ; enum  EStatusBits { kProcessRemotely = (1ULL << ( 15 )); , kDefaultApplication = (1ULL << ( 16 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TApplicationRemote (const char *url, Int_t debug=0, const char *script=nullptr);  Main constructor: start a remote session at 'url' accepting callbacks on local port 'port'; if port is already in use scan up to 'scan - 1' ports starting from port + 1, i.e. ;  ; virtual ~TApplicationRemote ();  Destructor. ;  ; const char * ApplicationName () const override;  ; void Browse (TBrowser *b) override;  Browse remote application (working directory and ROOT files). ;  ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTApplicationRemote.html:87,Load,Loading,87,doc/master/classTApplicationRemote.html,https://root.cern,https://root.cern/doc/master/classTApplicationRemote.html,1,['Load'],['Loading']
Performance,". ROOT: TApplicationRemote::TARFileStat Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; TApplicationRemote::TARFileStat Class Reference. . Definition at line 57 of file TApplicationRemote.h. Public Member Functions;  TARFileStat (const char *fn, TMD5 *md5, Long_t mt);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTApplicationRemote_1_1TARFileStat.html:100,Load,Loading,100,doc/master/classTApplicationRemote_1_1TARFileStat.html,https://root.cern,https://root.cern/doc/master/classTApplicationRemote_1_1TARFileStat.html,1,['Load'],['Loading']
Performance,". ROOT: TApplicationServer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TApplicationServer Class Reference. . Definition at line 34 of file TApplicationServer.h. Public Member Functions;  TApplicationServer (Int_t *argc, char **argv, FILE *flog, const char *logfile);  Main constructor. ;  ; virtual ~TApplicationServer ();  Cleanup. ;  ; Int_t BrowseDirectory (const char *dirname);  Browse directory and send back its content to client. ;  ; Int_t BrowseFile (const char *fname);  Browse root file and send back its content; if fname is null, send the full list of files. ;  ; Int_t BrowseKey (const char *keyname);  Read key object and send it back to client. ;  ; const char * GetHost () const;  ; void GetOptions (Int_t *argc, char **argv) override;  Get and handle command line options. ;  ; Int_t GetPort () const;  ; Int_t GetProtocol () const;  ; TSocket * GetSocket () const;  ; const char * GetUser () const;  ; void HandleSigPipe ();  Called when the client is not alive anymore (i.e. ;  ; void HandleSocketInput ();  Handle input coming from the client or from the master server. ;  ; void HandleUrgentData ();  Handle Out-Of-Band data sent by the master or client. ;  ; void Interrupt ();  ; TClass * IsA () const override;  ; Bool_t IsValid () const;  ; Longptr_t ProcessLine (const char *line, Bool_t=kFALSE, Int_t *err=nullptr) override;  Parse a command line received from the client, making sure that the files needed for the execution, if any, are available. ;  ; Int_t ReceiveFile (const char *file, Bool_t bin, Long64_t size);  Receive a file, either sent by a client or a master server. ;  ; void Reset (const char *dir);  Reset environment to be ready for execution of next command. ;  ; void Run (Boo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTApplicationServer.html:87,Load,Loading,87,doc/master/classTApplicationServer.html,https://root.cern,https://root.cern/doc/master/classTApplicationServer.html,1,['Load'],['Loading']
Performance,". ROOT: TArc Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TArc Class ReferenceGraphics » 2D Graphics » Basic graphics. ; Create an Arc. ; An arc is specified with the position of its centre, its radius a minimum and maximum angle. The attributes of the outline line are given via TAttLine. The attributes of the fill area are given via TAttFill ; Definition at line 26 of file TArc.h. Public Member Functions;  TArc ();  Arc default constructor. ;  ;  TArc (const TArc &arc);  Copy constructor. ;  ;  TArc (Double_t x1, Double_t y1, Double_t radius, Double_t phimin=0, Double_t phimax=360);  Arc normal constructor. ;  ;  ~TArc () override;  Arc default destructor. ;  ; void Copy (TObject &arc) const override;  Copy this arc to arc. ;  ; virtual TArc * DrawArc (Double_t x1, Double_t y1, Double_t radius, Double_t phimin=0, Double_t phimax=360, Option_t *option="""");  Draw this arc with new coordinates. ;  ; TClass * IsA () const override;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save primitive as a C++ statement(s) on output stream out. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TEllipse;  TEllipse ();  Ellipse default constructor. ;  ;  TEllipse (const TEllipse &ellipse);  Copy constructor. ;  ;  TEllipse (Double_t x1, Double_t y1, Double_t r1, Double_t r2=0, Double_t phimin=0, Double_t phimax=360, Double_t theta=0);  Ellipse normal constructor. ;  ;  ~TEllipse () override;  Ellipse default destructor. ;  ; void Copy (TObject &ellipse) const override;  Copy this ellipse to ellipse. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to an ellipse. ;  ; void Draw (Option_t *option="""") override;  Draw th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTArc.html:73,Load,Loading,73,doc/master/classTArc.html,https://root.cern,https://root.cern/doc/master/classTArc.html,1,['Load'],['Loading']
Performance,". ROOT: TArchiveFile Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Static Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TArchiveFile Class ReferenceabstractInput/Output Library. ; Class describing an archive file containing multiple sub-files, like a ZIP or TAR archive. ; Definition at line 24 of file TArchiveFile.h. Public Member Functions;  TArchiveFile ();  ;  TArchiveFile (const char *archive, const char *member, TFile *file);  Specify the archive name and member name. ;  ;  ~TArchiveFile () override;  Dtor. ;  ; const char * GetArchiveName () const;  ; TArchiveMember * GetMember () const;  ; Long64_t GetMemberFilePosition () const;  Return position in archive of current member. ;  ; Int_t GetMemberIndex () const;  ; const char * GetMemberName () const;  ; TObjArray * GetMembers () const;  ; Int_t GetNumberOfMembers () const;  Returns number of members in archive. ;  ; TClass * IsA () const override;  ; virtual Int_t OpenArchive ()=0;  ; virtual Int_t SetCurrentMember ()=0;  ; virtual Int_t SetMember (const char *member);  Explicitely make the specified member the current member. ;  ; virtual Int_t SetMember (Int_t idx);  Explicitely make the member with the specified index the current member. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTArchiveFile.html:81,Load,Loading,81,doc/master/classTArchiveFile.html,https://root.cern,https://root.cern/doc/master/classTArchiveFile.html,1,['Load'],['Loading']
Performance,". ROOT: TArchiveMember Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Friends |; List of all members ; TArchiveMember Class Reference. . Definition at line 65 of file TArchiveFile.h. Public Member Functions;  TArchiveMember ();  Default ctor. ;  ;  TArchiveMember (const char *name);  Create an archive member file. ;  ;  TArchiveMember (const TArchiveMember &member);  Copy ctor. ;  ;  ~TArchiveMember () override;  ; const char * GetComment () const;  ; Long64_t GetCompressedSize () const;  ; Long64_t GetDecompressedSize () const;  ; Long64_t GetFilePosition () const;  ; TDatime GetModTime () const;  ; const char * GetName () const override;  Returns name of object. ;  ; Long64_t GetPosition () const;  ; TClass * IsA () const override;  ; Bool_t IsDirectory () const;  ; TArchiveMember & operator= (const TArchiveMember &rhs);  Assignment operator. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *=""",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTArchiveMember.html:83,Load,Loading,83,doc/master/classTArchiveMember.html,https://root.cern,https://root.cern/doc/master/classTArchiveMember.html,1,['Load'],['Loading']
Performance,". ROOT: TArray Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; Protected Member Functions |; Friends |; List of all members ; TArray Class ReferenceabstractCore ROOT classes » Containers. ; Abstract array base class. ; Used by TArrayC, TArrayS, TArrayI, TArrayL, TArrayF and TArrayD. Data member is public for historical reasons. PyROOT; When used from Python, the subclasses of TArray (TArrayC, TArrayS, TArrayI, TArrayL, TArrayF and TArrayD) benefit from the following extra features:. Their size can be obtained with len, which is equivalent to TArray::GetSize(): import ROOT; ; a = ROOT.TArrayD(2); print(len(a)) # prints '2'; lenOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char Pixmap_t Pixmap_t PictureAttributes_t attr const char char ret_data h unsigned char height h Atom_t Int_t ULong_t ULong_t unsigned char prop_list Atom_t Atom_t Atom_t Time_t UChar_t lenDefinition TGWin32VirtualXProxy.cxx:249. Their elements can be read and written with the getitem and setitem operators, respectively: a[0] = 0.2; a[1] = 1.7; print(a[0]) # prints '0.2'. They are iterable: for elem in a:; print(elem). Definition at line 31 of file TArray.h. Public Member Functions;  TArray ();  ;  TArray (const TArray &a);  ;  TArray (Int_t n);  ; virtual ~TArray ();  ; virtual Double_t GetAt (Int_t i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTArray.html:75,Load,Loading,75,doc/master/classTArray.html,https://root.cern,https://root.cern/doc/master/classTArray.html,1,['Load'],['Loading']
Performance,". ROOT: TArrayC Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; List of all members ; TArrayC Class ReferenceCore ROOT classes » Containers. ; Array of chars or bytes (8 bits per element). ; Definition at line 27 of file TArrayC.h. Public Member Functions;  TArrayC ();  Default TArrayC ctor. ;  ;  TArrayC (const TArrayC &array);  Copy constructor. ;  ;  TArrayC (Int_t n);  Create TArrayC object and set array size to n chars. ;  ;  TArrayC (Int_t n, const Char_t *array);  Create TArrayC object and initialize it with values of array. ;  ; virtual ~TArrayC ();  Delete TArrayC object. ;  ; void AddAt (Char_t c, Int_t i);  Add char c at position i. Check for out of bounds. ;  ; void Adopt (Int_t n, Char_t *array);  Adopt array arr into TArrayC, i.e. ;  ; Char_t At (Int_t i) const;  ; void Copy (TArrayC &array) const;  ; Char_t * GetArray ();  ; const Char_t * GetArray () const;  ; Double_t GetAt (Int_t i) const override;  ; Stat_t GetSum () const;  ; TClass * IsA () const override;  ; TArrayC & operator= (const TArrayC &rhs);  TArrayC assignment operator. ;  ; Char_t & operator[] (Int_t i);  ; Char_t operator[] (Int_t i) const;  ; void Reset (Char_t val=0);  ; void Set (Int_t n) override;  Set size of this array to n chars. ;  ; void Set (Int_t n, const Char_t *array);  Set size of this array to n chars and set the contents. ;  ; void SetAt (Double_t v, Int_t i) override;  ; void Streamer (TBuffer &) override;  Stream a TArrayC object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TArray;  TArray ();  ;  TArray (const TArray &a);  ;  TArray (Int_t n);  ; virtual ~TArray ();  ; Int_t GetSize () const;  ; TArray & operator= (const TArray &rhs);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTArrayC.html:76,Load,Loading,76,doc/master/classTArrayC.html,https://root.cern,https://root.cern/doc/master/classTArrayC.html,1,['Load'],['Loading']
Performance,". ROOT: TArrayD Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; List of all members ; TArrayD Class ReferenceCore ROOT classes » Containers. ; Array of doubles (64 bits per element). ; Definition at line 27 of file TArrayD.h. Public Member Functions;  TArrayD ();  Default TArrayD ctor. ;  ;  TArrayD (const TArrayD &array);  Copy constructor. ;  ;  TArrayD (Int_t n);  Create TArrayD object and set array size to n doubles. ;  ;  TArrayD (Int_t n, const Double_t *array);  Create TArrayD object and initialize it with values of array. ;  ; virtual ~TArrayD ();  Delete TArrayD object. ;  ; void AddAt (Double_t c, Int_t i);  Set the double c value at position i in the array. ;  ; void Adopt (Int_t n, Double_t *array);  Adopt array arr into TArrayD, i.e. ;  ; Double_t At (Int_t i) const;  ; void Copy (TArrayD &array) const;  ; Double_t * GetArray ();  ; const Double_t * GetArray () const;  ; Double_t GetAt (Int_t i) const override;  ; Stat_t GetSum () const;  ; TClass * IsA () const override;  ; TArrayD & operator= (const TArrayD &rhs);  TArrayD assignment operator. ;  ; Double_t & operator[] (Int_t i);  ; Double_t operator[] (Int_t i) const;  ; void Reset ();  ; void Reset (Double_t val);  ; void Set (Int_t n) override;  Set size of this array to n doubles. ;  ; void Set (Int_t n, const Double_t *array);  Set size of this array to n doubles and set the contents This function should not be called if the array was declared via Adopt. ;  ; void SetAt (Double_t v, Int_t i) override;  ; void Streamer (TBuffer &) override;  Stream a TArrayD object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TArray;  TArray ();  ;  TArray (const TArray &a);  ;  TArray (Int_t n);  ; virtual ~TArray ();  ; Int_t GetSize () const;  ; TArray & operator= (const TArray &rhs);  ; void S",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTArrayD.html:76,Load,Loading,76,doc/master/classTArrayD.html,https://root.cern,https://root.cern/doc/master/classTArrayD.html,1,['Load'],['Loading']
Performance,". ROOT: TArrayF Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; List of all members ; TArrayF Class ReferenceCore ROOT classes » Containers. ; Array of floats (32 bits per element). ; Definition at line 27 of file TArrayF.h. Public Member Functions;  TArrayF ();  Default TArrayF ctor. ;  ;  TArrayF (const TArrayF &array);  Copy constructor. ;  ;  TArrayF (Int_t n);  Create TArrayF object and set array size to n floats. ;  ;  TArrayF (Int_t n, const Float_t *array);  Create TArrayF object and initialize it with values of array. ;  ; virtual ~TArrayF ();  Delete TArrayF object. ;  ; void AddAt (Float_t c, Int_t i);  Add float c at position i. Check for out of bounds. ;  ; void Adopt (Int_t n, Float_t *array);  Adopt array arr into TArrayF, i.e. ;  ; Float_t At (Int_t i) const;  ; void Copy (TArrayF &array) const;  ; Float_t * GetArray ();  ; const Float_t * GetArray () const;  ; Double_t GetAt (Int_t i) const override;  ; Stat_t GetSum () const;  ; TClass * IsA () const override;  ; TArrayF & operator= (const TArrayF &rhs);  TArrayF assignment operator. ;  ; Float_t & operator[] (Int_t i);  ; Float_t operator[] (Int_t i) const;  ; void Reset ();  ; void Reset (Float_t val);  ; void Set (Int_t n) override;  Set size of this array to n floats. ;  ; void Set (Int_t n, const Float_t *array);  Set size of this array to n floats and set the contents. ;  ; void SetAt (Double_t v, Int_t i) override;  ; void Streamer (TBuffer &) override;  Stream a TArrayF object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TArray;  TArray ();  ;  TArray (const TArray &a);  ;  TArray (Int_t n);  ; virtual ~TArray ();  ; Int_t GetSize () const;  ; TArray & operator= (const TArray &rhs);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Func",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTArrayF.html:76,Load,Loading,76,doc/master/classTArrayF.html,https://root.cern,https://root.cern/doc/master/classTArrayF.html,1,['Load'],['Loading']
Performance,". ROOT: TArrayI Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; List of all members ; TArrayI Class ReferenceCore ROOT classes » Containers. ; Array of integers (32 bits per element). ; Definition at line 27 of file TArrayI.h. Public Member Functions;  TArrayI ();  Default TArrayI ctor. ;  ;  TArrayI (const TArrayI &array);  Copy constructor. ;  ;  TArrayI (Int_t n);  Create TArrayI object and set array size to n integers. ;  ;  TArrayI (Int_t n, const Int_t *array);  Create TArrayI object and initialize it with values of array. ;  ; virtual ~TArrayI ();  Delete TArrayI object. ;  ; void AddAt (Int_t c, Int_t i);  Add Int_t c at position i. Check for out of bounds. ;  ; void Adopt (Int_t n, Int_t *array);  Adopt array arr into TArrayI, i.e. ;  ; Int_t At (Int_t i) const;  ; void Copy (TArrayI &array) const;  ; Int_t * GetArray ();  ; const Int_t * GetArray () const;  ; Double_t GetAt (Int_t i) const override;  ; Stat_t GetSum () const;  ; TClass * IsA () const override;  ; TArrayI & operator= (const TArrayI &rhs);  TArrayI assignment operator. ;  ; Int_t & operator[] (Int_t i);  ; Int_t operator[] (Int_t i) const;  ; void Reset ();  ; void Reset (Int_t val);  ; void Set (Int_t n) override;  Set size of this array to n ints. ;  ; void Set (Int_t n, const Int_t *array);  Set size of this array to n ints and set the contents. ;  ; void SetAt (Double_t v, Int_t i) override;  ; void Streamer (TBuffer &) override;  Stream a TArrayI object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TArray;  TArray ();  ;  TArray (const TArray &a);  ;  TArray (Int_t n);  ; virtual ~TArray ();  ; Int_t GetSize () const;  ; TArray & operator= (const TArray &rhs);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTArrayI.html:76,Load,Loading,76,doc/master/classTArrayI.html,https://root.cern,https://root.cern/doc/master/classTArrayI.html,1,['Load'],['Loading']
Performance,". ROOT: TArrow Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Static Protected Attributes |; List of all members ; TArrow Class ReferenceGraphics » 2D Graphics » Basic graphics. ; Draw all kinds of Arrows. ; The different arrow's formats are explained in TArrow::TArrow. The picture below gives some examples.; Once an arrow is drawn on the screen:. One can click on one of the edges and move this edge.; One can click on any other arrow part to move the entire arrow. ; void arrows(){; auto c1 = new TCanvas(""c1"");; c1->Range(0,0,1,1);; ; auto par = new TPaveLabel(0.1,0.8,0.9,0.95,""Examples of various arrows formats"");; par->SetFillColor(42);; par->Draw();; ; auto ar1 = new TArrow(0.1,0.1,0.1,0.7);; ar1->Draw();; auto ar2 = new TArrow(0.2,0.1,0.2,0.7,0.05,""|>"");; ar2->SetAngle(40);; ar2->SetLineWidth(2);; ar2->Draw();; auto ar3 = new TArrow(0.3,0.1,0.3,0.7,0.05,""<|>"");; ar3->SetAngle(40);; ar3->SetLineWidth(2);; ar3->Draw();; auto ar4 = new TArrow(0.46,0.7,0.82,0.42,0.07,""|>"");; ar4->SetAngle(60);; ar4->SetLineWidth(2);; ar4->SetFillColor(2);; ar4->Draw();; auto ar5 = new TArrow(0.4,0.25,0.95,0.25,0.15,""<|>"");; ar5->SetAngle(60);; ar5->SetLineWidth(4);; ar5->SetLineColor(4);; ar5->SetFillStyle(3008);; ar5->SetFillColor(2);; ar5->Draw();; }; TArrow::TArrowTArrow()Arrow default constructor.Definition TArrow.cxx:47; TCanvasThe Canvas class.Definition TCanvas.h:23; TPaveLabelA Pave (see TPave) with a text centered in the Pave.Definition TPaveLabel.h:20; c1return c1Definition legend1.C:41; . Definition at line 29 of file TArrow.h. Public Member Functions;  TArrow ();  Arrow default constructor. ;  ;  TArrow (const TArrow &arrow);  Copy constructor. ;  ;  TArrow (Double_t x1, Double_t y1, Double_t x2, Double_t y2, Float_t arrowsize=0.05, Option_t *option="">"");  Arrow normal constructor. ;  ;  ~TArrow () override;  Arrow d",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTArrow.html:75,Load,Loading,75,doc/master/classTArrow.html,https://root.cern,https://root.cern/doc/master/classTArrow.html,1,['Load'],['Loading']
Performance,". ROOT: TAtt3D Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TAtt3D Class ReferenceCore ROOT classes » Base ROOT classes | Graphics » Graphics attributes. ; Use this attribute class when an object should have 3D capabilities. ; Definition at line 19 of file TAtt3D.h. Public Member Functions;  TAtt3D ();  ; virtual ~TAtt3D ();  ; virtual TClass * IsA () const;  ; virtual void Sizeof3D () const;  Set total size of this 3D object (used by X3D interface). ;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . #include <TAtt3D.h>. Inheritance diagram for TAtt3D:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TAtt3D(). TAtt3D::TAtt3D ; (; ). inline . Definition at line 22 of file TAtt3D.h. ◆ ~TAtt3D(). virtual TAtt3D::~TAtt3D ; (; ). inlinevirtual . Definition at line 23 of file TAtt3D.h. Member Function Documentation. ◆ Class(). static TClass * TAtt3D::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TAtt3D::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TAtt3D::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 27 of file TAtt3D.h. ◆ DeclFileName(). static const char * TAtt3D::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 27 of file TAtt3D.h. ◆ IsA(). virtual TClass * TAtt3D::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented in Jet, TGeoV",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTAtt3D.html:75,Load,Loading,75,doc/master/classTAtt3D.html,https://root.cern,https://root.cern/doc/master/classTAtt3D.html,1,['Load'],['Loading']
Performance,". ROOT: TAttAxis Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TAttAxis Class ReferenceCore ROOT classes » Base ROOT classes | Graphics » Graphics attributes. ; Manages histogram axis attributes. ; They are:. The number of divisions: TAttAxis::SetNdivisions.; The line axis' color: TAttAxis::SetAxisColor.; The axis labels' color: TAttAxis::SetLabelColor.; The axis labels' font: TAttAxis::SetLabelFont.; The axis labels' offset: TAttAxis::SetLabelOffset.; The axis labels' size: TAttAxis::SetLabelSize.; The tick marks's length: TAttAxis::SetTickLength or TAttAxis::SetTickSize .; The axis title's offset: TAttAxis::SetTitleOffset.; The axis title's size: TAttAxis::SetTitleSize.; The axis title's color: TAttAxis::SetTitleColor.; The axis title's font: TAttAxis::SetTitleFont. . Definition at line 18 of file TAttAxis.h. Public Member Functions;  TAttAxis ();  ; virtual ~TAttAxis ();  Destructor. ;  ; void Copy (TAttAxis &attaxis) const;  Copy of the object. ;  ; virtual Color_t GetAxisColor () const;  ; virtual Color_t GetLabelColor () const;  ; virtual Style_t GetLabelFont () const;  ; virtual Float_t GetLabelOffset () const;  ; virtual Float_t GetLabelSize () const;  ; virtual Int_t GetMaxDigits () const;  ; virtual Int_t GetNdivisions () const;  ; virtual Float_t GetTickLength () const;  ; virtual Color_t GetTitleColor () const;  ; virtual Style_t GetTitleFont () const;  ; virtual Float_t GetTitleOffset () const;  ; virtual Float_t GetTitleSize () const;  ; virtual TClass * IsA () const;  ; virtual void ResetAttAxis (Option_t *option="""");  Reset axis attributes. ;  ; virtual void SaveAttributes (std::ostream &out, const char *name, const char *subname);  Save axis attributes as C++ statement(s) on output stream out. ;  ; virtual void SetAxisColor (Color_t color=1, Float_t alpha=1.);  Set color ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTAttAxis.html:77,Load,Loading,77,doc/master/classTAttAxis.html,https://root.cern,https://root.cern/doc/master/classTAttAxis.html,1,['Load'],['Loading']
Performance,". ROOT: TAttBBox2D Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TAttBBox2D Class ReferenceabstractCore ROOT classes » Base ROOT classes | Graphics » Graphics attributes. ; Abstract base class for elements drawn in the editor. ; Classes inheriting from TAttBBox2D implementing the TAttBBox2D virtual classes, and using TPad::ShowGuideLines in ExecuteEvent will automatically get the guide lines drawn when moved in the pad. All methods work with pixel coordinates. ; Definition at line 19 of file TAttBBox2D.h. Public Member Functions; virtual ~TAttBBox2D ();  ; virtual Rectangle_t GetBBox ()=0;  ; virtual TPoint GetBBoxCenter ()=0;  ; virtual TClass * IsA () const;  ; virtual void SetBBoxCenter (const TPoint &p)=0;  ; virtual void SetBBoxCenterX (const Int_t x)=0;  ; virtual void SetBBoxCenterY (const Int_t y)=0;  ; virtual void SetBBoxX1 (const Int_t x)=0;  ; virtual void SetBBoxX2 (const Int_t x)=0;  ; virtual void SetBBoxY1 (const Int_t y)=0;  ; virtual void SetBBoxY2 (const Int_t y)=0;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . #include <TAttBBox2D.h>. Inheritance diagram for TAttBBox2D:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ ~TAttBBox2D(). TAttBBox2D::~TAttBBox2D ; (; ). virtual . Definition at line 30 of file TAttBBox2D.cxx. Member Function Documentation. ◆ Class(). static TClass * TAttBBox2D::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TAttBBox2D::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Vers",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTAttBBox2D.html:79,Load,Loading,79,doc/master/classTAttBBox2D.html,https://root.cern,https://root.cern/doc/master/classTAttBBox2D.html,1,['Load'],['Loading']
Performance,". ROOT: TAttCanvas Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TAttCanvas Class ReferenceGraphics » 2D Graphics » Graphics pad | Graphics » Graphics attributes. ; Manages canvas attributes. ; Referenced by TStyle. ; Definition at line 17 of file TAttCanvas.h. Public Member Functions;  TAttCanvas ();  Default constructor. ;  ; virtual ~TAttCanvas ();  Destructor. ;  ; virtual void Copy (TAttCanvas &attcanvas) const;  Copy constructor. ;  ; Float_t GetAdate () const;  ; Float_t GetTitleFromTop () const;  ; Float_t GetXBetween () const;  ; Float_t GetXdate () const;  ; Float_t GetYBetween () const;  ; Float_t GetYdate () const;  ; virtual TClass * IsA () const;  ; virtual void Print (Option_t *option="""") const;  Print canvas attributes. ;  ; virtual void ResetAttCanvas (Option_t *option="""");  Print canvas attributes. ;  ; virtual void SetAdate (Float_t adate);  ; virtual void SetTitleFromTop (Float_t titlefromtop);  ; virtual void SetXBetween (Float_t xbetween);  ; virtual void SetXdate (Float_t xdate);  ; virtual void SetYBetween (Float_t ybetween);  ; virtual void SetYdate (Float_t ydate);  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Private Attributes; Float_t fAdate;  Alignment for the date. ;  ; Float_t fTitleFromTop;  Y distance of Global Title from top. ;  ; Float_t fXBetween;  X distance between pads. ;  ; Float_t fXdate;  X position where to draw the date. ;  ; Float_t fYBetween;  Y distance between pads. ;  ; Float_t fYdate;  X position where to draw the date. ;  . #include <TAttCanvas.h>; Constructor & Destructor Documentation. ◆ TAttCan",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTAttCanvas.html:79,Load,Loading,79,doc/master/classTAttCanvas.html,https://root.cern,https://root.cern/doc/master/classTAttCanvas.html,1,['Load'],['Loading']
Performance,". ROOT: TAttFill Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TAttFill Class ReferenceCore ROOT classes » Base ROOT classes | Graphics » Graphics attributes. ; Fill Area Attributes class. ; This class is used (in general by secondary inheritance) by many other classes (graphics, histograms). It holds all the fill area attributes. Fill Area attributes; Fill Area attributes are:. Fill Area color; Fill Area style. Fill Area color; The fill area color is a color index (integer) pointing in the ROOT color table. The fill area color of any class inheriting from TAttFill can be changed using the method SetFillColor and retrieved using the method GetFillColor. The following table shows the first 50 default colors. Color transparency; SetFillColorAlpha(), allows to set a transparent color. In the following example the fill color of the histogram histo is set to blue with an opacity of 35% (i.e. a transparency of 65%). (The color kBlue itself is internally stored as fully opaque.); histo->SetFillColorAlpha(kBlue, 0.35);; kBlue@ kBlueDefinition Rtypes.h:66; The transparency is available on all platforms when the flag OpenGL.CanvasPreferGL is set to 1 in $ROOTSYS/etc/system.rootrc, or on Mac with the Cocoa backend. On the file output it is visible with PDF, PNG, Gif, JPEG, SVG, TeX... but not PostScript.; Alternatively, you can call at the top of your script gSytle->SetCanvasPreferGL();. Or if you prefer to activate GL for a single canvas c, then use c->SetSupportGL(true);. The ROOT Color Wheel.; The wheel contains the recommended 216 colors to be used in web applications. The colors in the Color Wheel are created by TColor::CreateColorWheel.; Using this color set for your text, background or graphics will give your application a consistent appearance across different platforms and browsers.; Colors",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTAttFill.html:77,Load,Loading,77,doc/master/classTAttFill.html,https://root.cern,https://root.cern/doc/master/classTAttFill.html,1,['Load'],['Loading']
Performance,". ROOT: TAttImage Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TAttImage Class ReferenceGraphics » 2D Graphics » Basic graphics | Graphics » Graphics attributes. ; TImage attributes. ; Image attributes are:. Image Quality (see EImageQuality for the list of qualities); Compression defines the compression rate of the color data in the internal image structure. Speed and memory depends on this rate, but not the image display itself 0: no compression; 100: max compression; Radio Flag: kTRUE the x/y radio of the displayed image is always identical to the original image kFALSE the x and y size of the displayed image depends on the size of the pad; Palette: Defines the conversion from a pixel value to the screen color. This class is used (in general by secondary inheritance) by some other classes (image display). ; Definition at line 59 of file TAttImage.h. Public Types; enum  EImageQuality { ;   kImgDefault = -1; , kImgPoor = 0; , kImgFast = 1; , kImgGood = 2; , ;   kImgBest = 3. };  . Public Member Functions;  TAttImage ();  TAttImage default constructor. ;  ;  TAttImage (EImageQuality lquality, UInt_t lcompression, Bool_t constRatio);  TAttImage normal constructor. ;  ; virtual ~TAttImage ();  TAttImage destructor. ;  ; void Copy (TAttImage &attline) const;  Copy this image attributes to a new attimage. ;  ; virtual void EditorClosed ();  ; Bool_t GetConstRatio () const;  ; UInt_t GetImageCompression () const;  ; EImageQuality GetImageQuality () const;  ; virtual const TImagePalette & GetPalette () const;  ; virtual TClass * IsA () const;  ; Bool_t IsPaletteEnabled () const;  ; virtual void ResetAttImage (Option_t *option="""");  Reset this image attributes to default values. ;  ; virtual void SaveImageAttributes (std::ostream &out, const char *name, EImageQuality qualdef=kImgD",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTAttImage.html:78,Load,Loading,78,doc/master/classTAttImage.html,https://root.cern,https://root.cern/doc/master/classTAttImage.html,1,['Load'],['Loading']
Performance,". ROOT: TAttLine Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TAttLine Class ReferenceCore ROOT classes » Base ROOT classes | Graphics » Graphics attributes. ; Line Attributes class. ; This class is used (in general by secondary inheritance) by many other classes (graphics, histograms). It holds all the line attributes. Line attributes; Line attributes are:. Line Color; Line Width; Line Style. Line Color; The line color is a color index (integer) pointing in the ROOT color table. The line color of any class inheriting from TAttLine can be changed using the method SetLineColor and retrieved using the method GetLineColor. The following table shows the first 50 default colors. Color transparency; SetLineColorAlpha(), allows to set a transparent color. In the following example the line color of the histogram histo is set to blue with an opacity of 35% (i.e. a transparency of 65%). (The color kBlue itself is internally stored as fully opaque.); histo->SetLineColorAlpha(kBlue, 0.35);; kBlue@ kBlueDefinition Rtypes.h:66; The transparency is available on all platforms when the flag OpenGL.CanvasPreferGL is set to 1 in $ROOTSYS/etc/system.rootrc, or on Mac with the Cocoa backend. On the file output it is visible with PDF, PNG, Gif, JPEG, SVG, TeX ... but not PostScript.; Alternatively, you can call at the top of your script gSytle->SetCanvasPreferGL();. Or if you prefer to activate GL for a single canvas c, then use c->SetSupportGL(true);. Line Width; The line width is expressed in pixel units. The line width of any class inheriting from TAttLine can be changed using the method SetLineWidth and retrieved using the method GetLineWidth. The following picture shows the line widths from 1 to 10 pixels. Line Style; Line styles are identified via integer numbers. The line style of any class inheriting ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTAttLine.html:77,Load,Loading,77,doc/master/classTAttLine.html,https://root.cern,https://root.cern/doc/master/classTAttLine.html,1,['Load'],['Loading']
Performance,". ROOT: TAttMarker Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TAttMarker Class ReferenceCore ROOT classes » Base ROOT classes | Graphics » Graphics attributes. ; Marker Attributes class. ; This class is used (in general by secondary inheritance) by many other classes (graphics, histograms). It holds all the markers attributes. Marker attributes; The marker attributes are:. Marker color; Marker style; Marker line width. Marker size. Marker color; The marker color is a color index (integer) pointing in the ROOT color table. The marker color of any class inheriting from TAttMarker can be changed using the method SetMarkerColor and retrieved using the method GetMarkerColor. The following table shows the first 50 default colors. Color transparency; SetMarkerColorAlpha(), allows to set a transparent color. In the following example the marker color of the histogram histo is set to blue with an opacity of 35% (i.e. a transparency of 65%). (The color kBlue itself is internally stored as fully opaque.); histo->SetMarkerColorAlpha(kBlue, 0.35);; kBlue@ kBlueDefinition Rtypes.h:66; The transparency is available on all platforms when the flag OpenGL.CanvasPreferGL is set to 1 in $ROOTSYS/etc/system.rootrc, or on Mac with the Cocoa backend. On the file output it is visible with PDF, PNG, Gif, JPEG, SVG, TeX ... but not PostScript.; Alternatively, you can call at the top of your script gSytle->SetCanvasPreferGL();. Or if you prefer to activate GL for a single canvas c, then use c->SetSupportGL(true);. Marker style; The Marker style defines the markers' shape. The marker style of any class inheriting from TAttMarker can be changed using the method SetMarkerStyle and retrieved using the method GetMarkerStyle.; The following list gives the currently supported markers (screen and PostScript) style. Each ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTAttMarker.html:79,Load,Loading,79,doc/master/classTAttMarker.html,https://root.cern,https://root.cern/doc/master/classTAttMarker.html,1,['Load'],['Loading']
Performance,". ROOT: TAttPad Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TAttPad Class ReferenceCore ROOT classes » Base ROOT classes | Graphics » Graphics attributes. ; Manages default Pad attributes. ; Referenced by TStyle. ; Definition at line 19 of file TAttPad.h. Public Member Functions;  TAttPad ();  Constructor. ;  ; virtual ~TAttPad ();  Destructor. ;  ; virtual void Copy (TAttPad &attpad) const;  copy function ;  ; Float_t GetAfile () const;  ; Float_t GetAstat () const;  ; Float_t GetBottomMargin () const;  ; Int_t GetFrameBorderMode () const;  ; Width_t GetFrameBorderSize () const;  ; Color_t GetFrameFillColor () const;  ; Style_t GetFrameFillStyle () const;  ; Color_t GetFrameLineColor () const;  ; Style_t GetFrameLineStyle () const;  ; Width_t GetFrameLineWidth () const;  ; Float_t GetLeftMargin () const;  ; Float_t GetRightMargin () const;  ; Float_t GetTopMargin () const;  ; Float_t GetXfile () const;  ; Float_t GetXstat () const;  ; Float_t GetYfile () const;  ; Float_t GetYstat () const;  ; virtual TClass * IsA () const;  ; virtual void Print (Option_t *option="""") const;  Print function. ;  ; virtual void ResetAttPad (Option_t *option="""");  Reset pad attributes. ;  ; virtual void SetAfile (Float_t afile);  ; virtual void SetAstat (Float_t astat);  ; virtual void SetBottomMargin (Float_t bottommargin);  Set Pad bottom margin in fraction of the pad height. ;  ; void SetFrameBorderMode (Int_t mode=1);  ; void SetFrameBorderSize (Width_t size=1);  ; void SetFrameFillColor (Color_t color=1);  ; void SetFrameFillStyle (Style_t styl=0);  ; void SetFrameLineColor (Color_t color=1);  ; void SetFrameLineStyle (Style_t styl=0);  ; void SetFrameLineWidth (Width_t width=1);  ; virtual void SetLeftMargin (Float_t leftmargin);  Set Pad left margin in fraction of the pad width. ;  ; virtual void Se",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTAttPad.html:76,Load,Loading,76,doc/master/classTAttPad.html,https://root.cern,https://root.cern/doc/master/classTAttPad.html,1,['Load'],['Loading']
Performance,". ROOT: TAttParticle Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Static Public Attributes |; Private Attributes |; List of all members ; TAttParticle Class ReferenceMonte Carlo » EG. ; Particle definition, partly based on GEANT3 particle definition. ; Definition at line 30 of file TAttParticle.h. Public Member Functions;  TAttParticle ();  Particle definition default constructor. ;  ;  TAttParticle (const char *name, const char *title, Double_t Mass, Bool_t Stable, Double_t DecayWidth, Double_t Charge, const char *Type, Int_t MCnumber, Int_t granularity=90, Double_t LowerCutOff=1.e-5, Double_t HighCutOff=1.e4);  Particle definition normal constructor. ;  ;  ~TAttParticle () override;  Particle destructor. ;  ; virtual Double_t GetCharge () const;  ; virtual Double_t GetDecayWidth () const;  ; virtual Double_t GetEnergyCut () const;  ; virtual Double_t GetEnergyLimit () const;  ; virtual Double_t GetGranularity () const;  ; virtual Double_t GetMass () const;  ; virtual Int_t GetMCNumber () const;  ; virtual const char * GetParticleType () const;  ; virtual Bool_t GetStable () const;  ; TClass * IsA () const override;  ; void Print (Option_t *option="""") const override;  Print the entire information of this kind of particle. ;  ; virtual Double_t SampleMass () const;  Samples a mass according to the Breit-Wigner resonance distribution. ;  ; virtual Double_t SampleMass (Double_t widthcut) const;  Samples a mass in the interval: ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTAttParticle.html:81,Load,Loading,81,doc/master/classTAttParticle.html,https://root.cern,https://root.cern/doc/master/classTAttParticle.html,1,['Load'],['Loading']
Performance,". ROOT: TAttText Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TAttText Class ReferenceCore ROOT classes » Base ROOT classes | Graphics » Graphics attributes. ; Text Attributes class. ; This class is used (in general by secondary inheritance) by many other classes (graphics, histograms). It holds all the text attributes. Text attributes; Text attributes are:. Text Alignment; Text Angle; Text Color; Text Size; Text Font and Precision; Font quality and speed; How to use True Type Fonts; List of the currently supported fonts. Text Alignment; The text alignment is an integer number (align) allowing to control the horizontal and vertical position of the text string with respect to the text position. The text alignment of any class inheriting from TAttText can be changed using the method SetTextAlign and retrieved using the method GetTextAlign.; align = 10*HorizontalAlign + VerticalAlign; For horizontal alignment the following convention applies:; 1=left adjusted, 2=centered, 3=right adjusted; For vertical alignment the following convention applies:; 1=bottom adjusted, 2=centered, 3=top adjusted; For example:; align = 11 = left adjusted and bottom adjusted; align = 32 = right adjusted and vertically centered; {; auto *Ta = new TCanvas(""Ta"",""Ta"",0,0,500,200);; Ta->Range(0,0,1,1);; ; TLine lv;; lv.SetLineStyle(3);; lv.SetLineColor(kBlue);; lv.DrawLine(0.33,0.0,0.33,1.0);; lv.DrawLine(0.6,0.165,1.,0.165);; lv.DrawLine(0.6,0.493,1.,0.493);; lv.DrawLine(0.6,0.823,1.,0.823);; ; // Horizontal alignment.; auto *th1 = new TText(0.33,0.165,""Left adjusted"");; th1->SetTextAlign(11); th1->SetTextSize(0.12);; th1->Draw();; ; auto *th2 = new TText(0.33,0.493,""Center adjusted"");; th2->SetTextAlign(21); th2->SetTextSize(0.12);; th2->Draw();; ; auto *th3 = new TText(0.33,0.823,""Right adjusted"");; th3->SetTextAli",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTAttText.html:77,Load,Loading,77,doc/master/classTAttText.html,https://root.cern,https://root.cern/doc/master/classTAttText.html,1,['Load'],['Loading']
Performance,". ROOT: TAuthenticate Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Static Private Member Functions |; Private Attributes |; Static Private Attributes |; Friends |; List of all members ; TAuthenticate Class Reference. . Definition at line 53 of file TAuthenticate.h. Public Types; enum  ESecurity { ;   kClear; , kUnsupported; , kKrb5; , kGlobus; , ;   kSSH; , kRfio. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TAuthenticate (TSocket *sock, const char *remote, const char *proto, const char *user="""");  Create authentication object. ;  ; virtual ~TAuthenticate ();  ; Bool_t Authenticate ();  Authenticate to remote rootd or proofd server. ;  ; Int_t AuthExists (TString User, Int_t method, const char *Options, Int_t *Message, Int_t *Rflag, CheckSecCtx_t funcheck);  Check if we have a valid established sec context in memory Retrieves relevant info and negotiates with server. ;  ; void CatchTimeOut ();  Called in connection with a timer timeout. ;  ; Bool_t CheckNetrc (TString &user, TString &passwd);  Try to get user name and passwd from the ~/.rootnetrc or ~/.netrc files. ;  ; Bool_t CheckNetrc (TString &user, TString &passwd, Bool_t &pwhash, Bool_t srppwd);  Try to get user name and",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTAuthenticate.html:82,Load,Loading,82,doc/master/classTAuthenticate.html,https://root.cern,https://root.cern/doc/master/classTAuthenticate.html,1,['Load'],['Loading']
Performance,". ROOT: TAutoBinVal Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; TAutoBinVal Class Reference. . Definition at line 86 of file TProofPlayer.cxx. Public Member Functions;  TAutoBinVal (const char *name, Double_t xmin, Double_t xmax, Double_t ymin, Double_t ymax, Double_t zmin, Double_t zmax);  ; void GetAll (Double_t &xmin, Double_t &xmax, Double_t &ymin, Double_t &ymax, Double_t &zmin, Double_t &zmax);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTAutoBinVal.html:80,Load,Loading,80,doc/master/classTAutoBinVal.html,https://root.cern,https://root.cern/doc/master/classTAutoBinVal.html,1,['Load'],['Loading']
Performance,". ROOT: TAxis Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Types |; Private Member Functions |; Private Attributes |; List of all members ; TAxis Class ReferenceHistogram Library » Histogram classes. ; Class to manage histogram axis. ; This class manages histogram axis. It is referenced by TH1 and TGraph. To make a graphical representation of an histogram axis, this class references the TGaxis class. TAxis supports axis with fixed or variable bin sizes. Labels may be associated to individual bins. See examples of various axis representations drawn by class TGaxis. ; Definition at line 31 of file TAxis.h. Public Types; enum  EStatusBits { ;   kDecimals = (1ULL << ( 7 )); , kTickPlus = (1ULL << ( 9 )); , kTickMinus = (1ULL << ( 10 )); , kAxisRange = (1ULL << ( 11 )); , ;   kCenterTitle = (1ULL << ( 12 )); , kCenterLabels = (1ULL << ( 14 )); , kRotateTitle = (1ULL << ( 15 )); , kPalette = (1ULL << ( 16 )); , ;   kNoExponent = (1ULL << ( 17 )); , kLabelsHori = (1ULL << ( 18 )); , kLabelsVert = (1ULL << ( 19 )); , kLabelsDown = (1ULL << ( 20 )); , ;   kLabelsUp = (1ULL << ( 21 )); , kIsInteger = (1ULL << ( 22 )); , kMoreLogLabels = (1ULL << ( 23 )). };  TAxis status bits. More...;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Publ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTAxis.html:74,Load,Loading,74,doc/master/classTAxis.html,https://root.cern,https://root.cern/doc/master/classTAxis.html,1,['Load'],['Loading']
Performance,". ROOT: TAxis3D Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; List of all members ; TAxis3D Class ReferenceGraphics » 3D Graphics » Basic 3D graphics. ; The 3D axis painter class. ; This class provide up to 3 axes to any 3D ROOT plot and ""ZOOM"" service. ExecuteEvent() method does provide zooming and moving a projection 3D object within TPad client area. With Zoom mode on the user can access TAxis3D context menu and set /change the attributes of axes all together or separately.; To add the 3D rulers to any 3D view one has to create an instance of this class and Draw it.; TAxis3D rulers;; rulers.Draw();; TAxis3DThe 3D axis painter class.Definition TAxis3D.h:31; TObject::Drawvirtual void Draw(Option_t *option="""")Default Draw method for all objects.Definition TObject.cxx:280; One can use a static method to create ruler and attach it to the current gPad; TAxis3D::ToggleRulers(); // Brings the 3D axes up; TAxis3D::ToggleRulers(); // next calls remove the rulers from the TPad etc; TAxis3D::ToggleRulersstatic TAxis3D * ToggleRulers(TVirtualPad *pad=nullptr)Turn ON / OFF the ""Ruler"", TAxis3D object attached to the current pad.Definition TAxis3D.cxx:738; To activate Zoomer one may call; TAxis3D::ToggleZoom();; TAxis3D::ToggleZoomstatic TAxis3D * ToggleZoom(TVirtualPad *pad=nullptr)Turn ON / OFF the ""Ruler"" and ""zoom mode"" of the TAxis3D object attached to the current pad (if pad =...Definition TAxis3D.cxx:766; each time one needs move or zoom the image. Then the user can:. move: . zoom: . its 3D view with <left-mouse button> press / move. The ""Zoom"" deactivates itself just the user release the <left-mouse button>; To change attributes of the rulers attached to the current Pad, one may query its pointer first:; TAxis3D *axis = TAxis3",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTAxis3D.html:76,Load,Loading,76,doc/master/classTAxis3D.html,https://root.cern,https://root.cern/doc/master/classTAxis3D.html,1,['Load'],['Loading']
Performance,". ROOT: TAxisModLab Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TAxisModLab Class ReferenceGraphics » 2D Graphics » Basic graphics. ; TAxis helper class used to store the modified labels. ; Definition at line 21 of file TAxisModLab.h. Public Member Functions;  TAxisModLab ();  TAxisModLab default constructor. ;  ; Int_t GetAlign () const;  ; Double_t GetAngle () const;  ; Int_t GetColor () const;  ; Int_t GetFont () const;  ; Int_t GetLabNum () const;  ; Double_t GetLabValue () const;  ; Double_t GetSize () const;  ; const TString & GetText () const;  ; TClass * IsA () const override;  ; void SetAlign (Int_t a=-1);  Set modified label alignment. ;  ; void SetAngle (Double_t a=-1.);  Set modified label angle. ;  ; void SetColor (Int_t c=-1);  Set modified label color. ;  ; void SetFont (Int_t f=-1);  Set modified label font. ;  ; void SetLabNum (Int_t n=0);  Set modified label number. ;  ; void SetLabValue (Double_t v=0.);  Set modified label value. ;  ; void SetSize (Double_t s=-1.);  Set modified label size. ;  ; void SetText (TString t="""");  Set modified label text. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTAxisModLab.html:80,Load,Loading,80,doc/master/classTAxisModLab.html,https://root.cern,https://root.cern/doc/master/classTAxisModLab.html,1,['Load'],['Loading']
Performance,". ROOT: TBRIK Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TBRIK Class ReferenceGraphics » 3D Graphics » Basic 3D graphics. ; A box with faces perpendicular to the axes. . It has 6 parameters:. name: name of the shape; title: shape's title; material: (see TMaterial); dx: half-length of the box along the x-axis; dy: half-length of the box along the y-axis; dz: half-length of the box along the z-axis . Definition at line 26 of file TBRIK.h. Public Member Functions;  TBRIK ();  BRIK shape default constructor. ;  ;  TBRIK (const char *name, const char *title, const char *material, Float_t dx, Float_t dy, Float_t dz);  BRIK shape normal constructor. ;  ;  ~TBRIK () override;  BRIK shape default destructor. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a BRIK. ;  ; const TBuffer3D & GetBuffer3D (Int_t reqSections) const override;  Get buffer 3D. ;  ; Float_t GetDx () const;  ; Float_t GetDy () const;  ; Float_t GetDz () const;  ; TClass * IsA () const override;  ; void Sizeof3D () const override;  Return total X3D needed by TNode::ls (when called with option ""x"") ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TShape;  TShape ();  Shape default constructor. ;  ;  TShape (const char *name, const char *title, const char *material);  Shape normal constructor. ;  ;  TShape (const TShape &);  copy constructor ;  ;  ~TShape () override;  Shape default destructor. ;  ; TMaterial * GetMaterial () const;  ; virtual Int_t GetNumber () const;  ; Int_t GetVisibility () const;  ; TClass * IsA () const override;  ; TShape & operator= (const TShape &);  assignment operator ;  ; void Paint ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBRIK.html:74,Load,Loading,74,doc/master/classTBRIK.html,https://root.cern,https://root.cern/doc/master/classTBRIK.html,1,['Load'],['Loading']
Performance,". ROOT: TBackCompFitter Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; TBackCompFitter Class ReferenceHistogram Library. ; Backward compatible implementation of TVirtualFitter. ; Backward compatible implementation of TVirtualFitter using the class ROOT::Fit::Fitter. This class is created after fitting an histogram (TH1), TGraph or TTree and provides in addition to the methods of the TVirtualFitter hooks to access the fit result class (ROOT::Fit::FitResult), the fit configuration (ROOT::Fit::FitConfig) or the fit data (ROOT::Fit::FitData) using; TBackCompFitter * fitter = (TBackCompFitter *) TVirtualFitter::GetFitter();; ROOT::Fit::FitResult & result = fitter->GetFitResult();; result.Print(std::cout);; resultOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t resultDefinition TGWin32VirtualXProxy.cxx:174; ROOT::Fit::FitResultclass containing the result of the fit and all the related information (fitted parameter values,...Definition FitResult.h:47; TBackCompFitterBackward compatible implementation of TVirtualFitter.Definition TBackCompFitter.h:37; TBackCompFitter::GetFitResultconst ROOT::Fit::FitResult & GetFitResult() constGet reference to Fit Result object (NOTE: it will be invalid when class is deleted)Definition TBackCompFitter.h:94; TVirtualFitter::GetFitterstatic TVirtualFitter * GetFitter()static: return the current FitterDefinition TVirtualFitter.cxx:209; Methods for getting the confidence level or contours are also provided. Note that after a new calls to TH1::Fit (or similar) the class will be deleted and all reference to the FitR",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBackCompFitter.html:84,Load,Loading,84,doc/master/classTBackCompFitter.html,https://root.cern,https://root.cern/doc/master/classTBackCompFitter.html,1,['Load'],['Loading']
Performance,". ROOT: TBaseClass Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Types |; Private Member Functions |; Private Attributes |; List of all members ; TBaseClass Class Reference. ; Each class (see TClass) has a linked list of its base class(es). ; This class describes one single base class. The base class info is obtained via the CINT api. see class TCling.; The base class information is used a.o. in to find all inherited methods. ; Definition at line 33 of file TBaseClass.h. Public Member Functions;  TBaseClass (BaseClassInfo_t *info=nullptr, TClass *cl=nullptr);  Default TBaseClass ctor. ;  ; virtual ~TBaseClass ();  TBaseClass dtor deletes adopted CINT BaseClassInfo object. ;  ; void Browse (TBrowser *b) override;  Called by the browser, to browse a baseclass. ;  ; TClass * GetClassPointer (Bool_t load=kTRUE);  Get pointer to the base class TClass. ;  ; Int_t GetDelta ();  Get offset from ""this"" to part of base class. ;  ; const char * GetTitle () const override;  Get base class description (comment). ;  ; TClass * IsA () const override;  ; Bool_t IsFolder () const override;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; ROOT::ESTLType IsSTLContainer ();  Return which type (if any) of STL container the data member is. ;  ; Long_t Property () const override;  Get property description word. For meaning of bits see EProperty. ;  ; void SetClass (TClass *cl);  ; void Streamer (TBuffer &) override;  Stream an object of TBaseClass. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TDictionary;  TDictionary ();  ;  TDictionary (const char *name);  ;  TDictionary (const TDictionary &dict);  ; virtual ~TDictionary ();  ; void CreateAttributeMap ();  ; TDictAttributeMap * GetAttributeMap () const;  ; TClass * IsA () con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBaseClass.html:79,Load,Loading,79,doc/master/classTBaseClass.html,https://root.cern,https://root.cern/doc/master/classTBaseClass.html,2,"['Load', 'load']","['Loading', 'load']"
Performance,". ROOT: TBasket Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Static Public Attributes |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TBasket Class ReferenceTree Library. ; Manages buffers for branches of a Tree. ; See picture in TTree. ; Definition at line 34 of file TBasket.h. Public Types; enum class  EIOBits : Char_t { kGenerateOffsetMap = (1ULL << ( 0 )); , kSupported = kGenerateOffsetMap; };  ; enum class  EUnsupportedIOBits : Char_t { kUnsupported = 0; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TBasket ();  Default constructor. ;  ;  TBasket (const char *name, const char *title, TBranch *branch);  Basket normal constructor, used during writing. ;  ;  TBasket (TDirectory *motherDir);  Constructor used during reading. ;  ;  ~TBasket () override;  Basket destructor. ;  ; virtual void AdjustSize (Int_t newsize);  Increase the size of the current fBuffer up to newsize. ;  ; Long64_t CopyTo (TFile *to);  Copy the basket of this branch onto the file to. ;  ; virtual void DeleteEntryOffset ();  Delete fEntryOffset array. ;  ; virtual Int_t DropBuffers ();  Drop buffers of this basket if it is not the current basket. ;  ; TBranch * Get",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBasket.html:76,Load,Loading,76,doc/master/classTBasket.html,https://root.cern,https://root.cern/doc/master/classTBasket.html,1,['Load'],['Loading']
Performance,". ROOT: TBasketSQL Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TBasketSQL Class ReferenceTree Library. ; Implement TBasket for a SQL backend. ; Definition at line 30 of file TBasketSQL.h. Public Member Functions;  TBasketSQL ();  Default constructor. ;  ;  TBasketSQL (const char *name, const char *title, TBranch *branch, TSQLResult **rs, TString *insert_query, std::vector< Int_t > *vc, TSQLRow **row);  Regular constructor. ;  ;  ~TBasketSQL () override;  Destructor. ;  ; void CreateBuffer (const char *name, TString title, std::vector< Int_t > *vc, TBranch *branch, TSQLResult **rs);  Create a TSQLBuffer for this basket. ;  ; TSQLResult * GetResultSet ();  ; TClass * IsA () const override;  ; void PrepareBasket (Long64_t entry) override;  Prepare the basket for the next entry. ;  ; virtual Int_t ReadBasketBuffers (Long64_t pos, Int_t len, TFile *file);  See TBasket::ReadBasketBuffers. This is not implemented in TBasketSQL. ;  ; virtual Int_t ReadBasketBytes (Long64_t pos, TFile *file);  See TBasket::ReadBasketBytes. This is not implemented in TBasketSQL. ;  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Update (Int_t offset, Int_t skipped) override;  See TBasket::Update. ;  ;  Public Member Functions inherited from TBasket;  TBasket ();  Default constructor. ;  ;  TBasket (const char *name, const char *title, TBranch *branch);  Basket normal constructor, used during writing. ;  ;  TBasket (TDirectory *motherDir);  Constructor used during reading. ;  ;  ~TBasket () override;  Basket destructor. ;  ; virtual void AdjustSize (Int_t newsize);  Increase the size of the current fBuffer up to newsize. ;  ; Long64_t CopyTo (TFile *to);  Copy the basket of this branch onto the file",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBasketSQL.html:79,Load,Loading,79,doc/master/classTBasketSQL.html,https://root.cern,https://root.cern/doc/master/classTBasketSQL.html,1,['Load'],['Loading']
Performance,". ROOT: TBenchmark Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TBenchmark Class ReferenceCore ROOT classes » Base ROOT classes. ; This class is a ROOT utility to help benchmarking applications. ; Definition at line 29 of file TBenchmark.h. Public Member Functions;  TBenchmark ();  Benchmark default constructor. ;  ; virtual ~TBenchmark ();  Benchmark destructor. ;  ; Int_t GetBench (const char *name) const;  Returns index of Benchmark name. ;  ; Float_t GetCpuTime (const char *name);  Returns Cpu time used by Benchmark name. ;  ; Float_t GetRealTime (const char *name);  Returns Realtime used by Benchmark name. ;  ; TClass * IsA () const override;  ; void Print (Option_t *name="""") const override;  Prints parameters of Benchmark name. ;  ; virtual void Reset ();  Reset all Benchmarks. ;  ; virtual void Show (const char *name);  Stops Benchmark name and Prints results. ;  ; virtual void Start (const char *name);  Starts Benchmark with the specified name. ;  ; virtual void Stop (const char *name);  Terminates Benchmark with specified name. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void Summary (Float_t &rt, Float_t &cp);  Prints a summary of all benchmarks. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBenchmark.html:79,Load,Loading,79,doc/master/classTBenchmark.html,https://root.cern,https://root.cern/doc/master/classTBenchmark.html,1,['Load'],['Loading']
Performance,". ROOT: TBinomialEfficiencyFitter Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TBinomialEfficiencyFitter Class ReferenceHistogram Library. ; Binomial fitter for the division of two histograms. ; Use when you need to calculate a selection's efficiency from two histograms, one containing all entries, and one containing the subset of these entries that pass the selection, and when you have a parametrization available for the efficiency as a function of the variable(s) under consideration.; A very common problem when estimating efficiencies is that of error estimation: when no other information is available than the total number of events N and the selected number n, the best estimate for the selection efficiency p is n/N. Standard binomial statistics dictates that the uncertainty (this presupposes sufficiently high statistics that an approximation by a normal distribution is reasonable) on p, given N, is ; \[; \sqrt{\frac{p(1-p)}{N}}; \]. However, when p is estimated as n/N, fluctuations from the true p to its estimate become important, especially for low numbers of events, and giving rise to biased results.; When fitting a parametrized efficiency, these problems can largely be overcome, as a hypothesized true efficiency is available by construction. Even so, simply using the corresponding uncertainty still presupposes that Gaussian errors yields a reasonable approximation. When using, instead of binned efficiency histograms, the original numerator and denominator histograms, a binned maximum likelihood can be constructed as the product of bin-by-bin binomial probabilities to select n out of N events. Assuming that a correct parametrization of the efficiency is provided, this construction in general yields less biased results (and is much less sensitive to binnin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBinomialEfficiencyFitter.html:94,Load,Loading,94,doc/master/classTBinomialEfficiencyFitter.html,https://root.cern,https://root.cern/doc/master/classTBinomialEfficiencyFitter.html,1,['Load'],['Loading']
Performance,". ROOT: TBits Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TBits Class ReferenceCore ROOT classes » Containers. ; Container of bits. ; This class provides a simple container of bits. Each bit can be set and tested via the functions SetBitNumber and TestBitNumber.; The default value of all bits is kFALSE. The size of the container is automatically extended when a bit number is either set or tested. To reduce the memory size of the container use the Compact function, this will discard the memory occupied by the upper bits that are 0. ; Definition at line 26 of file TBits.h. Classes; class  TReference;  . Public Member Functions;  TBits (const TBits &);  TBits copy constructor. ;  ;  TBits (UInt_t nbits=8);  TBits constructor. All bits set to 0. ;  ; virtual ~TBits ();  TBits destructor. ;  ; void Clear (Option_t *option="""") override;  Clear the value. ;  ; void Compact ();  Reduce the storage used by the object to a minimun. ;  ; UInt_t CountBits (UInt_t startBit=0) const;  Return number of bits set to 1 starting at bit startBit. ;  ; UInt_t FirstNullBit (UInt_t startBit=0) const;  Return position of first null bit (starting from position 0 and up) ;  ; UInt_t FirstSetBit (UInt_t startBit=0) const;  Return position of first non null bit (starting from position 0 and up) ;  ; void Get (Char_t *array) const;  Copy all the byes. ;  ; void Get (Int_t *array) const;  ; void Get (Long64_t *array) const;  ; void Get (Short_t *array) const;  ; void Get (UChar_t *array) const;  ; void Get (UInt_t *array) const;  ; void Get (ULong64_t *array) const;  ; void Get (UShort_t *array) const;  ; UInt_t GetNbits () const;  ; UInt_t GetNbytes () const;  ; TClass * IsA () const override;  ; UInt_t LastNullBit (UInt_t startBit=999999999) const;  Return position of first",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBits.html:74,Load,Loading,74,doc/master/classTBits.html,https://root.cern,https://root.cern/doc/master/classTBits.html,1,['Load'],['Loading']
Performance,". ROOT: TBlinkTimer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; TBlinkTimer Class Reference. . Definition at line 222 of file TGTextEntry.cxx. Public Member Functions;  TBlinkTimer (TGTextEntry *t, Long_t ms);  ; Bool_t Notify () override;  Notify when timer times out and reset the timer. ;  ;  Public Member Functions inherited from TTimer;  TTimer (const char *command, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (Long_t milliSec=0, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (TObject *obj, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ; virtual ~TTimer ();  ; void Add () override;  ; Bool_t CheckTimer (const TTime &now);  Check if timer timed out. ;  ; TTime GetAbsTime () const;  ; const char * GetCommand () const;  ; TObject * GetObject ();  ; TTime GetTime () const;  ; UInt_t GetTimerID ();  ; Bool_t HasTimedOut () const;  ; TClass * IsA () const override;  ; Bool_t IsAsync () const;  ; Bool_t IsInterruptingSyscalls () const;  ; Bool_t IsRunning ();  This function checks if the timer is running within gSystem (Has been started and did not finish yet). ;  ; Bool_t IsSync () const;  ; Bool_t Notify () override;  Notify when timer times out. ;  ; void Remove () override;  ; void Reset ();  Reset the timer. ;  ; void SetCommand (const char *command);  Set the interpreter command to be executed at time out. ;  ; void SetInterruptSyscalls (Bool_t set=kTRUE);  When the argument is true the a-synchronous timer (SIGALRM) signal handler is set so that interrupted syscalls will not be restarted by the kernel. ;  ; void SetObject (TObject *object);  Set the object to be notified at time out. ;  ; void SetTime (Long_t milliSec);  ; void SetTimerID (UInt_t id=0);  ; virtual void Start (Long_t milliS",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBlinkTimer.html:80,Load,Loading,80,doc/master/classTBlinkTimer.html,https://root.cern,https://root.cern/doc/master/classTBlinkTimer.html,1,['Load'],['Loading']
Performance,". ROOT: TBox Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Attributes |; List of all members ; TBox Class ReferenceGraphics » 2D Graphics » Basic graphics. ; Create a Box. ; A box is defined by :. Its bottom left coordinates x1,y1; Its top right coordinates x2,y2. A box has line attributes (see TAttLine) and fill area attributes (see TAttFill). ; Definition at line 22 of file TBox.h. Public Types; enum  { kCannotMove = (1ULL << ( 12 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TBox ();  Box default constructor. ;  ;  TBox (const TBox &box);  Box copy constructor. ;  ;  TBox (Double_t x1, Double_t y1, Double_t x2, Double_t y2);  Box standard constructor. ;  ;  ~TBox () override;  Box destructor. ;  ; void Copy (TObject &box) const override;  Copy a Box. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a box. ;  ; void Draw (Option_t *option="""") override;  Draw this box with its current attributes. ;  ; virtual TBox * DrawBox (Double_t x1, Double_t y1, Double_t x2, Double_t y2);  Draw this box with new coordinates. ;  ; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override;  Execute action corresponding to one even",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBox.html:73,Load,Loading,73,doc/master/classTBox.html,https://root.cern,https://root.cern/doc/master/classTBox.html,1,['Load'],['Loading']
Performance,". ROOT: TBranch Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Types |; Private Member Functions |; Friends |; List of all members ; TBranch Class ReferenceTree Library. ; A TTree is a list of TBranches. ; A TBranch supports:; The list of TLeaf describing this branch.; The list of TBasket (branch buffers). See TBranch structure in TTree.; See also specialized branches:; TBranchObject in case the branch is one object; TBranchClones in case the branch is an array of clone objects . Definition at line 93 of file TBranch.h. Public Member Functions;  TBranch ();  Default constructor. Used for I/O by default. ;  ;  TBranch (TBranch *parent, const char *name, void *address, const char *leaflist, Int_t basketsize=32000, Int_t compress=ROOT::RCompressionSetting::EAlgorithm::kInherit);  Create a Branch as a child of another Branch. ;  ;  TBranch (TTree *tree, const char *name, void *address, const char *leaflist, Int_t basketsize=32000, Int_t compress=ROOT::RCompressionSetting::EAlgorithm::kInherit);  Create a Branch as a child of a Tree. ;  ;  ~TBranch () override;  Destructor. ;  ; virtual void AddBasket (TBasket &b, bool ondisk, Long64_t startEntry);  Add the basket to this branch. ;  ; virtual void AddLastBasket (Long64_t startEntry);  Add the start entry of the write basket (not yet created) ;  ; Int_t BackFill ();  Loop on all leaves of this branch to back fill Basket buffer. ;  ; void Browse (TBrowser *b) override;  Browser interface. ;  ; virtual void DeleteBaskets (Option_t *option="""");  Loop on all branch baskets. ;  ; virtual void DropBaskets (Option_t *option="""");  Loop on all branch baskets. ;  ; void ExpandBasketArrays ();  Increase BasketEntry buffer of a minimum of 10 locations and a maximum of 50 per cent of current s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBranch.html:76,Load,Loading,76,doc/master/classTBranch.html,https://root.cern,https://root.cern/doc/master/classTBranch.html,1,['Load'],['Loading']
Performance,". ROOT: TBranchClones Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Friends |; List of all members ; TBranchClones Class ReferenceTree Library. ; A Branch for the case of an array of clone objects. ; See TTree. ; Definition at line 29 of file TBranchClones.h. Public Member Functions;  TBranchClones ();  Default and i/o constructor. ;  ;  TBranchClones (TBranch *parent, const char *name, void *clonesaddress, Int_t basketsize=32000, Int_t compress=-1, Int_t splitlevel=1);  Constructor. ;  ;  TBranchClones (TTree *tree, const char *name, void *clonesaddress, Int_t basketsize=32000, Int_t compress=-1, Int_t splitlevel=1);  Constructor. ;  ;  ~TBranchClones () override;  Destructor. ;  ; void Browse (TBrowser *b) override;  Browse this branch. ;  ; const char * GetClassName () const override;  Return the name of the user class whose content is stored in this branch, if any. ;  ; Int_t GetEntry (Long64_t entry=0, Int_t getall=0) override;  Read all branches and return total number of bytes read. ;  ; TClonesArray * GetList () const;  ; virtual Int_t GetN () const;  ; TClass * IsA () const override;  ; bool IsFolder () const override;  Return true if more than one leaf or browsables, false otherwise. ;  ; void Print (Option_t *option="""") const override;  Print branch parameters. ;  ; void Reset (Option_t *option="""") override;  Reset branch. ;  ; void ResetAfterMerge (TFileMergeInfo *) override;  Reset branch after a merge. ;  ; void SetAddress (void *add) override;  Set address of this branch. ;  ; void SetBasketSize (Int_t buffsize) override;  Reset basket size for all sub-branches. ;  ; void SetTree (TTree *tree) override;  ; void Streamer (TBuffer &) override;  Serialize/Deserialize from a buffer. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UpdateFile ()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBranchClones.html:82,Load,Loading,82,doc/master/classTBranchClones.html,https://root.cern,https://root.cern/doc/master/classTBranchClones.html,1,['Load'],['Loading']
Performance,". ROOT: TBranchElement Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Static Private Member Functions |; Friends |; List of all members ; TBranchElement Class ReferenceTree Library. ; A Branch for the case of an object. ; Definition at line 39 of file TBranchElement.h. Public Types; enum  EBranchElementType { ;   kLeafNode = 0; , kBaseClassNode = 1; , kObjectNode = 2; , kClonesNode = 3; , ;   kSTLNode = 4; , kClonesMemberNode = 31; , kSTLMemberNode = 41. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TBranchElement ();  Default and I/O constructor. ;  ;  TBranchElement (TBranch *parent, const char *name, TClonesArray *clones, Int_t basketsize=32000, Int_t splitlevel=0, Int_t compress=ROOT::RCompressionSetting::EAlgorithm::kInherit);  Constructor when the branch object is a TClonesArray. ;  ;  TBranchElement (TBranch *parent, const char *name, TStreamerInfo *sinfo, Int_t id, char *pointer, Int_t basketsize=32000, Int_t splitlevel=0, Int_t btype=0);  Constructor when the branch object is not a TClonesArray nor an STL container. ;  ;  TBranchElement (TBranch *parent, const char *name, TVirtualCollectionProxy *co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBranchElement.html:83,Load,Loading,83,doc/master/classTBranchElement.html,https://root.cern,https://root.cern/doc/master/classTBranchElement.html,1,['Load'],['Loading']
Performance,". ROOT: TBranchObject Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TBranchObject Class ReferenceTree Library. ; A Branch for the case of an object. ; Definition at line 26 of file TBranchObject.h. Public Member Functions;  TBranchObject ();  Default constructor for BranchObject. ;  ;  TBranchObject (TBranch *parent, const char *name, const char *classname, void *addobj, Int_t basketsize=32000, Int_t splitlevel=0, Int_t compress=ROOT::RCompressionSetting::EAlgorithm::kInherit, bool isptrptr=true);  Create a BranchObject. ;  ;  TBranchObject (TTree *tree, const char *name, const char *classname, void *addobj, Int_t basketsize=32000, Int_t splitlevel=0, Int_t compress=ROOT::RCompressionSetting::EAlgorithm::kInherit, bool isptrptr=true);  Create a BranchObject. ;  ;  ~TBranchObject () override;  Destructor for a BranchObject. ;  ; void Browse (TBrowser *b) override;  Browse the branch content. ;  ; const char * GetClassName () const override;  Return the name of the user class whose content is stored in this branch, if any. ;  ; Int_t GetEntry (Long64_t entry=0, Int_t getall=0) override;  Read all branches of a BranchObject and return total number of bytes. ;  ; Int_t GetExpectedType (TClass *&clptr, EDataType &type) override;  Fill expectedClass and expectedType with information on the data type of the object/values contained in this branch (and thus the type of pointers expected to be passed to Set[Branch]Address return 0 in case of success and > 0 in case of failure. ;  ; virtual const char * GetObjClassName ();  ; TClass * IsA () const override;  ; bool IsFolder () const override;  Return TRUE if more than one leaf or if fBrowsables, FALSE otherwise. ;  ; void Print (Option_t *option="""") const override;  Print T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBranchObject.html:82,Load,Loading,82,doc/master/classTBranchObject.html,https://root.cern,https://root.cern/doc/master/classTBranchObject.html,1,['Load'],['Loading']
Performance,". ROOT: TBranchRef Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Private Attributes |; List of all members ; TBranchRef Class ReferenceTree Library. ; A branch containing and managing a TRefTable for TRef autoloading. ; It loads the TBranch containing a referenced object when requested by TRef::GetObject(), so the reference can be resolved. The information which branch to load is stored by TRefTable. Once a TBranch has read the TBranchRef's current entry it will not be told to re-read, in case the use has changed objects read from the branch. LIMITATION :; Note that this does NOT allow for autoloading of references spanning different entries. The TBranchRef's current entry has to correspond to the entry of the TBranch containing the referenced object.; The TRef cannot be stored in a top-level branch which is a TBranchObject for the auto-loading to work. E.g. you cannot store the TRefs in TObjArray, and create a top-level branch storing this TObjArray. ; Definition at line 34 of file TBranchRef.h. Public Member Functions;  TBranchRef ();  Default constructor. ;  ;  TBranchRef (TTree *tree);  Main constructor called by TTree::BranchRef. ;  ;  ~TBranchRef () override;  Typical destructor. ;  ; void Clear (Option_t *option="""") override;  Clear entries in the TRefTable. ;  ; TRefTable * GetRefTable () const;  ; TClass * IsA () const override;  ; bool Notify () override;  This function is called by TRefTable::Notify, itself called by TRef::GetObject. ;  ; void Print (Option_t *option="""") const override;  Print the TRefTable branch. ;  ; void Reset (Option_t *option="""") override;  ; void ResetAfterMerge (TFileMergeInfo *) override;  Reset a Branch after a Merge operation (drop data but keep customizations) TRefTable is cleared. ;  ; virtual Int_t SetParent (co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBranchRef.html:79,Load,Loading,79,doc/master/classTBranchRef.html,https://root.cern,https://root.cern/doc/master/classTBranchRef.html,3,"['Load', 'load']","['Loading', 'load', 'loads']"
Performance,". ROOT: TBranchSTL Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Private Types |; Private Member Functions |; Private Attributes |; List of all members ; TBranchSTL Class ReferenceTree Library. ; A Branch handling STL collection of pointers (vectors, lists, queues, sets and multisets) while storing them in split mode. ; Definition at line 22 of file TBranchSTL.h. Classes; struct  ElementBranchHelper_t;  . Public Member Functions;  TBranchSTL ();  Default constructor. ;  ;  TBranchSTL (TBranch *parent, const char *name, TVirtualCollectionProxy *collProxy, Int_t buffsize, Int_t splitlevel, TStreamerInfo *info, Int_t id);  Normal constructor, called from another branch. ;  ;  TBranchSTL (TTree *tree, const char *name, TVirtualCollectionProxy *collProxy, Int_t buffsize, Int_t splitlevel);  Normal constructor, called from TTree. ;  ;  ~TBranchSTL () override;  Destructor. ;  ; void Browse (TBrowser *b) override;  Browse an STL branch. ;  ; const char * GetClassName () const override;  Return the name of the user class whose content is stored in this branch, if any. ;  ; Int_t GetEntry (Long64_t entry=0, Int_t getall=0) override;  Get entry. ;  ; Int_t GetExpectedType (TClass *&clptr, EDataType &type) override;  Fill expectedClass and expectedType with information on the data type of the object/values contained in this branch (and thus the type of pointers expected to be passed to Set[Branch]Address return 0 in case of success and > 0 in case of failure. ;  ; virtual TStreamerInfo * GetInfo () const;  Get streamer info. ;  ; TClass * IsA () const override;  ; bool IsFolder () const override;  Branch declared folder if at least one entry. ;  ; void Print (Option_t *="""") const override;  Print the branch parameters. ;  ; void SetAddress (void *addr) override;  Set Address. ;  ; void Streamer (TBuffer &) override;  Stream a class o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBranchSTL.html:79,Load,Loading,79,doc/master/classTBranchSTL.html,https://root.cern,https://root.cern/doc/master/classTBranchSTL.html,2,"['Load', 'queue']","['Loading', 'queues']"
Performance,". ROOT: TBreakLineCom Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; List of all members ; TBreakLineCom Class Reference. . Definition at line 136 of file TGTextEdit.cxx. Public Member Functions;  TBreakLineCom (TGTextEdit *te);  ; Bool_t Notify () override;  This method must be overridden to handle object notification (the base implementation is no-op). ;  ;  Public Member Functions inherited from TGTextEditCommand;  TGTextEditCommand (TGTextEdit *te);  ; void SetPos (TGLongPosition pos);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass ()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBreakLineCom.html:82,Load,Loading,82,doc/master/classTBreakLineCom.html,https://root.cern,https://root.cern/doc/master/classTBreakLineCom.html,1,['Load'],['Loading']
Performance,". ROOT: TBrowser Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Private Attributes |; List of all members ; TBrowser Class ReferenceCore ROOT classes » Base ROOT classes. ; Using a TBrowser one can browse all ROOT objects. ; It shows in a list on the left side of the window all browsable ROOT classes. Selecting one of the classes displays, in the icon-box on the right side, all objects in the class. Selecting one of the objects in the icon-box, will place all browsable objects in a new list and draws the contents of the selected class in the icon-box. And so on.... SinceROOT version 6.24/00; TBrowser invokes by default the Web-based ROOT file browser [RBrowser](ROOT::RBrowser) To change this behaviour, and invoke the standard TBrowser, one should put the following directive in the .rootrc file: Browser.Name: TRootBrowser; TRootBrowserThis class creates a ROOT object browser, constituted by three main tabs.Definition TRootBrowser.h:54. Definition at line 37 of file TBrowser.h. Public Types; enum  EStatusBits { kNoHidden = (1ULL << ( 9 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TBrowser (const char *name, const char *titl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBrowser.html:77,Load,Loading,77,doc/master/classTBrowser.html,https://root.cern,https://root.cern/doc/master/classTBrowser.html,1,['Load'],['Loading']
Performance,". ROOT: TBrowserImp Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TBrowserImp Class ReferenceCore ROOT classes » Base ROOT classes. ; ABC describing GUI independent browser implementation protocol. ; Definition at line 29 of file TBrowserImp.h. Public Member Functions;  TBrowserImp (TBrowser *b, const char *title, Int_t x, Int_t y, UInt_t width, UInt_t height, Option_t *opt="""");  Constructor with browser x, y, width and height. ;  ;  TBrowserImp (TBrowser *b, const char *title, UInt_t width, UInt_t height, Option_t *opt="""");  Constructor with browser width and height. ;  ;  TBrowserImp (TBrowser *b=nullptr);  Default constructor. ;  ; virtual ~TBrowserImp ()=default;  ; virtual void Add (TObject *, const char *, Int_t);  ; virtual void AddCheckBox (TObject *, Bool_t=kFALSE);  ; virtual void BrowseObj (TObject *);  ; TBrowser * Browser () const;  ; virtual void CheckObjectItem (TObject *, Bool_t=kFALSE);  ; virtual void CloseTabs ();  ; virtual Longptr_t ExecPlugin (const char *, const char *, const char *, Int_t, Int_t);  ; virtual void ExecuteDefaultAction (TObject *);  ; virtual TBrowser * GetBrowser () const;  ; virtual Option_t * GetDrawOption () const;  ; virtual TGMainFrame * GetMainFrame () const;  ; virtual void Iconify ();  ; virtual TClass * IsA () const;  ; virtual Bool_t IsWeb () const;  ; virtual void RecursiveRemove (TObject *);  ; virtual void Refresh (Bool_t=kFALSE);  ; virtual void RemoveCheckBox (TObject *);  ; virtual void SetBrowser (TBrowser *b);  ; virtual void SetDrawOption (Option_t *="""");  ; virtual void SetStatusText (const char *, Int_t);  ; virtual void Show ();  ; virtual void StartEmbedding (Int_t, Int_t);  ; virtual void StopEmbedding (const char *);  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassD",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBrowserImp.html:80,Load,Loading,80,doc/master/classTBrowserImp.html,https://root.cern,https://root.cern/doc/master/classTBrowserImp.html,1,['Load'],['Loading']
Performance,". ROOT: TBrowserObject Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; TBrowserObject Class Reference. ; This class is designed to wrap a Foreign object in order to inject it into the Browse sub-system. ; Definition at line 80 of file TBrowser.cxx. Public Member Functions;  TBrowserObject (void *obj, TClass *cl, const char *brname);  ;  ~TBrowserObject ();  ; void Browse (TBrowser *b) override;  Browse object. May be overridden for another default action. ;  ; TClass * IsA () const override;  ; Bool_t IsFolder () const override;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNam",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBrowserObject.html:83,Load,Loading,83,doc/master/classTBrowserObject.html,https://root.cern,https://root.cern/doc/master/classTBrowserObject.html,1,['Load'],['Loading']
Performance,". ROOT: TBrowserPlugin Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; List of all members ; TBrowserPlugin Class ReferenceGUI » Low level GUI widgets. ; Helper class used to manage plugins (command or macro to be executed). ; Definition at line 35 of file TRootBrowser.h. Public Member Functions;  TBrowserPlugin (const char *name, const char *cmd="""", Int_t tab=1, Int_t sub=-1);  ;  ~TBrowserPlugin () override;  ; TClass * IsA () const override;  ; void SetCommand (const char *cmd);  ; void SetSubTab (Int_t sub);  ; void SetTab (Int_t tab);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBrowserPlugin.html:83,Load,Loading,83,doc/master/classTBrowserPlugin.html,https://root.cern,https://root.cern/doc/master/classTBrowserPlugin.html,1,['Load'],['Loading']
Performance,". ROOT: TBrowserTimer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Attributes |; List of all members ; TBrowserTimer Class Reference. ; Called whenever timer times out. ; Definition at line 51 of file TBrowser.cxx. Public Member Functions;  TBrowserTimer (TBrowser *b, Long_t ms=1000);  ; Bool_t Notify () override;  This method must be overridden to handle object notification (the base implementation is no-op). ;  ;  Public Member Functions inherited from TTimer;  TTimer (const char *command, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (Long_t milliSec=0, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (TObject *obj, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ; virtual ~TTimer ();  ; void Add () override;  ; Bool_t CheckTimer (const TTime &now);  Check if timer timed out. ;  ; TTime GetAbsTime () const;  ; const char * GetCommand () const;  ; TObject * GetObject ();  ; TTime GetTime () const;  ; UInt_t GetTimerID ();  ; Bool_t HasTimedOut () const;  ; TClass * IsA () const override;  ; Bool_t IsAsync () const;  ; Bool_t IsInterruptingSyscalls () const;  ; Bool_t IsRunning ();  This function checks if the timer is running within gSystem (Has been started and did not finish yet). ;  ; Bool_t IsSync () const;  ; Bool_t Notify () override;  Notify when timer times out. ;  ; void Remove () override;  ; void Reset ();  Reset the timer. ;  ; void SetCommand (const char *command);  Set the interpreter command to be executed at time out. ;  ; void SetInterruptSyscalls (Bool_t set=kTRUE);  When the argument is true the a-synchronous timer (SIGALRM) signal handler is set so that interrupted syscalls will not be restarted by the kernel. ;  ; void SetObject (TObject *object);  Set the object to be notified at time out. ;  ; void SetTime ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBrowserTimer.html:82,Load,Loading,82,doc/master/classTBrowserTimer.html,https://root.cern,https://root.cern/doc/master/classTBrowserTimer.html,1,['Load'],['Loading']
Performance,". ROOT: TBtree Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TBtree Class ReferenceCore ROOT classes » Containers. ; B-tree class. ; TBtree inherits from the TSeqCollection ABC. B-tree Implementation notes; This implements B-trees with several refinements. Most of them can be found in Knuth Vol 3, but some were developed to adapt to restrictions imposed by C++. First, a restatement of Knuth's properties that a B-tree must satisfy, assuming we make the enhancement he suggests in the paragraph at the bottom of page 476. Instead of storing null pointers to non-existent nodes (which Knuth calls the leaves) we utilize the space to store keys. Therefore, what Knuth calls level (l-1) is the bottom of our tree, and we call the nodes at this level LeafNodes. Other nodes are called InnerNodes. The other enhancement we have adopted is in the paragraph at the bottom of page 477: overflow control.; The following are modifications of Knuth's properties on page 478:. Every InnerNode has at most Order keys, and at most Order+1 sub-trees.; Every LeafNode has at most 2*(Order+1) keys.; An InnerNode with k keys has k+1 sub-trees.; Every InnerNode that is not the root has at least InnerLowWaterMark keys.; Every LeafNode that is not the root has at least LeafLowWaterMark keys.; If the root is a LeafNode, it has at least one key.; If the root is an InnerNode, it has at least one key and two sub-trees.; All LeafNodes are the same distance from the root as all the other LeafNodes.; For InnerNode n with key n[i].key, then sub-tree n[i-1].tree contains all keys < n[i].key, and sub-tree n[i].tree contains all keys >= n[i].key.; Order is at least 3. The values of InnerLowWaterMark and LeafLowWaterMark may actually be set by the user w",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBtree.html:75,Load,Loading,75,doc/master/classTBtree.html,https://root.cern,https://root.cern/doc/master/classTBtree.html,1,['Load'],['Loading']
Performance,". ROOT: TBuffer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Protected Attributes |; List of all members ; TBuffer Class ReferenceabstractCore ROOT classes » Base ROOT classes. ; Buffer base class used for serializing objects. ; Definition at line 43 of file TBuffer.h. Public Types; enum  { kInitialSize = 1024; , kMinimalSize = 128; };  ; enum  EMode { kRead = 0; , kWrite = 1; };  ; enum  EStatusBits { kIsOwner = (1ULL << ( 16 )); , kCannotHandleMemberWiseStreaming = (1ULL << ( 17 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TBuffer (EMode mode);  Create an I/O buffer object. ;  ;  TBuffer (EMode mode, Int_t bufsiz);  Create an I/O buffer object. ;  ;  TBuffer (EMode mode, Int_t bufsiz, void *buf, Bool_t adopt=kTRUE, ReAllocCharFun_t reallocfunc=nullptr);  Create an I/O buffer object. ;  ; virtual ~TBuffer ();  Delete an I/O buffer object. ;  ; virtual Int_t ApplySequence (const TStreamerInfoActions::TActionSequence &sequence, void *object)=0;  ; virtual Int_t ApplySequence (const TStreamerInfoActions::TActionSequence &sequence, void *start_collection, void *end_collection)=0;  ; virtual Int_t ApplySequenceVecPtr (const TStreamerInfoActions::TActionSeq",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBuffer.html:76,Load,Loading,76,doc/master/classTBuffer.html,https://root.cern,https://root.cern/doc/master/classTBuffer.html,1,['Load'],['Loading']
Performance,". ROOT: TBuffer3D Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; Private Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; TBuffer3D Class ReferenceCore ROOT classes » Base ROOT classes. ; Generic 3D primitive description class. ; See TBuffer3DTypes for producer classes. Filling TBuffer3D and Adding to Viewer; The viewers behind the TVirtualViewer3D interface differ greatly in their capabilities e.g. Some know how to draw certain shapes natively (e.g. spheres/tubes in OpenGL); others always require a raw tessellation description of points/lines/segments.; Some need the 3D object positions in the global frame, others can cope with local frames + a translation matrix - which can give considerable performance benefits. To cope with these situations the object buffer is filled out in negotiation with the viewer. TBuffer3D classes are conceptually divided into enumerated sections Core, BoundingBox, Raw etc (see TBuffer3D.h for more details). The SectionsValid() / SetSectionsValid / ClearSectionsValid() methods of TBuffer3D are used to test/set/clear these section valid flags.; The sections found in TBuffer3D (Core/BoundingBox/Raw Sizes/Raw) are sufficient to describe any tessellated shape in a generic fashion. An additional ShapeSpecific section in derived shape specific classes allows a more abstract shape description (""a sphere of inner radius x, outer radius y""). This enables a viewer which knows how to draw (tessellate) the shape itself to do so, which can bring considerable performance and quality benefits, while providing a generic fallback suitable for all viewers.; The rules for client negotiation with the viewer are:. If suitable specialized TBuffer3D class exists, use it, otherwise use TBuffer3D.; Complete the mandatory Core section.; Complete the Sha",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBuffer3D.html:78,Load,Loading,78,doc/master/classTBuffer3D.html,https://root.cern,https://root.cern/doc/master/classTBuffer3D.html,2,"['Load', 'perform']","['Loading', 'performance']"
Performance,". ROOT: TBufferFile Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Protected Attributes |; List of all members ; TBufferFile Class ReferenceInput/Output Library. ; The concrete implementation of TBuffer for writing/reading to/from a ROOT file or socket. ; Definition at line 47 of file TBufferFile.h. Public Types; enum  { kStreamedMemberWise = (1ULL << ( 14 )); };  ;  Public Types inherited from TBufferIO; enum  { kMapSize = 503; };  ; enum  EStatusBits { ;   kNotDecompressed = (1ULL << ( 15 )); , kTextBasedStreaming = (1ULL << ( 18 )); , kUser1 = (1ULL << ( 21 )); , kUser2 = (1ULL << ( 22 )); , ;   kUser3 = (1ULL << ( 23 )). };  ;  Public Types inherited from TBuffer; enum  { kInitialSize = 1024; , kMinimalSize = 128; };  ; enum  EMode { kRead = 0; , kWrite = 1; };  ; enum  EStatusBits { kIsOwner = (1ULL << ( 16 )); , kCannotHandleMemberWiseStreaming = (1ULL << ( 17 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TBufferFile (TBuffer::EMode mode);  Create an I/O buffer object. ;  ;  TBufferFile (TBuffer::EMode mode, Int_t bufsiz);  Create an I/O buffer object. ;  ;  TBufferFile (TBuffer::EMode mode, Int_t bufsiz, void *buf, Bool_t adopt=kTRUE, ReAllocCharFu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBufferFile.html:80,Load,Loading,80,doc/master/classTBufferFile.html,https://root.cern,https://root.cern/doc/master/classTBufferFile.html,1,['Load'],['Loading']
Performance,". ROOT: TBufferIO Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; List of all members ; TBufferIO Class ReferenceabstractInput/Output Library. ; Direct subclass of TBuffer, implements common methods for TBufferFile and TBufferText classes. ; Definition at line 30 of file TBufferIO.h. Public Types; enum  { kMapSize = 503; };  ; enum  EStatusBits { ;   kNotDecompressed = (1ULL << ( 15 )); , kTextBasedStreaming = (1ULL << ( 18 )); , kUser1 = (1ULL << ( 21 )); , kUser2 = (1ULL << ( 22 )); , ;   kUser3 = (1ULL << ( 23 )). };  ;  Public Types inherited from TBuffer; enum  { kInitialSize = 1024; , kMinimalSize = 128; };  ; enum  EMode { kRead = 0; , kWrite = 1; };  ; enum  EStatusBits { kIsOwner = (1ULL << ( 16 )); , kCannotHandleMemberWiseStreaming = (1ULL << ( 17 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  ~TBufferIO () override;  destructor ;  ; Bool_t CheckObject (const TObject *obj) override;  Check if the specified object is already in the buffer. ;  ; Bool_t CheckObject (const void *obj, const TClass *ptrClass) override;  Check if the specified object of the speci",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBufferIO.html:78,Load,Loading,78,doc/master/classTBufferIO.html,https://root.cern,https://root.cern/doc/master/classTBufferIO.html,1,['Load'],['Loading']
Performance,". ROOT: TBufferJSON Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; List of all members ; TBufferJSON Class ReferencefinalInput/Output Library. ; Class for serializing object to and from JavaScript Object Notation (JSON) format. ; It creates such object representation, which can be directly used in JavaScript ROOT (JSROOT) for drawing.; TBufferJSON implements TBuffer interface, therefore most of ROOT and user classes can be converted into JSON. There are certain limitations for classes with custom streamers, which should be equipped specially for this purposes (see TCanvas::Streamer() as example).; To perform conversion into JSON, one should use TBufferJSON::ToJSON method: TH1 *h1 = new TH1I(""h1"", ""title"", 100, 0, 10);; h1->FillRandom(""gaus"",10000);; TString json = TBufferJSON::ToJSON(h1);; jsonnlohmann::json jsonDefinition ProcessTimer.h:23; TBufferJSON::ToJSONstatic TString ToJSON(const T *obj, Int_t compact=0, const char *member_name=nullptr)Definition TBufferJSON.h:75; TH1I1-D histogram with an int per channel (see TH1 documentation)Definition TH1.h:540; TH1TH1 is the base class of all histogram classes in ROOT.Definition TH1.h:59; TH1::FillRandomvirtual void FillRandom(const char *fname, Int_t ntimes=5000, TRandom *rng=nullptr)Fill histogram following distribution in function fname.Definition TH1.cxx:3519; TStringBasic string class.Definition TString.h:139; h1TH1F * h1Definition legend1.C:5; To reconstruct object from the JSON string, one should do: TH1 *hnew = nullptr;; TBufferJSON::FromJSON(hnew, json);; if (hnew) hnew->Draw(""hist"");; TBufferJSON::FromJSONstatic Bool_t FromJSON(T *&obj, const char *json)Definition TBufferJSON.h:81; TH1::Drawvoid Draw(Option_t *option="""") overrideDraw this histogram with options.Definition T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBufferJSON.html:80,Load,Loading,80,doc/master/classTBufferJSON.html,https://root.cern,https://root.cern/doc/master/classTBufferJSON.html,2,"['Load', 'perform']","['Loading', 'perform']"
Performance,". ROOT: TBufferSQL Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TBufferSQL Class ReferencefinalTree Library. ; Implement TBuffer for a SQL backend. ; Definition at line 30 of file TBufferSQL.h. Public Member Functions;  TBufferSQL ();  Constructor. ;  ;  TBufferSQL (TBuffer::EMode mode, Int_t bufsiz, std::vector< Int_t > *vc, TString *insert_query, TSQLRow **rowPtr);  Constructor. ;  ;  TBufferSQL (TBuffer::EMode mode, Int_t bufsiz, std::vector< Int_t > *vc, TString *insert_query, TSQLRow **rowPtr, void *buf, bool adopt=true);  Constructor. ;  ;  TBufferSQL (TBuffer::EMode mode, std::vector< Int_t > *vc, TString *insert_query, TSQLRow **rowPtr);  Constructor. ;  ;  ~TBufferSQL () override;  Destructor. ;  ; TClass * IsA () const override;  ; void ReadBool (bool &b) final;  Operator>> ;  ; void ReadChar (Char_t &c) final;  Operator>> ;  ; void ReadCharP (Char_t *c) final;  Operator>> ;  ; void ReadCharStar (char *&s) final;  Read a char* string. ;  ; void ReadDouble (Double_t &d) final;  Operator>> ;  ; void ReadFastArray (bool *, Int_t) final;  ReadFastArray SQL implementation. ;  ; void ReadFastArray (Char_t *, Int_t) final;  ReadFastArray SQL implementation. ;  ; void ReadFastArray (Double_t *, Int_t) final;  ReadFastArray SQL implementation. ;  ; void ReadFastArray (Float_t *, Int_t) final;  ReadFastArray SQL implementation. ;  ; void ReadFastArray (Int_t *, Int_t) final;  ReadFastArray SQL implementation. ;  ; void ReadFastArray (Long64_t *, Int_t) final;  ReadFastArray SQL implementation. ;  ; void ReadFastArray (Long_t *, Int_t) final;  ReadFastArray SQL implementation. ;  ; void ReadFastArray (Short_t *, Int_t) final;  ReadFastArray SQL implementation. ;  ; void ReadFastArray (UChar_t *, Int_t) final;  ReadFastArray SQL implementation. ;  ; void ReadFastA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBufferSQL.html:79,Load,Loading,79,doc/master/classTBufferSQL.html,https://root.cern,https://root.cern/doc/master/classTBufferSQL.html,1,['Load'],['Loading']
Performance,". ROOT: TBufferSQL2 Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Friends |; List of all members ; TBufferSQL2 Class ReferencefinalInput/Output Library. ; Converts data to SQL statements or read data from SQL tables. ; Class for serializing/deserializing object to/from SQL data base. It redefines most of TBuffer class function to convert simple types, array of simple types and objects to/from TSQLStructure objects. TBufferSQL2 class uses streaming mechanism, provided by ROOT system, therefore most of ROOT and user classes can be stored. There are limitations for complex objects like TTree, TClonesArray, TDirectory and few other, which can not be converted to SQL (yet). ; Definition at line 27 of file TBufferSQL2.h. Public Member Functions;  TBufferSQL2 (TBuffer::EMode mode, TSQLFile *file=nullptr);  Creates buffer object to serialize/deserialize data to/from sql. ;  ;  ~TBufferSQL2 () override;  Destroy sql buffer. ;  ; void ClassBegin (const TClass *, Version_t=-1) final;  This method inform buffer data of which class now will be streamed. ;  ; void ClassEnd (const TClass *) final;  Method indicates end of streaming of classdata in custom streamer. ;  ; void ClassMember (const char *name, const char *typeName=nullptr, Int_t arrsize1=-1, Int_t arrsize2=-1) final;  Method indicates name and typename of class memeber, which should be now streamed in custom streamer Following combinations are supported: see TBufferXML::ClassMember for the details. ;  ; void DecrementLevel (TVirtualStreamerInfo *) final;  Function is called from TStreamerInfo WriteBuffer and Readbuffer functions and decrease level in sql structure. ;  ; Int_t GetErrorFlag () const;  ; TVirtualStreamerInfo * GetInfo () final;  Return current streamer info element. ;  ; TSQLStructure * GetStructure () const;  ; void Inc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBufferSQL2.html:80,Load,Loading,80,doc/master/classTBufferSQL2.html,https://root.cern,https://root.cern/doc/master/classTBufferSQL2.html,1,['Load'],['Loading']
Performance,". ROOT: TBufferText Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Attributes |; List of all members ; TBufferText Class ReferenceInput/Output Library. ; Base class for text-based streamers like TBufferJSON or TBufferXML Special actions list will use methods, introduced in this class. ; Idea to have equivalent methods names in TBufferFile and TBufferText, that actions list for both are the same. ; Definition at line 20 of file TBufferText.h. Public Member Functions;  ~TBufferText () override;  destructor ;  ; Int_t ApplySequence (const TStreamerInfoActions::TActionSequence &sequence, void *object) final;  Read one collection of objects from the buffer using the StreamerInfoLoopAction. ;  ; Int_t ApplySequence (const TStreamerInfoActions::TActionSequence &sequence, void *start_collection, void *end_collection) final;  Read one collection of objects from the buffer using the StreamerInfoLoopAction. ;  ; Int_t ApplySequenceVecPtr (const TStreamerInfoActions::TActionSequence &sequence, void *start_collection, void *end_collection) final;  Read one collection of objects from the buffer using the StreamerInfoLoopAction. ;  ; Int_t CheckByteCount (UInt_t, UInt_t, const char *) final;  ; Int_t CheckByteCount (UInt_t, UInt_t, const TClass *) final;  ; TClass * IsA () const override;  ; Int_t ReadArrayDouble32 (Double_t *&d, TStreamerElement *ele=nullptr) override;  Read array of Double32_t from buffer. ;  ; Int_t ReadArrayFloat16 (Float_t *&f, TStreamerElement *ele=nullptr) override;  Read array of Float16_t from buffer. ;  ; virtual void ReadBaseClass (void *start, TStreamerBase *elem);  Read data of base class. ;  ; Int_t ReadBuf (void *, Int_t) final;  ; Int_t ReadClassBuffer (const TClass *, void *, const TClass *=nullptr) override;  Deserialize information from a buffer into an object. ;  ; I",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBufferText.html:80,Load,Loading,80,doc/master/classTBufferText.html,https://root.cern,https://root.cern/doc/master/classTBufferText.html,1,['Load'],['Loading']
Performance,". ROOT: TBufferXML Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; Friends |; List of all members ; TBufferXML Class ReferencefinalInput/Output Library. ; Class for serializing/deserializing object to/from xml. ; The simple way to create XML representation is: TNamed *obj = new TNamed(""name"", ""title"");; TString xml = TBufferXML::ToXML(obj);; TBufferXML::ToXMLstatic TString ToXML(const T *obj, Bool_t GenericLayout=kFALSE, Bool_t UseNamespaces=kFALSE)Definition TBufferXML.h:47; TNamedThe TNamed class is the base class for all named ROOT classes.Definition TNamed.h:29; TStringBasic string class.Definition TString.h:139; Produced xml can be decoded into new object: TNamed *obj2 = nullptr;; TBufferXML::FromXML(obj2, xml);; TBufferXML::FromXMLstatic Bool_t FromXML(T *&obj, const char *xml, Bool_t GenericLayout=kFALSE, Bool_t UseNamespaces=kFALSE)Definition TBufferXML.h:57; TBufferXML class uses streaming mechanism, provided by ROOT system, therefore most of ROOT and user classes can be stored to xml. There are limitations for complex objects like TTree, which can not be converted to xml. ; Definition at line 33 of file TBufferXML.h. Public Member Functions;  TBufferXML (TBuffer::EMode mode);  Creates buffer object to serialize/deserialize data to/from xml. ;  ;  TBufferXML (TBuffer::EMode mode, TXMLFile *file);  Creates buffer object to serialize/deserialize data to/from xml. ;  ;  ~TBufferXML () override;  Destroy xml buffer. ;  ; void ClassBegin (const TClass *, Version_t=-1) final;  Should be called at the beginning of custom class streamer. ;  ; void ClassEnd (const TClass *) final;  Should be called at the end of custom streamer See TBufferXML::ClassBegin for more details. ;  ; void ClassMember (const char *name, const char *typeName=nullptr, Int_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBufferXML.html:79,Load,Loading,79,doc/master/classTBufferXML.html,https://root.cern,https://root.cern/doc/master/classTBufferXML.html,1,['Load'],['Loading']
Performance,". ROOT: TButton Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; Private Attributes |; List of all members ; TButton Class ReferenceGraphics » 2D Graphics » Graphics pad. ; A TButton object is a user interface object. ; A TButton has a name and an associated action. When the button is clicked with the left mouse button, the corresponding action is executed.; A TButton can be created by direct invocation of the constructors or via the graphics editor.; The action can be set via TButton::SetMethod. The action can be any command. Examples of actions:; ""34+78"" When the button is clicked, the result of addition is printed.; "".x macro.C"" . Clicking the button executes the macro macro.C The action can be modified at any time via TButton::SetMethod. To modify the layout/size/contents of one or several buttons in a canvas, you must set the canvas editable via TCanvas::SetEditable. By default a TCanvas is editable. By default a TDialogCanvas is not editable. TButtons are in general placed in a TDialogCanvas.; A TButton being a TPad, one can draw graphics primitives in it when the TCanvas/TDialogCanvas is editable.; Example of a macro creating a dialog canvas with buttons: void but() {; // example of a dialog canvas with a few buttons; ; TDialogCanvas *dialog = new TDialogCanvas(""dialog"","""",200,300);; ; // Create first button. Clicking on this button will execute 34+56; TButton *but1 = new TButton(""button1"",""34+56"",.05,.8,.45,.88);; but1->Draw();; ; // Create second button. Clicking on this button will create a new canvas; TButton *but2 = new TButton(""canvas"",""c2 = new TCanvas(\""c2\"")"",.55,.8,.95,.88);; but2->Draw();; ; // Create third button. Clicking on this button will invoke the browser; but3 = new TButton(""Browser"",""br = new TBrowser(\""br\"")"",0.25,0.54,0.75,0.64);; but3->SetFillColor(42);; b",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTButton.html:76,Load,Loading,76,doc/master/classTButton.html,https://root.cern,https://root.cern/doc/master/classTButton.html,1,['Load'],['Loading']
Performance,". ROOT: TCONE Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TCONE Class ReferenceGraphics » 3D Graphics » Basic 3D graphics. ; A conical tube. . It has 8 parameters:. name: name of the shape; title: shape's title; material: (see TMaterial); dz: half-length in z; rmin1: inside radius at -DZ in z; rmax1: outside radius at -DZ in z; rmin2: inside radius at +DZ in z; rmax2: outside radius at +DZ in z . Definition at line 28 of file TCONE.h. Public Member Functions;  TCONE ();  CONE shape default constructor. ;  ;  TCONE (const char *name, const char *title, const char *material, Float_t dz, Float_t rmax1, Float_t rmax2=0);  CONE shape ""simplified"" constructor. ;  ;  TCONE (const char *name, const char *title, const char *material, Float_t dz, Float_t rmin1, Float_t rmax1, Float_t rmin2, Float_t rmax2);  CONE shape normal constructor. ;  ;  ~TCONE () override;  CONE shape default destructor. ;  ; Float_t GetRmax2 () const;  ; Float_t GetRmin2 () const;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TTUBE;  TTUBE ();  TUBE shape default constructor. ;  ;  TTUBE (const char *name, const char *title, const char *material, Float_t rmax, Float_t dz);  TUBE shape ""simplified"" constructor. ;  ;  TTUBE (const char *name, const char *title, const char *material, Float_t rmin, Float_t rmax, Float_t dz, Float_t aspect=1);  TUBE shape normal constructor. ;  ;  ~TTUBE () override;  TUBE shape default destructor. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a TUBE. ;  ; virtual Float_t GetAspectRatio () const;  ; const TBuffer3D & GetBuffer3D (Int_t reqS",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCONE.html:74,Load,Loading,74,doc/master/classTCONE.html,https://root.cern,https://root.cern/doc/master/classTCONE.html,1,['Load'],['Loading']
Performance,". ROOT: TCONS Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TCONS Class ReferenceGraphics » 3D Graphics » Basic 3D graphics. ; A segment of a conical tube. . It has 10 parameters:. name: name of the shape; title: shape's title; material: (see TMaterial); dz: half-length in z; rmin1: inside radius at -DZ in z; rmax1: outside radius at -DZ in z; rmin2: inside radius at +DZ in z; rmax2: outside radius at +DZ in z; phi1: starting angle of the segment; phi2: ending angle of the segment. NOTE: phi1 should be smaller than phi2. If this is not the case, the system adds 360 degrees to phi2. ; Definition at line 27 of file TCONS.h. Public Member Functions;  TCONS ();  CONS shape default constructor. ;  ;  TCONS (const char *name, const char *title, const char *material, Float_t dz, Float_t rmin1, Float_t rmax1, Float_t rmin2, Float_t rmax2, Float_t phi1, Float_t phi2);  CONS shape normal constructor. ;  ;  TCONS (const char *name, const char *title, const char *material, Float_t rmax1, Float_t dz, Float_t phi1, Float_t phi2, Float_t rmax2=0);  CONS shape normal constructor. ;  ;  ~TCONS () override;  CONS shape default destructor. ;  ; virtual Float_t GetRmax2 () const;  ; virtual Float_t GetRmin2 () const;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TTUBS;  TTUBS ();  TUBS shape default constructor. ;  ;  TTUBS (const char *name, const char *title, const char *material, Float_t rmax, Float_t dz, Float_t phi1, Float_t phi2);  TUBS shape ""simplified"" constructor. ;  ;  TTUBS (const char *name, const char *title, const char *material, Float_t rmin, Float_t rmax, Float_t dz, Float_t phi1, Float_t ph",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCONS.html:74,Load,Loading,74,doc/master/classTCONS.html,https://root.cern,https://root.cern/doc/master/classTCONS.html,1,['Load'],['Loading']
Performance,". ROOT: TCTUB Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TCTUB Class ReferenceGraphics » 3D Graphics » Basic 3D graphics. ; A cut tube with 11 parameters. . The first 5 parameters are the same as for the TUBS. The remaining 6 parameters are the director cosines of the surfaces cutting the tube respectively at the low and high Z values. name: name of the shape; title: shape's title; material: (see TMaterial); rmin: inside radius; rmax: outside radius; dz: half length in z; phi1: starting angle of the segment; phi2: ending angle of the segment; coslx: x dir cosinus at low z face; cosly: y dir cosinus at low z face; coslz: z dir cosinus at low z face; coshx: x dir cosinus at high z face; coshy: y dir cosinus at high z face; coshz: z dir cosinus at high z face . Definition at line 29 of file TCTUB.h. Public Member Functions;  TCTUB ();  CTUB shape default constructor. ;  ;  TCTUB (const char *name, const char *title, const char *material, Float_t rmin, Float_t rmax, Float_t dz, Float_t phi1, Float_t phi2, Float_t *lowNormal, Float_t *highNormal);  CTUB shape normal constructor. ;  ;  TCTUB (const char *name, const char *title, const char *material, Float_t rmin, Float_t rmax, Float_t dz, Float_t phi1, Float_t phi2, Float_t coslx, Float_t cosly, Float_t coslz, Float_t coshx, Float_t coshy, Float_t coshz);  CTUB shape normal constructor. ;  ;  ~TCTUB () override;  CTUB shape default destructor. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TCTUB. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TTUBS;  TTUBS ();  TUBS shape default constructor. ;  ;  TTUBS (const char *name, const char *title, const char *material, Float_t rmax, Float_t dz, Float",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCTUB.html:74,Load,Loading,74,doc/master/classTCTUB.html,https://root.cern,https://root.cern/doc/master/classTCTUB.html,1,['Load'],['Loading']
Performance,". ROOT: TCandle Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TCandle Class ReferenceGraphics » 2D Graphics » Basic graphics. ; The candle plot painter class. ; Instances of this class are generated by the histograms painting classes (THistPainter and THStack) when an candle plot (box plot) is drawn. TCandle is the ""painter class"" of the box plots. Therefore it is never used directly to draw a candle. ; Definition at line 27 of file TCandle.h. Public Types; enum  CandleOption : long { ;   kNoOption = 0; , kBox = 1; , kMedianLine = 10; , kMedianNotched = 20; , ;   kMedianCircle = 30; , kMeanLine = 100; , kMeanCircle = 300; , kWhiskerAll = 1000; , ;   kWhisker15 = 2000; , kAnchor = 10000; , kPointsOutliers = 100000; , kPointsAll = 200000; , ;   kPointsAllScat = 300000; , kHistoLeft = 1000000; , kHistoRight = 2000000; , kHistoViolin = 3000000; , ;   kHistoZeroIndicator = 10000000; , kHorizontal = 100000000. };  . Public Member Functions;  TCandle ();  TCandle default constructor. ;  ;  TCandle (const char *opt);  TCandle constructor passing a draw-option. ;  ;  TCandle (const Double_t candlePos, const Double_t candleWidth, Long64_t n, Double_t *points);  TCandle constructor for raw-data candles. ;  ;  TCandle (const Double_t candlePos, const Double_t candleWidth, TH1D *proj);  TCandle TH1 data constructor. ;  ;  TCandle (const TCandle &candle);  ;  ~TCandle () override;  TCandle default destructor. ;  ; void ConvertToPadCoords (Double_t minAxis, Double_t maxAxis, Double_t axisMinCoord, Double_t axisMaxCoord);  The coordinates in the TParallelCoordVar-class are in Pad-Coordinates, so we need to convert them. ;  ; const char * GetDrawOption () const;  ; Double_t GetMean () const;  ; Double_t GetMedian () const;  ; long GetOption () const;  ; Double",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCandle.html:76,Load,Loading,76,doc/master/classTCandle.html,https://root.cern,https://root.cern/doc/master/classTCandle.html,1,['Load'],['Loading']
Performance,". ROOT: TCanvas Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TCanvas Class ReferenceGraphics » 2D Graphics » Graphics pad. ; The Canvas class. ; A Canvas is an area mapped to a window directly under the control of the display manager. A ROOT session may have several canvases open at any given time.; A Canvas may be subdivided into independent graphical areas: the Pads. A canvas has a default pad which has the name of the canvas itself. An example of a Canvas layout is sketched in the picture below. This canvas contains two pads named P1 and P2. Both Canvas, P1 and P2 can be moved, grown, shrunk using the normal rules of the Display manager.; Once objects have been drawn in a canvas, they can be edited/moved by pointing directly to them. The cursor shape is changed to suggest the type of action that one can do on this object. Clicking with the right mouse button on an object pops-up a contextmenu with a complete list of actions possible on this object.; A graphical editor may be started from the canvas ""View"" menu under the menu entry ""Toolbar"".; An interactive HELP is available by clicking on the HELP button at the top right of the canvas. It gives a short explanation about the canvas' menus.; A canvas may be automatically divided into pads via TPad::Divide.; At creation time, no matter if in interactive or batch mode, the constructor defines the size of the canvas window (including the size of the window manager's decoration). To define precisely the graphics area size of a canvas in the interactive mode, the following four lines of code should be used: {; Double_t w = 600;; Double_t h = 600;; auto c = new TCanvas(""c"", ""c"", w, h);; c->SetWindowSize(w + (w - c->GetWw()), h ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCanvas.html:76,Load,Loading,76,doc/master/classTCanvas.html,https://root.cern,https://root.cern/doc/master/classTCanvas.html,1,['Load'],['Loading']
Performance,". ROOT: TCanvas Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TCanvas Class ReferenceGraphics » 2D Graphics » Graphics pad. ; The Canvas class. ; A Canvas is an area mapped to a window directly under the control of the display manager. A ROOT session may have several canvases open at any given time.; A Canvas may be subdivided into independent graphical areas: the Pads. A canvas has a default pad which has the name of the canvas itself. An example of a Canvas layout is sketched in the picture below. This canvas contains two pads named P1 and P2. Both Canvas, P1 and P2 can be moved, grown, shrunk using the normal rules of the Display manager.; Once objects have been drawn in a canvas, they can be edited/moved by pointing directly to them. The cursor shape is changed to suggest the type of action that one can do on this object. Clicking with the right mouse button on an object pops-up a contextmenu with a complete list of actions possible on this object.; A graphical editor may be started from the canvas ""View"" menu under the menu entry ""Toolbar"".; An interactive HELP is available by clicking on the HELP button at the top right of the canvas. It gives a short explanation about the canvas' menus.; A canvas may be automatically divided into pads via TPad::Divide.; At creation time, no matter if in interactive or batch mode, the constructor defines the size of the canvas window (including the size of the window manager's decoration). To define precisely the graphics area size of a canvas in the interactive mode, the following four lines of code should be used: {; Double_t w = 600;; Double_t h = 600;; auto c = new TCanvas(""c"", ""c"", w, h);; c->SetWindowSize(w + (w - c->GetWw()), h +",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTCanvas.html:75,Load,Loading,75,doc/v632/classTCanvas.html,https://root.cern,https://root.cern/doc/v632/classTCanvas.html,1,['Load'],['Loading']
Performance,". ROOT: TCanvasImp Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Friends |; List of all members ; TCanvasImp Class ReferenceCore ROOT classes » Base ROOT classes. ; ABC describing GUI independent main window (with menubar, scrollbars and a drawing area). ; Definition at line 30 of file TCanvasImp.h. Public Member Functions;  TCanvasImp (TCanvas *c, const char *name, Int_t x, Int_t y, UInt_t width, UInt_t height);  ;  TCanvasImp (TCanvas *c, const char *name, UInt_t width, UInt_t height);  ;  TCanvasImp (TCanvas *c=nullptr);  ; virtual ~TCanvasImp ();  ; TCanvas * Canvas () const;  ; virtual void Close ();  ; virtual void ForceUpdate ();  ; virtual UInt_t GetWindowGeometry (Int_t &x, Int_t &y, UInt_t &w, UInt_t &h);  ; virtual Bool_t HasEditor () const;  ; virtual Bool_t HasMenuBar () const;  ; virtual Bool_t HasStatusBar () const;  ; virtual Bool_t HasToolBar () const;  ; virtual Bool_t HasToolTips () const;  ; virtual void Iconify ();  ; virtual Int_t InitWindow ();  ; virtual TClass * IsA () const;  ; virtual void RaiseWindow ();  ; virtual void ReallyDelete ();  ; virtual void SetCanvasSize (UInt_t w, UInt_t h);  ; virtual void SetStatusText (const char *text=nullptr, Int_t partidx=0);  ; virtual void SetWindowPosition (Int_t x, Int_t y);  ; virtual void SetWindowSize (UInt_t width, UInt_t height);  ; virtual void SetWindowTitle (const char *newTitle);  ; virtual void Show ();  ; virtual void ShowEditor (Bool_t show=kTRUE);  ; virtual void ShowMenuBar (Bool_t show=kTRUE);  ; virtual void ShowStatusBar (Bool_t show=kTRUE);  ; virtual void ShowToolBar (Bool_t show=kTRUE);  ; virtual void ShowToolTips (Bool_t show=kTRUE);  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCanvasImp.html:79,Load,Loading,79,doc/master/classTCanvasImp.html,https://root.cern,https://root.cern/doc/master/classTCanvasImp.html,1,['Load'],['Loading']
Performance,". ROOT: TCanvasWebSnapshot Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TCanvasWebSnapshot Class Reference. . Definition at line 102 of file TWebSnapshot.h. Public Member Functions;  TCanvasWebSnapshot (bool readonly=true, bool setids=true, bool batchmode=false);  ; bool GetHighlightConnect () const;  ; const std::string & GetScripts () const;  ; TClass * IsA () const override;  ; bool IsFixedSize () const;  ; void SetFixedSize (bool on=true);  ; void SetHighlightConnect (bool on=true);  ; void SetScripts (const std::string &src);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TPadWebSnapshot;  TPadWebSnapshot (bool readonly=true, bool setids=true, bool batchmode=false);  ; TClass * IsA () const override;  ; bool IsBatchMode () const;  ; bool IsReadOnly () const;  ; bool IsSetObjectIds () const;  ; TWebSnapshot & NewPrimitive (TObject *obj=nullptr, const std::string &opt="""", const std::string &suffix="""");  Create new entry in list of primitives. ;  ; TWebSnapshot & NewSpecials ();  Create new entry in list of primitives in the front. ;  ; TPadWebSnapshot & NewSubPad ();  Create new entry for subpad. ;  ; void SetActive (bool on=true);  ; void SetHasExecs (bool on=true);  ; void SetWithoutPrimitives (bool on=true);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TWebSnapshot;  ~TWebSnapshot () override;  destructor ;  ; Int_t GetKind () const;  ; const char * GetObjectID () const;  ; TObject * GetSnapshot () const;  ; TClass * IsA () const override;  ; void SetObjectID (const std::string &id);  ; void SetObjectIDAsPtr ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCanvasWebSnapshot.html:87,Load,Loading,87,doc/master/classTCanvasWebSnapshot.html,https://root.cern,https://root.cern/doc/master/classTCanvasWebSnapshot.html,1,['Load'],['Loading']
Performance,". ROOT: TCefTimer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; List of all members ; TCefTimer Class Reference. . Definition at line 33 of file RCefWebDisplayHandle.cxx. Public Member Functions;  TCefTimer (Long_t milliSec, Bool_t mode);  ; void Timeout () override;  ;  Public Member Functions inherited from TTimer;  TTimer (const char *command, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (Long_t milliSec=0, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (TObject *obj, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ; virtual ~TTimer ();  ; void Add () override;  ; Bool_t CheckTimer (const TTime &now);  Check if timer timed out. ;  ; TTime GetAbsTime () const;  ; const char * GetCommand () const;  ; TObject * GetObject ();  ; TTime GetTime () const;  ; UInt_t GetTimerID ();  ; Bool_t HasTimedOut () const;  ; TClass * IsA () const override;  ; Bool_t IsAsync () const;  ; Bool_t IsInterruptingSyscalls () const;  ; Bool_t IsRunning ();  This function checks if the timer is running within gSystem (Has been started and did not finish yet). ;  ; Bool_t IsSync () const;  ; Bool_t Notify () override;  Notify when timer times out. ;  ; void Remove () override;  ; void Reset ();  Reset the timer. ;  ; void SetCommand (const char *command);  Set the interpreter command to be executed at time out. ;  ; void SetInterruptSyscalls (Bool_t set=kTRUE);  When the argument is true the a-synchronous timer (SIGALRM) signal handler is set so that interrupted syscalls will not be restarted by the kernel. ;  ; void SetObject (TObject *object);  Set the object to be notified at time out. ;  ; void SetTime (Long_t milliSec);  ; void SetTimerID (UInt_t id=0);  ; virtual void Start (Long_t milliSec=-1, Bool_t singleShot=kFALSE);  Starts the timer with a milliSec ti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCefTimer.html:78,Load,Loading,78,doc/master/classTCefTimer.html,https://root.cern,https://root.cern/doc/master/classTCefTimer.html,1,['Load'],['Loading']
Performance,". ROOT: TChain Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Static Public Attributes |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TChain Class ReferenceTree Library. ; A chain is a collection of files containing TTree objects. ; When the chain is created, the first parameter is the default name for the Tree to be processed later on.; Enter a new element in the chain via the TChain::Add function. Once a chain is defined, one can use the normal TTree functions to Draw,Scan,etc.; Use TChain::SetBranchStatus to activate one or more branches for all the trees in the chain. ; Definition at line 33 of file TChain.h. Public Types; enum  EStatusBits { kGlobalWeight = (1ULL << ( 15 )); , kAutoDelete = (1ULL << ( 16 )); , kProofUptodate = (1ULL << ( 17 )); , kProofLite = (1ULL << ( 18 )); };  ; enum  Mode { kWithoutGlobalRegistration; , kWithGlobalRegistration; };  ;  Public Types inherited from TTree; enum  { kSplitCollectionOfPointers = 100; };  ; enum  ESetBranchAddressStatus { ;   kMissingBranch = -5; , kInternalError = -4; , kMissingCompiledCollectionProxy = -3; , kMismatch = -2; , ;   kClassMismatch = -1; , kMatch = 0; , kMatchConversion = 1; , kMatchConversionCollection = 2; , ;   kMakeClass = 3; , kVoidPtr = 4; , kNoCheck = 5; , kNeedEnableDecomposedObj = (1ULL << ( 29 )); , ;   kNeedDisableDecomposedObj = (1ULL << ( 30 )); , kDecomposedObjMask = kNeedEnableDecomposedObj | kNeedDisableDecomposedObj. };  ; enum  EStatusBits { kForceRead = (1ULL << ( 11 )); , kCircular = (1ULL << ( 12 )); , kOnlyFlushAtCluster = (1ULL << ( 14 )); , kEntriesReshuffled = (1ULL << ( 19 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. }; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTChain.html:75,Load,Loading,75,doc/master/classTChain.html,https://root.cern,https://root.cern/doc/master/classTChain.html,1,['Load'],['Loading']
Performance,". ROOT: TChain Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Static Public Attributes |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TChain Class ReferenceTree Library. ; A chain is a collection of files containing TTree objects. ; When the chain is created, the first parameter is the default name for the Tree to be processed later on.; Enter a new element in the chain via the TChain::Add function. Once a chain is defined, one can use the normal TTree functions to Draw,Scan,etc.; Use TChain::SetBranchStatus to activate one or more branches for all the trees in the chain. ; Definition at line 33 of file TChain.h. Public Types; enum  EStatusBits { kGlobalWeight = (1ULL << ( 15 )); , kAutoDelete = (1ULL << ( 16 )); , kProofUptodate = (1ULL << ( 17 )); , kProofLite = (1ULL << ( 18 )); };  ; enum  Mode { kWithoutGlobalRegistration; , kWithGlobalRegistration; };  ;  Public Types inherited from TTree; enum  { kSplitCollectionOfPointers = 100; };  ; enum  ESetBranchAddressStatus { ;   kMissingBranch = -5; , kInternalError = -4; , kMissingCompiledCollectionProxy = -3; , kMismatch = -2; , ;   kClassMismatch = -1; , kMatch = 0; , kMatchConversion = 1; , kMatchConversionCollection = 2; , ;   kMakeClass = 3; , kVoidPtr = 4; , kNoCheck = 5; , kNeedEnableDecomposedObj = (1ULL << ( 29 )); , ;   kNeedDisableDecomposedObj = (1ULL << ( 30 )); , kDecomposedObjMask = kNeedEnableDecomposedObj | kNeedDisableDecomposedObj. };  ; enum  EStatusBits { kForceRead = (1ULL << ( 11 )); , kCircular = (1ULL << ( 12 )); , kOnlyFlushAtCluster = (1ULL << ( 14 )); , kEntriesReshuffled = (1ULL << ( 19 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTChain.html:74,Load,Loading,74,doc/v632/classTChain.html,https://root.cern,https://root.cern/doc/v632/classTChain.html,1,['Load'],['Loading']
Performance,". ROOT: TChainElement Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Types |; List of all members ; TChainElement Class ReferenceTree Library. ; A TChainElement describes a component of a TChain. ; Definition at line 28 of file TChainElement.h. Public Member Functions;  TChainElement ();  Default constructor for a chain element. ;  ;  TChainElement (const char *title, const char *filename);  Create a chain element. ;  ;  ~TChainElement () override;  Default destructor for a chain element. ;  ; virtual void CreatePackets ();  Initialize the packet descriptor string. ;  ; virtual void * GetBaddress () const;  ; virtual const char * GetBaddressClassName () const;  ; virtual bool GetBaddressIsPtr () const;  ; virtual UInt_t GetBaddressType () const;  ; virtual TBranch ** GetBranchPtr () const;  ; bool GetCheckedType () const;  ; bool GetDecomposedObj () const;  ; virtual Long64_t GetEntries () const;  ; Int_t GetLoadResult () const;  ; virtual char * GetPackets () const;  ; virtual Int_t GetPacketSize () const;  ; virtual Int_t GetStatus () const;  ; virtual bool HasBeenLookedUp ();  ; TClass * IsA () const override;  ; void ls (Option_t *option="""") const override;  List files in the chain. ;  ; virtual void SetBaddress (void *add);  ; virtual void SetBaddressClassName (const char *clname);  ; virtual void SetBaddressIsPtr (bool isptr);  ; virtual void SetBaddressType (UInt_t type);  ; virtual void SetBranchPtr (TBranch **ptr);  ; void SetCheckedType (bool m);  ; void SetDecomposedObj (bool m);  ; void SetLoadResult (Int_t result);  ; virtual void SetLookedUp (bool y=true);  Set/Reset the looked-up bit. ;  ; virtual void SetNumberEntries (Long64_t n);  ; virtual void SetPacketSize (Int_t size=100);  Set number of entries per packet for parallel root. ;  ; virtual void SetStatus (Int_t status);  ; void Strea",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTChainElement.html:82,Load,Loading,82,doc/master/classTChainElement.html,https://root.cern,https://root.cern/doc/master/classTChainElement.html,1,['Load'],['Loading']
Performance,". ROOT: TChainIndex Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TChainIndex Class Reference. ; A Chain Index. ; A Chain Index with majorname and minorname. It uses tree indices of all the trees in the chain instead of building a new index. The index values from the first tree should be less then all the index values from the second tree, and so on. If a tree in the chain doesn't have an index the index will be created and kept inside this chain index. ; Definition at line 40 of file TChainIndex.h. Classes; class  TChainIndexEntry;  Holds a description of indices of trees in the chain. More...;  . Public Member Functions;  TChainIndex ();  Default constructor for TChainIndex. ;  ;  TChainIndex (const TTree *T, const char *majorname, const char *minorname);  Normal constructor for TChainIndex. ;  ;  ~TChainIndex () override;  The destructor. ;  ; void Append (const TVirtualIndex *, bool delaySort=false) override;  Add an index to this chain. ;  ; TObject * Clone (const char *newname="""") const override;  Create a deep copy of the TChainIndex. ;  ; Long64_t GetEntryNumberFriend (const TTree *parent) override;  See TTreeIndex::GetEntryNumberFriend for description. ;  ; Long64_t GetEntryNumberWithBestIndex (Long64_t major, Long64_t minor) const override;  See TTreeIndex::GetEntryNumberWithBestIndex for details. ;  ; Long64_t GetEntryNumberWithIndex (Long64_t major, Long64_t minor) const override;  Returns the entry number with given index values. ;  ; const char * GetMajorName () const override;  ; const char * GetMinorName () const override;  ; Long64_t GetN () const override;  ; TClass * IsA () const override;  ; bool IsValidFor (const TTree *parent) override;  Return true if index can be applied to the TTree. ;  ; void SetTree (TTree *T) override;  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTChainIndex.html:80,Load,Loading,80,doc/master/classTChainIndex.html,https://root.cern,https://root.cern/doc/master/classTChainIndex.html,1,['Load'],['Loading']
Performance,". ROOT: TClass Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Types |; Private Member Functions |; Static Private Member Functions |; Private Attributes |; Static Private Attributes |; Friends |; List of all members ; TClass Class Reference. ; TClass instances represent classes, structs and namespaces in the ROOT type system. ; TClass instances are created starting from different sources of information:; TStreamerInfo instances saved in a ROOT file which is opened. This is called in jargon an emulated TClass.; From TProtoClass instances saved in a ROOT pcm file created by the dictionary generator and the dictionary itself.; From a lookup in the AST built by cling. If a TClass instance is built through the mechanisms 1. and 2., it does not contain information about methods of the class/struct/namespace it represents. Conversely, if built through 3. or 1., it does not carry the information which is necessary to ROOT to perform I/O of instances of the class/struct it represents. The mechanisms 1., 2. and 3. are not mutually exclusive: it can happen that during the execution of the program, all the three are triggered, modifying the state of the TClass instance.; In order to retrieve a TClass instance from the type system, a query can be executed as follows through the static TClass::GetClass method:; auto myClassTClass_0 = TClass::GetClass(""myClass"");; auto myClassTClass_1 = TClass::GetClass<myClass>();; auto myClassTClass_2 = TClass::GetClass(myClassTypeInfo);; TClass::GetClassstatic TClass * GetClass(const char *name, Bool_t load=kTRUE, Bool_t silent=kFALSE)Static method returning pointer to TClass of the specified class name.Definition TClass.cxx:3035; The name of classes is crucial for ROOT. A careful procedure of name normalization is carried out for each and every cla",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTClass.html:75,Load,Loading,75,doc/master/classTClass.html,https://root.cern,https://root.cern/doc/master/classTClass.html,1,['Load'],['Loading']
Performance,". ROOT: TClass Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Types |; Private Member Functions |; Static Private Member Functions |; Private Attributes |; Static Private Attributes |; Friends |; List of all members ; TClass Class Reference. ; TClass instances represent classes, structs and namespaces in the ROOT type system. ; TClass instances are created starting from different sources of information:; TStreamerInfo instances saved in a ROOT file which is opened. This is called in jargon an emulated TClass.; From TProtoClass instances saved in a ROOT pcm file created by the dictionary generator and the dictionary itself.; From a lookup in the AST built by cling. If a TClass instance is built through the mechanisms 1. and 2., it does not contain information about methods of the class/struct/namespace it represents. Conversely, if built through 3. or 1., it does not carry the information which is necessary to ROOT to perform I/O of instances of the class/struct it represents. The mechanisms 1., 2. and 3. are not mutually exclusive: it can happen that during the execution of the program, all the three are triggered, modifying the state of the TClass instance.; In order to retrieve a TClass instance from the type system, a query can be executed as follows through the static TClass::GetClass method:; auto myClassTClass_0 = TClass::GetClass(""myClass"");; auto myClassTClass_1 = TClass::GetClass<myClass>();; auto myClassTClass_2 = TClass::GetClass(myClassTypeInfo);; TClass::GetClassstatic TClass * GetClass(const char *name, Bool_t load=kTRUE, Bool_t silent=kFALSE)Static method returning pointer to TClass of the specified class name.Definition TClass.cxx:2968; The name of classes is crucial for ROOT. A careful procedure of name normalization is carried out for each and every clas",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTClass.html:74,Load,Loading,74,doc/v632/classTClass.html,https://root.cern,https://root.cern/doc/v632/classTClass.html,1,['Load'],['Loading']
Performance,". ROOT: TClass::InsertTClassInRegistryRAII Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; TClass::InsertTClassInRegistryRAII Class Reference. . Definition at line 173 of file TClass.h. Public Member Functions;  InsertTClassInRegistryRAII (TClass::EState &state, const char *name, TDeclNameRegistry &emuRegistry);  ;  ~InsertTClassInRegistryRAII ();  . Private Attributes; const char * fName;  ; TDeclNameRegistry & fNoInfoOrEmuOrFwdDeclNameRegistry;  ; TClass::EState & fState;  . Constructor & Destructor Documentation. ◆ InsertTClassInRegistryRAII(). TClass::InsertTClassInRegistryRAII::InsertTClassInRegistryRAII ; (; TClass::EState & ; state, . const char * ; name, . TDeclNameRegistry & ; emuRegistry . ). Definition at line 248 of file TClass.cxx. ◆ ~InsertTClassInRegistryRAII(). TClass::InsertTClassInRegistryRAII::~InsertTClassInRegistryRAII ; (; ). Definition at line 254 of file TClass.cxx. Member Data Documentation. ◆ fName. const char* TClass::InsertTClassInRegistryRAII::fName. private . Definition at line 176 of file TClass.h. ◆ fNoInfoOrEmuOrFwdDeclNameRegistry. TDeclNameRegistry& TClass::InsertTClassInRegistryRAII::fNoInfoOrEmuOrFwdDeclNameRegistry. private . Definition at line 177 of file TClass.h. ◆ fState. TClass::EState& TClass::InsertTClassInRegistryRAII::fState. private . Definition at line 175 of file TClass.h. Libraries for TClass::InsertTClassInRegistryRAII:. [legend]; The documentation for this class was generated from the following files:; core/meta/inc/TClass.h; core/meta/src/TClass.cxx. TClassInsertTClassInRegistryRAII. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:23 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTClass_1_1InsertTClassInRegistryRAII.html:103,Load,Loading,103,doc/master/classTClass_1_1InsertTClassInRegistryRAII.html,https://root.cern,https://root.cern/doc/master/classTClass_1_1InsertTClassInRegistryRAII.html,1,['Load'],['Loading']
Performance,". ROOT: TClass::ObjectPtr Struct Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; TClass::ObjectPtr Struct Reference. . Definition at line 139 of file TClass.h. Public Member Functions;  ObjectPtr (void *ptr=nullptr, TVirtualStreamerInfo *allocator=nullptr);  ; TVirtualStreamerInfo * GetAllocator () const;  ; void * GetPtr () const;  ;  operator bool () const;  . Public Attributes; TVirtualStreamerInfo * fAllocator = nullptr;  ; void * fPtr = nullptr;  . #include <TClass.h>; Constructor & Destructor Documentation. ◆ ObjectPtr(). TClass::ObjectPtr::ObjectPtr ; (; void * ; ptr = nullptr, . TVirtualStreamerInfo * ; allocator = nullptr . ). inline . Definition at line 145 of file TClass.h. Member Function Documentation. ◆ GetAllocator(). TVirtualStreamerInfo * TClass::ObjectPtr::GetAllocator ; (; ); const. inline . Definition at line 149 of file TClass.h. ◆ GetPtr(). void * TClass::ObjectPtr::GetPtr ; (; ); const. inline . Definition at line 147 of file TClass.h. ◆ operator bool(). TClass::ObjectPtr::operator bool ; (; ); const. inline . Definition at line 151 of file TClass.h. Member Data Documentation. ◆ fAllocator. TVirtualStreamerInfo* TClass::ObjectPtr::fAllocator = nullptr. Definition at line 143 of file TClass.h. ◆ fPtr. void* TClass::ObjectPtr::fPtr = nullptr. Definition at line 141 of file TClass.h. Collaboration diagram for TClass::ObjectPtr:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; The documentation for this struct was generated from the following file:; core/meta/inc/TClass.h. TClassObjectPtr. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:23 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structTClass_1_1ObjectPtr.html:87,Load,Loading,87,doc/master/structTClass_1_1ObjectPtr.html,https://root.cern,https://root.cern/doc/master/structTClass_1_1ObjectPtr.html,1,['Load'],['Loading']
Performance,". ROOT: TClass::TDeclNameRegistry Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; TClass::TDeclNameRegistry Class Reference. . Definition at line 158 of file TClass.h. Public Member Functions;  TDeclNameRegistry (Int_t verbLevel=0);  TDeclNameRegistry class constructor. ;  ;  ~TDeclNameRegistry ();  ; void AddQualifiedName (const char *name);  Extract this part of the name. ;  ; Bool_t HasDeclName (const char *name) const;  . Private Attributes; std::unordered_set< std::string > fClassNamesSet;  ; std::atomic_flag fSpinLock;  ; Int_t fVerbLevel =0;  . Constructor & Destructor Documentation. ◆ TDeclNameRegistry(). TClass::TDeclNameRegistry::TDeclNameRegistry ; (; Int_t ; verbLevel = 0). TDeclNameRegistry class constructor. ; Definition at line 185 of file TClass.cxx. ◆ ~TDeclNameRegistry(). TClass::TDeclNameRegistry::~TDeclNameRegistry ; (; ). Definition at line 235 of file TClass.cxx. Member Function Documentation. ◆ AddQualifiedName(). void TClass::TDeclNameRegistry::AddQualifiedName ; (; const char * ; name). Extract this part of the name. . Templates ns::ns2::,,,::THISPART<...; Namespaces,classes ns::ns2::,,,::THISPART . Definition at line 196 of file TClass.cxx. ◆ HasDeclName(). Bool_t TClass::TDeclNameRegistry::HasDeclName ; (; const char * ; name); const. Definition at line 223 of file TClass.cxx. Member Data Documentation. ◆ fClassNamesSet. std::unordered_set<std::string> TClass::TDeclNameRegistry::fClassNamesSet. private . Definition at line 169 of file TClass.h. ◆ fSpinLock. std::atomic_flag TClass::TDeclNameRegistry::fSpinLock. mutableprivate . Definition at line 170 of file TClass.h. ◆ fVerbLevel. Int_t TClass::TDeclNameRegistry::fVerbLevel =0. private . Definition at line 168 of file TClass.h. Libraries for TClass::TDeclNameRegistry:. [legend]; The documentation for this class was generated from the following file",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTClass_1_1TDeclNameRegistry.html:94,Load,Loading,94,doc/master/classTClass_1_1TDeclNameRegistry.html,https://root.cern,https://root.cern/doc/master/classTClass_1_1TDeclNameRegistry.html,1,['Load'],['Loading']
Performance,". ROOT: TClassDocInfo Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TClassDocInfo Class Reference. . Definition at line 29 of file TDocInfo.h. Public Member Functions;  TClassDocInfo (TClass *cl, const char *htmlfilename="""", const char *fsdecl="""", const char *fsimpl="""", const char *decl=0, const char *impl=0);  ;  TClassDocInfo (TDictionary *cl, const char *htmlfilename="""", const char *fsdecl="""", const char *fsimpl="""", const char *decl=0, const char *impl=0);  ;  ~TClassDocInfo () override;  ; Int_t Compare (const TObject *obj) const override;  Compare abstract method. ;  ; TDictionary * GetClass () const;  ; const char * GetDeclFileName () const;  ; const char * GetDeclFileSysName () const;  ; const char * GetHtmlFileName () const;  ; const char * GetImplFileName () const;  ; const char * GetImplFileSysName () const;  ; TList & GetListOfTypedefs ();  ; TModuleDocInfo * GetModule () const;  ; const char * GetName () const override;  Returns name of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t HaveSource () const;  ; TClass * IsA () const override;  ; Bool_t IsSelected () const;  ; Bool_t IsSortable () const override;  ; void SetDeclFileName (const char *name);  ; void SetDeclFileSysName (const char *fsname);  ; void SetHtmlFileName (const char *name);  ; void SetImplFileName (const char *name);  ; void SetImplFileSysName (const char *fsname);  ; void SetModule (TModuleDocInfo *module);  ; void SetSelected (Bool_t sel=kTRUE);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; vir",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTClassDocInfo.html:82,Load,Loading,82,doc/master/classTClassDocInfo.html,https://root.cern,https://root.cern/doc/master/classTClassDocInfo.html,1,['Load'],['Loading']
Performance,". ROOT: TClassDocOutput Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Protected Attributes |; Friends |; List of all members ; TClassDocOutput Class Reference. . Definition at line 21 of file TClassDocOutput.h. Public Member Functions;  TClassDocOutput (THtml &html, TClass *cl, TList *typedefs);  Create an object given the invoking THtml object, and the TClass object that we will generate output for. ;  ;  ~TClassDocOutput () override;  Destructor, deletes fParser. ;  ; void Class2Html (Bool_t force=kFALSE);  Create HTML files for a single class. ;  ; Bool_t ClassDotCharts (std::ostream &out);  This function builds the class charts for one class in GraphViz/Dot format, i.e. ;  ; void CreateClassHierarchy (std::ostream &out, const char *docFileName);  Create the hierarchical class list part for the current class's base classes. ;  ; TClass * IsA () const override;  ; void MakeTree (Bool_t force=kFALSE);  Create an output file with a graphical representation of the class inheritance. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TDocOutput;  TDocOutput (THtml &html);  ;  ~TDocOutput () override;  ; virtual void AdjustSourcePath (TString &line, const char *relpath=""../"");  adjust the path of links for source files, which are in src/, but need to point to relpath (usually ""../""). ;  ; void Convert (std::istream &in, const char *infilename, const char *outfilename, const char *title, const char *relpath=""../"", Int_t includeOutput=0, const char *context="""", TGClient *gclient=0);  Convert a text file into a html file. ;  ; Bool_t CopyHtmlFile (const char *sourceName, const char *destName="""");  Copy file to HTML directory. ;  ; virtual void CreateClassInd",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTClassDocOutput.html:84,Load,Loading,84,doc/master/classTClassDocOutput.html,https://root.cern,https://root.cern/doc/master/classTClassDocOutput.html,1,['Load'],['Loading']
Performance,". ROOT: TClassEdit Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Enumerations |; Functions ; TClassEdit Namespace Reference. Classes; struct  FunctionSplitInfo;  Result of splitting a function declaration into fReturnType fScopeName::fFunctionName<fFunctionTemplateArguments>(fFunctionParameters) More...;  ; class  TInterpreterLookupHelper;  ; struct  TSplitType;  . Enumerations; enum class  EComplexType : short { ;   kNone; , kDouble; , kFloat; , kInt; , ;   kLong. };  ; enum  EModType { ;   kNone = 0; , kDropTrailStar = 1<<0; , kDropDefaultAlloc = 1<<1; , kDropAlloc = 1<<2; , ;   kInnerClass = 1<<3; , kInnedMostClass = 1<<4; , kDropStlDefault = 1<<5; , kDropComparator = 1<<6; , ;   kDropAllDefault = 1<<7; , kLong64 = 1<<8; , kDropStd = 1<<9; , kKeepOuterConst = 1<<10; , ;   kResolveTypedef = 1<<11; , kDropPredicate = 1<<12; , kDropHash = 1<<13. };  ; enum  ESTLType { ;   kNotSTL = ROOT::kNotSTL; , kVector = ROOT::kSTLvector; , kList = ROOT::kSTLlist; , kForwardlist = ROOT::kSTLforwardlist; , ;   kDeque = ROOT::kSTLdeque; , kMap = ROOT::kSTLmap; , kMultiMap = ROOT::kSTLmultimap; , kSet = ROOT::kSTLset; , ;   kMultiSet = ROOT::kSTLmultiset; , kUnorderedSet = ROOT::kSTLunorderedset; , kUnorderedMultiSet = ROOT::kSTLunorderedmultiset; , kUnorderedMap = ROOT::kSTLunorderedmap; , ;   kUnorderedMultiMap = ROOT::kSTLunorderedmultimap; , kBitSet = ROOT::kSTLbitset; , kEnd = ROOT::kSTLend. };  . Functions; std::string CleanType (const char *typeDesc, int mode=0, const char **tail=nullptr);  Cleanup type description, redundant blanks removed and redundant tail ignored return *tail = pointer to last used character if (mode==0) keep keywords if (mode==1) remove keywords outside the template params if (mode>=2) remove the keywords everywhere. ;  ; char * DemangleName (const char *mangled_name, int &errorCode);  ; char * DemangleTypeIdName (const std::type_info &ti, int &errorCode);  Demangle in a portable way the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceTClassEdit.html:83,Load,Loading,83,doc/master/namespaceTClassEdit.html,https://root.cern,https://root.cern/doc/master/namespaceTClassEdit.html,1,['Load'],['Loading']
Performance,". ROOT: TClassGenerator Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; List of all members ; TClassGenerator Class Referenceabstract. ; Objects following this interface can be passed onto the TROOT object to implement a user customized way to create the TClass objects. ; Use TROOT::AddClassGenerator to register a concrete instance. ; Definition at line 28 of file TClassGenerator.h. Public Member Functions; virtual TClass * GetClass (const char *classname, Bool_t load)=0;  ; virtual TClass * GetClass (const char *classname, Bool_t load, Bool_t silent);  ; virtual TClass * GetClass (const std::type_info &typeinfo, Bool_t load)=0;  ; virtual TClass * GetClass (const std::type_info &typeinfo, Bool_t load, Bool_t silent);  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object u",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTClassGenerator.html:84,Load,Loading,84,doc/master/classTClassGenerator.html,https://root.cern,https://root.cern/doc/master/classTClassGenerator.html,5,"['Load', 'load']","['Loading', 'load']"
Performance,". ROOT: TClassMenuItem Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; TClassMenuItem Class Reference. ; Describes one element of the context menu associated to a class The menu item may describe. . a separator,; standard list of methods i.e. the methods defined in the described class by a MENU in the comment field of the header,; a method of an external class or a global function All the standard methods of the class are described by only one item. Since a complete context menu is described by a TList of TClassMenuItem elements, it is possible to customize the context menu of a class by removing the element ""standard methods"" and replacing it by whatever one wants. . Definition at line 31 of file TClassMenuItem.h. Public Types; enum  { kIsExternal; , kIsSelf; };  ; enum  EClassMenuItemType { kPopupUserFunction; , kPopupSeparator; , kPopupStandardList; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TClassMenuItem ();  Default TClassMenuItem ctor. ;  ;  TClassMenuItem (Int_t type, TClass *parent, const char *title="""", const char *functionname="""", TObject *obj=nullptr, const char *args="""", Int_t selfobjposition=-1, Bool_t self=kFALSE);  T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTClassMenuItem.html:83,Load,Loading,83,doc/master/classTClassMenuItem.html,https://root.cern,https://root.cern/doc/master/classTClassMenuItem.html,1,['Load'],['Loading']
Performance,". ROOT: TClassRef Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TClassRef Class Reference. ; TClassRef is used to implement a permanent reference to a TClass object. ; In particular this reference will change if and when the TClass object is regenerated. This regeneration usually happens when a library containing the described class is loaded after a file containing an instance of this class has been opened.; The references kept track of using an intrusive double linked list. The intrusive list is maintained by TClass::AddRef and TClass::RemoveRef. The 'start' of the list is held in TClass::fRefStart. ; Definition at line 28 of file TClassRef.h. Public Member Functions;  TClassRef ();  ;  TClassRef (const char *classname);  Create reference to specified class name, but don't set referenced class object. ;  ;  TClassRef (const TClassRef &);  Copy ctor, increases reference count to original TClass object. ;  ;  TClassRef (TClass *cl);  Add reference to specified class object. ;  ;  ~TClassRef ();  ; TClass * GetClass () const;  ; const char * GetClassName ();  ;  operator TClass * () const;  ; TClass * operator-> () const;  ; TClassRef & operator= (const TClassRef &rhs);  ; TClassRef & operator= (TClass *rhs);  ; void Reset ();  ; void SetName (const char *new_name);  . Private Member Functions; void Assign (const TClassRef &);  Assignment operator implementation, increases reference count to original class object. ;  ; void Assign (TClass *);  Assignment operator, increases reference count to original class object. ;  ; TClass * InternalGetClass () const;  Return the current TClass object corresponding to fClassName. ;  . Private Attributes; std::string fClassName;  ; TClass *const * fClassPtr;  . Friends; class TClass;  Ptr to the permanent TClass ptr/reference. ;  . #include <TClassRe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTClassRef.html:78,Load,Loading,78,doc/master/classTClassRef.html,https://root.cern,https://root.cern/doc/master/classTClassRef.html,2,"['Load', 'load']","['Loading', 'loaded']"
Performance,". ROOT: TClassStreamer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Attributes |; List of all members ; TClassStreamer Class Reference. . Definition at line 26 of file TClassStreamer.h. Public Member Functions;  TClassStreamer (ClassStreamerFunc_t pointer);  ; virtual ~TClassStreamer ();  ; virtual TClassStreamer * Generate () const;  ; virtual const TClass * GetOnFileClass () const;  ; virtual void operator() (TBuffer &b, void *objp);  ; virtual void SetOnFileClass (const TClass *cl);  ; virtual void Stream (TBuffer &b, void *objp, const TClass *onfileClass);  . Protected Member Functions;  TClassStreamer ();  ;  TClassStreamer (const TClassStreamer &rhs);  ; TClassStreamer & operator= (const TClassStreamer &rhs);  . Protected Attributes; TClassRef fOnFileClass;  . Private Attributes; ClassStreamerFunc_t fStreamer;  . #include <TClassStreamer.h>. Inheritance diagram for TClassStreamer:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TClassStreamer() [1/3]. TClassStreamer::TClassStreamer ; (; ). inlineprotected . Definition at line 28 of file TClassStreamer.h. ◆ TClassStreamer() [2/3]. TClassStreamer::TClassStreamer ; (; const TClassStreamer & ; rhs). inlineprotected . Definition at line 29 of file TClassStreamer.h. ◆ TClassStreamer() [3/3]. TClassStreamer::TClassStreamer ; (; ClassStreamerFunc_t ; pointer). inline . Definition at line 33 of file TClassStreamer.h. ◆ ~TClassStreamer(). virtual TClassStreamer::~TClassStreamer ; (; ). inlinevirtual . Definition at line 43 of file TClassStreamer.h. Member Function Documentation. ◆ Generate(). virtual TClassStreamer * TClassStreamer::Generate ; (; ); const. inlinevirtual . Reimplemented in TCollectionClassStreamer.; Definition at line 38 of file TClassStreamer.h. ◆ GetOn",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTClassStreamer.html:83,Load,Loading,83,doc/master/classTClassStreamer.html,https://root.cern,https://root.cern/doc/master/classTClassStreamer.html,1,['Load'],['Loading']
Performance,". ROOT: TClassTable Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Types |; Private Member Functions |; Static Private Member Functions |; Static Private Attributes |; Friends |; List of all members ; TClassTable Class ReferenceCore ROOT classes » Containers. ; This class registers for all classes their name, id and dictionary function in a hash table. ; Classes are automatically added by the ctor of a special init class when a global of this init class is initialized when the program starts (see the ClassImp macro).; All functions in TClassTable are thread-safe. ; Definition at line 37 of file TClassTable.h. Classes; class  NormalizeThenLock;  . Public Types; enum  { ;   kNoStreamer = 0x01; , kNoInputOperator = 0x02; , kAutoStreamer = 0x04; , kHasVersion = 0x08; , ;   kHasCustomStreamerMember = 0x10; , kNtplForceNativeMode = 0x20; , kNtplForceStreamerMode = 0x40. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  ~TClassTable ();  TClassTable singleton is deleted in Terminate(). ;  ; int Classes ();  ; TClass * IsA () const override;  ; void Print (Option_t *option="""") const override;  Print the class table. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; voi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTClassTable.html:80,Load,Loading,80,doc/master/classTClassTable.html,https://root.cern,https://root.cern/doc/master/classTClassTable.html,1,['Load'],['Loading']
Performance,". ROOT: TClassTree Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TClassTree Class ReferenceGraphics » 2D Graphics » Graphics pad. ; Draw inheritance tree and their relations for a list of classes. ; The following options are supported; Direct inheritance (default); Multiple inheritance; Composition; References by data members and member functions; References from Code. The list of classes is specified:; either in the TClassTree constructor as a second argument; or the parameter to TClassTree::Draw. Note that the ClassTree viewer can also be started from the canvas pull down menu ""Classes"".; In the list of classes, class names are separated by a "":"" wildcarding is supported. The following formats are supported, eg in TClassTree::Draw; Draw(""ClassA""); Draw inheritance tree for ClassA; Show all classes referenced by ClassA. Draw(""*ClassB""); Draw inheritance tree for ClassB and all the classes deriving from ClassB. Draw("">ClassC""); Draw inheritance tree for ClassC; Show classes referencing ClassC. Draw(""ClassD<""); Draw inheritance tree for ClassD; Show classes referenced by ClassD; Show all classes referencing ClassD. Draw(""Cla*""); Draw inheritance tree for all classes with name starting with ""Cla""; Show classes referenced by these classes. Draw(""ClassA:ClassB<""); Draw inheritance tree for ClassA; Show all classes referenced by ClassA; Draw inheritance tree for ClassB; Show classes referenced by ClassB; Show all classes referencing ClassB. Example: Draw(""TTree<""); Draw inheritance tree for the Root class TTree; Show all classes referenced by TTree; Show all classes using TTree. By default, only direct inheritance is drawn. Use TClassTree::ShowLinks(option) to show additional references; option = ""H"" to show links to embedded classes; option = ""M"" to show multiple",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTClassTree.html:79,Load,Loading,79,doc/master/classTClassTree.html,https://root.cern,https://root.cern/doc/master/classTClassTree.html,1,['Load'],['Loading']
Performance,". ROOT: TCling Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Types |; Private Member Functions |; Static Private Member Functions |; Private Attributes |; Static Private Attributes |; Friends |; List of all members ; TCling Class Referencefinal. ; This class defines an interface to the cling C++ interpreter. ; Cling is a full ANSI compliant C++-11 interpreter based on clang/LLVM technology. ; Definition at line 102 of file TCling.h. Classes; struct  CharPtrCmp_t;  ; struct  MutexStateAndRecurseCount;  ; struct  MutexStateAndRecurseCountDelta;  ; class  SuspendAutoLoadingRAII;  ; class  TUniqueString;  . Public Member Functions;  TCling (const char *name, const char *title, const char *const argv[], void *interpLibHandle);  Initialize the cling interpreter interface. ;  ; virtual ~TCling ();  Destroy the interpreter interface. ;  ; virtual void AddAvailableIndentifiers (TSeqCollection &Idents) final;  ; void AddIncludePath (const char *path) final;  Add a directory to the list of directories in which the interpreter looks for include files. ;  ; void ApplyToInterpreterMutex (void *delta);  Re-apply the lock count delta that TCling__ResetInterpreterMutex() caused. ;  ; Int_t AutoLoad (const char *classname, Bool_t knowDictNotLoaded=kFALSE) final;  Load library containing the specified class. ;  ; Int_t AutoLoad (const std::type_info &typeinfo, Bool_t knowDictNotLoaded=kFALSE) final;  Load library containing the specified class. ;  ; Int_t AutoParse (const char *cls) final;  Parse the headers relative to the class Returns 1 in case of success, 0 in case of failure. ;  ; ClassInfo_t * BaseClassInfo_ClassInfo (BaseClassInfo_t *) const final;  ; void BaseClassInfo_Delete (BaseClassInfo_t *bcinfo) const final;  ; BaseClassInfo_t * BaseClassInfo_Factory (ClassInfo_t *derived, ClassInfo_t *base",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCling.html:75,Load,Loading,75,doc/master/classTCling.html,https://root.cern,https://root.cern/doc/master/classTCling.html,1,['Load'],['Loading']
Performance,". ROOT: TCling::CharPtrCmp_t Struct Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; List of all members ; TCling::CharPtrCmp_t Struct Reference. . Definition at line 140 of file TCling.h. Public Member Functions; bool operator() (const char *a, const char *b) const;  . Member Function Documentation. ◆ operator()(). bool TCling::CharPtrCmp_t::operator() ; (; const char * ; a, . const char * ; b . ); const. inline . Definition at line 141 of file TCling.h. The documentation for this struct was generated from the following file:; core/metacling/src/TCling.h. TClingCharPtrCmp_t. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:24 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structTCling_1_1CharPtrCmp__t.html:90,Load,Loading,90,doc/master/structTCling_1_1CharPtrCmp__t.html,https://root.cern,https://root.cern/doc/master/structTCling_1_1CharPtrCmp__t.html,1,['Load'],['Loading']
Performance,". ROOT: TCling::MutexStateAndRecurseCount Struct Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; TCling::MutexStateAndRecurseCount Struct Reference. . Definition at line 155 of file TCling.h. Public Member Functions;  operator bool () const;  . Public Attributes; Int_t fRecurseCount = 0;  Interpreter-related functions will push the ""entry"" lock state to *this. ;  ; std::unique_ptr< ROOT::TVirtualRWMutex::State > fState;  State of gCoreMutex when the first interpreter-related function was invoked. ;  . Member Function Documentation. ◆ operator bool(). TCling::MutexStateAndRecurseCount::operator bool ; (; ); const. inline . Definition at line 164 of file TCling.h. Member Data Documentation. ◆ fRecurseCount. Int_t TCling::MutexStateAndRecurseCount::fRecurseCount = 0. Interpreter-related functions will push the ""entry"" lock state to *this. ; Recursive calls will do that, too - but we must only forget about the lock state once this recursion count went to 0. ; Definition at line 162 of file TCling.h. ◆ fState. std::unique_ptr<ROOT::TVirtualRWMutex::State> TCling::MutexStateAndRecurseCount::fState. State of gCoreMutex when the first interpreter-related function was invoked. ; Definition at line 157 of file TCling.h. Collaboration diagram for TCling::MutexStateAndRecurseCount:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; The documentation for this struct was generated from the following file:; core/metacling/src/TCling.h. TClingMutexStateAndRecurseCount. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:24 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structTCling_1_1MutexStateAndRecurseCount.html:103,Load,Loading,103,doc/master/structTCling_1_1MutexStateAndRecurseCount.html,https://root.cern,https://root.cern/doc/master/structTCling_1_1MutexStateAndRecurseCount.html,1,['Load'],['Loading']
Performance,". ROOT: TCling::MutexStateAndRecurseCountDelta Struct Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Attributes |; List of all members ; TCling::MutexStateAndRecurseCountDelta Struct Reference. . Definition at line 167 of file TCling.h. Public Types; using StateDelta = ROOT::TVirtualRWMutex::StateDelta;  . Public Attributes; std::unique_ptr< StateDelta > fDelta;  ; MutexStateAndRecurseCount fInitialState;  . Member Typedef Documentation. ◆ StateDelta. using TCling::MutexStateAndRecurseCountDelta::StateDelta = ROOT::TVirtualRWMutex::StateDelta. Definition at line 168 of file TCling.h. Member Data Documentation. ◆ fDelta. std::unique_ptr<StateDelta> TCling::MutexStateAndRecurseCountDelta::fDelta. Definition at line 171 of file TCling.h. ◆ fInitialState. MutexStateAndRecurseCount TCling::MutexStateAndRecurseCountDelta::fInitialState. Definition at line 170 of file TCling.h. Collaboration diagram for TCling::MutexStateAndRecurseCountDelta:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; The documentation for this struct was generated from the following file:; core/metacling/src/TCling.h. TClingMutexStateAndRecurseCountDelta. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:24 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structTCling_1_1MutexStateAndRecurseCountDelta.html:108,Load,Loading,108,doc/master/structTCling_1_1MutexStateAndRecurseCountDelta.html,https://root.cern,https://root.cern/doc/master/structTCling_1_1MutexStateAndRecurseCountDelta.html,1,['Load'],['Loading']
Performance,. ROOT: TCling::SuspendAutoLoadingRAII Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; TCling::SuspendAutoLoadingRAII Class Reference. . Definition at line 602 of file TCling.h. Public Member Functions;  SuspendAutoLoadingRAII (TCling *tcling);  ;  ~SuspendAutoLoadingRAII ();  . Private Attributes; bool fOldValue;  ; TCling * fTCling = nullptr;  . Constructor & Destructor Documentation. ◆ SuspendAutoLoadingRAII(). TCling::SuspendAutoLoadingRAII::SuspendAutoLoadingRAII ; (; TCling * ; tcling). inline . Definition at line 607 of file TCling.h. ◆ ~SuspendAutoLoadingRAII(). TCling::SuspendAutoLoadingRAII::~SuspendAutoLoadingRAII ; (; ). inline . Definition at line 608 of file TCling.h. Member Data Documentation. ◆ fOldValue. bool TCling::SuspendAutoLoadingRAII::fOldValue. private . Definition at line 604 of file TCling.h. ◆ fTCling. TCling* TCling::SuspendAutoLoadingRAII::fTCling = nullptr. private . Definition at line 603 of file TCling.h. core/metacling/src/TCling.h. TClingSuspendAutoLoadingRAII. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:24 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCling_1_1SuspendAutoLoadingRAII.html:99,Load,Loading,99,doc/master/classTCling_1_1SuspendAutoLoadingRAII.html,https://root.cern,https://root.cern/doc/master/classTCling_1_1SuspendAutoLoadingRAII.html,1,['Load'],['Loading']
Performance,. ROOT: TCling::TUniqueString Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; TCling::TUniqueString Class Reference. . Definition at line 611 of file TCling.h. Public Member Functions;  TUniqueString ()=delete;  ;  TUniqueString (const TUniqueString &)=delete;  ;  TUniqueString (Long64_t size);  ; bool Append (const std::string &str);  Append string to the storage if not added already. ;  ; const char * Data ();  . Private Attributes; std::string fContent;  ; std::hash< std::string > fHashFunc;  ; std::set< size_t > fLinesHashSet;  . Constructor & Destructor Documentation. ◆ TUniqueString() [1/3]. TCling::TUniqueString::TUniqueString ; (; ). delete . ◆ TUniqueString() [2/3]. TCling::TUniqueString::TUniqueString ; (; const TUniqueString & ; ). delete . ◆ TUniqueString() [3/3]. TCling::TUniqueString::TUniqueString ; (; Long64_t ; size). Definition at line 999 of file TCling.cxx. Member Function Documentation. ◆ Append(). bool TCling::TUniqueString::Append ; (; const std::string & ; str). inline . Append string to the storage if not added already. ; Definition at line 1014 of file TCling.cxx. ◆ Data(). const char * TCling::TUniqueString::Data ; (; ). inline . Definition at line 1006 of file TCling.cxx. Member Data Documentation. ◆ fContent. std::string TCling::TUniqueString::fContent. private . Definition at line 619 of file TCling.h. ◆ fHashFunc. std::hash<std::string> TCling::TUniqueString::fHashFunc. private . Definition at line 621 of file TCling.h. ◆ fLinesHashSet. std::set<size_t> TCling::TUniqueString::fLinesHashSet. private . Definition at line 620 of file TCling.h. core/metacling/src/TCling.h; core/metacling/src/TCling.cxx. TClingTUniqueString. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:24 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCling_1_1TUniqueString.html:90,Load,Loading,90,doc/master/classTCling_1_1TUniqueString.html,https://root.cern,https://root.cern/doc/master/classTCling_1_1TUniqueString.html,1,['Load'],['Loading']
Performance,". ROOT: TClingCallbacks Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TClingCallbacks Class Reference. . Definition at line 41 of file TClingCallbacks.h. Public Member Functions;  TClingCallbacks (cling::Interpreter *interp, bool hasCodeGen);  ;  ~TClingCallbacks ();  ; void DefinitionShadowed (const clang::NamedDecl *D) override;  A previous definition has been shadowed; invalidate TCling' stored data about the old (global) decl. ;  ; void * EnteringUserCode () override;  ; bool FileNotFound (llvm::StringRef FileName) override;  ; void InclusionDirective (clang::SourceLocation, const clang::Token &, llvm::StringRef FileName, bool, clang::CharSourceRange, clang::OptionalFileEntryRef, llvm::StringRef, llvm::StringRef, const clang::Module *, clang::SrcMgr::CharacteristicKind) override;  ; void Initialize ();  ; bool IsAutoLoadingEnabled () const;  ; bool IsAutoParsingSuspended ();  ; void LibraryLoaded (const void *dyLibHandle, llvm::StringRef canonicalName) override;  ; bool LibraryLoadingFailed (const std::string &, const std::string &, bool, bool) override;  ; void LibraryUnloaded (const void *dyLibHandle, llvm::StringRef canonicalName) override;  ; void * LockCompilationDuringUserCodeExecution () override;  ; bool LookupObject (clang::LookupResult &R, clang::Scope *S) override;  ; bool LookupObject (clang::TagDecl *Tag) override;  ; bool LookupObject (const clang::DeclContext *DC, clang::DeclarationName Name) override;  ; void PrintStackTrace () override;  ; void ReturnedFromUserCode (void *stateInfo) override;  ; void SetAutoLoadingEnabled (bool val=true);  ; void SetAutoParsingSuspended (bool val=true);  ; void TransactionCodeGenFinished (const cling::Transaction &T) override;  ; void TransactionCodeGenStarted (const cling::Transaction &T) override;  ; void TransactionCommitted (const cling::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTClingCallbacks.html:84,Load,Loading,84,doc/master/classTClingCallbacks.html,https://root.cern,https://root.cern/doc/master/classTClingCallbacks.html,1,['Load'],['Loading']
Performance,". ROOT: TClingClassInfo Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TClingClassInfo Class Referencefinal. ; Emulation of the CINT ClassInfo class. ; The CINT C++ interpreter provides an interface to metadata about a class through the ClassInfo class. This class provides the same functionality, using an interface as close as possible to ClassInfo but the class metadata comes from the Clang C++ compiler, not CINT. ; Definition at line 59 of file TClingClassInfo.h. Public Types; enum  EInheritanceMode { kInThisScope = 0; , kWithInheritance = 1; };  . Public Member Functions;  TClingClassInfo ();  ;  TClingClassInfo (cling::Interpreter *, Bool_t all=kTRUE);  ;  TClingClassInfo (cling::Interpreter *, const char *classname, bool intantiateTemplate=kTRUE);  ;  TClingClassInfo (cling::Interpreter *interp, const clang::Decl *D);  ;  TClingClassInfo (cling::Interpreter *interp, const clang::Type &tag);  ;  TClingClassInfo (const TClingClassInfo &rhs);  ; void AddBaseOffsetFunction (const clang::Decl *decl, OffsetPtrFunc_t func);  ; void AddBaseOffsetValue (const clang::Decl *decl, ptrdiff_t offset);  ; long ClassProperty () const;  ; void Delete (void *arena, const ROOT::TMetaUtils::TNormalizedCtxt &normCtxt) const;  ; void DeleteArray (void *arena, bool dtorOnly, const ROOT::TMetaUtils::TNormalizedCtxt &normCtxt) const;  ; void Destruct (void *arena, const ROOT::TMetaUtils::TNormalizedCtxt &normCtxt) const;  ; const char * FileName ();  ; void FullName (std::string &output, const ROOT::TMetaUtils::TNormalizedCtxt &normCtxt) const;  ; ptrdiff_t GetBaseOffset (TClingClassInfo *toBase, void *address, bool isDerivedObject);  ; const clang::ValueDecl * GetDataMember (const char *name) const;  ; TDictionary::DeclId_t GetDeclId () const;  ; const clang::FunctionTemplateDecl * GetFunctionT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTClingClassInfo.html:84,Load,Loading,84,doc/master/classTClingClassInfo.html,https://root.cern,https://root.cern/doc/master/classTClingClassInfo.html,1,['Load'],['Loading']
Performance,". ROOT: TClonesArray Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TClonesArray Class ReferenceCore ROOT classes » Containers. ; An array of clone (identical) objects. ; Memory for the objects stored in the array is allocated only once in the lifetime of the clones array. All objects must be of the same class. For the rest this class has the same properties as TObjArray.; To reduce the very large number of new and delete calls in large loops like this (O(100000) x O(10000) times new/delete): TObjArray a(10000);; while (TEvent *ev = (TEvent *)next()) { // O(100000) events; for (int i = 0; i < ev->Ntracks; i++) { // O(10000) tracks; a[i] = new TTrack(x,y,z,...);; ...; ...; }; ...; a.Delete();; }; a#define a(i)Definition RSha256.hxx:99; TObjArrayAn array of TObjects.Definition TObjArray.h:31; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; One better uses a TClonesArray which reduces the number of new/delete calls to only O(10000): TClonesArray a(""TTrack"", 10000);; while (TEvent *ev = (TEvent *)next()) { // O(100000) events; for (int i = 0; i < ev->Ntracks; i++) { // O(10000) tracks; new(a[i]) TTrack(x,y,z,...);; ...; ...; }; ...; a.Delete(); // or a.Clear() or a.Clear(""C""); }; TClonesArrayAn array of clone (identical) objects.Definition TClonesArray.h:29; To reduce the number of call to the constructor (especially useful if the user class requires memory allocation), the object can be added (and constructed when needed) using ConstructedAt which only calls the constructor once per slot. TClonesArray a(""TTrack"", 10000);; while (TEvent *ev = (TEvent *)next()) { // O(100000) events; for (int i = 0; i < ev->Ntracks; i++) { // O(10000) tracks; TTrack *track = (TTrack*)a.ConstructedAt(i);; track->Set(x,y,z,....);; ...; ...; }; ...; a.Clear(); // or a.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTClonesArray.html:81,Load,Loading,81,doc/master/classTClonesArray.html,https://root.cern,https://root.cern/doc/master/classTClonesArray.html,1,['Load'],['Loading']
Performance,". ROOT: TCollection Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Static Private Attributes |; List of all members ; TCollection Class ReferenceabstractCore ROOT classes » Containers. ; Collection abstract base class. ; This class describes the base protocol all collection classes have to implement. The ROOT collection classes always store pointers to objects that inherit from TObject. They never adopt the objects. Therefore, it is the user's responsibility to take care of deleting the actual objects once they are not needed anymore. In exceptional cases, when the user is 100% sure nothing else is referencing the objects in the collection, one can delete all objects and the collection at the same time using the Delete() function.; Collections can be iterated using an iterator object (see TIterator). Depending on the concrete collection class there may be some additional methods of iterating. See the respective classes.; TCollection inherits from TObject since we want to be able to have collections of collections.; In a later release the collections may become templatized. ; Definition at line 65 of file TCollection.h. Public Types; enum  { kInitCapacity = 16; , kInitHashTableCapacity = 17; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCann",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCollection.html:80,Load,Loading,80,doc/master/classTCollection.html,https://root.cern,https://root.cern/doc/master/classTCollection.html,1,['Load'],['Loading']
Performance,". ROOT: TCollection Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Static Private Attributes |; List of all members ; TCollection Class ReferenceabstractCore ROOT classes » Containers. ; Collection abstract base class. ; This class describes the base protocol all collection classes have to implement. The ROOT collection classes always store pointers to objects that inherit from TObject. They never adopt the objects. Therefore, it is the user's responsibility to take care of deleting the actual objects once they are not needed anymore. In exceptional cases, when the user is 100% sure nothing else is referencing the objects in the collection, one can delete all objects and the collection at the same time using the Delete() function.; Collections can be iterated using an iterator object (see TIterator). Depending on the concrete collection class there may be some additional methods of iterating. See the respective classes.; TCollection inherits from TObject since we want to be able to have collections of collections.; In a later release the collections may become templatized. ; Definition at line 65 of file TCollection.h. Public Types; enum  { kInitCapacity = 16; , kInitHashTableCapacity = 17; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCanno",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTCollection.html:79,Load,Loading,79,doc/v632/classTCollection.html,https://root.cern,https://root.cern/doc/v632/classTCollection.html,1,['Load'],['Loading']
Performance,". ROOT: TCollectionMethodBrowsable Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; List of all members ; TCollectionMethodBrowsable Class ReferenceTree Library. ; TCollectionMethodBrowsable extends TCollectionPropertyBrowsable by showing all methods of the collection itself. ; If none are available - e.g. for STL classes like std::list, a TVirtualBranchBrowsable object is created instead. The methods' names will have a ""@"" prepended, to distinguish them from the contained elements' methods.; This browser helper object is not part of the default list of registered generators (see TVirtualBranchBrowsable::RegisterDefaultGenerators()). If you want to use it, you should call TCollectionMethodBrowsable::Register(); As it extends the functionality of TVirtualBranchBrowsable, one might want to unregister the generator of the ""@size()"" method by calling TCollectionPropertyBrowsable::Unregister(); ; Definition at line 178 of file TBranchBrowsable.h. Public Member Functions;  ~TCollectionMethodBrowsable () override;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMethodBrowsable;  ~TMethodBrowsable () override;  ; const char * GetIconName () const override;  return our special icons ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TVirtualBranchBrowsable;  ~TVirtualBranchBrowsable () override;  Destructor. Delete our leaves. ;  ; void Browse (TBrowser *b) override;  Calls TTree::Draw on the method if return type is not a class; otherwise expands returned object's ""folder"". ;  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCollectionMethodBrowsable.html:95,Load,Loading,95,doc/master/classTCollectionMethodBrowsable.html,https://root.cern,https://root.cern/doc/master/classTCollectionMethodBrowsable.html,1,['Load'],['Loading']
Performance,". ROOT: TCollectionPropertyBrowsable Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; TCollectionPropertyBrowsable Class ReferenceTree Library. ; A tiny browser helper object (and its generator) for adding a virtual (as in ""not actually part of the class"", not in C++ virtual) ""@size()"" method to a collection. ; For all collections that derive from TCollection, or have a TVirtualCollectionProxy associated with them, a leaf is created that allows access to the number of elements in the collection. For TClonesArrays and types with an associated TVirtualCollectionProxy, this forwards to TTreeFormula's ""@branch.size()"" functionality. For all other collections, a method call to the appropriate collection's member function is executed when drawing.; These objects are of course only created for elements containing a collection; the generator has no effect on any other elements. ; Definition at line 150 of file TBranchBrowsable.h. Public Member Functions;  ~TCollectionPropertyBrowsable () override;  ; void Browse (TBrowser *b) override;  Browses a TCollectionPropertyBrowsable. ;  ; const char * GetDraw () const;  return the string passed to TTree::Draw ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TVirtualBranchBrowsable;  ~TVirtualBranchBrowsable () override;  Destructor. Delete our leaves. ;  ; void Browse (TBrowser *b) override;  Calls TTree::Draw on the method if return type is not a class; otherwise expands returned object's ""folder"". ;  ; const TBranch * GetBranch () const;  return the parent branch (might be many levels up) ;  ; TClass * GetClassType () const;  return the type of this browsabl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCollectionPropertyBrowsable.html:97,Load,Loading,97,doc/master/classTCollectionPropertyBrowsable.html,https://root.cern,https://root.cern/doc/master/classTCollectionPropertyBrowsable.html,1,['Load'],['Loading']
Performance,". ROOT: TColor Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; Static Private Member Functions |; Private Attributes |; List of all members ; TColor Class ReferenceCore ROOT classes » Base ROOT classes | Graphics » Graphics attributes. ; The color creation and management class. . Introduction; Basic colors; The color wheel; Bright and dark colors; Accessible Color Schemes; Gray scale view of of canvas with colors; Color palettes; High quality predefined palettes; Colour Vision Deficiency (CVD) friendly palettes; Non Colour Vision Deficiency (CVD) friendly palettes. Palette inversion; Color transparency. Introduction; Colors are defined by their red, green and blue components, simply called the RGB components. The colors are also known by the hue, light and saturation components also known as the HLS components. When a new color is created the components of both color systems are computed.; At initialization time, a table of colors is generated. An existing color can be retrieved by its index:; TColor *color = gROOT->GetColor(10);; gROOT#define gROOTDefinition TROOT.h:406; TColorThe color creation and management class.Definition TColor.h:21; TColor::GetColorstatic Int_t GetColor(const char *hexcolor)Static method returning color number for color specified by hex color string of form: ""#rrggbb"",...Definition TColor.cxx:1920; Then it can be manipulated. For example its RGB components can be modified:; color->SetRGB(0.1, 0.2, 0.3);; TColor::SetRGBvirtual void SetRGB(Float_t r, Float_t g, Float_t b)Initialize this color and its ""dark"" and ""bright"" associated colors.Definition TColor.cxx:1850; A new color can be created the following way:; Int_t ci = 1756; // color index; auto color = new TColor(ci, 0.1, 0.2, 0.3);; TColor::TColorTColor()Default constructor.Definition TColor.cxx:1061; int; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTColor.html:75,Load,Loading,75,doc/master/classTColor.html,https://root.cern,https://root.cern/doc/master/classTColor.html,1,['Load'],['Loading']
Performance,". ROOT: TColorGradient Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TColorGradient Class ReferenceCore ROOT classes » Base ROOT classes | Graphics » Graphics attributes. ; TColorGradient extends basic TColor. ; Actually, this is not a simple color, but linear gradient + shadow for filled area. By inheriting from TColor, gradients can be placed inside gROOT's list of colors and use it in all TAttXXX descendants without modifying any existing code.; Shadow, of course, is not a property of any color, and gradient is not, but this is the best way to add new attributes to filled area without re-writing all the graphics code. ; Definition at line 32 of file TColorGradient.h. Classes; struct  Point;  . Public Types; enum  ECoordinateMode { kPadMode; , kObjectBoundingMode; };  ; typedef std::vector< Color_t >::size_type SizeType_t;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TColorGradient ();  ;  TColorGradient (Color_t newColor, UInt_t nPoints, const Double_t *points, const Color_t *colorIndices, ECoordinateMode mode=kObjectBoundingMode);  There is no way to validate parameters here, so it's up to user to pass correct arguments. ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTColorGradient.html:83,Load,Loading,83,doc/master/classTColorGradient.html,https://root.cern,https://root.cern/doc/master/classTColorGradient.html,1,['Load'],['Loading']
Performance,". ROOT: TColorWheel Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TColorWheel Class ReferenceGraphics » 2D Graphics » Graphics pad. ; Draw the ROOT Color Wheel. ; The wheel contains the recommended 216 colors to be used in web applications. The colors in the Color Wheel are created by TColor::CreateColorWheel.; Using this color set for your text, background or graphics will give your application a consistent appearance across different platforms and browsers.; Colors are grouped by hue, the aspect most important in human perception. Touching color chips have the same hue, but with different brightness and vividness.; Colors of slightly different hues clash. If you intend to display colors of the same hue together, you should pick them from the same group.; Each color chip is identified by a mnemonic (e.g. kYellow) and a number. The keywords, kRed, kBlue, kYellow, kPink, etc are defined in the header file Rtypes.h that is included in all ROOT other header files. We strongly recommend to use these keywords in your code instead of hardcoded color numbers, e.g.: myObject.SetFillColor(kRed);; myObject.SetFillColor(kYellow-10);; myLine.SetLineColor(kMagenta+2);; kRed@ kRedDefinition Rtypes.h:66; kMagenta@ kMagentaDefinition Rtypes.h:66; kYellow@ kYellowDefinition Rtypes.h:66. Definition at line 23 of file TColorWheel.h. Public Member Functions;  TColorWheel ();  constructor ;  ;  ~TColorWheel () override;  destructor ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  always return the color wheel ;  ; void Draw (Option_t *option="""") override;  Paint the color wheel. ;  ; TCanvas * GetCanvas () const;  ; virtual Int_t GetColor (Int_t px, Int_t py) const;  Return the color number pointed by the mouse. ;  ; char * GetObjectInfo (I",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTColorWheel.html:80,Load,Loading,80,doc/master/classTColorWheel.html,https://root.cern,https://root.cern/doc/master/classTColorWheel.html,1,['Load'],['Loading']
Performance,". ROOT: TComplex Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Friends |; List of all members ; TComplex Class Reference. . Definition at line 29 of file TComplex.h. Public Types; template<class T > ; using enable_if_arithmetic = typename std::enable_if< std::is_arithmetic< T >::value, bool >::type;  . Public Member Functions;  TComplex ();  ;  TComplex (Double_t re, Double_t im=0, Bool_t polar=kFALSE);  Standard constructor. ;  ; virtual ~TComplex ();  ; Double_t Im () const;  ; virtual TClass * IsA () const;  ;  operator Double_t () const;  ;  operator Float_t () const;  ;  operator Int_t () const;  ; TComplex operator() (Double_t x, Double_t y, Bool_t polar=kFALSE);  ; TComplex operator* (const TComplex &c) const;  ; template<class T , enable_if_arithmetic< T > = true> ; TComplex operator* (T c) const;  ; TComplex operator*= (const TComplex &c);  ; TComplex operator+ ();  ; TComplex operator+ (const TComplex &c) const;  ; template<class T , enable_if_arithmetic< T > = true> ; TComplex operator+ (T c) const;  ; TComplex operator+= (const TComplex &c);  ; TComplex operator- ();  ; TComplex operator- (const TComplex &c) const;  ; template<class T , enable_if_arithmetic< T > = true> ; TComplex operator- (T c) const;  ; TComplex operator-= (const TComplex &c);  ; TComplex operator/ (const TComplex &c) const;  ; template<class T , enable_if_arithmetic< T > = true> ; TComplex operator/ (T c) const;  ; TComplex operator/= (const TComplex &c);  ; Double_t Re () const;  ; Double_t Rho () const;  ; Double_t Rho2 () const;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Double_t Theta () const;  . Static Public Member Functions; static Double_t Abs (const TComplex &c);  ; static TComplex ACos (const TComplex &c);  ; static TComplex ACosH (const T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTComplex.html:77,Load,Loading,77,doc/master/classTComplex.html,https://root.cern,https://root.cern/doc/master/classTComplex.html,1,['Load'],['Loading']
Performance,". ROOT: TCondition Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TCondition Class Reference. . Definition at line 32 of file TCondition.h. Public Member Functions;  TCondition (TMutex *m=nullptr);  Create a condition variable. ;  ; virtual ~TCondition ();  Clean up condition variable. ;  ; Int_t Broadcast ();  ; TMutex * GetMutex () const;  Get internally created mutex. ;  ; TClass * IsA () const override;  ; Int_t Signal ();  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Int_t TimedWait (ULong_t secs, ULong_t nanoSecs);  Wait to be signaled or till the timer times out. ;  ; Int_t TimedWaitRelative (ULong_t ms);  Wait to be signaled or till the timer times out. ;  ; Int_t Wait ();  Wait to be signaled. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCondition.html:79,Load,Loading,79,doc/master/classTCondition.html,https://root.cern,https://root.cern/doc/master/classTCondition.html,1,['Load'],['Loading']
Performance,". ROOT: TConditionImp Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TConditionImp Class Referenceabstract. . Definition at line 26 of file TConditionImp.h. Public Member Functions;  TConditionImp ();  ; virtual ~TConditionImp ();  ; virtual Int_t Broadcast ()=0;  ; TClass * IsA () const override;  ; virtual Int_t Signal ()=0;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual Int_t TimedWait (ULong_t secs, ULong_t nanoSecs=0)=0;  ; virtual Int_t Wait ()=0;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTConditionImp.html:82,Load,Loading,82,doc/master/classTConditionImp.html,https://root.cern,https://root.cern/doc/master/classTConditionImp.html,1,['Load'],['Loading']
Performance,". ROOT: TCondor Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; TCondor Class Reference. . Definition at line 52 of file TCondor.h. Public Types; enum  EState { kFree; , kSuspended; , kActive; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TCondor (const char *pool="""");  Create Condor interface object. ;  ;  ~TCondor () override;  Cleanup Condor interface. ;  ; TCondorSlave * Claim (const char *vmname, const char *cmd);  Claim virtual machine with name vmname This function does not figure out the image and performance index before returning the condor slave. ;  ; TList * Claim (Int_t n, const char *cmd);  Claim n virtual machines This function figures out the image and performance index before returning the list of condor slaves. ;  ; TString GetImage (const char *host) const;  Get image of the worker. ;  ; EState GetState () const;  ; TList * GetVirtualMachines () const;  Get the names of the virtual machines in the pool. ;  ; Bool_t GetVmInfo (const char *vm, TString &image, Int_t &perfidx) const;  Get info about worker status. ;  ; TClass * IsA () const override;  ; Bool_t IsValid () const;  ; void Print (Option_t *option="""") const o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCondor.html:76,Load,Loading,76,doc/master/classTCondor.html,https://root.cern,https://root.cern/doc/master/classTCondor.html,1,['Load'],['Loading']
Performance,". ROOT: TCondorSlave Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; List of all members ; TCondorSlave Class Reference. . Definition at line 34 of file TCondor.h. Public Member Functions; TClass * IsA () const override;  ; void Print (Option_t *option="""") const override;  Print worker status. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCondorSlave.html:81,Load,Loading,81,doc/master/classTCondorSlave.html,https://root.cern,https://root.cern/doc/master/classTCondorSlave.html,1,['Load'],['Loading']
Performance,". ROOT: TConfidenceLevel Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; TConfidenceLevel Class ReferenceHistogram Library. ; Class to compute 95% CL limits. ; Definition at line 20 of file TConfidenceLevel.h. Public Member Functions;  TConfidenceLevel ();  Default constructor. ;  ;  TConfidenceLevel (Int_t mc, bool onesided=kTRUE);  Constructor that fix some conventions. ;  ;  ~TConfidenceLevel () override;  The destructor. ;  ; Double_t CLb (bool use_sMC=kFALSE) const;  Get the Confidence Level for the background only. ;  ; Double_t CLs (bool use_sMC=kFALSE) const;  Get the Confidence Level defined by CLs = CLsb/CLb. ;  ; Double_t CLsb (bool use_sMC=kFALSE) const;  Get the Confidence Level for the signal plus background hypothesis. ;  ; void Draw (const Option_t *option="""") override;  Display sort of a ""canonical"" -2lnQ plot. ;  ; Double_t Get3sProbability () const;  Get 3s probability. ;  ; Double_t Get5sProbability () const;  Get 5s probability. ;  ; Double_t GetAverageCLs () const;  Get average CLs. ;  ; Double_t GetAverageCLsb () const;  Get average CLsb. ;  ; Double_t GetBtot () const;  ; Int_t GetDtot () const;  ; Double_t GetExpectedCLb_b (Int_t sigma=0) const;  Get the expected Confidence Level for the background only if there is only background. ;  ; Double_t GetExpectedCLb_sb (Int_t sigma=0) const;  Get the expected Confidence Level for the background only if there is signal and background. ;  ; Double_t GetExpectedCLs_b (Int_t sigma=0) const;  ; Double_t GetExpectedCLsb_b (Int_t sigma=0) const;  Get the expected Confidence Level for the signal plus background hypothesis if there is only background. ;  ; Double_t GetExpectedStatistic_b (Int_t sigma=0) const;  Get the expected statistic value in the background only hypothesis. ;  ; Double_t GetExpectedS",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTConfidenceLevel.html:85,Load,Loading,85,doc/master/classTConfidenceLevel.html,https://root.cern,https://root.cern/doc/master/classTConfidenceLevel.html,1,['Load'],['Loading']
Performance,". ROOT: TContextMenu Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TContextMenu Class ReferenceCore ROOT classes » Base ROOT classes. ; This class provides an interface to context sensitive popup menus. ; These menus pop up when the user hits the right mouse button, and are destroyed when the menu pops downs.; Context Menus are automatically generated by ROOT using the following convention: if the string // *MENU* is found in the comment field of a member function. This function will be added to the list of items in the menu.; The picture below shows a canvas with a pop-up menu. The picture below shows a canvas with a pop-up menu and a dialog box. Definition at line 44 of file TContextMenu.h. Public Member Functions;  TContextMenu (const char *name, const char *title=""Context sensitive popup menu"");  Create a context menu. ;  ; virtual ~TContextMenu ();  Destroy a context menu. ;  ; virtual void Action (TClassMenuItem *classmenuitem);  Action to be performed when this menu item is selected. ;  ; void Action (TMethod *method);  ; virtual void Action (TObject *object, TMethod *method);  Action to be performed when this menu item is selected. ;  ; virtual void Action (TObject *object, TToggle *toggle);  Action to be performed when this toggle menu item is selected. ;  ; void Action (TToggle *toggle);  ; virtual const char * CreateArgumentTitle (TMethodArg *argument);  Create string describing argument (for use in dialog box). ;  ; virtual const char * CreateDialogTitle (TObject *object, TFunction *method);  Create title for dialog box retrieving argument values. ;  ; virtual const char * CreatePopupTitle (TObject *object);  Create title for popup menu. ;  ; void Execute (const char *method, const char *params, Int_t *error=",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTContextMenu.html:81,Load,Loading,81,doc/master/classTContextMenu.html,https://root.cern,https://root.cern/doc/master/classTContextMenu.html,1,['Load'],['Loading']
Performance,". ROOT: TControlBar Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TControlBar Class ReferenceGraphics » 2D Graphics » Graphics pad. ; A Control Bar is a fully user configurable tool which provides fast access to frequently used operations. ; The user can choose between buttons and drawn buttons (let's say icons) and assign to them their own actions (let's say ROOT or C++ commands).; The macro below shows an example of control bar. To execute an item, click with the left mouse button. To see the HELP of a button, click on the right mouse button.; You have access to the last clicked button via the method GetClicked(). For example, bar->GetClicked()->GetName() will return the name of the last clicked button.; {; // run macro from tutorials directory of ROOT!; TControlBar bar(""vertical"");; bar.AddButton(""Help to run demos"","".x demoshelp.C"",; ""Explains how to run the demos"");; bar.AddButton(""framework"", "".x graphics/framework.C"",; ""An Example of Object Oriented User Interface"");; bar.AddButton(""hsimple"", "".x hsimple.C"",; ""An Example Creating Histograms/Ntuples on File"");; bar.AddButton(""hsum"", "".x hist/hsum.C"",; ""Filling histograms and some graphics options"");; bar.AddButton(""canvas"", "".x graphics/canvas.C"",; ""Canvas and Pad Management"");; bar.AddButton(""formula1"", "".x graphics/formula1.C"",; ""Simple Formula and Functions"");; bar.AddButton(""fillrandom"", "".x hist/fillrandom.C"",; ""Histograms with Random Numbers from a Function"");; bar.AddButton(""fit1"", "".x fit/fit1.C"",; ""A Simple Fitting Example"");; bar.AddButton(""draw2dopt"", "".x hist/draw2dopt.C"",; ""Drawing Options for 2D Histograms"");; bar.AddButton(""graph"", "".x graphs/graph.C"",; ""Examples of a simple graph"");; bar.AddButton(""tornado"", "".x graphics/tornado.C"",; ""Examples of 3-D PolyMarkers""",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTControlBar.html:80,Load,Loading,80,doc/master/classTControlBar.html,https://root.cern,https://root.cern/doc/master/classTControlBar.html,1,['Load'],['Loading']
Performance,". ROOT: TControlBarButton Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TControlBarButton Class ReferenceGraphics » 2D Graphics » Graphics pad. ; This class defines the control bar buttons. ; Created by the TControlBar. Not for general consumption. ; Definition at line 17 of file TControlBarButton.h. Public Types; enum  { kButton = 1; , kDrawnButton; , kSeparator; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TControlBarButton ();  Default control bar button ctor. ;  ;  TControlBarButton (const char *label, const char *action="""", const char *hint="""", const char *type=""button"");  Create control bar button. ;  ;  ~TControlBarButton () override;  ; virtual void Action ();  Execute control bar button command. ;  ; virtual void Create ();  ; virtual const char * GetAction () const;  ; virtual Int_t GetType () const;  ; TClass * IsA () const override;  ; virtual void SetAction (const char *action);  Set action to be executed by this button. ;  ; virtual void SetType (const char *type);  Set button type. ;  ; virtual void SetType (Int_t type);  Set button type. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTControlBarButton.html:86,Load,Loading,86,doc/master/classTControlBarButton.html,https://root.cern,https://root.cern/doc/master/classTControlBarButton.html,1,['Load'],['Loading']
Performance,". ROOT: TCrown Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TCrown Class ReferenceGraphics » 2D Graphics » Basic graphics. ; To draw a Crown. ; A crown is specified with the position of its centre, its inner/outer radius a minimum and maximum angle. The attributes of the outline line are given via TAttLine. The attributes of the fill area are given via TAttFill.; Example:; {; TCanvas *c1 = new TCanvas(""c1"",""c1"",400,400);; TCrown cr1(.5,.5,.3,.4);; cr1.SetLineStyle(2);; cr1.SetLineWidth(4);; cr1.Draw();; TCrown cr2(.5,.5,.2,.3,45,315);; cr2.SetFillColor(38);; cr2.SetFillStyle(3010);; cr2.Draw();; TCrown cr3(.5,.5,.2,.3,-45,45);; cr3.SetFillColor(50);; cr3.SetFillStyle(3025);; cr3.Draw();; TCrown cr4(.5,.5,.0,.2);; cr4.SetFillColor(4);; cr4.SetFillStyle(3008);; cr4.Draw();; return c1;; }; TCanvasThe Canvas class.Definition TCanvas.h:23; TCrownTo draw a Crown.Definition TCrown.h:19; c1return c1Definition legend1.C:41. Definition at line 19 of file TCrown.h. Public Member Functions;  TCrown ();  Crown default constructor. ;  ;  TCrown (const TCrown &crown);  Crown copy constructor. ;  ;  TCrown (Double_t x1, Double_t y1, Double_t radin, Double_t radout, Double_t phimin=0, Double_t phimax=360);  Crown normal constructor. ;  ;  ~TCrown () override;  Crown default destructor. ;  ; void Copy (TObject &crown) const override;  Copy this crown to crown. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a crown. ;  ; virtual TCrown * DrawCrown (Double_t x1, Double_t y1, Double_t radin, Double_t radout, Double_t phimin=0, Double_t phimax=360, Option_t *option="""");  Draw this crown with new coordinates. ;  ; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override;  Execute action corresponding to one event. ;  ; TClass * IsA () const override;  ; Int_t IsInside (Double_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCrown.html:75,Load,Loading,75,doc/master/classTCrown.html,https://root.cern,https://root.cern/doc/master/classTCrown.html,1,['Load'],['Loading']
Performance,". ROOT: TCurlyArc Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; TCurlyArc Class ReferenceGraphics » 2D Graphics » Basic graphics. ; Implements curly or wavy arcs used to draw Feynman diagrams. ; Amplitudes and wavelengths may be specified in the constructors, via commands or interactively from popup menus. The class make use of TCurlyLine by inheritance, ExecuteEvent methods are highly inspired from the methods used in TPolyLine and TArc. The picture below has been generated by the tutorial feynman.; ; void feynman(); {; TCanvas *c1 = new TCanvas(""c1"", ""A canvas"", 10,10, 600, 300);; c1->Range(0, 0, 140, 60);; Int_t linsav = gStyle->GetLineWidth();; gStyle->SetLineWidth(3);; TLatex t;; t.SetTextAlign(22);; t.SetTextSize(0.1);; TLine * l;; l = new TLine(10, 10, 30, 30); l->Draw();; l = new TLine(10, 50, 30, 30); l->Draw();; TCurlyArc *ginit = new TCurlyArc(30, 30, 12.5*sqrt(2), 135, 225);; ginit->SetWavy();; ginit->Draw();; t.DrawLatex(7,6,""e^{-}"");; t.DrawLatex(7,55,""e^{+}"");; t.DrawLatex(7,30,""#gamma"");; ; TCurlyLine *Gamma = new TCurlyLine(30, 30, 55, 30);; Gamma->SetWavy();; Gamma->Draw();; t.DrawLatex(42.5,37.7,""#gamma"");; ; TArc *a = new TArc(70, 30, 15);; a->Draw();; t.DrawLatex(55, 45,""#bar{q}"");; t.DrawLatex(85, 15,""q"");; TCurlyLine *gluon = new TCurlyLine(70, 45, 70, 15);; gluon->Draw();; t.DrawLatex(77.5,30,""g"");; ; TCurlyLine *z0 = new TCurlyLine(85, 30, 110, 30);; z0->SetWavy();; z0->Draw();; t.DrawLatex(100, 37.5,""Z^{0}"");; ; l = new TLine(110, 30, 130, 10); l->Draw();; l = new TLine(110, 30, 130, 50); l->Draw();; ; TCurlyArc *gluon1 = new TCurlyArc(110, 30, 12.5*sqrt(2), 315, 45);; gluon1->Draw();; ; t.DrawLatex(135,6,""#bar{q}"");; t.DrawLatex(135,55,""q"");; t.DrawLatex(135,30,""g"");; c1->Update();; gStyle->SetLineWidth(linsav);; }; a#define a(i)Defini",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCurlyArc.html:78,Load,Loading,78,doc/master/classTCurlyArc.html,https://root.cern,https://root.cern/doc/master/classTCurlyArc.html,1,['Load'],['Loading']
Performance,". ROOT: TCurlyLine Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Static Protected Attributes |; List of all members ; TCurlyLine Class ReferenceGraphics » 2D Graphics » Basic graphics. ; Implements curly or wavy polylines used to draw Feynman diagrams. ; Amplitudes and wavelengths may be specified in the constructors, via commands or interactively from popup menus. The class make use of TPolyLine by inheritance, ExecuteEvent methods are highly inspired from the methods used in TPolyLine and TArc. The picture below has been generated by the tutorial feynman.; ; void feynman(); {; TCanvas *c1 = new TCanvas(""c1"", ""A canvas"", 10,10, 600, 300);; c1->Range(0, 0, 140, 60);; Int_t linsav = gStyle->GetLineWidth();; gStyle->SetLineWidth(3);; TLatex t;; t.SetTextAlign(22);; t.SetTextSize(0.1);; TLine * l;; l = new TLine(10, 10, 30, 30); l->Draw();; l = new TLine(10, 50, 30, 30); l->Draw();; TCurlyArc *ginit = new TCurlyArc(30, 30, 12.5*sqrt(2), 135, 225);; ginit->SetWavy();; ginit->Draw();; t.DrawLatex(7,6,""e^{-}"");; t.DrawLatex(7,55,""e^{+}"");; t.DrawLatex(7,30,""#gamma"");; ; TCurlyLine *Gamma = new TCurlyLine(30, 30, 55, 30);; Gamma->SetWavy();; Gamma->Draw();; t.DrawLatex(42.5,37.7,""#gamma"");; ; TArc *a = new TArc(70, 30, 15);; a->Draw();; t.DrawLatex(55, 45,""#bar{q}"");; t.DrawLatex(85, 15,""q"");; TCurlyLine *gluon = new TCurlyLine(70, 45, 70, 15);; gluon->Draw();; t.DrawLatex(77.5,30,""g"");; ; TCurlyLine *z0 = new TCurlyLine(85, 30, 110, 30);; z0->SetWavy();; z0->Draw();; t.DrawLatex(100, 37.5,""Z^{0}"");; ; l = new TLine(110, 30, 130, 10); l->Draw();; l = new TLine(110, 30, 130, 50); l->Draw();; ; TCurlyArc *gluon1 = new TCurlyArc(110, 30, 12.5*sqrt(2), 315, 45);; gluon1->Draw();; ; t.DrawLatex(135,6,""#bar{q}"");; t.DrawLatex(135,55,""q"");; t.DrawLatex(135,30,""g"");; c1->Update();; gStyle->SetLineWidth(linsav);; }; a#define ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCurlyLine.html:79,Load,Loading,79,doc/master/classTCurlyLine.html,https://root.cern,https://root.cern/doc/master/classTCurlyLine.html,1,['Load'],['Loading']
Performance,". ROOT: TCut Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Friends |; List of all members ; TCut Class ReferenceTree Library. ; A specialized string object used for TTree selections. ; A TCut object has a name and a title. It does not add any data members compared to a TNamed. It only add a set of operators to facilitate logical string concatenation. For example, assume cut1 = ""x<1"" and cut2 = ""y>2""; then cut1 && cut2 will be the string ""(x<1)&&(y>2)""; Operators =, +=, +, *, !, &&, || overloaded.; Examples of use: Root > TCut c1 = ""x<1""; Root > TCut c2 = ""y<0""; Root > TCut c3 = c1&&c2; Root > ntuple.Draw(""x"", c1); Root > ntuple.Draw(""x"", c1||""x>0""); Root > ntuple.Draw(""x"", c1&&c2); Root > ntuple.Draw(""x"", ""(x+y)""*(c1&&c2)); TCutA specialized string object used for TTree selections.Definition TCut.h:25; c1return c1Definition legend1.C:41; c2return c2Definition legend2.C:14; c3return c3Definition legend3.C:15. Definition at line 25 of file TCut.h. Public Member Functions;  TCut ();  Constructor. ;  ;  TCut (const char *name, const char *title);  Constructor. ;  ;  TCut (const char *title);  Constructor. ;  ;  TCut (const TCut &cut);  Copy Constructor. ;  ;  ~TCut () override;  Typical destructor. ;  ; TClass * IsA () const override;  ;  operator const char * () const;  ; bool operator!= (const char *rhs) const;  Comparison. ;  ; bool operator!= (const TCut &rhs) const;  Comparison. ;  ; TCut & operator*= (const char *rhs);  Multiplication. ;  ; TCut & operator*= (const TCut &rhs);  Multiplication. ;  ; TCut & operator+= (const char *rhs);  Addition. ;  ; TCut & operator+= (const TCut &rhs);  Addition. ;  ; TCut & operator= (const char *rhs);  Assignment. ;  ; TCut & operator= (const TCut &rhs);  Assignment. ;  ; bool operator== (const char *rhs) const;  Comparison. ;  ; bool operator== (const TCut &rhs) cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCut.html:73,Load,Loading,73,doc/master/classTCut.html,https://root.cern,https://root.cern/doc/master/classTCut.html,1,['Load'],['Loading']
Performance,". ROOT: TCutG Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TCutG Class ReferenceGraphics » 2D Graphics » Basic graphics. ; Graphical cut class. ; A TCutG object is a closed polygon defining a closed region in a x,y plot. It can be created via the graphics editor option ""CutG"" or directly by invoking its constructor. The first and last points should be the same.; To create a TCutG via the graphics editor, use the left button to select the points building the contour of the cut. Click on the right button to close the TCutG. When it is created via the graphics editor, the TCutG object is named ""CUTG"". It is recommended to immediately change the name by using the context menu item ""SetName"". When the graphics editor is used, the names of the variables X,Y are automatically taken from the current pad title.; Example:; Assume a TTree object T and: Root > T.Draw(""abs(fMomemtum):fEtot""); the TCutG members fVarX, fVary will be set to: fVarx = fEtot; fVary = abs(fMomemtum); A graphical cut can be used in a TTree selection expression: Root > T.Draw(""fEtot"",""cutg1""); where ""cutg1"" is the name of an existing graphical cut.; Note that, as shown in the example above, a graphical cut may be used in a selection expression when drawing TTrees expressions of 1-d, 2-d or 3-dimensions. The expressions used in TTree::Draw can reference the variables in the fVarX, fVarY of the graphical cut plus other variables.; When the TCutG object is created by TTree::Draw, it is added to the list of special objects in the main TROOT object pointed by gROOT. To retrieve a pointer to this object from the code or command line, do: TCutG *mycutg;; mycutg = (TCutG*)gROOT->GetListOfSpecials()->FindObject(""CUTG""); mycutg->SetName(""mycutg"");; gROOT#define gROOTDefinition TROOT.h:406; TCutGGraphical cut class.Definition TCutG.h:20",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCutG.html:74,Load,Loading,74,doc/master/classTCutG.html,https://root.cern,https://root.cern/doc/master/classTCutG.html,1,['Load'],['Loading']
Performance,". ROOT: TDCacheFile Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TDCacheFile Class ReferenceInput/Output Library. ; A TDCacheFile is like a normal TFile except that it may read and write its data via a dCache server (for more on the dCache daemon see http://www-dcache.desy.de/. ; Given a path which doesn't belong to the dCache managed filesystem, it falls back to the ordinary TFile behaviour. ; Definition at line 25 of file TDCacheFile.h. Public Types; enum  EOnErrorAction { kOnErrorRetry = 1; , kOnErrorFail = 0; , kOnErrorDefault = -1; };  Note: This must be kept in sync with values #defined in dcap.h. More...;  ;  Public Types inherited from TFile; enum  { kStartBigFile = 2000000000; };  ; enum  EAsyncOpenStatus { kAOSNotAsync = -1; , kAOSFailure = 0; , kAOSInProgress = 1; , kAOSSuccess = 2; };  Asynchronous open request status. More...;  ; enum  ECacheAction { kDisconnect = 0; , kDoNotDisconnect = 1; };  TTreeCache flushing semantics. More...;  ; enum  EFileType { ;   kDefault = 0; , kLocal = 1; , kNet = 2; , kWeb = 3; , ;   kFile = 4; , kMerge = 5. };  File type. More...;  ; enum  EOpenTimeOut { kInstantTimeout = 0; , kEternalTimeout = 999999999; };  Open timeout constants. More...;  ; enum  ERelativeTo { kBeg = 0; , kCur = 1; , kEnd = 2; };  ; enum  EStatusBits { ;   k630forwardCompatibility = (1ULL << ( 2 )); , kRecovered = (1ULL << ( 10 )); , kHasReferences = (1ULL << ( 11 )); , kDevNull = (1ULL << ( 12 )); , ;   kWriteError = (1ULL << ( 14 )); , kBinaryFile = (1ULL << ( 15 )); , kRedirected = (1ULL << ( 16 )); , kReproducible = (1ULL << ( 17 )). };  TFile status bits. BIT(13) is taken up by TObject. More...;  ;  Public Types inherited from TDirectoryFile; enum  EStatusBits { kCloseDirectory = (1ULL << ( 7 )); };  ;  Public Types inherited",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDCacheFile.html:80,Load,Loading,80,doc/master/classTDCacheFile.html,https://root.cern,https://root.cern/doc/master/classTDCacheFile.html,1,['Load'],['Loading']
Performance,". ROOT: TDCacheSystem Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TDCacheSystem Class Reference. . Definition at line 79 of file TDCacheFile.h. Public Member Functions;  TDCacheSystem ();  Create helper class that allows directory access via dCache. ;  ;  ~TDCacheSystem () override;  ; Bool_t AccessPathName (const char *path, EAccessMode mode) override;  Returns FALSE if one can access a file using the specified access mode. ;  ; void FreeDirectory (void *dirp) override;  Close a directory. ;  ; const char * GetDirEntry (void *dirp) override;  Get a directory entry. ;  ; Int_t GetPathInfo (const char *path, FileStat_t &buf) override;  Get info about a file. ;  ; TClass * IsA () const override;  ; Int_t MakeDirectory (const char *name) override;  Create a directory. ;  ; void * OpenDirectory (const char *name) override;  Open a directory. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TSystem;  TSystem (const char *name=""Generic"", const char *title=""Generic System"");  Create a new OS interface. ;  ; virtual ~TSystem ();  Delete the OS interface. ;  ; virtual void Abort (int code=0);  Abort the application. ;  ; virtual int AcceptConnection (int sock);  Accept a connection. ;  ; virtual void AddDynamicPath (const char *pathname);  Add a new directory to the dynamic path. ;  ; virtual void AddFileHandler (TFileHandler *fh);  Add a file handler to the list of system file handlers. ;  ; virtual void AddIncludePath (const char *includePath);  Add a directory to the already set include path. ;  ; virtual void AddLinkedLibs (const char *linkedLib);  Add linkedLib to already set linked libs. ;  ; virtual void AddSignalHandler (TSign",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDCacheSystem.html:82,Load,Loading,82,doc/master/classTDCacheSystem.html,https://root.cern,https://root.cern/doc/master/classTDCacheSystem.html,1,['Load'],['Loading']
Performance,". ROOT: TDNDData Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; Private Member Functions |; List of all members ; TDNDData Class ReferenceGUI » Low level GUI widgets. ; Drag and drop data container. ; Definition at line 64 of file TGDNDManager.h. Public Member Functions;  TDNDData (Atom_t dt=kNone, void *d=nullptr, Int_t len=0, Atom_t act=kNone);  ;  ~TDNDData () override;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDNDData.html:77,Load,Loading,77,doc/master/classTDNDData.html,https://root.cern,https://root.cern/doc/master/classTDNDData.html,1,['Load'],['Loading']
Performance,". ROOT: TDOMParser Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TDOMParser Class Reference. . Definition at line 20 of file TDOMParser.h. Public Member Functions;  TDOMParser ();  TDOMParser constructor. ;  ;  ~TDOMParser () override;  TDOMParser destructor, it calls ReleaseUnderlying(). ;  ; virtual TXMLDocument * GetXMLDocument () const;  Returns the TXMLDocument. ;  ; TClass * IsA () const override;  ; Int_t ParseBuffer (const char *buffer, Int_t len) override;  It parses a buffer, much like ParseFile(). ;  ; Int_t ParseFile (const char *filename) override;  Parse the XML file where filename is the XML file name. ;  ; void ReleaseUnderlying () override;  Release any existing document. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TXMLParser;  TXMLParser ();  Initializes parser variables. ;  ;  ~TXMLParser () override;  Cleanup. ;  ; Int_t GetParseCode () const;  ; const char * GetParseCodeMessage (Int_t parseCode) const;  Returns the parse code message. ;  ; Bool_t GetReplaceEntities () const;  ; Bool_t GetStopOnError () const;  ; Bool_t GetValidate () const;  ; const char * GetValidateError () const;  ; const char * GetValidateWarning () const;  ; TClass * IsA () const override;  ; void SetReplaceEntities (Bool_t val=kTRUE);  The parser will replace/expand entities. ;  ; void SetStopOnError (Bool_t stop=kTRUE);  Set parser stops in case of error: ;  ; void SetValidate (Bool_t val=kTRUE);  The parser will validate the xml file if val = true. ;  ; virtual void StopParser ();  Stops parsing. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNV",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDOMParser.html:79,Load,Loading,79,doc/master/classTDOMParser.html,https://root.cern,https://root.cern/doc/master/classTDOMParser.html,1,['Load'],['Loading']
Performance,". ROOT: TDSet Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; Private Attributes |; List of all members ; TDSet Class ReferencePROOF » PROOF kernel Libraries. ; This class implements a data set to be used for PROOF processing. ; The TDSet defines the class of which objects will be processed, the directory in the file where the objects of that type can be found and the list of files to be processed. The files can be specified as logical file names (LFN's) or as physical file names (PFN's). In case of LFN's the resolution to PFN's will be done according to the currently active GRID interface. Examples: TDSet treeset(""TTree"", ""AOD""); treeset.Add(""lfn:/alien.cern.ch/alice/prod2002/file1""); ... treeset.AddFriend(friendset);; or; TDSet objset(""MyEvent"", ""*"", ""/events""); objset.Add(""root://cms.cern.ch/user/prod2002/hprod_1.root""); ... objset.Add(set2003);; Validity of file names will only be checked at processing time (typically on the PROOF master server), not at creation time. ; Definition at line 153 of file TDSet.h. Public Types; enum  EStatusBits { ;   kWriteV3 = (1ULL << ( 16 )); , kEmpty = (1ULL << ( 17 )); , kValidityChecked = (1ULL << ( 18 )); , kSomeInvalid = (1ULL << ( 19 )); , ;   kMultiDSet = (1ULL << ( 20 )); , kIsLocal = (1ULL << ( 21 )). };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDSet.html:74,Load,Loading,74,doc/master/classTDSet.html,https://root.cern,https://root.cern/doc/master/classTDSet.html,1,['Load'],['Loading']
Performance,". ROOT: TDSetElement Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TDSetElement Class ReferencePROOF » PROOF kernel Libraries. ; Manages an element of a TDSet. ; See TDSet. ; Definition at line 66 of file TDSet.h. Public Types; enum  EStatusBits { ;   kHasBeenLookedUp = (1ULL << ( 15 )); , kWriteV3 = (1ULL << ( 16 )); , kEmpty = (1ULL << ( 17 )); , kCorrupted = (1ULL << ( 18 )); , ;   kNewRun = (1ULL << ( 19 )); , kNewPacket = (1ULL << ( 20 )). };  ; typedef std::list< std::pair< TDSetElement *, TString > > FriendsList_t;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TDSetElement ();  Default constructor. ;  ;  TDSetElement (const char *file, const char *objname=0, const char *dir=0, Long64_t first=0, Long64_t num=-1, const char *msd=0, const char *dataset=0);  Create a TDSet element. ;  ;  TDSetElement (const TDSetElement &elem);  copy constructor ;  ;  ~TDSetElement () override;  Clean up the element. ;  ; void AddAssocObj (TObject *assocobj);  Add an associated object to the list. ;  ; virtual void AddFriend (TDSetElement *friendElement, const char *alias);  Add friend TDSetElement to this set. The friend element will be copied to this",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDSetElement.html:81,Load,Loading,81,doc/master/classTDSetElement.html,https://root.cern,https://root.cern/doc/master/classTDSetElement.html,1,['Load'],['Loading']
Performance,". ROOT: TDSetProxy Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TDSetProxy Class Reference. . Definition at line 29 of file TDSetProxy.h. Public Member Functions;  TDSetProxy ();  Constructor. ;  ;  TDSetProxy (const char *type, const char *objname=""*"", const char *dir=""/"");  Constructor. ;  ; TClass * IsA () const override;  ; TDSetElement * Next (Long64_t totalEntries=-1) override;  Get the next packet. ;  ; void Reset () override;  Reset this instance. ;  ; void SetProofServ (TProofServ *serv);  Set the reference TProofServ instance. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TDSet. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TDSet;  TDSet ();  iterator on fSrvMaps ;  ;  TDSet (const char *name, const char *objname=""*"", const char *dir=""/"", const char *type=0);  Create a named TDSet object. ;  ;  TDSet (const TChain &chain, Bool_t withfriends=kTRUE);  Create a named TDSet object from existing TChain 'chain'. ;  ;  ~TDSet () override;  Cleanup. ;  ; virtual Bool_t Add (const char *file, const char *objname=0, const char *dir=0, Long64_t first=0, Long64_t num=-1, const char *msd=0);  Add file to list of files to be analyzed. ;  ; virtual Bool_t Add (TCollection *fileinfo, const char *meta=0, Bool_t availableOnly=kFALSE, TCollection *badlist=0);  Add files passed as list of TFileInfo, TUrl or TObjString objects . ;  ; virtual Bool_t Add (TDSet *set);  Add specified data set to the this set. ;  ; virtual Bool_t Add (TFileInfo *fileinfo, const char *meta=0);  Add file described by 'fi' to list of files to be analyzed. ;  ; virtual void AddFriend (TDSet *friendset, const char *alias);  Add friend dataset to this set. ;  ; void AddInput (TObject *obj);  Add objects that might be needed during the process",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDSetProxy.html:79,Load,Loading,79,doc/master/classTDSetProxy.html,https://root.cern,https://root.cern/doc/master/classTDSetProxy.html,1,['Load'],['Loading']
Performance,". ROOT: TDataMember Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Types |; Private Member Functions |; Private Attributes |; List of all members ; TDataMember Class Reference. ; All ROOT classes may have RTTI (run time type identification) support added. ; The data is stored in so called DICTIONARY (look at TDictionary). Information about a class is stored in TClass. This information may be obtained via the cling api - see class TCling. TClass has a list of TDataMember objects providing information about all data members of described class. TDataMember provides information about name of data member, its type, and comment field string. It also tries to find the TMethodCall objects responsible for getting/setting a value of it, and gives you pointers to these methods. This gives you a unique possibility to access protected and private (!) data members if only methods for doing that are defined.; These methods could either be specified in a comment field, or found out automatically by ROOT: here's an example: suppose you have a class definition: class MyClass{; private:; Float_t fX1;; ...; public:; void SetX1(Float_t x) {fX1 = x;};; Float_t GetX1() {return fX1;};; ...; }; Float_tfloat Float_tDefinition RtypesCore.h:57; xDouble_t x[n]Definition legend1.C:17; Look at the data member name and method names: a data member name has a prefix letter (f) and has a base name X1 . The methods for getting and setting this value have names which consist of string Get/Set and the same base name. This convention of naming data fields and methods which access them allows TDataMember find this methods by itself completely automatically. To make this description complete, one should know, that names that are automatically recognized may be also: for data fields: either fXXX or fIsXXX; and for getter function GetXXX()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDataMember.html:80,Load,Loading,80,doc/master/classTDataMember.html,https://root.cern,https://root.cern/doc/master/classTDataMember.html,1,['Load'],['Loading']
Performance,". ROOT: TDataSetManager Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; List of all members ; TDataSetManager Class Reference. . Definition at line 38 of file TDataSetManager.h. Public Types; enum  EDataSetStatusBits { ;   kCheckQuota = (1ULL << ( 15 )); , kAllowRegister = (1ULL << ( 16 )); , kAllowVerify = (1ULL << ( 17 )); , kTrustInfo = (1ULL << ( 18 )); , ;   kIsSandbox = (1ULL << ( 19 )); , kUseCache = (1ULL << ( 20 )); , kDoNotUseCache = (1ULL << ( 21 )). };  ; enum  EDataSetWorkOpts { ;   kDebug = 0x1; , kShowDefault = 0x2; , kPrint = 0x4; , kExport = 0x8; , ;   kQuotaUpdate = 0x10; , kSetDefaultTree = 0x20; , kForceScan = 0x40; , kNoHeaderPrint = 0x80; , ;   kReopen = 0x100; , kTouch = 0x200; , kMaxFiles = 0x400; , kReadShort = 0x800; , ;   kFileMustExist = 0x1000; , kNoAction = 0x2000; , kLocateOnly = 0x4000; , kStageOnly = 0x8000; , ;   kNoCacheUpdate = 0x10000; , kRefreshLs = 0x20000; , kList = 0x40000; , kAllFiles = 0x80000; , ;   kStagedFiles = 0x100000; , kNoStagedCheck = 0x200000. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TDataSetManager (con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDataSetManager.html:84,Load,Loading,84,doc/master/classTDataSetManager.html,https://root.cern,https://root.cern/doc/master/classTDataSetManager.html,1,['Load'],['Loading']
Performance,". ROOT: TDataSetManagerFile Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TDataSetManagerFile Class Reference. . Definition at line 30 of file TDataSetManagerFile.h. Public Member Functions;  TDataSetManagerFile ();  ;  TDataSetManagerFile (const char *group, const char *user, const char *ins);  Main constructor. ;  ;  TDataSetManagerFile (const char *ins);  Main constructor. ;  ;  ~TDataSetManagerFile () override;  ; Int_t ClearCache (const char *uri=0) override;  Clear cached information matching uri. ;  ; Bool_t ExistsDataSet (const char *uri) override;  Checks if the indicated dataset exits. ;  ; TFileCollection * GetDataSet (const char *group, const char *user, const char *dsName, UInt_t option=0, TMD5 **checksum=0);  Returns the dataset <dsName> of user <user> in group <group>. ;  ; TFileCollection * GetDataSet (const char *uri, const char *srv=0) override;  Utility function used in various methods for user dataset upload. ;  ; TMap * GetDataSets (const char *group, const char *user, const char *dsName=0, UInt_t option=0);  General purpose call to go through the existing datasets. ;  ; TMap * GetDataSets (const char *uri, UInt_t option=TDataSetManager::kExport) override;  Returns all datasets for the <group> and <user> specified by <uri>. ;  ; Long_t GetModTime (const char *uri);  Gets last dataset modification time. ;  ; const char * GetMSSUrl () const;  ; const char * GetStageOpts () const;  ; TClass * IsA () const override;  ; Int_t NotifyUpdate (const char *group, const char *user, const char *dspath, Long_t mtime, const char *checksum=0) override;  Save into the <datasetdir>/kDataSet_DataSetList file the name of the updated or created or modified dataset. ;  ; void ParseInitOpts (const char *opts) override;  Parse the inpu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDataSetManagerFile.html:88,Load,Loading,88,doc/master/classTDataSetManagerFile.html,https://root.cern,https://root.cern/doc/master/classTDataSetManagerFile.html,2,"['Load', 'cache']","['Loading', 'cached']"
Performance,". ROOT: TDataType Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; TDataType Class Reference. ; Basic data type descriptor (datatype information is obtained from CINT). ; This class describes the attributes of type definitions (typedef's). The TROOT class contains a list of all currently defined types (accessible via TROOT::GetListOfTypes()). ; Definition at line 44 of file TDataType.h. Public Member Functions;  TDataType (const char *typenam);  Constructor for basic data types, like ""char"", ""unsigned char"", etc. ;  ;  TDataType (TypedefInfo_t *info=nullptr);  Default TDataType ctor. ;  ; virtual ~TDataType ();  TDataType dtor deletes adopted CINT TypedefInfo object. ;  ; const char * AsString (void *buf) const;  Return string containing value in buffer formatted according to the basic data type. ;  ; const char * GetFullTypeName () const;  Get full type description of typedef, e,g.: ""class TDirectory*"". ;  ; Int_t GetType () const;  ; TString GetTypeName ();  Get basic type of typedef, e,g.: ""class TDirectory*"" -> ""TDirectory"". ;  ; TClass * IsA () const override;  ; Long_t Property () const override;  Get property description word. For meaning of bits see EProperty. ;  ; Int_t Size () const;  Get size of basic typedef'ed type. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TDictionary;  TDictionary ();  ;  TDictionary (const char *name);  ;  TDictionary (const TDictionary &dict);  ; virtual ~TDictionary ();  ; void CreateAttributeMap ();  ; TDictAttributeMap * GetAttributeMap () const;  ; TClass * IsA () const override;  ; TDictionary & operator= (const TDictionary &ot",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDataType.html:78,Load,Loading,78,doc/master/classTDataType.html,https://root.cern,https://root.cern/doc/master/classTDataType.html,1,['Load'],['Loading']
Performance,". ROOT: TDatabasePDG Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TDatabasePDG Class ReferenceMonte Carlo » EG. ; Particle database manager class. ; This manager creates a list of particles which by default is initialised from with the constants used by PYTHIA6 (plus some other particles added). See definition and the format of the default particle list in $ROOTSYS/etc/pdg_table.txt; There are 2 ways of redefining the name of the file containing the particle properties. One can define the name in .rootrc file:. Root.DatabasePDG: /home/sftnight/my_pdg_table.txt. One can use TDatabasePDG::ReadPDGTable method explicitly:; TDatabasePDG *pdg = new TDatabasePDG();; pdg->ReadPDGtable(filename). See TParticlePDG for the description of a static particle properties. See TParticle for the description of a dynamic particle particle.; The current default pdg_table file displays lifetime 0 for some unstable particles. ; Definition at line 21 of file TDatabasePDG.h. Public Member Functions;  TDatabasePDG ();  Create PDG database. ;  ;  ~TDatabasePDG () override;  Cleanup the PDG database. ;  ; virtual TParticlePDG * AddAntiParticle (const char *Name, Int_t PdgCode);  assuming particle has already been defined ;  ; virtual TParticlePDG * AddParticle (const char *Name, const char *Title, Double_t Mass, Bool_t Stable, Double_t DecayWidth, Double_t Charge, const char *ParticleClass, Int_t PdgCode, Int_t Anti=-1, Int_t TrackingCode=0);  Particle definition normal constructor. ;  ; void Browse (TBrowser *b) override;  browse data base ;  ; virtual Int_t ConvertGeant3ToPdg (Int_t Geant3Number) const;  Converts Geant3 particle codes to PDG convention. ;  ; virtual Int_t ConvertIsajetToPdg (Int_t isaNumber) const;  Converts the ISAJET Particle number into the PDG MC number. ;  ; vi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDatabasePDG.html:81,Load,Loading,81,doc/master/classTDatabasePDG.html,https://root.cern,https://root.cern/doc/master/classTDatabasePDG.html,1,['Load'],['Loading']
Performance,". ROOT: TDatime Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Friends |; List of all members ; TDatime Class ReferenceCore ROOT classes » Base ROOT classes. ; This class stores the date and time with a precision of one second in an unsigned 32 bit word (950130 124559). ; The date is stored with the origin being the 1st January 1995.; This class has no support for time zones. The time is assumed to be in the local time of the machine where the object was created. As a result, TDatime objects are not portable between machines operating in different time zones and unsuitable for storing the date/time of data taking events and the like. If absolute time is required, use TTimeStamp. ; Definition at line 37 of file TDatime.h. Public Member Functions;  TDatime ();  Create a TDatime and set it to the current time. ;  ;  TDatime (const char *sqlDateTime);  Expects as input a string in SQL date/time compatible format, like: yyyy-mm-dd hh:mm:ss. ;  ;  TDatime (const TDatime &d);  ;  TDatime (Int_t date, Int_t time);  Create a TDatime and set it to the specified date and time. ;  ;  TDatime (Int_t year, Int_t month, Int_t day, Int_t hour, Int_t min, Int_t sec);  Create a TDatime and set it to the specified year, month, day, time, hour, minute and second. ;  ;  TDatime (UInt_t tloc, Bool_t dosDate=kFALSE);  ; virtual ~TDatime ();  ; const char * AsSQLString () const;  Return the date & time in SQL compatible string format, like: 1997-01-15 20:16:28. ;  ; const char * AsString () const;  Return the date & time as a string (ctime() format). ;  ; const char * AsString (char *out) const;  Return the date & time as a string (ctime() format). ;  ; UInt_t Convert (Bool_t toGMT=kFALSE) const;  Convert fDatime from TDatime format to the standard time_t format. ;  ; void Copy (TDatime &datime) const;  Copy this to datime. ;  ; void ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDatime.html:76,Load,Loading,76,doc/master/classTDatime.html,https://root.cern,https://root.cern/doc/master/classTDatime.html,1,['Load'],['Loading']
Performance,". ROOT: TDavixFile Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TDavixFile Class Reference. . Definition at line 70 of file TDavixFile.h. Public Member Functions;  TDavixFile (const char *url, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault);  Open function for TDavixFile. ;  ;  ~TDavixFile ();  ; std::string DiscoverToken ();  ; void enableGridMode ();  Enable the grid mode The grid Mode configure automatically all grid-CA path, VOMS authentication and grid related extension for a grid analysis usage. ;  ; virtual TString GetNewUrl ();  ; virtual Long64_t GetSize () const;  Returns the current file size. ;  ; virtual TClass * IsA () const;  ; virtual Bool_t ReadBuffer (char *buf, Int_t len);  Read specified byte range from remote file via HTTP. ;  ; virtual Bool_t ReadBuffer (char *buf, Long64_t pos, Int_t len);  Read a buffer from the file at the offset 'pos' in the file. ;  ; virtual Bool_t ReadBufferAsync (Long64_t offs, Int_t len);  ; virtual Bool_t ReadBuffers (char *buf, Long64_t *pos, Int_t *len, Int_t nbuf);  Read the nbuf blocks described in arrays pos and len. ;  ; virtual void Seek (Long64_t offset, ERelativeTo pos=kBeg);  Set position from where to start reading. ;  ; void setCACheck (Bool_t check);  Enable or disable certificate authority check. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual Bool_t WriteBuffer (const char *buffer, Int_t bufferLength);  Write a buffer to the file. ;  ;  Public Member Functions inherited from TFile;  TFile ();  File default Constructor. ;  ;  TFile (const char *fname, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompression",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDavixFile.html:79,Load,Loading,79,doc/master/classTDavixFile.html,https://root.cern,https://root.cern/doc/master/classTDavixFile.html,1,['Load'],['Loading']
Performance,". ROOT: TDavixSystem Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TDavixSystem Class Reference. . Definition at line 36 of file TDavixSystem.h. Public Member Functions;  TDavixSystem ();  ;  TDavixSystem (const char *url);  ; virtual ~TDavixSystem ();  ; virtual Bool_t ConsistentWith (const char *path, void *dirptr);  Check consistency of this helper with the one required by 'path' or 'dirptr'. ;  ; virtual void FreeDirectory (void *dirp);  Free a directory. ;  ; virtual const char * GetDirEntry (void *dirp);  Get a directory entry. Returns 0 if no more entries. ;  ; virtual Int_t GetPathInfo (const char *path, FileStat_t &buf);  Get info about a file. ;  ; virtual TClass * IsA () const;  ; virtual Bool_t IsPathLocal (const char *path);  Returns TRUE if the url in 'path' points to the local file system. ;  ; virtual Int_t Locate (const char *path, TString &endurl);  ; virtual Int_t MakeDirectory (const char *dir);  Make a directory. ;  ; virtual void * OpenDirectory (const char *dir);  Open a directory. Returns 0 if directory does not exist. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual int Unlink (const char *path);  Unlink, i.e. ;  ;  Public Member Functions inherited from TSystem;  TSystem (const char *name=""Generic"", const char *title=""Generic System"");  Create a new OS interface. ;  ; virtual ~TSystem ();  Delete the OS interface. ;  ; virtual void Abort (int code=0);  Abort the application. ;  ; virtual int AcceptConnection (int sock);  Accept a connection. ;  ; virtual Bool_t AccessPathName (const char *path, EAccessMode mode=kFileExists);  Returns FALSE if one can access a file using the specified access mode. ;  ; virtual void AddDynamicPath (const char *pathname);  Add a ne",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDavixSystem.html:81,Load,Loading,81,doc/master/classTDavixSystem.html,https://root.cern,https://root.cern/doc/master/classTDavixSystem.html,1,['Load'],['Loading']
Performance,". ROOT: TDecayChannel Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TDecayChannel Class ReferenceMonte Carlo » EG. ; Description of the decay channel. ; Feb 16 2001 P.Murat ; Definition at line 24 of file TDecayChannel.h. Public Member Functions;  TDecayChannel ();  default constructor ;  ;  TDecayChannel (Int_t Number, Int_t MatrixElementCode, Double_t BranchingRatio, Int_t NDaughters, Int_t *DaughterPdgCode);  constructor ;  ;  ~TDecayChannel () override;  destructor ;  ; Double_t BranchingRatio ();  ; Int_t DaughterPdgCode (Int_t i);  ; TClass * IsA () const override;  ; Int_t MatrixElementCode ();  ; Int_t NDaughters ();  ; Int_t Number ();  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDecayChannel.html:82,Load,Loading,82,doc/master/classTDecayChannel.html,https://root.cern,https://root.cern/doc/master/classTDecayChannel.html,1,['Load'],['Loading']
Performance,". ROOT: TDecompBK Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TDecompBK Class ReferenceMath » Matrix Linear Algebra. ; The Bunch-Kaufman diagonal pivoting method decomposes a real symmetric matrix A using. ; A = U*D*U^T; where U is a product of permutation and unit upper triangular matrices, U^T is the transpose of U, and D is symmetric and block diagonal with 1-by-1 and 2-by-2 diagonal blocks.; U = P(n-1)*U(n-1)* ... P(k)U(k) ..., i.e., U is a product of terms P(k)*U(k), where k decreases from n-1 to 0 in steps of 1 or 2, and D is a block diagonal matrix with 1-by-1 and 2-by-2 diagonal blocks D(k). P(k) is a permutation matrix as defined by IPIV(k), and U(k) is a unit upper triangular matrix, such that if the diagonal block D(k) is of order s (s = 1 or 2), then; ( I v 0 ) k-s; U(k) = ( 0 I 0 ) s; ( 0 0 I ) n-k; k-s s n-k; nconst Int_t nDefinition legend1.C:16; I#define I(x, y, z); v@ vDefinition rootcling_impl.cxx:3699; If s = 1, D(k) overwrites A(k,k), and v overwrites A(0:k-1,k). If s = 2, the upper triangle of D(k) overwrites A(k-1,k-1), A(k-1,k), and A(k,k), and v overwrites A(0:k-2,k-1:k).; fU contains on entry the symmetric matrix A of which only the upper triangular part is referenced . On exit fU contains the block diagonal matrix D and the multipliers used to obtain the factor U, see above .; fIpiv if dimension n contains details of the interchanges and the the block structure of D . If (fIPiv(k) > 0, then rows and columns k and fIPiv(k) were interchanged and D(k,k) is a 1-by-1 diagonal block. If IPiv(k) = fIPiv(k-1) < 0, rows and columns k-1 and -IPiv(k) were interchanged and D(k-1:k,k-1:k) is a 2-by-2 diagonal block. ; Definition at line 26 of file TDecompBK.h. Public Member Functions;  TDecompBK ();  Default constructor. ;  ;  TDecompBK (const ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDecompBK.html:78,Load,Loading,78,doc/master/classTDecompBK.html,https://root.cern,https://root.cern/doc/master/classTDecompBK.html,1,['Load'],['Loading']
Performance,". ROOT: TDecompBase Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; List of all members ; TDecompBase Class ReferenceabstractMath » Matrix Linear Algebra. ; Decomposition Base class. ; This class forms the base for all the decompositions methods in the linear algebra package . It or its derived classes have installed the methods to solve equations,invert matrices and calculate determinants while monitoring the accuracy.; Each derived class has always the following methods available:; Condition() :; In an iterative scheme the condition number for matrix inversion is calculated . This number is of interest for estimating the accuracy of x in the equation Ax=b For example: A is a (10x10) Hilbert matrix which looks deceivingly innocent and simple, A(i,j) = 1/(i+j+1) b(i) = Sum_j A(i,j), so a sum of a row in A; the solution is x(i) = 1. i=0,.,9; However, TMatrixD m....; TVectorD b.....; TDecompLU lu(m); lu.SetTol(1.0e-12); lu.Solve(b); b.Print(); b#define b(i)Definition RSha256.hxx:100; TMatrixT< Double_t >; TVectorT< Double_t >; mTMarker mDefinition textangle.C:8; gives,; {1.000,1.000,1.000,1.000,0.998,1.000,0.993,1.001,0.996,1.000}; Looking at the condition number, this is in line with expected the accuracy . The condition number is 3.957e+12 . As a simple rule of thumb, a condition number of 1.0e+n means that you lose up to n digits of accuracy in a solution . Since doubles are stored with 15 digits, we can expect the accuracy to be as small as 3 digits .; Det(Double_t &d1,Double_t &d2); The determinant is d1*TMath::Power(2.,d2) Expressing the determinant this way makes under/over-flow very unlikely .; Decompose(); Here the actually decomposition is performed . One can change the matrix A after the decomposition constructor has b",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDecompBase.html:80,Load,Loading,80,doc/master/classTDecompBase.html,https://root.cern,https://root.cern/doc/master/classTDecompBase.html,1,['Load'],['Loading']
Performance,". ROOT: TDecompChol Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TDecompChol Class ReferenceMath » Matrix Linear Algebra. ; Cholesky Decomposition class. ; Decompose a symmetric, positive definite matrix A = U^T * U; where U is a upper triangular matrix; The decomposition fails if a diagonal element of fU is <= 0, the matrix is not positive negative . The matrix fU is made invalid .; fU has the same index range as A . ; Definition at line 24 of file TDecompChol.h. Public Member Functions;  TDecompChol ();  ;  TDecompChol (const TDecompChol &another);  Copy constructor. ;  ;  TDecompChol (const TMatrixD &a, Double_t tol=0.0);  Constructor for general matrix A . Matrix should be symmetric positive definite. ;  ;  TDecompChol (const TMatrixDSym &a, Double_t tol=0.0);  Constructor for symmetric matrix A . Matrix should be positive definite. ;  ;  TDecompChol (Int_t nrows);  Constructor for (nrows x nrows) matrix. ;  ;  TDecompChol (Int_t row_lwb, Int_t row_upb);  Constructor for ([row_lwb..row_upb] x [row_lwb..row_upb]) matrix. ;  ;  ~TDecompChol () override;  ; Bool_t Decompose () override;  Matrix A is decomposed in component U so that A = U^T * U If the decomposition succeeds, bit kDecomposed is set , otherwise kSingular. ;  ; void Det (Double_t &d1, Double_t &d2) override;  Matrix determinant det = d1*TMath::Power(2.,d2) is square of diagProd of cholesky factor. ;  ; const TMatrixDSym GetMatrix ();  Reconstruct the original matrix using the decomposition parts. ;  ; Int_t GetNcols () const override;  ; Int_t GetNrows () const override;  ; const TMatrixD & GetU () const;  ; TMatrixDSym Invert ();  ; TMatrixDSym Invert (Bool_t &status);  For a symmetric matrix A(m,m), its inverse A_inv(m,m) is returned . ;  ; Bool_t Invert (TMatrixDSym &inv);  For a symmetric ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDecompChol.html:80,Load,Loading,80,doc/master/classTDecompChol.html,https://root.cern,https://root.cern/doc/master/classTDecompChol.html,1,['Load'],['Loading']
Performance,". ROOT: TDecompLU Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; List of all members ; TDecompLU Class ReferenceMath » Matrix Linear Algebra. ; LU Decomposition class. ; Decompose a general n x n matrix A into P A = L U; where P is a permutation matrix, L is unit lower triangular and U is upper triangular. L is stored in the strict lower triangular part of the matrix fLU. The diagonal elements of L are unity and are not stored. U is stored in the diagonal and upper triangular part of the matrix fU. P is stored in the index array fIndex : j = fIndex[i] indicates that row j and row i should be swapped .; fSign gives the sign of the permutation, (-1)^n, where n is the number of interchanges in the permutation.; fLU has the same indexing range as matrix A .; The decomposition fails if a diagonal element of abs(fLU) is == 0, The matrix fUL is made invalid . ; Definition at line 23 of file TDecompLU.h. Public Member Functions;  TDecompLU ();  Default constructor. ;  ;  TDecompLU (const TDecompLU &another);  Copy constructor. ;  ;  TDecompLU (const TMatrixD &m, Double_t tol=0.0, Int_t implicit=1);  Constructor for matrix a. ;  ;  TDecompLU (Int_t nrows);  Constructor for (nrows x nrows) matrix. ;  ;  TDecompLU (Int_t row_lwb, Int_t row_upb);  Constructor for ([row_lwb..row_upb] x [row_lwb..row_upb]) matrix. ;  ;  ~TDecompLU () override;  ; Bool_t Decompose () override;  Matrix A is decomposed in components U and L so that P * A = U * L If the decomposition succeeds, bit kDecomposed is set , otherwise kSingular. ;  ; void Det (Double_t &d1, Double_t &d2) override;  Calculate determinant det = d1*TMath::Power(2.,d2) ;  ; const TMatrixD & GetLU ();  ; const TMatrixD GetMatrix ();  Reconstruct the original matrix using the decomposition parts. ;  ; Int_t G",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDecompLU.html:78,Load,Loading,78,doc/master/classTDecompLU.html,https://root.cern,https://root.cern/doc/master/classTDecompLU.html,1,['Load'],['Loading']
Performance,". ROOT: TDecompQRH Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; List of all members ; TDecompQRH Class ReferenceMath » Matrix Linear Algebra. ; QR Decomposition class. ; Decompose a general (m x n) matrix A into A = fQ' fR H where; fQ : (m x n) - internal Q' matrix (not orthoginal); fR : (n x n) - upper triangular matrix; H : HouseHolder matrix which is stored through; fUp: (n) - vector with Householder up's; fW : (n) - vector with Householder beta's; TDecompQRH::fQTMatrixD fQDefinition TDecompQRH.h:30; TDecompQRH::fWTVectorD fWDefinition TDecompQRH.h:33; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; mTMarker mDefinition textangle.C:8; If row/column index of A starts at (rowLwb,colLwb) then the decomposed matrices start from : fQ' : (rowLwb,0); fR : (0,colLwb); and the decomposed vectors start from :; fUp : (0); fW : (0); In order to get the QR dcomposition of A (i.e. A = QR ) The orthoginal matrix Q needs to be computed from the internal Q' and the up's and beta's vector defining the Householder transformation; The orthogonal Q matrix is returned to the user by calling the function TDecompQRH::GetOrthogonalMatrix(); Errors arise from formation of reflectors i.e. singularity . Note it attempts to handle the cases where the nRow <= nCol . ; Definition at line 25 of file TDecompQRH.h. Public Types; enum  { kWorkMax = 100; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  ES",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDecompQRH.html:79,Load,Loading,79,doc/master/classTDecompQRH.html,https://root.cern,https://root.cern/doc/master/classTDecompQRH.html,1,['Load'],['Loading']
Performance,". ROOT: TDecompSVD Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; List of all members ; TDecompSVD Class ReferenceMath » Matrix Linear Algebra. ; Single Value Decomposition class. ; For an (m x n) matrix A with m >= n, the singular value decomposition is an (m x m) orthogonal matrix fU, an (m x n) diagonal matrix fS, and an (n x n) orthogonal matrix fV so that A = U*S*V'.; If the row/column index of A starts at (rowLwb,colLwb) then the decomposed matrices/vectors start at : fU : (rowLwb,colLwb); fV : (colLwb,colLwb); fSig : (colLwb); TDecompSVD::fSigTVectorD fSigDefinition TDecompSVD.h:30; TDecompSVD::fVTMatrixD fVDefinition TDecompSVD.h:29; TDecompSVD::fUTMatrixD fUDefinition TDecompSVD.h:28; The diagonal matrix fS is stored in the singular values vector fSig . The singular values, fSig[k] = S[k][k], are ordered so that fSig[0] >= fSig[1] >= ... >= fSig[n-1].; The singular value decomposition always exists, so the decomposition will (as long as m >=n) never fail. If m < n, the user should add sufficient zero rows to A , so that m == n; Here fTol is used to set the threshold on the minimum allowed value of the singular values: min_singular = fTol*max(fSig[i]) ; Definition at line 23 of file TDecompSVD.h. Public Types; enum  { kWorkMax = 100; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 ));",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDecompSVD.html:79,Load,Loading,79,doc/master/classTDecompSVD.html,https://root.cern,https://root.cern/doc/master/classTDecompSVD.html,1,['Load'],['Loading']
Performance,". ROOT: TDecompSparse Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; List of all members ; TDecompSparse Class ReferenceMath » Matrix Linear Algebra. ; Sparse Symmetric Decomposition class. ; Solve a sparse symmetric system of linear equations using a method based on Gaussian elimination as discussed in Duff and Reid, ACM Trans. Math. Software 9 (1983), 302-325. ; Definition at line 43 of file TDecompSparse.h. Public Member Functions;  TDecompSparse ();  Default constructor. ;  ;  TDecompSparse (const TDecompSparse &another);  Copy constructor. ;  ;  TDecompSparse (const TMatrixDSparse &a, Int_t verbose);  Constructor for matrix A . ;  ;  TDecompSparse (Int_t nRows, Int_t nr_nonZeros, Int_t verbose);  Constructor for a matrix with nrows and unspecified number of columns . ;  ;  TDecompSparse (Int_t row_lwb, Int_t row_upb, Int_t nr_nonZeros, Int_t verbose);  Constructor for a matrix with row range, [row_lwb..row_upb] and unspecified column range . ;  ;  ~TDecompSparse () override;  ; Bool_t Decompose () override;  Decomposition engine . ;  ; void Det (Double_t &, Double_t &) override;  Matrix determinant det = d1*TMath::Power(2.,d2) ;  ; Int_t GetNcols () const override;  ; Int_t GetNrows () const override;  ; TClass * IsA () const override;  ; TDecompSparse & operator= (const TDecompSparse &source);  Assignment operator. ;  ; void Print (Option_t *opt="""") const override;  Print class members. ;  ; virtual void SetMatrix (const TMatrixDSparse &a);  Set matrix to be decomposed . ;  ; void SetVerbose (Int_t v);  ; TVectorD Solve (const TVectorD &b, Bool_t &ok) override;  ; Bool_t Solve (TMatrixDColumn &) override;  ; Bool_t Solve (TVectorD &b) override;  Solve Ax=b . Solution returned in b. ;  ; void Streamer (TBuffer &) override;  Stream an object",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDecompSparse.html:82,Load,Loading,82,doc/master/classTDecompSparse.html,https://root.cern,https://root.cern/doc/master/classTDecompSparse.html,1,['Load'],['Loading']
Performance,". ROOT: TDelCharCom Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; TDelCharCom Class Reference. . Definition at line 111 of file TGTextEdit.cxx. Public Member Functions;  TDelCharCom (TGTextEdit *te);  ; Bool_t Notify () override;  This method must be overridden to handle object notification (the base implementation is no-op). ;  ;  Public Member Functions inherited from TGTextEditCommand;  TGTextEditCommand (TGTextEdit *te);  ; void SetPos (TGLongPosition pos);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDelCharCom.html:80,Load,Loading,80,doc/master/classTDelCharCom.html,https://root.cern,https://root.cern/doc/master/classTDelCharCom.html,1,['Load'],['Loading']
Performance,". ROOT: TDelTextCom Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; TDelTextCom Class Reference. . Definition at line 184 of file TGTextEdit.cxx. Public Member Functions;  TDelTextCom (const TDelTextCom &dtc);  ;  TDelTextCom (TGTextEdit *te, TGText *txt);  ;  ~TDelTextCom () override;  ; Bool_t Notify () override;  This method must be overridden to handle object notification (the base implementation is no-op). ;  ; TDelTextCom & operator= (const TDelTextCom &dtc);  ; void SetBreakLine (Bool_t on);  ; void SetEndPos (TGLongPosition end);  ;  Public Member Functions inherited from TGTextEditCommand;  TGTextEditCommand (TGTextEdit *te);  ; void SetPos (TGLongPosition pos);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDelTextCom.html:80,Load,Loading,80,doc/master/classTDelTextCom.html,https://root.cern,https://root.cern/doc/master/classTDelTextCom.html,1,['Load'],['Loading']
Performance,". ROOT: TDialogCanvas Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TDialogCanvas Class ReferenceGraphics » 2D Graphics » Graphics pad. ; A canvas specialized to set attributes. ; It contains, in general, TGroupButton objects. When the APPLY button is executed, the actions corresponding to the active buttons are executed via the Interpreter.; See examples in TAttLineCanvas, TAttFillCanvas, TAttTextCanvas, TAttMarkerCanvas ; Definition at line 19 of file TDialogCanvas.h. Public Member Functions;  TDialogCanvas ();  DialogCanvas default constructor. ;  ;  TDialogCanvas (const char *name, const char *title, Int_t wtopx, Int_t wtopy, UInt_t ww, UInt_t wh);  DialogCanvas constructor. ;  ;  TDialogCanvas (const char *name, const char *title, Int_t ww, Int_t wh);  DialogCanvas constructor. ;  ;  ~TDialogCanvas () override;  DialogCanvas default destructor. ;  ; virtual void Apply (const char *action="""");  Called when the APPLY button is executed. ;  ; virtual void BuildStandardButtons ();  Create APPLY, gStyle and CLOSE buttons. ;  ; void Divide (Int_t nx=1, Int_t ny=1, Float_t xmargin=0.01, Float_t ymargin=0.01, Int_t color=0) override;  ; TObject * GetRefObject () const;  ; TPad * GetRefPad () const;  ; TClass * IsA () const override;  ; void Range (Double_t x1, Double_t y1, Double_t x2, Double_t y2) override;  Set world coordinate system for the pad. ;  ; void RecursiveRemove (TObject *obj) override;  Recursively remove object from a pad and its sub-pads. ;  ; void SetBorderMode (Short_t bordermode) override;  ; void SetGrid (Int_t valuex=1, Int_t valuey=1) override;  ; void SetLogx (Int_t value=1) override;  ; void SetLogy (Int_t value=1) override;  ; void SetName (const char *name) override;  Set canvas name. ;  ; virtual void SetRefObject (TObject *obj);  ; virt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDialogCanvas.html:82,Load,Loading,82,doc/master/classTDialogCanvas.html,https://root.cern,https://root.cern/doc/master/classTDialogCanvas.html,1,['Load'],['Loading']
Performance,". ROOT: TDiamond Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TDiamond Class ReferenceGraphics » 2D Graphics » Basic graphics. ; Draw a Diamond. ; A diamond is defined by:. Its central left coordinates x1,y1; Its top central coordinates x2,y2. A diamond has line attributes (see TAttLine) and fill area attributes (see TAttFill).; Like for the class TPaveText, a TDiamond may have one or more line(s) of text inside.; ; void diamond(){; auto d = new TDiamond(.05,.1,.95,.8);; d->AddText(""A TDiamond can contain any text."");; d->Draw();; }; d#define d(i)Definition RSha256.hxx:102; TDiamond::TDiamondTDiamond()Diamond default constructor.Definition TDiamond.cxx:46; . Definition at line 17 of file TDiamond.h. Public Member Functions;  TDiamond ();  Diamond default constructor. ;  ;  TDiamond (const TDiamond &diamond);  Copy constructor. ;  ;  TDiamond (Double_t x1, Double_t y1, Double_t x2, Double_t y2);  Diamond standard constructor. ;  ;  ~TDiamond () override;  Diamond destructor. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a diamond. ;  ; void Draw (Option_t *option="""") override;  Draw this diamond with its current attributes. ;  ; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override;  Execute action corresponding to one event. ;  ; TClass * IsA () const override;  ; Int_t IsInside (Double_t x, Double_t y) const override;  Return 1 if the point (x,y) is inside the polygon defined by the diamond 0 otherwise. ;  ; void Paint (Option_t *option="""") override;  Paint this diamond with its current attributes. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save primitive as a C++ statement(s) on output stream out. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TBox. ;  ; void StreamerNVirtual (TBuffer &ClassDef_S",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDiamond.html:77,Load,Loading,77,doc/master/classTDiamond.html,https://root.cern,https://root.cern/doc/master/classTDiamond.html,1,['Load'],['Loading']
Performance,". ROOT: TDictAttributeMap Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TDictAttributeMap Class Reference. ; The ROOT object has a list of properties which are stored and retrieved using TDictAttributeMap. ; TDictAttributeMap maps the property keys of the object to their values. ; Definition at line 29 of file TDictAttributeMap.h. Public Member Functions;  TDictAttributeMap ();  Default constructor. ;  ; virtual ~TDictAttributeMap ();  Default destructor. ;  ; void AddProperty (const char *key, const char *value);  Add a property with a String value to the TDictAttributeMap. ;  ; void Clear (Option_t *option="""") override;  Deletes all the properties of the class. ;  ; const char * GetPropertyAsString (const char *key) const;  Access the value of a String property using the key. ;  ; Int_t GetPropertySize () const;  ; Bool_t HasKey (const char *key) const;  ; TClass * IsA () const override;  ; Bool_t RemoveProperty (const char *key);  ; TString RemovePropertyString (const char *key);  Remove a String property from the attribute map specified by the key. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDictAttributeMap.html:86,Load,Loading,86,doc/master/classTDictAttributeMap.html,https://root.cern,https://root.cern/doc/master/classTDictAttributeMap.html,1,['Load'],['Loading']
Performance,". ROOT: TDictionary Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; TDictionary Class Referenceabstract. ; This class defines an abstract interface that must be implemented by all classes that contain dictionary information. ; The dictionary is defined by the following classes: TDataType (typedef definitions); TGlobal (global variables); TGlobalFunc (global functions); TClass (classes); TBaseClass (base classes); TDataMember (class datamembers); TMethod (class methods); TMethodArg (method arguments); TBaseClassEach class (see TClass) has a linked list of its base class(es).Definition TBaseClass.h:33; TClassTClass instances represent classes, structs and namespaces in the ROOT type system.Definition TClass.h:81; TDataMemberAll ROOT classes may have RTTI (run time type identification) support added.Definition TDataMember.h:31; TDataTypeBasic data type descriptor (datatype information is obtained from CINT).Definition TDataType.h:44; TGlobalGlobal variables class (global variables are obtained from CINT).Definition TGlobal.h:28; TMethodArgEach ROOT method (see TMethod) has a linked list of its arguments.Definition TMethodArg.h:36; TMethodEach ROOT class (see TClass) has a linked list of methods.Definition TMethod.h:38; All the above classes implement the TDictionary abstract interface. Note: the indentation shows aggregation not inheritance. TMethodCall (method call environment); TMethodCallMethod or function calling interface.Definition TMethodCall.h:37; . Definition at line 168 of file TDictionary.h. Public Types; typedef const void * DeclId_t;  ; enum class  EMemberSelection { kNoUsingDecls; , kOnlyUsingDecls; , kAlsoUsingDecls; };  Kinds of members to include in lists. More...;  ; enum  ESTLType { ;   kNone = ROOT::kNotSTL; , kVector = ROOT::kSTL",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDictionary.html:80,Load,Loading,80,doc/master/classTDictionary.html,https://root.cern,https://root.cern/doc/master/classTDictionary.html,1,['Load'],['Loading']
Performance,". ROOT: TDimensionInfo Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; TDimensionInfo Class Reference. ; A small helper class to help in keeping track of the array dimensions encountered in the analysis of the expression. ; Definition at line 111 of file TTreeFormula.cxx. Public Member Functions;  TDimensionInfo (Int_t code, Int_t oper, Int_t size, TFormLeafInfoMultiVarDim *multiDim);  ;  ~TDimensionInfo () override;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDimensionInfo.html:83,Load,Loading,83,doc/master/classTDimensionInfo.html,https://root.cern,https://root.cern/doc/master/classTDimensionInfo.html,1,['Load'],['Loading']
Performance,". ROOT: TDirectory Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Friends |; List of all members ; TDirectory Class ReferenceCore ROOT classes » Base ROOT classes. ; Describe directory structure in memory. . PyROOT; It is possible to retrieve the content of a TDirectory object just like getting items from a Python dictionary. Moreover, once a subdirectory or object is accessed for the first time, it is cached for later use. For example, assuming d is a TDirectory instance: # Access a subdirectory; d[""subdir""]; ; # We can go further down in the hierarchy of directories; d[""subdir""][""subsubdir""]; ; # Access an object (e.g. a histogram) in the directory; d[""obj""]; ; # ... or in a subdirectory; d[""subdir""][""obj""]; ; # Wrong key: raises KeyError; d[""wrongAttr""]; Furthermore, TDirectory implements a WriteObject Python method which relies on TDirectory::WriteObjectAny. This method is a no-op for TDirectory objects, but it is useful for objects of TDirectory subclasses such as TDirectoryFile and TFile, which inherit it. Please refer to the documentation of those classes for more information. . Definition at line 45 of file TDirectory.h. Classes; class  TContext;  TDirectory::TContext keeps track and restore the current directory. More...;  . Public Member Functions;  TDirectory ();  Directory default constructor. ;  ;  TDirectory (const char *name, const char *title, Option_t *option="""", TDirectory *motherDir=nullptr);  Create a new Directory. ;  ; virtual ~TDirectory ();  Destructor. ;  ; virtual void Add (TObject *obj, Bool_t replace=kFALSE);  ; virtual void Append (TObject *obj, Bool_t replace=kFALSE);  Append object to this directory. ;  ; virtual Int_t AppendKey (TKey *);  ; void Browse (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDirectory.html:79,Load,Loading,79,doc/master/classTDirectory.html,https://root.cern,https://root.cern/doc/master/classTDirectory.html,2,"['Load', 'cache']","['Loading', 'cached']"
Performance,". ROOT: TDirectory Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Friends |; List of all members ; TDirectory Class ReferenceCore ROOT classes » Base ROOT classes. ; Describe directory structure in memory. . PyROOT; It is possible to retrieve the content of a TDirectory object just like getting items from a Python dictionary. Moreover, once a subdirectory or object is accessed for the first time, it is cached for later use. For example, assuming d is a TDirectory instance: # Access a subdirectory; d[""subdir""]; ; # We can go further down in the hierarchy of directories; d[""subdir""][""subsubdir""]; ; # Access an object (e.g. a histogram) in the directory; d[""obj""]; ; # ... or in a subdirectory; d[""subdir""][""obj""]; ; # Wrong key: raises KeyError; d[""wrongAttr""]; Furthermore, TDirectory implements a WriteObject Python method which relies on TDirectory::WriteObjectAny. This method is a no-op for TDirectory objects, but it is useful for objects of TDirectory subclasses such as TDirectoryFile and TFile, which inherit it. Please refer to the documentation of those classes for more information. . Definition at line 45 of file TDirectory.h. Classes; class  TContext;  TDirectory::TContext keeps track and restore the current directory. More...;  . Public Member Functions;  TDirectory ();  Directory default constructor. ;  ;  TDirectory (const char *name, const char *title, Option_t *option="""", TDirectory *motherDir=nullptr);  Create a new Directory. ;  ; virtual ~TDirectory ();  Destructor. ;  ; virtual void Add (TObject *obj, Bool_t replace=kFALSE);  ; virtual void Append (TObject *obj, Bool_t replace=kFALSE);  Append object to this directory. ;  ; virtual Int_t AppendKey (TKey *);  ; void Browse (T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTDirectory.html:78,Load,Loading,78,doc/v632/classTDirectory.html,https://root.cern,https://root.cern/doc/v632/classTDirectory.html,2,"['Load', 'cache']","['Loading', 'cached']"
Performance,". ROOT: TDirectory::TContext Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TDirectory::TContext Class ReferenceCore ROOT classes » Base ROOT classes. ; TDirectory::TContext keeps track and restore the current directory. ; With this tool C++ exceptions will be guaranteed to properly restore the current directory pointer.; For example code like:; TDirectory *sav = gDirectory;; mydirectory->cd();; if (...) {; ....; sav->cd();; return;; } else if (...) {; ....; sav->cd();; return;; }; sav->cd;; return;; gDirectory#define gDirectoryDefinition TDirectory.h:384; TDirectoryDescribe directory structure in memory.Definition TDirectory.h:45; TDirectory::cdvirtual Bool_t cd()Change current directory to ""this"" directory.Definition TDirectory.cxx:538; can be replaced with the simpler and exception safe:; TDirectory::TContext context(gDirectory, mydirectory);; if (...) {; ....; return;; } else if (...) {; ....; return;; }; return;; TDirectory::TContextTDirectory::TContext keeps track and restore the current directory.Definition TDirectory.h:89. PyROOT; The functionality offered by TContext can be used in PyROOT with a context manager. Here are a few examples: import ROOT; from ROOT import TDirectory; ; with TDirectory.TContext():; # Open some file here; file = ROOT.TFile(...); # Retrieve contents from the file; histo = file.Get(""myhisto""); ; # After the 'with' statement, the current directory is restored to ROOT.gROOT; ; import ROOT; from ROOT import TDirectory; ; file1 = ROOT.TFile(""file1.root"", ""recreate""); #...; file2 = ROOT.TFile(""file2.root"", ""recreate""); #...; file3 = ROOT.TFile(""file3.root"", ""recreate""); ; # Before the 'with' statement, the current directory is file3 (the last file opened); with TDirectory.TContext(file1):; # Inside the statement, the current directory is file1; histo = ROOT.T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDirectory_1_1TContext.html:89,Load,Loading,89,doc/master/classTDirectory_1_1TContext.html,https://root.cern,https://root.cern/doc/master/classTDirectory_1_1TContext.html,1,['Load'],['Loading']
Performance,". ROOT: TDirectoryFile Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TDirectoryFile Class ReferenceInput/Output Library. ; A ROOT file is structured in Directories (like a file system). ; Each Directory has a list of Keys (see TKeys) and a list of objects in memory. A Key is a small object that describes the type and location of a persistent object in a file. The persistent object may be a directory. The structure of a file is shown in TFile::TFile. PyROOT; In the same way as for TDirectory, it is possible to inspect the content of a TDirectoryFile object from Python as if the subdirectories and objects it contains were its attributes. For more information, please refer to the TDirectory documentation.; In addition to the attribute syntax, one can inspect a TDirectoryFile in Python via the Get method. In this case, the subdirectory/object name is specified as a string: # Access a subdirectory; d.Get('subdir'); ; # We can go further down in the hierarchy of directories; d.Get('subdir/subsubdir'); ; # Access an object (e.g. a histogram) in the directory; d.Get('obj'); ; # ... or in a subdirectory; d.Get('subdir/obj'); ; # Wrong attribute: returns null; x = d.Get('wrongAttr') # x points to null; Furthermore, TDirectoryFile inherits a WriteObject Python method from TDirectory. Such method allows to write an object into a TDirectoryFile with the following syntax: # Write object obj with identifier 'keyName'; d.WriteObject(obj, 'keyName'). Definition at line 32 of file TDirectoryFile.h. Public Types; enum  EStatusBits { kCloseDirectory = (1ULL << ( 7 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kB",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDirectoryFile.html:83,Load,Loading,83,doc/master/classTDirectoryFile.html,https://root.cern,https://root.cern/doc/master/classTDirectoryFile.html,1,['Load'],['Loading']
Performance,". ROOT: TDispatchTimer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; TDispatchTimer Class Reference. . Definition at line 112 of file TProofPlayer.cxx. Public Member Functions;  TDispatchTimer (TProofPlayer *p);  ; Bool_t Notify () override;  Handle expiration of the timer associated with dispatching pending events while processing. ;  ;  Public Member Functions inherited from TTimer;  TTimer (const char *command, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (Long_t milliSec=0, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (TObject *obj, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ; virtual ~TTimer ();  ; void Add () override;  ; Bool_t CheckTimer (const TTime &now);  Check if timer timed out. ;  ; TTime GetAbsTime () const;  ; const char * GetCommand () const;  ; TObject * GetObject ();  ; TTime GetTime () const;  ; UInt_t GetTimerID ();  ; Bool_t HasTimedOut () const;  ; TClass * IsA () const override;  ; Bool_t IsAsync () const;  ; Bool_t IsInterruptingSyscalls () const;  ; Bool_t IsRunning ();  This function checks if the timer is running within gSystem (Has been started and did not finish yet). ;  ; Bool_t IsSync () const;  ; Bool_t Notify () override;  Notify when timer times out. ;  ; void Remove () override;  ; void Reset ();  Reset the timer. ;  ; void SetCommand (const char *command);  Set the interpreter command to be executed at time out. ;  ; void SetInterruptSyscalls (Bool_t set=kTRUE);  When the argument is true the a-synchronous timer (SIGALRM) signal handler is set so that interrupted syscalls will not be restarted by the kernel. ;  ; void SetObject (TObject *object);  Set the object to be notified at time out. ;  ; void SetTime (Long_t milliSec);  ; void SetTimerID (UInt_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDispatchTimer.html:83,Load,Loading,83,doc/master/classTDispatchTimer.html,https://root.cern,https://root.cern/doc/master/classTDispatchTimer.html,1,['Load'],['Loading']
Performance,". ROOT: TDocDirective Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Friends |; List of all members ; TDocDirective Class Referenceabstract. . Definition at line 34 of file TDocDirective.h. Public Member Functions; virtual void AddLine (const TSubString &line)=0;  ; virtual void DeleteOutput () const;  ; virtual const char * GetEndTag () const =0;  ; virtual Bool_t GetResult (TString &result)=0;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDocDirective.html:82,Load,Loading,82,doc/master/classTDocDirective.html,https://root.cern,https://root.cern/doc/master/classTDocDirective.html,1,['Load'],['Loading']
Performance,". ROOT: TDocHtmlDirective Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TDocHtmlDirective Class Reference. . Definition at line 80 of file TDocDirective.h. Public Member Functions;  TDocHtmlDirective ();  ;  ~TDocHtmlDirective () override;  ; void AddLine (const TSubString &line) override;  Add a line of HTML. ;  ; const char * GetEndTag () const override;  ; Bool_t GetResult (TString &result) override;  Set result to the HTML code that was passed in via AddLine(). ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TDocDirective; virtual void DeleteOutput () const;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDocHtmlDirective.html:86,Load,Loading,86,doc/master/classTDocHtmlDirective.html,https://root.cern,https://root.cern/doc/master/classTDocHtmlDirective.html,1,['Load'],['Loading']
Performance,". ROOT: TDocLatexDirective Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TDocLatexDirective Class Reference. . Definition at line 122 of file TDocDirective.h. Public Member Functions;  TDocLatexDirective ();  ;  ~TDocLatexDirective () override;  Destructor. ;  ; void AddLine (const TSubString &line) override;  Add a latex line. ;  ; void DeleteOutput () const override;  ; const char * GetAlignment () const;  ; const char * GetEndTag () const override;  ; Int_t GetFontSize () const;  ; TList * GetListOfLines () const;  Get the list of lines as TObjStrings. ;  ; Bool_t GetResult (TString &result) override;  convert fLatex to a gif by creating a TLatex, drawing it on a temporary canvas, and saving that to a filename in the output directory. ;  ; const char * GetSeparator () const;  ; TClass * IsA () const override;  ; Bool_t SeparatorIsRegexp () const;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TDocDirective; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDocLatexDirective.html:87,Load,Loading,87,doc/master/classTDocLatexDirective.html,https://root.cern,https://root.cern/doc/master/classTDocLatexDirective.html,1,['Load'],['Loading']
Performance,". ROOT: TDocMacroDirective Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TDocMacroDirective Class Reference. . Definition at line 95 of file TDocDirective.h. Public Member Functions;  TDocMacroDirective ();  ;  ~TDocMacroDirective () override;  Destructor. ;  ; void AddLine (const TSubString &line) override;  Add a macro line. ;  ; void DeleteOutput () const override;  ; const char * GetEndTag () const override;  ; Bool_t GetResult (TString &result) override;  Get the result (i.e. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TDocDirective; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDocMacroDirective.html:87,Load,Loading,87,doc/master/classTDocMacroDirective.html,https://root.cern,https://root.cern/doc/master/classTDocMacroDirective.html,1,['Load'],['Loading']
Performance,". ROOT: TDocMethodWrapper Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; List of all members ; TDocMethodWrapper Class Referenceabstract. . Definition at line 37 of file TDocParser.h. Public Types; enum  { kDocumented = 14; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions; virtual TMethod * GetMethod () const =0;  ; virtual Int_t GetOverloadIdx () const =0;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDocMethodWrapper.html:86,Load,Loading,86,doc/master/classTDocMethodWrapper.html,https://root.cern,https://root.cern/doc/master/classTDocMethodWrapper.html,1,['Load'],['Loading']
Performance,". ROOT: TDocOutput Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Protected Attributes |; List of all members ; TDocOutput Class Reference. . Definition at line 37 of file TDocOutput.h. Public Types; enum  EFileType { kSource; , kInclude; , kTree; , kDoc; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TDocOutput (THtml &html);  ;  ~TDocOutput () override;  ; virtual void AdjustSourcePath (TString &line, const char *relpath=""../"");  adjust the path of links for source files, which are in src/, but need to point to relpath (usually ""../""). ;  ; void Convert (std::istream &in, const char *infilename, const char *outfilename, const char *title, const char *relpath=""../"", Int_t includeOutput=0, const char *context="""", TGClient *gclient=0);  Convert a text file into a html file. ;  ; Bool_t CopyHtmlFile (const char *sourceName, const char *destName="""");  Copy file to HTML directory. ;  ; virtual void CreateClassIndex ();  Create index of all classes. ;  ; virtual void CreateClassTypeDefs ();  Create a forwarding page for each typedef pointing to a class. ;  ; virtual void CreateHierarchy ();  Create a hierarchical class list The algorithm descends from the base clas",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDocOutput.html:79,Load,Loading,79,doc/master/classTDocOutput.html,https://root.cern,https://root.cern/doc/master/classTDocOutput.html,1,['Load'],['Loading']
Performance,". ROOT: TDocParser Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; List of all members ; TDocParser Class Reference. . Definition at line 44 of file TDocParser.h. Public Types; enum  EAccess { kPrivate; , kProtected; , kPublic; };  ; enum  EParseContext { ;   kNoContext; , kCode; , kComment; , kDirective; , ;   kString; , kKeyword; , kCPP; , kVerbatim; , ;   kNumParseContexts; , kParseContextMask = (1ULL << ( 4 )) - 1. };  ; enum  EParseContextFlag { kCXXComment = (1ULL << ( 4 )); , kParseContextFlagMask = (UInt_t)(~((1ULL << ( 4 )) - 1)); };  ; enum  ESourceInfo { ;   kInfoLastUpdate; , kInfoAuthor; , kInfoCopyright; , kInfoLastChanged; , ;   kInfoLastGenerated; , kNumSourceInfos. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TDocParser (TClassDocOutput &docOutput, TClass *cl);  Constructor called for parsing class sources. ;  ;  TDocParser (TDocOutput &docOutput);  constructor called for parsing text files with Convert() ;  ;  ~TDocParser () override;  destructor, checking whether all methods have been found for gDebug > 3 ;  ; void Convert (std::ostream &out, std::istream &in, const char *relpath, Bool_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDocParser.html:79,Load,Loading,79,doc/master/classTDocParser.html,https://root.cern,https://root.cern/doc/master/classTDocParser.html,1,['Load'],['Loading']
Performance,". ROOT: TDrawFeedback Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Attributes |; List of all members ; TDrawFeedback Class ReferencePROOF » PROOF kernel Libraries. ; Utility class to draw objects in the feedback list during queries. ; Draws histograms in separated canvases and user-defined objects via Draw(). Users requiring advanced treatment should implement their own version following this example. See also TStatsFeedback. ; Definition at line 35 of file TDrawFeedback.h. Public Member Functions;  TDrawFeedback (TProof *proof=0, TSeqCollection *names=0);  Constructor. ;  ;  ~TDrawFeedback () override;  Destructor. ;  ; void Feedback (TList *objs);  Display feedback. ;  ; const char * GetName () const override;  Returns name of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; void SetOption (Option_t *option);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDrawFeedback.html:82,Load,Loading,82,doc/master/classTDrawFeedback.html,https://root.cern,https://root.cern/doc/master/classTDrawFeedback.html,1,['Load'],['Loading']
Performance,". ROOT: TELTU Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TELTU Class ReferenceGraphics » 3D Graphics » Basic 3D graphics. ; A cylinder with an elliptical section. ; It has three parameters: the ellipse semi-axis in X, the ellipse semi-axis in Y and the half length in Z. The equation of the conical curve is: X**2/fRx**2 + Y**2/fRy**2 = 1; ELTU is not divisible. name: name of the shape; title: shape's title; material: (see TMaterial); rx: the ellipse semi-axis in X; ry: the ellipse semi-axis in Y; dz: half-length in z . Definition at line 31 of file TELTU.h. Public Member Functions;  TELTU ();  ELTU shape default constructor. ;  ;  TELTU (const char *name, const char *title, const char *material, Float_t rx, Float_t ry, Float_t dz);  ;  ~TELTU () override;  ELTU shape default destructor. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TTUBE;  TTUBE ();  TUBE shape default constructor. ;  ;  TTUBE (const char *name, const char *title, const char *material, Float_t rmax, Float_t dz);  TUBE shape ""simplified"" constructor. ;  ;  TTUBE (const char *name, const char *title, const char *material, Float_t rmin, Float_t rmax, Float_t dz, Float_t aspect=1);  TUBE shape normal constructor. ;  ;  ~TTUBE () override;  TUBE shape default destructor. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a TUBE. ;  ; virtual Float_t GetAspectRatio () const;  ; const TBuffer3D & GetBuffer3D (Int_t reqSections) const override;  Get buffer 3d. ;  ; virtual Float_t GetDz () const;  ; virtual Int_t GetNdiv () const;  ; virtual Int_t GetNumberOfDivisions () const;  ; virtual Float_t GetRmax () const;  ; virtual Float",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTELTU.html:74,Load,Loading,74,doc/master/classTELTU.html,https://root.cern,https://root.cern/doc/master/classTELTU.html,1,['Load'],['Loading']
Performance,". ROOT: TEditQueryFrame Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TEditQueryFrame Class Reference. . Definition at line 335 of file TSessionViewer.h. Public Member Functions;  TEditQueryFrame (TGWindow *p, Int_t w, Int_t h);  Create a new Query dialog, used by the Session Viewer, to Edit a Query if the editmode flag is set, or to create a new one if not set. ;  ;  ~TEditQueryFrame () override;  Delete query dialog. ;  ; void Build (TSessionViewer *gui);  Build the ""new query"" dialog. ;  ; TClass * IsA () const override;  ; void OnBrowseChain ();  Call new chain dialog. ;  ; void OnBrowseEventList ();  Browse event list. ;  ; void OnBrowseSelector ();  Open file browser to choose selector macro. ;  ; void OnBtnSave ();  Save current settings in main session viewer. ;  ; void OnElementSelected (TObject *obj);  Handle OnElementSelected signal coming from new chain dialog. ;  ; void OnNewQueryMore ();  Show/hide options frame and update button text accordingly. ;  ; void SettingsChanged ();  Settings have changed, update GUI accordingly. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UpdateFields (TQueryDescription *desc);  Update entry fields with query description values. ;  ;  Public Member Functions inherited from TGCompositeFrame;  TGCompositeFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=0, Pixel_t back=GetDefaultFrameBackground());  Create a composite frame. ;  ;  TGCompositeFrame (TGClient *c, Window_t id, const TGWindow *parent=nullptr);  Create a frame using an externally created window. ;  ;  ~TGCompositeFrame () override;  Delete a composite frame. ;  ; virtual void AddFrame (TGFrame *f, TGLayoutHints *l=nullptr);  Add frame to the composite frame us",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEditQueryFrame.html:84,Load,Loading,84,doc/master/classTEditQueryFrame.html,https://root.cern,https://root.cern/doc/master/classTEditQueryFrame.html,1,['Load'],['Loading']
Performance,". ROOT: TEfficiency Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Protected Attributes |; List of all members ; TEfficiency Class ReferenceHistogram Library. ; Class to handle efficiency histograms. . I. Overview; II. Creating a TEfficiency object; Example 1; Example 2. III. Filling with events; IV. Statistic options; Frequentist methods; Bayesian methods; IV.1 Coverage probabilities for different methods. V. Merging and combining TEfficiency objects; Example; V.1 When should I use merging?; Example. V.2 When should I use combining?; Example. VI. Further operations; VI.1 Information about the internal histograms; VI.2 Fitting; VI.3 Draw a TEfficiency object; VI.4 TEfficiency object's axis customisation. I. Overview; This class handles the calculation of efficiencies and their uncertainties. It provides several statistical methods for calculating frequentist and Bayesian confidence intervals as well as a function for combining several efficiencies.; Efficiencies have a lot of applications and meanings but in principle, they can be described by the fraction of good/passed events k out of sample containing N events. One is usually interested in the dependency of the efficiency on other (binned) variables. The number of passed and total events is therefore stored internally in two histograms (TEfficiency::fTotalHistogram and TEfficiency::fPassedHistogram). Then the efficiency, as well as its upper and lower error, can be calculated for each bin individually.; As the efficiency can be regarded as a parameter of a binomial distribution, the number of passed and total events must always be integer numbers. Therefore a filling with weights is not possible. However, you can assign a global weight to each TEfficiency object (TEfficiency::SetWeight). It is necessary to create one ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEfficiency.html:80,Load,Loading,80,doc/master/classTEfficiency.html,https://root.cern,https://root.cern/doc/master/classTEfficiency.html,1,['Load'],['Loading']
Performance,". ROOT: TEllipse Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TEllipse Class ReferenceGraphics » 2D Graphics » Basic graphics. ; Draw Ellipses. ; The ellipse can be truncated and rotated. It is defined by its center (x1,y1) and two radius r1 and r2.; A minimum and maximum angle may be specified (phimin, phimax). The ellipse may be rotated with an angle theta. All these angles are in degrees. The attributes of the outline line are given via TAttLine. The attributes of the fill area are given via TAttFill. The picture below illustrates different types of ellipses.; When an ellipse sector only is drawn, the lines connecting the center of the ellipse to the edges are drawn by default. One can specify the drawing option ""only"" to not draw these lines or alternatively call the function SetNoEdges(). To remove completely the ellipse outline it is enough to specify 0 as line style.; ; void ellipse(){; auto c1 = new TCanvas(""c1"");; c1->Range(0,0,1,1);; auto pel = new TPaveLabel(0.1,0.8,0.9,0.95,""Examples of Ellipses"");; pel->SetFillColor(42);; pel->Draw();; auto el1 = new TEllipse(0.25,0.25,.1,.2);; el1->Draw();; auto el2 = new TEllipse(0.25,0.6,.2,.1);; el2->SetFillColor(6);; el2->SetFillStyle(3008);; el2->Draw();; auto el3 = new TEllipse(0.75,0.6,.2,.1,45,315);; el3->SetFillColor(2);; el3->SetFillStyle(1001);; el3->SetLineColor(4);; el3->Draw();; auto el4 = new TEllipse(0.75,0.25,.2,.15,45,315,62);; el4->SetFillColor(5);; el4->SetFillStyle(1001);; el4->SetLineColor(4);; el4->SetLineWidth(6);; el4->Draw();; }; TCanvasThe Canvas class.Definition TCanvas.h:23; TEllipse::TEllipseTEllipse()Ellipse default constructor.Definition TEllipse.cxx:57; TPaveLabelA Pave (see TPave) with a text centered in the Pave.Definition TPaveLabel.h:20; c1return c1Definition legend1.C:41; . Definition at",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEllipse.html:77,Load,Loading,77,doc/master/classTEllipse.html,https://root.cern,https://root.cern/doc/master/classTEllipse.html,1,['Load'],['Loading']
Performance,". ROOT: TEmulatedCollectionProxy Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Protected Member Functions |; Private Member Functions |; Friends |; List of all members ; TEmulatedCollectionProxy Class ReferenceInput/Output Library. ; Streamer around an arbitrary STL like container, which implements basic container functionality. . Note:; Although this class contains all the setup necessary to deal with maps, the map-like functionality is NOT supported. For optimization reasons this functionality is put into the class TEmulatedMapProxy. ; Definition at line 18 of file TEmulatedCollectionProxy.h. Public Types; typedef std::vector< char > Cont_t;  ; typedef Cont_t * PCont_t;  ;  Public Types inherited from TGenCollectionProxy; enum  { kBIT_ISSTRING = 0x20000000; , kBIT_ISTSTRING = 0x40000000; };  ; typedef const std::type_info & Info_t;  ;  Public Types inherited from TVirtualCollectionProxy; typedef void *(* CopyIterator_t) (void *dest, const void *source);  Copy the iterator source into dest. ;  ; typedef void(* CreateIterators_t) (void *collection, void **begin_arena, void **end_arena, TVirtualCollectionProxy *proxy);  *begin_arena and *end_arena should contain the location of a memory arena of size fgIteratorArenaSize. ;  ; typedef void(* DeleteIterator_t) (void *iter);  If the size of the iterator is greater than fgIteratorArenaSize, call delete on the addresses; otherwise, just call the iterator's destructor. ;  ; typedef void(* DeleteTwoIterators_t) (void *begin, void *end);  ; enum  EProperty { kIsAssociative = (1ULL << ( 2 )); , kIsEmulated = (1ULL << ( 3 )); , kNeedDelete = (1ULL << ( 4 )); , kCustomAlloc = (1ULL << ( 5 )); };  ; typedef void *(* Next_t) (void *iter, const void *end);  iter and end should be pointers to an iterator to be incremented and an iterator that points to the end of the collection, respectively. ;  . Public Member Funct",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEmulatedCollectionProxy.html:93,Load,Loading,93,doc/master/classTEmulatedCollectionProxy.html,https://root.cern,https://root.cern/doc/master/classTEmulatedCollectionProxy.html,2,"['Load', 'optimiz']","['Loading', 'optimization']"
Performance,". ROOT: TEmulatedMapProxy Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Private Member Functions |; List of all members ; TEmulatedMapProxy Class ReferenceInput/Output Library. ; Streamer around a map container. ; For optimization reasons this functionality is separated from the TEmulatedProxy. ; Definition at line 16 of file TEmulatedMapProxy.h. Public Member Functions;  TEmulatedMapProxy (const char *cl_name, Bool_t silent);  ;  TEmulatedMapProxy (const TEmulatedMapProxy &copy);  ;  ~TEmulatedMapProxy () override;  ; void * At (UInt_t idx) override;  Return the address of the value at index idx ;  ; TVirtualCollectionProxy * Generate () const override;  Returns a clean object of the actual class that derives from TVirtualCollectionProxy. ;  ; void ReadBuffer (TBuffer &buff, void *pObj) override;  ; void ReadBuffer (TBuffer &buff, void *pObj, const TClass *onfile) override;  ; UInt_t Size () const override;  Return the current number of elements in the container. ;  ; void Streamer (TBuffer &buff, void *pObj, int siz) override;  Streamer I/O overload. ;  ; void Streamer (TBuffer &refBuffer) override;  Streamer Function. ;  ;  Public Member Functions inherited from TEmulatedCollectionProxy;  TEmulatedCollectionProxy (const char *cl_name, Bool_t silent);  ;  TEmulatedCollectionProxy (const TEmulatedCollectionProxy &copy);  ;  ~TEmulatedCollectionProxy () override;  ; void * Allocate (UInt_t n, Bool_t forceDelete) override;  Allocates space for storing at least n elements. ;  ; void Clear (const char *opt="""") override;  Clear the container. ;  ; void Commit (void *env) override;  Commits pending elements in a staging area (see Allocate() for more information). ;  ; void DeleteArray (void *p, Bool_t dtorOnly=kFALSE) const override;  Execute the container array destructor. ;  ; void Destructor (void *p, Bool_t dtorOnly=kFALSE) const override",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEmulatedMapProxy.html:86,Load,Loading,86,doc/master/classTEmulatedMapProxy.html,https://root.cern,https://root.cern/doc/master/classTEmulatedMapProxy.html,2,"['Load', 'optimiz']","['Loading', 'optimization']"
Performance,". ROOT: TEntryList Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TEntryList Class ReferenceTree Library. ; A List of entry numbers in a TTree or TChain. ; Note: It is recommended to use approaches such as TTreeReader::SetEntryRange or ROOT::RDataFrame instead of TEntryList if possible. Operations on entry lists. Add() - if the lists are for the same tree, adds all the entries of the second list to the first list. If the lists are for different trees, creates a TEntryList with 2 sublists for each TTree. If the lists are for TChains, merges the ones for the same trees and adds new sublists for the TTrees that were not included in the first TEntryList; Subtract() - if the lists are for the same TTree, removes the entries of the second list from the first list. If the lists are for TChains, loops over all sub-lists; GetEntry(n) - returns the n-th entry number; Next() - returns next entry number. Note, that this function is much faster than GetEntry, and it's called when GetEntry() is called for 2 or more indices in a row. TTree::Draw() and TChain::Draw(); Use option entrylist to write the results of TTree::Draw and TChain::Draw into an entry list. Example: tree->Draw("">>elist"", ""x<0 && y>0"", ""entrylist"");; TEntryList *elist = (TEntryList*)gDirectory->Get(""elist"");; gDirectory#define gDirectoryDefinition TDirectory.h:384; TEntryListA List of entry numbers in a TTree or TChain.Definition TEntryList.h:26; ; Example of Loop on TEntryList with a TChain; void loopChain() {; TFile *fe = TFile::Open(""myelist.root"");; TEntryList *myelist = (TEntryList*)fe->Get(""myelist"");; TChain *chain = new TChain(""ntuple"");; chain->Add(""hsimple.root"");; chain->Add(""hsimple2.root"");; Long64_t listEntries = myelist->GetN();; Long64_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEntryList.html:79,Load,Loading,79,doc/master/classTEntryList.html,https://root.cern,https://root.cern/doc/master/classTEntryList.html,1,['Load'],['Loading']
Performance,". ROOT: TEntryListArray Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TEntryListArray Class ReferenceTree Library. ; A list of entries and subentries in a TTree or TChain. ; TEntryListArray is an extension of TEntryList, used to hold selected entries and subentries (sublists) for when the user has a TTree with containers (vectors, arrays, ...). Usage with TTree::Draw to select entries and subentries. To fill a list elist; tree->Draw("">> elist"", ""x > 0"", ""entrylistarray"");`; ; To use a list to select entries and subentries; tree->SetEntryList(elist);; tree->Draw(""y"");; tree->Draw(""z"");; Its main purpose is to improve the performance of a code that needs to apply complex cuts on TTree::Draw multiple times. After the first call above to TTree::Draw, a TEntryListArray is created and filled with the entries and the indices of the arrays that satisfied the selection cut (x > 0). In the subsequent calls to TTree::Draw, only these entries / subentries are used to fill histograms. About the class; The class derives from TEntryList and can be used basically in the same way. This same class is used to keep entries and subentries, so there are two types of TEntryListArray's:. The ones that only hold subentries; fEntry is set to the entry# for which the subentries correspond; fSubLists must be 0. The ones that hold entries and eventually lists with subentries in fSubLists.; fEntry = -1 for those; If there are no sublists for a given entry, all the subentries will be used in the selection. Additions with respect to TEntryList. Data members:; fSubLists: a container to hold the sublists; fEntry: the entry number if the list is used to hold subentries; fLastSubListQueried and fSubListIter: a pointer to the last sublist queried and an iterator to re",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEntryListArray.html:84,Load,Loading,84,doc/master/classTEntryListArray.html,https://root.cern,https://root.cern/doc/master/classTEntryListArray.html,2,"['Load', 'perform']","['Loading', 'performance']"
Performance,". ROOT: TEntryListBlock Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TEntryListBlock Class ReferenceTree Library. ; Used by TEntryList to store the entry numbers. ; There are 2 ways to represent entry numbers in a TEntryListBlock:. as bits, where passing entry numbers are assigned 1, not passing - 0; as a simple array of entry numbers; storing the numbers of entries that pass; storing the numbers of entries that don't pass. In both cases, a UShort_t* is used. The second option is better in case less than 1/16 or more than 15/16 of entries pass the selection, and the representation can be changed by calling OptimizeStorage() function. When the block is being filled, it's always stored as bits, and the OptimizeStorage() function is called by TEntryList when it starts filling the next block. If Enter() or Remove() is called after OptimizeStorage(), representation is again changed to 1). Operations on blocks (see also function comments). Merge() - adds all entries from one block to the other. If the first block uses array representation, it's changed to bits representation only if the total number of passing entries is still less than kBlockSize; GetEntry(n) - returns n-th non-zero entry.; Next() - return next non-zero entry. In case of representation 1), Next() is faster than GetEntry() . Definition at line 43 of file TEntryListBlock.h. Public Types; enum  { kBlockSize = 4000; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEntryListBlock.html:84,Load,Loading,84,doc/master/classTEntryListBlock.html,https://root.cern,https://root.cern/doc/master/classTEntryListBlock.html,3,"['Load', 'Optimiz']","['Loading', 'OptimizeStorage']"
Performance,". ROOT: TEntryListFromFile Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; List of all members ; TEntryListFromFile Class ReferenceTree Library. ; Manages entry lists from different files, when they are not loaded in memory at the same time. ; This entry list should only be used when processing a TChain (see TChain::SetEntryList() function). File naming convention:; by default, filename_elist.root is used, where filename is the name of the chain element.; xxx$xxx.root - $ sign is replaced by the name of the chain element If the list name is not specified (by passing filename_elist.root/listname to the TChain::SetEntryList() function, the first object of class TEntryList in the file is taken. It is assumed that there are as many lists, as there are chain elements, and they are in the same order. If one of the list files can't be opened, or there is an error reading a list from the file, this list is skipped and the entry loop continues on the next list. ; Definition at line 40 of file TEntryListFromFile.h. Public Member Functions;  TEntryListFromFile ();  ;  TEntryListFromFile (const char *filename, const char *listname, Int_t nfiles);  File naming convention: ;  ;  ~TEntryListFromFile () override;  d-tor ;  ; void Add (const TEntryList *) override;  Add 2 entry lists. ;  ; Int_t Contains (Long64_t, TTree *) override;  ; bool Enter (Long64_t, const char *, const char *) override;  ; bool Enter (Long64_t, TTree *) override;  Add entry #entry to the list. ;  ; TEntryList * GetCurrentList () const override;  ; virtual Long64_t GetEntries ();  Returns the total number of entries in the list. ;  ; virtual Long64_t GetEntriesFast () const;  ; Long64_t GetEntry (Long64_t index) override;  Returns entry #index See also Next() for a faster alternative. ;  ; Long64",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEntryListFromFile.html:87,Load,Loading,87,doc/master/classTEntryListFromFile.html,https://root.cern,https://root.cern/doc/master/classTEntryListFromFile.html,2,"['Load', 'load']","['Loading', 'loaded']"
Performance,". ROOT: TEnum Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Types |; Private Attributes |; List of all members ; TEnum Class Reference. ; The TEnum class implements the enum type. ; Definition at line 33 of file TEnum.h. Public Types; enum  ESearchAction { kNone = 0; , kAutoload = 1; , kInterpLookup = 2; , kALoadAndInterpLookup = 3; };  ;  Public Types inherited from TDictionary; typedef const void * DeclId_t;  ; enum class  EMemberSelection { kNoUsingDecls; , kOnlyUsingDecls; , kAlsoUsingDecls; };  Kinds of members to include in lists. More...;  ; enum  ESTLType { ;   kNone = ROOT::kNotSTL; , kVector = ROOT::kSTLvector; , kList = ROOT::kSTLlist; , kForwardlist = ROOT::kSTLforwardlist; , ;   kDeque = ROOT::kSTLdeque; , kMap = ROOT::kSTLmap; , kMultimap = ROOT::kSTLmultimap; , kSet = ROOT::kSTLset; , ;   kMultiset = ROOT::kSTLmultiset; , kUnorderedSet = ROOT::kSTLunorderedset; , kUnorderedMultiset = ROOT::kSTLunorderedmultiset; , kUnorderedMap = ROOT::kSTLunorderedmap; , ;   kUnorderedMultimap = ROOT::kSTLunorderedmultimap; , kBitset = ROOT::kSTLbitset. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TEnum ();  ;  TEnum (const char *name, DeclId_t declid, TClass *cls);  Constructor for TEnum class. ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEnum.html:74,Load,Loading,74,doc/master/classTEnum.html,https://root.cern,https://root.cern/doc/master/classTEnum.html,1,['Load'],['Loading']
Performance,". ROOT: TEnum Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Types |; Private Attributes |; List of all members ; TEnum Class Reference. ; The TEnum class implements the enum type. ; Definition at line 33 of file TEnum.h. Public Types; enum  ESearchAction { kNone = 0; , kAutoload = 1; , kInterpLookup = 2; , kALoadAndInterpLookup = 3; };  ;  Public Types inherited from TDictionary; typedef const void * DeclId_t;  ; enum class  EMemberSelection { kNoUsingDecls; , kOnlyUsingDecls; , kAlsoUsingDecls; };  Kinds of members to include in lists. More...;  ; enum  ESTLType { ;   kNone = ROOT::kNotSTL; , kVector = ROOT::kSTLvector; , kList = ROOT::kSTLlist; , kForwardlist = ROOT::kSTLforwardlist; , ;   kDeque = ROOT::kSTLdeque; , kMap = ROOT::kSTLmap; , kMultimap = ROOT::kSTLmultimap; , kSet = ROOT::kSTLset; , ;   kMultiset = ROOT::kSTLmultiset; , kUnorderedSet = ROOT::kSTLunorderedset; , kUnorderedMultiset = ROOT::kSTLunorderedmultiset; , kUnorderedMap = ROOT::kSTLunorderedmap; , ;   kUnorderedMultimap = ROOT::kSTLunorderedmultimap; , kBitset = ROOT::kSTLbitset. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TEnum ();  ;  TEnum (const char *name, DeclId_t declid, TClass *cls);  Constructor for TEnum class. ;  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTEnum.html:73,Load,Loading,73,doc/v632/classTEnum.html,https://root.cern,https://root.cern/doc/v632/classTEnum.html,1,['Load'],['Loading']
Performance,". ROOT: TEnumConstant Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TEnumConstant Class Reference. ; The TEnumConstant class implements the constants of the enum type. ; Definition at line 29 of file TEnumConstant.h. Public Member Functions;  TEnumConstant ();  ;  TEnumConstant (DataMemberInfo_t *info, const char *name, Long64_t value, TEnum *type);  Constructor of the TEnumConstant. ;  ; virtual ~TEnumConstant ();  Destructor. ;  ; void * GetAddress () const override;  Return address of global. ;  ; const char * GetFullTypeName () const override;  Get full type description of global variable, e,g.: ""class TDirectory*"". ;  ; const TEnum * GetType () const;  ; const char * GetTypeName () const override;  Get type of global variable, e,g.: ""class TDirectory*"" -> ""TDirectory"". ;  ; Long64_t GetValue () const;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGlobal;  TGlobal (const TGlobal &);  Copy constructor. ;  ;  TGlobal (DataMemberInfo_t *info=nullptr);  pointer to CINT data member info ;  ; virtual ~TGlobal ();  TGlobal dtor deletes adopted CINT DataMemberInfo object. ;  ; virtual Int_t GetArrayDim () const;  Return number of array dimensions. ;  ; virtual DeclId_t GetDeclId () const;  ; virtual Int_t GetMaxIndex (Int_t dim) const;  Return maximum index for array dimension ""dim"". ;  ; TClass * IsA () const override;  ; virtual Bool_t IsValid ();  Return true if this global object is pointing to a currently loaded global. ;  ; TGlobal & operator= (const TGlobal &);  Assignment operator. ;  ; Long_t Property () const override;  Get property description word. For meaning of bits see EProperty. ;  ; void Streamer (TBuffer ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEnumConstant.html:82,Load,Loading,82,doc/master/classTEnumConstant.html,https://root.cern,https://root.cern/doc/master/classTEnumConstant.html,1,['Load'],['Loading']
Performance,". ROOT: TEnv Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TEnv Class ReferenceCore ROOT classes » Base ROOT classes. ; The TEnv class reads config files, by default named .rootrc. ; Three types of config files are read: global, user and local files. The global file is $ROOTSYS/etc/system<name> (or ROOTETCDIR/system<name>) the user file is $HOME/<name> and the local file is ./<name>. By setting the shell variable ROOTENV_NO_HOME=1 the reading of the $HOME/<name> resource file will be skipped. This might be useful in case the home directory resides on an auto-mounted remote file system and one wants to avoid this file system from being mounted.; The format of the .rootrc file is similar to the .Xdefaults format: [+]<SystemName>.<RootName|ProgName>.<name>[(type)]: <value>; valueOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void valueDefinition TGWin32VirtualXProxy.cxx:142; typeOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char Pixmap_t Pixmap_t PictureAttributes_t attr const char char ret_data h unsigned char height h Atom_t Int_t ULong_t ULong_t unsigned char prop_list Atom_t Atom_t Atom_t Time_t typeDefinition TGW",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEnv.html:73,Load,Loading,73,doc/master/classTEnv.html,https://root.cern,https://root.cern/doc/master/classTEnv.html,1,['Load'],['Loading']
Performance,". ROOT: TEnvRec Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TEnvRec Class Reference. . Definition at line 86 of file TEnv.h. Public Member Functions;  TEnvRec ();  ;  ~TEnvRec ();  TNamed destructor. ;  ; EEnvLevel GetLevel () const;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetType () const;  ; const char * GetValue () const;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py); ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEnvRec.html:76,Load,Loading,76,doc/master/classTEnvRec.html,https://root.cern,https://root.cern/doc/master/classTEnvRec.html,1,['Load'],['Loading']
Performance,". ROOT: TEveArrow Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TEveArrow Class ReferenceGraphics » 3D Graphics » Event Display. ; Class used for display of a thick arrow. ; Definition at line 21 of file TEveArrow.h. Public Member Functions;  TEveArrow (Float_t xVec=0, Float_t yVec=0, Float_t zVec=1, Float_t xOrg=0, Float_t yOrg=0, Float_t zOrg=0);  ;  ~TEveArrow () override;  ; void ComputeBBox () override;  Compute bounding-box of the arrow. ;  ; Float_t GetConeL () const;  ; Float_t GetConeR () const;  ; Int_t GetDrawQuality () const;  ; TObject * GetObject (const TEveException &) const override;  Get a TObject associated with this render-element. ;  ; TEveVector GetOrigin ();  ; Float_t GetTubeR () const;  ; TEveVector GetVector ();  ; TClass * IsA () const override;  ; void Paint (Option_t *option="""") override;  Paint object. ;  ; TEveVector & RefOrigin ();  ; TEveVector & RefVector ();  ; void SetConeL (Float_t x);  ; void SetConeR (Float_t x);  ; void SetDrawQuality (Int_t q);  ; void SetOrigin (const TEveVector &o);  ; void SetOrigin (Float_t x, Float_t y, Float_t z);  ; void SetTubeR (Float_t x);  ; void SetVector (const TEveVector &v);  ; void SetVector (Float_t x, Float_t y, Float_t z);  ; void StampGeom ();  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TEveElement;  TEveElement ();  Default constructor. ;  ;  TEveElement (Color_t &main_color);  Constructor. ;  ;  TEveElement (const TEveElement &e);  Copy constructor. ;  ; virtual ~TEveElement ();  Destructor. ;  ; virtual Bool_t AcceptElement (TEveElement *el);  Check if el can be added to this element. ;  ; virtual void AddElement (TEveElement *el);  Add el to the list of children. ;  ; v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveArrow.html:78,Load,Loading,78,doc/master/classTEveArrow.html,https://root.cern,https://root.cern/doc/master/classTEveArrow.html,1,['Load'],['Loading']
Performance,". ROOT: TEveBox Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TEveBox Class ReferenceGraphics » 3D Graphics » Event Display. ; 3D box with arbitrary vertices (cuboid). ; Vertices 0-3 specify the ""bottom"" rectangle in clockwise direction and vertices 4-7 the ""top"" rectangle so that 4 is above 0, 5 above 1 and so on.; If vertices are provided some local coordinates the transformation matrix of the element should also be set (but then the memory usage is increased by the size of the TEveTrans object).; Currently only supports 3D -> 2D projections. ; Definition at line 21 of file TEveBox.h. Public Member Functions;  TEveBox (const char *n=""TEveBox"", const char *t="""");  Constructor. ;  ;  ~TEveBox () override;  Destructor. ;  ; void ComputeBBox () override;  Compute bounding-box of the data. ;  ; const Float_t * GetVertex (Int_t i) const;  ; TClass * IsA () const override;  ; TClass * ProjectedClass (const TEveProjection *p) const override;  Virtual from TEveProjectable, return TEveBoxProjected class. ;  ; void SetVertex (Int_t i, const Float_t *v);  Set vertex 'i'. ;  ; void SetVertex (Int_t i, Float_t x, Float_t y, Float_t z);  Set vertex 'i'. ;  ; void SetVertices (const Float_t *vs);  Set vertices. ;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TEveShape;  TEveShape (const char *n=""TEveShape"", const char *t="""");  Constructor. ;  ;  ~TEveShape () override;  Destructor. ;  ; void CopyVizParams (const TEveElement *el) override;  Copy visualization parameters from element el. ;  ; virtual Bool_t GetDrawFrame () const;  ; virtual Color_t GetFillColor () const;  ; virtual Bool_t GetHighlightFrame () const;  ; virtual Color_t GetLineColor () const;  ; virtua",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveBox.html:76,Load,Loading,76,doc/master/classTEveBox.html,https://root.cern,https://root.cern/doc/master/classTEveBox.html,1,['Load'],['Loading']
Performance,". ROOT: TEveBoxProjected Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TEveBoxProjected Class ReferenceGraphics » 3D Graphics » Event Display. ; Projection of TEveBox. ; Definition at line 56 of file TEveBox.h. Public Member Functions;  TEveBoxProjected (const char *n=""TEveBoxProjected"", const char *t="""");  Constructor. ;  ;  ~TEveBoxProjected () override;  Destructor. ;  ; void ComputeBBox () override;  Compute bounding-box, virtual from TAttBBox. ;  ; TEveElement * GetProjectedAsElement () override;  Returns this projected dynamic-casted to TEveElement. ;  ; TClass * IsA () const override;  ; void SetProjection (TEveProjectionManager *mng, TEveProjectable *model) override;  This is virtual method from base-class TEveProjected. ;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UpdateProjection () override;  Re-project the box. ;  ;  Public Member Functions inherited from TEveShape;  TEveShape (const char *n=""TEveShape"", const char *t="""");  Constructor. ;  ;  ~TEveShape () override;  Destructor. ;  ; void CopyVizParams (const TEveElement *el) override;  Copy visualization parameters from element el. ;  ; virtual Bool_t GetDrawFrame () const;  ; virtual Color_t GetFillColor () const;  ; virtual Bool_t GetHighlightFrame () const;  ; virtual Color_t GetLineColor () const;  ; virtual Float_t GetLineWidth () const;  ; virtual Bool_t GetMiniFrame () const;  ; TClass * IsA () const override;  ; void Paint (Option_t *option="""") override;  Paint this object. Only direct rendering is supported. ;  ; virtual void SetDrawFrame (Bool_t f);  ; virtual void SetFillColor (Color_t c);  ; virtual void SetHighlightFrame (Bool_t f);  ; virtual voi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveBoxProjected.html:85,Load,Loading,85,doc/master/classTEveBoxProjected.html,https://root.cern,https://root.cern/doc/master/classTEveBoxProjected.html,1,['Load'],['Loading']
Performance,". ROOT: TEveBoxSet Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Static Protected Member Functions |; Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TEveBoxSet Class ReferenceGraphics » 3D Graphics » Event Display. ; Collection of 3D primitives (fixed-size boxes, boxes of different sizes, or arbitrary sexto-epipeds, cones). ; Each primitive can be assigned a signal value and a TRef.; A collection of 3D-markers. The way how they are defined depends on the fBoxType data-member.; kBT_FreeBox arbitrary box: specify 8*(x,y,z) box corners; kBT_AABox axis-aligned box: specify (x,y,z) and (w, h, d); kBT_AABoxFixedDim axis-aligned box w/ fixed dimensions: specify (x,y,z) also set fDefWidth, fDefHeight and fDefDepth; kBT_Cone cone defined with position, axis-vector and radius; EllipticCone cone with elliptic base (specify another radius and angle in deg). Each primitive can be assigned:. Color or signal value. Thresholds and signal-to-color mapping can then be set dynamically via the TEveRGBAPalette class.; External TObject* (stored as TRef). See also base-class TEveDigitSet for more information. Tutorial: tutorials/eve/boxset_test.C ; Definition at line 21 of file TEveBoxSet.h. Classes; struct  BAABox_t;  ; struct  BAABoxFixedDim_t;  ; struct  BCone_t;  ; struct  BEllipticCone_t;  ; struct  BFreeBox_t;  ; struct  BHex_t;  ; struct  BOrigin_t;  . Public Types; enum  EBoxType_e { ;   kBT_Undef; , kBT_FreeBox; , kBT_AABox; , kBT_AABoxFixedDim; , ;   kBT_Cone; , kBT_EllipticCone; , kBT_Hex. };  ;  Public Types inherited from TEveDigitSet; typedef void(* Callback_foo) (TEveDigitSet *, Int_t, TObject *);  ; enum  ERenderMode_e { kRM_AsIs; , kRM_Line; , kRM_Fill; };  ; typedef TString(* TooltipCB_foo) (TEveDigitSet *, Int_t);  ;  Public Types inherited from TEveElement; enum  EChangeBi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveBoxSet.html:79,Load,Loading,79,doc/master/classTEveBoxSet.html,https://root.cern,https://root.cern/doc/master/classTEveBoxSet.html,1,['Load'],['Loading']
Performance,". ROOT: TEveBrowser Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TEveBrowser Class ReferenceGraphics » 3D Graphics » Event Display. ; Specialization of TRootBrowser for Eve. ; Definition at line 129 of file TEveBrowser.h. Public Member Functions;  TEveBrowser (UInt_t w, UInt_t h);  Constructor. ;  ;  ~TEveBrowser () override;  ; void CloseTab (Int_t id) override;  Virtual from TRootBrowser. Need to intercept closing of Eve tabs. ;  ; void CloseWindow () override;  Virtual from TGMainFrame. Calls TEveManager::Terminate(). ;  ; void EveMenu (Int_t id);  Handle events from Eve menu. ;  ; TGFileBrowser * GetFileBrowser () const;  Returns the default file-browser. ;  ; TGMenuBar * GetMenuBar () const;  ; TGHorizontalFrame * GetTopMenuFrame () const;  ; void HideBottomTab ();  Hide the bottom tab (usually holding command-line widget). ;  ; void InitPlugins (Option_t *opt=""FI"");  Initialize standard plugins. ;  ; TClass * IsA () const override;  ; TGFileBrowser * MakeFileBrowser (Bool_t make_default=kFALSE);  Create a file-browser. ;  ; void ReallyDelete () override;  Override from TRootBrowser. ;  ; void SanitizeTabCounts ();  TRootBrowser keeps (somewhat unnecessarily) counters for number ob tabs on each position. ;  ; void SetFileBrowser (TGFileBrowser *b);  Set the default file browser. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TRootBrowser;  TRootBrowser (TBrowser *b, const char *name, Int_t x, Int_t y, UInt_t width, UInt_t height, Option_t *opt="""", Bool_t initshow=kTRUE);  Create browser with a specified width and height and at position x, y. ;  ;  TRootBrowser (TBrowser *b=nullptr, const ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveBrowser.html:80,Load,Loading,80,doc/master/classTEveBrowser.html,https://root.cern,https://root.cern/doc/master/classTEveBrowser.html,1,['Load'],['Loading']
Performance,". ROOT: TEveCalo2D Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TEveCalo2D Class ReferenceGraphics » 3D Graphics » Event Display. ; Visualization of a calorimeter event data in 2D. ; Definition at line 200 of file TEveCalo.h. Public Types; typedef std::vector< TEveCaloData::vCellId_t * >::iterator vBinCells_i;  ; typedef std::vector< TEveCaloData::vCellId_t * > vBinCells_t;  ;  Public Types inherited from TEveElement; enum  EChangeBits { kCBColorSelection = (1ULL << ( 0 )); , kCBTransBBox = (1ULL << ( 1 )); , kCBObjProps = (1ULL << ( 2 )); , kCBVisibility = (1ULL << ( 3 )); };  ; typedef void(TEveElement::* ImplySelect_foo) ();  ; typedef List_t::const_iterator List_ci;  ; typedef List_t::iterator List_i;  ; typedef std::list< TEveElement * > List_t;  ; typedef void(TEveElement::* Select_foo) (Bool_t);  ; typedef Set_t::const_iterator Set_ci;  ; typedef Set_t::iterator Set_i;  ; typedef std::set< TEveElement * > Set_t;  ; typedef sLTI_t::iterator sLTI_i;  ; typedef sLTI_t::reverse_iterator sLTI_ri;  ; typedef std::set< TEveListTreeInfo > sLTI_t;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveCalo2D.html:79,Load,Loading,79,doc/master/classTEveCalo2D.html,https://root.cern,https://root.cern/doc/master/classTEveCalo2D.html,1,['Load'],['Loading']
Performance,". ROOT: TEveCalo3D Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TEveCalo3D Class ReferenceGraphics » 3D Graphics » Event Display. ; Visualization of a calorimeter event data in 3D. ; Definition at line 157 of file TEveCalo.h. Public Member Functions;  TEveCalo3D (TEveCaloData *d=nullptr, const char *n=""TEveCalo3D"", const char *t=""xx"");  Constructor. ;  ;  ~TEveCalo3D () override;  ; void ComputeBBox () override;  Fill bounding-box information of the base-class TAttBBox (virtual method). ;  ; Char_t GetFrameTransparency () const;  ; Float_t GetFrameWidth () const;  ; Bool_t GetRnrBarrelFrame () const;  ; Bool_t GetRnrEndCapFrame () const;  ; void GetRnrFrame (Bool_t &e, Bool_t &b) const;  ; TClass * IsA () const override;  ; void SetFrameTransparency (Char_t x);  ; void SetFrameWidth (Float_t w);  ; void SetRnrBarrelFrame (Bool_t r);  ; void SetRnrEndCapFrame (Bool_t r);  ; void SetRnrFrame (Bool_t e, Bool_t b);  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TEveCaloViz;  TEveCaloViz (TEveCaloData *data=nullptr, const char *n=""TEveCaloViz"", const char *t="""");  ;  ~TEveCaloViz () override;  Destructor. ;  ; Bool_t AssertCellIdCache () const;  Assert cell id cache is ok. ;  ; TEveRGBAPalette * AssertPalette ();  Make sure the TEveRGBAPalette pointer is not null. ;  ; Bool_t CellInEtaPhiRng (TEveCaloData::CellData_t &) const;  Returns true if given cell is in the ceta phi range. ;  ; virtual void CellSelectionChanged ();  ; void DataChanged ();  Update setting and cache on data changed. ;  ; TEveElement * ForwardEdit () override;  Management of selection state and ownership of selected cell list is done in TEveCaloData. ;  ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveCalo3D.html:79,Load,Loading,79,doc/master/classTEveCalo3D.html,https://root.cern,https://root.cern/doc/master/classTEveCalo3D.html,1,['Load'],['Loading']
Performance,". ROOT: TEveCaloData Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TEveCaloData Class ReferenceabstractGraphics » 3D Graphics » Event Display. ; A central manager for calorimeter event data. ; It provides a list of cells within requested phi and eta range. ; Definition at line 26 of file TEveCaloData.h. Classes; class  CellData_t;  Cell data inner structure. More...;  ; class  CellGeom_t;  Cell geometry inner structure. More...;  ; struct  CellId_t;  ; struct  RebinData_t;  ; struct  SliceInfo_t;  . Public Types; typedef std::vector< CellGeom_t >::const_iterator vCellGeom_ci;  ; typedef std::vector< CellGeom_t >::iterator vCellGeom_i;  ; typedef std::vector< CellGeom_t > vCellGeom_t;  ; typedef std::vector< CellId_t >::iterator vCellId_i;  ; typedef std::vector< CellId_t > vCellId_t;  ; typedef std::vector< SliceInfo_t >::iterator vSliceInfo_i;  ; typedef std::vector< SliceInfo_t > vSliceInfo_t;  ;  Public Types inherited from TEveElement; enum  EChangeBits { kCBColorSelection = (1ULL << ( 0 )); , kCBTransBBox = (1ULL << ( 1 )); , kCBObjProps = (1ULL << ( 2 )); , kCBVisibility = (1ULL << ( 3 )); };  ; typedef void(TEveElement::* ImplySelect_foo) ();  ; typedef List_t::const_iterator List_ci;  ; typedef List_t::iterator List_i;  ; typedef std::list< TEveElement * > List_t;  ; typedef void(TEveElement::* Select_foo) (Bool_t);  ; typedef Set_t::const_iterator Set_ci;  ; typedef Set_t::iterator Set_i;  ; typedef std::set< TEveElement * > Set_t;  ; typedef sLTI_t::iterator sLTI_i;  ; typedef sLTI_t::reverse_iterator sLTI_ri;  ; typedef std::set< TEveListTreeInfo > sLTI_t;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitM",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveCaloData.html:81,Load,Loading,81,doc/master/classTEveCaloData.html,https://root.cern,https://root.cern/doc/master/classTEveCaloData.html,1,['Load'],['Loading']
Performance,". ROOT: TEveCaloDataHist Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TEveCaloDataHist Class ReferenceGraphics » 3D Graphics » Event Display. ; A central manager for calorimeter data of an event written in TH2F. ; X axis is used for eta and Y axis for phi. ; Definition at line 297 of file TEveCaloData.h. Public Member Functions;  TEveCaloDataHist ();  Constructor. ;  ;  ~TEveCaloDataHist () override;  Destructor. ;  ; Int_t AddHistogram (TH2F *hist);  Add new slice to calo tower. ;  ; void DataChanged () override;  Update limits and notify data users. ;  ; void GetCellData (const TEveCaloData::CellId_t &id, TEveCaloData::CellData_t &data) const override;  Get cell geometry and value from cell ID. ;  ; void GetCellList (Float_t etaMin, Float_t etaMax, Float_t phi, Float_t phiRng, vCellId_t &out) const override;  Get list of cell IDs in given eta and phi range. ;  ; void GetEtaLimits (Double_t &min, Double_t &max) const override;  Get eta limits. ;  ; TH2F * GetHist (Int_t slice) const;  Get histogram in given slice. ;  ; void GetPhiLimits (Double_t &min, Double_t &max) const override;  Get phi limits. ;  ; THStack * GetStack ();  ; TClass * IsA () const override;  ; void Rebin (TAxis *ax, TAxis *ay, vCellId_t &in, Bool_t et, RebinData_t &out) const override;  Rebin. ;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TEveCaloData;  TEveCaloData (const char *n=""TEveCalData"", const char *t="""");  ;  ~TEveCaloData () override;  ; virtual void CellSelectionChanged ();  Tell users (TEveCaloViz instances using this data) that cell selection has changed and they should update selection cache if necessary. ;  ; Bool_t Empty () const;  ; void FillImpliedSelectedSet (Set_t &im",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveCaloDataHist.html:85,Load,Loading,85,doc/master/classTEveCaloDataHist.html,https://root.cern,https://root.cern/doc/master/classTEveCaloDataHist.html,1,['Load'],['Loading']
Performance,". ROOT: TEveCaloDataVec Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Attributes |; Private Member Functions |; List of all members ; TEveCaloDataVec Class ReferenceGraphics » 3D Graphics » Event Display. ; Calo data for universal cell geometry. ; Definition at line 239 of file TEveCaloData.h. Public Member Functions;  TEveCaloDataVec (Int_t nslices);  ;  ~TEveCaloDataVec () override;  Destructor. ;  ; Int_t AddSlice ();  Add new slice. ;  ; Int_t AddTower (Float_t etaMin, Float_t etaMax, Float_t phiMin, Float_t phiMax);  Add tower within eta/phi range. ;  ; void DataChanged () override;  Update limits and notify data users. ;  ; void FillSlice (Int_t slice, Float_t value);  Fill given slice in the current tower. ;  ; void FillSlice (Int_t slice, Int_t tower, Float_t value);  Fill given slice in a given tower. ;  ; void GetCellData (const TEveCaloData::CellId_t &id, TEveCaloData::CellData_t &data) const override;  Get cell geometry and value from cell ID. ;  ; std::vector< TEveCaloData::CellGeom_t > & GetCellGeom ();  ; void GetCellList (Float_t etaMin, Float_t etaMax, Float_t phi, Float_t phiRng, vCellId_t &out) const override;  Get list of cell-ids for given eta/phi range. ;  ; void GetEtaLimits (Double_t &min, Double_t &max) const override;  ; Int_t GetNCells ();  ; void GetPhiLimits (Double_t &min, Double_t &max) const override;  ; std::vector< Float_t > & GetSliceVals (Int_t slice);  ; TClass * IsA () const override;  ; void Rebin (TAxis *ax, TAxis *ay, vCellId_t &in, Bool_t et, RebinData_t &out) const override;  Rebin cells. ;  ; void SetAxisFromBins (Double_t epsX=0.001, Double_t epsY=0.001);  Set XY axis from cells geometry. ;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TEveCaloData;  TEveCaloDat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveCaloDataVec.html:84,Load,Loading,84,doc/master/classTEveCaloDataVec.html,https://root.cern,https://root.cern/doc/master/classTEveCaloDataVec.html,1,['Load'],['Loading']
Performance,". ROOT: TEveCaloLego Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TEveCaloLego Class ReferenceGraphics » 3D Graphics » Event Display. ; Visualization of calorimeter data as eta/phi histogram. ; Definition at line 250 of file TEveCalo.h. Public Types; enum  E2DMode_e { kValColor; , kValSize; , kValSizeOutline; };  ; enum  EBoxMode_e { kNone; , kFrontBack; , kBack; };  ; enum  EProjection_e { kAuto; , k3D; , k2D; };  ;  Public Types inherited from TEveElement; enum  EChangeBits { kCBColorSelection = (1ULL << ( 0 )); , kCBTransBBox = (1ULL << ( 1 )); , kCBObjProps = (1ULL << ( 2 )); , kCBVisibility = (1ULL << ( 3 )); };  ; typedef void(TEveElement::* ImplySelect_foo) ();  ; typedef List_t::const_iterator List_ci;  ; typedef List_t::iterator List_i;  ; typedef std::list< TEveElement * > List_t;  ; typedef void(TEveElement::* Select_foo) (Bool_t);  ; typedef Set_t::const_iterator Set_ci;  ; typedef Set_t::iterator Set_i;  ; typedef std::set< TEveElement * > Set_t;  ; typedef sLTI_t::iterator sLTI_i;  ; typedef sLTI_t::reverse_iterator sLTI_ri;  ; typedef std::set< TEveListTreeInfo > sLTI_t;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveCaloLego.html:81,Load,Loading,81,doc/master/classTEveCaloLego.html,https://root.cern,https://root.cern/doc/master/classTEveCaloLego.html,1,['Load'],['Loading']
Performance,". ROOT: TEveCaloViz Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TEveCaloViz Class ReferenceabstractGraphics » 3D Graphics » Event Display. ; Base class for calorimeter data visualization. ; See TEveCalo2D and TEveCalo3D for concrete implementations. ; Definition at line 27 of file TEveCalo.h. Public Member Functions;  TEveCaloViz (TEveCaloData *data=nullptr, const char *n=""TEveCaloViz"", const char *t="""");  ;  ~TEveCaloViz () override;  Destructor. ;  ; Bool_t AssertCellIdCache () const;  Assert cell id cache is ok. ;  ; TEveRGBAPalette * AssertPalette ();  Make sure the TEveRGBAPalette pointer is not null. ;  ; Bool_t CellInEtaPhiRng (TEveCaloData::CellData_t &) const;  Returns true if given cell is in the ceta phi range. ;  ; virtual void CellSelectionChanged ();  ; void DataChanged ();  Update setting and cache on data changed. ;  ; TEveElement * ForwardEdit () override;  Management of selection state and ownership of selected cell list is done in TEveCaloData. ;  ; TEveElement * ForwardSelection () override;  Management of selection state and ownership of selected cell list is done in TEveCaloData. ;  ; Bool_t GetAutoRange () const;  ; Float_t GetBackwardEndCapPos () const;  ; Float_t GetBarrelRadius () const;  ; TEveCaloData * GetData () const;  ; Color_t GetDataSliceColor (Int_t slice) const;  Get slice color from data. ;  ; Float_t GetDataSliceThreshold (Int_t slice) const;  Get threshold for given slice. ;  ; Float_t GetEndCapPos () const;  ; Float_t GetEta () const;  ; Float_t GetEtaMax () const;  ; Float_t GetEtaMin () const;  ; Float_t GetEtaRng () const;  ; Float_t GetForwardEndCapPos () const;  ; Float_t GetMaxTowerH () const;  ; Float_t GetMaxVal () const;  ; Float_t GetMaxValAbs () const;  ; TEveRGBAPalet",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveCaloViz.html:80,Load,Loading,80,doc/master/classTEveCaloViz.html,https://root.cern,https://root.cern/doc/master/classTEveCaloViz.html,2,"['Load', 'cache']","['Loading', 'cache']"
Performance,". ROOT: TEveCluster Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; List of all members ; TEveCluster Class Reference. . Definition at line 105 of file TEveVSDStructs.h. Public Member Functions;  TEveCluster ();  ;  ~TEveCluster () override;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class in",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveCluster.html:80,Load,Loading,80,doc/master/classTEveCluster.html,https://root.cern,https://root.cern/doc/master/classTEveCluster.html,1,['Load'],['Loading']
Performance,". ROOT: TEveCompositeFrame Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; Static Private Attributes |; Friends |; List of all members ; TEveCompositeFrame Class ReferenceabstractGraphics » 3D Graphics » Event Display. ; Abstract base-class for frame-slots that encompass EVE-windows (sub-classes of TEveWindow). ; The EVE-frame classes are managed by their embedded EVE-windows and mostly serve as an interface to particular ROOT widgets (sub-classes of TGCompositeFrame) they are embedded into.; This base-class, a sub-class of a vertical composite-frame, creates also the title-bar which can be used to interact with the embedded window. Optionally, the title-bar can be replaced with a mini-bar (a 4-pixel thin bar at the top). By clicking on the mini-bar, the title-bar is restored.; Sub-classes provide for specific behaviour and expectations of individual ROOT GUI container frames.; POSSIBLE EXTENSIONS; No frame is drawn around this composite-frame - frame style could be available as a (static) member.; Menus of embedded windows could also be managed - hidden or transposed to a top-level menubar. ; Definition at line 39 of file TEveWindow.h. Public Types; typedef TGFrame *(* IconBarCreator_foo) (TEveCompositeFrame *, TGCompositeFrame *, Int_t);  ;  Public Types inherited from TGWindow; enum  EEditMode { ;   kEditEnable = 0; , kEditDisable = (1ULL << ( 0 )); , kEditDisableEvents = (1ULL << ( 1 )); , kEditDisableGrab = (1ULL << ( 2 )); , ;   kEditDisableLayout = (1ULL << ( 3 )); , kEditDisableResize = (1ULL << ( 4 )); , kEditDisableHeight = (1ULL << ( 5 )); , kEditDisableWidth = (1ULL << ( 6 )); , ;   kEditDisableBtnEnable = (1ULL << ( 7 )); , kEditDisableKeyEnable = (1ULL << ( 8 )). };  ; enum  EStatusBits { kIsHtmlView = (1ULL << ( 14 )); };  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveCompositeFrame.html:87,Load,Loading,87,doc/master/classTEveCompositeFrame.html,https://root.cern,https://root.cern/doc/master/classTEveCompositeFrame.html,1,['Load'],['Loading']
Performance,". ROOT: TEveCompositeFrameInMainFrame Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TEveCompositeFrameInMainFrame Class ReferenceGraphics » 3D Graphics » Event Display. ; An EVE window-slot contained within a TGMainFrame. ; Definition at line 111 of file TEveWindow.h. Public Member Functions;  TEveCompositeFrameInMainFrame (TGCompositeFrame *parent, TEveWindow *eve_parent, TGMainFrame *mf);  Constructor. ;  ;  ~TEveCompositeFrameInMainFrame () override;  Destructor. ;  ; void Destroy () override;  Virtual function called from eve side when the frame should be destroyed. ;  ; TEveWindow * GetOriginalContainer () const;  ; TEveWindow * GetOriginalSlot () const;  ; TClass * IsA () const override;  ; void MainFrameClosed ();  Slot for main-frame's ""CloseWindow()"" signal. ;  ; void SetOriginalSlotAndContainer (TEveWindow *slot, TEveWindow *container);  Set the container where to return the contained window on destruction. ;  ; void SomeWindowClosed (TEveWindow *w);  Slot called when a window is closed ... we check that this was not our original container. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void WindowNameChanged (const TString &name) override;  Update widgets using window's name or title. ;  ;  Public Member Functions inherited from TEveCompositeFrame;  TEveCompositeFrame (TGCompositeFrame *gui_parent, TEveWindow *eve_parent);  Constructor. ;  ;  ~TEveCompositeFrame () override;  If fEveWindow != 0 we are being deleted from the ROOT GUI side. ;  ; virtual void AcquireEveWindow (TEveWindow *ew);  Accept window and increase its deny-destroy count. ;  ; void ActionPressed ();  The action-button of the title-bar was pressed. ;  ; void FlipTitleBarState ();  Ch",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveCompositeFrameInMainFrame.html:98,Load,Loading,98,doc/master/classTEveCompositeFrameInMainFrame.html,https://root.cern,https://root.cern/doc/master/classTEveCompositeFrameInMainFrame.html,1,['Load'],['Loading']
Performance,". ROOT: TEveCompositeFrameInPack Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TEveCompositeFrameInPack Class ReferenceGraphics » 3D Graphics » Event Display. ; An EVE window-slot contained within one frame of a TGPack. ; Definition at line 147 of file TEveWindow.h. Public Member Functions;  TEveCompositeFrameInPack (TGCompositeFrame *parent, TEveWindow *eve_parent, TGPack *pack);  Constructor. ;  ;  ~TEveCompositeFrameInPack () override;  Destructor. ;  ; void Destroy () override;  Virtual function called from eve side when the frame should be destroyed. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TEveCompositeFrame;  TEveCompositeFrame (TGCompositeFrame *gui_parent, TEveWindow *eve_parent);  Constructor. ;  ;  ~TEveCompositeFrame () override;  If fEveWindow != 0 we are being deleted from the ROOT GUI side. ;  ; virtual void AcquireEveWindow (TEveWindow *ew);  Accept window and increase its deny-destroy count. ;  ; void ActionPressed ();  The action-button of the title-bar was pressed. ;  ; void FlipTitleBarState ();  Change display-state of the title-bar / mini-bar. ;  ; TEveWindow * GetEveParentAsWindow () const;  Returns eve-parent dynamic-casted to TEveWindow. ;  ; TEveWindow * GetEveWindow () const;  ; virtual void HideAllDecorations ();  Hide title-bar and mini-bar. ;  ; virtual TEveWindow * RelinquishEveWindow (Bool_t reparent=kTRUE);  Remove window and decrease its deny-destroy count. ;  ; virtual void SetCurrent (Bool_t curr);  Set current state of this frame. ;  ; virtual void SetShowTitleBar (Bool_t show);  Set state of title-bar. ;  ; virtual void ShowNormalDecorations (); ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveCompositeFrameInPack.html:93,Load,Loading,93,doc/master/classTEveCompositeFrameInPack.html,https://root.cern,https://root.cern/doc/master/classTEveCompositeFrameInPack.html,1,['Load'],['Loading']
Performance,". ROOT: TEveCompositeFrameInTab Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TEveCompositeFrameInTab Class ReferenceGraphics » 3D Graphics » Event Display. ; An EVE window-slot contained within one tab of a TGTab. ; Definition at line 171 of file TEveWindow.h. Public Member Functions;  TEveCompositeFrameInTab (TGCompositeFrame *parent, TEveWindow *eve_parent, TGTab *tab);  Constructor. ;  ;  ~TEveCompositeFrameInTab () override;  Destructor. ;  ; void Destroy () override;  Virtual function called from eve side when the frame should be destroyed. ;  ; TClass * IsA () const override;  ; void SetCurrent (Bool_t curr) override;  Set current state of this frame. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void WindowNameChanged (const TString &name) override;  Update widgets using window's name or title. ;  ;  Public Member Functions inherited from TEveCompositeFrame;  TEveCompositeFrame (TGCompositeFrame *gui_parent, TEveWindow *eve_parent);  Constructor. ;  ;  ~TEveCompositeFrame () override;  If fEveWindow != 0 we are being deleted from the ROOT GUI side. ;  ; virtual void AcquireEveWindow (TEveWindow *ew);  Accept window and increase its deny-destroy count. ;  ; void ActionPressed ();  The action-button of the title-bar was pressed. ;  ; void FlipTitleBarState ();  Change display-state of the title-bar / mini-bar. ;  ; TEveWindow * GetEveParentAsWindow () const;  Returns eve-parent dynamic-casted to TEveWindow. ;  ; TEveWindow * GetEveWindow () const;  ; virtual void HideAllDecorations ();  Hide title-bar and mini-bar. ;  ; virtual TEveWindow * RelinquishEveWindow (Bool_t reparent=kTRUE);  Remove window and decrease its deny-destr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveCompositeFrameInTab.html:92,Load,Loading,92,doc/master/classTEveCompositeFrameInTab.html,https://root.cern,https://root.cern/doc/master/classTEveCompositeFrameInTab.html,1,['Load'],['Loading']
Performance,". ROOT: TEveCompound Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TEveCompound Class ReferenceGraphics » 3D Graphics » Event Display. ; Description of TEveCompound. ; Definition at line 23 of file TEveCompound.h. Public Member Functions;  TEveCompound (const char *n=""TEveCompound"", const char *t="""", Bool_t doColor=kTRUE, Bool_t doTransparency=kFALSE);  Constructor. ;  ;  ~TEveCompound () override;  ; void AddElement (TEveElement *el) override;  Call base-class implementation. ;  ; void CloseCompound ();  ; void FillImpliedSelectedSet (Set_t &impSelSet) override;  Recurse on all children that are in this compound and call the base-class version. ;  ; TClass * IsA () const override;  ; Bool_t IsCompoundOpen () const;  ; void OpenCompound ();  ; TClass * ProjectedClass (const TEveProjection *p) const override;  Virtual from TEveProjectable, returns TEveCompoundProjected class. ;  ; void RemoveElementLocal (TEveElement *el) override;  Decompoundofy el, call base-class version. ;  ; void RemoveElementsLocal () override;  Decompoundofy children, call base-class version. ;  ; void SetMainColor (Color_t color) override;  SetMainColor for the compound. ;  ; void SetMainTransparency (Char_t t) override;  SetMainTransparency for the compound. ;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TEveElementList;  TEveElementList (const char *n=""TEveElementList"", const char *t="""", Bool_t doColor=kFALSE, Bool_t doTransparency=kFALSE);  Constructor. ;  ;  TEveElementList (const TEveElementList &e);  Copy constructor. ;  ;  ~TEveElementList () override;  ; Bool_t AcceptElement (TEveElement *el) override;  Check if TEveElement el is inherited from fChildClass. ;  ; TEveElementList *",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveCompound.html:81,Load,Loading,81,doc/master/classTEveCompound.html,https://root.cern,https://root.cern/doc/master/classTEveCompound.html,1,['Load'],['Loading']
Performance,". ROOT: TEveCompoundProjected Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; List of all members ; TEveCompoundProjected Class ReferenceGraphics » 3D Graphics » Event Display. ; Description of TEveCompoundProjected. ; Definition at line 60 of file TEveCompound.h. Public Member Functions;  TEveCompoundProjected ();  Constructor. ;  ;  ~TEveCompoundProjected () override;  ; TEveElement * GetProjectedAsElement () override;  Returns this projected dynamic-casted to TEveElement. ;  ; TClass * IsA () const override;  ; void SetMainColor (Color_t color) override;  Revert back to the behaviour of TEveElement as color is propagated: ;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UpdateProjection () override;  ;  Public Member Functions inherited from TEveCompound;  TEveCompound (const char *n=""TEveCompound"", const char *t="""", Bool_t doColor=kTRUE, Bool_t doTransparency=kFALSE);  Constructor. ;  ;  ~TEveCompound () override;  ; void AddElement (TEveElement *el) override;  Call base-class implementation. ;  ; void CloseCompound ();  ; void FillImpliedSelectedSet (Set_t &impSelSet) override;  Recurse on all children that are in this compound and call the base-class version. ;  ; Bool_t IsCompoundOpen () const;  ; void OpenCompound ();  ; TClass * ProjectedClass (const TEveProjection *p) const override;  Virtual from TEveProjectable, returns TEveCompoundProjected class. ;  ; void RemoveElementLocal (TEveElement *el) override;  Decompoundofy el, call base-class version. ;  ; void RemoveElementsLocal () override;  Decompoundofy children, call base-class version. ;  ; void SetMainTransparency (Char_t t) override;  SetMainTransparency for the compound. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited fr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveCompoundProjected.html:90,Load,Loading,90,doc/master/classTEveCompoundProjected.html,https://root.cern,https://root.cern/doc/master/classTEveCompoundProjected.html,1,['Load'],['Loading']
Performance,". ROOT: TEveContextMenu Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TEveContextMenu Class ReferenceGraphics » 3D Graphics » Event Display. ; Specialization of TContext menu. ; Provide a window manager hint that ensures proper placement of popup on Cocoa. ; Definition at line 430 of file TEveWindow.h. Public Member Functions;  TEveContextMenu (const char *name, const char *title=""Eve context menu"");  Constructor. ;  ; TClass * IsA () const override;  ; void SetupAndPopup (TGWindow *button, TObject *obj);  Position the popup below given button and show context menu for object obj. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TContextMenu;  TContextMenu (const char *name, const char *title=""Context sensitive popup menu"");  Create a context menu. ;  ; virtual ~TContextMenu ();  Destroy a context menu. ;  ; virtual void Action (TClassMenuItem *classmenuitem);  Action to be performed when this menu item is selected. ;  ; void Action (TMethod *method);  ; virtual void Action (TObject *object, TMethod *method);  Action to be performed when this menu item is selected. ;  ; virtual void Action (TObject *object, TToggle *toggle);  Action to be performed when this toggle menu item is selected. ;  ; void Action (TToggle *toggle);  ; virtual const char * CreateArgumentTitle (TMethodArg *argument);  Create string describing argument (for use in dialog box). ;  ; virtual const char * CreateDialogTitle (TObject *object, TFunction *method);  Create title for dialog box retrieving argument values. ;  ; virtual const char * CreatePopupTitle (TObject *object);  Create title for popup menu. ;  ; void Execute (const char *method, const char *params, Int_t *error=nullptr) override;  Execute met",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveContextMenu.html:84,Load,Loading,84,doc/master/classTEveContextMenu.html,https://root.cern,https://root.cern/doc/master/classTEveContextMenu.html,1,['Load'],['Loading']
Performance,". ROOT: TEveDigitSet Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TEveDigitSet Class ReferenceGraphics » 3D Graphics » Event Display. ; Base-class for storage of digit collections; provides transformation matrix (TEveTrans), signal to color mapping (TEveRGBAPalette) and visual grouping (TEveFrameBox). ; Base-class for displaying a digit collection. Provides common services for:; specifying signal / color per digit;; specifying object reference per digit;; controlling palette and thresholds (external object TEveRGBAPalette);; showing a frame around the digits (external object TEveFrameBox);; specifying transformation matrix for the whole collection; by data-member of class TEveTrans. Use method DigitId(TObject* id) to assign additional identification to the last created digit. By calling SetOwnIds(kTRUE) tje digit-set becomes the owner of the assigned objects and deletes them on destruction. Note that TRef is used for referencing the objects and if you instantiate the objects just to pass them to digit-set you should also call TProcessID::Get/SetObjectCount() at the beginning / end of processing of an event. See documentation for class TRef, in particular section 'ObjectNumber'.; If you use value-is-color mode and want to use transparency, set the transparency to non-zero value so that GL-renderer will be properly informed.; If you want to use single color for all elements call: UseSingleColor(); TEveDigitSet::UseSingleColorvoid UseSingleColor()Instruct digit-set to use single color for its digits.Definition TEveDigitSet.cxx:162; Palette controls will not work in this case.; A pointer to a rectangle / box of class TEveFrameBox can be set via void SetFrame(TEveFrameBox* b);; b#define b(i)Definit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveDigitSet.html:81,Load,Loading,81,doc/master/classTEveDigitSet.html,https://root.cern,https://root.cern/doc/master/classTEveDigitSet.html,1,['Load'],['Loading']
Performance,". ROOT: TEveElementList Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TEveElementList Class ReferenceGraphics » 3D Graphics » Event Display. ; A list of TEveElements. ; Class of acceptable children can be limited by setting the fChildClass member.; !!! should have two ctors (like in TEveElement), one with Color_t& and set fDoColor automatically, based on which ctor is called. ; Definition at line 430 of file TEveElement.h. Public Member Functions;  TEveElementList (const char *n=""TEveElementList"", const char *t="""", Bool_t doColor=kFALSE, Bool_t doTransparency=kFALSE);  Constructor. ;  ;  TEveElementList (const TEveElementList &e);  Copy constructor. ;  ;  ~TEveElementList () override;  ; Bool_t AcceptElement (TEveElement *el) override;  Check if TEveElement el is inherited from fChildClass. ;  ; TEveElementList * CloneElement () const override;  Clone the element via copy constructor. ;  ; TClass * GetChildClass () const;  ; const char * GetElementName () const override;  Virtual function for retrieving name of the element. ;  ; const char * GetElementTitle () const override;  Virtual function for retrieving title of the render-element. ;  ; TObject * GetObject (const TEveException &=""TEveElementList::GetObject "") const override;  Get a TObject associated with this render-element. ;  ; TClass * IsA () const override;  ; TClass * ProjectedClass (const TEveProjection *p) const override;  Virtual from TEveProjectable, returns TEveCompoundProjected class. ;  ; void SetChildClass (TClass *c);  ; void SetElementName (const char *name) override;  Virtual function for setting of name of an element. ;  ; void SetElementNameTitle (const char *name, const char *title) override;  Virtual function for setting of name and title of render element. ;  ; void SetElementTitle (c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveElementList.html:84,Load,Loading,84,doc/master/classTEveElementList.html,https://root.cern,https://root.cern/doc/master/classTEveElementList.html,1,['Load'],['Loading']
Performance,". ROOT: TEveElementListProjected Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; List of all members ; TEveElementListProjected Class ReferenceGraphics » 3D Graphics » Event Display. ; A projected element list – required for proper propagation of render state to projected views. ; Definition at line 479 of file TEveElement.h. Public Member Functions;  TEveElementListProjected ();  Constructor. ;  ;  ~TEveElementListProjected () override;  ; TEveElement * GetProjectedAsElement () override;  Returns this projected dynamic-casted to TEveElement. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UpdateProjection () override;  This is abstract method from base-class TEveProjected. ;  ;  Public Member Functions inherited from TEveElementList;  TEveElementList (const char *n=""TEveElementList"", const char *t="""", Bool_t doColor=kFALSE, Bool_t doTransparency=kFALSE);  Constructor. ;  ;  TEveElementList (const TEveElementList &e);  Copy constructor. ;  ;  ~TEveElementList () override;  ; Bool_t AcceptElement (TEveElement *el) override;  Check if TEveElement el is inherited from fChildClass. ;  ; TEveElementList * CloneElement () const override;  Clone the element via copy constructor. ;  ; TClass * GetChildClass () const;  ; const char * GetElementName () const override;  Virtual function for retrieving name of the element. ;  ; const char * GetElementTitle () const override;  Virtual function for retrieving title of the render-element. ;  ; TObject * GetObject (const TEveException &=""TEveElementList::GetObject "") const override;  Get a TObject associated with this render-element. ;  ; TClass * ProjectedClass (const TEveProjection *p) const override;  Virtual from TEveProjectable, returns TEveCompoundProjected class. ;  ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveElementListProjected.html:93,Load,Loading,93,doc/master/classTEveElementListProjected.html,https://root.cern,https://root.cern/doc/master/classTEveElementListProjected.html,1,['Load'],['Loading']
Performance,". ROOT: TEveEventManager Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TEveEventManager Class ReferenceGraphics » 3D Graphics » Event Display. ; Base class for event management and navigation. ; Definition at line 19 of file TEveEventManager.h. Public Member Functions;  TEveEventManager (const char *n=""TEveEventManager"", const char *t="""");  Constructor. ;  ;  ~TEveEventManager () override;  ; virtual void AddNewEventCommand (const TString &cmd);  Register a command to be executed on each new event. ;  ; virtual void AfterNewEventLoaded ();  Virtual function to be called after a new event is loaded. ;  ; virtual void ClearNewEventCommands ();  Clear the list of commands to be executed on each new event. ;  ; virtual void Close ();  ; std::vector< TString > & GetNewEventCommands ();  ; virtual void GotoEvent (Int_t);  ; TClass * IsA () const override;  ; virtual void NextEvent ();  ; virtual void Open ();  ; virtual void PrevEvent ();  ; virtual void RemoveNewEventCommand (const TString &cmd);  Remove the first command equal to cmd. ;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TEveElementList;  TEveElementList (const char *n=""TEveElementList"", const char *t="""", Bool_t doColor=kFALSE, Bool_t doTransparency=kFALSE);  Constructor. ;  ;  TEveElementList (const TEveElementList &e);  Copy constructor. ;  ;  ~TEveElementList () override;  ; Bool_t AcceptElement (TEveElement *el) override;  Check if TEveElement el is inherited from fChildClass. ;  ; TEveElementList * CloneElement () const override;  Clone the element via copy constructor. ;  ; TClass * GetChildClass () const;  ; const char * GetElementName () const override;  Virtual function for retrieving name of the element. ;  ; const char * ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveEventManager.html:85,Load,Loading,85,doc/master/classTEveEventManager.html,https://root.cern,https://root.cern/doc/master/classTEveEventManager.html,2,"['Load', 'load']","['Loading', 'loaded']"
Performance,". ROOT: TEveFrameBox Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TEveFrameBox Class ReferenceGraphics » 3D Graphics » Event Display. ; Description of a 2D or 3D frame that can be used to visually group a set of objects. ; Definition at line 18 of file TEveFrameBox.h. Public Types; enum  EFrameType_e { kFT_None; , kFT_Quad; , kFT_Box; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TEveFrameBox ();  ;  ~TEveFrameBox () override;  Destructor. ;  ; Color_t GetBackColor () const;  ; UChar_t * GetBackRGBA ();  ; Bool_t GetDrawBack () const;  ; Color_t GetFrameColor () const;  ; Bool_t GetFrameFill () const;  ; Float_t * GetFramePoints () const;  ; UChar_t * GetFrameRGBA ();  ; Int_t GetFrameSize () const;  ; EFrameType_e GetFrameType () const;  ; Float_t GetFrameWidth () const;  ; TClass * IsA () const override;  ; void OnZeroRefCount () override;  ; Color_t * PtrBackColor ();  ; Color_t * PtrFrameColor ();  ; void SetAABox (Float_t x, Float_t y, Float_t z, Float_t dx, Float_t dy, Float_t dz);  Setup for axis-aligned box with one corner at x, y, z and given sizes in x (dx), y (dy) and z (dz). ;  ; void SetAABoxCenterHalfSize (F",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveFrameBox.html:81,Load,Loading,81,doc/master/classTEveFrameBox.html,https://root.cern,https://root.cern/doc/master/classTEveFrameBox.html,1,['Load'],['Loading']
Performance,". ROOT: TEveGListTreeEditorFrame Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TEveGListTreeEditorFrame Class ReferenceGraphics » 3D Graphics » Event Display. ; Composite GUI frame for parallel display of a TGListTree and TEveGedEditor. ; Definition at line 82 of file TEveBrowser.h. Public Member Functions;  TEveGListTreeEditorFrame (const TGWindow *p=nullptr, Int_t width=250, Int_t height=700);  Constructor. ;  ;  ~TEveGListTreeEditorFrame () override;  Destructor. ;  ; void ConnectSignals ();  Connect list-tree signals. ;  ; void DisconnectSignals ();  Disconnect list-tree signals. ;  ; TEveGedEditor * GetEditor () const;  ; TGListTree * GetListTree () const;  ; TClass * IsA () const override;  ; void ItemBelowMouse (TGListTreeItem *entry, UInt_t mask);  Different item is below mouse. ;  ; void ItemClicked (TGListTreeItem *entry, Int_t btn, UInt_t mask, Int_t x, Int_t y);  Item has been clicked, based on mouse button do: ;  ; void ItemDblClicked (TGListTreeItem *item, Int_t btn);  Item has been double-clicked, potentially expand the children. ;  ; void ItemKeyPress (TGListTreeItem *entry, UInt_t keysym, UInt_t mask);  A key has been pressed for an item. ;  ; void ReconfToHorizontal ();  Reconfigure to horizontal layout, list-tree and editor side by side. ;  ; void ReconfToVertical ();  Reconfigure to vertical layout, list-tree above the editor. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGMainFrame;  TGMainFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=kVerticalFrame);  Create a top level main frame. ;  ;  ~TGMainFrame () override;  TGMainFrame destru",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveGListTreeEditorFrame.html:93,Load,Loading,93,doc/master/classTEveGListTreeEditorFrame.html,https://root.cern,https://root.cern/doc/master/classTEveGListTreeEditorFrame.html,1,['Load'],['Loading']
Performance,". ROOT: TEveGeoNode Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TEveGeoNode Class ReferenceGraphics » 3D Graphics » Event Display. ; Wrapper for TGeoNode that allows it to be shown in GUI and controlled as a TEveElement. ; Definition at line 28 of file TEveGeoNode.h. Public Member Functions;  TEveGeoNode (TGeoNode *node);  Constructor. ;  ; void AddStamp (UChar_t bits) override;  Override from TEveElement. ;  ; Bool_t CanEditElement () const override;  ; Bool_t CanEditMainColor () const override;  Can edit main-color – not available for assemblies. ;  ; Bool_t CanEditMainTransparency () const override;  Can edit main transparency – not available for assemblies. ;  ; void Draw (Option_t *option="""") override;  Draw the object. ;  ; void ExpandIntoListTree (TGListTree *ltree, TGListTreeItem *parent) override;  Checks if child-nodes have been imported ... imports them if not. ;  ; virtual void ExpandIntoListTrees ();  Expand children into all list-trees. ;  ; virtual void ExpandIntoListTreesRecursively ();  Expand children into all list-trees recursively. ;  ; const char * GetElementName () const override;  Return name, taken from geo-node. Used via TEveElement. ;  ; const char * GetElementTitle () const override;  Return title, taken from geo-node. Used via TEveElement. ;  ; Char_t GetMainTransparency () const override;  Get transparency – it is taken from the geo node. ;  ; const char * GetName () const override;  Return name, taken from geo-node. Used via TObject. ;  ; TGeoNode * GetNode () const;  ; TObject * GetObject (const TEveException &) const override;  Get a TObject associated with this render-element. ;  ; const char * GetTitle () const override;  Return title, taken from geo-node",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveGeoNode.html:80,Load,Loading,80,doc/master/classTEveGeoNode.html,https://root.cern,https://root.cern/doc/master/classTEveGeoNode.html,1,['Load'],['Loading']
Performance,". ROOT: TEveGeoShape Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; List of all members ; TEveGeoShape Class ReferenceGraphics » 3D Graphics » Event Display. ; Wrapper for TGeoShape with absolute positioning and color attributes allowing display of extracted TGeoShape's (without an active TGeoManager) and simplified geometries (needed for non-linear projections). ; TGeoCompositeShapes and TGeoAssemblies are supported.; If fNSegments data-member is < 2 (0 by default), the default number of segments is used for tesselation and special GL objects are instantiated for selected shapes (spheres, tubes). If fNSegments is > 2, it gets forwarded to geo-manager and this tesselation detail is used when creating the buffer passed to GL. ; Definition at line 23 of file TEveGeoShape.h. Public Member Functions;  TEveGeoShape (const char *name=""TEveGeoShape"", const char *title=nullptr);  Constructor. ;  ;  ~TEveGeoShape () override;  Destructor. ;  ; void ComputeBBox () override;  Compute bounding-box. ;  ; Int_t GetNSegments () const;  ; TObject * GetObject (const TEveException &) const override;  Get a TObject associated with this render-element. ;  ; TGeoShape * GetShape () const;  ; TClass * IsA () const override;  ; virtual TBuffer3D * MakeBuffer3D ();  Create a TBuffer3D suitable for presentation of the shape. ;  ; void Paint (Option_t *option="""") override;  Paint object. ;  ; TClass * ProjectedClass (const TEveProjection *p) const override;  Return class for projected objects: ;  ; void Save (const char *file, const char *name=""Extract"");  Save the shape tree as TEveGeoShapeExtract. ;  ; void SaveExtract (const char *file, const char *name);  Save the shape tree as TEveGeoShapeExtract. ;  ; void ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveGeoShape.html:81,Load,Loading,81,doc/master/classTEveGeoShape.html,https://root.cern,https://root.cern/doc/master/classTEveGeoShape.html,1,['Load'],['Loading']
Performance,". ROOT: TEveGeoShapeExtract Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TEveGeoShapeExtract Class ReferenceGraphics » 3D Graphics » Event Display. ; Globally positioned TGeoShape with rendering attributes and an optional list of daughter shape-extracts. ; Vessel to carry hand-picked geometry from gled to reve. This class exists in both frameworks. ; Definition at line 20 of file TEveGeoShapeExtract.h. Public Member Functions;  TEveGeoShapeExtract (const char *n=""TEveGeoShapeExtract"", const char *t=nullptr);  Constructor. ;  ;  ~TEveGeoShapeExtract () override;  Destructor. Delete shape and elements. ;  ; void AddElement (TEveGeoShapeExtract *gse);  Add a child element. ;  ; TList * GetElements ();  ; Bool_t GetMiniFrame ();  ; Float_t * GetRGBA ();  ; Float_t * GetRGBALine ();  ; Bool_t GetRnrElements ();  ; Bool_t GetRnrFrame ();  ; Bool_t GetRnrSelf ();  ; TGeoShape * GetShape ();  ; Double_t * GetTrans ();  ; Bool_t HasElements ();  True if has at least one element. ;  ; TClass * IsA () const override;  ; void SetElements (TList *e);  ; void SetMiniFrame (Bool_t r);  ; void SetRGBA (const Float_t arr[4]);  Set RGBA color. ;  ; void SetRGBALine (const Float_t arr[4]);  Set RGBA color for line. ;  ; void SetRnrElements (Bool_t r);  ; void SetRnrFrame (Bool_t r);  ; void SetRnrSelf (Bool_t r);  ; void SetShape (TGeoShape *s);  ; void SetTrans (const Double_t arr[16]);  Set transformation matrix. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveGeoShapeExtract.html:88,Load,Loading,88,doc/master/classTEveGeoShapeExtract.html,https://root.cern,https://root.cern/doc/master/classTEveGeoShapeExtract.html,1,['Load'],['Loading']
Performance,". ROOT: TEveGeoShapeProjected Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TEveGeoShapeProjected Class ReferenceGraphics » 3D Graphics » Event Display. ; A 3D projected TEveGeoShape. ; Definition at line 74 of file TEveGeoShape.h. Public Member Functions;  TEveGeoShapeProjected ();  Constructor. ;  ;  ~TEveGeoShapeProjected () override;  Destructor. ;  ; void ComputeBBox () override;  Override of virtual method from TAttBBox. ;  ; TEveElement * GetProjectedAsElement () override;  Returns this projected dynamic-casted to TEveElement. ;  ; TClass * IsA () const override;  ; void SetProjection (TEveProjectionManager *proj, TEveProjectable *model) override;  This is virtual method from base-class TEveProjected. ;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UpdateProjection () override;  This is virtual method from base-class TEveProjected. ;  ;  Public Member Functions inherited from TEveShape;  TEveShape (const char *n=""TEveShape"", const char *t="""");  Constructor. ;  ;  ~TEveShape () override;  Destructor. ;  ; void CopyVizParams (const TEveElement *el) override;  Copy visualization parameters from element el. ;  ; virtual Bool_t GetDrawFrame () const;  ; virtual Color_t GetFillColor () const;  ; virtual Bool_t GetHighlightFrame () const;  ; virtual Color_t GetLineColor () const;  ; virtual Float_t GetLineWidth () const;  ; virtual Bool_t GetMiniFrame () const;  ; TClass * IsA () const override;  ; void Paint (Option_t *option="""") override;  Paint this object. Only direct rendering is supported. ;  ; virtual void SetDrawFrame (Bool_t f);  ; virtual void SetFillColor (Color_t c);  ; virtual void SetHighlightFrame (Bool_t f);  ; virtual void SetLineColor (Color_t c);  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveGeoShapeProjected.html:90,Load,Loading,90,doc/master/classTEveGeoShapeProjected.html,https://root.cern,https://root.cern/doc/master/classTEveGeoShapeProjected.html,1,['Load'],['Loading']
Performance,". ROOT: TEveGeoTopNode Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TEveGeoTopNode Class ReferenceGraphics » 3D Graphics » Event Display. ; A wrapper over a TGeoNode, possibly displaced with a global trasformation stored in TEveElement. ; It holds a pointer to TGeoManager and controls for steering of TGeoPainter, fVisOption, fVisLevel and fMaxVisNodes. They have the same meaning as in TGeoManager/TGeoPainter. ; Definition at line 89 of file TEveGeoNode.h. Public Member Functions;  TEveGeoTopNode (TGeoManager *manager, TGeoNode *node, Int_t visopt=1, Int_t vislvl=3, Int_t maxvisnds=10000);  Constructor. ;  ;  ~TEveGeoTopNode () override;  ; void AddStamp (UChar_t bits) override;  Revert from TEveGeoNode back to standard behaviour, that is, do not pass visibility changes to fNode as they are honoured in Paint() method. ;  ; Bool_t CanEditElement () const override;  ; void Draw (Option_t *option="""") override;  Draw the top-node. ;  ; TGeoManager * GetGeoManager () const;  ; Int_t GetMaxVisNodes () const;  ; Int_t GetVisLevel () const;  ; Int_t GetVisOption () const;  ; TClass * IsA () const override;  ; void NodeVisChanged (TGeoNode *node);  Callback for propagating node visibility changes. ;  ; void Paint (Option_t *option="""") override;  Paint the enclosed TGeo hierarchy with visibility level and option given in data-members. ;  ; void SetMaxVisNodes (Int_t mvn);  ; void SetVisLevel (Int_t vl);  ; void SetVisOption (Int_t vo);  ; Bool_t SingleRnrState () const override;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UseNodeTrans ();  Use transformation matrix from the TGeoNode. ;  ; void VolumeColChanged (TGeoVolume *volume);  Callback for propagating volume parameter changes. ;  ; void VolumeVisCh",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveGeoTopNode.html:83,Load,Loading,83,doc/master/classTEveGeoTopNode.html,https://root.cern,https://root.cern/doc/master/classTEveGeoTopNode.html,1,['Load'],['Loading']
Performance,". ROOT: TEveGridStepper Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TEveGridStepper Class ReferenceGraphics » 3D Graphics » Event Display. ; Provide discrete position coordinates for placement of objects on regular grids. ; Definition at line 21 of file TEveGridStepper.h. Public Types; enum  EStepMode_e { kSM_XYZ; , kSM_YXZ; , kSM_XZY; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TEveGridStepper (Int_t sm=kSM_XYZ);  Constructor. ;  ;  ~TEveGridStepper () override;  ; Int_t GetCx () const;  ; Int_t GetCy () const;  ; Int_t GetCz () const;  ; Float_t GetDx () const;  ; Float_t GetDy () const;  ; Float_t GetDz () const;  ; Int_t GetNx () const;  ; Int_t GetNy () const;  ; Int_t GetNz () const;  ; Float_t GetOx () const;  ; Float_t GetOy () const;  ; Float_t GetOz () const;  ; void GetPosition (Float_t *p);  Get current position. ;  ; TClass * IsA () const override;  ; void Reset ();  Reset position to origin. ;  ; void SetDs (Float_t dx, Float_t dy, Float_t dz=0);  ; void SetNs (Int_t nx, Int_t ny, Int_t nz=1);  ; void SetOs (Float_t ox, Float_t oy, Float_t oz=0);  ; void SetTrans (TEveTrans *mx);  Se",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveGridStepper.html:84,Load,Loading,84,doc/master/classTEveGridStepper.html,https://root.cern,https://root.cern/doc/master/classTEveGridStepper.html,1,['Load'],['Loading']
Performance,". ROOT: TEveHit Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; List of all members ; TEveHit Class Reference. . Definition at line 79 of file TEveVSDStructs.h. Public Member Functions;  TEveHit ();  ;  ~TEveHit () override;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveHit.html:76,Load,Loading,76,doc/master/classTEveHit.html,https://root.cern,https://root.cern/doc/master/classTEveHit.html,1,['Load'],['Loading']
Performance,". ROOT: TEveJetCone Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TEveJetCone Class ReferenceGraphics » 3D Graphics » Event Display. ; Draws a jet cone with leading particle is specified in (eta,phi) and cone radius is given. ; If Apex is not set, default is (0.,0.,0.) In case of cylinder was set, cone is cut at the cylinder edges.; Example : Float_t coneEta = r.Uniform(-0.9, 0.9);; Float_t conePhi = r.Uniform(0.0, TwoPi() );; Float_t coneRadius = 0.4;; ; TEveJetCone* jetCone = new TEveJetCone(""JetCone"");; jetCone->SetCylinder(250, 250);; if (jetCone->AddCone(coneEta, conePhi, coneRadius) != -1); gEve->AddElement(jetCone);; Float_tfloat Float_tDefinition RtypesCore.h:57; gEveR__EXTERN TEveManager * gEveDefinition TEveManager.h:243; rOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t rDefinition TGWin32VirtualXProxy.cxx:168; TEveJetConeDraws a jet cone with leading particle is specified in (eta,phi) and cone radius is given.Definition TEveJetCone.h:24; TEveJetCone::SetCylindervoid SetCylinder(Float_t r, Float_t z)Definition TEveJetCone.h:55; TEveJetCone::AddConeInt_t AddCone(Float_t eta, Float_t phi, Float_t cone_r, Float_t length=0)Add jet cone.Definition TEveJetCone.cxx:92; TEveManager::AddElementvoid AddElement(TEveElement *element, TEveElement *parent=nullptr)Add an element.Definition TEveManager.cxx:527; Implementation notes; TEveVector fLimits encodes the following information:; fY, fZ: barrel radius and endcap z-position; if both are 0, fX encodes the spherical radius; fX : scaling for length of the cone . Definition at line 23 of file TEveJetCone.h. Public Me",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveJetCone.html:80,Load,Loading,80,doc/master/classTEveJetCone.html,https://root.cern,https://root.cern/doc/master/classTEveJetCone.html,1,['Load'],['Loading']
Performance,". ROOT: TEveJetConeProjected Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Friends |; List of all members ; TEveJetConeProjected Class ReferenceGraphics » 3D Graphics » Event Display. ; Projection of TEveJetCone. ; Definition at line 72 of file TEveJetCone.h. Public Member Functions;  TEveJetConeProjected (const char *n=""TEveJetConeProjected"", const char *t="""");  Constructor. ;  ;  ~TEveJetConeProjected () override;  Destructor. ;  ; void ComputeBBox () override;  Compute bounding-box, virtual from TAttBBox. ;  ; TEveElement * GetProjectedAsElement () override;  Returns this projected dynamic-casted to TEveElement. ;  ; TClass * IsA () const override;  ; void SetProjection (TEveProjectionManager *mng, TEveProjectable *model) override;  This is virtual method from base-class TEveProjected. ;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UpdateProjection () override;  Re-project the jet-cone. ;  ;  Public Member Functions inherited from TEveShape;  TEveShape (const char *n=""TEveShape"", const char *t="""");  Constructor. ;  ;  ~TEveShape () override;  Destructor. ;  ; void CopyVizParams (const TEveElement *el) override;  Copy visualization parameters from element el. ;  ; virtual Bool_t GetDrawFrame () const;  ; virtual Color_t GetFillColor () const;  ; virtual Bool_t GetHighlightFrame () const;  ; virtual Color_t GetLineColor () const;  ; virtual Float_t GetLineWidth () const;  ; virtual Bool_t GetMiniFrame () const;  ; TClass * IsA () const override;  ; void Paint (Option_t *option="""") override;  Paint this object. Only direct rendering is supported. ;  ; virtual void SetDrawFrame (Bool_t f);  ; virtual void SetFillColor (Color_t c);  ; virtual void SetHighlightFrame (Bool_t f);  ; virtual void SetLineColor (Color_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveJetConeProjected.html:89,Load,Loading,89,doc/master/classTEveJetConeProjected.html,https://root.cern,https://root.cern/doc/master/classTEveJetConeProjected.html,1,['Load'],['Loading']
Performance,". ROOT: TEveLine Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TEveLine Class ReferenceGraphics » 3D Graphics » Event Display. ; An arbitrary polyline with fixed line and marker attributes. ; Definition at line 24 of file TEveLine.h. Public Member Functions;  TEveLine (const char *name, Int_t n_points=0, ETreeVarType_e tv_type=kTVT_XYZ);  Constructor. ;  ;  TEveLine (Int_t n_points=0, ETreeVarType_e tv_type=kTVT_XYZ);  Constructor. ;  ;  ~TEveLine () override;  ; Float_t CalculateLineLength () const;  Sum-up lengths of individual segments. ;  ; void CopyVizParams (const TEveElement *el) override;  Copy visualization parameters from element el. ;  ; TEveVector GetLineEnd () const;  Return the last point of the line. ;  ; TEveVector GetLineStart () const;  Return the first point of the line. ;  ; const TGPicture * GetListTreeIcon (Bool_t open=kFALSE) override;  Returns list-tree icon for TEveLine. ;  ; Bool_t GetRnrLine () const;  ; Bool_t GetRnrPoints () const;  ; Bool_t GetSmooth () const;  ; TClass * IsA () const override;  ; TClass * ProjectedClass (const TEveProjection *p) const override;  Virtual from TEveProjectable, returns TEvePointSetProjected class. ;  ; void ReduceSegmentLengths (Float_t max);  Make sure that no segment is longer than max. ;  ; void SetLineColor (Color_t col) override;  Set the line color. ;  ; void SetLineStyle (Style_t lstyle) override;  Set line-style of the line. ;  ; void SetLineWidth (Width_t lwidth) override;  Set line-style of the line. ;  ; void SetMarkerColor (Color_t col) override;  Set marker color. Propagate to projected lines. ;  ; void SetRnrLine (Bool_t r);  Set rendering of line. Propagate to projected lines. ;  ; void SetRnrPoints (Bool_t r);  Set rendering of points. Propaga",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveLine.html:77,Load,Loading,77,doc/master/classTEveLine.html,https://root.cern,https://root.cern/doc/master/classTEveLine.html,1,['Load'],['Loading']
Performance,". ROOT: TEveLineProjected Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; List of all members ; TEveLineProjected Class ReferenceGraphics » 3D Graphics » Event Display. ; Projected copy of a TEveLine. ; Definition at line 83 of file TEveLine.h. Public Member Functions;  TEveLineProjected ();  Default constructor. ;  ;  ~TEveLineProjected () override;  ; TEveElement * GetProjectedAsElement () override;  Returns this projected dynamic-casted to TEveElement. ;  ; TClass * IsA () const override;  ; void SetProjection (TEveProjectionManager *mng, TEveProjectable *model) override;  Set projection manager and projection model. ;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UpdateProjection () override;  Re-apply the projection. ;  ;  Public Member Functions inherited from TEveLine;  TEveLine (const char *name, Int_t n_points=0, ETreeVarType_e tv_type=kTVT_XYZ);  Constructor. ;  ;  TEveLine (Int_t n_points=0, ETreeVarType_e tv_type=kTVT_XYZ);  Constructor. ;  ;  ~TEveLine () override;  ; Float_t CalculateLineLength () const;  Sum-up lengths of individual segments. ;  ; void CopyVizParams (const TEveElement *el) override;  Copy visualization parameters from element el. ;  ; TEveVector GetLineEnd () const;  Return the last point of the line. ;  ; TEveVector GetLineStart () const;  Return the first point of the line. ;  ; const TGPicture * GetListTreeIcon (Bool_t open=kFALSE) override;  Returns list-tree icon for TEveLine. ;  ; Bool_t GetRnrLine () const;  ; Bool_t GetRnrPoints () const;  ; Bool_t GetSmooth () const;  ; TClass * ProjectedClass (const TEveProjection *p) const override;  Virtual from TEveProjectable, returns TEvePointSetProjected class. ;  ; void ReduceSegmentLengths (Float_t max);  Make sure that no segment ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveLineProjected.html:86,Load,Loading,86,doc/master/classTEveLineProjected.html,https://root.cern,https://root.cern/doc/master/classTEveLineProjected.html,1,['Load'],['Loading']
Performance,". ROOT: TEveMCRecCrossRef Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; List of all members ; TEveMCRecCrossRef Class Reference. . Definition at line 257 of file TEveVSDStructs.h. Public Member Functions;  TEveMCRecCrossRef ();  ;  ~TEveMCRecCrossRef () override;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveMCRecCrossRef.html:86,Load,Loading,86,doc/master/classTEveMCRecCrossRef.html,https://root.cern,https://root.cern/doc/master/classTEveMCRecCrossRef.html,1,['Load'],['Loading']
Performance,". ROOT: TEveMCTrack Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; List of all members ; TEveMCTrack Class Reference. . Definition at line 42 of file TEveVSDStructs.h. Public Member Functions;  TEveMCTrack ();  ;  ~TEveMCTrack () override;  ; TClass * IsA () const override;  ; TEveMCTrack & operator= (const TParticle &p);  ; void ResetPdgCode ();  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TParticle;  TParticle ();  reference to the particle record in PDG database ;  ;  TParticle (const TParticle &part);  copy constructor ;  ;  TParticle (Int_t pdg, Int_t status, Int_t mother1, Int_t mother2, Int_t daughter1, Int_t daughter2, const TLorentzVector &p, const TLorentzVector &v);  constructor ;  ;  TParticle (Int_t pdg, Int_t status, Int_t mother1, Int_t mother2, Int_t daughter1, Int_t daughter2, Double_t px, Double_t py, Double_t pz, Double_t etot, Double_t vx, Double_t vy, Double_t vz, Double_t time);  constructor ;  ;  ~TParticle () override;  destructor ;  ; Int_t Beauty () const;  Return beauty quantum number. ;  ; Int_t Charm () const;  Return charm quantum number. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a primary track. ;  ; Double_t Ek () const;  ; Double_t Energy () const;  ; Double_t Eta () const;  ; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override;  Execute action corresponding to one event. ;  ; Double_t GetCalcMass () const;  ; Int_t GetDaughter (Int_t i) const;  ; Int_t GetFirstDaughter () const;  ; Int_t GetFirstMother () const;  ; Int_t GetLastDaughter () const;  ; Double_t GetMass () const;  Return nominal particle mass from PDG table. ;  ; Int_t GetMother (Int_t i) const;  ; const char * Get",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveMCTrack.html:80,Load,Loading,80,doc/master/classTEveMCTrack.html,https://root.cern,https://root.cern/doc/master/classTEveMCTrack.html,1,['Load'],['Loading']
Performance,". ROOT: TEveMacro Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TEveMacro Class ReferenceGraphics » 3D Graphics » Event Display. ; Sub-class of TMacro, overriding Exec to unload the previous version and cleanup after the execution. ; Definition at line 19 of file TEveMacro.h. Public Member Functions;  TEveMacro ();  Default constructor. ;  ;  TEveMacro (const char *name);  ;  TEveMacro (const TEveMacro &);  ;  ~TEveMacro () override;  ; Longptr_t Exec (const char *params=""0"", Int_t *error=nullptr) override;  Execute the macro. ;  ; TClass * IsA () const override;  ; void ResetRoot ();  Call gROOT->Reset() via interpreter. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMacro;  TMacro ();  Create an empty macro, use AddLine() or ReadFile() to fill this macro. ;  ;  TMacro (const char *name, const char *title="""");  Create a macro with a name and a title. ;  ;  TMacro (const TMacro &);  Copy constructor. ;  ; virtual ~TMacro ();  Delete this macro. ;  ; virtual TObjString * AddLine (const char *text);  Add line with text in the list of lines of this macro. ;  ; void Browse (TBrowser *b) override;  When clicking in the browser, the following action is performed on this macro, depending the content of the variable TMacro.Browse. ;  ; virtual TMD5 * Checksum ();  Returns checksum of the current content. ;  ; virtual TObjString * GetLineWith (const char *text) const;  Search the first line containing text. ;  ; TList * GetListOfLines () const;  ; TClass * IsA () const override;  ; virtual Bool_t Load () const;  Load the macro into the interpreter. ;  ; TMacro & operator= (const TMacro &);  Copy constructor. ;  ; void Paint (Option_t *option="""") override;  Execute this macro (called",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveMacro.html:78,Load,Loading,78,doc/master/classTEveMacro.html,https://root.cern,https://root.cern/doc/master/classTEveMacro.html,1,['Load'],['Loading']
Performance,. ROOT: TEveManager::TExceptionHandler Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TEveManager::TExceptionHandler Class ReferenceGraphics » 3D Graphics » Event Display. ; Exception handler for Eve exceptions. ; Definition at line 71 of file TEveManager.h. Public Member Functions;  TExceptionHandler ();  ;  ~TExceptionHandler () override;  ; EStatus Handle (std::exception &exc) override;  Handle exceptions deriving from TEveException. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TStdExceptionHandler;  TStdExceptionHandler ();  Handle standard C++ exceptions intercepted by the TSystem::Run(). ;  ; virtual ~TStdExceptionHandler ();  ; void Add () override;  Add std::exception handler to system handler list. ;  ; TClass * IsA () const override;  ; Bool_t Notify () override;  Notify when signal occurs. ;  ; void Remove () override;  Remove std::exception handler from system handler list. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TSysEvtHandler;  TSysEvtHandler ();  ; virtual ~TSysEvtHandler ();  ; void Activate ();  Activate a system event handler. ;  ; virtual void Activated ();  ; virtual void Added ();  ; void DeActivate ();  De-activate a system event handler. ;  ; virtual void DeActivated ();  ; TClass * IsA () const override;  ; Bool_t IsActive () const;  ; virtual void Notified ();  ; virtual void Removed ();  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from T,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveManager_1_1TExceptionHandler.html:99,Load,Loading,99,doc/master/classTEveManager_1_1TExceptionHandler.html,https://root.cern,https://root.cern/doc/master/classTEveManager_1_1TExceptionHandler.html,1,['Load'],['Loading']
Performance,". ROOT: TEveParamList Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TEveParamList Class ReferenceGraphics » 3D Graphics » Event Display. ; Collection of named parameters. ; Definition at line 24 of file TEveParamList.h. Classes; struct  BoolConfig_t;  ; struct  FloatConfig_t;  ; struct  IntConfig_t;  . Public Types; typedef BoolConfigVec_t::const_iterator BoolConfigVec_ci;  ; typedef BoolConfigVec_t::iterator BoolConfigVec_i;  ; typedef std::vector< BoolConfig_t > BoolConfigVec_t;  ; typedef FloatConfigVec_t::const_iterator FloatConfigVec_ci;  ; typedef FloatConfigVec_t::iterator FloatConfigVec_i;  ; typedef std::vector< FloatConfig_t > FloatConfigVec_t;  ; typedef IntConfigVec_t::const_iterator IntConfigVec_ci;  ; typedef IntConfigVec_t::iterator IntConfigVec_i;  ; typedef std::vector< IntConfig_t > IntConfigVec_t;  ;  Public Types inherited from TEveElement; enum  EChangeBits { kCBColorSelection = (1ULL << ( 0 )); , kCBTransBBox = (1ULL << ( 1 )); , kCBObjProps = (1ULL << ( 2 )); , kCBVisibility = (1ULL << ( 3 )); };  ; typedef void(TEveElement::* ImplySelect_foo) ();  ; typedef List_t::const_iterator List_ci;  ; typedef List_t::iterator List_i;  ; typedef std::list< TEveElement * > List_t;  ; typedef void(TEveElement::* Select_foo) (Bool_t);  ; typedef Set_t::const_iterator Set_ci;  ; typedef Set_t::iterator Set_i;  ; typedef std::set< TEveElement * > Set_t;  ; typedef sLTI_t::iterator sLTI_i;  ; typedef sLTI_t::reverse_iterator sLTI_ri;  ; typedef std::set< TEveListTreeInfo > sLTI_t;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverw",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveParamList.html:82,Load,Loading,82,doc/master/classTEveParamList.html,https://root.cern,https://root.cern/doc/master/classTEveParamList.html,1,['Load'],['Loading']
Performance,". ROOT: TEveParamListEditor Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TEveParamListEditor Class ReferenceGraphics » 3D Graphics » Event Display. ; GUI editor for TEveParamList. ; Slot methods from this object do not call Update, instead they call their model's ParamChanged(const char* name) function which emits a corresponding signal.; This helps in handling of parameter changes as they are probably related to displayed objects in a more complicated way. Further, the TGCheckButton::HandleButton() emits more signal after the Clicked() signal and if model is reset in the editor, its contents is removed. This results in a crash. ; Definition at line 122 of file TEveParamList.h. Public Member Functions;  TEveParamListEditor (const TGWindow *p=nullptr, Int_t width=170, Int_t height=30, UInt_t options=kChildFrame, Pixel_t back=GetDefaultFrameBackground());  Constructor. ;  ;  ~TEveParamListEditor () override;  ; void DoBoolUpdate ();  Slot for bool parameter update. ;  ; void DoFloatUpdate ();  Slot for float parameter update. ;  ; void DoIntUpdate ();  Slot for integer parameter update. ;  ; TClass * IsA () const override;  ; void SetModel (TObject *obj) override;  Set model object. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGedFrame;  TGedFrame (const TGWindow *p=nullptr, Int_t width=140, Int_t height=30, UInt_t options=kChildFrame, Pixel_t back=GetDefaultFrameBackground());  Constructor of the base GUI attribute frame. ;  ;  ~TGedFrame () override;  Destructor of the base GUI attribute frame. ;  ; virtual Bool_t AcceptModel (TObject *);  ; virtual void ActivateBaseClassEditors (TClass *cl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveParamListEditor.html:88,Load,Loading,88,doc/master/classTEveParamListEditor.html,https://root.cern,https://root.cern/doc/master/classTEveParamListEditor.html,1,['Load'],['Loading']
Performance,". ROOT: TEvePlot3D Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TEvePlot3D Class ReferenceGraphics » 3D Graphics » Event Display. ; Description of TEvePlot3D. ; Definition at line 18 of file TEvePlot3D.h. Public Member Functions;  TEvePlot3D (const char *n=""TEvePlot3D"", const char *t="""");  Constructor. ;  ;  ~TEvePlot3D () override;  ; Bool_t GetLogX () const;  ; Bool_t GetLogY () const;  ; Bool_t GetLogZ () const;  ; TObject * GetPlot () const;  ; TString GetPlotOption () const;  ; TClass * IsA () const override;  ; void Paint (Option_t *option="""") override;  Paint this object. Only direct rendering is supported. ;  ; void SetLogX (Bool_t l);  ; void SetLogXYZ (Bool_t lx, Bool_t ly, Bool_t lz);  ; void SetLogY (Bool_t l);  ; void SetLogZ (Bool_t l);  ; void SetPlot (TObject *obj, const TString &opt);  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TEveElementList;  TEveElementList (const char *n=""TEveElementList"", const char *t="""", Bool_t doColor=kFALSE, Bool_t doTransparency=kFALSE);  Constructor. ;  ;  TEveElementList (const TEveElementList &e);  Copy constructor. ;  ;  ~TEveElementList () override;  ; Bool_t AcceptElement (TEveElement *el) override;  Check if TEveElement el is inherited from fChildClass. ;  ; TEveElementList * CloneElement () const override;  Clone the element via copy constructor. ;  ; TClass * GetChildClass () const;  ; const char * GetElementName () const override;  Virtual function for retrieving name of the element. ;  ; const char * GetElementTitle () const override;  Virtual function for retrieving title of the render-element. ;  ; TObject * GetObject (const TEveException &=""TEveElementList::GetObject "") const override;  Get",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEvePlot3D.html:79,Load,Loading,79,doc/master/classTEvePlot3D.html,https://root.cern,https://root.cern/doc/master/classTEvePlot3D.html,1,['Load'],['Loading']
Performance,". ROOT: TEvePointSelector Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TEvePointSelector Class ReferenceGraphics » 3D Graphics » Event Display. ; TEvePointSelector is a sub-class of TSelectorDraw for direct extraction of point-like data from a Tree. ; Definition at line 66 of file TEveTreeTools.h. Public Member Functions;  TEvePointSelector (TTree *t=nullptr, TEvePointSelectorConsumer *c=nullptr, const char *vexp="""", const char *sel="""");  Constructor. ;  ;  ~TEvePointSelector () override;  ; TEvePointSelectorConsumer * GetConsumer () const;  ; const char * GetSelection () const;  ; const char * GetSubIdExp () const;  ; Int_t GetSubIdNum () const;  ; TTree * GetTree () const;  ; const char * GetVarexp () const;  ; TClass * IsA () const override;  ; virtual Long64_t Select (const char *selection=nullptr);  Process the tree, select points matching 'selection'. ;  ; virtual Long64_t Select (TTree *t, const char *selection=nullptr);  Process tree 't', select points matching 'selection'. ;  ; void SetConsumer (TEvePointSelectorConsumer *c);  ; void SetSelection (const char *s);  ; void SetSubIdExp (const char *s);  ; void SetTree (TTree *t);  ; void SetVarexp (const char *v);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void TakeAction () override;  Callback from tree-player after a chunk of data has been processed. ;  ;  Public Member Functions inherited from TSelectorDraw;  TSelectorDraw ();  Default selector constructor. ;  ;  ~TSelectorDraw () override;  Selector destructor. ;  ; void Begin (TTree *tree) override;  Called every time a loop on the tree(s) starts. ;  ; virtual Int_t GetAction () const;  ; virtual bool GetCleanElist () const;  ; virtual Int_t GetDime",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEvePointSelector.html:86,Load,Loading,86,doc/master/classTEvePointSelector.html,https://root.cern,https://root.cern/doc/master/classTEvePointSelector.html,1,['Load'],['Loading']
Performance,". ROOT: TEvePointSet Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TEvePointSet Class ReferenceGraphics » 3D Graphics » Event Display. ; TEvePointSet is a render-element holding a collection of 3D points with optional per-point TRef and an arbitrary number of integer ids (to be used for signal, volume-id, track-id, etc). ; 3D point representation is implemented in base-class TPolyMarker3D. Per-point TRef is implemented in base-class TPointSet3D.; By using the TEvePointSelector the points and integer ids can be filled directly from a TTree holding the source data. Setting of per-point TRef's is not supported.; TEvePointSet is a TEveProjectable: it can be projected by using the TEveProjectionManager class. ; Definition at line 31 of file TEvePointSet.h. Public Member Functions;  TEvePointSet (const char *name, Int_t n_points=0, ETreeVarType_e tv_type=kTVT_XYZ);  Constructor. ;  ;  TEvePointSet (const TEvePointSet &e);  Copy constructor. ;  ;  TEvePointSet (Int_t n_points=0, ETreeVarType_e tv_type=kTVT_XYZ);  Constructor. ;  ;  ~TEvePointSet () override;  Destructor. ;  ; TEvePointSet * CloneElement () const override;  Clone the element via copy constructor. ;  ; virtual void ClonePoints (const TEvePointSet &e);  Clone points and all point-related information from point-set 'e'. ;  ; void CopyVizParams (const TEveElement *el) override;  Copy visualization parameters from element el. ;  ; const char * GetElementName () const override;  Virtual function for retrieving name of the element. ;  ; const char * GetElementTitle () const override;  Virtual function for retrieving title of the render-element. ;  ; Int_t GetIntIdsPerPoint () const;  ; const TGPicture * GetListTreeIcon (Bool_t open=kFALSE) override;  Return pointset ic",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEvePointSet.html:81,Load,Loading,81,doc/master/classTEvePointSet.html,https://root.cern,https://root.cern/doc/master/classTEvePointSet.html,1,['Load'],['Loading']
Performance,". ROOT: TEvePointSetArray Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TEvePointSetArray Class ReferenceGraphics » 3D Graphics » Event Display. ; An array of point-sets with each point-set playing a role of a bin in a histogram. ; When a new point is added to a TEvePointSetArray, an additional separating quantity needs to be specified: it determines into which TEvePointSet (bin) the point will actually be stored. Underflow and overflow bins are automatically created but they are not drawn by default.; By using the TEvePointSelector the points and the separating quantities can be filled directly from a TTree holding the source data. Setting of per-point TRef's is not supported.; After the filling, the range of separating variable can be controlled with a slider to choose a sub-set of PointSets that are actually shown. ; Definition at line 107 of file TEvePointSet.h. Public Member Functions;  TEvePointSetArray (const char *name=""TEvePointSetArray"", const char *title="""");  Constructor. ;  ;  ~TEvePointSetArray () override;  Destructor: deletes the fBins array. ;  ; void CloseBins ();  Call this after all the points have been filled. ;  ; Bool_t Fill (Double_t x, Double_t y, Double_t z, Double_t quant);  Add a new point. ;  ; TEvePointSet * GetBin (Int_t bin) const;  ; Double_t GetCurMax () const;  ; Double_t GetCurMin () const;  ; Int_t GetDefPointSetCapacity () const;  ; Double_t GetMax () const;  ; Double_t GetMin () const;  ; Int_t GetNBins () const;  ; void InitBins (const char *quant_name, Int_t nbins, Double_t min, Double_t max);  Initialize internal point-sets with given binning parameters. ;  ; TClass * IsA () const override;  ; void RemoveElementLocal (TEveElement *el) override;  Virtual from TEveElement, provide bin management. ;  ; void Remo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEvePointSetArray.html:86,Load,Loading,86,doc/master/classTEvePointSetArray.html,https://root.cern,https://root.cern/doc/master/classTEvePointSetArray.html,1,['Load'],['Loading']
Performance,". ROOT: TEvePointSetProjected Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; List of all members ; TEvePointSetProjected Class ReferenceGraphics » 3D Graphics » Event Display. ; Projected copy of a TEvePointSet. ; Definition at line 170 of file TEvePointSet.h. Public Member Functions;  TEvePointSetProjected ();  Default contructor. ;  ;  ~TEvePointSetProjected () override;  ; TEveElement * GetProjectedAsElement () override;  Returns this projected dynamic-casted to TEveElement. ;  ; TClass * IsA () const override;  ; void PointSelected (Int_t id) override;  Virtual method of base class TPointSet3D. ;  ; void SetProjection (TEveProjectionManager *proj, TEveProjectable *model) override;  Set projection manager and projection model. ;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UpdateProjection () override;  Re-apply the projection. ;  ;  Public Member Functions inherited from TEvePointSet;  TEvePointSet (const char *name, Int_t n_points=0, ETreeVarType_e tv_type=kTVT_XYZ);  Constructor. ;  ;  TEvePointSet (const TEvePointSet &e);  Copy constructor. ;  ;  TEvePointSet (Int_t n_points=0, ETreeVarType_e tv_type=kTVT_XYZ);  Constructor. ;  ;  ~TEvePointSet () override;  Destructor. ;  ; TEvePointSet * CloneElement () const override;  Clone the element via copy constructor. ;  ; virtual void ClonePoints (const TEvePointSet &e);  Clone points and all point-related information from point-set 'e'. ;  ; void CopyVizParams (const TEveElement *el) override;  Copy visualization parameters from element el. ;  ; const char * GetElementName () const override;  Virtual function for retrieving name of the element. ;  ; const char * GetElementTitle () const override;  Virtual function for retrieving title of the render-element. ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEvePointSetProjected.html:90,Load,Loading,90,doc/master/classTEvePointSetProjected.html,https://root.cern,https://root.cern/doc/master/classTEvePointSetProjected.html,1,['Load'],['Loading']
Performance,". ROOT: TEvePolygonSetProjected Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TEvePolygonSetProjected Class ReferenceGraphics » 3D Graphics » Event Display. ; A set of projected polygons. ; Used for storage of projected geometrical shapes.; Internal struct Polygon_t holds only indices into the master vertex array in TEvePolygonSetProjected. ; Definition at line 21 of file TEvePolygonSetProjected.h. Classes; struct  Polygon_t;  . Public Member Functions;  TEvePolygonSetProjected (const char *n=""TEvePolygonSetProjected"", const char *t="""");  Constructor. ;  ;  ~TEvePolygonSetProjected () override;  Destructor. ;  ; void ComputeBBox () override;  Override of virtual method from TAttBBox. ;  ; void DumpBuffer3D ();  Dump information about currently projected buffer. ;  ; virtual void DumpPolys () const;  Dump information about built polygons. ;  ; TEveElement * GetProjectedAsElement () override;  Returns this projected dynamic-casted to TEveElement. ;  ; TClass * IsA () const override;  ; void ProjectBuffer3D ();  Project current buffer. ;  ; void SetProjection (TEveProjectionManager *mng, TEveProjectable *model) override;  This is virtual method from base-class TEveProjected. ;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UpdateProjection () override;  This is virtual method from base-class TEveProjected. ;  ;  Public Member Functions inherited from TEveShape;  TEveShape (const char *n=""TEveShape"", const char *t="""");  Constructor. ;  ;  ~TEveShape () override;  Destructor. ;  ; void CopyVizParams (const TEveElement *el) override;  Copy visualization parameters from element el. ;  ; virtual Bool_t GetDrawFram",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEvePolygonSetProjected.html:92,Load,Loading,92,doc/master/classTEvePolygonSetProjected.html,https://root.cern,https://root.cern/doc/master/classTEvePolygonSetProjected.html,1,['Load'],['Loading']
Performance,". ROOT: TEveProjectionAxes Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TEveProjectionAxes Class ReferenceGraphics » 3D Graphics » Event Display. ; Axes for non-linear projections. ; Show scale of TEveProjectionManager children. With different step mode tick-marks can positioned equidistant or placed with value monotonically increasing from lower left corner of bounding box. ; Definition at line 24 of file TEveProjectionAxes.h. Public Types; enum  EAxesMode { kHorizontal; , kVertical; , kAll; };  ; enum  ELabMode { kPosition; , kValue; };  ;  Public Types inherited from TEveElement; enum  EChangeBits { kCBColorSelection = (1ULL << ( 0 )); , kCBTransBBox = (1ULL << ( 1 )); , kCBObjProps = (1ULL << ( 2 )); , kCBVisibility = (1ULL << ( 3 )); };  ; typedef void(TEveElement::* ImplySelect_foo) ();  ; typedef List_t::const_iterator List_ci;  ; typedef List_t::iterator List_i;  ; typedef std::list< TEveElement * > List_t;  ; typedef void(TEveElement::* Select_foo) (Bool_t);  ; typedef Set_t::const_iterator Set_ci;  ; typedef Set_t::iterator Set_i;  ; typedef std::set< TEveElement * > Set_t;  ; typedef sLTI_t::iterator sLTI_i;  ; typedef sLTI_t::reverse_iterator sLTI_ri;  ; typedef std::set< TEveListTreeInfo > sLTI_t;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kC",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveProjectionAxes.html:87,Load,Loading,87,doc/master/classTEveProjectionAxes.html,https://root.cern,https://root.cern/doc/master/classTEveProjectionAxes.html,1,['Load'],['Loading']
Performance,". ROOT: TEveProjectionManager Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TEveProjectionManager Class ReferenceGraphics » 3D Graphics » Event Display. ; Manager class for steering of projections and managing projected objects. ; Recursively projects TEveElement's and draws axis in the projected scene. It enables to interactively set TEveProjection parameters and updates projected scene accordingly. ; Definition at line 20 of file TEveProjectionManager.h. Public Member Functions;  TEveProjectionManager (TEveProjection::EPType_e type=TEveProjection::kPT_Unknown);  Constructor. ;  ;  ~TEveProjectionManager () override;  Destructor. ;  ; void AddDependent (TEveElement *el);  Add el as dependent element. ;  ; void ComputeBBox () override;  Virtual from TAttBBox; fill bounding-box information. ;  ; TEveVector & GetCenter ();  ; Float_t GetCurrentDepth () const;  ; Bool_t GetImportEmpty () const;  ; TEveProjection * GetProjection ();  ; Bool_t HandleElementPaste (TEveElement *el) override;  React to element being pasted or dnd-ed. ;  ; virtual TEveElement * ImportElements (TEveElement *el, TEveElement *ext_list=nullptr);  Recursively import elements and apply projection to the newly imported objects. ;  ; virtual TEveElement * ImportElementsRecurse (TEveElement *el, TEveElement *parent);  If el is TEveProjectable add projected instance else add plain TEveElementList to parent. ;  ; TClass * IsA () const override;  ; virtual void ProjectChildren ();  Project all children recursively, update bounding-box and notify TEveManger about the scenes that have been changed. ;  ; virtual void ProjectChildrenRecurse (TEveElement *el);  Project el (via TEveProjected::UpdateProjection()) and recurse through el's children. ;  ; void RemoveDependent (T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveProjectionManager.html:90,Load,Loading,90,doc/master/classTEveProjectionManager.html,https://root.cern,https://root.cern/doc/master/classTEveProjectionManager.html,1,['Load'],['Loading']
Performance,". ROOT: TEveQuadSet Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Static Protected Member Functions |; Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TEveQuadSet Class ReferenceGraphics » 3D Graphics » Event Display. ; Supports various internal formats that result in rendering of a set of planar (lines, rectangles, hexagons with shared normal) objects. ; Names of internal structures and their variables use A, B and C as names for coordinate value-holders. Typical assignment is A->X, B->Y, C->Z but each render mode can override this convention and impose y or x as a fixed (third or C) coordinate. Alphabetic order is obeyed in this correspondence.; For quad modes the deltas are expected to be positive. For line modes negative deltas are ok. ; Definition at line 19 of file TEveQuadSet.h. Classes; struct  QFreeQuad_t;  ; struct  QHex_t;  ; struct  QLineFixC_t;  ; struct  QOrigin_t;  ; struct  QRect_t;  ; struct  QRectFixC_t;  ; struct  QRectFixDim_t;  ; struct  QRectFixDimC_t;  . Public Types; enum  EQuadType_e { ;   kQT_Undef; , kQT_FreeQuad; , kQT_RectangleXY; , kQT_RectangleXZ; , ;   kQT_RectangleYZ; , kQT_RectangleXYFixedDim; , kQT_RectangleXYFixedZ; , kQT_RectangleXZFixedY; , ;   kQT_RectangleYZFixedX; , kQT_RectangleXYFixedDimZ; , kQT_RectangleXZFixedDimY; , kQT_RectangleYZFixedDimX; , ;   kQT_Rectangle_End; , kQT_LineXYFixedZ; , kQT_LineXZFixedY; , kQT_Line_End; , ;   kQT_HexagonXY; , kQT_HexagonYX; , kQT_Hexagon_End. };  ;  Public Types inherited from TEveDigitSet; typedef void(* Callback_foo) (TEveDigitSet *, Int_t, TObject *);  ; enum  ERenderMode_e { kRM_AsIs; , kRM_Line; , kRM_Fill; };  ; typedef TString(* TooltipCB_foo) (TEveDigitSet *, Int_t);  ;  Public Types inherited from TEveElement; enum  EChangeBits { kCBColorSelection = (1ULL << ( 0 )); , kCBTransBBox =",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveQuadSet.html:80,Load,Loading,80,doc/master/classTEveQuadSet.html,https://root.cern,https://root.cern/doc/master/classTEveQuadSet.html,1,['Load'],['Loading']
Performance,". ROOT: TEveRGBAPalette Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TEveRGBAPalette Class ReferenceGraphics » 3D Graphics » Event Display. ; A generic, speed-optimised mapping from value to RGBA color supporting different wrapping and range truncation modes. ; Flag fFixColorRange: specifies how the palette is mapped to signal values:; true - LowLimit -> HighLimit; false - MinValue -> MaxValue . Definition at line 22 of file TEveRGBAPalette.h. Public Types; enum  ELimitAction_e { kLA_Cut; , kLA_Mark; , kLA_Clip; , kLA_Wrap; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TEveRGBAPalette ();  Constructor. ;  ;  TEveRGBAPalette (Int_t min, Int_t max, Bool_t interp=kTRUE, Bool_t showdef=kTRUE, Bool_t fixcolrng=kFALSE);  Constructor. ;  ;  ~TEveRGBAPalette () override;  Destructor. ;  ; void ClearColorArray ();  Clear internal color array. ;  ; const UChar_t * ColorFromValue (Int_t val) const;  ; Bool_t ColorFromValue (Int_t val, Int_t defVal, UChar_t *pix, Bool_t alpha=kTRUE) const;  ; void ColorFromValue (Int_t val, UChar_t *pix, Bool_t alpha=kTRUE) const;  ; Color_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveRGBAPalette.html:84,Load,Loading,84,doc/master/classTEveRGBAPalette.html,https://root.cern,https://root.cern/doc/master/classTEveRGBAPalette.html,1,['Load'],['Loading']
Performance,". ROOT: TEveRecCascade Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; List of all members ; TEveRecCascade Class Reference. . Definition at line 228 of file TEveVSDStructs.h. Public Member Functions;  TEveRecCascade ();  ;  ~TEveRecCascade () override;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  D",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveRecCascade.html:83,Load,Loading,83,doc/master/classTEveRecCascade.html,https://root.cern,https://root.cern/doc/master/classTEveRecCascade.html,1,['Load'],['Loading']
Performance,". ROOT: TEveRecKink Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; List of all members ; TEveRecKink Class Reference. . Definition at line 162 of file TEveVSDStructs.h. Public Member Functions;  TEveRecKink ();  ;  ~TEveRecKink () override;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class in",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveRecKink.html:80,Load,Loading,80,doc/master/classTEveRecKink.html,https://root.cern,https://root.cern/doc/master/classTEveRecKink.html,1,['Load'],['Loading']
Performance,". ROOT: TEveRecTrackT< TT > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; List of all members ; TEveRecTrackT< TT > Class Template Reference. ; template<typename TT>; class TEveRecTrackT< TT >; Definition at line 129 of file TEveVSDStructs.h. Public Member Functions;  TEveRecTrackT ();  ;  ~TEveRecTrackT () override;  ; TClass * IsA () const override;  ; Float_t Pt ();  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveRecTrackT.html:97,Load,Loading,97,doc/master/classTEveRecTrackT.html,https://root.cern,https://root.cern/doc/master/classTEveRecTrackT.html,1,['Load'],['Loading']
Performance,". ROOT: TEveRecV0 Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; List of all members ; TEveRecV0 Class Reference. . Definition at line 197 of file TEveVSDStructs.h. Public Member Functions;  TEveRecV0 ();  ;  ~TEveRecV0 () override;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritanc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveRecV0.html:78,Load,Loading,78,doc/master/classTEveRecV0.html,https://root.cern,https://root.cern/doc/master/classTEveRecV0.html,1,['Load'],['Loading']
Performance,". ROOT: TEveScalableStraightLineSet Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TEveScalableStraightLineSet Class ReferenceGraphics » 3D Graphics » Event Display. ; Straight-line-set with extra scaling, useful for projectables that need to be scaled in accordance with an external object. ; Definition at line 17 of file TEveScalableStraightLineSet.h. Public Member Functions;  TEveScalableStraightLineSet (const char *n=""ScalableStraightLineSet"", const char *t="""");  Constructor. ;  ;  ~TEveScalableStraightLineSet () override;  ; Double_t GetScale () const;  Return current scale. ;  ; TClass * IsA () const override;  ; void SetScale (Double_t scale);  Loop over line parameters and scale coordinates. ;  ; void SetScaleCenter (Float_t x, Float_t y, Float_t z);  Set scale center. ;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TEveStraightLineSet;  TEveStraightLineSet (const char *n=""StraightLineSet"", const char *t="""");  Constructor. ;  ;  ~TEveStraightLineSet () override;  ; Line_t * AddLine (const TEveVector &p1, const TEveVector &p2);  Add a line. ;  ; Line_t * AddLine (Float_t x1, Float_t y1, Float_t z1, Float_t x2, Float_t y2, Float_t z2);  Add a line. ;  ; Marker_t * AddMarker (const TEveVector &p, Int_t line_id=-1);  Add a marker with given position. ;  ; Marker_t * AddMarker (Float_t x, Float_t y, Float_t z, Int_t line_id=-1);  Add a marker with given position. ;  ; Marker_t * AddMarker (Int_t line_id, Float_t pos);  Add a marker for line with given index on relative position pos. ;  ; void ComputeBBox () override;  Compute bounding-box. ;  ; void CopyVizParams (const TEveElement *el) override;  Copy visualization parameters from element el. ;  ; virtual Bool",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveScalableStraightLineSet.html:96,Load,Loading,96,doc/master/classTEveScalableStraightLineSet.html,https://root.cern,https://root.cern/doc/master/classTEveScalableStraightLineSet.html,2,"['Load', 'Scalab']","['Loading', 'ScalableStraightLineSet']"
Performance,". ROOT: TEveScene Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TEveScene Class ReferenceGraphics » 3D Graphics » Event Display. ; Eve representation of TGLScene. ; The GLScene is owned by this class - it is created on construction time and deleted at destruction.; Normally all objects are positioned directly in global scene-space. By setting the fHierarchical flag, positions of children get calculated by multiplying the transformation matrices of all parents. ; Definition at line 26 of file TEveScene.h. Public Member Functions;  TEveScene (const char *n=""TEveScene"", const char *t="""");  Constructor. ;  ;  TEveScene (TGLScenePad *gl_scene, const char *n=""TEveScene"", const char *t="""");  Constructor. ;  ;  ~TEveScene () override;  Destructor. ;  ; void Changed ();  ; void CollectSceneParents (List_t &scenes) override;  Virtual from TEveElement; here we simply append this scene to the list. ;  ; void DestroyElementRenderers (TEveElement *element);  Remove element from the scene. ;  ; void DestroyElementRenderers (TObject *rnrObj);  Remove element represented by object rnrObj from the scene. ;  ; TGLScenePad * GetGLScene () const;  ; Bool_t GetHierarchical () const;  ; const TGPicture * GetListTreeIcon (Bool_t open=kFALSE) override;  Return icon for scene. ;  ; TClass * IsA () const override;  ; Bool_t IsChanged () const;  ; void Paint (Option_t *option="""") override;  Paint the scene. Iterate over children and calls PadPaint(). ;  ; void Repaint (Bool_t dropLogicals=kFALSE);  Repaint the scene. ;  ; void RetransHierarchically ();  Entry point for hierarchical transformation update. ;  ; void SetGLScene (TGLScenePad *s);  ; void SetHierarchical (Bool_t h);  ; void SetName (const char *n) override;  Set scene's name. ;  ; Bool_t SingleRnr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveScene.html:78,Load,Loading,78,doc/master/classTEveScene.html,https://root.cern,https://root.cern/doc/master/classTEveScene.html,1,['Load'],['Loading']
Performance,". ROOT: TEveSceneInfo Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TEveSceneInfo Class ReferenceGraphics » 3D Graphics » Event Display. ; TEveUtil representation of TGLSceneInfo. ; Definition at line 23 of file TEveSceneInfo.h. Public Member Functions;  TEveSceneInfo (TEveViewer *viewer, TEveScene *scene, TGLSceneInfo *sinfo);  Constructor. ;  ;  ~TEveSceneInfo () override;  ; Bool_t AcceptElement (TEveElement *el) override;  Virtual from TEveElement. ;  ; void AddStamp (UChar_t bits) override;  Override from TEveElement. ;  ; TGLSceneBase * GetGLScene () const;  Return the TGLSceneBase represented by this SceneInfo object. ;  ; TGLSceneInfo * GetGLSceneInfo () const;  ; TEveScene * GetScene () const;  ; TEveViewer * GetViewer () const;  ; Bool_t HandleElementPaste (TEveElement *el) override;  Virtual from TEveElement. ;  ; TClass * IsA () const override;  ; Bool_t SingleRnrState () const override;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TEveElement;  TEveElement ();  Default constructor. ;  ;  TEveElement (Color_t &main_color);  Constructor. ;  ;  TEveElement (const TEveElement &e);  Copy constructor. ;  ; virtual ~TEveElement ();  Destructor. ;  ; virtual void AddElement (TEveElement *el);  Add el to the list of children. ;  ; virtual TGListTreeItem * AddIntoListTree (TGListTree *ltree, TEveElement *parent);  Add this render element into ltree to all items belonging to parent. ;  ; virtual TGListTreeItem * AddIntoListTree (TGListTree *ltree, TGListTreeItem *parent_lti);  Add this element into ltree to an already existing item parent_lti. ;  ; virtual TGListTreeItem * AddIntoListTrees (TEveElement *parent);  Add this render element into all list-trees an",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveSceneInfo.html:82,Load,Loading,82,doc/master/classTEveSceneInfo.html,https://root.cern,https://root.cern/doc/master/classTEveSceneInfo.html,1,['Load'],['Loading']
Performance,". ROOT: TEveSceneList Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; List of all members ; TEveSceneList Class ReferenceGraphics » 3D Graphics » Event Display. ; List of Scenes providing common operations on TEveScene collections. ; Definition at line 79 of file TEveScene.h. Public Member Functions;  TEveSceneList (const char *n=""TEveSceneList"", const char *t="""");  Constructor. ;  ;  ~TEveSceneList () override;  ; void DestroyElementRenderers (TEveElement *element);  Loop over all scenes and remove all instances of element from them. ;  ; void DestroyScenes ();  Destroy all scenes and their contents. ;  ; TClass * IsA () const override;  ; void ProcessSceneChanges (Bool_t dropLogicals, TExMap *stampMap);  Loop over all scenes and update them accordingly: ;  ; void RepaintAllScenes (Bool_t dropLogicals);  Repaint all scenes. ;  ; void RepaintChangedScenes (Bool_t dropLogicals);  Repaint scenes that are tagged as changed. ;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TEveElementList;  TEveElementList (const char *n=""TEveElementList"", const char *t="""", Bool_t doColor=kFALSE, Bool_t doTransparency=kFALSE);  Constructor. ;  ;  TEveElementList (const TEveElementList &e);  Copy constructor. ;  ;  ~TEveElementList () override;  ; Bool_t AcceptElement (TEveElement *el) override;  Check if TEveElement el is inherited from fChildClass. ;  ; TEveElementList * CloneElement () const override;  Clone the element via copy constructor. ;  ; TClass * GetChildClass () const;  ; const char * GetElementName () const override;  Virtual function for retrieving name of the element. ;  ; const char * GetElementTitle () const override;  Virtual function for retrieving title of the render-element. ;  ; TObject * GetObject (const TEv",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveSceneList.html:82,Load,Loading,82,doc/master/classTEveSceneList.html,https://root.cern,https://root.cern/doc/master/classTEveSceneList.html,1,['Load'],['Loading']
Performance,". ROOT: TEveSelection Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TEveSelection Class ReferenceGraphics » 3D Graphics » Event Display. ; Make sure there is a SINGLE running TEveSelection for each selection type (select/highlight). ; Definition at line 21 of file TEveSelection.h. Public Types; enum  EPickToSelect { ;   kPS_Ignore; , kPS_Element; , kPS_Projectable; , kPS_Compound; , ;   kPS_PableCompound; , kPS_Master. };  ;  Public Types inherited from TEveElement; enum  EChangeBits { kCBColorSelection = (1ULL << ( 0 )); , kCBTransBBox = (1ULL << ( 1 )); , kCBObjProps = (1ULL << ( 2 )); , kCBVisibility = (1ULL << ( 3 )); };  ; typedef void(TEveElement::* ImplySelect_foo) ();  ; typedef List_t::const_iterator List_ci;  ; typedef List_t::iterator List_i;  ; typedef std::list< TEveElement * > List_t;  ; typedef void(TEveElement::* Select_foo) (Bool_t);  ; typedef Set_t::const_iterator Set_ci;  ; typedef Set_t::iterator Set_i;  ; typedef std::set< TEveElement * > Set_t;  ; typedef sLTI_t::iterator sLTI_i;  ; typedef sLTI_t::reverse_iterator sLTI_ri;  ; typedef std::set< TEveListTreeInfo > sLTI_t;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveSelection.html:82,Load,Loading,82,doc/master/classTEveSelection.html,https://root.cern,https://root.cern/doc/master/classTEveSelection.html,1,['Load'],['Loading']
Performance,". ROOT: TEveSelectorToEventList Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TEveSelectorToEventList Class ReferenceGraphics » 3D Graphics » Event Display. ; TSelector that stores entry numbers of matching TTree entries into an event-list. ; Definition at line 22 of file TEveTreeTools.h. Public Member Functions;  TEveSelectorToEventList (TEventList *evl, const char *sel);  Constructor. ;  ; TClass * IsA () const override;  ; Bool_t Process (Long64_t entry) override;  Process entry. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Int_t Version () const override;  ;  Public Member Functions inherited from TSelectorDraw;  TSelectorDraw ();  Default selector constructor. ;  ;  ~TSelectorDraw () override;  Selector destructor. ;  ; void Begin (TTree *tree) override;  Called every time a loop on the tree(s) starts. ;  ; virtual Int_t GetAction () const;  ; virtual bool GetCleanElist () const;  ; virtual Int_t GetDimension () const;  ; virtual Long64_t GetDrawFlag () const;  ; Int_t GetMultiplicity () const;  ; virtual Int_t GetNfill () const;  ; TObject * GetObject () const;  ; TH1 * GetOldHistogram () const;  ; TTreeFormula * GetSelect () const;  ; virtual Long64_t GetSelectedRows () const;  ; TTree * GetTree () const;  ; virtual Double_t * GetV1 () const;  See TSelectorDraw::GetVal. ;  ; virtual Double_t * GetV2 () const;  See TSelectorDraw::GetVal. ;  ; virtual Double_t * GetV3 () const;  See TSelectorDraw::GetVal. ;  ; virtual Double_t * GetV4 () const;  See TSelectorDraw::GetVal. ;  ; virtual Double_t * GetVal (Int_t i) const;  Return the last values corresponding to the i-th component of the formula being processed (where the component are ':' separated). ;  ; TT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveSelectorToEventList.html:92,Load,Loading,92,doc/master/classTEveSelectorToEventList.html,https://root.cern,https://root.cern/doc/master/classTEveSelectorToEventList.html,1,['Load'],['Loading']
Performance,". ROOT: TEveShape Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TEveShape Class ReferenceGraphics » 3D Graphics » Event Display. ; Abstract base-class for 2D/3D shapes. ; It provides:; fill color / transparency, accessible via Get/SetMainColor/Transparency;; frame line color / width;; flag if frame should be drawn;; flag specifying whether frame or whole shape should be emphasised for highlight. . Definition at line 23 of file TEveShape.h. Public Types; typedef std::vector< TEveVector2 >::iterator vVector2_i;  ; typedef std::vector< TEveVector2 > vVector2_t;  ;  Public Types inherited from TEveElement; enum  EChangeBits { kCBColorSelection = (1ULL << ( 0 )); , kCBTransBBox = (1ULL << ( 1 )); , kCBObjProps = (1ULL << ( 2 )); , kCBVisibility = (1ULL << ( 3 )); };  ; typedef void(TEveElement::* ImplySelect_foo) ();  ; typedef List_t::const_iterator List_ci;  ; typedef List_t::iterator List_i;  ; typedef std::list< TEveElement * > List_t;  ; typedef void(TEveElement::* Select_foo) (Bool_t);  ; typedef Set_t::const_iterator Set_ci;  ; typedef Set_t::iterator Set_i;  ; typedef std::set< TEveElement * > Set_t;  ; typedef sLTI_t::iterator sLTI_i;  ; typedef sLTI_t::reverse_iterator sLTI_ri;  ; typedef std::set< TEveListTreeInfo > sLTI_t;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveShape.html:78,Load,Loading,78,doc/master/classTEveShape.html,https://root.cern,https://root.cern/doc/master/classTEveShape.html,1,['Load'],['Loading']
Performance,". ROOT: TEveStraightLineSet Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TEveStraightLineSet Class ReferenceGraphics » 3D Graphics » Event Display. ; Set of straight lines with optional markers along the lines. ; Definition at line 31 of file TEveStraightLineSet.h. Classes; struct  Line_t;  ; struct  Marker_t;  . Public Member Functions;  TEveStraightLineSet (const char *n=""StraightLineSet"", const char *t="""");  Constructor. ;  ;  ~TEveStraightLineSet () override;  ; Line_t * AddLine (const TEveVector &p1, const TEveVector &p2);  Add a line. ;  ; Line_t * AddLine (Float_t x1, Float_t y1, Float_t z1, Float_t x2, Float_t y2, Float_t z2);  Add a line. ;  ; Marker_t * AddMarker (const TEveVector &p, Int_t line_id=-1);  Add a marker with given position. ;  ; Marker_t * AddMarker (Float_t x, Float_t y, Float_t z, Int_t line_id=-1);  Add a marker with given position. ;  ; Marker_t * AddMarker (Int_t line_id, Float_t pos);  Add a marker for line with given index on relative position pos. ;  ; void ComputeBBox () override;  Compute bounding-box. ;  ; void CopyVizParams (const TEveElement *el) override;  Copy visualization parameters from element el. ;  ; virtual Bool_t GetDepthTest ();  ; TEveChunkManager & GetLinePlex ();  ; TEveChunkManager & GetMarkerPlex ();  ; virtual Bool_t GetRnrLines ();  ; virtual Bool_t GetRnrMarkers ();  ; TClass * IsA () const override;  ; void Paint (Option_t *option="""") override;  Paint the line-set. ;  ; TClass * ProjectedClass (const TEveProjection *p) const override;  Return class of projected object. ;  ; virtual void SetDepthTest (Bool_t x);  ; void SetLine (int idx, const TEveVector &p1, const TEveVector &p2);  Set line vertices with given index. ;  ; void SetLine (int idx, Float_t x1, Float_t y1, Float_t z1, Float_t x2, F",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveStraightLineSet.html:88,Load,Loading,88,doc/master/classTEveStraightLineSet.html,https://root.cern,https://root.cern/doc/master/classTEveStraightLineSet.html,1,['Load'],['Loading']
Performance,". ROOT: TEveStraightLineSetProjected Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; List of all members ; TEveStraightLineSetProjected Class ReferenceGraphics » 3D Graphics » Event Display. ; Projected replica of a TEveStraightLineSet. ; Definition at line 126 of file TEveStraightLineSet.h. Public Member Functions;  TEveStraightLineSetProjected ();  Constructor. ;  ;  ~TEveStraightLineSetProjected () override;  ; TEveElement * GetProjectedAsElement () override;  Returns this projected dynamic-casted to TEveElement. ;  ; TClass * IsA () const override;  ; void SetProjection (TEveProjectionManager *mng, TEveProjectable *model) override;  Set projection manager and model object. ;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UpdateProjection () override;  Callback that actually performs the projection. ;  ;  Public Member Functions inherited from TEveStraightLineSet;  TEveStraightLineSet (const char *n=""StraightLineSet"", const char *t="""");  Constructor. ;  ;  ~TEveStraightLineSet () override;  ; Line_t * AddLine (const TEveVector &p1, const TEveVector &p2);  Add a line. ;  ; Line_t * AddLine (Float_t x1, Float_t y1, Float_t z1, Float_t x2, Float_t y2, Float_t z2);  Add a line. ;  ; Marker_t * AddMarker (const TEveVector &p, Int_t line_id=-1);  Add a marker with given position. ;  ; Marker_t * AddMarker (Float_t x, Float_t y, Float_t z, Int_t line_id=-1);  Add a marker with given position. ;  ; Marker_t * AddMarker (Int_t line_id, Float_t pos);  Add a marker for line with given index on relative position pos. ;  ; void ComputeBBox () override;  Compute bounding-box. ;  ; void CopyVizParams (const TEveElement *el) override;  Copy visualization parameters from element el. ;  ; virtual Bool_t GetDepthTest ();  ; TEveCh",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveStraightLineSetProjected.html:97,Load,Loading,97,doc/master/classTEveStraightLineSetProjected.html,https://root.cern,https://root.cern/doc/master/classTEveStraightLineSetProjected.html,2,"['Load', 'perform']","['Loading', 'performs']"
Performance,". ROOT: TEveText Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TEveText Class ReferenceGraphics » 3D Graphics » Event Display. ; TEveElement class used for displaying FreeType GL fonts. ; Holds a set of parameters to define FTGL font and its rendering style. ; Definition at line 21 of file TEveText.h. Public Member Functions;  TEveText (const char *txt="""");  Constructor. ;  ;  ~TEveText () override;  ; void ComputeBBox () override;  Fill bounding-box information. ;  ; Bool_t GetAutoLighting () const;  ; Float_t GetExtrude () const;  ; Int_t GetFontFile () const;  ; Int_t GetFontMode () const;  ; Int_t GetFontSize () const;  ; Bool_t GetLighting () const;  ; const TGPicture * GetListTreeIcon (Bool_t open=kFALSE) override;  Return TEveText icon. ;  ; Float_t GetPolygonOffset (Int_t i) const;  ; const char * GetText () const;  ; TClass * IsA () const override;  ; void Paint (Option_t *option="""") override;  Paint this object. Only direct rendering is supported. ;  ; void SetAutoLighting (Bool_t isOn);  ; void SetExtrude (Float_t x);  ; void SetFontFile (const char *name);  Set font file regarding to static TGLFontManager fgFontFileArray. ;  ; void SetFontFile (Int_t file);  ; void SetFontMode (Int_t mode);  Set FTFont class ID. ;  ; void SetFontSize (Int_t size, Bool_t validate=kTRUE);  Set valid font size. ;  ; void SetLighting (Bool_t isOn);  ; void SetPolygonOffset (Float_t factor, Float_t units);  Set the scale and units used to calculate depth values. ;  ; void SetText (const char *t);  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TEveElement;  TEveElement ();  Default constructor. ;  ;  TEveElement (Color_t &main_color);  Constructor. ;  ;  TEveElement (const ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveText.html:77,Load,Loading,77,doc/master/classTEveText.html,https://root.cern,https://root.cern/doc/master/classTEveText.html,1,['Load'],['Loading']
Performance,". ROOT: TEveTrack Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TEveTrack Class ReferenceGraphics » 3D Graphics » Event Display. ; Visual representation of a track. ; If member fDpDs is set, the momentum is reduced on all path-marks that do not fix the momentum according to the distance travelled from the previous pathmark. ; Definition at line 32 of file TEveTrack.h. Public Types; enum  EBreakProjectedTracks_e { kBPTDefault; , kBPTAlways; , kBPTNever; };  ; typedef vPathMark_t::const_iterator vPathMark_ci;  ; typedef vPathMark_t::iterator vPathMark_i;  ; typedef std::vector< TEvePathMarkD > vPathMark_t;  ;  Public Types inherited from TEveElement; enum  EChangeBits { kCBColorSelection = (1ULL << ( 0 )); , kCBTransBBox = (1ULL << ( 1 )); , kCBObjProps = (1ULL << ( 2 )); , kCBVisibility = (1ULL << ( 3 )); };  ; typedef void(TEveElement::* ImplySelect_foo) ();  ; typedef List_t::const_iterator List_ci;  ; typedef List_t::iterator List_i;  ; typedef std::list< TEveElement * > List_t;  ; typedef void(TEveElement::* Select_foo) (Bool_t);  ; typedef Set_t::const_iterator Set_ci;  ; typedef Set_t::iterator Set_i;  ; typedef std::set< TEveElement * > Set_t;  ; typedef sLTI_t::iterator sLTI_i;  ; typedef sLTI_t::reverse_iterator sLTI_ri;  ; typedef std::set< TEveListTreeInfo > sLTI_t;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsRe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveTrack.html:78,Load,Loading,78,doc/master/classTEveTrack.html,https://root.cern,https://root.cern/doc/master/classTEveTrack.html,1,['Load'],['Loading']
Performance,". ROOT: TEveTrackList Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TEveTrackList Class ReferenceGraphics » 3D Graphics » Event Display. ; A list of tracks supporting change of common attributes and selection based on track parameters. ; Definition at line 137 of file TEveTrack.h. Public Member Functions;  TEveTrackList (const char *name, TEveTrackPropagator *prop=nullptr);  Constructor. ;  ;  TEveTrackList (TEveTrackPropagator *prop=nullptr);  Constructor. ;  ;  ~TEveTrackList () override;  Destructor. ;  ; void CopyVizParams (const TEveElement *el) override;  Copy visualization parameters from element el. ;  ; void FindMomentumLimits (Bool_t recurse=kTRUE);  Loop over children and find highest pT and p of contained TEveTracks. ;  ; TEveTrack * FindTrackByIndex (Int_t index);  Find track by index, select it and display it in the editor. ;  ; TEveTrack * FindTrackByLabel (Int_t label);  Find track by label, select it and display it in the editor. ;  ; Double_t GetLimP () const;  ; Double_t GetLimPt () const;  ; Double_t GetMaxP () const;  ; Double_t GetMaxPt () const;  ; Double_t GetMinP () const;  ; Double_t GetMinPt () const;  ; TEveTrackPropagator * GetPropagator ();  ; Bool_t GetRecurse () const;  ; Bool_t GetRnrLine () const;  ; Bool_t GetRnrPoints () const;  ; TClass * IsA () const override;  ; void MakeTracks (Bool_t recurse=kTRUE);  Regenerate the visual representations of tracks. ;  ; TClass * ProjectedClass (const TEveProjection *p) const override;  Virtual from TEveProjectable, returns TEveTrackListProjected class. ;  ; void SelectByP (Double_t min_p, Double_t max_p);  Select visibility of tracks by momentum. ;  ; void SelectByP (Double_t min_p, Double_t max_p, TEveElement *el);  Select visibility of el's chil",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveTrackList.html:82,Load,Loading,82,doc/master/classTEveTrackList.html,https://root.cern,https://root.cern/doc/master/classTEveTrackList.html,1,['Load'],['Loading']
Performance,". ROOT: TEveTrackListProjected Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; List of all members ; TEveTrackListProjected Class ReferenceGraphics » 3D Graphics » Event Display. ; Specialization of TEveTrackList for holding TEveTrackProjected objects. ; Definition at line 60 of file TEveTrackProjected.h. Public Member Functions;  TEveTrackListProjected ();  Default constructor. ;  ;  ~TEveTrackListProjected () override;  ; TEveElement * GetProjectedAsElement () override;  Returns this projected dynamic-casted to TEveElement. ;  ; TClass * IsA () const override;  ; void SetDepth (Float_t d) override;  Set depth of all children inheriting from TEveTrackProjected. ;  ; virtual void SetDepth (Float_t d, TEveElement *el);  Set depth of all children of el inheriting from TEveTrackProjected. ;  ; void SetProjection (TEveProjectionManager *proj, TEveProjectable *model) override;  This is virtual method from base-class TEveProjected. ;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UpdateProjection () override;  ;  Public Member Functions inherited from TEveTrackList;  TEveTrackList (const char *name, TEveTrackPropagator *prop=nullptr);  Constructor. ;  ;  TEveTrackList (TEveTrackPropagator *prop=nullptr);  Constructor. ;  ;  ~TEveTrackList () override;  Destructor. ;  ; void CopyVizParams (const TEveElement *el) override;  Copy visualization parameters from element el. ;  ; void FindMomentumLimits (Bool_t recurse=kTRUE);  Loop over children and find highest pT and p of contained TEveTracks. ;  ; TEveTrack * FindTrackByIndex (Int_t index);  Find track by index, select it and display it in the editor. ;  ; TEveTrack * FindTrackByLabel (Int_t label);  Find track by label, select it and display it in the editor. ;  ; Double_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveTrackListProjected.html:91,Load,Loading,91,doc/master/classTEveTrackListProjected.html,https://root.cern,https://root.cern/doc/master/classTEveTrackListProjected.html,1,['Load'],['Loading']
Performance,". ROOT: TEveTrackProjected Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TEveTrackProjected Class ReferenceGraphics » 3D Graphics » Event Display. ; Projected copy of a TEveTrack. ; Definition at line 19 of file TEveTrackProjected.h. Public Member Functions;  TEveTrackProjected ();  Default constructor. ;  ;  ~TEveTrackProjected () override;  ; TEveElement * GetProjectedAsElement () override;  Returns this projected dynamic-casted to TEveElement. ;  ; TClass * IsA () const override;  ; void MakeTrack (Bool_t recurse=kTRUE) override;  Calculate the points of the track for drawing. ;  ; void PrintLineSegments ();  Print line segments info. ;  ; void SecSelected (TEveTrack *) override;  Virtual method from from base-class TEveTrack. ;  ; void SetProjection (TEveProjectionManager *mng, TEveProjectable *model) override;  This is virtual method from base-class TEveProjected. ;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UpdateProjection () override;  Virtual method from base-class TEveProjected. ;  ;  Public Member Functions inherited from TEveTrack;  TEveTrack ();  Default constructor. ;  ;  TEveTrack (const TEveTrack &t);  Copy constructor. ;  ;  TEveTrack (TEveMCTrack *t, TEveTrackPropagator *prop=nullptr);  ;  TEveTrack (TEveRecTrack *t, TEveTrackPropagator *prop=nullptr);  Constructor from TEveRecTrack<float> reconstructed track. ;  ;  TEveTrack (TEveRecTrackD *t, TEveTrackPropagator *prop=nullptr);  Constructor from TEveRecTrack<double> reconstructed track. ;  ;  TEveTrack (TParticle *t, Int_t label, TEveTrackPropagator *prop=nullptr);  Constructor from TParticle. ;  ;  ~TEveTrack () override;  Destructor. ;  ; void AddPathMark (con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveTrackProjected.html:87,Load,Loading,87,doc/master/classTEveTrackProjected.html,https://root.cern,https://root.cern/doc/master/classTEveTrackProjected.html,1,['Load'],['Loading']
Performance,". ROOT: TEveTrackPropagator Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Static Public Attributes |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TEveTrackPropagator Class ReferenceGraphics » 3D Graphics » Event Display. ; Holding structure for a number of track rendering parameters. ; Calculates path taking into account the parameters.; NOTE: Magnetic field direction convention is inverted.; This is decoupled from TEveTrack/TEveTrackList to allow sharing of the Propagator among several instances. Back references are kept so the tracks can be recreated when the parameters change.; TEveTrackList has Get/Set methods for RnrStlye. TEveTrackEditor and TEveTrackListEditor provide editor access.; Enum EProjTrackBreaking_e and member fProjTrackBreaking specify whether 2D projected tracks get broken into several segments when the projected space consists of separate domains (like Rho-Z). The track-breaking is enabled by default. ; Definition at line 121 of file TEveTrackPropagator.h. Classes; struct  Helix_t;  . Public Types; enum  EProjTrackBreaking_e { kPTB_Break; , kPTB_UseFirstPointPos; , kPTB_UseLastPointPos; };  ; enum  EStepper_e { kHelix; , kRungeKutta; };  ;  Public Types inherited from TEveElement; enum  EChangeBits { kCBColorSelection = (1ULL << ( 0 )); , kCBTransBBox = (1ULL << ( 1 )); , kCBObjProps = (1ULL << ( 2 )); , kCBVisibility = (1ULL << ( 3 )); };  ; typedef void(TEveElement::* ImplySelect_foo) ();  ; typedef List_t::const_iterator List_ci;  ; typedef List_t::iterator List_i;  ; typedef std::list< TEveElement * > List_t;  ; typedef void(TEveElement::* Select_foo) (Bool_t);  ; typedef Set_t::const_iterator Set_ci;  ; typedef Set_t::iterator Set_i;  ; typedef std::set< TEveElement * > Set_t;  ; typedef sLTI_t::iterator sLTI_i; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveTrackPropagator.html:88,Load,Loading,88,doc/master/classTEveTrackPropagator.html,https://root.cern,https://root.cern/doc/master/classTEveTrackPropagator.html,1,['Load'],['Loading']
Performance,". ROOT: TEveTrans Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Friends |; List of all members ; TEveTrans Class ReferenceGraphics » 3D Graphics » Event Display. ; TEveTrans is a 4x4 transformation matrix for homogeneous coordinates stored internally in a column-major order to allow direct usage by GL. ; The element type is Double32_t as statically the floats would be precise enough but continuous operations on the matrix must retain precision of column vectors.; Cartan angles are stored in fA[1-3] (+z, -y, +x). They are recalculated on demand.; Direct element access (first two should be used with care):; operator[i] direct access to elements, i:0->15; CM(i,j) element 4*j + i; i,j:0->3 { CM ~ c-matrix }; operator(i,j) element 4*(j-1) + i - 1 i,j:1->4. Column-vector access: USet Get/SetBaseVec(), Get/SetPos() and Arr[XYZT]() methods.; For all methods taking the matrix indices: 1->X, 2->Y, 3->Z; 4->Position (if applicable). 0 reserved for time.; Shorthands in method-names: LF ~ LocalFrame; PF ~ ParentFrame; IP ~ InPlace ; Definition at line 26 of file TEveTrans.h. Public Member Functions;  TEveTrans ();  Default constructor. ;  ;  TEveTrans (const Double_t arr[16]);  Constructor. ;  ;  TEveTrans (const Float_t arr[16]);  Constructor. ;  ;  TEveTrans (const TEveTrans &t);  Constructor. ;  ;  ~TEveTrans () override;  ; Double_t * Array ();  ; const Double_t * Array () const;  ; Double_t * ArrT ();  ; const Double_t * ArrT () const;  ; Double_t * ArrX ();  ; const Double_t * ArrX () const;  ; Double_t * ArrY ();  ; const Double_t * ArrY () const;  ; Double_t * ArrZ ();  ; const Double_t * ArrZ () const;  ; Double_t & CM (Int_t i, Int_t j);  ; Double_t CM (Int_t i, Int_t j) const;  ; TVector3 GetBaseVec (Int_t b) const;  Get base-vector with index b. ;  ; void GetBaseVec (Int_t b, TVect",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveTrans.html:78,Load,Loading,78,doc/master/classTEveTrans.html,https://root.cern,https://root.cern/doc/master/classTEveTrans.html,1,['Load'],['Loading']
Performance,". ROOT: TEveTriangleSet Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TEveTriangleSet Class ReferenceGraphics » 3D Graphics » Event Display. ; Made from a list of vertices and a list of triangles (triplets of vertex indices). ; If input is composed from triangles with direct vertex coordinates one should consider finding all occurrences of the same vertex and specifying it only once. ; Definition at line 23 of file TEveTriangleSet.h. Public Member Functions;  TEveTriangleSet (Int_t nv, Int_t nt, Bool_t norms=kFALSE, Bool_t cols=kFALSE);  Constructor. ;  ;  ~TEveTriangleSet () override;  Destructor. ;  ; Bool_t CanEditMainTransparency () const override;  ; void ComputeBBox () override;  Compute bounding box. ;  ; void GenerateRandomColors ();  Assign random colors to all triangles. ;  ; void GenerateTriangleNormals ();  Generate triangle normals via cross product of triangle edges. ;  ; void GenerateZNormalColors (Float_t fac=20, Int_t min=-20, Int_t max=20, Bool_t interp=kFALSE, Bool_t wrap=kFALSE);  Generate triangle colors by the z-component of the normal. ;  ; Int_t GetNTrings () const;  ; Int_t GetNVerts () const;  ; TClass * IsA () const override;  ; void Paint (Option_t *option="""") override;  Paint this object. Only direct rendering is supported. ;  ; void SetTransparency (Char_t tr);  ; void SetTriangle (Int_t i, Int_t v0, Int_t v1, Int_t v2);  ; void SetTriangleColor (Int_t i, UChar_t r, UChar_t g, UChar_t b, UChar_t a=255);  ; void SetVertex (Int_t i, Float_t x, Float_t y, Float_t z);  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Int_t * Triangle (Int_t i);  ; UChar_t * TriangleColor (Int_t i);  ; Float_t * TriangleNormal (Int_t i);  ; Float_t * Vertex (Int_t i);  ;  Public Member ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveTriangleSet.html:84,Load,Loading,84,doc/master/classTEveTriangleSet.html,https://root.cern,https://root.cern/doc/master/classTEveTriangleSet.html,1,['Load'],['Loading']
Performance,". ROOT: TEveVSD Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; Protected Attributes |; Private Member Functions |; List of all members ; TEveVSD Class ReferenceGraphics » 3D Graphics » Event Display. ; Visualization Summary Data - a collection of trees holding standard event data in experiment independent format. ; Definition at line 19 of file TEveVSD.h. Public Member Functions;  TEveVSD (const char *name=""TEveVSD"", const char *title="""");  Constructor. ;  ;  ~TEveVSD () override;  Destructor. ;  ; virtual void CreateBranches ();  Create internal VSD branches. ;  ; virtual void CreateTrees ();  Create internal trees. ;  ; virtual void DeleteTrees ();  Delete internal trees. ;  ; TClass * IsA () const override;  ; virtual void LoadTrees ();  Load internal trees from directory. ;  ; virtual void SetBranchAddresses ();  Set branche addresses of internal trees. ;  ; virtual void SetDirectory (TDirectory *dir);  Set directory in which the trees are (or will be) created. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void WriteTrees ();  Does nothing here ... reimplemented in sub-classes. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveVSD.html:76,Load,Loading,76,doc/master/classTEveVSD.html,https://root.cern,https://root.cern/doc/master/classTEveVSD.html,3,['Load'],"['Load', 'LoadTrees', 'Loading']"
Performance,". ROOT: TEveViewer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Static Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; List of all members ; TEveViewer Class ReferenceGraphics » 3D Graphics » Event Display. ; Eve representation of TGLViewer. ; The gl-viewer is owned by this class and is deleted in destructor.; The frame is not deleted, it is expected that the gl-viewer implementation will delete that. TGLSAViewer and TGEmbeddedViewer both do so. This could be an optional argument to SetGLViewer. A frame could be passed as well.; When stand-alone viewer is requested, it will come up with menu-hiding enabled by default. If you dislike this, add the following line to rootrc file (or set corresponding gEnv entry in application initialization): Eve.Viewer.HideMenus: off. Definition at line 30 of file TEveViewer.h. Public Member Functions;  TEveViewer (const char *n=""TEveViewer"", const char *t="""");  Constructor. ;  ;  ~TEveViewer () override;  Destructor. ;  ; virtual void AddScene (TEveScene *scene);  Add 'scene' to the list of scenes. ;  ; TObject * GetEditorObject (const TEveException &eh=""TEveViewer::GetEditorObject "") const override;  Object to be edited when this is selected, returns the TGLViewer. ;  ; TGLViewer * GetGLViewer () const;  ; const TGPicture * GetListTreeIcon (Bool_t open=kFALSE) override;  Return TEveViewer icon. ;  ; Bool_t HandleElementPaste (TEveElement *el) override;  Receive a pasted object. ;  ; TClass * IsA () const override;  ; void PostDock () override;  Virtual function called after a window is docked. ;  ; void PreUndock () override;  Virtual function called before a window is undocked. ;  ; void Redraw (Bool_t resetCameras=kFALSE);  Redraw viewer immediately. ;  ; void RemoveElementLocal (TEveElement *el) override;  Remove element 'el' from t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveViewer.html:79,Load,Loading,79,doc/master/classTEveViewer.html,https://root.cern,https://root.cern/doc/master/classTEveViewer.html,1,['Load'],['Loading']
Performance,". ROOT: TEveViewerList Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TEveViewerList Class ReferenceGraphics » 3D Graphics » Event Display. ; List of Viewers providing common operations on TEveViewer collections. ; Definition at line 79 of file TEveViewer.h. Public Member Functions;  TEveViewerList (const char *n=""TEveViewerList"", const char *t="""");  ;  ~TEveViewerList () override;  Destructor. ;  ; void AddElement (TEveElement *el) override;  Call base-class implementation. ;  ; virtual void Connect ();  Connect to TGLViewer class-signals. ;  ; void DeleteAnnotations ();  Delete annotations from all viewers. ;  ; virtual void Disconnect ();  Disconnect from TGLViewer class-signals. ;  ; Float_t GetColorBrightness () const;  ; Bool_t GetShowTooltip () const;  ; TClass * IsA () const override;  ; void OnClicked (TObject *obj, UInt_t button, UInt_t state);  Slot for global TGLViewer::Clicked(). ;  ; void OnMouseOver (TObject *obj, UInt_t state);  Slot for global TGLViewer::MouseOver() signal. ;  ; void OnReClicked (TObject *obj, UInt_t button, UInt_t state);  Slot for global TGLViewer::ReClicked(). ;  ; void OnReMouseOver (TObject *obj, UInt_t state);  Slot for global TGLViewer::ReMouseOver(). ;  ; void OnUnClicked (TObject *obj, UInt_t button, UInt_t state);  Slot for global TGLViewer::UnClicked(). ;  ; void OnUnMouseOver (TObject *obj, UInt_t state);  Slot for global TGLViewer::UnMouseOver(). ;  ; void RemoveElementLocal (TEveElement *el) override;  Decompoundofy el, call base-class version. ;  ; void RemoveElementsLocal () override;  Decompoundofy children, call base-class version. ;  ; void RepaintAllViewers (Bool_t resetCameras, Bool_t dropLogicals);  Repaint all viewers. ;  ; void RepaintChangedViewers (Bool_t resetCameras, Bool",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveViewerList.html:83,Load,Loading,83,doc/master/classTEveViewerList.html,https://root.cern,https://root.cern/doc/master/classTEveViewerList.html,1,['Load'],['Loading']
Performance,". ROOT: TEveWindow Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TEveWindow Class ReferenceabstractGraphics » 3D Graphics » Event Display. ; Abstract base-class for representing eve-windows. ; Sub-classes define a particular GUI frame that gets showin the window. ; Definition at line 209 of file TEveWindow.h. Public Member Functions;  TEveWindow (const char *n=""TEveWindow"", const char *t="""");  ;  ~TEveWindow () override;  Destructor. ;  ; virtual Bool_t CanMakeNewSlots () const;  ; void ClearEveFrame ();  Clears eve-frame associated with this window. ;  ; virtual void DestroyWindow ();  Destroy eve-window - replace it with an empty frame-slot. ;  ; virtual void DestroyWindowAndSlot ();  Destroy eve-window and its frame-slot. ;  ; void FlipShowTitleBar ();  ; TEveCompositeFrame * GetEveFrame ();  ; virtual TGFrame * GetGUIFrame ()=0;  ; Bool_t GetShowTitleBar () const;  ; TClass * IsA () const override;  ; Bool_t IsAncestorOf (TEveWindow *win);  Returns true if this is an ancestor of win. ;  ; Bool_t IsCurrent () const;  Returns true if this window is the current one. ;  ; void MakeCurrent ();  Make this window current. ;  ; void NameTitleChanged () override;  Name or title of the window changed - propagate to frames. ;  ; virtual TEveWindowSlot * NewSlot ();  ; void PopulateEmptyFrame (TEveCompositeFrame *ef);  Populate given frame-slot - intended for initial population of a new slot or low-level window-swapping. ;  ; virtual void PostDock ();  Virtual function called after a window is docked. ;  ; virtual void PreUndock ();  Virtual function called before a window is undocked. ;  ; void ReplaceWindow (TEveWindow *w);  Replace this window with the passed one. ;  ; void SetShowTitleBar (Bool",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveWindow.html:79,Load,Loading,79,doc/master/classTEveWindow.html,https://root.cern,https://root.cern/doc/master/classTEveWindow.html,1,['Load'],['Loading']
Performance,". ROOT: TEveWindowFrame Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TEveWindowFrame Class ReferenceGraphics » 3D Graphics » Event Display. ; Encapsulates TGFrame into an eve-window. ; The frame is owned by the eve-window. ; Definition at line 335 of file TEveWindow.h. Public Member Functions;  TEveWindowFrame (TGFrame *frame, const char *n=""TEveWindowFrame"", const char *t="""");  Constructor. ;  ;  ~TEveWindowFrame () override;  Destructor. ;  ; TGCompositeFrame * GetGUICompositeFrame ();  Returns the registered top-frame of this eve-window dynamic-casted to composite-frame. ;  ; TGFrame * GetGUIFrame () override;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TEveWindow;  TEveWindow (const char *n=""TEveWindow"", const char *t="""");  ;  ~TEveWindow () override;  Destructor. ;  ; virtual Bool_t CanMakeNewSlots () const;  ; void ClearEveFrame ();  Clears eve-frame associated with this window. ;  ; virtual void DestroyWindow ();  Destroy eve-window - replace it with an empty frame-slot. ;  ; virtual void DestroyWindowAndSlot ();  Destroy eve-window and its frame-slot. ;  ; void FlipShowTitleBar ();  ; TEveCompositeFrame * GetEveFrame ();  ; Bool_t GetShowTitleBar () const;  ; Bool_t IsAncestorOf (TEveWindow *win);  Returns true if this is an ancestor of win. ;  ; Bool_t IsCurrent () const;  Returns true if this window is the current one. ;  ; void MakeCurrent ();  Make this window current. ;  ; void NameTitleChanged () override;  Name or title of the window changed - propagate to frames. ;  ; virtual TEveWindowSlot * NewSlot ();  ; void PopulateEmptyFrame (TEveCompositeFrame *ef);  Populate given frame-slot - intended for initial pop",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveWindowFrame.html:84,Load,Loading,84,doc/master/classTEveWindowFrame.html,https://root.cern,https://root.cern/doc/master/classTEveWindowFrame.html,1,['Load'],['Loading']
Performance,". ROOT: TEveWindowManager Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TEveWindowManager Class ReferenceGraphics » 3D Graphics » Event Display. ; Manager for EVE windows. ; Provides the concept of the current window and takes care for proper destruction of the windows.; It is also the EVE-parent of windows that are not attached into the hierarchy of EVE-windows.; Window-manager is created by the EVE-manager and can be retrieved via: gEve->GetWindowManager.; gEveR__EXTERN TEveManager * gEveDefinition TEveManager.h:243; TEveManager::GetWindowManagerTEveWindowManager * GetWindowManager() constDefinition TEveManager.h:142. Definition at line 21 of file TEveWindowManager.h. Public Member Functions;  TEveWindowManager (const char *n=""TEveWindowManager"", const char *t="""");  Constructor. ;  ;  ~TEveWindowManager () override;  Destructor. ;  ; void DeleteWindow (TEveWindow *w);  Called by a window before it gets deleted. ;  ; void DestroyWindows ();  Wait for all windows to shut-down. ;  ; TEveWindow * GetCurrentWindow () const;  ; TEveWindowSlot * GetCurrentWindowAsSlot () const;  Return current window dynamic-casted to TEveWindowSlot. ;  ; TEveWindow * GetDefaultContainer () const;  ; Bool_t HasDefaultContainer () const;  ; void HideAllEveDecorations ();  Hide all eve decorations (title-bar and mini-bar) on all frames. ;  ; TClass * IsA () const override;  ; Bool_t IsCurrentWindow (const TEveWindow *w) const;  ; void SelectWindow (TEveWindow *w);  Entry-point for communicating the fact that a window was acted upon in such a way that it should become the current window. ;  ; void SetDefaultContainer (TEveWindow *w);  ; void SetShowTitleBars (Bool_t state);  Set show title-bar state on all frames. ;  ; void ShowNormalEveDecorations ();  Sh",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveWindowManager.html:86,Load,Loading,86,doc/master/classTEveWindowManager.html,https://root.cern,https://root.cern/doc/master/classTEveWindowManager.html,1,['Load'],['Loading']
Performance,". ROOT: TEveWindowPack Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TEveWindowPack Class ReferenceGraphics » 3D Graphics » Event Display. ; Encapsulates TGPack into an eve-window. ; The pack is owned by the eve-window. ; Definition at line 360 of file TEveWindow.h. Public Member Functions;  TEveWindowPack (TGPack *p, const char *n=""TEveWindowPack"", const char *t="""");  Constructor. ;  ;  ~TEveWindowPack () override;  Destructor. ;  ; Bool_t CanMakeNewSlots () const override;  ; void EqualizeFrames ();  Refit existing frames so that their lengths are equal. ;  ; void FlipOrientation ();  Flip orientation of the pack (vertical / horizontal). ;  ; TGFrame * GetGUIFrame () override;  Return top-frame of this eve-window - the pack. ;  ; TGPack * GetPack () const;  ; TClass * IsA () const override;  ; TEveWindowSlot * NewSlot () override;  Create a new frame-slot at the last position of the pack. ;  ; virtual TEveWindowSlot * NewSlotWithWeight (Float_t w);  Create a new weighted frame-slot at the last position of the pack. ;  ; void SetHorizontal ();  ; void SetVertical (Bool_t x=kTRUE);  Set orientation of the pack (vertical / horizontal). ;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TEveWindow;  TEveWindow (const char *n=""TEveWindow"", const char *t="""");  ;  ~TEveWindow () override;  Destructor. ;  ; void ClearEveFrame ();  Clears eve-frame associated with this window. ;  ; virtual void DestroyWindow ();  Destroy eve-window - replace it with an empty frame-slot. ;  ; virtual void DestroyWindowAndSlot ();  Destroy eve-window and its frame-slot. ;  ; void FlipShowTitleBar ();  ; TEveCompositeFrame * GetEveFrame ();  ; Bool_t GetShowTitleBar () const;  ; Bool_t IsAnc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveWindowPack.html:83,Load,Loading,83,doc/master/classTEveWindowPack.html,https://root.cern,https://root.cern/doc/master/classTEveWindowPack.html,1,['Load'],['Loading']
Performance,". ROOT: TEveWindowSlot Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TEveWindowSlot Class ReferenceGraphics » 3D Graphics » Event Display. ; Description of TEveWindowSlot. ; Definition at line 301 of file TEveWindow.h. Public Member Functions;  TEveWindowSlot (const char *n=""TEveWindowSlot"", const char *t="""");  Constructor. ;  ;  ~TEveWindowSlot () override;  Destructor. ;  ; TGFrame * GetGUIFrame () override;  Return top-frame of this eve-window - the big button to make slot current. ;  ; TClass * IsA () const override;  ; TEveWindowFrame * MakeFrame (TGFrame *frame=nullptr);  An eve-window-frame is created and frame is passed into it. ;  ; TEveWindowPack * MakePack ();  A pack is created in place of this window-slot. ;  ; TEveWindowTab * MakeTab ();  A tab is created in place of this window-slot. ;  ; TGCompositeFrame * StartEmbedding ();  Start embedding a window that will replace the current slot. ;  ; TEveWindowFrame * StopEmbedding (const char *name=nullptr);  An embedded window is created in place of this window-slot. ;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TEveWindow;  TEveWindow (const char *n=""TEveWindow"", const char *t="""");  ;  ~TEveWindow () override;  Destructor. ;  ; virtual Bool_t CanMakeNewSlots () const;  ; void ClearEveFrame ();  Clears eve-frame associated with this window. ;  ; virtual void DestroyWindow ();  Destroy eve-window - replace it with an empty frame-slot. ;  ; virtual void DestroyWindowAndSlot ();  Destroy eve-window and its frame-slot. ;  ; void FlipShowTitleBar ();  ; TEveCompositeFrame * GetEveFrame ();  ; Bool_t GetShowTitleBar () const;  ; Bool_t IsAncestorOf (TEveWindow *win);  Returns tr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveWindowSlot.html:83,Load,Loading,83,doc/master/classTEveWindowSlot.html,https://root.cern,https://root.cern/doc/master/classTEveWindowSlot.html,1,['Load'],['Loading']
Performance,". ROOT: TEveWindowTab Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TEveWindowTab Class ReferenceGraphics » 3D Graphics » Event Display. ; Encapsulates TGTab into an eve-window. ; The tab is owned by the eve-window. ; Definition at line 395 of file TEveWindow.h. Public Member Functions;  TEveWindowTab (TGTab *tab, const char *n=""TEveWindowTab"", const char *t="""");  Constructor. ;  ;  ~TEveWindowTab () override;  Destructor. ;  ; Bool_t CanMakeNewSlots () const override;  ; TGFrame * GetGUIFrame () override;  Return top-frame of this eve-window - the tab. ;  ; TGTab * GetTab () const;  ; TClass * IsA () const override;  ; TEveWindowSlot * NewSlot () override;  Create new frame-slot - a new tab. ;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TEveWindow;  TEveWindow (const char *n=""TEveWindow"", const char *t="""");  ;  ~TEveWindow () override;  Destructor. ;  ; void ClearEveFrame ();  Clears eve-frame associated with this window. ;  ; virtual void DestroyWindow ();  Destroy eve-window - replace it with an empty frame-slot. ;  ; virtual void DestroyWindowAndSlot ();  Destroy eve-window and its frame-slot. ;  ; void FlipShowTitleBar ();  ; TEveCompositeFrame * GetEveFrame ();  ; Bool_t GetShowTitleBar () const;  ; Bool_t IsAncestorOf (TEveWindow *win);  Returns true if this is an ancestor of win. ;  ; Bool_t IsCurrent () const;  Returns true if this window is the current one. ;  ; void MakeCurrent ();  Make this window current. ;  ; void NameTitleChanged () override;  Name or title of the window changed - propagate to frames. ;  ; void PopulateEmptyFrame (TEveCompositeFrame *ef);  Populate given frame-slot - intended for initial population of a new slot or low-level wi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveWindowTab.html:82,Load,Loading,82,doc/master/classTEveWindowTab.html,https://root.cern,https://root.cern/doc/master/classTEveWindowTab.html,1,['Load'],['Loading']
Performance,". ROOT: TEventIter Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TEventIter Class ReferenceabstractPROOF » PROOF kernel Libraries. ; Special iterator class used in TProofPlayer to iterate over events or objects in the packets. ; Definition at line 42 of file TEventIter.h. Public Types; enum  EIterType { kData = 15; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TEventIter ();  Default constructor. ;  ;  TEventIter (TDSet *dset, TSelector *sel, Long64_t first, Long64_t num);  Constructor. ;  ;  ~TEventIter () override;  Destructor. ;  ; virtual Long64_t GetCacheSize ()=0;  ; virtual Long64_t GetEntryNumber (Long64_t);  ; virtual Int_t GetLearnEntries ()=0;  ; virtual Long64_t GetNextEvent ()=0;  ; virtual Int_t GetNextPacket (Long64_t &first, Long64_t &num)=0;  ; TList * GetPackets ();  ; virtual void InvalidatePacket ();  Invalidated the current packet (if any) by setting the TDSetElement::kCorrupted bit. ;  ; TClass * IsA () const override;  ; virtual void StopProcess (Bool_t abort);  Set flag to stop the process. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &Class",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEventIter.html:79,Load,Loading,79,doc/master/classTEventIter.html,https://root.cern,https://root.cern/doc/master/classTEventIter.html,1,['Load'],['Loading']
Performance,". ROOT: TEventIterObj Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; TEventIterObj Class Reference. . Definition at line 122 of file TEventIter.h. Public Member Functions;  TEventIterObj ();  Default ctor. ;  ;  TEventIterObj (TDSet *dset, TSelector *sel, Long64_t first, Long64_t num);  Constructor. ;  ;  ~TEventIterObj () override;  Destructor. ;  ; Long64_t GetCacheSize () override;  ; Int_t GetLearnEntries () override;  ; Long64_t GetNextEvent () override;  Get next event. ;  ; Int_t GetNextPacket (Long64_t &first, Long64_t &num) override;  Get loop range. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TEventIter;  TEventIter ();  Default constructor. ;  ;  TEventIter (TDSet *dset, TSelector *sel, Long64_t first, Long64_t num);  Constructor. ;  ;  ~TEventIter () override;  Destructor. ;  ; virtual Long64_t GetEntryNumber (Long64_t);  ; TList * GetPackets ();  ; virtual void InvalidatePacket ();  Invalidated the current packet (if any) by setting the TDSetElement::kCorrupted bit. ;  ; virtual void StopProcess (Bool_t abort);  Set flag to stop the process. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  B",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEventIterObj.html:82,Load,Loading,82,doc/master/classTEventIterObj.html,https://root.cern,https://root.cern/doc/master/classTEventIterObj.html,1,['Load'],['Loading']
Performance,". ROOT: TEventIterTree Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TEventIterTree Class Reference. . Definition at line 148 of file TEventIter.h. Classes; class  TFileTree;  . Public Member Functions;  TEventIterTree ();  Default ctor. ;  ;  TEventIterTree (TDSet *dset, TSelector *sel, Long64_t first, Long64_t num);  Constructor. ;  ;  ~TEventIterTree () override;  Destructor. ;  ; Long64_t GetCacheSize () override;  Return the size in bytes of the cache, if any Return -1 if not used. ;  ; Int_t GetLearnEntries () override;  Return the number of entries in the learning phase. ;  ; Long64_t GetNextEvent () override;  Get next event. ;  ; Int_t GetNextPacket (Long64_t &first, Long64_t &num) override;  Get loop range. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TEventIter;  TEventIter ();  Default constructor. ;  ;  TEventIter (TDSet *dset, TSelector *sel, Long64_t first, Long64_t num);  Constructor. ;  ;  ~TEventIter () override;  Destructor. ;  ; virtual Long64_t GetEntryNumber (Long64_t);  ; TList * GetPackets ();  ; virtual void InvalidatePacket ();  Invalidated the current packet (if any) by setting the TDSetElement::kCorrupted bit. ;  ; virtual void StopProcess (Bool_t abort);  Set flag to stop the process. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEventIterTree.html:83,Load,Loading,83,doc/master/classTEventIterTree.html,https://root.cern,https://root.cern/doc/master/classTEventIterTree.html,2,"['Load', 'cache']","['Loading', 'cache']"
Performance,". ROOT: TEventIterTree::TFileTree Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; TEventIterTree::TFileTree Class Reference. . Definition at line 162 of file TEventIter.h. Public Member Functions;  TFileTree (const char *name, TFile *f, Bool_t islocal);  Default ctor. ;  ;  ~TFileTree () override;  Default dtor. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEventIterTree_1_1TFileTree.html:94,Load,Loading,94,doc/master/classTEventIterTree_1_1TFileTree.html,https://root.cern,https://root.cern/doc/master/classTEventIterTree_1_1TFileTree.html,1,['Load'],['Loading']
Performance,". ROOT: TEventIterUnit Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TEventIterUnit Class Reference. . Definition at line 99 of file TEventIter.h. Public Member Functions;  TEventIterUnit ();  Default constructor. ;  ;  TEventIterUnit (TDSet *dset, TSelector *sel, Long64_t num);  Main constructor. ;  ;  ~TEventIterUnit () override;  ; Long64_t GetCacheSize () override;  ; Int_t GetLearnEntries () override;  ; Long64_t GetNextEvent () override;  Get next event. ;  ; Int_t GetNextPacket (Long64_t &first, Long64_t &num) override;  Get loop range. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TEventIter;  TEventIter ();  Default constructor. ;  ;  TEventIter (TDSet *dset, TSelector *sel, Long64_t first, Long64_t num);  Constructor. ;  ;  ~TEventIter () override;  Destructor. ;  ; virtual Long64_t GetEntryNumber (Long64_t);  ; TList * GetPackets ();  ; virtual void InvalidatePacket ();  Invalidated the current packet (if any) by setting the TDSetElement::kCorrupted bit. ;  ; virtual void StopProcess (Bool_t abort);  Set flag to stop the process. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another d",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEventIterUnit.html:83,Load,Loading,83,doc/master/classTEventIterUnit.html,https://root.cern,https://root.cern/doc/master/classTEventIterUnit.html,1,['Load'],['Loading']
Performance,". ROOT: TEventList Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Friends |; List of all members ; TEventList Class ReferenceTree Library. ; Legacy Code TEventList is a legacy interface: there will be no bug fixes nor new developments. Therefore it is not recommended to use it in new long-term production code. But, depending on the context, using TEventList might still be a valid solution. ; A TEventList object is a list of selected events (entries) in a TTree.; A TEventList is automatically generated by TTree::Draw: example tree->Draw("">>elist1"",""x<0 && y> 0"");; In this example, a TEventList object named ""elist1"" will be generated. (Previous contents are overwritten). tree->Draw("">>+elist1"",""x<0 && y> 0"");; In this example, selected entries are added to the list.; The TEventList object is added to the list of objects in the current directory.; Use TTree:SetEventList(TEventList *list) to inform TTree that you want to use the list as input. The following code gets a pointer to the TEventList object created in the above commands: TEventList *list = (TEventList*)gDirectory->Get(""elist1"");; gDirectory#define gDirectoryDefinition TDirectory.h:384; TEventList<div class=""legacybox""><h2>Legacy Code</h2> TEventList is a legacy interface: there will be no bug fi...Definition TEventList.h:31. Use function Enter to enter an element in the list; The function Add may be used to merge two lists.; The function Subtract may be used to subtract two lists.; The function Reset may be used to reset a list.; Use TEventList::Print(option) to print the contents. (option ""all"" prints all the list entries).; Operators + and - correspond to functions Add and Subtract.; A TEventList object can be saved on a file via the Write function. . Definition at line 31 of file TEventList.h. Public Member Functions;  TEventList ();  Default construc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEventList.html:79,Load,Loading,79,doc/master/classTEventList.html,https://root.cern,https://root.cern/doc/master/classTEventList.html,1,['Load'],['Loading']
Performance,". ROOT: TExMap Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TExMap Class Reference. ; This class stores a (key,value) pair using an external hash. ; The (key,value) are Long64_t's and therefore can contain object pointers or any longs. The map uses an open addressing hashing method (linear probing). ; Definition at line 33 of file TExMap.h. Classes; struct  Assoc_t;  . Public Member Functions;  TExMap (const TExMap &map);  Copy constructor. ;  ;  TExMap (Int_t mapSize=100);  Create a TExMap. ;  ;  ~TExMap ();  Delete TExMap. ;  ; void Add (Long64_t key, Long64_t value);  ; void Add (ULong64_t hash, Long64_t key, Long64_t value);  Add an (key,value) pair to the table. The key should be unique. ;  ; void AddAt (UInt_t slot, ULong64_t hash, Long64_t key, Long64_t value);  Add an (key,value) pair to the table. ;  ; Int_t Capacity () const;  ; void Delete (Option_t *opt="""") override;  Delete all entries stored in the TExMap. ;  ; void Expand (Int_t newsize);  Expand the TExMap. ;  ; Int_t GetSize () const;  ; Long64_t GetValue (Long64_t key);  ; Long64_t GetValue (ULong64_t hash, Long64_t key);  Return the value belonging to specified key and hash value. ;  ; Long64_t GetValue (ULong64_t hash, Long64_t key, UInt_t &slot);  Return the value belonging to specified key and hash value. ;  ; TClass * IsA () const override;  ; Long64_t & operator() (Long64_t key);  ; Long64_t & operator() (ULong64_t hash, Long64_t key);  Return a reference to the value belonging to the key with the specified hash value. ;  ; TExMap & operator= (const TExMap &);  Assignment operator. ;  ; void Remove (Long64_t key);  ; void Remove (ULong64_t hash, Long64_t key);  Remove entry with specified key from the TExMap. ;  ; void Streamer (TBuffer &) override;  Stream all objec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTExMap.html:75,Load,Loading,75,doc/master/classTExMap.html,https://root.cern,https://root.cern/doc/master/classTExMap.html,1,['Load'],['Loading']
Performance,". ROOT: TExec Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TExec Class ReferenceCore ROOT classes » Base ROOT classes. ; TExec is a utility class that can be used to execute a C++ command when some event happens in a pad. ; The command in turn can invoke a C++ macro to paint graphics objects at positions depending on the histogram or graph contents. Case 1:; The TExec object is in the list of pad primitives (after exec.Draw()). When the pad is drawn, the TExec::Paint function is called. This function will execute the specified command. The following example uses the services of the class Aclock created in $ROOTSYS/test/Aclock.cxx. This examples uses a TTimer to redraw a pad at regular intervals (clock). When the clock is updated, a string with the current date&time is drawn. {; gSystem->Load(""$ROOTSYS/test/Aclock"");; Aclock ck(400);; gPad->SetFillColor(5);; TDatime dt;; TText t(.5,.3,""t"");; t.SetTextAlign(22);; t.SetTextSize(.07);; t.SetTextColor(4);; t.Draw();; TExec ex(""ex"",""dt.Set();t.SetTitle(dt.AsString())"");; ex.Draw();; }; gSystemR__EXTERN TSystem * gSystemDefinition TSystem.h:561; gPad#define gPadDefinition TVirtualPad.h:308; TDatimeThis class stores the date and time with a precision of one second in an unsigned 32 bit word (950130...Definition TDatime.h:37; TExecTExec is a utility class that can be used to execute a C++ command when some event happens in a pad.Definition TExec.h:26; TSystem::Loadvirtual int Load(const char *module, const char *entry="""", Bool_t system=kFALSE)Load a shared library.Definition TSystem.cxx:1857; TTextBase class for several text objects.Definition TText.h:22; exDouble_t ex[n]Definition legend1.C:17. Case 2:; The TExec object may be added to the list of functions of a TH1 or TGraph object via hist->GetListOfFunctions()->Add(exec). When the histogram (or graph) is drawn, the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTExec.html:74,Load,Loading,74,doc/master/classTExec.html,https://root.cern,https://root.cern/doc/master/classTExec.html,2,['Load'],"['Load', 'Loading']"
Performance,". ROOT: TF1 Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TF1 Class ReferenceHistogram Library » Function classes. ; 1-Dim function class . TF1: 1-Dim function class; A TF1 object is a 1-Dim function defined between a lower and upper limit. The function may be a simple function based on a TFormula expression or a precompiled user function. The function may have associated parameters. TF1 graphics function is via the TH1 and TGraph drawing functions.; The following types of functions can be created:. Expression using variable x and no parameters; Expression using variable x with parameters; Lambda Expression with variable x and parameters; A general C function with parameters; A general C++ function object (functor) with parameters; A member function with parameters of a general C++ class. 1 - Expression using variable x and no parameters; Case 1: inline expression using standard C++ functions/operators; {; auto fa1 = new TF1(""fa1"",""sin(x)/x"",0,10);; fa1->Draw();; }; TF1::TF1TF1()TF1 default constructor.Definition TF1.cxx:489. Case 2: inline expression using a ROOT function (e.g. from TMath) without parameters; {; auto fa2 = new TF1(""fa2"",""TMath::DiLog(x)"",0,10);; fa2->Draw();; }. Case 3: inline expression using a user defined CLING function by name; Double_t myFunc(double x) { return x+sin(x); }; ....; auto fa3 = new TF1(""fa3"",""myFunc(x)"",-3,5);; fa3->Draw();; myFuncDouble_t myFunc(Double_t x)Definition ROOTR.C:4; double; xDouble_t x[n]Definition legend1.C:17. 2 - Expression using variable x with parameters; Case 1: inline expression using standard C++ functions/operators; Example a:; auto fa = new TF1(""fa"",""[0]*x*sin([1]*x)"",-3,3);; This create",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTF1.html:72,Load,Loading,72,doc/master/classTF1.html,https://root.cern,https://root.cern/doc/master/classTF1.html,1,['Load'],['Loading']
Performance,". ROOT: TF12 Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TF12 Class ReferenceHistogram Library » Function classes. ; A projection of a TF2 along X or Y. ; It has the same behaviour as a TF1; Example of a function; {; auto f2 = new TF2(""f2"",""sin(x)*sin(y)/(x*y)"",0,5,0,5);; auto f12 = new TF12(""f12"",f2,0.1,""y"");; f12->Draw();; }; TF12::TF12TF12()TF12 default constructor.Definition TF12.cxx:39; TF2A 2-Dim function with parameters.Definition TF2.h:29. Definition at line 25 of file TF12.h. Public Member Functions;  TF12 ();  TF12 default constructor. ;  ;  TF12 (const char *name, TF2 *f2, Double_t xy, Option_t *option=""x"");  TF12 normal constructor. ;  ;  TF12 (const TF12 &f12);  Copy constructor. ;  ;  ~TF12 () override;  F2 default destructor. ;  ; void Copy (TObject &f12) const override;  Copy this F2 to a new F2. ;  ; TF1 * DrawCopy (Option_t *option="""") const override;  Draw a copy of this function with its current attributes. ;  ; Double_t Eval (Double_t x, Double_t y=0, Double_t z=0, Double_t t=0) const override;  Evaluate this formula. ;  ; Double_t EvalPar (const Double_t *x, const Double_t *params=nullptr) override;  Evaluate this function at point x[0]. ;  ; virtual Double_t GetXY () const;  ; TClass * IsA () const override;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save primitive as a C++ statement(s) on output stream out. ;  ; virtual void SetXY (Double_t xy);  Set the value of the constant for the TF2. ;  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TF1;  TF1 ();  TF1 default constructor. ;  ;  TF1 (const char *name, const char *formula, Double_t xmin, Double_t xmax, Option_t *option);  Same constructor as above (for TFor",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTF12.html:73,Load,Loading,73,doc/master/classTF12.html,https://root.cern,https://root.cern/doc/master/classTF12.html,1,['Load'],['Loading']
Performance,". ROOT: TF1::TF1FunctorPointer Struct Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; List of all members ; TF1::TF1FunctorPointer Struct Referenceabstract. . Definition at line 247 of file TF1.h. Public Member Functions; virtual ~TF1FunctorPointer ();  ; virtual TF1FunctorPointer * Clone () const =0;  . #include <TF1.h>. Inheritance diagram for TF1::TF1FunctorPointer:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ ~TF1FunctorPointer(). virtual TF1::TF1FunctorPointer::~TF1FunctorPointer ; (; ). inlinevirtual . Definition at line 248 of file TF1.h. Member Function Documentation. ◆ Clone(). virtual TF1FunctorPointer * TF1::TF1FunctorPointer::Clone ; (; ); const. pure virtual . Implemented in TF1::TF1FunctorPointerImpl< T >. The documentation for this struct was generated from the following file:; hist/hist/inc/TF1.h. TF1TF1FunctorPointer. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:48 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structTF1_1_1TF1FunctorPointer.html:92,Load,Loading,92,doc/master/structTF1_1_1TF1FunctorPointer.html,https://root.cern,https://root.cern/doc/master/structTF1_1_1TF1FunctorPointer.html,1,['Load'],['Loading']
Performance,". ROOT: TF1::TF1FunctorPointerImpl< T > Struct Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; TF1::TF1FunctorPointerImpl< T > Struct Template Reference. ; template<class T>; struct TF1::TF1FunctorPointerImpl< T >; Definition at line 313 of file TF1.h. Public Member Functions;  TF1FunctorPointerImpl (const ROOT::Math::ParamFunctorTempl< T > &func);  ;  TF1FunctorPointerImpl (const std::function< T(const T *f, const Double_t *param)> &func);  ;  ~TF1FunctorPointerImpl () override;  ; TF1FunctorPointer * Clone () const override;  ;  Public Member Functions inherited from TF1::TF1FunctorPointer; virtual ~TF1FunctorPointer ();  . Public Attributes; ROOT::Math::ParamFunctorTempl< T > fImpl;  . #include <TF1.h>. Inheritance diagram for TF1::TF1FunctorPointerImpl< T >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TF1FunctorPointerImpl() [1/2]. template<class T > . TF1::TF1FunctorPointerImpl< T >::TF1FunctorPointerImpl ; (; const ROOT::Math::ParamFunctorTempl< T > & ; func). inline . Definition at line 314 of file TF1.h. ◆ TF1FunctorPointerImpl() [2/2]. template<class T > . TF1::TF1FunctorPointerImpl< T >::TF1FunctorPointerImpl ; (; const std::function< T(const T *f, const Double_t *param)> & ; func). inline . Definition at line 315 of file TF1.h. ◆ ~TF1FunctorPointerImpl(). template<class T > . TF1::TF1FunctorPointerImpl< T >::~TF1FunctorPointerImpl ; (; ). inlineoverride . Definition at line 316 of file TF1.h. Member Function Documentation. ◆ Clone(). template<class T > . TF1FunctorPointer * TF1::TF1FunctorPointerImpl< T >::Clone ; (; ); const. inlineoverridevirtual . Implements TF1::TF1FunctorPointer.; Definition at line 317 of file TF1.h. Member Data Documentation. ◆ fImpl. template<class T > . ROOT::Math::ParamFunctorTempl<T> TF1::TF1",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structTF1_1_1TF1FunctorPointerImpl.html:110,Load,Loading,110,doc/master/structTF1_1_1TF1FunctorPointerImpl.html,https://root.cern,https://root.cern/doc/master/structTF1_1_1TF1FunctorPointerImpl.html,1,['Load'],['Loading']
Performance,". ROOT: TF1AbsComposition Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TF1AbsComposition Class Referenceabstract. . Definition at line 16 of file TF1AbsComposition.h. Public Member Functions;  ~TF1AbsComposition () override;  ; void Copy (TObject &obj) const override=0;  Copy this to obj. ;  ; TClass * IsA () const override;  ; virtual double operator() (const Double_t *x, const Double_t *p)=0;  ; virtual void SetParameters (const Double_t *params)=0;  ; virtual void SetRange (Double_t a, Double_t b)=0;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void Update ()=0;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, In",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTF1AbsComposition.html:86,Load,Loading,86,doc/master/classTF1AbsComposition.html,https://root.cern,https://root.cern/doc/master/classTF1AbsComposition.html,1,['Load'],['Loading']
Performance,". ROOT: TF1Convolution Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; TF1Convolution Class ReferenceHistogram Library » Function classes. ; Class wrapping convolution of two functions. ; Class wrapping convolution of two functions: evaluation of \(\int f(x)g(x-t)dx\); The convolution is performed by default using FFTW if it is available . One can pass optionally the range of the convolution (by default the first function range is used). Note that when using Discrete Fourier Transform (as FFTW), it is a circular transform, so the functions should be approximately zero at the end of the range. If they are significantly different than zero on one side (e.g. the left side) a spill over will occur on the other side (e.g right side). If no function range is given by default the function1 range + 10% is used One should use also a not too small number of points for the DFT (a minimum of 1000). By default 10000 points are used. ; Definition at line 20 of file TF1Convolution.h. Public Member Functions;  TF1Convolution ();  constructor without arguments. ;  ;  TF1Convolution (const TF1Convolution &conv);  Copy constructor (necessary to hold unique_ptr as member variable). ;  ;  TF1Convolution (TF1 *function1, TF1 *function2, Bool_t useFFT=true);  constructor from the two function pointer and a flag is using FFT. ;  ;  TF1Convolution (TF1 *function1, TF1 *function2, Double_t xmin, Double_t xmax, Bool_t useFFT=true);  Constructor from the two function pointer and the convolution range. ;  ;  TF1Convolution (TString formula, Double_t xmin=1., Double_t xmax=0., Bool_t useFFT=true);  Constructor from a formula expression as f1 * f2 where f1 and f2 are two functions known to ROOT. ;  ;  TF1Convolution (TString formula1, TString formula2, Double_t xmin=",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTF1Convolution.html:83,Load,Loading,83,doc/master/classTF1Convolution.html,https://root.cern,https://root.cern/doc/master/classTF1Convolution.html,2,"['Load', 'perform']","['Loading', 'performed']"
Performance,". ROOT: TF1NormSum Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TF1NormSum Class ReferenceHistogram Library » Function classes. ; Class adding two functions: c1*f1+c2*f2. ; Definition at line 19 of file TF1NormSum.h. Public Member Functions;  TF1NormSum ();  ;  TF1NormSum (const std::vector< TF1 * > &functions, const std::vector< Double_t > &coeffs, Double_t scale=1.);  ;  TF1NormSum (const TF1NormSum &nsum);  Copy constructor (necessary to hold unique_ptr as member variable) ;  ;  TF1NormSum (const TString &formula, Double_t xmin, Double_t xmax);  TF1NormSum constructor taking any addition of formulas with coefficient or not. ;  ;  TF1NormSum (TF1 *function1, TF1 *function2, Double_t coeff1=1., Double_t coeff2=1., Double_t scale=1.);  TF1NormSum constructor taking 2 functions, and 2 coefficients (if not equal to 1) ;  ;  TF1NormSum (TF1 *function1, TF1 *function2, TF1 *function3, Double_t coeff1=1., Double_t coeff2=1., Double_t coeff3=1., Double_t scale=1.);  TF1NormSum constructor taking 3 functions, and 3 coefficients (if not equal to 1) ;  ;  ~TF1NormSum () override;  ; void Copy (TObject &obj) const override;  Copy this to obj. ;  ; Int_t GetNpar () const;  Return the number of (non constant) parameters including the coefficients: for 2 functions: c1,c2,p0,p1,p2,p3... ;  ; std::vector< double > GetParameters () const;  Return array of parameters. ;  ; const char * GetParName (Int_t ipar) const;  ; void GetRange (Double_t &a, Double_t &b) const;  ; Double_t GetScale () const;  ; Double_t GetXmax () const;  ; Double_t GetXmin () const;  ; TClass * IsA () const override;  ; double operator() (const Double_t *x, const Double_t *p) override;  Overload the parenthesis to add the functions. ;  ; TF1NormSum & operator= (const TF1NormSum &rhs);  Operator =. ;  ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTF1NormSum.html:79,Load,Loading,79,doc/master/classTF1NormSum.html,https://root.cern,https://root.cern/doc/master/classTF1NormSum.html,1,['Load'],['Loading']
Performance,". ROOT: TF1Parameters Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TF1Parameters Class Reference. ; TF1 Parameters class. ; Definition at line 53 of file TF1.h. Public Member Functions;  TF1Parameters ();  ;  TF1Parameters (const TF1Parameters &rhs);  ;  TF1Parameters (Int_t npar);  ; virtual ~TF1Parameters ();  ; Double_t GetParameter (const char *name) const;  ; Double_t GetParameter (Int_t iparam) const;  ; const Double_t * GetParameters () const;  ; const char * GetParName (Int_t iparam) const;  ; Int_t GetParNumber (const char *name) const;  Returns the parameter number given a name not very efficient but list of parameters is typically small could use a map if needed. ;  ; virtual TClass * IsA () const;  ; TF1Parameters & operator= (const TF1Parameters &rhs);  ; const std::vector< double > & ParamsVec () const;  ; void SetParameter (const char *name, Double_t value);  ; void SetParameter (Int_t iparam, Double_t value);  ; void SetParameters (const Double_t *params);  ; template<typename... Args> ; void SetParameters (Double_t arg1, Args &&... args);  Set parameter values. ;  ; void SetParName (Int_t iparam, const char *name);  ; template<typename... Args> ; void SetParNames (Args &&... args);  Set parameter names. ;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Private Member Functions; bool CheckIndex (Int_t i) const;  . Private Attributes; std::vector< Double_t > fParameters;  ; std::vector< std::string > fParNames;  . #include <TF1.h>; Constructor & Destructor Documentation. ◆ TF1Parameters() [1/3]. TF1Paramete",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTF1Parameters.html:82,Load,Loading,82,doc/master/classTF1Parameters.html,https://root.cern,https://root.cern/doc/master/classTF1Parameters.html,1,['Load'],['Loading']
Performance,". ROOT: TF2 Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TF2 Class ReferenceHistogram Library » Function classes. ; A 2-Dim function with parameters. ; The following types of functions can be created:. Expression using variables x and y; Expression using a user defined function; Lambda Expression with x and y variables and parameters. Expression using variables x and y; {; auto f2 = new TF2(""f2"",""sin(x)*sin(y)/(x*y)"",0,5,0,5);; f2->Draw();; }; TF2::TF2TF2()TF2 default constructor.Definition TF2.cxx:83. Expression using a user defined function; Double_t func(Double_t *val, Double_t *par); {; Float_t x = val[0];; Float_t y = val[1];; Double_t f = x*x-y*y;; return f;; }; ; void fplot(); {; auto f = new TF2(""f"",func,-1,1,-1,1);; f->Draw(""surf1"");; }; f#define f(i)Definition RSha256.hxx:104; Float_tfloat Float_tDefinition RtypesCore.h:57; double; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17. Lambda Expression with x and y variables and parameters; root [0] TF2 f2(""f2"", [](double* x, double*p) { return x[0] + x[1] * p[0]; }, 0., 1., 0., 1., 1); (TF2 &) Name: f2 Title: f2; root [1] f2.SetParameter(0, 1.); root [2] f2.Eval(1., 2.); (double) 3.0000000; pwinID h TVirtualViewer3D TVirtualGLPainter pDefinition TGWin32VirtualGLProxy.cxx:51; TF2A 2-Dim function with parameters.Definition TF2.h:29; See TF1 class for the list of functions formats ; Definition at line 29 of file TF2.h. Public Member Functions;  TF2 ();  TF2 default constructor. ;  ;  TF2 (const char *name, const char *formula, Double_t xmin=0, Double_t xmax=1, Double_t ymin=0, Double_t ymax=1, Option_t *opt=nullptr);  F2 constructor using a formula definition. ;  ; template<class PtrObj , typename MemFn > ;  TF2 (const char *name, const PtrObj &p, MemFn memFn, Double_t xmin, D",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTF2.html:72,Load,Loading,72,doc/master/classTF2.html,https://root.cern,https://root.cern/doc/master/classTF2.html,1,['Load'],['Loading']
Performance,". ROOT: TF3 Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TF3 Class ReferenceHistogram Library » Function classes. ; A 3-Dim function with parameters. ; Definition at line 28 of file TF3.h. Public Member Functions;  TF3 ();  F3 default constructor. ;  ;  TF3 (const char *name, const char *formula, Double_t xmin=0, Double_t xmax=1, Double_t ymin=0, Double_t ymax=1, Double_t zmin=0, Double_t zmax=1, Option_t *opt=nullptr);  F3 constructor using a formula definition. ;  ; template<class PtrObj , typename MemFn > ;  TF3 (const char *name, const PtrObj &p, MemFn memFn, Double_t xmin, Double_t xmax, Double_t ymin, Double_t ymax, Double_t zmin, Double_t zmax, Int_t npar, const char *, const char *);  Backward compatible ctor. ;  ; template<class PtrObj , typename MemFn > ;  TF3 (const char *name, const PtrObj &p, MemFn memFn, Double_t xmin, Double_t xmax, Double_t ymin, Double_t ymax, Double_t zmin, Double_t zmax, Int_t npar, Int_t ndim=3);  Template constructors from a pointer to any C++ class of type PtrObj with a specific member function of type MemFn. ;  ;  TF3 (const char *name, Double_t(*fcn)(const Double_t *, const Double_t *), Double_t xmin=0, Double_t xmax=1, Double_t ymin=0, Double_t ymax=1, Double_t zmin=0, Double_t zmax=1, Int_t npar=0, Int_t ndim=3);  F3 constructor using a pointer to real function—. ;  ;  TF3 (const char *name, Double_t(*fcn)(Double_t *, Double_t *), Double_t xmin=0, Double_t xmax=1, Double_t ymin=0, Double_t ymax=1, Double_t zmin=0, Double_t zmax=1, Int_t npar=0, Int_t ndim=3);  F3 constructor using a pointer to real function. ;  ; template<typename Func > ;  TF3 (const char *name, Func f, Double_t xmin, Double_t xmax, Double_t ymin, Double_t ymax, Double_t zmin, Double_t zmax, Int_t npar, const char *);  Backward compatible ctor. ;  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTF3.html:72,Load,Loading,72,doc/master/classTF3.html,https://root.cern,https://root.cern/doc/master/classTF3.html,1,['Load'],['Loading']
Performance,". ROOT: TFFTComplex Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TFFTComplex Class Reference. ; One of the interface classes to the FFTW package, can be used directly or via the TVirtualFFT class. ; Only the basic interface of FFTW is implemented. Computes complex input/output discrete Fourier transforms (DFT) in one or more dimensions. For the detailed information on the computed transforms please refer to the FFTW manual, chapter ""What FFTW really computes"".; How to use it:. Create an instance of TFFTComplex - this will allocate input and output arrays (unless an in-place transform is specified); Run the Init() function with the desired flags and settings; Set the data (via SetPoints(), SetPoint() or SetPointComplex() functions); Run the Transform() function; Get the output (via GetPoints(), GetPoint() or GetPointComplex() functions); Repeat steps 3)-5) as needed. For a transform of the same size, but with different flags or sign, rerun the Init() function and continue with steps 3)-5); NOTE:; running Init() function will overwrite the input array! Don't set any data before running the Init() function; FFTW computes unnormalized transform, so doing a transform followed by its inverse will lead to the original array scaled by the transform size . Definition at line 20 of file TFFTComplex.h. Public Member Functions;  TFFTComplex ();  default ;  ;  TFFTComplex (Int_t n, Bool_t inPlace);  For 1d transforms Allocates memory for the input array, and, if inPlace = kFALSE, for the output array. ;  ;  TFFTComplex (Int_t ndim, Int_t *n, Bool_t inPlace=kFALSE);  For multidim. ;  ;  ~TFFTComplex () override;  Destroys the data arrays and the plan. ;  ; Int_t * GetN () const override;  ; Int_t GetNdim () const override;  ; void GetPointComplex (const Int_t *ipoint, Dou",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFFTComplex.html:80,Load,Loading,80,doc/master/classTFFTComplex.html,https://root.cern,https://root.cern/doc/master/classTFFTComplex.html,1,['Load'],['Loading']
Performance,". ROOT: TFFTComplexReal Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TFFTComplexReal Class Reference. ; One of the interface classes to the FFTW package, can be used directly or via the TVirtualFFT class. ; Only the basic interface of FFTW is implemented.; Computes the inverse of the real-to-complex transforms (class TFFTRealComplex) taking complex input (storing the non-redundant half of a logically Hermitian array) to real output (see FFTW manual for more details); How to use it:; Create an instance of TFFTComplexReal - this will allocate input and output arrays (unless an in-place transform is specified); Run the Init() function with the desired flags and settings; Set the data (via SetPoints(), SetPoint() or SetPointComplex() functions); Run the Transform() function; Get the output (via GetPoints(), GetPoint() or GetPointReal() functions); Repeat steps 3)-5) as needed. For a transform of the same size, but with different flags, rerun the Init() function and continue with steps 3)-5); NOTE:; running Init() function will overwrite the input array! Don't set any data before running the Init() function; FFTW computes unnormalized transform, so doing a transform followed by its inverse will lead to the original array scaled by the transform size; In Complex to Real transform the input array is destroyed. It cannot then be retrieved when using the Get's methods. . Definition at line 21 of file TFFTComplexReal.h. Public Member Functions;  TFFTComplexReal ();  default ;  ;  TFFTComplexReal (Int_t n, Bool_t inPlace);  For 1d transforms Allocates memory for the input array, and, if inPlace = kFALSE, for the output array. ;  ;  TFFTComplexReal (Int_t ndim, Int_t *n, Bool_t inPlace);  For ndim-dimensional transforms Second argument contains sizes of the transform in",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFFTComplexReal.html:84,Load,Loading,84,doc/master/classTFFTComplexReal.html,https://root.cern,https://root.cern/doc/master/classTFFTComplexReal.html,1,['Load'],['Loading']
Performance,". ROOT: TFFTReal Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TFFTReal Class Reference. ; One of the interface classes to the FFTW package, can be used directly or via the TVirtualFFT class. ; Only the basic interface of FFTW is implemented.; Computes transforms called r2r in FFTW manual:; transforms of real input and output in ""halfcomplex"" format i.e. real and imaginary parts for a transform of size n stored as (r0, r1, r2, ..., rn/2, i(n+1)/2-1, ..., i2, i1); discrete Hartley transform; sine and cosine transforms (DCT-I,II,III,IV and DST-I,II,III,IV) For the detailed information on the computed transforms please refer to the FFTW manual, chapter ""What FFTW really computes"". How to use it:; Create an instance of TFFTReal - this will allocate input and output arrays (unless an in-place transform is specified); Run the Init() function with the desired flags and settings (see function comments for possible kind parameters); Set the data (via SetPoints()or SetPoint() functions); Run the Transform() function; Get the output (via GetPoints() or GetPoint() functions); Repeat steps 3)-5) as needed. For a transform of the same size, but of different kind (or with different flags), rerun the Init() function and continue with steps 3)-5); NOTE:; running Init() function will overwrite the input array! Don't set any data before running the Init() function!; FFTW computes unnormalized transform, so doing a transform followed by its inverse will lead to the original array scaled BY:; transform size (N) for R2HC, HC2R, DHT transforms; 2*(N-1) for DCT-I (REDFT00); 2*(N+1) for DST-I (RODFT00); 2*N for the remaining transforms. Transform inverses:; R2HC<-->HC2R; DHT<-->DHT; DCT-I<-->DCT-I; DCT-II<-->DCT-III; DCT-IV<-->DCT-IV; DST-I<-->DST-I; DST-II<-->DST-III; DST-IV<-->DST-",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFFTReal.html:77,Load,Loading,77,doc/master/classTFFTReal.html,https://root.cern,https://root.cern/doc/master/classTFFTReal.html,1,['Load'],['Loading']
Performance,". ROOT: TFFTRealComplex Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TFFTRealComplex Class Reference. ; One of the interface classes to the FFTW package, can be used directly or via the TVirtualFFT class. ; Only the basic interface of FFTW is implemented.; Computes a real input/complex output discrete Fourier transform in 1 or more dimensions. However, only out-of-place transforms are now supported for transforms in more than 1 dimension. For detailed information about the computed transforms, please refer to the FFTW manual; How to use it:; Create an instance of TFFTRealComplex - this will allocate input and output arrays (unless an in-place transform is specified); Run the Init() function with the desired flags and settings (see function comments for possible kind parameters); Set the data (via SetPoints()or SetPoint() functions); Run the Transform() function; Get the output (via GetPoints() or GetPoint() functions); Repeat steps 3)-5) as needed For a transform of the same size, but with different flags, rerun the Init() function and continue with steps 3)-5). NOTE:; running Init() function will overwrite the input array! Don't set any data before running the Init() function; FFTW computes unnormalized transform, so doing a transform followed by its inverse will lead to the original array scaled by the transform size . Definition at line 20 of file TFFTRealComplex.h. Public Member Functions;  TFFTRealComplex ();  default ;  ;  TFFTRealComplex (Int_t n, Bool_t inPlace);  For 1d transforms Allocates memory for the input array, and, if inPlace = kFALSE, for the output array. ;  ;  TFFTRealComplex (Int_t ndim, Int_t *n, Bool_t inPlace);  For ndim-dimensional transforms Second argument contains sizes of the transform in each dimension. ;  ;  ~TFFTRealComplex ()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFFTRealComplex.html:84,Load,Loading,84,doc/master/classTFFTRealComplex.html,https://root.cern,https://root.cern/doc/master/classTFFTRealComplex.html,1,['Load'],['Loading']
Performance,". ROOT: TFITSHDU Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TFITSHDU Class ReferenceGraphics » 2D Graphics » FITS file. ; FITS file interface class. ; TFITSHDU is a class that allows extracting images and data from FITS files and contains several methods to manage them. ; Definition at line 35 of file TFITS.h. Classes; union  Cell;  ; struct  Column;  ; struct  HDURecord;  . Public Types; enum  EColumnTypes { kString; , kRealNumber; , kRealArray; , kRealVector; };  ; enum  EHDUTypes { kImageHDU; , kTableHDU; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TFITSHDU (const char *filepath, const char *extension_name);  TFITSHDU constructor from filepath and extension name. ;  ;  TFITSHDU (const char *filepath, Int_t extension_number);  TFITSHDU constructor from filepath and extension number. ;  ;  TFITSHDU (const char *filepath_with_filter);  TFITSHDU constructor from file path with HDU selection filter. ;  ;  ~TFITSHDU () override;  TFITSHDU destructor. ;  ; Bool_t Change (const char *filter);  Change to another HDU given by ""filter"". ;  ; Bool_t Change (Int",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFITSHDU.html:77,Load,Loading,77,doc/master/classTFITSHDU.html,https://root.cern,https://root.cern/doc/master/classTFITSHDU.html,1,['Load'],['Loading']
Performance,". ROOT: TFPBlock Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TFPBlock Class ReferenceInput/Output Library. ; This class represents the encapsulation of a block request. ; It contains the chunks to be prefetched and also serves as a container for the information read. These blocks are prefetch in a special reader thread by the TFilePrefetch class. ; Definition at line 22 of file TFPBlock.h. Public Member Functions;  TFPBlock (Long64_t *, Int_t *, Int_t);  Constructor. ;  ;  ~TFPBlock () override;  Destructor. ;  ; char * GetBuffer () const;  Get block buffer. ;  ; Long64_t GetCapacity () const;  Return capacity of the block. ;  ; Long64_t GetDataSize () const;  Return size of the data in the block. ;  ; Int_t * GetLen () const;  Get pointer to the array of lengths. ;  ; Int_t GetLen (Int_t) const;  Get length of the element at index i. ;  ; Int_t GetNoElem () const;  Return number of elements in the block. ;  ; Long64_t * GetPos () const;  Get pointer to the array of postions. ;  ; Long64_t GetPos (Int_t) const;  Get position of the element at index i. ;  ; char * GetPtrToPiece (Int_t index) const;  Get block buffer. ;  ; TClass * IsA () const override;  ; void ReallocBlock (Long64_t *, Int_t *, Int_t);  Reallocate the block's buffer based on the length of the elements it will contain. ;  ; void SetBuffer (char *);  Set block buffer. ;  ; void SetPos (Int_t, Long64_t);  Set pos value for index idx. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFPBlock.html:77,Load,Loading,77,doc/master/classTFPBlock.html,https://root.cern,https://root.cern/doc/master/classTFPBlock.html,1,['Load'],['Loading']
Performance,". ROOT: TFTP Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; TFTP Class Reference. . Definition at line 34 of file TFTP.h. Public Types; enum  { kDfltBlockSize = 0x80000; , kDfltWindowSize = 65535; , kBinary = 0; , kAscii = 1; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TFTP (const char *url, Int_t parallel=1, Int_t wsize=kDfltWindowSize, TSocket *sock=nullptr);  Open connection to host specified by the url using par parallel sockets. ;  ; virtual ~TFTP ();  TFTP dtor. Send close message and close socket. ;  ; Bool_t AccessPathName (const char *path, EAccessMode mode=kFileExists, Bool_t print=kFALSE);  Returns kFALSE if one can access a file using the specified access mode. ;  ; void Ascii ();  ; void ascii ();  ; void bin ();  ; void Binary ();  ; void bye ();  ; void cd (const char *dir) const;  ; Int_t ChangeDirectory (const char *dir) const;  Change the remote directory. ;  ; Int_t ChangePermission (const char *file, Int_t mode) const;  Change permissions of a remote file. ;  ; void chmod (const char *file, Int_t mode) const;  ; Int_t Close ();  Close ftp connection. ;  ; Int_t DeleteDirectory (const ch",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFTP.html:73,Load,Loading,73,doc/master/classTFTP.html,https://root.cern,https://root.cern/doc/master/classTFTP.html,1,['Load'],['Loading']
Performance,. ROOT: TFdSet Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; TFdSet Class Reference. . Definition at line 90 of file TMacOSXSystem.mm. Public Member Functions;  TFdSet ();  ;  TFdSet ();  ;  TFdSet ();  ;  TFdSet (const TFdSet &fd);  ;  TFdSet (const TFdSet &org);  ;  TFdSet (const TFdSet &org);  ; virtual ~TFdSet ();  ; void Clr (Int_t fd);  ; void Clr (Int_t n);  ; void Clr (Int_t n);  ; void Copy (TFdSet &fd) const;  ; ULong_t * GetBits ();  ; ULong_t * GetBits ();  ; Int_t * GetBits ();  ; UInt_t GetCount ();  ; Int_t GetFd (Int_t i);  ; Int_t IsSet (Int_t fd);  ; Int_t IsSet (Int_t n);  ; Int_t IsSet (Int_t n);  ; TFdSet & operator= (const TFdSet &fd);  ; TFdSet & operator= (const TFdSet &rhs);  ; TFdSet & operator= (const TFdSet &rhs);  ; void Set (Int_t fd);  ; void Set (Int_t n);  ; void Set (Int_t n);  ; void Zero ();  ; void Zero ();  ; void Zero ();  . Private Attributes; ULong_t fds_bits [(((kFDSETSIZE)+((kNFDBITS) -1))/(kNFDBITS))];  ; fd_set * fds_bits;  . Constructor & Destructor Documentation. ◆ TFdSet() [1/6]. TFdSet::TFdSet ; (; ). inline . Definition at line 94 of file TMacOSXSystem.mm. ◆ TFdSet() [2/6]. TFdSet::TFdSet ; (; const TFdSet & ; org). inline . Definition at line 95 of file TMacOSXSystem.mm. ◆ TFdSet() [3/6]. TFdSet::TFdSet ; (; ). inline . Definition at line 372 of file TUnixSystem.cxx. ◆ TFdSet() [4/6]. TFdSet::TFdSet ; (; const TFdSet & ; org). inline . Definition at line 373 of file TUnixSystem.cxx. ◆ TFdSet() [5/6]. TFdSet::TFdSet ; (; ). inline . Definition at line 118 of file TWinNTSystem.cxx. ◆ ~TFdSet(). virtual TFdSet::~TFdSet ; (; ). inlinevirtual . Definition at line 119 of file TWinNTSystem.cxx. ◆ TFdSet() [6/6]. TFdSet::TFdSet ; (; const TFdSet & ; fd). inline . Definition at line 121 of file TWinNTSystem.cxx. Member Function Documentation. ◆ Clr() [1/3]. void TFdSet::Clr ; (; Int,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFdSet.html:75,Load,Loading,75,doc/master/classTFdSet.html,https://root.cern,https://root.cern/doc/master/classTFdSet.html,1,['Load'],['Loading']
Performance,". ROOT: TFeldmanCousins Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TFeldmanCousins Class ReferenceMath » Legacy Physics Classes. ; Legacy Code TFeldmanCousins is a legacy interface: there will be no bug fixes nor new developments. Therefore it is not recommended to use it in new long-term production code. But, depending on the context, using TFeldmanCousins might still be a valid solution. Consider switching to RooStats for non-trivial cases. ; Class to calculate the CL upper limit using the Feldman-Cousins method as described in PRD V57 #7, p3873-3889; The default confidence interval calculated using this method is 90% This is set either by having a default the constructor, or using the appropriate fraction when instantiating an object of this class (e.g. 0.9); The simple extension to a gaussian resolution function bounded at zero has not been addressed as yet -> ‘time is of the essence’ as they write on the wall of the maze in that classic game ...; VARIABLES THAT CAN BE ALTERED; => depending on your desired precision: The initial values of fMuMin, fMuMax, fMuStep and fNMax are those used in the PRD: fMuMin = 0.0; fMuMax = 50.0; fMuStep= 0.005; TFeldmanCousins::fMuMaxDouble_t fMuMaxDefinition TFeldmanCousins.h:55; TFeldmanCousins::fMuStepDouble_t fMuStepDefinition TFeldmanCousins.h:56; TFeldmanCousins::fMuMinDouble_t fMuMinDefinition TFeldmanCousins.h:54; but there is total flexibility in changing this should you desire.; see example of use in $ROOTSYS/tutorials/math/FeldmanCousins.C; see note about: ""Should I use TRolke, TFeldmanCousins, TLimit?"" in the TRolke class description.; Author: Adrian Bevan, Liverpool University; Copyright Liverpool University 2001 bevan.nosp@m.@sla.nosp@m.c.sta.nosp@m.nfor.nosp@m.d.edu ; Definition at line 47 of file TFeldman",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFeldmanCousins.html:84,Load,Loading,84,doc/master/classTFeldmanCousins.html,https://root.cern,https://root.cern/doc/master/classTFeldmanCousins.html,1,['Load'],['Loading']
Performance,". ROOT: TFile Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; Static Private Member Functions |; Friends |; List of all members ; TFile Class ReferenceInput/Output Library. ; A ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-like logical structure, possibly including subdirectory hierarchies. ; See alsoInput/Output Library . ROOT files layout (or io/doc/TFile folder in your codebase). ROOT file data format specification. A ROOT file is composed of a header, followed by consecutive data records (TKey instances) with a well defined format.; The first data record starts at byte fBEGIN (currently set to kBEGIN). Bytes 1->kBEGIN contain the file description, when fVersion >= 1000000 it is a large file (> 2 GB) and the offsets will be 8 bytes long and fUnits will be set to 8:. Byte Range Record Name Description . 1->4 ""root"" Root file identifier . 5->8 fVersion File format version . 9->12 fBEGIN Pointer to first data record . 13->16 [13->20] fEND Pointer to first free word at the EOF . 17->20 [21->28] fSeekFree Pointer to FREE data record . 21->24 [29->32] fNbytesFree Number of bytes in FREE data record . 25->28 [33->36] nfree Number of free data records . 29->32 [37->40] fNbytesName Number of bytes in TNamed at creation time . 33->33 [41->41] fUnits Number of bytes for file pointers . 34->37 [42->45] fCompress Compression level and algorithm . 38->41 [46->53] fSeekInfo Pointer to TStreamerInfo record . 42->45 [54->57] fNbytesInfo Number of bytes in TStreamerInfo record . 46->63 [58->75] fUUID Universal Unique ID . For the purpose of magic bytes in the context of ROOT files' MIME definition, the following additional requirements are introduced:; The value ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFile.html:74,Load,Loading,74,doc/master/classTFile.html,https://root.cern,https://root.cern/doc/master/classTFile.html,1,['Load'],['Loading']
Performance,". ROOT: TFile Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; Static Private Member Functions |; Friends |; List of all members ; TFile Class ReferenceInput/Output Library. ; A ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-like logical structure, possibly including subdirectory hierarchies. ; See alsoInput/Output Library . ROOT files layout (or io/doc/TFile folder in your codebase). ROOT file data format specification. A ROOT file is composed of a header, followed by consecutive data records (TKey instances) with a well defined format.; The first data record starts at byte fBEGIN (currently set to kBEGIN). Bytes 1->kBEGIN contain the file description, when fVersion >= 1000000 it is a large file (> 2 GB) and the offsets will be 8 bytes long and fUnits will be set to 8:. Byte Range Record Name Description . 1->4 ""root"" Root file identifier . 5->8 fVersion File format version . 9->12 fBEGIN Pointer to first data record . 13->16 [13->20] fEND Pointer to first free word at the EOF . 17->20 [21->28] fSeekFree Pointer to FREE data record . 21->24 [29->32] fNbytesFree Number of bytes in FREE data record . 25->28 [33->36] nfree Number of free data records . 29->32 [37->40] fNbytesName Number of bytes in TNamed at creation time . 33->33 [41->41] fUnits Number of bytes for file pointers . 34->37 [42->45] fCompress Compression level and algorithm . 38->41 [46->53] fSeekInfo Pointer to TStreamerInfo record . 42->45 [54->57] fNbytesInfo Number of bytes in TStreamerInfo record . 46->63 [58->75] fUUID Universal Unique ID . For the purpose of magic bytes in the context of ROOT files' MIME definition, the following additional requirements are introduced:; The value o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTFile.html:73,Load,Loading,73,doc/v632/classTFile.html,https://root.cern,https://root.cern/doc/v632/classTFile.html,1,['Load'],['Loading']
Performance,". ROOT: TFile::InfoListRet Struct Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Attributes |; List of all members ; TFile::InfoListRet Struct Reference. ; Simple struct of the return value of GetStreamerInfoListImpl. ; Definition at line 145 of file TFile.h. Public Attributes; ROOT::Internal::RConcurrentHashColl::HashValue fHash;  ; TList * fList;  ; Int_t fReturnCode;  . #include <TFile.h>; Member Data Documentation. ◆ fHash. ROOT::Internal::RConcurrentHashColl::HashValue TFile::InfoListRet::fHash. Definition at line 148 of file TFile.h. ◆ fList. TList* TFile::InfoListRet::fList. Definition at line 146 of file TFile.h. ◆ fReturnCode. Int_t TFile::InfoListRet::fReturnCode. Definition at line 147 of file TFile.h. Collaboration diagram for TFile::InfoListRet:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; The documentation for this struct was generated from the following file:; io/io/inc/TFile.h. TFileInfoListRet. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:50 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structTFile_1_1InfoListRet.html:88,Load,Loading,88,doc/master/structTFile_1_1InfoListRet.html,https://root.cern,https://root.cern/doc/master/structTFile_1_1InfoListRet.html,1,['Load'],['Loading']
Performance,". ROOT: TFileCacheRead Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TFileCacheRead Class ReferenceInput/Output Library. ; A cache when reading files over the network. ; A caching system to speed up network I/O, i.e. when there is no operating system caching support (like the buffer cache for local disk I/O). The cache makes sure that every I/O is done with a (large) fixed length buffer thereby avoiding many small I/O's. Currently the read cache system is used by the classes TNetFile, TNetXNGFile and TWebFile (via TFile::ReadBuffers()). When processing TTree, TChain, a specialized class TTreeCache that derives from this class is automatically created. ; Definition at line 22 of file TFileCacheRead.h. Public Member Functions;  TFileCacheRead ();  Default Constructor. ;  ;  TFileCacheRead (TFile *file, Int_t buffersize, TObject *tree=nullptr);  Creates a TFileCacheRead data structure. ;  ;  ~TFileCacheRead () override;  Destructor. ;  ; virtual Int_t AddBranch (const char *, Bool_t=kFALSE);  ; virtual Int_t AddBranch (TBranch *, Bool_t=kFALSE);  ; virtual void AddNoCacheBytesRead (Long64_t len);  ; virtual void AddNoCacheReadCalls (Int_t reads);  ; virtual void Close (Option_t *option="""");  Close out any threads or asynchronous fetches used by the underlying implementation. ;  ; virtual Int_t GetBufferSize () const;  ; virtual Long64_t GetBytesRead () const;  ; virtual Long64_t GetBytesReadExtra () const;  ; TFile * GetFile () const;  ; virtual Long64_t GetNoCacheBytesRead () const;  ; virtual Int_t GetNoCacheReadCalls () const;  ; Int_t GetNseek () const;  ; Int_t GetNtot () const;  ; Long64_t GetPrefetchedBlocks () const;  ; virtual TFilePrefetch * GetPrefetchObj ();  ; virtual Int_t GetReadCalls () const;  ; virtual Int_t GetUnzip",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFileCacheRead.html:83,Load,Loading,83,doc/master/classTFileCacheRead.html,https://root.cern,https://root.cern/doc/master/classTFileCacheRead.html,5,"['Load', 'cache']","['Loading', 'cache']"
Performance,". ROOT: TFileCacheWrite Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TFileCacheWrite Class ReferenceInput/Output Library. ; A cache when writing files over the network. ; A caching system to speed up network I/O, i.e. when there is no operating system caching support (like the buffer cache for local disk I/O). The cache makes sure that every I/O is done with a (large) fixed length buffer thereby avoiding many small I/O's. Currently the write cache system is used by the classes TNetFile, TNetXNGFile and TWebFile (via TFile::WriteBuffers()).; The write cache is automatically created when writing a remote file (created in TFile::Open()). ; Definition at line 19 of file TFileCacheWrite.h. Public Member Functions;  TFileCacheWrite ();  Default Constructor. ;  ;  TFileCacheWrite (TFile *file, Int_t buffersize);  Creates a TFileCacheWrite data structure. ;  ;  ~TFileCacheWrite () override;  Destructor. ;  ; virtual Bool_t Flush ();  Flush the current write buffer to the file. ;  ; virtual Int_t GetBytesInCache () const;  ; TClass * IsA () const override;  ; void Print (Option_t *option="""") const override;  Print class internal structure. ;  ; virtual Int_t ReadBuffer (char *buf, Long64_t pos, Int_t len);  Called by the read cache to check if the requested data is not in the write cache buffer. ;  ; virtual void SetFile (TFile *file);  Set the file using this cache. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual Int_t WriteBuffer (const char *buf, Long64_t pos, Int_t len);  Write buffer at position pos in the write buffer. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFileCacheWrite.html:84,Load,Loading,84,doc/master/classTFileCacheWrite.html,https://root.cern,https://root.cern/doc/master/classTFileCacheWrite.html,6,"['Load', 'cache']","['Loading', 'cache']"
Performance,". ROOT: TFileCollection Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TFileCollection Class ReferenceCore ROOT classes » Base ROOT classes. ; Class that contains a list of TFileInfo's and accumulated meta data information about its entries. ; This class is used to describe file sets as stored by Grid file catalogs, by PROOF or any other collection of TFile names. ; Definition at line 39 of file TFileCollection.h. Public Types; enum  EStatusBits { kRemoteCollection = (1ULL << ( 15 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TFileCollection (const char *name=nullptr, const char *title=nullptr, const char *file=nullptr, Int_t nfiles=-1, Int_t firstfile=1);  TFileCollection constructor. ;  ; virtual ~TFileCollection ();  Cleanup. ;  ; Int_t Add (const char *path);  Add all files matching the specified pattern to the collection. ;  ; Int_t Add (TFileCollection *coll);  Add content of the TFileCollection to this collection. ;  ; Int_t Add (TFileInfo *info);  Add TFileInfo to the collection. ;  ; Int_t AddFromFile (const char *file, Int_t nfiles=-1, Int_t firstfile=1);  Add file names contained in the specified text file. ;  ; Bool_t Ad",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFileCollection.html:84,Load,Loading,84,doc/master/classTFileCollection.html,https://root.cern,https://root.cern/doc/master/classTFileCollection.html,1,['Load'],['Loading']
Performance,". ROOT: TFileDrawMap Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TFileDrawMap Class Reference. ; This class is automatically called by TFile::DrawMap. ; It draws a canvas showing the internal structure of a ROOT file. Each key or basket in a file is shown with a fill area drawn at the byte position of the key/basket in the file. The Y axis of the canvas shows the number of Kbytes/Mbytes. The X axis shows the bytes between y(i) and y(i+1). A color corresponding to the class in the key/basket is automatically selected using the class unique identifier.; When moving the mouse in the canvas, the ""Event Status"" panels shows the object corresponding to the mouse position. if the object is a key, it shows the class and object name as well as the file directory name if the file has sub-directories.; if the object is a basket, it shows:; the name of the Tree; the name of the branch; the basket number; the entry number in the basket. Special keys like the StreamerInfo record, the Keys List Record and the Free Blocks Record are also shown.; When clicking the right mouse button, a pop-up menu is shown with its title identifying the picked object and with the items:; DrawObject: in case of a key, the Draw function of the object is called in case of a basket, the branch is drawn for all entries; DumpObject: in case of a key, the Dump function of the object is called in case of a basket, tree->Show(entry) is called; InspectObject: the Inspect function is called for the object. The normal axis zoom functionality can be used to zoom or unzoom One can also use the TCanvas context menu SetCanvasSize to make a larger canvas and use the canvas scroll bars.; When the class is built, it is possible to identify a subset of the objects to be shown. For example, to view only the key",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFileDrawMap.html:81,Load,Loading,81,doc/master/classTFileDrawMap.html,https://root.cern,https://root.cern/doc/master/classTFileDrawMap.html,1,['Load'],['Loading']
Performance,". ROOT: TFileHandler Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TFileHandler Class Reference. . Definition at line 65 of file TSysEvtHandler.h. Public Types; enum  { kRead = 1; , kWrite = 2; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TFileHandler (int fd, int mask);  Create a file descriptor event handler. ;  ; virtual ~TFileHandler ();  ; void Add () override;  Add file event handler to system file handler list. ;  ; int GetFd () const;  ; virtual Bool_t HasReadInterest ();  True if handler is interested in read events. ;  ; virtual Bool_t HasWriteInterest ();  True if handler is interested in write events. ;  ; TClass * IsA () const override;  ; virtual Bool_t IsReadReady () const;  ; virtual Bool_t IsWriteReady () const;  ; Bool_t Notify () override;  Notify when event occurred on descriptor associated with this handler. ;  ; virtual Bool_t ReadNotify ();  Notify when something can be read from the descriptor associated with this handler. ;  ; void Remove () override;  Remove file event handler from system file handler list. ;  ; virtual void ResetReadyMask ();  ; void SetFd (int fd);  ; virtual void SetInterest (Int_t mas",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFileHandler.html:81,Load,Loading,81,doc/master/classTFileHandler.html,https://root.cern,https://root.cern/doc/master/classTFileHandler.html,1,['Load'],['Loading']
Performance,". ROOT: TFileInfo Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TFileInfo Class ReferenceCore ROOT classes » Base ROOT classes. ; Class describing a generic file including meta information. ; Definition at line 39 of file TFileInfo.h. Public Types; enum  EStatusBits { kStaged = (1ULL << ( 15 )); , kCorrupted = (1ULL << ( 16 )); , kSortWithIndex = (1ULL << ( 17 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TFileInfo (const char *url=nullptr, Long64_t size=-1, const char *uuid=nullptr, const char *md5=nullptr, TObject *meta=nullptr);  Constructor. ;  ;  TFileInfo (const TFileInfo &);  Copy constructor. ;  ; virtual ~TFileInfo ();  Destructor. ;  ; Bool_t AddMetaData (TObject *meta);  Add's a meta data object to the file info object. ;  ; Bool_t AddUrl (const char *url, Bool_t infront=kFALSE);  Add a new URL. ;  ; Int_t Compare (const TObject *obj) const override;  Compare TFileInfo object by their first urls. ;  ; TUrl * FindByUrl (const char *url, Bool_t withDeflt=kFALSE);  Find an element from a URL. Returns 0 if not found. ;  ; TUrl * GetCurrentUrl () const;  Return the current url. ;  ; TUrl * GetFirstUrl () const;  ; Int_t GetIn",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFileInfo.html:78,Load,Loading,78,doc/master/classTFileInfo.html,https://root.cern,https://root.cern/doc/master/classTFileInfo.html,1,['Load'],['Loading']
Performance,". ROOT: TFileInfoMeta Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TFileInfoMeta Class Reference. . Definition at line 108 of file TFileInfo.h. Public Types; enum  EStatusBits { kExternal = (1ULL << ( 15 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TFileInfoMeta ();  ;  TFileInfoMeta (const char *objPath, const char *objClass=""TTree"", Long64_t entries=-1, Long64_t first=0, Long64_t last=-1, Long64_t totbytes=-1, Long64_t zipbytes=-1);  Create file meta data object. ;  ;  TFileInfoMeta (const char *objPath, const char *objDir, const char *objClass, Long64_t entries=-1, Long64_t first=0, Long64_t last=-1, Long64_t totbytes=-1, Long64_t zipbytes=-1);  Create file meta data object. ;  ;  TFileInfoMeta (const TFileInfoMeta &m);  Copy constructor. ;  ; virtual ~TFileInfoMeta ();  ; const char * GetClass () const;  ; const char * GetDirectory () const;  Get the object's directory in the ROOT file. ;  ; Long64_t GetEntries () const;  ; Long64_t GetFirst () const;  ; Long64_t GetLast () const;  ; const char * GetObject () const;  Get the object name, with path stripped off. ;  ; Long64_t GetTotBytes () const;  ; Long64_t GetZipBytes () co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFileInfoMeta.html:82,Load,Loading,82,doc/master/classTFileInfoMeta.html,https://root.cern,https://root.cern/doc/master/classTFileInfoMeta.html,1,['Load'],['Loading']
Performance,. ROOT: TFileMergeInfo Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; Private Types |; Private Member Functions |; List of all members ; TFileMergeInfo Class Reference. . Definition at line 42 of file TFileMergeInfo.h. Public Member Functions;  TFileMergeInfo (TDirectory *outputfile);  ; virtual ~TFileMergeInfo ();  ; virtual TClass * IsA () const;  ; void Reset ();  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Public Attributes; TIOFeatures * fIOFeatures {nullptr};  ; Bool_t fIsFirst {kTRUE};  ; TString fOptions;  ; TDirectory * fOutputDirectory {nullptr};  ; TObject * fUserData {nullptr};  . Private Types; using TIOFeatures = ROOT::TIOFeatures;  . Private Member Functions;  TFileMergeInfo ()=delete;  ;  TFileMergeInfo (const TFileMergeInfo &)=delete;  ; TFileMergeInfo & operator= (const TFileMergeInfo &)=delete;  . #include <TFileMergeInfo.h>; Member Typedef Documentation. ◆ TIOFeatures. using TFileMergeInfo::TIOFeatures = ROOT::TIOFeatures. private . Definition at line 44 of file TFileMergeInfo.h. Constructor & Destructor Documentation. ◆ TFileMergeInfo() [1/3]. TFileMergeInfo::TFileMergeInfo ; (; ). privatedelete . ◆ TFileMergeInfo() [2/3]. TFileMergeInfo::TFileMergeInfo ; (; const TFileMergeInfo & ; ). privatedelete . ◆ TFileMergeInfo() [3/3]. TFileMergeInfo::TFileMergeInfo ; (; TDirectory * ; outputfile). inline . Definition at line 57 of file TFileMergeInfo.h. ◆ ~TFileMergeInfo(). virtual TFileMergeInfo::~TFileMergeInfo ; (; ). inlinevirtual . Definition at line 58 of file TFileMergeInfo.h. Member Function Documentation. ◆ Class(). static TClass * TFileMergeInfo::C,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFileMergeInfo.html:83,Load,Loading,83,doc/master/classTFileMergeInfo.html,https://root.cern,https://root.cern/doc/master/classTFileMergeInfo.html,1,['Load'],['Loading']
Performance,. ROOT: TFileMergeInfo Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; Private Types |; Private Member Functions |; List of all members ; TFileMergeInfo Class Reference. . Definition at line 42 of file TFileMergeInfo.h. Public Member Functions;  TFileMergeInfo (TDirectory *outputfile);  ; virtual ~TFileMergeInfo ();  ; virtual TClass * IsA () const;  ; void Reset ();  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Public Attributes; TIOFeatures * fIOFeatures {nullptr};  ; Bool_t fIsFirst {kTRUE};  ; TString fOptions;  ; TDirectory * fOutputDirectory {nullptr};  ; TObject * fUserData {nullptr};  . Private Types; using TIOFeatures = ROOT::TIOFeatures;  . Private Member Functions;  TFileMergeInfo ()=delete;  ;  TFileMergeInfo (const TFileMergeInfo &)=delete;  ; TFileMergeInfo & operator= (const TFileMergeInfo &)=delete;  . #include <TFileMergeInfo.h>; Member Typedef Documentation. ◆ TIOFeatures. using TFileMergeInfo::TIOFeatures = ROOT::TIOFeatures. private . Definition at line 44 of file TFileMergeInfo.h. Constructor & Destructor Documentation. ◆ TFileMergeInfo() [1/3]. TFileMergeInfo::TFileMergeInfo ; (; ). privatedelete . ◆ TFileMergeInfo() [2/3]. TFileMergeInfo::TFileMergeInfo ; (; const TFileMergeInfo & ; ). privatedelete . ◆ TFileMergeInfo() [3/3]. TFileMergeInfo::TFileMergeInfo ; (; TDirectory * ; outputfile). inline . Definition at line 57 of file TFileMergeInfo.h. ◆ ~TFileMergeInfo(). virtual TFileMergeInfo::~TFileMergeInfo ; (; ). inlinevirtual . Definition at line 58 of file TFileMergeInfo.h. Member Function Documentation. ◆ Class(). static TClass * TFileMergeInfo::Cl,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTFileMergeInfo.html:82,Load,Loading,82,doc/v632/classTFileMergeInfo.html,https://root.cern,https://root.cern/doc/v632/classTFileMergeInfo.html,1,['Load'],['Loading']
Performance,". ROOT: TFileMerger Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Types |; Private Member Functions |; List of all members ; TFileMerger Class ReferenceInput/Output Library. ; This class provides file copy and merging services. ; It can be used to copy files (not only ROOT files), using TFile or any of its remote file access plugins. It is therefore useful in a Grid environment where the files might be accessible only remotely. The merging interface allows files containing histograms and trees to be merged, like the standalone hadd program. ; Definition at line 30 of file TFileMerger.h. Public Types; enum  EPartialMergeType { ;   kRegular = 0; , kIncremental = (1ULL << ( 1 )); , kResetable = (1ULL << ( 2 )); , kNonResetable = (1ULL << ( 3 )); , ;   kDelayWrite = (1ULL << ( 4 )); , kAll = (1ULL << ( 2 ))|(1ULL << ( 3 )); , kAllIncremental = kIncremental | kAll; , kOnlyListed = (1ULL << ( 5 )); , ;   kSkipListed = (1ULL << ( 6 )); , kKeepCompression = (1ULL << ( 7 )). };  Type of the partial merge. More...;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TFileMerger (Bool_t isLocal=kTRUE, Bool_t histoOneGo=kTRUE);  Create file merger object. ;  ;  ~TFi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFileMerger.html:80,Load,Loading,80,doc/master/classTFileMerger.html,https://root.cern,https://root.cern/doc/master/classTFileMerger.html,1,['Load'],['Loading']
Performance,". ROOT: TFileOpenHandle Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TFileOpenHandle Class ReferenceInput/Output Library. ; Class holding info about the file being opened. ; Definition at line 354 of file TFile.h. Public Member Functions;  ~TFileOpenHandle () override;  ; Int_t GetCompress () const;  ; Int_t GetNetOpt () const;  ; const char * GetOpt () const;  ; Bool_t Matches (const char *name);  Return kTRUE if this async request matches the open request specified by 'url'. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void S",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFileOpenHandle.html:84,Load,Loading,84,doc/master/classTFileOpenHandle.html,https://root.cern,https://root.cern/doc/master/classTFileOpenHandle.html,1,['Load'],['Loading']
Performance,". ROOT: TFilePrefetch Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Static Private Member Functions |; Private Attributes |; List of all members ; TFilePrefetch Class ReferenceInput/Output Library. ; The prefetching mechanism uses two classes (TFilePrefetch and TFPBlock) to prefetch in advance a block of tree entries. ; There is a thread which takes care of actually transferring the blocks and making them available to the main requesting thread. Therefore, the time spent by the main thread waiting for the data before processing considerably decreases. Besides the prefetching mechanisms there is also a local caching option which can be enabled by the user. Both capabilities are disabled by default and must be explicitly enabled by the user. ; Definition at line 33 of file TFilePrefetch.h. Public Member Functions;  TFilePrefetch (TFile *);  Constructor. ;  ;  ~TFilePrefetch () override;  Destructor. ;  ; void AddPendingBlock (TFPBlock *);  Safe method to add a block to the pendingList. ;  ; void AddReadBlock (TFPBlock *);  Safe method to add a block to the readList. ;  ; Bool_t BinarySearchReadList (TFPBlock *, Long64_t, Int_t, Int_t *);  Search for a requested element in a block and return the index. ;  ; Bool_t CheckBlockInCache (char *&, TFPBlock *);  Test if the block is in cache. ;  ; TFPBlock * CreateBlockObj (Long64_t *, Int_t *, Int_t);  Create a new block or recycle an old one. ;  ; char * GetBlockFromCache (const char *, Int_t);  Return a buffer from cache. ;  ; std::condition_variable & GetCondNewBlock ();  ; TFPBlock * GetPendingBlock ();  Safe method to remove a block from the pendingList. ;  ; TThread * GetThread () const;  Return reference to the consumer thread. ;  ; Long64_t GetWaitTime ();  Return the time spent wating for buffer to be read in microseconds. ;  ; TClass * IsA () const override;  ; Bool_t IsPrefetchFini",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFilePrefetch.html:82,Load,Loading,82,doc/master/classTFilePrefetch.html,https://root.cern,https://root.cern/doc/master/classTFilePrefetch.html,1,['Load'],['Loading']
Performance,". ROOT: TFileStager Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TFileStager Class Reference. . Definition at line 36 of file TFileStager.h. Public Member Functions;  TFileStager (const char *stager);  ; virtual ~TFileStager ();  ; virtual TList * GetStaged (TCollection *pathlist);  Retrieves the staging (online) status for a list of path names. ;  ; TClass * IsA () const override;  ; virtual Bool_t IsStaged (const char *);  Just check if the file exists locally. ;  ; virtual Bool_t IsValid () const;  ; virtual Int_t Locate (const char *u, TString &f);  Just check if the file exists locally. ;  ; virtual Int_t LocateCollection (TFileCollection *fc, Bool_t addDummyUrl=kFALSE);  Massive location of files. ;  ; virtual Bool_t Matches (const char *s);  ; virtual Bool_t Stage (const char *, Option_t *=nullptr);  ; virtual Bool_t Stage (TCollection *pathlist, Option_t *opt=nullptr);  Issue a stage request for a list of files. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns n",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFileStager.html:80,Load,Loading,80,doc/master/classTFileStager.html,https://root.cern,https://root.cern/doc/master/classTFileStager.html,1,['Load'],['Loading']
Performance,". ROOT: TFitEditor Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TFitEditor Class ReferenceGUI » ROOT Fit Panel. ; Allows to perform, explore and compare various fits. ; To display the new Fit panel interface right click on a histogram or a graph to pop up the context menu and then select the menu entry 'Fit Panel'.; ""General"" Tab; The first set of GUI elements is related to the function choice and settings. The status bar on the bottom provides information about the current minimization settings using the following abbreviations: LIB - shows the current choice between Minuit/Minuit2/Fumili MIGRAD or FUMILI points to the current minimization method in use. Itr: - shows the maximum number of iterations nnnn set for the fit. Prn: - can be DEF/VER/QT and shows the current print option in use.; ""Predefined"" combo box - contains a list of predefined functions in ROOT. The default one is Gaussian.; ""Operation"" radio button group defines selected operational mode between functions: NOP - no operation (default); ADD - addition CONV - convolution (will be implemented in the future).; Users can enter the function expression in a text entry field. The entered string is checked after Enter key was pressed. An error message shows up if the string is not accepted. The current prototype is limited and users have no freedom to enter file/user function names in this field.; ""Set Parameters"" button opens a dialog for parameters settings.; ""Fit Settings"" provides user interface elements related to the fitter. Currently there are two method choices: Chi-square and Binned Likelihood.; ""Linear Fit"" check button sets the use of Linear fitter is it is selected. Otherwise the option 'F' i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFitEditor.html:79,Load,Loading,79,doc/master/classTFitEditor.html,https://root.cern,https://root.cern/doc/master/classTFitEditor.html,2,"['Load', 'perform']","['Loading', 'perform']"
Performance,". ROOT: TFitResult Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TFitResult Class ReferenceHistogram Library. ; Extends the ROOT::Fit::Result class with a TNamed inheritance providing easy possibility for I/O. ; Definition at line 34 of file TFitResult.h. Public Member Functions;  TFitResult (const char *name, const char *title);  ;  TFitResult (const ROOT::Fit::FitResult &f);  Constructor from a ROOT::Fit::FitResult copy the contained TF1 pointer function if it is. ;  ;  TFitResult (int status=0);  ;  ~TFitResult () override;  ; bool Contour (unsigned int ipar, unsigned int jpar, TGraph *gr, double confLevel=0.683);  Create a 2D contour around the minimum for the parameter ipar and jpar if a minimum does not exist or is invalid it will return false on exit a TGraph is filled with the contour points the number of contour points is determined by the size of the TGraph. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; double Error (unsigned int i) const;  ; TMatrixDSym GetCorrelationMatrix () const;  Return the correlation matrix from fit. ;  ; TMatrixDSym GetCovarianceMatrix () const;  Return the covariance matrix from fit. ;  ; TClass * IsA () const override;  ; void Print (Option_t *option="""") const override;  Print result of the fit, by default chi2, parameter values and errors. ;  ; bool Scan (unsigned int ipar, TGraph *gr, double xmin=0, double xmax=0);  Scan parameter ipar between value of xmin and xmax A graph must be given which will be on return filled with the scan resul If the graph size is zero, a default size n = 40 will be used. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFitResult.html:79,Load,Loading,79,doc/master/classTFitResult.html,https://root.cern,https://root.cern/doc/master/classTFitResult.html,1,['Load'],['Loading']
Performance,". ROOT: TFitResultPtr Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TFitResultPtr Class Reference. ; Provides an indirection to the TFitResult class and with a semantics identical to a TFitResult pointer, i.e. ; it is like a smart pointer to a TFitResult. In addition it provides an automatic conversion to an integer. In this way it can be returned from the TH1::Fit method and the change in TH1::Fit be backward compatible. ; Definition at line 32 of file TFitResultPtr.h. Public Member Functions;  TFitResultPtr (const std::shared_ptr< TFitResult > &p);  Constructor from a TFitResult pointer. ;  ;  TFitResultPtr (const TFitResultPtr &rhs);  ;  TFitResultPtr (int status=-1);  ;  TFitResultPtr (TFitResult *p);  Constructor from a TFitResult pointer. ;  ; virtual ~TFitResultPtr ();  Destructor. ;  ; TFitResult * Get () const;  Return contained pointer. ;  ; virtual TClass * IsA () const;  ;  operator int () const;  ; TFitResult & operator* () const;  Implement the de-reference operator to make the class acts as a pointer to a TFitResult assert in case the class does not contain a pointer to TFitResult. ;  ; TFitResult * operator-> () const;  Implement the -> operator to make the class acts as a pointer to a TFitResult. ;  ; TFitResultPtr & operator= (const TFitResultPtr &rhs);  Assignment operator. ;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Private Attributes; std::shared_ptr< TFitResult > fPointer;  ! Smart Pointer to TFitResult class ;  ; int fStatus;  fit status code ;  . #include <TFitResultPtr.h>; Constructor & Destructor Documentation. ◆ TFitR",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFitResultPtr.html:82,Load,Loading,82,doc/master/classTFitResultPtr.html,https://root.cern,https://root.cern/doc/master/classTFitResultPtr.html,1,['Load'],['Loading']
Performance,". ROOT: TFitter Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TFitter Class Reference. ; Legacy Code TFitter is a legacy interface: there will be no bug fixes nor new developments. Therefore it is not recommended to use it in new long-term production code. But, depending on the context, using TFitter might still be a valid solution. Consider switching to ROOT::Fit::Fitter. ; The ROOT standard fitter based on TMinuit ; Definition at line 19 of file TFitter.h. Public Member Functions;  TFitter (Int_t maxpar=25);  Default constructor. ;  ;  ~TFitter () override;  Default destructor. ;  ; Double_t Chisquare (Int_t npar, Double_t *params) const override;  ; void Clear (Option_t *option="""") override;  reset the fitter environment ;  ; Int_t ExecuteCommand (const char *command, Double_t *args, Int_t nargs) override;  Execute a fitter command; command : command string args : list of nargs command arguments. ;  ; void FixParameter (Int_t ipar) override;  Fix parameter ipar. ;  ; void GetConfidenceIntervals (Int_t n, Int_t ndim, const Double_t *x, Double_t *ci, Double_t cl=0.95) override;  Computes point-by-point confidence intervals for the fitted function. ;  ; void GetConfidenceIntervals (TObject *obj, Double_t cl=0.95) override;  Computes confidence intervals at level cl. ;  ; Double_t * GetCovarianceMatrix () const override;  return a pointer to the covariance matrix ;  ; Double_t GetCovarianceMatrixElement (Int_t i, Int_t j) const override;  return element i,j from the covariance matrix ;  ; Int_t GetErrors (Int_t ipar, Double_t &eplus, Double_t &eminus, Double_t &eparab, Double_t &globcc) const override;  return current errors for a parameter ipar : parameter number eplus : upper error eminus : lower error eparab : parabolic error globcc : global correlation coeffic",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFitter.html:76,Load,Loading,76,doc/master/classTFitter.html,https://root.cern,https://root.cern/doc/master/classTFitter.html,1,['Load'],['Loading']
Performance,". ROOT: TFoam Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TFoam Class Reference. ; TFoam is the main class of the multi-dimensional general purpose Monte Carlo event generator (integrator) FOAM. . FOAM Version 1.02M; AuthorsS. Jadach and P.Sawicki Institute of Nuclear Physics, Cracow, Poland Stanislaw. Jadac.nosp@m.h@if.nosp@m.j.edu.nosp@m..pl, Pawel.nosp@m..Saw.nosp@m.icki@.nosp@m.ifj..nosp@m.edu.p.nosp@m.l. What is FOAM for?. Suppose you want to generate randomly points (vectors) according to an arbitrary probability distribution in n dimensions, for which you supply your own method. FOAM can do it for you! Even if your distributions has quite strong peaks and is discontinuous!; FOAM generates random points with weight one or with variable weight.; FOAM is capable to integrate using efficient ""adaptive"" MC method. (The distribution does not need to be normalized to one.). How does it work?; FOAM is the simplified version of the multi-dimensional general purpose Monte Carlo event generator (integrator) FOAM. It creates hyper-rectangular ""foam of cells"", which is more dense around its peaks. See the following 2-dim. example of the map of 1000 cells for doubly peaked distribution:. FOAM is now fully integrated with the ROOT package. The important bonus of the ROOT use is persistency of the FOAM objects!; For more sophisticated problems full version of FOAM may be more appropriate: See full version of FOAM. Simple example of the use of FOAM:; ; #include ""Riostream.h""; #include ""TFoam.h""; #include ""TCanvas.h""; #include ""TH2.h""; #include ""TMath.h""; #include ""TFoamIntegrand.h""; #include ""TRandom3.h""; ; //_____________________________________________________________________________; Double_t sqr(Double_t x){; return x*x;; }; //______________________________________",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFoam.html:74,Load,Loading,74,doc/master/classTFoam.html,https://root.cern,https://root.cern/doc/master/classTFoam.html,1,['Load'],['Loading']
Performance,". ROOT: TFoamCell Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TFoamCell Class Reference. ; Used by TFoam. ; Objects of this class are hyper-rectangular cells organized in the binary tree. Special algorithm for encoding relative positioning of the cells allow to save total memory allocation needed for the system of cells. ; Definition at line 12 of file TFoamCell.h. Public Member Functions;  TFoamCell ();  Default constructor for streamer. ;  ;  TFoamCell (Int_t);  User constructor allocating single empty Cell. ;  ;  TFoamCell (TFoamCell &&)=delete;  ;  TFoamCell (TFoamCell const &)=delete;  ;  ~TFoamCell () override;  Destructor. ;  ; void CalcVolume ();  Calculates volume of the cell using size params which are calculated. ;  ; void Fill (Int_t, TFoamCell *, TFoamCell *, TFoamCell *);  Fills in certain data into newly allocated cell. ;  ; Int_t GetBest () const;  ; TFoamCell ** GetCells () const;  ; TFoamCell * GetDau0 () const;  ; TFoamCell * GetDau1 () const;  ; Double_t GetDriv () const;  ; void GetHcub (TFoamVect &, TFoamVect &) const;  Provides size and position of the cell These parameter are calculated by analyzing information in all parents cells up to the root cell. ;  ; void GetHSize (TFoamVect &) const;  Provides size of the cell Size parameters are calculated by analyzing information in all parents cells up to the root cell. ;  ; Double_t GetIntg () const;  ; TFoamCell * GetPare () const;  ; Double_t GetPrim () const;  ; Int_t GetSerial () const;  ; Int_t GetStat () const;  ; Double_t GetVolume () const;  ; Double_t GetXdiv () const;  ; TClass * IsA () const override;  ; TFoamCell & operator= (const TFoamCell &)=delete;  ; TFoamCell & operator= (TFoamCell &&)=delete;  ; void Print (Option_t *option) const override;  Printout of the cell geometry parameters for the debug purpo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFoamCell.html:78,Load,Loading,78,doc/master/classTFoamCell.html,https://root.cern,https://root.cern/doc/master/classTFoamCell.html,1,['Load'],['Loading']
Performance,". ROOT: TFoamIntegrand Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TFoamIntegrand Class Referenceabstract. ; Abstract class representing n-dimensional real positive integrand function. ; Definition at line 9 of file TFoamIntegrand.h. Public Member Functions;  TFoamIntegrand ();  ;  ~TFoamIntegrand () override;  ; virtual Double_t Density (Int_t ndim, Double_t *)=0;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFoamIntegrand.html:83,Load,Loading,83,doc/master/classTFoamIntegrand.html,https://root.cern,https://root.cern/doc/master/classTFoamIntegrand.html,1,['Load'],['Loading']
Performance,". ROOT: TFoamMaxwt Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; Private Attributes |; List of all members ; TFoamMaxwt Class Reference. ; Small auxiliary class for controlling MC weight. ; It provides certain measure of the ""maximum weight"" depending on small user-parameter ""epsilon"". It creates and uses 2 histograms of the TH1D class. User defines no. of bins nBin, nBin=1000 is recommended wmax defines weight range (1,wmax), it is adjusted ""manually"" ; Definition at line 12 of file TFoamMaxwt.h. Public Member Functions;  TFoamMaxwt ();  Constructor for streamer. ;  ;  TFoamMaxwt (Double_t, Int_t);  Principal user constructor. ;  ;  TFoamMaxwt (TFoamMaxwt &From);  Explicit COPY CONSTRUCTOR (unused, so far) ;  ;  ~TFoamMaxwt () override;  Destructor. ;  ; void Fill (Double_t);  Filling analyzed weight. ;  ; void GetMCeff (Double_t, Double_t &, Double_t &);  Calculates Efficiency= aveWt/wtLim for a given tolerance level epsilon<<1 using information stored in two histograms. ;  ; TClass * IsA () const override;  ; void Make (Double_t, Double_t &);  Calculates Efficiency= aveWt/wtLim for a given tolerance level epsilon<<1 To be called at the end of the MC run. ;  ; TFoamMaxwt & operator= (const TFoamMaxwt &);  substitution = ;  ; void Reset ();  Resetting weight analysis. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFoamMaxwt.html:79,Load,Loading,79,doc/master/classTFoamMaxwt.html,https://root.cern,https://root.cern/doc/master/classTFoamMaxwt.html,1,['Load'],['Loading']
Performance,". ROOT: TFoamVect Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TFoamVect Class Reference. ; Auxiliary class TFoamVect of n-dimensional vector, with dynamic allocation used for the cartesian geometry of the TFoam cells. ; Definition at line 10 of file TFoamVect.h. Public Member Functions;  TFoamVect ();  Default constructor for streamer. ;  ;  TFoamVect (const TFoamVect &);  Copy constructor. ;  ;  TFoamVect (Int_t);  User constructor creating n-dimensional vector and allocating dynamically array of components. ;  ;  ~TFoamVect () override;  Destructor. ;  ; Double_t GetCoord (Int_t i) const;  ; Int_t GetDim () const;  ; TClass * IsA () const override;  ; TFoamVect & operator*= (const Double_t &);  unary multiplication operator *= ;  ; TFoamVect operator+ (const TFoamVect &);  addition operator +; sum of 2 vectors: c=a+b, a=a+b, NEVER USE IT, VERY SLOW!!! ;  ; TFoamVect & operator+= (const TFoamVect &);  unary addition operator +=; adding vector c*=x, ;  ; TFoamVect operator- (const TFoamVect &);  subtraction operator -; difference of 2 vectors; c=a-b, a=a-b, NEVER USE IT, VERY SLOW!!! ;  ; TFoamVect & operator-= (const TFoamVect &);  unary subtraction operator -= ;  ; TFoamVect & operator= (const TFoamVect &);  substitution operator ;  ; TFoamVect & operator= (Double_t);  Loading in double prec. number, sometimes can be useful. ;  ; TFoamVect & operator= (Double_t[]);  Loading in ordinary double prec. vector, sometimes can be useful. ;  ; Double_t & operator[] (Int_t);  [] is for access to elements as in ordinary matrix like a[j]=b[j] (Perhaps against some strict rules but rather practical.) Range protection is built in, consequently for substitution one should use rather use a=b than explicit loop! ;  ; void Print (Option_t *option) const override;  Printout of all vector components on ""s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFoamVect.html:78,Load,Loading,78,doc/master/classTFoamVect.html,https://root.cern,https://root.cern/doc/master/classTFoamVect.html,1,['Load'],['Loading']
Performance,". ROOT: TFolder Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TFolder Class ReferenceCore ROOT classes » Base ROOT classes. ; Legacy Code TFolder is a legacy interface: there will be no bug fixes nor new developments. Therefore it is not recommended to use it in new long-term production code. But, depending on the context, using TFolder might still be a valid solution. ; A TFolder object is a collection of objects and folders. Folders have a name and a title and are identified in the folder hierarchy by a ""Unix-like"" naming mechanism. The root of all folders is //root. New folders can be dynamically added or removed to/from a folder. The folder hierarchy can be visualized via the TBrowser. The Root folders hierarchy can be seen as a whiteboard where objects are posted. Other classes/tasks can access these objects by specifying only a string pathname. This whiteboard facility greatly improves the modularity of an application, minimizing the class relationship problem that penalizes large applications.; Pointers are efficient to communicate between classes. However, one has interest to minimize direct coupling between classes in the form of direct pointers. One better uses the naming and search service provided by the Root folders hierarchy. This makes the classes loosely coupled and also greatly facilitates I/O operations. In a client/server environment, this mechanism facilitates the access to any kind of object in //root stores running on different processes.; A TFolder is created by invoking the TFolder constructor. It is placed inside an existing folder via the TFolder::AddFolder method. One can search for a folder or an object in a folder using the FindObject method. FindObject analyses the string passed as its argument and searches in the hierarchy until i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFolder.html:76,Load,Loading,76,doc/master/classTFolder.html,https://root.cern,https://root.cern/doc/master/classTFolder.html,1,['Load'],['Loading']
Performance,". ROOT: TFormLeafInfo Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Public Attributes |; Protected Attributes |; List of all members ; TFormLeafInfo Class Reference. ; This class is a small helper class to implement reading a data member on an object stored in a TTree. ; TTreeFormula now relies on a variety of TFormLeafInfo classes to handle the reading of the information. Here is the list of theses classes:; TFormLeafInfo; TFormLeafInfoDirect; TFormLeafInfoNumerical; TFormLeafInfoClones; TFormLeafInfoCollection; TFormLeafInfoPointer; TFormLeafInfoMethod; TFormLeafInfoMultiVarDim; TFormLeafInfoMultiVarDimDirect; TFormLeafInfoCast. The following method are available from the TFormLeafInfo interface:. AddOffset(Int_t offset, TStreamerElement* element); GetCounterValue(TLeaf* leaf) : return the size of the array pointed to.; GetObjectAddress(TLeafElement* leaf) : Returns the location of the object pointed to.; GetMultiplicity() : Returns info on the variability of the number of elements; GetNdata(TLeaf* leaf) : Returns the number of elements; GetNdata() : Used by GetNdata(TLeaf* leaf); GetValue(TLeaf *leaf, Int_t instance = 0) : Return the value; GetValuePointer(TLeaf *leaf, Int_t instance = 0) : Returns the address of the value; GetLocalValuePointer(TLeaf *leaf, Int_t instance = 0) : Returns the address of the value of 'this' LeafInfo; IsString(); ReadValue(char *where, Int_t instance = 0) : Internal function to interpret the location 'where'; Update() : react to the possible loading of a shared library. . Definition at line 47 of file TFormLeafInfo.h. Classes; struct  GetValueHelper;  ; struct  GetValueHelper< Long64_t >;  ; struct  GetValueHelper< LongDouble_t >;  ; struct  GetValueHelper< ULong64_t >;  ; struct  ReadValueHelper;  ; struct  ReadValueHelper< Long64_t >;  ; struct  ReadValueHelper< LongDouble_t >;  ; struct  ReadValueHelper< ULong64_t >;  . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFormLeafInfo.html:82,Load,Loading,82,doc/master/classTFormLeafInfo.html,https://root.cern,https://root.cern/doc/master/classTFormLeafInfo.html,1,['Load'],['Loading']
Performance,". ROOT: TFormula Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; Private Types |; Private Member Functions |; Static Private Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; TFormula Class ReferenceHistogram Library. ; The Formula class. ; This is a new version of the TFormula class based on Cling. This class is not 100% backward compatible with the old TFormula class, which is still available in ROOT as ROOT::v5::TFormula. Some of the TFormula member functions available in version 5, such as Analyze and AnalyzeFunction are not available in the new TFormula. On the other hand formula expressions which were valid in version 5 are still valid in TFormula version 6; This class has been implemented during Google Summer of Code 2013 by Maciej Zimnoch. Example of valid expressions:. sin(x)/x; [0]*sin(x) + [1]*exp(-[2]*x); x + y**2; x^2 + y^2; [0]*pow([1],4); 2*pi*sqrt(x/y); gaus(0)*expo(3) + ypol3(5)*x; gausn(0)*expo(3) + ypol3(5)*x; gaus(x, [0..2]) + expo(y, [3..4]). In the last examples above:. gaus(0) is a substitute for [0]*exp(-0.5*((x-[1])/[2])**2) and (0) means start numbering parameters at 0; gausn(0) is a substitute for [0]*exp(-0.5*((x-[1])/[2])**2)/(sqrt(2*pi)*[2])) and (0) means start numbering parameters at 0; expo(3) is a substitute for exp([3]+[4]*x); pol3(5) is a substitute for par[5]+par[6]*x+par[7]*x**2+par[8]*x**3 (PolN stands for Polynomial of degree N); gaus(x, [0..2]) is a more explicit way of writing gaus(0); expo(y, [3..4]) is a substitute for exp([3]+[4]*y). See below the full list of predefined functions which can be used as shortcuts in TFormula.; TMath functions can be part of the expression, eg:. TMath::Landau(x)*sin(x); TMath::Erf(x). Formula may contain constants",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFormula.html:77,Load,Loading,77,doc/master/classTFormula.html,https://root.cern,https://root.cern/doc/master/classTFormula.html,1,['Load'],['Loading']
Performance,". ROOT: TFormulaFunction Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; TFormulaFunction Class Reference. ; Helper class for TFormula. ; Definition at line 31 of file TFormula.h. Public Member Functions;  TFormulaFunction ();  ;  TFormulaFunction (const TString &name);  ;  TFormulaFunction (const TString &name, const TString &body, int numArgs);  ; const char * GetBody () const;  ; const char * GetName () const;  ; Int_t GetNargs () const;  ; Bool_t IsFuncCall () const;  ; Bool_t operator< (const TFormulaFunction &rhv) const;  ; Bool_t operator== (const TFormulaFunction &rhv) const;  . Public Attributes; TString fBody;  ; Bool_t fFound;  ; Bool_t fFuncCall;  ; TString fName;  ; Int_t fNargs;  . #include <v5/TFormula.h>; Constructor & Destructor Documentation. ◆ TFormulaFunction() [1/3]. TFormulaFunction::TFormulaFunction ; (; ). inline . Definition at line 43 of file TFormula.h. ◆ TFormulaFunction() [2/3]. TFormulaFunction::TFormulaFunction ; (; const TString & ; name, . const TString & ; body, . int ; numArgs . ). inline . Definition at line 44 of file TFormula.h. ◆ TFormulaFunction() [3/3]. TFormulaFunction::TFormulaFunction ; (; const TString & ; name). inline . Definition at line 46 of file TFormula.h. Member Function Documentation. ◆ GetBody(). const char * TFormulaFunction::GetBody ; (; ); const. inline . Definition at line 40 of file TFormula.h. ◆ GetName(). const char * TFormulaFunction::GetName ; (; ); const. inline . Definition at line 39 of file TFormula.h. ◆ GetNargs(). Int_t TFormulaFunction::GetNargs ; (; ); const. inline . Definition at line 41 of file TFormula.h. ◆ IsFuncCall(). Bool_t TFormulaFunction::IsFuncCall ; (; ); const. inline . Definition at line 42 of file TFormula.h. ◆ operator<(). Bool_t TFormulaFunction::operator< ; (; const TFormulaFunction & ; rhv); const. inline . Definition at line 48 of file",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFormulaFunction.html:85,Load,Loading,85,doc/master/classTFormulaFunction.html,https://root.cern,https://root.cern/doc/master/classTFormulaFunction.html,1,['Load'],['Loading']
Performance,". ROOT: TFormulaParamOrder Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; List of all members ; TFormulaParamOrder Class Reference. ; Functor defining the parameter order. ; Definition at line 83 of file TFormula.h. Public Member Functions; bool operator() (const TString &a, const TString &b) const;  . #include <v5/TFormula.h>; Member Function Documentation. ◆ operator()(). bool TFormulaParamOrder::operator() ; (; const TString & ; a, . const TString & ; b . ); const. Definition at line 375 of file TFormula.cxx. The documentation for this class was generated from the following files:; hist/hist/inc/v5/TFormula.h; hist/hist/src/TFormula.cxx. TFormulaParamOrder. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:53 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structTFormulaParamOrder.html:87,Load,Loading,87,doc/master/structTFormulaParamOrder.html,https://root.cern,https://root.cern/doc/master/structTFormulaParamOrder.html,1,['Load'],['Loading']
Performance,". ROOT: TFormulaVariable Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; TFormulaVariable Class Reference. ; Another helper class for TFormula. ; Definition at line 64 of file TFormula.h. Public Member Functions;  TFormulaVariable ();  ;  TFormulaVariable (const TString &name, Double_t value, Int_t pos);  ; Int_t GetArrayPos () const;  ; Double_t GetInitialValue () const;  ; const char * GetName () const;  ; Bool_t operator< (const TFormulaVariable &rhv) const;  . Public Attributes; Int_t fArrayPos;  ; Bool_t fFound;  ; TString fName;  ; Double_t fValue;  . #include <v5/TFormula.h>; Constructor & Destructor Documentation. ◆ TFormulaVariable() [1/2]. TFormulaVariable::TFormulaVariable ; (; ). inline . Definition at line 74 of file TFormula.h. ◆ TFormulaVariable() [2/2]. TFormulaVariable::TFormulaVariable ; (; const TString & ; name, . Double_t ; value, . Int_t ; pos . ). inline . Definition at line 75 of file TFormula.h. Member Function Documentation. ◆ GetArrayPos(). Int_t TFormulaVariable::GetArrayPos ; (; ); const. inline . Definition at line 73 of file TFormula.h. ◆ GetInitialValue(). Double_t TFormulaVariable::GetInitialValue ; (; ); const. inline . Definition at line 72 of file TFormula.h. ◆ GetName(). const char * TFormulaVariable::GetName ; (; ); const. inline . Definition at line 71 of file TFormula.h. ◆ operator<(). Bool_t TFormulaVariable::operator< ; (; const TFormulaVariable & ; rhv); const. inline . Definition at line 77 of file TFormula.h. Member Data Documentation. ◆ fArrayPos. Int_t TFormulaVariable::fArrayPos. Definition at line 69 of file TFormula.h. ◆ fFound. Bool_t TFormulaVariable::fFound. Definition at line 70 of file TFormula.h. ◆ fName. TString TFormulaVariable::fName. Definition at line 67 of file TFormula.h. ◆ fValue. Double_t TFormulaVariable::fValue. Definition at line 68 of file TFormula.h. Librari",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFormulaVariable.html:85,Load,Loading,85,doc/master/classTFormulaVariable.html,https://root.cern,https://root.cern/doc/master/classTFormulaVariable.html,1,['Load'],['Loading']
Performance,". ROOT: TFractionFitter Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TFractionFitter Class Reference. ; Fits MC fractions to data histogram. ; A la HMCMLL, see R. Barlow and C. Beeston, Comp. Phys. Comm. 77 (1993) 219-228, and http://www.hep.man.ac.uk/~roger/hfrac.f; The virtue of this fit is that it takes into account both data and Monte Carlo statistical uncertainties. The way in which this is done is through a standard likelihood fit using Poisson statistics; however, the template (MC) predictions are also varied within statistics, leading to additional contributions to the overall likelihood. This leads to many more fit parameters (one per bin per template), but the minimisation with respect to these additional parameters is done analytically rather than introducing them as formal fit parameters. Some special care needs to be taken in the case of bins with zero content. For more details please see the original publication cited above.; An example application of this fit is given below. For a TH1* histogram (""data"") fitted as the sum of three Monte Carlo sources (""mc""):; {; TH1F *data; //data histogram; TH1F *mc0; // first MC histogram; TH1F *mc1; // second MC histogram; TH1F *mc2; // third MC histogram; .... // retrieve histograms; TObjArray *mc = new TObjArray(3); // MC histograms are put in this array; mc->Add(mc0);; mc->Add(mc1);; mc->Add(mc2);; TFractionFitter* fit = new TFractionFitter(data, mc); // initialise; fit->Constrain(1,0.0,1.0); // constrain fraction 1 to be between 0 and 1; fit->SetRangeX(1,15); // use only the first 15 bins in the fit; Int_t status = fit->Fit(); // perform the fit; std::cout << ""fit status: "" << status << std::endl;; if (status == 0) { // check on fit status; TH1F* result = (TH1F*) fit->GetPlot();; data->Draw(""Ep"");; result",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFractionFitter.html:84,Load,Loading,84,doc/master/classTFractionFitter.html,https://root.cern,https://root.cern/doc/master/classTFractionFitter.html,1,['Load'],['Loading']
Performance,". ROOT: TFrame Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TFrame Class ReferenceGraphics » 2D Graphics » Basic graphics. ; Define a Frame. ; A TFrame is a TWbox for drawing histogram frames. ; Definition at line 19 of file TFrame.h. Public Member Functions;  TFrame ();  Frame default constructor. ;  ;  TFrame (const TFrame &frame);  Frame copy constructor. ;  ;  TFrame (Double_t x1, Double_t y1, Double_t x2, Double_t y2);  Frame normal constructor. ;  ;  ~TFrame () override;  Frame default destructor. ;  ; void Copy (TObject &frame) const override;  Copy this frame to frame. ;  ; void Draw (Option_t *option="""") override;  Draw this frame with its current attributes. ;  ; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override;  Execute action corresponding to one event. ;  ; TClass * IsA () const override;  ; void Paint (Option_t *option="""") override;  Paint this wbox with its current attributes. ;  ; void Pop () override;  Do not pop frame's, if allowed they would cover the picture they frame. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save primitive as a C++ statement(s) on output stream out. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TBox. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UseCurrentStyle () override;  Replace current frame attributes by current style. ;  ;  Public Member Functions inherited from TWbox;  TWbox ();  ;  TWbox (const TWbox &wbox);  wbox copy constructor. ;  ;  TWbox (Double_t x1, Double_t y1, Double_t x2, Double_t y2, Color_t color=18, Short_t bordersize=5, Short_t bordermode=1);  wbox normal constructor. ;  ;  ~TWbox () override=default;  ; void Copy (TObject &wbox) const override;  Copy this wbox to wbox. ;  ; void Draw (Option_t *option="""") override;  Draw this wbox with its current attr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFrame.html:75,Load,Loading,75,doc/master/classTFrame.html,https://root.cern,https://root.cern/doc/master/classTFrame.html,1,['Load'],['Loading']
Performance,". ROOT: TFree Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TFree Class ReferenceInput/Output Library. ; Service class for TFile. ; Each file has a linked list of free segments. Each free segment is described by its firts and last address. When an object is written to a file, a new Key (see TKey) is created. The first free segment big enough to accomodate the object is used. If the object size has a length corresponding to the size of the free segment, the free segment is deleted from the list of free segments. When an object is deleted from a file, a new TFree object is generated. If the deleted object is contiguous to an already deleted object, the free segments are merged in one single segment. ; Definition at line 27 of file TFree.h. Public Member Functions;  TFree ();  Default constructor. ;  ;  TFree (TList *lfree, Long64_t first, Long64_t last);  Constructor for a free segment. ;  ;  ~TFree () override;  Destructor. ;  ; TFree * AddFree (TList *lfree, Long64_t first, Long64_t last);  Add a new free segment to the list of free segments. ;  ; virtual void FillBuffer (char *&buffer);  Encode fre structure into output buffer. ;  ; TFree * GetBestFree (TList *lfree, Int_t nbytes);  Return the best free segment where to store nbytes. ;  ; Long64_t GetFirst () const;  ; Long64_t GetLast () const;  ; TClass * IsA () const override;  ; void ls (Option_t *="""") const override;  List free segment contents. ;  ; virtual void ReadBuffer (char *&buffer);  Decode one free structure from input buffer. ;  ; void SetFirst (Long64_t first);  ; void SetLast (Long64_t last);  ; Int_t Sizeof () const;  return number of bytes occupied by this TFree on permanent storage ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtua",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFree.html:74,Load,Loading,74,doc/master/classTFree.html,https://root.cern,https://root.cern/doc/master/classTFree.html,1,['Load'],['Loading']
Performance,". ROOT: TFriendElement Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Friends |; List of all members ; TFriendElement Class ReferenceTree Library. ; A TFriendElement TF describes a TTree object TF in a file. ; When a TFriendElement TF is added to the list of friends of an existing TTree T, any variable from TF can be referenced in a query to T.; To add a TFriendElement to an existing TTree T, do: T.AddFriend(""friendTreename"",""friendTreeFile"");; See TTree::AddFriend for more information. ; Definition at line 33 of file TFriendElement.h. Public Types; enum  EStatusBits { kFromChain = (1ULL << ( 9 )); , kUpdated = (1ULL << ( 10 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TFriendElement ();  Default constructor for a friend element. ;  ;  TFriendElement (TTree *tree, const char *treename, const char *filename);  Create a friend element. ;  ;  TFriendElement (TTree *tree, const char *treename, TFile *file);  Create a friend element. ;  ;  TFriendElement (TTree *tree, TTree *friendtree, const char *alias);  Create a friend element. ;  ;  ~TFriendElement () override;  Destructor. Disconnect from the owning tree if needed. ;  ; virtual TTree * Connect (); ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFriendElement.html:83,Load,Loading,83,doc/master/classTFriendElement.html,https://root.cern,https://root.cern/doc/master/classTFriendElement.html,1,['Load'],['Loading']
Performance,". ROOT: TFumili Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TFumili Class Reference. . FUMILI minimization package; FUMILI is based on ideas, proposed by I.N. Silin [See NIM A440, 2000 (p431)]. It was converted from FORTRAN to C by Sergey Yaschenko s.yas.nosp@m.chen.nosp@m.ko@fz.nosp@m.-jue.nosp@m.lich..nosp@m.de; FUMILI is used to minimize Chi-square function or to search maximum of likelihood function.; Experimentally measured values \(F_i\) are fitted with theoretical functions \(f_i({\vec x}_i,\vec\theta\,\,)\), where \({\vec x}_i\) are coordinates, and \(\vec\theta\) – vector of parameters.; For better convergence Chi-square function has to be the following form. \[; {\chi^2\over2}={1\over2}\sum^n_{i=1}\left(f_i(\vec; x_i,\vec\theta\,\,)-F_i\over\sigma_i\right)^2 \tag{1}; \]. where \(\sigma_i\) are errors of measured function.; The minimum condition is. \[; {\partial\chi^2\over\partial\theta_i}=\sum^n_{j=1}{1\over\sigma^2_j}\cdot; {\partial f_j\over\partial\theta_i}\left[f_j(\vec; x_j,\vec\theta\,\,)-F_j\right]=0,\qquad i=1\ldots m\tag{2}; \]. where m is the quantity of parameters.; Expanding left part of (2) over parameter increments and retaining only linear terms one gets. \[; \left(\partial\chi^2\over\theta_i\right)_{\vec\theta={\vec\theta}^0}; +\sum_k\left(\partial^2\chi^2\over\partial\theta_i\partial\theta_k\right)_{; \vec\theta={\vec\theta}^0}\cdot(\theta_k-\theta_k^0); = 0\tag{3}; \]. Here \({\vec\theta}_0\) is some initial value of parameters. In general case:. \[; {\partial^2\chi^2\over\partial\theta_i\partial\theta_k}=; \sum^n_{j=1}{1\over\sigma^2_j}{\partial f_j\over\theta_i}; {\partial f_j\over\theta_k} +; \sum^n_{j=1}{(f_j - F_j)\over\sigma^2_j}\cdot; {\partial^2f_j\over\partial\theta_i\partial\theta_k}\tag{4}; \]. In FUMILI algorithm for second derivatives of Chi-squar",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFumili.html:76,Load,Loading,76,doc/master/classTFumili.html,https://root.cern,https://root.cern/doc/master/classTFumili.html,1,['Load'],['Loading']
Performance,". ROOT: TFumiliMinimizer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Static Protected Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; TFumiliMinimizer Class Reference. ; TFumiliMinimizer class: minimizer implementation based on TFumili. ; Definition at line 43 of file TFumiliMinimizer.h. Public Member Functions;  TFumiliMinimizer (int dummy=0);  Default constructor (an argument is needed by plug-in manager) ;  ;  ~TFumiliMinimizer () override;  Destructor (no operations) ;  ; double CovMatrix (unsigned int i, unsigned int j) const override;  return covariance matrices elements if the variable is fixed the matrix is zero The ordering of the variables is the same as in errors ;  ; int CovMatrixStatus () const override;  return status of covariance matrix using Minuit convention {0 not calculated 1 approximated 2 made pos def , 3 accurate} Minimizer who implements covariance matrix calculation will re-implement the method ;  ; double Edm () const override;  return expected distance reached from the minimum ;  ; const double * Errors () const override;  return errors at the minimum ;  ; virtual TClass * IsA () const;  ; const double * MinGradient () const override;  return pointer to gradient values at the minimum ;  ; bool Minimize () override;  method to perform the minimization ;  ; double MinValue () const override;  return minimum function value ;  ; unsigned int NCalls () const override;  number of function calls to reach the minimum ;  ; unsigned int NDim () const override;  this is <= Function().NDim() which is the total number of variables (free+ constrained ones) ;  ; unsigned int NFree () const override;  number of free variables (real dimension of the problem) this is <= Function().NDim() which is the total ;  ; bool ProvidesError () const override;  minimizer provides error and ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFumiliMinimizer.html:85,Load,Loading,85,doc/master/classTFumiliMinimizer.html,https://root.cern,https://root.cern/doc/master/classTFumiliMinimizer.html,1,['Load'],['Loading']
Performance,". ROOT: TFunction Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Friends |; List of all members ; TFunction Class Reference. ; Global functions class (global functions are obtained from CINT). ; This class describes one single global function. The TROOT class contains a list of all currently defined global functions (accessible via TROOT::GetListOfGlobalFunctions()). ; Definition at line 30 of file TFunction.h. Public Member Functions;  TFunction (const TFunction &orig);  Copy operator. ;  ;  TFunction (MethodInfo_t *info=nullptr);  Default TFunction ctor. ;  ; virtual ~TFunction ();  TFunction dtor deletes adopted CINT MethodInfo. ;  ; TObject * Clone (const char *newname="""") const override;  Clone method. ;  ; Long_t ExtraProperty () const;  Get property description word. For meaning of bits see EProperty. ;  ; DeclId_t GetDeclId () const;  ; TList * GetListOfMethodArgs ();  Return list containing the TMethodArgs of a TFunction. ;  ; virtual const char * GetMangledName () const;  Returns the mangled name as defined by CINT, or 0 in case of error. ;  ; Int_t GetNargs () const;  Number of function arguments. ;  ; Int_t GetNargsOpt () const;  Number of function optional (default) arguments. ;  ; virtual const char * GetPrototype () const;  Returns the prototype of a function as defined by CINT, or 0 in case of error. ;  ; const char * GetReturnTypeName () const;  Get full type description of function return type, e,g.: ""class TDirectory*"". ;  ; std::string GetReturnTypeNormalizedName () const;  Get the normalized name of the return type. ;  ; const char * GetSignature ();  Return signature of function. ;  ; void * InterfaceMethod () const;  Return pointer to the interface method. ;  ; TClass * IsA () const override;  ; virtual Bool_t IsValid ();  Return true if this function object ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFunction.html:78,Load,Loading,78,doc/master/classTFunction.html,https://root.cern,https://root.cern/doc/master/classTFunction.html,1,['Load'],['Loading']
