quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,filename,wiki,url,total_similar,target_keywords,target_matched_words
Safety,"////////////////////////////////////////////////////////////////////////////////; /// Use this function in case of a fatal error. It will abort the program.; /// @warning Fatal() *will* not abort the program if `gErrorIgnoreLevel > kFatal`; /// - but for all reasonable settings it *will* abort.; // So let's be reasonable wrt Coverity:; // coverity[+kill]",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/foundation/src/TError.cxx:138,abort,abort,138,core/foundation/src/TError.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/src/TError.cxx,3,['abort'],['abort']
Safety,"////////////////////////////////////////////////////////////////////////////////; /// Utility function for plotOn(), perform general sanity check on frame to ensure safe plotting operations",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:133,sanity check,sanity check,133,roofit/roofitcore/src/RooAbsReal.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx,2,"['safe', 'sanity check']","['safe', 'sanity check']"
Safety,"////////////////////////////////////////////////////////////////////////////////; /// Verifies that request is just file name; ///; /// File names typically contains prefix like ""jsrootsys/""; /// If true, method returns real name of the file,; /// which should be delivered to the client; /// Method is thread safe and can be called from any thread",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/src/THttpServer.cxx:310,safe,safe,310,net/http/src/THttpServer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/src/THttpServer.cxx,1,['safe'],['safe']
Safety,"////////////////////////////////////////////////////////////////////////////////; /// Waits for this socket to change status. If interest=kRead,; /// the socket will be watched to see if characters become available for; /// reading; if interest=kWrite the socket will be watched to; /// see if a write will not block.; /// The argument 'timeout' specifies a maximum time to wait in millisec.; /// Default no timeout.; /// Returns 1 if a change of status of interest has been detected within; /// timeout; 0 in case of timeout; < 0 if an error occured.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TSocket.cxx:337,timeout,timeout,337,net/net/src/TSocket.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TSocket.cxx,10,"['detect', 'timeout']","['detected', 'timeout']"
Safety,"////////////////////////////////////////////////////////////////////////////////; /// We can safely assume that the std::vector layout does not really depend on; /// the content!",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TGenCollectionProxy.cxx:93,safe,safely,93,io/io/src/TGenCollectionProxy.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TGenCollectionProxy.cxx,1,['safe'],['safely']
Safety,"////////////////////////////////////////////////////////////////////////////////; /// We create a TTaskGroup and asynchronously maps each group of baskets(> 100 kB in total); /// to a task. In TTaskGroup, we use TThreadExecutor to do the actually work of unzipping; /// a group of basket. The purpose of creating TTaskGroup is to avoid competing with main thread.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTreeCacheUnzip.cxx:330,avoid,avoid,330,tree/tree/src/TTreeCacheUnzip.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTreeCacheUnzip.cxx,1,['avoid'],['avoid']
Safety,"////////////////////////////////////////////////////////////////////////////////; /// When the argument is true the a-synchronous timer (SIGALRM) signal; /// handler is set so that interrupted syscalls will not be restarted; /// by the kernel. This is typically used in case one wants to put a; /// timeout on an I/O operation. By default interrupted syscalls will; /// be restarted.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TTimer.cxx:299,timeout,timeout,299,core/base/src/TTimer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TTimer.cxx,1,['timeout'],['timeout']
Safety,"////////////////////////////////////////////////////////////////////////////////; /// Write an array of object starting at the address 'start' and of length 'n'; /// the objects in the array are assumed to be of class 'cl'; /// \note Due to the current limit of the buffer size, the function aborts execution of the program in case of underflow or overflow. See https://github.com/root-project/root/issues/6734 for more details.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TBufferFile.cxx:292,abort,aborts,292,io/io/src/TBufferFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TBufferFile.cxx,1,['abort'],['aborts']
Safety,"////////////////////////////////////////////////////////////////////////////////; /// Write array of n bools into the I/O buffer.; /// \note Due to the current limit of the buffer size, the function aborts execution of the program in case of underflow or overflow. See https://github.com/root-project/root/issues/6734 for more details.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TBufferFile.cxx:199,abort,aborts,199,io/io/src/TBufferFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TBufferFile.cxx,1,['abort'],['aborts']
Safety,"////////////////////////////////////////////////////////////////////////////////; /// Write array of n characters into the I/O buffer.; /// \note Due to the current limit of the buffer size, the function aborts execution of the program in case of underflow or overflow. See https://github.com/root-project/root/issues/6734 for more details.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TBufferFile.cxx:204,abort,aborts,204,io/io/src/TBufferFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TBufferFile.cxx,2,['abort'],['aborts']
Safety,"////////////////////////////////////////////////////////////////////////////////; /// Write array of n doubles (as float) into the I/O buffer.; /// see comments about Double32_t encoding at TBufferFile::WriteDouble32; /// \note Due to the current limit of the buffer size, the function aborts execution of the program in case of underflow or overflow. See https://github.com/root-project/root/issues/6734 for more details.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TBufferFile.cxx:286,abort,aborts,286,io/io/src/TBufferFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TBufferFile.cxx,1,['abort'],['aborts']
Safety,"////////////////////////////////////////////////////////////////////////////////; /// Write array of n doubles into the I/O buffer.; /// \note Due to the current limit of the buffer size, the function aborts execution of the program in case of underflow or overflow. See https://github.com/root-project/root/issues/6734 for more details.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TBufferFile.cxx:201,abort,aborts,201,io/io/src/TBufferFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TBufferFile.cxx,1,['abort'],['aborts']
Safety,"////////////////////////////////////////////////////////////////////////////////; /// Write array of n floats (as truncated float) into the I/O buffer.; /// see comments about Float16_t encoding at TBufferFile::WriteFloat16; /// \note Due to the current limit of the buffer size, the function aborts execution of the program in case of underflow or overflow. See https://github.com/root-project/root/issues/6734 for more details.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TBufferFile.cxx:293,abort,aborts,293,io/io/src/TBufferFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TBufferFile.cxx,1,['abort'],['aborts']
Safety,"////////////////////////////////////////////////////////////////////////////////; /// Write array of n floats into the I/O buffer.; /// \note Due to the current limit of the buffer size, the function aborts execution of the program in case of underflow or overflow. See https://github.com/root-project/root/issues/6734 for more details.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TBufferFile.cxx:200,abort,aborts,200,io/io/src/TBufferFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TBufferFile.cxx,1,['abort'],['aborts']
Safety,"////////////////////////////////////////////////////////////////////////////////; /// Write array of n ints into the I/O buffer.; /// \note Due to the current limit of the buffer size, the function aborts execution of the program in case of underflow or overflow. See https://github.com/root-project/root/issues/6734 for more details.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TBufferFile.cxx:198,abort,aborts,198,io/io/src/TBufferFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TBufferFile.cxx,1,['abort'],['aborts']
Safety,"////////////////////////////////////////////////////////////////////////////////; /// Write array of n long longs into the I/O buffer.; /// \note Due to the current limit of the buffer size, the function aborts execution of the program in case of underflow or overflow. See https://github.com/root-project/root/issues/6734 for more details.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TBufferFile.cxx:204,abort,aborts,204,io/io/src/TBufferFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TBufferFile.cxx,1,['abort'],['aborts']
Safety,"////////////////////////////////////////////////////////////////////////////////; /// Write array of n longs into the I/O buffer with 8-byte width.; /// \note Due to the current limit of the buffer size, the function aborts execution of the program in case of underflow or overflow. See https://github.com/root-project/root/issues/6734 for more details.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TBufferFile.cxx:217,abort,aborts,217,io/io/src/TBufferFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TBufferFile.cxx,1,['abort'],['aborts']
Safety,"////////////////////////////////////////////////////////////////////////////////; /// Write array of n shorts into the I/O buffer.; /// \note Due to the current limit of the buffer size, the function aborts execution of the program in case of underflow or overflow. See https://github.com/root-project/root/issues/6734 for more details.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TBufferFile.cxx:200,abort,aborts,200,io/io/src/TBufferFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TBufferFile.cxx,1,['abort'],['aborts']
Safety,"////////////////////////////////////////////////////////////////////////////////; /// Write array of n unsigned longs into the I/O buffer with 8-byte width.; /// This is an explicit case for unsigned longs since signed longs; /// have a special tobuf().; /// \note Due to the current limit of the buffer size, the function aborts execution of the program in case of underflow or overflow. See https://github.com/root-project/root/issues/6734 for more details.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TBufferFile.cxx:323,abort,aborts,323,io/io/src/TBufferFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TBufferFile.cxx,1,['abort'],['aborts']
Safety,"////////////////////////////////////////////////////////////////////////////////; /// WriteFastArray SQL implementation.; // \note Due to the current limit of the buffer size, the function aborts execution of the program in case of underflow or overflow. See https://github.com/root-project/root/issues/6734 for more details.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TBufferSQL.cxx:189,abort,aborts,189,tree/tree/src/TBufferSQL.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TBufferSQL.cxx,2,['abort'],['aborts']
Safety,"////////////////////////////////////////////////////////////////////////////////; /// WriteFastArray SQL implementation.; /// \note Due to the current limit of the buffer size, the function aborts execution of the program in case of underflow or overflow. See https://github.com/root-project/root/issues/6734 for more details.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TBufferSQL.cxx:190,abort,aborts,190,tree/tree/src/TBufferSQL.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TBufferSQL.cxx,14,['abort'],['aborts']
Safety,"////////////////////////////////////////////////////////////////////////////////; /// [Place holder for Mutex Lock]; /// Provide the interpreter with a way to; /// acquire a lock used to protect critical section; /// of its code (non-thread safe parts).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TCling.cxx:241,safe,safe,241,core/metacling/src/TCling.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TCling.cxx,1,['safe'],['safe']
Safety,"////////////////////////////////////////////////////////////////////////////////; /// [Place holder for Mutex Unlock] Provide the interpreter with a way to; /// release a lock used to protect critical section; /// of its code (non-thread safe parts).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TCling.cxx:238,safe,safe,238,core/metacling/src/TCling.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TCling.cxx,1,['safe'],['safe']
Safety,"////////////////////////////////////////////////////////////////////////////////; /// check if the rulefit work dir is properly setup.; /// it aborts (kFATAL) if not.; ///; /// Check existence of directory",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitAPI.cxx:143,abort,aborts,143,tmva/tmva/src/RuleFitAPI.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitAPI.cxx,1,['abort'],['aborts']
Safety,"////////////////////////////////////////////////////////////////////////////////; /// compute distance from inside point to surface of the para; /// Boundary safe algorithm.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoPara.cxx:158,safe,safe,158,geom/geom/src/TGeoPara.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoPara.cxx,1,['safe'],['safe']
Safety,"////////////////////////////////////////////////////////////////////////////////; /// compute distance from outside point to surface of the paraboloid and safe distance",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoParaboloid.cxx:155,safe,safe,155,geom/geom/src/TGeoParaboloid.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoParaboloid.cxx,1,['safe'],['safe']
Safety,"////////////////////////////////////////////////////////////////////////////////; /// compute distance from outside point to surface of the tube and safe distance",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoEltu.cxx:149,safe,safe,149,geom/geom/src/TGeoEltu.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoEltu.cxx,1,['safe'],['safe']
Safety,"////////////////////////////////////////////////////////////////////////////////; /// constructor; /// sanity check",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/KDEKernel.cxx:103,sanity check,sanity check,103,tmva/tmva/src/KDEKernel.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/KDEKernel.cxx,1,['sanity check'],['sanity check']
Safety,"////////////////////////////////////////////////////////////////////////////////; /// helper functions to avoid code duplication",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/ModelConfig.cxx:106,avoid,avoid,106,roofit/roofitcore/src/ModelConfig.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/ModelConfig.cxx,1,['avoid'],['avoid']
Safety,"////////////////////////////////////////////////////////////////////////////////; /// might be thread unsafe (?)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/src/TGWin32VirtualXProxy.cxx:102,unsafe,unsafe,102,graf2d/win32gdk/src/TGWin32VirtualXProxy.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/src/TGWin32VirtualXProxy.cxx,1,['unsafe'],['unsafe']
Safety,"////////////////////////////////////////////////////////////////////////////////; /// on-timeout",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGCanvas.cxx:89,timeout,timeout,89,gui/gui/src/TGCanvas.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGCanvas.cxx,1,['timeout'],['timeout']
Safety,"////////////////////////////////////////////////////////////////////////////////; /// process civetweb log message, can be used to detect critical errors",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/src/TCivetweb.cxx:131,detect,detect,131,net/http/src/TCivetweb.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/src/TCivetweb.cxx,1,['detect'],['detect']
Safety,"////////////////////////////////////////////////////////////////////////////////; /// process user options.; ///; /// sanity check, do not allow the input variables to be normalised, because this; /// only creates problems when interpreting the cuts",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCuts.cxx:118,sanity check,sanity check,118,tmva/tmva/src/MethodCuts.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCuts.cxx,1,['sanity check'],['sanity check']
Safety,"////////////////////////////////////////////////////////////////////////////////; /// prune (get rid of internal nodes) the Decision tree to avoid overtraining; /// several different pruning methods can be applied as selected by the; /// variable ""fPruneMethod"".",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:141,avoid,avoid,141,tmva/tmva/src/DecisionTree.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx,1,['avoid'],['avoid']
Safety,"////////////////////////////////////////////////////////////////////////////////; /// redefined here to avoid warning message from gcc",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TBufferJSON.cxx:104,avoid,avoid,104,io/io/src/TBufferJSON.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TBufferJSON.cxx,1,['avoid'],['avoid']
Safety,"////////////////////////////////////////////////////////////////////////////////; /// risk assessment",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx:86,risk,risk,86,tmva/tmva/src/RuleFitParams.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx,1,['risk'],['risk']
Safety,"////////////////////////////////////////////////////////////////////////////////; /// risk assessment for tau model `<itau>`",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx:86,risk,risk,86,tmva/tmva/src/RuleFitParams.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx,1,['risk'],['risk']
Safety,"////////////////////////////////////////////////////////////////////////////////; /// sanity check",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Tools.cxx:86,sanity check,sanity check,86,tmva/tmva/src/Tools.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Tools.cxx,1,['sanity check'],['sanity check']
Safety,"////////////////////////////////////////////////////////////////////////////////; /// sanity check: compare PDF with original histogram",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDF.cxx:86,sanity check,sanity check,86,tmva/tmva/src/PDF.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDF.cxx,1,['sanity check'],['sanity check']
Safety,"////////////////////////////////////////////////////////////////////////////////; /// standard constructor; /// Note: Right now it is an option to choose the neuron input function,; /// but only the input function ""sum"" leads to weight convergence --; /// otherwise the weights go to nan and lead to an ABORT.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodANNBase.cxx:303,ABORT,ABORT,303,tmva/tmva/src/MethodANNBase.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodANNBase.cxx,1,['ABORT'],['ABORT']
Safety,"////////////////////////////////////////////////////////////////////////////////; ////////////////////////////////////////////////////////////////////////////; /// Cleanup type description, redundant blanks removed; /// and redundant tail ignored; /// return *tail = pointer to last used character; /// if (mode==0) keep keywords; /// if (mode==1) remove keywords outside the template params; /// if (mode>=2) remove the keywords everywhere.; /// if (tail!=0) cut before the trailing *; ///; /// The keywords currently are: ""const"" , ""volatile"" removed; ///; ///; /// CleanType("" A<B, C< D, E> > *,F,G>"") returns ""A<B,C<D,E> >*""; ////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/foundation/src/TClassEdit.cxx:190,redund,redundant,190,core/foundation/src/TClassEdit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/src/TClassEdit.cxx,2,['redund'],['redundant']
Safety,"////////////////////////////////////////////////////////////////////////////////; ///TODO: is it possible to use GLdouble to avoid problems with Double_t/GLdouble if they; ///are not the same type?",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLUtil.cxx:125,avoid,avoid,125,graf3d/gl/src/TGLUtil.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLUtil.cxx,1,['avoid'],['avoid']
Safety,"///////////////////////////////////////////////////////////////////////////////; /// Helper to load a single object from a file-resident TFolder, while; /// avoiding memory leaks.; /// @tparam AObjType Type of object to load.; /// @param inFile input file to load from. Expected to be a valid pointer; /// @param folderName Name of the TFolder to load from the file; /// @param objName Name of the object to load; /// @param notFoundError If set, print a detailed error if we didn't find something; /// @return Returns a pointer to a clone of the loaded object. Ownership assigned to the caller.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/src/RooLagrangianMorphFunc.cxx:157,avoid,avoiding,157,roofit/roofit/src/RooLagrangianMorphFunc.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/src/RooLagrangianMorphFunc.cxx,1,['avoid'],['avoiding']
Safety,"///////////////////////////////////////////////////////////////////////////////; /// Load a TFolder from a file while ensuring it owns its content.; /// This avoids memory leaks. Note that when fetching objects; /// from this folder, you need to clone them to prevent deletion.; /// Also recursively updates nested subfolders accordingly; /// @param inFile: Input file to read - assumed to be a valid pointer; /// @param folderName: Name of the folder to read from the file; /// @return a unique_ptr to the folder. Nullptr if not found.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/src/RooLagrangianMorphFunc.cxx:158,avoid,avoids,158,roofit/roofit/src/RooLagrangianMorphFunc.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/src/RooLagrangianMorphFunc.cxx,1,['avoid'],['avoids']
Safety,"//////////////////////////////////////////////////////////////////////////////; /// Process the entries of a TTree in parallel. The user-provided function; /// receives a TTreeReader which can be used to iterate on a subrange of; /// entries; /// ~~~{.cpp}; /// TTreeProcessorMT::Process([](TTreeReader& readerSubRange) {; /// // Select branches to read; /// while (readerSubRange.Next()) {; /// // Use content of current entry; /// }; /// });; /// ~~~; /// The user needs to be aware that each of the subranges can potentially; /// be processed in parallel. This means that the code of the user function; /// should be thread safe.; ///; /// \param[in] func User-defined function that processes a subrange of entries",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeProcessorMT.cxx:627,safe,safe,627,tree/treeplayer/src/TTreeProcessorMT.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeProcessorMT.cxx,1,['safe'],['safe']
Safety,"/////////////////////////////////////////////////////////////////////////////; /// Function that's called when an unhandled exception occurs.; /// Produces a stack trace, and lets the system deal with it; /// as if it was an unhandled excecption (usually ::abort)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/winnt/src/TWinNTSystem.cxx:257,abort,abort,257,core/winnt/src/TWinNTSystem.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/winnt/src/TWinNTSystem.cxx,1,['abort'],['abort']
Safety,"/////////////////////////////////////////////////////////////////////////////; /// Wait for events on the file descriptors specified in the readready and; /// writeready masks or for timeout (in milliseconds) to occur.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/winnt/src/TWinNTSystem.cxx:183,timeout,timeout,183,core/winnt/src/TWinNTSystem.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/winnt/src/TWinNTSystem.cxx,1,['timeout'],['timeout']
Safety,"/////////////////////////////////////////////////////////////////////////////; /// \brief Enter all entries in a range in the TEntryList.; /// \param[in] start starting entry to enter.; /// \param[in] end ending entry to enter.; /// \param[in] tree passed as is to TEntryList::Enter.; /// \param[in] step step increase of the loop entering the entries.; ///; /// This is a helper function that enters all entries between \p start; /// (inclusive) and \p end (exclusive) to the TEntryList in a loop. It; /// is useful also in PyROOT to avoid having to do the same in a Python loop.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TEntryList.cxx:535,avoid,avoid,535,tree/tree/src/TEntryList.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TEntryList.cxx,1,['avoid'],['avoid']
Safety,"/////////////////////////////////////////////////////////////////////////////; /// \brief Gather column-level and RNTuple-level information.; ///; /// \note This method is called when the RNTupleInspector is initially created. This means that anything unexpected; /// about the RNTuple itself (e.g. inconsistent compression settings across clusters) will be detected here.; /// Therefore, any related exceptions will be thrown on creation of the inspector.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntupleutil/v7/inc/ROOT/RNTupleInspector.hxx:358,detect,detected,358,tree/ntupleutil/v7/inc/ROOT/RNTupleInspector.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntupleutil/v7/inc/ROOT/RNTupleInspector.hxx,1,['detect'],['detected']
Safety,"/////////////////////////////////////////////////////////////////////////////; /// \brief Given a IO feature string, set the corresponding feature; /// \param [in] value Feature name to test.; ///; /// This allows one to set a feature given a specific string from the; /// TBasket::EIOBits enum.; ///; /// *NOTE* this function is quite slow and users are strongly encouraged to; /// use the type-safe `Set` version instead. This has been added for better; /// CLI interfaces.; ///; /// Returns true only if a new feature was set; otherwise emits an error message; /// and returns false.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TIOFeatures.cxx:396,safe,safe,396,tree/tree/src/TIOFeatures.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TIOFeatures.cxx,1,['safe'],['safe']
Safety,"///////////////////////////////////////////////////////////////////////////; // //; // Derived class of TQpSolverBase implementing Gondzio-correction //; // version of Mehrotra's original predictor-corrector algorithm. //; // //; ///////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/quadp/inc/TGondzioSolver.h:188,predict,predictor-corrector,188,math/quadp/inc/TGondzioSolver.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/quadp/inc/TGondzioSolver.h,1,['predict'],['predictor-corrector']
Safety,"///////////////////////////////////////////////////////////////////////////; // //; // Derived class of TQpSolverBase implementing the original Mehrotra //; // predictor-corrector algorithm //; // //; ///////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/quadp/inc/TMehrotraSolver.h:160,predict,predictor-corrector,160,math/quadp/inc/TMehrotraSolver.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/quadp/inc/TMehrotraSolver.h,1,['predict'],['predictor-corrector']
Safety,"///////////////////////////////////////////////////////////////////////////; // TGeoChecker - A simple checker generating random points inside a //; // geometry. Generates a tree of points on the surfaces corresponding //; // to the safety of each generated point //; // //; ///////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geompainter/inc/TGeoChecker.h:233,safe,safety,233,geom/geompainter/inc/TGeoChecker.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geompainter/inc/TGeoChecker.h,1,['safe'],['safety']
Safety,"//////////////////////////////////////////////////////////////////////////; // //; // Bswapcpy //; // //; // Initial version: Apr 22, 2000 //; // //; // A set of inline byte swapping routines for arrays. //; // //; // The bswapcpy16() and bswapcpy32() routines are used for packing //; // arrays of basic types into a buffer in a byte swapped order. Use //; // of asm and the `bswap' opcode (available on i486 and up) reduces //; // byte swapping overhead on linux. //; // //; // Use of routines is similar to that of memcpy. //; // //; // ATTENTION: //; // //; // n - is a number of array elements to be copied and byteswapped. //; // (It is not the number of bytes!) //; // //; // Note: It is not safe to call these routines with n == 0. //; // //; // For arrays of short type (2 bytes in size) use bswapcpy16(). //; // For arrays of of 4-byte types (int, float) use bswapcpy32(). //; // //; // //; // Author: Alexandre V. Vaniachine <AVVaniachine@lbl.gov> //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/Bswapcpy.h:699,safe,safe,699,core/base/inc/Bswapcpy.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/Bswapcpy.h,1,['safe'],['safe']
Safety,"//////////////////////////////////////////////////////////////////////////; // //; // Error handling routines. //; // //; // This file defines a number of global error handling routines: //; // Warning(), Error(), SysError() and Fatal(). They all take a //; // location string (where the error happened) and a printf style format //; // string plus vararg's. In the end these functions call an //; // errorhanlder function. Initially, a minimal, non thread-safe handler //; // is installed that is supposed to be replaced by the //; // DefaultErrorHandler(), which needs to be implemented and installed //; // by the user of TError. Normally, the default error handler is set //; // during gROOT initialization. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/TError.h:457,safe,safe,457,core/foundation/inc/TError.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/TError.h,1,['safe'],['safe']
Safety,"//////////////////////////////////////////////////////////////////////////; // //; // TAtomicCount //; // //; // Class providing atomic operations on a long. Setting, getting, //; // incrementing and decrementing are atomic, thread safe, operations. //; // //; // TAtomicCount a(n); //; // //; // (n is convertible to long) //; // //; // Effects: Constructs an TAtomicCount with an initial value of n. //; // //; // long(a); //; // //; // Returns: (long) the current value of a. //; // //; // ++a; //; // //; // Effects: Atomically increments the value of a. //; // Returns: nothing. //; // //; // --a; //; // //; // Effects: Atomically decrements the value of a. //; // Returns: (long) zero if the new value of a is zero, //; // unspecified non-zero value otherwise //; // (usually the new value). //; // //; // a.Set(n); //; // //; // Effects: Set a to the value n. //; // Returns: nothing. //; // //; // a.Get(); //; // //; // Returns: (long) the current value of a. //; // //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/thread/inc/TAtomicCount.h:232,safe,safe,232,core/thread/inc/TAtomicCount.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/thread/inc/TAtomicCount.h,1,['safe'],['safe']
Safety,"//////////////////////////////////////////////////////////////////////////; // //; // TAtomicCountGcc //; // //; // Class providing atomic operations on a long. Setting, getting, //; // incrementing and decrementing are atomic, thread safe, operations. //; // //; // This implementation uses GNU libstdc++ v3 atomic primitives, see //; // http://gcc.gnu.org/onlinedocs/porting/Thread-safety.html. //; // //; // ATTENTION: Don't use this file directly, it is included by //; // TAtomicCount.h. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/thread/inc/TAtomicCountGcc.h:235,safe,safe,235,core/thread/inc/TAtomicCountGcc.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/thread/inc/TAtomicCountGcc.h,2,['safe'],"['safe', 'safety']"
Safety,"//////////////////////////////////////////////////////////////////////////; // //; // TLockGuard //; // //; // This class provides mutex resource management in a guaranteed and //; // exception safe way. Use like this: //; // { //; // TLockGuard guard(mutex); //; // ... // do something //; // } //; // where mutex is a pointer to a TMutex object. //; // When guard goes out of scope the mutex is unlocked in the TLockGuard //; // destructor. The exception mechanism takes care of calling the dtors //; // of local objects so it is exception safe. //; // In contrast to std::lock_guard, TLockGuard constructor expects a //; // pointer, not the mutex object itself. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualMutex.h:194,safe,safe,194,core/base/inc/TVirtualMutex.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualMutex.h,2,['safe'],['safe']
Safety,"//////////////////////////////////////////////////////////////////////////; // //; // TObjectSpy, TObjectRefSpy //; // //; // Monitors objects for deletion and reflects the deletion by reverting //; // the internal pointer to zero. When this pointer is zero we know the //; // object has been deleted. This avoids the unsafe TestBit(kNotDeleted) //; // hack. The spied object must have the kMustCleanup bit set otherwise //; // you will get an error. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/gui/inc/TObjectSpy.h:307,avoid,avoids,307,core/gui/inc/TObjectSpy.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/gui/inc/TObjectSpy.h,2,"['avoid', 'unsafe']","['avoids', 'unsafe']"
Safety,"//////////////////////////////////////////////////////////////////////////; // //; // TRedirectOutputGuard //; // //; // This class provides output redirection to a file in a guaranteed //; // exception safe way. Use like this: //; // { //; // TRedirectOutputGuard guard(filelog, mode); //; // ... // do something //; // } //; // when guard goes out of scope output is automatically redirected to //; // the standard units in the TRedirectOutputGuard destructor. //; // The exception mechanism takes care of calling the dtors //; // of local objects so it is exception safe. //; // The 'mode' options follow the fopen write modes convention; default //; // is ""a"". //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TRedirectOutputGuard.h:203,safe,safe,203,core/base/inc/TRedirectOutputGuard.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TRedirectOutputGuard.h,2,['safe'],['safe']
Safety,"//////////////////////////////////////////////////////////////////////////; // //; // TThreadPoolTask //; // This is a supporting class for TThreadPool. //; // It wraps users task objects in order to pass tasks arguments in //; // type-safe way. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/thread/inc/TThreadPool.h:236,safe,safe,236,core/thread/inc/TThreadPool.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/thread/inc/TThreadPool.h,1,['safe'],['safe']
Safety,"//////////////////////////////////////////////////////////////////////////; // //; // TTimer //; // //; // Handles synchronous and a-synchronous timer events. You can use //; // this class in one of the following ways: //; // - Sub-class TTimer and override the Notify() method. //; // - Re-implement the TObject::HandleTimer() method in your class //; // and pass a pointer to this object to timer, see the SetObject() //; // method. //; // - Pass an interpreter command to timer, see SetCommand() method. //; // - Create a TTimer, connect its Timeout() signal to the //; // appropriate methods. Then when the time is up it will emit a //; // Timeout() signal and call connected slots. //; // //; // Minimum timeout interval is defined in TSystem::ESysConstants as //; // kItimerResolution (currently 10 ms). //; // //; // Signal/slots example: //; // TTimer *timer = new TTimer(); //; // timer->Connect(""Timeout()"", ""myObjectClassName"", //; // myObject, ""TimerDone()""); //; // timer->Start(2000, kTRUE); // 2 seconds single-shot //; // //; // // Timeout signal is emitted repeadetly with minimum timeout //; // // timer->Start(0, kFALSE); //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TTimer.h:545,Timeout,Timeout,545,core/base/inc/TTimer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TTimer.h,6,"['Timeout', 'timeout']","['Timeout', 'timeout']"
Safety,"//////////////////////////////////////////////////////////////////////////; // //; // TWin32AtomicCount //; // //; // Class providing atomic operations on a long. Setting, getting, //; // incrementing and decrementing are atomic, thread safe, operations. //; // //; // This implementation uses the Win32 InterLocked API for locking. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/thread/inc/TWin32AtomicCount.h:237,safe,safe,237,core/thread/inc/TWin32AtomicCount.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/thread/inc/TWin32AtomicCount.h,2,"['InterLock', 'safe']","['InterLocked', 'safe']"
Safety,"//////////////////////////////////////////////////////////////////////////; // //; // rpdpriv //; // //; // Implementation of a privileges handling API following the paper //; // ""Setuid Demystified"" by H.Chen, D.Wagner, D.Dean //; // also quoted in ""Secure programming Cookbook"" by J.Viega & M.Messier. //; // //; // NB: this not thread-safe: it is meant to be used in single-threaded //; // applications //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/res/rpdpriv.h:338,safe,safe,338,net/rpdutils/res/rpdpriv.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/res/rpdpriv.h,1,['safe'],['safe']
Safety,"//////////////////////////////////////////////////////////////////////////; ///; /// \class ROOT::Internal::RTaskArenaWrapper; /// \ingroup Parallelism; /// \brief Wrapper over tbb::task_arena; ///; /// This class is a wrapper over tbb::task_arena, in order to keep; /// TBB away from ROOT's headers. We keep a single global instance to be; /// used by any parallel ROOT class with TBB as a backend.; ///; /// TThreadExecutor, IMT and any class relying on TBB will get a pointer; /// to the scheduler through `ROOT::Internal::GetGlobalTaskArena()`, which; /// will return areference to the only pointer to the TBB scheduler that; /// will be active in any ROOT Process.; ///; /// #### Examples:; /// ~~~{.cpp}; /// root[] auto gTA = ROOT::Internal::GetGlobalTaskArena(nWorkers) //get a shared_ptr to the global arena and initialize; /// //it with nWorkers. Enable thread safety in ROOT; /// root[] gTA->TaskArenaSize() // Get the current size of the arena (number of worker threads); /// root[] gTA->Access() //std::unique_ptr to the internal tbb::task_arena for interacting directly with it (needed to; /// //call operations such as execute); /// root[] gTA->Access().max_concurrency() // call to tbb::task_arena::max_concurrency(); /// ~~~; ///; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/imt/src/RTaskArena.cxx:871,safe,safety,871,core/imt/src/RTaskArena.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/imt/src/RTaskArena.cxx,1,['safe'],['safety']
Safety,"//////////////////////////////////////////////////////////////////////////; //; // TVirtualFFT; //; // TVirtualFFT is an interface class for Fast Fourier Transforms.; //; //; //; // The default FFT library is FFTW. To use it, FFTW3 library should already; // be installed, and ROOT should be have fftw3 module enabled, with the directories; // of fftw3 include file and library specified (see installation instructions).; // Function SetDefaultFFT() allows to change the default library.; //; // Available transform types:; // FFT:; // - ""C2CFORWARD"" - a complex input/output discrete Fourier transform (DFT); // in one or more dimensions, -1 in the exponent; // - ""C2CBACKWARD""- a complex input/output discrete Fourier transform (DFT); // in one or more dimensions, +1 in the exponent; // - ""R2C"" - a real-input/complex-output discrete Fourier transform (DFT); // in one or more dimensions,; // - ""C2R"" - inverse transforms to ""R2C"", taking complex input; // (storing the non-redundant half of a logically Hermitian array); // to real output; // - ""R2HC"" - a real-input DFT with output in ""halfcomplex"" format,; // i.e. real and imaginary parts for a transform of size n stored as; // r0, r1, r2, ..., rn/2, i(n+1)/2-1, ..., i2, i1; // - ""HC2R"" - computes the reverse of FFTW_R2HC, above; // - ""DHT"" - computes a discrete Hartley transform; //; // Sine/cosine transforms:; // Different types of transforms are specified by parameter kind of the SineCosine() static; // function. 4 different kinds of sine and cosine transforms are available; // DCT-I (REDFT00 in FFTW3 notation)- kind=0; // DCT-II (REDFT10 in FFTW3 notation)- kind=1; // DCT-III(REDFT01 in FFTW3 notation)- kind=2; // DCT-IV (REDFT11 in FFTW3 notation)- kind=3; // DST-I (RODFT00 in FFTW3 notation)- kind=4; // DST-II (RODFT10 in FFTW3 notation)- kind=5; // DST-III(RODFT01 in FFTW3 notation)- kind=6; // DST-IV (RODFT11 in FFTW3 notation)- kind=7; // Formulas and detailed descriptions can be found in the chapter; // ""What FFTW rea",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualFFT.h:977,redund,redundant,977,core/base/inc/TVirtualFFT.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualFFT.h,1,['redund'],['redundant']
Safety,"////////////////////////////////////////////////////////////////////////; /// Constructor based on a collection of file names.; /// \param[in] filenames Collection of the names of the files containing the tree to process.; /// \param[in] treename Name of the tree to process. If not provided, the implementation will; /// search filenames for a TTree key and will use the first one it finds in each file.; /// \param[in] nThreads Number of threads to create in the underlying thread-pool. The semantics of this argument are; /// the same as for TThreadExecutor.; /// \param[in] globalRange Global entry range to process, {begin (inclusive), end (exclusive)}.; ///; /// If different files contain TTrees with different names and automatic TTree name detection is not an option; /// (for example, because some of the files contain multiple TTrees) please manually create a TChain and pass; /// it to the appropriate TTreeProcessorMT constructor.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeProcessorMT.cxx:749,detect,detection,749,tree/treeplayer/src/TTreeProcessorMT.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeProcessorMT.cxx,1,['detect'],['detection']
Safety,"////////////////////////////////////////////////////////////////////////; /// get unfolding result on detector level; ///; /// \param[out] out histogram to store the correlation coefficiencts. The bin; /// contents and errors are overwritten.; /// \param[in] binMap (default=nullptr) array for mapping truth bins to histogram bins; ///; /// This method returns the unfolding output folded by the response; /// matrix, i.e. the vector Ax.; ///; /// The use of <b>binMap</b> is explained with the documentation of; /// the GetOutput() method; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfold.cxx:102,detect,detector,102,hist/unfold/src/TUnfold.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfold.cxx,1,['detect'],['detector']
Safety,"////////////////////////////////////////////////////////////////////////; /// minimize Stein's unbiased risk estimator ""SURE""; /// using successive calls to DoUnfold at various tau.; /// Optionally, also the L-curve and its curvature are calculated; /// for comparison. See description of GetSURE(); /// See e.g. arXiv:1612.09415 for the definition of SURE; ///; /// \param[in] nPoint : number of points; /// \param[in] tauMin : lower end of scan-range; /// \param[in] tauMax : upper end of scan-range; /// \param[out] logTauSURE : scan result, SURE as a function of log(tau); /// \param[out] df_chi2A : parametric plot of DF against chi2A; /// \param[out] lCurve : parametric plot (lCurve); ///; /// return value: index of the ""best"" point; ///; /// if tauMin is less than zero of if tauMin is not loer than tauMax, then; /// the scan range is determined automatically; /// if tau=nullptr is included in the scan, then the first x-coordinate; // of the result plot logTauSURE is set to -Infinity",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfold.cxx:104,risk,risk,104,hist/unfold/src/TUnfold.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfold.cxx,1,['risk'],['risk']
Safety,"////////////////////////////////////////////////////////////////////////; /// return Stein's unbiased risk estimator; /// See e.g. arXiv:1612.09415; ///; /// A minimum in the SURE variable is a good choice of regularisation strength; ///; /// NOTE: the calculation of SURE depends on the calculation of DF.; /// See the method GetDF() for caveats with Poisson-distributed data.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfold.cxx:102,risk,risk,102,hist/unfold/src/TUnfold.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfold.cxx,1,['risk'],['risk']
Safety,"/////////////////////////////////////////////////////////////////////; /// Parse string path to produce RElementPath_t; /// One should avoid to use string pathes as much as possible",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/browsable/src/RElement.cxx:135,avoid,avoid,135,gui/browsable/src/RElement.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/browsable/src/RElement.cxx,1,['avoid'],['avoid']
Safety,"/////////////////////////////////////////////////////////////////////; /// Report running progress; /// Returns true if handling function was invoked; /// Method can be used to detect if there any progress handler assigned",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/browsable/src/RProvider.cxx:177,detect,detect,177,gui/browsable/src/RProvider.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/browsable/src/RProvider.cxx,1,['detect'],['detect']
Safety,"//////////////////////////////////////////////////////////////////; /// This thread id used to identify main application thread, where ROOT event processing runs; /// To inject code in that thread, one should use TTimer (like THttpServer does); /// In other threads special run methods have to be invoked like RWebWindow::Run(); ///; /// TODO: probably detection of main thread should be delivered by central ROOT instances like gApplication or gROOT; /// Main thread can only make sense if special processing runs there and one can inject own functionality there",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx:353,detect,detection,353,gui/webdisplay/src/RWebWindowsManager.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx,1,['detect'],['detection']
Safety,"///////////////////////////////////////////////////; // //; // Scoped array - scope guard for an array. //; // Sometimes, I can not use std::vector, //; // for example, data is allocated in TGCocoa //; // and must be later freed in Objective-C code. //; // To make the code exception-safe, I still //; // have to care about memory, which is already //; // allocated. //; // //; ///////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/macosx/inc/CocoaUtils.h:284,safe,safe,284,core/macosx/inc/CocoaUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/macosx/inc/CocoaUtils.h,1,['safe'],['safe']
Safety,"///////////////////////////////////; // loop through estimates, add expectation, floating bin predictions,; // and terms that constrain floating to expectation via uncertainties; // GHL: Loop over samples instead, which doesn't contain the data",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/src/HistoToWorkspaceFactoryFast.cxx:94,predict,predictions,94,roofit/histfactory/src/HistoToWorkspaceFactoryFast.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/src/HistoToWorkspaceFactoryFast.cxx,1,['predict'],['predictions']
Safety,///; /// Check if \p BB contains a store to the same address as \p SI; ///; /// \return The store in \p when it is safe to sink. Otherwise return Null.; ///,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/MergedLoadStoreMotion.cpp:115,safe,safe,115,interpreter/llvm-project/llvm/lib/Transforms/Scalar/MergedLoadStoreMotion.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/MergedLoadStoreMotion.cpp,1,['safe'],['safe']
Safety,"///; /// This function checks if MI can be moved to the beginning of the TargetMBB; /// following PHI instructions. A MI instruction can be moved to beginning of; /// the TargetMBB if there are no uses of it within the TargetMBB PHI nodes.; ///; /// \param[in] MI the machine instruction to move.; /// \param[in] TargetMBB the machine basic block to move to; /// \return true if it is safe to move MI to beginning of TargetMBB,; /// false otherwise.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCBranchCoalescing.cpp:385,safe,safe,385,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCBranchCoalescing.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCBranchCoalescing.cpp,1,['safe'],['safe']
Safety,"///; /// This function checks if MI can be moved to the end of the TargetMBB,; /// immediately before the first terminator. A MI instruction can be moved; /// to then end of the TargetMBB if no PHI node defines what MI uses within; /// it's own MBB.; ///; /// \param[in] MI the machine instruction to move.; /// \param[in] TargetMBB the machine basic block to move to; /// \return true if it is safe to move MI to end of TargetMBB,; /// false otherwise.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCBranchCoalescing.cpp:395,safe,safe,395,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCBranchCoalescing.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCBranchCoalescing.cpp,1,['safe'],['safe']
Safety,"///< Abort status",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/inc/TSelector.h:5,Abort,Abort,5,tree/tree/inc/TSelector.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/inc/TSelector.h,1,['Abort'],['Abort']
Safety,///< Always detect stack use after return.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/AddressSanitizerOptions.h:12,detect,detect,12,interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/AddressSanitizerOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/AddressSanitizerOptions.h,1,['detect'],['detect']
Safety,"///< Array of pointers to predictions of real template distributions; ///@name Histograms; ///@{",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TFractionFitter.h:26,predict,predictions,26,hist/hist/inc/TFractionFitter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TFractionFitter.h,1,['predict'],['predictions']
Safety,///< Current operand of \c N.; /// Keep a flag of whether operands have changed in the worklist to avoid; /// hitting the map in \a UniquedGraph.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/ValueMapper.cpp:99,avoid,avoid,99,interpreter/llvm-project/llvm/lib/Transforms/Utils/ValueMapper.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/ValueMapper.cpp,1,['avoid'],['avoid']
Safety,///< Detect stack use after return if not disabled runtime with; ///< (ASAN_OPTIONS=detect_stack_use_after_return=0).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/AddressSanitizerOptions.h:5,Detect,Detect,5,interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/AddressSanitizerOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/AddressSanitizerOptions.h,1,['Detect'],['Detect']
Safety,"///< Detector response matrix; ///@}; /// @name Evaluation of covariance matrices; ///@{",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TSVDUnfold.h:5,Detect,Detector,5,hist/hist/inc/TSVDUnfold.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TSVDUnfold.h,1,['Detect'],['Detector']
Safety,"///< GD path: risk",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFitParams.h:14,risk,risk,14,tmva/tmva/inc/TMVA/RuleFitParams.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFitParams.h,1,['risk'],['risk']
Safety,"///< If true, do not kill the process on timeout.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Program.h:41,timeout,timeout,41,interpreter/llvm-project/llvm/include/llvm/Support/Program.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Program.h,1,['timeout'],['timeout']
Safety,"///< Include phony targets for each; /// dependency, which can avoid some 'make'; /// problems.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/DependencyOutputOptions.h:63,avoid,avoid,63,interpreter/llvm-project/clang/include/clang/Frontend/DependencyOutputOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/DependencyOutputOptions.h,1,['avoid'],['avoid']
Safety,///< Never detect stack use after return.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/AddressSanitizerOptions.h:11,detect,detect,11,interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/AddressSanitizerOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/AddressSanitizerOptions.h,1,['detect'],['detect']
Safety,///< Not a valid detect mode.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/AddressSanitizerOptions.h:17,detect,detect,17,interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/AddressSanitizerOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/AddressSanitizerOptions.h,1,['detect'],['detect']
Safety,"///< Pointer to histogram containing summed template predictions",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TFractionFitter.h:53,predict,predictions,53,hist/hist/inc/TFractionFitter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TFractionFitter.h,1,['predict'],['predictions']
Safety,"///< ROOT ./configure detected build features",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TROOT.h:22,detect,detected,22,core/base/inc/TROOT.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TROOT.h,1,['detect'],['detected']
Safety,"///< Safety check to prevent tokens from other models being used",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/REntry.hxx:5,Safe,Safety,5,tree/ntuple/v7/inc/ROOT/REntry.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/REntry.hxx,1,['Safe'],['Safety']
Safety,///< The SCEV varies predictably with the loop.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h:21,predict,predictably,21,interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,1,['predict'],['predictably']
Safety,"///< The Smoothing term used to avoid division by zero.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Adadelta.h:32,avoid,avoid,32,tmva/tmva/inc/TMVA/DNN/Adadelta.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Adadelta.h,4,['avoid'],['avoid']
Safety,"///< The output function for making the predictions",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodDL.h:40,predict,predictions,40,tmva/tmva/inc/TMVA/MethodDL.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodDL.h,1,['predict'],['predictions']
Safety,"///< This object manages the sockets and detect socket events via TMonitor::Select",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/multiproc/inc/TMPClient.h:41,detect,detect,41,core/multiproc/inc/TMPClient.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/multiproc/inc/TMPClient.h,1,['detect'],['detect']
Safety,"///< adjust bin edges to avoid overlapping with data",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/TKDTreeBinning.h:25,avoid,avoid,25,math/mathcore/inc/TKDTreeBinning.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/TKDTreeBinning.h,1,['avoid'],['avoid']
Safety,///< attempt to resolve constraint edge intersections; /**; * No checks: slightly faster but less safe.; * User must provide a valid input without intersecting constraints.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/Triangulation.h:98,safe,safe,98,math/mathcore/src/CDT/Triangulation.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/Triangulation.h,1,['safe'],['safe']
Safety,"///< flag to avoid recursive calls",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/inc/TFileCacheWrite.h:13,avoid,avoid,13,io/io/inc/TFileCacheWrite.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/inc/TFileCacheWrite.h,1,['avoid'],['avoid']
Safety,"///< if set, calls are inferred to be safepoints",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GCStrategy.h:38,safe,safepoints,38,interpreter/llvm-project/llvm/include/llvm/IR/GCStrategy.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GCStrategy.h,1,['safe'],['safepoints']
Safety,"///< map event to true value, predicted value, and weight; /// used by different loss functions for BDT regression",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBDT.h:30,predict,predicted,30,tmva/tmva/inc/TMVA/MethodBDT.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBDT.h,1,['predict'],['predicted']
Safety,"///< minimum number of likelihood (to avoid zero)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodLikelihood.h:38,avoid,avoid,38,tmva/tmva/inc/TMVA/MethodLikelihood.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodLikelihood.h,1,['avoid'],['avoid']
Safety,"///< the current event (to avoid reading of the same event); // the formulas for reading the original tree",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataSetFactory.h:27,avoid,avoid,27,tmva/tmva/inc/TMVA/DataSetFactory.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataSetFactory.h,1,['avoid'],['avoid']
Safety,"///< to avoid memory leak",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/ged/inc/TStyleDialog.h:8,avoid,avoid,8,gui/ged/inc/TStyleDialog.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/ged/inc/TStyleDialog.h,5,['avoid'],['avoid']
Safety,"///<! Offset as KahanSum to avoid loss of precision",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.h:28,avoid,avoid,28,roofit/roofitcore/src/RooAbsTestStatistic.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.h,2,['avoid'],['avoid']
Safety,"///<! Toy MC detector response matrix",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TSVDUnfold.h:13,detect,detector,13,hist/hist/inc/TSVDUnfold.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TSVDUnfold.h,1,['detect'],['detector']
Safety,"///<! hash of last send draw message, avoid looping",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/inc/TWebCanvas.h:38,avoid,avoid,38,gui/webgui6/inc/TWebCanvas.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/inc/TWebCanvas.h,1,['avoid'],['avoid']
Safety,"///<! if pad was detected during last scan",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/inc/TWebCanvas.h:17,detect,detected,17,gui/webgui6/inc/TWebCanvas.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/inc/TWebCanvas.h,1,['detect'],['detected']
Safety,"///<! list of created items names, need to avoid duplication",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/inc/TRootSniffer.h:43,avoid,avoid,43,net/http/inc/TRootSniffer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/inc/TRootSniffer.h,1,['avoid'],['avoid']
Safety,"///<! stored value of setlocale(LC_NUMERIC), which should be recovered at the end",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/inc/TBufferJSON.h:61,recover,recovered,61,io/io/inc/TBufferJSON.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/inc/TBufferJSON.h,1,['recover'],['recovered']
Safety,"///<! timeout in seconds to start browser process, default 30s",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/inc/ROOT/RWebWindowsManager.hxx:6,timeout,timeout,6,gui/webdisplay/inc/ROOT/RWebWindowsManager.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/inc/ROOT/RWebWindowsManager.hxx,1,['timeout'],['timeout']
Safety,"///<!IO feature flags. Serialized in custom portion of streamer to avoid forward compat issues unless needed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/inc/TBasket.h:67,avoid,avoid,67,tree/tree/inc/TBasket.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/inc/TBasket.h,1,['avoid'],['avoid']
Safety,"///<Timeout for open operations in ms - 0 corresponds to blocking i/o",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/inc/TFile.h:4,Timeout,Timeout,4,io/io/inc/TFile.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/inc/TFile.h,1,['Timeout'],['Timeout']
Safety,///@{; /// NOTE: The moved-from or copied-from object's allocator needs to have a; /// lifetime equal to or exceeding the moved-to or copied-to object to avoid; /// undefined behaviour.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h:154,avoid,avoid,154,interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h,1,['avoid'],['avoid']
Safety,"///@}; ///@{; /// \name General Mutation API; ///; /// There are a very limited set of mutations allowed on the graph as a whole; /// once SCCs have started to be formed. These routines have strict contracts; /// but may be called at any point.; /// Remove a dead function from the call graph (typically to delete it).; ///; /// Note that the function must have an empty use list, and the call graph; /// must be up-to-date prior to calling this. That means it is by itself in; /// a maximal SCC which is by itself in a maximal RefSCC, etc. No structural; /// changes result from calling this routine other than potentially removing; /// entry points into the call graph.; ///; /// If SCC formation has begun, this function must not be part of the current; /// DFS in order to call this safely. Typically, the function will have been; /// fully visited by the DFS prior to calling this routine.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LazyCallGraph.h:787,safe,safely,787,interpreter/llvm-project/llvm/include/llvm/Analysis/LazyCallGraph.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LazyCallGraph.h,1,['safe'],['safely']
Safety,"///@}; //____________________________________________________________________________; //; // Loss Functions; //____________________________________________________________________________; /** @name Loss Functions; * Loss functions compute a scalar value given the \p output of the network; * for a given training input and the expected network prediction \p Y that; * quantifies the quality of the prediction. For each function also a routing; * that computes the gradients (suffixed by Gradients) must be provided for; * the starting of the backpropagation algorithm.; */; ///@{",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cpu.h:346,predict,prediction,346,tmva/tmva/inc/TMVA/DNN/Architectures/Cpu.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cpu.h,8,['predict'],['prediction']
Safety,"///@}; //____________________________________________________________________________; //; // Output Functions; //____________________________________________________________________________; /** @name Output Functions; * Output functions transform the activations \p output of the; * output layer in the network to a valid prediction \p YHat for; * the desired usage of the network, e.g. the identity function; * for regression or the sigmoid transformation for two-class; * classification.; */; ///@{",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cpu.h:324,predict,prediction,324,tmva/tmva/inc/TMVA/DNN/Architectures/Cpu.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cpu.h,4,['predict'],['prediction']
Safety,"///\brief A type, value pair.; //; /// Type-safe value access and setting. Simple (built-in) casting is; /// available, but better extract the value using the template; /// parameter that matches the Value's type.; ///; /// The class represents a llvm::GenericValue with its corresponding; /// clang::QualType. Use-cases are expression evaluation, value printing; /// and parameters for function calls.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/include/cling/Interpreter/Value.h:44,safe,safe,44,interpreter/cling/include/cling/Interpreter/Value.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/include/cling/Interpreter/Value.h,1,['safe'],['safe']
Safety,"///\brief Lock a region of compilation that is executed by the interpreter; /// during user code execution.; ///; /// When cling is used in multi-threaded environments, all calls to cling; /// are expected to be locked by the caller. Cling will release that lock; /// using `EnteringUserCode()` and re-instate that lock using; /// `ReturnedFromUserCode()` for the duration of the execution of the user; /// code. But that user code can trigger calls to the interpreter itself.; /// These calls are due to instrumented parts of the user code, e.g.; /// `printValue()` calls and `cling::runtime::internal::LifetimeHandler`; /// calls. For those, cling needs to be locked with a mechanism compatible; /// with the mechanism used for `EnteringUserCode()` /; /// `ReturnedFromUserCode()` to avoid deadlocks. Before entering compilation; /// triggered by user code, cling will call; /// `LockCompilationDuringUserCodeExecution()`; after the execution of that; /// code has finished it will call; /// `UnlockCompilationDuringUserCodeExecution()`.; /// Note that after the compilation of that code cling will call; /// `EnteringUserCode()` (before executing) and `ReturnedFromUserCode()`; /// (after execution that code).; ///; /// \returns An optional state object needed for the call to; /// `UnlockCompilationDuringUserCodeExecution(state)`.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/include/cling/Interpreter/InterpreterCallbacks.h:786,avoid,avoid,786,interpreter/cling/include/cling/Interpreter/InterpreterCallbacks.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/include/cling/Interpreter/InterpreterCallbacks.h,1,['avoid'],['avoid']
Safety,"///\brief Quick lookup for a single namespace declaration in a given; /// declaration context.; ///; ///\param[in] S - Semantic Analysis object doing the lookup.; ///\param[in] Name - The name we are looking up. The & avoids inclusion of; /// DeclarationName.h (faster at runtime).; ///\param[in] Within - The context within the lookup is done. If 0 the; /// TranslationUnitDecl is used.; ///\returns the found result if single, -1 if multiple or 0 if not found.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/include/cling/Utils/AST.h:218,avoid,avoids,218,interpreter/cling/include/cling/Utils/AST.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/include/cling/Utils/AST.h,1,['avoid'],['avoids']
Safety,"///\brief The clang code generator, being recovered.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/DeclUnloader.h:42,recover,recovered,42,interpreter/cling/lib/Interpreter/DeclUnloader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/DeclUnloader.h,1,['recover'],['recovered']
Safety,"///\brief Thread-safe llvm library state.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/include/cling/Interpreter/Interpreter.h:17,safe,safe,17,interpreter/cling/include/cling/Interpreter/Interpreter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/include/cling/Interpreter/Interpreter.h,1,['safe'],['safe']
Safety,"///\brief Transforms the declaration, forward to Transform(D).; ///; ///\param[in] D - The declaration to be transformed.; ///\param[in] T - The declaration's transaction.; ///\returns The transformation result which will be emitted. Return nullptr; /// if this declaration should not be emitted. Returning error will abort; /// the transaction.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/ASTTransformer.h:318,abort,abort,318,interpreter/cling/lib/Interpreter/ASTTransformer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/ASTTransformer.h,1,['abort'],['abort']
Safety,"///\brief Transforms the declaration.; ///; /// Subclasses override it in order to provide the needed behavior.; ///; ///\param[in] D - The declaration to be transformed.; ///\returns The transformation result which will be emitted. Return nullptr; /// if this declaration should not be emitted. Returning error will abort; /// the transaction.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/ASTTransformer.h:317,abort,abort,317,interpreter/cling/lib/Interpreter/ASTTransformer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/ASTTransformer.h,1,['abort'],['abort']
Safety,"///\brief Unloads (forgets) a transaction from AST and JITed symbols.; ///; /// If one of the declarations caused error in clang it is rolled back from; /// the AST. This is essential feature for the error recovery subsystem.; /// This is also a key entry point for the code unloading.; ///; ///\param[in] T - the transaction to unload.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/include/cling/Interpreter/Interpreter.h:206,recover,recovery,206,interpreter/cling/include/cling/Interpreter/Interpreter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/include/cling/Interpreter/Interpreter.h,1,['recover'],['recovery']
Safety,"///\brief Used to avoid to select all instances of a template",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/inc/RootMetaSelection.h:18,avoid,avoid,18,core/meta/inc/RootMetaSelection.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/inc/RootMetaSelection.h,1,['avoid'],['avoid']
Safety,"///\{; ///\name Global Palettes; /// Register a palette in the set of global palettes, making it available to `GetPalette()`.; /// This function is not thread safe; any concurrent call to global Palette manipulation must be synchronized!",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpadv7/inc/ROOT/RPalette.hxx:159,safe,safe,159,graf2d/gpadv7/inc/ROOT/RPalette.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpadv7/inc/ROOT/RPalette.hxx,1,['safe'],['safe']
Safety,"///\}; /// Add two histograms.; ///; /// This operation may currently only be performed if the two histograms have; /// the same axis configuration, use the same precision, and if `from` records; /// at least the same statistics as `to` (recording more stats is fine).; ///; /// Adding histograms with incompatible axis binning will be reported at runtime; /// with an `std::runtime_error`. Insufficient statistics in the source; /// histogram will be detected at compile-time and result in a compiler error.; ///; /// In the future, we may either adopt a more relaxed definition of histogram; /// addition or provide a mechanism to convert from one histogram type to; /// another. We currently favor the latter path.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/inc/ROOT/RHist.hxx:452,detect,detected,452,hist/histv7/inc/ROOT/RHist.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/inc/ROOT/RHist.hxx,1,['detect'],['detected']
Safety,"//; // Always take the last min.; // For each step the risk is reduced.; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx:55,risk,risk,55,tmva/tmva/src/RuleFitParams.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx,1,['risk'],['risk']
Safety,"//; // Avoid splitting unsplittable classes.; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTree.cxx:7,Avoid,Avoid,7,tree/tree/src/TTree.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTree.cxx,1,['Avoid'],['Avoid']
Safety,"//; // Check for an increase in risk.; // Such an increase would imply that the regularization is too small.; // Stop the iteration if this happens.; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx:32,risk,risk,32,tmva/tmva/src/RuleFitParams.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx,1,['risk'],['risk']
Safety,"//; // Client ""protocol changes""; //; // This was in TNetFile and TAuthenticate before, but after the introduction; // of TSocket::CreateAuthSocket the common place for all the clients is TSocket,; // so this seems to be the right place for a version number; //; // 7: added support for ReOpen(), kROOTD_BYE and kROOTD_PROTOCOL2; // 8: added support for update being a create (open stat = 2 and not 1); // 9: added new authentication features (see README.AUTH); // 10: added support for authenticated socket via TSocket::CreateAuthSocket(...); // 11: modified SSH protocol + support for server 'no authentication' mode; // 12: add random tags to avoid reply attacks (password+token); // 13: authentication re-organization; cleanup in PROOF; // 14: support for SSH authentication via SSH tunnel; // 15: cope with fixes in TUrl::GetFile; // 16: add env setup message exchange; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TSocket.cxx:646,avoid,avoid,646,net/net/src/TSocket.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TSocket.cxx,1,['avoid'],['avoid']
Safety,"//; // During BPF program verification a tag PTR_TO_CTX is tracked for; // register values. In case if register with such tag is modified; // BPF program is not allowed to read or write memory using this; // register. See kernel/bpf/verifier.c:check_mem_access function; // in the Linux kernel source tree for details.; //; // The following sequence of the IR instructions:; //; // %x = getelementptr %ptr, %constant_offset; // %y = load %x; //; // Is translated as a single machine instruction:; //; // LDW %ptr, %constant_offset; //; // In order for cases (a) and (b) to work the sequence %x-%y above has; // to be preserved by the IR passes.; //; // However, several optimization passes might sink `load` instruction; // or hoist `getelementptr` instruction so that the instructions are; // no longer in sequence. Examples of such passes are:; // SimplifyCFGPass, InstCombinePass, GVNPass.; // After such modification the verifier would reject the BPF program.; //; // To avoid this issue the patterns like (load/store (getelementptr ...)); // are replaced by calls to BPF specific intrinsic functions:; // - llvm.bpf.getelementptr.and.load; // - llvm.bpf.getelementptr.and.store; //; // These calls are lowered back to (load/store (getelementptr ...)); // by BPFCheckAndAdjustIR pass right before the translation from IR to; // machine instructions.; //; // The transformation is split into the following steps:; // - When IR is generated from AST the calls to intrinsic function; // llvm.preserve.static.offset are inserted.; // - BPFPreserveStaticOffsetPass is executed as early as possible; // with AllowPatial set to true, this handles marked GEP chains; // with constant offsets.; // - BPFPreserveStaticOffsetPass is executed at ScalarOptimizerLateEPCallback; // with AllowPatial set to false, this handles marked GEP chains; // with offsets that became constant after loop unrolling, e.g.; // to handle the following code:; //; // struct context { int x[4]; } __attribute__((preserve_static_",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/BPF/BPFPreserveStaticOffset.cpp:2424,avoid,avoid,2424,interpreter/llvm-project/llvm/lib/Target/BPF/BPFPreserveStaticOffset.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/BPF/BPFPreserveStaticOffset.cpp,1,['avoid'],['avoid']
Safety,"//; // Reset timeout variables and start timer",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/TAuthenticate.cxx:13,timeout,timeout,13,net/auth/src/TAuthenticate.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/TAuthenticate.cxx,1,['timeout'],['timeout']
Safety,"//; // Set tau and coefs; // Downscale tau slightly in order to avoid numerical problems; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx:64,avoid,avoid,64,tmva/tmva/src/RuleFitParams.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx,1,['avoid'],['avoid']
Safety,"//; // Setup timeout timer, if required",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/TAuthenticate.cxx:13,timeout,timeout,13,net/auth/src/TAuthenticate.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/TAuthenticate.cxx,1,['timeout'],['timeout']
Safety,"//; // Special timer to handle stop/abort request via exception raising; ////////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/src/TProofPlayer.cxx:36,abort,abort,36,proof/proofplayer/src/TProofPlayer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/src/TProofPlayer.cxx,1,['abort'],['abort']
Safety,"//; // This could be removed, sanity check",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TSpline.cxx:30,sanity check,sanity check,30,hist/hist/src/TSpline.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TSpline.cxx,1,['sanity check'],['sanity check']
Safety,"//; // This is the multi-threaded multiclass version; //; // Note: we only need to update the predicted probabilities every; // `nClasses` tree. Let's call a set of `nClasses` trees a ""round"". Thus; // the algortihm is split in two parts `update_residuals` and; // `update_residuals_last` where the latter is inteded to be run instead; // of the former for the last tree in a ""round"".; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx:94,predict,predicted,94,tmva/tmva/src/MethodBDT.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx,1,['predict'],['predicted']
Safety,"//; // Timeout: we set the method as last one, should the caller; // decide to retry, if it will attempt first something else.; // (We can not retry directly, because the server will not be; // synchronized ...)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/TAuthenticate.cxx:7,Timeout,Timeout,7,net/auth/src/TAuthenticate.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/TAuthenticate.cxx,1,['Timeout'],['Timeout']
Safety,"//; //--------------------; // loop over the paths; //--------------------; // The number of MAXIMUM loops is given by nscan.; // At each loop, the paths being far away from the minimum; // are rejected. Hence at each check (every netst events), the number; // of paths searched will be reduced.; // The maximum 'distance' from the minimum error rate is; // 1 sigma. See RiskPerfTst() for details.; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx:371,Risk,RiskPerfTst,371,tmva/tmva/src/RuleFitParams.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx,1,['Risk'],['RiskPerfTst']
Safety,"//=- AArch64RedundantCopyElimination.cpp - Remove useless copy for AArch64 -=//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; // This pass removes unnecessary copies/moves in BBs based on a dominating; // condition.; //; // We handle three cases:; // 1. For BBs that are targets of CBZ/CBNZ instructions, we know the value of; // the CBZ/CBNZ source register is zero on the taken/not-taken path. For; // instance, the copy instruction in the code below can be removed because; // the CBZW jumps to %bb.2 when w0 is zero.; //; // %bb.1:; // cbz w0, .LBB0_2; // .LBB0_2:; // mov w0, wzr ; <-- redundant; //; // 2. If the flag setting instruction defines a register other than WZR/XZR, we; // can remove a zero copy in some cases.; //; // %bb.0:; // subs w0, w1, w2; // str w0, [x1]; // b.ne .LBB0_2; // %bb.1:; // mov w0, wzr ; <-- redundant; // str w0, [x2]; // .LBB0_2; //; // 3. Finally, if the flag setting instruction is a comparison against a; // constant (i.e., ADDS[W|X]ri, SUBS[W|X]ri), we can remove a mov immediate; // in some cases.; //; // %bb.0:; // subs xzr, x0, #1; // b.eq .LBB0_1; // .LBB0_1:; // orr x0, xzr, #0x1 ; <-- redundant; //; // This pass should be run after register allocation.; //; // FIXME: This could also be extended to check the whole dominance subtree below; // the comparison if the compile time regression is acceptable.; //; // FIXME: Add support for handling CCMP instructions.; // FIXME: If the known register value is zero, we should be able to rewrite uses; // to use WZR/XZR directly in some cases.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64RedundantCopyElimination.cpp:758,redund,redundant,758,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64RedundantCopyElimination.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64RedundantCopyElimination.cpp,3,['redund'],['redundant']
Safety,"//=- RunLoopAutoreleaseLeakChecker.cpp --------------------------*- C++ -*-==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //; //===----------------------------------------------------------------------===//; //; // A checker for detecting leaks resulting from allocating temporary; // autoreleased objects before starting the main run loop.; //; // Checks for two antipatterns:; // 1. ObjCMessageExpr followed by [[NSRunLoop mainRunLoop] run] in the same; // autorelease pool.; // 2. ObjCMessageExpr followed by [[NSRunLoop mainRunLoop] run] in no; // autorelease pool.; //; // Any temporary objects autoreleased in code called in those expressions; // will not be deallocated until the program exits, and are effectively leaks.; //; //===----------------------------------------------------------------------===//; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/RunLoopAutoreleaseLeakChecker.cpp:400,detect,detecting,400,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/RunLoopAutoreleaseLeakChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/RunLoopAutoreleaseLeakChecker.cpp,1,['detect'],['detecting']
Safety,"//=- WebAssemblyFixBrTableDefaults.cpp - Fix br_table default branch targets -//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file This file implements a pass that eliminates redundant range checks; /// guarding br_table instructions. Since jump tables on most targets cannot; /// handle out of range indices, LLVM emits these checks before most jump; /// tables. But br_table takes a default branch target as an argument, so it; /// does not need the range checks.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyFixBrTableDefaults.cpp:435,redund,redundant,435,interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyFixBrTableDefaults.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyFixBrTableDefaults.cpp,1,['redund'],['redundant']
Safety,"//=- llvm/CodeGen/ScheduleHazardRecognizer.h - Scheduling Support -*- C++ -*-=//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the ScheduleHazardRecognizer class, which implements; // hazard-avoidance heuristics for scheduling.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleHazardRecognizer.h:461,hazard,hazard-avoidance,461,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleHazardRecognizer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleHazardRecognizer.h,1,['hazard'],['hazard-avoidance']
Safety,"//=- llvm/CodeGen/ScoreboardHazardRecognizer.h - Schedule Support -*- C++ -*-=//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the ScoreboardHazardRecognizer class, which; // encapsulates hazard-avoidance heuristics for scheduling, based on the; // scheduling itineraries specified for the target.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScoreboardHazardRecognizer.h:462,hazard,hazard-avoidance,462,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScoreboardHazardRecognizer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScoreboardHazardRecognizer.h,1,['hazard'],['hazard-avoidance']
Safety,"//=-- SystemZHazardRecognizer.h - SystemZ Hazard Recognizer -----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file declares a hazard recognizer for the SystemZ scheduler.; //; // This class is used by the SystemZ scheduling strategy to maintain; // the state during scheduling, and provide cost functions for; // scheduling candidates. This includes:; //; // * Decoder grouping. A decoder group can maximally hold 3 uops, and; // instructions that always begin a new group should be scheduled when; // the current decoder group is empty.; // * Processor resources usage. It is beneficial to balance the use of; // resources.; //; // A goal is to consider all instructions, also those outside of any; // scheduling region. Such instructions are ""advanced"" past and include; // single instructions before a scheduling region, branches etc.; //; // A block that has only one predecessor continues scheduling with the state; // of it (which may be updated by emitting branches).; //; // ===---------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZHazardRecognizer.h:42,Hazard,Hazard,42,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZHazardRecognizer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZHazardRecognizer.h,2,"['Hazard', 'hazard']","['Hazard', 'hazard']"
Safety,"//=-- SystemZHazardRecognizer.h - SystemZ Hazard Recognizer -----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines a hazard recognizer for the SystemZ scheduler.; //; // This class is used by the SystemZ scheduling strategy to maintain; // the state during scheduling, and provide cost functions for; // scheduling candidates. This includes:; //; // * Decoder grouping. A decoder group can maximally hold 3 uops, and; // instructions that always begin a new group should be scheduled when; // the current decoder group is empty.; // * Processor resources usage. It is beneficial to balance the use of; // resources.; //; // A goal is to consider all instructions, also those outside of any; // scheduling region. Such instructions are ""advanced"" past and include; // single instructions before a scheduling region, branches etc.; //; // A block that has only one predecessor continues scheduling with the state; // of it (which may be updated by emitting branches).; //; // ===---------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZHazardRecognizer.cpp:42,Hazard,Hazard,42,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZHazardRecognizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZHazardRecognizer.cpp,2,"['Hazard', 'hazard']","['Hazard', 'hazard']"
Safety,"//== DynamicTypeChecker.cpp ------------------------------------ -*- C++ -*--=//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This checker looks for cases where the dynamic type of an object is unrelated; // to its static type. The type information utilized by this check is collected; // by the DynamicTypePropagation checker. This check does not report any type; // error for ObjC Generic types, in order to avoid duplicate erros from the; // ObjC Generics checker. This checker is not supposed to modify the program; // state, it is just the observer of the type information provided by other; // checkers.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/DynamicTypeChecker.cpp:667,avoid,avoid,667,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/DynamicTypeChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/DynamicTypeChecker.cpp,1,['avoid'],['avoid']
Safety,"//== ValistChecker.cpp - stdarg.h macro usage checker -----------*- C++ -*--==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This defines checkers which detect usage of uninitialized va_list values; // and va_start calls with no matching va_end.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/ValistChecker.cpp:411,detect,detect,411,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/ValistChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/ValistChecker.cpp,1,['detect'],['detect']
Safety,"//==- AliasAnalysis.cpp - Generic Alias Analysis Interface Implementation --==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the generic AliasAnalysis interface which is used as the; // common interface used by all clients and implementations of alias analysis.; //; // This file also implements the default version of the AliasAnalysis interface; // that is to be used when no other implementation is specified. This does some; // simple tests that detect obvious cases: two different global pointers cannot; // alias, a global cannot alias a malloc, two different mallocs cannot alias,; // etc.; //; // This alias analysis implementation really isn't very good for anything, but; // it is very fast, and makes a nice clean default implementation. Because it; // handles lots of little corner cases, other, more complex, alias analysis; // implementations may choose to rely on this pass to resolve these simple and; // easy cases.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/AliasAnalysis.cpp:729,detect,detect,729,interpreter/llvm-project/llvm/lib/Analysis/AliasAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/AliasAnalysis.cpp,1,['detect'],['detect']
Safety,"//==- GTestChecker.cpp - Model gtest API --*- C++ -*-==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This checker models the behavior of un-inlined APIs from the gtest; // unit-testing library to avoid false positives when using assertions from; // that library.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/GTestChecker.cpp:455,avoid,avoid,455,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/GTestChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/GTestChecker.cpp,1,['avoid'],['avoid']
Safety,"//==- LoongArchExpandAtomicPseudoInsts.cpp - Expand atomic pseudo instrs. -===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file contains a pass that expands atomic pseudo instructions into; // target instructions. This pass should be run at the last possible moment,; // avoiding the possibility for other passes to break the requirements for; // forward progress in the LL/SC block.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/LoongArch/LoongArchExpandAtomicPseudoInsts.cpp:536,avoid,avoiding,536,interpreter/llvm-project/llvm/lib/Target/LoongArch/LoongArchExpandAtomicPseudoInsts.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/LoongArch/LoongArchExpandAtomicPseudoInsts.cpp,1,['avoid'],['avoiding']
Safety,"//==- TLSVariableHoist.h ------ Remove Redundant TLS Loads -------*- C++ -*-==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass identifies/eliminates Redundant TLS Loads if related option is set.; // For example:; // static __thread int x;; // int g();; // int f(int c) {; // int *px = &x;; // while (c--); // *px += g();; // return *px;; // }; //; // will generate Redundant TLS Loads by compiling it with; // clang++ -fPIC -ftls-model=global-dynamic -O2 -S; //; // .LBB0_2: # %while.body; // # =>This Inner Loop Header: Depth=1; // callq _Z1gv@PLT; // movl %eax, %ebp; // leaq _ZL1x@TLSLD(%rip), %rdi; // callq __tls_get_addr@PLT; // addl _ZL1x@DTPOFF(%rax), %ebp; // movl %ebp, _ZL1x@DTPOFF(%rax); // addl $-1, %ebx; // jne .LBB0_2; // jmp .LBB0_3; // .LBB0_4: # %entry.while.end_crit_edge; // leaq _ZL1x@TLSLD(%rip), %rdi; // callq __tls_get_addr@PLT; // movl _ZL1x@DTPOFF(%rax), %ebp; //; // The Redundant TLS Loads will hurt the performance, especially in loops.; // So we try to eliminate/move them if required by customers, let it be:; //; // # %bb.0: # %entry; // ...; // movl %edi, %ebx; // leaq _ZL1x@TLSLD(%rip), %rdi; // callq __tls_get_addr@PLT; // leaq _ZL1x@DTPOFF(%rax), %r14; // testl %ebx, %ebx; // je .LBB0_1; // .LBB0_2: # %while.body; // # =>This Inner Loop Header: Depth=1; // callq _Z1gv@PLT; // addl (%r14), %eax; // movl %eax, (%r14); // addl $-1, %ebx; // jne .LBB0_2; // jmp .LBB0_3; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/TLSVariableHoist.h:39,Redund,Redundant,39,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/TLSVariableHoist.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/TLSVariableHoist.h,4,['Redund'],['Redundant']
Safety,"//==- llvm/CodeGen/BreakFalseDeps.cpp - Break False Dependency Fix -*- C++ -*==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file Break False Dependency pass.; ///; /// Some instructions have false dependencies which cause unnecessary stalls.; /// For example, instructions may write part of a register and implicitly; /// need to read the other parts of the register. This may cause unwanted; /// stalls preventing otherwise unrelated instructions from executing in; /// parallel in an out-of-order CPU.; /// This pass is aimed at identifying and avoiding these dependencies.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/BreakFalseDeps.cpp:809,avoid,avoiding,809,interpreter/llvm-project/llvm/lib/CodeGen/BreakFalseDeps.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/BreakFalseDeps.cpp,1,['avoid'],['avoiding']
Safety,"//==-- llvm/Support/CheckedArithmetic.h - Safe arithmetical operations *- C++ //; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file contains generic functions for operating on integers which; // give the indication on whether the operation has overflown.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/CheckedArithmetic.h:42,Safe,Safe,42,interpreter/llvm-project/llvm/include/llvm/Support/CheckedArithmetic.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/CheckedArithmetic.h,1,['Safe'],['Safe']
Safety,"//==--- MachineLateInstrsCleanup.cpp - Late Instructions Cleanup Pass -----===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This simple pass removes any identical and redundant immediate or address; // loads to the same register. The immediate loads removed can originally be; // the result of rematerialization, while the addresses are redundant frame; // addressing anchor points created during Frame Indices elimination.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineLateInstrsCleanup.cpp:426,redund,redundant,426,interpreter/llvm-project/llvm/lib/CodeGen/MachineLateInstrsCleanup.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineLateInstrsCleanup.cpp,2,['redund'],['redundant']
Safety,"//=== ErrnoChecker.cpp ------------------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This defines an ""errno checker"" that can detect some invalid use of the; // system-defined value 'errno'. This checker works together with the; // ErrnoModeling checker and other checkers like StdCLibraryFunctions.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/ErrnoChecker.cpp:424,detect,detect,424,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/ErrnoChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/ErrnoChecker.cpp,1,['detect'],['detect']
Safety,"//=== InnerPointerChecker.cpp -------------------------------------*- C++ -*--//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines a check that marks a raw pointer to a C++ container's; // inner buffer released when the object is destroyed. This information can; // be used by MallocChecker to detect use-after-free problems.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/InnerPointerChecker.cpp:564,detect,detect,564,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/InnerPointerChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/InnerPointerChecker.cpp,1,['detect'],['detect']
Safety,"//===- AArch64FalkorHWPFFix.cpp - Avoid HW prefetcher pitfalls on Falkor --===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file For Falkor, we want to avoid HW prefetcher instruction tag collisions; /// that may inhibit the HW prefetching. This is done in two steps. Before; /// ISel, we mark strided loads (i.e. those that will likely benefit from; /// prefetching) with metadata. Then, after opcodes have been finalized, we; /// insert MOVs and re-write loads to prevent unintentional tag collisions.; // ===---------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FalkorHWPFFix.cpp:34,Avoid,Avoid,34,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FalkorHWPFFix.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FalkorHWPFFix.cpp,2,"['Avoid', 'avoid']","['Avoid', 'avoid']"
Safety,"//===- AMDGPUArch.cpp - list AMDGPU installed ----------*- C++ -*---------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a tool for detecting name of AMDGPU installed in system.; // This tool is used by AMDGPU OpenMP and HIP driver.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/amdgpu-arch/AMDGPUArch.cpp:414,detect,detecting,414,interpreter/llvm-project/clang/tools/amdgpu-arch/AMDGPUArch.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/amdgpu-arch/AMDGPUArch.cpp,1,['detect'],['detecting']
Safety,"//===- AMDGPUArch.cpp - list AMDGPU installed ----------*- C++ -*---------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a tool for detecting name of AMDGPU installed in system; // using HIP runtime. This tool is used by AMDGPU OpenMP and HIP driver.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/amdgpu-arch/AMDGPUArchByHIP.cpp:414,detect,detecting,414,interpreter/llvm-project/clang/tools/amdgpu-arch/AMDGPUArchByHIP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/amdgpu-arch/AMDGPUArchByHIP.cpp,1,['detect'],['detecting']
Safety,"//===- AMDGPUArchLinux.cpp - list AMDGPU installed ------*- C++ -*---------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a tool for detecting name of AMDGPU installed in system; // using HSA on Linux. This tool is used by AMDGPU OpenMP and HIP driver.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/amdgpu-arch/AMDGPUArchByHSA.cpp:415,detect,detecting,415,interpreter/llvm-project/clang/tools/amdgpu-arch/AMDGPUArchByHSA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/amdgpu-arch/AMDGPUArchByHSA.cpp,1,['detect'],['detecting']
Safety,"//===- AMDGPUInsertDelayAlu.cpp - Insert s_delay_alu instructions ---------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file; /// Insert s_delay_alu instructions to avoid stalls on GFX11+.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUInsertDelayAlu.cpp:430,avoid,avoid,430,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUInsertDelayAlu.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUInsertDelayAlu.cpp,1,['avoid'],['avoid']
Safety,"//===- AMDGPURewriteOutArgumentsPass.cpp - Create struct returns ----------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file This pass attempts to replace out argument usage with a return of a; /// struct.; ///; /// We can support returning a lot of values directly in registers, but; /// idiomatic C code frequently uses a pointer argument to return a second value; /// rather than returning a struct by value. GPU stack access is also quite; /// painful, so we want to avoid that if possible. Passing a stack object; /// pointer to a function also requires an additional address expansion code; /// sequence to convert the pointer to be relative to the kernel's scratch wave; /// offset register since the callee doesn't know what stack frame the incoming; /// pointer is relative to.; ///; /// The goal is to try rewriting code that looks like this:; ///; /// int foo(int a, int b, int* out) {; /// *out = bar();; /// return a + b;; /// }; ///; /// into something like this:; ///; /// std::pair<int, int> foo(int a, int b) {; /// return std::pair(a + b, bar());; /// }; ///; /// Typically the incoming pointer is a simple alloca for a temporary variable; /// to use the API, which if replaced with a struct return will be easily SROA'd; /// out when the stub function we create is inlined; ///; /// This pass introduces the struct return, but leaves the unused pointer; /// arguments and introduces a new stub function calling the struct returning; /// body. DeadArgumentElimination should be run after this to clean these up.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPURewriteOutArguments.cpp:736,avoid,avoid,736,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPURewriteOutArguments.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPURewriteOutArguments.cpp,1,['avoid'],['avoid']
Safety,"//===- AddDiscriminators.cpp - Insert DWARF path discriminators -----------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file adds DWARF discriminators to the IR. Path discriminators are; // used to decide what CFG path was taken inside sub-graphs whose instructions; // share the same line and column number information.; //; // The main user of this is the sample profiler. Instruction samples are; // mapped to line number information. Since a single line may be spread; // out over several basic blocks, discriminators add more precise location; // for the samples.; //; // For example,; //; // 1 #define ASSERT(P); // 2 if (!(P)); // 3 abort(); // ...; // 100 while (true) {; // 101 ASSERT (sum < 0);; // 102 ...; // 130 }; //; // when converted to IR, this snippet looks something like:; //; // while.body: ; preds = %entry, %if.end; // %0 = load i32* %sum, align 4, !dbg !15; // %cmp = icmp slt i32 %0, 0, !dbg !15; // br i1 %cmp, label %if.end, label %if.then, !dbg !15; //; // if.then: ; preds = %while.body; // call void @abort(), !dbg !15; // br label %if.end, !dbg !15; //; // Notice that all the instructions in blocks 'while.body' and 'if.then'; // have exactly the same debug information. When this program is sampled; // at runtime, the profiler will assume that all these instructions are; // equally frequent. This, in turn, will consider the edge while.body->if.then; // to be frequently taken (which is incorrect).; //; // By adding a discriminator value to the instructions in block 'if.then',; // we can distinguish instructions at line 101 with discriminator 0 from; // the instructions at line 101 with discriminator 1.; //; // For more details about DWARF discriminators, please visit; // http://wiki.dwarfstd",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/AddDiscriminators.cpp:908,abort,abort,908,interpreter/llvm-project/llvm/lib/Transforms/Utils/AddDiscriminators.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/AddDiscriminators.cpp,1,['abort'],['abort']
Safety,"//===- AddressSanitizer.cpp - memory error detector -----------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file is a part of AddressSanitizer, an address basic correctness; // checker.; // Details of the algorithm:; // https://github.com/google/sanitizers/wiki/AddressSanitizerAlgorithm; //; // FIXME: This sanitizer does not yet handle scalable vectors; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/AddressSanitizer.cpp:43,detect,detector,43,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/AddressSanitizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/AddressSanitizer.cpp,1,['detect'],['detector']
Safety,"//===- Any.h - Generic type erased holder of any type -----------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This file provides Any, a non-template class modeled in the spirit of; /// std::any. The idea is to provide a type-safe replacement for C's void*.; /// It can hold a value of any copy-constructible copy-assignable type; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Any.h:511,safe,safe,511,interpreter/llvm-project/llvm/include/llvm/ADT/Any.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Any.h,1,['safe'],['safe']
Safety,"//===- BarrierNoopPass.cpp - A barrier pass for the pass manager ----------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // NOTE: DO NOT USE THIS IF AVOIDABLE; //; // This pass is a nonce pass intended to allow manipulation of the implicitly; // nesting pass manager. For example, it can be used to cause a CGSCC pass; // manager to be closed prior to running a new collection of function passes.; //; // FIXME: This is a huge HACK. This should be removed when the pass manager's; // nesting is made explicit instead of implicit.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/BarrierNoopPass.cpp:408,AVOID,AVOIDABLE,408,interpreter/llvm-project/llvm/lib/Transforms/IPO/BarrierNoopPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/BarrierNoopPass.cpp,1,['AVOID'],['AVOIDABLE']
Safety,"//===- CXXPattern ---------------------------------------------------------===//; /// Represents raw C++ code which may need some expansions.; ///; /// e.g. [{ return isFooBux(${src}.getReg()); }]; ///; /// For the expanded code, \see CXXPredicateCode. CXXPredicateCode objects are; /// created through `expandCode`.; ///; /// \see CodeExpander and \see CodeExpansions for more information on code; /// expansions.; ///; /// This object has two purposes:; /// - Represent C++ code as a pattern entry.; /// - Be a factory for expanded C++ code.; /// - It's immutable and only holds the raw code so we can expand the same; /// CXX pattern multiple times if we need to.; ///; /// Note that the code is always trimmed in the constructor, so leading and; /// trailing whitespaces are removed. This removes bloat in the output, avoids; /// formatting issues, but also allows us to check things like; /// `.startswith(""return"")` trivially without worrying about spaces.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISel/Patterns.h:822,avoid,avoids,822,interpreter/llvm-project/llvm/utils/TableGen/GlobalISel/Patterns.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISel/Patterns.h,1,['avoid'],['avoids']
Safety,"//===- CodeGenTarget.cpp - CodeGen Target Class Wrapper -------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This class wraps target description classes used by the various code; // generation TableGen backends. This makes it easier to access the data and; // provides a single place that needs to check it for validity. All of these; // classes abort on error conditions.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenTarget.cpp:620,abort,abort,620,interpreter/llvm-project/llvm/utils/TableGen/CodeGenTarget.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenTarget.cpp,1,['abort'],['abort']
Safety,"//===- CodeGenTarget.h - Target Class Wrapper -------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines wrappers for the Target class and related global; // functionality. This makes it easier to access the data and provides a single; // place that needs to check it for validity. All of these classes abort; // on error conditions.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenTarget.h:599,abort,abort,599,interpreter/llvm-project/llvm/utils/TableGen/CodeGenTarget.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenTarget.h,1,['abort'],['abort']
Safety,"//===- ConstantFold.cpp - LLVM constant folder ----------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements folding of constants for LLVM. This implements the; // (internal) ConstantFold.h interface, which is used by the; // ConstantExpr::get* methods to automatically fold constants when possible.; //; // The current constant folding implementation is implemented in two pieces: the; // pieces that don't need DataLayout, and the pieces that do. This is to avoid; // a dependence in IR on Target.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/ConstantFold.cpp:755,avoid,avoid,755,interpreter/llvm-project/llvm/lib/IR/ConstantFold.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/ConstantFold.cpp,1,['avoid'],['avoid']
Safety,"//===- CostModel.cpp ------ Cost Model Analysis ---------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the cost model analysis. It provides a very basic cost; // estimation for LLVM-IR. This analysis uses the services of the codegen; // to approximate the cost of any IR instruction when lowered to machine; // instructions. The cost results are unit-less and the cost number represents; // the throughput of the machine assuming that all loads hit the cache, all; // branches are predicted, etc. The cost numbers can be added in order to; // compare two or more transformation alternatives.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/CostModel.cpp:779,predict,predicted,779,interpreter/llvm-project/llvm/lib/Analysis/CostModel.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/CostModel.cpp,1,['predict'],['predicted']
Safety,"//===- DataFlowSanitizer.cpp - dynamic data flow analysis -----------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file; /// This file is a part of DataFlowSanitizer, a generalised dynamic data flow; /// analysis.; ///; /// Unlike other Sanitizer tools, this tool is not designed to detect a specific; /// class of bugs on its own. Instead, it provides a generic dynamic data flow; /// analysis framework to be used by clients to help detect application-specific; /// issues within their own code.; ///; /// The analysis is based on automatic propagation of data flow labels (also; /// known as taint labels) through a program as it performs computation.; ///; /// Argument and return value labels are passed through TLS variables; /// __dfsan_arg_tls and __dfsan_retval_tls.; ///; /// Each byte of application memory is backed by a shadow memory byte. The; /// shadow byte can represent up to 8 labels. On Linux/x86_64, memory is then; /// laid out as follows:; ///; /// +--------------------+ 0x800000000000 (top of memory); /// | application 3 |; /// +--------------------+ 0x700000000000; /// | invalid |; /// +--------------------+ 0x610000000000; /// | origin 1 |; /// +--------------------+ 0x600000000000; /// | application 2 |; /// +--------------------+ 0x510000000000; /// | shadow 1 |; /// +--------------------+ 0x500000000000; /// | invalid |; /// +--------------------+ 0x400000000000; /// | origin 3 |; /// +--------------------+ 0x300000000000; /// | shadow 3 |; /// +--------------------+ 0x200000000000; /// | origin 2 |; /// +--------------------+ 0x110000000000; /// | invalid |; /// +--------------------+ 0x100000000000; /// | shadow 2 |; /// +--------------------+ 0x010000000000; /// | application 1 |; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/DataFlowSanitizer.cpp:553,detect,detect,553,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/DataFlowSanitizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/DataFlowSanitizer.cpp,2,['detect'],['detect']
Safety,"//===- DeadStoreElimination.h - Fast Dead Store Elimination -----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a trivial dead store elimination that only considers; // basic-block local redundant stores.; //; // FIXME: This should eventually be extended to be a post-dominator tree; // traversal. Doing so would be pretty trivial.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/DeadStoreElimination.h:479,redund,redundant,479,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/DeadStoreElimination.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/DeadStoreElimination.h,1,['redund'],['redundant']
Safety,"//===- DetectDeadLanes.cpp - SubRegister Lane Usage Analysis --*- C++ -*---===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file; /// Analysis that tracks defined/used subregister lanes across COPY instructions; /// and instructions that get lowered to a COPY (PHI, REG_SEQUENCE,; /// INSERT_SUBREG, EXTRACT_SUBREG).; /// The information is used to detect dead definitions and the usage of; /// (completely) undefined values and mark the operands as such.; /// This pass is necessary because the dead/undef status is not obvious anymore; /// when subregisters are involved.; ///; /// Example:; /// %0 = some definition; /// %1 = IMPLICIT_DEF; /// %2 = REG_SEQUENCE %0, sub0, %1, sub1; /// %3 = EXTRACT_SUBREG %2, sub1; /// = use %3; /// The %0 definition is dead and %3 contains an undefined value.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/DetectDeadLanes.cpp:7,Detect,DetectDeadLanes,7,interpreter/llvm-project/llvm/lib/CodeGen/DetectDeadLanes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/DetectDeadLanes.cpp,2,"['Detect', 'detect']","['DetectDeadLanes', 'detect']"
Safety,"//===- DetectDeadLanes.h - SubRegister Lane Usage Analysis --*- C++ -*-----===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file; /// Analysis that tracks defined/used subregister lanes across COPY instructions; /// and instructions that get lowered to a COPY (PHI, REG_SEQUENCE,; /// INSERT_SUBREG, EXTRACT_SUBREG).; /// The information is used to detect dead definitions and the usage of; /// (completely) undefined values and mark the operands as such.; /// This pass is necessary because the dead/undef status is not obvious anymore; /// when subregisters are involved.; ///; /// Example:; /// %0 = some definition; /// %1 = IMPLICIT_DEF; /// %2 = REG_SEQUENCE %0, sub0, %1, sub1; /// %3 = EXTRACT_SUBREG %2, sub1; /// = use %3; /// The %0 definition is dead and %3 contains an undefined value.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/DetectDeadLanes.h:7,Detect,DetectDeadLanes,7,interpreter/llvm-project/llvm/include/llvm/CodeGen/DetectDeadLanes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/DetectDeadLanes.h,2,"['Detect', 'detect']","['DetectDeadLanes', 'detect']"
Safety,"//===- EarlyCSE.cpp - Simple and fast CSE pass ----------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass performs a simple dominator tree walk that eliminates trivially; // redundant instructions.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/EarlyCSE.cpp:461,redund,redundant,461,interpreter/llvm-project/llvm/lib/Transforms/Scalar/EarlyCSE.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/EarlyCSE.cpp,1,['redund'],['redundant']
Safety,"//===- Format.h - Efficient printf-style formatting for streams -*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the format() function, which can be used with other; // LLVM subsystems to provide printf-style formatting. This gives all the power; // and risk of printf. This can be used like this (with raw_ostreams as an; // example):; //; // OS << ""mynumber: "" << format(""%4.5f"", 1234.412) << '\n';; //; // Or if you prefer:; //; // OS << format(""mynumber: %4.5f\n"", 1234.412);; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Format.h:545,risk,risk,545,interpreter/llvm-project/llvm/include/llvm/Support/Format.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Format.h,1,['risk'],['risk']
Safety,"//===- FormatVariadic.h - Efficient type-safe string formatting --*- C++-*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the formatv() function which can be used with other LLVM; // subsystems to provide printf-like formatting, but with improved safety and; // flexibility. The result of `formatv` is an object which can be streamed to; // a raw_ostream or converted to a std::string or llvm::SmallString.; //; // // Convert to std::string.; // std::string S = formatv(""{0} {1}"", 1234.412, ""test"").str();; //; // // Convert to llvm::SmallString; // SmallString<8> S = formatv(""{0} {1}"", 1234.412, ""test"").sstr<8>();; //; // // Stream to an existing raw_ostream.; // OS << formatv(""{0} {1}"", 1234.412, ""test"");; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FormatVariadic.h:41,safe,safe,41,interpreter/llvm-project/llvm/include/llvm/Support/FormatVariadic.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FormatVariadic.h,2,['safe'],"['safe', 'safety']"
Safety,"//===- GCMetadata.h - Garbage collector metadata ----------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file declares the GCFunctionInfo and GCModuleInfo classes, which are; // used as a communication channel from the target code generator to the target; // garbage collectors. This interface allows code generators and garbage; // collectors to be developed independently.; //; // The GCFunctionInfo class logs the data necessary to build a type accurate; // stack map. The code generator outputs:; //; // - Safe points as specified by the GCStrategy's NeededSafePoints.; // - Stack offsets for GC roots, as specified by calls to llvm.gcroot; //; // As a refinement, liveness analysis calculates the set of live roots at each; // safe point. Liveness analysis is not presently performed by the code; // generator, so all roots are assumed live.; //; // GCModuleInfo simply collects GCFunctionInfo instances for each Function as; // they are compiled. This accretion is necessary for collectors which must emit; // a stack map for the compilation unit as a whole. Therefore, GCFunctionInfo; // outlives the MachineFunction from which it is derived and must not refer to; // any code generator data structures.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GCMetadata.h:793,Safe,Safe,793,interpreter/llvm-project/llvm/include/llvm/CodeGen/GCMetadata.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GCMetadata.h,2,"['Safe', 'safe']","['Safe', 'safe']"
Safety,"//===- GVN.cpp - Eliminate redundant values and loads ---------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass performs global value numbering to eliminate fully redundant; // instructions. It also performs simple dead load elimination.; //; // Note that this pass does the value numbering itself; it does not use the; // ValueNumbering analysis passes.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/GVN.cpp:27,redund,redundant,27,interpreter/llvm-project/llvm/lib/Transforms/Scalar/GVN.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/GVN.cpp,2,['redund'],['redundant']
Safety,"//===- GVN.h - Eliminate redundant values and loads -------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; /// This file provides the interface for LLVM's Global Value Numbering pass; /// which eliminates fully redundant instructions. It also does somewhat Ad-Hoc; /// PRE and dead load elimination.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVN.h:25,redund,redundant,25,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVN.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVN.h,2,['redund'],['redundant']
Safety,"//===- GVNHoist.cpp - Hoist scalar and load expressions -------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass hoists expressions from branches to a common dominator. It uses; // GVN (global value numbering) to discover expressions computing the same; // values. The primary goals of code-hoisting are:; // 1. To reduce the code size.; // 2. In some cases reduce critical path (by exposing more ILP).; //; // The algorithm factors out the reachability of values such that multiple; // queries to find reachability of values are fast. This is based on finding the; // ANTIC points in the CFG which do not change during hoisting. The ANTIC points; // are basically the dominance-frontiers in the inverse graph. So we introduce a; // data structure (CHI nodes) to keep track of values flowing out of a basic; // block. We only do this for values with multiple occurrences in the function; // as they are the potential hoistable candidates. This approach allows us to; // hoist instructions to a basic block with more than two successors, as well as; // deal with infinite loops in a trivial way.; //; // Limitations: This pass does not hoist fully redundant expressions because; // they are already handled by GVN-PRE. It is advisable to run gvn-hoist before; // and after gvn-pre because gvn-pre creates opportunities for more instructions; // to be hoisted.; //; // Hoisting may affect the performance in some cases. To mitigate that, hoisting; // is disabled in the following cases.; // 1. Scalars across calls.; // 2. geps when corresponding load/store cannot be hoisted.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/GVNHoist.cpp:1427,redund,redundant,1427,interpreter/llvm-project/llvm/lib/Transforms/Scalar/GVNHoist.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/GVNHoist.cpp,1,['redund'],['redundant']
Safety,"//===- GlobalISelCombinerMatchTableEmitter.cpp - --------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file Generate a combiner implementation for GlobalISel from a declarative; /// syntax using GlobalISelMatchTable.; ///; /// Usually, TableGen backends use ""assert is an error"" as a means to report; /// invalid input. They try to diagnose common case but don't try very hard and; /// crashes can be common. This backend aims to behave closer to how a language; /// compiler frontend would behave: we try extra hard to diagnose invalid inputs; /// early, and any crash should be considered a bug (= a feature or diagnostic; /// is missing).; ///; /// While this can make the backend a bit more complex than it needs to be, it; /// pays off because MIR patterns can get complicated. Giving useful error; /// messages to combine writers can help boost their productivity.; ///; /// As with anything, a good balance has to be found. We also don't want to; /// write hundreds of lines of code to detect edge cases. In practice, crashing; /// very occasionally, or giving poor errors in some rare instances, is fine.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp:1275,detect,detect,1275,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp,1,['detect'],['detect']
Safety,"//===- HWAddressSanitizer.cpp - memory access error detector --------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file; /// This file is a part of HWAddressSanitizer, an address basic correctness; /// checker based on tagged addressing.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/HWAddressSanitizer.cpp:52,detect,detector,52,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/HWAddressSanitizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/HWAddressSanitizer.cpp,1,['detect'],['detector']
Safety,"//===- HexagonEarlyIfConv.cpp ---------------------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This implements a Hexagon-specific if-conversion pass that runs on the; // SSA form.; // In SSA it is not straightforward to represent instructions that condi-; // tionally define registers, since a conditionally-defined register may; // only be used under the same condition on which the definition was based.; // To avoid complications of this nature, this patch will only generate; // predicated stores, and speculate other instructions from the ""if-conver-; // ted"" block.; // The code will recognize CFG patterns where a block with a conditional; // branch ""splits"" into a ""true block"" and a ""false block"". Either of these; // could be omitted (in case of a triangle, for example).; // If after conversion of the side block(s) the CFG allows it, the resul-; // ting blocks may be merged. If the ""join"" block contained PHI nodes, they; // will be replaced with MUX (or MUX-like) instructions to maintain the; // semantics of the PHI.; //; // Example:; //; // %40 = L2_loadrub_io killed %39, 1; // %41 = S2_tstbit_i killed %40, 0; // J2_jumpt killed %41, <%bb.5>, implicit dead %pc; // J2_jump <%bb.4>, implicit dead %pc; // Successors according to CFG: %bb.4(62) %bb.5(62); //; // %bb.4: derived from LLVM BB %if.then; // Predecessors according to CFG: %bb.3; // %11 = A2_addp %6, %10; // S2_storerd_io %32, 16, %11; // Successors according to CFG: %bb.5; //; // %bb.5: derived from LLVM BB %if.end; // Predecessors according to CFG: %bb.3 %bb.4; // %12 = PHI %6, <%bb.3>, %11, <%bb.4>; // %13 = A2_addp %7, %12; // %42 = C2_cmpeqi %9, 10; // J2_jumpf killed %42, <%bb.3>, implicit dead %pc; // J2_jump <%bb.6>, im",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonEarlyIfConv.cpp:701,avoid,avoid,701,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonEarlyIfConv.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonEarlyIfConv.cpp,1,['avoid'],['avoid']
Safety,"//===- HexagonHardwareLoops.cpp - Identify and generate hardware loops ----===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass identifies loops where we can generate the Hexagon hardware; // loop instruction. The hardware loop can perform loop branches with a; // zero-cycle overhead.; //; // The pattern that defines the induction variable can changed depending on; // prior optimizations. For example, the IndVarSimplify phase run by 'opt'; // normalizes induction variables, and the Loop Strength Reduction pass; // run by 'llc' may also make changes to the induction variable.; // The pattern detected by this phase is due to running Strength Reduction.; //; // Criteria for hardware loops:; // - Countable loops (w/ ind. var for a trip count); // - Assumes loops are normalized by IndVarSimplify; // - Try inner-most loops first; // - No function calls in loops.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonHardwareLoops.cpp:863,detect,detected,863,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonHardwareLoops.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonHardwareLoops.cpp,1,['detect'],['detected']
Safety,"//===- HexagonVectorLoopCarriedReuse.cpp ----------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass removes the computation of provably redundant expressions that have; // been computed earlier in a previous iteration. It relies on the use of PHIs; // to identify loop carried dependences. This is scalar replacement for vector; // types.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonVectorLoopCarriedReuse.cpp:429,redund,redundant,429,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonVectorLoopCarriedReuse.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonVectorLoopCarriedReuse.cpp,1,['redund'],['redundant']
Safety,"//===- HexagonVectorLoopCarriedReuse.h ------------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass removes the computation of provably redundant expressions that have; // been computed earlier in a previous iteration. It relies on the use of PHIs; // to identify loop carried dependences. This is scalar replacement for vector; // types.; //; //-----------------------------------------------------------------------------; // Motivation: Consider the case where we have the following loop structure.; //; // Loop:; // t0 = a[i];; // t1 = f(t0);; // t2 = g(t1);; // ...; // t3 = a[i+1];; // t4 = f(t3);; // t5 = g(t4);; // t6 = op(t2, t5); // cond_branch <Loop>; //; // This can be converted to; // t00 = a[0];; // t10 = f(t00);; // t20 = g(t10);; // Loop:; // t2 = t20;; // t3 = a[i+1];; // t4 = f(t3);; // t5 = g(t4);; // t6 = op(t2, t5); // t20 = t5; // cond_branch <Loop>; //; // SROA does a good job of reusing a[i+1] as a[i] in the next iteration.; // Such a loop comes to this pass in the following form.; //; // LoopPreheader:; // X0 = a[0];; // Loop:; // X2 = PHI<(X0, LoopPreheader), (X1, Loop)>; // t1 = f(X2) <-- I1; // t2 = g(t1); // ...; // X1 = a[i+1]; // t4 = f(X1) <-- I2; // t5 = g(t4); // t6 = op(t2, t5); // cond_branch <Loop>; //; // In this pass, we look for PHIs such as X2 whose incoming values come only; // from the Loop Preheader and over the backedge and additionaly, both these; // values are the results of the same operation in terms of opcode. We call such; // a PHI node a dependence chain or DepChain. In this case, the dependence of X2; // over X1 is carried over only one iteration and so the DepChain is only one; // PHI node long.; //; // Then, we traverse the uses of ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonVectorLoopCarriedReuse.h:429,redund,redundant,429,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonVectorLoopCarriedReuse.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonVectorLoopCarriedReuse.h,1,['redund'],['redundant']
Safety,"//===- HotColdSplitting.cpp -- Outline Cold Regions -------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// The goal of hot/cold splitting is to improve the memory locality of code.; /// The splitting pass does this by identifying cold blocks and moving them into; /// separate functions.; ///; /// When the splitting pass finds a cold block (referred to as ""the sink""), it; /// grows a maximal cold region around that block. The maximal region contains; /// all blocks (post-)dominated by the sink [*]. In theory, these blocks are as; /// cold as the sink. Once a region is found, it's split out of the original; /// function provided it's profitable to do so.; ///; /// [*] In practice, there is some added complexity because some blocks are not; /// safe to extract.; ///; /// TODO: Use the PM to get domtrees, and preserve BFI/BPI.; /// TODO: Reorder outlined functions.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/HotColdSplitting.cpp:1041,safe,safe,1041,interpreter/llvm-project/llvm/lib/Transforms/IPO/HotColdSplitting.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/HotColdSplitting.cpp,1,['safe'],['safe']
Safety,"//===- InductiveRangeCheckElimination.cpp - -------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // The InductiveRangeCheckElimination pass splits a loop's iteration space into; // three disjoint ranges. It does that in a way such that the loop running in; // the middle loop provably does not need range checks. As an example, it will; // convert; //; // len = < known positive >; // for (i = 0; i < n; i++) {; // if (0 <= i && i < len) {; // do_something();; // } else {; // throw_out_of_bounds();; // }; // }; //; // to; //; // len = < known positive >; // limit = smin(n, len); // // no first segment; // for (i = 0; i < limit; i++) {; // if (0 <= i && i < len) { // this check is fully redundant; // do_something();; // } else {; // throw_out_of_bounds();; // }; // }; // for (i = limit; i < n; i++) {; // if (0 <= i && i < len) {; // do_something();; // } else {; // throw_out_of_bounds();; // }; // }; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/InductiveRangeCheckElimination.cpp:974,redund,redundant,974,interpreter/llvm-project/llvm/lib/Transforms/Scalar/InductiveRangeCheckElimination.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/InductiveRangeCheckElimination.cpp,1,['redund'],['redundant']
Safety,"//===- InterleavedLoadCombine.cpp - Combine Interleaved Loads ---*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // \file; //; // This file defines the interleaved-load-combine pass. The pass searches for; // ShuffleVectorInstruction that execute interleaving loads. If a matching; // pattern is found, it adds a combined load and further instructions in a; // pattern that is detectable by InterleavedAccesPass. The old instructions are; // left dead to be removed later. The pass is specifically designed to be; // executed just before InterleavedAccesPass to find any left-over instances; // that are not detected within former passes.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/InterleavedLoadCombinePass.cpp:644,detect,detectable,644,interpreter/llvm-project/llvm/lib/CodeGen/InterleavedLoadCombinePass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/InterleavedLoadCombinePass.cpp,2,['detect'],"['detectable', 'detected']"
Safety,"//===- IntervalIterator.h - Interval Iterator Declaration -------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines an iterator that enumerates the intervals in a control flow; // graph of some sort. This iterator is parametric, allowing iterator over the; // following types of graphs:; //; // 1. A Function* object, composed of BasicBlock nodes.; // 2. An IntervalPartition& object, composed of Interval nodes.; //; // This iterator is defined to walk the control flow graph, returning intervals; // in depth first order. These intervals are completely filled in except for; // the predecessor fields (the successor information is filled in however).; //; // By default, the intervals created by this iterator are deleted after they; // are no longer any use to the iterator. This behavior can be changed by; // passing a false value into the intervals_begin() function. This causes the; // IOwnMem member to be set, and the intervals to not be deleted.; //; // It is only safe to use this if all of the intervals are deleted by the caller; // and all of the intervals are processed. However, the user of the iterator is; // not allowed to modify or delete the intervals until after the iterator has; // been used completely. The IntervalPartition class uses this functionality.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/IntervalIterator.h:1260,safe,safe,1260,interpreter/llvm-project/llvm/include/llvm/Analysis/IntervalIterator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/IntervalIterator.h,1,['safe'],['safe']
Safety,"//===- LCSSA.h - Loop-closed SSA transform Pass -----------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass transforms loops by placing phi nodes at the end of the loops for; // all values that are live across the loop boundary. For example, it turns; // the left into the right code:; //; // for (...) for (...); // if (c) if (c); // X1 = ... X1 = ...; // else else; // X2 = ... X2 = ...; // X3 = phi(X1, X2) X3 = phi(X1, X2); // ... = X3 + 4 X4 = phi(X3); // ... = X4 + 4; //; // This is still valid LLVM; the extra phi nodes are purely redundant, and will; // be trivially eliminated by InstCombine. The major benefit of this; // transformation is that it makes many other loop optimizations, such as; // LoopUnswitching, simpler.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LCSSA.h:824,redund,redundant,824,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LCSSA.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LCSSA.h,1,['redund'],['redundant']
Safety,"//===- LICM.h - Loop Invariant Code Motion Pass -------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass performs loop invariant code motion, attempting to remove as much; // code from the body of a loop as possible. It does this by either hoisting; // code into the preheader block, or by sinking code to the exit blocks if it is; // safe. This pass also promotes must-aliased memory locations in the loop to; // live in registers, thus hoisting and sinking ""invariant"" loads and stores.; //; // This pass uses alias analysis for two purposes:; //; // 1. Moving loop invariant loads and calls out of loops. If we can determine; // that a load or call inside of a loop never aliases anything stored to,; // we can hoist it or sink it like any other instruction.; // 2. Scalar Promotion of Memory - If there is a store instruction inside of; // the loop, we try to move the store to happen AFTER the loop instead of; // inside of the loop. This can only happen if a few conditions are true:; // A. The pointer stored through is loop invariant; // B. There are no stores or loads in the loop which _may_ alias the; // pointer. There are no calls in the loop which mod/ref the pointer.; // If these conditions are true, we can promote the loads and stores in the; // loop of the pointer to use a temporary alloca'd variable. We then use; // the SSAUpdater to construct the appropriate SSA form for the value.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LICM.h:613,safe,safe,613,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LICM.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LICM.h,1,['safe'],['safe']
Safety,"//===- LoopIdiomRecognize.cpp - Loop idiom recognition --------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass implements an idiom recognizer that transforms simple loops into a; // non-loop form. In cases that this kicks in, it can be a significant; // performance win.; //; // If compiling for code size we avoid idiom recognition if the resulting; // code could be larger than the code for the original loop. One way this could; // happen is if the loop is not removable after idiom recognition due to the; // presence of non-idiom instructions. The initial implementation of the; // heuristics applies to idioms in multi-block loops.; //; //===----------------------------------------------------------------------===//; //; // TODO List:; //; // Future loop memory idioms to recognize:; // memcmp, strlen, etc.; // Future floating point idioms to recognize in -ffast-math mode:; // fpowi; //; // This could recognize common matrix multiplies and dot product idioms and; // replace them with calls to BLAS (if linked in??).; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopIdiomRecognize.cpp:591,avoid,avoid,591,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopIdiomRecognize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopIdiomRecognize.cpp,1,['avoid'],['avoid']
Safety,"//===- LoopUnrollAnalyzer.cpp - Unrolling Effect Estimation -----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements UnrolledInstAnalyzer class. It's used for predicting; // potential effects that loop unrolling might have, such as enabling constant; // propagation and other optimizations.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopUnrollAnalyzer.cpp:446,predict,predicting,446,interpreter/llvm-project/llvm/lib/Analysis/LoopUnrollAnalyzer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopUnrollAnalyzer.cpp,1,['predict'],['predicting']
Safety,"//===- MachineCopyPropagation.cpp - Machine Copy Propagation Pass ---------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This is an extremely simple MachineInstr-level copy propagation pass.; //; // This pass forwards the source of COPYs to the users of their destinations; // when doing so is legal. For example:; //; // %reg1 = COPY %reg0; // ...; // ... = OP %reg1; //; // If; // - %reg0 has not been clobbered by the time of the use of %reg1; // - the register class constraints are satisfied; // - the COPY def is the only value that reaches OP; // then this pass replaces the above with:; //; // %reg1 = COPY %reg0; // ...; // ... = OP %reg0; //; // This pass also removes some redundant COPYs. For example:; //; // %R1 = COPY %R0; // ... // No clobber of %R1; // %R0 = COPY %R1 <<< Removed; //; // or; //; // %R1 = COPY %R0; // ... // No clobber of %R0; // %R1 = COPY %R0 <<< Removed; //; // or; //; // $R0 = OP ...; // ... // No read/clobber of $R0 and $R1; // $R1 = COPY $R0 // $R0 is killed; // Replace $R0 with $R1 and remove the COPY; // $R1 = OP ...; // ...; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineCopyPropagation.cpp:946,redund,redundant,946,interpreter/llvm-project/llvm/lib/CodeGen/MachineCopyPropagation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineCopyPropagation.cpp,1,['redund'],['redundant']
Safety,"//===- MemorySanitizer.cpp - detector of uninitialized reads --------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file; /// This file is a part of MemorySanitizer, a detector of uninitialized; /// reads.; ///; /// The algorithm of the tool is similar to Memcheck; /// (http://goo.gl/QKbem). We associate a few shadow bits with every; /// byte of the application memory, poison the shadow of the malloc-ed; /// or alloca-ed memory, load the shadow bits on every memory read,; /// propagate the shadow bits through some of the arithmetic; /// instruction (including MOV), store the shadow bits on every memory; /// write, report a bug on some other instructions (e.g. JMP) if the; /// associated shadow is poisoned.; ///; /// But there are differences too. The first and the major one:; /// compiler instrumentation instead of binary instrumentation. This; /// gives us much better register allocation, possible compiler; /// optimizations and a fast start-up. But this brings the major issue; /// as well: msan needs to see all program events, including system; /// calls and reads/writes in system libraries, so we either need to; /// compile *everything* with msan or use a binary translation; /// component (e.g. DynamoRIO) to instrument pre-built libraries.; /// Another difference from Memcheck is that we use 8 shadow bits per; /// byte of application memory and use a direct shadow mapping. This; /// greatly simplifies the instrumentation code and avoids races on; /// shadow updates (Memcheck is single-threaded so races are not a; /// concern there. Memcheck uses 2 shadow bits per byte with a slow; /// path storage that uses 8 bits per byte).; ///; /// The default value of shadow is 0, which means ""clean"" (not poisone",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/MemorySanitizer.cpp:29,detect,detector,29,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/MemorySanitizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/MemorySanitizer.cpp,2,['detect'],['detector']
Safety,"//===- MergedLoadStoreMotion.h - merge and hoist/sink load/stores ---------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; //! \file; //! This pass performs merges of loads and stores on both sides of a; // diamond (hammock). It hoists the loads and sinks the stores.; //; // The algorithm iteratively hoists two loads to the same address out of a; // diamond (hammock) and merges them into a single load in the header. Similar; // it sinks and merges two stores to the tail block (footer). The algorithm; // iterates over the instructions of one side of the diamond and attempts to; // find a matching load/store on the other side. It hoists / sinks when it; // thinks it safe to do so. This optimization helps with eg. hiding load; // latencies, triggering if-conversion, and reducing static code size.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/MergedLoadStoreMotion.h:930,safe,safe,930,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/MergedLoadStoreMotion.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/MergedLoadStoreMotion.h,1,['safe'],['safe']
Safety,"//===- NVPTXArch.cpp - list installed NVPTX devies ------*- C++ -*---------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a tool for detecting name of CUDA gpus installed in the; // system.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/nvptx-arch/NVPTXArch.cpp:415,detect,detecting,415,interpreter/llvm-project/clang/tools/nvptx-arch/NVPTXArch.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/nvptx-arch/NVPTXArch.cpp,1,['detect'],['detecting']
Safety,"//===- NVVMReflect.cpp - NVVM Emulate conditional compilation -------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass replaces occurrences of __nvvm_reflect(""foo"") and llvm.nvvm.reflect; // with an integer.; //; // We choose the value we use by looking at metadata in the module itself. Note; // that we intentionally only have one way to choose these values, because other; // parts of LLVM (particularly, InstCombineCall) rely on being able to predict; // the values chosen by this pass.; //; // If we see an unknown string, we replace its call with 0.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVVMReflect.cpp:721,predict,predict,721,interpreter/llvm-project/llvm/lib/Target/NVPTX/NVVMReflect.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVVMReflect.cpp,1,['predict'],['predict']
Safety,"//===- NaryReassociate.cpp - Reassociate n-ary expressions ----------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass reassociates n-ary add expressions and eliminates the redundancy; // exposed by the reassociation.; //; // A motivating example:; //; // void foo(int a, int b) {; // bar(a + b);; // bar((a + 2) + b);; // }; //; // An ideal compiler should reassociate (a + 2) + b to (a + b) + 2 and simplify; // the above code to; //; // int t = a + b;; // bar(t);; // bar(t + 2);; //; // However, the Reassociate pass is unable to do that because it processes each; // instruction individually and believes (a + 2) + b is the best form according; // to its rank system.; //; // To address this limitation, NaryReassociate reassociates an expression in a; // form that reuses existing instructions. As a result, NaryReassociate can; // reassociate (a + 2) + b in the example to (a + b) + 2 because it detects that; // (a + b) is computed before.; //; // NaryReassociate works as follows. For every instruction in the form of (a +; // b) + c, it checks whether a + c or b + c is already computed by a dominating; // instruction. If so, it then reassociates (a + b) + c into (a + c) + b or (b +; // c) + a and removes the redundancy accordingly. To efficiently look up whether; // an expression is computed before, we store each instruction seen and its SCEV; // into an SCEV-to-instruction map.; //; // Although the algorithm pattern-matches only ternary additions, it; // automatically handles many >3-ary expressions by walking through the function; // in the depth-first order. For example, given; //; // (a + c) + d; // ((a + b) + c) + d; //; // NaryReassociate first rewrites (a + b) + c to (a + c) + b, and then rewrites",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/NaryReassociate.cpp:447,redund,redundancy,447,interpreter/llvm-project/llvm/lib/Transforms/Scalar/NaryReassociate.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/NaryReassociate.cpp,1,['redund'],['redundancy']
Safety,"//===- NaryReassociate.h - Reassociate n-ary expressions --------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass reassociates n-ary add expressions and eliminates the redundancy; // exposed by the reassociation.; //; // A motivating example:; //; // void foo(int a, int b) {; // bar(a + b);; // bar((a + 2) + b);; // }; //; // An ideal compiler should reassociate (a + 2) + b to (a + b) + 2 and simplify; // the above code to; //; // int t = a + b;; // bar(t);; // bar(t + 2);; //; // However, the Reassociate pass is unable to do that because it processes each; // instruction individually and believes (a + 2) + b is the best form according; // to its rank system.; //; // To address this limitation, NaryReassociate reassociates an expression in a; // form that reuses existing instructions. As a result, NaryReassociate can; // reassociate (a + 2) + b in the example to (a + b) + 2 because it detects that; // (a + b) is computed before.; //; // NaryReassociate works as follows. For every instruction in the form of (a +; // b) + c, it checks whether a + c or b + c is already computed by a dominating; // instruction. If so, it then reassociates (a + b) + c into (a + c) + b or (b +; // c) + a and removes the redundancy accordingly. To efficiently look up whether; // an expression is computed before, we store each instruction seen and its SCEV; // into an SCEV-to-instruction map.; //; // Although the algorithm pattern-matches only ternary additions, it; // automatically handles many >3-ary expressions by walking through the function; // in the depth-first order. For example, given; //; // (a + c) + d; // ((a + b) + c) + d; //; // NaryReassociate first rewrites (a + b) + c to (a + c) + b, and then rewrites",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/NaryReassociate.h:447,redund,redundancy,447,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/NaryReassociate.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/NaryReassociate.h,1,['redund'],['redundancy']
Safety,"//===- NewPMDriver.h - Function to drive llc with the new PM ----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// A single function which is called to drive the llc behavior for the new; /// PassManager.; ///; /// This is only in a separate TU with a header to avoid including all of the; /// old pass manager headers and the new pass manager headers into the same; /// file. Eventually all of the routines here will get folded back into; /// llc.cpp.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llc/NewPMDriver.h:543,avoid,avoid,543,interpreter/llvm-project/llvm/tools/llc/NewPMDriver.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llc/NewPMDriver.h,1,['avoid'],['avoid']
Safety,"//===- NewPMDriver.h - Function to drive opt with the new PM ----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// A single function which is called to drive the opt behavior for the new; /// PassManager.; ///; /// This is only in a separate TU with a header to avoid including all of the; /// old pass manager headers and the new pass manager headers into the same; /// file. Eventually all of the routines here will get folded back into; /// opt.cpp.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt/NewPMDriver.h:543,avoid,avoid,543,interpreter/llvm-project/llvm/tools/opt/NewPMDriver.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt/NewPMDriver.h,1,['avoid'],['avoid']
Safety,"//===- NumberObjectConversionChecker.cpp -------------------------*- C++ -*-==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines NumberObjectConversionChecker, which checks for a; // particular common mistake when dealing with numbers represented as objects; // passed around by pointers. Namely, the language allows to reinterpret the; // pointer as a number directly, often without throwing any warnings,; // but in most cases the result of such conversion is clearly unexpected,; // as pointer value, rather than number value represented by the pointee object,; // becomes the result of such operation.; //; // Currently the checker supports the Objective-C NSNumber class,; // and the OSBoolean class found in macOS low-level code; the latter; // can only hold boolean values.; //; // This checker has an option ""Pedantic"" (boolean), which enables detection of; // more conversion patterns (which are most likely more harmless, and therefore; // are more likely to produce false positives) - disabled by default,; // enabled with `-analyzer-config osx.NumberObjectConversion:Pedantic=true'.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/NumberObjectConversionChecker.cpp:1124,detect,detection,1124,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/NumberObjectConversionChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/NumberObjectConversionChecker.cpp,1,['detect'],['detection']
Safety,"//===- ObjCARCOpts.cpp - ObjC ARC Optimization ----------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file; /// This file defines ObjC ARC optimizations. ARC stands for Automatic; /// Reference Counting and is a system for managing reference counts for objects; /// in Objective C.; ///; /// The optimizations performed include elimination of redundant, partially; /// redundant, and inconsequential reference count operations, elimination of; /// redundant weak pointer operations, and numerous minor simplifications.; ///; /// WARNING: This file knows about certain library functions. It recognizes them; /// by name, and hardwires knowledge of their semantics.; ///; /// WARNING: This file knows about how certain Objective-C library functions are; /// used. Naive LLVM IR transformations which would otherwise be; /// behavior-preserving may break these assumptions.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/ObjCARC/ObjCARCOpts.cpp:626,redund,redundant,626,interpreter/llvm-project/llvm/lib/Transforms/ObjCARC/ObjCARCOpts.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/ObjCARC/ObjCARCOpts.cpp,3,['redund'],['redundant']
Safety,"//===- OptimizerDriver.cpp - Allow BugPoint to run passes safely ----------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines an interface that allows bugpoint to run various passes; // without the threat of a buggy pass corrupting bugpoint (of course, bugpoint; // may have its own bugs, but that's another story...). It achieves this by; // forking a copy of itself and having the child process do the optimizations.; // If this client dies, we can always fork a new one. :); //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/OptimizerDriver.cpp:58,safe,safely,58,interpreter/llvm-project/llvm/tools/bugpoint/OptimizerDriver.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/OptimizerDriver.cpp,1,['safe'],['safely']
Safety,"//===- PPCBoolRetToInt.cpp ------------------------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements converting i1 values to i32/i64 if they could be more; // profitably allocated as GPRs rather than CRs. This pass will become totally; // unnecessary if Register Bank Allocation and Global Instruction Selection ever; // go upstream.; //; // Presently, the pass converts i1 Constants, and Arguments to i32/i64 if the; // transitive closure of their uses includes only PHINodes, CallInsts, and; // ReturnInsts. The rational is that arguments are generally passed and returned; // in GPRs rather than CRs, so casting them to i32/i64 at the LLVM IR level will; // actually save casts at the Machine Instruction level.; //; // It might be useful to expand this pass to add bit-wise operations to the list; // of safe transitive closure types. Also, we miss some opportunities when LLVM; // represents logical AND and OR operations with control flow rather than data; // flow. For example by lowering the expression: return (A && B && C); //; // as: return A ? true : B && C.; //; // There's code in SimplifyCFG that code be used to turn control flow in data; // flow using SelectInsts. Selects are slow on some architectures (P7/P8), so; // this probably isn't good in general, but for the special case of i1, the; // Selects could be further lowered to bit operations that are fast everywhere.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCBoolRetToInt.cpp:1111,safe,safe,1111,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCBoolRetToInt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCBoolRetToInt.cpp,1,['safe'],['safe']
Safety,"//===- PatFrag ------------------------------------------------------------===//; /// Represents a parsed GICombinePatFrag. This can be thought of as the; /// equivalent of a CodeGenInstruction, but for PatFragPatterns.; ///; /// PatFrags are made of 3 things:; /// - Out parameters (defs); /// - In parameters; /// - A set of pattern lists (alternatives).; ///; /// If the PatFrag uses instruction patterns, the root must be one of the defs.; ///; /// Note that this DOES NOT represent the use of the PatFrag, only its; /// definition. The use of the PatFrag in a Pattern is represented by; /// PatFragPattern.; ///; /// PatFrags use the term ""parameter"" instead of operand because they're; /// essentially macros, and using that name avoids confusion. Other than that,; /// they're structured similarly to a MachineInstruction - all parameters; /// (operands) are in the same list, with defs at the start. This helps mapping; /// parameters to values, because, param N of a PatFrag is always operand N of a; /// PatFragPattern.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISel/Patterns.h:736,avoid,avoids,736,interpreter/llvm-project/llvm/utils/TableGen/GlobalISel/Patterns.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISel/Patterns.h,1,['avoid'],['avoids']
Safety,"//===- PlaceSafepoints.cpp - Place GC Safepoints --------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Place garbage collection safepoints at appropriate locations in the IR. This; // does not make relocation semantics or variable liveness explicit. That's; // done by RewriteStatepointsForGC.; //; // Terminology:; // - A call is said to be ""parseable"" if there is a stack map generated for the; // return PC of the call. A runtime can determine where values listed in the; // deopt arguments and (after RewriteStatepointsForGC) gc arguments are located; // on the stack when the code is suspended inside such a call. Every parse; // point is represented by a call wrapped in an gc.statepoint intrinsic.; // - A ""poll"" is an explicit check in the generated code to determine if the; // runtime needs the generated code to cooperate by calling a helper routine; // and thus suspending its execution at a known state. The call to the helper; // routine will be parseable. The (gc & runtime specific) logic of a poll is; // assumed to be provided in a function of the name ""gc.safepoint_poll"".; //; // We aim to insert polls such that running code can quickly be brought to a; // well defined state for inspection by the collector. In the current; // implementation, this is done via the insertion of poll sites at method entry; // and the backedge of most loops. We try to avoid inserting more polls than; // are necessary to ensure a finite period between poll sites. This is not; // because the poll itself is expensive in the generated code; it's not. Polls; // do tend to impact the optimizer itself in negative ways; we'd like to avoid; // perturbing the optimization of the method as much as we can.; //; // We also ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/PlaceSafepoints.cpp:38,Safe,Safepoints,38,interpreter/llvm-project/llvm/lib/Transforms/Scalar/PlaceSafepoints.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/PlaceSafepoints.cpp,2,"['Safe', 'safe']","['Safepoints', 'safepoints']"
Safety,"//===- PlaceSafepoints.h - Place GC Safepoints ----------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Place garbage collection safepoints at appropriate locations in the IR. This; // does not make relocation semantics or variable liveness explicit. That's; // done by RewriteStatepointsForGC.; //; // Terminology:; // - A call is said to be ""parseable"" if there is a stack map generated for the; // return PC of the call. A runtime can determine where values listed in the; // deopt arguments and (after RewriteStatepointsForGC) gc arguments are located; // on the stack when the code is suspended inside such a call. Every parse; // point is represented by a call wrapped in an gc.statepoint intrinsic.; // - A ""poll"" is an explicit check in the generated code to determine if the; // runtime needs the generated code to cooperate by calling a helper routine; // and thus suspending its execution at a known state. The call to the helper; // routine will be parseable. The (gc & runtime specific) logic of a poll is; // assumed to be provided in a function of the name ""gc.safepoint_poll"".; //; // We aim to insert polls such that running code can quickly be brought to a; // well defined state for inspection by the collector. In the current; // implementation, this is done via the insertion of poll sites at method entry; // and the backedge of most loops. We try to avoid inserting more polls than; // are necessary to ensure a finite period between poll sites. This is not; // because the poll itself is expensive in the generated code; it's not. Polls; // do tend to impact the optimizer itself in negative ways; we'd like to avoid; // perturbing the optimization of the method as much as we can.; //; // We also ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/PlaceSafepoints.h:36,Safe,Safepoints,36,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/PlaceSafepoints.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/PlaceSafepoints.h,2,"['Safe', 'safe']","['Safepoints', 'safepoints']"
Safety,"//===- RegionInfo.cpp - SESE region detection analysis --------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; // Detects single entry single exit regions in the control flow graph.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/RegionInfo.cpp:36,detect,detection,36,interpreter/llvm-project/llvm/lib/Analysis/RegionInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/RegionInfo.cpp,2,"['Detect', 'detect']","['Detects', 'detection']"
Safety,"//===- RegionInfo.h - SESE region analysis ----------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Calculate a program structure tree built out of single entry single exit; // regions.; // The basic ideas are taken from ""The Program Structure Tree - Richard Johnson,; // David Pearson, Keshav Pingali - 1994"", however enriched with ideas from ""The; // Refined Process Structure Tree - Jussi Vanhatalo, Hagen Voelyer, Jana; // Koehler - 2009"".; // The algorithm to calculate these data structures however is completely; // different, as it takes advantage of existing information already available; // in (Post)dominace tree and dominance frontier passes. This leads to a simpler; // and in practice hopefully better performing algorithm. The runtime of the; // algorithms described in the papers above are both linear in graph size,; // O(V+E), whereas this algorithm is not, as the dominance frontier information; // itself is not, but in practice runtime seems to be in the order of magnitude; // of dominance tree calculation.; //; // WARNING: LLVM is generally very concerned about compile time such that; // the use of additional analysis passes in the default; // optimization sequence is avoided as much as possible.; // Specifically, if you do not need the RegionInfo, but dominance; // information could be sufficient please base your work only on; // the dominator tree. Most passes maintain it, such that using; // it has often near zero cost. In contrast RegionInfo is by; // default not available, is not maintained by existing; // transformations and there is no intention to do so.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/RegionInfo.h:1479,avoid,avoided,1479,interpreter/llvm-project/llvm/include/llvm/Analysis/RegionInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/RegionInfo.h,1,['avoid'],['avoided']
Safety,"//===- RegionInfoImpl.h - SESE region detection analysis --------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; // Detects single entry single exit regions in the control flow graph.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/RegionInfoImpl.h:38,detect,detection,38,interpreter/llvm-project/llvm/include/llvm/Analysis/RegionInfoImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/RegionInfoImpl.h,2,"['Detect', 'detect']","['Detects', 'detection']"
Safety,"//===- RemoveRedundantDebugValues.cpp - Remove Redundant Debug Value MIs --===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RemoveRedundantDebugValues.cpp:47,Redund,Redundant,47,interpreter/llvm-project/llvm/lib/CodeGen/RemoveRedundantDebugValues.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RemoveRedundantDebugValues.cpp,1,['Redund'],['Redundant']
Safety,"//===- SIInsertHardClauses.cpp - Insert Hard Clauses ----------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file; /// Insert s_clause instructions to form hard clauses.; ///; /// Clausing load instructions can give cache coherency benefits. Before gfx10,; /// the hardware automatically detected ""soft clauses"", which were sequences of; /// memory instructions of the same type. In gfx10 this detection was removed,; /// and the s_clause instruction was introduced to explicitly mark ""hard; /// clauses"".; ///; /// It's the scheduler's job to form the clauses by putting similar memory; /// instructions next to each other. Our job is just to insert an s_clause; /// instruction to mark the start of each clause.; ///; /// Note that hard clauses are very similar to, but logically distinct from, the; /// groups of instructions that have to be restartable when XNACK is enabled.; /// The rules are slightly different in each case. For example an s_nop; /// instruction breaks a restartable group, but can appear in the middle of a; /// hard clause. (Before gfx10 there wasn't a distinction, and both were called; /// ""soft clauses"" or just ""clauses"".); ///; /// The SIFormMemoryClauses pass and GCNHazardRecognizer deal with restartable; /// groups, not hard clauses.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIInsertHardClauses.cpp:564,detect,detected,564,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIInsertHardClauses.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIInsertHardClauses.cpp,2,['detect'],"['detected', 'detection']"
Safety,"//===- SLPVectorizer.cpp - A bottom up SLP Vectorizer ---------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass implements the Bottom Up SLP vectorizer. It detects consecutive; // stores that can be put together into vector-stores. Next, it attempts to; // construct vectorizable tree using the use-def chains. If a profitable tree; // was found, the SLP vectorizer performs vectorization on the tree.; //; // The pass is inspired by the work described in the paper:; // ""Loop-Aware SLP in GCC"" by Ira Rosen, Dorit Nuzman, Ayal Zaks.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp:437,detect,detects,437,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,1,['detect'],['detects']
Safety,"//===- SLPVectorizer.h ------------------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; // This pass implements the Bottom Up SLP vectorizer. It detects consecutive; // stores that can be put together into vector-stores. Next, it attempts to; // construct vectorizable tree using the use-def chains. If a profitable tree; // was found, the SLP vectorizer performs vectorization on the tree.; //; // The pass is inspired by the work described in the paper:; // ""Loop-Aware SLP in GCC"" by Ira Rosen, Dorit Nuzman, Ayal Zaks.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Vectorize/SLPVectorizer.h:433,detect,detects,433,interpreter/llvm-project/llvm/include/llvm/Transforms/Vectorize/SLPVectorizer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Vectorize/SLPVectorizer.h,1,['detect'],['detects']
Safety,"//===- SafeStack.cpp - Safe Stack Insertion -------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass splits the stack into the safe stack (kept as-is for LLVM backend); // and the unsafe stack (explicitly allocated and managed through the runtime; // support library).; //; // http://clang.llvm.org/docs/SafeStack.html; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SafeStack.cpp:7,Safe,SafeStack,7,interpreter/llvm-project/llvm/lib/CodeGen/SafeStack.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SafeStack.cpp,5,"['Safe', 'safe', 'unsafe']","['Safe', 'SafeStack', 'safe', 'unsafe']"
Safety,"//===- SafeStackLayout.cpp - SafeStack frame layout -----------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SafeStackLayout.cpp:7,Safe,SafeStackLayout,7,interpreter/llvm-project/llvm/lib/CodeGen/SafeStackLayout.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SafeStackLayout.cpp,2,['Safe'],"['SafeStack', 'SafeStackLayout']"
Safety,"//===- SafeStackLayout.h - SafeStack frame layout --------------*- C++ -*--===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SafeStackLayout.h:7,Safe,SafeStackLayout,7,interpreter/llvm-project/llvm/lib/CodeGen/SafeStackLayout.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SafeStackLayout.h,2,['Safe'],"['SafeStack', 'SafeStackLayout']"
Safety,"//===- SafepointIRVerifier.h - Checks for GC relocation problems *- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines a verifier which is useful for enforcing the relocation; // properties required by a relocating GC. Specifically, it looks for uses of; // the unrelocated value of pointer SSA values after a possible safepoint. It; // attempts to report no false negatives, but may end up reporting false; // positives in rare cases (see the note at the top of the corresponding cpp; // file.); //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/SafepointIRVerifier.h:7,Safe,SafepointIRVerifier,7,interpreter/llvm-project/llvm/include/llvm/IR/SafepointIRVerifier.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/SafepointIRVerifier.h,2,"['Safe', 'safe']","['SafepointIRVerifier', 'safepoint']"
Safety,"//===- ScheduleDAGVLIW.cpp - SelectionDAG list scheduler for VLIW -*- C++ -*-=//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This implements a top-down list scheduler, using standard algorithms.; // The basic approach uses a priority queue of available nodes to schedule.; // One at a time, nodes are taken from the priority queue (thus in priority; // order), checked for legality to schedule, and emitted if legal.; //; // Nodes may not be legal to schedule either due to structural hazards (e.g.; // pipeline or resource constraints) or because an input to the instruction has; // not completed execution.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp:743,hazard,hazards,743,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp,1,['hazard'],['hazards']
Safety,"//===- ScoreboardHazardRecognizer.cpp - Scheduler Support -----------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the ScoreboardHazardRecognizer class, which; // encapsultes hazard-avoidance heuristics for scheduling, based on the; // scheduling itineraries specified for the target.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ScoreboardHazardRecognizer.cpp:464,hazard,hazard-avoidance,464,interpreter/llvm-project/llvm/lib/CodeGen/ScoreboardHazardRecognizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ScoreboardHazardRecognizer.cpp,1,['hazard'],['hazard-avoidance']
Safety,"//===- SeparateConstOffsetFromGEP.cpp -------------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Loop unrolling may create many similar GEPs for array accesses.; // e.g., a 2-level loop; //; // float a[32][32]; // global variable; //; // for (int i = 0; i < 2; ++i) {; // for (int j = 0; j < 2; ++j) {; // ...; // ... = a[x + i][y + j];; // ...; // }; // }; //; // will probably be unrolled to:; //; // gep %a, 0, %x, %y; load; // gep %a, 0, %x, %y + 1; load; // gep %a, 0, %x + 1, %y; load; // gep %a, 0, %x + 1, %y + 1; load; //; // LLVM's GVN does not use partial redundancy elimination yet, and is thus; // unable to reuse (gep %a, 0, %x, %y). As a result, this misoptimization incurs; // significant slowdown in targets with limited addressing modes. For instance,; // because the PTX target does not support the reg+reg addressing mode, the; // NVPTX backend emits PTX code that literally computes the pointer address of; // each GEP, wasting tons of registers. It emits the following PTX for the; // first load and similar PTX for other loads.; //; // mov.u32 %r1, %x;; // mov.u32 %r2, %y;; // mul.wide.u32 %rl2, %r1, 128;; // mov.u64 %rl3, a;; // add.s64 %rl4, %rl3, %rl2;; // mul.wide.u32 %rl5, %r2, 4;; // add.s64 %rl6, %rl4, %rl5;; // ld.global.f32 %f1, [%rl6];; //; // To reduce the register pressure, the optimization implemented in this file; // merges the common part of a group of GEPs, so we can compute each pointer; // address by adding a simple offset to the common part, saving many registers.; //; // It works by splitting each GEP into a variadic base and a constant offset.; // The variadic base can be computed once and reused by multiple GEPs, and the; // constant offsets can be nicely fo",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SeparateConstOffsetFromGEP.cpp:853,redund,redundancy,853,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SeparateConstOffsetFromGEP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SeparateConstOffsetFromGEP.cpp,1,['redund'],['redundancy']
Safety,"//===- Sequence.h - Utility for producing sequences of values ---*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; /// Provides some synthesis utilities to produce sequences of values. The names; /// are intentionally kept very short as they tend to occur in common and; /// widely used contexts.; ///; /// The `seq(A, B)` function produces a sequence of values from `A` to up to; /// (but not including) `B`, i.e., [`A`, `B`), that can be safely iterated over.; /// `seq` supports both integral (e.g., `int`, `char`, `uint32_t`) and enum; /// types. `seq_inclusive(A, B)` produces a sequence of values from `A` to `B`,; /// including `B`.; ///; /// Examples with integral types:; /// ```; /// for (int x : seq(0, 3)); /// outs() << x << "" "";; /// ```; ///; /// Prints: `0 1 2 `.; ///; /// ```; /// for (int x : seq_inclusive(0, 3)); /// outs() << x << "" "";; /// ```; ///; /// Prints: `0 1 2 3 `.; ///; /// Similar to `seq` and `seq_inclusive`, the `enum_seq` and; /// `enum_seq_inclusive` functions produce sequences of enum values that can be; /// iterated over.; /// To enable iteration with enum types, you need to either mark enums as safe; /// to iterate on by specializing `enum_iteration_traits`, or opt into; /// potentially unsafe iteration at every callsite by passing; /// `force_iteration_on_noniterable_enum`.; ///; /// Examples with enum types:; /// ```; /// namespace X {; /// enum class MyEnum : unsigned {A = 0, B, C};; /// } // namespace X; ///; /// template <> struct enum_iteration_traits<X::MyEnum> {; /// static contexpr bool is_iterable = true;; /// };; ///; /// class MyClass {; /// public:; /// enum Safe { D = 3, E, F };; /// enum MaybeUnsafe { G = 1, H = 2, I = 4 };; /// };; ///; /// template <> stru",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Sequence.h:712,safe,safely,712,interpreter/llvm-project/llvm/include/llvm/ADT/Sequence.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Sequence.h,1,['safe'],['safely']
Safety,"//===- ShrinkWrap.cpp - Compute safe point for prolog/epilog insertion ----===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass looks for safe point where the prologue and epilogue can be; // inserted.; // The safe point for the prologue (resp. epilogue) is called Save; // (resp. Restore).; // A point is safe for prologue (resp. epilogue) if and only if; // it 1) dominates (resp. post-dominates) all the frame related operations and; // between 2) two executions of the Save (resp. Restore) point there is an; // execution of the Restore (resp. Save) point.; //; // For instance, the following points are safe:; // for (int i = 0; i < 10; ++i) {; // Save; // ...; // Restore; // }; // Indeed, the execution looks like Save -> Restore -> Save -> Restore ...; // And the following points are not:; // for (int i = 0; i < 10; ++i) {; // Save; // ...; // }; // for (int i = 0; i < 10; ++i) {; // ...; // Restore; // }; // Indeed, the execution looks like Save -> Save -> ... -> Restore -> Restore.; //; // This pass also ensures that the safe points are 3) cheaper than the regular; // entry and exits blocks.; //; // Property #1 is ensured via the use of MachineDominatorTree and; // MachinePostDominatorTree.; // Property #2 is ensured via property #1 and MachineLoopInfo, i.e., both; // points must be in the same loop.; // Property #3 is ensured via the MachineBlockFrequencyInfo.; //; // If this pass found points matching all these properties, then; // MachineFrameInfo is updated with this information.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ShrinkWrap.cpp:32,safe,safe,32,interpreter/llvm-project/llvm/lib/CodeGen/ShrinkWrap.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ShrinkWrap.cpp,6,['safe'],['safe']
Safety,"//===- StackProtector.cpp - Stack Protector Insertion ---------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass inserts stack protectors into functions which need them. A variable; // with a random value in it is stored onto the stack before the local variables; // are allocated. Upon exiting the block, the stored value is checked. If it's; // changed, then there was some sort of violation and the program aborts.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/StackProtector.cpp:690,abort,aborts,690,interpreter/llvm-project/llvm/lib/CodeGen/StackProtector.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/StackProtector.cpp,1,['abort'],['aborts']
Safety,"//===- StackProtector.h - Stack Protector Insertion -------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass inserts stack protectors into functions which need them. A variable; // with a random value in it is stored onto the stack before the local variables; // are allocated. Upon exiting the block, the stored value is checked. If it's; // changed, then there was some sort of violation and the program aborts.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/StackProtector.h:690,abort,aborts,690,interpreter/llvm-project/llvm/include/llvm/CodeGen/StackProtector.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/StackProtector.h,1,['abort'],['aborts']
Safety,"//===- StackSafetyAnalysis.cpp - Stack memory safety analysis -------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/StackSafetyAnalysis.cpp:46,safe,safety,46,interpreter/llvm-project/llvm/lib/Analysis/StackSafetyAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/StackSafetyAnalysis.cpp,1,['safe'],['safety']
Safety,"//===- StackSafetyAnalysis.h - Stack memory safety analysis -----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Stack Safety Analysis detects allocas and arguments with safe access.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/StackSafetyAnalysis.h:44,safe,safety,44,interpreter/llvm-project/llvm/include/llvm/Analysis/StackSafetyAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/StackSafetyAnalysis.h,4,"['Safe', 'detect', 'safe']","['Safety', 'detects', 'safe', 'safety']"
Safety,"//===- StraightLineStrengthReduce.cpp - -----------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements straight-line strength reduction (SLSR). Unlike loop; // strength reduction, this algorithm is designed to reduce arithmetic; // redundancy in straight-line code instead of loops. It has proven to be; // effective in simplifying arithmetic statements derived from an unrolled loop.; // It can also simplify the logic of SeparateConstOffsetFromGEP.; //; // There are many optimizations we can perform in the domain of SLSR. This file; // for now contains only an initial step. Specifically, we look for strength; // reduction candidates in the following forms:; //; // Form 1: B + i * S; // Form 2: (B + i) * S; // Form 3: &B[i * S]; //; // where S is an integer variable, and i is a constant integer. If we found two; // candidates S1 and S2 in the same form and S1 dominates S2, we may rewrite S2; // in a simpler way with respect to S1. For example,; //; // S1: X = B + i * S; // S2: Y = B + i' * S => X + (i' - i) * S; //; // S1: X = (B + i) * S; // S2: Y = (B + i') * S => X + (i' - i) * S; //; // S1: X = &B[i * S]; // S2: Y = &B[i' * S] => &X[(i' - i) * S]; //; // Note: (i' - i) * S is folded to the extent possible.; //; // This rewriting is in general a good idea. The code patterns we focus on; // usually come from loop unrolling, so (i' - i) * S is likely the same; // across iterations and can be reused. When that happens, the optimized form; // takes only one add starting from the second iteration.; //; // When such rewriting is possible, we call S1 a ""basis"" of S2. When S2 has; // multiple bases, we choose to rewrite S2 with respect to its ""immediate""; // basis, the basis that",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/StraightLineStrengthReduce.cpp:533,redund,redundancy,533,interpreter/llvm-project/llvm/lib/Transforms/Scalar/StraightLineStrengthReduce.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/StraightLineStrengthReduce.cpp,1,['redund'],['redundancy']
Safety,"//===- TLSVariableHoist.cpp -------- Remove Redundant TLS Loads ---------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass identifies/eliminate Redundant TLS Loads if related option is set.; // The example: Please refer to the comment at the head of TLSVariableHoist.h.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/TLSVariableHoist.cpp:44,Redund,Redundant,44,interpreter/llvm-project/llvm/lib/Transforms/Scalar/TLSVariableHoist.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/TLSVariableHoist.cpp,2,['Redund'],['Redundant']
Safety,"//===- ThreadSafety.cpp ---------------------------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // A intra-procedural analysis for thread safety (e.g. deadlocks and race; // conditions), based off of an annotation system.; //; // See http://clang.llvm.org/docs/ThreadSafetyAnalysis.html; // for more information.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ThreadSafety.cpp:422,safe,safety,422,interpreter/llvm-project/clang/lib/Analysis/ThreadSafety.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ThreadSafety.cpp,1,['safe'],['safety']
Safety,"//===- ThreadSafety.h -------------------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; //; // A intra-procedural analysis for thread safety (e.g. deadlocks and race; // conditions), based off of an annotation system.; //; // See http://clang.llvm.org/docs/LanguageExtensions.html#thread-safety-annotation-checking; // for more information.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafety.h:426,safe,safety,426,interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafety.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafety.h,2,['safe'],"['safety', 'safety-annotation-checking']"
Safety,"//===- ThreadSafetyCommon.h -------------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Parts of thread safety analysis that are not specific to thread safety; // itself have been factored into classes here, where they can be potentially; // used by other analyses. Currently these include:; //; // * Generalize clang CFG visitors.; // * Conversion of the clang CFG to SSA form.; // * Translation of clang Exprs to TIL SExprs; //; // UNDER CONSTRUCTION. USE AT YOUR OWN RISK.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafetyCommon.h:399,safe,safety,399,interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafetyCommon.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafetyCommon.h,3,"['RISK', 'safe']","['RISK', 'safety']"
Safety,"//===- ThreadSafetyTIL.h ----------------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines a simple Typed Intermediate Language, or TIL, that is used; // by the thread safety analysis (See ThreadSafety.cpp). The TIL is intended; // to be largely independent of clang, in the hope that the analysis can be; // reused for other non-C++ languages. All dependencies on clang/llvm should; // go in ThreadSafetyUtil.h.; //; // Thread safety analysis works by comparing mutex expressions, e.g.; //; // class A { Mutex mu; int dat GUARDED_BY(this->mu); }; // class B { A a; }; //; // void foo(B* b) {; // (*b).a.mu.lock(); // locks (*b).a.mu; // b->a.dat = 0; // substitute &b->a for 'this';; // // requires lock on (&b->a)->mu; // (b->a.mu).unlock(); // unlocks (b->a.mu); // }; //; // As illustrated by the above example, clang Exprs are not well-suited to; // represent mutex expressions directly, since there is no easy way to compare; // Exprs for equivalence. The thread safety analysis thus lowers clang Exprs; // into a simple intermediate language (IL). The IL supports:; //; // (1) comparisons for semantic equality of expressions; // (2) SSA renaming of variables; // (3) wildcards and pattern matching over expressions; // (4) hash-based expression lookup; //; // The TIL is currently very experimental, is intended only for use within; // the thread safety analysis, and is subject to change without notice.; // After the API stabilizes and matures, it may be appropriate to make this; // more generally available to other analyses.; //; // UNDER CONSTRUCTION. USE AT YOUR OWN RISK.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafetyTIL.h:478,safe,safety,478,interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafetyTIL.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafetyTIL.h,5,"['RISK', 'safe']","['RISK', 'safety']"
Safety,"//===- ThreadSafetyTraverse.h -----------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines a framework for doing generic traversals and rewriting; // operations over the Thread Safety TIL.; //; // UNDER CONSTRUCTION. USE AT YOUR OWN RISK.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafetyTraverse.h:487,Safe,Safety,487,interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafetyTraverse.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafetyTraverse.h,2,"['RISK', 'Safe']","['RISK', 'Safety']"
Safety,"//===- TrainingLogger.h - mlgo feature/reward logging ----------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // The design goals of the logger are:; // - no dependencies that llvm doesn't already have.; // - support streaming, so that we don't need to buffer data during compilation; // - 0-decoding tensor values. Tensor values are potentially very large buffers; // of scalars. Because of their potentially large size, avoiding; // serialization/deserialization overhead is preferred.; //; // The simple logger produces an output of the form (each line item on its line); // - header: a json object describing the data that will follow.; // - context: e.g. function name, for regalloc, or ""default"" for module-wide; // optimizations like the inliner. This is the context to which the subsequent; // data corresponds.; // - observation number.; // - tensor values - raw bytes of the tensors, in the order given in the header.; // The values are in succession, i.e. no separator is found between successive; // tensor values. At the end, there is a new line character.; // - [score] - this is optional, and is present if it was present in the header.; // Currently, for final rewards, we output ""0"" scores after each observation,; // except for the last one.; // <repeat>; // The file should be read as binary, but the reason we use newlines is mostly; // ease of debugging: the log can be opened in a text editor and, while tensor; // values are inscrutable, at least the sequence of data can be easily observed.; // Of course, the buffer of tensor values could contain '\n' bytes. A reader; // should use the header information to know how much data to read for the; // tensor values, and not use line information for that.; //; ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/Utils/TrainingLogger.h:691,avoid,avoiding,691,interpreter/llvm-project/llvm/include/llvm/Analysis/Utils/TrainingLogger.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/Utils/TrainingLogger.h,1,['avoid'],['avoiding']
Safety,"//===- Transform/Utils/CodeMoverUtils.h - CodeMover Utils -------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This family of functions determine movements are safe on basic blocks, and; // instructions contained within a function.; //; // Please note that this is work in progress, and the functionality is not; // ready for broader production use.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeMoverUtils.h:432,safe,safe,432,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeMoverUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeMoverUtils.h,1,['safe'],['safe']
Safety,"//===- UnsafeBufferUsage.cpp - Replace pointers with modern C++ -----------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp:7,Unsafe,UnsafeBufferUsage,7,interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp,1,['Unsafe'],['UnsafeBufferUsage']
Safety,"//===- UnsafeBufferUsage.h - Replace pointers with modern C++ ---*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines an analysis that aids replacing buffer accesses through; // raw pointers with safer C++ abstractions such as containers and views/spans.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/UnsafeBufferUsage.h:7,Unsafe,UnsafeBufferUsage,7,interpreter/llvm-project/clang/include/clang/Analysis/Analyses/UnsafeBufferUsage.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/UnsafeBufferUsage.h,2,"['Unsafe', 'safe']","['UnsafeBufferUsage', 'safer']"
Safety,"//===- ValueMap.h - Safe map from Values to data ----------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the ValueMap class. ValueMap maps Value* or any subclass; // to an arbitrary other type. It provides the DenseMap interface but updates; // itself to remain safe when keys are RAUWed or deleted. By default, when a; // key is RAUWed from V1 to V2, the old mapping V1->target is removed, and a new; // mapping V2->target is added. If V2 already existed, its old target is; // overwritten. When a key is deleted, its mapping is removed.; //; // You can override a ValueMap's Config parameter to control exactly what; // happens on RAUW and destruction and to get called back on each event. It's; // legal to call back into the ValueMap from a Config's callbacks. Config; // parameters should inherit from ValueMapConfig<KeyT> to get default; // implementations of all the methods ValueMap uses. See ValueMapConfig for; // documentation of the functions you can override.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ValueMap.h:20,Safe,Safe,20,interpreter/llvm-project/llvm/include/llvm/IR/ValueMap.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ValueMap.h,2,"['Safe', 'safe']","['Safe', 'safe']"
Safety,"//===- X86AvoidStoreForwardingBlocks.cpp - Avoid HW Store Forward Block ---===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // If a load follows a store and reloads data that the store has written to; // memory, Intel microarchitectures can in many cases forward the data directly; // from the store to the load, This ""store forwarding"" saves cycles by enabling; // the load to directly obtain the data instead of accessing the data from; // cache or memory.; // A ""store forward block"" occurs in cases that a store cannot be forwarded to; // the load. The most typical case of store forward block on Intel Core; // microarchitecture that a small store cannot be forwarded to a large load.; // The estimated penalty for a store forward block is ~13 cycles.; //; // This pass tries to recognize and handle cases where ""store forward block""; // is created by the compiler when lowering memcpy calls to a sequence; // of a load and a store.; //; // The pass currently only handles cases where memcpy is lowered to; // XMM/YMM registers, it tries to break the memcpy into smaller copies.; // breaking the memcpy should be possible since there is no atomicity; // guarantee for loads and stores to XMM/YMM.; //; // It could be better for performance to solve the problem by loading; // to XMM/YMM then inserting the partial store before storing back from XMM/YMM; // to memory, but this will result in a more conservative optimization since it; // requires we prove that all memory accesses between the blocking store and the; // load must alias/don't alias before we can move the store, whereas the; // transformation done here is correct regardless to other memory accesses.; //===-------------------------------------------------------------------",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86AvoidStoreForwardingBlocks.cpp:43,Avoid,Avoid,43,interpreter/llvm-project/llvm/lib/Target/X86/X86AvoidStoreForwardingBlocks.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86AvoidStoreForwardingBlocks.cpp,1,['Avoid'],['Avoid']
Safety,"//===- X86VZeroUpper.cpp - AVX vzeroupper instruction inserter ------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the pass which inserts x86 AVX vzeroupper instructions; // before calls to SSE encoded functions. This avoids transition latency; // penalty when transferring control between AVX encoded instructions and old; // SSE encoding mode.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86VZeroUpper.cpp:504,avoid,avoids,504,interpreter/llvm-project/llvm/lib/Target/X86/X86VZeroUpper.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86VZeroUpper.cpp,1,['avoid'],['avoids']
Safety,"//===- llvm/Analysis/LoopUnrollAnalyzer.h - Loop Unroll Analyzer-*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements UnrolledInstAnalyzer class. It's used for predicting; // potential effects that loop unrolling might have, such as enabling constant; // propagation and other optimizations.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopUnrollAnalyzer.h:446,predict,predicting,446,interpreter/llvm-project/llvm/include/llvm/Analysis/LoopUnrollAnalyzer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopUnrollAnalyzer.h,1,['predict'],['predicting']
Safety,"//===- llvm/CodeGen/GCMetadataPrinter.h - Prints asm GC tables --*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // The abstract base class GCMetadataPrinter supports writing GC metadata tables; // as assembly code. This is a separate class from GCStrategy in order to allow; // users of the LLVM JIT to avoid linking with the AsmWriter.; //; // Subclasses of GCMetadataPrinter must be registered using the; // GCMetadataPrinterRegistry. This is separate from the GCStrategy itself; // because these subclasses are logically plugins for the AsmWriter.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GCMetadataPrinter.h:571,avoid,avoid,571,interpreter/llvm-project/llvm/include/llvm/CodeGen/GCMetadataPrinter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GCMetadataPrinter.h,1,['avoid'],['avoid']
Safety,"//===- llvm/Support/Errc.h - Defines the llvm::errc enum --------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // While std::error_code works OK on all platforms we use, there are some; // some problems with std::errc that can be avoided by using our own; // enumeration:; //; // * std::errc is a namespace in some implementations. That means that ADL; // doesn't work and it is sometimes necessary to write std::make_error_code; // or in templates:; // using std::make_error_code;; // make_error_code(...);; //; // with this enum it is safe to always just use make_error_code.; //; // * Some implementations define fewer names than others. This header has; // the intersection of all the ones we support.; //; // * std::errc is just marked with is_error_condition_enum. This means that; // common patterns like AnErrorCode == errc::no_such_file_or_directory take; // 4 virtual calls instead of two comparisons.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Errc.h:499,avoid,avoided,499,interpreter/llvm-project/llvm/include/llvm/Support/Errc.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Errc.h,2,"['avoid', 'safe']","['avoided', 'safe']"
Safety,"//===- llvm/Support/Error.h - Recoverable error handling --------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines an API used to report recoverable errors.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:30,Recover,Recoverable,30,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h,2,"['Recover', 'recover']","['Recoverable', 'recoverable']"
Safety,"//===- llvm/Target/CodeGenCWrappers.h - CodeGen C Wrappers ------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines C bindings wrappers for enums in llvm/Support/CodeGen.h; // that need them. The wrappers are separated to avoid adding an indirect; // dependency on llvm/Config/Targets.def to CodeGen.h.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/CodeGenCWrappers.h:507,avoid,avoid,507,interpreter/llvm-project/llvm/include/llvm/Target/CodeGenCWrappers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/CodeGenCWrappers.h,1,['avoid'],['avoid']
Safety,"//===- llvm/TargetParser/Host.h - Host machine detection -------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Methods for querying the nature of the host machine.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Host.h:47,detect,detection,47,interpreter/llvm-project/llvm/include/llvm/TargetParser/Host.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Host.h,1,['detect'],['detection']
Safety,"//===-- AArch64A57FPLoadBalancing.cpp - Balance FP ops statically on A57---===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; // For best-case performance on Cortex-A57, we should try to use a balanced; // mix of odd and even D-registers when performing a critical sequence of; // independent, non-quadword FP/ASIMD floating-point multiply or; // multiply-accumulate operations.; //; // This pass attempts to detect situations where the register allocation may; // adversely affect this load balancing and to change the registers used so as; // to better utilize the CPU.; //; // Ideally we'd just take each multiply or multiply-accumulate in turn and; // allocate it alternating even or odd registers. However, multiply-accumulates; // are most efficiently performed in the same functional unit as their; // accumulation operand. Therefore this pass tries to find maximal sequences; // (""Chains"") of multiply-accumulates linked via their accumulation operand,; // and assign them all the same ""color"" (oddness/evenness).; //; // This optimization affects S-register and D-register floating point; // multiplies and FMADD/FMAs, as well as vector (floating point only) muls and; // FMADD/FMA. Q register instructions (and 128-bit vector instructions) are; // not affected.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp:659,detect,detect,659,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp,1,['detect'],['detect']
Safety,"//===-- ARMFixCortexA57AES1742098Pass.cpp ---------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; // This pass works around a Cortex Core Fused AES erratum:; // - Cortex-A57 Erratum 1742098; // - Cortex-A72 Erratum 1655431; //; // The erratum may be triggered if an input vector register to AESE or AESD was; // last written by an instruction that only updated 32 bits of it. This can; // occur for either of the input registers.; //; // The workaround chosen is to update the input register using `r = VORRq r, r`,; // as this updates all 128 bits of the register unconditionally, but does not; // change the values observed in `r`, making the input safe.; //; // This pass has to be conservative in a few cases:; // - an input vector register to the AES instruction is defined outside the; // current function, where we have to assume the register was updated in an; // unsafe way; and; // - an input vector register to the AES instruction is updated along multiple; // different control-flow paths, where we have to ensure all the register; // updating instructions are safe.; //; // Both of these cases may apply to a input vector register. In either case, we; // need to ensure that, when the pass is finished, there exists a safe; // instruction between every unsafe register updating instruction and the AES; // instruction.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMFixCortexA57AES1742098Pass.cpp:929,safe,safe,929,interpreter/llvm-project/llvm/lib/Target/ARM/ARMFixCortexA57AES1742098Pass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMFixCortexA57AES1742098Pass.cpp,5,"['safe', 'unsafe']","['safe', 'unsafe']"
Safety,"//===-- ARMHazardRecognizer.cpp - ARM postra hazard recognizer ------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMHazardRecognizer.cpp:45,hazard,hazard,45,interpreter/llvm-project/llvm/lib/Target/ARM/ARMHazardRecognizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMHazardRecognizer.cpp,1,['hazard'],['hazard']
Safety,"//===-- ARMHazardRecognizer.h - ARM Hazard Recognizers ----------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines hazard recognizers for scheduling ARM functions.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMHazardRecognizer.h:36,Hazard,Hazard,36,interpreter/llvm-project/llvm/lib/Target/ARM/ARMHazardRecognizer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMHazardRecognizer.h,2,"['Hazard', 'hazard']","['Hazard', 'hazard']"
Safety,"//===-- BrainFDriver.cpp - BrainF compiler driver -------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This program converts the BrainF language into LLVM assembly,; // which it can then run using the JIT or output as BitCode.; //; // This implementation has a tape of 65536 bytes,; // with the head starting in the middle.; // Range checking is off by default, so be careful.; // It can be enabled with -abc.; //; // Use:; // ./BrainF -jit prog.bf #Run program now; // ./BrainF -jit -abc prog.bf #Run program now safely; // ./BrainF prog.bf #Write as BitCode; //; // lli prog.bf.bc #Run generated BitCode; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/BrainF/BrainFDriver.cpp:794,safe,safely,794,interpreter/llvm-project/llvm/examples/BrainF/BrainFDriver.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/BrainF/BrainFDriver.cpp,1,['safe'],['safely']
Safety,"//===-- DummyClangFuzzer.cpp - Entry point to sanity check fuzzers --------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Provides a main() to build without linking libFuzzer.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-fuzzer/DummyClangFuzzer.cpp:46,sanity check,sanity check,46,interpreter/llvm-project/clang/tools/clang-fuzzer/DummyClangFuzzer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-fuzzer/DummyClangFuzzer.cpp,1,['sanity check'],['sanity check']
Safety,"//===-- DummyDemanglerFuzzer.cpp - Entry point to sanity check the fuzzer -===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Implementation of main so we can build and test without linking libFuzzer.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-dlang-demangle-fuzzer/DummyDemanglerFuzzer.cpp:50,sanity check,sanity check,50,interpreter/llvm-project/llvm/tools/llvm-dlang-demangle-fuzzer/DummyDemanglerFuzzer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-dlang-demangle-fuzzer/DummyDemanglerFuzzer.cpp,3,['sanity check'],['sanity check']
Safety,"//===-- DummyISelFuzzer.cpp - Entry point to sanity check the fuzzer ------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Implementation of main so we can build and test without linking libFuzzer.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-isel-fuzzer/DummyISelFuzzer.cpp:45,sanity check,sanity check,45,interpreter/llvm-project/llvm/tools/llvm-isel-fuzzer/DummyISelFuzzer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-isel-fuzzer/DummyISelFuzzer.cpp,1,['sanity check'],['sanity check']
Safety,"//===-- GCNHazardRecognizers.cpp - GCN Hazard Recognizer Impls ------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements hazard recognizers for scheduling on GCN processors.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/GCNHazardRecognizer.cpp:39,Hazard,Hazard,39,interpreter/llvm-project/llvm/lib/Target/AMDGPU/GCNHazardRecognizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/GCNHazardRecognizer.cpp,2,"['Hazard', 'hazard']","['Hazard', 'hazard']"
Safety,"//===-- GCNHazardRecognizers.h - GCN Hazard Recognizers ---------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines hazard recognizers for scheduling on GCN processors.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/GCNHazardRecognizer.h:37,Hazard,Hazard,37,interpreter/llvm-project/llvm/lib/Target/AMDGPU/GCNHazardRecognizer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/GCNHazardRecognizer.h,2,"['Hazard', 'hazard']","['Hazard', 'hazard']"
Safety,"//===-- HexagonHazardRecognizer.cpp - Hexagon Post RA Hazard Recognizer ---===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the hazard recognizer for scheduling on Hexagon.; // Use a DFA based hazard recognizer.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonHazardRecognizer.cpp:54,Hazard,Hazard,54,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonHazardRecognizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonHazardRecognizer.cpp,3,"['Hazard', 'hazard']","['Hazard', 'hazard']"
Safety,"//===-- HexagonPeephole.cpp - Hexagon Peephole Optimiztions ---------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; // This peephole pass optimizes in the following cases.; // 1. Optimizes redundant sign extends for the following case; // Transform the following pattern; // %170 = SXTW %166; // ...; // %176 = COPY %170:isub_lo; //; // Into; // %176 = COPY %166; //; // 2. Optimizes redundant negation of predicates.; // %15 = CMPGTrr %6, %2; // ...; // %16 = NOT_p killed %15; // ...; // JMP_c killed %16, <%bb.1>, implicit dead %pc; //; // Into; // %15 = CMPGTrr %6, %2;; // ...; // JMP_cNot killed %15, <%bb.1>, implicit dead %pc;; //; // Note: The peephole pass makes the instrucstions like; // %170 = SXTW %166 or %16 = NOT_p killed %15; // redundant and relies on some form of dead removal instructions, like; // DCE or DIE to actually eliminate them.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonPeephole.cpp:367,redund,redundant,367,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonPeephole.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonPeephole.cpp,3,['redund'],['redundant']
Safety,"//===-- Host.cpp - Implement OS Host Detection ------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the operating system Host detection.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TargetParser/Host.cpp:37,Detect,Detection,37,interpreter/llvm-project/llvm/lib/TargetParser/Host.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TargetParser/Host.cpp,2,"['Detect', 'detect']","['Detection', 'detection']"
Safety,"//===-- InstructionSimplify.h - Fold instrs into simpler forms --*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file declares routines for folding instructions into simpler forms; // that do not require creating new instructions. This does constant folding; // (""add i32 1, 1"" -> ""2"") but can also handle non-constant operands, either; // returning a constant (""and i32 %x, 0"" -> ""0"") or an already existing value; // (""and i32 %x, %x"" -> ""%x""). If the simplification is also an instruction; // then it dominates the original instruction.; //; // These routines implicitly resolve undef uses. The easiest way to be safe when; // using these routines to obtain simplified values for existing instructions is; // to always replace all uses of the instructions with the resulting simplified; // values. This will prevent other code from seeing the same undef uses and; // resolving them to different values.; //; // They require that all the IR that they encounter be valid and inserted into a; // parent function.; //; // Additionally, these routines can't simplify to the instructions that are not; // def-reachable, meaning we can't just scan the basic block for instructions; // to simplify to.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/InstructionSimplify.h:891,safe,safe,891,interpreter/llvm-project/llvm/include/llvm/Analysis/InstructionSimplify.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/InstructionSimplify.h,1,['safe'],['safe']
Safety,"//===-- Internalize.cpp - Mark functions internal -------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass loops over all of the functions and variables in the input module.; // If the function or variable does not need to be preserved according to the; // client supplied callback, it is marked as internal.; //; // This transformation would not be legal in a regular compilation, but it gets; // extra information from the linker about what is safe.; //; // For example: Internalizing a function with external linkage. Only if we are; // told it is only used from within this module, it is safe to do it.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/Internalize.cpp:732,safe,safe,732,interpreter/llvm-project/llvm/lib/Transforms/IPO/Internalize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/Internalize.cpp,2,['safe'],['safe']
Safety,"//===-- LCSSA.cpp - Convert loops into loop-closed SSA form ---------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass transforms loops by placing phi nodes at the end of the loops for; // all values that are live across the loop boundary. For example, it turns; // the left into the right code:; //; // for (...) for (...); // if (c) if (c); // X1 = ... X1 = ...; // else else; // X2 = ... X2 = ...; // X3 = phi(X1, X2) X3 = phi(X1, X2); // ... = X3 + 4 X4 = phi(X3); // ... = X4 + 4; //; // This is still valid LLVM; the extra phi nodes are purely redundant, and will; // be trivially eliminated by InstCombine. The major benefit of this; // transformation is that it makes many other loop optimizations, such as; // LoopUnswitching, simpler.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LCSSA.cpp:824,redund,redundant,824,interpreter/llvm-project/llvm/lib/Transforms/Utils/LCSSA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LCSSA.cpp,1,['redund'],['redundant']
Safety,"//===-- LICM.cpp - Loop Invariant Code Motion Pass ------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass performs loop invariant code motion, attempting to remove as much; // code from the body of a loop as possible. It does this by either hoisting; // code into the preheader block, or by sinking code to the exit blocks if it is; // safe. This pass also promotes must-aliased memory locations in the loop to; // live in registers, thus hoisting and sinking ""invariant"" loads and stores.; //; // Hoisting operations out of loops is a canonicalization transform. It; // enables and simplifies subsequent optimizations in the middle-end.; // Rematerialization of hoisted instructions to reduce register pressure is the; // responsibility of the back-end, which has more accurate information about; // register pressure and also handles other optimizations than LICM that; // increase live-ranges.; //; // This pass uses alias analysis for two purposes:; //; // 1. Moving loop invariant loads and calls out of loops. If we can determine; // that a load or call inside of a loop never aliases anything stored to,; // we can hoist it or sink it like any other instruction.; // 2. Scalar Promotion of Memory - If there is a store instruction inside of; // the loop, we try to move the store to happen AFTER the loop instead of; // inside of the loop. This can only happen if a few conditions are true:; // A. The pointer stored through is loop invariant; // B. There are no stores or loads in the loop which _may_ alias the; // pointer. There are no calls in the loop which mod/ref the pointer.; // If these conditions are true, we can promote the loads and stores in the; // loop of the pointer to use a temporary all",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LICM.cpp:623,safe,safe,623,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LICM.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LICM.cpp,1,['safe'],['safe']
Safety,"//===-- LibCallsShrinkWrap.cpp ----------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass shrink-wraps a call to function if the result is not used.; // The call can set errno but is otherwise side effect free. For example:; // sqrt(val);; // is transformed to; // if (val < 0); // sqrt(val);; // Even if the result of library call is not being used, the compiler cannot; // safely delete the call because the function can set errno on error; // conditions.; // Note in many functions, the error condition solely depends on the incoming; // parameter. In this optimization, we can generate the condition can lead to; // the errno to shrink-wrap the call. Since the chances of hitting the error; // condition is low, the runtime call is effectively eliminated.; //; // These partially dead calls are usually results of C++ abstraction penalty; // exposed by inlining.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LibCallsShrinkWrap.cpp:678,safe,safely,678,interpreter/llvm-project/llvm/lib/Transforms/Utils/LibCallsShrinkWrap.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LibCallsShrinkWrap.cpp,1,['safe'],['safely']
Safety,"//===-- LookupAndRecordAddrs.h - Symbol lookup support utility --*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Record the addresses of a set of symbols into ExecutorAddr objects.; //; // This can be used to avoid repeated lookup (via ExecutionSession::lookup) of; // the given symbols.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LookupAndRecordAddrs.h:479,avoid,avoid,479,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LookupAndRecordAddrs.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LookupAndRecordAddrs.h,1,['avoid'],['avoid']
Safety,"//===-- MLxExpansionPass.cpp - Expand MLx instrs to avoid hazards ---------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Expand VFP / NEON floating point MLA / MLS instructions (each to a pair of; // multiple and add / sub instructions) when special VMLx hazards are detected.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/MLxExpansionPass.cpp:52,avoid,avoid,52,interpreter/llvm-project/llvm/lib/Target/ARM/MLxExpansionPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/MLxExpansionPass.cpp,4,"['avoid', 'detect', 'hazard']","['avoid', 'detected', 'hazards']"
Safety,"//===-- MPIBugReporter.cpp - bug reporter -----------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This file defines prefabricated reports which are emitted in; /// case of MPI related bugs, detected by path-sensitive analysis.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/MPI-Checker/MPIBugReporter.cpp:488,detect,detected,488,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/MPI-Checker/MPIBugReporter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/MPI-Checker/MPIBugReporter.cpp,1,['detect'],['detected']
Safety,"//===-- MPIBugReporter.h - bug reporter -----------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This file defines prefabricated reports which are emitted in; /// case of MPI related bugs, detected by path-sensitive analysis.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/MPI-Checker/MPIBugReporter.h:486,detect,detected,486,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/MPI-Checker/MPIBugReporter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/MPI-Checker/MPIBugReporter.h,1,['detect'],['detected']
Safety,"//===-- MipsExpandPseudoInsts.cpp - Expand pseudo instructions ------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file contains a pass that expands pseudo instructions into target; // instructions to allow proper scheduling, if-conversion, and other late; // optimizations. This pass should be run after register allocation but before; // the post-regalloc scheduling pass.; //; // This is currently only used for expanding atomic pseudos after register; // allocation. We do this to avoid the fast register allocator introducing; // spills between ll and sc. These stores cause some MIPS implementations to; // abort the atomic RMW sequence.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsExpandPseudo.cpp:758,avoid,avoid,758,interpreter/llvm-project/llvm/lib/Target/Mips/MipsExpandPseudo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsExpandPseudo.cpp,2,"['abort', 'avoid']","['abort', 'avoid']"
Safety,"//===-- NVPTXPeephole.cpp - NVPTX Peephole Optimiztions -------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // In NVPTX, NVPTXFrameLowering will emit following instruction at the beginning; // of a MachineFunction.; //; // mov %SPL, %depot; // cvta.local %SP, %SPL; //; // Because Frame Index is a generic address and alloca can only return generic; // pointer, without this pass the instructions producing alloca'ed address will; // be based on %SP. NVPTXLowerAlloca tends to help replace store and load on; // this address with their .local versions, but this may introduce a lot of; // cvta.to.local instructions. Performance can be improved if we avoid casting; // address back and forth and directly calculate local address based on %SPL.; // This peephole pass optimizes these cases, for example; //; // It will transform the following pattern; // %0 = LEA_ADDRi64 %VRFrame64, 4; // %1 = cvta_to_local_yes_64 %0; //; // into; // %1 = LEA_ADDRi64 %VRFrameLocal64, 4; //; // %VRFrameLocal64 is the virtual register name of %SPL; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXPeephole.cpp:923,avoid,avoid,923,interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXPeephole.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXPeephole.cpp,1,['avoid'],['avoid']
Safety,"//===-- OProfileWrapper.h - OProfile JIT API Wrapper ------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; // This file defines a OProfileWrapper object that detects if the oprofile; // daemon is running, and provides wrappers for opagent functions used to; // communicate with the oprofile JIT interface. The dynamic library libopagent; // does not need to be linked directly as this object lazily loads the library; // when the first op_ function is called.; //; // See http://oprofile.sourceforge.net/doc/devel/jit-interface.html for the; // definition of the interface.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/OProfileWrapper.h:427,detect,detects,427,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/OProfileWrapper.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/OProfileWrapper.h,1,['detect'],['detects']
Safety,"//===-- PPCHazardRecognizers.cpp - PowerPC Hazard Recognizer Impls --------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements hazard recognizers for scheduling on PowerPC processors.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCHazardRecognizers.cpp:43,Hazard,Hazard,43,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCHazardRecognizers.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCHazardRecognizers.cpp,2,"['Hazard', 'hazard']","['Hazard', 'hazard']"
Safety,"//===-- PPCHazardRecognizers.h - PowerPC Hazard Recognizers -----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines hazard recognizers for scheduling on PowerPC processors.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCHazardRecognizers.h:41,Hazard,Hazard,41,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCHazardRecognizers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCHazardRecognizers.h,2,"['Hazard', 'hazard']","['Hazard', 'hazard']"
Safety,"//===-- RISCVExpandAtomicPseudoInsts.cpp - Expand atomic pseudo instrs. ---===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file contains a pass that expands atomic pseudo instructions into; // target instructions. This pass should be run at the last possible moment,; // avoiding the possibility for other passes to break the requirements for; // forward progress in the LR/SC block.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVExpandAtomicPseudoInsts.cpp:536,avoid,avoiding,536,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVExpandAtomicPseudoInsts.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVExpandAtomicPseudoInsts.cpp,1,['avoid'],['avoiding']
Safety,"//===-- RISCVInsertWriteVXRM.cpp - Insert Write of RISC-V VXRM CSR --------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass inserts writes to the VXRM CSR as needed by vector instructions.; // Each instruction that uses VXRM carries an operand that contains its required; // VXRM value. This pass tries to optimize placement to avoid redundant writes; // to VXRM.; //; // This is done using 2 dataflow algorithms. The first is a forward data flow; // to calculate where a VXRM value is available. The second is a backwards; // dataflow to determine where a VXRM value is anticipated.; //; // Finally, we use the results of these two dataflows to insert VXRM writes; // where a value is anticipated, but not available.; //; // FIXME: This pass does not split critical edges, so there can still be some; // redundancy.; //; // FIXME: If we are willing to have writes that aren't always needed, we could; // reduce the number of VXRM writes in some cases.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVInsertWriteVXRM.cpp:597,avoid,avoid,597,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVInsertWriteVXRM.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVInsertWriteVXRM.cpp,3,"['avoid', 'redund']","['avoid', 'redundancy', 'redundant']"
Safety,"//===-- SPIRVPreLegalizer.cpp - prepare IR for legalization -----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // The pass prepares IR for legalization: it assigns SPIR-V types to registers; // and removes intrinsics which holded these types during IR translation.; // Also it processes constants and registers them in GR to avoid duplication.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SPIRV/SPIRVPreLegalizer.cpp:594,avoid,avoid,594,interpreter/llvm-project/llvm/lib/Target/SPIRV/SPIRVPreLegalizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SPIRV/SPIRVPreLegalizer.cpp,1,['avoid'],['avoid']
Safety,"//===-- SafepointIRVerifier.cpp - Verify gc.statepoint invariants ---------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Run a basic correctness check on the IR to ensure that Safepoints - if; // they've been inserted - were inserted correctly. In particular, look for use; // of non-relocated values after a safepoint. It's primary use is to check the; // correctness of safepoint insertion immediately after insertion, but it can; // also be used to verify that later transforms have not found a way to break; // safepoint semenatics.; //; // In its current form, this verify checks a property which is sufficient, but; // not neccessary for correctness. There are some cases where an unrelocated; // pointer can be used after the safepoint. Consider this example:; //; // a = ...; // b = ...; // (a',b') = safepoint(a,b); // c = cmp eq a b; // br c, ..., ....; //; // Because it is valid to reorder 'c' above the safepoint, this is legal. In; // practice, this is a somewhat uncommon transform, but CodeGenPrep does create; // idioms like this. The verifier knows about these cases and avoids reporting; // false positives.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/SafepointIRVerifier.cpp:8,Safe,SafepointIRVerifier,8,interpreter/llvm-project/llvm/lib/IR/SafepointIRVerifier.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/SafepointIRVerifier.cpp,9,"['Safe', 'avoid', 'safe']","['SafepointIRVerifier', 'Safepoints', 'avoids', 'safepoint']"
Safety,"//===-- SpecialCaseList.cpp - special case list for sanitizers ------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This is a utility class for instrumentation passes (like AddressSanitizer; // or ThreadSanitizer) to avoid instrumenting some functions or global; // variables, or to instrument some functions or global variables in a specific; // way, based on a user-supplied list.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/SpecialCaseList.cpp:484,avoid,avoid,484,interpreter/llvm-project/llvm/lib/Support/SpecialCaseList.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/SpecialCaseList.cpp,1,['avoid'],['avoid']
Safety,"//===-- SymbolStringPool.h -- Thread-safe pool for JIT symbols --*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Contains a thread-safe string pool suitable for use with ORC.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/SymbolStringPool.h:37,safe,safe,37,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/SymbolStringPool.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/SymbolStringPool.h,2,['safe'],['safe']
Safety,"//===-- ThreadSafeModule.cpp - Thread safe Module, Context, and Utilities; //h-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/Orc/ThreadSafeModule.cpp:38,safe,safe,38,interpreter/llvm-project/llvm/lib/ExecutionEngine/Orc/ThreadSafeModule.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/Orc/ThreadSafeModule.cpp,1,['safe'],['safe']
Safety,"//===-- ThreadSanitizer.cpp - race detector -------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file is a part of ThreadSanitizer, a race detector.; //; // The tool is under development, for the details about previous versions see; // http://code.google.com/p/data-race-test; //; // The instrumentation phase is quite simple:; // - Insert calls to run-time library before every memory access.; // - Optimizations may apply to avoid instrumenting some of the accesses.; // - Insert calls at function entry/exit.; // The rest is handled by the run-time library.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/ThreadSanitizer.cpp:35,detect,detector,35,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/ThreadSanitizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/ThreadSanitizer.cpp,3,"['avoid', 'detect']","['avoid', 'detector']"
Safety,"//===-- UncheckedOptionalAccessModel.cpp ------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines a dataflow analysis that detects unsafe uses of optional; // values.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/Models/UncheckedOptionalAccessModel.cpp:426,detect,detects,426,interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/Models/UncheckedOptionalAccessModel.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/Models/UncheckedOptionalAccessModel.cpp,2,"['detect', 'unsafe']","['detects', 'unsafe']"
Safety,"//===-- UncheckedOptionalAccessModel.h --------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines a dataflow analysis that detects unsafe uses of optional; // values.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/Models/UncheckedOptionalAccessModel.h:426,detect,detects,426,interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/Models/UncheckedOptionalAccessModel.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/Models/UncheckedOptionalAccessModel.h,2,"['detect', 'unsafe']","['detects', 'unsafe']"
Safety,"//===-- WebAssemblyFixFunctionBitcasts.cpp - Fix function bitcasts --------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// Fix bitcasted functions.; ///; /// WebAssembly requires caller and callee signatures to match, however in LLVM,; /// some amount of slop is vaguely permitted. Detect mismatch by looking for; /// bitcasts of functions and rewrite them to use wrapper functions instead.; ///; /// This doesn't catch all cases, such as when a function's address is taken in; /// one place and casted in another, but it works for many common cases.; ///; /// Note that LLVM already optimizes away function bitcasts in common cases by; /// dropping arguments as needed, so this pass only ends up getting used in less; /// common cases.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyFixFunctionBitcasts.cpp:555,Detect,Detect,555,interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyFixFunctionBitcasts.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyFixFunctionBitcasts.cpp,1,['Detect'],['Detect']
Safety,"//===-- X86FixupBWInsts.cpp - Fixup Byte or Word instructions -----------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; /// This file defines the pass that looks through the machine instructions; /// late in the compilation, and finds byte or word instructions that; /// can be profitably replaced with 32 bit instructions that give equivalent; /// results for the bits of the results that are used. There are two possible; /// reasons to do this.; ///; /// One reason is to avoid false-dependences on the upper portions; /// of the registers. Only instructions that have a destination register; /// which is not in any of the source registers can be affected by this.; /// Any instruction where one of the source registers is also the destination; /// register is unaffected, because it has a true dependence on the source; /// register already. So, this consideration primarily affects load; /// instructions and register-to-register moves. It would; /// seem like cmov(s) would also be affected, but because of the way cmov is; /// really implemented by most machines as reading both the destination and; /// and source registers, and then ""merging"" the two based on a condition,; /// it really already should be considered as having a true dependence on the; /// destination register as well.; ///; /// The other reason to do this is for potential code size savings. Word; /// operations need an extra override byte compared to their 32 bit; /// versions. So this can convert many word operations to their larger; /// size, saving a byte in encoding. This could introduce partial register; /// dependences where none existed however. As an example take:; /// orw ax, $0x1000; /// addw ax, $3; /// now if this were to get transformed",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FixupBWInsts.cpp:740,avoid,avoid,740,interpreter/llvm-project/llvm/lib/Target/X86/X86FixupBWInsts.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FixupBWInsts.cpp,1,['avoid'],['avoid']
Safety,"//===-- X86FloatingPoint.cpp - Floating point Reg -> Stack converter ------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the pass which converts floating point instructions from; // pseudo registers into register stack instructions. This pass uses live; // variable information to indicate where the FPn registers are used and their; // lifetimes.; //; // The x87 hardware tracks liveness of the stack registers, so it is necessary; // to implement exact liveness tracking between basic blocks. The CFG edges are; // partitioned into bundles where the same FP registers must be live in; // identical stack positions. Instructions are inserted at the end of each basic; // block to rearrange the live registers to match the outgoing bundle.; //; // This approach avoids splitting critical edges at the potential cost of more; // live register shuffling instructions when critical edges are present.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FloatingPoint.cpp:1042,avoid,avoids,1042,interpreter/llvm-project/llvm/lib/Target/X86/X86FloatingPoint.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FloatingPoint.cpp,1,['avoid'],['avoids']
Safety,"//===-- examples/ParallelJIT/ParallelJIT.cpp - Exercise threaded-safe JIT -===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Parallel JIT; //; // This test program creates two LLVM functions then calls them from three; // separate threads. It requires the pthreads library.; // The three threads are created and then block waiting on a condition variable.; // Once all threads are blocked on the conditional variable, the main thread; // wakes them up. This complicated work is performed so that all three threads; // call into the JIT at the same time (or the best possible approximation of the; // same time). This test had assertion errors until I got the locking right.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ParallelJIT/ParallelJIT.cpp:65,safe,safe,65,interpreter/llvm-project/llvm/examples/ParallelJIT/ParallelJIT.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ParallelJIT/ParallelJIT.cpp,1,['safe'],['safe']
Safety,"//===-- llvm/CodeGen/LowLevelType.cpp -------------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file This file implements the more header-heavy bits of the LLT class to; /// avoid polluting users' namespaces.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LowLevelType.cpp:463,avoid,avoid,463,interpreter/llvm-project/llvm/lib/CodeGen/LowLevelType.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LowLevelType.cpp,1,['avoid'],['avoid']
Safety,"//===-- llvm/CodeGen/LowLevelTypeUtils.cpp --------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file This file implements the more header-heavy bits of the LLT class to; /// avoid polluting users' namespaces.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LowLevelTypeUtils.cpp:463,avoid,avoid,463,interpreter/llvm-project/llvm/lib/CodeGen/LowLevelTypeUtils.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LowLevelTypeUtils.cpp,1,['avoid'],['avoid']
Safety,"//===-- llvm/Support/CRC.h - Cyclic Redundancy Check-------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file contains implementations of CRC functions.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/CRC.h:36,Redund,Redundancy,36,interpreter/llvm-project/llvm/include/llvm/Support/CRC.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/CRC.h,1,['Redund'],['Redundancy']
Safety,"//===-- llvm/SymbolTableListTraitsImpl.h - Implementation ------*- C++ -*--===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the stickier parts of the SymbolTableListTraits class,; // and is explicitly instantiated where needed to avoid defining all this code; // in a widely used header.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/SymbolTableListTraitsImpl.h:510,avoid,avoid,510,interpreter/llvm-project/llvm/lib/IR/SymbolTableListTraitsImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/SymbolTableListTraitsImpl.h,1,['avoid'],['avoid']
Safety,"//===--- AMDGPUIGroupLP.cpp - AMDGPU IGroupLP ------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // \file This file defines a set of schedule DAG mutations that can be used to; // override default scheduler behavior to enforce specific scheduling patterns.; // They should be used in cases where runtime performance considerations such as; // inter-wavefront interactions, mean that compile-time heuristics cannot; // predict the optimal instruction ordering, or in kernels where optimum; // instruction scheduling is important enough to warrant manual intervention.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUIGroupLP.cpp:684,predict,predict,684,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUIGroupLP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUIGroupLP.cpp,1,['predict'],['predict']
Safety,"//===--- ASTTypeTraits.cpp --------------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Provides a dynamic type identifier and a dynamically typed node container; // that can be used to store an AST base node at runtime in the same storage in; // a type safe way.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTTypeTraits.cpp:549,safe,safe,549,interpreter/llvm-project/clang/lib/AST/ASTTypeTraits.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTTypeTraits.cpp,1,['safe'],['safe']
Safety,"//===--- ASTTypeTraits.h ----------------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Provides a dynamic type identifier and a dynamically typed node container; // that can be used to store an AST base node at runtime in the same storage in; // a type safe way.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTTypeTraits.h:549,safe,safe,549,interpreter/llvm-project/clang/include/clang/AST/ASTTypeTraits.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTTypeTraits.h,1,['safe'],['safe']
Safety,"//===--- CRC.cpp - Cyclic Redundancy Check implementation -----------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file contains implementations of CRC functions.; //; // The implementation technique is the one mentioned in:; // D. V. Sarwate. 1988. Computation of cyclic redundancy checks via table; // look-up. Commun. ACM 31, 8 (August 1988); //; // See also Ross N. Williams ""A Painless Guide to CRC Error Detection; // Algorithms"" (https://zlib.net/crc_v3.txt) or Hacker's Delight (2nd ed.); // Chapter 14 (Figure 14-7 in particular) for how the algorithm works.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CRC.cpp:26,Redund,Redundancy,26,interpreter/llvm-project/llvm/lib/Support/CRC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CRC.cpp,3,"['Detect', 'Redund', 'redund']","['Detection', 'Redundancy', 'redundancy']"
Safety,"//===--- CloneChecker.cpp - Clone detection checker -------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// CloneChecker is a checker that reports clones in the current translation; /// unit.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CloneChecker.cpp:34,detect,detection,34,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CloneChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CloneChecker.cpp,1,['detect'],['detection']
Safety,"//===--- CrashRecoveryContext.cpp - Crash Recovery ------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp:42,Recover,Recovery,42,interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp,1,['Recover'],['Recovery']
Safety,"//===--- CrashRecoveryContext.h - Crash Recovery ----------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/CrashRecoveryContext.h:40,Recover,Recovery,40,interpreter/llvm-project/llvm/include/llvm/Support/CrashRecoveryContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/CrashRecoveryContext.h,1,['Recover'],['Recovery']
Safety,"//===--- Distro.cpp - Linux distribution detection support ------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Distro.cpp:41,detect,detection,41,interpreter/llvm-project/clang/lib/Driver/Distro.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Distro.cpp,1,['detect'],['detection']
Safety,"//===--- Distro.h - Linux distribution detection support --------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Distro.h:39,detect,detection,39,interpreter/llvm-project/clang/include/clang/Driver/Distro.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Distro.h,1,['detect'],['detection']
Safety,"//===--- DummyDemanglerMain.cpp - Entry point to sanity check the fuzzer --===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Implementation of main so we can build and test without linking libFuzzer.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-microsoft-demangle-fuzzer/DummyDemanglerFuzzer.cpp:49,sanity check,sanity check,49,interpreter/llvm-project/llvm/tools/llvm-microsoft-demangle-fuzzer/DummyDemanglerFuzzer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-microsoft-demangle-fuzzer/DummyDemanglerFuzzer.cpp,1,['sanity check'],['sanity check']
Safety,"//===--- DummyOptFuzzer.cpp - Entry point to sanity check the fuzzer ------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Implementation of main so we can build and test without linking libFuzzer.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-opt-fuzzer/DummyOptFuzzer.cpp:45,sanity check,sanity check,45,interpreter/llvm-project/llvm/tools/llvm-opt-fuzzer/DummyOptFuzzer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-opt-fuzzer/DummyOptFuzzer.cpp,1,['sanity check'],['sanity check']
Safety,"//===--- Duration.h - wrapper around std::chrono::Duration ------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // The sole purpose of this file is to avoid the dependency on <chrono> in; // raw_ostream.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Duration.h:419,avoid,avoid,419,interpreter/llvm-project/llvm/include/llvm/Support/Duration.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Duration.h,1,['avoid'],['avoid']
Safety,"//===--- HexagonHazardRecognizer.h - Hexagon Post RA Hazard Recognizer ----===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; // This file defines the hazard recognizer for scheduling on Hexagon.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonHazardRecognizer.h:53,Hazard,Hazard,53,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonHazardRecognizer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonHazardRecognizer.h,2,"['Hazard', 'hazard']","['Hazard', 'hazard']"
Safety,"//===--- LazyDetector.h - Lazy ToolChain Detection --------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/LazyDetector.h:41,Detect,Detection,41,interpreter/llvm-project/clang/lib/Driver/ToolChains/LazyDetector.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/LazyDetector.h,1,['Detect'],['Detection']
Safety,"//===--- MSVCErrorWorkarounds.h - Enable future<Error> in MSVC --*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // MSVC's promise/future implementation requires types to be default; // constructible, so this header provides analogues of Error an Expected; // that are default constructed in a safely destructible state.; //; // FIXME: Kill off this header and migrate all users to Error/Expected once we; // move to MSVC versions that support non-default-constructible types.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MSVCErrorWorkarounds.h:561,safe,safely,561,interpreter/llvm-project/llvm/include/llvm/Support/MSVCErrorWorkarounds.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MSVCErrorWorkarounds.h,1,['safe'],['safely']
Safety,"//===--- ROCm.h - ROCm installation detector --------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/ROCm.h:36,detect,detector,36,interpreter/llvm-project/clang/lib/Driver/ToolChains/ROCm.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/ROCm.h,1,['detect'],['detector']
Safety,"//===--- SourceLocationEncoding.h - Small serialized locations --*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Source locations are stored pervasively in the AST, making up a third of; // the size of typical serialized files. Storing them efficiently is important.; //; // We use integers optimized by VBR-encoding, because:; // - when abbreviations cannot be used, VBR6 encoding is our only choice; // - in the worst case a SourceLocation can be ~any 32-bit number, but in; // practice they are highly predictable; //; // We encode the integer so that likely values encode as small numbers that; // turn into few VBR chunks:; // - the invalid sentinel location is a very common value: it encodes as 0; // - the ""macro or not"" bit is stored at the bottom of the integer; // (rather than at the top, as in memory), so macro locations can have; // small representations.; // - related locations (e.g. of a left and right paren pair) are usually; // similar, so when encoding a sequence of locations we store only; // differences between successive elements.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/SourceLocationEncoding.h:775,predict,predictable,775,interpreter/llvm-project/clang/include/clang/Serialization/SourceLocationEncoding.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/SourceLocationEncoding.h,1,['predict'],['predictable']
Safety,"//===--- TerminalConfigUnix.cpp - termios storage -------------*- C++ -*-===//; //; // The LLVM Compiler Infrastructure; //; // This file is distributed under the University of Illinois Open Source; // License. See LICENSE.TXT for details.; //; //===----------------------------------------------------------------------===//; //; // TerminalReader and TerminalDisplay need to reset the terminal configuration; // upon destruction, to leave the terminal as before. To avoid a possible; // misunderstanding of what ""before"" means, centralize their storage of the; // previous termios and have them share it.; //; // Axel Naumann <axel@cern.ch>, 2011-05-12; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/textinput/src/textinput/TerminalConfigUnix.cpp:468,avoid,avoid,468,core/textinput/src/textinput/TerminalConfigUnix.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/textinput/src/textinput/TerminalConfigUnix.cpp,1,['avoid'],['avoid']
Safety,"//===--- TerminalConfigUnix.cpp - termios storage ---------------*- C++ -*-===//; //; // The LLVM Compiler Infrastructure; //; // This file is distributed under the University of Illinois Open Source; // License. See LICENSE.TXT for details.; //; //===----------------------------------------------------------------------===//; //; // TerminalReader and TerminalDisplay need to reset the terminal configuration; // upon destruction, to leave the terminal as before. To avoid a possible; // misunderstanding of what ""before"" means, centralize their storage of the; // previous termios and have them share it.; //; // Axel Naumann <axel@cern.ch>, 2011-05-12; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/textinput/src/textinput/TerminalConfigUnix.h:470,avoid,avoid,470,core/textinput/src/textinput/TerminalConfigUnix.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/textinput/src/textinput/TerminalConfigUnix.h,1,['avoid'],['avoid']
Safety,"//===--- TokenConcatenation.cpp - Token Concatenation Avoidance -----------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the TokenConcatenation class.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/TokenConcatenation.cpp:54,Avoid,Avoidance,54,interpreter/llvm-project/clang/lib/Lex/TokenConcatenation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/TokenConcatenation.cpp,1,['Avoid'],['Avoidance']
Safety,"//===--- TokenConcatenation.h - Token Concatenation Avoidance ---*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the TokenConcatenation class.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/TokenConcatenation.h:52,Avoid,Avoidance,52,interpreter/llvm-project/clang/include/clang/Lex/TokenConcatenation.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/TokenConcatenation.h,1,['Avoid'],['Avoidance']
Safety,"//===--- TransAPIUses.cpp - Transformations to ARC mode -------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // checkAPIUses:; //; // Emits error/fix with some API uses that are obsolete or not safe in ARC mode:; //; // - NSInvocation's [get/set]ReturnValue and [get/set]Argument are only safe; // with __unsafe_unretained objects.; // - Calling -zone gets replaced with 'nil'.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ARCMigrate/TransAPIUses.cpp:465,safe,safe,465,interpreter/llvm-project/clang/lib/ARCMigrate/TransAPIUses.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ARCMigrate/TransAPIUses.cpp,2,['safe'],['safe']
Safety,"//===--- VarBypassDetector.cpp - Bypass jumps detector ------------*- C++ -*-=//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/VarBypassDetector.cpp:46,detect,detector,46,interpreter/llvm-project/clang/lib/CodeGen/VarBypassDetector.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/VarBypassDetector.cpp,1,['detect'],['detector']
Safety,"//===--- VarBypassDetector.h - Bypass jumps detector --------------*- C++ -*-=//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file contains VarBypassDetector class, which is used to detect; // local variable declarations which can be bypassed by jumps.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/VarBypassDetector.h:44,detect,detector,44,interpreter/llvm-project/clang/lib/CodeGen/VarBypassDetector.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/VarBypassDetector.h,2,['detect'],"['detect', 'detector']"
Safety,"//===---- X86FixupSetCC.cpp - optimize usage of LEA instructions ----------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines a pass that fixes zero-extension of setcc patterns.; // X86 setcc instructions are modeled to have no input arguments, and a single; // GR8 output argument. This is consistent with other similar instructions; // (e.g. movb), but means it is impossible to directly generate a setcc into; // the lower GR8 of a specified GR32.; // This means that ISel must select (zext (setcc)) into something like; // seta %al; movzbl %al, %eax.; // Unfortunately, this can cause a stall due to the partial register write; // performed by the setcc. Instead, we can use:; // xor %eax, %eax; seta %al; // This both avoids the stall, and encodes shorter.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FixupSetCC.cpp:998,avoid,avoids,998,interpreter/llvm-project/llvm/lib/Target/X86/X86FixupSetCC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FixupSetCC.cpp,1,['avoid'],['avoids']
Safety,"//===---- llvm/IRReader/IRReader.h - Reader for LLVM IR files ---*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines functions for reading LLVM IR. They support both; // Bitcode and Assembly, automatically detecting the input format.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IRReader/IRReader.h:490,detect,detecting,490,interpreter/llvm-project/llvm/include/llvm/IRReader/IRReader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IRReader/IRReader.h,1,['detect'],['detecting']
Safety,"//===----- PostRAHazardRecognizer.cpp - hazard recognizer -----------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file; /// This runs the hazard recognizer and emits noops when necessary. This; /// gives targets a way to run the hazard recognizer without running one of; /// the schedulers. Example use cases for this pass would be:; ///; /// - Targets that need the hazard recognizer to be run at -O0.; /// - Targets that want to guarantee that hazards at the beginning of; /// scheduling regions are handled correctly. The post-RA scheduler is; /// a top-down scheduler, but when there are multiple scheduling regions; /// in a basic block, it visits the regions in bottom-up order. This; /// makes it impossible for the scheduler to gauranttee it can correctly; /// handle hazards at the beginning of scheduling regions.; ///; /// This pass traverses all the instructions in a program in top-down order.; /// In contrast to the instruction scheduling passes, this pass never resets; /// the hazard recognizer to ensure it can correctly handles noop hazards at; /// the beginning of blocks.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/PostRAHazardRecognizer.cpp:40,hazard,hazard,40,interpreter/llvm-project/llvm/lib/CodeGen/PostRAHazardRecognizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/PostRAHazardRecognizer.cpp,8,['hazard'],"['hazard', 'hazards']"
Safety,"//===----- SchedulePostRAList.cpp - list scheduler ------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This implements a top-down list scheduler, using standard algorithms.; // The basic approach uses a priority queue of available nodes to schedule.; // One at a time, nodes are taken from the priority queue (thus in priority; // order), checked for legality to schedule, and emitted if legal.; //; // Nodes may not be legal to schedule either due to structural hazards (e.g.; // pipeline or resource constraints) or because an input to the instruction has; // not completed execution.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/PostRASchedulerList.cpp:743,hazard,hazards,743,interpreter/llvm-project/llvm/lib/CodeGen/PostRASchedulerList.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/PostRASchedulerList.cpp,1,['hazard'],['hazards']
Safety,"//===----- TypePromotion.cpp ----------------------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file; /// This is an opcode based type promotion pass for small types that would; /// otherwise be promoted during legalisation. This works around the limitations; /// of selection dag for cyclic regions. The search begins from icmp; /// instructions operands where a tree, consisting of non-wrapping or safe; /// wrapping instructions, is built, checked and promoted if possible.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TypePromotion.cpp:689,safe,safe,689,interpreter/llvm-project/llvm/lib/CodeGen/TypePromotion.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TypePromotion.cpp,1,['safe'],['safe']
Safety,"//===----- X86AvoidTrailingCall.cpp - Insert int3 after trailing calls ----===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // The Windows x64 unwinder decodes the instruction stream during unwinding.; // The unwinder decodes forward from the current PC to detect epilogue code; // patterns.; //; // First, this means that there must be an instruction after every; // call instruction for the unwinder to decode. LLVM must maintain the invariant; // that the last instruction of a function or funclet is not a call, or the; // unwinder may decode into the next function. Similarly, a call may not; // immediately precede an epilogue code pattern. As of this writing, the; // SEH_Epilogue pseudo instruction takes care of that.; //; // Second, all non-tail call jump targets must be within the *half-open*; // interval of the bounds of the function. The unwinder distinguishes between; // internal jump instructions and tail calls in an epilogue sequence by checking; // the jump target against the function bounds from the .pdata section. This; // means that the last regular MBB of an LLVM function must not be empty if; // there are regular jumps targeting it.; //; // This pass upholds these invariants by ensuring that blocks at the end of a; // function or funclet are a) not empty and b) do not end in a CALL instruction.; //; // Unwinder implementation for reference:; // https://github.com/dotnet/coreclr/blob/a9f3fc16483eecfc47fb79c362811d870be02249/src/unwinder/amd64/unwinder_amd64.cpp#L1015; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86AvoidTrailingCall.cpp:513,detect,detect,513,interpreter/llvm-project/llvm/lib/Target/X86/X86AvoidTrailingCall.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86AvoidTrailingCall.cpp,1,['detect'],['detect']
Safety,"//===----- X86DynAllocaExpander.cpp - Expand DynAlloca pseudo instruction -===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines a pass that expands DynAlloca pseudo-instructions.; //; // It performs a conservative analysis to determine whether each allocation; // falls within a region of the stack that is safe to use, or whether stack; // probes must be emitted.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86DynAllocaExpander.cpp:580,safe,safe,580,interpreter/llvm-project/llvm/lib/Target/X86/X86DynAllocaExpander.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86DynAllocaExpander.cpp,1,['safe'],['safe']
Safety,"//===----------- ThreadSafeModule.h -- Layer interfaces ---------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Thread safe wrappers and utilities for Module and LLVMContext.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ThreadSafeModule.h:390,safe,safe,390,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ThreadSafeModule.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ThreadSafeModule.h,1,['safe'],['safe']
Safety,"//===-------------- BPFMIPeephole.cpp - MI Peephole Cleanups -------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass performs peephole optimizations to cleanup ugly code sequences at; // MachineInstruction layer.; //; // Currently, there are two optimizations implemented:; // - One pre-RA MachineSSA pass to eliminate type promotion sequences, those; // zero extend 32-bit subregisters to 64-bit registers, if the compiler; // could prove the subregisters is defined by 32-bit operations in which; // case the upper half of the underlying 64-bit registers were zeroed; // implicitly.; //; // - One post-RA PreEmit pass to do final cleanup on some redundant; // instructions generated due to bad RA on subregister.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/BPF/BPFMIPeephole.cpp:923,redund,redundant,923,interpreter/llvm-project/llvm/lib/Target/BPF/BPFMIPeephole.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/BPF/BPFMIPeephole.cpp,1,['redund'],['redundant']
Safety,"//===-------------- GCNRewritePartialRegUses.cpp --------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; /// RenameIndependentSubregs pass leaves large partially used super registers,; /// for example:; /// undef %0.sub4:VReg_1024 = ...; /// %0.sub5:VReg_1024 = ...; /// %0.sub6:VReg_1024 = ...; /// %0.sub7:VReg_1024 = ...; /// use %0.sub4_sub5_sub6_sub7; /// use %0.sub6_sub7; ///; /// GCNRewritePartialRegUses goes right after RenameIndependentSubregs and; /// rewrites such partially used super registers with registers of minimal size:; /// undef %0.sub0:VReg_128 = ...; /// %0.sub1:VReg_128 = ...; /// %0.sub2:VReg_128 = ...; /// %0.sub3:VReg_128 = ...; /// use %0.sub0_sub1_sub2_sub3; /// use %0.sub2_sub3; ///; /// This allows to avoid subreg lanemasks tracking during register pressure; /// calculation and creates more possibilities for the code unaware of lanemasks; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/GCNRewritePartialRegUses.cpp:1020,avoid,avoid,1020,interpreter/llvm-project/llvm/lib/Target/AMDGPU/GCNRewritePartialRegUses.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/GCNRewritePartialRegUses.cpp,1,['avoid'],['avoid']
Safety,"//===--------------- PPCVSXFMAMutate.cpp - VSX FMA Mutation ---------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass mutates the form of VSX FMA instructions to avoid unnecessary; // copies.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCVSXFMAMutate.cpp:437,avoid,avoid,437,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCVSXFMAMutate.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCVSXFMAMutate.cpp,1,['avoid'],['avoid']
Safety,"//===--------------------- llvm/CodeGen/SafeStack.h -------------*- C++-*--===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SafeStack.h:40,Safe,SafeStack,40,interpreter/llvm-project/llvm/include/llvm/CodeGen/SafeStack.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SafeStack.h,1,['Safe'],['SafeStack']
Safety,"//===----------------------- MipsBranchExpansion.cpp ----------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This pass do two things:; /// - it expands a branch or jump instruction into a long branch if its offset; /// is too large to fit into its immediate field,; /// - it inserts nops to prevent forbidden slot hazards.; ///; /// The reason why this pass combines these two tasks is that one of these two; /// tasks can break the result of the previous one.; ///; /// Example of that is a situation where at first, no branch should be expanded,; /// but after adding at least one nop somewhere in the code to prevent a; /// forbidden slot hazard, offset of some branches may go out of range. In that; /// case it is necessary to check again if there is some branch that needs; /// expansion. On the other hand, expanding some branch may cause a control; /// transfer instruction to appear in the forbidden slot, which is a hazard that; /// should be fixed. This pass alternates between this two tasks untill no; /// changes are made. Only then we can be sure that all branches are expanded; /// properly, and no hazard situations exist.; ///; /// Regarding branch expanding:; ///; /// When branch instruction like beqzc or bnezc has offset that is too large; /// to fit into its immediate field, it has to be expanded to another; /// instruction or series of instructions.; ///; /// FIXME: Fix pc-region jump instructions which cross 256MB segment boundaries.; /// TODO: Handle out of range bc, b (pseudo) instructions.; ///; /// Regarding compact branch hazard prevention:; ///; /// Hazards handled: forbidden slots for MIPSR6, FPU slots for MIPS3 and below,; /// load delay slots for MIPS1.; ///; /// A forbid",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsBranchExpansion.cpp:601,hazard,hazards,601,interpreter/llvm-project/llvm/lib/Target/Mips/MipsBranchExpansion.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsBranchExpansion.cpp,2,['hazard'],"['hazard', 'hazards']"
Safety,//===----------------------------------------------------------------------===//; // Branch processing.; //===----------------------------------------------------------------------===//; /// RecoverCastedSymbol - A helper function for ProcessBranch that is used; /// to try to recover some path-sensitivity for casts of symbolic; /// integers that promote their values (which are currently not tracked well).; /// This function returns the SVal bound to Condition->IgnoreCasts if all the; // cast(s) did was sign-extend the original value.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngine.cpp:191,Recover,RecoverCastedSymbol,191,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngine.cpp,2,"['Recover', 'recover']","['RecoverCastedSymbol', 'recover']"
Safety,"//===----------------------------------------------------------------------===//; // Cast traits; //===----------------------------------------------------------------------===//; /// All of these cast traits are meant to be implementations for useful casts; /// that users may want to use that are outside the standard behavior. An; /// example of how to use a special cast called `CastTrait` is:; ///; /// template<> struct CastInfo<foo, bar> : public CastTrait<foo, bar> {};; ///; /// Essentially, if your use case falls directly into one of the use cases; /// supported by a given cast trait, simply inherit your special CastInfo; /// directly from one of these to avoid having to reimplement the boilerplate; /// `isPossible/castFailed/doCast/doCastIfPossible`. A cast trait can also; /// provide a subset of those functions.; /// This cast trait just provides castFailed for the specified `To` type to make; /// CastInfo specializations more declarative. In order to use this, the target; /// result type must be `To` and `To` must be constructible from `nullptr`.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Casting.h:669,avoid,avoid,669,interpreter/llvm-project/llvm/include/llvm/Support/Casting.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Casting.h,1,['avoid'],['avoid']
Safety,//===----------------------------------------------------------------------===//; // CastInst SubClass Constructors; //===----------------------------------------------------------------------===//; /// Check that the construction parameters for a CastInst are correct. This; /// could be broken out into the separate constructors but it is useful to have; /// it in one place and to eliminate the redundant code for getting the sizes; /// of the types involved.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Instructions.cpp:398,redund,redundant,398,interpreter/llvm-project/llvm/lib/IR/Instructions.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Instructions.cpp,1,['redund'],['redundant']
Safety,"//===----------------------------------------------------------------------===//; // Check: Linear congruent random number generators should not be used,; // i.e. rand(), random().; //; // E. Bach, ""Efficient prediction of Marsaglia-Zaman random number generators,""; // in IEEE Transactions on Information Theory, vol. 44, no. 3, pp. 1253-1257,; // May 1998, https://doi.org/10.1109/18.669305; //; // CWE-338: Use of cryptographically weak prng; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CheckSecuritySyntaxOnly.cpp:209,predict,prediction,209,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CheckSecuritySyntaxOnly.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CheckSecuritySyntaxOnly.cpp,1,['predict'],['prediction']
Safety,//===----------------------------------------------------------------------===//; // Equality/diseqiality abstraction; //===----------------------------------------------------------------------===//; /// A small helper function for detecting symbolic (dis)equality.; ///; /// Equality check can have different forms (like a == b or a - b) and this; /// class encapsulates those away if the only thing the user wants to check -; /// whether it's equality/diseqiality or not.; ///; /// \returns true if assuming this Sym to be true means equality of operands; /// false if it means disequality of operands; /// std::nullopt otherwise,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/RangeConstraintManager.cpp:233,detect,detecting,233,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/RangeConstraintManager.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/RangeConstraintManager.cpp,1,['detect'],['detecting']
Safety,//===----------------------------------------------------------------------===//; // Error recovery.; //===----------------------------------------------------------------------===//,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/Parser.cpp:91,recover,recovery,91,interpreter/llvm-project/clang/lib/Parse/Parser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/Parser.cpp,1,['recover'],['recovery']
Safety,"//===----------------------------------------------------------------------===//; // Extra additions to <functional>; //===----------------------------------------------------------------------===//; /// An efficient, type-erasing, non-owning reference to a callable. This is; /// intended for use as the type of a function parameter that is not used; /// after the function in question returns.; ///; /// This class does not own the callable, so it is not in general safe to store; /// a function_ref.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLFunctionalExtras.h:468,safe,safe,468,interpreter/llvm-project/llvm/include/llvm/ADT/STLFunctionalExtras.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLFunctionalExtras.h,1,['safe'],['safe']
Safety,//===----------------------------------------------------------------------===//; // Global Live Range Splitting Support; //===----------------------------------------------------------------------===//; // These methods support a method of global live range splitting that uses a; // global algorithm to decide intervals for CFG edges. They will insert split; // points and color intervals in basic blocks while avoiding interference.; //; // Note that splitSingleBlock is also useful for blocks where both CFG edges; // are on the stack.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SplitKit.cpp:413,avoid,avoiding,413,interpreter/llvm-project/llvm/lib/CodeGen/SplitKit.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SplitKit.cpp,1,['avoid'],['avoiding']
Safety,//===----------------------------------------------------------------------===//; // Hazard Recognizer Implementation; //===----------------------------------------------------------------------===//,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/GCNHazardRecognizer.cpp:85,Hazard,Hazard,85,interpreter/llvm-project/llvm/lib/Target/AMDGPU/GCNHazardRecognizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/GCNHazardRecognizer.cpp,1,['Hazard'],['Hazard']
Safety,//===----------------------------------------------------------------------===//; // IdDeclInfoMap class; //===----------------------------------------------------------------------===//; /// IdDeclInfoMap - Associates IdDeclInfos with declaration names.; /// Allocates 'pools' (vectors of IdDeclInfos) to avoid allocating each; /// individual IdDeclInfo to heap.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/IdentifierResolver.cpp:306,avoid,avoid,306,interpreter/llvm-project/clang/lib/Sema/IdentifierResolver.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/IdentifierResolver.cpp,1,['avoid'],['avoid']
Safety,"//===----------------------------------------------------------------------===//; // Implementation of various methods necessary for calculation of live ranges.; // The implementation of the methods abstracts from the concrete type of the; // segment collection.; //; // Implementation of the class follows the Template design pattern. The base; // class contains generic algorithms that call collection-specific methods,; // which are provided in concrete subclasses. In order to avoid virtual calls; // these methods are provided by means of C++ template instantiation.; // The base class calls the methods of the subclass through method impl(),; // which casts 'this' pointer to the type of the subclass.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveInterval.cpp:481,avoid,avoid,481,interpreter/llvm-project/llvm/lib/CodeGen/LiveInterval.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveInterval.cpp,1,['avoid'],['avoid']
Safety,"//===----------------------------------------------------------------------===//; // Misc. utility functions.; //===----------------------------------------------------------------------===//; /// Default to using our desired 8 MB stack size on ""safety"" threads.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp:246,safe,safety,246,interpreter/llvm-project/clang/tools/libclang/CIndex.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp,1,['safe'],['safety']
Safety,//===----------------------------------------------------------------------===//; // No-op Hazard Detection; //===----------------------------------------------------------------------===//,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/GCNHazardRecognizer.cpp:91,Hazard,Hazard,91,interpreter/llvm-project/llvm/lib/Target/AMDGPU/GCNHazardRecognizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/GCNHazardRecognizer.cpp,2,"['Detect', 'Hazard']","['Detection', 'Hazard']"
Safety,"//===----------------------------------------------------------------------===//; // Partial register updates; //===----------------------------------------------------------------------===//; //; // Swift renames NEON registers with 64-bit granularity. That means any; // instruction writing an S-reg implicitly reads the containing D-reg. The; // problem is mostly avoided by translating f32 operations to v2f32 operations; // on D-registers, but f32 loads are still a problem.; //; // These instructions can load an f32 into a NEON register:; //; // VLDRS - Only writes S, partial D update.; // VLD1LNd32 - Writes all D-regs, explicit partial D update, 2 uops.; // VLD1DUPd32 - Writes all D-regs, no partial reg update, 2 uops.; //; // FCONSTD can be used as a dependency-breaking instruction.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMBaseInstrInfo.cpp:367,avoid,avoided,367,interpreter/llvm-project/llvm/lib/Target/ARM/ARMBaseInstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMBaseInstrInfo.cpp,1,['avoid'],['avoided']
Safety,"//===----------------------------------------------------------------------===//; // PowerPC 970 Hazard Recognizer; //; // This models the dispatch group formation of the PPC970 processor. Dispatch; // groups are bundles of up to five instructions that can contain various mixes; // of instructions. The PPC970 can dispatch a peak of 4 non-branch and one; // branch instruction per-cycle.; //; // There are a number of restrictions to dispatch group formation: some; // instructions can only be issued in the first slot of a dispatch group, & some; // instructions fill an entire dispatch group. Additionally, only branches can; // issue in the 5th (last) slot.; //; // Finally, there are a number of ""structural"" hazards on the PPC970. These; // conditions cause large performance penalties due to misprediction, recovery,; // and replay logic that has to happen. These cases include setting a CTR and; // branching through it in the same dispatch group, and storing to an address,; // then loading from the same address within a dispatch group. To avoid these; // conditions, we insert no-op instructions when appropriate.; //; // FIXME: This is missing some significant cases:; // 1. Modeling of microcoded instructions.; // 2. Handling of serialized operations.; // 3. Handling of the esoteric cases in ""Resource-based Instruction Grouping"".; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCHazardRecognizers.cpp:97,Hazard,Hazard,97,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCHazardRecognizers.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCHazardRecognizers.cpp,4,"['Hazard', 'avoid', 'hazard', 'recover']","['Hazard', 'avoid', 'hazards', 'recovery']"
Safety,//===----------------------------------------------------------------------===//; // Recoverable Backend Errors; //===----------------------------------------------------------------------===//,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/LLVMContext.cpp:85,Recover,Recoverable,85,interpreter/llvm-project/llvm/lib/IR/LLVMContext.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/LLVMContext.cpp,1,['Recover'],['Recoverable']
Safety,"//===----------------------------------------------------------------------===//; // SCEV Utilities; //===----------------------------------------------------------------------===//; /// Compare the two values \p LV and \p RV in terms of their ""complexity"" where; /// ""complexity"" is a partial (and somewhat ad-hoc) relation used to order; /// operands in SCEV expressions. \p EqCache is a set of pairs of values that; /// have been previously deemed to be ""equally complex"" by this routine. It is; /// intended to avoid exponential time complexity in cases like:; ///; /// %a = f(%x, %y); /// %b = f(%a, %a); /// %c = f(%b, %b); ///; /// %d = f(%x, %y); /// %e = f(%d, %d); /// %f = f(%e, %e); ///; /// CompareValueComplexity(%f, %c); ///; /// Since we do not continue running this routine on expression trees once we; /// have seen unequal values, there is no need to track them in the cache.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp:515,avoid,avoid,515,interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,1,['avoid'],['avoid']
Safety,"//===----------------------------------------------------------------------===//; // Sanitizer utilities; //; /// Given a CallInst, check if it calls a string function known to CodeGen,; /// and mark it with NoBuiltin if so. To be used by sanitizers that intend; /// to intercept string functions and want to avoid converting them to target; /// specific instructions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h:309,avoid,avoid,309,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h,1,['avoid'],['avoid']
Safety,"//===----------------------------------------------------------------------===//; // This pass is not intended to be a replacement or a complete alternative; // for the pre-ra machine sink pass. It is only designed to sink COPY; // instructions which should be handled after RA.; //; // This pass sinks COPY instructions into a successor block, if the COPY is not; // used in the current block and the COPY is live-in to a single successor; // (i.e., doesn't require the COPY to be duplicated). This avoids executing the; // copy on paths where their results aren't needed. This also exposes; // additional opportunites for dead copy elimination and shrink wrapping.; //; // These copies were either not handled by or are inserted after the MachineSink; // pass. As an example of the former case, the MachineSink pass cannot sink; // COPY instructions with allocatable source registers; for AArch64 these type; // of copy instructions are frequently used to move function parameters (PhyReg); // into virtual registers in the entry block.; //; // For the machine IR below, this pass will sink %w19 in the entry into its; // successor (%bb.1) because %w19 is only live-in in %bb.1.; // %bb.0:; // %wzr = SUBSWri %w1, 1; // %w19 = COPY %w0; // Bcc 11, %bb.2; // %bb.1:; // Live Ins: %w19; // BL @fun; // %w0 = ADDWrr %w0, %w19; // RET %w0; // %bb.2:; // %w0 = COPY %wzr; // RET %w0; // As we sink %w19 (CSR in AArch64) into %bb.1, the shrink-wrapping pass will be; // able to see %bb.0 as a candidate.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineSink.cpp:500,avoid,avoids,500,interpreter/llvm-project/llvm/lib/CodeGen/MachineSink.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineSink.cpp,1,['avoid'],['avoids']
Safety,"//===----------------------------------------------------------------------===//; // Trace building; //===----------------------------------------------------------------------===//; //; // Traces are built by two CFG traversals. To avoid recomputing too much, use a; // set abstraction that confines the search to the current loop, and doesn't; // revisit blocks.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineTraceMetrics.cpp:233,avoid,avoid,233,interpreter/llvm-project/llvm/lib/CodeGen/MachineTraceMetrics.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineTraceMetrics.cpp,1,['avoid'],['avoid']
Safety,"//===----------------------------------------------------------------------===//; //--- IntervalMapImpl::BranchNode ---//; //===----------------------------------------------------------------------===//; //; // A branch node stores references to 1--N subtrees all of the same height.; //; // The key array in a branch node holds the rightmost stop key of each subtree.; // It is redundant to store the last stop key since it can be found in the; // parent node, but doing so makes tree balancing a lot simpler.; //; // It is unusual for a branch node to only have one subtree, but it can happen; // in the root node if it is smaller than the normal nodes.; //; // When all of the leaf nodes from all the subtrees are concatenated, they must; // satisfy the same constraints as a single leaf node. They must be sorted,; // sane, and fully coalesced.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h:380,redund,redundant,380,interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h,1,['redund'],['redundant']
Safety,"//===----------------------------------------------------------------------===//; //--- IntervalMapImpl::NodeBase ---//; //===----------------------------------------------------------------------===//; //; // Both leaf and branch nodes store vectors of pairs.; // Leaves store ((KeyT, KeyT), ValT) pairs, branches use (NodeRef, KeyT).; //; // Keys and values are stored in separate arrays to avoid padding caused by; // different object alignments. This also helps improve locality of reference; // when searching the keys.; //; // The nodes don't know how many elements they contain - that information is; // stored elsewhere. Omitting the size field prevents padding and allows a node; // to fill the allocated cache lines completely.; //; // These are typical key and value sizes, the node branching factor (N), and; // wasted space when nodes are sized to fit in three cache lines (192 bytes):; //; // T1 T2 N Waste Used by; // 4 4 24 0 Branch<4> (32-bit pointers); // 8 4 16 0 Leaf<4,4>, Branch<4>; // 8 8 12 0 Leaf<4,8>, Branch<8>; // 16 4 9 12 Leaf<8,4>; // 16 8 8 0 Leaf<8,8>; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h:393,avoid,avoid,393,interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h,1,['avoid'],['avoid']
Safety,//===----------------------------------------------------------------------===//; /// Analysis that detects all canonical Regions.; ///; /// The RegionInfo pass detects all canonical regions in a function. The Regions; /// are connected using the parent relation. This builds a Program Structure; /// Tree.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/RegionInfo.h:100,detect,detects,100,interpreter/llvm-project/llvm/include/llvm/Analysis/RegionInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/RegionInfo.h,2,['detect'],['detects']
Safety,//===----------------------------------------------------------------------===//; /// Instances of this class are used to represent loops that are detected in the; /// flow graph.; ///,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfo.h:147,detect,detected,147,interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfo.h,1,['detect'],['detected']
Safety,//===----------------------------------------------------------------------===//; //; // Implementations of the CPU detection routines; //; //===----------------------------------------------------------------------===//,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TargetParser/Host.cpp:116,detect,detection,116,interpreter/llvm-project/llvm/lib/TargetParser/Host.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TargetParser/Host.cpp,1,['detect'],['detection']
Safety,"//===----------------------------------------------------------------------===//; //; // Stack Frame Processing methods; // +----------------------------+; //; // The stack is allocated decrementing the stack pointer on; // the first instruction of a function prologue. Once decremented,; // all stack references are done thought a positive offset; // from the stack/frame pointer, so the stack is considering; // to grow up! Otherwise terrible hacks would have to be made; // to get this stack ABI compliant :); //; // The stack frame required by the ABI (after call):; // Offset; //; // 0 ----------; // 4 Args to pass; // . saved $GP (used in PIC); // . Alloca allocations; // . Local Area; // . CPU ""Callee Saved"" Registers; // . saved FP; // . saved RA; // . FPU ""Callee Saved"" Registers; // StackSize -----------; //; // Offset - offset from sp after stack allocation on function prologue; //; // The sp is the stack pointer subtracted/added from the stack size; // at the Prologue/Epilogue; //; // References to the previous stack (to obtain arguments) are done; // with offsets that exceeds the stack size: (stacksize+(4*(num_arg-1)); //; // Examples:; // - reference to the actual stack frame; // for any local area var there is smt like : FI >= 0, StackOffset: 4; // sw REGX, 4(SP); //; // - reference to previous stack frame; // suppose there's a load to the 5th arguments : FI < 0, StackOffset: 16.; // The emitted instruction will be something like:; // lw REGX, 16+StackSize(SP); //; // Since the total stack size is unknown on LowerFormalArguments, all; // stack references (ObjectOffset) created to reference the function; // arguments, are negative numbers. This way, on eliminateFrameIndex it's; // possible to detect those references and the offsets are adjusted to; // their real location.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsFrameLowering.cpp:1729,detect,detect,1729,interpreter/llvm-project/llvm/lib/Target/Mips/MipsFrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsFrameLowering.cpp,1,['detect'],['detect']
Safety,"//===----------------------------------------------------------------------===//; //; /// A wrapper around an intrusive list with callbacks and non-intrusive; /// ownership.; ///; /// This wraps a purely intrusive list (like simple_ilist) with a configurable; /// traits class. The traits can implement callbacks and customize the; /// ownership semantics.; ///; /// This is a subset of ilist functionality that can safely be used on nodes of; /// polymorphic types, i.e. a heterogeneous list with a common base class that; /// holds the next/prev pointers. The only state of the list itself is an; /// ilist_sentinel, which holds pointers to the first and last nodes in the; /// list.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ilist.h:416,safe,safely,416,interpreter/llvm-project/llvm/include/llvm/ADT/ilist.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ilist.h,1,['safe'],['safely']
Safety,"//===---------------------------------------------------------------------===//; // rewriteFirstIterationLoopExitValues: Rewrite loop exit values if we know; // they will exit at the first iteration.; //===---------------------------------------------------------------------===//; /// Check to see if this loop has loop invariant conditions which lead to loop; /// exits. If so, we know that if the exit path is taken, it is at the first; /// loop iteration. This lets us predict exit values of PHI nodes that live in; /// loop header.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp:473,predict,predict,473,interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp,1,['predict'],['predict']
Safety,"//===--------------------------------------------------------------------===//; // API to update (Post)DominatorTree information based on modifications to; // the CFG...; /// Inform the dominator tree about a sequence of CFG edge insertions and; /// deletions and perform a batch update on the tree.; ///; /// This function should be used when there were multiple CFG updates after; /// the last dominator tree update. It takes care of performing the updates; /// in sync with the CFG and optimizes away the redundant operations that; /// cancel each other.; /// The functions expects the sequence of updates to be balanced. Eg.:; /// - {{Insert, A, B}, {Delete, A, B}, {Insert, A, B}} is fine, because; /// logically it results in a single insertions.; /// - {{Insert, A, B}, {Insert, A, B}} is invalid, because it doesn't make; /// sense to insert the same edge twice.; ///; /// What's more, the functions assumes that it's safe to ask every node in the; /// CFG about its children and inverse children. This implies that deletions; /// of CFG edges must not delete the CFG nodes before calling this function.; ///; /// The applyUpdates function can reorder the updates and remove redundant; /// ones internally (as long as it is done in a deterministic fashion). The; /// batch updater is also able to detect sequences of zero and exactly one; /// update -- it's optimized to do less work in these cases.; ///; /// Note that for postdominators it automatically takes care of applying; /// updates on reverse edges internally (so there's no need to swap the; /// From and To pointers when constructing DominatorTree::UpdateType).; /// The type of updates is the same for DomTreeBase<T> and PostDomTreeBase<T>; /// with the same template parameter T.; ///; /// \param Updates An ordered sequence of updates to perform. The current CFG; /// and the reverse of these updates provides the pre-view of the CFG.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h:508,redund,redundant,508,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h,4,"['detect', 'redund', 'safe']","['detect', 'redundant', 'safe']"
Safety,//===--------------------------------------------------------------------===//; // C++ Variadic Templates (C++0x [temp.variadic]); //===--------------------------------------------------------------------===//; /// Determine whether an unexpanded parameter pack might be permitted in this; /// location. Useful for error recovery.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:321,recover,recovery,321,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['recover'],['recovery']
Safety,//===--------------------------------------------------------------------===//; // Diagnostic Emission and Error recovery.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h:113,recover,recovery,113,interpreter/llvm-project/clang/include/clang/Parse/Parser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h,1,['recover'],['recovery']
Safety,//===--------------------------------------------------------------------===//; // DiagnosticsEngine classification and reporting interfaces.; //; /// Determine whether the diagnostic is known to be ignored.; ///; /// This can be used to opportunistically avoid expensive checks when it's; /// known for certain that the diagnostic has been suppressed at the; /// specified location \p Loc.; ///; /// \param Loc The source location we are interested in finding out the; /// diagnostic state. Can be null in order to query the latest state.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:256,avoid,avoid,256,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,1,['avoid'],['avoid']
Safety,"//===--------------------------------------------------------------------===//; // Reserved Register Info; //===--------------------------------------------------------------------===//; //; // The set of reserved registers must be invariant during register; // allocation. For example, the target cannot suddenly decide it needs a; // frame pointer when the register allocator has already used the frame; // pointer register for something else.; //; // These methods can be used by target hooks like hasFP() to avoid changing; // the reserved register set during register allocation.; /// freezeReservedRegs - Called by the register allocator to freeze the set; /// of reserved registers before allocation begins.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineRegisterInfo.h:512,avoid,avoid,512,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineRegisterInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineRegisterInfo.h,1,['avoid'],['avoid']
Safety,"//===--------------------------------------------------------------------===//; // Step 3: Check for each CMOV-group-candidate if it worth to be optimized.; // Worth-Optimize-Group:; // Iff it is worth to optimize all CMOV instructions in the group.; //; // Worth-Optimize-CMOV:; // Predicted branch is faster than CMOV by the difference between depth of; // condition operand and depth of taken (predicted) value operand.; // To be conservative, the gain of such CMOV transformation should cover at; // at least 25% of branch-misprediction-penalty.; //===--------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86CmovConversion.cpp:283,Predict,Predicted,283,interpreter/llvm-project/llvm/lib/Target/X86/X86CmovConversion.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86CmovConversion.cpp,2,"['Predict', 'predict']","['Predicted', 'predicted']"
Safety,"//====- Internalize.h - Internalization API ---------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass loops over all of the functions and variables in the input module.; // If the function or variable does not need to be preserved according to the; // client supplied callback, it is marked as internal.; //; // This transformation would not be legal in a regular compilation, but it gets; // extra information from the linker about what is safe.; //; // For example: Internalizing a function with external linkage. Only if we are; // told it is only used from within this module, it is safe to do it.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Internalize.h:732,safe,safe,732,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Internalize.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Internalize.h,2,['safe'],['safe']
Safety,"//====- X86FlagsCopyLowering.cpp - Lowers COPY nodes of EFLAGS ------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// Lowers COPY nodes of EFLAGS by directly extracting and preserving individual; /// flag bits.; ///; /// We have to do this by carefully analyzing and rewriting the usage of the; /// copied EFLAGS register because there is no general way to rematerialize the; /// entire EFLAGS register safely and efficiently. Using `popf` both forces; /// dynamic stack adjustment and can create correctness issues due to IF, TF,; /// and other non-status flags being overwritten. Using sequences involving; /// SAHF don't work on all x86 processors and are often quite slow compared to; /// directly testing a single status preserved in its own GPR.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FlagsCopyLowering.cpp:681,safe,safely,681,interpreter/llvm-project/llvm/lib/Target/X86/X86FlagsCopyLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FlagsCopyLowering.cpp,1,['safe'],['safely']
Safety,//==============================================================================; // RCore renderer event handlers etc.; //==============================================================================; //------------------------------------------------------------------------------; // Highlight & Mouse move timeout handling; //------------------------------------------------------------------------------,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/lib/GlViewerRCore.js:311,timeout,timeout,311,ui5/eve7/lib/GlViewerRCore.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/lib/GlViewerRCore.js,1,['timeout'],['timeout']
Safety,//==============================================================================; // THREE renderer event handlers etc.; //==============================================================================; //------------------------------------------------------------------------------; // Highlight & Mouse move timeout handling; //------------------------------------------------------------------------------,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/lib/GlViewerThree.js:311,timeout,timeout,311,ui5/eve7/lib/GlViewerThree.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/lib/GlViewerThree.js,1,['timeout'],['timeout']
Safety,"//>-----------------; // for(let i = 0; i < OutlinePassEve.selection_enum.total; ++i){; // 	const sel = this.sel[i];; // 	if(sel.length > 0){; // 		this.changeVisibilityOfSelectedObjects(true, sel);; // 		// 3. Apply Edge Detection Pass; // 		const att = OutlinePassEve.selection_atts[i];; // 		this.edgeDetectionMaterial.uniforms[ ""visibleEdgeColor"" ].value = att.visibleEdgeColor;; // 		this.edgeDetectionMaterial.uniforms[ ""hiddenEdgeColor"" ].value = att.hiddenEdgeColor;; // 		renderer.render( this.scene, this.camera );; // 		this.changeVisibilityOfSelectedObjects(false, sel);; // 	}; // }; // this.changeVisibilityOfSelectedObjects(true);; // 4. Apply Blur on ""glowDownSampleRatio"" res",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/lib/OutlinePassEve.js:222,Detect,Detection,222,ui5/eve7/lib/OutlinePassEve.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/lib/OutlinePassEve.js,1,['Detect'],['Detection']
Safety,//@}; /// Attempts to produce a RecoveryExpr after some AST node cannot be created.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:32,Recover,RecoveryExpr,32,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['Recover'],['RecoveryExpr']
Safety,"//A logical vector indicating the variables to be scaled. If; //‘scale’ is of length 1, the value is recycled as many times; //as needed. Per default, data are scaled internally (both ‘x’; //and ‘y’ variables) to zero mean and unit variance. The center; //and scale values are returned and used for later predictions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodRSVM.h:305,predict,predictions,305,tmva/rmva/inc/TMVA/MethodRSVM.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodRSVM.h,1,['predict'],['predictions']
Safety,"//A logical: should the model evaluate groups of discrete predictors for splits?",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodC50.h:58,predict,predictors,58,tmva/rmva/inc/TMVA/MethodC50.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodC50.h,1,['predict'],['predictors']
Safety,"//Avoid rebuilding the mesh.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLTF3Painter.cxx:2,Avoid,Avoid,2,graf3d/gl/src/TGLTF3Painter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLTF3Painter.cxx,1,['Avoid'],['Avoid']
Safety,"//BaseEstimator, None, optional (default=None); //An estimator object that is used to compute the initial; //predictions. ``init`` has to provide ``fit`` and ``predict``.; //If None it uses ``loss.init_estimator``.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyGTB.h:109,predict,predictions,109,tmva/pymva/inc/TMVA/MethodPyGTB.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyGTB.h,2,['predict'],"['predict', 'predictions']"
Safety,"//Copy object into found to avoid calling the function two times.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TDictAttributeMap.cxx:28,avoid,avoid,28,core/meta/src/TDictAttributeMap.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TDictAttributeMap.cxx,1,['avoid'],['avoid']
Safety,"//Create a subdirectory per detector plane",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx:28,detect,detector,28,test/stress.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx,1,['detect'],['detector']
Safety,"//For a detailed explanation, please see the heading ""Avoid Duplication in const and Non-const Member Function,"" on p. 23, in Item 3 ""Use const whenever possible,"" in Effective C++, 3d ed by Scott Meyers, ISBN-13: 9780321334879.; // http://stackoverflow.com/questions/123758/how-do-i-remove-code-duplication-between-similar-const-and-non-const-member-func",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Event.h:54,Avoid,Avoid,54,tmva/tmva/inc/TMVA/Event.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Event.h,1,['Avoid'],['Avoid']
Safety,"//G__unloadfile(fname);; // In case an exception was thrown (which i do not know how to detect; // the execution of next macros does not succeed.; // However strange this might seem, this solves the problem.; // TTimer::SingleShot(100, ""TEveMacro"", this, ""ResetRoot()"");; //; // 27.8.07 - ok, this does not work any more. Seems I'll have to fix; // this real soon now.; //; // !!!! FIX MACRO HANDLING !!!!; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve/src/TEveMacro.cxx:88,detect,detect,88,graf3d/eve/src/TEveMacro.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve/src/TEveMacro.cxx,1,['detect'],['detect']
Safety,"//LM: exclude same comparison. This avoids an issue when using sort in MacOS versions",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooVectorDataStore.cxx:36,avoid,avoids,36,roofit/roofitcore/src/RooVectorDataStore.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooVectorDataStore.cxx,1,['avoid'],['avoids']
Safety,"//Matrix_t & out = rnn.GetLayers().back()->GetOutputAt(0);; //out.Print();; //YArch.Print();; // predictions",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/RNN/TestFullRNN.h:97,predict,predictions,97,tmva/tmva/test/DNN/RNN/TestFullRNN.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/RNN/TestFullRNN.h,1,['predict'],['predictions']
Safety,"//N.B. use this signature to avoid class with macro max() on Windows",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/TMath.h:29,avoid,avoid,29,math/mathcore/inc/TMath.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/TMath.h,1,['avoid'],['avoid']
Safety,"//N.B. use this signature to avoid class with macro min() on Windows",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/TMath.h:29,avoid,avoid,29,math/mathcore/inc/TMath.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/TMath.h,1,['avoid'],['avoid']
Safety,"//NFuncTest = 10;; // scan all values from 0.05 to 0.95 to avoid problem at the border of definitions",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressMathMore.cxx:59,avoid,avoid,59,test/stressMathMore.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathMore.cxx,1,['avoid'],['avoid']
Safety,"//NFuncTest = 4;; // scan all values from 0.05 to 0.95 to avoid problem at the border of definitions",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressMathMore.cxx:58,avoid,avoid,58,test/stressMathMore.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathMore.cxx,1,['avoid'],['avoid']
Safety,"//NOTE: there is no thread safe way to do this so; // one must only call this method ones in an executable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Tools.cxx:27,safe,safe,27,tmva/tmva/src/Tools.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Tools.cxx,1,['safe'],['safe']
Safety,"//NOTE: this does not work for not vectors since the CreateIterators expects a TGenCollectionProxy::TStaging as its argument!; //NOTE: and those not work in general yet, since the TStaging object is neither created nor passed.; // We need to review how to avoid the need for a TStaging during the writing.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TBranchElement.cxx:256,avoid,avoid,256,tree/tree/src/TBranchElement.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TBranchElement.cxx,1,['avoid'],['avoid']
Safety,"//No meshes in a cache.; //Create new one and _swap_ data (look at Mesh_t::Swap in a header); //between empty mesh in a list and this mesh; //to avoid real copying.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLTF3Painter.cxx:145,avoid,avoid,145,graf3d/gl/src/TGLTF3Painter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLTF3Painter.cxx,1,['avoid'],['avoid']
Safety,"//Now the toys for the detector response matrix",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TSVDUnfold.cxx:23,detect,detector,23,hist/hist/src/TSVDUnfold.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TSVDUnfold.cxx,1,['detect'],['detector']
Safety,"//Predictions for 5-th variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/inc/TGL5DPainter.h:2,Predict,Predictions,2,graf3d/gl/inc/TGL5DPainter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/inc/TGL5DPainter.h,1,['Predict'],['Predictions']
Safety,"//Predictions for the 5-th variable.; //Not-implemented yet.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGL5DPainter.cxx:2,Predict,Predictions,2,graf3d/gl/src/TGL5DPainter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGL5DPainter.cxx,1,['Predict'],['Predictions']
Safety,"//ROOT_TAtomicCount; //////////////////////////////////////////////////////////////////////////; // //; // TAtomicCountPthread //; // //; // Class providing atomic operations on a long. Setting, getting, //; // incrementing and decrementing are atomic, thread safe, operations. //; // //; // This implementation uses pthread mutexes for locking. This clearly //; // is less efficient than the version using asm locking instructions //; // as in TAtomicCountGcc.h, but better than nothing. //; // //; // ATTENTION: Don't use this file directly, it is included by //; // TAtomicCount.h. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/thread/inc/TAtomicCountPthread.h:260,safe,safe,260,core/thread/inc/TAtomicCountPthread.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/thread/inc/TAtomicCountPthread.h,1,['safe'],['safe']
Safety,"//SemaRef.PushOnScopeChains(Result, SemaRef.TUScope, /*Add to ctx*/true);; // Say that we can handle the situation. Clang should try to recover",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TClingCallbacks.cxx:136,recover,recover,136,core/metacling/src/TClingCallbacks.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TClingCallbacks.cxx,1,['recover'],['recover']
Safety,"//TODO: Check on casing of enums - also clearer names would help; //TODO: Go through all shapes and check type is being set for each; // Scope to avoid clashes",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TBuffer3DTypes.h:146,avoid,avoid,146,core/base/inc/TBuffer3DTypes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TBuffer3DTypes.h,1,['avoid'],['avoid']
Safety,"//This class is a helper. It represents a bin in N; //dimensions. The change in the name is to avoid name collision.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SparseData.cxx:95,avoid,avoid,95,math/mathcore/src/SparseData.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SparseData.cxx,1,['avoid'],['avoid']
Safety,"//This will hold vector of list iterators; //(list of surfaces). I use this to avoid; //including TGL5DPainter here (SurfIter_t; //is a typedef inside TGL5DPainter).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/inc/TGL5DDataSetEditor.h:79,avoid,avoid,79,graf3d/gl/inc/TGL5DDataSetEditor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/inc/TGL5DDataSetEditor.h,1,['avoid'],['avoid']
Safety,"//TwoTwoDiff checking for zeros to avoid extra splitting",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/predicates.h:35,avoid,avoid,35,math/mathcore/src/CDT/predicates.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/predicates.h,1,['avoid'],['avoid']
Safety,"//We assume that the class was written with a standard streamer; //We attempt to recover if a version count was not written",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TBufferFile.cxx:81,recover,recover,81,io/io/src/TBufferFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TBufferFile.cxx,1,['recover'],['recover']
Safety,"//___________________________________________________________________; /**; Documentation for the abstract class IBaseParam.; It defines the interface for dealing with the function parameters; This is used only for internal convenience, to avoid redefining the Parameter API; for the one and the multi-dim functions.; Concrete class should derive from ROOT::Math::IParamFunction and not from this class. @ingroup ParamFunc; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/IParamFunction.h:240,avoid,avoid,240,math/mathcore/inc/Math/IParamFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/IParamFunction.h,1,['avoid'],['avoid']
Safety,"//____________________________________________________________________________; /**; class for the individual Minuit Parameter with Name and number;; contains the input numbers for the minimization or the output result; from minimization;; possible interactions: Fix/release, set/remove limits, set Value/error;. From version 5.20: use string to store the name to avoid limitation of; name length of 20 characters; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MinuitParameter.h:364,avoid,avoid,364,math/minuit2/inc/Minuit2/MinuitParameter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MinuitParameter.h,1,['avoid'],['avoid']
Safety,"//______________________________________________________________________________; // Overload the template for typedefs, because they don't contain; // isThisDeclarationADefinition method. (Use inline to avoid violating ODR)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/res/TClingUtils.h:204,avoid,avoid,204,core/clingutils/res/TClingUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/res/TClingUtils.h,1,['avoid'],['avoid']
Safety,"//______________________________________________________________________________; // Use this function in case of a fatal error. It will abort the program.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/res/TClingUtils.h:137,abort,abort,137,core/clingutils/res/TClingUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/res/TClingUtils.h,1,['abort'],['abort']
Safety,"//______________________________________________________________________________; // some useful static utility functions to compute sampling points for IntegralFast; ////////////////////////////////////////////////////////////////////////////////; /// Type safe interface (static method); /// The number of sampling points are taken from the TGraph",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:258,safe,safe,258,hist/hist/src/TF1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx,1,['safe'],['safe']
Safety,"//______________________________________________________________________________; //---- error handling ----------------------------------------------------------; //---- Needed to avoid blocking on the CINT mutex in printouts -----------------; ////////////////////////////////////////////////////////////////////////////////; /// Interface to ErrorHandler (protected).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TSlaveLite.cxx:181,avoid,avoid,181,proof/proof/src/TSlaveLite.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TSlaveLite.cxx,1,['avoid'],['avoid']
Safety,"//__________________________________________________________________________________________; /**; Class describing a 4D coordinate system; or momentum-energy vectors stored as (Px, Py, Pz, M).; This system is useful to describe ultra-relativistic particles; (like electrons at LHC) to avoid numerical errors evaluating the mass; when E >>> m; The metric used is (-,-,-,+); Spacelike particles (M2 < 0) are described with negative mass values,; but in this case m2 must always be less than P2 to preserve a positive value of E2. @ingroup GenVector. @sa Overview of the @ref GenVector ""physics vector library""; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/genvector/inc/Math/GenVector/PxPyPzM4D.h:286,avoid,avoid,286,math/genvector/inc/Math/GenVector/PxPyPzM4D.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genvector/inc/Math/GenVector/PxPyPzM4D.h,1,['avoid'],['avoid']
Safety,"//_elm suffix is added to avoid problems with same names; // for material and element",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/gdml/src/TGDMLWrite.cxx:26,avoid,avoid,26,geom/gdml/src/TGDMLWrite.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/gdml/src/TGDMLWrite.cxx,1,['avoid'],['avoid']
Safety,"//_iso suffix is added to avoid problems with same names; // for material, element and isotopes",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/gdml/src/TGDMLWrite.cxx:26,avoid,avoid,26,geom/gdml/src/TGDMLWrite.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/gdml/src/TGDMLWrite.cxx,1,['avoid'],['avoid']
Safety,"//atomic operations for thread safety",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/Delaunay2D.h:31,safe,safety,31,math/mathcore/inc/Math/Delaunay2D.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/Delaunay2D.h,1,['safe'],['safety']
Safety,"//avoid drawing with black",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/THistPainter.cxx:2,avoid,avoid,2,hist/histpainter/src/THistPainter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/THistPainter.cxx,1,['avoid'],['avoid']
Safety,"//cast to avoid warning with gcc3.4",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TFile.cxx:10,avoid,avoid,10,io/io/src/TFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TFile.cxx,3,['avoid'],['avoid']
Safety,"//ceiling the division; // Avoid empty chunks",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/imt/inc/ROOT/TThreadExecutor.hxx:27,Avoid,Avoid,27,core/imt/inc/ROOT/TThreadExecutor.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/imt/inc/ROOT/TThreadExecutor.hxx,2,['Avoid'],['Avoid']
Safety,"//checkModuleImportContext(*this, Mod, ImportLoc, CurContext);; // FIXME: we should support importing a submodule within a different submodule; // of the same top-level module. Until we do, make it an error rather than; // silently ignoring the import.; // FIXME: Should we warn on a redundant import of the current module?",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaModule.cpp:284,redund,redundant,284,interpreter/llvm-project/clang/lib/Sema/SemaModule.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaModule.cpp,1,['redund'],['redundant']
Safety,"//data = data; // avoid warning; //paramsOfInterest = paramsOfInterest; //avoid warning",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/DebuggingTestStat.h:18,avoid,avoid,18,roofit/roostats/inc/RooStats/DebuggingTestStat.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/DebuggingTestStat.h,2,['avoid'],['avoid']
Safety,"//double x[Ntimes];; // use std::vector's to avoid crashes on Windows",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testFunctor.cxx:45,avoid,avoid,45,math/mathmore/test/testFunctor.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testFunctor.cxx,2,['avoid'],['avoid']
Safety,"//histogram pointer has by default the histogram name.; //however, in case histogram has no directory, it is safer to add a incremental suffix",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx:109,safe,safer,109,hist/hist/src/TProfile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx,1,['safe'],['safer']
Safety,"//histogram pointer has by default the histogram name.; //however, in case histogram has no directory, it is safer to add a; //incremental suffix",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2Poly.cxx:109,safe,safer,109,hist/hist/src/TH2Poly.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2Poly.cxx,1,['safe'],['safer']
Safety,"//in the above statement, it is important to subtract 1e-10; //to avoid precision problems if the tests below; // Round mantissa",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THLimitsFinder.cxx:66,avoid,avoid,66,hist/hist/src/THLimitsFinder.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THLimitsFinder.cxx,1,['avoid'],['avoid']
Safety,"//inputTr.Zero(); // this is not thread safe",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DNN/Architectures/Cpu/Propagation.hxx:40,safe,safe,40,tmva/tmva/src/DNN/Architectures/Cpu/Propagation.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DNN/Architectures/Cpu/Propagation.hxx,1,['safe'],['safe']
Safety,"//insert R600::ENDIF to avoid special case ""input landBlk == NULL""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/R600MachineCFGStructurizer.cpp:24,avoid,avoid,24,interpreter/llvm-project/llvm/lib/Target/AMDGPU/R600MachineCFGStructurizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/R600MachineCFGStructurizer.cpp,1,['avoid'],['avoid']
Safety,"//logical indicating whether the model should allow for probability predictions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodRSVM.h:68,predict,predictions,68,tmva/rmva/inc/TMVA/MethodRSVM.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodRSVM.h,1,['predict'],['predictions']
Safety,"//normal case. Recover only if file has no keys",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TFile.cxx:15,Recover,Recover,15,io/io/src/TFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TFile.cxx,1,['Recover'],['Recover']
Safety,//now branchInst can be erase safely,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/R600MachineCFGStructurizer.cpp:30,safe,safely,30,interpreter/llvm-project/llvm/lib/Target/AMDGPU/R600MachineCFGStructurizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/R600MachineCFGStructurizer.cpp,1,['safe'],['safely']
Safety,"//obj->Draw(fIterator->GetOption());; // add cloned objects to avoid mem leaks",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/SamplingDistPlot.cxx:63,avoid,avoid,63,roofit/roostats/src/SamplingDistPlot.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/SamplingDistPlot.cxx,1,['avoid'],['avoid']
Safety,"//predict(""predict""),",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/src/MethodC50.cxx:2,predict,predict,2,tmva/rmva/src/MethodC50.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/src/MethodC50.cxx,2,['predict'],['predict']
Safety,"//reset can extend bit to avoid an axis extension in SetBinContent",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:26,avoid,avoid,26,hist/hist/src/TH1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx,1,['avoid'],['avoid']
Safety,"//set the grid for the cut scan on the variables like this:; // ; // | | | | | ... | | ; // xmin xmax; //; // cut 0 1 2 3 ... fNCuts-1 (counting from zero); // bin 0 1 2 3 ..... nBins-1=fNCuts (counting from zero); // --> nBins = fNCuts+1; // (NOTE, the cuts at xmin or xmax would just give the whole sample and; // hence can be safely omitted",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:329,safe,safely,329,tmva/tmva/src/DecisionTree.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx,1,['safe'],['safely']
Safety,"//set the grid for the cut scan on the variables like this:; //; // | | | | | ... | |; // xmin xmax; //; // cut 0 1 2 3 ... fNCuts-1 (counting from zero); // bin 0 1 2 3 ..... nBins-1=fNCuts (counting from zero); // --> nBins = fNCuts+1; // (NOTE, the cuts at xmin or xmax would just give the whole sample and; // hence can be safely omitted",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:327,safe,safely,327,tmva/tmva/src/DecisionTree.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx,1,['safe'],['safely']
Safety,"//something had been written to the file. Trailer is missing, must recover",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TFile.cxx:67,recover,recover,67,io/io/src/TFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TFile.cxx,1,['recover'],['recover']
Safety,"//std::cout << ""The residual transition point for the Huber loss function corresponding to quantile, "" << fQuantile << "", is zero.""; //<< "" This implies that all of the residuals are zero and the events have been predicted perfectly. Perhaps the regression is too complex""; //<< "" for the amount of data."" << std::endl;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/LossFunction.cxx:213,predict,predicted,213,tmva/tmva/src/LossFunction.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/LossFunction.cxx,1,['predict'],['predicted']
Safety,"//std::cout << ""reading typeID : "" << typeid(*v1).name() << std::endl;; // cast to void * to avoid a warning",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx:93,avoid,avoid,93,test/stressMathCore.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx,1,['avoid'],['avoid']
Safety,"//std::vector<Bool_t>* mvaResTypes = mvaRes->GetValueVectorTypes();; //LM: this is needed to avoid crashes in ROOCCURVE",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:93,avoid,avoid,93,tmva/tmva/src/MethodBase.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx,1,['avoid'],['avoid']
Safety,"//stop or abort the current process call",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h:10,abort,abort,10,core/base/inc/MessageTypes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/MessageTypes.h,1,['abort'],['abort']
Safety,"//the kernel used in training and predicting. You might; //consider changing some of the following parameters, depending on the kernel type.; //linear: u'*v; //polynomial: (gamma*u'*v + coef0)^degree; //radial basis: exp(-gamma*|u-v|^2); //sigmoid: tanh(gamma*u'*v + coef0)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodRSVM.h:34,predict,predicting,34,tmva/rmva/inc/TMVA/MethodRSVM.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodRSVM.h,1,['predict'],['predicting']
Safety,"//the test below testing fArray[fNumber]>1 is to avoid a recursivity; //problem in some cases like:; // class aProblemChild: public TNamed {; // aProblemChild *canBeNull;; // };",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TStreamerInfo.cxx:49,avoid,avoid,49,io/io/src/TStreamerInfo.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TStreamerInfo.cxx,1,['avoid'],['avoid']
Safety,"//this will be an unsafe view. Method exists for backwards compatibility only",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cpu/CpuTensor.h:18,unsafe,unsafe,18,tmva/tmva/inc/TMVA/DNN/Architectures/Cpu/CpuTensor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cpu/CpuTensor.h,1,['unsafe'],['unsafe']
Safety,"//to avoid accessing a deleted object in RecursiveRemove",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx:5,avoid,avoid,5,hist/hist/src/TGraph.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx,1,['avoid'],['avoid']
Safety,"//to avoid precision problem that will destroy the pos-def",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodMLP.cxx:5,avoid,avoid,5,tmva/tmva/src/MethodMLP.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodMLP.cxx,1,['avoid'],['avoid']
Safety,"//try to detect if it is normal or reverse read",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTreeCache.cxx:9,detect,detect,9,tree/tree/src/TTreeCache.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTreeCache.cxx,1,['detect'],['detect']
Safety,"//use option load=kFALSE to avoid a warning like:; //""Warning in <TClass::TClass>: no dictionary for class TRefCnt is available""; //We can not afford to not have the class if it exist, so we; //use kTRUE.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TClass.cxx:28,avoid,avoid,28,core/meta/src/TClass.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TClass.cxx,1,['avoid'],['avoid']
Safety,"//‘svm’ can be used as a classification machine, as a; //regression machine, or for novelty detection. Depending of; //whether ‘y’ is a factor or not, the default setting for; //‘type’ is ‘C-classification’ or ‘eps-regression’,; //respectively, but may be overwritten by setting an explicit value.; //Valid options are:; // - ‘C-classification’; // - ‘nu-classification’; // - ‘one-classification’ (for novelty detection); // - ‘eps-regression’; // - ‘nu-regression’",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodRSVM.h:92,detect,detection,92,tmva/rmva/inc/TMVA/MethodRSVM.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodRSVM.h,2,['detect'],['detection']
Safety,"/; /*; * ALGORITHM; *; * The ""deflation"" process depends on being able to identify portions; * of the input text which are identical to earlier input (within a; * sliding window trailing behind the input currently being processed).; *; * The most straightforward technique turns out to be the fastest for; * most input files: try all possible matches and select the longest.; * The key feature of this algorithm is that insertions into the string; * dictionary are very simple and thus fast, and deletions are avoided; * completely. Insertions are performed at each input character, whereas; * string matches are performed only when the previous match ends. So it; * is preferable to spend more time in matches to allow very fast string; * insertions and avoid deletions. The matching algorithm for small; * strings is inspired from that of Rabin & Karp. A brute force approach; * is used to find longer strings when a small match has been found.; * A similar algorithm is used in comic (by Jan-Mark Wams) and freeze; * (by Leonid Broukhis).; * A previous version of this file used a more sophisticated algorithm; * (by Fiala and Greene) which is guaranteed to run in linear amortized; * time, but has a larger average cost, uses more memory and is patented.; * However the F&G algorithm may be faster for some highly redundant; * files if the parameter max_chain_length (described below) is too large.; *; * ACKNOWLEDGEMENTS; *; * The idea of lazy evaluation of matches is due to Jan-Mark Wams, and; * I found it in 'freeze' written by Leonid Broukhis.; * Thanks to many people for bug reports and testing.; *; * REFERENCES; *; * Deutsch, L.P.,""DEFLATE Compressed Data Format Specification"".; * Available in http://tools.ietf.org/html/rfc1951; *; * A description of the Rabin and Karp algorithm is given in the book; * ""Algorithms"" by R. Sedgewick, Addison-Wesley, p252.; *; * Fiala,E.R., and Greene,D.H.; * Data Compression with Finite Windows, Comm.ACM, 32,4 (1989) 490-595; *; */; /* @(#) $Id$ */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate.c:1513,redund,redundant,1513,builtins/zlib/deflate.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate.c,1,['redund'],['redundant']
Safety,"0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // GCStrategy coordinates code generation algorithms and implements some itself; // in order to generate code compatible with a target code generator as; // specified in a function's 'gc' attribute. Algorithms are enabled by setting; // flags in a subclass's constructor, and some virtual methods can be; // overridden.; //; // GCStrategy is relevant for implementations using either gc.root or; // gc.statepoint based lowering strategies, but is currently focused mostly on; // options for gc.root. This will change over time.; //; // When requested by a subclass of GCStrategy, the gc.root implementation will; // populate GCModuleInfo and GCFunctionInfo with that about each Function in; // the Module that opts in to garbage collection. Specifically:; //; // - Safe points; // Garbage collection is generally only possible at certain points in code.; // GCStrategy can request that the collector insert such points:; //; // - At and after any call to a subroutine; // - Before returning from the current function; // - Before backwards branches (loops); //; // - Roots; // When a reference to a GC-allocated object exists on the stack, it must be; // stored in an alloca registered with llvm.gcoot.; //; // This information can used to emit the metadata tables which are required by; // the target garbage collector runtime.; //; // When used with gc.statepoint, information about safepoint and roots can be; // found in the binary StackMap section after code generation. Safepoint; // placement is currently the responsibility of the frontend, though late; // insertion support is planned.; //; // The read and write barrier support can be used with either implementation.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GCStrategy.h:1145,Safe,Safe,1145,interpreter/llvm-project/llvm/include/llvm/IR/GCStrategy.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GCStrategy.h,3,"['Safe', 'safe']","['Safe', 'Safepoint', 'safepoint']"
Safety,"03 [arXiv:1205.6201]</b>; <br/>; Detailed documentation and updates are available on; http://www.desy.de/~sschmitt. <h3>Functionality</h3>. The TUnfoldBinning objects are connected by a tree-like structure.; The structure does not hold any data, but is only responsible for; arranging the analysis bins in the proper order.; Each node of the tree is responsible for a group of bins. That group; may consist of; <ul>; <li> several unconnected bins, each with a dedicated name.</li>; <li> bins organized in a multidimensional distribution, defined by a; set of axes. The axes are defined by a number of bins N and by (N+1); bin borders. In addition to the N bins inside there may be an underflow and an; overflow bin</li>; </ul>; Each bin has a ""global"" bin number, which can be found using the; GetGlobalBinNumber() methods. The global bin number 0 is reserved and; corresponds to the case where no bin is found in the; TUnfoldBinning tree. <h3>Use in the analysis</h3>; Booking histograms:; <ul>; <li>Define binning schemes on detector level and on truth level. This; can be done using the XML language, use the class TUnfoldBinningXML to; read the binning scheme. The TUnfoldBinning objects can be written to; a root file, preferentially together with the corresponding histograms.</li>; <li>For Monte Carlo, book histograms for the response matrix (detector; vs truth level) using the; method CreateHistogramOfMigrations()</li>; <li>For data and background, book histograms using the; ""detector level"" binning scheme and the method CreateHistogram()</li>; <li>(if required) for the data covarianve matrix, book a histogram using the; ""detector level"" binning scheme and the method CreateErrorMatrixHistogram()</li>; <li>For truth histograms, book histograms using the; ""truth level"" binning scheme and the method CreateHistogram()</li>; </ul>; The histograms which are booked have all analysis bins arranged on one; axis (global bin number). TUnfoldBinning provides methods to locate; the global bi",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfoldBinning.cxx:2268,detect,detector,2268,hist/unfold/src/TUnfoldBinning.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfoldBinning.cxx,1,['detect'],['detector']
Safety,"; /*; * ALGORITHM; *; * The ""deflation"" process depends on being able to identify portions; * of the input text which are identical to earlier input (within a; * sliding window trailing behind the input currently being processed).; *; * The most straightforward technique turns out to be the fastest for; * most input files: try all possible matches and select the longest.; * The key feature of this algorithm is that insertions into the string; * dictionary are very simple and thus fast, and deletions are avoided; * completely. Insertions are performed at each input character, whereas; * string matches are performed only when the previous match ends. So it; * is preferable to spend more time in matches to allow very fast string; * insertions and avoid deletions. The matching algorithm for small; * strings is inspired from that of Rabin & Karp. A brute force approach; * is used to find longer strings when a small match has been found.; * A similar algorithm is used in comic (by Jan-Mark Wams) and freeze; * (by Leonid Broukhis).; * A previous version of this file used a more sophisticated algorithm; * (by Fiala and Greene) which is guaranteed to run in linear amortized; * time, but has a larger average cost, uses more memory and is patented.; * However the F&G algorithm may be faster for some highly redundant; * files if the parameter max_chain_length (described below) is too large.; *; * ACKNOWLEDGEMENTS; *; * The idea of lazy evaluation of matches is due to Jan-Mark Wams, and; * I found it in 'freeze' written by Leonid Broukhis.; * Thanks to many people for bug reports and testing.; *; * REFERENCES; *; * Deutsch, L.P.,""DEFLATE Compressed Data Format Specification"".; * Available in http://www.ietf.org/rfc/rfc1951.txt; *; * A description of the Rabin and Karp algorithm is given in the book; * ""Algorithms"" by R. Sedgewick, Addison-Wesley, p252.; *; * Fiala,E.R., and Greene,D.H.; * Data Compression with Finite Windows, Comm.ACM, 32,4 (1989) 490-595; *; */; /* @(#) $Id$ */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c:1499,redund,redundant,1499,graf2d/asimage/src/libAfterImage/zlib/deflate.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c,1,['redund'],['redundant']
Safety,"; // recursive by an associative and commutative expression to use an; // accumulator variable, thus compiling the typical naive factorial or; // 'fib' implementation into efficient code.; // 3. TRE is performed if the function returns void, if the return; // returns the result returned by the call, or if the function returns a; // run-time constant on all exits from the function. It is possible, though; // unlikely, that the return returns something else (like constant 0), and; // can still be TRE'd. It can be TRE'd if ALL OTHER return instructions in; // the function return the exact same value.; // 4. If it can prove that callees do not access their caller stack frame,; // they are marked as eligible for tail call elimination (by the code; // generator).; //; // There are several improvements that could be made:; //; // 1. If the function has any alloca instructions, these instructions will be; // moved out of the entry block of the function, causing them to be; // evaluated each time through the tail recursion. Safely keeping allocas; // in the entry block requires analysis to proves that the tail-called; // function does not read or write the stack object.; // 2. Tail recursion is only performed if the call immediately precedes the; // return instruction. It's possible that there could be a jump between; // the call and the return.; // 3. There can be intervening operations between the call and the return that; // prevent the TRE from occurring. For example, there could be GEP's and; // stores to memory that will not be read or written by the call. This; // requires some substantial analysis (such as with DSA) to prove safe to; // move ahead of the call, but doing so could allow many more TREs to be; // performed, for example in TreeAdd/TreeAlloc from the treeadd benchmark.; // 4. The algorithm we use to detect if callees access their caller stack; // frames is very primitive.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/TailRecursionElimination.h:1957,Safe,Safely,1957,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/TailRecursionElimination.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/TailRecursionElimination.h,6,"['Safe', 'detect', 'safe']","['Safely', 'detect', 'safe']"
Safety,"; /// Instruction visitors are used when you want to perform different actions; /// for different kinds of instructions without having to use lots of casts; /// and a big switch statement (in your code, that is).; ///; /// To define your own visitor, inherit from this class, specifying your; /// new type for the 'SubClass' template parameter, and ""override"" visitXXX; /// functions in your class. I say ""override"" because this class is defined; /// in terms of statically resolved overloading, not virtual functions.; ///; /// For example, here is a visitor that counts the number of malloc; /// instructions processed:; ///; /// /// Declare the class. Note that we derive from InstVisitor instantiated; /// /// with _our new subclasses_ type.; /// ///; /// struct CountAllocaVisitor : public InstVisitor<CountAllocaVisitor> {; /// unsigned Count;; /// CountAllocaVisitor() : Count(0) {}; ///; /// void visitAllocaInst(AllocaInst &AI) { ++Count; }; /// };; ///; /// And this class would be used like this:; /// CountAllocaVisitor CAV;; /// CAV.visit(function);; /// NumAllocas = CAV.Count;; ///; /// The defined has 'visit' methods for Instruction, and also for BasicBlock,; /// Function, and Module, which recursively process all contained instructions.; ///; /// Note that if you don't implement visitXXX for some instruction type,; /// the visitXXX method for instruction superclass will be invoked. So; /// if instructions are added in the future, they will be automatically; /// supported, if you handle one of their superclasses.; ///; /// The optional second template argument specifies the type that instruction; /// visitation functions should return. If you specify this, you *MUST* provide; /// an implementation of visitInstruction though!.; ///; /// Note that this class is specifically designed as a template to avoid; /// virtual function call overhead. Defining and using an InstVisitor is just; /// as efficient as having your own switch statement over the instruction; /// opcode.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstVisitor.h:1872,avoid,avoid,1872,interpreter/llvm-project/llvm/include/llvm/IR/InstVisitor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstVisitor.h,1,['avoid'],['avoid']
Safety,"; /// \file; ///; /// This pass do two things:; /// - it expands a branch or jump instruction into a long branch if its offset; /// is too large to fit into its immediate field,; /// - it inserts nops to prevent forbidden slot hazards.; ///; /// The reason why this pass combines these two tasks is that one of these two; /// tasks can break the result of the previous one.; ///; /// Example of that is a situation where at first, no branch should be expanded,; /// but after adding at least one nop somewhere in the code to prevent a; /// forbidden slot hazard, offset of some branches may go out of range. In that; /// case it is necessary to check again if there is some branch that needs; /// expansion. On the other hand, expanding some branch may cause a control; /// transfer instruction to appear in the forbidden slot, which is a hazard that; /// should be fixed. This pass alternates between this two tasks untill no; /// changes are made. Only then we can be sure that all branches are expanded; /// properly, and no hazard situations exist.; ///; /// Regarding branch expanding:; ///; /// When branch instruction like beqzc or bnezc has offset that is too large; /// to fit into its immediate field, it has to be expanded to another; /// instruction or series of instructions.; ///; /// FIXME: Fix pc-region jump instructions which cross 256MB segment boundaries.; /// TODO: Handle out of range bc, b (pseudo) instructions.; ///; /// Regarding compact branch hazard prevention:; ///; /// Hazards handled: forbidden slots for MIPSR6, FPU slots for MIPS3 and below,; /// load delay slots for MIPS1.; ///; /// A forbidden slot hazard occurs when a compact branch instruction is executed; /// and the adjacent instruction in memory is a control transfer instruction; /// such as a branch or jump, ERET, ERETNC, DERET, WAIT and PAUSE.; ///; /// For example:; ///; /// 0x8004 bnec a1,v0,<P+0x18>; /// 0x8008 beqc a1,a2,<P+0x54>; ///; /// In such cases, the processor is required to signal a Rese",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsBranchExpansion.cpp:1402,hazard,hazard,1402,interpreter/llvm-project/llvm/lib/Target/Mips/MipsBranchExpansion.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsBranchExpansion.cpp,1,['hazard'],['hazard']
Safety,"; /// ~~~{.cpp}; /// root[] ROOT::TThreadExecutor pool; auto hists = pool.Map(CreateHisto, 10);; /// root[] ROOT::TThreadExecutor pool(2); auto squares = pool.Map([](int a) { return a*a; }, {1,2,3});; /// ~~~; ///; /// ### ROOT::TThreadExecutor::MapReduce; /// This set of methods behaves exactly like Map, but takes an additional; /// function as a third argument. This function is applied to the set of; /// objects returned by the corresponding Map execution to ""squash"" them; /// into a single object. This function should be independent of the size of; /// the vector returned by Map due to optimization of the number of chunks.; ///; /// If this function is a binary operator, the ""squashing"" will be performed in parallel.; /// This is exclusive to ROOT::TThreadExecutor and not any other ROOT::TExecutorCRTP-derived classes.\n; ///; /// An integer can be passed as the fourth argument indicating the number of chunks we want to divide our work in.; /// This may be useful to avoid the overhead introduced when running really short tasks.; ///; /// #### Examples:; /// ~~~{.cpp}; /// root[] ROOT::TThreadExecutor pool; auto ten = pool.MapReduce([]() { return 1; }, 10, [](const std::vector<int> &v) { return std::accumulate(v.begin(), v.end(), 0); }); /// root[] ROOT::TThreadExecutor pool; auto hist = pool.MapReduce(CreateAndFillHists, 10, PoolUtils::ReduceObjects);; /// ~~~; ///; //////////////////////////////////////////////////////////////////////////; /*; VERY IMPORTANT NOTE ABOUT WORK ISOLATION. We enclose the parallel_for and parallel_reduce invocations in a; task_arena::isolate because we want to prevent a thread to start executing an; outer task when the task it's running spawned subtasks, e.g. with a parallel_for,; and is waiting on inner tasks to be completed. While this change has a negligible performance impact, it has benefits for; several applications, for example big parallelised HEP frameworks and; RDataFrame analyses.; - For HEP Frameworks, without work isolatio",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/imt/src/TThreadExecutor.cxx:3351,avoid,avoid,3351,core/imt/src/TThreadExecutor.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/imt/src/TThreadExecutor.cxx,1,['avoid'],['avoid']
Safety,"; ///; /// Whole quad mode is required for derivative computations, but it interferes; /// with shader side effects (stores and atomics). It ensures that WQM is; /// enabled when necessary, but disabled around stores and atomics.; ///; /// When necessary, this pass creates a function prolog; ///; /// S_MOV_B64 LiveMask, EXEC; /// S_WQM_B64 EXEC, EXEC; ///; /// to enter WQM at the top of the function and surrounds blocks of Exact; /// instructions by; ///; /// S_AND_SAVEEXEC_B64 Tmp, LiveMask; /// ...; /// S_MOV_B64 EXEC, Tmp; ///; /// We also compute when a sequence of instructions requires strict whole; /// wavefront mode (StrictWWM) and insert instructions to save and restore it:; ///; /// S_OR_SAVEEXEC_B64 Tmp, -1; /// ...; /// S_MOV_B64 EXEC, Tmp; ///; /// When a sequence of instructions requires strict whole quad mode (StrictWQM); /// we use a similar save and restore mechanism and force whole quad mode for; /// those instructions:; ///; /// S_MOV_B64 Tmp, EXEC; /// S_WQM_B64 EXEC, EXEC; /// ...; /// S_MOV_B64 EXEC, Tmp; ///; /// In order to avoid excessive switching during sequences of Exact; /// instructions, the pass first analyzes which instructions must be run in WQM; /// (aka which instructions produce values that lead to derivative; /// computations).; ///; /// Basic blocks are always exited in WQM as long as some successor needs WQM.; ///; /// There is room for improvement given better control flow analysis:; ///; /// (1) at the top level (outside of control flow statements, and as long as; /// kill hasn't been used), one SGPR can be saved by recovering WQM from; /// the LiveMask (this is implemented for the entry block).; ///; /// (2) when entire regions (e.g. if-else blocks or entire loops) only; /// consist of exact and don't-care instructions, the switch only has to; /// be done at the entry and exit points rather than potentially in each; /// block of the region.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIWholeQuadMode.cpp:1910,avoid,avoid,1910,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIWholeQuadMode.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIWholeQuadMode.cpp,2,"['avoid', 'recover']","['avoid', 'recovering']"
Safety,"Description |; |------|-------------|; | ""key:id"" | key identifier to which belong object |; | ""obj:id"" | object identifier |; | ""Class"" | object class name |; | ""Version"" | object class version |. Data in each ""ObjectsTable"" row uniquely identify, in which table; and which column object is stored. In normal situation all class data should be sorted column-wise.; Up to now following member are supported:; -# Basic data types. Here is everything clear. Column SQL type will be as much as possible; close to the original type of value.; -# Fixed array of basic data types. In this case n columns like fArr[0],; fArr[1] and so on will be created.; If there is multidimensional array, names will be fArr2[1][2][1] and so on; -# Parent class. In this case version of parent class is stored and; data of parent class will be stored with the same obj:id in correspondent table.; There is a special case, when parent store nothing (this is for instance TQObject).; In that case just -1 is written to avoid any extra checks if table exist or not.; -# Object as data member. In that case object is saved in normal way to data base and column; will contain id of this object.; -# Pointer on object. Same as before. In case if object was already stored, just its id; will be placed in the column. For NULL pointer 0 is used.; -# TString. Now column with limited width like VARCAHR(255) in MySQL is used.; Later this will be improved to support maximum possible strings; -# Anything else. Data will be converted to raw format and saved in _streamer_ table.; Each row supplied with obj:id and row:id, where row:id indicates; data, corresponding to this particular data member, and column; will contain this raw:id. All conversion to SQL statements are done with help of TSQLStructure class.; This is special hierarchical structure wich internally is very similar; to XML structures. TBufferSQL2 creates these structures, when object; data is streamed by ROOT and only afterwards all SQL statements will be prod",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/sql/src/TSQLFile.cxx:2442,avoid,avoid,2442,io/sql/src/TSQLFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/sql/src/TSQLFile.cxx,1,['avoid'],['avoid']
Safety,"EP ; \endverbatim. The generic member functions SetParameter and GetParameter can be; overloaded to set and get parameters of the event generator. Note, if the derived class interfaces a (set of) Fortran common; blocks (like TPythia, TVenus does), one better make the derived; class a singleton. That is, something like; ; \verbatim; class MyGenerator : public TGenerator ; { ; public: ; static MyGenerator* Instance() ; { ; if (!fgInstance) fgInstance = new MyGenerator; ; return fgInstance; ; } ; void GenerateEvent() { ... } ; void ImportParticles(TClonesArray* a, Option_t opt="""") {...} ; Int_t ImportParticles(Option_t opt="""") { ... } ; Int_t SetParameter(const char* name, Double_t val) { ... } ; Double_t GetParameter(const char* name) { ... } ; virtual ~MyGenerator() { ... } ; protected: ; MyGenerator() { ... } ; MyGenerator(const MyGenerator& o) { ... } ; MyGenerator& operator=(const MyGenerator& o) { ... } ; static MyGenerator* fgInstance; ; ClassDefOverride(MyGenerator,0); ; }; ; \endverbatim; ; Having multiple objects accessing the same common blocks is not ; safe. ; ; Concrete TGenerator classes can be loaded in scripts and subseqent- ; ly used in compiled code: ; ; \verbatim; // MyRun.h ; class MyRun : public TObject ; { ; public: ; static MyRun* Instance() { ... } ; void SetGenerator(TGenerator* g) { fGenerator = g; } ; void Run(Int_t n, Option_t* option="""") ; { ; TFile* file = TFile::Open(""file.root"",""RECREATE""); ; TTree* tree = new TTree(""T"",""T""); ; TClonesArray* p = new TClonesArray(""TParticles""); ; tree->Branch(""particles"", &p); ; for (Int_t event = 0; event < n; event++) { ; fGenerator->GenerateEvent(); ; fGenerator->ImportParticles(p,option); ; tree->Fill(); ; } ; file->Write(); ; file->Close(); ; } ; ... ; protected: ; TGenerator* fGenerator; ; ClassDefOverride(MyRun,0); ; }; ; ; // Config.C ; void Config() ; { ; MyRun* run = MyRun::Instance(); ; run->SetGenerator(MyGenerator::Instance()); ; } ; ; // main.cxx ; int ; main(int argc, char** argv) ; { ; TAp",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/montecarlo/eg/src/TGenerator.cxx:2909,safe,safe,2909,montecarlo/eg/src/TGenerator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/montecarlo/eg/src/TGenerator.cxx,1,['safe'],['safe']
Safety,"ET; ///; /// * Call construction overhead: 3 (save + BL + restore); /// * Frame construction overhead: 1 (ret); /// * Requires stack fixups? Yes; ///; /// \p MachineOutlinerTailCall implies that the function is being created from; /// a sequence of instructions ending in a return.; ///; /// That is,; ///; /// I1 OUTLINED_FUNCTION:; /// I2 --> B OUTLINED_FUNCTION I1; /// RET I2; /// RET; ///; /// * Call construction overhead: 1 (B); /// * Frame construction overhead: 0 (Return included in sequence); /// * Requires stack fixups? No; ///; /// \p MachineOutlinerNoLRSave implies that the function should be called using; /// a BL instruction, but doesn't require LR to be saved and restored. This; /// happens when LR is known to be dead.; ///; /// That is,; ///; /// I1 OUTLINED_FUNCTION:; /// I2 --> BL OUTLINED_FUNCTION I1; /// I3 I2; /// I3; /// RET; ///; /// * Call construction overhead: 1 (BL); /// * Frame construction overhead: 1 (RET); /// * Requires stack fixups? No; ///; /// \p MachineOutlinerThunk implies that the function is being created from; /// a sequence of instructions ending in a call. The outlined function is; /// called with a BL instruction, and the outlined function tail-calls the; /// original call destination.; ///; /// That is,; ///; /// I1 OUTLINED_FUNCTION:; /// I2 --> BL OUTLINED_FUNCTION I1; /// BL f I2; /// B f; /// * Call construction overhead: 1 (BL); /// * Frame construction overhead: 0; /// * Requires stack fixups? No; ///; /// \p MachineOutlinerRegSave implies that the function should be called with a; /// save and restore of LR to an available register. This allows us to avoid; /// stack fixups. Note that this outlining variant is compatible with the; /// NoLRSave case.; ///; /// That is,; ///; /// I1 Save LR OUTLINED_FUNCTION:; /// I2 --> BL OUTLINED_FUNCTION I1; /// I3 Restore LR I2; /// I3; /// RET; ///; /// * Call construction overhead: 3 (save + BL + restore); /// * Frame construction overhead: 1 (ret); /// * Requires stack fixups? No",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp:2088,avoid,avoid,2088,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp,1,['avoid'],['avoid']
Safety,"Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TGeoChecker; \ingroup Geometry_painter. Geometry checking package. TGeoChecker class provides several geometry checking methods. There are two; types of tests that can be performed. One is based on random sampling or; ray-tracing and provides a visual check on how navigation methods work for; a given geometry. The second actually checks the validity of the geometry; definition in terms of overlapping/extruding objects. Both types of checks; can be done for a given branch (starting with a given volume) as well as for; the geometry as a whole. #### TGeoChecker::CheckPoint(Double_t x, Double_t y, Double_t z). This method can be called directly from the TGeoManager class and print a; report on how a given point is classified by the modeller: which is the; full path to the deepest node containing it, and the (under)estimation; of the distance to the closest boundary (safety). #### TGeoChecker::RandomPoints(Int_t npoints). Can be called from TGeoVolume class. It first draws the volume and its; content with the current visualization settings. Then randomly samples points; in its bounding box, plotting in the geometry display only the points; classified as belonging to visible volumes. #### TGeoChecker::RandomRays(Int_t nrays, Double_t startx, starty, startz). Can be called and acts in the same way as the previous, but instead of points,; rays having random isotropic directions are generated from the given point.; A raytracing algorithm propagates all rays until they exit geometry, plotting; all segments crossing visible nodes in the same color as these. #### TGeoChecker::Test(Int_t npoints). Implementation of TGeoManager::Test(). Computes the time for the modeller; to find out ""Where am I?"" for a given number of random points",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geompainter/src/TGeoChecker.cxx:1357,safe,safety,1357,geom/geompainter/src/TGeoChecker.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geompainter/src/TGeoChecker.cxx,1,['safe'],['safety']
Safety,"HDR and IEND chunks must not be listed. Because this turns off the; * default handling for chunks that would otherwise be recognized the; * behavior of libpng transformations may well become incorrect!; *; * WRITE:; * When writing chunks the options only apply to the chunks specified by; * png_set_unknown_chunks (below), libpng will *always* write known chunks; * required by png_set_ calls and will always write the core critical chunks; * (as required for PLTE).; *; * Each chunk in the png_set_unknown_chunks list is looked up in the; * png_set_keep_unknown_chunks list to find the keep setting, this is then; * interpreted as follows:; *; * PNG_HANDLE_CHUNK_AS_DEFAULT:; * Write safe-to-copy chunks and write other chunks if the global; * default is set to _ALWAYS, otherwise don't write this chunk.; * PNG_HANDLE_CHUNK_NEVER:; * Do not write the chunk.; * PNG_HANDLE_CHUNK_IF_SAFE:; * Write the chunk if it is safe-to-copy, otherwise do not write it.; * PNG_HANDLE_CHUNK_ALWAYS:; * Write the chunk.; *; * Note that the default behavior is effectively the opposite of the read case -; * in read unknown chunks are not stored by default, in write they are written; * by default. Also the behavior of PNG_HANDLE_CHUNK_IF_SAFE is very different; * - on write the safe-to-copy bit is checked, on read the critical bit is; * checked and on read if the chunk is critical an error will be raised.; *; * num_chunks:; * ===========; * If num_chunks is positive, then the ""keep"" parameter specifies the manner; * for handling only those chunks appearing in the chunk_list array,; * otherwise the chunk list array is ignored.; *; * If num_chunks is 0 the ""keep"" parameter specifies the default behavior for; * unknown chunks, as described above.; *; * If num_chunks is negative, then the ""keep"" parameter specifies the manner; * for handling all unknown chunks plus all chunks recognized by libpng; * except for the IHDR, PLTE, tRNS, IDAT, and IEND chunks (which continue to; * be processed by libpng.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:3933,safe,safe-to-copy,3933,graf2d/asimage/src/libAfterImage/libpng/png.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h,1,['safe'],['safe-to-copy']
Safety,"IS PROPERTY OF BURKHARD BUROW. IF YOU ARE USING THIS FILE YOU; SHOULD ALSO HAVE ACCESS TO CFORTRAN.DOC WHICH PROVIDES TERMS FOR USING,; MODIFYING, COPYING AND DISTRIBUTING THE CFORTRAN.H PACKAGE.; */; /* The following modifications were made by the authors of CFITSIO or by me.; * They are flagged below with CFITSIO, the author's initials, or KMCCARTY.; * PDW = Peter Wilson; * DM = Doug Mink; * LEB = Lee E Brotzman; * MR = Martin Reinecke; * WDP = William D Pence; * -- Kevin McCarty, for Debian (19 Dec. 2005) */; /*******; Modifications:; Oct 1997: Changed symbol name extname to appendus (PDW/HSTX); (Conflicted with a common variable name in FTOOLS); Nov 1997: If g77Fortran defined, also define f2cFortran (PDW/HSTX); Feb 1998: Let VMS see the NUM_ELEMS code. Lets programs treat; single strings as vectors with single elements; Nov 1999: If macintoxh defined, also define f2cfortran (for Mac OS-X); Apr 2000: If WIN32 defined, also define PowerStationFortran and; VISUAL_CPLUSPLUS (Visual C++); Jun 2000: If __GNUC__ and linux defined, also define f2cFortran; (linux/gcc environment detection); Apr 2002: If __CYGWIN__ is defined, also define f2cFortran; Nov 2002: If __APPLE__ defined, also define f2cfortran (for Mac OS-X). Nov 2003: If __INTEL_COMPILER or INTEL_COMPILER defined, also define; f2cFortran (KMCCARTY); Dec 2005: If f2cFortran is defined, enforce REAL functions in FORTRAN; returning ""double"" in C. This was one of the items on; Burkhard's TODO list. (KMCCARTY); Dec 2005: Modifications to support 8-byte integers. (MR); USE AT YOUR OWN RISK!; Feb 2006 Added logic to typedef the symbol 'LONGLONG' to an appropriate; intrinsic 8-byte integer datatype (WDP); Apr 2006: Modifications to support gfortran (and g77 with -fno-f2c flag); since by default it returns ""float"" for FORTRAN REAL function.; (KMCCARTY); May 2008: Revert commenting out of ""extern"" in COMMON_BLOCK_DEF macro.; Add braces around do-nothing "";"" in 3 empty while blocks to; get rid of compiler warnings. Thank",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/montecarlo/eg/inc/cfortran.h:1106,detect,detection,1106,montecarlo/eg/inc/cfortran.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/montecarlo/eg/inc/cfortran.h,1,['detect'],['detection']
Safety,"ImplicitMT(i); ~~~; replacing `i` with the number of CPUs/slots that were allocated for this job. ### Thread-safety of user-defined expressions; RDataFrame operations such as Histo1D() or Snapshot() are guaranteed to work correctly in multi-thread event loops.; User-defined expressions, such as strings or lambdas passed to Filter(), Define(), Foreach(), Reduce() or Aggregate(); will have to be thread-safe, i.e. it should be possible to call them concurrently from different threads. Note that simple Filter() and Define() transformations will inherently satisfy this requirement: Filter() / Define(); expressions will often be *pure* in the functional programming sense (no side-effects, no dependency on external state),; which eliminates all risks of race conditions. In order to facilitate writing of thread-safe operations, some RDataFrame features such as Foreach(), Define() or \link ROOT::RDF::RResultPtr::OnPartialResult OnPartialResult()\endlink; offer thread-aware counterparts (ForeachSlot(), DefineSlot(), \link ROOT::RDF::RResultPtr::OnPartialResultSlot OnPartialResultSlot()\endlink): their only difference is that they; will pass an extra `slot` argument (an unsigned integer) to the user-defined expression. When calling user-defined code; concurrently, RDataFrame guarantees that different threads will employ different values of the `slot` parameter,; where `slot` will be a number between 0 and `GetNSlots() - 1`.; In other words, within a slot, computation runs sequentially and events are processed sequentially.; Note that the same slot might be associated to different threads over the course of a single event loop, but two threads; will never receive the same slot at the same time.; This extra parameter might facilitate writing safe parallel code by having each thread write/modify a different; processing slot, e.g. a different element of a list. See [here](#generic-actions) for an example usage of ForeachSlot(). ### Parallel execution of multiple RDataFrame event l",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx:49126,safe,safe,49126,tree/dataframe/src/RDataFrame.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx,1,['safe'],['safe']
Safety,"K, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; //////////////////////////////////////////////////////////////////////////////; /** \class RooChi2Var; \ingroup Roofitcore; \brief Simple \f$ \chi^2 \f$ calculation from a binned dataset and a PDF.; *; * It calculates:; *; \f{align*}{; \chi^2 &= \sum_{\mathrm{bins}} \left( \frac{N_\mathrm{PDF,bin} - N_\mathrm{Data,bin}}{\Delta_\mathrm{bin}} \right)^2 \\; N_\mathrm{PDF,bin} &=; \begin{cases}; \mathrm{pdf}(\text{bin centre}) \cdot V_\mathrm{bin} \cdot N_\mathrm{Data,tot} &\text{normal PDF}\\; \mathrm{pdf}(\text{bin centre}) \cdot V_\mathrm{bin} \cdot N_\mathrm{Data,expected} &\text{extended PDF}; \end{cases} \\; \Delta_\mathrm{bin} &=; \begin{cases}; \sqrt{N_\mathrm{PDF,bin}} &\text{if } \mathtt{DataError == RooAbsData::Expected}\\; \mathtt{data{\rightarrow}weightError()} &\text{otherwise} \\; \end{cases}; \f}; * If the dataset doesn't have user-defined errors, errors are assumed to be \f$ \sqrt{N} \f$.; * In extended PDF mode, N_tot (total number of data events) is substituted with N_expected, the; * expected number of events that the PDF predicts.; *; * \note If the dataset has errors stored, empty bins will prevent the calculation of \f$ \chi^2 \f$, because those have; * zero error. This leads to messages like:; * ```; * [#0] ERROR:Eval -- RooChi2Var::RooChi2Var(chi2_GenPdf_data_hist) INFINITY ERROR: bin 2 has zero error; * ```; *; * \note In this case, one can use the expected errors of the PDF instead of the data errors:; * ```{.cpp}; * RooChi2Var chi2(..., ..., RooFit::DataError(RooAbsData::Expected), ...);; * ```; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooChi2Var.cxx:1749,predict,predicts,1749,roofit/roofitcore/src/RooChi2Var.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooChi2Var.cxx,1,['predict'],['predicts']
Safety,"NN"", where NN is the delay of displaying; /// subimages during animation in 10ms seconds units. NN is not restricted; /// to two digits. If NN is omitted the delay between subimages is zero.; /// For an animation that stops after last subimage is reached, one has to; /// write the last image as .gif+ (zero delay of last image) or .gif+NN; /// (NN*10ms delay of last image).; ///; /// For repeated animation (looping), the last subimage must be specified as:; /// - ""myfile.gif++NN++"" if you want an infinite looping gif with NN*10ms; /// delay of the last image.; /// - ""myfile.gif++"" for an infinite loop with zero delay of last image.; /// - ""myfile.gif+NN++RR"" if you want a finite looping gif with NN*10ms; /// delay of the last image and the animation to be stopped after RR; /// repeats. RR is not restricted to two digits.; ///; /// A deprecated version for saving the last subimage of a looping gif animation is:; /// - ""myfile.gif++NN"" for a finite loop where NN is number of repetitions; /// and NN*10ms the delay of last image. (No separate control of repeats and delay).; /// Note: If the file ""myfile.gif"" already exists, the new frames are appended at; /// the end of the file. To avoid this, delete it first with gSystem->Unlink(myfile.gif);; ///; /// The following macro creates animated gif from jpeg images with names; /// - imageNN.jpg, where 1<= NN <= 10; /// - The delays are set to 10*10ms.; /// ~~~ {.cpp}; /// {; /// TImage *img = 0;; /// gSystem->Unlink(""anim.gif""); // delete existing file; ///; /// for (int i = 1; i <= 10; i++) {; /// delete img; // delete previous image; ///; /// // Read image data. Image can be in any format, e.g. png, gif, etc.; /// img = TImage::Open(Form(""image%d.jpg"", i));; ///; /// if (i < 10) {; /// img->WriteImage(""anim.gif+10""); // 10 centiseconds delay; /// } else { // the last image written. ""++"" stands for infinit animation.; /// img->WriteImage(""anim.gif++10++""); // 10 centiseconds delay of last image; /// }; /// }; /// }; /// ~~~",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/TASImage.cxx:1652,avoid,avoid,1652,graf2d/asimage/src/TASImage.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/TASImage.cxx,1,['avoid'],['avoid']
Safety,"NU Library General Public; License as published by the Free Software Foundation; either; version 2 of the License, or (at your option) any later version. **************************************************************************/; /** \class TGMenuBar; \ingroup guiwidgets. The TGMenu.h header contains all different menu classes. The TGMenuBar class implements a menu bar widget. It is used to; specify and provide access to common and frequently used application; actions grouped under menu titles (TGMenuTitle class). The menu bar; takes the highest-level of the menu system and it is a starting; point for many interactions. It is always visible and allows using; the keyboard equivalents. The geometry of the menu bar is; automatically set to the parent widget, i.e. the menu bar; automatically resizes itself so that it has the same width as its; parent (typically TGMainFrame). A menu bar contains one or more; popup menus and usually is placed along the top of the application; window. Any popup menu is invisible until the user invokes it by; using the mouse pointer or the keyboard. Popup menus implemented by TGPopupMenu class are unique in that,; by convention, they are not placed with the other GUI components in; the user interfaces. Instead, a popup menu usually appears either in; a menu bar or as a context menu on the TOP of the GUI. For that; reason it needs gClient->GetDefaultRoot() as a parent to get the; pointer to the root (i.e. desktop) window. This way a popup menu; will never be embedded.; NOTE: Using gClient->GetRoot() as a parent of TGPopupMenu will not; avoid the possibility of embedding the corresponding popup menu; because the current window hierarchy can be changed by using; gClient->SetRoot() method. As a context menus TGPopupMenu shows up after pressing the right; mouse button, over a popup-enabled component. The popup menu then; appears under the mouse pointer. Selecting a menu item will generate the event:; kC_COMMAND, kCM_MENU, menu id, user data. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGMenu.cxx:2307,avoid,avoid,2307,gui/gui/src/TGMenu.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGMenu.cxx,1,['avoid'],['avoid']
Safety,"R""(; int CLASS_NAME::getGenerator(const RooArgSet &directVars, RooArgSet &generateVars, bool /*staticInitOK*/) const; {; // LIST HERE OVER WHICH VARIABLES INTERNAL GENERATION IS SUPPORTED, ASSIGN A; // NUMERIC CODE FOR EACH SUPPORTED (SET OF) PARAMETERS. THE EXAMPLE BELOW; // ASSIGNS CODE 1 TO INTEGRATION OVER VARIABLE X. YOU CAN ALSO IMPLEMENT; // MORE THAN ONE GENERATOR CONFIGURATION BY REPEATING THE matchArgs; // EXPRESSION MULTIPLE TIMES. IF THE FLAG staticInitOK IS TRUE, THEN IT IS; // SAFE TO PRECALCULATE INTERMEDIATE QUANTITIES IN initGenerator(), IF IT IS; // NOT SET THEN YOU SHOULD NOT ADVERTISE ANY GENERATOR METHOD THAT RELIES ON; // PRECALCULATIONS IN initGenerator(). // if (matchArgs(directVars,generateVars,x)) return 1;; return 0;; }. void CLASS_NAME::generateEvent(int code); {; // GENERATE SET OF OBSERVABLES DEFINED BY RETURN CODE ASSIGNED BY; // getGenerator(). RETURN THE GENERATED VALUES BY ASSIGNING THEM TO THE; // PROXY DATA MEMBERS THAT REPRESENT THE CHOSEN OBSERVABLES. // assert(code==1);; // x = 0;; return;; }; )""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooClassFactory.cxx:496,SAFE,SAFE,496,roofit/roofitcore/src/RooClassFactory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooClassFactory.cxx,1,['SAFE'],['SAFE']
Safety,"R""CODE(::Process(Long64_t entry); {; // The Process() function is called for each entry in the tree (or possibly; // keyed object in the case of PROOF) to be processed. The entry argument; // specifies which entry in the currently loaded tree is to be processed.; // When processing keyed objects with PROOF, the object is already loaded; // and is available via the fObject pointer.; //; // This function should contain the \""body\"" of the analysis. It can contain; // simple or elaborate selection criteria, run algorithms on the data; // of the event and typically fill histograms.; //; // The processing can be stopped by calling Abort().; //; // Use fStatus to set the return value of TTree::Process().; //; // The return value is currently not used. fReader.SetLocalEntry(entry);. return true;; }. void )CODE""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeReaderGenerator.cxx:634,Abort,Abort,634,tree/treeplayer/src/TTreeReaderGenerator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeReaderGenerator.cxx,1,['Abort'],['Abort']
Safety,"\mathrm{observed} \cdot \log(N_\mathrm{expect} \f$); /// of this PDF for the given number of observed events.; ///; /// For successful operation, the PDF implementation must indicate that; /// it is extendable by overloading `canBeExtended()`, and must; /// implement the `expectedEvents()` function.; ///; /// \param[in] sumEntries The number of observed events.; /// \param[in] nset The normalization set when asking the pdf for the expected; /// number of events.; /// \param[in] observedSumW2 The number of observed events when weighting with; /// squared weights. If non-zero, the weight-squared error; /// correction is applied to the extended term.; /// \param[in] doOffset Offset the extended term by a counterterm where the; /// expected number of events equals the observed number of events.; /// This constant shift results in a term closer to zero that is; /// approximately chi-square distributed. It is useful to do this; /// also when summing multiple NLL terms to avoid numeric precision; /// loss that happens if you sum multiple terms of different orders; /// of magnitude.; ///; /// The weight-squared error correction works as follows:; /// adjust poisson such that; /// estimate of \f$N_\mathrm{expect}\f$ stays at the same value, but has a different variance, rescale; /// both the observed and expected count of the Poisson with a factor \f$ \sum w_{i} / \sum w_{i}^2 \f$; /// (the effective weight of the Poisson term),; /// i.e., change \f$\mathrm{Poisson}(N_\mathrm{observed} = \sum w_{i} | N_\mathrm{expect} )\f$; /// to \f$ \mathrm{Poisson}(\sum w_{i} \cdot \sum w_{i} / \sum w_{i}^2 | N_\mathrm{expect} \cdot \sum w_{i} / \sum w_{i}^2 ) \f$,; /// weighted by the effective weight \f$ \sum w_{i}^2 / \sum w_{i} \f$ in the likelihood.; /// Since here we compute the likelihood with the weight square, we need to multiply by the; /// square of the effective weight:; /// - \f$ W_\mathrm{expect} = N_\mathrm{expect} \cdot \sum w_{i} / \sum w_{i}^2 \f$ : effective expected ent",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:1129,avoid,avoid,1129,roofit/roofitcore/src/RooAbsPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx,1,['avoid'],['avoid']
Safety,"ache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file adds DWARF discriminators to the IR. Path discriminators are; // used to decide what CFG path was taken inside sub-graphs whose instructions; // share the same line and column number information.; //; // The main user of this is the sample profiler. Instruction samples are; // mapped to line number information. Since a single line may be spread; // out over several basic blocks, discriminators add more precise location; // for the samples.; //; // For example,; //; // 1 #define ASSERT(P); // 2 if (!(P)); // 3 abort(); // ...; // 100 while (true) {; // 101 ASSERT (sum < 0);; // 102 ...; // 130 }; //; // when converted to IR, this snippet looks something like:; //; // while.body: ; preds = %entry, %if.end; // %0 = load i32* %sum, align 4, !dbg !15; // %cmp = icmp slt i32 %0, 0, !dbg !15; // br i1 %cmp, label %if.end, label %if.then, !dbg !15; //; // if.then: ; preds = %while.body; // call void @abort(), !dbg !15; // br label %if.end, !dbg !15; //; // Notice that all the instructions in blocks 'while.body' and 'if.then'; // have exactly the same debug information. When this program is sampled; // at runtime, the profiler will assume that all these instructions are; // equally frequent. This, in turn, will consider the edge while.body->if.then; // to be frequently taken (which is incorrect).; //; // By adding a discriminator value to the instructions in block 'if.then',; // we can distinguish instructions at line 101 with discriminator 0 from; // the instructions at line 101 with discriminator 1.; //; // For more details about DWARF discriminators, please visit; // http://wiki.dwarfstd.org/index.php?title=Path_Discriminators; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/AddDiscriminators.cpp:1299,abort,abort,1299,interpreter/llvm-project/llvm/lib/Transforms/Utils/AddDiscriminators.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/AddDiscriminators.cpp,1,['abort'],['abort']
Safety,"after the app operation. Computers don't work this way. Current; /// implementation ignores the load aspect of CAS/RMW, always returning a clean; /// value. It implements the store part as a simple atomic store by storing a; /// clean shadow.; ///; /// Instrumenting inline assembly.; ///; /// For inline assembly code LLVM has little idea about which memory locations; /// become initialized depending on the arguments. It can be possible to figure; /// out which arguments are meant to point to inputs and outputs, but the; /// actual semantics can be only visible at runtime. In the Linux kernel it's; /// also possible that the arguments only indicate the offset for a base taken; /// from a segment register, so it's dangerous to treat any asm() arguments as; /// pointers. We take a conservative approach generating calls to; /// __msan_instrument_asm_store(ptr, size); /// , which defer the memory unpoisoning to the runtime library.; /// The latter can perform more complex address checks to figure out whether; /// it's safe to touch the shadow memory.; /// Like with atomic operations, we call __msan_instrument_asm_store() before; /// the assembly call, so that changes to the shadow memory will be seen by; /// other threads together with main memory initialization.; ///; /// KernelMemorySanitizer (KMSAN) implementation.; ///; /// The major differences between KMSAN and MSan instrumentation are:; /// - KMSAN always tracks the origins and implies msan-keep-going=true;; /// - KMSAN allocates shadow and origin memory for each page separately, so; /// there are no explicit accesses to shadow and origin in the; /// instrumentation.; /// Shadow and origin values for a particular X-byte memory location; /// (X=1,2,4,8) are accessed through pointers obtained via the; /// __msan_metadata_ptr_for_load_X(ptr); /// __msan_metadata_ptr_for_store_X(ptr); /// functions. The corresponding functions check that the X-byte accesses; /// are possible and returns the pointers to shadow and origi",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/MemorySanitizer.cpp:5750,safe,safe,5750,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/MemorySanitizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/MemorySanitizer.cpp,1,['safe'],['safe']
Safety,"al variable, set if the removal of; /// background before deconvolution is desired.; /// - deconIterations-number of iterations in deconvolution operation.; /// - markov: logical variable, if it is true, first the source spectrum; /// is replaced by new spectrum calculated using Markov; /// chains method.; /// - averWindow: averaging window of searched peaks, for details; /// we refer to manual (applies only for Markov method).; ///; /// ### Peaks searching:; ///; /// The goal of this function is to identify automatically the peaks in spectrum; /// with the presence of the continuous background and statistical; /// fluctuations - noise.; ///; /// The common problems connected with correct peak identification are:; ///; /// - non-sensitivity to noise, i.e., only statistically; /// relevant peaks should be identified.; /// - non-sensitivity of the algorithm to continuous; /// background.; /// - ability to identify peaks close to the edges of the; /// spectrum region. Usually peak finders fail to detect them.; /// - resolution, decomposition of Double_tts and multiplets.; /// The algorithm should be able to recognise close positioned peaks.; /// - ability to identify peaks with different sigma.; ///; /// \image html TSpectrum_Searching1.jpg Fig. 27 An example of one-dimensional synthetic spectrum with found peaks denoted by markers.; ///; /// #### References:; ///; /// 1. M.A. Mariscotti: A method for identification of peaks in the presence of; /// background and its application to spectrum analysis. NIM 50 (1967),; /// 309-320.; /// 2. M. Morhac;, J. Kliman, V. Matouoek, M. Veselsky,; /// I. Turzo.:Identification of peaks in; /// multidimensional coincidence gamma-ray spectra. NIM, A443 (2000) 108-125.; /// 3. Z.K. Silagadze, A new algorithm for automatic photopeak searches. NIM; /// A 376 (1996), 451.; ///; /// Examples of peak searching method:; ///; /// The SearchHighRes function provides users with the possibility to vary the; /// input parameters and with the acc",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/spectrum/src/TSpectrum.cxx:2132,detect,detect,2132,hist/spectrum/src/TSpectrum.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/spectrum/src/TSpectrum.cxx,1,['detect'],['detect']
Safety,"all possible matches and select the longest.; * The key feature of this algorithm is that insertions into the string; * dictionary are very simple and thus fast, and deletions are avoided; * completely. Insertions are performed at each input character, whereas; * string matches are performed only when the previous match ends. So it; * is preferable to spend more time in matches to allow very fast string; * insertions and avoid deletions. The matching algorithm for small; * strings is inspired from that of Rabin & Karp. A brute force approach; * is used to find longer strings when a small match has been found.; * A similar algorithm is used in comic (by Jan-Mark Wams) and freeze; * (by Leonid Broukhis).; * A previous version of this file used a more sophisticated algorithm; * (by Fiala and Greene) which is guaranteed to run in linear amortized; * time, but has a larger average cost, uses more memory and is patented.; * However the F&G algorithm may be faster for some highly redundant; * files if the parameter max_chain_length (described below) is too large.; *; * ACKNOWLEDGEMENTS; *; * The idea of lazy evaluation of matches is due to Jan-Mark Wams, and; * I found it in 'freeze' written by Leonid Broukhis.; * Thanks to many info-zippers for bug reports and testing.; *; * REFERENCES; *; * APPNOTE.TXT documentation file in PKZIP 1.93a distribution.; *; * A description of the Rabin and Karp algorithm is given in the book; * ""Algorithms"" by R. Sedgewick, Addison-Wesley, p252.; *; * Fiala,E.R., and Greene,D.H.; * Data Compression with Finite Windows, Comm.ACM, 32,4 (1989) 490-595; *; * INTERFACE; *; * void lm_init (int pack_level, ush *flags); * Initialize the ""longest match"" routines for a new file; *; * ulg deflate (void); * Processes a new input file and return its compressed length. Sets; * the compressed length, crc, deflate flags and internal file; * attributes.; */; /* #include ""zip.h"" */; /* #include ""ZIP.h"" */; /* ==================================================",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/zip/src/ZDeflate.c:1489,redund,redundant,1489,core/zip/src/ZDeflate.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/zip/src/ZDeflate.c,1,['redund'],['redundant']
Safety,"all. In this implementation, inflate() always flushes as much output as; possible to the output buffer, and always uses the faster approach on the; first call. So the only effect of the flush parameter in this implementation; is on the return value of inflate(), as noted below, or when it returns early; because Z_BLOCK is used. If a preset dictionary is needed after this call (see inflateSetDictionary; below), inflate sets strm->adler to the adler32 checksum of the dictionary; chosen by the compressor and returns Z_NEED_DICT; otherwise it sets; strm->adler to the adler32 checksum of all output produced so far (that is,; total_out bytes) and returns Z_OK, Z_STREAM_END or an error code as described; below. At the end of the stream, inflate() checks that its computed adler32; checksum is equal to that saved by the compressor and returns Z_STREAM_END; only if the checksum is correct. inflate() will decompress and check either zlib-wrapped or gzip-wrapped; deflate data. The header type is detected automatically. Any information; contained in the gzip header is not retained, so applications that need that; information should instead use raw inflate, see inflateInit2() below, or; inflateBack() and perform their own processing of the gzip header and; trailer. inflate() returns Z_OK if some progress has been made (more input processed; or more output produced), Z_STREAM_END if the end of the compressed data has; been reached and all uncompressed output has been produced, Z_NEED_DICT if a; preset dictionary is needed at this point, Z_DATA_ERROR if the input data was; corrupted (input stream not conforming to the zlib format or incorrect check; value), Z_STREAM_ERROR if the stream structure was inconsistent (for example; if next_in or next_out was NULL), Z_MEM_ERROR if there was not enough memory,; Z_BUF_ERROR if no progress is possible or if there was not enough room in the; output buffer when Z_FINISH is used. Note that Z_BUF_ERROR is not fatal, and; inflate() can be called a",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:4439,detect,detected,4439,graf2d/asimage/src/libAfterImage/zlib/zlib.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h,1,['detect'],['detected']
Safety,"amples. We will designate non-overlapping nodes as ONLY and the others; MANY as in GEANT3, where this concept was introduced:; 1. The part of a MANY node B extruding its container A will never be ""seen""; during navigation, as if B was in fact the result of the intersection of A and B.; 2. If we have two nodes A (ONLY) and B (MANY) inside the same container, all; points in the overlapping region of A and B will be designated as belonging to A.; 3. If A an B in the above case were both MANY, points in the overlapping; part will be designated to the one defined first. Both nodes must have the; same medium.; 4. The slices of a divided MANY will be as well MANY. One needs to know that navigation inside geometry parts MANY nodes is much; slower. Any overlapping part can be defined based on composite shapes - this; is always recommended. ### Replicating volumes. What can we do if our chamber contains two identical wires instead of one ?; What if then we would need 1000 chambers in our detector ? Should we create; 2000 wires and 1000 chamber volumes ? No, we will just need to replicate the; ones that we have already created. ~~~ {.cpp}; chamber->AddNode(wire_co, 1, new TGeoTranslation(-0.2,0,0));; chamber->AddNode(wire_co, 2, new TGeoTranslation(0.2,0,0));; ~~~. The 2 nodes that we have created inside chamber will both point to a wire_co; object, but will be completely distinct : WIRE_CO_1 and WIRE_CO_2. We will; want now to place symmetrically 1000 chambers on a pad, following a pattern; of 20 rows and 50 columns. One way to do this will be to replicate our chamber; by positioning it 1000 times in different positions of the pad. Unfortunately,; this is far from being the optimal way of doing what we want.; Imagine that we would like to find out which of the 1000 chambers is containing; a (x,y,z) point defined in the pad reference. You will never have to do that,; since the modeller will take care of it for you, but let's guess what it has; to do. The most simple algorithm w",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoVolume.cxx:8792,detect,detector,8792,geom/geom/src/TGeoVolume.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoVolume.cxx,1,['detect'],['detector']
Safety,"analysis will find that the value coming around the backedge has; // the following SCEV:; // BEValue = ((sext i32 (trunc i64 %X to i32) to i64) + %Step); // Upon concluding that this matches the desired pattern, the function; // will return the pair {NewAddRec, SmallPredsVec} where:; // NewAddRec = {%Start,+,%Step}; // SmallPredsVec = {P1, P2, P3} as follows:; // P1(WrapPred): AR: {trunc(%Start),+,(trunc %Step)}<nsw> Flags: <nssw>; // P2(EqualPred): %Start == (sext i32 (trunc i64 %Start to i32) to i64); // P3(EqualPred): %Step == (sext i32 (trunc i64 %Step to i32) to i64); // The returned pair means that SymbolicPHI can be rewritten into NewAddRec; // under the predicates {P1,P2,P3}.; // This predicated rewrite will be cached in PredicatedSCEVRewrites:; // PredicatedSCEVRewrites[{%X,L}] = {NewAddRec, {P1,P2,P3)}; //; // TODO's:; //; // 1) Extend the Induction descriptor to also support inductions that involve; // casts: When needed (namely, when we are called in the context of the; // vectorizer induction analysis), a Set of cast instructions will be; // populated by this method, and provided back to isInductionPHI. This is; // needed to allow the vectorizer to properly record them to be ignored by; // the cost model and to avoid vectorizing them (otherwise these casts,; // which are redundant under the runtime overflow checks, will be; // vectorized, which can be costly).; //; // 2) Support additional induction/PHISCEV patterns: We also want to support; // inductions where the sext-trunc / zext-trunc operations (partly) occur; // after the induction update operation (the induction increment):; //; // (Trunc iy (SExt/ZExt ix (%SymbolicPHI + InvariantAccum) to iy) to ix); // which correspond to a phi->add->trunc->sext/zext->phi update chain.; //; // (Trunc iy ((SExt/ZExt ix (%SymbolicPhi) to iy) + InvariantAccum) to ix); // which correspond to a phi->trunc->add->sext/zext->phi update chain.; //; // 3) Outline common code with createAddRecFromPHI to avoid duplication.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp:2034,avoid,avoid,2034,interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,3,"['avoid', 'redund']","['avoid', 'redundant']"
Safety,"and ""BB"" suppress the; ""Front Box"" and ""Back Box"" around the plot. Begin_Macro(source); {; auto c2 = new TCanvas(""c2"",""c2"",600,400);; auto f3 = new TF3(""f3"",""sin(x*x+y*y+z*z-36)"",-2,2,-2,2,-2,2);; f3->SetClippingBoxOn(0,0,0);; f3->SetFillColor(30);; f3->SetLineColor(15);; f3->Draw(""FBBB"");; }; End_Macro. \anchor HP28; ### Associated functions drawing. An associated function is created by `TH1::Fit`. More than on fitted; function can be associated with one histogram (see `TH1::Fit`). A `TF1` object `f1` can be added to the list of associated; functions of an histogram `h` without calling `TH1::Fit`; simply doing:. h->GetListOfFunctions()->Add(f1);. or. h->GetListOfFunctions()->Add(f1,someoption);. To retrieve a function by name from this list, do:. TF1 *f1 = (TF1*)h->GetListOfFunctions()->FindObject(name);. or. TF1 *f1 = h->GetFunction(name);. Associated functions are automatically painted when an histogram is drawn.; To avoid the painting of the associated functions the option `HIST`; should be added to the list of the options used to paint the histogram. \anchor HP29; ### Drawing using OpenGL. The class `TGLHistPainter` allows to paint data set using the OpenGL 3D; graphics library. The plotting options start with `GL` keyword.; In addition, in order to inform canvases that OpenGL should be used to render; 3D representations, the following option should be set:. gStyle->SetCanvasPreferGL(true);. \anchor HP29a; #### General information: plot types and supported options. The following types of plots are provided:. For lego plots the supported options are:. | Option | Description |; |----------|-------------------------------------------------------------------|; | ""GLLEGO"" | Draw a lego plot. It works also for `TH2Poly`.|; | ""GLLEGO2""| Bins with color levels.|; | ""GLLEGO3""| Cylindrical bars.|. Lego painter in cartesian supports logarithmic scales for X, Y, Z.; In polar only Z axis can be logarithmic, in cylindrical only Y. For surface plots (`TF2` and `TH2`) the supp",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/THistPainter.cxx:98504,avoid,avoid,98504,hist/histpainter/src/THistPainter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/THistPainter.cxx,1,['avoid'],['avoid']
Safety,"and other objects written; /// after the setting is changed.; /// In case the file does not exist or is not a valid ROOT file,; /// it is made a Zombie. One can detect this situation with a code like:; /// ~~~{.cpp}; /// TFile f(""file.root"");; /// if (f.IsZombie()) {; /// std::cout << ""Error opening file"" << std::endl;; /// exit(-1);; /// }; /// ~~~; /// If you open a file instead with TFile::Open(""file.root"") use rather; /// the following code as a nullptr is returned.; /// ~~~{.cpp}; /// TFile* f = TFile::Open(""file.root"");; /// if (!f) {; /// std::cout << ""Error opening file"" << std::endl;; /// exit(-1);; /// }; /// ~~~; /// When opening the file, the system checks the validity of this directory.; /// If something wrong is detected, an automatic Recovery is performed. In; /// this case, the file is scanned sequentially reading all logical blocks; /// and attempting to rebuild a correct directory (see TFile::Recover).; /// One can disable the automatic recovery procedure when reading one; /// or more files by setting the environment variable ""TFile.Recover: 0""; /// in the system.rootrc file.; ///; /// A bit `TFile::kReproducible` can be enabled specifying; /// the `""reproducible""` url option when creating the file:; /// ~~~{.cpp}; /// TFile *f = TFile::Open(""name.root?reproducible"",""RECREATE"",""File title"");; /// ~~~; /// Unlike regular `TFile`s, the content of such file has reproducible binary; /// content when writing exactly same data. This achieved by writing pre-defined; /// values for creation and modification date of TKey/TDirectory objects and; /// null value for TUUID objects inside TFile. As drawback, TRef objects stored; /// in such file cannot be read correctly.; ///; /// In case the name of the file is not reproducible either (in case of; /// creating temporary filenames) a value can be passed to the reproducible; /// option to replace the name stored in the file.; /// ~~~{.cpp}; /// TFile *f = TFile::Open(""tmpname.root?reproducible=fixedname"",""RECREAT",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TFile.cxx:5391,recover,recovery,5391,io/io/src/TFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TFile.cxx,1,['recover'],['recovery']
Safety,"ansforming linearly the input variables into a diagonal space,; using the square-root of the covariance matrix. The method of maximum likelihood is the most straightforward, and; certainly among the most elegant multivariate analyser approaches.; We define the likelihood ratio, \f$ R_L \f$, for event; \f$ i \f$, by:. \f[; R_L(i) = \frac{L_S(i)}{L_B(i) + L_B(i)}; \f]. Here the signal and background likelihoods, \f$ L_S \f$,; \f$ L_B \f$, are products of the corresponding probability; densities, \f$ p_S \f$, \f$ p_B \f$, of the; \f$ N_{var} \f$ discriminating variables used in the MVA:. \f[; L_S(i) \ \prod_{j=1}^{N_{var}} p_{Sj} (i); \f]. and accordingly for \f$ L_B \f$.; In practise, TMVA uses polynomial splines to estimate the probability; density functions (PDF) obtained from the distributions of the; training variables. Note that in TMVA the output of the likelihood ratio is transformed by:. \f[; R_L(i) \to R'_L(i) = -\frac{1}{\tau} ln(R_L^{-1}(i) -1); \f]. to avoid the occurrence of heavy peaks at \f$ R_L = 0.1 \f$ . #### Decorrelated (or ""diagonalized"") Likelihood. The biggest drawback of the Likelihood approach is that it assumes; that the discriminant variables are uncorrelated. If it were the case,; it can be proven that the discrimination obtained by the above likelihood; ratio is optimal, ie, no other method can beat it. However, in most; practical applications of MVAs correlations are present. </p>. Linear correlations, measured from the training sample, can be taken; into account in a straightforward manner through the square-root; of the covariance matrix. The square-root of a matrix; \f$ C \f$ is the matrix \f$ C&prime; \f$ that multiplied with itself; yields \f$ C \f$: \f$ C \f$=\f$ C&prime;C&prime; \f$. We compute the; square-root matrix (SQM) by means of diagonalising (\f$ D \f$) the; covariance matrix:. \f[; D = S^TCS \Rightarrow C' = S \sqrt{DS^T}; \f]. and the linear transformation of the linearly correlated into the; uncorrelated variables space i",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodLikelihood.cxx:2369,avoid,avoid,2369,tmva/tmva/src/MethodLikelihood.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodLikelihood.cxx,1,['avoid'],['avoid']
Safety,"ape::DistFromInside(Double_t *point[3], Double_t *dir[3], Int_t iact, Double_t step, Double_t; *safe)`. computes the distance to exiting a shape from a given point INSIDE, along; a given direction. The direction is given by its director cosines with respect; to the local shape coordinate system. This method provides additional; information according the value of IACT input parameter :. - IACT = 0 => compute only safe distance and fill it at the location; given by SAFE; - IACT = 1 => a proposed STEP is supplied. The safe distance is computed; first. If this is bigger than STEP than the proposed step; is approved and returned by the method since it does not; cross the shape boundaries. Otherwise, the distance to; exiting the shape is computed and returned.; - IACT = 2 => compute both safe distance and distance to exiting, ignoring; the proposed step.; - IACT > 2 => compute only the distance to exiting, ignoring anything else. #### `Double_t TGeoShape::DistFromOutside(Double_t *point[3], Double_t *dir[3], Int_t iact, Double_t step, Double_t; *safe)`. computes the distance to entering a shape from a given point OUTSIDE. Acts; in the same way as B). #### `Double_t Safety(const Double_t *point[3], Bool_t inside)`. compute maximum shift of a point in any direction that does not change its; INSIDE/OUTSIDE state (does not cross shape boundaries). The state of the point; have to be properly supplied. #### `Double_t *Normal(Double_t *point[3], Double_t *dir[3], Bool_t inside)`. returns director cosines of normal to the crossed shape surface from a; given point towards a direction. One has to specify if the point is inside; or outside shape. According to this, the normal will be outwards or inwards; shape respectively. Normal components are statically stored by shape class,; so it has to be copied after retrieval in a different array. ### Dividing shapes. Shapes can generally be divided along a given axis. Supported axis are; X, Y, Z, Rxy, Phi, Rxyz. A given shape cannot be div",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoShape.cxx:5107,safe,safe,5107,geom/geom/src/TGeoShape.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoShape.cxx,1,['safe'],['safe']
Safety,"as written for speed at any cost. My goal was to write the fastest 3D; object viewer that I could, period. Regular programs ought to be written; with different goals in mind such as:. 1) A program has excellent documentation that ANYONE can read.; 2) A program when released has no strange ""features"" or bugs.; 3) A program is robust and handles ALL extreme and unusual cases.; 4) A program is written in phases and modules with hard tests for each one.; 5) A program is written for any user who doesn't need special knowledge; to use the program.; 6) A program has well defined user requirements and functional specifications.; 7) A program is written with regard to future expansion and integreation; with other systems (portability). When programming following these additional principles make programs easier; to maintain. A) Choose variable names that accurately describes what the variable does/is.; B) Write comments to inform someone faced with the task of modifying your code.; C) Avoid excessive comments. Write the code so that it says what it does.; D) Follow a strict one-in, one-out flow of control structues except in the; case of fatal error conditions.; E) Avoid using global variables.; F) Do not cause side effects to variables that were not parameters to a; function.; G) Have a single function perform a single purpose.; H) Select a single indentation style and stick with it.; I) Use a consistent naming convention. The following principles help me when I try optimizing code:. a) If optimizing, use a profiler to determine which sections of code most of; the time is spent in. Spend most of your effort in the most used sections.; Don't bother optimizing a procedure using less than 10% of the time. b) High level optimizations are far more effective than cycle shaving.; (e.g. use quick sort instead of optimizing a bubble sort.). c) Be flexible in your approach to solving a problem. List exactly what you; need as a result at a minimum. Get rid of unnecessary assumptions. d",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/x3d/src/x3d.c:2277,Avoid,Avoid,2277,graf3d/x3d/src/x3d.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/x3d/src/x3d.c,1,['Avoid'],['Avoid']
Safety,"ased by 1 every time a new collection is found.; /// For example if list is a TObjArray*; /// - if splitlevel = 1, one top level branch is created for each element; /// of the TObjArray.; /// - if splitlevel = 2, one top level branch is created for each array element.; /// if, in turn, one of the array elements is a TCollection, one top level; /// branch will be created for each element of this collection.; ///; /// In case a collection element is a TClonesArray, the special Tree constructor; /// for TClonesArray is called.; /// The collection itself cannot be a TClonesArray.; ///; /// The function returns the total number of branches created.; ///; /// If name is given, all branch names will be prefixed with name_.; ///; /// IMPORTANT NOTE1: This function should not be called with splitlevel < 1.; ///; /// IMPORTANT NOTE2: The branches created by this function will have names; /// corresponding to the collection or object names. It is important; /// to give names to collections to avoid misleading branch names or; /// identical branch names. By default collections have a name equal to; /// the corresponding class name, e.g. the default name for a TList is ""TList"".; ///; /// And in general, in case two or more master branches contain subbranches; /// with identical names, one must add a ""."" (dot) character at the end; /// of the master branch name. This will force the name of the subbranches; /// to be of the form `master.subbranch` instead of simply `subbranch`.; /// This situation happens when the top level object; /// has two or more members referencing the same class.; /// For example, if a Tree has two branches B1 and B2 corresponding; /// to objects of the same class MyClass, one can do:; /// ~~~ {.cpp}; /// tree.Branch(""B1."",""MyClass"",&b1,8000,1);; /// tree.Branch(""B2."",""MyClass"",&b2,8000,1);; /// ~~~; /// if MyClass has 3 members a,b,c, the two instructions above will generate; /// subbranches called B1.a, B1.b ,B1.c, B2.a, B2.b, B2.c; ///; /// Example:; /// ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTree.cxx:1381,avoid,avoid,1381,tree/tree/src/TTree.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTree.cxx,1,['avoid'],['avoid']
Safety,"ass to pass functions from ROOT to R. <center><h2>TRFunctionImport class</h2></center>; <p>; The TRFunctionImport class lets you call R's functions to ROOT's environment<br>; The object associated to this class have a set of overloaded operators to use the object like function<br>; </p>; \code{.cpp}; #include<TRInterface.h>. using namespace ROOT::R;; void Function(); {; TRInterface &r = TRInterface::Instance();; r.SetVerbose(1);; ////////////////////////////////////////; //defining functions to be used from R//; ////////////////////////////////////////; TRFunctionImport c(""c"");; TRFunctionImport list(""list"");; TRFunctionImport asformula(""as.formula"");; TRFunctionImport nls(""nls"");; TRFunctionImport confint(""confint"");; TRFunctionImport summary(""summary"");; TRFunctionImport print(""print"");; TRFunctionImport plot(""plot"");; TRFunctionImport lines(""lines"");; TRFunctionImport devnew(""dev.new"");; TRFunctionImport devoff(""dev.off"");; TRFunctionImport min(""min"");; TRFunctionImport max(""max"");; TRFunctionImport seq(""seq"");; TRFunctionImport predict(""predict"");. r<<""options(device='png')"";//enable plot in png file. ////////////////////////; //doing the procedure //; ////////////////////////; TRObject xdata = c(-2,-1.64,-1.33,-0.7,0,0.45,1.2,1.64,2.32,2.9);; TRObject ydata = c(0.699369,0.700462,0.695354,1.03905,1.97389,2.41143,1.91091,0.919576,-0.730975,-1.42001);. TRDataFrame data;; data[""xdata""]=xdata;; data[""ydata""]=ydata;. //fit = nls(ydata ~ p1*cos(p2*xdata) + p2*sin(p1*xdata), start=list(p1=1,p2=0.2)) <- R code; TRObject fit = nls(asformula(""ydata ~ p1*cos(p2*xdata) + p2*sin(p1*xdata)""),Label[""data""]=data, Label[""start""]=list(Label[""p1""]=1,Label[""p2""]=0.2));; print(summary(fit));. print(confint(fit));. devnew(""Fitting Regression"");; plot(xdata,ydata);. TRObject xgrid=seq(min(xdata),max(xdata),Label[""len""]=10);; lines(xgrid,predict(fit,xgrid),Label[""col""] = ""green"");; devoff();; }; \endcode. Output; \code; Formula: ydata ~ p1 * cos(p2 * xdata) + p2 * sin(p1 * xdata). Param",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/r/inc/TRFunctionImport.h:1090,predict,predict,1090,bindings/r/inc/TRFunctionImport.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/r/inc/TRFunctionImport.h,2,['predict'],['predict']
Safety,"atement inside a loop ----===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Transform each threading path to effectively jump thread the DFA. For; // example, the CFG below could be transformed as follows, where the cloned; // blocks unconditionally branch to the next correct case based on what is; // identified in the analysis.; //; // sw.bb sw.bb; // / | \ / | \; // case1 case2 case3 case1 case2 case3; // \ | / | | |; // determinator det.2 det.3 det.1; // br sw.bb / | \; // sw.bb.2 sw.bb.3 sw.bb.1; // br case2 br case3 br case1§; //; // Definitions and Terminology:; //; // * Threading path:; // a list of basic blocks, the exit state, and the block that determines; // the next state, for which the following notation will be used:; // < path of BBs that form a cycle > [ state, determinator ]; //; // * Predictable switch:; // The switch variable is always a known constant so that all conditional; // jumps based on switch variable can be converted to unconditional jump.; //; // * Determinator:; // The basic block that determines the next state of the DFA.; //; // Representing the optimization in C-like pseudocode: the code pattern on the; // left could functionally be transformed to the right pattern if the switch; // condition is predictable.; //; // X = A goto A; // for (...) A:; // switch (X) ...; // case A goto B; // X = B B:; // case B ...; // X = C goto C; //; // The pass first checks that switch variable X is decided by the control flow; // path taken in the loop; for example, in case B, the next value of X is; // decided to be C. It then enumerates through all paths in the loop and labels; // the basic blocks where the next state is decided.; //; // Using this information it creates new paths that unconditio",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/DFAJumpThreading.cpp:1120,Predict,Predictable,1120,interpreter/llvm-project/llvm/lib/Transforms/Scalar/DFAJumpThreading.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/DFAJumpThreading.cpp,1,['Predict'],['Predictable']
Safety,"ation; * - Improved 32-bit viability; *; * Speed analysis methodology is explained here:; *; * https://fastcompression.blogspot.com/2019/03/presenting-xxh3.html; *; * In general, expect XXH3 to run about ~2x faster on large inputs and >3x; * faster on small ones compared to XXH64, though exact differences depend on; * the platform.; *; * The algorithm is portable: Like XXH32 and XXH64, it generates the same hash; * on all platforms.; *; * It benefits greatly from SIMD and 64-bit arithmetic, but does not require it.; *; * Almost all 32-bit and 64-bit targets that can run XXH32 smoothly can run; * XXH3 at competitive speeds, even if XXH64 runs slowly. Further details are; * explained in the implementation.; *; * Optimized implementations are provided for AVX512, AVX2, SSE2, NEON, POWER8,; * ZVector and scalar targets. This can be controlled with the XXH_VECTOR macro.; *; * XXH3 offers 2 variants, _64bits and _128bits.; * When only 64 bits are needed, prefer calling the _64bits variant, as it; * reduces the amount of mixing, resulting in faster speed on small inputs.; *; * It's also generally simpler to manipulate a scalar return type than a struct.; *; * The 128-bit version adds additional strength, but it is slightly slower.; *; * The XXH3 algorithm is still in development.; * The results it produces may still change in future versions.; *; * Results produced by v0.7.x are not comparable with results from v0.7.y.; * However, the API is completely stable, and it can safely be used for; * ephemeral data (local sessions).; *; * Avoid storing values in long-term storage until the algorithm is finalized.; * XXH3's return values will be officially finalized upon reaching v0.8.0.; *; * After which, return values of XXH3 and XXH128 will no longer change in; * future versions.; *; * The API supports one-shot hashing, streaming mode, and custom secrets.; */; /* XXH3_64bits():; * default 64-bit variant, using default secret and default seed of 0.; * It's the fastest variant. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/xxhash/xxhash.h:1887,safe,safely,1887,builtins/xxhash/xxhash.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/xxhash/xxhash.h,2,"['Avoid', 'safe']","['Avoid', 'safely']"
Safety,"au,sde); ~~~; Background: Poisson; Efficiency: Gaussian; ~~~; when the background is simultaneously measured; from sidebands (or MC), and; the efficiency is modeled as Gaussian. 3: SetGaussBkgGaussEff(x,bm,em,sde,sdb); ~~~; Background: Gaussian; Efficiency: Gaussian; ~~~; when background and efficiency can both be; modeled as Gaussian. 4: SetPoissonBkgKnownEff(x,y,tau,e); ~~~; Background: Poisson; Efficiency: Known; ~~~; when the background is simultaneously measured; from sidebands (or MC). 5: SetGaussBkgKnownEff(x,bm,sdb,e); ~~~; Background: Gaussian; Efficiency: Known; ~~~; when background is Gaussian. 6: SetKnownBkgBinomEff(x,z,b,m); ~~~; Background: Known; Efficiency: Binomial; ~~~; when signal efficiency was determined from Monte Carlo. 7: SetKnownBkgGaussEff(x,em,sde,b); ~~~; Background: Known; Efficiency: Gaussian; ~~~; when background is known and efficiency Gaussian. ### Parameters and further explanation. #### For all models:; ~~~; x = number of observed events in the experiment; ~~~; Efficiency (e or em) is the detection probability for signal.; A low efficiency hence generally means weaker limits.; If the efficiency of an experiment (with analysis cuts) is; dealt with elsewhere, em or e can be set to one. #### For Poisson background measurements (sideband or MC):; ~~~; y = number of observed events in background region; tau =; Either: the ratio between signal and background region; in case background is observed.; Or: the ratio between observed and simulated live-time; in case background is determined from MC.; ~~~; #### For Gaussian efficiency or background:; ~~~; bm = estimate of the background; sdb = corresponding standard deviation. em = estimate of the efficiency; sde = corresponding standard deviation; ~~~; If the efficiency scale of dealt with elsewhere,; set em to 1 and sde to the relative uncertainty. #### For Binomial signal efficiency:; ~~~; m = number of MC events generated; z = number of MC events observed; ~~~; #### For the case of known ba",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/physics/src/TRolke.cxx:2143,detect,detection,2143,math/physics/src/TRolke.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/physics/src/TRolke.cxx,1,['detect'],['detection']
Safety,"auto h2 = new TH2F(""h2"",""Example of a resized palette "",40,-4,4,40,-20,20);; Float_t px, py;; for (Int_t i = 0; i < 25000; i++) {; gRandom->Rannor(px,py);; h2->Fill(px,5*py);; }; gStyle->SetPalette(1);; h2->Draw(""COLZ"");; gPad->Update();; auto palette = (TPaletteAxis*)h2->GetListOfFunctions()->FindObject(""palette"");; palette->SetY2NDC(0.7);; }; End_Macro. `TPaletteAxis` inherits from `TBox` and `TPave`. The methods; allowing to specify the palette position are inherited from these two classes. The palette can be interactively moved and resized. The context menu; can be used to set the axis attributes. It is possible to select a range on the axis to set the min/max in z. As default labels and ticks are drawn by `TGAxis` at equidistant (lin or log); points as controlled by SetNdivisions.; If option ""CJUST"" is given labels and ticks are justified at the; color boundaries defined by the contour levels.; In this case no optimization can be done. It is responsibility of the; user to adjust minimum, maximum of the histogram and/or the contour levels; to get a reasonable look of the plot.; Only overlap of the labels is avoided if too many contour levels are used. This option is especially useful with user defined contours.; An example is shown here:. Begin_Macro(source); {; gStyle->SetOptStat(0);; auto c = new TCanvas(""c"",""exa_CJUST"",300,10,400,400);; auto hpxpy = new TH2F(""hpxpy"",""py vs px"",40,-4,4,40,-4,4);; // Fill histograms randomly; TRandom3 randomNum;; Float_t px, py;; for (Int_t i = 0; i < 25000; i++) {; randomNum.Rannor(px,py);; hpxpy->Fill(px,py);; }; hpxpy->SetMaximum(200);; Double_t zcontours[5] = {0, 20, 40, 80, 120};; hpxpy->SetContour(5, zcontours);; hpxpy->GetZaxis()->SetTickSize(0.01);; hpxpy->GetZaxis()->SetLabelOffset(0.01);; gPad->SetRightMargin(0.13);; hpxpy->SetTitle(""User contours, CJUST"");; hpxpy->Draw(""COL Z CJUST"");; }; End_Macro; */; ////////////////////////////////////////////////////////////////////////////////; /// Palette default constructor.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/TPaletteAxis.cxx:1980,avoid,avoided,1980,hist/histpainter/src/TPaletteAxis.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/TPaletteAxis.cxx,1,['avoid'],['avoided']
Safety,"ay be changed at any time.; /// The new compression settings will only apply to branches created; /// or attached after the setting is changed and other objects written; /// after the setting is changed.; /// In case the file does not exist or is not a valid ROOT file,; /// it is made a Zombie. One can detect this situation with a code like:; /// ~~~{.cpp}; /// TFile f(""file.root"");; /// if (f.IsZombie()) {; /// std::cout << ""Error opening file"" << std::endl;; /// exit(-1);; /// }; /// ~~~; /// If you open a file instead with TFile::Open(""file.root"") use rather; /// the following code as a nullptr is returned.; /// ~~~{.cpp}; /// TFile* f = TFile::Open(""file.root"");; /// if (!f) {; /// std::cout << ""Error opening file"" << std::endl;; /// exit(-1);; /// }; /// ~~~; /// When opening the file, the system checks the validity of this directory.; /// If something wrong is detected, an automatic Recovery is performed. In; /// this case, the file is scanned sequentially reading all logical blocks; /// and attempting to rebuild a correct directory (see TFile::Recover).; /// One can disable the automatic recovery procedure when reading one; /// or more files by setting the environment variable ""TFile.Recover: 0""; /// in the system.rootrc file.; ///; /// A bit `TFile::kReproducible` can be enabled specifying; /// the `""reproducible""` url option when creating the file:; /// ~~~{.cpp}; /// TFile *f = TFile::Open(""name.root?reproducible"",""RECREATE"",""File title"");; /// ~~~; /// Unlike regular `TFile`s, the content of such file has reproducible binary; /// content when writing exactly same data. This achieved by writing pre-defined; /// values for creation and modification date of TKey/TDirectory objects and; /// null value for TUUID objects inside TFile. As drawback, TRef objects stored; /// in such file cannot be read correctly.; ///; /// In case the name of the file is not reproducible either (in case of; /// creating temporary filenames) a value can be passed to the reproducibl",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TFile.cxx:5346,Recover,Recover,5346,io/io/src/TFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TFile.cxx,1,['Recover'],['Recover']
Safety,"b) this copyright and permission notice appear in associated; * documentation, and; * (c) there is clear notice in each modified Data File or in the Software; * as well as in the documentation associated with the Data File(s) or; * Software that the data or software has been modified.; *; * THE DATA FILES AND SOFTWARE ARE PROVIDED ""AS IS"", WITHOUT WARRANTY OF; * ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE; * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND; * NONINFRINGEMENT OF THIRD PARTY RIGHTS.; * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR HOLDERS INCLUDED IN THIS; * NOTICE BE LIABLE FOR ANY CLAIM, OR ANY SPECIAL INDIRECT OR CONSEQUENTIAL; * DAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,; * DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER; * TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR; * PERFORMANCE OF THE DATA FILES OR SOFTWARE.; *; * Except as contained in this notice, the name of a copyright holder; * shall not be used in advertising or otherwise to promote the sale,; * use or other dealings in these Data Files or Software without prior; * written authorization of the copyright holder.; */; /* ---------------------------------------------------------------------. Conversions between UTF32, UTF-16, and UTF-8. Source code file.; Author: Mark E. Davis, 1994.; Rev History: Rick McGowan, fixes & updates May 2001.; Sept 2001: fixed const & error conditions per; mods suggested by S. Parent & A. Lillich.; June 2002: Tim Dodd added detection and handling of incomplete; source sequences, enhanced error detection, added casts; to eliminate compiler warnings.; July 2003: slight mods to back out aggressive FFFE detection.; Jan 2004: updated switches in from-UTF8 conversions.; Oct 2004: updated to use UNI_MAX_LEGAL_UTF32 in UTF-32 conversions. See the header file ""ConvertUTF.h"" for complete documentation. ------------------------------------------------------------------------ */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ConvertUTF.cpp:2716,detect,detection,2716,interpreter/llvm-project/llvm/lib/Support/ConvertUTF.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ConvertUTF.cpp,3,['detect'],['detection']
Safety,"badly parameterised so that individual errors are not very meaningful; because they are so highly correlated. 6. Parameter at limit. This condition, signalled by a MINUIT warning; message, may make both the function minimum and parameter errors; unreliable. See the discussion above ``Getting the right parameter errors; with limits''. The best way to be absolutely sure of the errors, is to use; ``independent'' calculations and compare them, or compare the calculated; errors with a picture of the function. Theoretically, the covariance; matrix for a ``physical'' function must be positive-definite at the; minimum, although it may not be so for all points far away from the; minimum, even for a well-determined physical problem. Therefore, if MIGRAD; reports that it has found a non-positive-definite covariance matrix, this; may be a sign of one or more of the following:. ##### A non-physical region:. On its way to the minimum, MIGRAD may have traversed a region which has; unphysical behaviour, which is of course not a serious problem as long as; it recovers and leaves such a region. ##### An underdetermined problem:. If the matrix is not positive-definite even at the minimum, this may mean; that the solution is not well-defined, for example that there are more; unknowns than there are data points, or that the parameterisation of the; fit contains a linear dependence. If this is the case, then MINUIT (or any; other program) cannot solve your problem uniquely, and the error matrix; will necessarily be largely meaningless, so the user must remove the; under-determinedness by reformulating the parameterisation. MINUIT cannot; do this itself. ##### Numerical inaccuracies:. It is possible that the apparent lack of positive-definiteness is in fact; only due to excessive roundoff errors in numerical calculations in the; user function or not enough precision. This is unlikely in general, but; becomes more likely if the number of free parameters is very large, or if. the parameters",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:10593,recover,recovers,10593,math/minuit/src/TMinuit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx,1,['recover'],['recovers']
Safety,"by (N+1); bin borders. In addition to the N bins inside there may be an underflow and an; overflow bin</li>; </ul>; Each bin has a ""global"" bin number, which can be found using the; GetGlobalBinNumber() methods. The global bin number 0 is reserved and; corresponds to the case where no bin is found in the; TUnfoldBinning tree. <h3>Use in the analysis</h3>; Booking histograms:; <ul>; <li>Define binning schemes on detector level and on truth level. This; can be done using the XML language, use the class TUnfoldBinningXML to; read the binning scheme. The TUnfoldBinning objects can be written to; a root file, preferentially together with the corresponding histograms.</li>; <li>For Monte Carlo, book histograms for the response matrix (detector; vs truth level) using the; method CreateHistogramOfMigrations()</li>; <li>For data and background, book histograms using the; ""detector level"" binning scheme and the method CreateHistogram()</li>; <li>(if required) for the data covarianve matrix, book a histogram using the; ""detector level"" binning scheme and the method CreateErrorMatrixHistogram()</li>; <li>For truth histograms, book histograms using the; ""truth level"" binning scheme and the method CreateHistogram()</li>; </ul>; The histograms which are booked have all analysis bins arranged on one; axis (global bin number). TUnfoldBinning provides methods to locate; the global bin number:; <ul>; <li>Use the method FindNode() to locate a group of bins (e.g. signal,; control distribution, etc) by their name, then:</li>; <li>Use the method GetGlobalBinNumber() to locate a bin in a; distribution, then:</li>; <li>Use the TH1::Fill() method and the bin number to fill the; appropriate bin in one of the histograms booked above.</li>; </ul>; Unfolding: Specify the response matrix and the binning schemes when; constructing a TUnfoldDensity object. Tell TUnfoldDensity about the; data, bakcground, systematic error histograms using the corresponding; methods of class TUnfoldDensity. Then run t",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfoldBinning.cxx:2592,detect,detector,2592,hist/unfold/src/TUnfoldBinning.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfoldBinning.cxx,3,['detect'],['detector']
Safety,"cording all references to variables; /// (DeclRefExprs or MemberExprs) within said nested lambda in its array of; /// PotentialCaptures. All such variables have to be captured by that lambda,; /// except for as described below.; /// If that variable is usable as a constant expression and is named in a; /// manner that does not involve its odr-use (e.g. undergoes; /// lvalue-to-rvalue conversion, or discarded) record that it is so. Upon the; /// act of analyzing the enclosing full expression (ActOnFinishFullExpr); /// if we can determine that the full expression is not instantiation-; /// dependent, then we can entirely avoid its capture.; ///; /// const int n = 0;; /// [&] (auto x) {; /// (void)+n + x;; /// };; /// Interestingly, this strategy would involve a capture of n, even though; /// it's obviously not odr-used here, because the full-expression is; /// instantiation-dependent. It could be useful to avoid capturing such; /// variables, even when they are referred to in an instantiation-dependent; /// expression, if we can unambiguously determine that they shall never be; /// odr-used. This would involve removal of the variable-referring-expression; /// from the array of PotentialCaptures during the lvalue-to-rvalue; /// conversions. But per the working draft N3797, (post-chicago 2013) we must; /// capture such variables.; /// Before anyone is tempted to implement a strategy for not-capturing 'n',; /// consider the insightful warning in:; /// /cfe-commits/Week-of-Mon-20131104/092596.html; /// ""The problem is that the set of captures for a lambda is part of the ABI; /// (since lambda layout can be made visible through inline functions and the; /// like), and there are no guarantees as to which cases we'll manage to build; /// an lvalue-to-rvalue conversion in, when parsing a template -- some; /// seemingly harmless change elsewhere in Sema could cause us to start or stop; /// building such a node. So we need a rule that anyone can implement and get; /// exactly th",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h:1224,avoid,avoid,1224,interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,1,['avoid'],['avoid']
Safety,"d constructed when needed) using ConstructedAt which only; calls the constructor once per slot.; ~~~ {.cpp}; TClonesArray a(""TTrack"", 10000);; while (TEvent *ev = (TEvent *)next()) { // O(100000) events; for (int i = 0; i < ev->Ntracks; i++) { // O(10000) tracks; TTrack *track = (TTrack*)a.ConstructedAt(i);; track->Set(x,y,z,....);; ...; ...; }; ...; a.Clear(); // or a.Clear(""C"");; }; ~~~; Note: the only supported way to add objects to a TClonesArray is; via the new with placement method or the ConstructedAt method.; The other Add() methods ofTObjArray and its base classes are not; allowed. Considering that a new/delete costs about 70 mus on a 300 MHz HP,; O(10^9) new/deletes will save about 19 hours. ### NOTE 1. C/C++ offers the possibility of allocating and deleting memory.; Forgetting to delete allocated memory is a programming error called a; ""memory leak"", i.e. the memory of your process grows and eventually; your program crashes. Even if you *always* delete the allocated; memory, the recovered space may not be efficiently reused. The; process knows that there are portions of free memory, but when you; allocate it again, a fresh piece of memory is grabbed. Your program; is free from semantic errors, but the total memory of your process; still grows, because your program's memory is full of ""holes"" which; reduce the efficiency of memory access; this is called ""memory; fragmentation"". Moreover new / delete are expensive operations in; terms of CPU time. Without entering into technical details, TClonesArray allows you to; ""reuse"" the same portion of memory for new/delete avoiding memory; fragmentation and memory growth and improving the performance by; orders of magnitude. Every time the memory of the TClonesArray has; to be reused, the Clear() method is used. To provide its benefits,; each TClonesArray must be allocated *once* per process and disposed; of (deleted) *only when not needed any more*. So a job should see *only one* deletion for each TClonesArray,; wh",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx:2564,recover,recovered,2564,core/cont/src/TClonesArray.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx,1,['recover'],['recovered']
Safety,"d pointer or against a pointer exclusively derived from null.; /// Poisoned pointers are produced when we somehow derive pointer from relocated; /// and unrelocated pointers (e.g. phi, select). This pointers may be safely; /// used in a very limited number of situations. Currently the only way to use; /// it is comparison against constant exclusively derived from null. All; /// limitations arise due to their undefined state: this pointers should be; /// treated as relocated and unrelocated simultaneously.; /// Rules of deriving:; /// R + U = P - that's where the poisoned pointers come from; /// P + X = P; /// U + U = U; /// R + R = R; /// X + C = X; /// Where ""+"" - any operation that somehow derive pointer, U - unrelocated,; /// R - relocated and P - poisoned, C - constant, X - U or R or P or C or; /// nothing (in case when ""+"" is unary operation).; /// Deriving of pointers by itself is always safe.; /// NOTE: when we are making decision on the status of instruction's result:; /// a) for phi we need to check status of each input *at the end of; /// corresponding predecessor BB*.; /// b) for other instructions we need to check status of each input *at the; /// current point*.; ///; /// FIXME: This works fairly well except one case; /// bb1:; /// p = *some GC-ptr def*; /// p1 = gep p, offset; /// / |; /// / |; /// bb2: |; /// safepoint |; /// \ |; /// \ |; /// bb3:; /// p2 = phi [p, bb2] [p1, bb1]; /// p3 = phi [p, bb2] [p, bb1]; /// here p and p1 is unrelocated; /// p2 and p3 is poisoned (though they shouldn't be); ///; /// This leads to some weird results:; /// cmp eq p, p2 - illegal instruction (false-positive); /// cmp eq p1, p2 - illegal instruction (false-positive); /// cmp eq p, p3 - illegal instruction (false-positive); /// cmp eq p, p1 - ok; /// To fix this we need to introduce conception of generations and be able to; /// check if two values belong to one generation or not. This way p2 will be; /// considered to be unrelocated and no false alarm will happen.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/SafepointIRVerifier.cpp:1820,safe,safepoint,1820,interpreter/llvm-project/llvm/lib/IR/SafepointIRVerifier.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/SafepointIRVerifier.cpp,1,['safe'],['safepoint']
Safety,"d, expanding some branch may cause a control; /// transfer instruction to appear in the forbidden slot, which is a hazard that; /// should be fixed. This pass alternates between this two tasks untill no; /// changes are made. Only then we can be sure that all branches are expanded; /// properly, and no hazard situations exist.; ///; /// Regarding branch expanding:; ///; /// When branch instruction like beqzc or bnezc has offset that is too large; /// to fit into its immediate field, it has to be expanded to another; /// instruction or series of instructions.; ///; /// FIXME: Fix pc-region jump instructions which cross 256MB segment boundaries.; /// TODO: Handle out of range bc, b (pseudo) instructions.; ///; /// Regarding compact branch hazard prevention:; ///; /// Hazards handled: forbidden slots for MIPSR6, FPU slots for MIPS3 and below,; /// load delay slots for MIPS1.; ///; /// A forbidden slot hazard occurs when a compact branch instruction is executed; /// and the adjacent instruction in memory is a control transfer instruction; /// such as a branch or jump, ERET, ERETNC, DERET, WAIT and PAUSE.; ///; /// For example:; ///; /// 0x8004 bnec a1,v0,<P+0x18>; /// 0x8008 beqc a1,a2,<P+0x54>; ///; /// In such cases, the processor is required to signal a Reserved Instruction; /// exception.; ///; /// Here, if the instruction at 0x8004 is executed, the processor will raise an; /// exception as there is a control transfer instruction at 0x8008.; ///; /// There are two sources of forbidden slot hazards:; ///; /// A) A previous pass has created a compact branch directly.; /// B) Transforming a delay slot branch into compact branch. This case can be; /// difficult to process as lookahead for hazards is insufficient, as; /// backwards delay slot fillling can also produce hazards in previously; /// processed instuctions.; ///; /// In future this pass can be extended (or new pass can be created) to handle; /// other pipeline hazards, such as various MIPS1 hazards, processor er",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsBranchExpansion.cpp:2010,hazard,hazard,2010,interpreter/llvm-project/llvm/lib/Target/Mips/MipsBranchExpansion.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsBranchExpansion.cpp,1,['hazard'],['hazard']
Safety,"d; /// }; /// ~~~; /// In the previous example replacing ""ps"" by ""pdf"" will create a multi-pages PDF file.; ///; /// Note that the following sequence writes the canvas to ""c1.ps"" and closes the ps file.:; /// ~~~ {.cpp}; /// TCanvas c1(""c1"");; /// h1.Draw();; /// c1.Print(""c1.ps"");; /// ~~~; /// The `TCanvas::Print(""file.ps("")` mechanism is very useful, but it can be; /// a little inconvenient to have the action of opening/closing a file; /// being atomic with printing a page. Particularly if pages are being; /// generated in some loop one needs to detect the special cases of first; /// and last page and then munge the argument to Print() accordingly.; ///; /// The ""["" and ""]"" can be used instead of ""("" and "")"".; ///; /// Example:; /// ~~~ {.cpp}; /// c1.Print(""file.ps[""); // No actual print, just open file.ps; /// for (int i=0; i<10; ++i) {; /// // fill canvas for context i; /// // ...; ///; /// c1.Print(""file.ps""); // actually print canvas to file; /// }// end loop; /// c1.Print(""file.ps]""); // No actual print, just close.; /// ~~~; /// As before, the same macro is valid for PDF files.; ///; /// It is possible to print a canvas into an animated GIF file by specifying the; /// file name as ""myfile.gif+"" or ""myfile.gif+NN"", where NN*10ms is delay; /// between the subimages' display. If NN is omitted the delay between; /// subimages is zero. Each picture is added in the animation thanks to a loop; /// similar to the following one:; /// ~~~ {.cpp}; /// for (int i=0; i<10; ++i) {; /// // fill canvas for context i; /// // ...; ///; /// c1.Print(""file.gif+5""); // print canvas to GIF file with 50ms delays; /// }// end loop; /// ~~~; /// The delay between each frame must be specified in each Print() statement.; /// If the file ""myfile.gif"" already exists, the new frame are appended at; /// the end of the file. To avoid this, delete it first with `gSystem->Unlink(myfile.gif);`; /// If you want the gif file to repeat or loop forever, check TASImage::WriteImage documentation",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:6256,avoid,avoid,6256,graf2d/gpad/src/TPad.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx,1,['avoid'],['avoid']
Safety,"der the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass performs below peephole optimizations on MIR level.; //; // 1. MOVi32imm + ANDWrr ==> ANDWri + ANDWri; // MOVi64imm + ANDXrr ==> ANDXri + ANDXri; //; // 2. MOVi32imm + ADDWrr ==> ADDWRi + ADDWRi; // MOVi64imm + ADDXrr ==> ANDXri + ANDXri; //; // 3. MOVi32imm + SUBWrr ==> SUBWRi + SUBWRi; // MOVi64imm + SUBXrr ==> SUBXri + SUBXri; //; // The mov pseudo instruction could be expanded to multiple mov instructions; // later. In this case, we could try to split the constant operand of mov; // instruction into two immediates which can be directly encoded into; // *Wri/*Xri instructions. It makes two AND/ADD/SUB instructions instead of; // multiple `mov` + `and/add/sub` instructions.; //; // 4. Remove redundant ORRWrs which is generated by zero-extend.; //; // %3:gpr32 = ORRWrs $wzr, %2, 0; // %4:gpr64 = SUBREG_TO_REG 0, %3, %subreg.sub_32; //; // If AArch64's 32-bit form of instruction defines the source operand of; // ORRWrs, we can remove the ORRWrs because the upper 32 bits of the source; // operand are set to zero.; //; // 5. %reg = INSERT_SUBREG %reg(tied-def 0), %subreg, subidx; // ==> %reg:subidx = SUBREG_TO_REG 0, %subreg, subidx; //; // 6. %intermediate:gpr32 = COPY %src:fpr128; // %dst:fpr128 = INSvi32gpr %dst_vec:fpr128, dst_index, %intermediate:gpr32; // ==> %dst:fpr128 = INSvi32lane %dst_vec:fpr128, dst_index, %src:fpr128, 0; //; // In cases where a source FPR is copied to a GPR in order to be copied; // to a destination FPR, we can directly copy the values between the FPRs,; // eliminating the use of the Integer unit. When we match a pattern of; // INSvi[X]gpr that is preceded by a chain of COPY instructions from a FPR; // source, we use the INSvi[X]lane to replace the COPY & INSvi[X]gpr; ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64MIPeepholeOpt.cpp:1096,redund,redundant,1096,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64MIPeepholeOpt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64MIPeepholeOpt.cpp,1,['redund'],['redundant']
Safety,"dler make tables for fixed blocks only once.; c13 5 Jan 93 M. Adler allow all zero length codes (pkzip 2.04c; outputs one zero length code for an empty; distance tree).; c14 12 Mar 93 M. Adler made inflate.c standalone with the; introduction of inflate.h.; c14b 16 Jul 93 G. Roelofs added (unsigned) typecast to w at 470.; c14c 19 Jul 93 J. Bush changed v[N_MAX], l[288], ll[28x+3x] arrays; to static for Amiga.; c14d 13 Aug 93 J-l. Gailly de-complicatified Mark's c[*p++]++ thing.; c14e 8 Oct 93 G. Roelofs changed memset() to memzero().; c14f 22 Oct 93 G. Roelofs renamed quietflg to qflag; made Trace(); conditional; added inflate_free().; c14g 28 Oct 93 G. Roelofs changed l/(lx+1) macro to pointer (Cray bug); c14h 7 Dec 93 C. Ghisler huft_build() optimizations.; c14i 9 Jan 94 A. Verheijen set fixed_t{d,l} to NULL after freeing;; G. Roelofs check NEXTBYTE macro for EOF.; c14j 23 Jan 94 G. Roelofs removed Ghisler ""optimizations""; ifdef'd; EOF check.; c14k 27 Feb 94 G. Roelofs added some typecasts to avoid warnings.; c14l 9 Apr 94 G. Roelofs fixed split comments on preprocessor lines; to avoid bug in Encore compiler.; c14m 7 Jul 94 P. Kienitz modified to allow assembler version of; inflate_codes() (define ASM_INFLATECODES); c14n 22 Jul 94 G. Roelofs changed fprintf to FPRINTF for DLL versions; c14o 23 Aug 94 C. Spieler added a newline to a debug statement;; G. Roelofs added another typecast to avoid MSC warning; */; /*; Inflate deflated (PKZIP's method 8 compressed) data. The compression; method searches for as much of the current string of bytes (up to a; length of 258) in the previous 32K bytes. If it doesn't find any; matches (of at least length 3), it codes the next byte. Otherwise, it; codes the length of the matched string and its distance backwards from; the current position. There is a single Huffman code that codes both; single bytes (called ""literals"") and match lengths. A second Huffman; code codes the distance information, which follows a length code. Each; len",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/zip/src/ZInflate.c:3388,avoid,avoid,3388,core/zip/src/ZInflate.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/zip/src/ZInflate.c,1,['avoid'],['avoid']
Safety,"during minimization (on by default); * <tr><td> `Hesse(bool flag)` <td> Flag controls if HESSE is run after MIGRAD, on by default; * <tr><td> `Minos(bool flag)` <td> Flag controls if MINOS is run after HESSE, off by default; * <tr><td> `Minos(const RooArgSet& set)` <td> Only run MINOS on given subset of arguments; * <tr><td> `Save(bool flag)` <td> Flag controls if RooFitResult object is produced and returned, off by default; * <tr><td> `Strategy(Int_t flag)` <td> Set Minuit strategy (0 to 2, default is 1); * <tr><td> `MaxCalls(int n)` <td> Change maximum number of likelihood function calls from MINUIT (if `n <= 0`, the default of 500 * #%parameters is used); * <tr><td> `EvalErrorWall(bool flag=true)` <td> When parameters are in disallowed regions (e.g. PDF is negative), return very high value to fitter; * to force it out of that region. This can, however, mean that the fitter gets lost in this region. If; * this happens, try switching it off.; * <tr><td> `RecoverFromUndefinedRegions(double strength)` <td> When PDF is invalid (e.g. parameter in undefined region), try to direct minimiser away from that region.; * `strength` controls the magnitude of the penalty term. Leaving out this argument defaults to 10. Switch off with `strength = 0.`.; *; * <tr><td> `SumW2Error(bool flag)` <td> Apply correction to errors and covariance matrix.; * This uses two covariance matrices, one with the weights, the other with squared weights,; * to obtain the correct errors for weighted likelihood fits. If this option is activated, the; * corrected covariance matrix is calculated as \f$ V_\mathrm{corr} = V C^{-1} V \f$, where \f$ V \f$ is the original; * covariance matrix and \f$ C \f$ is the inverse of the covariance matrix calculated using the; * squared weights. This allows to switch between two interpretations of errors:; * <table>; * <tr><th> SumW2Error <th> Interpretation; * <tr><td> true <td> The errors reflect the uncertainty of the Monte Carlo simulation.; * Use this if you want",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:3233,Recover,RecoverFromUndefinedRegions,3233,roofit/roofitcore/src/RooAbsPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx,1,['Recover'],['RecoverFromUndefinedRegions']
Safety,"e html geom_frameexp.jpg. - 3 - bomb in radial spherical coordinate : TGeoManager::SetBombR(). Volumes themselves support different visualization settings :; - TGeoVolume::SetVisibility() : set volume visibility.; - TGeoVolume::VisibleDaughters() : set daughters visibility.; All these actions automatically updates the current view if any. ### Checking the geometry. Several checking methods are accessible from the volume context menu. They; generally apply only to the visible parts of the drawn geometry in order to; ease geometry checking, and their implementation is in the TGeoChecker class; from the painting package. #### Checking a given point.; Can be called from TGeoManager::CheckPoint(Double_t x, Double_t y, Double_t z).; This method is drawing the daughters of the volume containing the point one; level down, printing the path to the deepest physical node holding this point.; It also computes the closest distance to any boundary. The point will be drawn; in red, as well as a sphere having this closest distance as radius. In case a; non-zero distance is given by the user as fifth argument of CheckPoint, this; distance will be used as radius of the safety sphere. \image html geom_checkpoint.jpg. #### Shooting random points.; Can be called from TGeoVolume::RandomPoints() (context menu function) and; it will draw this volume with current visualization settings. Random points; are generated in the bounding box of the top drawn volume. The points are; classified and drawn with the color of their deepest container. Only points; in visible nodes will be drawn. \image html geom_random1.jpg. #### Raytracing.; Can be called from TGeoVolume::RandomRays() (context menu of volumes) and; will shoot rays from a given point in the local reference frame with random; directions. The intersections with displayed nodes will appear as segments; having the color of the touched node. Drawn geometry will be then made invisible; in order to enhance rays. \image html geom_random2.jpg; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoManager.cxx:11119,safe,safety,11119,geom/geom/src/TGeoManager.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoManager.cxx,1,['safe'],['safety']
Safety,"e similar pass implemented in X86SpeculativeLoadHardening.cpp, as; // the instruction set characteristics result in different trade-offs.; // - The speculation hardening is done after register allocation. With a; // relative abundance of registers, one register is reserved (X16) to be; // the taint register. X16 is expected to not clash with other register; // reservation mechanisms with very high probability because:; // . The AArch64 ABI doesn't guarantee X16 to be retained across any call.; // . The only way to request X16 to be used as a programmer is through; // inline assembly. In the rare case a function explicitly demands to; // use X16/W16, this pass falls back to hardening against speculation; // by inserting a DSB SYS/ISB barrier pair which will prevent control; // flow speculation.; // - It is easy to insert mask operations at this late stage as we have; // mask operations available that don't set flags.; // - The taint variable contains all-ones when no miss-speculation is detected,; // and contains all-zeros when miss-speculation is detected. Therefore, when; // masking, an AND instruction (which only changes the register to be masked,; // no other side effects) can easily be inserted anywhere that's needed.; // - The tracking of miss-speculation is done by using a data-flow conditional; // select instruction (CSEL) to evaluate the flags that were also used to; // make conditional branch direction decisions. Speculation of the CSEL; // instruction can be limited with a CSDB instruction - so the combination of; // CSEL + a later CSDB gives the guarantee that the flags as used in the CSEL; // aren't speculated. When conditional branch direction gets miss-speculated,; // the semantics of the inserted CSEL instruction is such that the taint; // register will contain all zero bits.; // One key requirement for this to work is that the conditional branch is; // followed by an execution of the CSEL instruction, where the CSEL; // instruction needs to use the sa",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64SpeculationHardening.cpp:2409,detect,detected,2409,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64SpeculationHardening.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64SpeculationHardening.cpp,2,['detect'],['detected']
Safety,"e-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a function pass that initializes undef vector value to; // temporary pseudo instruction and remove it in expandpseudo pass to prevent; // register allocation resulting in a constraint violated result for vector; // instruction. It also rewrites the NoReg tied operand back to an; // IMPLICIT_DEF.; //; // RISC-V vector instruction has register overlapping constraint for certain; // instructions, and will cause illegal instruction trap if violated, we use; // early clobber to model this constraint, but it can't prevent register; // allocator allocated same or overlapped if the input register is undef value,; // so convert IMPLICIT_DEF to temporary pseudo instruction and remove it later; // could prevent that happen, it's not best way to resolve this, and it might; // change the order of program or increase the register pressure, so ideally we; // should model the constraint right, but before we model the constraint right,; // it's the only way to prevent that happen.; //; // When we enable the subregister liveness option, it will also trigger same; // issue due to the partial of register is undef. If we pseudoinit the whole; // register, then it will generate redundant COPY instruction. Currently, it; // will generate INSERT_SUBREG to make sure the whole register is occupied; // when program encounter operation that has early-clobber constraint.; //; //; // See also: https://github.com/llvm/llvm-project/issues/50157; //; // Additionally, this pass rewrites tied operands of vector instructions; // from NoReg to IMPLICIT_DEF. (Not that this is a non-overlapping set of; // operands to the above.) We use NoReg to side step a MachineCSE; // optimization quality problem but need to convert back before; // TwoAddressInstruction. See pr64282 for context.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVRVVInitUndef.cpp:1579,redund,redundant,1579,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVRVVInitUndef.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVRVVInitUndef.cpp,1,['redund'],['redundant']
Safety,"e. Removed; register union.; c2 4 Apr 92 M. Adler fixed bug for file sizes a multiple of 32k.; c3 10 Apr 92 M. Adler reduced memory of code tables made by; huft_build significantly (factor of two to; three).; c4 15 Apr 92 M. Adler added NOMEMCPY do kill use of memcpy().; worked around a Turbo C optimization bug.; c5 21 Apr 92 M. Adler added the WSIZE #define to allow reducing; the 32K window size for specialized; applications.; c6 31 May 92 M. Adler added some typecasts to eliminate warnings; c7 27 Jun 92 G. Roelofs added some more typecasts (444: MSC bug).; c8 5 Oct 92 J-l. Gailly added ifdef'd code to deal with PKZIP bug.; c9 9 Oct 92 M. Adler removed a memory error message (~line 416).; c10 17 Oct 92 G. Roelofs changed ULONG/UWORD/byte to ulg/ush/uch,; removed old inflate, renamed inflate_entry; to inflate, added Mark's fix to a comment.; c10.5 14 Dec 92 M. Adler fix up error messages for incomplete trees.; c11 2 Jan 93 M. Adler fixed bug in detection of incomplete; tables, and removed assumption that EOB is; the longest code (bad assumption).; c12 3 Jan 93 M. Adler make tables for fixed blocks only once.; c13 5 Jan 93 M. Adler allow all zero length codes (pkzip 2.04c; outputs one zero length code for an empty; distance tree).; c14 12 Mar 93 M. Adler made inflate.c standalone with the; introduction of inflate.h.; c14b 16 Jul 93 G. Roelofs added (unsigned) typecast to w at 470.; c14c 19 Jul 93 J. Bush changed v[N_MAX], l[288], ll[28x+3x] arrays; to static for Amiga.; c14d 13 Aug 93 J-l. Gailly de-complicatified Mark's c[*p++]++ thing.; c14e 8 Oct 93 G. Roelofs changed memset() to memzero().; c14f 22 Oct 93 G. Roelofs renamed quietflg to qflag; made Trace(); conditional; added inflate_free().; c14g 28 Oct 93 G. Roelofs changed l/(lx+1) macro to pointer (Cray bug); c14h 7 Dec 93 C. Ghisler huft_build() optimizations.; c14i 9 Jan 94 A. Verheijen set fixed_t{d,l} to NULL after freeing;; G. Roelofs check NEXTBYTE macro for EOF.; c14j 23 Jan 94 G. Roelofs removed Ghisler",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/zip/src/ZInflate.c:2257,detect,detection,2257,core/zip/src/ZInflate.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/zip/src/ZInflate.c,1,['detect'],['detection']
Safety,"ect id |; | *:rawdata | raw data, column contains id of raw data from _streamer_ table |; | *:Int_t | column with integer value |. Use TSQLFile::SetUseSuffixes(kFALSE) to disable suffixes usage.; This and several other options can be changed only when; TSQLFile created with options ""CREATE"" or ""RECREATE"" and only before; first write operation. These options are:; | Name | Description |; |------|-------------|; | SetUseSuffixes() | suffix usage in column names (default - on) |; | SetArrayLimit() | defines maximum array size, which can has column for each element (default 21) |; | SetTablesType() | table type name in MySQL database (default ""InnoDB"") |; | SetUseIndexes() | usage of indexes in database (default kIndexesBasic) |. Normally these functions should be called immediately after TSQLFile constructor.; When objects data written to database, by default START TRANSACTION/COMMIT; SQL commands are used before and after data storage. If TSQLFile detects; any problems, ROLLBACK command will be used to restore; previous state of data base. If transactions not supported by SQL server,; they can be disabled by SetUseTransactions(kTransactionsOff). Or user; can take responsibility to use transactions function himself.; By default only indexes for basic tables are created.; In most cases usage of indexes increase performance to data reading,; but it also can increase time of writing data to database.; There are several modes of index usage available in SetUseIndexes() method; There is MakeSelectQuery(TClass*) method, which; produces SELECT statement to get objects data of specified class.; Difference from simple statement like:; mysql> SELECT * FROM TH1I_ver1; that not only data for that class, but also data from parent classes; will be extracted from other tables and combined in single result table.; Such select query can be useful for external access to objects data. Up to now MySQL 4.1 and Oracle 9i were tested.; Some extra work is required for other SQL databases.; Ho",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/sql/src/TSQLFile.cxx:4812,detect,detects,4812,io/sql/src/TSQLFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/sql/src/TSQLFile.cxx,1,['detect'],['detects']
Safety,"eference Library License version 1 (for libpng 0.5 through 1.6.35); * -----------------------------------------------------------------------; *; * libpng versions 1.0.7, July 1, 2000, through 1.6.35, July 15, 2018 are; * Copyright (c) 2000-2002, 2004, 2006-2018 Glenn Randers-Pehrson, are; * derived from libpng-1.0.6, and are distributed according to the same; * disclaimer and license as libpng-1.0.6 with the following individuals; * added to the list of Contributing Authors:; *; * Simon-Pierre Cadieux; * Eric S. Raymond; * Mans Rullgard; * Cosmin Truta; * Gilles Vollant; * James Yu; * Mandar Sahastrabuddhe; * Google Inc.; * Vadim Barkov; *; * and with the following additions to the disclaimer:; *; * There is no warranty against interference with your enjoyment of; * the library or against infringement. There is no warranty that our; * efforts or the library will fulfill any of your particular purposes; * or needs. This library is provided with all faults, and the entire; * risk of satisfactory quality, performance, accuracy, and effort is; * with the user.; *; * Some files in the ""contrib"" directory and some configure-generated; * files that are distributed with libpng have other copyright owners, and; * are released under other open source licenses.; *; * libpng versions 0.97, January 1998, through 1.0.6, March 20, 2000, are; * Copyright (c) 1998-2000 Glenn Randers-Pehrson, are derived from; * libpng-0.96, and are distributed according to the same disclaimer and; * license as libpng-0.96, with the following individuals added to the; * list of Contributing Authors:; *; * Tom Lane; * Glenn Randers-Pehrson; * Willem van Schaik; *; * libpng versions 0.89, June 1996, through 0.96, May 1997, are; * Copyright (c) 1996-1997 Andreas Dilger, are derived from libpng-0.88,; * and are distributed according to the same disclaimer and license as; * libpng-0.88, with the following individuals added to the list of; * Contributing Authors:; *; * John Bowler; * Kevin Bracey; * Sam Bu",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:3487,risk,risk,3487,graf2d/asimage/src/libAfterImage/libpng/png.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h,1,['risk'],['risk']
Safety,"el 1. These are defined; /// in the header file <em>Compression.h</em>.; /// Note that the compression settings may be changed at any time.; /// The new compression settings will only apply to branches created; /// or attached after the setting is changed and other objects written; /// after the setting is changed.; /// In case the file does not exist or is not a valid ROOT file,; /// it is made a Zombie. One can detect this situation with a code like:; /// ~~~{.cpp}; /// TFile f(""file.root"");; /// if (f.IsZombie()) {; /// std::cout << ""Error opening file"" << std::endl;; /// exit(-1);; /// }; /// ~~~; /// If you open a file instead with TFile::Open(""file.root"") use rather; /// the following code as a nullptr is returned.; /// ~~~{.cpp}; /// TFile* f = TFile::Open(""file.root"");; /// if (!f) {; /// std::cout << ""Error opening file"" << std::endl;; /// exit(-1);; /// }; /// ~~~; /// When opening the file, the system checks the validity of this directory.; /// If something wrong is detected, an automatic Recovery is performed. In; /// this case, the file is scanned sequentially reading all logical blocks; /// and attempting to rebuild a correct directory (see TFile::Recover).; /// One can disable the automatic recovery procedure when reading one; /// or more files by setting the environment variable ""TFile.Recover: 0""; /// in the system.rootrc file.; ///; /// A bit `TFile::kReproducible` can be enabled specifying; /// the `""reproducible""` url option when creating the file:; /// ~~~{.cpp}; /// TFile *f = TFile::Open(""name.root?reproducible"",""RECREATE"",""File title"");; /// ~~~; /// Unlike regular `TFile`s, the content of such file has reproducible binary; /// content when writing exactly same data. This achieved by writing pre-defined; /// values for creation and modification date of TKey/TDirectory objects and; /// null value for TUUID objects inside TFile. As drawback, TRef objects stored; /// in such file cannot be read correctly.; ///; /// In case the name of the file is",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TFile.cxx:5158,detect,detected,5158,io/io/src/TFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TFile.cxx,2,"['Recover', 'detect']","['Recovery', 'detected']"
Safety,"en the; // source and destination operands of XADD are GPR32, there is no sub-register; // dead info. If we rely on the generic MachineInstr::allDefsAreDead, then we; // will raise false alarm on GPR32 Def.; //; // To support GPR32 Def, ideally we could just enable sub-registr liveness track; // on BPF backend, then allDefsAreDead could work on GPR32 Def. This requires; // implementing TargetSubtargetInfo::enableSubRegLiveness on BPF.; //; // However, sub-register liveness tracking module inside LLVM is actually; // designed for the situation where one register could be split into more than; // one sub-registers for which case each sub-register could have their own; // liveness and kill one of them doesn't kill others. So, tracking liveness for; // each make sense.; //; // For BPF, each 64-bit register could only have one 32-bit sub-register. This; // is exactly the case which LLVM think brings no benefits for doing; // sub-register tracking, because the live range of sub-register must always; // equal to its parent register, therefore liveness tracking is disabled even; // the back-end has implemented enableSubRegLiveness. The detailed information; // is at r232695:; //; // Author: Matthias Braun <matze@braunis.de>; // Date: Thu Mar 19 00:21:58 2015 +0000; // Do not track subregister liveness when it brings no benefits; //; // Hence, for BPF, we enhance MachineInstr::allDefsAreDead. Given the solo; // sub-register always has the same liveness as its parent register, LLVM is; // already attaching a implicit 64-bit register Def whenever the there is; // a sub-register Def. The liveness of the implicit 64-bit Def is available.; // For example, for ""lock *(u32 *)(r0 + 4) += w9"", the MachineOperand info could; // be:; //; // $w9 = XADDW32 killed $r0, 4, $w9(tied-def 0),; // implicit killed $r9, implicit-def dead $r9; //; // Even though w9 is not marked as Dead, the parent register r9 is marked as; // Dead correctly, and it is safe to use such information or our purpose.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/BPF/BPFMIChecking.cpp:2120,safe,safe,2120,interpreter/llvm-project/llvm/lib/Target/BPF/BPFMIChecking.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/BPF/BPFMIChecking.cpp,1,['safe'],['safe']
Safety,"ending output is; flushed to the output buffer and the output is aligned on a byte boundary, so; that the decompressor can get all input data available so far. (In particular; avail_in is zero after the call if enough output space has been provided; before the call.) Flushing may degrade compression for some compression; algorithms and so it should be used only when necessary. If flush is set to Z_FULL_FLUSH, all output is flushed as with; Z_SYNC_FLUSH, and the compression state is reset so that decompression can; restart from this point if previous compressed data has been damaged or if; random access is desired. Using Z_FULL_FLUSH too often can seriously degrade; compression. If deflate returns with avail_out == 0, this function must be called again; with the same value of the flush parameter and more output space (updated; avail_out), until the flush is complete (deflate returns with non-zero; avail_out). In the case of a Z_FULL_FLUSH or Z_SYNC_FLUSH, make sure that; avail_out is greater than six to avoid repeated flush markers due to; avail_out == 0 on return. If the parameter flush is set to Z_FINISH, pending input is processed,; pending output is flushed and deflate returns with Z_STREAM_END if there; was enough output space; if deflate returns with Z_OK, this function must be; called again with Z_FINISH and more output space (updated avail_out) but no; more input data, until it returns with Z_STREAM_END or an error. After; deflate has returned Z_STREAM_END, the only possible operations on the; stream are deflateReset or deflateEnd. Z_FINISH can be used immediately after deflateInit if all the compression; is to be done in a single step. In this case, avail_out must be at least; the value returned by deflateBound (see below). If deflate does not return; Z_STREAM_END, then it must be called again as described above. deflate() sets strm->adler to the adler32 checksum of all input read; so far (that is, total_in bytes). deflate() may update strm->data_type if it c",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:2792,avoid,avoid,2792,graf2d/asimage/src/libAfterImage/zlib/zlib.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h,1,['avoid'],['avoid']
Safety,"ength codes (pkzip 2.04c; outputs one zero length code for an empty; distance tree).; c14 12 Mar 93 M. Adler made inflate.c standalone with the; introduction of inflate.h.; c14b 16 Jul 93 G. Roelofs added (unsigned) typecast to w at 470.; c14c 19 Jul 93 J. Bush changed v[N_MAX], l[288], ll[28x+3x] arrays; to static for Amiga.; c14d 13 Aug 93 J-l. Gailly de-complicatified Mark's c[*p++]++ thing.; c14e 8 Oct 93 G. Roelofs changed memset() to memzero().; c14f 22 Oct 93 G. Roelofs renamed quietflg to qflag; made Trace(); conditional; added inflate_free().; c14g 28 Oct 93 G. Roelofs changed l/(lx+1) macro to pointer (Cray bug); c14h 7 Dec 93 C. Ghisler huft_build() optimizations.; c14i 9 Jan 94 A. Verheijen set fixed_t{d,l} to NULL after freeing;; G. Roelofs check NEXTBYTE macro for EOF.; c14j 23 Jan 94 G. Roelofs removed Ghisler ""optimizations""; ifdef'd; EOF check.; c14k 27 Feb 94 G. Roelofs added some typecasts to avoid warnings.; c14l 9 Apr 94 G. Roelofs fixed split comments on preprocessor lines; to avoid bug in Encore compiler.; c14m 7 Jul 94 P. Kienitz modified to allow assembler version of; inflate_codes() (define ASM_INFLATECODES); c14n 22 Jul 94 G. Roelofs changed fprintf to FPRINTF for DLL versions; c14o 23 Aug 94 C. Spieler added a newline to a debug statement;; G. Roelofs added another typecast to avoid MSC warning; */; /*; Inflate deflated (PKZIP's method 8 compressed) data. The compression; method searches for as much of the current string of bytes (up to a; length of 258) in the previous 32K bytes. If it doesn't find any; matches (of at least length 3), it codes the next byte. Otherwise, it; codes the length of the matched string and its distance backwards from; the current position. There is a single Huffman code that codes both; single bytes (called ""literals"") and match lengths. A second Huffman; code codes the distance information, which follows a length code. Each; length or distance code actually represents a base value and a number; of ""extra"" (somet",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/zip/src/ZInflate.c:3477,avoid,avoid,3477,core/zip/src/ZInflate.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/zip/src/ZInflate.c,1,['avoid'],['avoid']
Safety,"er class.; However, shape-related queries might be sometimes useful. #### `Bool_t TGeoShape::Contains(const Double_t *point[3])`. this method returns true if POINT is actually inside the shape. The point; has to be defined in the local shape reference. For instance, for a box having; DX, DY and DZ half-lengths a point will be considered inside if :. ~~~ {.cpp}; | -DX <= point[0] <= DX; | -DY <= point[1] <= DY; | -DZ <= point[2] <= DZ; ~~~. #### `Double_t TGeoShape::DistFromInside(Double_t *point[3], Double_t *dir[3], Int_t iact, Double_t step, Double_t; *safe)`. computes the distance to exiting a shape from a given point INSIDE, along; a given direction. The direction is given by its director cosines with respect; to the local shape coordinate system. This method provides additional; information according the value of IACT input parameter :. - IACT = 0 => compute only safe distance and fill it at the location; given by SAFE; - IACT = 1 => a proposed STEP is supplied. The safe distance is computed; first. If this is bigger than STEP than the proposed step; is approved and returned by the method since it does not; cross the shape boundaries. Otherwise, the distance to; exiting the shape is computed and returned.; - IACT = 2 => compute both safe distance and distance to exiting, ignoring; the proposed step.; - IACT > 2 => compute only the distance to exiting, ignoring anything else. #### `Double_t TGeoShape::DistFromOutside(Double_t *point[3], Double_t *dir[3], Int_t iact, Double_t step, Double_t; *safe)`. computes the distance to entering a shape from a given point OUTSIDE. Acts; in the same way as B). #### `Double_t Safety(const Double_t *point[3], Bool_t inside)`. compute maximum shift of a point in any direction that does not change its; INSIDE/OUTSIDE state (does not cross shape boundaries). The state of the point; have to be properly supplied. #### `Double_t *Normal(Double_t *point[3], Double_t *dir[3], Bool_t inside)`. returns director cosines of normal to the c",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoShape.cxx:4572,safe,safe,4572,geom/geom/src/TGeoShape.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoShape.cxx,1,['safe'],['safe']
Safety,"ers of the event generator. //; // //; // Note, if the derived class interfaces a (set of) Fortran common //; // blocks (like TPythia, TVenus does), one better make the derived //; // class a singleton. That is, something like //; // //; // class MyGenerator : public TGenerator //; // { //; // public: //; // static MyGenerator* Instance() //; // { //; // if (!fgInstance) fgInstance = new MyGenerator; //; // return fgInstance; //; // } //; // void GenerateEvent() { ... } //; // void ImportParticles(TClonesArray* a, Option_t opt="""") {...} //; // Int_t ImportParticles(Option_t opt="""") { ... } //; // Int_t SetParameter(const char* name, Double_t val) { ... } //; // Double_t GetParameter(const char* name) { ... } //; // virtual ~MyGenerator() { ... } //; // protected: //; // MyGenerator() { ... } //; // MyGenerator(const MyGenerator& o) { ... } //; // MyGenerator& operator=(const MyGenerator& o) { ... } //; // static MyGenerator* fgInstance; //; // ClassDefOverride(MyGenerator,0); //; // }; //; // //; // Having multiple objects accessing the same common blocks is not //; // safe. //; // //; // concrete TGenerator classes can be loaded in scripts and subseqent- //; // ly used in compiled code: //; // //; // // MyRun.h //; // class MyRun : public TObject //; // { //; // public: //; // static MyRun* Instance() { ... } //; // void SetGenerator(TGenerator* g) { fGenerator = g; } //; // void Run(Int_t n, Option_t* option="""") //; // { //; // TFile* file = TFile::Open(""file.root"",""RECREATE""); //; // TTree* tree = new TTree(""T"",""T""); //; // TClonesArray* p = new TClonesArray(""TParticles""); //; // tree->Branch(""particles"", &p); //; // for (Int_t event = 0; event < n; event++) { //; // fGenerator->GenerateEvent(); //; // fGenerator->ImportParticles(p,option); //; // tree->Fill(); //; // } //; // file->Write(); //; // file->Close(); //; // } //; // ... //; // protected: //; // TGenerator* fGenerator; //; // ClassDefOverride(MyRun,0); //; // }; //; // //; // // Config.C //; // void C",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/montecarlo/eg/inc/TGenerator.h:3025,safe,safe,3025,montecarlo/eg/inc/TGenerator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/montecarlo/eg/inc/TGenerator.h,1,['safe'],['safe']
Safety,"es having TUBESEG; shape. Other divisions can also create slices having shapes with different; dimensions, e.g. the division of a TRD1 volume on Z.; When positioning volumes inside slices, one can do it using the generic; volume family (e.g. slicey). This should be done as if the coordinate system; of the generic slice was the same as the one of the divided volume. The generic; slice in case of PHI division is centered with respect to X axis. If the; family contains slices of different sizes, any volume positioned inside should; fit into the smallest one.; Examples for specific divisions according to shape types can be found inside; shape classes. ~~~ {.cpp}; TGeoVolume::Divide(N, Xmin, Xmax, ""X"");; ~~~. The GEANT3 option MANY is supported by TGeoVolumeOverlap class. An overlapping; volume is in fact a virtual container that does not represent a physical object.; It contains a list of nodes that are not its daughters but that must be checked; always before the container itself. This list must be defined by users and it; is checked and resolved in a priority order. Note that the feature is non-standard; to geometrical modelers and it was introduced just to support conversions of; GEANT3 geometries, therefore its extensive usage should be avoided.; */; /** \class TGeoVolumeAssembly; \ingroup Geometry_classes. Volume assemblies. Assemblies a volumes that have neither a shape or a material/medium. Assemblies; behave exactly like normal volumes grouping several daughters together, but; the daughters can never extrude the assembly since this has no shape. However,; a bounding box and a voxelization structure are built for assemblies as for; normal volumes, so that navigation is still optimized. Assemblies are useful; for grouping hierarchically volumes which are otherwise defined in a flat; manner, but also to avoid clashes between container shapes.; To define an assembly one should just input a name, then start adding other; volumes (or volume assemblies) as content.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoVolume.cxx:17327,avoid,avoided,17327,geom/geom/src/TGeoVolume.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoVolume.cxx,2,['avoid'],"['avoid', 'avoided']"
Safety,"es=dcopy->GetNNodes();; if (previousNnodes == nnodes) troubleCount++;; else {; troubleCount=0; // reset counter; if (nnodes < previousNnodes / 2 ) fDeltaPruneStrength /= 2.;; }; previousNnodes = nnodes;; if (troubleCount > 20) {; if (methodIndex == 0 && fPruneStrength <=0) {//maybe you need larger stepsize ??; fDeltaPruneStrength *= 5;; Log() << kINFO << ""<PruneTree> trouble determining optimal prune strength""; << "" for Tree "" << methodIndex; << "" --> first try to increase the step size""; << "" currently Prunestrenght= "" << alpha; << "" stepsize "" << fDeltaPruneStrength << "" "" << Endl;; troubleCount = 0; // try again; fPruneStrength = 1; // if it was for the first time..; } else if (methodIndex == 0 && fPruneStrength <=2) {//maybe you need much larger stepsize ??; fDeltaPruneStrength *= 5;; Log() << kINFO << ""<PruneTree> trouble determining optimal prune strength""; << "" for Tree "" << methodIndex; << "" --> try to increase the step size even more.. ""; << "" if that still didn't work, TRY IT BY HAND""; << "" currently Prunestrenght= "" << alpha; << "" stepsize "" << fDeltaPruneStrength << "" "" << Endl;; troubleCount = 0; // try again; fPruneStrength = 3; // if it was for the first time..; } else {; forceStop=kTRUE;; Log() << kINFO << ""<PruneTree> trouble determining optimal prune strength""; << "" for Tree "" << methodIndex << "" at tested prune strength: "" << alpha << "" --> abort forced, use same strength as for previous tree:""; << fPruneStrength << Endl;; }; }; if (fgDebugLevel==1) Log() << kINFO << ""Pruneed with (""<<alpha; << "") give quality: "" << q.back(); << "" and #nodes: "" << nnodes; << Endl;; delete dcopy;; }; if (!forceStop) {; multimap<Double_t,Double_t>::reverse_iterator it=quality.rend();; it++;; fPruneStrength = it->second;; // adjust the step size for the next tree.. think that 20 steps are sort of; // fine enough.. could become a tunable option later..; fDeltaPruneStrength *= Double_t(q.size())/20.;; }. fTree->SetPruneStrength(fPruneStrength);; fTree->PruneTree();; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDT.cxx:1976,abort,abort,1976,tmva/tmva/src/MethodDT.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDT.cxx,1,['abort'],['abort']
Safety,"escaling might wish for more than one row; * group of context when shrinking the image; tough, we don't handle that.; * (This is justified by the assumption that downsizing will be handled mostly; * by adjusting the DCT_scaled_size values, so that the actual scale factor at; * the upsample step needn't be much less than one.); *; * To provide the desired context, we have to retain the last two row groups; * of one iMCU row while reading in the next iMCU row. (The last row group; * can't be processed until we have another row group for its below-context,; * and so we have to save the next-to-last group too for its above-context.); * We could do this most simply by copying data around in our buffer, but; * that'd be very slow. We can avoid copying any data by creating a rather; * strange pointer structure. Here's how it works. We allocate a workspace; * consisting of M+2 row groups (where M = min_DCT_scaled_size is the number; * of row groups per iMCU row). We create two sets of redundant pointers to; * the workspace. Labeling the physical row groups 0 to M+1, the synthesized; * pointer lists look like this:; * M+1 M-1; * master pointer --> 0 master pointer --> 0; * 1 1; * ... ...; * M-3 M-3; * M-2 M; * M-1 M+1; * M M-2; * M+1 M-1; * 0 0; * We read alternate iMCU rows using each master pointer; thus the last two; * row groups of the previous iMCU row remain un-overwritten in the workspace.; * The pointer lists are set up so that the required context rows appear to; * be adjacent to the proper places when we pass the pointer lists to the; * upsampler.; *; * The above pictures describe the normal state of the pointer lists.; * At top and bottom of the image, we diddle the pointer lists to duplicate; * the first or last sample row as necessary (this is cheaper than copying; * sample rows around).; *; * This scheme breaks down if M < 2, ie, min_DCT_scaled_size is 1. In that; * situation each iMCU row provides only one row group so the buffering logic; * must be different ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmainct.c:3664,redund,redundant,3664,graf2d/asimage/src/libAfterImage/libjpeg/jdmainct.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmainct.c,1,['redund'],['redundant']
Safety,"essesMap.; ///; /// The overall linking process looks like this:; ///; /// parrallel_for_each(ObjectFile) {; /// for_each (Compile Unit) {; /// 1. Load Clang modules.; /// }; ///; /// parrallel_for_each(Compile Unit) {; /// 1. Load input DWARF for Compile Unit.; /// 2. Report warnings for Clang modules.; /// 3. Analyze live DIEs and type names(if ODR deduplication is requested).; /// 4. Clone DIEs(Generate output DIEs and resulting DWARF tables).; /// The result is in an OutDebugInfoBytes, which is an ELF file; /// containing DWARF tables corresponding to the current compile unit.; /// 5. Cleanup Input and Output DIEs.; /// }; ///; /// Deallocate loaded Object file.; /// }; ///; /// if (ODR deduplication is requested); /// Generate an artificial compilation unit (""Type Table"": used to partially; /// generate DIEs at the clone stage).; ///; /// for_each (ObjectFile) {; /// for_each (Compile Unit) {; /// 1. Set offsets to Compile Units DWARF tables.; /// 2. Sort offsets/attributes/patches to have a predictable result.; /// 3. Patch size/offsets fields.; /// 4. Generate index tables.; /// 5. Move DWARF tables of compile units into the resulting file.; /// }; /// }; ///; /// Every compile unit is processed separately, visited only once; /// (except case inter-CU references exist), and used data is freed; /// after the compile unit is processed. The resulting file is glued together; /// from the generated debug tables which correspond to separate compile units.; ///; /// Handling inter-CU references: inter-CU references are hard to process; /// using only one pass. f.e. if CU1 references CU100 and CU100 references; /// CU1, we could not finish handling of CU1 until we finished CU100.; /// Thus we either need to load all CUs into the memory, either load CUs several; /// times. This implementation loads inter-connected CU into memory at the first; /// pass and processes them at the second pass.; ///; /// ODR deduplication: Artificial compilation unit will be constructed to",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Parallel/DWARFLinker.h:1822,predict,predictable,1822,interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Parallel/DWARFLinker.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Parallel/DWARFLinker.h,1,['predict'],['predictable']
Safety,"etValue call triggers the event loop; std::cout << ""Number of processed entries: "" << resultPtr.GetValue() << std::endl;; }; ~~~. See the Book() method for more information and [this tutorial](https://root.cern/doc/master/df018__customActions_8C.html); for a more complete example. #### Injecting arbitrary code in the event loop with Foreach() and ForeachSlot(). Foreach() takes a callable (lambda expression, free function, functor...) and a list of columns and; executes the callable on the values of those columns for each event that passes all upstream selections.; It can be used to perform actions that are not already available in the interface. For example, the following snippet; evaluates the root mean square of column ""x"":; ~~~{.cpp}; // Single-thread evaluation of RMS of column ""x"" using Foreach; double sumSq = 0.;; unsigned int n = 0;; df.Foreach([&sumSq, &n](double x) { ++n; sumSq += x*x; }, {""x""});; std::cout << ""rms of x: "" << std::sqrt(sumSq / n) << std::endl;; ~~~; In multi-thread runs, users are responsible for the thread-safety of the expression passed to Foreach():; thread will execute the expression concurrently.; The code above would need to employ some resource protection mechanism to ensure non-concurrent writing of `rms`; but; this is probably too much head-scratch for such a simple operation. ForeachSlot() can help in this situation. It is an alternative version of Foreach() for which the function takes an; additional ""processing slot"" parameter besides the columns it should be applied to. RDataFrame; guarantees that ForeachSlot() will invoke the user expression with different `slot` parameters for different concurrent; executions (see [Special helper columns: rdfentry_ and rdfslot_](\ref helper-cols) for more information on the slot parameter).; We can take advantage of ForeachSlot() to evaluate a thread-safe root mean square of column ""x"":; ~~~{.cpp}; // Thread-safe evaluation of RMS of column ""x"" using ForeachSlot; ROOT::EnableImplicitMT();; co",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx:69954,safe,safety,69954,tree/dataframe/src/RDataFrame.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx,1,['safe'],['safety']
Safety,"f$ discriminating variables used in the MVA:. \f[; L_S(i) \ \prod_{j=1}^{N_{var}} p_{Sj} (i); \f]. and accordingly for \f$ L_B \f$.; In practise, TMVA uses polynomial splines to estimate the probability; density functions (PDF) obtained from the distributions of the; training variables. Note that in TMVA the output of the likelihood ratio is transformed by:. \f[; R_L(i) \to R'_L(i) = -\frac{1}{\tau} ln(R_L^{-1}(i) -1); \f]. to avoid the occurrence of heavy peaks at \f$ R_L = 0.1 \f$ . #### Decorrelated (or ""diagonalized"") Likelihood. The biggest drawback of the Likelihood approach is that it assumes; that the discriminant variables are uncorrelated. If it were the case,; it can be proven that the discrimination obtained by the above likelihood; ratio is optimal, ie, no other method can beat it. However, in most; practical applications of MVAs correlations are present. </p>. Linear correlations, measured from the training sample, can be taken; into account in a straightforward manner through the square-root; of the covariance matrix. The square-root of a matrix; \f$ C \f$ is the matrix \f$ C&prime; \f$ that multiplied with itself; yields \f$ C \f$: \f$ C \f$=\f$ C&prime;C&prime; \f$. We compute the; square-root matrix (SQM) by means of diagonalising (\f$ D \f$) the; covariance matrix:. \f[; D = S^TCS \Rightarrow C' = S \sqrt{DS^T}; \f]. and the linear transformation of the linearly correlated into the; uncorrelated variables space is then given by multiplying the measured; variable tuple by the inverse of the SQM. Note that these transformations; are performed for both signal and background separately, since the; correlation pattern is not the same in the two samples. The above diagonalisation is complete for linearly correlated,; Gaussian distributed variables only. In real-world examples this; is not often the case, so that only little additional information; may be recovered by the diagonalisation procedure. In these cases,; non-linear methods must be applied.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodLikelihood.cxx:3838,recover,recovered,3838,tmva/tmva/src/MethodLikelihood.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodLikelihood.cxx,1,['recover'],['recovered']
Safety,"fix with GetProbabilityMatrix; // Version 17.1, bug fixes in GetFoldedOutput, GetOutput; // Version 17.0, option to specify an error matrix with SetInput(), new ScanRho() method; // Version 16.2, in parallel to bug-fix in TUnfoldSys; // Version 16.1, fix bug with error matrix in case kEConstraintArea is used; // Version 16.0, fix calculation of global correlations, improved error messages; // Version 15, simplified L-curve scan, new tau definition, new error calc., area preservation; // Version 14, with changes in TUnfoldSys.cxx; // Version 13, new methods for derived classes and small bug fix; // Version 12, report singular matrices; // Version 11, reduce the amount of printout; // Version 10, more correct definition of the L curve, update references; // Version 9, faster matrix inversion and skip edge points for L-curve scan; // Version 8, replace all TMatrixSparse matrix operations by private code; // Version 7, fix problem with TMatrixDSparse,TMatrixD multiplication; // Version 6, replace class XY by std::pair; // Version 5, replace run-time dynamic arrays by new and delete[]; // Version 4, fix new bug from V3 with initial regularisation condition; // Version 3, fix bug with initial regularisation condition; // Version 2, with improved ScanLcurve() algorithm; // Version 1, added ScanLcurve() method; // Version 0, stable version of basic unfolding algorithm; /** \class TUnfold; An algorithm to unfold distributions from detector to truth level. TUnfold is used to decompose a measurement y into several sources x,; given the measurement uncertainties and a matrix of migrations A.; The method can be applied to a large number of problems,; where the measured distribution y is a linear superposition; of several Monte Carlo shapes. Beyond such a simple template fit,; TUnfold has an adjustable regularisation term and also supports an; optional constraint on the total number of events. <b>For most applications, it is better to use the derived class; TUnfoldDensity instead ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfold.cxx:2062,detect,detector,2062,hist/unfold/src/TUnfold.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfold.cxx,1,['detect'],['detector']
Safety,"fo through a methods that applies a OpenMP; /// loop-associated construct such as applyWorkshareLoop, tileLoops, unrollLoop,; /// etc. These methods usually invalidate the CanonicalLoopInfo and re-use its; /// basic blocks. After invalidation, the CanonicalLoopInfo must not be used; /// anymore as its underlying control flow may not exist anymore.; /// Loop-transformation methods such as tileLoops, collapseLoops and unrollLoop; /// may also return a new CanonicalLoopInfo that can be passed to other; /// loop-associated construct implementing methods. These loop-transforming; /// methods may either create a new CanonicalLoopInfo usually using; /// createLoopSkeleton and invalidate the input CanonicalLoopInfo, or reuse and; /// modify one of the input CanonicalLoopInfo and return it as representing the; /// modified loop. What is done is an implementation detail of; /// transformation-implementing method and callers should always assume that the; /// CanonicalLoopInfo passed to it is invalidated and a new object is returned.; /// Returned CanonicalLoopInfo have the same structure and guarantees as the one; /// created by createCanonicalLoop, such that transforming methods do not have; /// to special case where the CanonicalLoopInfo originated from.; ///; /// Generally, methods consuming CanonicalLoopInfo do not need an; /// OpenMPIRBuilder::InsertPointTy as argument, but use the locations of the; /// CanonicalLoopInfo to insert new or modify existing instructions. Unless; /// documented otherwise, methods consuming CanonicalLoopInfo do not invalidate; /// any InsertPoint that is outside CanonicalLoopInfo's control. Specifically,; /// any InsertPoint in the Preheader, After or Block can still be used after; /// calling such a method.; ///; /// TODO: Provide mechanisms for exception handling and cancellation points.; ///; /// Defined outside OpenMPIRBuilder because nested classes cannot be; /// forward-declared, e.g. to avoid having to include the entire OMPIRBuilder.h.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:5149,avoid,avoid,5149,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,1,['avoid'],['avoid']
Safety,"folding method (see reference). Currently, the unfolding of one-dimensional histograms is supported, with the same number of bins for the measured and the unfolded spectrum.; <p>; The unfolding procedure is based on singular value decomposition of the response matrix. The regularisation of the unfolding is implemented via a discrete minimum-curvature condition.; <p>; Monte Carlo inputs:; <ul>; <li><tt>xini</tt>: true underlying spectrum (TH1D, n bins); <li><tt>bini</tt>: reconstructed spectrum (TH1D, n bins); <li><tt>Adet</tt>: response matrix (TH2D, nxn bins); </ul>; Consider the unfolding of a measured spectrum <tt>bdat</tt> with covariance matrix <tt>Bcov</tt> (if not passed explicitly, a diagonal covariance will be built given the errors of <tt>bdat</tt>). The corresponding spectrum in the Monte Carlo is given by <tt>bini</tt>, with the true underlying spectrum given by <tt>xini</tt>. The detector response is described by <tt>Adet</tt>, with <tt>Adet</tt> filled with events (not probabilities) with the true observable on the y-axis and the reconstructed observable on the x-axis.; <p>; The measured distribution can be unfolded for any combination of resolution, efficiency and acceptance effects, provided an appropriate definition of <tt>xini</tt> and <tt>Adet</tt>.<br><br>; <p>; The unfolding can be performed by; \code{.cpp}; TSVDUnfold *tsvdunf = new TSVDUnfold( bdat, Bcov, bini, xini, Adet );; TH1D* unfresult = tsvdunf->Unfold( kreg );; \endcode; where <tt>kreg</tt> determines the regularisation of the unfolding. In general, overregularisation (too small <tt>kreg</tt>) will bias the unfolded spectrum towards the Monte Carlo input, while underregularisation (too large <tt>kreg</tt>) will lead to large fluctuations in the unfolded spectrum. The optimal regularisation can be determined following guidelines in <a href=""http://arXiv.org/abs/hep-ph/9509307"">Nucl. Instrum. Meth. A372, 469 (1996) [hep-ph/9509307]</a> using the distribution of the <tt>|d_i|</tt> that ca",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TSVDUnfold.cxx:2127,detect,detector,2127,hist/hist/src/TSVDUnfold.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TSVDUnfold.cxx,1,['detect'],['detector']
Safety,"for this; /// entry (i.e. varies from 0 to `Length$`).; /// - `Length$(formula )` : return the total number of element of the formula; /// given as a parameter.; /// - `Sum$(formula )` : return the sum of the value of the elements of the; /// formula given as a parameter. For example the mean for all the elements in; /// one entry can be calculated with: `Sum$(formula )/Length$(formula )`; /// - `Min$(formula )` : return the minimum (within one TTree entry) of the value of the; /// elements of the formula given as a parameter.; /// - `Max$(formula )` : return the maximum (within one TTree entry) of the value of the; /// elements of the formula given as a parameter.; /// - `MinIf$(formula,condition)`; /// - `MaxIf$(formula,condition)` : return the minimum (maximum) (within one TTree entry); /// of the value of the elements of the formula given as a parameter; /// if they match the condition. If no element matches the condition,; /// the result is zero. To avoid the resulting peak at zero, use the; /// pattern:; /// ~~~ {.cpp}; /// tree->Draw(""MinIf$(formula,condition)"",""condition"");; /// ~~~; /// which will avoid calculation `MinIf$` for the entries that have no match; /// for the condition.; /// - `Alt$(primary,alternate)` : return the value of ""primary"" if it is available; /// for the current iteration otherwise return the value of ""alternate"".; /// For example, with arr1[3] and arr2[2]; /// ~~~ {.cpp}; /// tree->Draw(""arr1+Alt$(arr2,0)"");; /// ~~~; /// will draw arr1[0]+arr2[0] ; arr1[1]+arr2[1] and arr1[2]+0; /// Or with a variable size array arr3; /// ~~~ {.cpp}; /// tree->Draw(""Alt$(arr3[0],0)+Alt$(arr3[1],0)+Alt$(arr3[2],0)"");; /// ~~~; /// will draw the sum arr3 for the index 0 to min(2,actual_size_of_arr3-1); /// As a comparison; /// ~~~ {.cpp}; /// tree->Draw(""arr3[0]+arr3[1]+arr3[2]"");; /// ~~~; /// will draw the sum arr3 for the index 0 to 2 only if the; /// actual_size_of_arr3 is greater or equal to 3.; /// Note that the array in 'primary' is flattened/li",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTree.cxx:16847,avoid,avoid,16847,tree/tree/src/TTree.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTree.cxx,1,['avoid'],['avoid']
Safety,"fore starting the event-loop. Useful for setup operations.; /// It must reset the state of the helper to the expected state at the beginning of the event loop: the same helper,; /// or copies of it, might be used for multiple event loops (e.g. in the presence of systematic variations).; /// * `void InitTask(TTreeReader *, unsigned int slot)`: each working thread shall call this method during the event; /// loop, before processing a batch of entries. The pointer passed as argument, if not null, will point to the TTreeReader; /// that RDataFrame has set up to read the task's batch of entries. It is passed to the helper to allow certain advanced optimizations; /// it should not usually serve any purpose for the Helper. This method is often no-op for simple helpers.; /// * `void Exec(unsigned int slot, ColumnTypes...columnValues)`: each working thread shall call this method; /// during the event-loop, possibly concurrently. No two threads will ever call Exec with the same 'slot' value:; /// this parameter is there to facilitate writing thread-safe helpers. The other arguments will be the values of; /// the requested columns for the particular entry being processed.; /// * `void Finalize()`: this method is called at the end of the event loop. Commonly used to finalize the contents of the result.; /// * `std::string GetActionName()`: it returns a string identifier for this type of action that RDataFrame will use in; /// diagnostics, SaveGraph(), etc.; ///; /// ### Optional methods; ///; /// If these methods are implemented they enable extra functionality as per the description below.; ///; /// * `Result_t &PartialUpdate(unsigned int slot)`: if present, it must return the value of the partial result of this action for the given 'slot'.; /// Different threads might call this method concurrently, but will do so with different 'slot' numbers.; /// RDataFrame leverages this method to implement RResultPtr::OnPartialResult().; /// * `ROOT::RDF::SampleCallback_t GetSampleCallback(",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RDF/RInterface.hxx:2844,safe,safe,2844,tree/dataframe/inc/ROOT/RDF/RInterface.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RDF/RInterface.hxx,1,['safe'],['safe']
Safety,"fset for; // that field that is >= LastEnd, then update LastEnd and repeat in; // order to fill any remaining gap following that field.; //; // Next, let LastEnd to be the offset of the first byte following the; // last fixed-offset field, or 0 if there are no fixed-offset fields.; // While there are flexible-offset fields remaining, find the ""best""; // flexible-offset field according to the criteria below, add it at; // the first properly-aligned offset for that field that is >= LastEnd,; // and update LastEnd to the first byte following the field.; //; // The ""best"" field is chosen by the following criteria, considered; // strictly in order:; //; // - When filling a gap betweeen fields, the field must fit.; // - A field is preferred if it requires less padding following LastEnd.; // - A field is preferred if it is more aligned.; // - A field is preferred if it is larger.; // - A field is preferred if it appeared earlier in the initial order.; //; // Minimizing leading padding is a greedy attempt to avoid padding; // entirely. Preferring more-aligned fields is an attempt to eliminate; // stricter constraints earlier, with the idea that weaker alignment; // constraints may be resolvable with less padding elsewhere. These; // These two rules are sufficient to ensure that we get the optimal; // layout in the ""C-style"" case. Preferring larger fields tends to take; // better advantage of large gaps and may be more likely to have a size; // that's a multiple of a useful alignment. Preferring the initial; // order may help somewhat with locality but is mostly just a way of; // ensuring deterministic output.; //; // Note that this algorithm does not guarantee a minimal layout. Picking; // a larger object greedily may leave a gap that cannot be filled as; // efficiently. Unfortunately, solving this perfectly is an NP-complete; // problem (by reduction from bin-packing: let B_i be the bin sizes and; // O_j be the object sizes; add fixed-offset fields such that the gaps; // b",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp:1483,avoid,avoid,1483,interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp,1,['avoid'],['avoid']
Safety,"garding branch expanding:; ///; /// When branch instruction like beqzc or bnezc has offset that is too large; /// to fit into its immediate field, it has to be expanded to another; /// instruction or series of instructions.; ///; /// FIXME: Fix pc-region jump instructions which cross 256MB segment boundaries.; /// TODO: Handle out of range bc, b (pseudo) instructions.; ///; /// Regarding compact branch hazard prevention:; ///; /// Hazards handled: forbidden slots for MIPSR6, FPU slots for MIPS3 and below,; /// load delay slots for MIPS1.; ///; /// A forbidden slot hazard occurs when a compact branch instruction is executed; /// and the adjacent instruction in memory is a control transfer instruction; /// such as a branch or jump, ERET, ERETNC, DERET, WAIT and PAUSE.; ///; /// For example:; ///; /// 0x8004 bnec a1,v0,<P+0x18>; /// 0x8008 beqc a1,a2,<P+0x54>; ///; /// In such cases, the processor is required to signal a Reserved Instruction; /// exception.; ///; /// Here, if the instruction at 0x8004 is executed, the processor will raise an; /// exception as there is a control transfer instruction at 0x8008.; ///; /// There are two sources of forbidden slot hazards:; ///; /// A) A previous pass has created a compact branch directly.; /// B) Transforming a delay slot branch into compact branch. This case can be; /// difficult to process as lookahead for hazards is insufficient, as; /// backwards delay slot fillling can also produce hazards in previously; /// processed instuctions.; ///; /// In future this pass can be extended (or new pass can be created) to handle; /// other pipeline hazards, such as various MIPS1 hazards, processor errata that; /// require instruction reorganization, etc.; ///; /// This pass has to run after the delay slot filler as that pass can introduce; /// pipeline hazards such as compact branch hazard, hence the existing hazard; /// recognizer is not suitable.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsBranchExpansion.cpp:2613,hazard,hazards,2613,interpreter/llvm-project/llvm/lib/Target/Mips/MipsBranchExpansion.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsBranchExpansion.cpp,8,['hazard'],"['hazard', 'hazards']"
Safety,"ges it makes do not conflict.; //; // Addresses are written to constant global arrays based on the same metadata.; //; // The backend lowers LDS variables in the order of traversal of the function.; // This is at odds with the deterministic layout required. The workaround is to; // allocate the fixed-address variables immediately upon starting the function; // where they can be placed as intended. This requires a means of mapping from; // the function to the variables that it allocates. For the module scope lds,; // this is via metadata indicating whether the variable is not required. If a; // pass deletes that metadata, a fatal error on disagreement with the absolute; // symbol metadata will occur. For kernel scope and dynamic, this is by _name_; // correspondence between the function and the variable. It requires the; // kernel to have a name (which is only a limitation for tests in practice) and; // for nothing to rename the corresponding symbols. This is a hazard if the pass; // is run multiple times during debugging. Alternative schemes considered all; // involve bespoke metadata.; //; // If the name correspondence can be replaced, multiple distinct kernels that; // have the same memory layout can map to the same kernel id (as the address; // itself is handled by the absolute symbol metadata) and that will allow more; // uses of the ""kernel"" style faster lowering and reduce the size of the lookup; // tables.; //; // There is a test that checks this does not fire for a graphics shader. This; // lowering is expected to work for graphics if the isKernel test is changed.; //; // The current markUsedByKernel is sufficient for PromoteAlloca but is elided; // before codegen. Replacing this with an equivalent intrinsic which lasts until; // shortly after the machine function lowering of LDS would help break the name; // mapping. The other part needed is probably to amend PromoteAlloca to embed; // the LDS variables it creates in the same struct created here. That avoids",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp:9045,hazard,hazard,9045,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp,1,['hazard'],['hazard']
Safety,"gether, this means we need to adjust the; /// type of boolean operations to be regbank legal. All SALU booleans need to be; /// widened to 32-bits, and all VALU booleans need to be s1 values.; ///; /// A noteworthy exception to the s1-means-vcc rule is for legalization artifact; /// casts. G_TRUNC s1 results, and G_SEXT/G_ZEXT/G_ANYEXT sources are never vcc; /// bank. A non-boolean source (such as a truncate from a 1-bit load from; /// memory) will require a copy to the VCC bank which will require clearing the; /// high bits and inserting a compare.; ///; /// \par Constant bus restriction; ///; /// VALU instructions have a limitation known as the constant bus; /// restriction. Most VALU instructions can use SGPR operands, but may read at; /// most 1 SGPR or constant literal value (this to 2 in gfx10 for most; /// instructions). This is one unique SGPR, so the same SGPR may be used for; /// multiple operands. From a register bank perspective, any combination of; /// operands should be legal as an SGPR, but this is contextually dependent on; /// the SGPR operands all being the same register. There is therefore optimal to; /// choose the SGPR with the most uses to minimize the number of copies.; ///; /// We avoid trying to solve this problem in RegBankSelect. Any VALU G_*; /// operation should have its source operands all mapped to VGPRs (except for; /// VCC), inserting copies from any SGPR operands. This the most trivial legal; /// mapping. Anything beyond the simplest 1:1 instruction selection would be too; /// complicated to solve here. Every optimization pattern or instruction; /// selected to multiple outputs would have to enforce this rule, and there; /// would be additional complexity in tracking this rule for every G_*; /// operation. By forcing all inputs to VGPRs, it also simplifies the task of; /// picking the optimal operand combination from a post-isel optimization pass.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPURegisterBankInfo.cpp:3303,avoid,avoid,3303,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPURegisterBankInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPURegisterBankInfo.cpp,1,['avoid'],['avoid']
Safety,"ghts to be used in the; combination should be the probability that an; electron comes from the corresponding process. \f[; p_{1} = \frac{\sigma_{1}}{\sigma_{1} + \sigma_{2}} = \frac{N_{1}w_{1}}{N_{1}w_{1} + N_{2}w_{2}}\\; p_{2} = \frac{\sigma_{2}}{\sigma_{1} + \sigma_{2}} = \frac{N_{2}w_{2}}{N_{1}w_{1} + N_{2}w_{2}}; \f]. \anchor EFF06; ## VI. Further operations. \anchor EFF061; ### VI.1 Information about the internal histograms; The methods TEfficiency::GetPassedHistogram and TEfficiency::GetTotalHistogram; return a constant pointer to the internal histograms. They can be used to; obtain information about the internal histograms (e.g., the binning, number of passed / total events in a bin, mean values...).; One can obtain a clone of the internal histograms by calling TEfficiency::GetCopyPassedHisto or TEfficiency::GetCopyTotalHisto.; The returned histograms are completely independent from the current; TEfficiency object. By default, they are not attached to a directory to; avoid the duplication of data and the user is responsible for deleting them. ~~~~~~~~~~~~~~~{.cpp}; //open a root file which contains a TEfficiency object; TFile* pFile = new TFile(""myfile.root"",""update"");. //get TEfficiency object with name ""my_eff""; TEfficiency* pEff = (TEfficiency*)pFile->Get(""my_eff"");. //get clone of total histogram; TH1* clone = pEff->GetCopyTotalHisto();. //change clone...; //save changes of clone directly; clone->Write();; //or append it to the current directory and write the file; //clone->SetDirectory(gDirectory);; //pFile->Write();. //delete histogram object; delete clone;; clone = 0;; ~~~~~~~~~~~~~~~. It is also possible to set the internal total or passed histogram by using the; methods TEfficiency::SetPassedHistogram or TEfficiency::SetTotalHistogram. In order to ensure the validity of the TEfficiency object, the consistency of the; new histogram and the stored histogram is checked. It might be; impossible sometimes to change the histograms in a consistent way. Ther",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx:21528,avoid,avoid,21528,hist/hist/src/TEfficiency.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx,1,['avoid'],['avoid']
Safety,"gradients; * drawing, and antialiased/smoothed text drawing using both FreeType; * library and X Window fonts.; *; * Primary goals of this library are to achieve exceptional quality of; * images and text, making code fast and small at the same time.; * Additional steps are taken to compensate for screen colordepth; * limitation, and different error diffusion algorithms are used to; * provide for smooth images even in low colordepth modes.; *; * HISTORY; * libAfterImage has been implemented as an attempt to address several; * issues. First one, and most important is that X Window System; * completely lacks any tools for image manipulation, except for very; * rudimentary operations. With Introduction of Render extentions in; * XFree86 4.0 that situation is changing, but still is far from; * perfect. There need is therefore to implement client side image; * manipulation. That inturn creates a problem of image data transfer; * between Server and client.; *; * To avoid that full-time image storage on the client side is needed.; * Which is memory extensive. So there appears to be a need for some; * in-memory compression.; *; * On the other side there is an image quality issue. Its easy to write; * a scaling function by simply dropping out or duplicating pixels,; * but quality is awfull. What is needed is very fast; * averaging/interpolation code. That brings us to the issue of 8 bits; * per channel. Add two pixels together and you get overflow. So all the; * math has to be performed in different colorspace and then converted; * back. On the other side, such a conversion may discard valuable bits,; * so some compensation method has to be implemented.; *; * On the text drawing side of things, there are numerous problems just; * as well. Native X fonts look ugly as soon as you try to show any; * decently sized text. That is supposed to be solved with said Render; * extensions to XFree86, but as experiense has shown, things aren't as; * easy as it looks, besides one wants one",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/afterimage.h:1578,avoid,avoid,1578,graf2d/asimage/src/libAfterImage/afterimage.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/afterimage.h,1,['avoid'],['avoid']
Safety,"h can be performed with RDataFrame. ### Transformations; Transformations are a way to manipulate the data. | **Transformation** | **Description** |; |------------------|--------------------|; | Alias() | Introduce an alias for a particular column name. |; | DefaultValueFor() | If the value of the input column is missing, provide a default value instead. |; | Define() | Create a new column in the dataset. Example usages include adding a column that contains the invariant mass of a particle, or a selection of elements of an array (e.g. only the `pt`s of ""good"" muons). |; | DefinePerSample() | Define a new column that is updated when the input sample changes, e.g. when switching tree being processed in a chain. |; | DefineSlot() | Same as Define(), but the user-defined function must take an extra `unsigned int slot` as its first parameter. `slot` will take a different value, `0` to `nThreads - 1`, for each thread of execution. This is meant as a helper in writing thread-safe Define() transformation when using RDataFrame after ROOT::EnableImplicitMT(). DefineSlot() works just as well with single-thread execution: in that case `slot` will always be `0`. |; | DefineSlotEntry() | Same as DefineSlot(), but the entry number is passed in addition to the slot number. This is meant as a helper in case the expression depends on the entry number. For details about entry numbers in multi-threaded runs, see [here](\ref helper-cols). |; | Filter() | Filter rows based on user-defined conditions. |; | FilterAvailable() | Specialized Filter. If the value of the input column is available, keep the entry, otherwise discard it. |; | FilterMissing() | Specialized Filter. If the value of the input column is missing, keep the entry, otherwise discard it. |; | Range() | Filter rows based on entry number (single-thread only). |; | Redefine() | Overwrite the value and/or type of an existing column. See Define() for more information. |; | RedefineSlot() | Overwrite the value and/or type of an exi",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx:4164,safe,safe,4164,tree/dataframe/src/RDataFrame.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx,1,['safe'],['safe']
Safety,"having; DX, DY and DZ half-lengths a point will be considered inside if :. ~~~ {.cpp}; | -DX <= point[0] <= DX; | -DY <= point[1] <= DY; | -DZ <= point[2] <= DZ; ~~~. #### `Double_t TGeoShape::DistFromInside(Double_t *point[3], Double_t *dir[3], Int_t iact, Double_t step, Double_t; *safe)`. computes the distance to exiting a shape from a given point INSIDE, along; a given direction. The direction is given by its director cosines with respect; to the local shape coordinate system. This method provides additional; information according the value of IACT input parameter :. - IACT = 0 => compute only safe distance and fill it at the location; given by SAFE; - IACT = 1 => a proposed STEP is supplied. The safe distance is computed; first. If this is bigger than STEP than the proposed step; is approved and returned by the method since it does not; cross the shape boundaries. Otherwise, the distance to; exiting the shape is computed and returned.; - IACT = 2 => compute both safe distance and distance to exiting, ignoring; the proposed step.; - IACT > 2 => compute only the distance to exiting, ignoring anything else. #### `Double_t TGeoShape::DistFromOutside(Double_t *point[3], Double_t *dir[3], Int_t iact, Double_t step, Double_t; *safe)`. computes the distance to entering a shape from a given point OUTSIDE. Acts; in the same way as B). #### `Double_t Safety(const Double_t *point[3], Bool_t inside)`. compute maximum shift of a point in any direction that does not change its; INSIDE/OUTSIDE state (does not cross shape boundaries). The state of the point; have to be properly supplied. #### `Double_t *Normal(Double_t *point[3], Double_t *dir[3], Bool_t inside)`. returns director cosines of normal to the crossed shape surface from a; given point towards a direction. One has to specify if the point is inside; or outside shape. According to this, the normal will be outwards or inwards; shape respectively. Normal components are statically stored by shape class,; so it has to be co",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoShape.cxx:4844,safe,safe,4844,geom/geom/src/TGeoShape.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoShape.cxx,1,['safe'],['safe']
Safety,"hbuf[] unsigned char to match parameter type in inflate.c; * - Change strm->next_out[-state->offset] to *(strm->next_out - state->offset); * to avoid negation problem on Alphas (64 bit) in inflate.c; *; * 1.2.beta3 22 Dec 2002; * - Add comments on state->bits assertion in inffast.c; * - Add comments on op field in inftrees.h; * - Fix bug in reuse of allocated window after inflateReset(); * - Remove bit fields--back to byte structure for speed; * - Remove distance extra == 0 check in inflate_fast()--only helps for lengths; * - Change post-increments to pre-increments in inflate_fast(), PPC biased?; * - Add compile time option, POSTINC, to use post-increments instead (Intel?); * - Make MATCH copy in inflate() much faster for when inflate_fast() not used; * - Use local copies of stream next and avail values, as well as local bit; * buffer and bit count in inflate()--for speed when inflate_fast() not used; *; * 1.2.beta4 1 Jan 2003; * - Split ptr - 257 statements in inflate_table() to avoid compiler warnings; * - Move a comment on output buffer sizes from inffast.c to inflate.c; * - Add comments in inffast.c to introduce the inflate_fast() routine; * - Rearrange window copies in inflate_fast() for speed and simplification; * - Unroll last copy for window match in inflate_fast(); * - Use local copies of window variables in inflate_fast() for speed; * - Pull out common wnext == 0 case for speed in inflate_fast(); * - Make op and len in inflate_fast() unsigned for consistency; * - Add FAR to lcode and dcode declarations in inflate_fast(); * - Simplified bad distance check in inflate_fast(); * - Added inflateBackInit(), inflateBack(), and inflateBackEnd() in new; * source file infback.c to provide a call-back interface to inflate for; * programs like gzip and unzip -- uses window as output buffer to avoid; * window copying; *; * 1.2.beta5 1 Jan 2003; * - Improved inflateBack() interface to allow the caller to provide initial; * input in strm.; * - Fixed stored blocks bug in ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c:2006,avoid,avoid,2006,builtins/zlib/inflate.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c,1,['avoid'],['avoid']
Safety,"hbuf[] unsigned char to match parameter type in inflate.c; * - Change strm->next_out[-state->offset] to *(strm->next_out - state->offset); * to avoid negation problem on Alphas (64 bit) in inflate.c; *; * 1.2.beta3 22 Dec 2002; * - Add comments on state->bits assertion in inffast.c; * - Add comments on op field in inftrees.h; * - Fix bug in reuse of allocated window after inflateReset(); * - Remove bit fields--back to byte structure for speed; * - Remove distance extra == 0 check in inflate_fast()--only helps for lengths; * - Change post-increments to pre-increments in inflate_fast(), PPC biased?; * - Add compile time option, POSTINC, to use post-increments instead (Intel?); * - Make MATCH copy in inflate() much faster for when inflate_fast() not used; * - Use local copies of stream next and avail values, as well as local bit; * buffer and bit count in inflate()--for speed when inflate_fast() not used; *; * 1.2.beta4 1 Jan 2003; * - Split ptr - 257 statements in inflate_table() to avoid compiler warnings; * - Move a comment on output buffer sizes from inffast.c to inflate.c; * - Add comments in inffast.c to introduce the inflate_fast() routine; * - Rearrange window copies in inflate_fast() for speed and simplification; * - Unroll last copy for window match in inflate_fast(); * - Use local copies of window variables in inflate_fast() for speed; * - Pull out common write == 0 case for speed in inflate_fast(); * - Make op and len in inflate_fast() unsigned for consistency; * - Add FAR to lcode and dcode declarations in inflate_fast(); * - Simplified bad distance check in inflate_fast(); * - Added inflateBackInit(), inflateBack(), and inflateBackEnd() in new; * source file infback.c to provide a call-back interface to inflate for; * programs like gzip and unzip -- uses window as output buffer to avoid; * window copying; *; * 1.2.beta5 1 Jan 2003; * - Improved inflateBack() interface to allow the caller to provide initial; * input in strm.; * - Fixed stored blocks bug in ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c:2006,avoid,avoid,2006,graf2d/asimage/src/libAfterImage/zlib/inflate.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c,1,['avoid'],['avoid']
Safety,"he boosting parameter, beta, for AdaBoost; /// - UseRandomisedTrees choose at each node splitting a random set of variables; /// - UseNvars use UseNvars variables in randomised trees; /// - UsePoisson Nvars use UseNvars not as fixed number but as mean of a poisson distribution; /// - SeparationType the separation criterion applied in the node splitting.; /// Known:; /// - GiniIndex; /// - MisClassificationError; /// - CrossEntropy; /// - SDivSqrtSPlusB; /// - MinNodeSize: minimum percentage of training events in a leaf node (leaf criteria, stop splitting); /// - nCuts: the number of steps in the optimisation of the cut for a node (if < 0, then; /// step size is determined by the events); /// - UseFisherCuts: use multivariate splits using the Fisher criterion; /// - UseYesNoLeaf decide if the classification is done simply by the node type, or the S/B; /// (from the training) in the leaf node; /// - NodePurityLimit the minimum purity to classify a node as a signal node (used in pruning and boosting to determine; /// misclassification error rate); /// - PruneMethod The Pruning method.; /// Known:; /// - NoPruning // switch off pruning completely; /// - ExpectedError; /// - CostComplexity; /// - PruneStrength a parameter to adjust the amount of pruning. Should be large enough such that overtraining is avoided.; /// - PruningValFraction number of events to use for optimizing pruning (only if PruneStrength < 0, i.e. automatic pruning); /// - NegWeightTreatment; /// - IgnoreNegWeightsInTraining Ignore negative weight events in the training.; /// - DecreaseBoostWeight Boost ev. with neg. weight with 1/boostweight instead of boostweight; /// - PairNegWeightsGlobal Pair ev. with neg. and pos. weights in training sample and ""annihilate"" them; /// - MaxDepth maximum depth of the decision tree allowed before further splitting is stopped; /// - SkipNormalization Skip normalization at initialization, to keep expectation value of BDT output; /// according to the fraction of events",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx:1776,avoid,avoided,1776,tmva/tmva/src/MethodBDT.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx,1,['avoid'],['avoided']
Safety,"he call. A runtime can determine where values listed in the; // deopt arguments and (after RewriteStatepointsForGC) gc arguments are located; // on the stack when the code is suspended inside such a call. Every parse; // point is represented by a call wrapped in an gc.statepoint intrinsic.; // - A ""poll"" is an explicit check in the generated code to determine if the; // runtime needs the generated code to cooperate by calling a helper routine; // and thus suspending its execution at a known state. The call to the helper; // routine will be parseable. The (gc & runtime specific) logic of a poll is; // assumed to be provided in a function of the name ""gc.safepoint_poll"".; //; // We aim to insert polls such that running code can quickly be brought to a; // well defined state for inspection by the collector. In the current; // implementation, this is done via the insertion of poll sites at method entry; // and the backedge of most loops. We try to avoid inserting more polls than; // are necessary to ensure a finite period between poll sites. This is not; // because the poll itself is expensive in the generated code; it's not. Polls; // do tend to impact the optimizer itself in negative ways; we'd like to avoid; // perturbing the optimization of the method as much as we can.; //; // We also need to make most call sites parseable. The callee might execute a; // poll (or otherwise be inspected by the GC). If so, the entire stack; // (including the suspended frame of the current method) must be parseable.; //; // This pass will insert:; // - Call parse points (""call safepoints"") for any call which may need to; // reach a safepoint during the execution of the callee function.; // - Backedge safepoint polls and entry safepoint polls to ensure that; // executing code reaches a safepoint poll in a finite amount of time.; //; // We do not currently support return statepoints, but adding them would not; // be hard. They are not required for correctness - entry safepoints are an; ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/PlaceSafepoints.h:1652,avoid,avoid,1652,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/PlaceSafepoints.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/PlaceSafepoints.h,2,['avoid'],['avoid']
Safety,"he return value of inflate(), as noted below, or when it returns early; because Z_BLOCK is used. If a preset dictionary is needed after this call (see inflateSetDictionary; below), inflate sets strm->adler to the adler32 checksum of the dictionary; chosen by the compressor and returns Z_NEED_DICT; otherwise it sets; strm->adler to the adler32 checksum of all output produced so far (that is,; total_out bytes) and returns Z_OK, Z_STREAM_END or an error code as described; below. At the end of the stream, inflate() checks that its computed adler32; checksum is equal to that saved by the compressor and returns Z_STREAM_END; only if the checksum is correct. inflate() will decompress and check either zlib-wrapped or gzip-wrapped; deflate data. The header type is detected automatically. Any information; contained in the gzip header is not retained, so applications that need that; information should instead use raw inflate, see inflateInit2() below, or; inflateBack() and perform their own processing of the gzip header and; trailer. inflate() returns Z_OK if some progress has been made (more input processed; or more output produced), Z_STREAM_END if the end of the compressed data has; been reached and all uncompressed output has been produced, Z_NEED_DICT if a; preset dictionary is needed at this point, Z_DATA_ERROR if the input data was; corrupted (input stream not conforming to the zlib format or incorrect check; value), Z_STREAM_ERROR if the stream structure was inconsistent (for example; if next_in or next_out was NULL), Z_MEM_ERROR if there was not enough memory,; Z_BUF_ERROR if no progress is possible or if there was not enough room in the; output buffer when Z_FINISH is used. Note that Z_BUF_ERROR is not fatal, and; inflate() can be called again with more input and more output space to; continue decompressing. If Z_DATA_ERROR is returned, the application may then; call inflateSync() to look for a good compression block if a partial recovery; of the data is desired.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:5636,recover,recovery,5636,graf2d/asimage/src/libAfterImage/zlib/zlib.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h,1,['recover'],['recovery']
Safety,"he stack when the code is suspended inside such a call. Every parse; // point is represented by a call wrapped in an gc.statepoint intrinsic.; // - A ""poll"" is an explicit check in the generated code to determine if the; // runtime needs the generated code to cooperate by calling a helper routine; // and thus suspending its execution at a known state. The call to the helper; // routine will be parseable. The (gc & runtime specific) logic of a poll is; // assumed to be provided in a function of the name ""gc.safepoint_poll"".; //; // We aim to insert polls such that running code can quickly be brought to a; // well defined state for inspection by the collector. In the current; // implementation, this is done via the insertion of poll sites at method entry; // and the backedge of most loops. We try to avoid inserting more polls than; // are necessary to ensure a finite period between poll sites. This is not; // because the poll itself is expensive in the generated code; it's not. Polls; // do tend to impact the optimizer itself in negative ways; we'd like to avoid; // perturbing the optimization of the method as much as we can.; //; // We also need to make most call sites parseable. The callee might execute a; // poll (or otherwise be inspected by the GC). If so, the entire stack; // (including the suspended frame of the current method) must be parseable.; //; // This pass will insert:; // - Call parse points (""call safepoints"") for any call which may need to; // reach a safepoint during the execution of the callee function.; // - Backedge safepoint polls and entry safepoint polls to ensure that; // executing code reaches a safepoint poll in a finite amount of time.; //; // We do not currently support return statepoints, but adding them would not; // be hard. They are not required for correctness - entry safepoints are an; // alternative - but some GCs may prefer them. Patches welcome.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/PlaceSafepoints.h:1914,avoid,avoid,1914,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/PlaceSafepoints.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/PlaceSafepoints.h,14,"['avoid', 'safe']","['avoid', 'safepoint', 'safepoints']"
Safety,"height - desired image height; * compression - compression level in new ASImage( see asimage_start(); * for more ).; * RETURN VALUE; * Pointer to newly allocated and initialized ASImage structure on; * Success. NULL in case of any kind of error - that should never happen.; *********/; /****f* libAfterImage/asimage/clone_asimage(); * NAME ; * clone_asimage(); * SYNOPSIS; * ASImage *clone_asimage(ASImage *src, ASFlagType filter );; * INPUTS; * src - original ASImage.; * filter - bitmask of channels to be copied from one image to another.; * RETURN VALUE; * New ASImage, as a copy of original image.; * DESCRIPTION; * Creates exact clone of the original ASImage, with same compression,; * back_color and rest of the attributes. Only ASImage data will be; * carried over. Any attached alternative forms of images (XImages, etc.); * will not be copied. Any channel with unset bit in filter will not be; * copied. Image name, ASImageManager and ref_count will not be copied -; * use store_asimage() afterwards and make sure you use different name,; * to avoid clashes with original image.; *********/; /****f* libAfterImage/asimage/destroy_asimage(); * NAME; * destroy_asimage() frees all the memory allocated for specified ASImage. ; * SYNOPSIS; * void destroy_asimage( ASImage **im );; * INPUTS; * im				- pointer to valid ASImage structure.; * NOTES; * If there was XImage attached to it - it will be deallocated as well.; * EXAMPLE; * asview.c: ASView.5; *********/; /****f* libAfterImage/asimage/asimage_replace(); * NAME; * asimage_replace() will replace ASImage's data using data from ; * another ASImage; * SYNOPSIS; * Bool asimage_replace (ASImage *im, ASImage *from);; * INPUTS; * im				- pointer to valid ASImage structure.; * from				- pointer to ASImage from which to take the data.; * NOTES; * this function updates image without reallocating structure itself, which ; * means that all pointers to it will still be valid. If that function ; * succeeds - [from] ASImage will become unusab",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/asimage.h:2992,avoid,avoid,2992,graf2d/asimage/src/libAfterImage/asimage.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/asimage.h,1,['avoid'],['avoid']
Safety,"heir partial results are merged before returning the final values to the user.; There are no guarantees on the order in which threads will process the batches of entries.; In particular, note that this means that, for multi-thread event loops, there is no; guarantee on the order in which Snapshot() will _write_ entries: they could be scrambled with respect to the input dataset. The values of the special `rdfentry_` column will also not correspond to the entry numbers in the input dataset (e.g. TChain) in multi-thread runs. \warning By default, RDataFrame will use as many threads as the hardware supports, using up **all** the resources on; a machine. This might be undesirable on shared computing resources such as a batch cluster. Therefore, when running on shared computing resources, use; ~~~{.cpp}; ROOT::EnableImplicitMT(i); ~~~; replacing `i` with the number of CPUs/slots that were allocated for this job. ### Thread-safety of user-defined expressions; RDataFrame operations such as Histo1D() or Snapshot() are guaranteed to work correctly in multi-thread event loops.; User-defined expressions, such as strings or lambdas passed to Filter(), Define(), Foreach(), Reduce() or Aggregate(); will have to be thread-safe, i.e. it should be possible to call them concurrently from different threads. Note that simple Filter() and Define() transformations will inherently satisfy this requirement: Filter() / Define(); expressions will often be *pure* in the functional programming sense (no side-effects, no dependency on external state),; which eliminates all risks of race conditions. In order to facilitate writing of thread-safe operations, some RDataFrame features such as Foreach(), Define() or \link ROOT::RDF::RResultPtr::OnPartialResult OnPartialResult()\endlink; offer thread-aware counterparts (ForeachSlot(), DefineSlot(), \link ROOT::RDF::RResultPtr::OnPartialResultSlot OnPartialResultSlot()\endlink): their only difference is that they; will pass an extra `slot` argument (an u",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx:48420,safe,safety,48420,tree/dataframe/src/RDataFrame.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx,1,['safe'],['safety']
Safety,"here X and are now matrices . X is supplied through; the argument and replaced with the solution . #### Invert(TMatrixD &inv); This is of course just a call to MultiSolve with as input argument; the unit matrix . Note that for a matrix a(m,n) with m > n a; pseudo-inverse is calculated . ### Tolerances and Scaling. The tolerance parameter (which is a member of this base class) plays; a crucial role in all operations of the decomposition classes . It; gives the user a powerful tool to monitor and steer the operations; Its default value is sqrt(epsilon) where 1+epsilon = 1. If you do not want to be bothered by the following considerations,; like in most other linear algebra packages, just set the tolerance; with SetTol to an arbitrary small number . The tolerance number is used by each decomposition method to decide; whether the matrix is near singular, except of course SVD which can; handle singular matrices .; For each decomposition this will be checked in a different way; in LU; the matrix is considered singular when, at some point in the; decomposition, a diagonal element < fTol . Therefore, we had to set in; the example above of the (10x10) Hilbert, which is near singular, the; tolerance on 10e-12 . (The fact that we have to set the tolerance <; sqrt(epsilon) is a clear indication that we are losing precision .). If the matrix is flagged as being singular, operations with the; decomposition will fail and will return matrices/vectors that are; invalid . The observant reader will notice that by scaling the complete matrix; by some small number the decomposition will detect a singular matrix .; In this case the user will have to reduce the tolerance number by this; factor . (For CPU time saving we decided not to make this an automatic; procedure) . Code for this could look as follows:; ~~~; const Double_t max_abs = Abs(a).Max();; const Double_t scale = TMath::Min(max_abs,1.);; a.SetTol(a.GetTol()*scale);; ~~~. For usage examples see $ROOTSYS/test/stressLinear.cxx; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompBase.cxx:3928,detect,detect,3928,math/matrix/src/TDecompBase.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompBase.cxx,1,['detect'],['detect']
Safety,"hese variants may be valid, and checks are made; // to rule out inapplicable variants.; //; // As an additional optimization, before either of the two steps above is; // executed, the pass attempts to coalesce the target register with one of; // the source registers, e.g. given an instruction; // %3 = C2_mux %0, %1, %2; // %3 will be coalesced with either %1 or %2. If this succeeds,; // the instruction would then be (for example); // %3 = C2_mux %0, %3, %2; // and, under certain circumstances, this could result in only one predicated; // instruction:; // %3 = A2_tfrf %0, %2; //; // Splitting a definition of a register into two predicated transfers; // creates a complication in liveness tracking. Live interval computation; // will see both instructions as actual definitions, and will mark the; // first one as dead. The definition is not actually dead, and this; // situation will need to be fixed. For example:; // dead %1 = A2_tfrt ... ; marked as dead; // %1 = A2_tfrf ...; //; // Since any of the individual predicated transfers may end up getting; // removed (in case it is an identity copy), some pre-existing def may; // be marked as dead after live interval recomputation:; // dead %1 = ... ; marked as dead; // ...; // %1 = A2_tfrf ... ; if A2_tfrt is removed; // This case happens if %1 was used as a source in A2_tfrt, which means; // that is it actually live at the A2_tfrf, and so the now dead definition; // of %1 will need to be updated to non-dead at some point.; //; // This issue could be remedied by adding implicit uses to the predicated; // transfers, but this will create a problem with subsequent predication,; // since the transfers will no longer be possible to reorder. To avoid; // that, the initial splitting will not add any implicit uses. These; // implicit uses will be added later, after predication. The extra price,; // however, is that finding the locations where the implicit uses need; // to be added, and updating the live ranges will be more involved.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonExpandCondsets.cpp:3684,avoid,avoid,3684,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonExpandCondsets.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonExpandCondsets.cpp,1,['avoid'],['avoid']
Safety,"higher tier.; ///; /// Note that since WalkUpFromFoo() calls WalkUpFromBar() (where Bar; /// is Foo's super class) before calling VisitFoo(), the result is; /// that the Visit*() methods for a given node are called in the; /// top-down order (e.g. for a node of type NamespaceDecl, the order will; /// be VisitDecl(), VisitNamedDecl(), and then VisitNamespaceDecl()).; ///; /// This scheme guarantees that all Visit*() calls for the same AST; /// node are grouped together. In other words, Visit*() methods for; /// different nodes are never interleaved.; ///; /// Clients of this visitor should subclass the visitor (providing; /// themselves as the template argument, using the curiously recurring; /// template pattern) and override any of the Traverse*, WalkUpFrom*,; /// and Visit* methods for declarations, types, statements,; /// expressions, or other AST nodes where the visitor should customize; /// behavior. Most users only need to override Visit*. Advanced; /// users may override Traverse* and WalkUpFrom* to implement custom; /// traversal strategies. Returning false from one of these overridden; /// functions will abort the entire traversal.; ///; /// By default, this visitor tries to visit every part of the explicit; /// source code exactly once. The default policy towards templates; /// is to descend into the 'pattern' class or function body, not any; /// explicit or implicit instantiations. Explicit specializations; /// are still visited, and the patterns of partial specializations; /// are visited separately. This behavior can be changed by; /// overriding shouldVisitTemplateInstantiations() in the derived class; /// to return true, in which case all known implicit and explicit; /// instantiations will be visited at the same time as the pattern; /// from which they were produced.; ///; /// By default, this visitor preorder traverses the AST. If postorder traversal; /// is needed, the \c shouldTraversePostOrder method needs to be overridden; /// to return \c true.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/RecursiveASTVisitor.h:2737,abort,abort,2737,interpreter/llvm-project/clang/include/clang/AST/RecursiveASTVisitor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/RecursiveASTVisitor.h,1,['abort'],['abort']
Safety,"hing --------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the newly proposed standard C++ interfaces for hashing; // arbitrary data and building hash functions for user-defined types. This; // interface was originally proposed in N3333[1] and is currently under review; // for inclusion in a future TR and/or standard.; //; // The primary interfaces provide are comprised of one type and three functions:; //; // -- 'hash_code' class is an opaque type representing the hash code for some; // data. It is the intended product of hashing, and can be used to implement; // hash tables, checksumming, and other common uses of hashes. It is not an; // integer type (although it can be converted to one) because it is risky; // to assume much about the internals of a hash_code. In particular, each; // execution of the program has a high probability of producing a different; // hash_code for a given input. Thus their values are not stable to save or; // persist, and should only be used during the execution for the; // construction of hashing datastructures.; //; // -- 'hash_value' is a function designed to be overloaded for each; // user-defined type which wishes to be used within a hashing context. It; // should be overloaded within the user-defined type's namespace and found; // via ADL. Overloads for primitive types are provided by this library.; //; // -- 'hash_combine' and 'hash_combine_range' are functions designed to aid; // programmers in easily and intuitively combining a set of data into; // a single hash_code for their object. They should only logically be used; // within the implementation of a 'hash_value' routine or similar context.; //; // Note that 'hash_combine_range' cont",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h:1058,risk,risky,1058,interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,1,['risk'],['risky']
Safety,"hould ""block out"" those gaps by e.g.; /// just creating a single fixed-offset field that represents the; /// entire ""header"".; ///; /// - The size of a field is not required to be a multiple of, or even; /// greater than, the field's required alignment. The only constraint; /// on fields is that they must not be zero-sized.; ///; /// To simplify the implementation, any fixed-offset fields in the; /// layout must appear at the start of the field array, and they must; /// be ordered by increasing offset.; ///; /// The algorithm will produce a guaranteed-minimal layout with no; /// interior padding in the following ""C-style"" case:; ///; /// - every field's size is a multiple of its required alignment and; /// - either no fields have initially fixed offsets, or the fixed-offset; /// fields have no interior padding and end at an offset that is at; /// least as aligned as all the flexible-offset fields.; ///; /// Otherwise, while the algorithm will make a best-effort attempt to; /// avoid padding, it cannot guarantee a minimal layout, as there is; /// no known efficient algorithm for doing so.; ///; /// The layout produced by this algorithm may not be stable across LLVM; /// releases. Do not use this anywhere where ABI stability is required.; ///; /// Flexible-offset fields with the same size and alignment will be ordered; /// the same way they were in the initial array. Otherwise the current; /// algorithm makes no effort to preserve the initial order of; /// flexible-offset fields.; ///; /// On return, all fields will have been assigned a fixed offset, and the; /// array will be sorted in order of ascending offsets. Note that this; /// means that the fixed-offset fields may no longer form a strict prefix; /// if there's any padding before they end.; ///; /// The return value is the total size of the struct and its required; /// alignment. Note that the total size is not rounded up to a multiple; /// of the required alignment; clients which require this can do so easily.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OptimizedStructLayout.h:1514,avoid,avoid,1514,interpreter/llvm-project/llvm/include/llvm/Support/OptimizedStructLayout.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OptimizedStructLayout.h,1,['avoid'],['avoid']
Safety,"iable \f$x\f$ obtained by histogramming the weighted; events reproduces, on average, the true distribution; \f${\hbox{ {M}}}_{\rm n}(x)\f$. The class TSPlot allows to reconstruct the true distribution; \f${\hbox{ {M}}}_{\rm n}(x)\f$. of a control variable \f$x\f$ for each of the \f${\rm N}_{\rm s}\f$ species from; the sole knowledge of the PDFs of the discriminating variables \f${\rm f}_i(y)\f$.; The plots obtained thanks to the TSPlot class are called \f$\hbox {$_s$}{\cal P}lots\f$. ### Some properties and checks. Beside reproducing the true distribution,\f$\hbox {$_s$}{\cal P}lots\f$ bear remarkable properties:. - Each \f$x\f$ - distribution is properly normalized:. \f[; \sum_{e=1}^{N} {_s{\cal P}}_{\rm n}(y_e)~=~N_{\rm n} ~. \tag{4}; \f]. - For any event:. \f[; \sum_{l=1}^{{\rm N}_{\rm s}} {_s{\cal P}}_l(y_e) ~=~1 ~. \tag{5}; \f]. That is to say that, summing up the \f${\rm N}_{\rm s}\f$ \f$\hbox {$_s$}{\cal P}lots\f$,; one recovers the data sample distribution in \f$x\f$, and summing up the number of events; entering in a \f$\hbox{$_s$}{\cal P}lot\f$ for a given species, one recovers the yield of the; species, as provided by the fit.; The property 4 is implemented in the TSPlot class as a check. - the sum of the statistical uncertainties per bin. \f[; \sigma[N_{\rm n}\ _s\tilde{\rm M}_{\rm n}(x) {\delta x}]~=~\sqrt{\sum_{e \subset {\delta x}} ({_s{\cal P}}_{\rm n})^2} ~. \tag{6}; \f]. reproduces the statistical uncertainty on the yield \f$N_{\rm n}\f$, as provided by the fit:; \f$\sigma[N_{\rm n}]\equiv\sqrt{\hbox{ V}_{{\rm n}{\rm n}}}\f$ .; Because of that and since the determination of the yields is optimal; when obtained using a Likelihood fit, one can conclude that the \f$\hbox{$_s$}{\cal P}lot\f$; technique is itself an optimal method to reconstruct distributions of control variables. ### Different steps followed by TSPlot. 1. A maximum Likelihood fit is performed to obtain the yields \f$N_i\f$; of the various species.The fit relies on discriminating variab",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/splot/src/TSPlot.cxx:4723,recover,recovers,4723,math/splot/src/TSPlot.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/splot/src/TSPlot.cxx,2,['recover'],['recovers']
Safety,"ic errors, but the total memory of your process; still grows, because your program's memory is full of ""holes"" which; reduce the efficiency of memory access; this is called ""memory; fragmentation"". Moreover new / delete are expensive operations in; terms of CPU time. Without entering into technical details, TClonesArray allows you to; ""reuse"" the same portion of memory for new/delete avoiding memory; fragmentation and memory growth and improving the performance by; orders of magnitude. Every time the memory of the TClonesArray has; to be reused, the Clear() method is used. To provide its benefits,; each TClonesArray must be allocated *once* per process and disposed; of (deleted) *only when not needed any more*. So a job should see *only one* deletion for each TClonesArray,; which should be Clear()ed during the job several times. Deleting a; TClonesArray is a double waste. Not only you do not avoid memory; fragmentation, but you worsen it because the TClonesArray itself; is a rather heavy structure, and there is quite some code in the; destructor, so you have more memory fragmentation and slower code. ### NOTE 2. When investigating misuse of TClonesArray, please make sure of the following:. - Use Clear() or Clear(""C"") instead of Delete(). This will improve; program execution time.; - TClonesArray object classes containing pointers allocate memory.; To avoid causing memory leaks, special Clear(""C"") must be used; for clearing TClonesArray. When option ""C"" is specified, ROOT; automatically executes the Clear() method (by default it is; empty contained in TObject). This method must be overridden in; the relevant TClonesArray object class, implementing the reset; procedure for pointer objects.; - If the objects are added using the placement new then the Clear must; deallocate the memory.; - If the objects are added using TClonesArray::ConstructedAt then the; heap-based memory can stay allocated and reused as the constructor is; not called for already constructed/added obje",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx:3677,avoid,avoid,3677,core/cont/src/TClonesArray.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx,1,['avoid'],['avoid']
Safety,"icrosoft\\Windows NT\\CurrentVersion"" CurrentVersion; IfErrors is_error is_winnt; is_winnt:; StrCpy $1 $0 1; StrCmp $1 4 is_error ; Aborting installation for Windows versions older than Windows 2000; StrCmp $0 ""5.0"" is_error ; Removing Windows 2000 as supported Windows version; StrCmp $0 ""5.1"" is_winnt_XP; StrCmp $0 ""5.2"" is_winnt_2003; StrCmp $0 ""6.0"" is_winnt_vista; StrCmp $0 ""6.1"" is_winnt_7; StrCmp $0 ""6.2"" is_winnt_8; StrCmp $1 6 is_winnt_8 ; Checking for future versions of Windows 8; Goto is_error. is_winnt_XP:; is_winnt_2003:; is_winnt_vista:; is_winnt_7:; is_winnt_8:; Goto done; is_error:; StrCpy $1 $0; ReadRegStr $0 HKLM ""SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion"" ProductName; IfErrors 0 +4; ReadRegStr $0 HKLM ""SOFTWARE\\Microsoft\\Windows\\CurrentVersion"" Version; IfErrors 0 +2; StrCpy $0 ""Unknown""; MessageBox MB_ICONSTOP|MB_OK ""This version of Cling cannot be installed on this system. Cling is supported only on Windows NT systems. Current system: $0 (version: $1)""; Abort; done:; Pop $1; Pop $0; FunctionEnd. ; Function to check any previously installed version of Cling in the system; Function CheckPrevVersion; Push $0; Push $1; Push $2; IfFileExists ""$INSTDIR\\bin\\cling.exe"" 0 otherver; MessageBox MB_OK|MB_ICONSTOP ""Another Cling installation (with the same version) has been detected. Please uninstall it first.""; Abort; otherver:; StrCpy $0 0; StrCpy $2 """"; loop:; EnumRegKey $1 ${PRODUCT_ROOT_KEY} ""${PRODUCT_KEY}"" $0; StrCmp $1 """" loopend; IntOp $0 $0 + 1; StrCmp $2 """" 0 +2; StrCpy $2 ""$1""; StrCpy $2 ""$2, $1""; Goto loop; loopend:; ReadRegStr $1 ${PRODUCT_ROOT_KEY} ""${PRODUCT_KEY}"" ""Version""; IfErrors finalcheck; StrCmp $2 """" 0 +2; StrCpy $2 ""$1""; StrCpy $2 ""$2, $1""; finalcheck:; StrCmp $2 """" done; MessageBox MB_YESNO|MB_ICONEXCLAMATION ""Another Cling installation (version $2) has been detected. It is recommended to uninstall it if you intend to use the same installation directory. Do you want to proceed with the installation anyway?"" IDYES done IDNO",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/cpt.py:1182,Abort,Abort,1182,interpreter/cling/tools/packaging/cpt.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/cpt.py,1,['Abort'],['Abort']
Safety,"ies of stream next and avail values, as well as local bit; * buffer and bit count in inflate()--for speed when inflate_fast() not used; *; * 1.2.beta4 1 Jan 2003; * - Split ptr - 257 statements in inflate_table() to avoid compiler warnings; * - Move a comment on output buffer sizes from inffast.c to inflate.c; * - Add comments in inffast.c to introduce the inflate_fast() routine; * - Rearrange window copies in inflate_fast() for speed and simplification; * - Unroll last copy for window match in inflate_fast(); * - Use local copies of window variables in inflate_fast() for speed; * - Pull out common wnext == 0 case for speed in inflate_fast(); * - Make op and len in inflate_fast() unsigned for consistency; * - Add FAR to lcode and dcode declarations in inflate_fast(); * - Simplified bad distance check in inflate_fast(); * - Added inflateBackInit(), inflateBack(), and inflateBackEnd() in new; * source file infback.c to provide a call-back interface to inflate for; * programs like gzip and unzip -- uses window as output buffer to avoid; * window copying; *; * 1.2.beta5 1 Jan 2003; * - Improved inflateBack() interface to allow the caller to provide initial; * input in strm.; * - Fixed stored blocks bug in inflateBack(); *; * 1.2.beta6 4 Jan 2003; * - Added comments in inffast.c on effectiveness of POSTINC; * - Typecasting all around to reduce compiler warnings; * - Changed loops from while (1) or do {} while (1) to for (;;), again to; * make compilers happy; * - Changed type of window in inflateBackInit() to unsigned char *; *; * 1.2.beta7 27 Jan 2003; * - Changed many types to unsigned or unsigned short to avoid warnings; * - Added inflateCopy() function; *; * 1.2.0 9 Mar 2003; * - Changed inflateBack() interface to provide separate opaque descriptors; * for the in() and out() functions; * - Changed inflateBack() argument and in_func typedef to swap the length; * and buffer address return values for the input function; * - Check next_in and next_out for Z_NULL on entry ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c:2833,avoid,avoid,2833,builtins/zlib/inflate.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c,1,['avoid'],['avoid']
Safety,"ies of stream next and avail values, as well as local bit; * buffer and bit count in inflate()--for speed when inflate_fast() not used; *; * 1.2.beta4 1 Jan 2003; * - Split ptr - 257 statements in inflate_table() to avoid compiler warnings; * - Move a comment on output buffer sizes from inffast.c to inflate.c; * - Add comments in inffast.c to introduce the inflate_fast() routine; * - Rearrange window copies in inflate_fast() for speed and simplification; * - Unroll last copy for window match in inflate_fast(); * - Use local copies of window variables in inflate_fast() for speed; * - Pull out common write == 0 case for speed in inflate_fast(); * - Make op and len in inflate_fast() unsigned for consistency; * - Add FAR to lcode and dcode declarations in inflate_fast(); * - Simplified bad distance check in inflate_fast(); * - Added inflateBackInit(), inflateBack(), and inflateBackEnd() in new; * source file infback.c to provide a call-back interface to inflate for; * programs like gzip and unzip -- uses window as output buffer to avoid; * window copying; *; * 1.2.beta5 1 Jan 2003; * - Improved inflateBack() interface to allow the caller to provide initial; * input in strm.; * - Fixed stored blocks bug in inflateBack(); *; * 1.2.beta6 4 Jan 2003; * - Added comments in inffast.c on effectiveness of POSTINC; * - Typecasting all around to reduce compiler warnings; * - Changed loops from while (1) or do {} while (1) to for (;;), again to; * make compilers happy; * - Changed type of window in inflateBackInit() to unsigned char *; *; * 1.2.beta7 27 Jan 2003; * - Changed many types to unsigned or unsigned short to avoid warnings; * - Added inflateCopy() function; *; * 1.2.0 9 Mar 2003; * - Changed inflateBack() interface to provide separate opaque descriptors; * for the in() and out() functions; * - Changed inflateBack() argument and in_func typedef to swap the length; * and buffer address return values for the input function; * - Check next_in and next_out for Z_NULL on entry ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c:2833,avoid,avoid,2833,graf2d/asimage/src/libAfterImage/zlib/inflate.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/inflate.c,1,['avoid'],['avoid']
Safety,"ifferences are:; // 1. Separate vftable and vbtable.; //; // 2. Each subobject with a vfptr gets its own vftable rather than an address; // point in a single vtable shared between all the subobjects.; // Each vftable is represented by a separate section and virtual calls; // must be done using the vftable which has a slot for the function to be; // called.; //; // 3. Virtual method definitions expect their 'this' parameter to point to the; // first vfptr whose table provides a compatible overridden method. In many; // cases, this permits the original vf-table entry to directly call; // the method instead of passing through a thunk.; // See example before VFTableBuilder::ComputeThisOffset below.; //; // A compatible overridden method is one which does not have a non-trivial; // covariant-return adjustment.; //; // The first vfptr is the one with the lowest offset in the complete-object; // layout of the defining class, and the method definition will subtract; // that constant offset from the parameter value to get the real 'this'; // value. Therefore, if the offset isn't really constant (e.g. if a virtual; // function defined in a virtual base is overridden in a more derived; // virtual base and these bases have a reverse order in the complete; // object), the vf-table may require a this-adjustment thunk.; //; // 4. vftables do not contain new entries for overrides that merely require; // this-adjustment. Together with #3, this keeps vf-tables smaller and; // eliminates the need for this-adjustment thunks in many cases, at the cost; // of often requiring redundant work to adjust the ""this"" pointer.; //; // 5. Instead of VTT and constructor vtables, vbtables and vtordisps are used.; // Vtordisps are emitted into the class layout if a class has; // a) a user-defined ctor/dtor; // and; // b) a method overriding a method in a virtual base.; //; // To get a better understanding of this code,; // you might want to see examples in test/CodeGenCXX/microsoft-abi-vtables-*.cpp",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp:1666,redund,redundant,1666,interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp,1,['redund'],['redundant']
Safety,"ile if ""thePdf"" is not a; // type deriving from RooAbsPdf; MyPdf::MyPdf(name, title, ...) :; pdfProxy(""pdfProxy"", ""Proxy holding a PDF"", this, thePdf) {. }. // In .cxx: Accessing the proxy. pdfProxy->fitTo(...);; ~~~; </table>. ### How to modernise old code. 1. Choose the proper template argument for the proxy.; - If a PDF is stored: `RooTemplateProxy<RooAbsPdf>`.; - If a real-valued object is stored: `RooTemplateProxy<RooAbsReal>`.; - If a category is stored: `RooTemplateProxy<RooCategory>`.; - If a variable is stored (i.e. one wants to be able to assign values to it): `RooTemplateProxy<RooRealVar>`; Other template arguments are possible, as long as they derive from RooAbsArg.; 2. Increment the class version of the owning class.; 3. Make sure that the right type is passed in the constructor of the proxy.; 4. Always use `proxy->` and `*proxy` to work with the stored object. No need to cast.; 5. **Only if necessary** If errors about missing symbols connected to RooTemplateProxy appear at link time,; a specific template instantiation for RooTemplateProxy is not yet in ROOT's dictionaries.; These two lines should be added to the LinkDef.h of the project:; ~~~{.cpp}; #pragma link C++ class RooTemplateProxy<RooMultiCategory>+;; #pragma read sourceClass=""RooCategoryProxy"" targetClass=""RooTemplateProxy<RooMultiCategory>""; ~~~; Replace `RooMultiCategory` by the proper type. If the proxy was holding a real-valued object, use `sourceClass=""RooRealProxy""`. The first line adds the proxy class to the dictionary, the second line enables reading a legacy; `RooCategoryProxy` from a file, and converting it to the new type-safe proxy. If no old proxies; have to be read from files, this line can be omitted. If the template instantiation that triggered the missing symbols seems to be a very common instantiation,; request for it to be added to RooFit by creating a pull request for ROOT. If it is rather uncommon,; it is sufficient to add it to the LinkDef.h of the local project only. **/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooTemplateProxy.h:4273,safe,safe,4273,roofit/roofitcore/inc/RooTemplateProxy.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooTemplateProxy.h,1,['safe'],['safe']
Safety,"imal floating point numbers and correctly rounds according; /// to the specified rounding mode.; ///; /// Conversion to decimal text is not currently implemented.; ///; /// Non-zero finite numbers are represented internally as a sign bit, a 16-bit; /// signed exponent, and the significand as an array of integer parts. After; /// normalization of a number of precision P the exponent is within the range of; /// the format, and if the number is not denormal the P-th bit of the; /// significand is set as an explicit integer bit. For denormals the most; /// significant bit is shifted right so that the exponent is maintained at the; /// format's minimum, so that the smallest denormal has just the least; /// significant bit of the significand set. The sign of zeroes and infinities; /// is significant; the exponent and significand of such numbers is not stored,; /// but has a known implicit (deterministic) value: 0 for the significands, 0; /// for zero exponent, all 1 bits for infinity exponent. For NaNs the sign and; /// significand are deterministic, although not really meaningful, and preserved; /// in non-conversion operations. The exponent is implicitly all 1 bits.; ///; /// APFloat does not provide any exception handling beyond default exception; /// handling. We represent Signaling NaNs via IEEE-754R 2008 6.2.1 should clause; /// by encoding Signaling NaNs with the first bit of its trailing significand as; /// 0.; ///; /// TODO; /// ====; ///; /// Some features that may or may not be worth adding:; ///; /// Binary to decimal conversion (hard).; ///; /// Optional ability to detect underflow tininess before rounding.; ///; /// New formats: x87 in single and double precision mode (IEEE apart from; /// extended exponent range) (hard).; ///; /// New operations: sqrt, IEEE remainder, C90 fmod, nexttoward.; ///; // This is the common type definitions shared by APFloat and its internal; // implementation classes. This struct should not define any non-static data; // members.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h:4285,detect,detect,4285,interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h,1,['detect'],['detect']
Safety,"ing the SP, and the incoming arguments are accessible using the FP.; // - If the local objects are not aligned, they can always be accessed using; // the FP.; // - If there are no variable-sized objects, the local objects can always be; // accessed using the SP, regardless whether they are aligned or not. (The; // alignment padding will be at the bottom of the stack (highest address),; // and so the offset with respect to the SP will be known at the compile-; // -time.); //; // The only complication occurs if there are both, local aligned objects, and; // dynamically allocated (variable-sized) objects. The alignment pad will be; // placed between the FP and the local objects, thus preventing the use of the; // FP to access the local objects. At the same time, the variable-sized objects; // will be between the SP and the local objects, thus introducing an unknown; // distance from the SP to the locals.; //; // To avoid this problem, a new register is created that holds the aligned; // address of the bottom of the stack, referred in the sources as AP (aligned; // pointer). The AP will be equal to ""FP-p"", where ""p"" is the smallest pad; // that aligns AP to the required boundary (a maximum of the alignments of; // all stack objects, fixed- and variable-sized). All local objects[1] will; // then use AP as the base pointer.; // [1] The exception is with ""fixed"" stack objects. ""Fixed"" stack objects get; // their name from being allocated at fixed locations on the stack, relative; // to the FP. In the presence of dynamic allocation and local alignment, such; // objects can only be accessed through the FP.; //; // Illustration of the AP:; // FP --+; // |; // ---------------+---------------------+-----+-----------------------++-+--; // Rest of the | Local stack objects | Pad | Fixed stack objects |LR|; // stack frame | (aligned) | | (CSR, spills, etc.) |FP|; // ---------------+---------------------+-----+-----------------+-----+--+--; // |<-- Multiple of the -->|; // stack ali",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonFrameLowering.cpp:1644,avoid,avoid,1644,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonFrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonFrameLowering.cpp,1,['avoid'],['avoid']
Safety,"ion bins, etc).; <br/>; If you use this software, please consider the following citation; <br/>; <b>S.Schmitt, JINST 7 (2012) T10003 [arXiv:1205.6201]</b>; <br/>; Detailed documentation and updates are available on; http://www.desy.de/~sschmitt. Please consult the documentation of the class TUnfoldBinning about how to use; binning schemes. This class provides methods to read and write binning; schemes in the XML language. There is also a method which writes out; a dtd file for validation.; <h3>Example XML code</h3>; The example below encodes two binning schemes, <em>detector</em> and; <em>generator</em>. The detecor scheme consists of a single,; three-dimensional distribution (pt,eta,discriminator). The generator; scheme consists of two two-dimensional distributions, signal and background.; <pre>; <?xml version=""1.0"" encoding=""UTF-8"" standalone=""no""?>; <!DOCTYPE TUnfoldBinning SYSTEM ""tunfoldbinning.dtd"">; <TUnfoldBinning>; <BinningNode name=""detector"" firstbin=""1"" factor=""1"">; <BinningNode name=""detectordistribution"" firstbin=""1"" factor=""1"">; <Axis name=""pt"" lowEdge=""3.5"">; <Bin repeat=""3"" width=""0.5"" />; <Bin repeat=""3"" width=""1"" />; <Bin width=""2"" />; <Bin width=""3"" />; <Bin location=""overflow""/>; <Axis name=""eta"" lowEdge=""-3"">; <Bin repeat=""2"" width=""0.5"" />; <Bin width=""1"" />; <Bin repeat=""4"" width=""0.5"" />; <Bin width=""1"" />; <Bin repeat=""2"" width=""0.5"" />; <Axis name=""discriminator"" lowEdge=""0"">; <Bin width=""0.15"" />; <Bin repeat=""2"" width=""0.35"" />; <Bin width=""0.15"" />; </Axis>; </Axis>; </Axis>; </BinningNode>; </BinningNode>; <BinningNode name=""generator"" firstbin=""1"" factor=""1"">; <BinningNode name=""signal"" firstbin=""1"" factor=""1"">; <Axis name=""ptgen"" lowEdge=""4"">; <Bin location=""underflow"" />; <Bin width=""1"" />; <Bin width=""2"" />; <Bin width=""3"" />; <Bin location=""overflow"" />; <Axis name=""etagen"" lowEdge=""-2"">; <Bin location=""underflow"" />; <Bin width=""1.5"" />; <Bin width=""1"" />; <Bin width=""1.5"" />; <Bin location=""overflow"" />; </Axis>; </Axis>; </Binn",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfoldBinningXML.cxx:1840,detect,detector,1840,hist/unfold/src/TUnfoldBinningXML.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfoldBinningXML.cxx,2,['detect'],"['detector', 'detectordistribution']"
Safety,"ionary(), this param can be set on the CCtx to control; * whether the CDict that is created internally can use the feature or not.; *; * What it does:; *; * Normally, the internal data structures of the CDict are analogous to what; * would be stored in a CCtx after compressing the contents of a dictionary.; * To an approximation, a compression using a dictionary can then use those; * data structures to simply continue what is effectively a streaming; * compression where the simulated compression of the dictionary left off.; * Which is to say, the search structures in the CDict are normally the same; * format as in the CCtx.; *; * It is possible to do better, since the CDict is not like a CCtx: the search; * structures are written once during CDict creation, and then are only read; * after that, while the search structures in the CCtx are both read and; * written as the compression goes along. This means we can choose a search; * structure for the dictionary that is read-optimized.; *; * This feature enables the use of that different structure.; *; * Note that some of the members of the ZSTD_compressionParameters struct have; * different semantics and constraints in the dedicated search structure. It is; * highly recommended that you simply set a compression level in the CCtxParams; * you pass into the CDict creation call, and avoid messing with the cParams; * directly.; *; * Effects:; *; * This will only have any effect when the selected ZSTD_strategy; * implementation supports this feature. Currently, that's limited to; * ZSTD_greedy, ZSTD_lazy, and ZSTD_lazy2.; *; * Note that this means that the CDict tables can no longer be copied into the; * CCtx, so the dict attachment mode ZSTD_dictForceCopy will no longer be; * useable. The dictionary can only be attached or reloaded.; *; * In general, you should expect compression to be faster--sometimes very much; * so--and CDict creation to be slightly slower. Eventually, we will probably; * make this mode the default.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:2013,avoid,avoid,2013,builtins/zstd/zstd.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h,1,['avoid'],['avoid']
Safety,"is usefull when libAfterImage is used with; * an app that has its own approach to Visual handling, and since Visuals; * on all Windows, Pixmaps and colormaps must match, there is a need to; * synchronise visuals used by an app and libAfterImage.; *********/; /****f* libAfterImage/create_asvisual(); * NAME; * create_asvisual(); * SYNOPSIS; * ASVisual *create_asvisual( Display *dpy, int screen,; * int default_depth,; * ASVisual *reusable_memory );; * INPUTS; * dpy 		- valid pointer to opened X display.; * screen 	- screen number on which to query visuals.; * root 	- root window on that screen.; * default_depth- default colordepth of the screen.; * reusable_memory - pointer to preallocated ASVisual structure.; * RETURN VALUE; * Pointer to ASVisual structure initialized with enough information; * to be able to deal with current X Visual.; * DESCRIPTION; * This function calls all the needed functions in order to setup new; * ASVisual structure for the specified screen. If reusable_memory is; * not null - it will not allocate new ASVisual structure, but instead; * will use supplied one. Useful for allocating ASVisual on stack.; * It is different from create_asvisualfor_id() in that it will attempt; * to autodetect best possible visual for the screen. For example on some; * SUN Solaris X servers there will be both 8bpp pseudocolor and 24bpp; * truecolor, and default will be 8bpp. In this scenario libAfterImage; * will detect and use 24bpp true color visual, thus producing much better; * results.; *********/; /****f* libAfterImage/destroy_asvisual(); * NAME; * destroy_asvisual(); * SYNOPSIS; * void destroy_asvisual( ASVisual *asv, Bool reusable );; * INPUTS; * asv - valid ASVisual structure.; * reusable - if True it will cause function to not free object; * itself.; * DESCRIPTION; * Cleanup function. Frees all the memory and deallocates all the; * resources. If reusable is False it will also free the object, pointed; * to by asv.; * EXAMPLE; * asview.c: ASView.2; *********/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/asvisual.h:2575,detect,detect,2575,graf2d/asimage/src/libAfterImage/asvisual.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/asvisual.h,1,['detect'],['detect']
Safety,"isto1D()), so we cannot deduce the type of; the column at compile-time. In this case **RDataFrame infers the type of the column** from the TTree itself. This; is why we never needed to specify the column types for all actions in the above snippets. When the column type is not a common one such as `int`, `double`, `char` or `float` it is nonetheless good practice to; specify it as a template parameter to the action itself, like this:; ~~~{.cpp}; df.Histo1D(""b1""); // OK, the type of ""b1"" is deduced at runtime; df.Min<MyNumber_t>(""myObject""); // OK, ""myObject"" is deduced to be of type `MyNumber_t`; ~~~. Deducing types at runtime requires the just-in-time compilation of the relevant actions, which has a small runtime; overhead, so specifying the type of the columns as template parameters to the action is good practice when performance is a goal. When strings are passed as expressions to Filter() or Define(), fundamental types are passed as constants. This avoids certaincommon mistakes such as typing `x = 0` rather than `x == 0`:. ~~~{.cpp}; // this throws an error (note the typo); df.Define(""x"", ""0"").Filter(""x = 0"");; ~~~. \anchor generic-actions; ### User-defined custom actions; RDataFrame strives to offer a comprehensive set of standard actions that can be performed on each event. At the same; time, it allows users to inject their own action code to perform arbitrarily complex data reductions. #### Implementing custom actions with Book(). Through the Book() method, users can implement a custom action and have access to the same features; that built-in RDataFrame actions have, e.g. hooks to events related to the start, end and execution of the; event loop, or the possibility to return a lazy RResultPtr to an arbitrary type of result:. ~~~{.cpp}; #include <ROOT/RDataFrame.hxx>; #include <memory>. class MyCounter : public ROOT::Detail::RDF::RActionImpl<MyCounter> {; std::shared_ptr<int> fFinalResult = std::make_shared<int>(0);; std::vector<int> fPerThreadResults;. public:",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx:66870,avoid,avoids,66870,tree/dataframe/src/RDataFrame.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx,1,['avoid'],['avoids']
Safety,"it fitting function as being H1FitChisquare; or H1FitLikelihood depending on the options selected.; H1FitChisquare; calculates the chisquare between the user fitting function (gaussian, polynomial,; user defined,etc) and the data for given values of the parameters.; It is the task of MINUIT to find those values of the parameters; which give the lowest value of chisquare. ### Basic concepts - The transformation for parameters with limits. For variable parameters with limits, MINUIT uses the following; transformation:. \f[; P_{\mathrm{int}} = \arcsin; \left( 2\: \frac{P_{\mathrm{ext}}-a}{b-a} - 1 \right); P_{\mathrm{ext}} = a + \frac{b - a}{2} \left( \sin P_{\mathrm{int}} + 1 \right); \f]. so that the internal value \f$P_{\mathrm{int}}\f$ can take on any value, while; the external value \f$P_{\mathrm{ext}}\f$ can take on values only between the lower; limit \f$a\f$ and the upper limit \f$b\f$.; Since the transformation is necessarily non-linear, it would transform a; nice linear problem into a nasty non-linear one, which is the reason why; limits should be avoided if not necessary.; In addition, the transformation; does require some computer time, so it slows down the computation a little; bit, and more importantly, it introduces additional numerical inaccuracy into; the problem in addition to what is introduced in the numerical calculation; of the FCN value.; The effects of non-linearity and numerical roundoff both; become more important as the external value gets closer to one of the limits; (expressed as the distance to nearest limit divided by distance between limits).; The user must therefore be aware of the fact that, for example,; if he puts limits of \f$(0,10^{10})\f$ on a parameter, then the values \f$0.0\f$; and \f$1.0\f$ will be indistinguishable to the accuracy of most machines. The transformation also affects the parameter error matrix, of course,; so Minuit does a transformation of the error matrix (and the; ``parabolic'' parameter errors) when there are",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:3501,avoid,avoided,3501,math/minuit/src/TMinuit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx,1,['avoid'],['avoided']
Safety,"it is then optionally compressed; /// and written to disk (this operation is also called committing or; /// 'flushing' the basket). The committed baskets are then; /// immediately removed from memory.; ///; /// The function returns the number of bytes committed to the; /// individual branches.; ///; /// If a write error occurs, the number of bytes returned is -1.; ///; /// If no data are written, because, e.g., the branch is disabled,; /// the number of bytes returned is 0.; ///; /// __The baskets are flushed and the Tree header saved at regular intervals__; ///; /// At regular intervals, when the amount of data written so far is; /// greater than fAutoFlush (see SetAutoFlush) all the baskets are flushed to disk.; /// This makes future reading faster as it guarantees that baskets belonging to nearby; /// entries will be on the same disk region.; /// When the first call to flush the baskets happen, we also take this opportunity; /// to optimize the baskets buffers.; /// We also check if the amount of data written is greater than fAutoSave (see SetAutoSave).; /// In this case we also write the Tree header. This makes the Tree recoverable up to this point; /// in case the program writing the Tree crashes.; /// The decisions to FlushBaskets and Auto Save can be made based either on the number; /// of bytes written (fAutoFlush and fAutoSave negative) or on the number of entries; /// written (fAutoFlush and fAutoSave positive).; /// Note that the user can decide to call FlushBaskets and AutoSave in her event loop; /// base on the number of events written instead of the number of bytes written.; ///; /// \note Calling `TTree::FlushBaskets` too often increases the IO time.; ///; /// \note Calling `TTree::AutoSave` too often increases the IO time and also the; /// file size.; ///; /// \note This method calls `TTree::ChangeFile` when the tree reaches a size; /// greater than `TTree::fgMaxTreeSize`. This doesn't happen if the tree is; /// attached to a `TMemFile` or derivate.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTree.cxx:1706,recover,recoverable,1706,tree/tree/src/TTree.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTree.cxx,1,['recover'],['recoverable']
Safety,"ite-scale - (red-x - blue-x)*red-scale; * -----------------------------------------------------------; * green-x - blue-x; *; * red-scale =; * 1 - blue-y*white-scale - (green-y - blue-y) * green-scale; * ---------------------------------------------------------; * red-y - blue-y; *; * Hence:; *; * red-scale =; * ( (green-x - blue-x) * (white-y - blue-y) -; * (green-y - blue-y) * (white-x - blue-x) ) / white-y; * -------------------------------------------------------------------------; * (green-x - blue-x)*(red-y - blue-y)-(green-y - blue-y)*(red-x - blue-x); *; * green-scale =; * ( (red-y - blue-y) * (white-x - blue-x) -; * (red-x - blue-x) * (white-y - blue-y) ) / white-y; * -------------------------------------------------------------------------; * (green-x - blue-x)*(red-y - blue-y)-(green-y - blue-y)*(red-x - blue-x); *; * Accuracy:; * The input values have 5 decimal digits of accuracy. The values are all in; * the range 0 < value < 1, so simple products are in the same range but may; * need up to 10 decimal digits to preserve the original precision and avoid; * underflow. Because we are using a 32-bit signed representation we cannot; * match this; the best is a little over 9 decimal digits, less than 10.; *; * The approach used here is to preserve the maximum precision within the; * signed representation. Because the red-scale calculation above uses the; * difference between two products of values that must be in the range -1..+1; * it is sufficient to divide the product by 7; ceil(100,000/32767*2). The; * factor is irrelevant in the calculation because it is applied to both; * numerator and denominator.; *; * Note that the values of the differences of the products of the; * chromaticities in the above equations tend to be small, for example for; * the sRGB chromaticities they are:; *; * red numerator: -0.04751; * green numerator: -0.08788; * denominator: -0.2241 (without white-y multiplication); *; * The resultant Y coefficients from the chromaticities of so",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:6135,avoid,avoid,6135,graf2d/asimage/src/libAfterImage/libpng/png.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c,1,['avoid'],['avoid']
Safety,"ition, modifying in place a TTree; causes a new TTree instance to be written and the previous one to be deleted.; For this reasons, ROOT offers the concept of friends for TTree and TChain:; if is good practice to rely on friend trees rather than adding a branch manually. \anchor fullexample; ## An Example. Begin_Macro; ../../../tutorials/tree/tree.C; End_Macro. ~~~ {.cpp}; // A simple example with histograms and a tree; //; // This program creates :; // - a one dimensional histogram; // - a two dimensional histogram; // - a profile histogram; // - a tree; //; // These objects are filled with some random numbers and saved on a file. #include ""TFile.h""; #include ""TH1.h""; #include ""TH2.h""; #include ""TProfile.h""; #include ""TRandom.h""; #include ""TTree.h"". //__________________________________________________________________________; main(int argc, char **argv); {; // Create a new ROOT binary machine independent file.; // Note that this file may contain any kind of ROOT objects, histograms,trees; // pictures, graphics objects, detector geometries, tracks, events, etc..; // This file is now becoming the current directory.; TFile hfile(""htree.root"",""RECREATE"",""Demo ROOT file with histograms & trees"");. // Create some histograms and a profile histogram; TH1F hpx(""hpx"",""This is the px distribution"",100,-4,4);; TH2F hpxpy(""hpxpy"",""py ps px"",40,-4,4,40,-4,4);; TProfile hprof(""hprof"",""Profile of pz versus px"",100,-4,4,0,20);. // Define some simple structures; typedef struct {Float_t x,y,z;} POINT;; typedef struct {; Int_t ntrack,nseg,nvertex;; UInt_t flag;; Float_t temperature;; } EVENTN;; POINT point;; EVENTN eventn;. // Create a ROOT Tree; TTree tree(""T"",""An example of ROOT tree with a few branches"");; tree.Branch(""point"",&point,""x:y:z"");; tree.Branch(""eventn"",&eventn,""ntrack/I:nseg:nvertex:flag/i:temperature/F"");; tree.Branch(""hpx"",""TH1F"",&hpx,128000,0);. Float_t px,py,pz;. // Here we start a loop on 1000 events; for ( Int_t i=0; i<1000; i++) {; gRandom->Rannor(px,py);; pz = px",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTree.cxx:12699,detect,detector,12699,tree/tree/src/TTree.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTree.cxx,1,['detect'],['detector']
Safety,"ject::Streamer, the pidf is read.; At this point, robj is entered into the table of objects of the TProcessID; corresponding to pidf. ### WARNING1:; If MyClass is the class of the referenced object, The TObject; part of MyClass must be Streamed. One should not; call MyClass::Class()->IgnoreTObjectStreamer(). ### WARNING2:; A TRef cannot point to another TRef. ## ObjectNumber. When an object is referenced (see TRef assignment operator or TRefArray::Add); a unique identifier is computed and stored in both the fUniqueID of the; referenced and referencing object. This uniqueID is computed by incrementing; by one the static global in TProcessID::fgNumber. fUniqueID is some sort of; serial object number in the current session. One can retrieve at any time; the current value of fgNumber by calling the static function TProcessID::GetObjectCount; or set this number via TProcessID::SetObjectCount. To avoid a growing table of fObjects in TProcessID, in case, for example,; one processes many events in a loop, it might be necessary to reset the; ObjectNumber at the end of processing of one event. See an example; in $ROOTSYS/test/Event.cxx (look at function Build). The value of ObjectNumber (say saveNumber=TProcessID::GetObjectCount()) may be; saved at the beginning of one event and reset to this original value; at the end of the event via TProcessID::SetObjectCount(saveNumber). These; actions may be stacked. ## Action on Demand. The normal behaviour of a TRef has been described above. In addition,; TRef supports also ""Actions on Demand"". It may happen that the object; referenced is not yet in memory, on a separate file or not yet computed.; In this case TRef is able to automatically execute an action:. - call to a compiled function (static function of member function); - call to an interpreted function; - execution of a C++ script. How to select this option?; In the definition of the TRef data member in the original class, do:; ~~~ {.cpp}; TRef fRef; //EXEC:execName. points to s",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TRef.cxx:4547,avoid,avoid,4547,core/base/src/TRef.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TRef.cxx,1,['avoid'],['avoid']
Safety,"kernel_code_t.privateElementSize); /// - Index_stride: SH_STATIC_MEM_CONFIG.INDEX_STRIDE (will be 64 as must; /// be number of wavefront lanes for scratch, must agree with; /// amd_kernel_code_t.wavefrontSize); /// - Add tid enable: 1; /// - ATC: from SH_MEM_CONFIG.PRIVATE_ATC,; /// - Hash_enable: ???; /// - Heap: ???; /// - Mtype: from SH_STATIC_MEM_CONFIG.PRIVATE_MTYPE; /// - Type: 0 (a buffer) (???); ///; /// Dispatch Ptr (enable_sgpr_dispatch_ptr):; /// Number of User SGPR registers: 2. 64 bit address of AQL dispatch packet; /// for kernel actually executing.; ///; /// Queue Ptr (enable_sgpr_queue_ptr):; /// Number of User SGPR registers: 2. 64 bit address of AmdQueue object for; /// AQL queue on which the dispatch packet was queued.; ///; /// Kernarg Segment Ptr (enable_sgpr_kernarg_segment_ptr):; /// Number of User SGPR registers: 2. 64 bit address of Kernarg segment. This; /// is directly copied from the kernargPtr in the dispatch packet. Having CP; /// load it once avoids loading it at the beginning of every wavefront.; ///; /// Dispatch Id (enable_sgpr_dispatch_id):; /// Number of User SGPR registers: 2. 64 bit Dispatch ID of the dispatch; /// packet being executed.; ///; /// Flat Scratch Init (enable_sgpr_flat_scratch_init):; /// Number of User SGPR registers: 2. This is 2 SGPRs.; ///; /// For CI/VI:; /// The first SGPR is a 32 bit byte offset from SH_MEM_HIDDEN_PRIVATE_BASE; /// to base of memory for scratch for this dispatch. This is the same offset; /// used in computing the Scratch Segment Buffer base address. The value of; /// Scratch Wave Offset must be added by the kernel code and moved to; /// SGPRn-4 for use as the FLAT SCRATCH BASE in flat memory instructions.; ///; /// The second SGPR is 32 bit byte size of a single work-item's scratch; /// memory usage. This is directly loaded from the dispatch packet Private; /// Segment Byte Size and rounded up to a multiple of DWORD.; ///; /// \todo [Does CP need to round this to >4 byte alignment?]; ///; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDKernelCodeT.h:3226,avoid,avoids,3226,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDKernelCodeT.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDKernelCodeT.h,1,['avoid'],['avoids']
Safety,"l not compute an adler32 check value. windowBits can also be greater than 15 for optional gzip encoding. Add; 16 to windowBits to write a simple gzip header and trailer around the; compressed data instead of a zlib wrapper. The gzip header will have no; file name, no extra data, no comment, no modification time (set to zero), no; header crc, and the operating system will be set to 255 (unknown). If a; gzip stream is being written, strm->adler is a crc32 instead of an adler32. The memLevel parameter specifies how much memory should be allocated; for the internal compression state. memLevel=1 uses minimum memory but is; slow and reduces compression ratio; memLevel=9 uses maximum memory for; optimal speed. The default value is 8. See zconf.h for total memory usage; as a function of windowBits and memLevel. The strategy parameter is used to tune the compression algorithm. Use the; value Z_DEFAULT_STRATEGY for normal data, Z_FILTERED for data produced by a; filter (or predictor), Z_HUFFMAN_ONLY to force Huffman encoding only (no; string match), or Z_RLE to limit match distances to one (run-length; encoding). Filtered data consists mostly of small values with a somewhat; random distribution. In this case, the compression algorithm is tuned to; compress them better. The effect of Z_FILTERED is to force more Huffman; coding and less string matching; it is somewhat intermediate between; Z_DEFAULT_STRATEGY and Z_HUFFMAN_ONLY. Z_RLE is designed to be almost as; fast as Z_HUFFMAN_ONLY, but give better compression for PNG image data. The; strategy parameter only affects the compression ratio but not the; correctness of the compressed output even if it is not set appropriately.; Z_FIXED prevents the use of dynamic Huffman codes, allowing for a simpler; decoder for special applications. deflateInit2 returns Z_OK if success, Z_MEM_ERROR if there was not enough; memory, Z_STREAM_ERROR if any parameter is invalid (such as an invalid; method), or Z_VERSION_ERROR if the zlib library ve",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:2345,predict,predictor,2345,builtins/zlib/zlib.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h,1,['predict'],['predictor']
Safety,"l not compute an adler32 check value. windowBits can also be greater than 15 for optional gzip encoding. Add; 16 to windowBits to write a simple gzip header and trailer around the; compressed data instead of a zlib wrapper. The gzip header will have no; file name, no extra data, no comment, no modification time (set to zero),; no header crc, and the operating system will be set to 255 (unknown). If a; gzip stream is being written, strm->adler is a crc32 instead of an adler32. The memLevel parameter specifies how much memory should be allocated; for the internal compression state. memLevel=1 uses minimum memory but; is slow and reduces compression ratio; memLevel=9 uses maximum memory; for optimal speed. The default value is 8. See zconf.h for total memory; usage as a function of windowBits and memLevel. The strategy parameter is used to tune the compression algorithm. Use the; value Z_DEFAULT_STRATEGY for normal data, Z_FILTERED for data produced by a; filter (or predictor), Z_HUFFMAN_ONLY to force Huffman encoding only (no; string match), or Z_RLE to limit match distances to one (run-length; encoding). Filtered data consists mostly of small values with a somewhat; random distribution. In this case, the compression algorithm is tuned to; compress them better. The effect of Z_FILTERED is to force more Huffman; coding and less string matching; it is somewhat intermediate between; Z_DEFAULT and Z_HUFFMAN_ONLY. Z_RLE is designed to be almost as fast as; Z_HUFFMAN_ONLY, but give better compression for PNG image data. The strategy; parameter only affects the compression ratio but not the correctness of the; compressed output even if it is not set appropriately. Z_FIXED prevents the; use of dynamic Huffman codes, allowing for a simpler decoder for special; applications. deflateInit2 returns Z_OK if success, Z_MEM_ERROR if there was not enough; memory, Z_STREAM_ERROR if a parameter is invalid (such as an invalid; method). msg is set to null if there is no error message. def",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:2345,predict,predictor,2345,graf2d/asimage/src/libAfterImage/zlib/zlib.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h,1,['predict'],['predictor']
Safety,"l variable, if it is true, first the source spectrum; /// is replaced by new spectrum calculated using Markov; /// chains method.; /// - averWindow-averaging window of searched peaks, for details; /// we refer to manual (applies only for Markov method); ///; /// ### Peaks searching; ///; /// Goal: to identify automatically the peaks in spectrum with the presence of the; /// continuous background, one-fold coincidences (ridges) and statistical; /// fluctuations - noise.; ///; /// The common problems connected with correct peak identification in two-dimensional coincidence spectra are; ///; /// - non-sensitivity to noise, i.e., only statistically relevant peaks should be identified; /// - non-sensitivity of the algorithm to continuous background; /// - non-sensitivity to one-fold coincidences (coincidences peak - background in both dimensions) and their crossings; /// - ability to identify peaks close to the edges of the spectrum region. Usually peak finders fail to detect them; /// - resolution, decomposition of doublets and multiplets. The algorithm should be able to recognise close positioned peaks.; /// - ability to identify peaks with different sigma; ///; /// #### References:; ///; /// [1] M.A. Mariscotti: A method for identification of peaks in the presence of; /// background and its application to spectrum analysis. NIM 50 (1967), 309-320.; ///; /// [2] M. Morhac;, J. Kliman, V. Matouoek, M. Veselsky, I. Turzo.:Identification; /// of peaks in multidimensional coincidence gamma-ray spectra. NIM, A443 (2000); /// 108-125.; ///; /// [3] Z.K. Silagadze, A new algorithm for automatic photopeak searches. NIM A 376; /// (1996), 451.; ///; /// ### Examples of peak searching method; ///; /// SearchHighRes function provides users with the possibility; /// to vary the input parameters and with the access to the output deconvolved data; /// in the destination spectrum. Based on the output data one can tune the; /// parameters.; ///; /// ### Example 8 - Src.C; ///; /// Beg",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/spectrum/src/TSpectrum2.cxx:2028,detect,detect,2028,hist/spectrum/src/TSpectrum2.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/spectrum/src/TSpectrum2.cxx,1,['detect'],['detect']
Safety,"le (number of loop iterations). Immediate; /// members that represent sub-loops will already have been visited and; /// packaged into a pseudo-node.; ///; /// Distributing mass in a loop is a reverse-post-order traversal through; /// the loop. Start by assigning full mass to the Loop header. For each; /// node in the loop:; ///; /// - Fetch and categorize the weight distribution for its successors.; /// If this is a packaged-subloop, the weight distribution is stored; /// in \a LoopData::Exits. Otherwise, fetch it from; /// BranchProbabilityInfo.; ///; /// - Each successor is categorized as \a Weight::Local, a local edge; /// within the current loop, \a Weight::Backedge, a backedge to the; /// loop header, or \a Weight::Exit, any successor outside the loop.; /// The weight, the successor, and its category are stored in \a; /// Distribution. There can be multiple edges to each successor.; ///; /// - If there's a backedge to a non-header, there's an irreducible SCC.; /// The usual flow is temporarily aborted. \a; /// computeIrreducibleMass() finds the irreducible SCCs within the; /// loop, packages them up, and restarts the flow.; ///; /// - Normalize the distribution: scale weights down so that their sum; /// is 32-bits, and coalesce multiple edges to the same node.; ///; /// - Distribute the mass accordingly, dithering to minimize mass loss,; /// as described in \a distributeMass().; ///; /// In the case of irreducible loops, instead of a single loop header,; /// there will be several. The computation of backedge masses is similar; /// but instead of having a single backedge mass, there will be one; /// backedge per loop header. In these cases, each backedge will carry; /// a mass proportional to the edge weights along the corresponding; /// path.; ///; /// At the end of propagation, the full mass assigned to the loop will be; /// distributed among the loop headers proportionally according to the; /// mass flowing through their backedges.; ///; /// Finally, calculat",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/BlockFrequencyInfoImpl.h:3893,abort,aborted,3893,interpreter/llvm-project/llvm/include/llvm/Analysis/BlockFrequencyInfoImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/BlockFrequencyInfoImpl.h,1,['abort'],['aborted']
Safety,"led if the library is; // 'only' dlclosed.; // On Ubuntu the linker strips the unused libraries. Eventhough; // stressHistogram is explicitly linked against libNet, it is not; // retained and thus is loaded only as needed in the middle part of; // the execution. Concretely this also means that it is loaded; // *after* the construction of the TApplication object and thus; // after the registration (atexit) of the EndOfProcessCleanups; // routine. Consequently, after the end of main, libNet is; // unloaded before EndOfProcessCleanups is called. When; // EndOfProcessCleanups is executed it indirectly needs the TClass; // for TSocket and its search will use resources that have already; // been unloaded (technically the function static in TUnixSystem's; // DynamicPath and the dictionary from libNet).; // Similarly, the ordering (before this commit) was broken in the; // following case:; // TApplication creation (EndOfProcessCleanups registration); // load UserLibrary; // create TFile; // Append UserObject to TFile; // and after the end of main the order of execution was; // unload UserLibrary; // call EndOfProcessCleanups; // Write the TFile; // attempt to write the user object.; // ....; // where what we need is to have the files closen/written before; // the unloading of the library.; // To solve the problem we now register an atexit function for; // every dictionary thus making sure there is at least one executed; // before the first library tear down after main.; // If atexit is called directly within a library's code, the; // function will called *either* when the library is 'dlclose'd or; // after then end of main (whichever comes first). We do *not*; // want the files to be closed whenever a library is unloaded via; // dlclose. To avoid this, we add the function (CallCloseFiles); // from the dictionary indirectly (via ROOT::RegisterModule). In; // this case the function will only only be called either when; // libCore is 'dlclose'd or right after the end of main.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:2119,avoid,avoid,2119,core/base/src/TROOT.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx,1,['avoid'],['avoid']
Safety,"led register is VGPR1 etc.; disabled registers do not have an VGPR; /// number.; ///; /// VGPR register initial state is defined as follows:; ///; /// Work-Item Id X (always initialized):; /// Number of registers: 1. 32 bit work item id in X dimension of work-group; /// for wavefront lane.; ///; /// Work-Item Id X (enable_vgpr_workitem_id > 0):; /// Number of registers: 1. 32 bit work item id in Y dimension of work-group; /// for wavefront lane.; ///; /// Work-Item Id X (enable_vgpr_workitem_id > 0):; /// Number of registers: 1. 32 bit work item id in Z dimension of work-group; /// for wavefront lane.; ///; ///; /// The setting of registers is being done by existing GPU hardware as follows:; /// 1) SGPRs before the Work-Group Ids are set by CP using the 16 User Data; /// registers.; /// 2) Work-group Id registers X, Y, Z are set by SPI which supports any; /// combination including none.; /// 3) Scratch Wave Offset is also set by SPI which is why its value cannot; /// be added into the value Flat Scratch Offset which would avoid the; /// Finalizer generated prolog having to do the add.; /// 4) The VGPRs are set by SPI which only supports specifying either (X),; /// (X, Y) or (X, Y, Z).; ///; /// Flat Scratch Dispatch Offset and Flat Scratch Size are adjacent SGRRs so; /// they can be moved as a 64 bit value to the hardware required SGPRn-3 and; /// SGPRn-4 respectively using the Finalizer ?FLAT_SCRATCH? Register.; ///; /// The global segment can be accessed either using flat operations or buffer; /// operations. If buffer operations are used then the Global Buffer used to; /// access HSAIL Global/Readonly/Kernarg (which are combine) segments using a; /// segment address is not passed into the kernel code by CP since its base; /// address is always 0. Instead the Finalizer generates prolog code to; /// initialize 4 SGPRs with a V# that has the following properties, and then; /// uses that in the buffer instructions:; /// - base address of 0; /// - no swizzle; /// - AT",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDKernelCodeT.h:8803,avoid,avoid,8803,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDKernelCodeT.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDKernelCodeT.h,1,['avoid'],['avoid']
Safety,"lel.; /// This is exclusive to ROOT::TThreadExecutor and not any other ROOT::TExecutorCRTP-derived classes.\n; ///; /// An integer can be passed as the fourth argument indicating the number of chunks we want to divide our work in.; /// This may be useful to avoid the overhead introduced when running really short tasks.; ///; /// #### Examples:; /// ~~~{.cpp}; /// root[] ROOT::TThreadExecutor pool; auto ten = pool.MapReduce([]() { return 1; }, 10, [](const std::vector<int> &v) { return std::accumulate(v.begin(), v.end(), 0); }); /// root[] ROOT::TThreadExecutor pool; auto hist = pool.MapReduce(CreateAndFillHists, 10, PoolUtils::ReduceObjects);; /// ~~~; ///; //////////////////////////////////////////////////////////////////////////; /*; VERY IMPORTANT NOTE ABOUT WORK ISOLATION. We enclose the parallel_for and parallel_reduce invocations in a; task_arena::isolate because we want to prevent a thread to start executing an; outer task when the task it's running spawned subtasks, e.g. with a parallel_for,; and is waiting on inner tasks to be completed. While this change has a negligible performance impact, it has benefits for; several applications, for example big parallelised HEP frameworks and; RDataFrame analyses.; - For HEP Frameworks, without work isolation, it can happen that a huge; framework task is pulled by a yielding ROOT task.; This causes to delay the processing of the event which is interrupted by the; long task.; For example, work isolation avoids that during the wait due to the parallel; flushing of baskets, a very long simulation task is pulled in by the idle task.; - For RDataFrame analyses we want to guarantee that each entry is processed from; the beginning to the end without TBB interrupting it to pull in other work items.; As a corollary, the usage of ROOT (or TBB in work isolation mode) in actions; and transformations guarantee that each entry is processed from the beginning to; the end without being interrupted by the processing of outer tasks.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/imt/src/TThreadExecutor.cxx:4567,avoid,avoids,4567,core/imt/src/TThreadExecutor.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/imt/src/TThreadExecutor.cxx,1,['avoid'],['avoids']
Safety,"les of the rotated axes:. ~~~; Double_t tx,ty,tz,px,py,pz;; tx= a.ThetaX();; ...; pz= a.PhiZ();; ~~~. ### Setting The Rotations; The member function SetToIdentity() will set the rotation object; to the identity (no rotation). With a minor caveat, the Euler angles of the rotation may be set using; SetXEulerAngles() or individually set with SetXPhi(),; SetXTheta(), and SetXPsi(). These routines set the Euler; angles using the X-convention which is defined by a rotation about the Z-axis,; about the new X-axis, and about the new Z-axis. This is the convention used; in Landau and Lifshitz, Goldstein and other common physics texts. The; Y-convention Euler angles can be set with SetYEulerAngles(),; SetYPhi(), SetYTheta(), and SetYPsi(). The caveat; is that Euler angles usually define the rotation of the new coordinate system; with respect to the original system, however, the TRotation class specifies; the rotation of the object in the original system (an active rotation). To; recover the usual Euler rotations (ie. rotate the system not the object), you; must take the inverse of the rotation. The member functions SetXAxis(), SetYAxis(), and; SetZAxis() will create a rotation which rotates the requested axis; of the object to be parallel to a vector. If used with one argument, the; rotation about that axis is arbitrary. If used with two arguments, the; second variable defines the XY, YZ, or ZX; respectively. ### Inverse rotation. ~~~; TRotation a,b;; ...; b = a.Inverse(); // b is inverse of a, a is unchanged; b = a.Invert(); // invert a and set b = a; ~~~. ### Compound Rotations; The operator * has been implemented in a way that follows the; mathematical notation of a product of the two matrices which describe the; two consecutive rotations. Therefore the second rotation should be placed; first:. ~~~; r = r2 * r1;; ~~~. ### Rotation of TVector3; The TRotation class provides an operator * which allows to express; a rotation of a TVector3 analog to the mathematical notation. ~~",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/physics/src/TRotation.cxx:3529,recover,recover,3529,math/physics/src/TRotation.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/physics/src/TRotation.cxx,1,['recover'],['recover']
Safety,"licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TGeoVolume; \ingroup Shapes_classes. TGeoVolume, TGeoVolumeMulti, TGeoVolumeAssembly are the volume classes. Volumes are the basic objects used in building the geometrical hierarchy.; They represent unpositioned objects but store all information about the; placement of the other volumes they may contain. Therefore a volume can; be replicated several times in the geometry. In order to create a volume, one; has to put together a shape and a medium which are already defined. Volumes; have to be named by users at creation time. Every different name may represent a; an unique volume object, but may also represent more general a family (class); of volume objects having the same shape type and medium, but possibly; different shape parameters. It is the user's task to provide different names; for different volume families in order to avoid ambiguities at tracking time.; A generic family rather than a single volume is created only in two cases :; when a generic shape is provided to the volume constructor or when a division; operation is applied. Each volume in the geometry stores an unique; ID corresponding to its family. In order to ease-up their creation, the manager; class is providing an API that allows making a shape and a volume in a single step. Volumes are objects that can be visualized, therefore having visibility,; colour, line and fill attributes that can be defined or modified any time after; the volume creation. It is advisable however to define these properties just; after the first creation of a volume namespace, since in case of volume families; any new member created by the modeler inherits these properties. In order to provide navigation features, volumes have to be able to find; the proper container of any point defined in the local reference frame. This; can be the vo",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoVolume.cxx:1325,avoid,avoid,1325,geom/geom/src/TGeoVolume.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoVolume.cxx,1,['avoid'],['avoid']
Safety,"ll the bin is; very slow. The alternative is to divide the histogram into virtual rectangular regions; called ""cells"". Each cell stores the pointers of the bins intersecting it.; When a coordinate is to be filled, the method finds which cell the coordinate; falls into. Since the cells are rectangular, this can be done very quickly.; It then only loops over the bins associated with that cell and calls `IsInside()`; only on that bins. This reduces considerably the number of bins on which `IsInside()`; is called and therefore speed up by a huge factor the filling compare to the brute force; approach where `IsInside()` is called for all bins. The addition of bins to the appropriate cells is done when the bin is added; to the histogram. To do this, `AddBin()` calls the; `AddBinToPartition()` method.; This method adds the input bin to the partitioning matrix. The number of partition cells per axis can be specified in the constructor.; If it is not specified, the default value of 25 along each axis will be; assigned. This value was chosen because it is small enough to avoid slowing; down AddBin(), while being large enough to enhance Fill() by a considerable; amount. Regardless of how it is initialized at construction time, it can be; changed later with the `ChangePartition()` method.; `ChangePartition()` deletes the; old partition matrix and generates a new one with the specified number of cells; on each axis. The optimum number of partition cells per axis changes with the number of; times `Fill()` will be called. Although partitioning greatly speeds up; filling, it also adds a constant time delay into the code. When `Fill()`; is to be called many times, it is more efficient to divide the histogram into; a large number cells. However, if the histogram is to be filled only a few; times, it is better to divide into a small number of cells.; */; ////////////////////////////////////////////////////////////////////////////////; /// Default Constructor. No boundaries specified.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2Poly.cxx:4598,avoid,avoid,4598,hist/hist/src/TH2Poly.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2Poly.cxx,1,['avoid'],['avoid']
Safety,"lowed. Considering that a new/delete costs about 70 mus on a 300 MHz HP,; O(10^9) new/deletes will save about 19 hours. ### NOTE 1. C/C++ offers the possibility of allocating and deleting memory.; Forgetting to delete allocated memory is a programming error called a; ""memory leak"", i.e. the memory of your process grows and eventually; your program crashes. Even if you *always* delete the allocated; memory, the recovered space may not be efficiently reused. The; process knows that there are portions of free memory, but when you; allocate it again, a fresh piece of memory is grabbed. Your program; is free from semantic errors, but the total memory of your process; still grows, because your program's memory is full of ""holes"" which; reduce the efficiency of memory access; this is called ""memory; fragmentation"". Moreover new / delete are expensive operations in; terms of CPU time. Without entering into technical details, TClonesArray allows you to; ""reuse"" the same portion of memory for new/delete avoiding memory; fragmentation and memory growth and improving the performance by; orders of magnitude. Every time the memory of the TClonesArray has; to be reused, the Clear() method is used. To provide its benefits,; each TClonesArray must be allocated *once* per process and disposed; of (deleted) *only when not needed any more*. So a job should see *only one* deletion for each TClonesArray,; which should be Clear()ed during the job several times. Deleting a; TClonesArray is a double waste. Not only you do not avoid memory; fragmentation, but you worsen it because the TClonesArray itself; is a rather heavy structure, and there is quite some code in the; destructor, so you have more memory fragmentation and slower code. ### NOTE 2. When investigating misuse of TClonesArray, please make sure of the following:. - Use Clear() or Clear(""C"") instead of Delete(). This will improve; program execution time.; - TClonesArray object classes containing pointers allocate memory.; To avoid ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx:3159,avoid,avoiding,3159,core/cont/src/TClonesArray.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx,1,['avoid'],['avoiding']
Safety,"lways be handled by libpng and; * will never be stored in the unknown chunk list. Known chunks listed to; * png_set_keep_unknown_chunks will have no effect. If it is set then known; * chunks listed with a keep other than AS_DEFAULT will *never* be processed; * by libpng, in addition critical chunks must either be processed by the; * callback or saved.; *; * The IHDR and IEND chunks must not be listed. Because this turns off the; * default handling for chunks that would otherwise be recognized the; * behavior of libpng transformations may well become incorrect!; *; * WRITE:; * When writing chunks the options only apply to the chunks specified by; * png_set_unknown_chunks (below), libpng will *always* write known chunks; * required by png_set_ calls and will always write the core critical chunks; * (as required for PLTE).; *; * Each chunk in the png_set_unknown_chunks list is looked up in the; * png_set_keep_unknown_chunks list to find the keep setting, this is then; * interpreted as follows:; *; * PNG_HANDLE_CHUNK_AS_DEFAULT:; * Write safe-to-copy chunks and write other chunks if the global; * default is set to _ALWAYS, otherwise don't write this chunk.; * PNG_HANDLE_CHUNK_NEVER:; * Do not write the chunk.; * PNG_HANDLE_CHUNK_IF_SAFE:; * Write the chunk if it is safe-to-copy, otherwise do not write it.; * PNG_HANDLE_CHUNK_ALWAYS:; * Write the chunk.; *; * Note that the default behavior is effectively the opposite of the read case -; * in read unknown chunks are not stored by default, in write they are written; * by default. Also the behavior of PNG_HANDLE_CHUNK_IF_SAFE is very different; * - on write the safe-to-copy bit is checked, on read the critical bit is; * checked and on read if the chunk is critical an error will be raised.; *; * num_chunks:; * ===========; * If num_chunks is positive, then the ""keep"" parameter specifies the manner; * for handling only those chunks appearing in the chunk_list array,; * otherwise the chunk list array is ignored.; *; * If num_ch",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:3352,safe,safe-to-copy,3352,graf2d/asimage/src/libAfterImage/libpng/png.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h,1,['safe'],['safe-to-copy']
Safety,"n addition critical chunks must either be processed by the; * callback or saved.; *; * The IHDR and IEND chunks must not be listed. Because this turns off the; * default handling for chunks that would otherwise be recognized the; * behavior of libpng transformations may well become incorrect!; *; * WRITE:; * When writing chunks the options only apply to the chunks specified by; * png_set_unknown_chunks (below), libpng will *always* write known chunks; * required by png_set_ calls and will always write the core critical chunks; * (as required for PLTE).; *; * Each chunk in the png_set_unknown_chunks list is looked up in the; * png_set_keep_unknown_chunks list to find the keep setting, this is then; * interpreted as follows:; *; * PNG_HANDLE_CHUNK_AS_DEFAULT:; * Write safe-to-copy chunks and write other chunks if the global; * default is set to _ALWAYS, otherwise don't write this chunk.; * PNG_HANDLE_CHUNK_NEVER:; * Do not write the chunk.; * PNG_HANDLE_CHUNK_IF_SAFE:; * Write the chunk if it is safe-to-copy, otherwise do not write it.; * PNG_HANDLE_CHUNK_ALWAYS:; * Write the chunk.; *; * Note that the default behavior is effectively the opposite of the read case -; * in read unknown chunks are not stored by default, in write they are written; * by default. Also the behavior of PNG_HANDLE_CHUNK_IF_SAFE is very different; * - on write the safe-to-copy bit is checked, on read the critical bit is; * checked and on read if the chunk is critical an error will be raised.; *; * num_chunks:; * ===========; * If num_chunks is positive, then the ""keep"" parameter specifies the manner; * for handling only those chunks appearing in the chunk_list array,; * otherwise the chunk list array is ignored.; *; * If num_chunks is 0 the ""keep"" parameter specifies the default behavior for; * unknown chunks, as described above.; *; * If num_chunks is negative, then the ""keep"" parameter specifies the manner; * for handling all unknown chunks plus all chunks recognized by libpng; * except for t",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:3584,safe,safe-to-copy,3584,graf2d/asimage/src/libAfterImage/libpng/png.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h,1,['safe'],['safe-to-copy']
Safety,"n and; /// widely used contexts.; ///; /// The `seq(A, B)` function produces a sequence of values from `A` to up to; /// (but not including) `B`, i.e., [`A`, `B`), that can be safely iterated over.; /// `seq` supports both integral (e.g., `int`, `char`, `uint32_t`) and enum; /// types. `seq_inclusive(A, B)` produces a sequence of values from `A` to `B`,; /// including `B`.; ///; /// Examples with integral types:; /// ```; /// for (int x : seq(0, 3)); /// outs() << x << "" "";; /// ```; ///; /// Prints: `0 1 2 `.; ///; /// ```; /// for (int x : seq_inclusive(0, 3)); /// outs() << x << "" "";; /// ```; ///; /// Prints: `0 1 2 3 `.; ///; /// Similar to `seq` and `seq_inclusive`, the `enum_seq` and; /// `enum_seq_inclusive` functions produce sequences of enum values that can be; /// iterated over.; /// To enable iteration with enum types, you need to either mark enums as safe; /// to iterate on by specializing `enum_iteration_traits`, or opt into; /// potentially unsafe iteration at every callsite by passing; /// `force_iteration_on_noniterable_enum`.; ///; /// Examples with enum types:; /// ```; /// namespace X {; /// enum class MyEnum : unsigned {A = 0, B, C};; /// } // namespace X; ///; /// template <> struct enum_iteration_traits<X::MyEnum> {; /// static contexpr bool is_iterable = true;; /// };; ///; /// class MyClass {; /// public:; /// enum Safe { D = 3, E, F };; /// enum MaybeUnsafe { G = 1, H = 2, I = 4 };; /// };; ///; /// template <> struct enum_iteration_traits<MyClass::Safe> {; /// static contexpr bool is_iterable = true;; /// };; /// ```; ///; /// ```; /// for (auto v : enum_seq(MyClass::Safe::D, MyClass::Safe::F)); /// outs() << int(v) << "" "";; /// ```; ///; /// Prints: `3 4 `.; ///; /// ```; /// for (auto v : enum_seq(MyClass::MaybeUnsafe::H, MyClass::MaybeUnsafe::I,; /// force_iteration_on_noniterable_enum)); /// outs() << int(v) << "" "";; /// ```; ///; /// Prints: `2 3 `.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Sequence.h:1898,Safe,Safe,1898,interpreter/llvm-project/llvm/include/llvm/ADT/Sequence.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Sequence.h,4,['Safe'],['Safe']
Safety,"n in that block. This is because the standard RPO; /// algorithm does not track what things have the same value number, it only; /// tracks what the value number of a given operation is (the mapping is; /// operation -> value number). Thus, when a value number of an operation; /// changes, it must reprocess everything to ensure all uses of a value number; /// get updated properly. In constrast, the sparse algorithm we use *also*; /// tracks what operations have a given value number (IE it also tracks the; /// reverse mapping from value number -> operations with that value number), so; /// that it only needs to reprocess the instructions that are affected when; /// something's value number changes. The vast majority of complexity and code; /// in this file is devoted to tracking what value numbers could change for what; /// instructions when various things happen. The rest of the algorithm is; /// devoted to performing symbolic evaluation, forward propagation, and; /// simplification of operations based on the value numbers deduced so far; ///; /// In order to make the GVN mostly-complete, we use a technique derived from; /// ""Detection of Redundant Expressions: A Complete and Polynomial-time; /// Algorithm in SSA"" by R.R. Pai. The source of incompleteness in most SSA; /// based GVN algorithms is related to their inability to detect equivalence; /// between phi of ops (IE phi(a+b, c+d)) and op of phis (phi(a,c) + phi(b, d)).; /// We resolve this issue by generating the equivalent ""phi of ops"" form for; /// each op of phis we see, in a way that only takes polynomial time to resolve.; ///; /// We also do not perform elimination by using any published algorithm. All; /// published algorithms are O(Instructions). Instead, we use a technique that; /// is O(number of operations with the same value number), enabling us to skip; /// trying to eliminate things that have unique value numbers.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/NewGVN.cpp:2469,Detect,Detection,2469,interpreter/llvm-project/llvm/lib/Transforms/Scalar/NewGVN.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/NewGVN.cpp,3,"['Detect', 'Redund', 'detect']","['Detection', 'Redundant', 'detect']"
Safety,"napshot](classROOT_1_1RDF_1_1RInterface.html#a233b7723e498967f4340705d2c4db7f8). \warning Note that in multi-thread event loops the values of `rdfentry_` _do not_ correspond to what would be the entry numbers; of a TChain constructed over the same set of ROOT files, as the entries are processed in an unspecified order. \anchor jitting; ### Just-in-time compilation: column type inference and explicit declaration of column types; C++ is a statically typed language: all types must be known at compile-time. This includes the types of the TTree; branches we want to work on. For filters, defined columns and some of the actions, **column types are deduced from the; signature** of the relevant filter function/temporary column expression/action function:; ~~~{.cpp}; // here b1 is deduced to be `int` and b2 to be `double`; df.Filter([](int x, double y) { return x > 0 && y < 0.; }, {""b1"", ""b2""});; ~~~; If we specify an incorrect type for one of the columns, an exception with an informative message will be thrown at; runtime, when the column value is actually read from the dataset: RDataFrame detects type mismatches. The same would; happen if we swapped the order of ""b1"" and ""b2"" in the column list passed to Filter(). Certain actions, on the other hand, do not take a function as argument (e.g. Histo1D()), so we cannot deduce the type of; the column at compile-time. In this case **RDataFrame infers the type of the column** from the TTree itself. This; is why we never needed to specify the column types for all actions in the above snippets. When the column type is not a common one such as `int`, `double`, `char` or `float` it is nonetheless good practice to; specify it as a template parameter to the action itself, like this:; ~~~{.cpp}; df.Histo1D(""b1""); // OK, the type of ""b1"" is deduced at runtime; df.Min<MyNumber_t>(""myObject""); // OK, ""myObject"" is deduced to be of type `MyNumber_t`; ~~~. Deducing types at runtime requires the just-in-time compilation of the relevant actions, ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx:65698,detect,detects,65698,tree/dataframe/src/RDataFrame.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx,1,['detect'],['detects']
Safety,"nated strings and std::string. In terms of; * performance, the former is to be preferred.; *; * If the caller needs to multiplex input and output to/from several pipes, the; * class provides the poll() method which allows to block until an event occurs; * on any of the polled pipes.; *; * After the BidirMMapPipe is closed, no further operations may be performed on; * that object, save for the destructor which may still be called.; *; * If the BidirMMapPipe has not properly been closed, the destructor will call; * close. However, the exit code of the child is lost in that case.; *; * Closing the object causes the mmapped memory to be unmapped and the two; * pipes to be closed. We also install an atexit handler in the process of; * creating BidirMMapPipes. This ensures that when the current process; * terminates, a SIGTERM signal is sent to the child processes created for all; * unclosed pipes to avoid leaving zombie processes in the OS's process table.; *; * BidirMMapPipe creation, closing and destruction are thread safe. If the; * BidirMMapPipe is used in more than one thread, the other operations have to; * be protected with a mutex (or something similar), though.; *; * End of file (other end closed its pipe, or died) is indicated with the eof(); * method, serious I/O errors set a flags (bad(), fail()), and also throw; * exceptions. For normal read/write operations, they can be suppressed (i.e.; * error reporting only using flags) with a constructor argument.; *; * Technicalities:; * - there is a pool of mmapped pages, half the pages are allocated to the; * parent process, half to the child; * - when one side has accumulated enough data (or a flush forces dirty pages; * out to the other end), it sends these pages to the other end by writing a; * byte containing the page number into the pipe; * - the other end (which has the pages mmapped, too) reads the page number(s); * and puts the corresponding pages on its busy list; * - as the other ends reads, it frees busy pa",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h:2953,safe,safe,2953,roofit/roofitcore/src/BidirMMapPipe.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h,1,['safe'],['safe']
Safety,"ndianness> &HBuilder,; /// const SimpleStruct &Value) {; /// HBuilder.add(Value.c);; /// HBuilder.add(Value.i);; /// }; /// ```; ///; /// To avoid endianness issues, specializations of `addHash` should; /// generally rely on exising `add`, `addRange`, and `addRangeElements`; /// functions. If directly using `update`, an implementation must correctly; /// handle endianness.; ///; /// ```; /// struct __attribute__ ((packed)) StructWithFastHash {; /// int I;; /// char C;; ///; /// // If possible, we want to hash both `I` and `C` in a single; /// // `update` call for performance concerns.; /// template <typename HasherT, llvm::endianness Endianness>; /// friend void addHash(HashBuilder<HasherT, Endianness> &HBuilder,; /// const StructWithFastHash &Value) {; /// if (Endianness == llvm::endianness::native) {; /// HBuilder.update(ArrayRef(; /// reinterpret_cast<const uint8_t *>(&Value), sizeof(Value)));; /// } else {; /// // Rely on existing `add` methods to handle endianness.; /// HBuilder.add(Value.I);; /// HBuilder.add(Value.C);; /// }; /// }; /// };; /// ```; ///; /// To avoid collisions, specialization of `addHash` for variable-size; /// types must take the size into account.; ///; /// For example:; /// ```; /// struct CustomContainer {; /// private:; /// size_t Size;; /// int Elements[100];; ///; /// public:; /// CustomContainer(size_t Size) : Size(Size) {; /// for (size_t I = 0; I != Size; ++I); /// Elements[I] = I;; /// }; /// template <typename HasherT, llvm::endianness Endianness>; /// friend void addHash(HashBuilder<HasherT, Endianness> &HBuilder,; /// const CustomContainer &Value) {; /// if (Endianness == llvm::endianness::native) {; /// HBuilder.update(ArrayRef(; /// reinterpret_cast<const uint8_t *>(&Value.Size),; /// sizeof(Value.Size) + Value.Size * sizeof(Value.Elements[0])));; /// } else {; /// // `addRange` will take care of encoding the size.; /// HBuilder.addRange(&Value.Elements[0], &Value.Elements[0] +; /// Value.Size);; /// }; /// }; /// };; /// ```",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h:1649,avoid,avoid,1649,interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,1,['avoid'],['avoid']
Safety,"nfo->unread_marker is treated as a marker appearing before; * the current data-source input point; usually it should be reset to zero; * before returning.; * Returns FALSE if suspension is required.; *; * This implementation is substantially constrained by wanting to treat the; * input as a data stream; this means we can't back up. Therefore, we have; * only the following actions to work with:; * 1. Simply discard the marker and let the entropy decoder resume at next; * byte of file.; * 2. Read forward until we find another marker, discarding intervening; * data. (In theory we could look ahead within the current bufferload,; * without having to discard data if we don't find the desired marker.; * This idea is not implemented here, in part because it makes behavior; * dependent on buffer size and chance buffer-boundary positions.); * 3. Leave the marker unread (by failing to zero cinfo->unread_marker).; * This will cause the entropy decoder to process an empty data segment,; * inserting dummy zeroes, and then we will reprocess the marker.; *; * #2 is appropriate if we think the desired marker lies ahead, while #3 is; * appropriate if the found marker is a future restart marker (indicating; * that we have missed the desired restart marker, probably because it got; * corrupted).; * We apply #2 or #3 if the found marker is a restart marker no more than; * two counts behind or ahead of the expected one. We also apply #2 if the; * found marker is not a legal JPEG marker code (it's certainly bogus data).; * If the found marker is a restart marker more than 2 counts away, we do #1; * (too much risk that the marker is erroneous; with luck we will be able to; * resync at some future point).; * For any valid non-restart JPEG marker, we apply #3. This keeps us from; * overrunning the end of a scan. An implementation limited to single-scan; * files might find it better to apply #2 for markers other than EOI, since; * any other marker would have to be bogus data in that case.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c:2500,risk,risk,2500,graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c,1,['risk'],['risk']
Safety,"nosecond intervals since 00:00:00.00,; 15 October 1582 (the date of Gregorian reform to the; Christian calendar). The version number is multiplexed in the 4 most significant; bits of the 'fTimeHiAndVersion' field. There are two defined; versions:; ~~~ {.cpp}; MSB <---; Version 4-Bit Code Description; ------------------------------------------------------------; | 1 0 0 0 1 DCE version, as specified herein.; | 2 0 0 1 0 DCE Security version, with; | embedded POSIX UIDs.; | 3 0 0 1 1 node id is a random value; ------------------------------------------------------------; ~~~. ## Clock Sequence. The clock sequence value must be changed whenever:. The UUID generator detects that the local value of UTC; has gone backward; this may be due to re-syncing of the system; clock. While a node is operational, the UUID service always saves; the last UTC used to create a UUID. Each time a new UUID; is created, the current UTC is compared to the saved value; and if either the current value is less or the saved value; was lost, then the clock sequence is incremented modulo; 16,384, thus avoiding production of duplicated UUIDs. The clock sequence must be initialized to a random number; to minimize the correlation across system. This provides; maximum protection against node identifiers that may move; or switch from system to system rapidly. ## Clock Adjustment. UUIDs may be created at a rate greater than the system clock; resolution. Therefore, the system must also maintain an; adjustment value to be added to the lower-order bits of the; time. Logically, each time the system clock ticks, the; adjustment value is cleared. Every time a UUID is generated,; the current adjustment value is read and incremented, and; then added to the UTC time field of the UUID. ## Clock Overrun. The 100-nanosecond granularity of time should prove sufficient; even for bursts of UUID production in the next generation of; high-performance multiprocessors. If a system overruns the; clock adjustment by requesti",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUUID.cxx:3370,avoid,avoiding,3370,core/base/src/TUUID.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUUID.cxx,1,['avoid'],['avoiding']
Safety,"ns.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This pass do two things:; /// - it expands a branch or jump instruction into a long branch if its offset; /// is too large to fit into its immediate field,; /// - it inserts nops to prevent forbidden slot hazards.; ///; /// The reason why this pass combines these two tasks is that one of these two; /// tasks can break the result of the previous one.; ///; /// Example of that is a situation where at first, no branch should be expanded,; /// but after adding at least one nop somewhere in the code to prevent a; /// forbidden slot hazard, offset of some branches may go out of range. In that; /// case it is necessary to check again if there is some branch that needs; /// expansion. On the other hand, expanding some branch may cause a control; /// transfer instruction to appear in the forbidden slot, which is a hazard that; /// should be fixed. This pass alternates between this two tasks untill no; /// changes are made. Only then we can be sure that all branches are expanded; /// properly, and no hazard situations exist.; ///; /// Regarding branch expanding:; ///; /// When branch instruction like beqzc or bnezc has offset that is too large; /// to fit into its immediate field, it has to be expanded to another; /// instruction or series of instructions.; ///; /// FIXME: Fix pc-region jump instructions which cross 256MB segment boundaries.; /// TODO: Handle out of range bc, b (pseudo) instructions.; ///; /// Regarding compact branch hazard prevention:; ///; /// Hazards handled: forbidden slots for MIPSR6, FPU slots for MIPS3 and below,; /// load delay slots for MIPS1.; ///; /// A forbidden slot hazard occurs when a compact branch instruction is executed; /// and the adjacent instruction in memory is a control transfer instruction; /// such as a b",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsBranchExpansion.cpp:1213,hazard,hazard,1213,interpreter/llvm-project/llvm/lib/Target/Mips/MipsBranchExpansion.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsBranchExpansion.cpp,1,['hazard'],['hazard']
Safety,"nsforms an AST node; /// or the parts of an AST node using the various transformation functions,; /// then passes the pieces on to the ""rebuild"" step, which constructs a new AST; /// node of the appropriate kind from the pieces. The default transformation; /// routines recursively transform the operands to composite AST nodes (e.g.,; /// the pointee type of a PointerType node) and, if any of those operand nodes; /// were changed by the transformation, invokes the rebuild operation to create; /// a new AST node.; ///; /// Subclasses can customize the transformation at various levels. The; /// most coarse-grained transformations involve replacing TransformType(),; /// TransformExpr(), TransformDecl(), TransformNestedNameSpecifierLoc(),; /// TransformTemplateName(), or TransformTemplateArgument() with entirely; /// new implementations.; ///; /// For more fine-grained transformations, subclasses can replace any of the; /// \c TransformXXX functions (where XXX is the name of an AST node, e.g.,; /// PointerType, StmtExpr) to alter the transformation. As mentioned previously,; /// replacing TransformTemplateTypeParmType() allows template instantiation; /// to substitute template arguments for their corresponding template; /// parameters. Additionally, subclasses can override the \c RebuildXXX; /// functions to control how AST nodes are rebuilt when their operands change.; /// By default, \c TreeTransform will invoke semantic analysis to rebuild; /// AST nodes. However, certain other tree transformations (e.g, cloning) may; /// be able to use more efficient rebuild steps.; ///; /// There are a handful of other functions that can be overridden, allowing one; /// to avoid traversing nodes that don't need any transformation; /// (\c AlreadyTransformed()), force rebuilding AST nodes even when their; /// operands have not changed (\c AlwaysRebuild()), and customize the; /// default locations and entity names used for type-checking; /// (\c getBaseLocation(), \c getBaseEntity()).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/TreeTransform.h:2841,avoid,avoid,2841,interpreter/llvm-project/clang/lib/Sema/TreeTransform.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/TreeTransform.h,1,['avoid'],['avoid']
Safety,"nst char *path, const char *mode));. Opens a gzip (.gz) file for reading or writing. The mode parameter is as; in fopen (""rb"" or ""wb"") but can also include a compression level (""wb9"") or; a strategy: 'f' for filtered data as in ""wb6f"", 'h' for Huffman-only; compression as in ""wb1h"", 'R' for run-length encoding as in ""wb1R"", or 'F'; for fixed code compression as in ""wb9F"". (See the description of; deflateInit2 for more information about the strategy parameter.) 'T' will; request transparent writing or appending with no compression and not using; the gzip format. ""a"" can be used instead of ""w"" to request that the gzip stream that will; be written be appended to the file. ""+"" will result in an error, since; reading and writing to the same gzip file is not supported. The addition of; ""x"" when writing will create the file exclusively, which fails if the file; already exists. On systems that support it, the addition of ""e"" when; reading or writing will set the flag to close the file on an execve() call. These functions, as well as gzip, will read and decode a sequence of gzip; streams in a file. The append function of gzopen() can be used to create; such a file. (Also see gzflush() for another way to do this.) When; appending, gzopen does not test whether the file begins with a gzip stream,; nor does it look for the end of the gzip streams to begin appending. gzopen; will simply append a gzip stream to the existing file. gzopen can be used to read a file which is not in gzip format; in this; case gzread will directly read from the file without decompression. When; reading, this will be detected automatically by looking for the magic two-; byte gzip header. gzopen returns NULL if the file could not be opened, if there was; insufficient memory to allocate the gzFile state, or if an invalid mode was; specified (an 'r', 'w', or 'a' was not provided, or '+' was provided).; errno can be checked to determine if the reason gzopen failed was that the; file could not be opened.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:1687,detect,detected,1687,builtins/zlib/zlib.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h,1,['detect'],['detected']
Safety,"nstructions.; ///; /// The second SGPR is 32 bit byte size of a single work-item's scratch; /// memory usage. This is directly loaded from the dispatch packet Private; /// Segment Byte Size and rounded up to a multiple of DWORD.; ///; /// \todo [Does CP need to round this to >4 byte alignment?]; ///; /// The kernel code must move to SGPRn-3 for use as the FLAT SCRATCH SIZE in; /// flat memory instructions. Having CP load it once avoids loading it at; /// the beginning of every wavefront.; ///; /// For PI:; /// This is the 64 bit base address of the scratch backing memory for; /// allocated by CP for this dispatch.; ///; /// Private Segment Size (enable_sgpr_private_segment_size):; /// Number of User SGPR registers: 1. The 32 bit byte size of a single; /// work-item's scratch memory allocation. This is the value from the dispatch; /// packet. Private Segment Byte Size rounded up by CP to a multiple of DWORD.; ///; /// \todo [Does CP need to round this to >4 byte alignment?]; ///; /// Having CP load it once avoids loading it at the beginning of every; /// wavefront.; ///; /// \todo [This will not be used for CI/VI since it is the same value as; /// the second SGPR of Flat Scratch Init. However, it is need for PI which; /// changes meaning of Flat Scratchg Init..]; ///; /// Grid Work-Group Count X (enable_sgpr_grid_workgroup_count_x):; /// Number of User SGPR registers: 1. 32 bit count of the number of; /// work-groups in the X dimension for the grid being executed. Computed from; /// the fields in the HsaDispatchPacket as; /// ((gridSize.x+workgroupSize.x-1)/workgroupSize.x).; ///; /// Grid Work-Group Count Y (enable_sgpr_grid_workgroup_count_y):; /// Number of User SGPR registers: 1. 32 bit count of the number of; /// work-groups in the Y dimension for the grid being executed. Computed from; /// the fields in the HsaDispatchPacket as; /// ((gridSize.y+workgroupSize.y-1)/workgroupSize.y).; ///; /// Only initialized if <16 previous SGPRs initialized.; ///; /// Grid Wor",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDKernelCodeT.h:4955,avoid,avoids,4955,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDKernelCodeT.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDKernelCodeT.h,1,['avoid'],['avoids']
Safety,"nt as long as they are; /// consistent. Inaccuracies arise when instructions have different execution; /// delays relative to each other, in addition to their intrinsic latency. Those; /// special cases can be handled by TableGen constructs such as, ReadAdvance,; /// which reduces latency when reading data, and ReleaseAtCycles, which consumes; /// a processor resource when writing data for a number of abstract; /// cycles.; ///; /// TODO: One tool currently missing is the ability to add a delay to; /// ReleaseAtCycles. That would be easy to add and would likely cover all cases; /// currently handled by the legacy itinerary tables.; ///; /// A note on out-of-order execution and, more generally, instruction; /// buffers. Part of the CPU pipeline is always in-order. The issue point, which; /// is the point of reference for counting cycles, only makes sense as an; /// in-order part of the pipeline. Other parts of the pipeline are sometimes; /// falling behind and sometimes catching up. It's only interesting to model; /// those other, decoupled parts of the pipeline if they may be predictably; /// resource constrained in a way that the scheduler can exploit.; ///; /// The LLVM machine model distinguishes between in-order constraints and; /// out-of-order constraints so that the target's scheduling strategy can apply; /// appropriate heuristics. For a well-balanced CPU pipeline, out-of-order; /// resources would not typically be treated as a hard scheduling; /// constraint. For example, in the GenericScheduler, a delay caused by limited; /// out-of-order resources is not directly reflected in the number of cycles; /// that the scheduler sees between issuing an instruction and its dependent; /// instructions. In other words, out-of-order resources don't directly increase; /// the latency between pairs of instructions. However, they can still be used; /// to detect potential bottlenecks across a sequence of instructions and bias; /// the scheduling heuristics appropriately.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h:2650,predict,predictably,2650,interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h,2,"['detect', 'predict']","['detect', 'predictably']"
Safety,"nts (for the first signature); /// or one (for the second signature).; /// \endparblock; /// \param args; /// \parblock; /// a standard vector, a ROOT::TSeq of integer type or an initializer list for the second signature.; /// An integer only for the first.\n; /// \endparblock; ///; /// **Note:** in cases where the function to be executed takes more than; /// zero/one argument but all are fixed except zero/one, the function can be wrapped; /// in a lambda or via std::bind to give it the right signature.\n; ///; /// #### Return value:; /// An std::vector. The elements in the container; /// will be the objects returned by func.; ///; /// ### ROOT::Internal::TExecutor::MapReduce; /// This set of methods behaves exactly like Map, but takes an additional; /// function as a third argument. This function is applied to the set of; /// objects returned by the corresponding Map execution to ""squash"" them; /// into a single object. The signature of the reduce function should be `(const std::vector<T>) -> T`; ///; /// An integer can be passed as the fourth argument indicating the number of chunks we want to divide our work in.; /// <b>(Note: Please be aware that chunking is only available when the policy is kMultiThread, ignoring this argument in; /// other cases)</b> This may be useful to avoid the overhead introduced when running really short tasks. In this case,; /// the reduction function should be independent of the size of the vector returned by Map due to optimization of the; /// number of chunks.; ///; /// #### Examples:; /// ~~~{.cpp}; /// root[] ROOT::Internal::TExecutor pool; auto ten = pool.MapReduce([]() { return 1; }, 10, [](const std::vector<int>; /// &v) { return std::accumulate(v.begin(), v.end(), 0); }); /// root[] ROOT::Internal::TExecutor; /// pool(ROOT::EExecutionPolicy::kMultiProcess); auto hist = pool.MapReduce(CreateAndFillHists, 10,; /// PoolUtils::ReduceObjects);; /// ~~~; ///; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/imt/src/TExecutor.cxx:2582,avoid,avoid,2582,core/imt/src/TExecutor.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/imt/src/TExecutor.cxx,1,['avoid'],['avoid']
Safety,"o be worth drawing. In all these cases AddObject() returns kNone, as it does for successful addition,; simply indicating it does not require you to provide further information about; this object. You should not try to make any assumptions about what the viewer; did with it. This enables the viewer to be connected to a client which sends potentially; millions of objects, and only accept those that are of interest at a certain; time, caching the relatively small number of CPU/memory costly logical shapes,; and retaining/discarding the physical placements as required. The viewer may; decide to force the client to rebuild (republish) the scene (via; a TPad repaint at present), and thus collect these objects if the; internal viewer state changes. It does this presently by forcing a repaint; on the attached TPad object - hence the reason for putting all publishing to; the viewer in the attached pad objects Paint() method. We will likely remove; this requirement in the future, indicating the rebuild request via a normal; ROOT signal, which the client can detect. ### Physical IDs. TVirtualViewer3D provides for two methods of object addition:virtual Int_t AddObject(const; TBuffer3D & buffer, Bool_t * addChildren = 0). ~~~ {.cpp}; virtual Int_t AddObject(UInt_t physicalID, const TBuffer3D & buffer, Bool_t * addChildren = 0); ~~~. If you use the first (simple) case a viewer using logical/physical pairs; SetSectionsValid(TBuffer3D::kBoundingBox); will generate IDs for each physical; object internally. In the second you can specify a unique identifier from the; client, which allows the viewer to be more efficient. It can now cache both logical; and physical objects, and only discard physical objects no longer of interest as; part of scene rebuilds. ### Child Objects. In many geometries there is a rigid containment hierarchy, and so if the viewer; is not interested in a certain object due to limits/size then it will also; not be interest in any of the contained branch of descende",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx:7601,detect,detect,7601,core/base/src/TBuffer3D.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx,1,['detect'],['detect']
Safety,"o explicit attempt should be made to normalize the; function output in evaluate(). In particular, normalisation constants; can be omitted to speed up the function evaluations, and included later; in the integration of the PDF (see below), which is rarely called in; comparison to the `evaluate()` function. In addition, RooAbsPdf objects do not have a static concept of what; variables are parameters, and what variables are dependents (which; need to be integrated over for a correct PDF normalization).; Instead, the choice of normalization is always specified each time a; normalized value is requested from the PDF via the getVal(); method. RooAbsPdf manages the entire normalization logic of each PDF with; the help of a RooRealIntegral object, which coordinates the integration; of a given choice of normalization. By default, RooRealIntegral will; perform an entirely numeric integration of all dependents. However,; PDFs can advertise one or more (partial) analytical integrals of; their function, and these will be used by RooRealIntegral, if it; determines that this is safe (i.e., no hidden Jacobian terms,; multiplication with other PDFs that have one or more dependents in; common, etc). #### Implementing analytical integrals; To implement analytical integrals, two functions must be implemented. First,. ```; Int_t getAnalyticalIntegral(const RooArgSet& integSet, RooArgSet& anaIntSet); ```; should return the analytical integrals that are supported. `integSet`; is the set of dependents for which integration is requested. The; function should copy the subset of dependents it can analytically; integrate to `anaIntSet`, and return a unique identification code for; this integration configuration. If no integration can be; performed, zero should be returned. Second,. ```; double analyticalIntegral(Int_t code); ```. implements the actual analytical integral(s) advertised by; `getAnalyticalIntegral()`. This function will only be called with; codes returned by `getAnalyticalIntegral",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:3024,safe,safe,3024,roofit/roofitcore/src/RooAbsPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx,1,['safe'],['safe']
Safety,"o hold. However, information derived from; // other abstract attributes is conditional on various things. If the justifying; // state changed, the `updateImpl` has to revisit the situation and potentially; // find another justification or limit the optimistic assumes made.; //; // Change is the key in this framework. Until a state of no-change, thus a; // fixpoint, is reached, the Attributor will query the abstract attributes; // in-flight to re-evaluate their state. If the (current) state is too; // optimistic, hence it cannot be justified anymore through other abstract; // attributes or the state of the IR, the state of the abstract attribute will; // have to change. Generally, we assume abstract attribute state to be a finite; // height lattice and the update function to be monotone. However, these; // conditions are not enforced because the iteration limit will guarantee; // termination. If an optimistic fixpoint is reached, or a pessimistic fix; // point is enforced after a timeout, the abstract attributes are tasked to; // manifest their result in the IR for passes to come.; //; // Attribute manifestation is not mandatory. If desired, there is support to; // generate a single or multiple LLVM-IR attributes already in the helper struct; // IRAttribute. In the simplest case, a subclass inherits from IRAttribute with; // a proper Attribute::AttrKind as template parameter. The Attributor; // manifestation framework will then create and place a new attribute if it is; // allowed to do so (based on the abstract state). Other use cases can be; // achieved by overloading AbstractAttribute or IRAttribute methods.; //; //; // The ""mechanics"" of adding a new ""abstract attribute"":; // - Define a class (transitively) inheriting from AbstractAttribute and one; // (which could be the same) that (transitively) inherits from AbstractState.; // For the latter, consider the already available BooleanState and; // {Inc,Dec,Bit}IntegerState if they fit your needs, e.g., you require",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:3784,timeout,timeout,3784,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,1,['timeout'],['timeout']
Safety,"oRealVar zeta(""zeta"", ""zeta"", 0.);; * RooRealVar lambda(""lambda"", ""lambda"", -1., -10., -0.00001);; * ```; * In all other cases, slower / less accurate numeric integration will be used.; * Note that including `0.` in the value range of lambda excludes using analytic integrals.; * \endif; *; * ### Concavity; * Note that unless the parameters \f$ a_l,\ a_r \f$ are very large, the function has non-hyperbolic tails. This requires; * \f$ G \f$ to be strictly concave, *i.e.*, peaked, as otherwise the tails would yield imaginary numbers. Choosing \f$ \lambda,; * \beta, \zeta \f$ inappropriately will therefore lead to evaluation errors.; *; * Further, the original paper establishes that to keep the tails from rising,; * \f[; * \begin{split}; * \beta^2 &< \alpha^2 \\; * \Leftrightarrow \beta^2 &< \frac{\zeta^2}{\delta^2} = \frac{\zeta^2}{\sigma^2 A_{\lambda}^2(\zeta)}; * \end{split}; * \f]; * needs to be satisfied, unless the fit range is very restricted, because otherwise, the function rises in the tails.; *; *; * In case of evaluation errors, it is advisable to choose very large values for \f$ a_l,\ a_r \f$, tweak the parameters of the core region to; * make it concave, and re-enable the tails. Especially \f$ \beta \f$ needs to be close to zero.; *; * ## Relation to RooIpatia2; * This implementation is largely based on RooIpatia2, https://gitlab.cern.ch/lhcb/Urania/-/blob/master/PhysFit/B2DXFitters/src/RooIpatia2.cxx,; * but there are differences:; * - At construction time, the Hypatia implementation checks if the range of parameters extends into regions where; * the function might be undefined.; * - Hypatia supports I/O to ROOT files.; * - Hypatia will support faster batched function evaluations.; * - Hypatia might support analytical integration for the case \f$ \zeta = \beta = 0, \lambda < 1 \f$.; *; * Because of these differences, and to avoid name clashes for setups where RooFit is used in an environment that also has; * RooIpatia2, class names need to be different.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooHypatia2.cxx:4520,avoid,avoid,4520,roofit/roofitmore/src/RooHypatia2.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooHypatia2.cxx,1,['avoid'],['avoid']
Safety,"of padding.; // vfptrs are always injected at offset 0.; // * vbptrs are injected after all bases and fields have been laid out. In; // order to guarantee proper alignment of all fields, the vfptr injection; // pushes all bases and fields back by the alignment imposed by those bases; // and fields. This can potentially add a significant amount of padding.; // vbptrs are injected immediately after the last non-virtual base as; // lexicographically ordered in the code. If this site isn't pointer aligned; // the vbptr is placed at the next properly aligned location. Enough padding; // is added to guarantee a fit.; // * The last zero sized non-virtual base can be placed at the end of the; // struct (potentially aliasing another object), or may alias with the first; // field, even if they are of the same type.; // * The last zero size virtual base may be placed at the end of the struct; // potentially aliasing another object.; // * The ABI attempts to avoid aliasing of zero sized bases by adding padding; // between bases or vbases with specific properties. The criteria for; // additional padding between two bases is that the first base is zero sized; // or ends with a zero sized subobject and the second base is zero sized or; // trails with a zero sized base or field (sharing of vfptrs can reorder the; // layout of the so the leading base is not always the first one declared).; // This rule does take into account fields that are not records, so padding; // will occur even if the last field is, e.g. an int. The padding added for; // bases is 1 byte. The padding added between vbases depends on the alignment; // of the object but is at least 4 bytes (in both 32 and 64 bit modes).; // * There is no concept of non-virtual alignment, non-virtual alignment and; // alignment are always identical.; // * There is a distinction between alignment and required alignment.; // __declspec(align) changes the required alignment of a struct. This; // alignment is _always_ obeyed, even in th",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:2986,avoid,avoid,2986,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,1,['avoid'],['avoid']
Safety,"on. The direction is given by its director cosines with respect; to the local shape coordinate system. This method provides additional; information according the value of IACT input parameter :. - IACT = 0 => compute only safe distance and fill it at the location; given by SAFE; - IACT = 1 => a proposed STEP is supplied. The safe distance is computed; first. If this is bigger than STEP than the proposed step; is approved and returned by the method since it does not; cross the shape boundaries. Otherwise, the distance to; exiting the shape is computed and returned.; - IACT = 2 => compute both safe distance and distance to exiting, ignoring; the proposed step.; - IACT > 2 => compute only the distance to exiting, ignoring anything else. #### `Double_t TGeoShape::DistFromOutside(Double_t *point[3], Double_t *dir[3], Int_t iact, Double_t step, Double_t; *safe)`. computes the distance to entering a shape from a given point OUTSIDE. Acts; in the same way as B). #### `Double_t Safety(const Double_t *point[3], Bool_t inside)`. compute maximum shift of a point in any direction that does not change its; INSIDE/OUTSIDE state (does not cross shape boundaries). The state of the point; have to be properly supplied. #### `Double_t *Normal(Double_t *point[3], Double_t *dir[3], Bool_t inside)`. returns director cosines of normal to the crossed shape surface from a; given point towards a direction. One has to specify if the point is inside; or outside shape. According to this, the normal will be outwards or inwards; shape respectively. Normal components are statically stored by shape class,; so it has to be copied after retrieval in a different array. ### Dividing shapes. Shapes can generally be divided along a given axis. Supported axis are; X, Y, Z, Rxy, Phi, Rxyz. A given shape cannot be divided however on any axis.; The general rule is that that divisions are possible on whatever axis that; produces still known shapes as slices. The division of shapes should not be; performed by TG",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoShape.cxx:5229,Safe,Safety,5229,geom/geom/src/TGeoShape.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoShape.cxx,1,['Safe'],['Safety']
Safety,"ontext is fixed at one row group just because that's a; * convenient number for this controller to work with. The existing; * upsamplers really only need one sample row of context. An upsampler; * supporting arbitrary output rescaling might wish for more than one row; * group of context when shrinking the image; tough, we don't handle that.; * (This is justified by the assumption that downsizing will be handled mostly; * by adjusting the DCT_scaled_size values, so that the actual scale factor at; * the upsample step needn't be much less than one.); *; * To provide the desired context, we have to retain the last two row groups; * of one iMCU row while reading in the next iMCU row. (The last row group; * can't be processed until we have another row group for its below-context,; * and so we have to save the next-to-last group too for its above-context.); * We could do this most simply by copying data around in our buffer, but; * that'd be very slow. We can avoid copying any data by creating a rather; * strange pointer structure. Here's how it works. We allocate a workspace; * consisting of M+2 row groups (where M = min_DCT_scaled_size is the number; * of row groups per iMCU row). We create two sets of redundant pointers to; * the workspace. Labeling the physical row groups 0 to M+1, the synthesized; * pointer lists look like this:; * M+1 M-1; * master pointer --> 0 master pointer --> 0; * 1 1; * ... ...; * M-3 M-3; * M-2 M; * M-1 M+1; * M M-2; * M+1 M-1; * 0 0; * We read alternate iMCU rows using each master pointer; thus the last two; * row groups of the previous iMCU row remain un-overwritten in the workspace.; * The pointer lists are set up so that the required context rows appear to; * be adjacent to the proper places when we pass the pointer lists to the; * upsampler.; *; * The above pictures describe the normal state of the pointer lists.; * At top and bottom of the image, we diddle the pointer lists to duplicate; * the first or last sample row as necessary (this ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmainct.c:3414,avoid,avoid,3414,graf2d/asimage/src/libAfterImage/libjpeg/jdmainct.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmainct.c,1,['avoid'],['avoid']
Safety,"other external MC for simulation, therefore it does not contain any; constraints related to physics. However, the package defines a number of; hooks for tracking, such as media, materials, magnetic field or track state flags,; in order to allow interfacing to tracking MC's. The final goal is to be; able to use the same geometry for several purposes, such as tracking,; reconstruction or visualization, taking advantage of the ROOT features; related to bookkeeping, I/O, histogramming, browsing and GUI's. The geometrical modeler is the most important component of the package and; it provides answers to the basic questions like ""Where am I ?"" or ""How far; from the next boundary ?"", but also to more complex ones like ""How far from; the closest surface ?"" or ""Which is the next crossing along a helix ?"". The architecture of the modeler is a combination between a GEANT-like; containment scheme and a normal CSG binary tree at the level of shapes. An; important common feature of all detector geometry descriptions is the; mother-daughter concept. This is the most natural approach when tracking; is concerned and imposes a set of constraints to the way geometry is defined.; Constructive solid geometry composition is used only in order to create more; complex shapes from an existing set of primitives through boolean operations.; This feature is not implemented yet but in future full definition of boolean; expressions will be supported. Practically every geometry defined in GEANT style can be mapped by the modeler.; The basic components used for building the logical hierarchy of the geometry; are called ""volumes"" and ""nodes"". Volumes (sometimes called ""solids"") are fully; defined geometrical objects having a given shape and medium and possibly; containing a list of nodes. Nodes represent just positioned instances of volumes; inside a container volume and they are not directly defined by user. They are; automatically created as a result of adding one volume inside other or dividing;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoManager.cxx:1801,detect,detector,1801,geom/geom/src/TGeoManager.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoManager.cxx,1,['detect'],['detector']
Safety,"pe queries. Note that global queries related to a geometry are handled by the manager class.; However, shape-related queries might be sometimes useful. #### `Bool_t TGeoShape::Contains(const Double_t *point[3])`. this method returns true if POINT is actually inside the shape. The point; has to be defined in the local shape reference. For instance, for a box having; DX, DY and DZ half-lengths a point will be considered inside if :. ~~~ {.cpp}; | -DX <= point[0] <= DX; | -DY <= point[1] <= DY; | -DZ <= point[2] <= DZ; ~~~. #### `Double_t TGeoShape::DistFromInside(Double_t *point[3], Double_t *dir[3], Int_t iact, Double_t step, Double_t; *safe)`. computes the distance to exiting a shape from a given point INSIDE, along; a given direction. The direction is given by its director cosines with respect; to the local shape coordinate system. This method provides additional; information according the value of IACT input parameter :. - IACT = 0 => compute only safe distance and fill it at the location; given by SAFE; - IACT = 1 => a proposed STEP is supplied. The safe distance is computed; first. If this is bigger than STEP than the proposed step; is approved and returned by the method since it does not; cross the shape boundaries. Otherwise, the distance to; exiting the shape is computed and returned.; - IACT = 2 => compute both safe distance and distance to exiting, ignoring; the proposed step.; - IACT > 2 => compute only the distance to exiting, ignoring anything else. #### `Double_t TGeoShape::DistFromOutside(Double_t *point[3], Double_t *dir[3], Int_t iact, Double_t step, Double_t; *safe)`. computes the distance to entering a shape from a given point OUTSIDE. Acts; in the same way as B). #### `Double_t Safety(const Double_t *point[3], Bool_t inside)`. compute maximum shift of a point in any direction that does not change its; INSIDE/OUTSIDE state (does not cross shape boundaries). The state of the point; have to be properly supplied. #### `Double_t *Normal(Double_t *point",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoShape.cxx:4467,safe,safe,4467,geom/geom/src/TGeoShape.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoShape.cxx,2,"['SAFE', 'safe']","['SAFE', 'safe']"
Safety,"pecification format - `Summary' - and; // contains descriptions of some library functions in this format. Each; // specification contains a list of branches for splitting the program state; // upon call, and range constraints on argument and return-value symbols that; // are satisfied on each branch. This spec can be expanded to include more; // items, like external effects of the function.; //; // The main difference between this approach and the body farms technique is; // in more explicit control over how many branches are produced. For example,; // consider standard C function `ispunct(int x)', which returns a non-zero value; // iff `x' is a punctuation character, that is, when `x' is in range; // ['!', '/'] [':', '@'] U ['[', '\`'] U ['{', '~'].; // `Summary' provides only two branches for this function. However,; // any attempt to describe this range with if-statements in the body farm; // would result in many more branches. Because each branch needs to be analyzed; // independently, this significantly reduces performance. Additionally,; // once we consider a branch on which `x' is in range, say, ['!', '/'],; // we assume that such branch is an important separate path through the program,; // which may lead to false positives because considering this particular path; // was not consciously intended, and therefore it might have been unreachable.; //; // This checker uses eval::Call for modeling pure functions (functions without; // side effets), for which their `Summary' is a precise model. This avoids; // unnecessary invalidation passes. Conflicts with other checkers are unlikely; // because if the function has no other effects, other checkers would probably; // never want to improve upon the modeling done by this checker.; //; // Non-pure functions, for which only partial improvement over the default; // behavior is expected, are modeled via check::PostCall, non-intrusively.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/StdLibraryFunctionsChecker.cpp:2008,avoid,avoids,2008,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/StdLibraryFunctionsChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/StdLibraryFunctionsChecker.cpp,1,['avoid'],['avoids']
Safety,"ple, the ""measurement"" tree could have two leaves, one for; the primary distribution and one for auxillary measurements.; Similarly, the ""truth"" tree could have two leaves, one for the; signal and one for the background.; Each of the leaves may then have a multi-dimensional distribution.; <br/>; The class TUnfoldBinning takes care to map all bins of the; ""measurement"" to a one-dimensional vector y.; Similarly, the ""truth"" bins are mapped to the vector x. <h3>How to choose the regularisation settings</h3>. In TUnfoldDensity, two methods are implemented to determine tau**2; <ol>; <li>ScanLcurve() locate the tau where the L-curve plot has a ""kink""; this function is implemented in the TUnfold class</li>; <li>ScanTau() finds the solution such that some variable; (e.g. global correlation coefficient) is minimized.; This function is implemented in the TUnfoldDensity class</li>; </ol>; Each of the algorithms has its own advantages and disadvantages.; The algorithm (1) does not work if the input data are too similar to the; MC prediction. Typical no-go cases of the L-curve scan are:; <ul>; <li>the number of measurements is too small (e.g. ny=nx); <li>the input data have no statistical fluctuations; [identical MC events are used to fill the matrix of migrations; and the vector y for a ""closure test""]; </ul>; The algorithm (2) only works if the variable does have a real minimum; as a function of tau. If global correlations are minimized, the situation; is as follows:; The matrix of migration typically introduces negative correlations.; The area constraint introduces some positive correlation.; Regularisation on the ""size"" introduces no correlation.; Regularisation on 1st or 2nd derivatives adds positive correlations.; <br/>; For these reasons, ""size"" regularisation does not work well with; the tau-scan: the higher tau, the smaller rho, but there is no minimum.; As a result, large values of tau (too strong regularisation) are found.; In contrast, the tau-scan is expected to wor",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfoldDensity.cxx:4827,predict,prediction,4827,hist/unfold/src/TUnfoldDensity.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfoldDensity.cxx,1,['predict'],['prediction']
Safety,"plicitly depends on r2 (the TOC pointer). And, so,; // we might produce code like this:; //; // .Ltmp526:; // addis 3, 2, .LC12@toc@ha; // .Ltmp1628:; // std 2, 40(1); // ld 5, 0(27); // ld 2, 8(27); // ld 11, 16(27); // ld 3, .LC12@toc@l(3); // rldicl 4, 4, 0, 32; // mtctr 5; // bctrl; // ld 2, 40(1); //; // And there is nothing wrong with this code, as such, but there is a linker bug; // in binutils (https://sourceware.org/bugzilla/show_bug.cgi?id=18414) that will; // misoptimize this code sequence to this:; // nop; // std r2,40(r1); // ld r5,0(r27); // ld r2,8(r27); // ld r11,16(r27); // ld r3,-32472(r2); // clrldi r4,r4,32; // mtctr r5; // bctrl; // ld r2,40(r1); // because the linker does not know (and does not check) that the value in r2; // changed in between the instruction using the .LC12@toc@ha (TOC-relative); // relocation and the instruction using the .LC12@toc@l(3) relocation.; // Because it finds these instructions using the relocations (and not by; // scanning the instructions), it has been asserted that there is no good way; // to detect the change of r2 in between. As a result, this bug may never be; // fixed (i.e. it may become part of the definition of the ABI). GCC was; // updated to add extra dependencies on r2 to instructions using the @toc@l; // relocations to avoid this problem, and we'll do the same here.; //; // This is done as a separate pass because:; // 1. These extra r2 dependencies are not really properties of the; // instructions, but rather due to a linker bug, and maybe one day we'll be; // able to get rid of them when targeting linkers without this bug (and,; // thus, keeping the logic centralized here will make that; // straightforward).; // 2. There are ISel-level peephole optimizations that propagate the @toc@l; // relocations to some user instructions, and so the exta dependencies do; // not apply only to a fixed set of instructions (without undesirable; // definition replication).; //; //===------------------------------------",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCTOCRegDeps.cpp:1630,detect,detect,1630,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCTOCRegDeps.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCTOCRegDeps.cpp,1,['detect'],['detect']
Safety,"pose, W is the bitwidth of the return value. We must be prepared for; // overflow. Hence, we must assure that the result of our computation is; // equal to the accurate one modulo 2^W. Unfortunately, division isn't; // safe in modular arithmetic.; //; // However, this code doesn't use exactly that formula; the formula it uses; // is something like the following, where T is the number of factors of 2 in; // K! (i.e. trailing zeros in the binary representation of K!), and ^ is; // exponentiation:; //; // BC(It, K) = (It * (It - 1) * ... * (It - K + 1)) / 2^T / (K! / 2^T); //; // This formula is trivially equivalent to the previous formula. However,; // this formula can be implemented much more efficiently. The trick is that; // K! / 2^T is odd, and exact division by an odd number *is* safe in modular; // arithmetic. To do exact division in modular arithmetic, all we have; // to do is multiply by the inverse. Therefore, this step can be done at; // width W.; //; // The next issue is how to safely do the division by 2^T. The way this; // is done is by doing the multiplication step at a width of at least W + T; // bits. This way, the bottom W+T bits of the product are accurate. Then,; // when we perform the division by 2^T (which is equivalent to a right shift; // by T), the bottom W bits are accurate. Extra bits are okay; they'll get; // truncated out after the division by 2^T.; //; // In comparison to just directly using the first formula, this technique; // is much more efficient; using the first formula requires W * K bits,; // but this formula less than W + K bits. Also, the first formula requires; // a division step, whereas this formula only requires multiplies and shifts.; //; // It doesn't matter whether the subtraction step is done in the calculation; // width or the input iteration count's width; if the subtraction overflows,; // the result must be zero anyway. We prefer here to do it in the width of; // the induction variable because it helps a lot for certai",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp:1128,safe,safely,1128,interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,1,['safe'],['safely']
Safety,"pproach on the; first call. So the effects of the flush parameter in this implementation are; on the return value of inflate() as noted below, when inflate() returns early; when Z_BLOCK or Z_TREES is used, and when inflate() avoids the allocation of; memory for a sliding window when Z_FINISH is used. If a preset dictionary is needed after this call (see inflateSetDictionary; below), inflate sets strm->adler to the Adler-32 checksum of the dictionary; chosen by the compressor and returns Z_NEED_DICT; otherwise it sets; strm->adler to the Adler-32 checksum of all output produced so far (that is,; total_out bytes) and returns Z_OK, Z_STREAM_END or an error code as described; below. At the end of the stream, inflate() checks that its computed adler32; checksum is equal to that saved by the compressor and returns Z_STREAM_END; only if the checksum is correct. inflate() can decompress and check either zlib-wrapped or gzip-wrapped; deflate data. The header type is detected automatically, if requested when; initializing with inflateInit2(). Any information contained in the gzip; header is not retained, so applications that need that information should; instead use raw inflate, see inflateInit2() below, or inflateBack() and; perform their own processing of the gzip header and trailer. When processing; gzip-wrapped deflate data, strm->adler32 is set to the CRC-32 of the output; producted so far. The CRC-32 is checked against the gzip trailer. inflate() returns Z_OK if some progress has been made (more input processed; or more output produced), Z_STREAM_END if the end of the compressed data has; been reached and all uncompressed output has been produced, Z_NEED_DICT if a; preset dictionary is needed at this point, Z_DATA_ERROR if the input data was; corrupted (input stream not conforming to the zlib format or incorrect check; value), Z_STREAM_ERROR if the stream structure was inconsistent (for example; next_in or next_out was Z_NULL), Z_MEM_ERROR if there was not enough memory",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:5523,detect,detected,5523,builtins/zlib/zlib.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h,1,['detect'],['detected']
Safety,"print errors (if e=1, v must be 1); v = 1; print name/values of parameters. Example:. gStyle->SetOptFit(1011);. print fit probability, parameter names/values and errors. 1. When `v = 1` is specified, only the non-fixed parameters are shown.; 2. When `v = 2` all parameters are shown. Note: `gStyle->SetOptFit(1)` means ""default value"", so it is equivalent; to `gStyle->SetOptFit(111)`. \anchor HP09; ### The error bars options. | Option | Description |; |----------|-------------------------------------------------------------------|; | ""E"" | Default. Shows only the error bars, not a marker.|; | ""E1"" | Small lines are drawn at the end of the error bars.|; | ""E2"" | Error rectangles are drawn.|; | ""E3"" | A filled area is drawn through the end points of the vertical error bars.|; | ""E4"" | A smoothed filled area is drawn through the end points of the vertical error bars.|; | ""E0"" | Draw error bars. Markers are drawn for bins with 0 contents. Combined with E1 or E2 it avoids error bars clipping|; | ""E5"" | Like E3 but ignore the bins with 0 contents.|; | ""E6"" | Like E4 but ignore the bins with 0 contents.|; | ""X0"" | When used with one of the ""E"" option, it suppress the error bar along X as `gStyle->SetErrorX(0)` would do.|. Begin_Macro(source); {; auto c1 = new TCanvas(""c1"",""c1"",600,400);; auto he = new TH1F(""he"",""Distribution drawn with error bars (option E1) "",100,-3,3);; for (int i=0; i<10000; i++) he->Fill(gRandom->Gaus(0,1));; gStyle->SetEndErrorSize(3);; gStyle->SetErrorX(1.);; he->SetMarkerStyle(20);; he->Draw(""E1"");; }; End_Macro. The options ""E3"" and ""E4"" draw an error band through the end points of the; vertical error bars. With ""E4"" the error band is smoothed. Because of the; smoothing algorithm used some artefacts may appear at the end of the band; like in the following example. In such cases ""E3"" should be used instead; of ""E4"". Begin_Macro(source); {; auto ce4 = new TCanvas(""ce4"",""ce4"",600,400);; ce4->Divide(2,1);; auto he4 = new TH1F(""he4"",""Distribution drawn wit",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/THistPainter.cxx:26318,avoid,avoids,26318,hist/histpainter/src/THistPainter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/THistPainter.cxx,1,['avoid'],['avoids']
Safety,"propagating the constant, whereas latency; // savings represents the cycles we are saving from replacing instructions with; // constant values. The InstCostVisitor overrides a set of `visit*` methods to; // be able to handle different types of instructions. These attempt to constant-; // fold the instruction in which case a constant is returned and propagated; // further.; //; // Function pointers are not handled by the InstCostVisitor. They are treated; // separately as they could expose inlining opportunities via indirect call; // promotion. The inlining bonus contributes to the total specialization score.; //; // For a specialization to be profitable its bonus needs to exceed a minimum; // threshold. There are three options for controlling the threshold which are; // expressed as percentages of the original function size:; // * funcspec-min-codesize-savings; // * funcspec-min-latency-savings; // * funcspec-min-inlining-bonus; // There's also an option for controlling the codesize growth from recursive; // specializations. That is `funcspec-max-codesize-growth`.; //; // Once we have all the potential specializations with their score we need to; // choose the best ones, which fit in the module specialization budget. That; // is controlled by the option `funcspec-max-clones`. To find the best `NSpec`; // specializations we use a max-heap. For more details refer to D139346.; //; // Ideas:; // ------; // - With a function specialization attribute for arguments, we could have; // a direct way to steer function specialization, avoiding the cost-model,; // and thus control compile-times / code-size.; //; // - Perhaps a post-inlining function specialization pass could be more; // aggressive on literal constants.; //; // References:; // -----------; // 2021 LLVM Dev Mtg “Introducing function specialisation, and can we enable; // it by default?”, https://www.youtube.com/watch?v=zJiCjeXgV5Q; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionSpecialization.h:3351,avoid,avoiding,3351,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionSpecialization.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionSpecialization.h,1,['avoid'],['avoiding']
Safety,"protocol changed; // 3 -> 4: introduction of multi-level-master support; // 4 -> 5: added friends support; // 5 -> 6: drop TFTP, support for asynchronous queries; // 6 -> 7: support for multisessions, archieve, retrieve, ...; // 7 -> 8: return number of entries in GetNextPacket; // 8 -> 9: support for stateless connection via xproofd; // 9 -> 10: new features requested, tested at CAF; // 10 -> 11: new merging strategy; // 11 -> 12: new progress message; // 12 -> 13: exchange version/architecture/compiler info; // 13 -> 14: new proofserv environment setting; // 14 -> 15: add support for entry lists; new version of TFileInfo; // 15 -> 16: add support for generic non-data based processing; // 16 -> 17: new dataset handling system; support for TFileCollection processing; // 17 -> 18: support for reconnection on daemon restarts; // 18 -> 19: TProofProgressStatus used in kPROOF_PROGRESS, kPROOF_STOPPROCESS; // and kPROOF_GETNEXTPACKET messages in Master - worker communication; // 19 -> 20: Fix the asynchronous mode (required changes in some messages); // 20 -> 21: Add support for session queuing; // 21 -> 22: Add support for switching from sync to async while running ('Ctrl-Z' functionality); // 22 -> 23: New dataset features (default tree name; classification per fileserver); // 23 -> 24: Merging optimization; // 24 -> 25: Handling of 'data' dir; group information; // 25 -> 26: Use new TProofProgressInfo class; // 26 -> 27: Use new file for updating the session status; // 27 -> 28: Support for multi-datasets, fix global pack dirs, fix AskStatistics,; // package download, dataset caching; // 28 -> 29: Support for config parameters in EnablePackage, idle-timeout; // 29 -> 30: Add information about data dir in TSlaveInfo; // 30 -> 31: Development cycle 5.29; // 31 -> 32: New log path trasmission; // 32 -> 33: Development cycle 5.29/04 (fixed worker activation, new startup technology, ...); // 33 -> 34: Development cycle 5.33/02 (fix load issue, ...); // 34 -> 35: Development",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/inc/TProof.h:1796,timeout,timeout,1796,proof/proof/inc/TProof.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/inc/TProof.h,1,['timeout'],['timeout']
Safety,"ption; //; //===----------------------------------------------------------------------===//; //; // Transform each threading path to effectively jump thread the DFA. For; // example, the CFG below could be transformed as follows, where the cloned; // blocks unconditionally branch to the next correct case based on what is; // identified in the analysis.; //; // sw.bb sw.bb; // / | \ / | \; // case1 case2 case3 case1 case2 case3; // \ | / | | |; // determinator det.2 det.3 det.1; // br sw.bb / | \; // sw.bb.2 sw.bb.3 sw.bb.1; // br case2 br case3 br case1§; //; // Definitions and Terminology:; //; // * Threading path:; // a list of basic blocks, the exit state, and the block that determines; // the next state, for which the following notation will be used:; // < path of BBs that form a cycle > [ state, determinator ]; //; // * Predictable switch:; // The switch variable is always a known constant so that all conditional; // jumps based on switch variable can be converted to unconditional jump.; //; // * Determinator:; // The basic block that determines the next state of the DFA.; //; // Representing the optimization in C-like pseudocode: the code pattern on the; // left could functionally be transformed to the right pattern if the switch; // condition is predictable.; //; // X = A goto A; // for (...) A:; // switch (X) ...; // case A goto B; // X = B B:; // case B ...; // X = C goto C; //; // The pass first checks that switch variable X is decided by the control flow; // path taken in the loop; for example, in case B, the next value of X is; // decided to be C. It then enumerates through all paths in the loop and labels; // the basic blocks where the next state is decided.; //; // Using this information it creates new paths that unconditionally branch to; // the next case. This involves cloning code, so it only gets triggered if the; // amount of code duplicated is below a threshold.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/DFAJumpThreading.cpp:1556,predict,predictable,1556,interpreter/llvm-project/llvm/lib/Transforms/Scalar/DFAJumpThreading.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/DFAJumpThreading.cpp,1,['predict'],['predictable']
Safety,"r DBG_VALUE_LIST), and the DBG_VALUE inst that; /// specifies the location. Each VarLoc is indexed in the (function-scope) \p; /// VarLocMap, giving each VarLoc a set of unique indexes, each of which; /// corresponds to one of the VarLoc's machine-locations and can be used to; /// lookup the VarLoc in the VarLocMap. Rather than operate directly on machine; /// locations, the dataflow analysis in this pass identifies locations by their; /// indices in the VarLocMap, meaning all the variable locations in a block can; /// be described by a sparse vector of VarLocMap indicies.; ///; /// All the storage for the dataflow analysis is local to the ExtendRanges; /// method and passed down to helper methods. ""OutLocs"" and ""InLocs"" record the; /// in and out lattice values for each block. ""OpenRanges"" maintains a list of; /// variable locations and, with the ""process"" method, evaluates the transfer; /// function of each block. ""flushPendingLocs"" installs debug value instructions; /// for each live-in location at the start of blocks, while ""Transfers"" records; /// transfers of values between machine-locations.; ///; /// We avoid explicitly representing the ""Unknown"" (\top) lattice value in the; /// implementation. Instead, unvisited blocks implicitly have all lattice; /// values set as ""Unknown"". After being visited, there will be path back to; /// the entry block where the lattice value is ""False"", and as the transfer; /// function cannot make new ""Unknown"" locations, there are no scenarios where; /// a block can have an ""Unknown"" location after being visited. Similarly, we; /// don't enumerate all possible variable locations before exploring the; /// function: when a new location is discovered, all blocks previously explored; /// were implicitly ""False"" but unrecorded, and become explicitly ""False"" when; /// a new VarLoc is created with its bit not set in predecessor InLocs or; /// OutLocs.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/VarLocBasedImpl.cpp:5684,avoid,avoid,5684,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/VarLocBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/VarLocBasedImpl.cpp,1,['avoid'],['avoid']
Safety,"r series based approximation:; *; * @f[ w(z) \approx \frac{i}{2\sqrt{\pi}}\left(; * \sum^N_{n=nullptr} a_n \tau_m\left(; * \frac{1-e^{i(n\pi+\tau_m z)}}{n\pi + \tau_m z} -; * \frac{1-e^{i(-n\pi+\tau_m z)}}{n\pi - \tau_m z}; * \right) - a_0 \frac{1-e^{i \tau_m z}}{z}; * \right) @f]; *; * The coefficients @f$a_b@f$ are given by:; *; * @f[ a_n=\frac{2\sqrt{\pi}}{\tau_m}; * \exp\left(-\frac{n^2\pi^2}{\tau_m^2}\right) @f]; *; * To achieve machine accuracy in double precision floating point arithmetic; * for most of the upper half of the complex plane, chose @f$t_m=12@f$ and; * @f$N=23@f$ as is done in the paper.; *; * There are two complications: For Im(z) negative, the exponent in the; * equation above becomes so large that the roundoff in the rest of the; * calculation is amplified enough that the result cannot be trusted.; * Therefore, for Im(z) < 0, the symmetry of the erfc function under the; * transformation z --> -z is used to avoid accuracy issues for Im(z) < 0 by; * formulating the problem such that the calculation can be done for Im(z) > 0; * where the accuracy of the method is fine, and some postprocessing then; * yields the desired final result.; *; * Second, the denominators in the equation above become singular at; * @f$z = n * pi / 12@f$ (for 0 <= n < 24). In a tiny disc around these; * points, Taylor expansions are used to overcome that difficulty.; *; * This routine precomputes everything it can, and tries to write out complex; * operations to minimise subroutine calls, e.g. for the multiplication of; * complex numbers.; *; * In the square -8 <= Re(z) <= 8, -8 <= Im(z) <= 8, the routine is accurate; * to better than 4e-13 relative, the average relative error is better than; * 7e-16. On a modern x86_64 machine, the routine is roughly three times as; * fast than the old CERNLIB implementation and offers better accuracy.; *; * For large @f$|z|@f$, the familiar continued fraction approximation; *; * @f[ w(z)=\frac{-iz/\sqrt{\pi}}{-z^2+\frac{1/2}{1+\frac{2/2}{",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMath.h:1560,avoid,avoid,1560,roofit/roofitcore/inc/RooMath.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMath.h,1,['avoid'],['avoid']
Safety,"rallelized, but the different loops run sequentially, one after the other.; On many-core architectures it might be desirable to run different event loops concurrently to improve resource usage.; ROOT::RDF::RunGraphs() allows running multiple RDataFrame event loops concurrently:; ~~~{.cpp}; ROOT::EnableImplicitMT();; ROOT::RDataFrame df1(""tree1"", ""f1.root"");; ROOT::RDataFrame df2(""tree2"", ""f2.root"");; auto histo1 = df1.Histo1D(""x"");; auto histo2 = df2.Histo1D(""y"");. // just accessing result pointers, the event loops of separate RDataFrames run one after the other; histo1->Draw(); // runs first multi-thread event loop; histo2->Draw(); // runs second multi-thread event loop. // alternatively, with ROOT::RDF::RunGraphs, event loops for separate computation graphs can run concurrently; ROOT::RDF::RunGraphs({histo1, histo2});; histo1->Draw(); // results can then be used as usual; ~~~. ### Performance considerations. To obtain the maximum performance out of RDataFrame, make sure to avoid just-in-time compiled versions of transformations and actions if at all possible.; For instance, `Filter(""x > 0"")` requires just-in-time compilation of the corresponding C++ logic, while the equivalent `Filter([](float x) { return x > 0.; }, {""x""})` does not.; Similarly, `Histo1D(""x"")` requires just-in-time compilation after the type of `x` is retrieved from the dataset, while `Histo1D<float>(""x"")` does not; the latter spelling; should be preferred for performance-critical applications. Python applications cannot easily specify template parameters or pass C++ callables to RDataFrame.; See [Efficient analysis in Python](#python) for possible ways to speed up hot paths in this case. Just-in-time compilation happens once, right before starting an event loop. To reduce the runtime cost of this step, make sure to book all operations *for all RDataFrame computation graphs*; before the first event loop is triggered: just-in-time compilation will happen once for all code required to be generated u",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx:51500,avoid,avoid,51500,tree/dataframe/src/RDataFrame.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx,1,['avoid'],['avoid']
Safety,"rameters (__msan_param_tls).; ///; /// Origin tracking.; ///; /// MemorySanitizer can track origins (allocation points) of all uninitialized; /// values. This behavior is controlled with a flag (msan-track-origins) and is; /// disabled by default.; ///; /// Origins are 4-byte values created and interpreted by the runtime library.; /// They are stored in a second shadow mapping, one 4-byte value for 4 bytes; /// of application memory. Propagation of origins is basically a bunch of; /// ""select"" instructions that pick the origin of a dirty argument, if an; /// instruction has one.; ///; /// Every 4 aligned, consecutive bytes of application memory have one origin; /// value associated with them. If these bytes contain uninitialized data; /// coming from 2 different allocations, the last store wins. Because of this,; /// MemorySanitizer reports can show unrelated origins, but this is unlikely in; /// practice.; ///; /// Origins are meaningless for fully initialized values, so MemorySanitizer; /// avoids storing origin to memory when a fully initialized value is stored.; /// This way it avoids needless overwriting origin of the 4-byte region on; /// a short (i.e. 1 byte) clean store, and it is also good for performance.; ///; /// Atomic handling.; ///; /// Ideally, every atomic store of application value should update the; /// corresponding shadow location in an atomic way. Unfortunately, atomic store; /// of two disjoint locations can not be done without severe slowdown.; ///; /// Therefore, we implement an approximation that may err on the safe side.; /// In this implementation, every atomically accessed location in the program; /// may only change from (partially) uninitialized to fully initialized, but; /// not the other way around. We load the shadow _after_ the application load,; /// and we store the shadow _before_ the app store. Also, we always store clean; /// shadow (if the application store is atomic). This way, if the store-load; /// pair constitutes a happen",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/MemorySanitizer.cpp:3321,avoid,avoids,3321,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/MemorySanitizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/MemorySanitizer.cpp,1,['avoid'],['avoids']
Safety,"range; * 0..MAXJSAMPLE; the input value may fall somewhat outside this range; * due to noise introduced by quantization, roundoff error, etc. These; * processes are inner loops and need to be as fast as possible. On most; * machines, particularly CPUs with pipelines or instruction prefetch,; * a (subscript-check-less) C table lookup; *		x = sample_range_limit[x];; * is faster than explicit tests; *		if (x < 0) x = 0;; *		else if (x > MAXJSAMPLE) x = MAXJSAMPLE;; * These processes all use a common table prepared by the routine below.; *; * For most steps we can mathematically guarantee that the initial value; * of x is within MAXJSAMPLE+1 of the legal range, so a table running from; * -(MAXJSAMPLE+1) to 2*MAXJSAMPLE+1 is sufficient. But for the initial; * limiting step (just after the IDCT), a wildly out-of-range value is ; * possible if the input data is corrupt. To avoid any chance of indexing; * off the end of memory and getting a bad-pointer trap, we perform the; * post-IDCT limiting thus:; *		x = range_limit[x & MASK];; * where MASK is 2 bits wider than legal sample data, ie 10 bits for 8-bit; * samples. Under normal circumstances this is more than enough range and; * a correct output will be generated; with bogus input data the mask will; * cause wraparound, and we will safely generate a bogus-but-in-range output.; * For the post-IDCT step, we want to convert the data from signed to unsigned; * representation by adding CENTERJSAMPLE at the same time that we limit it.; * So the post-IDCT limiting table ends up looking like this:; * CENTERJSAMPLE,CENTERJSAMPLE+1,...,MAXJSAMPLE,; * MAXJSAMPLE (repeat 2*(MAXJSAMPLE+1)-CENTERJSAMPLE times),; * 0 (repeat 2*(MAXJSAMPLE+1)-CENTERJSAMPLE times),; * 0,1,...,CENTERJSAMPLE-1; * Negative inputs select values from the upper half of the table after; * masking.; *; * We can save some space by overlapping the start of the post-IDCT table; * with the simpler range limiting table. The post-IDCT table begins at; * sample_range_lim",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmaster.c:951,avoid,avoid,951,graf2d/asimage/src/libAfterImage/libjpeg/jdmaster.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmaster.c,1,['avoid'],['avoid']
Safety,"rder to facilitate writing of thread-safe operations, some RDataFrame features such as Foreach(), Define() or \link ROOT::RDF::RResultPtr::OnPartialResult OnPartialResult()\endlink; offer thread-aware counterparts (ForeachSlot(), DefineSlot(), \link ROOT::RDF::RResultPtr::OnPartialResultSlot OnPartialResultSlot()\endlink): their only difference is that they; will pass an extra `slot` argument (an unsigned integer) to the user-defined expression. When calling user-defined code; concurrently, RDataFrame guarantees that different threads will employ different values of the `slot` parameter,; where `slot` will be a number between 0 and `GetNSlots() - 1`.; In other words, within a slot, computation runs sequentially and events are processed sequentially.; Note that the same slot might be associated to different threads over the course of a single event loop, but two threads; will never receive the same slot at the same time.; This extra parameter might facilitate writing safe parallel code by having each thread write/modify a different; processing slot, e.g. a different element of a list. See [here](#generic-actions) for an example usage of ForeachSlot(). ### Parallel execution of multiple RDataFrame event loops; A complex analysis may require multiple separate RDataFrame computation graphs to produce all desired results. This poses the challenge that the; event loops of each computation graph can be parallelized, but the different loops run sequentially, one after the other.; On many-core architectures it might be desirable to run different event loops concurrently to improve resource usage.; ROOT::RDF::RunGraphs() allows running multiple RDataFrame event loops concurrently:; ~~~{.cpp}; ROOT::EnableImplicitMT();; ROOT::RDataFrame df1(""tree1"", ""f1.root"");; ROOT::RDataFrame df2(""tree2"", ""f2.root"");; auto histo1 = df1.Histo1D(""x"");; auto histo2 = df2.Histo1D(""y"");. // just accessing result pointers, the event loops of separate RDataFrames run one after the other; histo1->D",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx:50070,safe,safe,50070,tree/dataframe/src/RDataFrame.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx,1,['safe'],['safe']
Safety,"requests:; ///; /// WebGui.UnixSocket: /path/to/unix/socket; /// WebGui.UnixSocketMode: 0700; ///; /// Typically one used unix sockets together with server mode like `root --web=server:/tmp/root.socket` and; /// then redirect it via ssh tunnel (e.g. using `rootssh`) to client node; ///; /// All incoming requests processed in THttpServer in timer handler with 10 ms timeout.; /// One may decrease value to improve latency or increase value to minimize CPU load; ///; /// WebGui.HttpTimer: 10; ///; /// To processing incoming http requests and websockets, THttpServer allocate 10 threads; /// One have to increase this number if more simultaneous connections are expected:; ///; /// WebGui.HttpThrds: 10; ///; /// One also can configure usage of special thread of processing of http server requests; ///; /// WebGui.HttpThrd: no; ///; /// Extra threads can be used to send data to different clients via websocket (default no); ///; /// WebGui.SenderThrds: no; ///; /// If required, one could change websocket timeouts (default is 10000 ms); ///; /// WebGui.HttpWSTmout: 10000; ///; /// By default, THttpServer created in restricted mode which only allows websocket handlers; /// and processes only very few other related http requests. For security reasons such mode; /// should be always enabled. Only if it is really necessary to process all other kinds; /// of HTTP requests, one could specify no for following parameter (default yes):; ///; /// WebGui.WSOnly: yes; ///; /// In some applications one may need to force longpoll websocket emulations from the beginning,; /// for instance when clients connected via proxys. Although JSROOT should automatically fallback; /// to longpoll engine, one can configure this directly (default no); ///; /// WebGui.WSLongpoll: no; ///; /// Following parameter controls browser max-age caching parameter for files (default 3600); /// When 0 is specified, browser cache will be disabled; ///; /// WebGui.HttpMaxAge: 3600; ///; /// Also one can provide extra UR",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx:2033,timeout,timeouts,2033,gui/webdisplay/src/RWebWindowsManager.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx,1,['timeout'],['timeouts']
Safety,"requires CFITSIO library to be installed on your system. It; /// is currently maintained by NASA/GSFC and can be downloaded from; /// [NASA/GSFC web site](http://fits.gsfc.nasa.gov), as well as documentation.; ///; /// Using this interface is easy and straightforward. There is only 1 class; /// called ""TFITSHDU"" which has several methods to extract data from a; /// FITS file, more specifically, from an HDU within the file. An HDU, or; /// Header Data Unit, is a chunk of data with a header containing several; /// ""keyword = value"" tokens. The header describes the structure of data; /// within the HDU. An HDU can be of two types: an ""image HDU"" or a ""table; /// HDU"". The former can be any kind of multidimensional array of real numbers,; /// by which the name ""image"" may be confusing: you can store an image, but; /// you can also store a N-dimensional data cube. On the other hand, table; /// HDUs are sets of several rows and columns (a.k.a fields) which contain; /// generic data, as strings, real or complex numbers and even arrays.; ///; /// Please have a look to the tutorials ($ROOTSYS/tutorials/fitsio/) to see; /// some examples. IMPORTANT: to run tutorials it is required that; /// you change the current working directory of ROOT (CINT) shell to the; /// tutorials directory. Example:; /// ~~~ {.cpp}; /// root [1] gSystem->ChangeDirectory(""tutorials/fitsio""); /// root [1] .x FITS_tutorial1.C; /// ~~~; /// LIST OF TODO; /// - Support for complex values within data tables; /// - Support for reading arrays from table cells; /// - Support for grouping; ///; /// IMPLEMENTATION NOTES:; ///; /// CFITSIO library uses standard C types ('int', 'long', ...). To avoid; /// confusion, the same types are used internally by the access methods.; /// However, class's fields are ROOT-defined types.; /** \class TFITSHDU; \ingroup fitsio. FITS file interface class. TFITSHDU is a class that allows extracting images and data from FITS files and contains; several methods to manage them.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/fitsio/src/TFITS.cxx:2922,avoid,avoid,2922,graf2d/fitsio/src/TFITS.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/fitsio/src/TFITS.cxx,1,['avoid'],['avoid']
Safety,"ressed data for the; operation to complete. (The size of the uncompressed data may have been; saved by the compressor for this purpose.) The use of Z_FINISH is not; required to perform an inflation in one step. However it may be used to; inform inflate that a faster approach can be used for the single inflate(); call. Z_FINISH also informs inflate to not maintain a sliding window if the; stream completes, which reduces inflate's memory footprint. If the stream; does not complete, either because not all of the stream is provided or not; enough output space is provided, then a sliding window will be allocated and; inflate() can be called again to continue the operation as if Z_NO_FLUSH had; been used. In this implementation, inflate() always flushes as much output as; possible to the output buffer, and always uses the faster approach on the; first call. So the effects of the flush parameter in this implementation are; on the return value of inflate() as noted below, when inflate() returns early; when Z_BLOCK or Z_TREES is used, and when inflate() avoids the allocation of; memory for a sliding window when Z_FINISH is used. If a preset dictionary is needed after this call (see inflateSetDictionary; below), inflate sets strm->adler to the Adler-32 checksum of the dictionary; chosen by the compressor and returns Z_NEED_DICT; otherwise it sets; strm->adler to the Adler-32 checksum of all output produced so far (that is,; total_out bytes) and returns Z_OK, Z_STREAM_END or an error code as described; below. At the end of the stream, inflate() checks that its computed adler32; checksum is equal to that saved by the compressor and returns Z_STREAM_END; only if the checksum is correct. inflate() can decompress and check either zlib-wrapped or gzip-wrapped; deflate data. The header type is detected automatically, if requested when; initializing with inflateInit2(). Any information contained in the gzip; header is not retained, so applications that need that information should; i",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:4776,avoid,avoids,4776,builtins/zlib/zlib.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h,1,['avoid'],['avoids']
Safety,"rger window. windowBits can also be zero to request that inflate use the window size in; the zlib header of the compressed stream. windowBits can also be -8..-15 for raw inflate. In this case, -windowBits; determines the window size. inflate() will then process raw deflate data,; not looking for a zlib or gzip header, not generating a check value, and not; looking for any check values for comparison at the end of the stream. This; is for use with other formats that use the deflate compressed data format; such as zip. Those formats provide their own check values. If a custom; format is developed using the raw deflate format for compressed data, it is; recommended that a check value such as an adler32 or a crc32 be applied to; the uncompressed data as is done in the zlib, gzip, and zip formats. For; most applications, the zlib format should be used as is. Note that comments; above on the use in deflateInit2() applies to the magnitude of windowBits. windowBits can also be greater than 15 for optional gzip decoding. Add; 32 to windowBits to enable zlib and gzip decoding with automatic header; detection, or add 16 to decode only the gzip format (the zlib format will; return a Z_DATA_ERROR). If a gzip stream is being decoded, strm->adler is a; crc32 instead of an adler32. inflateInit2 returns Z_OK if success, Z_MEM_ERROR if there was not enough; memory, Z_VERSION_ERROR if the zlib library version is incompatible with the; version assumed by the caller, or Z_STREAM_ERROR if the parameters are; invalid, such as a null pointer to the structure. msg is set to null if; there is no error message. inflateInit2 does not perform any decompression; apart from possibly reading the zlib header if present: actual decompression; will be done by inflate(). (So next_in and avail_in may be modified, but; next_out and avail_out are unused and unchanged.) The current implementation; of inflateInit2() does not process any header information -- that is; deferred until inflate() is called.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:3098,detect,detection,3098,builtins/zlib/zlib.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h,1,['detect'],['detection']
Safety,"rmat off; /// Register a callback that RDataFrame will execute in each worker thread concurrently on that thread's partial result.; ///; /// \param[in] everyNEvents Frequency at which the callback will be called by each thread, as a number of events processed; /// \param[in] callback A callable with signature `void(unsigned int, Value_t&)` where Value_t is the type of the value contained in this RResultPtr; /// \return this RResultPtr, to allow chaining of OnPartialResultSlot with other calls; ///; /// See `OnPartialResult` for a generic explanation of the callback mechanism.; /// Compared to `OnPartialResult`, this method has two major differences:; /// - all worker threads invoke the callback once every specified number of events. The event count is per-thread,; /// and callback invocation might happen concurrently (i.e. the callback must be thread-safe); /// - the callable must take an extra `unsigned int` parameter corresponding to a multi-thread ""processing slot"":; /// this is a ""helper value"" to simplify writing thread-safe callbacks: different worker threads might invoke the; /// callback concurrently but always with different `slot` numbers.; /// - a value of 0 for everyNEvents indicates the callback must be executed once _per slot_.; ///; /// For example, the following snippet prints out a thread-safe progress bar of the events processed by RDataFrame; /// \code; /// auto c = tdf.Count(); // any action would do, but `Count` is the most lightweight; /// std::string progress;; /// std::mutex bar_mutex;; /// c.OnPartialResultSlot(nEvents / 100, [&progress, &bar_mutex](unsigned int, ULong64_t &) {; /// std::lock_guard<std::mutex> lg(bar_mutex);; /// progress.push_back('#');; /// std::cout << ""\r["" << std::left << std::setw(100) << progress << ']' << std::flush;; /// });; /// std::cout << ""Analysis running..."" << std::endl;; /// *c; // trigger the event loop by accessing an action's result; /// std::cout << ""\nDone!"" << std::endl;; /// \endcode; // clang-format o",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RResultPtr.hxx:874,safe,safe,874,tree/dataframe/inc/ROOT/RResultPtr.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RResultPtr.hxx,2,['safe'],['safe']
Safety,"rmation.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // DependenceAnalysis is an LLVM pass that analyses dependences between memory; // accesses. Currently, it is an (incomplete) implementation of the approach; // described in; //; // Practical Dependence Testing; // Goff, Kennedy, Tseng; // PLDI 1991; //; // There's a single entry point that analyzes the dependence between a pair; // of memory references in a function, returning either NULL, for no dependence,; // or a more-or-less detailed description of the dependence between them.; //; // Currently, the implementation cannot propagate constraints between; // coupled RDIV subscripts and lacks a multi-subscript MIV test.; // Both of these are conservative weaknesses;; // that is, not a source of correctness problems.; //; // Since Clang linearizes some array subscripts, the dependence; // analysis is using SCEV->delinearize to recover the representation of multiple; // subscripts, and thus avoid the more expensive and less precise MIV tests. The; // delinearization is controlled by the flag -da-delinearize.; //; // We should pay some careful attention to the possibility of integer overflow; // in the implementation of the various tests. This could happen with Add,; // Subtract, or Multiply, with both APInt's and SCEV's.; //; // Some non-linear subscript pairs can be handled by the GCD test; // (and perhaps other tests).; // Should explore how often these things occur.; //; // Finally, it seems like certain test cases expose weaknesses in the SCEV; // simplification, especially in the handling of sign and zero extensions.; // It could be useful to spend time exploring these.; //; // Please note that this is work in progress and the interface is subject to; // change.; //; //===----------------------------------------------------------------------===//; // //; // In memory of Ken Kennedy, 1945 - 2007 //; // //; ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp:1219,recover,recover,1219,interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,2,"['avoid', 'recover']","['avoid', 'recover']"
Safety,"rt list(""list"");; TRFunctionImport asformula(""as.formula"");; TRFunctionImport nls(""nls"");; TRFunctionImport confint(""confint"");; TRFunctionImport summary(""summary"");; TRFunctionImport print(""print"");; TRFunctionImport plot(""plot"");; TRFunctionImport lines(""lines"");; TRFunctionImport devnew(""dev.new"");; TRFunctionImport devoff(""dev.off"");; TRFunctionImport min(""min"");; TRFunctionImport max(""max"");; TRFunctionImport seq(""seq"");; TRFunctionImport predict(""predict"");. r<<""options(device='png')"";//enable plot in png file. ////////////////////////; //doing the procedure //; ////////////////////////; TRObject xdata = c(-2,-1.64,-1.33,-0.7,0,0.45,1.2,1.64,2.32,2.9);; TRObject ydata = c(0.699369,0.700462,0.695354,1.03905,1.97389,2.41143,1.91091,0.919576,-0.730975,-1.42001);. TRDataFrame data;; data[""xdata""]=xdata;; data[""ydata""]=ydata;. //fit = nls(ydata ~ p1*cos(p2*xdata) + p2*sin(p1*xdata), start=list(p1=1,p2=0.2)) <- R code; TRObject fit = nls(asformula(""ydata ~ p1*cos(p2*xdata) + p2*sin(p1*xdata)""),Label[""data""]=data, Label[""start""]=list(Label[""p1""]=1,Label[""p2""]=0.2));; print(summary(fit));. print(confint(fit));. devnew(""Fitting Regression"");; plot(xdata,ydata);. TRObject xgrid=seq(min(xdata),max(xdata),Label[""len""]=10);; lines(xgrid,predict(fit,xgrid),Label[""col""] = ""green"");; devoff();; }; \endcode. Output; \code; Formula: ydata ~ p1 * cos(p2 * xdata) + p2 * sin(p1 * xdata). Parameters:; Estimate Std. Error t value Pr(>|t|); p1 1.881851 0.027430 68.61 2.27e-12 ***; p2 0.700230 0.009153 76.51 9.50e-13 ***; ---; Signif. codes: 0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1. Residual standard error: 0.08202 on 8 degrees of freedom. Number of iterations to convergence: 7; Achieved convergence tolerance: 2.189e-06. Waiting for profiling to be done...; 2.5% 97.5%; p1 1.8206081 1.9442365; p2 0.6794193 0.7209843; \endcode; <h2>Users Guide </h2>; <a href=""https://oproject.org/pages/ROOT%20R%20Users%20Guide""> https://oproject.org/pages/ROOT R Users Guide</a><br>. @ingroup R; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/r/inc/TRFunctionImport.h:1892,predict,predict,1892,bindings/r/inc/TRFunctionImport.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/r/inc/TRFunctionImport.h,1,['predict'],['predict']
Safety,"ry checking.; ///; /// Instances of this class wrap a ErrorInfoBase pointer. Failure states; /// are represented by setting the pointer to a ErrorInfoBase subclass; /// instance containing information describing the failure. Success is; /// represented by a null pointer value.; ///; /// Instances of Error also contains a 'Checked' flag, which must be set; /// before the destructor is called, otherwise the destructor will trigger a; /// runtime error. This enforces at runtime the requirement that all Error; /// instances be checked or returned to the caller.; ///; /// There are two ways to set the checked flag, depending on what state the; /// Error instance is in. For Error instances indicating success, it; /// is sufficient to invoke the boolean conversion operator. E.g.:; ///; /// @code{.cpp}; /// Error foo(<...>);; ///; /// if (auto E = foo(<...>)); /// return E; // <- Return E if it is in the error state.; /// // We have verified that E was in the success state. It can now be safely; /// // destroyed.; /// @endcode; ///; /// A success value *can not* be dropped. For example, just calling 'foo(<...>)'; /// without testing the return value will raise a runtime error, even if foo; /// returns success.; ///; /// For Error instances representing failure, you must use either the; /// handleErrors or handleAllErrors function with a typed handler. E.g.:; ///; /// @code{.cpp}; /// class MyErrorInfo : public ErrorInfo<MyErrorInfo> {; /// // Custom error info.; /// };; ///; /// Error foo(<...>) { return make_error<MyErrorInfo>(...); }; ///; /// auto E = foo(<...>); // <- foo returns failure with MyErrorInfo.; /// auto NewE =; /// handleErrors(std::move(E),; /// [](const MyErrorInfo &M) {; /// // Deal with the error.; /// },; /// [](std::unique_ptr<OtherError> M) -> Error {; /// if (canHandle(*M)) {; /// // handle error.; /// return Error::success();; /// }; /// // Couldn't handle this error instance. Pass it up the stack.; /// return Error(std::move(M));; /// });; /// // N",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:1053,safe,safely,1053,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h,1,['safe'],['safely']
Safety,"s. |; | Stats() | Return a TStatistic object filled with the input columns. |; | StdDev() | Return the unbiased standard deviation of the processed column values. |; | Sum() | Return the sum of the values in the column. If the type of the column is inferred, the return type is `double`, the type of the column otherwise. |; | Take() | Extract a column from the dataset as a collection of values, e.g. a `std::vector<float>` for a column of type `float`. |. | **Instant action** | **Description** |; |---------------------|-----------------|; | Foreach() | Execute a user-defined function on each entry. Users are responsible for the thread-safety of this callable when executing with implicit multi-threading enabled. |; | ForeachSlot() | Same as Foreach(), but the user-defined function must take an extra `unsigned int slot` as its first parameter. `slot` will take a different value, `0` to `nThreads - 1`, for each thread of execution. This is meant as a helper in writing thread-safe Foreach() actions when using RDataFrame after ROOT::EnableImplicitMT(). ForeachSlot() works just as well with single-thread execution: in that case `slot` will always be `0`. |; | Snapshot() | Write the processed dataset to disk, in a new TTree and TFile. Custom columns can be saved as well, filtered entries are not saved. Users can specify which columns to save (default is all). Snapshot, by default, overwrites the output file if it already exists. Snapshot() can be made *lazy* setting the appropriate flag in the snapshot options.|. ### Queries. These operations do not modify the dataframe or book computations but simply return information on the RDataFrame object. | **Operation** | **Description** |; |---------------------|-----------------|; | Describe() | Get useful information describing the dataframe, e.g. columns and their types. |; | GetColumnNames() | Get the names of all the available columns of the dataset. |; | GetColumnType() | Return the type of a given column as a string. |; | GetC",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx:9650,safe,safe,9650,tree/dataframe/src/RDataFrame.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx,1,['safe'],['safe']
Safety,"s; /// are intentionally kept very short as they tend to occur in common and; /// widely used contexts.; ///; /// The `seq(A, B)` function produces a sequence of values from `A` to up to; /// (but not including) `B`, i.e., [`A`, `B`), that can be safely iterated over.; /// `seq` supports both integral (e.g., `int`, `char`, `uint32_t`) and enum; /// types. `seq_inclusive(A, B)` produces a sequence of values from `A` to `B`,; /// including `B`.; ///; /// Examples with integral types:; /// ```; /// for (int x : seq(0, 3)); /// outs() << x << "" "";; /// ```; ///; /// Prints: `0 1 2 `.; ///; /// ```; /// for (int x : seq_inclusive(0, 3)); /// outs() << x << "" "";; /// ```; ///; /// Prints: `0 1 2 3 `.; ///; /// Similar to `seq` and `seq_inclusive`, the `enum_seq` and; /// `enum_seq_inclusive` functions produce sequences of enum values that can be; /// iterated over.; /// To enable iteration with enum types, you need to either mark enums as safe; /// to iterate on by specializing `enum_iteration_traits`, or opt into; /// potentially unsafe iteration at every callsite by passing; /// `force_iteration_on_noniterable_enum`.; ///; /// Examples with enum types:; /// ```; /// namespace X {; /// enum class MyEnum : unsigned {A = 0, B, C};; /// } // namespace X; ///; /// template <> struct enum_iteration_traits<X::MyEnum> {; /// static contexpr bool is_iterable = true;; /// };; ///; /// class MyClass {; /// public:; /// enum Safe { D = 3, E, F };; /// enum MaybeUnsafe { G = 1, H = 2, I = 4 };; /// };; ///; /// template <> struct enum_iteration_traits<MyClass::Safe> {; /// static contexpr bool is_iterable = true;; /// };; /// ```; ///; /// ```; /// for (auto v : enum_seq(MyClass::Safe::D, MyClass::Safe::F)); /// outs() << int(v) << "" "";; /// ```; ///; /// Prints: `3 4 `.; ///; /// ```; /// for (auto v : enum_seq(MyClass::MaybeUnsafe::H, MyClass::MaybeUnsafe::I,; /// force_iteration_on_noniterable_enum)); /// outs() << int(v) << "" "";; /// ```; ///; /// Prints: `2 3 `.; ///; //===-----",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Sequence.h:1412,safe,safe,1412,interpreter/llvm-project/llvm/include/llvm/ADT/Sequence.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Sequence.h,2,"['safe', 'unsafe']","['safe', 'unsafe']"
Safety,"safe to activate the AutoSave; /// procedure. Some branches may have buffers holding many entries.; /// If fAutoSave is negative, AutoSave is automatically called by; /// TTree::Fill when the number of bytes generated since the previous; /// AutoSave is greater than -fAutoSave bytes.; /// If fAutoSave is positive, AutoSave is automatically called by; /// TTree::Fill every N entries.; /// This function may also be invoked by the user.; /// Each AutoSave generates a new key on the file.; /// Once the key with the tree header has been written, the previous cycle; /// (if any) is deleted.; ///; /// Note that calling TTree::AutoSave too frequently (or similarly calling; /// TTree::SetAutoSave with a small value) is an expensive operation.; /// You should make tests for your own application to find a compromise; /// between speed and the quantity of information you may loose in case of; /// a job crash.; ///; /// In case your program crashes before closing the file holding this tree,; /// the file will be automatically recovered when you will connect the file; /// in UPDATE mode.; /// The Tree will be recovered at the status corresponding to the last AutoSave.; ///; /// if option contains ""SaveSelf"", gDirectory->SaveSelf() is called.; /// This allows another process to analyze the Tree while the Tree is being filled.; ///; /// if option contains ""FlushBaskets"", TTree::FlushBaskets is called and all; /// the current basket are closed-out and written to disk individually.; ///; /// By default the previous header is deleted after having written the new header.; /// if option contains ""Overwrite"", the previous Tree header is deleted; /// before written the new header. This option is slightly faster, but; /// the default option is safer in case of a problem (disk quota exceeded); /// when writing the new header.; ///; /// The function returns the number of bytes written to the file.; /// if the number of bytes is null, an error has occurred while writing; /// the header to the",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTree.cxx:1206,recover,recovered,1206,tree/tree/src/TTree.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTree.cxx,1,['recover'],['recovered']
Safety,"scape character, if a backslash appears in a; /// filename, it should be escaped as well. (As a special case, $ is escaped; /// as $$, which is the normal Make way to handle the $ character.); /// For compatibility with BSD Make and historical practice, if GNU Make; /// un-escapes characters in a filename but doesn't find a match, it will; /// retry with the unmodified original string.; ///; /// GCC tries to accommodate both Make formats by escaping any space or #; /// characters in the original filename, but not escaping backslashes. The; /// apparent intent is so that filenames with backslashes will be handled; /// correctly by BSD Make, and by GNU Make in its fallback mode of using the; /// unmodified original string; filenames with # or space characters aren't; /// supported by BSD Make at all, but will be handled correctly by GNU Make; /// due to the escaping.; ///; /// A corner case that GCC gets only partly right is when the original filename; /// has a backslash immediately followed by space or #. GNU Make would expect; /// this backslash to be escaped; however GCC escapes the original backslash; /// only when followed by space, not #. It will therefore take a dependency; /// from a directive such as; /// #include ""a\ b\#c.h""; /// and emit it as; /// a\\\ b\\#c.h; /// which GNU Make will interpret as; /// a\ b\; /// followed by a comment. Failing to find this file, it will fall back to the; /// original string, which probably doesn't exist either; in any case it won't; /// find; /// a\ b\#c.h; /// which is the actual filename specified by the include directive.; ///; /// Clang does what GCC does, rather than what GNU Make expects.; ///; /// NMake/Jom has a different set of scary characters, but wraps filespecs in; /// double-quotes to avoid misinterpreting them; see; /// https://msdn.microsoft.com/en-us/library/dd9y37ha.aspx for NMake info,; /// https://msdn.microsoft.com/en-us/library/windows/desktop/aa365247(v=vs.85).aspx; /// for Windows file-naming info.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/DependencyFile.cpp:2343,avoid,avoid,2343,interpreter/llvm-project/clang/lib/Frontend/DependencyFile.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/DependencyFile.cpp,1,['avoid'],['avoid']
Safety,"se information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file contains the implementation of the FastISel class.; //; // ""Fast"" instruction selection is designed to emit very poor code quickly.; // Also, it is not designed to be able to do much lowering, so most illegal; // types (e.g. i64 on 32-bit targets) and operations are not supported. It is; // also not intended to be able to do much optimization, except in a few cases; // where doing optimizations reduces overall compile time. For example, folding; // constants into immediate fields is often done, because it's cheap and it; // reduces the number of instructions later phases have to examine.; //; // ""Fast"" instruction selection is able to fail gracefully and transfer; // control to the SelectionDAG selector for operations that it doesn't; // support. In many cases, this allows us to avoid duplicating a lot of; // the complicated lowering logic that SelectionDAG currently has.; //; // The intended use for ""fast"" instruction selection is ""-O0"" mode; // compilation, where the quality of the generated code is irrelevant when; // weighed against the speed at which the code can be generated. Also,; // at -O0, the LLVM optimizers are not running, and this makes the; // compile time of codegen a much higher portion of the overall compile; // time. Despite its limitations, ""fast"" instruction selection is able to; // handle enough code on its own to provide noticeable overall speedups; // in -O0 compiles.; //; // Basic operations are supported in a target-independent way, by reading; // the same instruction descriptions that the SelectionDAG selector reads,; // and identifying simple arithmetic operations that can be directly selected; // from simple operators. More complicated operations currently require; // target-specific code.; //; //===--------------------------------------------------------------",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp:1183,avoid,avoid,1183,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp,1,['avoid'],['avoid']
Safety,"se.; //; // Consequences of this GPU feature:; // - memory is limited and exceeding it halts compilation; // - a global accessed by one kernel exists independent of other kernels; // - a global exists independent of simultaneous execution of the same kernel; // - the address of the global may be different from different kernels as they; // do not alias, which permits only allocating variables they use; // - if the address is allowed to differ, functions need help to find it; //; // Uses from kernels are implemented here by grouping them in a per-kernel; // struct instance. This duplicates the variables, accurately modelling their; // aliasing properties relative to a single global representation. It also; // permits control over alignment via padding.; //; // Uses from functions are more complicated and the primary purpose of this; // IR pass. Several different lowering are chosen between to meet requirements; // to avoid allocating any LDS where it is not necessary, as that impacts; // occupancy and may fail the compilation, while not imposing overhead on a; // feature whose primary advantage over global memory is performance. The basic; // design goal is to avoid one kernel imposing overhead on another.; //; // Implementation.; //; // LDS variables with constant annotation or non-undef initializer are passed; // through unchanged for simplification or error diagnostics in later passes.; // Non-undef initializers are not yet implemented for LDS.; //; // LDS variables that are always allocated at the same address can be found; // by lookup at that address. Otherwise runtime information/cost is required.; //; // The simplest strategy possible is to group all LDS variables in a single; // struct and allocate that struct in every kernel such that the original; // variables are always at the same address. LDS is however a limited resource; // so this strategy is unusable in practice. It is not implemented here.; //; // Strategy | Precise allocation | Zero runtime cost |",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp:2234,avoid,avoid,2234,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp,1,['avoid'],['avoid']
Safety,"sed; /// - if the Postscript or PDF file name finishes with "")"" and the file has been opened; /// with ""("", the file is closed.; ///; /// Example:; /// ~~~ {.cpp}; /// {; /// TCanvas c1(""c1"");; /// h1.Draw();; /// c1.Print(""c1.ps(""); //write canvas and keep the ps file open; /// h2.Draw();; /// c1.Print(""c1.ps""); canvas is added to ""c1.ps""; /// h3.Draw();; /// c1.Print(""c1.ps)""); canvas is added to ""c1.ps"" and ps file is closed; /// }; /// ~~~; /// In the previous example replacing ""ps"" by ""pdf"" will create a multi-pages PDF file.; ///; /// Note that the following sequence writes the canvas to ""c1.ps"" and closes the ps file.:; /// ~~~ {.cpp}; /// TCanvas c1(""c1"");; /// h1.Draw();; /// c1.Print(""c1.ps"");; /// ~~~; /// The `TCanvas::Print(""file.ps("")` mechanism is very useful, but it can be; /// a little inconvenient to have the action of opening/closing a file; /// being atomic with printing a page. Particularly if pages are being; /// generated in some loop one needs to detect the special cases of first; /// and last page and then munge the argument to Print() accordingly.; ///; /// The ""["" and ""]"" can be used instead of ""("" and "")"".; ///; /// Example:; /// ~~~ {.cpp}; /// c1.Print(""file.ps[""); // No actual print, just open file.ps; /// for (int i=0; i<10; ++i) {; /// // fill canvas for context i; /// // ...; ///; /// c1.Print(""file.ps""); // actually print canvas to file; /// }// end loop; /// c1.Print(""file.ps]""); // No actual print, just close.; /// ~~~; /// As before, the same macro is valid for PDF files.; ///; /// It is possible to print a canvas into an animated GIF file by specifying the; /// file name as ""myfile.gif+"" or ""myfile.gif+NN"", where NN*10ms is delay; /// between the subimages' display. If NN is omitted the delay between; /// subimages is zero. Each picture is added in the animation thanks to a loop; /// similar to the following one:; /// ~~~ {.cpp}; /// for (int i=0; i<10; ++i) {; /// // fill canvas for context i; /// // ...; ///; /// c1.Print(""fi",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:4973,detect,detect,4973,graf2d/gpad/src/TPad.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx,1,['detect'],['detect']
Safety,"specify range of http ports, which can be used:; ///; /// WebGui.HttpPortMin: 8800; /// WebGui.HttpPortMax: 9800; ///; /// By default range [8800..9800] is used; ///; /// One also can bind HTTP server socket to loopback address,; /// In that case only connection from localhost will be available:; ///; /// WebGui.HttpLoopback: yes; ///; /// Or one could specify hostname which should be used for binding of server socket; ///; /// WebGui.HttpBind: hostname | ipaddress; ///; /// To use secured protocol, following parameter should be specified; ///; /// WebGui.UseHttps: yes; /// WebGui.ServerCert: sertificate_filename.pem; ///; /// Alternatively, one can specify unix socket to handle requests:; ///; /// WebGui.UnixSocket: /path/to/unix/socket; /// WebGui.UnixSocketMode: 0700; ///; /// Typically one used unix sockets together with server mode like `root --web=server:/tmp/root.socket` and; /// then redirect it via ssh tunnel (e.g. using `rootssh`) to client node; ///; /// All incoming requests processed in THttpServer in timer handler with 10 ms timeout.; /// One may decrease value to improve latency or increase value to minimize CPU load; ///; /// WebGui.HttpTimer: 10; ///; /// To processing incoming http requests and websockets, THttpServer allocate 10 threads; /// One have to increase this number if more simultaneous connections are expected:; ///; /// WebGui.HttpThrds: 10; ///; /// One also can configure usage of special thread of processing of http server requests; ///; /// WebGui.HttpThrd: no; ///; /// Extra threads can be used to send data to different clients via websocket (default no); ///; /// WebGui.SenderThrds: no; ///; /// If required, one could change websocket timeouts (default is 10000 ms); ///; /// WebGui.HttpWSTmout: 10000; ///; /// By default, THttpServer created in restricted mode which only allows websocket handlers; /// and processes only very few other related http requests. For security reasons such mode; /// should be always enabled. Only if it is ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx:1391,timeout,timeout,1391,gui/webdisplay/src/RWebWindowsManager.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx,1,['timeout'],['timeout']
Safety,"ssed.; /// * `void Finalize()`: this method is called at the end of the event loop. Commonly used to finalize the contents of the result.; /// * `std::string GetActionName()`: it returns a string identifier for this type of action that RDataFrame will use in; /// diagnostics, SaveGraph(), etc.; ///; /// ### Optional methods; ///; /// If these methods are implemented they enable extra functionality as per the description below.; ///; /// * `Result_t &PartialUpdate(unsigned int slot)`: if present, it must return the value of the partial result of this action for the given 'slot'.; /// Different threads might call this method concurrently, but will do so with different 'slot' numbers.; /// RDataFrame leverages this method to implement RResultPtr::OnPartialResult().; /// * `ROOT::RDF::SampleCallback_t GetSampleCallback()`: if present, it must return a callable with the; /// appropriate signature (see ROOT::RDF::SampleCallback_t) that will be invoked at the beginning of the processing; /// of every sample, as in DefinePerSample().; /// * `Helper MakeNew(void *newResult)`: if implemented, it enables varying the action's result with VariationsFor(). It takes a; /// type-erased new result that can be safely cast to a `std::shared_ptr<Result_t> *` (a pointer to shared pointer) and should; /// be used as the action's output result.; ///; /// In case Book is called without specifying column types as template arguments, corresponding typed code will be just-in-time compiled; /// by RDataFrame. In that case the Helper class needs to be known to the ROOT interpreter.; ///; /// This action is *lazy*: upon invocation of this method the calculation is booked but not executed. Also see RResultPtr.; ///; /// ### Examples; /// See [this tutorial](https://root.cern/doc/master/df018__customActions_8C.html) for an example implementation of an action helper.; ///; /// It is also possible to inspect the code used by built-in RDataFrame actions at ActionHelpers.hxx.; ///; // clang-format on",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RDF/RInterface.hxx:4175,safe,safely,4175,tree/dataframe/inc/ROOT/RDF/RInterface.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RDF/RInterface.hxx,1,['safe'],['safely']
Safety,"ssure, the best load latencies are hidden; //; // Moreover some specifities (like the fact a lot of instructions in the shader; // have few dependencies) makes the generic scheduler have some unpredictable; // behaviours. For example when register pressure becomes high, it can either; // manage to prevent register pressure from going too high, or it can; // increase register pressure even more than if it hadn't taken register; // pressure into account.; //; // Also some other bad behaviours are generated, like loading at the beginning; // of the shader a constant in VGPR you won't need until the end of the shader.; //; // The scheduling problem for SI can distinguish three main parts:; // . Hiding high latencies (texture sampling, etc); // . Hiding low latencies (SGPR constant loading, etc); // . Keeping register usage low for better latency hiding and general; // performance; //; // Some other things can also affect performance, but are hard to predict; // (cache usage, the fact the HW can issue several instructions from different; // wavefronts if different types, etc); //; // This scheduler tries to solve the scheduling problem by dividing it into; // simpler sub-problems. It divides the instructions into blocks, schedules; // locally inside the blocks where it takes care of low latencies, and then; // chooses the order of the blocks by taking care of high latencies.; // Dividing the instructions into blocks helps control keeping register; // usage low.; //; // First the instructions are put into blocks.; // We want the blocks help control register usage and hide high latencies; // later. To help control register usage, we typically want all local; // computations, when for example you create a result that can be consumed; // right away, to be contained in a block. Block inputs and outputs would; // typically be important results that are needed in several locations of; // the shader. Since we do want blocks to help hide high latencies, we want; // the instruction",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIMachineScheduler.cpp:1551,predict,predict,1551,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIMachineScheduler.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIMachineScheduler.cpp,1,['predict'],['predict']
Safety,"std::endl;; * pipe << buf.str() << BidirMMapPipe::flush;; * if (!pipe) return -1;; * if (pipe.eof()) break;; * }; * // tell parent we're done; * pipe << """" << BidirMMapPipe::flush;; * // wait for parent to acknowledge; * std::string s;; * pipe >> s;; * pipe.close();; * return 0;; * }; *; * // function to spawn a child; * BidirMMapPipe* spawnChild(int (*childexec)(BidirMMapPipe&)); * {; * BidirMMapPipe *p = new BidirMMapPipe();; * if (p->isChild()) {; * int retVal = childexec(*p);; * delete p;; * std::exit(retVal);; * }; * return p;; * }; *; * int main(); * {; * typedef BidirMMapPipe::PollEntry PollEntry;; * // poll data structure; * BidirMMapPipe::PollVector pipes;; * pipes.reserve(3);; * // spawn children; * for (int i = 0; i < 3; ++i) {; * pipes.push_back(PollEntry(spawnChild(randomchild),; * BidirMMapPipe::Readable));; * }; * // while at least some children alive; * while (!pipes.empty()) {; * // poll, wait until status change (infinite timeout); * int npipes = BidirMMapPipe::poll(pipes, -1);; * // scan for pipes with changed status; * for (std::vector<PollEntry>::iterator it = pipes.begin();; * npipes && pipes.end() != it; ) {; * if (!it->revents) {; * // unchanged, next one; * ++it;; * continue;; * }; * --npipes; // maybe we can stop early...; * // read from pipes which are readable; * if (it->revents & BidirMMapPipe::Readable) {; * std::string s;; * *(it->pipe) >> s;; * if (!s.empty()) {; * std::cout << ""[PARENT]: Read from pipe "" <<; * it->pipe << "": "" << s << std::endl;; * ++it;; * continue;; * } else {; * // child is shutting down...; * *(it->pipe) << """" << BidirMMapPipe::flush;; * goto childcloses;; * }; * }; * // retire pipes with error or end-of-file condition; * if (it->revents & (BidirMMapPipe::Error |; * BidirMMapPipe::EndOfFile |; * BidirMMapPipe::Invalid)) {; * std::cout << ""[PARENT]: Error on pipe "" <<; * it->pipe << "" revents "" << it->revents <<; * std::endl;; * childcloses:; * std::cout << ""[PARENT]:\tchild exit status: "" <<; * it->pipe->close() ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h:3159,timeout,timeout,3159,roofit/roofitcore/src/BidirMMapPipe.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h,1,['timeout'],['timeout']
Safety,"t from all of its fields and bases.; // * __declspec(align) on bitfields has the effect of changing the bitfield's; // alignment instead of its required alignment. This is the only known way; // to make the alignment of a struct bigger than 8. Interestingly enough; // this alignment is also immune to the effects of #pragma pack and can be; // used to create structures with large alignment under #pragma pack.; // However, because it does not impact required alignment, such a structure,; // when used as a field or base, will not be aligned if #pragma pack is; // still active at the time of use.; //; // Known incompatibilities:; // * all: #pragma pack between fields in a record; // * 2010 and back: If the last field in a record is a bitfield, every object; // laid out after the record will have extra padding inserted before it. The; // extra padding will have size equal to the size of the storage class of the; // bitfield. 0 sized bitfields don't exhibit this behavior and the extra; // padding can be avoided by adding a 0 sized bitfield after the non-zero-; // sized bitfield.; // * 2012 and back: In 64-bit mode, if the alignment of a record is 16 or; // greater due to __declspec(align()) then a second layout phase occurs after; // The locations of the vf and vb pointers are known. This layout phase; // suffers from the ""last field is a bitfield"" bug in 2010 and results in; // _every_ field getting padding put in front of it, potentially including the; // vfptr, leaving the vfprt at a non-zero location which results in a fault if; // anything tries to read the vftbl. The second layout phase also treats; // bitfields as separate entities and gives them each storage rather than; // packing them. Additionally, because this phase appears to perform a; // (an unstable) sort on the members before laying them out and because merged; // bitfields have the same address, the bitfields end up in whatever order; // the sort left them in, a behavior we could never hope to replicate.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:5106,avoid,avoided,5106,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,1,['avoid'],['avoided']
Safety,"t off; /// Register a callback that RDataFrame will execute in each worker thread concurrently on that thread's partial result.; ///; /// \param[in] everyNEvents Frequency at which the callback will be called by each thread, as a number of events processed; /// \param[in] callback A callable with signature `void(unsigned int, Value_t&)` where Value_t is the type of the value contained in this RResultPtr; /// \return this RResultPtr, to allow chaining of OnPartialResultSlot with other calls; ///; /// See `OnPartialResult` for a generic explanation of the callback mechanism.; /// Compared to `OnPartialResult`, this method has two major differences:; /// - all worker threads invoke the callback once every specified number of events. The event count is per-thread,; /// and callback invocation might happen concurrently (i.e. the callback must be thread-safe); /// - the callable must take an extra `unsigned int` parameter corresponding to a multi-thread ""processing slot"":; /// this is a ""helper value"" to simplify writing thread-safe callbacks: different worker threads might invoke the; /// callback concurrently but always with different `slot` numbers.; /// - a value of 0 for everyNEvents indicates the callback must be executed once _per slot_.; ///; /// For example, the following snippet prints out a thread-safe progress bar of the events processed by RDataFrame; /// \code; /// auto c = tdf.Count(); // any action would do, but `Count` is the most lightweight; /// std::string progress;; /// std::mutex bar_mutex;; /// c.OnPartialResultSlot(nEvents / 100, [&progress, &bar_mutex](unsigned int, ULong64_t &) {; /// std::lock_guard<std::mutex> lg(bar_mutex);; /// progress.push_back('#');; /// std::cout << ""\r["" << std::left << std::setw(100) << progress << ']' << std::flush;; /// });; /// std::cout << ""Analysis running..."" << std::endl;; /// *c; // trigger the event loop by accessing an action's result; /// std::cout << ""\nDone!"" << std::endl;; /// \endcode; // clang-format on",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RResultPtr.hxx:1338,safe,safe,1338,tree/dataframe/inc/ROOT/RResultPtr.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RResultPtr.hxx,1,['safe'],['safe']
Safety,"ta structure corresponding to this object is serialized.; /// The corresponding buffer is written to this directory; /// with an associated key with name ""name"".; ///; /// Writing an object to a file involves the following steps:; /// - Creation of a support TKey object in the directory. The TKey object; /// creates a TBuffer object.; /// - The TBuffer object is filled via the class::Streamer function.; /// - If the file is compressed (default) a second buffer is created to hold; /// the compressed buffer.; /// - Reservation of the corresponding space in the file by looking in the; /// TFree list of free blocks of the file.; /// - The buffer is written to the file.; ///; /// By default, the buffersize will be taken from the average buffer size; /// of all objects written to the current file so far.; /// Use TDirectoryFile::SetBufferSize to force a given buffer size.; ///; /// If a name is specified, it will be the name of the key.; /// If name is not given, the name of the key will be the name as returned; /// by obj->GetName().; ///; /// The option can be a combination of:; /// - ""SingleKey""; /// - ""Overwrite""; /// - ""WriteDelete""; /// Using the ""Overwrite"" option a previous key with the same name is; /// overwritten. The previous key is deleted before writing the new object.; /// Using the ""WriteDelete"" option a previous key with the same name is; /// deleted only after the new object has been written. This option; /// is safer than kOverwrite but it is slower.; /// The ""SingleKey"" option is only used by TCollection::Write() to write; /// a container with a single key instead of each object in the container; /// with its own key.; /// An object is read from this directory via TDirectoryFile::Get.; /// The function returns the total number of bytes written to the directory.; /// It returns 0 if the object cannot be written.; ///; /// WARNING: avoid special characters like '^','$','.' in the name as they; /// are used by the regular expression parser (see TRegexp).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TDirectoryFile.cxx:1586,safe,safer,1586,io/io/src/TDirectoryFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TDirectoryFile.cxx,2,"['avoid', 'safe']","['avoid', 'safer']"
Safety,"tain statistics on how many entries have been accepted and rejected by the filters. See the section on [named filters](#named-filters-and-cutflow-reports) for a more detailed explanation. The method returns a ROOT::RDF::RCutFlowReport instance which can be queried programmatically to get information about the effects of the individual cuts. |; | Stats() | Return a TStatistic object filled with the input columns. |; | StdDev() | Return the unbiased standard deviation of the processed column values. |; | Sum() | Return the sum of the values in the column. If the type of the column is inferred, the return type is `double`, the type of the column otherwise. |; | Take() | Extract a column from the dataset as a collection of values, e.g. a `std::vector<float>` for a column of type `float`. |. | **Instant action** | **Description** |; |---------------------|-----------------|; | Foreach() | Execute a user-defined function on each entry. Users are responsible for the thread-safety of this callable when executing with implicit multi-threading enabled. |; | ForeachSlot() | Same as Foreach(), but the user-defined function must take an extra `unsigned int slot` as its first parameter. `slot` will take a different value, `0` to `nThreads - 1`, for each thread of execution. This is meant as a helper in writing thread-safe Foreach() actions when using RDataFrame after ROOT::EnableImplicitMT(). ForeachSlot() works just as well with single-thread execution: in that case `slot` will always be `0`. |; | Snapshot() | Write the processed dataset to disk, in a new TTree and TFile. Custom columns can be saved as well, filtered entries are not saved. Users can specify which columns to save (default is all). Snapshot, by default, overwrites the output file if it already exists. Snapshot() can be made *lazy* setting the appropriate flag in the snapshot options.|. ### Queries. These operations do not modify the dataframe or book computations but simply return information on the RDataFrame obje",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx:9306,safe,safety,9306,tree/dataframe/src/RDataFrame.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx,1,['safe'],['safety']
Safety,"ted events, a counter incremented only up to a; /// certain point, a mean over a subset of the events and so forth).; ///; /// Callbacks can be used e.g. to inspect partial results of the analysis while the event loop is running. For; /// example one can draw an up-to-date version of a result histogram every 100 entries like this:; /// \code{.cpp}; /// auto h = tdf.Histo1D(""x"");; /// TCanvas c(""c"",""x hist"");; /// h.OnPartialResult(100, [&c](TH1D &h_) { c.cd(); h_.Draw(); c.Update(); });; /// h->Draw(); // event loop runs here, this `Draw` is executed after the event loop is finished; /// \endcode; ///; /// A value of 0 for everyNEvents indicates the callback must be executed only once, before running the event loop.; /// A conveniece definition `kOnce` is provided to make this fact more expressive in user code (see snippet below).; /// Multiple callbacks can be registered with the same RResultPtr (i.e. results of RDataFrame actions) and will; /// be executed sequentially. Callbacks are executed in the order they were registered.; /// The type of the value contained in a RResultPtr is also available as RResultPtr<T>::Value_t, e.g.; /// \code{.cpp}; /// auto h = tdf.Histo1D(""x"");; /// // h.kOnce is 0; /// // decltype(h)::Value_t is TH1D; /// \endcode; ///; /// When implicit multi-threading is enabled, the callback:; /// - will never be executed by multiple threads concurrently: it needs not be thread-safe. For example the snippet; /// above that draws the partial histogram on a canvas works seamlessly in multi-thread event loops.; /// - will always be executed ""everyNEvents"": partial results will ""contain"" that number of events more from; /// one call to the next; /// - might be executed by a different worker thread at different times: the value of `std::this_thread::get_id()`; /// might change between calls; ///; /// To register a callback that is called by _each_ worker thread (concurrently) every N events one can use; /// OnPartialResultSlot().; // clang-format on",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RResultPtr.hxx:2179,safe,safe,2179,tree/dataframe/inc/ROOT/RResultPtr.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RResultPtr.hxx,1,['safe'],['safe']
Safety,"terfaces.; In less streamlined applications such as analysis, predicting the branches which; will be read can be difficult. In such cases, ROOT I/O flags used branches; automatically when a branch buffer is read during the learning phase. In the examples below, portions of analysis code are shown.; The few statements involving the TreeCache are marked with `//<<<`. ### ROOT::RDataFrame and TTreeReader Examples. If you use RDataFrame or TTreeReader, the system will automatically cache the; best set of branches: no action is required by the user. ### TTree::Draw Example. The TreeCache is automatically used by TTree::Draw. The method knows; which branches are used in the query and it puts automatically these branches; in the cache. The entry range is also inferred automatically. ### TTree::Process and TSelectors Examples. The user must enable the cache and tell the system which branches to cache; and also specify the entry range. It is important to specify the entry range; in case only a subset of the events is processed to avoid wasteful caching. #### Reading all branches. ~~~ {.cpp}; TTree *T;; f->GetObject(T, ""mytree"");; auto nentries = T->GetEntries();; auto cachesize = 10000000U; // 10 MBytes; T->SetCacheSize(cachesize); //<<<; T->AddBranchToCache(""*"", true); //<<< add all branches to the cache; T->Process(""myselector.C+"");; // In the TSelector::Process function we read all branches; T->GetEntry(i);; // ... Here the entry is processed; ~~~. #### Reading a subset of all branches. In the Process function we read a subset of the branches.; Only the branches used in the first entry will be put in the cache; ~~~ {.cpp}; TTree *T;; f->GetObject(T, ""mytree"");; // We want to process only the 200 first entries; auto nentries=200UL;; auto efirst = 0;; auto elast = efirst+nentries;; auto cachesize = 10000000U; // 10 MBytes; TTreeCache::SetLearnEntries(1); //<<< we can take the decision after 1 entry; T->SetCacheSize(cachesize); //<<<; T->SetCacheEntryRange(efirst,elast); //<",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTreeCache.cxx:7341,avoid,avoid,7341,tree/tree/src/TTreeCache.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTreeCache.cxx,1,['avoid'],['avoid']
Safety,"th LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass reassociates n-ary add expressions and eliminates the redundancy; // exposed by the reassociation.; //; // A motivating example:; //; // void foo(int a, int b) {; // bar(a + b);; // bar((a + 2) + b);; // }; //; // An ideal compiler should reassociate (a + 2) + b to (a + b) + 2 and simplify; // the above code to; //; // int t = a + b;; // bar(t);; // bar(t + 2);; //; // However, the Reassociate pass is unable to do that because it processes each; // instruction individually and believes (a + 2) + b is the best form according; // to its rank system.; //; // To address this limitation, NaryReassociate reassociates an expression in a; // form that reuses existing instructions. As a result, NaryReassociate can; // reassociate (a + 2) + b in the example to (a + b) + 2 because it detects that; // (a + b) is computed before.; //; // NaryReassociate works as follows. For every instruction in the form of (a +; // b) + c, it checks whether a + c or b + c is already computed by a dominating; // instruction. If so, it then reassociates (a + b) + c into (a + c) + b or (b +; // c) + a and removes the redundancy accordingly. To efficiently look up whether; // an expression is computed before, we store each instruction seen and its SCEV; // into an SCEV-to-instruction map.; //; // Although the algorithm pattern-matches only ternary additions, it; // automatically handles many >3-ary expressions by walking through the function; // in the depth-first order. For example, given; //; // (a + c) + d; // ((a + b) + c) + d; //; // NaryReassociate first rewrites (a + b) + c to (a + c) + b, and then rewrites; // ((a + c) + b) + d into ((a + c) + d) + b.; //; // Finally, the above dominator-based algorithm may need to be run multiple; // iterations befo",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/NaryReassociate.h:1177,detect,detects,1177,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/NaryReassociate.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/NaryReassociate.h,2,['detect'],['detects']
Safety,"that this routine will not parse ::new or; /// ::delete; it will just leave them in the token stream.; ///; /// '::'[opt] nested-name-specifier; /// '::'; ///; /// nested-name-specifier:; /// type-name '::'; /// namespace-name '::'; /// nested-name-specifier identifier '::'; /// nested-name-specifier 'template'[opt] simple-template-id '::'; ///; ///; /// \param SS the scope specifier that will be set to the parsed; /// nested-name-specifier (or empty); ///; /// \param ObjectType if this nested-name-specifier is being parsed following; /// the ""."" or ""->"" of a member access expression, this parameter provides the; /// type of the object whose members are being accessed.; ///; /// \param ObjectHadErrors if this unqualified-id occurs within a member access; /// expression, indicates whether the original subexpressions had any errors.; /// When true, diagnostics for missing 'template' keyword will be supressed.; ///; /// \param EnteringContext whether we will be entering into the context of; /// the nested-name-specifier after parsing it.; ///; /// \param MayBePseudoDestructor When non-NULL, points to a flag that; /// indicates whether this nested-name-specifier may be part of a; /// pseudo-destructor name. In this case, the flag will be set false; /// if we don't actually end up parsing a destructor name. Moreover,; /// if we do end up determining that we are parsing a destructor name,; /// the last component of the nested-name-specifier is not parsed as; /// part of the scope specifier.; ///; /// \param IsTypename If \c true, this nested-name-specifier is known to be; /// part of a type name. This is used to improve error recovery.; ///; /// \param LastII When non-NULL, points to an IdentifierInfo* that will be; /// filled in with the leading identifier in the last component of the; /// nested-name-specifier, if any.; ///; /// \param OnlyNamespace If true, only considers namespaces in lookup.; ///; ///; /// \returns true if there was an error parsing a scope specifier",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseExprCXX.cpp:1829,recover,recovery,1829,interpreter/llvm-project/clang/lib/Parse/ParseExprCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseExprCXX.cpp,1,['recover'],['recovery']
Safety,"the formula; /// given as a parameter.; /// - `Sum$(formula )` : return the sum of the value of the elements of the; /// formula given as a parameter. For example the mean for all the elements in; /// one entry can be calculated with: `Sum$(formula )/Length$(formula )`; /// - `Min$(formula )` : return the minimum (within one TTree entry) of the value of the; /// elements of the formula given as a parameter.; /// - `Max$(formula )` : return the maximum (within one TTree entry) of the value of the; /// elements of the formula given as a parameter.; /// - `MinIf$(formula,condition)`; /// - `MaxIf$(formula,condition)` : return the minimum (maximum) (within one TTree entry); /// of the value of the elements of the formula given as a parameter; /// if they match the condition. If no element matches the condition,; /// the result is zero. To avoid the resulting peak at zero, use the; /// pattern:; /// ~~~ {.cpp}; /// tree->Draw(""MinIf$(formula,condition)"",""condition"");; /// ~~~; /// which will avoid calculation `MinIf$` for the entries that have no match; /// for the condition.; /// - `Alt$(primary,alternate)` : return the value of ""primary"" if it is available; /// for the current iteration otherwise return the value of ""alternate"".; /// For example, with arr1[3] and arr2[2]; /// ~~~ {.cpp}; /// tree->Draw(""arr1+Alt$(arr2,0)"");; /// ~~~; /// will draw arr1[0]+arr2[0] ; arr1[1]+arr2[1] and arr1[2]+0; /// Or with a variable size array arr3; /// ~~~ {.cpp}; /// tree->Draw(""Alt$(arr3[0],0)+Alt$(arr3[1],0)+Alt$(arr3[2],0)"");; /// ~~~; /// will draw the sum arr3 for the index 0 to min(2,actual_size_of_arr3-1); /// As a comparison; /// ~~~ {.cpp}; /// tree->Draw(""arr3[0]+arr3[1]+arr3[2]"");; /// ~~~; /// will draw the sum arr3 for the index 0 to 2 only if the; /// actual_size_of_arr3 is greater or equal to 3.; /// Note that the array in 'primary' is flattened/linearized thus using; /// `Alt$` with multi-dimensional arrays of different dimensions in unlikely; /// to yield the expect",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTree.cxx:17002,avoid,avoid,17002,tree/tree/src/TTree.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTree.cxx,1,['avoid'],['avoid']
Safety,"this version of the library. The default value is 15 if inflateInit is used; instead. windowBits must be greater than or equal to the windowBits value; provided to deflateInit2() while compressing, or it must be equal to 15 if; deflateInit2() was not used. If a compressed stream with a larger window; size is given as input, inflate() will return with the error code; Z_DATA_ERROR instead of trying to allocate a larger window. windowBits can also be -8..-15 for raw inflate. In this case, -windowBits; determines the window size. inflate() will then process raw deflate data,; not looking for a zlib or gzip header, not generating a check value, and not; looking for any check values for comparison at the end of the stream. This; is for use with other formats that use the deflate compressed data format; such as zip. Those formats provide their own check values. If a custom; format is developed using the raw deflate format for compressed data, it is; recommended that a check value such as an adler32 or a crc32 be applied to; the uncompressed data as is done in the zlib, gzip, and zip formats. For; most applications, the zlib format should be used as is. Note that comments; above on the use in deflateInit2() applies to the magnitude of windowBits. windowBits can also be greater than 15 for optional gzip decoding. Add; 32 to windowBits to enable zlib and gzip decoding with automatic header; detection, or add 16 to decode only the gzip format (the zlib format will; return a Z_DATA_ERROR). If a gzip stream is being decoded, strm->adler is; a crc32 instead of an adler32. inflateInit2 returns Z_OK if success, Z_MEM_ERROR if there was not enough; memory, Z_STREAM_ERROR if a parameter is invalid (such as a null strm). msg; is set to null if there is no error message. inflateInit2 does not perform; any decompression apart from reading the zlib header if present: this will; be done by inflate(). (So next_in and avail_in may be modified, but next_out; and avail_out are unchanged.); */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:2980,detect,detection,2980,graf2d/asimage/src/libAfterImage/zlib/zlib.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h,1,['detect'],['detection']
Safety,"thors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooWorkspace.cxx; \class RooWorkspace; \ingroup Roofitcore. Persistable container for RooFit projects. A workspace; can contain and own variables, p.d.f.s, functions and datasets. All objects; that live in the workspace are owned by the workspace. The `import()` method; enforces consistency of objects upon insertion into the workspace (e.g. no; duplicate object with the same name are allowed) and makes sure all objects; in the workspace are connected to each other. Easy accessor methods like; `pdf()`, `var()` and `data()` allow to refer to the contents of the workspace by; object name. The entire RooWorkspace can be saved into a ROOT TFile and organises; the consistent streaming of its contents without duplication.; If a RooWorkspace contains custom classes, i.e. classes not in the; ROOT distribution, portability of workspaces can be enhanced by; storing the source code of those classes in the workspace as well.; This process is also organized by the workspace through the; `importClassCode()` method. ### Seemingly random crashes when reading large workspaces; When reading or loading workspaces with deeply nested PDFs, one can encounter; ouf-of-memory errors if the stack size is too small. This manifests in crashes; at seemingly random locations, or in the process silently ending.; Unfortunately, ROOT neither recover from this situation, nor warn or give useful; instructions. When suspecting to have run out of stack memory, check; ```; ulimit -s; ```; and try reading again.; **/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooWorkspace.cxx:1986,recover,recover,1986,roofit/roofitcore/src/RooWorkspace.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooWorkspace.cxx,1,['recover'],['recover']
Safety,"tically invoke a script GetWebHistogram.C via the interpreter. An example of a GetWebHistogram.C script is shown below; ~~~ {.cpp}; void GetWebHistogram() {; TFile *f= TFile::Open(""http://root.cern/files/pippa.root"");; f->cd(""DM/CJ"");; TH1 *h6 = (TH1*)gDirectory->Get(""h6"");; h6->SetDirectory(0);; delete f;; TRef::SetStaticObject(h6);; }; ~~~; In the above example, a call to fWebHistogram.GetObject() executes the; script with the function GetWebHistogram. This script connects a file; with histograms: pippa.root on the ROOT Web site and returns the object h6; to TRef::GetObject. Note that if the definition of the TRef fWebHistogram had been:; ~~~ {.cpp}; TRef fWebHistogram; //EXEC:GetWebHistogram(); ~~~; then, the compiled or interpreted function GetWebHistogram() would have; been called instead of the C++ script GetWebHistogram.C. ## Special case of a TRef pointing to an object with a TUUID. If the referenced object has a TUUID, its bit kHasUUID has been set.; This case is detected by the TRef assignment operator.; (For example, TFile and TDirectory have a TUUID); The TRef fPID points directly to the single object TProcessUUID (deriving; from TProcessID) and managing the list of TUUIDs for a process.; The TRef kHasUUID bit is set and its fUniqueID is set to the fUniqueID; of the referenced object. When the TRef is streamed to a buffer, the corresponding TUUID is also; streamed with the TRef. When a TRef is read from a buffer, the corresponding; TUUID is also read and entered into the global list of TUUIDs (if not; already there). The TRef fUniqueID is set to the UUIDNumber.; see TProcessUUID for more details. ## Array of TRef. The special class TRefArray should be used to store multiple references.; A TRefArray has one single pointer fPID for all objects in the array.; It has a dynamic compact table of fUniqueIDs. Use a TRefArray rather; then a collection of TRefs if all TRefs stem from the same process. Example:. Suppose a TObjArray *mytracks containing a list of Tr",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TRef.cxx:8758,detect,detected,8758,core/base/src/TRef.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TRef.cxx,1,['detect'],['detected']
Safety,"tice in zlib.h; */; /*; * ALGORITHM; *; * The ""deflation"" process depends on being able to identify portions; * of the input text which are identical to earlier input (within a; * sliding window trailing behind the input currently being processed).; *; * The most straightforward technique turns out to be the fastest for; * most input files: try all possible matches and select the longest.; * The key feature of this algorithm is that insertions into the string; * dictionary are very simple and thus fast, and deletions are avoided; * completely. Insertions are performed at each input character, whereas; * string matches are performed only when the previous match ends. So it; * is preferable to spend more time in matches to allow very fast string; * insertions and avoid deletions. The matching algorithm for small; * strings is inspired from that of Rabin & Karp. A brute force approach; * is used to find longer strings when a small match has been found.; * A similar algorithm is used in comic (by Jan-Mark Wams) and freeze; * (by Leonid Broukhis).; * A previous version of this file used a more sophisticated algorithm; * (by Fiala and Greene) which is guaranteed to run in linear amortized; * time, but has a larger average cost, uses more memory and is patented.; * However the F&G algorithm may be faster for some highly redundant; * files if the parameter max_chain_length (described below) is too large.; *; * ACKNOWLEDGEMENTS; *; * The idea of lazy evaluation of matches is due to Jan-Mark Wams, and; * I found it in 'freeze' written by Leonid Broukhis.; * Thanks to many people for bug reports and testing.; *; * REFERENCES; *; * Deutsch, L.P.,""DEFLATE Compressed Data Format Specification"".; * Available in http://tools.ietf.org/html/rfc1951; *; * A description of the Rabin and Karp algorithm is given in the book; * ""Algorithms"" by R. Sedgewick, Addison-Wesley, p252.; *; * Fiala,E.R., and Greene,D.H.; * Data Compression with Finite Windows, Comm.ACM, 32,4 (1989) 490-595; *; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c:1513,redund,redundant,1513,builtins/zlib/deflate_cf.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c,1,['redund'],['redundant']
Safety,"tion are:; /// - KMSAN always tracks the origins and implies msan-keep-going=true;; /// - KMSAN allocates shadow and origin memory for each page separately, so; /// there are no explicit accesses to shadow and origin in the; /// instrumentation.; /// Shadow and origin values for a particular X-byte memory location; /// (X=1,2,4,8) are accessed through pointers obtained via the; /// __msan_metadata_ptr_for_load_X(ptr); /// __msan_metadata_ptr_for_store_X(ptr); /// functions. The corresponding functions check that the X-byte accesses; /// are possible and returns the pointers to shadow and origin memory.; /// Arbitrary sized accesses are handled with:; /// __msan_metadata_ptr_for_load_n(ptr, size); /// __msan_metadata_ptr_for_store_n(ptr, size);; /// Note that the sanitizer code has to deal with how shadow/origin pairs; /// returned by the these functions are represented in different ABIs. In; /// the X86_64 ABI they are returned in RDX:RAX, and in the SystemZ ABI they; /// are written to memory pointed to by a hidden parameter.; /// - TLS variables are stored in a single per-task struct. A call to a; /// function __msan_get_context_state() returning a pointer to that struct; /// is inserted into every instrumented function before the entry block;; /// - __msan_warning() takes a 32-bit origin parameter;; /// - local variables are poisoned with __msan_poison_alloca() upon function; /// entry and unpoisoned with __msan_unpoison_alloca() before leaving the; /// function;; /// - the pass doesn't declare any global variables or add global constructors; /// to the translation unit.; ///; /// Also, KMSAN currently ignores uninitialized memory passed into inline asm; /// calls, making sure we're on the safe side wrt. possible false positives.; ///; /// KernelMemorySanitizer only supports X86_64 and SystemZ at the moment.; ///; //; // FIXME: This sanitizer does not yet handle scalable vectors; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/MemorySanitizer.cpp:7844,safe,safe,7844,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/MemorySanitizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/MemorySanitizer.cpp,1,['safe'],['safe']
Safety,"tive. That is, the general structure is:; ///; /// OMPLoopBasedDirective; /// [`- CapturedStmt ]; /// [ `- CapturedDecl]; /// ` OMPCanonicalLoop; /// `- ForStmt/CXXForRangeStmt; /// `- Stmt; ///; /// One or multiple CapturedStmt/CapturedDecl pairs may be inserted by some; /// directives such as OMPParallelForDirective, but others do not need them; /// (such as OMPTileDirective). In The OMPCanonicalLoop and; /// ForStmt/CXXForRangeStmt pair is repeated for loop associated with the; /// directive. A OMPCanonicalLoop must not appear in the AST unless associated; /// with a OMPLoopBasedDirective. In an imperfectly nested loop nest, the; /// OMPCanonicalLoop may also be wrapped in a CompoundStmt:; ///; /// [...]; /// ` OMPCanonicalLoop; /// `- ForStmt/CXXForRangeStmt; /// `- CompoundStmt; /// |- Leading in-between code (if any); /// |- OMPCanonicalLoop; /// | `- ForStmt/CXXForRangeStmt; /// | `- ...; /// `- Trailing in-between code (if any); ///; /// The leading/trailing in-between code must not itself be a OMPCanonicalLoop; /// to avoid confusion which loop belongs to the nesting.; ///; /// There are three different kinds of iteration variables for different; /// purposes:; /// * Loop user variable: The user-accessible variable with different value for; /// each iteration.; /// * Loop iteration variable: The variable used to identify a loop iteration;; /// for range-based for-statement, this is the hidden iterator '__begin'. For; /// other loops, it is identical to the loop user variable. Must be a; /// random-access iterator, pointer or integer type.; /// * Logical iteration counter: Normalized loop counter starting at 0 and; /// incrementing by one at each iteration. Allows abstracting over the type; /// of the loop iteration variable and is always an unsigned integer type; /// appropriate to represent the range of the loop iteration variable. Its; /// value corresponds to the logical iteration number in the OpenMP; /// specification.; ///; /// This AST node provides ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:2195,avoid,avoid,2195,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,1,['avoid'],['avoid']
Safety,"to be worth drawing. In all these cases AddObject() returns kNone, as it does for successful addition,; simply indicating it does not require you to provide further information about; this object. You should not try to make any assumptions about what the viewer did with it. This enables the viewer to be connected to a client which sends potentially; millions of objects, and only accept those that are of interest at a certain; time, caching the relatively small number of CPU/memory costly logical shapes,; and retaining/discarding the physical placements as required. The viewer may; decide to force the client to rebuild (republish) the scene (via a TPad; repaint at present), and thus collect these objects if the; internal viewer state changes. It does this presently by forcing a repaint; on the attached TPad object - hence the reason for putting all publishing to; the viewer in the attached pad objects Paint() method. We will likely remove; this requirement in the future, indicating the rebuild request via a normal; ROOT signal, which the client can detect. ## Physical IDs. TVirtualViewer3D provides for two methods of object addition:virtual Int_t AddObject(const; TBuffer3D & buffer, Bool_t * addChildren = 0). ~~~ {.cpp}; virtual Int_t AddObject(UInt_t physicalID, const TBuffer3D & buffer, Bool_t * addChildren = 0); ~~~. If you use the first (simple) case a viewer using logical/physical pairs; will generate IDs for each physical object internally. In the second you; can specify a unique identifier from the client, which allows the viewer to be more; efficient. It can now cache both logical and physical objects, and only discard; physical objects no longer of interest as part of scene rebuilds. ## Child Objects. In many geometries there is a rigid containment hierarchy, and so if the viewer; is not interested in a certain object due to limits/size then it will also; not be interest in any of the contained branch of descendents. Both AddObject(); methods have an addChil",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualViewer3D.cxx:10069,detect,detect,10069,core/base/src/TVirtualViewer3D.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualViewer3D.cxx,1,['detect'],['detect']
Safety,"to the entry numbers in the input dataset (e.g. TChain) in multi-thread runs. \warning By default, RDataFrame will use as many threads as the hardware supports, using up **all** the resources on; a machine. This might be undesirable on shared computing resources such as a batch cluster. Therefore, when running on shared computing resources, use; ~~~{.cpp}; ROOT::EnableImplicitMT(i); ~~~; replacing `i` with the number of CPUs/slots that were allocated for this job. ### Thread-safety of user-defined expressions; RDataFrame operations such as Histo1D() or Snapshot() are guaranteed to work correctly in multi-thread event loops.; User-defined expressions, such as strings or lambdas passed to Filter(), Define(), Foreach(), Reduce() or Aggregate(); will have to be thread-safe, i.e. it should be possible to call them concurrently from different threads. Note that simple Filter() and Define() transformations will inherently satisfy this requirement: Filter() / Define(); expressions will often be *pure* in the functional programming sense (no side-effects, no dependency on external state),; which eliminates all risks of race conditions. In order to facilitate writing of thread-safe operations, some RDataFrame features such as Foreach(), Define() or \link ROOT::RDF::RResultPtr::OnPartialResult OnPartialResult()\endlink; offer thread-aware counterparts (ForeachSlot(), DefineSlot(), \link ROOT::RDF::RResultPtr::OnPartialResultSlot OnPartialResultSlot()\endlink): their only difference is that they; will pass an extra `slot` argument (an unsigned integer) to the user-defined expression. When calling user-defined code; concurrently, RDataFrame guarantees that different threads will employ different values of the `slot` parameter,; where `slot` will be a number between 0 and `GetNSlots() - 1`.; In other words, within a slot, computation runs sequentially and events are processed sequentially.; Note that the same slot might be associated to different threads over the course of a singl",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx:49059,risk,risks,49059,tree/dataframe/src/RDataFrame.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx,1,['risk'],['risks']
Safety,"tr [rsi]; // For the above snippet, haswell just renames rax four times and executes the; // four instructions two at a time on P23 and P0126.; //; // For some instructions, we just need to make sure that the source is; // different from the destination. For example, IDIV8r reads from GPR and; // writes to AX. We just need to ensure that the Var is assigned a; // register which is different from AX:; // idiv bx; // idiv bx; // idiv bx; // idiv bx; // The above snippet will be able to fully saturate the ports, while the same; // with ax would issue one uop every `latency(IDIV8r)` cycles.; //; // Some instructions make this harder because they both read and write from; // the same register:; // inc rax; // inc rax; // inc rax; // inc rax; // This has a data dependency from each instruction to the next, limit the; // number of instructions that can be issued in parallel.; // It turns out that this is not a big issue on recent Intel CPUs because they; // have heuristics to balance port pressure. In the snippet above, subsequent; // instructions will end up evenly distributed on {P0,P1,P5,P6}, but some CPUs; // might end up executing them all on P0 (just because they can), or try; // avoiding P5 because it's usually under high pressure from vector; // instructions.; // This issue is even more important for high-latency instructions because; // they increase the idle time of the CPU, e.g. :; // imul rax, rbx; // imul rax, rbx; // imul rax, rbx; // imul rax, rbx; //; // To avoid that, we do the renaming statically by generating as many; // independent exclusive assignments as possible (until all possible registers; // are exhausted) e.g.:; // imul rax, rbx; // imul rcx, rbx; // imul rdx, rbx; // imul r8, rbx; //; // Some instruction even make the above static renaming impossible because; // they implicitly read and write from the same operand, e.g. ADC16rr reads; // and writes from EFLAGS.; // In that case we just use a greedy register assignment and hope for the; // best.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/ParallelSnippetGenerator.cpp:1792,avoid,avoiding,1792,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/ParallelSnippetGenerator.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/ParallelSnippetGenerator.cpp,2,['avoid'],"['avoid', 'avoiding']"
Safety,"try() is called; for 2 or more indices in a row. ## TTree::Draw() and TChain::Draw(). Use option __entrylist__ to write the results of TTree::Draw and TChain::Draw into; an entry list. Example:; ~~~ {.cpp}; tree->Draw("">>elist"", ""x<0 && y>0"", ""entrylist"");; TEntryList *elist = (TEntryList*)gDirectory->Get(""elist"");; ~~~; ## Example of Loop on TEntryList with a TChain; ~~~ {.cpp}; void loopChain() {; TFile *fe = TFile::Open(""myelist.root"");; TEntryList *myelist = (TEntryList*)fe->Get(""myelist"");; TChain *chain = new TChain(""ntuple"");; chain->Add(""hsimple.root"");; chain->Add(""hsimple2.root"");; Long64_t listEntries = myelist->GetN();; Long64_t chainEntries = chain->GetEntries();; Int_t treenum = 0;; chain->SetEntryList(myelist);. for (entry=start;entry < end;entry++) {; entryNumber = chain->GetEntryNumber(entry);; if (entryNumber < 0) break;; localEntry = chain->LoadTree(entryNumber);; if (localEntry < 0) break;; ....; then either call; branch->GetEntry(localEntry);; or; chain->GetEntry(entryNumber);; In the later case the LoadTree is then somewhat redundant.; ...; }; }; ~~~; When using the TEntryList interface directly, you can get the 'tree number' and entry in; the current tree (i.e. value similar to the return value of LoadTree) from calling; TEntryList::GetEntryAndTree:; ~~~ {.cpp}; Long64_t treeEntry = myelist->GetEntryAndTree(el,treenum);; ~~~; to obtain the entry number within the chain you need to add to it the value of; `treeEntry+ch->GetTreeOffset()[treenum]`; such that the loop in the previous example can also be written as:; ~~~ {.cpp}; for (Long64_t el = 0; el < listEntries; el++) {; Long64_t treeEntry = myelist->GetEntryAndTree(el,treenum);; Long64_t chainEntry = treeEntry+ch->GetTreeOffset()[treenum];; printf(""el=%lld, treeEntry=%lld, chainEntry=%lld, treenum=%d\n"", el, treeEntry, chainEntry, treenum);. ch->LoadTree(chainEntry); // this also returns treeEntry; needed_branch->GetEntry(treeEntry);; }; ~~~; ## TSelectors. To fill an TEntryList from a TSele",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TEntryList.cxx:2432,redund,redundant,2432,tree/tree/src/TEntryList.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TEntryList.cxx,1,['redund'],['redundant']
Safety,"ts, but the number of row; * groups does not. Some garbage sample rows may be included in the last iMCU; * row at the bottom of the image.; *; * Depending on the vertical scaling algorithm used, the upsampler may need; * access to the sample row(s) above and below its current input row group.; * The upsampler is required to set need_context_rows TRUE at global selection; * time if so. When need_context_rows is FALSE, this controller can simply; * obtain one iMCU row at a time from the coefficient controller and dole it; * out as row groups to the postprocessor.; *; * When need_context_rows is TRUE, this controller guarantees that the buffer; * passed to postprocessing contains at least one row group's worth of samples; * above and below the row group(s) being processed. Note that the context; * rows ""above"" the first passed row group appear at negative row offsets in; * the passed buffer. At the top and bottom of the image, the required; * context rows are manufactured by duplicating the first or last real sample; * row; this avoids having special cases in the upsampling inner loops.; *; * The amount of context is fixed at one row group just because that's a; * convenient number for this controller to work with. The existing; * upsamplers really only need one sample row of context. An upsampler; * supporting arbitrary output rescaling might wish for more than one row; * group of context when shrinking the image; tough, we don't handle that.; * (This is justified by the assumption that downsizing will be handled mostly; * by adjusting the DCT_scaled_size values, so that the actual scale factor at; * the upsample step needn't be much less than one.); *; * To provide the desired context, we have to retain the last two row groups; * of one iMCU row while reading in the next iMCU row. (The last row group; * can't be processed until we have another row group for its below-context,; * and so we have to save the next-to-last group too for its above-context.); * We could do t",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmainct.c:2366,avoid,avoids,2366,graf2d/asimage/src/libAfterImage/libjpeg/jdmainct.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmainct.c,1,['avoid'],['avoids']
Safety,"uadp:$Id$; // Author: Eddy Offermann May 2004; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /*************************************************************************; * Parts of this file are copied from the OOQP distribution and *; * are subject to the following license: *; * *; * COPYRIGHT 2001 UNIVERSITY OF CHICAGO *; * *; * The copyright holder hereby grants you royalty-free rights to use, *; * reproduce, prepare derivative works, and to redistribute this software*; * to others, provided that any changes are clearly documented. This *; * software was authored by: *; * *; * E. MICHAEL GERTZ gertz@mcs.anl.gov *; * Mathematics and Computer Science Division *; * Argonne National Laboratory *; * 9700 S. Cass Avenue *; * Argonne, IL 60439-4844 *; * *; * STEPHEN J. WRIGHT swright@cs.wisc.edu *; * Computer Sciences Department *; * University of Wisconsin *; * 1210 West Dayton Street *; * Madison, WI 53706 FAX: (608)262-9777 *; * *; * Any questions or comments may be directed to one of the authors. *; * *; * ARGONNE NATIONAL LABORATORY (ANL), WITH FACILITIES IN THE STATES OF *; * ILLINOIS AND IDAHO, IS OWNED BY THE UNITED STATES GOVERNMENT, AND *; * OPERATED BY THE UNIVERSITY OF CHICAGO UNDER PROVISION OF A CONTRACT *; * WITH THE DEPARTMENT OF ENERGY. *; *************************************************************************/; ////////////////////////////////////////////////////////////////////////////////; ///; /// \class TGondzioSolver; ///; /// Derived class of TQpSolverBase implementing Gondzio-correction; /// version of Mehrotra's original predictor-corrector algorithm.; ///; ////////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/quadp/src/TGondzioSolver.cxx:1895,predict,predictor-corrector,1895,math/quadp/src/TGondzioSolver.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/quadp/src/TGondzioSolver.cxx,1,['predict'],['predictor-corrector']
Safety,"uld become an; // identity copy after joining SrcReg and DstReg. The copy instruction will; // be removed, and the value will be merged with the source value.; //; // There can be several copies back and forth, causing many values to be; // merged into one. We compute a list of ultimate values in the joined live; // range as well as a mappings from the old value numbers.; //; // 2. IMPLICIT_DEF. This instruction is only inserted to ensure all PHI; // predecessors have a live out value. It doesn't cause real interference,; // and can be merged into the value it overlaps. Like a coalescable copy, it; // can be erased after joining.; //; // 3. Copy of external value. The overlapping def may be a copy of a value that; // is already in the other register. This is like a coalescable copy, but; // the live range of the source register must be trimmed after erasing the; // copy instruction:; //; // %src = COPY %ext; // %dst = COPY %ext <-- Remove this COPY, trim the live range of %ext.; //; // 4. Clobbering undefined lanes. Vector registers are sometimes built by; // defining one lane at a time:; //; // %dst:ssub0<def,read-undef> = FOO; // %src = BAR; // %dst:ssub1 = COPY %src; //; // The live range of %src overlaps the %dst value defined by FOO, but; // merging %src into %dst:ssub1 is only going to clobber the ssub1 lane; // which was undef anyway.; //; // The value mapping is more complicated in this case. The final live range; // will have different value numbers for both FOO and BAR, but there is no; // simple mapping from old to new values. It may even be necessary to add; // new PHI values.; //; // 5. Clobbering dead lanes. A def may clobber a lane of a vector register that; // is live, but never read. This can happen because we don't compute; // individual live ranges per lane.; //; // %dst = FOO; // %src = BAR; // %dst:ssub1 = COPY %src; //; // This kind of interference is only resolved locally. If the clobbered; // lane value escapes the block, the join is aborted.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegisterCoalescer.cpp:2900,abort,aborted,2900,interpreter/llvm-project/llvm/lib/CodeGen/RegisterCoalescer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegisterCoalescer.cpp,1,['abort'],['aborted']
Safety,"uld only affects rule 4).; /// Essentially, this class doesn't perform any sort alias analysis to; /// identify aliasing loads and stores.; ///; /// To enforce aliasing between loads and stores, flag `AssumeNoAlias` must be; /// set to `false` by the constructor of LSUnit.; ///; /// Note that this class doesn't know about the existence of different memory; /// types for memory operations (example: write-through, write-combining, etc.).; /// Derived classes are responsible for implementing that extra knowledge, and; /// provide different sets of rules for loads and stores by overriding method; /// `isReady()`.; /// To emulate a write-combining memory type, rule 2. must be relaxed in a; /// derived class to enable the reordering of non-aliasing store operations.; ///; /// No assumptions are made by this class on the size of the store buffer. This; /// class doesn't know how to identify cases where store-to-load forwarding may; /// occur.; ///; /// LSUnit doesn't attempt to predict whether a load or store hits or misses; /// the L1 cache. To be more specific, LSUnit doesn't know anything about; /// cache hierarchy and memory types.; /// It only knows if an instruction ""mayLoad"" and/or ""mayStore"". For loads, the; /// scheduling model provides an ""optimistic"" load-to-use latency (which usually; /// matches the load-to-use latency for when there is a hit in the L1D).; /// Derived classes may expand this knowledge.; ///; /// Class MCInstrDesc in LLVM doesn't know about serializing operations, nor; /// memory-barrier like instructions.; /// LSUnit conservatively assumes that an instruction which `mayLoad` and has; /// `unmodeled side effects` behave like a ""soft"" load-barrier. That means, it; /// serializes loads without forcing a flush of the load queue.; /// Similarly, instructions that both `mayStore` and have `unmodeled side; /// effects` are treated like store barriers. A full memory; /// barrier is a 'mayLoad' and 'mayStore' instruction with unmodeled side; /// effect",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:1695,predict,predict,1695,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,1,['predict'],['predict']
Safety,"uninitialized; /// values. This behavior is controlled with a flag (msan-track-origins) and is; /// disabled by default.; ///; /// Origins are 4-byte values created and interpreted by the runtime library.; /// They are stored in a second shadow mapping, one 4-byte value for 4 bytes; /// of application memory. Propagation of origins is basically a bunch of; /// ""select"" instructions that pick the origin of a dirty argument, if an; /// instruction has one.; ///; /// Every 4 aligned, consecutive bytes of application memory have one origin; /// value associated with them. If these bytes contain uninitialized data; /// coming from 2 different allocations, the last store wins. Because of this,; /// MemorySanitizer reports can show unrelated origins, but this is unlikely in; /// practice.; ///; /// Origins are meaningless for fully initialized values, so MemorySanitizer; /// avoids storing origin to memory when a fully initialized value is stored.; /// This way it avoids needless overwriting origin of the 4-byte region on; /// a short (i.e. 1 byte) clean store, and it is also good for performance.; ///; /// Atomic handling.; ///; /// Ideally, every atomic store of application value should update the; /// corresponding shadow location in an atomic way. Unfortunately, atomic store; /// of two disjoint locations can not be done without severe slowdown.; ///; /// Therefore, we implement an approximation that may err on the safe side.; /// In this implementation, every atomically accessed location in the program; /// may only change from (partially) uninitialized to fully initialized, but; /// not the other way around. We load the shadow _after_ the application load,; /// and we store the shadow _before_ the app store. Also, we always store clean; /// shadow (if the application store is atomic). This way, if the store-load; /// pair constitutes a happens-before arc, shadow store and load are correctly; /// ordered such that the load will get either the value that was stored, or;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/MemorySanitizer.cpp:3412,avoid,avoids,3412,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/MemorySanitizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/MemorySanitizer.cpp,1,['avoid'],['avoids']
Safety,"upported LOHs are:; // * So called non-ADRP-related:; // - .loh AdrpAddLdr L1, L2, L3:; // L1: adrp xA, sym@PAGE; // L2: add xB, xA, sym@PAGEOFF; // L3: ldr xC, [xB, #imm]; // - .loh AdrpLdrGotLdr L1, L2, L3:; // L1: adrp xA, sym@GOTPAGE; // L2: ldr xB, [xA, sym@GOTPAGEOFF]; // L3: ldr xC, [xB, #imm]; // - .loh AdrpLdr L1, L3:; // L1: adrp xA, sym@PAGE; // L3: ldr xC, [xA, sym@PAGEOFF]; // - .loh AdrpAddStr L1, L2, L3:; // L1: adrp xA, sym@PAGE; // L2: add xB, xA, sym@PAGEOFF; // L3: str xC, [xB, #imm]; // - .loh AdrpLdrGotStr L1, L2, L3:; // L1: adrp xA, sym@GOTPAGE; // L2: ldr xB, [xA, sym@GOTPAGEOFF]; // L3: str xC, [xB, #imm]; // - .loh AdrpAdd L1, L2:; // L1: adrp xA, sym@PAGE; // L2: add xB, xA, sym@PAGEOFF; // For all these LOHs, L1, L2, L3 form a simple chain:; // L1 result is used only by L2 and L2 result by L3.; // L3 LOH-related argument is defined only by L2 and L2 LOH-related argument; // by L1.; // All these LOHs aim at using more efficient load/store patterns by folding; // some instructions used to compute the address directly into the load/store.; //; // * So called ADRP-related:; // - .loh AdrpAdrp L2, L1:; // L2: ADRP xA, sym1@PAGE; // L1: ADRP xA, sym2@PAGE; // L2 dominates L1 and xA is not redifined between L2 and L1; // This LOH aims at getting rid of redundant ADRP instructions.; //; // The overall design for emitting the LOHs is:; // 1. AArch64CollectLOH (this pass) records the LOHs in the AArch64FunctionInfo.; // 2. AArch64AsmPrinter reads the LOHs from AArch64FunctionInfo and it:; // 1. Associates them a label.; // 2. Emits them in a MCStreamer (EmitLOHDirective).; // - The MCMachOStreamer records them into the MCAssembler.; // - The MCAsmStreamer prints them.; // - Other MCStreamers ignore them.; // 3. Closes the MCStreamer:; // - The MachObjectWriter gets them from the MCAssembler and writes; // them in the object file.; // - Other ObjectWriters ignore them.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CollectLOH.cpp:3440,redund,redundant,3440,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CollectLOH.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CollectLOH.cpp,1,['redund'],['redundant']
Safety,"ure.; * root - Window ID of the root window of destination screen; * mask, gcvalues - values for creation of new GC - see XCreateGC() for; * details.; * RETURN VALUE; * New GC created for regular window on success. NULL on failure.; * DESCRIPTION; * create_visual_gc() will create temporary window for the ASVisual; * specific depth and Visual and it will then create GC for such window.; * Obtained GC should be good to be used for manipulation of windows and; * Pixmaps created for the same ASVisual.; *********/; /****f* libAfterImage/create_visual_pixmap(); * NAME; * create_visual_pixmap(); * SYNOPSIS; * Pixmap create_visual_pixmap( ASVisual *asv, Window root,; * unsigned int width, unsigned int height,; * unsigned int depth );; * INPUTS; * asv - pointer to the valid ASVisual structure.; * root - Window ID of the root window of destination screen; * width, height - size of the pixmap to create.; * depth - depth of the pixmap to create. If 0 asv->true_depth; * will be used.; * RETURN VALUE; * ID of the newly created pixmap on success. None on failure.; * DESCRIPTION; * create_visual_pixmap() will perform sanity checks on passed; * parameters, and attempt to create pixmap for the specified ASVisual,; * root and depth.; *********/; /****f* libAfterImage/create_visual_ximage(); * NAME; * create_visual_ximage(); * SYNOPSIS; * XImage* create_visual_ximage( ASVisual *asv,; * unsigned int width, unsigned int height,; * unsigned int depth );; * INPUTS; * asv - pointer to the valid ASVisual structure.; * width, height - size of the XImage to create.; * depth - depth of the XImage to create. If 0 asv->true_depth; * will be used.; * RETURN VALUE; * pointer to newly created XImage on success. NULL on failure.; * DESCRIPTION; * create_visual_ximage() will perform sanity checks on passed; * parameters, and it will attempt to create XImage of sufficient size,; * and specified colordepth. It will also setup hooks for XImage; * deallocation to be handled by custom function.; *********/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/asvisual.h:2378,sanity check,sanity checks,2378,graf2d/asimage/src/libAfterImage/asvisual.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/asvisual.h,2,['sanity check'],['sanity checks']
Safety,"utoSave is automatically called by; /// TTree::Fill when the number of bytes generated since the previous; /// AutoSave is greater than -fAutoSave bytes.; /// If fAutoSave is positive, AutoSave is automatically called by; /// TTree::Fill every N entries.; /// This function may also be invoked by the user.; /// Each AutoSave generates a new key on the file.; /// Once the key with the tree header has been written, the previous cycle; /// (if any) is deleted.; ///; /// Note that calling TTree::AutoSave too frequently (or similarly calling; /// TTree::SetAutoSave with a small value) is an expensive operation.; /// You should make tests for your own application to find a compromise; /// between speed and the quantity of information you may loose in case of; /// a job crash.; ///; /// In case your program crashes before closing the file holding this tree,; /// the file will be automatically recovered when you will connect the file; /// in UPDATE mode.; /// The Tree will be recovered at the status corresponding to the last AutoSave.; ///; /// if option contains ""SaveSelf"", gDirectory->SaveSelf() is called.; /// This allows another process to analyze the Tree while the Tree is being filled.; ///; /// if option contains ""FlushBaskets"", TTree::FlushBaskets is called and all; /// the current basket are closed-out and written to disk individually.; ///; /// By default the previous header is deleted after having written the new header.; /// if option contains ""Overwrite"", the previous Tree header is deleted; /// before written the new header. This option is slightly faster, but; /// the default option is safer in case of a problem (disk quota exceeded); /// when writing the new header.; ///; /// The function returns the number of bytes written to the file.; /// if the number of bytes is null, an error has occurred while writing; /// the header to the file.; ///; /// ## How to write a Tree in one process and view it from another process; ///; /// The following two scripts illustr",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTree.cxx:1290,recover,recovered,1290,tree/tree/src/TTree.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTree.cxx,1,['recover'],['recovered']
Safety,"v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass flattens pairs nested loops into a single loop.; //; // The intention is to optimise loop nests like this, which together access an; // array linearly:; //; // for (int i = 0; i < N; ++i); // for (int j = 0; j < M; ++j); // f(A[i*M+j]);; //; // into one loop:; //; // for (int i = 0; i < (N*M); ++i); // f(A[i]);; //; // It can also flatten loops where the induction variables are not used in the; // loop. This is only worth doing if the induction variables are only used in an; // expression like i*M+j. If they had any other uses, we would have to insert a; // div/mod to reconstruct the original values, so this wouldn't be profitable.; //; // We also need to prove that N*M will not overflow. The preferred solution is; // to widen the IV, which avoids overflow checks, so that is tried first. If; // the IV cannot be widened, then we try to determine that this new tripcount; // expression won't overflow.; //; // Q: Does LoopFlatten use SCEV?; // Short answer: Yes and no.; //; // Long answer:; // For this transformation to be valid, we require all uses of the induction; // variables to be linear expressions of the form i*M+j. The different Loop; // APIs are used to get some loop components like the induction variable,; // compare statement, etc. In addition, we do some pattern matching to find the; // linear expressions and other loop components like the loop increment. The; // latter are examples of expressions that do use the induction variable, but; // are safe to ignore when we check all uses to be of the form i*M+j. We keep; // track of all of this in bookkeeping struct FlattenInfo.; // We assume the loops to be canonical, i.e. starting at 0 and increment with; // 1. This makes RHS of the compare the loop tripcount (with",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopFlatten.cpp:1144,avoid,avoids,1144,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopFlatten.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopFlatten.cpp,1,['avoid'],['avoids']
Safety,"veral ones) :; errorCode = FSE_initDState(&DState, &DStream, DTablePtr);. You can then decode your data, symbol after symbol.; For information the maximum number of bits read by FSE_decodeSymbol() is 'tableLog'.; Keep in mind that symbols are decoded in reverse order, like a LIFO stack (last in, first out).; unsigned char symbol = FSE_decodeSymbol(&DState, &DStream);. You can retrieve any bitfield you eventually stored into the bitStream (in reverse order); Note : maximum allowed nbBits is 25, for 32-bits compatibility; size_t bitField = BIT_readBits(&DStream, nbBits);. All above operations only read from local register (which size depends on size_t).; Refueling the register from memory is manually performed by the reload method.; endSignal = FSE_reloadDStream(&DStream);. BIT_reloadDStream() result tells if there is still some more data to read from DStream.; BIT_DStream_unfinished : there is still some data left into the DStream.; BIT_DStream_endOfBuffer : Dstream reached end of buffer. Its container may no longer be completely filled.; BIT_DStream_completed : Dstream reached its exact end, corresponding in general to decompression completed.; BIT_DStream_tooFar : Dstream went too far. Decompression result is corrupted. When reaching end of buffer (BIT_DStream_endOfBuffer), progress slowly, notably if you decode multiple symbols per loop,; to properly detect the exact end of stream.; After each decoded symbol, check if DStream is fully consumed using this simple test :; BIT_reloadDStream(&DStream) >= BIT_DStream_completed. When it's done, verify decompression is fully completed, by checking both DStream and the relevant states.; Checking if DStream has reached its end is performed by :; BIT_endOfDStream(&DStream);; Check also the states. There might be some symbols left there, if some high probability ones (>50%) are possible.; FSE_endOfDState(&DState);; */; /* *****************************************; * FSE unsafe API; *******************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:2027,detect,detect,2027,builtins/zstd/common/fse.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h,2,"['detect', 'unsafe']","['detect', 'unsafe']"
Safety,"version-from-integer. New rounding modes; /// (e.g. away from zero) can be added with three or four lines of code.; ///; /// Four formats are built-in: IEEE single precision, double precision,; /// quadruple precision, and x87 80-bit extended double (when operating with; /// full extended precision). Adding a new format that obeys IEEE semantics; /// only requires adding two lines of code: a declaration and definition of the; /// format.; ///; /// All operations return the status of that operation as an exception bit-mask,; /// so multiple operations can be done consecutively with their results or-ed; /// together. The returned status can be useful for compiler diagnostics; e.g.,; /// inexact, underflow and overflow can be easily diagnosed on constant folding,; /// and compiler optimizers can determine what exceptions would be raised by; /// folding operations and optimize, or perhaps not optimize, accordingly.; ///; /// At present, underflow tininess is detected after rounding; it should be; /// straight forward to add support for the before-rounding case too.; ///; /// The library reads hexadecimal floating point numbers as per C99, and; /// correctly rounds if necessary according to the specified rounding mode.; /// Syntax is required to have been validated by the caller. It also converts; /// floating point numbers to hexadecimal text as per the C99 %a and %A; /// conversions. The output precision (or alternatively the natural minimal; /// precision) can be specified; if the requested precision is less than the; /// natural precision the output is correctly rounded for the specified rounding; /// mode.; ///; /// It also reads decimal floating point numbers and correctly rounds according; /// to the specified rounding mode.; ///; /// Conversion to decimal text is not currently implemented.; ///; /// Non-zero finite numbers are represented internally as a sign bit, a 16-bit; /// signed exponent, and the significand as an array of integer parts. After; /// normaliza",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h:1994,detect,detected,1994,interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h,1,['detect'],['detected']
Safety,"with greater address space is; /// greater.; /// Stage 4: Types are neither vectors, nor pointers. And they differ.; /// We don't know how to bitcast them. So, we better don't do it,; /// and return types comparison result (so it determines the; /// relationship among constants we don't know how to bitcast).; ///; /// Just for clearance, let's see how the set of constants could look; /// on single dimension axis:; ///; /// [NFCT], [FCT, ""others""], [FCT, pointers], [FCT, vectors]; /// Where: NFCT - Not a FirstClassType; /// FCT - FirstClassTyp:; ///; /// 2. Compare raw contents.; /// It ignores types on this stage and only compares bits from L and R.; /// Returns 0, if L and R has equivalent contents.; /// -1 or 1 if values are different.; /// Pretty trivial:; /// 2.1. If contents are numbers, compare numbers.; /// Ints with greater bitwidth are greater. Ints with same bitwidths; /// compared by their contents.; /// 2.2. ""And so on"". Just to avoid discrepancies with comments; /// perhaps it would be better to read the implementation itself.; /// 3. And again about overall picture. Let's look back at how the ordered set; /// of constants will look like:; /// [NFCT], [FCT, ""others""], [FCT, pointers], [FCT, vectors]; ///; /// Now look, what could be inside [FCT, ""others""], for example:; /// [FCT, ""others""] =; /// [; /// [double 0.1], [double 1.23],; /// [i32 1], [i32 2],; /// { double 1.0 }, ; StructTyID, NumElements = 1; /// { i32 1 }, ; StructTyID, NumElements = 1; /// { double 1, i32 1 }, ; StructTyID, NumElements = 2; /// { i32 1, double 1 } ; StructTyID, NumElements = 2; /// ]; ///; /// Let's explain the order. Float numbers will be less than integers, just; /// because of cmpType terms: FloatTyID < IntegerTyID.; /// Floats (with same fltSemantics) are sorted according to their value.; /// Then you can see integers, and they are, like a floats,; /// could be easy sorted among each others.; /// The structures. Structures are grouped at the tail, again because of thei",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionComparator.h:2190,avoid,avoid,2190,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionComparator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionComparator.h,1,['avoid'],['avoid']
Safety,"written by C. Delaere, is *inspired* from; the mlpfit package from J.Schwindling et al. with some extensions:. - the algorithms are globally the same; - in TMultilayerPerceptron, there is no limitation on the number of; layers/neurons, while MLPFIT was limited to 2 hidden layers; - TMultilayerPerceptron allows you to save the network in a root file, and; provides more export functionalities; - TMultilayerPerceptron gives more flexibility regarding the normalization of; inputs/outputs; - TMultilayerPerceptron provides, thanks to Andrea Bocci, the possibility to; use cross-entropy errors, which allows to train a network for pattern; classification based on Bayesian posterior probability. ### Introduction. Neural Networks are more and more used in various fields for data; analysis and classification, both for research and commercial; institutions. Some randomly chosen examples are:. - image analysis; - financial movements predictions and analysis; - sales forecast and product shipping optimisation; - in particles physics: mainly for classification tasks (signal; over background discrimination). More than 50% of neural networks are multilayer perceptrons. This; implementation of multilayer perceptrons is inspired from the; <A HREF=""http://schwind.home.cern.ch/schwind/MLPfit.html"">MLPfit; package</A> originally written by Jerome Schwindling. MLPfit remains; one of the fastest tool for neural networks studies, and this ROOT; add-on will not try to compete on that. A clear and flexible Object; Oriented implementation has been chosen over a faster but more; difficult to maintain code. Nevertheless, the time penalty does not; exceed a factor 2. ### The MLP. The multilayer perceptron is a simple feed-forward network with; the following structure:. \image html mlp.png. It is made of neurons characterized by a bias and weighted links; between them (let's call those links synapses). The input neurons; receive the inputs, normalize them and forward them to the first; hidden layer",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mlp/src/TMultiLayerPerceptron.cxx:2146,predict,predictions,2146,math/mlp/src/TMultiLayerPerceptron.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mlp/src/TMultiLayerPerceptron.cxx,1,['predict'],['predictions']
Safety,"xis is drawn on the top side of the plot. |; | ""Y+"" | The Y-axis is drawn on the right side of the plot. |; | ""MIN0"" | Set minimum value for the Y axis to 0, equivalent to gStyle->SetHistMinimumZero(). |. \anchor HP01b; #### Options supported for 1D histograms. | Option | Description |; |----------|-------------------------------------------------------------------|; | "" "" | Default. |; | ""AH"" | Draw histogram without axis. ""A"" can be combined with any drawing option. For instance, ""AC"" draws the histogram as a smooth Curve without axis.|; | ""]["" | When this option is selected the first and last vertical lines of the histogram are not drawn.|; | ""B"" | Bar chart option.|; | ""BAR"" | Like option ""B"", but bars can be drawn with a 3D effect.|; | ""HBAR"" | Like option ""BAR"", but bars are drawn horizontally.|; | ""C"" | Draw a smooth Curve through the histogram bins.|; | ""E0"" | Draw error bars. Markers are drawn for bins with 0 contents. Combined with E1 or E2 it avoids error bars clipping|; | ""E1"" | Draw error bars with perpendicular lines at the edges.|; | ""E2"" | Draw error bars with rectangles.|; | ""E3"" | Draw a fill area through the end points of the vertical error bars.|; | ""E4"" | Draw a smoothed filled area through the end points of the error bars.|; | ""E5"" | Like E3 but ignore the bins with 0 contents.|; | ""E6"" | Like E4 but ignore the bins with 0 contents.|; | ""X0"" | When used with one of the ""E"" option, it suppress the error bar along X as `gStyle->SetErrorX(0)` would do.|; | ""L"" | Draw a line through the bin contents.|; | ""P"" | Draw current marker at each bin except empty bins.|; | ""P*"" | Draw a star marker at each bin except empty bins.|; | ""P0"" | Draw current marker at each bin including empty bins.|; | ""PIE"" | Draw histogram as a Pie Chart.|; | ""*H"" | Draw histogram with a * at each bin.|; | ""LF2"" | Draw histogram like with option ""L"" but with a fill area. Note that ""L"" draws also a fill area if the hist fill color is set but the fill area corresponds to the histo",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/THistPainter.cxx:8627,avoid,avoids,8627,hist/histpainter/src/THistPainter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/THistPainter.cxx,1,['avoid'],['avoids']
Safety,"ynchronous mode). A ZSTD_CCtx object is required to track streaming operations.; Use ZSTD_createCCtx() / ZSTD_freeCCtx() to manage resource.; ZSTD_CCtx object can be re-used multiple times within successive compression operations. Start by initializing a context.; Use ZSTD_compressBegin(), or ZSTD_compressBegin_usingDict() for dictionary compression,; or ZSTD_compressBegin_advanced(), for finer parameter control.; It's also possible to duplicate a reference context which has already been initialized, using ZSTD_copyCCtx(). Then, consume your input using ZSTD_compressContinue().; There are some important considerations to keep in mind when using this advanced function :; - ZSTD_compressContinue() has no internal buffer. It uses externally provided buffers only.; - Interface is synchronous : input is consumed entirely and produces 1+ compressed blocks.; - Caller must ensure there is enough space in `dst` to store compressed data under worst case scenario.; Worst case evaluation is provided by ZSTD_compressBound().; ZSTD_compressContinue() doesn't guarantee recover after a failed compression.; - ZSTD_compressContinue() presumes prior input ***is still accessible and unmodified*** (up to maximum distance size, see WindowLog).; It remembers all previous contiguous blocks, plus one separated memory segment (which can itself consists of multiple contiguous blocks); - ZSTD_compressContinue() detects that prior input has been overwritten when `src` buffer overlaps.; In which case, it will ""discard"" the relevant memory section from its history. Finish a frame with ZSTD_compressEnd(), which will write the last block(s) and optional checksum.; It's possible to use srcSize==0, in which case, it will write a final empty block to end the frame.; Without last block mark, frames are considered unfinished (hence corrupted) by compliant decoders. `ZSTD_CCtx` object can be re-used (ZSTD_compressBegin()) to compress again.; */; /*===== Buffer-less streaming compression functions =====*/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:1573,recover,recover,1573,builtins/zstd/zstd.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h,2,"['detect', 'recover']","['detects', 'recover']"
Safety,"{; public:; virtual int Get() = 0;. ClassDef(SecondAbstract, 2);; };. class Third : public SecondAbstract; {; public:; int Get() override { return 0; };. ClassDefInlineOverride(Third, 2);; };. class FirstOverloadCorrect : public TObject; {; public:; ~FirstOverloadCorrect() {; ROOT::CallRecursiveRemoveIfNeeded(*this);; }; virtual ULong_t Hash() const { return 3; }. ClassDefInline(FirstOverloadCorrect, 2);; };. class SecondCorrectAbstract : public FirstOverloadCorrect // Could also have used TNamed.; {; public:; virtual int Get() = 0;. ClassDef(SecondCorrectAbstract, 2);; };. class SecondCorrectAbstractHash : public FirstOverloadCorrect // Could also have used TNamed.; {; public:; ~SecondCorrectAbstractHash() {; ROOT::CallRecursiveRemoveIfNeeded(*this);; }. virtual ULong_t Hash() const { return 4; }; virtual int Get() = 0;. ClassDef(SecondCorrectAbstractHash, 2);; };. class ThirdCorrect : public SecondCorrectAbstract; {; public:; int Get() override { return 0; };. ClassDefInlineOverride(ThirdCorrect, 2);; };. class SecondInCorrectAbstract : public FirstOverloadCorrect // Could also have used TNamed.; {; public:; virtual ULong_t Hash() const { return 5; }; virtual int Get() = 0;. ClassDef(SecondInCorrectAbstract, 2);; };. class ThirdInCorrect : public SecondInCorrectAbstract; {; public:; int Get() override { return 0; };. ClassDefInlineOverride(ThirdInCorrect, 2);; };. // Just declare this one so Cling will know it, but; // do not use it to avoid the TClass being stuck in; // kInterpreted state.; class WrongSetup : public TObject; {; public:; virtual ULong_t Hash() const { return 6; }. ClassDefInline(WrongSetup, 2);; };. // This example is valid according to C++11, 9.2/16: In addition, if class T has a user-declared constructor (12.1),; // every non-static data member of class T shall have a name different from T.; //; class Rho: public TObject; {; public:; Float_t Rho; // rho energy density; Float_t Edges[2]; // pseudorapidity range edges. ClassDef(Rho, 1); };; )CODE""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/test/testHashRecursiveRemove.cxx:2020,avoid,avoid,2020,core/meta/test/testHashRecursiveRemove.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/test/testHashRecursiveRemove.cxx,1,['avoid'],['avoid']
Safety,"~~. Sometimes it is much easier to create a volume having a given shape in one; step, since shapes are not directly linked in the geometrical tree but volumes; are :. ~~~ {.cpp}; TGeoVolume *vol_box = gGeoManager->MakeBox(""BOX_VOL"", ""mat1"", halfX, halfY, halfZ);; TGeoVolume *vol_tub = gGeoManager->MakeTube(""TUB_VOL"", ""mat2"", rmin, rmax, halfZ);; ... (see MakeXXX() utilities in TGeoManager class); ~~~. ### Shape queries. Note that global queries related to a geometry are handled by the manager class.; However, shape-related queries might be sometimes useful. #### `Bool_t TGeoShape::Contains(const Double_t *point[3])`. this method returns true if POINT is actually inside the shape. The point; has to be defined in the local shape reference. For instance, for a box having; DX, DY and DZ half-lengths a point will be considered inside if :. ~~~ {.cpp}; | -DX <= point[0] <= DX; | -DY <= point[1] <= DY; | -DZ <= point[2] <= DZ; ~~~. #### `Double_t TGeoShape::DistFromInside(Double_t *point[3], Double_t *dir[3], Int_t iact, Double_t step, Double_t; *safe)`. computes the distance to exiting a shape from a given point INSIDE, along; a given direction. The direction is given by its director cosines with respect; to the local shape coordinate system. This method provides additional; information according the value of IACT input parameter :. - IACT = 0 => compute only safe distance and fill it at the location; given by SAFE; - IACT = 1 => a proposed STEP is supplied. The safe distance is computed; first. If this is bigger than STEP than the proposed step; is approved and returned by the method since it does not; cross the shape boundaries. Otherwise, the distance to; exiting the shape is computed and returned.; - IACT = 2 => compute both safe distance and distance to exiting, ignoring; the proposed step.; - IACT > 2 => compute only the distance to exiting, ignoring anything else. #### `Double_t TGeoShape::DistFromOutside(Double_t *point[3], Double_t *dir[3], Int_t iact, Double_t st",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoShape.cxx:4147,safe,safe,4147,geom/geom/src/TGeoShape.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoShape.cxx,1,['safe'],['safe']
Security," %4 = bitcast i8* %call1 to i32*; /// ; 3 = MemoryDef(2); /// store i32 5, i32* %2, align 4; /// ; 4 = MemoryDef(3); /// store i32 7, i32* %4, align 4; /// ; MemoryUse(3); /// %7 = load i32* %2, align 4; /// ; MemoryUse(4); /// %8 = load i32* %4, align 4; /// %add = add nsw i32 %7, %8; /// ret i32 %add; /// }; ///; /// Given this form, all the stores that could ever effect the load at %8 can be; /// gotten by using the MemoryUse associated with it, and walking from use to; /// def until you hit the top of the function.; ///; /// Each def also has a list of users associated with it, so you can walk from; /// both def to users, and users to defs. Note that we disambiguate MemoryUses,; /// but not the RHS of MemoryDefs. You can see this above at %7, which would; /// otherwise be a MemoryUse(4). Being disambiguated means that for a given; /// store, all the MemoryUses on its use lists are may-aliases of that store; /// (but the MemoryDefs on its use list may not be).; ///; /// MemoryDefs are not disambiguated because it would require multiple reaching; /// definitions, which would require multiple phis, and multiple memoryaccesses; /// per instruction.; ///; /// In addition to the def/use graph described above, MemoryDefs also contain; /// an ""optimized"" definition use. The ""optimized"" use points to some def; /// reachable through the memory def chain. The optimized def *may* (but is; /// not required to) alias the original MemoryDef, but no def *closer* to the; /// source def may alias it. As the name implies, the purpose of the optimized; /// use is to allow caching of clobber searches for memory defs. The optimized; /// def may be nullptr, in which case clients must walk the defining access; /// chain.; ///; /// When iterating the uses of a MemoryDef, both defining uses and optimized; /// uses will be encountered. If only one type is needed, the client must; /// filter the use walk.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemorySSA.h:3287,access,access,3287,interpreter/llvm-project/llvm/include/llvm/Analysis/MemorySSA.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemorySSA.h,1,['access'],['access']
Security," (or `CONT0`), the option `Z`; allows to display the color palette defined by `gStyle->SetPalette()`. Begin_Macro(source); {; auto c1 = new TCanvas(""c1"",""c1"",600,400);; auto hcont4 = new TH2F(""hcont4"",""Option CONT4Z example "",40,-4,4,40,-20,20);; float px, py;; for (Int_t i = 0; i < 25000; i++) {; gRandom->Rannor(px,py);; hcont4->Fill(px-1,5*py);; hcont4->Fill(2+0.5*px,2*py-10.,0.1);; }; hcont4->Draw(""CONT4Z"");; }; End_Macro. The default number of contour levels is 20 equidistant levels and can be changed; with `TH1::SetContour()` or `TStyle::SetNumberContours()`. \anchor HP16a; #### The LIST option. When option `LIST` is specified together with option; `CONT`, the points used to draw the contours are saved in; `TGraph` objects:. h->Draw(""CONT LIST"");; gPad->Update();. The contour are saved in `TGraph` objects once the pad is painted.; Therefore to use this functionality in a macro, `gPad->Update()`; should be performed after the histogram drawing. Once the list is; built, the contours are accessible in the following way:. TObjArray *contours = (TObjArray*)gROOT->GetListOfSpecials()->FindObject(""contours"");; Int_t ncontours = contours->GetSize();; TList *list = (TList*)contours->At(i);. Where `i` is a contour number, and list contains a list of; `TGraph` objects.; For one given contour, more than one disjoint polyline may be generated.; The number of TGraphs per contour is given by:. list->GetSize();. To access the first graph in the list one should do:. TGraph *gr1 = (TGraph*)list->First();. The following example (ContourList.C) shows how to use this functionality. Begin_Macro(source); ../../../tutorials/hist/ContourList.C; End_Macro. \anchor HP16b; #### The AITOFF, MERCATOR, SINUSOIDAL and PARABOLIC options. The following options select the `CONT4` option and are useful for; sky maps or exposure maps (earth.C). | Option | Description |; |--------------|---------------------------------------------------------------|; | ""AITOFF"" | Draw a contour via an AITOFF proje",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/THistPainter.cxx:67788,access,accessible,67788,hist/histpainter/src/THistPainter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/THistPainter.cxx,1,['access'],['accessible']
Security," *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /**************************************************************************. This source is based on Xclass95, a Win95-looking GUI toolkit.; Copyright (C) 1996, 1997 David Barth, Ricky Ralston, Hector Peraza. Xclass95 is free software; you can redistribute it and/or; modify it under the terms of the GNU Library General Public; License as published by the Free Software Foundation; either; version 2 of the License, or (at your option) any later version. **************************************************************************/; /** \class TGButton; \ingroup guiwidgets. A button abstract base class. It defines general button behaviour. */; /** \class TGTextButton; \ingroup guiwidgets. Yield an action as soon as it is clicked. This buttons usually provides fast access to; frequently used or critical commands. It may appear alone or placed in a group. The action it performs can be inscribed with a meaningful tooltip; set by `SetToolTipText(const char* text, Long_t delayms=400). The text button has a label indicating the action to be taken when; the button is pressed. The text can be a hot string (""&Exit"") that; defines the label ""Exit"" and keyboard mnemonics Alt+E for button; selection. A button label can be changed by SetText(new_label). Selecting a text or picture button will generate the event:; - kC_COMMAND, kCM_BUTTON, button id, user data.; */; /** \class TGPictureButton; \ingroup guiwidgets. Yield an action as soon as it is clicked. This buttons usually provides fast access to; frequently used or critical commands. It may appear alone or placed in a group. The action it performs can be inscribed with a meaningful tooltip; set by `SetToolTipText(const char* text, Long_t delayms=400). The text button has a label indicating the action to be take",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGButton.cxx:1229,access,access,1229,gui/gui/src/TGButton.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGButton.cxx,1,['access'],['access']
Security," +-------+-----------------------+; | vers. | hi 12 bits of time | 6-7 .fTimeHiAndVersion; +-------+-------+---------------+; |Res | clkSeqHi | 8 .fClockSeqHiAndReserved; +---------------+; | clkSeqLow | 9 .fClockSeqLow; +---------------+------------------+; | node ID | 10-15 .fNode; +----------------------------------+; ~~~. The adjusted time stamp is split into three fields, and the; clockSeq is split into two fields. The timestamp is a 60-bit value. For UUID version 1, this; is represented by Coordinated Universal Time (UTC/GMT) as; a count of 100-nanosecond intervals since 00:00:00.00,; 15 October 1582 (the date of Gregorian reform to the; Christian calendar). The version number is multiplexed in the 4 most significant; bits of the 'fTimeHiAndVersion' field. There are two defined; versions:; ~~~ {.cpp}; MSB <---; Version 4-Bit Code Description; ------------------------------------------------------------; | 1 0 0 0 1 DCE version, as specified herein.; | 2 0 0 1 0 DCE Security version, with; | embedded POSIX UIDs.; | 3 0 0 1 1 node id is a random value; ------------------------------------------------------------; ~~~. ## Clock Sequence. The clock sequence value must be changed whenever:. The UUID generator detects that the local value of UTC; has gone backward; this may be due to re-syncing of the system; clock. While a node is operational, the UUID service always saves; the last UTC used to create a UUID. Each time a new UUID; is created, the current UTC is compared to the saved value; and if either the current value is less or the saved value; was lost, then the clock sequence is incremented modulo; 16,384, thus avoiding production of duplicated UUIDs. The clock sequence must be initialized to a random number; to minimize the correlation across system. This provides; maximum protection against node identifiers that may move; or switch from system to system rapidly. ## Clock Adjustment. UUIDs may be created at a rate greater than the system clock; resolution. T",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUUID.cxx:2710,Secur,Security,2710,core/base/src/TUUID.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUUID.cxx,1,['Secur'],['Security']
Security," ...>; TGeoCompositeShape -> <union ...> or; - -> <subtraction ...> or; - -> <intersection ...>. Special cases of solids:; TGeoScaledShape -> <elcone ...> if scaled TGeoCone or; - -> element without scale; TGeoCompositeShape -> <ellipsoid ...>; - intersection of:; - scaled TGeoSphere and TGeoBBox; ~~~. #### Materials:. ~~~; TGeoIsotope -> <isotope ...>; TGeoElement -> <element ...>; TGeoMaterial -> <material ...>; TGeoMixture -> <material ...>; ~~~. #### Structure. ~~~; TGeoVolume -> <volume ...> or; - -> <assembly ...>; TGeoNode -> <physvol ...>; TGeoPatternFinder -> <divisionvol ...>; ~~~. There are options that can be set to change resulting document. ##### Options:. ~~~; g - is set by default in gGeoManager, this option ensures compatibility; - with Geant4. It means:; - -> atomic number of material will be changed if <1 to 1; - -> if polycone is set badly it will try to export it correctly; - -> if widht * ndiv + offset is more then width of object being divided; - (in divisions) then it will be rounded so it will not exceed or; - if kPhi divsion then it will keep range of offset in -360 -> 0; f - if this option is set then names of volumes and solids will have; - pointer as a suffix to ensure uniqness of names; n - if this option is set then names will not have suffix, but uniqness is; - of names is not secured; - - if none of this two options (f,n) is set then default behaviour is so; - that incremental suffix is added to the names.; - (eg. TGeoBBox_0x1, TGeoBBox_0x2 ...); ~~~. #### USAGE:. ~~~; gGeoManager->Export(""output.gdml"");; gGeoManager->Export(""output.gdml"","""",""vg""); //the same as previous just; //options are set explicitly; gGeoManager->Export(""output.gdml"","""",""vgf"");; gGeoManager->Export(""output.gdml"","""",""gn"");; gGeoManager->Export(""output.gdml"","""",""f"");; ...; ~~~. #### Note:; Options discussed above are used only for TGDMLWrite class. There are; other options in the TGeoManager::Export(...) method that can be used.; See that function for details. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/gdml/src/TGDMLWrite.cxx:3383,secur,secured,3383,geom/gdml/src/TGDMLWrite.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/gdml/src/TGDMLWrite.cxx,1,['secur'],['secured']
Security," // while the latter 2 calls to `bar` are running. This is justified because; // `z`'s lifetime is over after we exit from block `A:`, so any further; // accesses to it would be UB. The way we represent this information; // in LLVM is by having frontends delimit blocks with `lifetime.start`; // and `lifetime.end` intrinsics.; //; // The effect of these intrinsics seems to be as follows (maybe I should; // specify this in the reference?):; //; // L1) at start, each stack-slot is marked as *out-of-scope*, unless no; // lifetime intrinsic refers to that stack slot, in which case; // it is marked as *in-scope*.; // L2) on a `lifetime.start`, a stack slot is marked as *in-scope* and; // the stack slot is overwritten with `undef`.; // L3) on a `lifetime.end`, a stack slot is marked as *out-of-scope*.; // L4) on function exit, all stack slots are marked as *out-of-scope*.; // L5) `lifetime.end` is a no-op when called on a slot that is already; // *out-of-scope*.; // L6) memory accesses to *out-of-scope* stack slots are UB.; // L7) when a stack-slot is marked as *out-of-scope*, all pointers to it; // are invalidated, unless the slot is ""degenerate"". This is used to; // justify not marking slots as in-use until the pointer to them is; // used, but feels a bit hacky in the presence of things like LICM. See; // the ""Degenerate Slots"" section for more details.; //; // Now, let's ground stack coloring on these rules. We'll define a slot; // as *in-use* at a (dynamic) point in execution if it either can be; // written to at that point, or if it has a live and non-undef content; // at that point.; //; // Obviously, slots that are never *in-use* together can be merged, and; // in our example `foo`, the slots for `x`, `y` and `z` are never; // in-use together (of course, sometimes slots that *are* in-use together; // might still be mergable, but we don't care about that here).; //; // In this implementation, we successively merge pairs of slots that are; // not *in-use* together. We",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/StackColoring.cpp:2511,access,accesses,2511,interpreter/llvm-project/llvm/lib/CodeGen/StackColoring.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/StackColoring.cpp,1,['access'],['accesses']
Security," // | |; // | prev_lr |; // | prev_fp |; // | (a.k.a. ""frame record"") |; // | |; // |- - - - - - - - - - - - - - - - - -| <- fp (r7 or r11); // | |; // | callee-saved gpr registers |; // | |; // |-----------------------------------|; // | |; // | callee-saved fp/simd regs |; // | |; // |-----------------------------------|; // |.empty.space.to.make.part.below....|; // |.aligned.in.case.it.needs.more.than| (size of this area is unknown at; // |.the.standard.8-byte.alignment.....| compile time; if present); // |-----------------------------------|; // | |; // | local variables of fixed size |; // | including spill slots |; // |-----------------------------------| <- base pointer (not defined by ABI,; // |.variable-sized.local.variables....| LLVM chooses r6); // |.(VLAs)............................| (size of this area is unknown at; // |...................................| compile time); // |-----------------------------------| <- sp; // | | Lower address; //; //; // To access the data in a frame, at-compile time, a constant offset must be; // computable from one of the pointers (fp, bp, sp) to access it. The size; // of the areas with a dotted background cannot be computed at compile-time; // if they are present, making it required to have all three of fp, bp and; // sp to be set up to be able to access all contents in the frame areas,; // assuming all of the frame areas are non-empty.; //; // For most functions, some of the frame areas are empty. For those functions,; // it may not be necessary to set up fp or bp:; // * A base pointer is definitely needed when there are both VLAs and local; // variables with more-than-default alignment requirements.; // * A frame pointer is definitely needed when there are local variables with; // more-than-default alignment requirements.; //; // In some cases when a base pointer is not strictly needed, it is generated; // anyway when offsets from the frame pointer to access local variables become; // so large that the offset can't b",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMFrameLowering.cpp:2666,access,access,2666,interpreter/llvm-project/llvm/lib/Target/ARM/ARMFrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMFrameLowering.cpp,2,['access'],['access']
Security," /// which ones are actually setup in the amd_kernel_code_t object using the; /// enable_sgpr_* bit fields. The register numbers used for enabled registers; /// are dense starting at SGPR0: the first enabled register is SGPR0, the next; /// enabled register is SGPR1 etc.; disabled registers do not have an SGPR; /// number.; ///; /// The initial SGPRs comprise up to 16 User SRGPs that are set up by CP and; /// apply to all waves of the grid. It is possible to specify more than 16 User; /// SGPRs using the enable_sgpr_* bit fields, in which case only the first 16; /// are actually initialized. These are then immediately followed by the System; /// SGPRs that are set up by ADC/SPI and can have different values for each wave; /// of the grid dispatch.; ///; /// SGPR register initial state is defined as follows:; ///; /// Private Segment Buffer (enable_sgpr_private_segment_buffer):; /// Number of User SGPR registers: 4. V# that can be used, together with; /// Scratch Wave Offset as an offset, to access the Private/Spill/Arg; /// segments using a segment address. It must be set as follows:; /// - Base address: of the scratch memory area used by the dispatch. It; /// does not include the scratch wave offset. It will be the per process; /// SH_HIDDEN_PRIVATE_BASE_VMID plus any offset from this dispatch (for; /// example there may be a per pipe offset, or per AQL Queue offset).; /// - Stride + data_format: Element Size * Index Stride (???); /// - Cache swizzle: ???; /// - Swizzle enable: SH_STATIC_MEM_CONFIG.SWIZZLE_ENABLE (must be 1 for; /// scratch); /// - Num records: Flat Scratch Work Item Size / Element Size (???); /// - Dst_sel_*: ???; /// - Num_format: ???; /// - Element_size: SH_STATIC_MEM_CONFIG.ELEMENT_SIZE (will be DWORD, must; /// agree with amd_kernel_code_t.privateElementSize); /// - Index_stride: SH_STATIC_MEM_CONFIG.INDEX_STRIDE (will be 64 as must; /// be number of wavefront lanes for scratch, must agree with; /// amd_kernel_code_t.wavefrontSize); /// - Add t",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDKernelCodeT.h:1465,access,access,1465,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDKernelCodeT.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDKernelCodeT.h,1,['access'],['access']
Security," <-- a root increment; // f(%iv.1); // %iv.2 = add %iv, 2 <-- a root increment; // f(%iv.2); // %iv.scale_m_1 = add %iv, scale-1 <-- a root increment; // f(%iv.scale_m_1); // ...; // %iv.next = add %iv, scale; // %cmp = icmp(%iv, ...); // br %cmp, header, exit; //; // Notably, we do not require that f(%iv), f(%iv.1), etc. be isolated groups of; // instructions. In other words, the instructions in f(%iv), f(%iv.1), etc. can; // be intermixed with eachother. The restriction imposed by this algorithm is; // that the relative order of the isomorphic instructions in f(%iv), f(%iv.1),; // etc. be the same.; //; // First, we collect the use set of %iv, excluding the other increment roots.; // This gives us f(%iv). Then we iterate over the loop instructions (scale-1); // times, having collected the use set of f(%iv.(i+1)), during which we:; // - Ensure that the next unmatched instruction in f(%iv) is isomorphic to; // the next unmatched instruction in f(%iv.(i+1)).; // - Ensure that both matched instructions don't have any external users; // (with the exception of last-in-chain reduction instructions).; // - Track the (aliasing) write set, and other side effects, of all; // instructions that belong to future iterations that come before the matched; // instructions. If the matched instructions read from that write set, then; // f(%iv) or f(%iv.(i+1)) has some dependency on instructions in; // f(%iv.(j+1)) for some j > i, and we cannot reroll the loop. Similarly,; // if any of these future instructions had side effects (could not be; // speculatively executed), and so do the matched instructions, when we; // cannot reorder those side-effect-producing instructions, and rerolling; // fails.; //; // Finally, we make sure that all loop instructions are either loop increment; // roots, belong to simple latch code, parts of validated reductions, part of; // f(%iv) or part of some f(%iv.i). If all of that is true (and all reductions; // have been validated), then we reroll the loop.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopRerollPass.cpp:2058,validat,validated,2058,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopRerollPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopRerollPass.cpp,2,['validat'],['validated']
Security," <tr><th> %RooFit before %ROOT 6.22 <th> %RooFit starting with %ROOT 6.22; <tr><td>; ~~~{.cpp}; // In .h: Declare member; RooRealProxy pdfProxy;. ClassDefOverride(MyPdf, 1); };. // In .cxx: Initialise proxy in constructor; // The proxy will accept any RooAbsArg, so the type of; // ""thePdf"" has to be checked manually.; MyPdf::MyPdf(name, title, ...) :; pdfProxy(""pdfProxy"", ""Proxy holding a PDF"", this, thePdf) {; [ Extra checking here ... ]; }. // In .cxx: Accessing the proxy; RooAbsArg* absArg = pdfProxy.absArg();; RooAbsPdf* pdf = dynamic_cast<RooAbsPdf*>(absArg);; assert(pdf); // Manual type checking ...; pdf->fitTo(...);; ~~~; <td>; ~~~{.cpp}; // In .h: Declare member; RooTemplateProxy<RooAbsPdf> pdfProxy;. ClassDefOverride(MyPdf, 2); };. // In .cxx: Initialise proxy in constructor; // The program will not compile if ""thePdf"" is not a; // type deriving from RooAbsPdf; MyPdf::MyPdf(name, title, ...) :; pdfProxy(""pdfProxy"", ""Proxy holding a PDF"", this, thePdf) {. }. // In .cxx: Accessing the proxy. pdfProxy->fitTo(...);; ~~~; </table>. ### How to modernise old code. 1. Choose the proper template argument for the proxy.; - If a PDF is stored: `RooTemplateProxy<RooAbsPdf>`.; - If a real-valued object is stored: `RooTemplateProxy<RooAbsReal>`.; - If a category is stored: `RooTemplateProxy<RooCategory>`.; - If a variable is stored (i.e. one wants to be able to assign values to it): `RooTemplateProxy<RooRealVar>`; Other template arguments are possible, as long as they derive from RooAbsArg.; 2. Increment the class version of the owning class.; 3. Make sure that the right type is passed in the constructor of the proxy.; 4. Always use `proxy->` and `*proxy` to work with the stored object. No need to cast.; 5. **Only if necessary** If errors about missing symbols connected to RooTemplateProxy appear at link time,; a specific template instantiation for RooTemplateProxy is not yet in ROOT's dictionaries.; These two lines should be added to the LinkDef.h of the project:; ~~~{.c",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooTemplateProxy.h:2809,Access,Accessing,2809,roofit/roofitcore/inc/RooTemplateProxy.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooTemplateProxy.h,1,['Access'],['Accessing']
Security," If the value of the input column is missing, keep the entry, otherwise discard it. |; | Range() | Filter rows based on entry number (single-thread only). |; | Redefine() | Overwrite the value and/or type of an existing column. See Define() for more information. |; | RedefineSlot() | Overwrite the value and/or type of an existing column. See DefineSlot() for more information. |; | RedefineSlotEntry() | Overwrite the value and/or type of an existing column. See DefineSlotEntry() for more information. |; | Vary() | Register systematic variations for an existing column. Varied results are then extracted via VariationsFor(). |. ### Actions; Actions aggregate data into a result. Each one is described in more detail in the reference guide. In the following, whenever we say an action ""returns"" something, we always mean it returns a smart pointer to it. Actions only act on events that pass all preceding filters. Lazy actions only trigger the event loop when one of the results is accessed for the first time, making it easy to; produce many different results in one event loop. Instant actions trigger the event loop instantly. | **Lazy action** | **Description** |; |------------------|-----------------|; | Aggregate() | Execute a user-defined accumulation operation on the processed column values. |; | Book() | Book execution of a custom action using a user-defined helper object. |; | Cache() | Cache column values in memory. Custom columns can be cached as well, filtered entries are not cached. Users can specify which columns to save (default is all). |; | Count() | Return the number of events processed. Useful e.g. to get a quick count of the number of events passing a Filter. |; | Display() | Provides a printable representation of the dataset contents. The method returns a ROOT::RDF::RDisplay() instance which can print a tabular representation of the data or return it as a string. |; | Fill() | Fill a user-defined object with the values of the specified columns, as if by call",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx:5843,access,accessed,5843,tree/dataframe/src/RDataFrame.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx,1,['access'],['accessed']
Security," The tutorial sparsehist.C; shows the turning point. On a AMD64 with 8GB memory, THnSparse ""wins""; starting with a TH3 with 30 bins per dimension. Using a THnSparse for a; one-dimensional histogram is only reasonable if it has a huge number of bins. ## Projections; The dimensionality of a THnSparse can be reduced by projecting it to; 1, 2, 3, or n dimensions, which can be represented by a TH1, TH2, TH3, or; a THnSparse. See the Projection() members. To only project parts of the; histogram, call. THnSparse::GetAxis(12)->SetRange(from_bin, to_bin);. ## Internal Representation; An entry for a filled bin consists of its n-dimensional coordinates and; its bin content. The coordinates are compacted to use as few bits as; possible; e.g. a histogram with 10 bins in x and 20 bins in y will only; use 4 bits for the x representation and 5 bits for the y representation.; This is handled by the internal class THnSparseCompactBinCoord.; Bin data (content and coordinates) are allocated in chunks of size; fChunkSize; this parameter can be set when constructing a THnSparse. Each; chunk is represented by an object of class THnSparseArrayChunk. Translation from an n-dimensional bin coordinate to the linear index within; the chunks is done by GetBin(). It creates a hash from the compacted bin; coordinates (the hash of a bin coordinate is the compacted coordinate itself; if it takes less than 8 bytes, the size of a Long64_t.; This hash is used to lookup the linear index in the TExMap member fBins;; the coordinates of the entry fBins points to is compared to the coordinates; passed to GetBin(). If they do not match, these two coordinates have the same; hash - which is extremely unlikely but (for the case where the compact bin; coordinates are larger than 4 bytes) possible. In this case, fBinsContinued; contains a chain of linear indexes with the same hash. Iterating through this; chain and comparing each bin coordinates with the one passed to GetBin() will; retrieve the matching bin.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx:3797,hash,hash,3797,hist/hist/src/THnSparse.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx,5,['hash'],['hash']
Security," \image html base_classinfo.png. TDataMember provides information about name of data member, its type,; and comment field string. It also tries to find the TMethodCall objects; responsible for getting/setting a value of it, and gives you pointers; to these methods. This gives you a unique possibility to access; protected and private (!) data members if only methods for doing that; are defined. These methods could either be specified in a comment field, or found; out automatically by ROOT: here's an example:; suppose you have a class definition:; ~~~ {.cpp}; class MyClass{; private:; Float_t fX1;; ...; public:; void SetX1(Float_t x) {fX1 = x;};; Float_t GetX1() {return fX1;};; ...; }; ~~~; Look at the data member name and method names: a data member name has; a prefix letter (f) and has a base name X1 . The methods for getting and; setting this value have names which consist of string Get/Set and the; same base name. This convention of naming data fields and methods which; access them allows TDataMember find this methods by itself completely; automatically. To make this description complete, one should know,; that names that are automatically recognized may be also:; for data fields: either fXXX or fIsXXX; and for getter function; GetXXX() or IsXXX() [where XXX is base name]. As an example of using it let's analyse a few lines which get and set; a fEditable field in TCanvas:; ~~~ {.cpp}; TCanvas *c = new TCanvas(""c""); // create a canvas; TClass *cl = c->IsA(); // get its class description object. TDataMember *dm = cl->GetDataMember(""fEditable""); //This is our data member. TMethodCall *getter = dm->GetterMethod(c); //find a method that gets value!; Long_t l; // declare a storage for this value;. getter->Execute(c,"""",l); // Get this Value !!!! It will appear in l !!!. TMethodCall *setter = dm->SetterMethod(c);; setter->Execute(c,""0"",); // Set Value 0 !!!; ~~~. This trick is widely used in ROOT TContextMenu and dialogs for obtaining; current values and put them as initia",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TDataMember.cxx:1800,access,access,1800,core/meta/src/TDataMember.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TDataMember.cxx,1,['access'],['access']
Security," `SURF`, `LEGO`, `CONT` etc..). When a TGraph2D is drawn with one of the 2D histogram drawing option,; an intermediate 2D histogram is filled using the Delaunay triangles; to interpolate the data set. The 2D histogram has equidistant bins along the X; and Y directions. The number of bins along each direction can be change using; `SetNpx()` and `SetNpy()`. Each bin is filled with the Z; value found via a linear interpolation on the plane defined by the triangle above; the (X,Y) coordinates of the bin center. The existing (X,Y,Z) points can be randomly scattered.; The Delaunay triangles are build in the (X,Y) plane. These 2D triangles are then; used to define flat planes in (X,Y,Z) over which the interpolation is done to fill; the 2D histogram. The 3D triangles int takes build a 3D surface in; the form of tessellating triangles at various angles. The triangles found can be; drawn in 3D with one of the TGraph2D specific drawing options. The histogram generated by the Delaunay interpolation can be accessed using the; `GetHistogram()` method. The axis settings (title, ranges etc ...) can be changed accessing the axis via; the GetXaxis GetYaxis and GetZaxis methods. They access the histogram axis created; at drawing time only. Therefore they should called after the TGraph2D is drawn:. ~~~ {.cpp}; auto g = new TGraph2D();. [...]. g->Draw(""tri1"");; gPad->Update();; g->GetXaxis()->SetTitle(""X axis title"");; ~~~. \anchor G2D02; ## Examples. \anchor G2D021; ### SURF1 Example. Begin_Macro(source); {; auto c = new TCanvas(""c"",""Graph2D example"",0,0,600,400);; Double_t x, y, z, P = 6.;; Int_t np = 200;; auto dt = new TGraph2D();; dt->SetTitle(""Graph title; X axis title; Y axis title; Z axis title"");; auto r = new TRandom();; for (Int_t N=0; N<np; N++) {; x = 2*P*(r->Rndm(N))-P;; y = 2*P*(r->Rndm(N))-P;; z = (sin(x)/x)*(sin(y)/y)+0.2;; dt->SetPoint(N,x,y,z);; }; gStyle->SetPalette(1);; dt->Draw(""surf1"");; }; End_Macro. \anchor G2D022; ### Fitting Example. 2D graphs can be fitted as",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2D.cxx:3864,access,accessed,3864,hist/hist/src/TGraph2D.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2D.cxx,1,['access'],['accessed']
Security," a threshold function; TF1* f2 = new TF1(""thres"",""0.8"",0,10);; f2->SetLineColor(kRed);; //add it to the list of functions; //use add first because the parameters of the last function will be displayed; pEff->GetListOfFunctions()->AddFirst(f2);. pEff->Draw(""AP"");; }; End_Macro. \anchor EFF063; ### VI.3 Draw a TEfficiency object; A TEfficiency object can be drawn by calling the usual TEfficiency::Draw method.; At the moment drawing is only supported for 1- and 2-dimensional TEfficiency objects.; In the 1-dimensional case, you can use the same options as for the TGraphAsymmErrors::Draw; method. For 2-dimensional TEfficiency objects, you can pass the same options as; for a TH2::Draw object. \anchor EFF064; ### VI.4 TEfficiency object's axis customisation; The axes of a TEfficiency object can be accessed and customised by calling the; GetPaintedGraph method and then GetXaxis() or GetYaxis() and the corresponding TAxis; methods.; Note that in order to access the painted graph via GetPaintedGraph(), one should either; call Paint or, better, gPad->Update(). Begin_Macro(source); {; //canvas only needed for this documentation; TCanvas* c1 = new TCanvas(""example"","""",600,400);; c1->SetFillStyle(1001);; c1->SetFillColor(kWhite);; c1->Divide(2,1);. //create one-dimensional TEfficiency object with fixed bin size; TEfficiency* pEff = new TEfficiency(""eff"",""my efficiency;x;#epsilon"",20,0,10);; TRandom3 rand3;. bool bPassed;; double x;; for(int i=0; i<10000; ++i); {; //simulate events with variable under investigation; x = rand3.Uniform(10);; //check selection: bPassed = DoesEventPassSelection(x); bPassed = rand3.Rndm() < TMath::Gaus(x,5,4);; pEff->Fill(bPassed,x);; }; c1->cd(1);; pEff->Draw(""AP"");; c1->cd(2);; pEff->Draw(""AP"");; gPad->Update();; pEff->GetPaintedGraph()->GetXaxis()->SetTitleSize(0.05);; pEff->GetPaintedGraph()->GetXaxis()->SetLabelFont(42);; pEff->GetPaintedGraph()->GetXaxis()->SetLabelSize(0.05);; pEff->GetPaintedGraph()->GetYaxis()->SetTitleOffset(0.85);; pEff->GetP",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx:25001,access,access,25001,hist/hist/src/TEfficiency.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx,1,['access'],['access']
Security," a time, we can generate; /// multiple machine basic blocks for one IR level basic block.; /// This is how we handle bit tests and switches.; ///; /// 2. At the MI level, tail calls are represented via a special return; /// MIInst called ""tcreturn"". Thus if we know the basic block in which we; /// wish to insert the stack protector check, we get the correct behavior; /// by always inserting the stack protector check right before the return; /// statement. This is a ""magical transformation"" since no matter where; /// the stack protector check intrinsic is, we always insert the stack; /// protector check code at the end of the BB.; ///; /// Given the aforementioned constraints, the following solution was devised:; ///; /// 1. On platforms that do not support ISel stack protector check; /// generation, allow for the normal IR level stack protector check; /// generation to continue.; ///; /// 2. On platforms that do support ISel stack protector check; /// generation:; ///; /// a. Use the IR level stack protector pass to decide if a stack; /// protector is required/which BB we insert the stack protector check; /// in by reusing the logic already therein.; ///; /// b. After we finish selecting the basic block, we produce the validation; /// code with one of these techniques:; /// 1) with a call to a guard check function; /// 2) with inlined instrumentation; ///; /// 1) We insert a call to the check function before the terminator.; ///; /// 2) We first find a splice point in the parent basic block; /// before the terminator and then splice the terminator of said basic; /// block into the success basic block. Then we code-gen a new tail for; /// the parent basic block consisting of the two loads, the comparison,; /// and finally two branches to the success/failure basic blocks. We; /// conclude by code-gening the failure basic block if we have not; /// code-gened it already (all stack protector checks we generate in; /// the same function, use the same failure basic block).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/CodeGenCommonISel.h:4085,validat,validation,4085,interpreter/llvm-project/llvm/include/llvm/CodeGen/CodeGenCommonISel.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/CodeGenCommonISel.h,1,['validat'],['validation']
Security," a title and are identified in the folder hierarchy; by a ""Unix-like"" naming mechanism. The root of all folders is //root.; New folders can be dynamically added or removed to/from a folder.; The folder hierarchy can be visualized via the TBrowser. \image html base_browser.png. The Root folders hierarchy can be seen as a whiteboard where objects; are posted. Other classes/tasks can access these objects by specifying; only a string pathname. This whiteboard facility greatly improves the; modularity of an application, minimizing the class relationship problem; that penalizes large applications. Pointers are efficient to communicate between classes.; However, one has interest to minimize direct coupling between classes; in the form of direct pointers. One better uses the naming and search; service provided by the Root folders hierarchy. This makes the classes; loosely coupled and also greatly facilitates I/O operations.; In a client/server environment, this mechanism facilitates the access; to any kind of object in //root stores running on different processes. A TFolder is created by invoking the TFolder constructor. It is placed; inside an existing folder via the TFolder::AddFolder method.; One can search for a folder or an object in a folder using the FindObject; method. FindObject analyses the string passed as its argument and searches; in the hierarchy until it finds an object or folder matching the name. When a folder is deleted, its reference from the parent folder and; possible other folders is deleted. If a folder has been declared the owner of its objects/folders via; TFolder::SetOwner, then the contained objects are deleted when the; folder is deleted. By default, a folder does not own its contained objects. NOTE that folder ownership can be set; - via TFolder::SetOwner; - or via TCollection::SetOwner on the collection specified to TFolder::AddFolder. Standard Root objects are automatically added to the folder hierarchy.; For example, the following folders exis",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TFolder.cxx:1542,access,access,1542,core/base/src/TFolder.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TFolder.cxx,1,['access'],['access']
Security," algorithm and level; ///; /// It is recommended to specify fname1 as ""<file>.root"". The suffix "".root""; /// will be used by object browsers to automatically identify the file as; /// a ROOT file. If the constructor fails in any way IsZombie() will; /// return true. Use IsOpen() to check if the file is (still) open.; /// To open non-local files use the static TFile::Open() method, that; /// will take care of opening the files using the correct remote file; /// access plugin.; ///; /// Option | Description; /// -------|------------; /// NEW or CREATE | Create a new file and open it for writing, if the file already exists the file is not opened.; /// RECREATE | Create a new file, if the file already exists it will be overwritten.; /// UPDATE | Open an existing file for writing. If no file exists, it is created.; /// READ | Open an existing file for reading (default).; /// NET | Used by derived remote file access classes, not a user callable option.; /// WEB | Used by derived remote http access class, not a user callable option.; /// READ_WITHOUT_GLOBALREGISTRATION | Used by TTreeProcessorMT, not a user callable option.; ///; /// If option = """" (default), READ is assumed.; /// The file can be specified as a URL of the form:; ///; /// file:///user/rdm/bla.root or file:/user/rdm/bla.root; ///; /// The file can also be a member of an archive, in which case it is; /// specified as:; ///; /// multi.zip#file.root or multi.zip#0; ///; /// which will open file.root which is a member of the file multi.zip; /// archive or member 1 from the archive. For more on archive file; /// support see the TArchiveFile class.; /// TFile and its remote access plugins can also be used to open any; /// file, i.e. also non ROOT files, using:; ///; /// file.tar?filetype=raw; ///; /// This is convenient because the many remote file access plugins allow; /// easy access to/from the many different mass storage systems.; /// The title of the file (ftitle) will be shown by the ROOT browsers.; /// A ROO",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TFile.cxx:1336,access,access,1336,io/io/src/TFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TFile.cxx,1,['access'],['access']
Security," an existing file for reading (default).; /// NET | Used by derived remote file access classes, not a user callable option.; /// WEB | Used by derived remote http access class, not a user callable option.; /// READ_WITHOUT_GLOBALREGISTRATION | Used by TTreeProcessorMT, not a user callable option.; ///; /// If option = """" (default), READ is assumed.; /// The file can be specified as a URL of the form:; ///; /// file:///user/rdm/bla.root or file:/user/rdm/bla.root; ///; /// The file can also be a member of an archive, in which case it is; /// specified as:; ///; /// multi.zip#file.root or multi.zip#0; ///; /// which will open file.root which is a member of the file multi.zip; /// archive or member 1 from the archive. For more on archive file; /// support see the TArchiveFile class.; /// TFile and its remote access plugins can also be used to open any; /// file, i.e. also non ROOT files, using:; ///; /// file.tar?filetype=raw; ///; /// This is convenient because the many remote file access plugins allow; /// easy access to/from the many different mass storage systems.; /// The title of the file (ftitle) will be shown by the ROOT browsers.; /// A ROOT file (like a Unix file system) may contain objects and; /// directories. There are no restrictions for the number of levels; /// of directories.; /// A ROOT file is designed such that one can write in the file in pure; /// sequential mode (case of BATCH jobs). In this case, the file may be; /// read sequentially again without using the file index written; /// at the end of the file. In case of a job crash, all the information; /// on the file is therefore protected.; /// A ROOT file can be used interactively. In this case, one has the; /// possibility to delete existing objects and add new ones.; /// When an object is deleted from the file, the freed space is added; /// into the FREE linked list (fFree). The FREE list consists of a chain; /// of consecutive free segments on the file. At the same time, the first; /// 4 bytes",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TFile.cxx:2168,access,access,2168,io/io/src/TFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TFile.cxx,2,['access'],['access']
Security," and b <= c then a <= c (transitivity).; // for all a and b: a <= b or b <= a (totality).; //; // Comparison iterates through each instruction in each basic block.; // Functions are kept on binary tree. For each new function F we perform; // lookup in binary tree.; // In practice it works the following way:; // -- We define Function* container class with custom ""operator<"" (FunctionPtr).; // -- ""FunctionPtr"" instances are stored in std::set collection, so every; // std::set::insert operation will give you result in log(N) time.; //; // As an optimization, a hash of the function structure is calculated first, and; // two functions are only compared if they have the same hash. This hash is; // cheap to compute, and has the property that if function F == G according to; // the comparison function, then hash(F) == hash(G). This consistency property; // is critical to ensuring all possible merging opportunities are exploited.; // Collisions in the hash affect the speed of the pass but not the correctness; // or determinism of the resulting transformation.; //; // When a match is found the functions are folded. If both functions are; // overridable, we move the functionality into a new internal function and; // leave two overridable thunks to it.; //; //===----------------------------------------------------------------------===//; //; // Future work:; //; // * virtual functions.; //; // Many functions have their address taken by the virtual function table for; // the object they belong to. However, as long as it's only used for a lookup; // and call, this is irrelevant, and we'd like to fold such functions.; //; // * be smarter about bitcasts.; //; // In order to fold functions, we will sometimes add either bitcast instructions; // or bitcast constant expressions. Unfortunately, this can confound further; // analysis since the two functions differ where one has a bitcast and the; // other doesn't. We should learn to look through bitcasts.; //; // * Compare complex types ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/MergeFunctions.cpp:1839,hash,hash,1839,interpreter/llvm-project/llvm/lib/Transforms/IPO/MergeFunctions.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/MergeFunctions.cpp,1,['hash'],['hash']
Security," array. The SCEV->delinearize algorithm computes; /// the multiples of SCEV coefficients: that is a pattern matching of sub; /// expressions in the stride and base of a SCEV corresponding to the; /// computation of a GCD (greatest common divisor) of base and stride. When; /// SCEV->delinearize fails, it returns the SCEV unchanged.; ///; /// For example: when analyzing the memory access A[i][j][k] in this loop nest; ///; /// void foo(long n, long m, long o, double A[n][m][o]) {; ///; /// for (long i = 0; i < n; i++); /// for (long j = 0; j < m; j++); /// for (long k = 0; k < o; k++); /// A[i][j][k] = 1.0;; /// }; ///; /// the delinearization input is the following AddRec SCEV:; ///; /// AddRec: {{{%A,+,(8 * %m * %o)}<%for.i>,+,(8 * %o)}<%for.j>,+,8}<%for.k>; ///; /// From this SCEV, we are able to say that the base offset of the access is %A; /// because it appears as an offset that does not divide any of the strides in; /// the loops:; ///; /// CHECK: Base offset: %A; ///; /// and then SCEV->delinearize determines the size of some of the dimensions of; /// the array as these are the multiples by which the strides are happening:; ///; /// CHECK: ArrayDecl[UnknownSize][%m][%o] with elements of sizeof(double); /// bytes.; ///; /// Note that the outermost dimension remains of UnknownSize because there are; /// no strides that would help identifying the size of the last dimension: when; /// the array has been statically allocated, one could compute the size of that; /// dimension by dividing the overall size of the array by the size of the known; /// dimensions: %m * %o * 8.; ///; /// Finally delinearize provides the access functions for the array reference; /// that does correspond to A[i][j][k] of the above C testcase:; ///; /// CHECK: ArrayRef[{0,+,1}<%for.i>][{0,+,1}<%for.j>][{0,+,1}<%for.k>]; ///; /// The testcases are checking the output of a function pass:; /// DelinearizationPass that walks through all loads and stores of a function; /// asking for the SCEV of the",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/Delinearization.cpp:1030,access,access,1030,interpreter/llvm-project/llvm/lib/Analysis/Delinearization.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/Delinearization.cpp,1,['access'],['access']
Security," base pointer). They can each be; // shared with a, non-virtual bases. These bases need not be the same. vfptrs; // always occur at offset 0. vbptrs can occur at an arbitrary offset and are; // placed after the lexicographically last non-virtual base. This placement; // is always before fields but can be in the middle of the non-virtual bases; // due to the two-pass layout scheme for non-virtual-bases.; // * Virtual bases sometimes require a 'vtordisp' field that is laid out before; // the virtual base and is used in conjunction with virtual overrides during; // construction and destruction. This is always a 4 byte value and is used as; // an alternative to constructor vtables.; // * vtordisps are allocated in a block of memory with size and alignment equal; // to the alignment of the completed structure (before applying __declspec(; // align())). The vtordisp always occur at the end of the allocation block,; // immediately prior to the virtual base.; // * vfptrs are injected after all bases and fields have been laid out. In; // order to guarantee proper alignment of all fields, the vfptr injection; // pushes all bases and fields back by the alignment imposed by those bases; // and fields. This can potentially add a significant amount of padding.; // vfptrs are always injected at offset 0.; // * vbptrs are injected after all bases and fields have been laid out. In; // order to guarantee proper alignment of all fields, the vfptr injection; // pushes all bases and fields back by the alignment imposed by those bases; // and fields. This can potentially add a significant amount of padding.; // vbptrs are injected immediately after the last non-virtual base as; // lexicographically ordered in the code. If this site isn't pointer aligned; // the vbptr is placed at the next properly aligned location. Enough padding; // is added to guarantee a fit.; // * The last zero sized non-virtual base can be placed at the end of the; // struct (potentially aliasing another object), or ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:1752,inject,injected,1752,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,1,['inject'],['injected']
Security," be forwarded to the hasher type:; /// * decltype(std::declval<HasherT &>().final()) final(); /// * decltype(std::declval<HasherT &>().result()) result(); ///; /// From a user point of view, the interface provides the following:; /// * `template<typename T> add(const T &Value)`; /// The `add` function implements hashing of various types.; /// * `template <typename ItT> void addRange(ItT First, ItT Last)`; /// The `addRange` function is designed to aid hashing a range of values.; /// It explicitly adds the size of the range in the hash.; /// * `template <typename ItT> void addRangeElements(ItT First, ItT Last)`; /// The `addRangeElements` function is also designed to aid hashing a range of; /// values. In contrast to `addRange`, it **ignores** the size of the range,; /// behaving as if elements were added one at a time with `add`.; ///; /// User-defined `struct` types can participate in this interface by providing; /// an `addHash` templated function. See the associated template specialization; /// for details.; ///; /// This interface does not impose requirements on the hasher; /// `update(ArrayRef<uint8_t> Data)` method. We want to avoid collisions for; /// variable-size types; for example for; /// ```; /// builder.add({1});; /// builder.add({2, 3});; /// ```; /// and; /// ```; /// builder.add({1, 2});; /// builder.add({3});; /// ```; /// . Thus, specializations of `add` and `addHash` for variable-size types must; /// not assume that the hasher type considers the size as part of the hash; they; /// must explicitly add the size to the hash. See for example specializations; /// for `ArrayRef` and `StringRef`.; ///; /// Additionally, since types are eventually forwarded to the hasher's; /// `void update(ArrayRef<uint8_t>)` method, endianness plays a role in the hash; /// computation (for example when computing `add((int)123)`).; /// Specifiying a non-`native` `Endianness` template parameter allows to compute; /// stable hash across platforms with different endianness.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h:1564,hash,hasher,1564,interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,7,['hash'],"['hash', 'hasher']"
Security," being added to the; ZIP file, since ROOT files are normally already compressed.; Such a ZIP file should be created like:; zip -n root multi file1.root file2.root; which creates a ZIP file multi.zip.; A ZIP archive consists of files compressed with the popular ZLIB; compression algorithm. The archive format is used among others by; PKZip and Info-ZIP. The compression algorithm is also used by; GZIP and the PNG graphics standard. The format of the archives is; explained briefly below. This class provides an interface to read; such archives.; A ZIP archive contains a prefix, series of archive members; (sub-files), and a central directory. In theory the archive could; span multiple disks (or files) with the central directory of the; whole archive on the last disk, but this class does not support; such multi-part archives. The prefix is only used in self-extracting; executable archive files.; The members are stored in the archive sequentially, each with a; local header followed by the (optionally) compressed data; the local; header describes the member, including its file name and compressed; and real sizes. The central directory includes the member details; again, plus allows an extra member comment to be added. The last; member in the central directory is an end marker that can contain; a comment for the whole archive. Both the local header and the; central directory can also carry extra member-specific data; the; data in the local and global parts can be different.; The fact that the archive has a global directory makes it efficient; and allows for only the reading of the desired data, one does not; have to scan through the whole file to find the desired sub-file.; The Zip64 extensions are supported so files larger than 2GB can be; stored in archives larger than 4 GB.; Once the archive has been opened, the client can query the members; and read their contents by asking the archive for an offset where; the sub-file starts. The members can be accessed in any order.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TZIPFile.cxx:2597,access,accessed,2597,io/io/src/TZIPFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TZIPFile.cxx,1,['access'],['accessed']
Security," call to the TExec constructor, if the constructor is called before; opening the file.; - a call to TExec::SetAction at any time.; One can compute a pointer to an existing TExec with a name with:; ~~~ {.cpp}; TExec *myExec = gROOT->GetExec(execName);; myExec->SetAction(actionCommand);; ~~~; where actionCommand is a string containing a C++ instruction. Examples:; ~~~ {.cpp}; myExec->SetAction(""LoadHits()"");; myExec->SetAction("".x script.C"");; ~~~. When a TRef is dereferenced via TRef::GetObject, its TExec will be; automatically executed. In the function/script being executed, one or more; of the following actions can be executed:. - load a file containing the referenced object. This function typically; looks in the file catalog (GRID).; - compute a pointer to the referenced object and communicate this pointer; back to the calling function TRef::GetObject via:; ~~~ {.cpp}; TRef::SetStaticObject(object).; ~~~; When the TExec is called, it has access to the dereferencing TRef; by calling GetStaticObject() (TRef::GetObject() sets fgObject to ""this""; before the call to TExec). This can be useful for accessing the TRef's; fUniqueID. As soon as an object is returned to GetObject, the fUniqueID of the TRef is set; to the fUniqueID of the referenced object. At the next call to GetObject,; the pointer stored in fPid:fObjects[fUniqueID] will be returned directly. An example of action on demand is shown in $ROOTSYS/test/Event.h with; the member:; ~~~ {.cpp}; TRef fWebHistogram; //EXEC:GetWebHistogram; ~~~; When calling fWebHistogram.GetObject(), the function GetObject; will automatically invoke a script GetWebHistogram.C via the interpreter. An example of a GetWebHistogram.C script is shown below; ~~~ {.cpp}; void GetWebHistogram() {; TFile *f= TFile::Open(""http://root.cern/files/pippa.root"");; f->cd(""DM/CJ"");; TH1 *h6 = (TH1*)gDirectory->Get(""h6"");; h6->SetDirectory(0);; delete f;; TRef::SetStaticObject(h6);; }; ~~~; In the above example, a call to fWebHistogram.GetObject() exec",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TRef.cxx:7131,access,access,7131,core/base/src/TRef.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TRef.cxx,1,['access'],['access']
Security," can be redone per volume after; this process. Below is the general scheme of the manager class. \image html geom_mgr.jpg. ## An interactive session. Provided that a geometry was successfully built and closed (for instance the; previous example $ROOTSYS/tutorials/geom/rootgeom.C ), the manager class will register; itself to ROOT and the logical/physical structures will become immediately browsable.; The ROOT browser will display starting from the geometry folder : the list of; transformations and media, the top volume and the top logical node. These last; two can be fully expanded, any intermediate volume/node in the browser being subject; of direct access context menu operations (right mouse button click). All user; utilities of classes TGeoManager, TGeoVolume and TGeoNode can be called via the; context menu. \image html geom_browser.jpg. ### Drawing the geometry. Any logical volume can be drawn via TGeoVolume::Draw() member function.; This can be directly accessed from the context menu of the volume object; directly from the browser.; There are several drawing options that can be set with; TGeoManager::SetVisOption(Int_t opt) method :. #### opt=0; only the content of the volume is drawn, N levels down (default N=3).; This is the default behavior. The number of levels to be drawn can be changed; via TGeoManager::SetVisLevel(Int_t level) method. \image html geom_frame0.jpg. #### opt=1; the final leaves (e.g. daughters with no containment) of the branch; starting from volume are drawn down to the current number of levels.; WARNING : This mode is memory consuming; depending of the size of geometry, so drawing from top level within this mode; should be handled with care for expensive geometries. In future there will be; a limitation on the maximum number of nodes to be visualized. \image html geom_frame1.jpg. #### opt=2; only the clicked volume is visualized. This is automatically set by; TGeoVolume::DrawOnly() method. #### opt=3 - only a given path is visualized. This",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoManager.cxx:8439,access,accessed,8439,geom/geom/src/TGeoManager.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoManager.cxx,1,['access'],['accessed']
Security," classname. The class dictionary must be available (ClassDef; /// in class header).; ///; /// Note: See the comments in TBranchElement::SetAddress() for a more; /// detailed discussion of the meaning of the addr parameter.; ///; /// This option requires access to the library where the; /// corresponding class is defined. Accessing one single data; /// member in the object implies reading the full object.; ///; /// By default the branch buffers are stored in the same file as the Tree.; /// use TBranch::SetFile to specify a different file; ///; /// IMPORTANT NOTE about branch names:; ///; /// And in general, in case two or more master branches contain subbranches; /// with identical names, one must add a ""."" (dot) character at the end; /// of the master branch name. This will force the name of the subbranches; /// to be of the form `master.subbranch` instead of simply `subbranch`.; /// This situation happens when the top level object; /// has two or more members referencing the same class.; /// For example, if a Tree has two branches B1 and B2 corresponding; /// to objects of the same class MyClass, one can do:; /// ~~~ {.cpp}; /// tree.Branch(""B1."",""MyClass"",&b1,8000,1);; /// tree.Branch(""B2."",""MyClass"",&b2,8000,1);; /// ~~~; /// if MyClass has 3 members a,b,c, the two instructions above will generate; /// subbranches called B1.a, B1.b ,B1.c, B2.a, B2.b, B2.c; ///; /// bufsize is the buffer size in bytes for this branch; /// The default value is 32000 bytes and should be ok for most cases.; /// You can specify a larger value (e.g. 256000) if your Tree is not split; /// and each entry is large (Megabytes); /// A small value for bufsize is optimum if you intend to access; /// the entries in the Tree randomly and your Tree is in split mode.; ///; /// Use splitlevel < 0 instead of splitlevel=0 when the class; /// has a custom Streamer; ///; /// Note: if the split level is set to the default (99), TTree::Branch will; /// not issue a warning if the class can not be split.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTree.cxx:2830,access,access,2830,tree/tree/src/TTree.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTree.cxx,1,['access'],['access']
Security," constructor accepts an optional ""sparkcontext"" parameter; # and it will distribute the application to the connected cluster; df = RDataFrame(""mytree"", ""myfile.root"", sparkcontext = sc); ~~~. If an instance of [SparkContext](https://spark.apache.org/docs/latest/api/python/reference/api/pyspark.SparkContext.html); is not provided, the default behaviour is to create one in the background for you. ### Connecting to a Dask cluster. Similarly, you can connect to a Dask cluster by creating your own connection object which internally operates with one; of the cluster schedulers supported by Dask (more information in the; [Dask distributed docs](http://distributed.dask.org/en/stable/)):. ~~~{.py}; import ROOT; from dask.distributed import Client. # Point RDataFrame calls to the Dask specific RDataFrame; RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. # In a Python script the Dask client needs to be initalized in a context; # Jupyter notebooks / Python session don't need this; if __name__ == ""__main__"":; # With an already setup cluster that exposes a Dask scheduler endpoint; client = Client(""dask_scheduler.domain.com:8786""). # The Dask RDataFrame constructor accepts the Dask Client object as an optional argument; df = RDataFrame(""mytree"",""myfile.root"", daskclient=client); # Proceed as usual; df.Define(""x"",""someoperation"").Histo1D((""name"", ""title"", 10, 0, 10), ""x""); ~~~. If an instance of [distributed.Client](http://distributed.dask.org/en/stable/api.html#distributed.Client) is not; provided to the RDataFrame object, it will be created for you and it will run the computations in the local machine; using all cores available. ### Choosing the number of distributed tasks. A distributed RDataFrame has internal logic to define in how many chunks the input dataset will be split before sending; tasks to the distributed backend. Each task reads and processes one of said chunks. The logic is backend-dependent, but; generically tries to infer how many cores are available",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx:39796,expose,exposes,39796,tree/dataframe/src/RDataFrame.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx,1,['expose'],['exposes']
Security," contour levels is 20 equidistant levels and can be changed; with `TH1::SetContour()` or `TStyle::SetNumberContours()`. \anchor HP16a; #### The LIST option. When option `LIST` is specified together with option; `CONT`, the points used to draw the contours are saved in; `TGraph` objects:. h->Draw(""CONT LIST"");; gPad->Update();. The contour are saved in `TGraph` objects once the pad is painted.; Therefore to use this functionality in a macro, `gPad->Update()`; should be performed after the histogram drawing. Once the list is; built, the contours are accessible in the following way:. TObjArray *contours = (TObjArray*)gROOT->GetListOfSpecials()->FindObject(""contours"");; Int_t ncontours = contours->GetSize();; TList *list = (TList*)contours->At(i);. Where `i` is a contour number, and list contains a list of; `TGraph` objects.; For one given contour, more than one disjoint polyline may be generated.; The number of TGraphs per contour is given by:. list->GetSize();. To access the first graph in the list one should do:. TGraph *gr1 = (TGraph*)list->First();. The following example (ContourList.C) shows how to use this functionality. Begin_Macro(source); ../../../tutorials/hist/ContourList.C; End_Macro. \anchor HP16b; #### The AITOFF, MERCATOR, SINUSOIDAL and PARABOLIC options. The following options select the `CONT4` option and are useful for; sky maps or exposure maps (earth.C). | Option | Description |; |--------------|---------------------------------------------------------------|; | ""AITOFF"" | Draw a contour via an AITOFF projection.|; | ""MERCATOR"" | Draw a contour via an Mercator projection.|; | ""SINUSOIDAL"" | Draw a contour via an Sinusoidal projection.|; | ""PARABOLIC"" | Draw a contour via an Parabolic projection.|. Begin_Macro(source); ../../../tutorials/graphics/earth.C; End_Macro. \anchor HP17; ### The LEGO options. In a lego plot the cell contents are drawn as 3-d boxes. The height of each box; is proportional to the cell content. The lego aspect is control with t",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/THistPainter.cxx:68211,access,access,68211,hist/histpainter/src/THistPainter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/THistPainter.cxx,1,['access'],['access']
Security," cores are available in the cluster through the connection object. The number of; tasks will be equal to the inferred number of cores. There are cases where the connection object of the chosen backend; doesn't have information about the actual resources of the cluster. An example of this is when using Dask to connect to; a batch system. The client object created at the beginning of the application does not automatically know how many cores; will be available during distributed execution, since the jobs are submitted to the batch system after the creation of; the connection. In such cases, the logic is to default to process the whole dataset in 2 tasks. The number of tasks submitted for distributed execution can be also set programmatically, by providing the optional; keyword argument `npartitions` when creating the RDataFrame object. This parameter is accepted irrespectively of the; backend used:. ~~~{.py}; import ROOT. # Define correct imports and access the distributed RDataFrame appropriate for the; # backend used in the analysis; RDataFrame = ROOT.RDF.Experimental.Distributed.[BACKEND].RDataFrame. if __name__ == ""__main__"":; # The `npartitions` optional argument tells the RDataFrame how many tasks are desired; df = RDataFrame(""mytree"",""myfile.root"", npartitions=NPARTITIONS); # Proceed as usual; df.Define(""x"",""someoperation"").Histo1D((""name"", ""title"", 10, 0, 10), ""x""); ~~~. Note that when processing a TTree or TChain dataset, the `npartitions` value should not exceed the number of clusters in; the dataset. The number of clusters in a TTree can be retrieved by typing `rootls -lt myfile.root` at a command line. ### Distributed Snapshot. The Snapshot operation behaves slightly differently when executed distributedly. First off, it requires the path; supplied to the Snapshot call to be accessible from any worker of the cluster and from the client machine (in general; it should be provided as an absolute path). Another important difference is that `n` separate files wi",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx:41676,access,access,41676,tree/dataframe/src/RDataFrame.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx,1,['access'],['access']
Security," default START TRANSACTION/COMMIT; SQL commands are used before and after data storage. If TSQLFile detects; any problems, ROLLBACK command will be used to restore; previous state of data base. If transactions not supported by SQL server,; they can be disabled by SetUseTransactions(kTransactionsOff). Or user; can take responsibility to use transactions function himself.; By default only indexes for basic tables are created.; In most cases usage of indexes increase performance to data reading,; but it also can increase time of writing data to database.; There are several modes of index usage available in SetUseIndexes() method; There is MakeSelectQuery(TClass*) method, which; produces SELECT statement to get objects data of specified class.; Difference from simple statement like:; mysql> SELECT * FROM TH1I_ver1; that not only data for that class, but also data from parent classes; will be extracted from other tables and combined in single result table.; Such select query can be useful for external access to objects data. Up to now MySQL 4.1 and Oracle 9i were tested.; Some extra work is required for other SQL databases.; Hopefully, this should be straightforward. Known problems and open questions.; -# TTree is not supported by TSQLFile. There is independent development; of TTreeSQL class, which allows to store trees directly in SQL database; -# TClonesArray is store objects in raw format,; which can not be accessed outside ROOT.; This will be changed later.; -# TDirectory cannot work. Hopefully, will (changes in ROOT basic I/O is required); -# Streamer infos are not written to file, therefore schema evolution; is not yet supported. All eforts are done to enable this feature in; the near future. ### Example how TSQLFile can be used. #### A session saving data to a SQL data base; ~~~{.cpp}; auto dbname = ""mysql://host.domain:3306/dbname"";; auto username = ""username"";; auto userpass = ""userpass"";. // Clean data base and create primary tables; auto f = new TSQLFile(dbnam",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/sql/src/TSQLFile.cxx:5724,access,access,5724,io/sql/src/TSQLFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/sql/src/TSQLFile.cxx,1,['access'],['access']
Security," dimensions) and their; /// crossings; /// - non-sensitivity to two-fold; /// coincidences (coincidences peak - background - background in all; /// dimensions) and their crossings; /// - ability to identify peaks close; /// to the edges of the spectrum region; /// - resolution, decomposition of; /// doublets and multiplets. The algorithm should be able to recognise close; /// positioned peaks.; ///; /// #### References:; ///; /// [1] M.A. Mariscotti: A method for; /// identification of peaks in the presence of background and its application to; /// spectrum analysis. NIM 50 (1967), 309-320.; ///; /// [2] M.Morhac, J. Kliman, V. Matouoek, M. Veselsky, I. Turzo.:Identification; /// of peaks in multidimensional coincidence gamma-ray spectra. NIM, A443 (2000); /// 108-125.; ///; /// [3] Z.K. Silagadze, A new algorithm for automatic photo-peak searches. NIM A 376 (1996), 451.; ///; /// ### Example of peak searching method; ///; /// SearchHighRes function provides users with the possibility; /// to vary the input parameters and with the access to the output deconvolved data; /// in the destination spectrum. Based on the output data one can tune the; /// parameters.; ///; /// #### Example 1 - script Search3.c:; ///; /// \image html spectrum3_searching_image001.jpg Fig. 1 Three-dimensional spectrum with 5 peaks (sigma=2, threshold=5%, 3 iterations steps in the deconvolution); /// \image html spectrum3_searching_image003.jpg Fig. 2 Spectrum from Fig. 1 after background elimination and deconvolution; ///; /// #### Script:; ///; /// Example to illustrate high resolution peak searching function (class TSpectrum3).; /// To execute this example, do:; ///; /// `root > .x Search3.C`; ///; /// ~~~ {.cpp}; /// void Search3() {; /// Int_t i, j, k, nfound;; /// Int_t nbinsx = 32;; /// Int_t nbinsy = 32;; /// Int_t nbinsz = 32;; /// Int_t xmin = 0;; /// Int_t xmax = nbinsx;; /// Int_t ymin = 0;; /// Int_t ymax = nbinsy;; /// Int_t zmin = 0;; /// Int_t zmax = nbinsz;; /// Double_t*** sour",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/spectrum/src/TSpectrum3.cxx:3055,access,access,3055,hist/spectrum/src/TSpectrum3.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/spectrum/src/TSpectrum3.cxx,1,['access'],['access']
Security," fFinalResult; }. // Called at the beginning of the event loop.; void Initialize() {}. // Called at the beginning of each processing task.; void InitTask(TTreeReader *, int) {}. /// Called at every entry.; void Exec(unsigned int slot); {; fPerThreadResults[slot]++;; }. // Called at the end of the event loop.; void Finalize(); {; *fFinalResult = std::accumulate(fPerThreadResults.begin(), fPerThreadResults.end(), 0);; }. // Called by RDataFrame to retrieve the name of this action.; std::string GetActionName() const { return ""MyCounter""; }; };. int main() {; ROOT::RDataFrame df(10);; ROOT::RDF::RResultPtr<int> resultPtr = df.Book<>(MyCounter{df.GetNSlots()}, {});; // The GetValue call triggers the event loop; std::cout << ""Number of processed entries: "" << resultPtr.GetValue() << std::endl;; }; ~~~. See the Book() method for more information and [this tutorial](https://root.cern/doc/master/df018__customActions_8C.html); for a more complete example. #### Injecting arbitrary code in the event loop with Foreach() and ForeachSlot(). Foreach() takes a callable (lambda expression, free function, functor...) and a list of columns and; executes the callable on the values of those columns for each event that passes all upstream selections.; It can be used to perform actions that are not already available in the interface. For example, the following snippet; evaluates the root mean square of column ""x"":; ~~~{.cpp}; // Single-thread evaluation of RMS of column ""x"" using Foreach; double sumSq = 0.;; unsigned int n = 0;; df.Foreach([&sumSq, &n](double x) { ++n; sumSq += x*x; }, {""x""});; std::cout << ""rms of x: "" << std::sqrt(sumSq / n) << std::endl;; ~~~; In multi-thread runs, users are responsible for the thread-safety of the expression passed to Foreach():; thread will execute the expression concurrently.; The code above would need to employ some resource protection mechanism to ensure non-concurrent writing of `rms`; but; this is probably too much head-scratch for such a simple ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx:69192,Inject,Injecting,69192,tree/dataframe/src/RDataFrame.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx,1,['Inject'],['Injecting']
Security," h=new TH1F(""h"", ""Histogram title;;Y Axis"", 100, 0, 1);; TH1F* h=new TH1F(""h"", "";;Y Axis"", 100, 0, 1);; ~~~; The method SetTitle() has the same syntax:; ~~~ {.cpp}; h->SetTitle(""Histogram title;Another X title Axis"");; ~~~; Alternatively, the title of each axis can be set directly:; ~~~ {.cpp}; h->GetXaxis()->SetTitle(""X axis title"");; h->GetYaxis()->SetTitle(""Y axis title"");; ~~~; For bin labels see \ref binning. \anchor binning; ## Binning. \anchor fix-var; ### Fix or variable bin size. All histogram types support either fix or variable bin sizes.; 2-D histograms may have fix size bins along X and variable size bins; along Y or vice-versa. The functions to fill, manipulate, draw or access; histograms are identical in both cases. Each histogram always contains 3 axis objects of type TAxis: fXaxis, fYaxis and fZaxis.; To access the axis parameters, use:; ~~~ {.cpp}; TAxis *xaxis = h->GetXaxis(); etc.; Double_t binCenter = xaxis->GetBinCenter(bin), etc.; ~~~; See class TAxis for a description of all the access functions.; The axis range is always stored internally in double precision. \anchor convention; ### Convention for numbering bins. For all histogram types: nbins, xlow, xup; ~~~ {.cpp}; bin = 0; underflow bin; bin = 1; first bin with low-edge xlow INCLUDED; bin = nbins; last bin with upper-edge xup EXCLUDED; bin = nbins+1; overflow bin; ~~~; In case of 2-D or 3-D histograms, a ""global bin"" number is defined.; For example, assuming a 3-D histogram with (binx, biny, binz), the function; ~~~ {.cpp}; Int_t gbin = h->GetBin(binx, biny, binz);; ~~~; returns a global/linearized gbin number. This global gbin is useful; to access the bin content/error information independently of the dimension.; Note that to access the information other than bin content and errors; one should use the TAxis object directly with e.g.:; ~~~ {.cpp}; Double_t xcenter = h3->GetZaxis()->GetBinCenter(27);; ~~~; returns the center along z of bin number 27 (not the global bin); in the 3-D histogra",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:7895,access,access,7895,hist/hist/src/TH1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx,1,['access'],['access']
Security," have input and output sharing the same buffer,; * for highly contrained memory environments.; * In both cases, it requires input to lay at the end of the buffer,; * and decompression to start at beginning of the buffer.; * Buffer size must feature some margin, hence be larger than final size.; *; * |<------------------------buffer--------------------------------->|; * |<-----------compressed data--------->|; * |<-----------decompressed size------------------>|; * |<----margin---->|; *; * This technique is more useful for decompression,; * since decompressed size is typically larger,; * and margin is short.; *; * In-place decompression will work inside any buffer; * which size is >= LZ4_DECOMPRESS_INPLACE_BUFFER_SIZE(decompressedSize).; * This presumes that decompressedSize > compressedSize.; * Otherwise, it means compression actually expanded data,; * and it would be more efficient to store such data with a flag indicating it's not compressed.; * This can happen when data is not compressible (already compressed, or encrypted).; *; * For in-place compression, margin is larger, as it must be able to cope with both; * history preservation, requiring input data to remain unmodified up to LZ4_DISTANCE_MAX,; * and data expansion, which can happen when input is not compressible.; * As a consequence, buffer size requirements are much higher,; * and memory savings offered by in-place compression are more limited.; *; * There are ways to limit this cost for compression :; * - Reduce history size, by modifying LZ4_DISTANCE_MAX.; * Note that it is a compile-time constant, so all compressions will apply this limit.; * Lower values will reduce compression ratio, except when input_size < LZ4_DISTANCE_MAX,; * so it's a reasonable trick when inputs are known to be small.; * - Require the compressor to deliver a ""maximum compressed size"".; * This is the `dstCapacity` parameter in `LZ4_compress*()`.; * When this size is < LZ4_COMPRESSBOUND(inputSize), then compression can fail,; * in ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/lz4/lz4.h:1097,encrypt,encrypted,1097,builtins/lz4/lz4.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/lz4/lz4.h,1,['encrypt'],['encrypted']
Security," if the user has installed a concurrent dispatcher.; //; // We satisfy these constraints by implementing a bootstrap phase during which; // allocation actions generated by MachOPlatform are appended to a list of; // deferred allocation actions, rather than to the graphs themselves. At the; // end of the bootstrap process the deferred actions are attached to a final; // ""complete-bootstrap"" graph that causes them to be run.; //; // The bootstrap steps are as follows:; //; // 1. Request the graph containing the mach header. This graph is guaranteed; // not to have any metadata so the fact that the registration functions; // are not available yet is not a problem.; //; // 2. Look up the registration functions and discard the results. This will; // trigger linking of the graph containing these functions, and; // consequently any graphs that it depends on. We do not use the lookup; // result to find the addresses of the functions requested (as described; // above the lookup will return too late for that), instead we capture the; // addresses in a post-allocation pass injected by the platform runtime; // during bootstrap only.; //; // 3. During bootstrap the MachOPlatformPlugin keeps a count of the number of; // graphs being linked (potentially concurrently), and we block until all; // of these graphs have completed linking. This is to avoid a race on the; // deferred-actions vector: the lookup for the runtime registration; // functions may return while some functions (those that are being; // incidentally linked in, but aren't reachable via the runtime functions); // are still being linked, and we need to capture any allocation actions; // for this incidental code before we proceed.; //; // 4. Once all active links are complete we transfer the deferred actions to; // a newly added CompleteBootstrap graph and then request a symbol from; // the CompleteBootstrap graph to trigger materialization. This will cause; // all deferred actions to be run, and once this lookup return",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/Orc/MachOPlatform.cpp:1989,inject,injected,1989,interpreter/llvm-project/llvm/lib/ExecutionEngine/Orc/MachOPlatform.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/Orc/MachOPlatform.cpp,1,['inject'],['injected']
Security," in two-dimensional coincidence spectra are; ///; /// - non-sensitivity to noise, i.e., only statistically relevant peaks should be identified; /// - non-sensitivity of the algorithm to continuous background; /// - non-sensitivity to one-fold coincidences (coincidences peak - background in both dimensions) and their crossings; /// - ability to identify peaks close to the edges of the spectrum region. Usually peak finders fail to detect them; /// - resolution, decomposition of doublets and multiplets. The algorithm should be able to recognise close positioned peaks.; /// - ability to identify peaks with different sigma; ///; /// #### References:; ///; /// [1] M.A. Mariscotti: A method for identification of peaks in the presence of; /// background and its application to spectrum analysis. NIM 50 (1967), 309-320.; ///; /// [2] M. Morhac;, J. Kliman, V. Matouoek, M. Veselsky, I. Turzo.:Identification; /// of peaks in multidimensional coincidence gamma-ray spectra. NIM, A443 (2000); /// 108-125.; ///; /// [3] Z.K. Silagadze, A new algorithm for automatic photopeak searches. NIM A 376; /// (1996), 451.; ///; /// ### Examples of peak searching method; ///; /// SearchHighRes function provides users with the possibility; /// to vary the input parameters and with the access to the output deconvolved data; /// in the destination spectrum. Based on the output data one can tune the; /// parameters.; ///; /// ### Example 8 - Src.C; ///; /// Begin_Macro(source); /// ../../../tutorials/spectrum/Src.C; /// End_Macro; ///; /// ### Example 9 - Src2.C; ///; /// Begin_Macro(source); /// ../../../tutorials/spectrum/Src2.C; /// End_Macro; ///; /// ### Example 10 - Src3.C; ///; /// Begin_Macro(source); /// ../../../tutorials/spectrum/Src3.C; /// End_Macro; ///; /// ### Example 11 - Src4.C; ///; /// Begin_Macro(source); /// ../../../tutorials/spectrum/Src4.C; /// End_Macro; ///; /// ### Example 12 - Src5.C; ///; /// Begin_Macro(source); /// ../../../tutorials/spectrum/Src5.C; /// End_Macro",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/spectrum/src/TSpectrum2.cxx:2873,access,access,2873,hist/spectrum/src/TSpectrum2.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/spectrum/src/TSpectrum2.cxx,1,['access'],['access']
Security," input dataset specification JSON file needs to be provided by the user and it describes all necessary samples and; their associated metadata information. The main required key is the ""samples"" (at least one sample is needed) and the; required sub-keys for each sample are ""trees"" and ""files"". Additionally, one can specify a metadata dictionary for each; sample in the ""metadata"" key. A simple example for the formatting of the specification in the JSON file is the following:. ~~~{.cpp}; {; ""samples"": {; ""sampleA"": {; ""trees"": [""tree1"", ""tree2""],; ""files"": [""file1.root"", ""file2.root""],; ""metadata"": {; ""lumi"": 10000.0, ; ""xsec"": 1.0,; ""sample_category"" = ""data""; }; },; ""sampleB"": {; ""trees"": [""tree3"", ""tree4""],; ""files"": [""file3.root"", ""file4.root""],; ""metadata"": {; ""lumi"": 0.5, ; ""xsec"": 1.5,; ""sample_category"" = ""MC_background""; }; }; }; }; ~~~. The metadata information from the specification file can be then accessed using the DefinePerSample function.; For example, to access luminosity information (stored as a double):. ~~~{.python}; df.DefinePerSample(""lumi"", 'rdfsampleinfo_.GetD(""lumi"")'); ~~~. or sample_category information (stored as a string):. ~~~{.python}; df.DefinePerSample(""sample_category"", 'rdfsampleinfo_.GetS(""sample_category"")'); ~~~. or directly the filename:. ~~~{.python}; df.DefinePerSample(""name"", ""rdfsampleinfo_.GetSampleName()""); ~~~. An example implementation of the ""FromSpec"" method is available in tutorial: df106_HiggstoFourLeptons.py, which also; provides a corresponding exemplary JSON file for the dataset specification. \anchor progressbar; ### Adding a progress bar . A progress bar showing the processed event statistics can be added to any RDataFrame program.; The event statistics include elapsed time, currently processed file, currently processed events, the rate of event processing ; and an estimated remaining time (per file being processed). It is recorded and printed in the terminal every m events and every ; n seconds (by default m = 10",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx:79075,access,access,79075,tree/dataframe/src/RDataFrame.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx,1,['access'],['access']
Security," intersect with sisters; unless this is specified (see TGeoVolume::AddNodeOverlap()), the top volume; (containing all geometry tree) must be specified before closing the geometry; and must not be positioned - it represents the global reference frame. After; building the full geometry tree, the geometry must be closed; (see TGeoManager::CloseGeometry()). Voxelization can be redone per volume after; this process. Below is the general scheme of the manager class. \image html geom_mgr.jpg. ## An interactive session. Provided that a geometry was successfully built and closed (for instance the; previous example $ROOTSYS/tutorials/geom/rootgeom.C ), the manager class will register; itself to ROOT and the logical/physical structures will become immediately browsable.; The ROOT browser will display starting from the geometry folder : the list of; transformations and media, the top volume and the top logical node. These last; two can be fully expanded, any intermediate volume/node in the browser being subject; of direct access context menu operations (right mouse button click). All user; utilities of classes TGeoManager, TGeoVolume and TGeoNode can be called via the; context menu. \image html geom_browser.jpg. ### Drawing the geometry. Any logical volume can be drawn via TGeoVolume::Draw() member function.; This can be directly accessed from the context menu of the volume object; directly from the browser.; There are several drawing options that can be set with; TGeoManager::SetVisOption(Int_t opt) method :. #### opt=0; only the content of the volume is drawn, N levels down (default N=3).; This is the default behavior. The number of levels to be drawn can be changed; via TGeoManager::SetVisLevel(Int_t level) method. \image html geom_frame0.jpg. #### opt=1; the final leaves (e.g. daughters with no containment) of the branch; starting from volume are drawn down to the current number of levels.; WARNING : This mode is memory consuming; depending of the size of geometry, so drawin",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoManager.cxx:8125,access,access,8125,geom/geom/src/TGeoManager.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoManager.cxx,1,['access'],['access']
Security," is called with a non-zero size and a cache; did not previously exist; - TTreeCache::StartLearningPhase is called.; - TTreeCache::SetEntryRange is called; * and the learning is not yet finished; * and has not been set to manual; * and the new minimun entry is different. The learning period is stopped (and prefetching is started) when:; - TTreeCache::StopLearningPhase is called.; - An entry outside the 'learning' range is requested; The 'learning range is from fEntryMin (default to 0) to; fEntryMin + fgLearnEntries.; - A 'cached' TChain switches over to a new file. \anchor cachemisses; ## Self-optimization in presence of cache misses. The TTreeCache can optimize its behavior on a cache miss. When; miss optimization is enabled (see the SetOptimizeMisses method),; it tracks all branches utilized after the learning phase which caused a cache; miss.; When one cache miss occurs, all the utilized branches are be prefetched; for that event. This optimization utilizes the observation that infrequently; accessed branches are often accessed together.; An example scenario where such behavior is desirable, is an analysis where; a set of collections are read only for a few events in which a certain; condition is respected, e.g. a trigger fired. ### Additional memory and CPU usage when optimizing for cache misses; When this mode is enabled, the memory dedicated to the cache can increase; by at most a factor two in the case of cache miss.; Additionally, on the first miss of an event, we must iterate through all the; ""active branches"" for the miss cache and find the correct basket.; This can be potentially a CPU-expensive operation compared to, e.g., the; latency of a SSD. This is why the miss cache is currently disabled by default. \anchor examples; ## Example usages of TTreeCache. A few use cases are discussed below. A cache may be created with automatic; sizing when a TTree is used:. In some applications, e.g. central processing workflows of experiments, the list; of branches to r",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTreeCache.cxx:5151,access,accessed,5151,tree/tree/src/TTreeCache.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTreeCache.cxx,2,['access'],['accessed']
Security," llvm.preserve.static.offset + GEP + load / store; // with llvm.bpf.getelementptr.and.load / store; //; // This file implements BPFPreserveStaticOffsetPass transformation.; // This transformation address two BPF verifier specific issues:; //; // (a) Access to the fields of some structural types is allowed only; // using load and store instructions with static immediate offsets.; //; // Examples of such types are `struct __sk_buff` and `struct; // bpf_sock_ops`. This is so because offsets of the fields of; // these structures do not match real offsets in the running; // kernel. During BPF program load LDX and STX instructions; // referring to the fields of these types are rewritten so that; // offsets match real offsets. For this rewrite to happen field; // offsets have to be encoded as immediate operands of the; // instructions.; //; // See kernel/bpf/verifier.c:convert_ctx_access function in the; // Linux kernel source tree for details.; //; // (b) Pointers to context parameters of BPF programs must not be; // modified before access.; //; // During BPF program verification a tag PTR_TO_CTX is tracked for; // register values. In case if register with such tag is modified; // BPF program is not allowed to read or write memory using this; // register. See kernel/bpf/verifier.c:check_mem_access function; // in the Linux kernel source tree for details.; //; // The following sequence of the IR instructions:; //; // %x = getelementptr %ptr, %constant_offset; // %y = load %x; //; // Is translated as a single machine instruction:; //; // LDW %ptr, %constant_offset; //; // In order for cases (a) and (b) to work the sequence %x-%y above has; // to be preserved by the IR passes.; //; // However, several optimization passes might sink `load` instruction; // or hoist `getelementptr` instruction so that the instructions are; // no longer in sequence. Examples of such passes are:; // SimplifyCFGPass, InstCombinePass, GVNPass.; // After such modification the verifier would reject th",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/BPF/BPFPreserveStaticOffset.cpp:1440,access,access,1440,interpreter/llvm-project/llvm/lib/Target/BPF/BPFPreserveStaticOffset.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/BPF/BPFPreserveStaticOffset.cpp,1,['access'],['access']
Security," myPx and myPy were iterators (note the '*'; // in front of them):; myHist->Fill(*myPx + *myPy);; }. myHist->Draw();; }; ~~~. A more complete example including error handling and a few combinations of; TTreeReaderValue and TTreeReaderArray would look like this:. ~~~{.cpp}; #include <TFile.h>; #include <TH1.h>; #include <TTreeReader.h>; #include <TTreeReaderValue.h>; #include <TTreeReaderArray.h>. #include ""TriggerInfo.h""; #include ""Muon.h""; #include ""Tau.h"". #include <vector>; #include <iostream>. bool CheckValue(ROOT::Internal::TTreeReaderValueBase& value) {; if (value.GetSetupStatus() < 0) {; std::cerr << ""Error "" << value.GetSetupStatus(); << ""setting up reader for "" << value.GetBranchName() << '\n';; return false;; }; return true;; }. // Analyze the tree ""MyTree"" in the file passed into the function.; // Returns false in case of errors.; bool analyze(TFile* file) {; // Create a TTreeReader named ""MyTree"" from the given TDirectory.; // The TTreeReader gives access to the TTree to the TTreeReaderValue and; // TTreeReaderArray objects. It knows the current entry number and knows; // how to iterate through the TTree.; TTreeReader reader(""MyTree"", file);. // Read a single float value in each tree entries:; TTreeReaderValue<float> weight(reader, ""event.weight"");. // Read a TriggerInfo object from the tree entries:; TTreeReaderValue<TriggerInfo> triggerInfo(reader, ""triggerInfo"");. //Read a vector of Muon objects from the tree entries:; TTreeReaderValue<std::vector<Muon>> muons(reader, ""muons"");. //Read the pT for all jets in the tree entry:; TTreeReaderArray<double> jetPt(reader, ""jets.pT"");. // Read the taus in the tree entry:; TTreeReaderArray<Tau> taus(reader, ""taus"");. // Now iterate through the TTree entries and fill a histogram. TH1F(""hist"", ""TTreeReader example histogram"", 10, 0., 100.);. bool firstEntry = true;; while (reader.Next()) {; if (firstEntry) {; // Check that branches exist and their types match our expectation.; if (!CheckValue(weight)) return false",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeReader.cxx:2783,access,access,2783,tree/treeplayer/src/TTreeReader.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeReader.cxx,1,['access'],['access']
Security," occur at offset 0. vbptrs can occur at an arbitrary offset and are; // placed after the lexicographically last non-virtual base. This placement; // is always before fields but can be in the middle of the non-virtual bases; // due to the two-pass layout scheme for non-virtual-bases.; // * Virtual bases sometimes require a 'vtordisp' field that is laid out before; // the virtual base and is used in conjunction with virtual overrides during; // construction and destruction. This is always a 4 byte value and is used as; // an alternative to constructor vtables.; // * vtordisps are allocated in a block of memory with size and alignment equal; // to the alignment of the completed structure (before applying __declspec(; // align())). The vtordisp always occur at the end of the allocation block,; // immediately prior to the virtual base.; // * vfptrs are injected after all bases and fields have been laid out. In; // order to guarantee proper alignment of all fields, the vfptr injection; // pushes all bases and fields back by the alignment imposed by those bases; // and fields. This can potentially add a significant amount of padding.; // vfptrs are always injected at offset 0.; // * vbptrs are injected after all bases and fields have been laid out. In; // order to guarantee proper alignment of all fields, the vfptr injection; // pushes all bases and fields back by the alignment imposed by those bases; // and fields. This can potentially add a significant amount of padding.; // vbptrs are injected immediately after the last non-virtual base as; // lexicographically ordered in the code. If this site isn't pointer aligned; // the vbptr is placed at the next properly aligned location. Enough padding; // is added to guarantee a fit.; // * The last zero sized non-virtual base can be placed at the end of the; // struct (potentially aliasing another object), or may alias with the first; // field, even if they are of the same type.; // * The last zero size virtual base may be placed",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:1876,inject,injection,1876,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,1,['inject'],['injection']
Security," of `add`, `addRange`, and `addRangeElements`; /// functions, various types (e.g. `ArrayRef`, `StringRef`, etc.) can be hashed; /// without requiring any knowledge of hashed types from the hasher type.; ///; /// The only method expected from the templated hasher type `HasherT` is:; /// * void update(ArrayRef<uint8_t> Data); ///; /// Additionally, the following methods will be forwarded to the hasher type:; /// * decltype(std::declval<HasherT &>().final()) final(); /// * decltype(std::declval<HasherT &>().result()) result(); ///; /// From a user point of view, the interface provides the following:; /// * `template<typename T> add(const T &Value)`; /// The `add` function implements hashing of various types.; /// * `template <typename ItT> void addRange(ItT First, ItT Last)`; /// The `addRange` function is designed to aid hashing a range of values.; /// It explicitly adds the size of the range in the hash.; /// * `template <typename ItT> void addRangeElements(ItT First, ItT Last)`; /// The `addRangeElements` function is also designed to aid hashing a range of; /// values. In contrast to `addRange`, it **ignores** the size of the range,; /// behaving as if elements were added one at a time with `add`.; ///; /// User-defined `struct` types can participate in this interface by providing; /// an `addHash` templated function. See the associated template specialization; /// for details.; ///; /// This interface does not impose requirements on the hasher; /// `update(ArrayRef<uint8_t> Data)` method. We want to avoid collisions for; /// variable-size types; for example for; /// ```; /// builder.add({1});; /// builder.add({2, 3});; /// ```; /// and; /// ```; /// builder.add({1, 2});; /// builder.add({3});; /// ```; /// . Thus, specializations of `add` and `addHash` for variable-size types must; /// not assume that the hasher type considers the size as part of the hash; they; /// must explicitly add the size to the hash. See for example specializations; /// for `ArrayRef` and `St",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h:1156,hash,hashing,1156,interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,1,['hash'],['hashing']
Security," on x86.; *; * VZIP takes two registers, and puts even lanes in one register and odd lanes; * in the other.; *; * On ARMv7-A, this strangely modifies both parameters in place instead of; * taking the usual 3-operand form.; *; * Therefore, if we want to do this, we can simply use a D-form VZIP.32 on the; * lower and upper halves of the Q register to end up with the high and low; * halves where we want - all in one instruction.; *; * vzip.32 d10, d11 @ d10 = { d10[0], d11[0] }; d11 = { d10[1], d11[1] }; *; * Unfortunately we need inline assembly for this: Instructions modifying two; * registers at once is not possible in GCC or Clang's IR, and they have to; * create a copy.; *; * aarch64 requires a different approach.; *; * In order to make it easier to write a decent compiler for aarch64, many; * quirks were removed, such as conditional execution.; *; * NEON was also affected by this.; *; * aarch64 cannot access the high bits of a Q-form register, and writes to a; * D-form register zero the high bits, similar to how writes to W-form scalar; * registers (or DWORD registers on x86_64) work.; *; * The formerly free vget_high intrinsics now require a vext (with a few; * exceptions); *; * Additionally, VZIP was replaced by ZIP1 and ZIP2, which are the equivalent; * of PUNPCKL* and PUNPCKH* in SSE, respectively, in order to only modify one; * operand.; *; * The equivalent of the VZIP.32 on the lower and upper halves would be this; * mess:; *; * ext v2.4s, v0.4s, v0.4s, #2 // v2 = { v0[2], v0[3], v0[0], v0[1] }; * zip1 v1.2s, v0.2s, v2.2s // v1 = { v0[0], v2[0] }; * zip2 v0.2s, v0.2s, v1.2s // v0 = { v0[1], v2[1] }; *; * Instead, we use a literal downcast, vmovn_u64 (XTN), and vshrn_n_u64 (SHRN):; *; * shrn v1.2s, v0.2d, #32 // v1 = (uint32x2_t)(v0 >> 32);; * xtn v0.2s, v0.2d // v0 = (uint32x2_t)(v0 & 0xFFFFFFFF);; *; * This is available on ARMv7-A, but is less efficient than a single VZIP.32.; */; /*; * Function-like macro:; * void XXH_SPLIT_IN_PLACE(uint64x2_t &in, uint32",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/xxhash/xxhash.h:1715,access,access,1715,builtins/xxhash/xxhash.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/xxhash/xxhash.h,1,['access'],['access']
Security," or died) is indicated with the eof(); * method, serious I/O errors set a flags (bad(), fail()), and also throw; * exceptions. For normal read/write operations, they can be suppressed (i.e.; * error reporting only using flags) with a constructor argument.; *; * Technicalities:; * - there is a pool of mmapped pages, half the pages are allocated to the; * parent process, half to the child; * - when one side has accumulated enough data (or a flush forces dirty pages; * out to the other end), it sends these pages to the other end by writing a; * byte containing the page number into the pipe; * - the other end (which has the pages mmapped, too) reads the page number(s); * and puts the corresponding pages on its busy list; * - as the other ends reads, it frees busy pages, and eventually tries to put; * them on the its list; if a page belongs to the other end of the; * connection, it is sent back; * - lists of pages are sent across the pipe, not individual pages, in order; * to minimise the number of read/write operations needed; * - when mmap works properly, only one bytes containing the page number of; * the page list head is sent back and forth; the contents of that page; * allow to access the rest of the page list sent, and page headers on the; * list tell the receiving end if the page is free or has to be added to the; * busy list; * - when mmap does not work, we transfer one byte to indicate the head of the; * page list sent, and for each page on the list of sent pages, the page; * header and the page payload is sent (if the page is free, we only; * transmit the page header, and we never transmit more payload than; * the page actually contains); * - in the child, all open BidirMMapPipes but the current one are closed. this; * is done for two reasons: first, to conserve file descriptors and address; * space. second, if more than one process is meant to use such a; * BidirMMapPipe, synchronisation issues arise which can lead to bugs that; * are hard to find and understa",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h:4349,access,access,4349,roofit/roofitcore/src/BidirMMapPipe.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h,1,['access'],['access']
Security," similarly to what happens during Filter and Define calls. It must; /// return an RVec of varied values, one for each variation tag, in the same order as the tags.; /// \param[in] inputColumns the names of the columns to be passed to the callable.; /// \param[in] variationTags names for each of the varied values, e.g. `""up""` and `""down""`.; /// \param[in] variationName a generic name for this set of varied values, e.g. `""ptvariation""`.; ///; /// Vary provides a natural and flexible syntax to define systematic variations that automatically propagate to; /// Filters, Defines and results. RDataFrame usage of columns with attached variations does not change, but for; /// results that depend on any varied quantity, a map/dictionary of varied results can be produced with; /// ROOT::RDF::Experimental::VariationsFor (see the example below).; ///; /// The dictionary will contain a ""nominal"" value (accessed with the ""nominal"" key) for the unchanged result, and; /// values for each of the systematic variations that affected the result (via upstream Filters or via direct or; /// indirect dependencies of the column values on some registered variations). The keys will be a composition of; /// variation names and tags, e.g. ""pt:up"" and ""pt:down"" for the example below.; ///; /// In the following example we add up/down variations of pt and fill a histogram with a quantity that depends on pt.; /// We automatically obtain three histograms in output (""nominal"", ""pt:up"" and ""pt:down""):; /// ~~~{.cpp}; /// auto nominal_hx =; /// df.Vary(""pt"", [] (double pt) { return RVecD{pt*0.9, pt*1.1}; }, {""down"", ""up""}); /// .Filter(""pt > k""); /// .Define(""x"", someFunc, {""pt""}); /// .Histo1D(""x"");; ///; /// auto hx = ROOT::RDF::Experimental::VariationsFor(nominal_hx);; /// hx[""nominal""].Draw();; /// hx[""pt:down""].Draw(""SAME"");; /// hx[""pt:up""].Draw(""SAME"");; /// ~~~; /// RDataFrame computes all variations as part of a single loop over the data.; /// In particular, this means that I/O and computation o",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RDF/RInterface.hxx:1234,access,accessed,1234,tree/dataframe/inc/ROOT/RDF/RInterface.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RDF/RInterface.hxx,1,['access'],['accessed']
Security," specify option ""U"" and; /// call the following function:; /// ~~~ {.cpp}; /// TVirtualFitter::Fitter(mygraph)->SetFCN(MyFittingFunction); /// ~~~; /// where MyFittingFunction is of type:; /// ~~~ {.cpp}; /// extern void MyFittingFunction(Int_t &npar, Double_t *gin, Double_t &f, Double_t *u, Int_t flag);; /// ~~~; ///; /// ### Access to the fit result; ///; /// The function returns a TFitResultPtr which can hold a pointer to a TFitResult object.; /// By default the TFitResultPtr contains only the status of the fit and it converts; /// automatically to an integer. If the option ""S"" is instead used, TFitResultPtr contains; /// the TFitResult and behaves as a smart pointer to it. For example one can do:; /// ~~~ {.cpp}; /// TFitResultPtr r = graph->Fit(""myFunc"",""S"");; /// TMatrixDSym cov = r->GetCovarianceMatrix(); // to access the covariance matrix; /// Double_t par0 = r->Parameter(0); // retrieve the value for the parameter 0; /// Double_t err0 = r->ParError(0); // retrieve the error for the parameter 0; /// r->Print(""V""); // print full information of fit including covariance matrix; /// r->Write(); // store the result in a file; /// ~~~; ///; /// The fit parameters, error and chi2 (but not covariance matrix) can be retrieved also; /// from the fitted function.; ///; /// ### Associated functions; ///; /// One or more object (typically a TF1*) can be added to the list; /// of functions (fFunctions) associated to each graph.; /// When TGraph::Fit is invoked, the fitted function is added to this list.; /// Given a graph gr, one can retrieve an associated function; /// with:; /// ~~~ {.cpp}; /// TF1 *myfunc = gr->GetFunction(""myfunc"");; /// ~~~; ///; /// If the graph is made persistent, the list of; /// associated functions is also persistent. Given a pointer (see above); /// to an associated function myfunc, one can retrieve the function/fit; /// parameters with calls such as:; /// ~~~ {.cpp}; /// Double_t chi2 = myfunc->GetChisquare();; /// Double_t par0 = myfunc->GetPa",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiGraph.cxx:4781,access,access,4781,hist/hist/src/TMultiGraph.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiGraph.cxx,1,['access'],['access']
Security," the objects (where possible).; *; * To attempt to manage this buffer, given these constraints, the ZSTD_cwksp; * abstraction was created. It works as follows:; *; * Workspace Layout:; *; * [ ... workspace ... ]; * [objects][tables ... ->] free space [<- ... aligned][<- ... buffers]; *; * The various objects that live in the workspace are divided into the; * following categories, and are allocated separately:; *; * - Static objects: this is optionally the enclosing ZSTD_CCtx or ZSTD_CDict,; * so that literally everything fits in a single buffer. Note: if present,; * this must be the first object in the workspace, since ZSTD_customFree{CCtx,; * CDict}() rely on a pointer comparison to see whether one or two frees are; * required.; *; * - Fixed size objects: these are fixed-size, fixed-count objects that are; * nonetheless ""dynamically"" allocated in the workspace so that we can; * control how they're initialized separately from the broader ZSTD_CCtx.; * Examples:; * - Entropy Workspace; * - 2 x ZSTD_compressedBlockState_t; * - CDict dictionary contents; *; * - Tables: these are any of several different datastructures (hash tables,; * chain tables, binary trees) that all respect a common format: they are; * uint32_t arrays, all of whose values are between 0 and (nextSrc - base).; * Their sizes depend on the cparams.; *; * - Aligned: these buffers are used for various purposes that require 4 byte; * alignment, but don't require any initialization before they're used.; *; * - Buffers: these buffers are used for various purposes that don't require; * any alignment or initialization before they're used. This means they can; * be moved around at no cost for a new compression.; *; * Allocating Memory:; *; * The various types of objects must be allocated in order, so they can be; * correctly packed into the workspace buffer. That order is:; *; * 1. Objects; * 2. Buffers; * 3. Aligned; * 4. Tables; *; * Attempts to reserve objects of different types out of order will fail.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h:2765,hash,hash,2765,builtins/zstd/compress/zstd_cwksp.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h,1,['hash'],['hash']
Security," these variants don't already exist, they are created as needed:; ~~~ {.cpp}; Int_t dark = TColor::GetColorDark(color_index);; Int_t bright = TColor::GetColorBright(color_index);; ~~~. \anchor C031; ## Accessible Color Schemes; Choosing an appropriate color scheme is essential for making results easy to understand and; interpret. Factors like colorblindness and converting colors to grayscale for publications; can impact accessibility. Furthermore, results should be aesthetically pleasing. The following; three color schemes, recommended by M. Petroff in [arXiv:2107.02270v2](https://arxiv.org/pdf/2107.02270); and available on [GitHub](https://github.com/mpetroff/accessible-color-cycles); under the MIT License, meet these criteria. These three color schemes are available as color sets with 6, 8, and 10 colors, named; `kP[6, 8, 10]ColorName`. For example, `kP6Red` represents the red color within the P6 color scheme; (`P` for Petroff or Preferred). Begin_Macro; ../../../tutorials/graphics/accessiblecolorschemes.C; End_Macro. The example thstackcolorscheme.C illustrates how to use these color schemes in THStack drawings.; It also demonstrates that they are effective in grayscale. \anchor C04; ## Grayscale view of of canvas with colors; One can toggle between a grayscale preview and the regular colored mode using; `TCanvas::SetGrayscale()`. Note that in grayscale mode, access via RGB; will return grayscale values according to ITU standards (and close to b&w; printer gray-scales), while access via HLS returns de-saturated gray-scales. The; image below shows the ROOT color wheel in grayscale mode. Begin_Macro(source); {; auto w = new TColorWheel();; auto cw = new TCanvas(""cw"",""cw"",0,0,400,400);; cw->GetCanvas()->SetGrayscale();; w->SetCanvas(cw);; w->Draw();; }; End_Macro. \anchor C05; ## Color palettes; It is often very useful to represent a variable with a color map. The concept; of ""color palette"" allows to do that. One color palette is active at any time.; This ""current p",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:5146,access,accessiblecolorschemes,5146,core/base/src/TColor.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx,1,['access'],['accessiblecolorschemes']
Security," to be used for authentication purposes for this file by using a; /// string of the form ""AUTH=myAccessKey:mySecretkey"". This may be useful to; /// open several files hosted by different providers in the same program/macro,; /// where the environemntal variables solution is not convenient (see below).; ///; /// To use AWS temporary security credentials you need to specify the session; /// token. This can be added to the options argument with a string of the form; /// TOKEN=mySessionToken. The temporary access and secret keys must also be; /// available, either via the AUTH option or by environmental variable.; ///; /// If you need to specify more than one option separate them by ' '; /// (blank), for instance:; /// ""NOPROXY AUTH=F38XYZABCDeFgH4D0E1F:V+frt4re7J1euSNFnmaf8wwmI4AAAE7kzxZ/TTM+""; ///; /// Examples:; /// ```; /// TFile* f1 = TFile::Open(""s3://host.example.com/bucket/path/to/my/file"",; /// ""NOPROXY AUTH=F38XYZABCDeFgH4D0E1F:V+frt4re7J1euSNFnmaf8wwmI4AAAE7kzxZ/TTM+"");; /// TFile* f2 = TFile::Open(""s3://host.example.com/bucket/path/to/my/file"",; /// ""AUTH=F38XYZABCDeFgH4D0E1F:V+frt4re7J1euSNFnmaf8wwmI4AAAE7kzxZ/TTM+"");; /// TFile* f3 = TFile::Open(""s3://host.example.com/bucket/path/to/my/file"",; /// ""TOKEN=AQoDYXdzEM///////////wEa8AHEYmCinjD+TsGEjtgKSMAT6wnY"");; /// ```; ///; /// If there is no authentication information in the 'options' argument; /// (i.e. not AUTH=""...."") the values of the environmental variables; /// S3_ACCESS_KEY and S3_SECRET_KEY (if set) are expected to contain; /// the access key id and the secret access key, respectively. You have; /// been provided with these credentials by your S3 service provider.; ///; /// If neither the AUTH information is provided in the 'options' argument; /// nor the environmental variables are set, we try to open the file; /// without providing any authentication information to the server. This; /// is useful when the file is set an access control that allows for; /// any unidentified user to read the file.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TS3WebFile.cxx:3264,authenticat,authentication,3264,net/net/src/TS3WebFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TS3WebFile.cxx,5,"['access', 'authenticat']","['access', 'authentication']"
Security," to client node; ///; /// All incoming requests processed in THttpServer in timer handler with 10 ms timeout.; /// One may decrease value to improve latency or increase value to minimize CPU load; ///; /// WebGui.HttpTimer: 10; ///; /// To processing incoming http requests and websockets, THttpServer allocate 10 threads; /// One have to increase this number if more simultaneous connections are expected:; ///; /// WebGui.HttpThrds: 10; ///; /// One also can configure usage of special thread of processing of http server requests; ///; /// WebGui.HttpThrd: no; ///; /// Extra threads can be used to send data to different clients via websocket (default no); ///; /// WebGui.SenderThrds: no; ///; /// If required, one could change websocket timeouts (default is 10000 ms); ///; /// WebGui.HttpWSTmout: 10000; ///; /// By default, THttpServer created in restricted mode which only allows websocket handlers; /// and processes only very few other related http requests. For security reasons such mode; /// should be always enabled. Only if it is really necessary to process all other kinds; /// of HTTP requests, one could specify no for following parameter (default yes):; ///; /// WebGui.WSOnly: yes; ///; /// In some applications one may need to force longpoll websocket emulations from the beginning,; /// for instance when clients connected via proxys. Although JSROOT should automatically fallback; /// to longpoll engine, one can configure this directly (default no); ///; /// WebGui.WSLongpoll: no; ///; /// Following parameter controls browser max-age caching parameter for files (default 3600); /// When 0 is specified, browser cache will be disabled; ///; /// WebGui.HttpMaxAge: 3600; ///; /// Also one can provide extra URL options for, see TCivetweb::Create for list of supported options; ///; /// WebGui.HttpExtraArgs: winsymlinks=no; ///; /// One also can configure usage of FastCGI server for web windows:; ///; /// WebGui.FastCgiPort: 4000; /// WebGui.FastCgiThreads: 10; ///; /// To",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx:2264,secur,security,2264,gui/webdisplay/src/RWebWindowsManager.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx,1,['secur'],['security']
Security," to store some meta information about which operands are ""normal"" operands,; /// and which ones belong to some operand bundle.; ///; /// The layout of an operand bundle user is; ///; /// +-----------uint32_t End-------------------------------------+; /// | |; /// | +--------uint32_t Begin--------------------+ |; /// | | | |; /// ^ ^ v v; /// |------|------|----|----|----|----|----|---------|----|---------|----|-----; /// | BOI0 | BOI1 | .. | DU | U0 | U1 | .. | BOI0_U0 | .. | BOI1_U0 | .. | Un; /// |------|------|----|----|----|----|----|---------|----|---------|----|-----; /// v v ^ ^; /// | | | |; /// | +--------uint32_t Begin------------+ |; /// | |; /// +-----------uint32_t End-----------------------------+; ///; ///; /// BOI0, BOI1 ... are descriptions of operand bundles in this User's use; /// list. These descriptions are installed and managed by this class, and; /// they're all instances of OperandBundleUser<T>::BundleOpInfo.; ///; /// DU is an additional descriptor installed by User's 'operator new' to keep; /// track of the 'BOI0 ... BOIN' co-allocation. OperandBundleUser does not; /// access or modify DU in any way, it's an implementation detail private to; /// User.; ///; /// The regular Use& vector for the User starts at U0. The operand bundle; /// uses are part of the Use& vector, just like normal uses. In the diagram; /// above, the operand bundle uses start at BOI0_U0. Each instance of; /// BundleOpInfo has information about a contiguous set of uses constituting; /// an operand bundle, and the total set of operand bundle uses themselves; /// form a contiguous set of uses (i.e. there are no gaps between uses; /// corresponding to individual operand bundles).; ///; /// This class does not know the location of the set of operand bundle uses; /// within the use list -- that is decided by the User using this class via; /// the BeginIdx argument in populateBundleOperandInfos.; ///; /// Currently operand bundle users with hung-off operands are not supported.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h:1305,access,access,1305,interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,1,['access'],['access']
Security," | SVE stack objects |; // | |; // |-----------------------------------|; // |.empty.space.to.make.part.below....|; // |.aligned.in.case.it.needs.more.than| (size of this area is unknown at; // |.the.standard.16-byte.alignment....| compile time; if present); // |-----------------------------------|; // | |; // | local variables of fixed size |; // | including spill slots |; // |-----------------------------------| <- bp(not defined by ABI,; // |.variable-sized.local.variables....| LLVM chooses X19); // |.(VLAs)............................| (size of this area is unknown at; // |...................................| compile time); // |-----------------------------------| <- sp; // | | Lower address; //; //; // To access the data in a frame, at-compile time, a constant offset must be; // computable from one of the pointers (fp, bp, sp) to access it. The size; // of the areas with a dotted background cannot be computed at compile-time; // if they are present, making it required to have all three of fp, bp and; // sp to be set up to be able to access all contents in the frame areas,; // assuming all of the frame areas are non-empty.; //; // For most functions, some of the frame areas are empty. For those functions,; // it may not be necessary to set up fp or bp:; // * A base pointer is definitely needed when there are both VLAs and local; // variables with more-than-default alignment requirements.; // * A frame pointer is definitely needed when there are local variables with; // more-than-default alignment requirements.; //; // For Darwin platforms the frame-record (fp, lr) is stored at the top of the; // callee-saved area, since the unwind encoding does not allow for encoding; // this dynamically and existing tools depend on this layout. For other; // platforms, the frame-record is stored at the bottom of the (gpr) callee-saved; // area to allow SVE stack objects (allocated directly below the callee-saves,; // if available) to be accessed directly from the framepointer.; ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:3075,access,access,3075,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,1,['access'],['access']
Security,""""""" A small program to compute checksums of LLVM checkout.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py:31,checksum,checksums,31,interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py,1,['checksum'],['checksums']
Security,""""""" This module parses and validates arguments for command-line interfaces. It uses argparse module to create the command line parser. (This library is; in the standard python library since 3.2 and backported to 2.7, but not; earlier.). It also implements basic validation methods, related to the command.; Validations are mostly calling specific help methods, or mangling values.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py:27,validat,validates,27,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py,3,"['Validat', 'validat']","['Validations', 'validates', 'validation']"
Security,"""""""; // Inject the C++ class CustomObject in the C++ runtime.; class CustomObject {; public:; int x = 42;; };; // Create a function that returns such an object. This is called to fill the dataframe.; CustomObject fill_object() { return CustomObject(); }; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df026_AsNumpyArrays.py:8,Inject,Inject,8,tutorials/dataframe/df026_AsNumpyArrays.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df026_AsNumpyArrays.py,1,['Inject'],['Inject']
Security,"""""""; A generator that returns the validation batches of the given base; generator. NOTE: The ValidationRBatchGenerator only returns batches; if the training has been run. Args:; base_generator (BaseGenerator):; The base connection to the Cpp code; conversion_function (Callable[RTensor, np.NDArray|torch.Tensor]):; Function that converts a given RTensor into a python batch; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py:34,validat,validation,34,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py,2,"['Validat', 'validat']","['ValidationRBatchGenerator', 'validation']"
Security,"""""""; A unique identifier for the current execution of the computation graph of; a particular RDataFrame instance. The class is hashable so it can be used; as a key in dictionaries. Attributes:. rdf_uuid: An identifier for the specific RDataFrame instance.; graph_uuid: An identifier for the computation graph sent to the workers for; the current execution.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/_graph_cache.py:127,hash,hashable,127,bindings/experimental/distrdf/python/DistRDF/_graph_cache.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/_graph_cache.py,1,['hash'],['hashable']
Security,"""""""; Allow access to objects through the method Get(). This concerns both TDirectoryFile and TFile, since the latter; inherits the Get method from the former.; We decided not to inject this behavior directly in TDirectory; because this one already has a templated method Get which, when; invoked from Python, returns an object of the derived class (e.g. TH1F); and not a generic TObject.; In case the object is not found, a null pointer is returned.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tdirectoryfile.py:11,access,access,11,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tdirectoryfile.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tdirectoryfile.py,2,"['access', 'inject']","['access', 'inject']"
Security,"""""""; Allow branches to be accessed as attributes of a tree. Allow access to branches/leaves as if they were Python data attributes of; the tree (e.g. mytree.branch). To avoid using the CPyCppyy API, any necessary cast is done here on the; Python side. The GetBranchAttr() function encodes a necessary cast in the; second element of the output tuple, which is a string with the required; type name. Parameters:; self (TTree): The instance of the TTree object from which the attribute is being retrieved.; key (str): The name of the branch to retrieve from the TTree object.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_ttree.py:26,access,accessed,26,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_ttree.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_ttree.py,2,['access'],"['access', 'accessed']"
Security,"""""""; Centralise all processing of the source.; Ideally, we'd use Clang for everything, but on occasion, we'll need access; to the source, without pre-processing.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/python/cppyy_backend/_cppyy_generator.py:115,access,access,115,bindings/pyroot/cppyy/cppyy-backend/cling/python/cppyy_backend/_cppyy_generator.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/python/cppyy_backend/_cppyy_generator.py,1,['access'],['access']
Security,"""""""; Connects the final value after distributed computation to the corresponding; DistRDF node.; In this overload, the node stores the reference to the mergeable variations; directly. It is then responsibility of the ResultMapProxy object to access; the specific varied object asked by the user, calling the right method of; the RMergeableVariations class.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Backends/Utils.py:242,access,access,242,bindings/experimental/distrdf/python/DistRDF/Backends/Utils.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Backends/Utils.py,1,['access'],['access']
Security,"""""""; Create the ROOT.RDF.Experimental.Distributed python module. This module will be injected into the ROOT.RDF namespace. Arguments:; parent: The ROOT.RDF namespace. Needed to define __package__. Returns:; types.ModuleType: The ROOT.RDF.Experimental.Distributed submodule.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_facade.py:85,inject,injected,85,bindings/pyroot/pythonizations/python/ROOT/_facade.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_facade.py,1,['inject'],['injected']
Security,"""""""; Detach histogram from file and access it outside of the context, both when writing and reading.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tfile_context_manager.py:36,access,access,36,bindings/pyroot/pythonizations/test/tfile_context_manager.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tfile_context_manager.py,1,['access'],['access']
Security,"""""""; Equivalent of 'GetKeys' of the RResultMap. Unlike its C++ counterpart,; at the moment we cannot retrieve the list of variation names for a; certain action without triggering the distributed computation graph. For; this reason, the function raises an error if the keys are accessed; before computations have been triggered. In the future the behaviour; should be aligned with the C++ counterpart.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Proxy.py:277,access,accessed,277,bindings/experimental/distrdf/python/DistRDF/Proxy.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Proxy.py,1,['access'],['accessed']
Security,"""""""; Executes an RDataFrame computation graph on a distributed backend. The needed ingredients are:. - A collection of logical ranges in which the dataset is split. Each; range is going to be assigned to a distributed task.; - A representation of the computation graph that the task needs to; execute.; - A way to generate an RDataFrame instance starting from the logical; range of the task.; - Optionally, some setup code to be run at the beginning of each task. These are used as inputs to a generic mapper function. Results from the; various mappers are then reduced and the final results are retrieved in; the local session. These are properly handled to perform extra checks,; depending on the data source. Finally, the local user-facing nodes are; filled with the values that were computed distributedly so that they; can be accessed in the application like with local RDataFrame.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/HeadNode.py:831,access,accessed,831,bindings/experimental/distrdf/python/DistRDF/HeadNode.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/HeadNode.py,1,['access'],['accessed']
Security,"""""""; Extract the commit hash from the argument passed to /action github; comment actions. We currently only support passing the commit hash; directly or use the github URL, such as; https://github.com/llvm/llvm-project/commit/2832d7941f4207f1fcf813b27cf08cecc3086959; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/github-automation.py:24,hash,hash,24,interpreter/llvm-project/llvm/utils/git/github-automation.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/github-automation.py,2,['hash'],['hash']
Security,"""""""; Intercepts calls to attributes and methods of the proxied node and; returns the appropriate object(s). Args:; attr (str): The name of the attribute or method of the proxied; node the user wants to access.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Proxy.py:202,access,access,202,bindings/experimental/distrdf/python/DistRDF/Proxy.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Proxy.py,1,['access'],['access']
Security,"""""""; Process and validate a callback function. Args:		; callback: The callback function to be validated. Returns:; validated_callback: The validated callback function, or None if not valid.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/LiveVisualize.py:17,validat,validate,17,bindings/experimental/distrdf/python/DistRDF/LiveVisualize.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/LiveVisualize.py,3,['validat'],"['validate', 'validated']"
Security,"""""""; Return two Tensorflow Datasets based on the given ROOT file and tree; The first generator returns training batches, while the second generator; returns validation batches. Args:; tree_name (str): Name of the tree in the ROOT file; file_name (str): Path to the ROOT file; batch_size (int): Size of the returned chunks.; chunk_size (int):; The size of the chunks loaded from the ROOT file. Higher chunk size; results in better randomization, but also higher memory usage.; columns (list[str], optional):; Columns to be returned. If not given, all columns are used.; filters (list[str], optional):; Filters to apply. If not given, no filters are applied.; max_vec_sizes (list[int], optional):; Size of each column that consists of vectors.; Required when using vector based columns; target (str, optional):; Column that is used as target.; weights (str, optional):; Column used to weight events.; Can only be used when a target is given; validation_split (float, optional):; The ratio of batches being kept for validation.; Value has to be from 0.0 to 1.0. Defaults to 0.0.; max_chunks (int, optional):; The number of chunks that should be loaded for an epoch.; If not given, the whole file is used; shuffle (bool):; randomize the training batches every epoch. Defaults to True. Returns:; Tuple[TrainRBatchGenerator, ValidationRBatchGenerator]:; Two generators are returned. One used to load training batches,; and one to load validation batches. NOTE: the validation batches; are loaded during the training. Before training, the validation; generator will return no batches.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py:157,validat,validation,157,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py,12,"['Validat', 'validat']","['ValidationRBatchGenerator', 'validation']"
Security,"""""""; Return two batch generators based on the given ROOT file and tree.; The first generator returns training batches, while the second generator; returns validation batches. Args:; tree_name (str): Name of the tree in the ROOT file; file_name (str): Path to the ROOT file; batch_size (int): Size of the returned chunks.; chunk_size (int):; The size of the chunks loaded from the ROOT file. Higher chunk size; results in better randomization, but also higher memory usage.; columns (list[str], optional):; Columns to be returned. If not given, all columns are used.; filters (list[str], optional):; Filters to apply. If not given, no filters are applied.; max_vec_sizes (list[int], optional):; Size of each column that consists of vectors.; Required when using vector based columns; target (str, optional):; Column that is used as target.; weights (str, optional):; Column used to weight events.; Can only be used when a target is given; validation_split (float, optional):; The ratio of batches being kept for validation.; Value has to be from 0.0 to 1.0. Defaults to 0.0.; max_chunks (int, optional):; The number of chunks that should be loaded for an epoch.; If not given, the whole file is used; shuffle (bool):; randomize the training batches every epoch. Defaults to True. Returns:; Tuple[TrainRBatchGenerator, ValidationRBatchGenerator]:; Two generators are returned. One used to load training batches,; and one to load validation batches. NOTE: the validation batches; are loaded during the training. Before training, the validation; generator will return no batches.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py:155,validat,validation,155,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py,6,"['Validat', 'validat']","['ValidationRBatchGenerator', 'validation']"
Security,"""""""; Set a function that will be executed as a first step on every backend before; any other operation. This method also executes the function on the current; user environment so changes are visible on the running session. This allows users to inject and execute custom code on the worker; environment without being part of the RDataFrame computational graph. Args:; fun (function): Function to be executed. *args (list): Variable length argument list used to execute the; function. **kwargs (dict): Keyword arguments used to execute the function.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/__init__.py:244,inject,inject,244,bindings/experimental/distrdf/python/DistRDF/__init__.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/__init__.py,1,['inject'],['inject']
Security,"""""""; Setup connection to a Dask cluster. Two ingredients are needed:; 1. Creating a cluster object that represents computing resources. This can be; done in various ways depending on the type of resources at disposal. To use; only the local machine (e.g. your laptop), a `LocalCluster` object can be; used. This step can be skipped if you have access to an existing Dask; cluster; in that case, the cluster administrator should provide you with a; URL to connect to the cluster in step 2. More options for cluster creation; can be found in the Dask docs at; http://distributed.dask.org/en/stable/api.html#cluster .; 2. Creating a Dask client object that connects to the cluster. This accepts; directly the object previously created. In case the cluster was setup; externally, you need to provide an endpoint URL to the client, e.g.; 'https://myscheduler.domain:8786'. Through Dask, you can connect to various types of cluster resources. For; example, you can connect together a set of machines through SSH and use them; to run your computations. This is done through the `SSHCluster` class. For; example:. ```python; from dask.distributed import SSHCluster; cluster = SSHCluster(; # A list with machine host names, the first name will be used as; # scheduler, following names will become workers.; hosts=[""machine1"",""machine2"",""machine3""],; # A dictionary of options for each worker node, here we set the number; # of cores to be used on each node.; worker_options={""nprocs"":4,},; ); ```. Another common usecase is interfacing Dask to a batch system like HTCondor or; Slurm. A separate package called dask-jobqueue (https://jobqueue.dask.org); extends the available Dask cluster classes to enable running Dask computations; as batch jobs. In this case, the cluster object usually receives the parameters; that would be written in the job description file. For example:. ```python; from dask_jobqueue import HTCondorCluster; cluster = HTCondorCluster(; cores=1,; memory='2000MB',; disk='1000MB',; ); # ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/distrdf002_dask_connection.py:344,access,access,344,tutorials/dataframe/distrdf002_dask_connection.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/distrdf002_dask_connection.py,1,['access'],['access']
Security,"""""""; Test for the item access methods added to TSeqCollection (and subclasses):; __getitem__, __setitem__, __delitem__.; Both the index (l[i]) and slice (l[i:j:k]) syntaxes are tested.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tseqcollection_itemaccess.py:23,access,access,23,bindings/pyroot/pythonizations/test/tseqcollection_itemaccess.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tseqcollection_itemaccess.py,1,['access'],['access']
Security,"""""""; Test for the pythonization that allows to access the number of elements of a; TArray (or subclass) by calling `len` on it.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tarray_len.py:47,access,access,47,bindings/pyroot/pythonizations/test/tarray_len.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tarray_len.py,1,['access'],['access']
Security,"""""""; Test for the pythonization that allows to access the number of elements of a; TCollection (or subclass) by calling `len` on it.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tcollection_len.py:47,access,access,47,bindings/pyroot/pythonizations/test/tcollection_len.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tcollection_len.py,1,['access'],['access']
Security,"""""""; Test for the pythonization that allows to access top-level tree branches/leaves as attributes; (i.e. `mytree.mybranch`). Since this pythonization is common to TTree and its subclasses, TChain, TNtuple; and TNtupleD are also tested here.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/ttree_branch_attr.py:47,access,access,47,bindings/pyroot/pythonizations/test/ttree_branch_attr.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/ttree_branch_attr.py,1,['access'],['access']
Security,"""""""; Test that the method pulled in via using decls from TH1 are accessible; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/th2.py:65,access,accessible,65,bindings/pyroot/pythonizations/test/th2.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/th2.py,1,['access'],['accessible']
Security,"""""""; Testing reading a custom class injected in the interpreter; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdataframe_asnumpy.py:36,inject,injected,36,bindings/pyroot/pythonizations/test/rdataframe_asnumpy.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdataframe_asnumpy.py,1,['inject'],['injected']
Security,"""""""; The parser does not seem to provide access to the complete text of a parameter.; This makes it hard to find any default values, so we:. 1. Run the lexer from ""here"" to the end of the file, bailing out when we see the "",""; or a "")"" marking the end.; 2. Watch for the assignment.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/python/cppyy_backend/_cppyy_generator.py:41,access,access,41,bindings/pyroot/cppyy/cppyy-backend/cling/python/cppyy_backend/_cppyy_generator.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/python/cppyy_backend/_cppyy_generator.py,1,['access'],['access']
Security,"""""""; pre-push git hook integration; =============================. This script is intended to be setup as a pre-push hook, from the root of the; repo run:. ln -sf ../../llvm/utils/git/pre-push.py .git/hooks/pre-push. From the git doc:. The pre-push hook runs during git push, after the remote refs have been; updated but before any objects have been transferred. It receives the name; and location of the remote as parameters, and a list of to-be-updated refs; through stdin. You can use it to validate a set of ref updates before a push; occurs (a non-zero exit code will abort the push).; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/pre-push.py:494,validat,validate,494,interpreter/llvm-project/llvm/utils/git/pre-push.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/pre-push.py,1,['validat'],['validate']
Security,"""""""Access and use of 2D data members""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_lowlevel.py:3,Access,Access,3,bindings/pyroot/cppyy/cppyy/test/test_lowlevel.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_lowlevel.py,1,['Access'],['Access']
Security,"""""""Access and use of 3D data members""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_lowlevel.py:3,Access,Access,3,bindings/pyroot/cppyy/cppyy/test/test_lowlevel.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_lowlevel.py,1,['Access'],['Access']
Security,"""""""Access global_variables_and_pointers""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py:3,Access,Access,3,bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py,1,['Access'],['Access']
Security,"""""""Access to base class templated methods through 'using'""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_templates.py:3,Access,Access,3,bindings/pyroot/cppyy/cppyy/test/test_templates.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_templates.py,1,['Access'],['Access']
Security,"""""""Access to box/unbox methods""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_numba.py:3,Access,Access,3,bindings/pyroot/cppyy/cppyy/test/test_numba.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_numba.py,1,['Access'],['Access']
Security,"""""""Access to extern ""C"" declared functions in namespaces""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py:3,Access,Access,3,bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py,1,['Access'],['Access']
Security,"""""""Access to fixed-size char16 arrays as data members""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_regression.py:3,Access,Access,3,bindings/pyroot/cppyy/cppyy/test/test_regression.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_regression.py,1,['Access'],['Access']
Security,"""""""Access to global arrays of strings""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py:3,Access,Access,3,bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,1,['Access'],['Access']
Security,"""""""Access to global vars with an operator bool() returning False""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py:3,Access,Access,3,bindings/pyroot/cppyy/cppyy/test/test_fragile.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py,1,['Access'],['Access']
Security,"""""""Access to int8_t/uint8_t arrays that are global variables""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py:3,Access,Access,3,bindings/pyroot/cppyy/cppyy/test/test_datatypes.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py,1,['Access'],['Access']
Security,"""""""Access to set iterators and their comparisons""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py:3,Access,Access,3,bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,1,['Access'],['Access']
Security,"""""""Access to templates made available with 'using'""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_templates.py:3,Access,Access,3,bindings/pyroot/cppyy/cppyy/test/test_templates.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_templates.py,1,['Access'],['Access']
Security,"""""""Access to the python interpreter""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_api.py:3,Access,Access,3,bindings/pyroot/cppyy/cppyy/test/test_api.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_api.py,1,['Access'],['Access']
Security,"""""""Accessibility of using declarations""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py:3,Access,Accessibility,3,bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py,1,['Access'],['Accessibility']
Security,"""""""Calculate the hash of the options string. If ""march=native"" is in the; list of options, make the preprocessor defines resulting from it part of; the hash.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/.github/workflows/root-ci-config/build_utils.py:17,hash,hash,17,.github/workflows/root-ci-config/build_utils.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/.github/workflows/root-ci-config/build_utils.py,2,['hash'],['hash']
Security,"""""""Command line parsing is done by the argparse module, but semantic; validation still needs to be done. This method is doing it for; analyze-build and scan-build commands. :param parser: The command line parser object.; :param args: Parsed argument object.; :param from_build_command: Boolean value tells is the command suppose; to run the analyzer against a build command or a compilation db.; :return: No return value, but this call might throw when validation; fails.""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py:70,validat,validation,70,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py,2,['validat'],['validation']
Security,"""""""Compute checksums for LLVM sources checked out using svn. Args:; root_path: a directory of llvm checkout.; projects: a list of LLVMProject instances, which describe checkout paths,; relative to root_path. Returns:; A dict mapping from project name to project checksum.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py:11,checksum,checksums,11,interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py,2,['checksum'],"['checksum', 'checksums']"
Security,"""""""Contains helper functions to compute checksums for LLVM checkouts.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/project_tree.py:40,checksum,checksums,40,interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/project_tree.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/project_tree.py,1,['checksum'],['checksums']
Security,"""""""Create tuples and access their elements""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py:21,access,access,21,bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,1,['access'],['access']
Security,"""""""Derived classes should have access to protected members""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_crossinheritance.py:31,access,access,31,bindings/pyroot/cppyy/cppyy/test/test_crossinheritance.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_crossinheritance.py,1,['access'],['access']
Security,"""""""Enum accessibility and scopes""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py:8,access,accessibility,8,bindings/pyroot/cppyy/cppyy/test/test_datatypes.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py,1,['access'],['accessibility']
Security,"""""""Example of access to array of void ptrs""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_doc_features.py:14,access,access,14,bindings/pyroot/cppyy/cppyy/test/test_doc_features.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_doc_features.py,1,['access'],['access']
Security,"""""""Get a hashable key based on the current tool_args and prefixes.""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_mca_test_checks.py:9,hash,hashable,9,interpreter/llvm-project/llvm/utils/update_mca_test_checks.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_mca_test_checks.py,1,['hash'],['hashable']
Security,"""""""Get the get SHA in short hash form.""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/generate_formatted_state.py:28,hash,hash,28,interpreter/llvm-project/clang/docs/tools/generate_formatted_state.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/generate_formatted_state.py,1,['hash'],['hash']
Security,"""""""Hashing of std::string""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_regression.py:3,Hash,Hashing,3,bindings/pyroot/cppyy/cppyy/test/test_regression.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_regression.py,1,['Hash'],['Hashing']
Security,"""""""Implement unique hash method for compilation database entries.""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/intercept.py:20,hash,hash,20,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/intercept.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/intercept.py,1,['hash'],['hash']
Security,"""""""Inheritance with access and overload complications""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_crossinheritance.py:20,access,access,20,bindings/pyroot/cppyy/cppyy/test/test_crossinheritance.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_crossinheritance.py,1,['access'],['access']
Security,"""""""Injection of TDirectory.__getitem__ that raises AttributeError on failure. Method that is assigned to TDirectory.__getitem__. It relies on Get to; obtain the object from the TDirectory and adds on top:; - Raising an AttributeError if the object does not exist; - Caching the result of a successful get for future re-attempts.; Once cached, the same object is retrieved every time.; This pythonisation is inherited by TDirectoryFile and TFile. Example:; ```; myfile.mydir.mysubdir.myHist.Draw(); ```; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tdirectory.py:3,Inject,Injection,3,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tdirectory.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tdirectory.py,1,['Inject'],['Injection']
Security,"""""""Interactive access to the Cling global scope""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py:15,access,access,15,bindings/pyroot/cppyy/cppyy/test/test_fragile.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py,1,['access'],['access']
Security,"""""""Library-based interposition will fail silently if SIP is enabled,; so this should be detected. You can detect whether SIP is enabled on; Darwin by checking whether (1) there is a binary called 'csrutil' in; the path and, if so, (2) whether the output of executing 'csrutil status'; contains 'System Integrity Protection status: enabled'. :param platform: name of the platform (returned by sys.platform),; :return: True if library preload will fail by the dynamic linker.""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/intercept.py:302,Integrity,Integrity,302,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/intercept.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/intercept.py,1,['Integrity'],['Integrity']
Security,"""""""LitConfig - Configuration data for a 'lit' test runner instance, shared; across all tests. The LitConfig object is also used to communicate with client configuration; files, it is always passed in as the global variable 'lit' so that; configuration files can access common functionality and internal components; easily.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py:262,access,access,262,interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py,1,['access'],['access']
Security,"""""""Loop through the validation batches. Yields:; Union[np.NDArray, torch.Tensor]: A batch of data; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py:20,validat,validation,20,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py,1,['validat'],['validation']
Security,"""""""Numba-JITing of a free function taking a proxy argument for field access""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_numba.py:69,access,access,69,bindings/pyroot/cppyy/cppyy/test/test_numba.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_numba.py,1,['access'],['access']
Security,"""""""Numba-JITing of a free function taking a proxy argument for method access""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_numba.py:70,access,access,70,bindings/pyroot/cppyy/cppyy/test/test_numba.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_numba.py,1,['access'],['access']
Security,"""""""Parse and validate command-line arguments for analyze-build.""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py:13,validat,validate,13,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py,1,['validat'],['validate']
Security,"""""""Parse and validate command-line arguments for intercept-build.""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py:13,validat,validate,13,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py,1,['validat'],['validate']
Security,"""""""Parse and validate command-line arguments for scan-build.""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py:13,validat,validate,13,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py,1,['validat'],['validate']
Security,"""""""Predicate to detect duplicated entries. Unique hash method can be use to detect duplicates. Entries are; represented as dictionaries, which has no default hash method.; This implementation uses a set datatype to store the unique hash values. This method returns a method which can detect the duplicate values.""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py:50,hash,hash,50,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py,3,['hash'],['hash']
Security,"""""""Python derived class of C++ class with access controlled cctor""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_crossinheritance.py:42,access,access,42,bindings/pyroot/cppyy/cppyy/test/test_crossinheritance.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_crossinheritance.py,1,['access'],['access']
Security,"""""""Read access to instance public data and verify values""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py:8,access,access,8,bindings/pyroot/cppyy/cppyy/test/test_datatypes.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py,1,['access'],['access']
Security,"""""""Read/write access to objects through pointers""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py:14,access,access,14,bindings/pyroot/cppyy/cppyy/test/test_datatypes.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py,1,['access'],['access']
Security,"""""""Reads checksums from a text file, produced by WriteLLVMChecksums. Returns:; A dict, mapping from project name to project checksum.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py:9,checksum,checksums,9,interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py,2,['checksum'],"['checksum', 'checksums']"
Security,"""""""STL sequence iterator injected in RooAbsCollection, inherited by RooArgSet""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/rooabscollection.py:25,inject,injected,25,bindings/pyroot/pythonizations/test/roofit/rooabscollection.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/rooabscollection.py,1,['inject'],['injected']
Security,"""""""Test (non-)access to missing classes""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py:14,access,access,14,bindings/pyroot/cppyy/cppyy/test/test_fragile.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py,1,['access'],['access']
Security,"""""""Test access and use of typedefs""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_pythonify.py:8,access,access,8,bindings/pyroot/cppyy/cppyy/test/test_pythonify.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_pythonify.py,1,['access'],['access']
Security,"""""""Test access of global objects through a pointer""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py:8,access,access,8,bindings/pyroot/cppyy/cppyy/test/test_datatypes.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py,1,['access'],['access']
Security,"""""""Test access to C++ pre-processor macro's""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py:8,access,access,8,bindings/pyroot/cppyy/cppyy/test/test_fragile.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py,1,['access'],['access']
Security,"""""""Test access to a global builtin type""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py:8,access,access,8,bindings/pyroot/cppyy/cppyy/test/test_datatypes.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py,1,['access'],['access']
Security,"""""""Test access to a list<int>""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py:8,access,access,8,bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,1,['access'],['access']
Security,"""""""Test access to a map<int,int>""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py:8,access,access,8,bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,1,['access'],['access']
Security,"""""""Test access to a map<std::string,int>""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py:8,access,access,8,bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,1,['access'],['access']
Security,"""""""Test access to an std::vector<just_a_class>""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py:8,access,access,8,bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,1,['access'],['access']
Security,"""""""Test access to and return of PODs""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py:8,access,access,8,bindings/pyroot/cppyy/cppyy/test/test_datatypes.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py,1,['access'],['access']
Security,"""""""Test access to enums""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py:8,access,access,8,bindings/pyroot/cppyy/cppyy/test/test_datatypes.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py,1,['access'],['access']
Security,"""""""Test access to global objects by value""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py:8,access,access,8,bindings/pyroot/cppyy/cppyy/test/test_datatypes.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py,1,['access'],['access']
Security,"""""""Test access to namespaces and inner classes""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py:8,access,access,8,bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py,1,['access'],['access']
Security,"""""""Test access to std::cout""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_streams.py:8,access,access,8,bindings/pyroot/cppyy/cppyy/test/test_streams.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_streams.py,1,['access'],['access']
Security,"""""""Test access to std::string object data members""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py:8,access,access,8,bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,1,['access'],['access']
Security,"""""""Test access to std::vector<int>/std::vector<double>""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py:8,access,access,8,bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,1,['access'],['access']
Security,"""""""Test data member access when using virtual inheritence""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py:20,access,access,20,bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py,1,['access'],['access']
Security,"""""""Test read access to class public data and verify values""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py:13,access,access,13,bindings/pyroot/cppyy/cppyy/test/test_datatypes.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py,1,['access'],['access']
Security,"""""""Test write access to class public data and verify values""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py:14,access,access,14,bindings/pyroot/cppyy/cppyy/test/test_datatypes.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py,1,['access'],['access']
Security,"""""""Test write access to instance public data and verify values""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py:14,access,access,14,bindings/pyroot/cppyy/cppyy/test/test_datatypes.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py,1,['access'],['access']
Security,"""""""Usage and access of std::shared/unique_ptr<>""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_cpp11features.py:13,access,access,13,bindings/pyroot/cppyy/cppyy/test/test_cpp11features.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_cpp11features.py,1,['access'],['access']
Security,"""""""Use of std::hash""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_cpp11features.py:15,hash,hash,15,bindings/pyroot/cppyy/cppyy/test/test_cpp11features.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_cpp11features.py,1,['hash'],['hash']
Security,"""""""Validates that reference_checksums and new_checksums match. Args:; reference_checksums: a dict of reference checksums, mapping from a project; name to a project checksum.; new_checksums: a dict of checksums to be checked, mapping from a project; name to a project checksum.; allow_missing_projects:; When True, reference_checksums may contain more projects than; new_checksums. Projects missing from new_checksums are ignored.; When False, new_checksums and reference_checksums must contain checksums; for the same set of projects. If there is a project in; reference_checksums, missing from new_checksums, ValidateChecksums; will return False. Returns:; True, if checksums match with regards to allow_missing_projects flag value.; False, otherwise.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py:3,Validat,Validates,3,interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py,8,"['Validat', 'checksum']","['ValidateChecksums', 'Validates', 'checksum', 'checksums']"
Security,"""""""Wrapper around the Cpp RBatchGenerator. Args:; tree_name (str): Name of the tree in the ROOT file; file_name (str): Path to the ROOT file; batch_size (int): Size of the returned chunks.; chunk_size (int):; The size of the chunks loaded from the ROOT file. Higher chunk; size results in better randomization, but higher memory usage.; columns (list[str], optional):; Columns to be returned. If not given, all columns are used.; filters (list[str], optional):; Filters to apply during loading. If not given, no filters; are applied.; max_vec_sizes (dict[std, int], optional):; Size of each column that consists of vectors.; Required when using vector based columns.; vec_padding (int):; Value to pad vectors with if the vector is smaller; than the given max vector length. Defaults is 0; target (str, optional): Column that is used as target.; weights (str, optional):; Column used to weight events.; Can only be used when a target is given.; validation_split (float, optional):; The ratio of batches being kept for validation.; Value has to be between 0 and 1. Defaults to 0.0.; max_chunks (int, optional):; The number of chunks that should be loaded for an epoch.; If not given, the whole file is used.; shuffle (bool):; Batches consist of random events and are shuffled every epoch.; Defaults to True.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py:1017,validat,validation,1017,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py,1,['validat'],['validation']
Security,"""""""Writes checksums to a text file. Args:; checksums: a dict mapping from project name to project checksum (result of; ComputeLLVMChecksums).; f: a file object to write into.; """"""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py:10,checksum,checksums,10,interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py,3,['checksum'],"['checksum', 'checksums']"
Security,"""""""\; namespace AccessAndOverload {; class Base {; public:; virtual ~Base() {}. protected:; virtual int call1(int i) { return i; }; virtual int call1(int i, int j) { return i+j; }. virtual void call2(int) { return; }; virtual void call2(int, int) { return; }. int call3(int i) { return i; }. private:; int call3(int i, int j) { return i+j; }; }; }""""""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_crossinheritance.py:16,Access,AccessAndOverload,16,bindings/pyroot/cppyy/cppyy/test/test_crossinheritance.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_crossinheritance.py,1,['Access'],['AccessAndOverload']
Security,"# """"""Build the ranges for this dataset.""""""; # For the moment, we explicitly pass only one ""subname"", since there is; # only one name possible for the whole RNTuple; # TODO: implement action cloning for RNTuple; # Inject a sentinel flag in the execution identifier to specify this; # RDataFrame instance is going to process RNTuple data and the computation; # graph needs to be recreated at every task",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/HeadNode.py:213,Inject,Inject,213,bindings/experimental/distrdf/python/DistRDF/HeadNode.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/HeadNode.py,1,['Inject'],['Inject']
Security,"# -------------------------------------------------------; # First part is just to access a user-defined file; # or create the standard example file if it doesn't exist",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/StandardProfileInspectorDemo.py:83,access,access,83,tutorials/roostats/StandardProfileInspectorDemo.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/StandardProfileInspectorDemo.py,1,['access'],['access']
Security,"# -------------------------------------; # -------------------------------------; # -------------------------------------; # Set DYLD_LIBRARY_PATH. When run without root access or as a different user, especially from Mac systems,; # it is possible for security reasons that the environment does not include this definition, so it is manually defined.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/doxygen/converttonotebook.py:170,access,access,170,documentation/doxygen/converttonotebook.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/doxygen/converttonotebook.py,2,"['access', 'secur']","['access', 'security']"
Security,"# <- this access used to fail",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_templates.py:10,access,access,10,bindings/pyroot/cppyy/cppyy/test/test_templates.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_templates.py,1,['access'],['access']
Security,"# A dummy module to inject in the parent module",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Backends/__init__.py:20,inject,inject,20,bindings/experimental/distrdf/python/DistRDF/Backends/__init__.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Backends/__init__.py,1,['inject'],['inject']
Security,"# Access by index is provided",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf508_listsetmanip.py:2,Access,Access,2,tutorials/roofit/rf508_listsetmanip.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf508_listsetmanip.py,1,['Access'],['Access']
Security,"# Access correlation matrix elements",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf607_fitresult.py:2,Access,Access,2,tutorials/roofit/rf607_fitresult.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf607_fitresult.py,1,['Access'],['Access']
Security,"# Access fit result information; # ---------------------------------------------------------; # Access basic information",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf607_fitresult.py:2,Access,Access,2,tutorials/roofit/rf607_fitresult.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf607_fitresult.py,2,['Access'],['Access']
Security,# Access in this fashion as a hackish way to portably; # access vectors.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/ABITest/ABITestGen.py:2,Access,Access,2,interpreter/llvm-project/clang/utils/ABITest/ABITestGen.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/ABITest/ABITestGen.py,4,"['Access', 'access']","['Access', 'access']"
Security,"# Access list of final fit parameter values",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf607_fitresult.py:2,Access,Access,2,tutorials/roofit/rf607_fitresult.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf607_fitresult.py,1,['Access'],['Access']
Security,"# Access metadata information that is stored in the JSON config file of the RDataFrame.; # The metadata contained in the JSON file is accessible within a `DefinePerSample` call, through the `RSampleInfo` class.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df106_HiggsToFourLeptons.py:2,Access,Access,2,tutorials/dataframe/df106_HiggsToFourLeptons.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df106_HiggsToFourLeptons.py,2,"['Access', 'access']","['Access', 'accessible']"
Security,"# Access some of the saved fit results from individual toys",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf801_mcstudy.py:2,Access,Access,2,tutorials/roofit/rf801_mcstudy.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf801_mcstudy.py,1,['Access'],['Access']
Security,"# Accessing RooArgSet contents; # -------------------------------------------------------; # You can look up objects by name",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf508_listsetmanip.py:2,Access,Accessing,2,tutorials/roofit/rf508_listsetmanip.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf508_listsetmanip.py,1,['Access'],['Accessing']
Security,"# By default, DenseMap instances use DenseMapPair to hold key-value; # entries. When the entry is a DenseMapPair, unwrap it to expose the; # children as simple std::pair values.; #; # This entry type is customizable (a template parameter). For other; # types, expose the entry type as is.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lldbDataFormatters.py:127,expose,expose,127,interpreter/llvm-project/llvm/utils/lldbDataFormatters.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lldbDataFormatters.py,2,['expose'],['expose']
Security,# Checksum did not match.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py:2,Checksum,Checksum,2,interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py,1,['Checksum'],['Checksum']
Security,# Compute final checksum.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py:16,checksum,checksum,16,interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py,1,['checksum'],['checksum']
Security,"# Corrected normalization derived from a validation region",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df107_SingleTopAnalysis.py:41,validat,validation,41,tutorials/dataframe/df107_SingleTopAnalysis.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df107_SingleTopAnalysis.py,1,['validat'],['validation']
Security,"# Expose some functionality from CPyCppyy extension module",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_facade.py:2,Expose,Expose,2,bindings/pyroot/pythonizations/python/ROOT/_facade.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_facade.py,1,['Expose'],['Expose']
Security,"# FIXME: Hashing for SBTypes does not seem to work correctly, uses the typename instead,; # and not the canonical one unfortunately.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/ClangDataFormat.py:9,Hash,Hashing,9,interpreter/llvm-project/clang/utils/ClangDataFormat.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/ClangDataFormat.py,1,['Hash'],['Hashing']
Security,# FIXME: Use designated initializers to access non-first; # fields of unions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/ABITest/ABITestGen.py:40,access,access,40,interpreter/llvm-project/clang/utils/ABITest/ABITestGen.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/ABITest/ABITestGen.py,1,['access'],['access']
Security,# For debugging / validation.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ShCommands.py:18,validat,validation,18,interpreter/llvm-project/llvm/utils/lit/lit/ShCommands.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ShCommands.py,1,['validat'],['validation']
Security,"# Give access to the columns function of the training set",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py:7,access,access,7,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py,1,['access'],['access']
Security,"# Give access to the columns function of the validation set",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py:7,access,access,7,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_batchgenerator.py,2,"['access', 'validat']","['access', 'validation']"
Security,# Hash each project.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py:2,Hash,Hash,2,interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py,1,['Hash'],['Hash']
Security,"# If the graph does not appear, try using the ""i"" flag, e.g. ""python3 -i graph.py""; # This will access the interactive mode after executing the script, and thereby persist; # long enough for the graph to appear.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/pyroot/graph.py:96,access,access,96,tutorials/pyroot/graph.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/pyroot/graph.py,1,['access'],['access']
Security,"# If the override is specified in the environment, use it without; # validation.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py:69,validat,validation,69,interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py,1,['validat'],['validation']
Security,"# If we now access both classes, we should see that the pythonizor runs twice.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/pyroot/pyroot002_pythonizationDecorator.py:12,access,access,12,tutorials/pyroot/pyroot002_pythonizationDecorator.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/pyroot/pyroot002_pythonizationDecorator.py,1,['access'],['access']
Security,"# Immediate pythonization should happen.; # Accesses classes are cached by cppyy using their class name as key in; # their namespace",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/pythonization_decorator.py:44,Access,Accesses,44,bindings/pyroot/pythonizations/test/pythonization_decorator.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/pythonization_decorator.py,1,['Access'],['Accesses']
Security,"# In some situations, like running tests with sanitizers, all test passes but; # the shard could still fail due to memory issues.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py:46,sanitiz,sanitizers,46,interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py,1,['sanitiz'],['sanitizers']
Security,"# Inject Experimental.Distributed package into namespace RDF if available",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_facade.py:2,Inject,Inject,2,bindings/pyroot/pythonizations/python/ROOT/_facade.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_facade.py,1,['Inject'],['Inject']
Security,"# Inject comparison operators",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tobject.py:2,Inject,Inject,2,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tobject.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tobject.py,1,['Inject'],['Inject']
Security,"# Inject custom vector<char>::data()",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_stl_vector.py:2,Inject,Inject,2,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_stl_vector.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_stl_vector.py,1,['Inject'],['Inject']
Security,"# Inject gROOT global",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_facade.py:2,Inject,Inject,2,bindings/pyroot/pythonizations/python/ROOT/_facade.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_facade.py,1,['Inject'],['Inject']
Security,"# Inject top-level functions",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/__init__.py:2,Inject,Inject,2,bindings/experimental/distrdf/python/DistRDF/__init__.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/__init__.py,1,['Inject'],['Inject']
Security,"# Inject version as __version__ property in ROOT module",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_facade.py:2,Inject,Inject,2,bindings/pyroot/pythonizations/python/ROOT/_facade.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_facade.py,1,['Inject'],['Inject']
Security,"# Intern all strings since we have lot of duplication across filenames,; # remark text.; #; # Change Args from a list of dicts to a tuple of tuples. This saves; # memory in two ways. One, a small tuple is significantly smaller than a; # small dict. Two, using tuple instead of list allows Args to be directly; # used as part of the key (in Python only immutable types are hashable).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt-viewer/optrecord.py:372,hash,hashable,372,interpreter/llvm-project/llvm/tools/opt-viewer/optrecord.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt-viewer/optrecord.py,1,['hash'],['hashable']
Security,"# Internal RDataFrame object, useful to expose information such as; # column names.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/HeadNode.py:40,expose,expose,40,bindings/experimental/distrdf/python/DistRDF/HeadNode.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/HeadNode.py,1,['expose'],['expose']
Security,"# Item access",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tseqcollection.py:7,access,access,7,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tseqcollection.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tseqcollection.py,1,['access'],['access']
Security,"# Key: node_id of the drawable object's proxied_node; # Value: List of validated callback functions for the drawable object",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/LiveVisualize.py:71,validat,validated,71,bindings/experimental/distrdf/python/DistRDF/LiveVisualize.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/LiveVisualize.py,1,['validat'],['validated']
Security,"# Loop through Validation set",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/RBatchGenerator_NumPy.py:15,Validat,Validation,15,tutorials/tmva/RBatchGenerator_NumPy.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/RBatchGenerator_NumPy.py,1,['Validat'],['Validation']
Security,"# Make sure we close the file before we scp it, because accessing; # the temporary file while still open doesn't work on Windows.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/remote-exec.py:56,access,accessing,56,interpreter/llvm-project/llvm/utils/remote-exec.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/remote-exec.py,1,['access'],['accessing']
Security,"# Merge dictionaries of trees and their entries. Different tasks; # might have to access the same tree, so we must not count its; # entries more than once.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Backends/Base.py:82,access,access,82,bindings/experimental/distrdf/python/DistRDF/Backends/Base.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/python/DistRDF/Backends/Base.py,1,['access'],['access']
Security,# NOTE: use ctypes to access `SHFileOperationsW` on Windows to; # use the NT style path to get access to long file paths which; # cannot be removed otherwise.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:22,access,access,22,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,2,['access'],['access']
Security,"# Next, we define a pythonizor function: the function that will be responsible; # for injecting new behaviour in our C++ class `MyClass`.; #; # To convert a given Python function into a pythonizor, we need to decorate it; # with the @pythonization decorator. Such decorator allows us to define which; # which class we want to pythonize by providing its class name and its; # namespace (if the latter is not specified, it defaults to the global; # namespace, i.e. '::').; #; # The decorated function - the pythonizor - must accept either one or two; # parameters:; # 1. The class to be pythonized (proxy object where new behaviour can be; # injected); # 2. The fully-qualified name of that class (optional).; #; # Let's see all this with a simple example. Suppose I would like to define how; # `MyClass` objects are represented as a string in Python (i.e. what would be; # shown when I print that object). For that purpose, I can define the following; # pythonizor function. There are two important things to be noted here:; # - The @pythonization decorator has one argument that specifies our target; # class is `MyClass`.; # - The pythonizor function `pythonizor_of_myclass` provides and injects a new; # implementation for `__str__`, the mechanism that Python provides to define; # how to represent objects as strings. This new implementation; # always returns the string ""This is a MyClass object"".",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/pyroot/pyroot002_pythonizationDecorator.py:86,inject,injecting,86,tutorials/pyroot/pyroot002_pythonizationDecorator.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/pyroot/pyroot002_pythonizationDecorator.py,3,['inject'],"['injected', 'injecting', 'injects']"
Security,"# Next, we want to access the data from Python as Numpy arrays. To do so, the; # content of the dataframe is converted using the AsNumpy method. The returned; # object is a dictionary with the column names as keys and 1D numpy arrays with; # the content as values.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df026_AsNumpyArrays.py:19,access,access,19,tutorials/dataframe/df026_AsNumpyArrays.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df026_AsNumpyArrays.py,1,['access'],['access']
Security,"# Now the event loop on the cached dataset is triggered by accessing the histogram.; # This event triggers the loop on the `df` data frame lazily.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df019_Cache.py:59,access,accessing,59,tutorials/dataframe/df019_Cache.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df019_Cache.py,1,['access'],['accessing']
Security,"# Numpy breaks for data pointer of 0 even though the array is empty.; # We set the pointer to 1 but the value itself is arbitrary and never accessed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_rvec.py:140,access,accessed,140,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_rvec.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_rvec.py,2,['access'],['accessed']
Security,# On OS X the 'cc' and 'c++' compilers are wrappers for; # 'clang' therefore both call would be logged. To avoid; # this the hash does not contain the first word of the; # command.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/intercept.py:125,hash,hash,125,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/intercept.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/intercept.py,1,['hash'],['hash']
Security,"# Operations on the dataframe; # We now review some *actions* which can be performed on the data frame.; # Actions can be divided into instant actions (e. g. Foreach()) and lazy; # actions (e. g. Count()), depending on whether they trigger the event ; # loop immediately or only when one of the results is accessed for the ; # first time. Actions that return ""something"" either return their result ; # wrapped in a RResultPtr or in a RDataFrame.; # But first of all, let us we define now our cut-flow with two strings.; # Filters can be expressed as strings. The content must be C++ code. The; # name of the variables must be the name of the branches. The code is; # just-in-time compiled.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df001_introduction.py:306,access,accessed,306,tutorials/dataframe/df001_introduction.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df001_introduction.py,1,['access'],['accessed']
Security,"# Otherwise, access element by array of indices",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_rtensor.py:13,access,access,13,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_rtensor.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_rtensor.py,1,['access'],['access']
Security,"# Parameters:; # klass: class to be pythonized; # Item access methods",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tseqcollection.py:55,access,access,55,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tseqcollection.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tseqcollection.py,1,['access'],['access']
Security,"# Parameters:; # klass: class to be pythonized; # TChain needs to be explicitly pythonized because it redefines; # SetBranchAddress in C++. As a consequence, TChain does not; # inherit TTree's pythonization for SetBranchAddress, which; # needs to be injected to TChain too. This is not the case for; # other classes like TNtuple, which will inherit all the; # pythonizations added here for TTree.; # SetBranchAddress",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_ttree.py:250,inject,injected,250,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_ttree.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_ttree.py,1,['inject'],['injected']
Security,"# Parameters:; # klass: class to be pythonized; # name: string containing the name of the class; # Pythonizations that are common to TTree and its subclasses.; # To avoid duplicating the same logic in the pythonizors of; # the subclasses, inject the pythonizations for all the target; # classes here.; # Pythonic iterator",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_ttree.py:239,inject,inject,239,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_ttree.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_ttree.py,1,['inject'],['inject']
Security,"# Python sort, key and reverse arguments.; # Sort by hash in reverse order",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tseqcollection_listmethods.py:53,hash,hash,53,bindings/pyroot/pythonizations/test/tseqcollection_listmethods.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tseqcollection_listmethods.py,1,['hash'],['hash']
Security,"# Returns two TF.Dataset for training and validation batches.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/RBatchGenerator_TensorFlow.py:42,validat,validation,42,tutorials/tmva/RBatchGenerator_TensorFlow.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/RBatchGenerator_TensorFlow.py,1,['validat'],['validation']
Security,"# Returns two generators that return training and validation batches; # as PyTorch tensors.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/RBatchGenerator_PyTorch.py:50,validat,validation,50,tutorials/tmva/RBatchGenerator_PyTorch.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/RBatchGenerator_PyTorch.py,1,['validat'],['validation']
Security,"# Sanitize input arguments",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_rdataframe.py:2,Sanitiz,Sanitize,2,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_rdataframe.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_rdataframe.py,1,['Sanitiz'],['Sanitize']
Security,# Sanitizers.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py:2,Sanitiz,Sanitizers,2,interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py,1,['Sanitiz'],['Sanitizers']
Security,"# Setup the connection to Spark; # First create a dictionary with keys representing Spark specific configuration; # parameters. In this tutorial we use the following configuration parameters:; #; # 1. spark.app.name: The name of the Spark application; # 2. spark.master: The Spark endpoint responsible for running the; # application. With the syntax ""local[2]"" we signal Spark we want to run; # locally on the same machine with 2 cores, each running a separate; # process. The default behaviour of a Spark application would run; # locally on the same machine with as many concurrent processes as; # available cores, that could be also written as ""local[*]"".; #; # If you have access to a remote cluster you should substitute the endpoint URL; # of your Spark master in the form ""spark://HOST:PORT"" in the value of; # `spark.master`. Depending on the availability of your cluster you may request; # more computing nodes or cores per node with a similar configuration:; #; # sparkconf = pyspark.SparkConf().setAll(; # {""spark.master"": ""spark://HOST:PORT"",; # ""spark.executor.instances"": <number_of_nodes>,; # ""spark.executor.cores"" <cores_per_node>,}.items()); #; # You can find all configuration options and more details in the official Spark; # documentation at https://spark.apache.org/docs/latest/configuration.html .; # Create a SparkConf object with all the desired Spark configuration parameters",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/distrdf001_spark_connection.py:676,access,access,676,tutorials/dataframe/distrdf001_spark_connection.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/distrdf001_spark_connection.py,1,['access'],['access']
Security,"# Skip X86GenMnemonicTables functions, they are not exposed from llvm/include/.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/extract_symbols.py:52,expose,exposed,52,interpreter/llvm-project/llvm/utils/extract_symbols.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/extract_symbols.py,1,['expose'],['exposed']
Security,"# So far we have seen how pythonizations can be registered for classes that; # have not been used yet. We have discussed how, in that case, the pythonizor; # functions are executed lazily when their target class/es are used for the; # first time in the application.; # However, it can also happen that our target class/es have already been; # accessed by the time we register a pythonization. In such a scenario, the; # pythonizor is applied immediately (at registration time) to the target; # class/es.; # Let's see an example of what was just explained. We will define a new class; # and immediately create an object of that class. We can check how the object; # still does not have a new attribute `pythonized` that we are going to inject; # in the next step.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/pyroot/pyroot002_pythonizationDecorator.py:343,access,accessed,343,tutorials/pyroot/pyroot002_pythonizationDecorator.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/pyroot/pyroot002_pythonizationDecorator.py,2,"['access', 'inject']","['accessed', 'inject']"
Security,"# TODO: the following relies on the fact that numba will first lower the; # field access, then immediately lower the call; and that the `val` loads; # the struct representing the C++ object. Neither need be stable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/python/cppyy/numba_ext.py:82,access,access,82,bindings/pyroot/cppyy/cppyy/python/cppyy/numba_ext.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/python/cppyy/numba_ext.py,1,['access'],['access']
Security,"# The hash of the build option string is used to find existing artifacts; # with matching build options on s3 storage.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/.github/workflows/root-ci-config/build_root.py:6,hash,hash,6,.github/workflows/root-ci-config/build_root.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/.github/workflows/root-ci-config/build_root.py,1,['hash'],['hash']
Security,# This lock will be used to protect concurrent access; # to _procs and _doneKillPass,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:47,access,access,47,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,1,['access'],['access']
Security,"# To enable accessing objects in the RooWorkspace with dictionary-like syntax.; # The key is passed to the general `RooWorkspace::obj()` function.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_rooworkspace.py:12,access,accessing,12,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_rooworkspace.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_rooworkspace.py,1,['access'],['accessing']
Security,# Validate command line options,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/cl_arguments.py:2,Validat,Validate,2,interpreter/llvm-project/llvm/utils/lit/lit/cl_arguments.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/cl_arguments.py,1,['Validat'],['Validate']
Security,# Validate that this user is allowed to modify releases.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/release/github-upload-release.py:2,Validat,Validate,2,interpreter/llvm-project/llvm/utils/release/github-upload-release.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/release/github-upload-release.py,1,['Validat'],['Validate']
Security,"# Validate the intended behavior for different argument types:; # const ref : caller keeps ownership; # const ptr : caller keeps ownership; # ref : caller keeps ownership; # ptr : caller passed ownership to callee; # The actual type doesn't matter",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_regression.py:2,Validat,Validate,2,bindings/pyroot/cppyy/cppyy/test/test_regression.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_regression.py,1,['Validat'],['Validate']
Security,"# Validation Loop; # Set to eval mode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/generatePyTorchModelClassification.py:2,Validat,Validation,2,tmva/pymva/test/generatePyTorchModelClassification.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/generatePyTorchModelClassification.py,7,['Validat'],['Validation']
Security,# We never computed a checksum for this project.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py:22,checksum,checksum,22,interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py,1,['checksum'],['checksum']
Security,# We'll get complaints about hash mismatches in `main` in tools/etc. Ignore; # it.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/collect_and_build_with_pgo.py:29,hash,hash,29,interpreter/llvm-project/llvm/utils/collect_and_build_with_pgo.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/collect_and_build_with_pgo.py,1,['hash'],['hash']
Security,"# \file; # \ingroup tutorial_roostats; # \notebook -js; # Example demonstrating usage of HybridCalcultor; #; # A hypothesis testing example based on number counting; # with background uncertainty.; #; # NOTE: This example must be run with the ACLIC (the + option ) due to the; # new class that is defined.; #; # This example:; # - demonstrates the usage of the HybridCalcultor (Part 4-6); # - demonstrates the numerical integration of RooFit (Part 2); # - validates the RooStats against an example with a known analytic answer; # - demonstrates usage of different test statistics; # - explains subtle choices in the prior used for hybrid methods; # - demonstrates usage of different priors for the nuisance parameters; # - demonstrates usage of PROOF; #; # The basic setup here is that a main measurement has observed x events with an; # expectation of s+b. One can choose an ad hoc prior for the uncertainty on b,; # or try to base it on an auxiliary measurement. In this case, the auxiliary; # measurement (aka control measurement, sideband) is another counting experiment; # with measurement y and expectation tau*b. With an 'original prior' on b,; # called \f$\eta(b)\f$ then one can obtain a posterior from the auxiliary measurement; # \f$\pi(b) = \eta(b) * Pois(y|tau*b).\f$ This is a principled choice for a prior; # on b in the main measurement of x, which can then be treated in a hybrid; # Bayesian/Frequentist way. Additionally, one can try to treat the two; # measurements simultaneously, which is detailed in Part 6 of the tutorial.; #; # This tutorial is related to the FourBin.C tutorial in the modeling, but; # focuses on hypothesis testing instead of interval estimation.; #; # More background on this 'prototype problem' can be found in the; # following papers:; #; # - Evaluation of three methods for calculating statistical significance; # when incorporating a systematic uncertainty into a test of the; # background-only hypothesis for a Poisson process; # Authors: Robert D. Cous",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py:456,validat,validates,456,tutorials/roostats/HybridInstructional.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py,1,['validat'],['validates']
Security,"# add access to Python C-API headers",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/python/cppyy/__init__.py:6,access,access,6,bindings/pyroot/cppyy/cppyy/python/cppyy/__init__.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/python/cppyy/__init__.py,1,['access'],['access']
Security,"# add access to extra headers for dispatcher (CPyCppyy only (?))",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/python/cppyy/__init__.py:6,access,access,6,bindings/pyroot/cppyy/cppyy/python/cppyy/__init__.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/python/cppyy/__init__.py,1,['access'],['access']
Security,"# allowing access to e.m_pp_no_such is debatable, but it allows a typed address; # to be passed back into C++, which may be useful ...",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py:11,access,access,11,bindings/pyroot/cppyy/cppyy/test/test_fragile.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py,1,['access'],['access']
Security,"# can not access an instance member on the class",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py:10,access,access,10,bindings/pyroot/cppyy/cppyy/test/test_datatypes.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py,1,['access'],['access']
Security,"# create a dictionary for convenient access to python classes",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/__init__.py:37,access,access,37,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/__init__.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/__init__.py,2,['access'],['access']
Security,"# explicitly expose APIs from libcppyy",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/python/cppyy/_cpython_cppyy.py:13,expose,expose,13,bindings/pyroot/cppyy/cppyy/python/cppyy/_cpython_cppyy.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/python/cppyy/_cpython_cppyy.py,1,['expose'],['expose']
Security,# exposed for testing since the order of files returned by glob is not guaranteed to be sorted,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/report.py:2,expose,exposed,2,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/report.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/report.py,1,['expose'],['exposed']
Security,"# hashes of std::string larger than 2**31 would fail; run a couple of; # strings to check although it may still succeed by accident (and never; # was an issue on p3 anyway)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_regression.py:2,hash,hashes,2,bindings/pyroot/cppyy/cppyy/test/test_regression.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_regression.py,1,['hash'],['hashes']
Security,"# inject a vector in the global namespace",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py:2,inject,inject,2,bindings/pyroot/cppyy/cppyy/test/test_fragile.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py,1,['inject'],['inject']
Security,"# number of toys used to define the expected limit and band; # -------------------------------------------------------; # First part is just to access a user-defined file; # or create the standard example file if it doesn't exist",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/TwoSidedFrequentistUpperLimitWithBands.py:144,access,access,144,tutorials/roostats/TwoSidedFrequentistUpperLimitWithBands.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/TwoSidedFrequentistUpperLimitWithBands.py,1,['access'],['access']
Security,"# old syntax to access the variable x; # frame = w.x.frame()",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf509_wsinteractive.py:16,access,access,16,tutorials/roofit/rf509_wsinteractive.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf509_wsinteractive.py,1,['access'],['access']
Security,"# proxies are always accessed by pointer, which are not composites",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/python/cppyy/numba_ext.py:21,access,accessed,21,bindings/pyroot/cppyy/cppyy/python/cppyy/numba_ext.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/python/cppyy/numba_ext.py,1,['access'],['accessed']
Security,# pylint: disable=protected-access,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/revert_checker_test.py:28,access,access,28,interpreter/llvm-project/llvm/utils/revert_checker_test.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/revert_checker_test.py,1,['access'],['access']
Security,"# return: representation used for return argument.; # TODO ...; # access to public data members",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/python/cppyy/numba_ext.py:66,access,access,66,bindings/pyroot/cppyy/cppyy/python/cppyy/numba_ext.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/python/cppyy/numba_ext.py,1,['access'],['access']
Security,"# self does not work anymore with CLING; # use normal workspace functionality; # Use workspace contents; # ----------------------------------------------; # Old syntax to use the name space prefix operator to access the workspace contents; #; # d = w.model.generate(w.x,1000); # r = w.model.fitTo(*d); # use normal workspace methods",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf509_wsinteractive.py:209,access,access,209,tutorials/roofit/rf509_wsinteractive.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf509_wsinteractive.py,1,['access'],['access']
Security,# short validation logic,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py:8,validat,validation,8,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py,1,['validat'],['validation']
Security,"# special case access to unboxing/boxing APIs",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/python/cppyy/numba_ext.py:15,access,access,15,bindings/pyroot/cppyy/cppyy/python/cppyy/numba_ext.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/python/cppyy/numba_ext.py,1,['access'],['access']
Security,"# std sub-namespace symbols have separated pages.; # We don't index std literal operators (e.g.; # std::literals::chrono_literals::operator""""d), these symbols can't be; # accessed by std::<symbol_name>.; #; # std::placeholders symbols are handled manually in StdSpecialSymbolMap.inc",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/include-mapping/gen_std.py:171,access,accessed,171,interpreter/llvm-project/clang/tools/include-mapping/gen_std.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/include-mapping/gen_std.py,1,['access'],['accessed']
Security,# std::ranges::views can be accessed as std::views.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/include-mapping/gen_std.py:28,access,accessed,28,interpreter/llvm-project/clang/tools/include-mapping/gen_std.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/include-mapping/gen_std.py,1,['access'],['accessed']
Security,"# test that the enum is accessible as a type",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py:24,access,accessible,24,bindings/pyroot/cppyy/cppyy/test/test_datatypes.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py,1,['access'],['accessible']
Security,"# test type accessible",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py:12,access,accessible,12,bindings/pyroot/cppyy/cppyy/test/test_datatypes.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py,1,['access'],['accessible']
Security,"# the C++ object, b/c through a proxy, is always accessed by pointer; it is represented; # as a pointer to POD to allow indexing by Numba for data member type checking, but the; # address offsetting for loading data member values is independent (see get(), below),; # so the exact layout need not match a POD; # TODO: this doesn't work for real PODs, b/c those are unpacked into their elements and; # passed through registers",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/python/cppyy/numba_ext.py:49,access,accessed,49,bindings/pyroot/cppyy/cppyy/python/cppyy/numba_ext.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/python/cppyy/numba_ext.py,1,['access'],['accessed']
Security,"# the following is invalid, GDB fails with:; # Python Exception <class 'gdb.error'> Attempt to take address of value; # not located in memory.; # because isEqual took parameter (for the unsigned long key I was testing); # by const ref, and GDB; # It's also not entirely general - we should be accessing the ""getFirst()""; # member function, not the 'first' member variable, but I've yet to figure; # out how to find/call member functions (especially (const) overloaded; # ones) on a gdb.Value.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/gdb-scripts/prettyprinters.py:293,access,accessing,293,interpreter/llvm-project/llvm/utils/gdb-scripts/prettyprinters.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/gdb-scripts/prettyprinters.py,1,['access'],['accessing']
Security,# validate that given projects are present in the project map file,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATest.py:2,validat,validate,2,interpreter/llvm-project/clang/utils/analyzer/SATest.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATest.py,1,['validat'],['validate']
Security,"#!/usr/bin/env python3; # ===-- github-upload-release.py ------------------------------------------===#; #; # Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; # See https://llvm.org/LICENSE.txt for license information.; # SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; #; # ===------------------------------------------------------------------------===#; #; # Create and manage releases in the llvm github project.; #; # This script requires python3 and the PyGithub module.; #; # Example Usage:; #; # You will need to obtain a personal access token for your github account in; # order to use this script. Instructions for doing this can be found here:; # https://help.github.com/en/articles/creating-a-personal-access-token-for-the-command-line; #; # Create a new release from an existing tag:; # ./github-upload-release.py --token $github_token --release 8.0.1-rc4 create; #; # Upload files for a release; # ./github-upload-release.py --token $github_token --release 8.0.1-rc4 upload --files llvm-8.0.1rc4.src.tar.xz; #; # You can upload as many files as you want at a time and use wildcards e.g.; # ./github-upload-release.py --token $github_token --release 8.0.1-rc4 upload --files *.src.*; # ===------------------------------------------------------------------------===#",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/release/github-upload-release.py:577,access,access,577,interpreter/llvm-project/llvm/utils/release/github-upload-release.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/release/github-upload-release.py,2,['access'],"['access', 'access-token-for-the-command-line']"
Security,"## A C/C++ structure is required, to allow memory based access",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/pyroot/staff.py:56,access,access,56,tutorials/pyroot/staff.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/pyroot/staff.py,1,['access'],['access']
Security,"## Basic initialization of FOAM invoked by the user. Mandatory!; ///; /// This method starts the process of the cell build-up.; /// User must invoke Initialize with two arguments or Initialize without arguments.; /// This is done BEFORE generating first MC event and AFTER allocating FOAM object; /// and resetting (optionally) its internal parameters/switches.; /// The overall operational scheme of the FOAM is the following:; ///; /// \image html foam_schema2.png width=600; ///; /// ### This method invokes several other methods:; ///; /// InitCells initializes memory storage for cells and begins exploration process; /// from the root cell. The empty cells are allocated/filled using CellFill.; /// The procedure Grow which loops over cells, picks up the cell with the biggest; /// ``driver integral'', see Computer Physics Communications 152 152 (2003) 55 for explanations,; /// with the help of PeekMax procedure. The chosen cell is split using Divide.; /// Subsequently, the procedure Explore called by the Divide; /// (and by InitCells for the root cell) does the most important; /// job in the FOAM object build-up: it performs a small MC run for each; /// newly allocated daughter cell.; /// Explore calculates how profitable the future split of the cell will be; /// and defines the optimal cell division geometry with the help of Carver or Varedu; /// procedures, for maximum weight or variance optimization respectively.; /// All essential results of the exploration are written into; /// the explored cell object. At the very end of the foam build-up,; /// Finally, MakeActiveList is invoked to create a list of pointers to; /// all active cells, for the purpose of the quick access during the MC generation.; /// The procedure Explore employs MakeAlpha to generate random coordinates; /// inside a given cell with the uniform distribution.; /// The above sequence of the procedure calls is depicted in the following figure:; ///; /// \image html foam_Initialize_schema.png width=600",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/foam/src/TFoam.cxx:1779,access,access,1779,math/foam/src/TFoam.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/foam/src/TFoam.cxx,1,['access'],['access']
Security,"## Function inserter class; # This class contains the methods which are invoked by using jsmva magic, and will inject the new methods; # to TMVA::Factory, TMVA::DataLoader",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/JsMVA/JPyInterface.py:111,inject,inject,111,bindings/pyroot/pythonizations/python/ROOT/JsMVA/JPyInterface.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/JsMVA/JPyInterface.py,1,['inject'],['inject']
Security,"## \file; ## \ingroup tutorial_roofit; ## \notebook; ## Organization and simultaneous fits: easy interactive access to workspace contents - CINT; ## to CLING code migration; ##; ## \macro_image; ## \macro_code; ## \macro_output; ##; ## \date February 2018; ## \authors Clemens Lange, Wouter Verkerke (C++ version)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf509_wsinteractive.py:109,access,access,109,tutorials/roofit/rf509_wsinteractive.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf509_wsinteractive.py,1,['access'],['access']
Security,"## \file; ## \ingroup tutorial_roofit; ## \notebook; ## Validation and MC studies: toy Monte Carlo study that perform cycles of event generation and fitting; ##; ## \macro_image; ## \macro_code; ## \macro_output; ##; ## \date February 2018; ## \authors Clemens Lange, Wouter Verkerke (C++ version)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf801_mcstudy.py:56,Validat,Validation,56,tutorials/roofit/rf801_mcstudy.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf801_mcstudy.py,1,['Validat'],['Validation']
Security,"## \file; ## \ingroup tutorial_roostats; ## \notebook; ## Example showing confidence intervals with four techniques.; ##; ## An example that shows confidence intervals with four techniques.; ## The model is a Normal Gaussian G(x|mu,sigma) with 100 samples of x.; ## The answer is known analytically, so this is a good example to validate; ## the RooStats tools.; ##; ## - expected interval is [-0.162917, 0.229075]; ## - plc interval is [-0.162917, 0.229075]; ## - fc interval is [-0.17 , 0.23] // stepsize is 0.01; ## - bc interval is [-0.162918, 0.229076]; ## - mcmc interval is [-0.166999, 0.230224]; ##; ## \macro_image; ## \macro_output; ## \macro_code; ##; ## \date July 2022; ## \authors Artem Busorgin, Kyle Cranmer (C++ version)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/IntervalExamples.py:329,validat,validate,329,tutorials/roostats/IntervalExamples.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/IntervalExamples.py,1,['validat'],['validate']
Security,"## \file; ## \ingroup tutorial_sql; ##; ## Query example to MySQL test database.; ## Example of query by using the test database made in MySQL, you need the; ## database test installed in localhost, with user nobody without password.; ##; ## Based on sqlselect.C by Sergey Linev; ##; ## \macro_code; ##; ## \author Juan Fernando Jaramillo Botero",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/sql/sqlselect.py:224,password,password,224,tutorials/sql/sqlselect.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/sql/sqlselect.py,1,['password'],['password']
Security,"## \ingroup tutorial_roofit; ## \notebook; ##; ## 'VALIDATION AND MC STUDIES' RooFit tutorial macro #802; ##; ## RooMCStudy: using separate fit and generator models, the chi^2 calculator model; ##; ## \macro_image; ## \macro_code; ## \macro_output; ##; ## \date February 2018; ## \author Clemens Lange",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf802_mcstudy_addons.py:51,VALIDAT,VALIDATION,51,tutorials/roofit/rf802_mcstudy_addons.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf802_mcstudy_addons.py,1,['VALIDAT'],['VALIDATION']
Security,"## \ingroup tutorial_roofit; ## \notebook; ##; ## 'VALIDATION AND MC STUDIES' RooFit tutorial macro #803; ##; ## RooMCStudy: Using the randomizer and profile likelihood add-on models; ##; ## \macro_image; ## \macro_code; ## \macro_output; ##; ## \date February 2018; ## \author Clemens Lange",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf803_mcstudy_addons2.py:51,VALIDAT,VALIDATION,51,tutorials/roofit/rf803_mcstudy_addons2.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf803_mcstudy_addons2.py,1,['VALIDAT'],['VALIDATION']
Security,"## \ingroup tutorial_roofit; ## \notebook; ##; ## 'VALIDATION AND MC STUDIES' RooFit tutorial macro #804; ##; ## Using RooMCStudy on models with constraints; ##; ## \macro_image; ## \macro_code; ## \macro_output; ##; ## \date February 2018; ## \author Clemens Lange",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf804_mcstudy_constr.py:51,VALIDAT,VALIDATION,51,tutorials/roofit/rf804_mcstudy_constr.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf804_mcstudy_constr.py,1,['VALIDAT'],['VALIDATION']
Security,"#################################################################; # Validation; #################################################################; # Evaluate the model on the validation set",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/RBatchGenerator_PyTorch.py:69,Validat,Validation,69,tutorials/tmva/RBatchGenerator_PyTorch.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/RBatchGenerator_PyTorch.py,2,"['Validat', 'validat']","['Validation', 'validation']"
Security,"$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooFormula.cxx; \class RooFormula; \ingroup Roofitcore. Internally uses ROOT's TFormula to compute user-defined expressions of RooAbsArgs. The string expression can be any valid TFormula expression referring to the; listed servers either by name or by their ordinal list position. These three are; forms equivalent:; ```; RooFormula(""formula"", ""x*y"", RooArgList(x,y)) or; RooFormula(""formula"", ""@0*@1"", RooArgList(x,y)); RooFormula(""formula"", ""x[0]*x[1]"", RooArgList(x,y)); ```; Note that `x[i]` is an expression reserved for TFormula. If a variable with; the name `x` is given, the RooFormula interprets `x` as a variable name,; but `x[i]` as an index in the list of variables. ### Category expressions; State information of RooAbsCategories can be accessed using the '::' operator,; *i.e.*, `tagCat::Kaon` will resolve to the numerical value of; the `Kaon` state of the RooAbsCategory object named `tagCat`. A formula to switch between lepton categories could look like this:; ```; RooFormula(""formulaWithCat"",; ""x * (leptonMulti == leptonMulti::one) + y * (leptonMulti == leptonMulti::two)"",; RooArgList(x, y, leptonMulti));; ```. ### Debugging a formula that won't compile; When the formula is preprocessed, RooFit can print information in the debug stream.; These can be retrieved by activating the RooFit::MsgLevel `RooFit::DEBUG`; and the RooFit::MsgTopic `RooFit::InputArguments`.; Check the tutorial rf506_msgservice.C for details.; **/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFormula.cxx:1456,access,accessed,1456,roofit/roofitcore/src/RooFormula.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFormula.cxx,1,['access'],['accessed']
Security,"'''; Abstract base class that defines some common logic to properly pythonize; method templates. More precisely, it provides an implementation of; `__getitem__` that makes wrappers subscriptable and allows them to capture; template arguments.; Subclasses of this class must redefine `__call__` with the actual; pythonization of the method template. Attributes:; _original_method (cppyy TemplateProxy): original implementation of the; method template that is bound to the instance on which the template; was accessed.; _extra_args (tuple): extra arguments to be used when receiving a call.; '''",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_pyz_utils.py:507,access,accessed,507,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_pyz_utils.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_pyz_utils.py,1,['access'],['accessed']
Security,"'''; Autocomplete interfacing to TTabCom. If an accessor of a scope is; present in the line, the suggestions are prepended with the line.; That's how completers work. For example:; myGraph.Set<tab> will return ""myGraph.Set+suggestion in the list of; suggestions.; '''",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/jupyroot/python/JupyROOT/helpers/cppcompleter.py:48,access,accessor,48,bindings/jupyroot/python/JupyROOT/helpers/cppcompleter.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/jupyroot/python/JupyROOT/helpers/cppcompleter.py,1,['access'],['accessor']
Security,'''; Constructor of a wrapper object for a method template. Args:; original_method (cppyy TemplateProxy): original implementation of; the method template that is bound to the instance on which the; template was accessed.; extra_args (tuple): extra arguments to be used when receiving a; call.; ''',MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_pyz_utils.py:211,access,accessed,211,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_pyz_utils.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_pyz_utils.py,1,['access'],['accessed']
Security,"'''; Creates and returns a wrapper object for a method template. The type of; the wrapper is a subclass of MethodTemplateWrapper.; By implementing `__get__`, we obtain a handle to the instance of the; pythonized class on which the application accessed the method template.; That allows us to get an original implementation of the method template; that is bound to that instance, and pass such implementation along to; the wrapper object for later use. Args:; instance (class instance): instance of the pythonized class on; which the application accessed the method template.; instance_type (class type): type of the instance. Returns:; instance of MethodTemplateWrapper subclass: contains a handle to; the original implementation of the method template that is; bound to `instance` and, possibly, some extra arguments to be; used when receiving a call.; '''",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_pyz_utils.py:243,access,accessed,243,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_pyz_utils.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_pyz_utils.py,2,['access'],['accessed']
Security,"'''; Decorator for making Python callables accessible in C++ by just-in-time compilation; with numba and cling. The decorator takes the given Python callable and just-in-time compiles (jits); wrapper functions with the given C++ types for input and return types. Eventually,; the Python callable is accessible in the Numba namespace in C++. The implementation first jits with numba the Python callable. We support fundamental types and; ROOT::VecOps::RVecs thereof. Note that you can get the jitted Python callable by the attribute; numba_func. The C++ types are converted to the respective numba types and RVecs are accessible; in Python by numpy arrays. After jitting the actual Python callable, we jit another Python wrapper,; which converts the Python signature to a C-friendly signature. The wrapper code is accessible by; the attribute __py_wrapper__. Next, the Python wrapper is given to cling to jit a C++ wrapper function,; making the original Python callable accessible in C++. The wrapper code in C++ is accessible by; the attribute __cpp_wrapper__. Note that the callable is fully compiled without side-effects. The numba jitting uses the nopython; option which does not allow interaction with the Python interpreter. This means that you can use; the resulting function also safely in multi-threaded environments.; '''",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_numbadeclare.py:43,access,accessible,43,bindings/pyroot/pythonizations/python/ROOT/_numbadeclare.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_numbadeclare.py,6,['access'],['accessible']
Security,"'''; Decorator that allows to pythonize C++ classes. To pythonize means to add; some extra behaviour to a C++ class that is used from Python via PyROOT,; so that such a class can be used in an easier / more ""pythonic"" way.; When a pythonization is registered with this decorator, the injection of; the new behaviour in the C++ class is done immediately, if the class has; already been used from the application, or lazily, i.e. only when the class; is first accessed from the application. Args:; class_name (string/iterable[string]): specifies either a single string or; multiple strings, where each string can be either (i) the name of a; C++ class to be pythonized, or (ii) a prefix to match all classes; whose name starts with that prefix.; ns (string): namespace of the classes to be pythonized. Default is the; global namespace (`::`).; is_prefix (boolean): if True, `class_name` contains one or multiple; prefixes, each prefix potentially matching multiple classes.; Default is False.; These are examples of prefixes and namespace and what they match:; - class_name="""", ns=""::"" : all classes in the global namespace.; - class_name=""C"", ns=""::"" : all classes in the global namespace; whose name starts with ""C""; - class_name="""", ns=""NS1::NS2"" : all classes in namespace ""NS1::NS2""; - class_name=""C"", ns=""NS1::NS2"" : all classes in namespace; ""NS1::NS2"" whose name starts with ""C"". Returns:; function: function that receives the user-defined function and; decorates it.; '''",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/__init__.py:284,inject,injection,284,bindings/pyroot/pythonizations/python/ROOT/_pythonization/__init__.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/__init__.py,2,"['access', 'inject']","['accessed', 'injection']"
Security,"'''; Finds and returns the proxy object of the `ns` namespace, if it has already; been accessed. Args:; ns (string): a namespace. Returns:; namespace proxy object, if the namespace has already been accessed,; otherwise None.; '''",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/__init__.py:87,access,accessed,87,bindings/pyroot/pythonizations/python/ROOT/_pythonization/__init__.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/__init__.py,2,['access'],['accessed']
Security,"'''; Get C friendly signature as numba type objects from C++ typenames. We need the types to jit a Python wrapper, which can be accessed as a function pointer in C++.; '''",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_numbadeclare.py:128,access,accessed,128,bindings/pyroot/pythonizations/python/ROOT/_numbadeclare.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_numbadeclare.py,1,['access'],['accessed']
Security,"'''; Instances of this class can be injected in class proxies to replace method; templates that we want to pythonize. Similarly to what `partialmethod`; does, this class implements `__get__` to return a wrapper object of a; method that is bound to an instance of the pythonized class. Such object is; both callable and subscriptable. Attributes:; _original_method (cppyy TemplateProxy): original cppyy method template; being pythonized.; _wrapper_class (subclass of MethodTemplateWrapper): class that wraps a; pythonized method template.; _extra_args (tuple): extra arguments to be forwarded to; `_wrapper_class`'s __init__ method, to be used by the wrapper object; when receiving a call.; '''",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_pyz_utils.py:36,inject,injected,36,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_pyz_utils.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_pyz_utils.py,1,['inject'],['injected']
Security,'''; Registers the ROOT pythonizations with cppyy for lazy injection.; ''',MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/__init__.py:59,inject,injection,59,bindings/pyroot/pythonizations/python/ROOT/_pythonization/__init__.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/__init__.py,1,['inject'],['injection']
Security,'''; Test that RVec is accessible from the ROOT and ROOT::VecOps namespace; ''',MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rvec.py:23,access,accessible,23,bindings/pyroot/pythonizations/test/rvec.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rvec.py,1,['access'],['accessible']
Security,"'''; The real decorator. Accepts a user-provided function and decorates it.; An inner function - a wrapper of the user function - is registered in; cppyy as a pythonizor. Args:; user_pythonizor (function): user-provided function to be decorated.; It implements some pythonization. It can accept two parameters:; the class to be pythonized, i.e. the Python proxy of the class; in which new behaviour can be injected, and optionally the name; of that class (can be used e.g. to do some more complex; filtering). Returns:; function: the user function, after being registered as a; pythonizor.; '''",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/__init__.py:406,inject,injected,406,bindings/pyroot/pythonizations/python/ROOT/_pythonization/__init__.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/__init__.py,1,['inject'],['injected']
Security,"(HashBuilder<HasherT, Endianness> &HBuilder,; /// const UserDefinedStruct &Value);; /// ```; ///; /// For example:; /// ```; /// struct SimpleStruct {; /// char c;; /// int i;; /// };; ///; /// template <typename HasherT, llvm::endianness Endianness>; /// void addHash(HashBuilder<HasherT, Endianness> &HBuilder,; /// const SimpleStruct &Value) {; /// HBuilder.add(Value.c);; /// HBuilder.add(Value.i);; /// }; /// ```; ///; /// To avoid endianness issues, specializations of `addHash` should; /// generally rely on exising `add`, `addRange`, and `addRangeElements`; /// functions. If directly using `update`, an implementation must correctly; /// handle endianness.; ///; /// ```; /// struct __attribute__ ((packed)) StructWithFastHash {; /// int I;; /// char C;; ///; /// // If possible, we want to hash both `I` and `C` in a single; /// // `update` call for performance concerns.; /// template <typename HasherT, llvm::endianness Endianness>; /// friend void addHash(HashBuilder<HasherT, Endianness> &HBuilder,; /// const StructWithFastHash &Value) {; /// if (Endianness == llvm::endianness::native) {; /// HBuilder.update(ArrayRef(; /// reinterpret_cast<const uint8_t *>(&Value), sizeof(Value)));; /// } else {; /// // Rely on existing `add` methods to handle endianness.; /// HBuilder.add(Value.I);; /// HBuilder.add(Value.C);; /// }; /// }; /// };; /// ```; ///; /// To avoid collisions, specialization of `addHash` for variable-size; /// types must take the size into account.; ///; /// For example:; /// ```; /// struct CustomContainer {; /// private:; /// size_t Size;; /// int Elements[100];; ///; /// public:; /// CustomContainer(size_t Size) : Size(Size) {; /// for (size_t I = 0; I != Size; ++I); /// Elements[I] = I;; /// }; /// template <typename HasherT, llvm::endianness Endianness>; /// friend void addHash(HashBuilder<HasherT, Endianness> &HBuilder,; /// const CustomContainer &Value) {; /// if (Endianness == llvm::endianness::native) {; /// HBuilder.update(ArrayRef(; /// reinterp",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h:1180,Hash,HasherT,1180,interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,3,['Hash'],"['HashBuilder', 'HasherT']"
Security,")/GetDatime() - date and time; // SetTimestamp()/GetTimestamp() - timestamp with seconds fraction; // For some of these methods TDatime type can be used as parameter / return value.; // Be aware that TDatime supports only dates after 1995-01-01.; // There are also methods to get year, month, day, hour, minutes and seconds separately.; //; // Note that different SQL databases treat date/time types differently.; // For instance, MySQL has all correspondent types (TIME, DATE, DATETIME and TIMESTAMP),; // Oracle native driver supports only DATE (which is actually date and time) and TIMESTAMP; // ODBC interface provides access for time, date and timestamps,; // for PostgreSQL, TIMESTAMP is available and can be retrieved via all methods,; // the implementation for SQLite interprets the column content as; // a timestamp with second fraction.; // Due to these differences, one should use correct methods to access such data.; // For instance, in MySQL SQL type 'DATE' is only date (one should use GetDate() to; // access such data), while in Oracle it is date and time. Therefore,; // to get complete data from a 'DATE' column in Oracle, one should use the GetDatime() method.; //; // The only difference between timestamp and date/time is that timestamp has a fractional; // seconds part. Be aware that the fractional part has different meanings; // (actual value) in different SQL plugins.; // For PostgreSQL, it is given back as microseconds, while for SQLite3,; // milliseconds correspond to the fraction (similar to the DATETIME-functions; // implemented in the SQLite3 language).; //; // 5. Binary data; // ==============; // Most modern data bases support just binary data, which is; // typically has SQL type name 'BLOB'. To access data in such; // columns, GetBinary()/SetBinary() methods should be used.; // The current implementation implies that the complete content of the; // column must be retrieved at once. Therefore, very big data of; // gigabytes size may cause a problem.; //; ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TSQLStatement.cxx:10075,access,access,10075,net/net/src/TSQLStatement.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TSQLStatement.cxx,1,['access'],['access']
Security,"* x.lo ^= (x.lo >> 13) | (x.hi << (32 - 13));; * x.hi ^= (x.hi >> 13);; *; * The first one is significantly faster than the second, simply because the; * shift is larger than 32. This means:; * - All the bits we need are in the upper 32 bits, so we can ignore the lower; * 32 bits in the shift.; * - The shift result will always fit in the lower 32 bits, and therefore,; * we can ignore the upper 32 bits in the xor.; *; * Thanks to this optimization, XXH3 only requires these features to be efficient:; *; * - Usable unaligned access; * - A 32-bit or 64-bit ALU; * - If 32-bit, a decent ADC instruction; * - A 32 or 64-bit multiply with a 64-bit result; * - For the 128-bit variant, a decent byteswap helps short inputs.; *; * The first two are already required by XXH32, and almost all 32-bit and 64-bit; * platforms which can run XXH32 can run XXH3 efficiently.; *; * Thumb-1, the classic 16-bit only subset of ARM's instruction set, is one; * notable exception.; *; * First of all, Thumb-1 lacks support for the UMULL instruction which; * performs the important long multiply. This means numerous __aeabi_lmul; * calls.; *; * Second of all, the 8 functional registers are just not enough.; * Setup for __aeabi_lmul, byteshift loads, pointers, and all arithmetic need; * Lo registers, and this shuffling results in thousands more MOVs than A32.; *; * A32 and T32 don't have this limitation. They can access all 14 registers,; * do a 32->64 multiply with UMULL, and the flexible operand allowing free; * shifts is helpful, too.; *; * Therefore, we do a quick sanity check.; *; * If compiling Thumb-1 for a target which supports ARM instructions, we will; * emit a warning, as it is not a ""sane"" platform to compile for.; *; * Usually, if this happens, it is because of an accident and you probably need; * to specify -march, as you likely meant to compile for a newer architecture.; *; * Credit: large sections of the vectorial and asm source code paths; * have been contributed by @easyaspi314; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/xxhash/xxhash.h:2057,access,access,2057,builtins/xxhash/xxhash.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/xxhash/xxhash.h,1,['access'],['access']
Security,"*********************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : CCPruner *; * *; * *; * Description: Cost Complexity Pruning *; *; * Author: Doug Schouten (dschoute@sfu.ca); *; * *; * Copyright (c) 2007: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * U. of Texas at Austin, USA *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; ////////////////////////////////////////////////////////////////////////////////////////////////////////////; // CCPruner - a helper class to prune a decision tree using the Cost Complexity method //; // (see Classification and Regression Trees by Leo Breiman et al) //; // //; // Some definitions: //; // //; // T_max - the initial, usually highly overtrained tree, that is to be pruned back //; // R(T) - quality index (Gini, misclassification rate, or other) of a tree T //; // ~T - set of terminal nodes in T //; // T' - the pruned subtree of T_max that has the best quality index R(T') //; // alpha - the prune strength parameter in Cost Complexity pruning (R_alpha(T) = R(T) + alpha// |~T|) //; // //; // There are two running modes in CCPruner: (i) one may select a prune strength and prune back //; // the tree T_max until the criterion //; // R(T) - R(t) //; // alpha < ---------- //; // |~T_t| - 1 //; // //; // is true for all nodes t in T, or (ii) the algorithm finds the sequence of critical points //; // alpha_k < alpha_k+1 ... < alpha_K such that T_K = root(T_max) and then selects the optimally-pruned //; // subtree, defined to be the subtree with the best quality index for the validation sample. //; ////////////////////////////////////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/CCPruner.h:1882,validat,validation,1882,tmva/tmva/inc/TMVA/CCPruner.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/CCPruner.h,1,['validat'],['validation']
Security,"**********************************************; * Copyright (C) 1995-2011, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /**; \file TS3WebFile.cxx; \class TS3WebFile; \ingroup IO. A TS3WebFile is a TWebFile which retrieves the file contents from a; web server implementing the REST API of the Amazon S3 protocol. This; class is meant to be as generic as possible to be used with files; hosted not only by Amazon S3 servers but also by other providers; implementing the core of the S3 protocol. The S3 protocol works on top of HTTPS (and HTTP) and imposes that; each HTTP request be signed using a specific convention: the request; must include an 'Authorization' header which contains the signature; of a concatenation of selected request fields. For signing the; request, an 'Access Key Id' and a 'Secret Access Key' need to be; known. These keys are used by the S3 servers to identify the client; and to authenticate the request as genuine. As an end user, you must know the Access Key and Secret Access Key; in order to access each S3 file. They are provided to you by your S3; service provider. Those two keys can be provided to ROOT when; initializing an object of this class by two means:; a. by using the environmental variables S3_ACCESS_KEY and ; S3_SECRET_KEY, or; b. by specifying them when opening each file. You can use AWS temporary security credentials (temporary access key; and secret access key), but you must also give the associated; session token. The token may be set in the S3_SESSION_TOKEN; environmental variable, or on open in the TOKEN option. The first method is convenient if all the S3 files you want to; access are hosted by a single provider. The second one is more; flexible as it allows you to specify which credentials to use; on a per-file basis. See the ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TS3WebFile.cxx:1142,Access,Access,1142,net/net/src/TS3WebFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TS3WebFile.cxx,2,['Access'],['Access']
Security,"*****************************/; /** \class TGButton; \ingroup guiwidgets. A button abstract base class. It defines general button behaviour. */; /** \class TGTextButton; \ingroup guiwidgets. Yield an action as soon as it is clicked. This buttons usually provides fast access to; frequently used or critical commands. It may appear alone or placed in a group. The action it performs can be inscribed with a meaningful tooltip; set by `SetToolTipText(const char* text, Long_t delayms=400). The text button has a label indicating the action to be taken when; the button is pressed. The text can be a hot string (""&Exit"") that; defines the label ""Exit"" and keyboard mnemonics Alt+E for button; selection. A button label can be changed by SetText(new_label). Selecting a text or picture button will generate the event:; - kC_COMMAND, kCM_BUTTON, button id, user data.; */; /** \class TGPictureButton; \ingroup guiwidgets. Yield an action as soon as it is clicked. This buttons usually provides fast access to; frequently used or critical commands. It may appear alone or placed in a group. The action it performs can be inscribed with a meaningful tooltip; set by `SetToolTipText(const char* text, Long_t delayms=400). The text button has a label indicating the action to be taken when; the button is pressed. The text can be a hot string (""&Exit"") that; defines the label ""Exit"" and keyboard mnemonics Alt+E for button; selection. A button label can be changed by SetText(new_label). Selecting a text or picture button will generate the event:; - kC_COMMAND, kCM_BUTTON, button id, user data.; */; /** \class TGCheckButton; \ingroup guiwidgets. Selects different options. Like text buttons, they have text or hot string as a label. Selecting a check button will generate the event:; - kC_COMMAND, kCM_CHECKBUTTON, button id, user data. If a command string has been specified (via SetCommand()) then this; command string will be executed via the interpreter whenever a; button is selected. A command strin",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGButton.cxx:1955,access,access,1955,gui/gui/src/TGButton.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGButton.cxx,1,['access'],['access']
Security,", ""TXmlFile.cxx"" files; // to user project and compile them. TXmlFile class implementation can be taken; // from http://web-docs.gsi.de/~linev/xmlfile.tar.gz; //; // TXMLPlayer class generates one function per class, which called class streamer.; // Name of such function for class TExample will be TExample_streamer.; //; // Following data members for streamed classes are supported:; // - simple data types (int, double, float); // - array of simple types (int[5], double[5][6]); // - dynamic array of simple types (int* with comment field // [fSize]); // - const char*; // - object of any nonROOT class; // - pointer on object; // - array of objects; // - array of pointers on objects; // - stl string; // - stl vector, list, deque, set, multiset, map, multimap; // - allowed arguments for stl containers are: simple data types, string, object, pointer on object; // Any other data member can not be (yet) read from xml file and write to xml file.; //; // If data member of class is private or protected, it can not be accessed via; // member name. Two alternative way is supported. First, if for class member fValue; // exists function GetValue(), it will be used to get value from the class, and if; // exists SetValue(), it will be used to set appropriate data member. Names of setter; // and getter methods can be specified in comments filed like:; //; // int fValue; // *OPTION={GetMethod=""GetV"";SetMethod=""SetV""}; //; // If getter or setter methods does not available, address to data member will be; // calculated as predefined offset to object start address. In that case generated code; // should be used only on the same platform (OS + compiler), where it was generated.; //; // Generated streamers resolve inheritance tree for given class. This allows to have; // array (or vector) of object pointers on some basic class, while objects of derived; // class(es) are used.; //; // To access data from xml files, user should use TXmlFile class, which is different from; // ROOT TXMLFile, bu",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/xml/src/TXMLPlayer.cxx:2610,access,accessed,2610,io/xml/src/TXMLPlayer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/xml/src/TXMLPlayer.cxx,1,['access'],['accessed']
Security,", *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; * \class RooBinSamplingPdf; * The RooBinSamplingPdf is supposed to be used as an adapter between a continuous PDF; * and a binned distribution.; * When RooFit is used to fit binned data, and the PDF is continuous, it takes the probability density; * at the bin centre as a proxy for the probability averaged (integrated) over the entire bin. This is; * correct only if the second derivative of the function vanishes, though. This is shown in the plots; * below.; *; * For PDFs that have larger curvatures, the RooBinSamplingPdf can be used. It integrates the PDF in each; * bin using an adaptive integrator. This usually requires 21 times more function evaluations, but significantly; * reduces biases due to better sampling of the PDF. The integrator can be accessed from the outside; * using integrator(). This can be used to change the integration rules, so less/more function evaluations are; * performed. The target precision of the integrator can be set in the constructor.; *; *; * ### How to use it; * There are two ways to use this class:; * - Manually wrap a PDF:; * ```; * RooBinSamplingPdf binSampler(""<name>"", ""title"", <binned observable of PDF>, <original PDF> [, <precision for integrator>]);; * binSampler.fitTo(data);; * ```; * When a PDF is wrapped with a RooBinSamplingPDF, just use the bin sampling PDF instead of the original one for fits; * or plotting etc.; * \note The binning will be taken from the observable. Make sure that this binning is the same as the one of the dataset that should be fit.; * Use RooRealVar::setBinning() to adapt it.; * - Instruct test statistics to carry out this wrapping automatically:; * ```; * pdf.fitTo(data, IntegrateBins(<precision>));; * ```; * This method is especially useful when used with a simultaneous PDF, ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx:1477,access,accessed,1477,roofit/roofitcore/src/RooBinSamplingPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx,1,['access'],['accessed']
Security,", this data type is **not cross-platform**.; /// - `O` : [the letter `o`, not a zero] a boolean (`bool`); ///; /// Arrays of values are supported with the following syntax:; /// - If leaf name has the form var[nelem], where nelem is alphanumeric, then; /// if nelem is a leaf name, it is used as the variable size of the array,; /// otherwise return 0.; /// The leaf referred to by nelem **MUST** be an int (/I),; /// - If leaf name has the form var[nelem], where nelem is a non-negative integers, then; /// it is used as the fixed size of the array.; /// - If leaf name has the form of a multi dimension array (e.g. var[nelem][nelem2]); /// where nelem and nelem2 are non-negative integers) then; /// it is used as a 2 dimensional array of fixed size.; /// - In case of the truncated floating point types (Float16_t and Double32_t) you can; /// furthermore specify the range in the style [xmin,xmax] or [xmin,xmax,nbits] after; /// the type character. See `TStreamerElement::GetRange()` for further information.; /// - Any of other form is not supported.; ///; /// Note that the TTree will assume that all the item are contiguous in memory.; /// On some platform, this is not always true of the member of a struct or a class,; /// due to padding and alignment. Sorting your data member in order of decreasing; /// sizeof usually leads to their being contiguous in memory.; ///; /// * bufsize is the buffer size in bytes for this branch; /// The default value is 32000 bytes and should be ok for most cases.; /// You can specify a larger value (e.g. 256000) if your Tree is not split; /// and each entry is large (Megabytes); /// A small value for bufsize is optimum if you intend to access; /// the entries in the Tree randomly and your Tree is in split mode.; ///; /// See an example of a Branch definition in the TTree constructor.; ///; /// Note that in case the data type is an object, this branch can contain; /// only this object.; ///; /// Note that this function is invoked by TTree::Branch",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TBranch.cxx:3812,access,access,3812,tree/tree/src/TBranch.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TBranch.cxx,1,['access'],['access']
Security,", use ""+"" in front; /// of the histogram name.; ///; /// A '+' in front of the histogram name is ignored, when the name is followed by; /// binning information as described in the previous paragraph.; /// ~~~ {.cpp}; /// tree.Draw(""sqrt(x)>>+hsqrt"",""y>0""); /// ~~~; /// will not reset `hsqrt`, but will continue filling. This works for 1-D, 2-D; /// and 3-D histograms.; ///; /// ### Accessing collection objects; ///; /// TTree::Draw default's handling of collections is to assume that any; /// request on a collection pertain to it content. For example, if fTracks; /// is a collection of Track objects, the following:; /// ~~~ {.cpp}; /// tree->Draw(""event.fTracks.fPx"");; /// ~~~; /// will plot the value of fPx for each Track objects inside the collection.; /// Also; /// ~~~ {.cpp}; /// tree->Draw(""event.fTracks.size()"");; /// ~~~; /// would plot the result of the member function Track::size() for each; /// Track object inside the collection.; /// To access information about the collection itself, TTree::Draw support; /// the '@' notation. If a variable which points to a collection is prefixed; /// or postfixed with '@', the next part of the expression will pertain to; /// the collection object. For example:; /// ~~~ {.cpp}; /// tree->Draw(""event.@fTracks.size()"");; /// ~~~; /// will plot the size of the collection referred to by `fTracks` (i.e the number; /// of Track objects).; ///; /// ### Drawing 'objects'; ///; /// When a class has a member function named AsDouble or AsString, requesting; /// to directly draw the object will imply a call to one of the 2 functions.; /// If both AsDouble and AsString are present, AsDouble will be used.; /// AsString can return either a char*, a std::string or a TString.s; /// For example, the following; /// ~~~ {.cpp}; /// tree->Draw(""event.myTTimeStamp"");; /// ~~~; /// will draw the same histogram as; /// ~~~ {.cpp}; /// tree->Draw(""event.myTTimeStamp.AsDouble()"");; /// ~~~; /// In addition, when the object is a type TString or std::s",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTree.cxx:13275,access,access,13275,tree/tree/src/TTree.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTree.cxx,1,['access'],['access']
Security,"- TrailingObjects.h - Variable-length classes ------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This header defines support for implementing classes that have; /// some trailing object (or arrays of objects) appended to them. The; /// main purpose is to make it obvious where this idiom is being used,; /// and to make the usage more idiomatic and more difficult to get; /// wrong.; ///; /// The TrailingObject template abstracts away the reinterpret_cast,; /// pointer arithmetic, and size calculations used for the allocation; /// and access of appended arrays of objects, and takes care that they; /// are all allocated at their required alignment. Additionally, it; /// ensures that the base type is final -- deriving from a class that; /// expects data appended immediately after it is typically not safe.; ///; /// Users are expected to derive from this template, and provide; /// numTrailingObjects implementations for each trailing type except; /// the last, e.g. like this sample:; ///; /// \code; /// class VarLengthObj : private TrailingObjects<VarLengthObj, int, double> {; /// friend TrailingObjects;; ///; /// unsigned NumInts, NumDoubles;; /// size_t numTrailingObjects(OverloadToken<int>) const { return NumInts; }; /// };; /// \endcode; ///; /// You can access the appended arrays via 'getTrailingObjects', and; /// determine the size needed for allocation via; /// 'additionalSizeToAlloc' and 'totalSizeToAlloc'.; ///; /// All the methods implemented by this class are intended for use; /// by the implementation of the class, not as part of its interface; /// (thus, private inheritance is suggested).; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TrailingObjects.h:1571,access,access,1571,interpreter/llvm-project/llvm/include/llvm/Support/TrailingObjects.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TrailingObjects.h,1,['access'],['access']
Security,"--------+ | +----------+; | | | | |; this->| | | | |<--sib; +----------+ | +----------+; V; data; ~~~; It is conceptually VERY convenient to think of the data as being the; very first element of the sib node. Any primitive that tells sib to; perform some action on n nodes should include this 'hidden' element.; For InnerNodes, the hidden element has (physical) index 0 in the array,; and in LeafNodes, the hidden element has (virtual) index -1 in the array.; Therefore, there are two 'size' primitives for nodes:; ~~~ {.cpp}; Psize - the physical size: how many elements are contained in the; array in the node.; Vsize - the 'virtual' size; if the node is pointed to by; element 0 of the parent node, then Vsize == Psize;; otherwise the element in the parent item that points to this; node 'belongs' to this node, and Vsize == Psize+1;; ~~~; Parent nodes are always InnerNodes. These are the primitive operations on Nodes:; ~~~ {.cpp}; Append(elt) - adds an element to the end of the array of elements in a; node. It must never be called where appending the element; would fill the node.; Split() - divide a node in two, and create two new nodes.; SplitWith(sib) - create a third node between this node and the sib node,; divvying up the elements of their arrays.; PushLeft(n) - move n elements into the left sibling; PushRight(n) - move n elements into the right sibling; BalanceWithRight() - even up the number of elements in the two nodes.; BalanceWithLeft() - ditto; ~~~; To allow this implementation of btrees to also be an implementation of; sorted arrays/lists, the overhead is included to allow O(log n) access; of elements by their rank (`give me the 5th largest element').; Therefore, each Item keeps track of the number of keys in and below it; in the tree (remember, each item's tree is all keys to the RIGHT of the; item's own key).; ~~~ {.cpp}; [ [ < 0 1 2 3 > 4 < 5 6 7 > 8 < 9 10 11 12 > ] 13 [ < 14 15 16 > 17 < 18 19 20 > ] ]; 4 1 1 1 1 4 1 1 1 5 1 1 1 1 7 3 1 1 1 4 1 1 1; ~~~; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TBtree.cxx:7475,access,access,7475,core/cont/src/TBtree.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TBtree.cxx,1,['access'],['access']
Security,"--------------------------------------------------------------------===//; //; // DependenceAnalysis is an LLVM pass that analyses dependences between memory; // accesses. Currently, it is an (incomplete) implementation of the approach; // described in; //; // Practical Dependence Testing; // Goff, Kennedy, Tseng; // PLDI 1991; //; // There's a single entry point that analyzes the dependence between a pair; // of memory references in a function, returning either NULL, for no dependence,; // or a more-or-less detailed description of the dependence between them.; //; // Currently, the implementation cannot propagate constraints between; // coupled RDIV subscripts and lacks a multi-subscript MIV test.; // Both of these are conservative weaknesses;; // that is, not a source of correctness problems.; //; // Since Clang linearizes some array subscripts, the dependence; // analysis is using SCEV->delinearize to recover the representation of multiple; // subscripts, and thus avoid the more expensive and less precise MIV tests. The; // delinearization is controlled by the flag -da-delinearize.; //; // We should pay some careful attention to the possibility of integer overflow; // in the implementation of the various tests. This could happen with Add,; // Subtract, or Multiply, with both APInt's and SCEV's.; //; // Some non-linear subscript pairs can be handled by the GCD test; // (and perhaps other tests).; // Should explore how often these things occur.; //; // Finally, it seems like certain test cases expose weaknesses in the SCEV; // simplification, especially in the handling of sign and zero extensions.; // It could be useful to spend time exploring these.; //; // Please note that this is work in progress and the interface is subject to; // change.; //; //===----------------------------------------------------------------------===//; // //; // In memory of Ken Kennedy, 1945 - 2007 //; // //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp:1821,expose,expose,1821,interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,1,['expose'],['expose']
Security,"------------------------------------------------===//; //; // This pass abstracted struct/union member accesses in order to support; // compile-once run-everywhere (CO-RE). The CO-RE intends to compile the program; // which can run on different kernels. In particular, if bpf program tries to; // access a particular kernel data structure member, the details of the; // intermediate member access will be remembered so bpf loader can do; // necessary adjustment right before program loading.; //; // For example,; //; // struct s {; // int a;; // int b;; // };; // struct t {; // struct s c;; // int d;; // };; // struct t e;; //; // For the member access e.c.b, the compiler will generate code; // &e + 4; //; // The compile-once run-everywhere instead generates the following code; // r = 4; // &e + r; // The ""4"" in ""r = 4"" can be changed based on a particular kernel version.; // For example, on a particular kernel version, if struct s is changed to; //; // struct s {; // int new_field;; // int a;; // int b;; // }; //; // By repeating the member access on the host, the bpf loader can; // adjust ""r = 4"" as ""r = 8"".; //; // This feature relies on the following three intrinsic calls:; // addr = preserve_array_access_index(base, dimension, index); // addr = preserve_union_access_index(base, di_index); // !llvm.preserve.access.index <union_ditype>; // addr = preserve_struct_access_index(base, gep_index, di_index); // !llvm.preserve.access.index <struct_ditype>; //; // Bitfield member access needs special attention. User cannot take the; // address of a bitfield acceess. To facilitate kernel verifier; // for easy bitfield code optimization, a new clang intrinsic is introduced:; // uint32_t __builtin_preserve_field_info(member_access, info_kind); // In IR, a chain with two (or more) intrinsic calls will be generated:; // ...; // addr = preserve_struct_access_index(base, 1, 1) !struct s; // uint32_t result = bpf_preserve_field_info(addr, info_kind); //; // Suppose the info_kind is FI",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/BPF/BPFAbstractMemberAccess.cpp:1374,access,access,1374,interpreter/llvm-project/llvm/lib/Target/BPF/BPFAbstractMemberAccess.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/BPF/BPFAbstractMemberAccess.cpp,1,['access'],['access']
Security,"--------------------------------------------===//; //; // This file implements the newly proposed standard C++ interfaces for hashing; // arbitrary data and building hash functions for user-defined types. This; // interface was originally proposed in N3333[1] and is currently under review; // for inclusion in a future TR and/or standard.; //; // The primary interfaces provide are comprised of one type and three functions:; //; // -- 'hash_code' class is an opaque type representing the hash code for some; // data. It is the intended product of hashing, and can be used to implement; // hash tables, checksumming, and other common uses of hashes. It is not an; // integer type (although it can be converted to one) because it is risky; // to assume much about the internals of a hash_code. In particular, each; // execution of the program has a high probability of producing a different; // hash_code for a given input. Thus their values are not stable to save or; // persist, and should only be used during the execution for the; // construction of hashing datastructures.; //; // -- 'hash_value' is a function designed to be overloaded for each; // user-defined type which wishes to be used within a hashing context. It; // should be overloaded within the user-defined type's namespace and found; // via ADL. Overloads for primitive types are provided by this library.; //; // -- 'hash_combine' and 'hash_combine_range' are functions designed to aid; // programmers in easily and intuitively combining a set of data into; // a single hash_code for their object. They should only logically be used; // within the implementation of a 'hash_value' routine or similar context.; //; // Note that 'hash_combine_range' contains very special logic for hashing; // a contiguous array of integers or pointers. This logic is *extremely* fast,; // on a modern Intel ""Gainestown"" Xeon (Nehalem uarch) @2.2 GHz, these were; // benchmarked at over 6.5 GiB/s for large keys, and <20 cycles/hash for keys; // un",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h:1379,hash,hashing,1379,interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,1,['hash'],['hashing']
Security,"----------===//; // APInt Class; //===----------------------------------------------------------------------===//; /// Class for arbitrary precision integers.; ///; /// APInt is a functional replacement for common case unsigned integer type like; /// ""unsigned"", ""unsigned long"" or ""uint64_t"", but also allows non-byte-width; /// integer sizes and large integer value types such as 3-bits, 15-bits, or more; /// than 64-bits of precision. APInt provides a variety of arithmetic operators; /// and methods to manipulate integer values of any bit-width. It supports both; /// the typical integer arithmetic and comparison operations as well as bitwise; /// manipulation.; ///; /// The class has several invariants worth noting:; /// * All bit, byte, and word positions are zero-based.; /// * Once the bit width is set, it doesn't change except by the Truncate,; /// SignExtend, or ZeroExtend operations.; /// * All binary operators must be on APInt instances of the same bit width.; /// Attempting to use these operators on instances with different bit; /// widths will yield an assertion.; /// * The value is stored canonically as an unsigned value. For operations; /// where it makes a difference, there are both signed and unsigned variants; /// of the operation. For example, sdiv and udiv. However, because the bit; /// widths must be the same, operations such as Mul and Add produce the same; /// results regardless of whether the values are interpreted as signed or; /// not.; /// * In general, the class tries to follow the style of computation that LLVM; /// uses in its IR. This simplifies its use for LLVM.; /// * APInt supports zero-bit-width values, but operations that require bits; /// are not defined on it (e.g. you cannot ask for the sign of a zero-bit; /// integer). This means that operations like zero extension and logical; /// shifts are defined, but sign extension and ashr is not. Zero bit values; /// compare and hash equal to themselves, and countLeadingZeros returns 0.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:2002,hash,hash,2002,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,1,['hash'],['hash']
Security,"--Example:; You want to fit ""sin(x)|cos(2*x)"" very fast. Calculate; sin(x) and cos(2*x) beforehand and store them in array *data.; Then:; TLinearFitter *lf=new TLinearFitter(2, ""hyp2"");; lf->AssignData(npoint, 2, data, y);. #### 2.3 Resetting the formula. ##### 2.3.1 If the input data is stored (or added via AssignData() function),; the fitting formula can be reset without re-adding all the points.; --Example:; ~~~~; TLinearFitter *lf=new TLinearFitter(""1++x++x*x"");; lf->AssignData(n, 1, x, y, e);; lf->Eval(); //looking at the parameter significance, you see,; // that maybe the fit will improve, if you take out; // the constant term; lf->SetFormula(""x++x*x"");; lf->Eval();; ...; ~~~~. ##### 2.3.2 If the input data is not stored, the fitter will have to be; cleared and the data will have to be added again to try a; different formula. ### 3.Accessing the fit results. #### 3.1 There are methods in the fitter to access all relevant information:; --GetParameters, GetCovarianceMatrix, etc; --the t-values of parameters and their significance can be reached by; GetParTValue() and GetParSignificance() methods. #### 3.2 If fitting with a pre-defined TF123, the fit results are also; written into this function. ### 4.Robust fitting - Least Trimmed Squares regression (LTS); Outliers are atypical(by definition), infrequant observations; data points; which do not appear to follow the characteristic distribution of the rest; of the data. These may reflect genuine properties of the underlying; phenomenon(variable), or be due to measurement errors or anomalies which; shouldn't be modelled. (StatSoft electronic textbook). Even a single gross outlier can greatly influence the results of least-; squares fitting procedure, and in this case use of robust(resistant) methods; is recommended. The method implemented here is based on the article and algorithm:; ""Computing LTS Regression for Large Data Sets"" by; P.J.Rousseeuw and Katrien Van Driessen; The idea of the method is to find the fitting",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearFitter.cxx:5189,access,access,5189,math/minuit/src/TLinearFitter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearFitter.cxx,1,['access'],['access']
Security,". This parameter is accepted irrespectively of the; backend used:. ~~~{.py}; import ROOT. # Define correct imports and access the distributed RDataFrame appropriate for the; # backend used in the analysis; RDataFrame = ROOT.RDF.Experimental.Distributed.[BACKEND].RDataFrame. if __name__ == ""__main__"":; # The `npartitions` optional argument tells the RDataFrame how many tasks are desired; df = RDataFrame(""mytree"",""myfile.root"", npartitions=NPARTITIONS); # Proceed as usual; df.Define(""x"",""someoperation"").Histo1D((""name"", ""title"", 10, 0, 10), ""x""); ~~~. Note that when processing a TTree or TChain dataset, the `npartitions` value should not exceed the number of clusters in; the dataset. The number of clusters in a TTree can be retrieved by typing `rootls -lt myfile.root` at a command line. ### Distributed Snapshot. The Snapshot operation behaves slightly differently when executed distributedly. First off, it requires the path; supplied to the Snapshot call to be accessible from any worker of the cluster and from the client machine (in general; it should be provided as an absolute path). Another important difference is that `n` separate files will be produced,; where `n` is the number of dataset partitions. As with local RDataFrame, the result of a Snapshot on a distributed; RDataFrame is another distributed RDataFrame on which we can define a new computation graph and run more distributed; computations. ### Distributed RunGraphs. Submitting multiple distributed RDataFrame executions is supported through the RunGraphs function. Similarly to its; local counterpart, the function expects an iterable of objects representing an RDataFrame action. Each action will be; triggered concurrently to send multiple computation graphs to a distributed cluster at the same time:. ~~~{.py}; import ROOT; RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame; RunGraphs = ROOT.RDF.Experimental.Distributed.RunGraphs. # Create 3 different dataframes and book an histogram on each one; h",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx:42529,access,accessible,42529,tree/dataframe/src/RDataFrame.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx,1,['access'],['accessible']
Security,".0.4 10004; * 1.0.4a-f 10005; * 1.0.5 (+ 2 patches) 10005; * 1.0.5a-d 10006; * 1.0.5e-r 10100 (not source compatible); * 1.0.5s-v 10006 (not binary compatible); * 1.0.6 (+ 3 patches) 10006 (still binary incompatible); * 1.0.6d-f 10007 (still binary incompatible); * 1.0.6g 10007; * 1.0.6h 10007 10.6h (testing xy.z so-numbering); * 1.0.6i 10007 10.6i; * 1.0.6j 10007 2.1.0.6j (incompatible with 1.0.0); * 1.0.7beta11-14 DLLNUM 10007 2.1.0.7beta11-14 (binary compatible); * 1.0.7beta15-18 1 10007 2.1.0.7beta15-18 (binary compatible); * 1.0.7rc1-2 1 10007 2.1.0.7rc1-2 (binary compatible); * 1.0.7 1 10007 (still compatible); * ...; * 1.0.69 10 10069 10.so.0.69[.0]; * ...; * 1.2.59 13 10259 12.so.0.59[.0]; * ...; * 1.4.20 14 10420 14.so.0.20[.0]; * ...; * 1.5.30 15 10530 15.so.15.30[.0]; * ...; * 1.6.40 16 10640 16.so.16.40[.0]; *; * Henceforth the source version will match the shared-library major and; * minor numbers; the shared-library major version number will be used for; * changes in backward compatibility, as it is intended.; * The PNG_LIBPNG_VER macro, which is not used within libpng but is; * available for applications, is an unsigned integer of the form XYYZZ; * corresponding to the source version X.Y.Z (leading zeros in Y and Z).; * Beta versions were given the previous public release number plus a; * letter, until version 1.0.6j; from then on they were given the upcoming; * public release number plus ""betaNN"" or ""rcNN"".; *; * Binary incompatibility exists only when applications make direct access; * to the info_ptr or png_ptr members through png.h, and the compiled; * application is loaded with a different version of the library.; *; * DLLNUM will change each time there are forward or backward changes; * in binary compatibility (e.g., when a new feature is added).; *; * See libpng.txt or libpng.3 for more information. The PNG specification; * is available as a W3C Recommendation and as an ISO/IEC Standard; see; * <https://www.w3.org/TR/2003/REC-PNG-20031110/>; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:10021,access,access,10021,graf2d/asimage/src/libAfterImage/libpng/png.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h,1,['access'],['access']
Security,".; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file implements the bottleneck analysis view.; ///; /// This view internally observes backend pressure increase events in order to; /// identify problematic data dependencies and processor resource interferences.; ///; /// Example of bottleneck analysis report for a dot-product on X86 btver2:; ///; /// Cycles with backend pressure increase [ 40.76% ]; /// Throughput Bottlenecks: ; /// Resource Pressure [ 39.34% ]; /// - JFPA [ 39.34% ]; /// - JFPU0 [ 39.34% ]; /// Data Dependencies: [ 1.42% ]; /// - Register Dependencies [ 1.42% ]; /// - Memory Dependencies [ 0.00% ]; ///; /// According to the example, backend pressure increased during the 40.76% of; /// the simulated cycles. In particular, the major cause of backend pressure; /// increases was the contention on floating point adder JFPA accessible from; /// pipeline resource JFPU0.; ///; /// At the end of each cycle, if pressure on the simulated out-of-order buffers; /// has increased, a backend pressure event is reported.; /// In particular, this occurs when there is a delta between the number of uOps; /// dispatched and the number of uOps issued to the underlying pipelines.; ///; /// The bottleneck analysis view is also responsible for identifying and; /// printing the most ""critical"" sequence of dependent instructions according to; /// the simulated run.; ///; /// Below is the critical sequence computed for the dot-product example on; /// btver2:; ///; /// Instruction Dependency Information; /// +----< 2. vhaddps %xmm3, %xmm3, %xmm4; /// |; /// | < loop carried > ; /// |; /// | 0. vmulps	 %xmm0, %xmm0, %xmm2; /// +----> 1. vhaddps %xmm2, %xmm2, %xmm3 ## RESOURCE interference: JFPA [ probability: 73% ]; /// +----> 2. vhaddps %xmm3, %xmm3, %xmm4 ## REGISTER dependency: %xmm3; /// |;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h:1200,access,accessible,1200,interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h,1,['access'],['accessible']
Security,"/ The latter can perform more complex address checks to figure out whether; /// it's safe to touch the shadow memory.; /// Like with atomic operations, we call __msan_instrument_asm_store() before; /// the assembly call, so that changes to the shadow memory will be seen by; /// other threads together with main memory initialization.; ///; /// KernelMemorySanitizer (KMSAN) implementation.; ///; /// The major differences between KMSAN and MSan instrumentation are:; /// - KMSAN always tracks the origins and implies msan-keep-going=true;; /// - KMSAN allocates shadow and origin memory for each page separately, so; /// there are no explicit accesses to shadow and origin in the; /// instrumentation.; /// Shadow and origin values for a particular X-byte memory location; /// (X=1,2,4,8) are accessed through pointers obtained via the; /// __msan_metadata_ptr_for_load_X(ptr); /// __msan_metadata_ptr_for_store_X(ptr); /// functions. The corresponding functions check that the X-byte accesses; /// are possible and returns the pointers to shadow and origin memory.; /// Arbitrary sized accesses are handled with:; /// __msan_metadata_ptr_for_load_n(ptr, size); /// __msan_metadata_ptr_for_store_n(ptr, size);; /// Note that the sanitizer code has to deal with how shadow/origin pairs; /// returned by the these functions are represented in different ABIs. In; /// the X86_64 ABI they are returned in RDX:RAX, and in the SystemZ ABI they; /// are written to memory pointed to by a hidden parameter.; /// - TLS variables are stored in a single per-task struct. A call to a; /// function __msan_get_context_state() returning a pointer to that struct; /// is inserted into every instrumented function before the entry block;; /// - __msan_warning() takes a 32-bit origin parameter;; /// - local variables are poisoned with __msan_poison_alloca() upon function; /// entry and unpoisoned with __msan_unpoison_alloca() before leaving the; /// function;; /// - the pass doesn't declare any global variables ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/MemorySanitizer.cpp:6651,access,accesses,6651,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/MemorySanitizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/MemorySanitizer.cpp,1,['access'],['accesses']
Security,"/ section contains all of the 32-bit hash values in contiguous memory, and the; /// offsets contain the offset into the data area for the particular hash.; ///; /// For a lookup example, we could hash a function name and take it modulo the; /// number of buckets giving us our bucket. From there we take the bucket value; /// as an index into the hashes table and look at each successive hash as long; /// as the hash value is still the same modulo result (bucket value) as earlier.; /// If we have a match we look at that same entry in the offsets table and grab; /// the offset in the data for our final match.; ///; /// The DWARF v5 accelerator table consists of zero or more name indices that; /// are output into an on-disk format that looks like this:; ///; /// .------------------.; /// | HEADER |; /// |------------------|; /// | CU LIST |; /// |------------------|; /// | LOCAL TU LIST |; /// |------------------|; /// | FOREIGN TU LIST |; /// |------------------|; /// | HASH TABLE |; /// |------------------|; /// | NAME TABLE |; /// |------------------|; /// | ABBREV TABLE |; /// |------------------|; /// | ENTRY POOL |; /// `------------------'; ///; /// For the full documentation please refer to the DWARF 5 standard.; ///; ///; /// This file defines the class template AccelTable, which is represents an; /// abstract view of an Accelerator table, without any notion of an on-disk; /// layout. This class is parameterized by an entry type, which should derive; /// from AccelTableData. This is the type of individual entries in the table,; /// and it should store the data necessary to emit them. AppleAccelTableData is; /// the base class for Apple Accelerator Table entries, which have a uniform; /// structure based on a sequence of Atoms. There are different sub-classes; /// derived from AppleAccelTable, which differ in the set of Atoms and how they; /// obtain their values.; ///; /// An Apple Accelerator Table can be serialized by calling emitAppleAccelTable; /// function.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/AccelTable.h:1893,HASH,HASH,1893,interpreter/llvm-project/llvm/include/llvm/CodeGen/AccelTable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/AccelTable.h,1,['HASH'],['HASH']
Security,/* !Z_SOLO */; /* checksum functions */; /*; These functions are not related to compression but are exported; anyway because they might be useful in applications using the compression; library.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:18,checksum,checksum,18,builtins/zlib/zlib.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h,1,['checksum'],['checksum']
Security,"/* ""x"" for exposed */; /* x.have: number of bytes available at x.next */; /* x.next: next output data to deliver or write */; /* x.pos: current position in uncompressed data */; /* used for both reading and writing */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzguts.h:11,expose,exposed,11,builtins/zlib/gzguts.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzguts.h,1,['expose'],['exposed']
Security,/* #define DEBUG_HIT_RATE Debug number of misses per hash Insert/Exists. */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gif_hash.c:53,hash,hash,53,graf2d/asimage/src/libAfterImage/libungif/gif_hash.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gif_hash.c,1,['hash'],['hash']
Security,"/* $TOG: imakemdep.h /main/101 1997/06/06 09:13:20 bill $ */; /*. Copyright (c) 1993, 1994 X Consortium. Permission is hereby granted, free of charge, to any person obtaining a copy; of this software and associated documentation files (the ""Software""), to deal; in the Software without restriction, including without limitation the rights; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell; copies of the Software, and to permit persons to whom the Software is; furnished to do so, subject to the following conditions:. The above copyright notice and this permission notice shall be included in; all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE; X CONSORTIUM BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN; AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN; CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Except as contained in this notice, the name of the X Consortium shall not be; used in advertising or otherwise to promote the sale, use or other dealings; in this Software without prior written authorization from the X Consortium. */; /* $XFree86: xc/config/imake/imakemdep.h,v 3.24.2.3 1997/07/27 02:41:05 dawes Exp $ */; /*; * This file contains machine-dependent constants for the imake utility.; * When porting imake, read each of the steps below and add in any necessary; * definitions. In general you should *not* edit ccimake.c or imake.c!; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/misc/rmkdepend/imakemdep.h:1317,authoriz,authorization,1317,misc/rmkdepend/imakemdep.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rmkdepend/imakemdep.h,1,['authoriz'],['authorization']
Security,"/* $XConsortium: cppsetup.c /main/17 1996/09/28 16:15:03 rws $ */; /*. Copyright (c) 1993, 1994 X Consortium. Permission is hereby granted, free of charge, to any person obtaining a copy; of this software and associated documentation files (the ""Software""), to deal; in the Software without restriction, including without limitation the rights; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell; copies of the Software, and to permit persons to whom the Software is; furnished to do so, subject to the following conditions:. The above copyright notice and this permission notice shall be included in; all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE; X CONSORTIUM BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN; AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN; CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Except as contained in this notice, the name of the X Consortium shall not be; used in advertising or otherwise to promote the sale, use or other dealings; in this Software without prior written authorization from the X Consortium. */; /* $XFree86: xc/config/makedepend/cppsetup.c,v 3.2 1996/12/30 13:57:53 dawes Exp $ */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/misc/rmkdepend/cppsetup.c:1322,authoriz,authorization,1322,misc/rmkdepend/cppsetup.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rmkdepend/cppsetup.c,1,['authoriz'],['authorization']
Security,"/* $XConsortium: def.h /main/30 1996/12/04 10:11:12 swick $ */; /* $XFree86: xc/config/makedepend/def.h,v 3.3 1997/01/12 10:38:17 dawes Exp $ */; /*. Copyright (c) 1993, 1994 X Consortium. Permission is hereby granted, free of charge, to any person obtaining a copy; of this software and associated documentation files (the ""Software""), to deal; in the Software without restriction, including without limitation the rights; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell; copies of the Software, and to permit persons to whom the Software is; furnished to do so, subject to the following conditions:. The above copyright notice and this permission notice shall be included in; all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE; X CONSORTIUM BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN; AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN; CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Except as contained in this notice, the name of the X Consortium shall not be; used in advertising or otherwise to promote the sale, use or other dealings; in this Software without prior written authorization from the X Consortium. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/misc/rmkdepend/def.h:1401,authoriz,authorization,1401,misc/rmkdepend/def.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rmkdepend/def.h,1,['authoriz'],['authorization']
Security,"/* $XConsortium: main.c /main/84 1996/12/04 10:11:23 swick $ */; /* $XFree86: xc/config/makedepend/main.c,v 3.11.2.1 1997/05/11 05:04:07 dawes Exp $ */; /*. Copyright (c) 1993, 1994 X Consortium. Permission is hereby granted, free of charge, to any person obtaining a copy; of this software and associated documentation files (the ""Software""), to deal; in the Software without restriction, including without limitation the rights; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell; copies of the Software, and to permit persons to whom the Software is; furnished to do so, subject to the following conditions:. The above copyright notice and this permission notice shall be included in; all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE; X CONSORTIUM BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN; AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN; CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Except as contained in this notice, the name of the X Consortium shall not be; used in advertising or otherwise to promote the sale, use or other dealings; in this Software without prior written authorization from the X Consortium. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/misc/rmkdepend/main.c:1408,authoriz,authorization,1408,misc/rmkdepend/main.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rmkdepend/main.c,1,['authoriz'],['authorization']
Security,"/* $XConsortium: parse.c /main/33 1996/12/04 10:11:28 swick $ */; /*. Copyright (c) 1993, 1994 X Consortium. Permission is hereby granted, free of charge, to any person obtaining a copy; of this software and associated documentation files (the ""Software""), to deal; in the Software without restriction, including without limitation the rights; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell; copies of the Software, and to permit persons to whom the Software is; furnished to do so, subject to the following conditions:. The above copyright notice and this permission notice shall be included in; all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE; X CONSORTIUM BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN; AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN; CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Except as contained in this notice, the name of the X Consortium shall not be; used in advertising or otherwise to promote the sale, use or other dealings; in this Software without prior written authorization from the X Consortium. */; /* $XFree86: xc/config/makedepend/parse.c,v 1.3 1997/01/12 10:39:45 dawes Exp $ */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/misc/rmkdepend/parse.c:1321,authoriz,authorization,1321,misc/rmkdepend/parse.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rmkdepend/parse.c,1,['authoriz'],['authorization']
Security,"/* $XConsortium: pr.c /main/20 1996/12/04 10:11:41 swick $ */; /*. Copyright (c) 1993, 1994 X Consortium. Permission is hereby granted, free of charge, to any person obtaining a copy; of this software and associated documentation files (the ""Software""), to deal; in the Software without restriction, including without limitation the rights; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell; copies of the Software, and to permit persons to whom the Software is; furnished to do so, subject to the following conditions:. The above copyright notice and this permission notice shall be included in; all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE; X CONSORTIUM BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN; AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN; CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Except as contained in this notice, the name of the X Consortium shall not be; used in advertising or otherwise to promote the sale, use or other dealings; in this Software without prior written authorization from the X Consortium. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/misc/rmkdepend/pr.c:1318,authoriz,authorization,1318,misc/rmkdepend/pr.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rmkdepend/pr.c,1,['authoriz'],['authorization']
Security,"/* $XFree86: xc/include/extensions/shape.h,v 1.3 2001/12/14 19:53:29 dawes Exp $ */; /************************************************************. Copyright 1989, 1998 The Open Group. Permission to use, copy, modify, distribute, and sell this software and its; documentation for any purpose is hereby granted without fee, provided that; the above copyright notice appear in all copies and that both that; copyright notice and this permission notice appear in supporting; documentation. The above copyright notice and this permission notice shall be included in; all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE; OPEN GROUP BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN; AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN; CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Except as contained in this notice, the name of The Open Group shall not be; used in advertising or otherwise to promote the sale, use or other dealings; in this Software without prior written authorization from The Open Group. ********************************************************/; /* $Xorg: shape.h,v 1.4 2001/02/09 02:03:24 xorgcvs Exp $ */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/x11/inc/X11/extensions/shape.h:1256,authoriz,authorization,1256,graf2d/x11/inc/X11/extensions/shape.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/x11/inc/X11/extensions/shape.h,1,['authoriz'],['authorization']
Security,"/* 'adler' is the Adler32 checksum of the uncompressed profile data. It may; * be zero to indicate that it is not available. It is used, if provided,; * as a fast check on the profile when checking to see if it is sRGB.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:26,checksum,checksum,26,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,1,['checksum'],['checksum']
Security,/* *** Memory access *** */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/xxhash/xxhash.h:14,access,access,14,builtins/xxhash/xxhash.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/xxhash/xxhash.h,1,['access'],['access']
Security,"/* ****************************************************************************; * This section contains declarations which are not guaranteed to remain stable.; * They may change in future versions, becoming incompatible with a different; * version of the library.; * These declarations should only be used with static linking.; * Never use them in association with dynamic linking!; ***************************************************************************** */; /*; * These definitions are only present to allow static allocation; * of XXH states, on stack or in a struct, for example.; * Never **ever** access their members directly.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/xxhash/xxhash.h:609,access,access,609,builtins/xxhash/xxhash.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/xxhash/xxhash.h,1,['access'],['access']
Security,/* *********************************************************************; * XXH3; * New generation hash designed for speed on small keys and vectorization; ************************************************************************ */; /* === Compiler specifics === */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/xxhash/xxhash.h:99,hash,hash,99,builtins/xxhash/xxhash.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/xxhash/xxhash.h,1,['hash'],['hash']
Security,/* *******************************************************************; * 32-bit hash functions; *********************************************************************/,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/xxhash/xxhash.h:81,hash,hash,81,builtins/xxhash/xxhash.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/xxhash/xxhash.h,1,['hash'],['hash']
Security,/* *******************************************************************; * 64-bit hash functions; *********************************************************************/; /******* Memory access *******/,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/xxhash/xxhash.h:81,hash,hash,81,builtins/xxhash/xxhash.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/xxhash/xxhash.h,2,"['access', 'hash']","['access', 'hash']"
Security,"/* ****************************************; * HUF detailed API; * ****************************************/; /*! HUF_compress() does the following:; * 1. count symbol occurrence from source[] into table count[] using FSE_count() (exposed within ""fse.h""); * 2. (optional) refine tableLog using HUF_optimalTableLog(); * 3. build Huffman table from count using HUF_buildCTable(); * 4. save Huffman table to memory buffer using HUF_writeCTable(); * 5. encode the data stream using HUF_compress4X_usingCTable(); *; * The following API allows targeting specific sub-functions for advanced tasks.; * For example, it's possible to compress several blocks using the same 'CTable',; * or to save and regenerate 'CTable' using external methods.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/huf.h:231,expose,exposed,231,builtins/zstd/common/huf.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/huf.h,1,['expose'],['exposed']
Security,"/* *************************************; * Tuning parameters; ***************************************/; /*!; * XXH_FORCE_MEMORY_ACCESS:; * By default, access to unaligned memory is controlled by `memcpy()`, which is; * safe and portable.; *; * Unfortunately, on some target/compiler combinations, the generated assembly; * is sub-optimal.; *; * The below switch allow selection of a different access method; * in the search for improved performance.; * Method 0 (default):; * Use `memcpy()`. Safe and portable. Default.; * Method 1:; * `__attribute__((packed))` statement. It depends on compiler extensions; * and is therefore not portable.; * This method is safe if your compiler supports it, and *generally* as; * fast or faster than `memcpy`.; * Method 2:; * Direct access via cast. This method doesn't depend on the compiler but; * violates the C standard.; * It can generate buggy code on targets which do not support unaligned; * memory accesses.; * But in some circumstances, it's the only known way to get the most; * performance (example: GCC + ARMv6); * Method 3:; * Byteshift. This can generate the best code on old compilers which don't; * inline small `memcpy()` calls, and it might also be faster on big-endian; * systems which lack a native byteswap instruction.; * See https://stackoverflow.com/a/32095106/646947 for details.; * Prefer these methods in priority order (0 > 1 > 2 > 3); */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/xxhash/xxhash.h:152,access,access,152,builtins/xxhash/xxhash.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/xxhash/xxhash.h,4,['access'],"['access', 'accesses']"
Security,/* *********************************; * Hash Chain; ***********************************/,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_lazy.c:40,Hash,Hash,40,builtins/zstd/compress/zstd_lazy.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_lazy.c,1,['Hash'],['Hash']
Security,/* +16 for overflow security */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/zdict.c:20,secur,security,20,builtins/zstd/dictBuilder/zdict.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/zdict.c,1,['secur'],['security']
Security,"/* -*- C++ -*-; * This code is derived from (original license follows):; *; * This is an OpenSSL-compatible implementation of the RSA Data Security, Inc.; * MD5 Message-Digest Algorithm (RFC 1321).; *; * Homepage:; * http://openwall.info/wiki/people/solar/software/public-domain-source-code/md5; *; * Author:; * Alexander Peslyak, better known as Solar Designer <solar at openwall.com>; *; * This software was written by Alexander Peslyak in 2001. No copyright is; * claimed, and the software is hereby placed in the public domain.; * In case this attempt to disclaim copyright and place the software in the; * public domain is deemed null and void, then the software is; * Copyright (c) 2001 Alexander Peslyak and it is hereby released to the; * general public under the following terms:; *; * Redistribution and use in source and binary forms, with or without; * modification, are permitted.; *; * There's ABSOLUTELY NO WARRANTY, express or implied.; *; * See md5.c for more information.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MD5.h:139,Secur,Security,139,interpreter/llvm-project/llvm/include/llvm/Support/MD5.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MD5.h,1,['Secur'],['Security']
Security,"/* -*- coding: utf-8 -*-; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; */; /**; * This file implements a shared library. This library can be pre-loaded by; * the dynamic linker of the Operating System (OS). It implements a few function; * related to process creation. By pre-load this library the executed process; * uses these functions instead of those from the standard library.; *; * The idea here is to inject a logic before call the real methods. The logic is; * to dump the call into a file. To call the real method this library is doing; * the job of the dynamic linker.; *; * The only input for the log writing is about the destination directory.; * This is passed as environment variable.; */; // NOLINTNEXTLINE",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libear/ear.c:567,inject,inject,567,interpreter/llvm-project/clang/tools/scan-build-py/lib/libear/ear.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libear/ear.c,1,['inject'],['inject']
Security,/* 1: each block followed by a checksum of block's compressed data; 0: disabled (default) */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/lz4/lz4frame.h:31,checksum,checksum,31,builtins/lz4/lz4frame.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/lz4/lz4frame.h,1,['checksum'],['checksum']
Security,/* 1: frame terminated with 32-bit checksum of decompressed data; 0: disabled (default) */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/lz4/lz4frame.h:35,checksum,checksum,35,builtins/lz4/lz4frame.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/lz4/lz4frame.h,1,['checksum'],['checksum']
Security,/* 31 bit hash function */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/glib/gstring.c:10,hash,hash,10,graf2d/win32gdk/gdk/src/glib/gstring.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/glib/gstring.c,2,['hash'],['hash']
Security,/* 32-bits hash */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:11,hash,hash,11,builtins/zstd/compress/zstd_compress.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c,1,['hash'],['hash']
Security,/* 6.2.2. Check if put authorization for static files is; 		 * available.; 		 */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c:23,authoriz,authorization,23,net/http/civetweb/civetweb.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c,1,['authoriz'],['authorization']
Security,"/* 6.3. This is either a OPTIONS, GET, HEAD or POST request,; 		 * or it is a PUT or DELETE request to a resource that does not; 		 * correspond to a file. Check authorization. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c:162,authoriz,authorization,162,net/http/civetweb/civetweb.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c,1,['authoriz'],['authorization']
Security,/* =========== XSStepButton ============== */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSStepButton.h:15,XSS,XSStepButton,15,test/periodic/XSStepButton.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSStepButton.h,1,['XSS'],['XSStepButton']
Security,"/* ==========================================; * XXH3 128 bits (a.k.a XXH128); * ==========================================; * XXH3's 128-bit variant has better mixing and strength than the 64-bit variant,; * even without counting the significantly larger output size.; *; * For example, extra steps are taken to avoid the seed-dependent collisions; * in 17-240 byte inputs (See XXH3_mix16B and XXH128_mix32B).; *; * This strength naturally comes at the cost of some speed, especially on short; * lengths. Note that longer hashes are about as fast as the 64-bit version; * due to it using only a slight modification of the 64-bit loop.; *; * XXH128 is also more oriented towards 64-bit machines. It is still extremely; * fast for a _128-bit_ hash on 32-bit (it usually clears XXH64).; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/xxhash/xxhash.h:523,hash,hashes,523,builtins/xxhash/xxhash.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/xxhash/xxhash.h,2,['hash'],"['hash', 'hashes']"
Security,"/* ========================================================; * === Private interface, for use by ZSTD_compress.c ===; * === Not exposed in libzstd. Never invoke directly ===; * ======================================================== */; /* === Memory management === */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.h:128,expose,exposed,128,builtins/zstd/compress/zstdmt_compress.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.h,1,['expose'],['exposed']
Security,"/* ===========================================================================; * For Z_HUFFMAN_ONLY, do not look for matches. Do not maintain a hash table.; * (It will be regenerated if this run of deflate switches away from Huffman.); */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate.c:145,hash,hash,145,builtins/zlib/deflate.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate.c,2,['hash'],['hash']
Security,"/* ===========================================================================; * For Z_RLE, simply look for runs of bytes, generate matches only of distance; * one. Do not maintain a hash table. (It will be regenerated if this run of; * deflate switches away from Z_RLE.); */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c:184,hash,hash,184,builtins/zlib/deflate_cf.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c,2,['hash'],['hash']
Security,/* ===========================================================================; * Free the window and hash table; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/zip/src/ZDeflate.c:102,hash,hash,102,core/zip/src/ZDeflate.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/zip/src/ZDeflate.c,1,['hash'],['hash']
Security,/* ===========================================================================; * Initialize the hash table (avoiding 64K overflow for 16 bit systems).; * prev[] will be initialized on the fly.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate.c:97,hash,hash,97,builtins/zlib/deflate.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate.c,2,['hash'],['hash']
Security,/* ===========================================================================; * Initialize the hash table prev[] will be initialized on the fly.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c:97,hash,hash,97,builtins/zlib/deflate_cf.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c,1,['hash'],['hash']
Security,/* ===========================================================================; * Insert string s in the dictionary and set match_head to the previous head; * of the hash chain (the most recent string with same hash key). Return; * the previous length of the hash chain.; * IN assertion: all calls to to INSERT_STRING are made with consecutive; * input characters and the first MIN_MATCH bytes of s are valid; * (except for the last MIN_MATCH-1 bytes of the input file).; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/zip/src/ZDeflate.c:166,hash,hash,166,core/zip/src/ZDeflate.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/zip/src/ZDeflate.c,3,['hash'],['hash']
Security,/* ===========================================================================; * Insert string str in the dictionary and return the previous head; * of the hash chain (the most recent string with same hash key).; * IN assertion: ACTUAL_MIN_MATCH bytes of str are valid; * (except for the last ACTUAL_MIN_MATCH-1 bytes of the input file).; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c:157,hash,hash,157,builtins/zlib/deflate_cf.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c,2,['hash'],['hash']
Security,"/* ===========================================================================; * Insert string str in the dictionary and set match_head to the previous head; * of the hash chain (the most recent string with same hash key). Return; * the previous length of the hash chain.; * If this file is compiled with -DFASTEST, the compression level is forced; * to 1, and no hash chains are maintained.; * IN assertion: all calls to to INSERT_STRING are made with consecutive; * input characters and the first MIN_MATCH bytes of str are valid; * (except for the last MIN_MATCH-1 bytes of the input file).; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate.c:168,hash,hash,168,builtins/zlib/deflate.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate.c,8,['hash'],['hash']
Security,"/* ===========================================================================; * Set match_start to the longest match starting at the given string and; * return its length. Matches shorter or equal to prev_length are discarded,; * in which case the result is equal to prev_length and match_start is; * garbage.; * IN assertions: cur_match is the head of the hash chain for the current; * string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1; * OUT assertion: the match length is not greater than s->lookahead.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate.c:359,hash,hash,359,builtins/zlib/deflate.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate.c,2,['hash'],['hash']
Security,"/* ===========================================================================; * Set match_start to the longest match starting at the given string and; * return its length. Matches shorter or equal to prev_length are discarded,; * in which case the result is equal to prev_length and match_start is; * garbage.; * IN assertions: cur_match is the head of the hash chain for the current; * string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/zip/src/ZDeflate.c:359,hash,hash,359,core/zip/src/ZDeflate.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/zip/src/ZDeflate.c,1,['hash'],['hash']
Security,"/* ===========================================================================; * Update a hash value with the given input byte; * IN assertion: all calls to to UPDATE_HASH are made with consecutive; * input characters, so that a running hash key can be computed from the; * previous key instead of complete recalculation each time.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate.c:91,hash,hash,91,builtins/zlib/deflate.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate.c,6,['hash'],['hash']
Security,"/* =============================================================================; TMVA::CvSplitKFolds; ============================================================================= */; ////////////////////////////////////////////////////////////////////////////////; /// \brief Splits a dataset into k folds, ready for use in cross validation.; /// \param[in] numFolds Number of folds to split data into; /// \param[in] stratified If true, use stratified splitting, balancing the; /// number of events across classes and folds. If false,; /// no such balancing is done. For; /// \param[in] splitExpr Expression used to split data into folds. If `""""` a; /// random assignment will be done. Otherwise the; /// expression is fed into a TFormula and evaluated per; /// event. The resulting value is the fold assignment.; /// \param[in] seed Used only when using random splitting (i.e. when; /// `splitExpr` is `""""`). Seed is used to initialise the random; /// number generator when assigning events to folds.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CvSplit.cxx:332,validat,validation,332,tmva/tmva/src/CvSplit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CvSplit.cxx,1,['validat'],['validation']
Security,"/* @(#)root/clib:$Id$ */; /* Author: */; /* Access for application keys in mmap'd malloc managed region.; Copyright 1992 Free Software Foundation, Inc. Contributed by Fred Fish at Cygnus Support. fnf@cygnus.com. This file is part of the GNU C Library. The GNU C Library is free software; you can redistribute it and/or; modify it under the terms of the GNU Library General Public License as; published by the Free Software Foundation; either version 2 of the; License, or (at your option) any later version. The GNU C Library is distributed in the hope that it will be useful,; but WITHOUT ANY WARRANTY; without even the implied warranty of; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU; Library General Public License for more details. You should have received a copy of the GNU Library General Public; License along with the GNU C Library; see the file COPYING.LIB. If; not, write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,; Boston, MA 02111-1307, USA. */; /* This module provides access to some keys that the application can use to; provide persistent access to locations in the mapped memory section.; The intent is that these keys are to be used sparingly as sort of; persistent global variables which the application can use to reinitialize; access to data in the mapped region. For the moment, these keys are simply stored in the malloc descriptor; itself, in an array of fixed length. This should be fixed so that there; can be an unlimited number of keys, possibly using a multilevel access; scheme of some sort. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/clib/src/keys.c:44,Access,Access,44,core/clib/src/keys.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clib/src/keys.c,5,"['Access', 'access']","['Access', 'access']"
Security,"/* @(#)root/clib:$Id$ */; /* Author: */; /* Finish access to a mmap'd malloc managed region.; Copyright 1992 Free Software Foundation, Inc. Contributed by Fred Fish at Cygnus Support. fnf@cygnus.com. This file is part of the GNU C Library. The GNU C Library is free software; you can redistribute it and/or; modify it under the terms of the GNU Library General Public License as; published by the Free Software Foundation; either version 2 of the; License, or (at your option) any later version. The GNU C Library is distributed in the hope that it will be useful,; but WITHOUT ANY WARRANTY; without even the implied warranty of; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU; Library General Public License for more details. You should have received a copy of the GNU Library General Public; License along with the GNU C Library; see the file COPYING.LIB. If; not, write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,; Boston, MA 02111-1307, USA. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/clib/src/detach.c:51,access,access,51,core/clib/src/detach.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clib/src/detach.c,1,['access'],['access']
Security,"/* @(#)root/clib:$Id$ */; /* Author: */; /* Initialization for access to a mmap'd malloc managed region.; Copyright 1992 Free Software Foundation, Inc. Contributed by Fred Fish at Cygnus Support. fnf@cygnus.com. This file is part of the GNU C Library. The GNU C Library is free software; you can redistribute it and/or; modify it under the terms of the GNU Library General Public License as; published by the Free Software Foundation; either version 2 of the; License, or (at your option) any later version. The GNU C Library is distributed in the hope that it will be useful,; but WITHOUT ANY WARRANTY; without even the implied warranty of; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU; Library General Public License for more details. You should have received a copy of the GNU Library General Public; License along with the GNU C Library; see the file COPYING.LIB. If; not, write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,; Boston, MA 02111-1307, USA. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/clib/src/attach.c:63,access,access,63,core/clib/src/attach.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clib/src/attach.c,1,['access'],['access']
Security,"/* @(#)root/multiproc:$Id$ */; // Author: Pere Mato; // Placeholder header file for users accessing TProcPool.h and the class TProcPool",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/multiproc/inc/TProcPool.h:90,access,accessing,90,core/multiproc/inc/TProcPool.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/multiproc/inc/TProcPool.h,1,['access'],['accessing']
Security,/* @@@ FIXME: Remove empty hash tables. */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/glib/grel.c:27,hash,hash,27,graf2d/win32gdk/gdk/src/glib/grel.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/glib/grel.c,1,['hash'],['hash']
Security,/* A 32-bits checksum of content is written at end of frame (default:0) */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:13,checksum,checksum,13,builtins/zstd/zstd.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h,1,['checksum'],['checksum']
Security,/* A 32-bits content checksum will be calculated and written at end of frame (default:0) */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:21,checksum,checksum,21,builtins/zstd/compress/zstd_compress.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c,1,['checksum'],['checksum']
Security,/* A file should be created or overwritten. */; /* Currently CivetWeb does not nead read+write access. */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c:95,access,access,95,net/http/civetweb/civetweb.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c,1,['access'],['access']
Security,/* Access granted */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c:3,Access,Access,3,net/http/civetweb/civetweb.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c,1,['Access'],['Access']
Security,/* Access the part of a virtual block array starting at start_row */; /* and extending for num_rows rows. writable is true if */; /* caller intends to modify the accessed area. */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:3,Access,Access,3,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,2,"['Access', 'access']","['Access', 'accessed']"
Security,/* Access the part of a virtual sample array starting at start_row */; /* and extending for num_rows rows. writable is true if */; /* caller intends to modify the accessed area. */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:3,Access,Access,3,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,2,"['Access', 'access']","['Access', 'accessed']"
Security,/* AccessType= */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h:3,Access,AccessType,3,interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h,3,['Access'],['AccessType']
Security,/* Adapt scan script for use with reduced block size;; * assume that script has been validated before.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jcmaster.c:85,validat,validated,85,graf2d/asimage/src/libAfterImage/libjpeg/jcmaster.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jcmaster.c,1,['validat'],['validated']
Security,"/* Add, edit or delete the entry in the passwords file.; *; * This function allows an application to manipulate .htpasswd files on the; * fly by adding, deleting and changing user records. This is one of the; * several ways of implementing authentication on the server side. For another,; * cookie-based way please refer to the examples/chat in the source tree.; *; * Parameter:; * passwords_file_name: Path and name of a file storing multiple passwords; * realm: HTTP authentication realm (authentication domain) name; * user: User name; * password:; * If password is not NULL, entry modified or added.; * If password is NULL, entry is deleted.; *; * Return:; * 1 on success, 0 on error.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.h:40,password,passwords,40,net/http/civetweb/civetweb.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.h,8,"['authenticat', 'password']","['authentication', 'password', 'passwords']"
Security,/* After a compression call set the expected input/output buffer.; * This is validated at the start of the next compression call.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:77,validat,validated,77,builtins/zstd/compress/zstd_compress.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c,1,['validat'],['validated']
Security,"/* Allocate memory. For reasonable files, size should never exceed; * 64K. However, zlib may allocate more than 64K if you don't tell; * it not to. See zconf.h and png.h for more information. zlib does; * need to allocate exactly 64K, so whatever you call here must; * have the ability to do that.; *; * This piece of code can be compiled to validate max 64K allocations; * by setting MAXSEG_64K in zlib zconf.h *or* PNG_MAX_MALLOC_64K.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c:342,validat,validate,342,graf2d/asimage/src/libAfterImage/libpng/pngtest.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c,1,['validat'],['validate']
Security,"/* Allocate space for hash table, dict, and freqs */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/cover.c:22,hash,hash,22,builtins/zstd/dictBuilder/cover.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/cover.c,2,['hash'],['hash']
Security,/* Already validated */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:11,validat,validated,11,builtins/zstd/compress/zstd_compress.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c,1,['validat'],['validated']
Security,/* Always insert every fastHashFillStep position into the hash table.; * Insert the other positions if their hash entry is empty.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_fast.c:58,hash,hash,58,builtins/zstd/compress/zstd_fast.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_fast.c,2,['hash'],['hash']
Security,/* Always insert every fastHashFillStep position into the hash tables.; * Insert the other positions into the large hash table if their entry; * is empty.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_double_fast.c:58,hash,hash,58,builtins/zstd/compress/zstd_double_fast.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_double_fast.c,2,['hash'],['hash']
Security,"/* An internal API to validate the format of a floating point number.; * The result is the index of the next character. If the number is; * not valid it will be the index of a character in the supposed number.; *; * The format of a number is defined in the PNG extensions specification; * and this API is strictly conformant to that spec, not anyone elses!; *; * The format as a regular expression is:; *; * [+-]?[0-9]+.?([Ee][+-]?[0-9]+)?; *; * or:; *; * [+-]?.[0-9]+(.[0-9]+)?([Ee][+-]?[0-9]+)?; *; * The complexity is that either integer or fraction must be present and the; * fraction is permitted to have no digits only if the integer is present.; *; * NOTE: The dangling E problem.; * There is a PNG valid floating point number in the following:; *; * PNG floating point numbers are not greedy.; *; * Working this out requires *TWO* character lookahead (because of the; * sign), the parser does not do this - it will fail at the 'r' - this; * doesn't matter for PNG sCAL chunk values, but it requires more care; * if the value were ever to be embedded in something more complex. Use; * ANSI-C strtod if you need the lookahead.; */; /* State table for the parser. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:22,validat,validate,22,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,1,['validat'],['validate']
Security,"/* At this point we should be in state DSTATE_STOPPING if being used; * standalone, or in state DSTATE_BUFIMAGE if being invoked to get access; * to the coefficients during a full buffered-image-mode decompression.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdtrans.c:136,access,access,136,graf2d/asimage/src/libAfterImage/libjpeg/jdtrans.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdtrans.c,1,['access'],['access']
Security,"/* Authenticated user, or NULL if no auth; 	 used */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.h:3,Authenticat,Authenticated,3,net/http/civetweb/civetweb.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.h,1,['Authenticat'],['Authenticated']
Security,/* Authentication domain is mandatory */; /* TODO: Maybe use a new option hostname? */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c:3,Authenticat,Authentication,3,net/http/civetweb/civetweb.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c,1,['Authenticat'],['Authentication']
Security,/* Authorize against the opened passwords file. Return 1 if authorized. */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c:3,Authoriz,Authorize,3,net/http/civetweb/civetweb.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c,3,"['Authoriz', 'authoriz', 'password']","['Authorize', 'authorized', 'passwords']"
Security,/* Blocks until unique access is obtained to this connection. Intended for use; with websockets only.; Invoke this before mg_write or mg_printf when communicating with a; websocket if your code has server-initiated communication as well as; communication in direct response to a message.; Do not acquire this lock while holding mg_lock_context(). */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.h:23,access,access,23,net/http/civetweb/civetweb.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.h,1,['access'],['access']
Security,/* Cached hash code of me_key. */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/CPyCppyyModule.cxx:10,hash,hash,10,bindings/pyroot/cppyy/CPyCppyy/src/CPyCppyyModule.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/CPyCppyyModule.cxx,1,['hash'],['hash']
Security,"/* Called when civetweb has received new HTTP request.; 	 If the callback returns one, it must process the request; 	 by sending valid HTTP headers and a body. Civetweb will not do; 	 any further processing. Otherwise it must return zero.; 	 Note that since V1.7 the ""begin_request"" function is called; 	 before an authorization check. If an authorization check is; 	 required, use a request_handler instead.; 	 Return value:; 	 0: civetweb will process the request itself. In this case,; 	 the callback must not send any data to the client.; 	 1-999: callback already processed the request. Civetweb will; 	 not send any data after the callback returned. The; 	 return code is stored as a HTTP status code for the; 	 access log. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.h:315,authoriz,authorization,315,net/http/civetweb/civetweb.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.h,3,"['access', 'authoriz']","['access', 'authorization']"
Security,/* Called when civetweb initializes SSL library for a domain.; 	 Parameters:; 	 server_domain: authentication_domain from the domain config.; 	 ssl_ctx: SSL_CTX pointer.; 	 user_data: parameter user_data passed when starting the server.; 	 Return value:; 	 0: civetweb will set up the SSL certificate.; 	 1: civetweb assumes the callback already set up the certificate.; 	 -1: initializing ssl fails. */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.h:289,certificate,certificate,289,net/http/civetweb/civetweb.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.h,2,['certificate'],['certificate']
Security,/* Called when civetweb initializes SSL library.; 	 Parameters:; 	 ssl_ctx: SSL_CTX pointer.; 	 user_data: parameter user_data passed when starting the server.; 	 Return value:; 	 0: civetweb will set up the SSL certificate.; 	 1: civetweb assumes the callback already set up the certificate.; 	 -1: initializing ssl fails. */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.h:212,certificate,certificate,212,net/http/civetweb/civetweb.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.h,2,['certificate'],['certificate']
Security,"/* Called when civetweb is about to log access. If callback returns; 	 non-zero, civetweb does not log anything. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.h:40,access,access,40,net/http/civetweb/civetweb.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.h,1,['access'],['access']
Security,"/* Casts, checks and accessors for structured types; * usage of these macros is reserved to type implementations only; */; /*< protected >*/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/glib/gobject/gtype.h:21,access,accessors,21,graf2d/win32gdk/gdk/src/glib/gobject/gtype.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/glib/gobject/gtype.h,1,['access'],['accessors']
Security,"/* Check if the current request has a valid authentication token set.; * A file is used to provide a list of valid user names, realms and; * password hashes. The file can be created and modified using the; * mg_modify_passwords_file API function.; * Parameters:; * conn: Current connection handle.; * realm: Authentication realm. If NULL is supplied, the sever domain; * set in the authentication_domain configuration is used.; * filename: Path and name of a file storing multiple password hashes.; * Return:; * > 0 Valid authentication; * 0 Invalid authentication; * < 0 Error (all values < 0 should be considered as invalid; * authentication, future error codes will have negative; * numbers); * -1 Parameter error; * -2 File not found; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.h:44,authenticat,authentication,44,net/http/civetweb/civetweb.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.h,9,"['Authenticat', 'authenticat', 'hash', 'password']","['Authentication', 'authentication', 'hashes', 'password']"
Security,/* Clear hash table and send Clear to make sure the decoder do the same. */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/egif_lib.c:9,hash,hash,9,graf2d/asimage/src/libAfterImage/libungif/egif_lib.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/egif_lib.c,1,['hash'],['hash']
Security,/* Client certificate information (part of mg_request_info) */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.h:10,certificate,certificate,10,net/http/civetweb/civetweb.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.h,1,['certificate'],['certificate']
Security,/* Client certificate information */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.h:10,certificate,certificate,10,net/http/civetweb/civetweb.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.h,1,['certificate'],['certificate']
Security,/* Compress expose events */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/gdk/win32/gdkevents-win32.c:12,expose,expose,12,graf2d/win32gdk/gdk/src/gdk/win32/gdkevents-win32.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/gdk/win32/gdkevents-win32.c,1,['expose'],['expose']
Security,"/* Connect to a TCP server as a client (can be used to connect to a HTTP server); Parameters:; host: host to connect to, i.e. ""www.wikipedia.org"" or ""192.168.1.1"" or; ""localhost""; port: server port; use_ssl: make a secure connection to server; error_buffer, error_buffer_size: buffer for an error message. Return:; On success, valid mg_connection object.; On error, NULL. Se error_buffer for details.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.h:215,secur,secure,215,net/http/civetweb/civetweb.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.h,1,['secur'],['secure']
Security,"/* Connect to a websocket as a client; Parameters:; host: host to connect to, i.e. ""echo.websocket.org"" or ""192.168.1.1"" or; ""localhost""; port: server port; use_ssl: make a secure connection to server; error_buffer, error_buffer_size: buffer for an error message; path: server path you are trying to connect to, i.e. if connection to; localhost/app, path should be ""/app""; origin: value of the Origin HTTP header; data_func: callback that should be used when data is received from the; server; user_data: user supplied argument. Return:; On success, valid mg_connection object.; On error, NULL. Se error_buffer for details.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.h:173,secur,secure,173,net/http/civetweb/civetweb.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.h,1,['secur'],['secure']
Security,"/* Content for ""WWW-Authenticate"" header */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c:20,Authenticat,Authenticate,20,net/http/civetweb/civetweb.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c,1,['Authenticat'],['Authenticate']
Security,"/* Control the overlap size, as a fraction of window size.; * The overlap size is an amount of data reloaded from previous job at the beginning of a new job.; * It helps preserve compression ratio, while each job is compressed in parallel.; * This value is enforced only when nbWorkers >= 1.; * Larger values increase compression ratio, but decrease speed.; * Possible values range from 0 to 9 :; * - 0 means ""default"" : value will be determined by the library, depending on strategy; * - 1 means ""no overlap""; * - 9 means ""full overlap"", using a full window size.; * Each intermediate rank increases/decreases load size by a factor 2 :; * 9: full window; 8: w/2; 7: w/4; 6: w/8; 5:w/16; 4: w/32; 3:w/64; 2:w/128; 1:no overlap; 0:default; * default value varies between 6 and 9, depending on strategy */; /* note : additional experimental parameters are also available; * within the experimental section of the API.; * At the time of this writing, they include :; * ZSTD_c_rsyncable; * ZSTD_c_format; * ZSTD_c_forceMaxWindow; * ZSTD_c_forceAttachDict; * ZSTD_c_literalCompressionMode; * ZSTD_c_targetCBlockSize; * ZSTD_c_srcSizeHint; * ZSTD_c_enableDedicatedDictSearch; * ZSTD_c_stableInBuffer; * ZSTD_c_stableOutBuffer; * ZSTD_c_blockDelimiters; * ZSTD_c_validateSequences; * Because they are not stable, it's necessary to define ZSTD_STATIC_LINKING_ONLY to access them.; * note : never ever use experimentalParam? names directly;; * also, the enums values themselves are unstable and can still change.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:1359,access,access,1359,builtins/zstd/zstd.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h,1,['access'],['access']
Security,/* DYN_ALLOC */; /* Initialize the hash table (avoiding 64K overflow for 16 bit systems).; * prev[] will be initialized on the fly.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/zip/src/ZDeflate.c:35,hash,hash,35,core/zip/src/ZDeflate.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/zip/src/ZDeflate.c,1,['hash'],['hash']
Security,"/* Decide what part of virtual array to access.; * Algorithm: if target address > current window, assume forward scan,; * load starting at target address. If target address < current window,; * assume backward scan, load so that target area is top of window.; * Note that when switching from forward write to forward read, will have; * start_row = 0, so the limiting case applies and we load from 0 anyway.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:40,access,access,40,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,2,['access'],['access']
Security,"/* Declarations */; /**; * A declaration whose specific kind is not exposed via this; * interface.; *; * Unexposed declarations have the same operations as any other kind; * of declaration; one can extract their location information,; * spelling, find their definitions, etc. However, the specific kind; * of the declaration is not reported.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang-c/Index.h:68,expose,exposed,68,interpreter/llvm-project/clang/include/clang-c/Index.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang-c/Index.h,1,['expose'],['exposed']
Security,"/* Declarations for Floyd-Steinberg dithering.; *; * Errors are accumulated into the array fserrors[], at a resolution of; * 1/16th of a pixel count. The error at a given pixel is propagated; * to its not-yet-processed neighbors using the standard F-S fractions,; *		...	(here)	7/16; *		3/16	5/16	1/16; * We work left-to-right on even rows, right-to-left on odd rows.; *; * We can get away with a single array (holding one row's worth of errors); * by using it to store the current row's errors at pixel columns not yet; * processed, but the next row's errors at columns already processed. We; * need only a few extra variables to hold the errors immediately around the; * current column. (If we are lucky, those variables are in registers, but; * even if not, they're probably cheaper to access than array elements are.); *; * The fserrors[] array is indexed [component#][position].; * We provide (#columns + 2) entries per component; the extra entry at each; * end saves us from special-casing the first and last pixels.; *; * Note: on a wide image, we might not have enough room in a PC's near data; * segment to hold the error array; so it is allocated with alloc_large.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c:789,access,access,789,graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant1.c,1,['access'],['access']
Security,/* Default to using aligned access optimizations and requiring alignment to a; * multiple of the data type size. Override in a compiler specific fashion; * if necessary by inserting tests here:; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:28,access,access,28,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,1,['access'],['access']
Security,/* Default: certificate chain in PEM file */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c:12,certificate,certificate,12,net/http/civetweb/civetweb.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c,1,['certificate'],['certificate']
Security,"/* Define this symbol if your target allows access to unaligned data.; * This is not mandatory, just a speed optimization. The compressed; * output is strictly identical.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/zip/src/Tailor.h:44,access,access,44,core/zip/src/Tailor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/zip/src/Tailor.h,1,['access'],['access']
Security,/* Do not generate expose events */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/x3d/src/x3d.c:19,expose,expose,19,graf3d/x3d/src/x3d.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/x3d/src/x3d.c,1,['expose'],['expose']
Security,/* Do not insert strings in hash table beyond this. */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate.c:28,hash,hash,28,builtins/zlib/deflate.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate.c,3,['hash'],['hash']
Security,"/* Don't compute the checksum for chunks, since we compute it externally,; * but write it in the header.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c:21,checksum,checksum,21,builtins/zstd/compress/zstdmt_compress.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c,1,['checksum'],['checksum']
Security,/* Don't reset is_AltGr_key here. Othewise we can't type several; * AltGr-accessed chars while keeping the AltGr pressed down; * all the time.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/gdk/win32/gdkevents-win32.c:74,access,accessed,74,graf2d/win32gdk/gdk/src/gdk/win32/gdkevents-win32.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/gdk/win32/gdkevents-win32.c,1,['access'],['accessed']
Security,"/* Don't use mg_cry_internal here, but only a trace, since; 				 * this is a typical case. It will occur for every directory; 				 * without a password file. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c:143,password,password,143,net/http/civetweb/civetweb.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c,2,['password'],['password']
Security,"/* Don't validate for NULL encoding, binary safe */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/glib/giochannel.c:9,validat,validate,9,graf2d/win32gdk/gdk/src/glib/giochannel.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/glib/giochannel.c,1,['validat'],['validate']
Security,/* Drop the hash if applies to the collection */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/TClassEdit.h:12,hash,hash,12,core/foundation/inc/TClassEdit.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/TClassEdit.h,1,['hash'],['hash']
Security,/* END of code to validate stdio-free compilation */; /* START of code to validate memory allocation and deallocation */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c:18,validat,validate,18,graf2d/asimage/src/libAfterImage/libpng/pngtest.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c,2,['validat'],['validate']
Security,/* Each iteration through the following loop writes at most one character; * to msg[i++] then returns here to validate that there is still space for; * the trailing '\0'. It may (in the case of a parameter) read more than; * one character from message[]; it must check for '\0' and continue to the; * test if it finds the end of string.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c:110,validat,validate,110,graf2d/asimage/src/libAfterImage/libpng/pngerror.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c,1,['validat'],['validate']
Security,"/* Easy access to info, added in libpng-0.99 */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngget.c:8,access,access,8,graf2d/asimage/src/libAfterImage/libpng/pngget.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngget.c,1,['access'],['access']
Security,"/* Encoding UTF-8, NULL doesn't use encoded_read_buf */; /* This is just validated UTF-8, so we can copy it back into read_buf; * so it can be encoded in whatever the new encoding is.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/glib/giochannel.c:73,validat,validated,73,graf2d/win32gdk/gdk/src/glib/giochannel.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/glib/giochannel.c,1,['validat'],['validated']
Security,/* Encrypt and write the output buffer: */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/zip/src/Bits.c:3,Encrypt,Encrypt,3,core/zip/src/Bits.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/zip/src/Bits.c,1,['Encrypt'],['Encrypt']
Security,"/* End of memory model/platform independent support */; /* End of 1.5.0beta36 move from pngconf.h */; /* CONSTANTS and UTILITY MACROS; * These are used internally by libpng and not exposed in the API; */; /* Various modes of operation. Note that after an init, mode is set to; * zero automatically when the structure is created. Three of these; * are defined in png.h because they need to be visible to applications; * that call png_set_unknown_chunk().; */; /* #define PNG_HAVE_IHDR 0x01U (defined in png.h) */; /* #define PNG_HAVE_PLTE 0x02U (defined in png.h) */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:181,expose,exposed,181,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,1,['expose'],['exposed']
Security,/* Ensure hash/chain table insertion resumes no sooner than lowlimit */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:10,hash,hash,10,builtins/zstd/compress/zstd_compress.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c,1,['hash'],['hash']
Security,"/* Ensure the accessed part of the array is defined; prezero if needed.; * To improve locality of access, we only prezero the part of the array; * that the caller is about to access, not the entire in-memory array.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:14,access,accessed,14,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,6,['access'],"['access', 'accessed']"
Security,"/* Event types.; * Nothing: No event occurred.; * Delete: A window delete event was sent by the window manager.; *	 The specified window should be deleted.; * Destroy: A window has been destroyed.; * Expose: Part of a window has been uncovered.; * NoExpose: Same as expose, but no expose event was generated.; * VisibilityNotify: A window has become fully/partially/not obscured.; * MotionNotify: The mouse has moved.; * ButtonPress: A mouse button was pressed.; * ButtonRelease: A mouse button was release.; * KeyPress: A key was pressed.; * KeyRelease: A key was released.; * EnterNotify: A window was entered.; * LeaveNotify: A window was exited.; * FocusChange: The focus window has changed. (The focus window gets; *		 keyboard events).; * Resize: A window has been resized.; * Map: A window has been mapped. (It is now visible on the screen).; * Unmap: A window has been unmapped. (It is no longer visible on; *	 the screen).; * Scroll: A mouse wheel was scrolled either up or down.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/gdk/gdkevents.h:200,Expose,Expose,200,graf2d/win32gdk/gdk/src/gdk/gdkevents.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/gdk/gdkevents.h,3,"['Expose', 'expose']","['Expose', 'expose']"
Security,"/* FASTEST */; /* ===========================================================================; * For Z_RLE, simply look for runs of bytes, generate matches only of distance; * one. Do not maintain a hash table. (It will be regenerated if this run of; * deflate switches away from Z_RLE.); */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate.c:199,hash,hash,199,builtins/zlib/deflate.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate.c,1,['hash'],['hash']
Security,"/* FIXME: We have to #define this because ""sel"" must be a constant integer, and; Sema doesn't do any form of constant propagation yet. */; /// Loads one cache line of data from the specified address to a location; /// closer to the processor.; ///; /// \headerfile <x86intrin.h>; ///; /// \code; /// void _mm_prefetch(const void *a, const int sel);; /// \endcode; ///; /// This intrinsic corresponds to the <c> PREFETCHNTA </c> instruction.; ///; /// \param a; /// A pointer to a memory location containing a cache line of data.; /// \param sel; /// A predefined integer constant specifying the type of prefetch; /// operation: \n; /// _MM_HINT_NTA: Move data using the non-temporal access (NTA) hint. The; /// PREFETCHNTA instruction will be generated. \n; /// _MM_HINT_T0: Move data using the T0 hint. The PREFETCHT0 instruction will; /// be generated. \n; /// _MM_HINT_T1: Move data using the T1 hint. The PREFETCHT1 instruction will; /// be generated. \n; /// _MM_HINT_T2: Move data using the T2 hint. The PREFETCHT2 instruction will; /// be generated.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/xmmintrin.h:683,access,access,683,interpreter/llvm-project/clang/lib/Headers/xmmintrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/xmmintrin.h,1,['access'],['access']
Security,/* Figure C.2: generate the codes themselves */; /* We also validate that the counts represent a legal Huffman code tree. */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jchuff.c:60,validat,validate,60,graf2d/asimage/src/libAfterImage/libjpeg/jchuff.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jchuff.c,2,['validat'],['validate']
Security,"/* File system access:; * NO_FILES = do not serve any files from the file system automatically.; * However, with NO_FILES CivetWeb may still write log files, read access; * control files, default error page files or use API functions like; * mg_send_file in callbacks to send files from the server local; * file system.; * NO_FILES only disables the automatic mapping between URLs and local; * file names.; * NO_FILESYSTEM = do not access any file at all. Useful for embedded; * devices without file system. Logging to files in not available; * (use callbacks instead) and API functions like mg_send_file are not; * available.; * If NO_FILESYSTEM is set, NO_FILES must be set as well.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c:15,access,access,15,net/http/civetweb/civetweb.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c,3,['access'],['access']
Security,/* Fill the hash table from lastHashed+1 to ip+mLength*/; /* Heuristic: don't need to fill the entire table at end of block */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.c:12,hash,hash,12,builtins/zstd/compress/zstd_ldm.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.c,1,['hash'],['hash']
Security,/* Final frame content checksum */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress.c:23,checksum,checksum,23,builtins/zstd/decompress/zstd_decompress.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress.c,1,['checksum'],['checksum']
Security,"/* Finally check if the server corresponds to the authentication; 	 * domain of the server (the server domain).; 	 * Allow full matches (like http://mydomain.com/path/file.ext), and; 	 * allow subdomain matches (like http://www.mydomain.com/path/file.ext),; 	 * but do not allow substrings (like; 	 * http://notmydomain.com/path/file.ext; 	 * or http://mydomain.com.fake/path/file.ext).; 	 */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c:50,authenticat,authentication,50,net/http/civetweb/civetweb.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c,1,['authenticat'],['authentication']
Security,"/* For LL&M IDCT method, multipliers are equal to raw quantization; 	 * coefficients, but are stored as ints to ensure access efficiency.; 	 */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jddctmgr.c:119,access,access,119,graf2d/asimage/src/libAfterImage/libjpeg/jddctmgr.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jddctmgr.c,1,['access'],['access']
Security,"/* For mid range keys, XXH3 uses a Mum-hash variant. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/xxhash/xxhash.h:39,hash,hash,39,builtins/xxhash/xxhash.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/xxhash/xxhash.h,2,['hash'],['hash']
Security,"/* For systems without mmap, the library still supplies an entry point; to link to, but trying to initialize access to an mmap'd managed region; always fails. */; /* ARGSUSED */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/clib/src/attach.c:109,access,access,109,core/clib/src/attach.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clib/src/attach.c,1,['access'],['access']
Security,/* Force direct memory access. Only works on CPU which support unaligned memory access in hardware */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/xxhash/xxhash.h:23,access,access,23,builtins/xxhash/xxhash.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/xxhash/xxhash.h,2,['access'],['access']
Security,/* Frame content checksum verification */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress.c:17,checksum,checksum,17,builtins/zstd/decompress/zstd_decompress.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress.c,1,['checksum'],['checksum']
Security,/* Free certificate memory */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c:8,certificate,certificate,8,net/http/civetweb/civetweb.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c,1,['certificate'],['certificate']
Security,/* Free client certificate info */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c:15,certificate,certificate,15,net/http/civetweb/civetweb.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c,1,['certificate'],['certificate']
Security,"/* Frequency of inserting/looking up entries into the LDM hash table.; * Must be clamped between 0 and (ZSTD_WINDOWLOG_MAX - ZSTD_HASHLOG_MIN).; * Default is MAX(0, (windowLog - ldmHashLog)), optimizing hash table usage.; * Larger values improve compression speed.; * Deviating far from default value will likely result in a compression ratio decrease.; * Special: value 0 means ""automatically determine hashRateLog"". */; /* frame parameters */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:58,hash,hash,58,builtins/zstd/zstd.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h,3,['hash'],"['hash', 'hashRateLog']"
Security,/* Functions g_strlcpy and g_strlcat were originally developed by; * Todd C. Miller <Todd.Miller@courtesan.com> to simplify writing secure code.; * See ftp://ftp.openbsd.org/pub/OpenBSD/src/lib/libc/string/strlcpy.3; * for more information.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/glib/gstrfuncs.c:132,secur,secure,132,graf2d/win32gdk/gdk/src/glib/gstrfuncs.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/glib/gstrfuncs.c,1,['secur'],['secure']
Security,/* GRelation; *; * Indexed Relations. Imagine a really simple table in a; * database. Relations are not ordered. This data type is meant for; * maintaining a N-way mapping.; *; * g_relation_new() creates a relation with FIELDS fields; *; * g_relation_destroy() frees all resources; * g_tuples_destroy() frees the result of g_relation_select(); *; * g_relation_index() indexes relation FIELD with the provided; * equality and hash functions. this must be done before any; * calls to insert are made.; *; * g_relation_insert() inserts a new tuple. you are expected to; * provide the right number of fields.; *; * g_relation_delete() deletes all relations with KEY in FIELD; * g_relation_select() returns ...; * g_relation_count() counts ...; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/glib/grel.h:425,hash,hash,425,graf2d/win32gdk/gdk/src/glib/grel.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/glib/grel.h,1,['hash'],['hash']
Security,/* G_DISABLE_DEPRECATED */; /* Hash Functions; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/glib/ghash.h:31,Hash,Hash,31,graf2d/win32gdk/gdk/src/glib/ghash.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/glib/ghash.h,1,['Hash'],['Hash']
Security,/* Get hash value of current dmer */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/fastcover.c:7,hash,hash,7,builtins/zstd/dictBuilder/fastcover.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/fastcover.c,1,['hash'],['hash']
Security,/* Get hash value of the dmer to be eliminated from active segment */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/fastcover.c:7,hash,hash,7,builtins/zstd/dictBuilder/fastcover.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/fastcover.c,1,['hash'],['hash']
Security,/* Get next pixel from stream. */; /* Form a new unique key to search hash table for the code combines ; * CrntCode as Prefix string with Pixel as postfix char.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/egif_lib.c:70,hash,hash,70,graf2d/asimage/src/libAfterImage/libungif/egif_lib.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/egif_lib.c,1,['hash'],['hash']
Security,"/* Handle the start of the inflate stream if we called inflateInit2(strm,0);; * in this case some zlib versions skip validation of the CINFO field and, in; * certain circumstances, libpng may end up displaying an invalid image, in; * contrast to implementations that call zlib in the normal way (e.g. libpng; * 1.5).; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:117,validat,validation,117,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,1,['validat'],['validation']
Security,/* Handler for authorization requests */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c:15,authoriz,authorization,15,net/http/civetweb/civetweb.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c,1,['authoriz'],['authorization']
Security,/* Handler for http/https or authorization requests. */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c:29,authoriz,authorization,29,net/http/civetweb/civetweb.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c,1,['authoriz'],['authorization']
Security,/* Hash Functions.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/glib/gstring.c:3,Hash,Hash,3,graf2d/win32gdk/gdk/src/glib/gstring.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/glib/gstring.c,1,['Hash'],['Hash']
Security,/* Hash table lookup needs to be fast.; * We therefore remove the extra conditional of testing; * whether to call the key_equal_func or not from; * the inner loop.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/glib/ghash.c:3,Hash,Hash,3,graf2d/win32gdk/gdk/src/glib/ghash.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/glib/ghash.c,1,['Hash'],['Hash']
Security,/* Hash tables; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/glib/ghash.h:3,Hash,Hash,3,graf2d/win32gdk/gdk/src/glib/ghash.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/glib/ghash.h,1,['Hash'],['Hash']
Security,/* HashConstantPoolIndices */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MIRVRegNamerUtils.cpp:3,Hash,HashConstantPoolIndices,3,interpreter/llvm-project/llvm/lib/CodeGen/MIRVRegNamerUtils.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MIRVRegNamerUtils.cpp,1,['Hash'],['HashConstantPoolIndices']
Security,/* HashMemOperands */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MIRVRegNamerUtils.cpp:3,Hash,HashMemOperands,3,interpreter/llvm-project/llvm/lib/CodeGen/MIRVRegNamerUtils.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MIRVRegNamerUtils.cpp,1,['Hash'],['HashMemOperands']
Security,/* HashVRegs */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MIRVRegNamerUtils.cpp:3,Hash,HashVRegs,3,interpreter/llvm-project/llvm/lib/CodeGen/MIRVRegNamerUtils.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MIRVRegNamerUtils.cpp,1,['Hash'],['HashVRegs']
Security,/* Heads of the hash chains or NIL. */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate.h:16,hash,hash,16,builtins/zlib/deflate.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate.h,3,['hash'],['hash']
Security,"/* Heads of the hash chains or NIL. If your compiler thinks that; * HASH_SIZE is a dynamic value, recompile with -DDYN_ALLOC.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/zip/src/Bits.h:16,hash,hash,16,core/zip/src/Bits.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/zip/src/Bits.h,1,['hash'],['hash']
Security,/* Here we just do minimal validation of the counts to avoid walking; * off the end of our table space. jdhuff.c will check more carefully.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c:27,validat,validation,27,graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c,1,['validat'],['validation']
Security,/* High water mark offset in window for initialized bytes -- bytes above; * this are set to zero in order to avoid memory check warnings when; * longest match routines access bytes past the input. This is then; * updated to the new high water mark.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate.h:168,access,access,168,builtins/zlib/deflate.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate.h,2,['access'],['access']
Security,"/* If a certificate chain is configured, use it. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c:8,certificate,certificate,8,net/http/civetweb/civetweb.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c,1,['certificate'],['certificate']
Security,"/* If callback returns 0, civetweb sets up the SSL certificate.; 	 * If it returns 1, civetweb assumes the calback already did this.; 	 * If it returns -1, initializing ssl fails. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c:51,certificate,certificate,51,net/http/civetweb/civetweb.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c,1,['certificate'],['certificate']
Security,"/* If domain callback returns 0, civetweb sets up the SSL certificate.; 	 * If it returns 1, civetweb assumes the calback already did this.; 	 * If it returns -1, initializing ssl fails. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c:58,certificate,certificate,58,net/http/civetweb/civetweb.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c,1,['certificate'],['certificate']
Security,"/* If however the HashTable if full, we send a clear first and; * Clear the hash table.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/egif_lib.c:18,Hash,HashTable,18,graf2d/asimage/src/libAfterImage/libungif/egif_lib.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/egif_lib.c,2,"['Hash', 'hash']","['HashTable', 'hash']"
Security,"/* If n is not on any hash chain, prev[n] is garbage but; * its value will never be used.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate.c:22,hash,hash,22,builtins/zlib/deflate.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate.c,4,['hash'],['hash']
Security,/* Ignore truncation in access log */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c:24,access,access,24,net/http/civetweb/civetweb.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c,1,['access'],['access']
Security,"/* In QUADPACK the variable table->nres is incremented at the top of; qelg, so it increases on every call. This leads to the array; res3la being accessed when its elements are still undefined, so I; have moved the update to this point so that its value more; useful. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:145,access,accessed,145,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,1,['access'],['accessed']
Security,"/* In contrast to OpenSSL, wolfSSL does not support certificate; 	 * chain files that contain private keys and certificates in; 	 * SSL_CTX_use_certificate_chain_file.; 	 * The CivetWeb-Server used pem-Files that contained both information.; 	 * In order to make wolfSSL work, it is split in two files.; 	 * One file that contains key and certificate used by the server and; 	 * an optional chain file for the ssl stack.; 	 */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c:52,certificate,certificate,52,net/http/civetweb/civetweb.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c,3,['certificate'],"['certificate', 'certificates']"
Security,/* Initialize the hash value now that we have some input: */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate.c:18,hash,hash,18,builtins/zlib/deflate.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate.c,5,['hash'],['hash']
Security,"/* Insert all strings in the hash table (except for the last two bytes).; * s->lookahead stays null, so s->ins_h will be recomputed at the next; * call of fill_window.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c:29,hash,hash,29,graf2d/asimage/src/libAfterImage/zlib/deflate.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c,1,['hash'],['hash']
Security,"/* Insert in hash table all strings up to the end of the match.; * strstart-1 and strstart are already inserted. If there is not; * enough lookahead, the last two strings are not inserted in; * the hash table.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate.c:13,hash,hash,13,builtins/zlib/deflate.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate.c,6,['hash'],['hash']
Security,/* Insert in hash table all strings up to the end of the match.; * strstart-1 and strstart are already inserted.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/zip/src/ZDeflate.c:13,hash,hash,13,core/zip/src/ZDeflate.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/zip/src/ZDeflate.c,1,['hash'],['hash']
Security,/* Insert new strings in the hash table only if the match length is not; * greater than this length. This saves time but degrades compression.; * max_insert_length is used only for compression levels <= 3.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate.h:29,hash,hash,29,builtins/zlib/deflate.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate.h,3,['hash'],['hash']
Security,/* Insert new strings in the hash table only if the match length; * is not greater than this length. This saves time but degrades compression.; * max_insert_length is used only for compression levels <= 3.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/zip/src/Bits.h:29,hash,hash,29,core/zip/src/Bits.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/zip/src/Bits.h,1,['hash'],['hash']
Security,/* Insert new strings in the hash table only if the match length; * is not too large. This saves time but degrades compression.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate.c:29,hash,hash,29,builtins/zlib/deflate.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate.c,4,['hash'],['hash']
Security,/* Insert the current entry into the hash table */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.c:37,hash,hash,37,builtins/zstd/compress/zstd_ldm.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.c,1,['hash'],['hash']
Security,"/* Insert the string window[strstart .. strstart+2] in the; * dictionary, and set hash_head to the head of the hash chain:; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate.c:111,hash,hash,111,builtins/zlib/deflate.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate.c,7,['hash'],['hash']
Security,"/* Insert the string window[strstart .. strstart+3] in the; * dictionary, and set hash_head to the head of the hash chain:; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c:111,hash,hash,111,builtins/zlib/deflate_cf.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c,1,['hash'],['hash']
Security,/* Integrity-check the data length */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:3,Integrity,Integrity-check,3,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,1,['Integrity'],['Integrity-check']
Security,"/* It is not necessary to compare scan[2] and match[2] since they are; * always equal when the other bytes match, given that the hash keys; * are equal and that HASH_BITS >= 8. Compare 2 bytes at a time at; * strstart+3, +5, ... up to strstart+257. We check for insufficient; * lookahead only every 4th comparison; the 128th check will be made; * at strstart+257. If MAX_MATCH-2 is not a multiple of 8, it is; * necessary to put more guard bytes at the end of the window, or; * to check more often for insufficient lookahead.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate.c:129,hash,hash,129,builtins/zlib/deflate.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate.c,3,['hash'],['hash']
Security,"/* LZ4_H_2983827168210 */; /*^*************************************; * !!!!!! STATIC LINKING ONLY !!!!!!; ***************************************/; /*-****************************************************************************; * Experimental section; *; * Symbols declared in this section must be considered unstable. Their; * signatures or semantics may change, or they may be removed altogether in the; * future. They are therefore only safe to depend on when the caller is; * statically linked against the library.; *; * To protect against unsafe usage, not only are the declarations guarded,; * the definitions are hidden by default; * when building LZ4 as a shared/dynamic library.; *; * In order to access these declarations,; * define LZ4_STATIC_LINKING_ONLY in your application; * before including LZ4's headers.; *; * In order to make their implementations accessible dynamically, you must; * define LZ4_PUBLISH_STATIC_FUNCTIONS when building the LZ4 library.; ******************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/lz4/lz4.h:707,access,access,707,builtins/lz4/lz4.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/lz4/lz4.h,2,['access'],"['access', 'accessible']"
Security,"/* LZ4_decompress_fast doesn't validate match offsets,; * and thus serves well with any prefixed dictionary. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/lz4/lz4.c:31,validat,validate,31,builtins/lz4/lz4.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/lz4/lz4.c,1,['validat'],['validate']
Security,/* Library Validation required by Hardened System Policy */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/MachO.h:11,Validat,Validation,11,interpreter/llvm-project/llvm/include/llvm/BinaryFormat/MachO.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/MachO.h,1,['Validat'],['Validation']
Security,"/* Link to older string with same hash index. To limit the size of this; * array to 64K, this link is maintained only for the last 32K strings.; * An index in this array is thus a window index modulo 32K.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate.h:34,hash,hash,34,builtins/zlib/deflate.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate.h,4,['hash'],['hash']
Security,"/* Log size of each bucket in the LDM hash table for collision resolution.; * Larger values improve collision resolution but decrease compression speed.; * The maximum value is ZSTD_LDM_BUCKETSIZELOG_MAX.; * Special: value 0 means ""use default value"" (default: 3). */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:38,hash,hash,38,builtins/zstd/zstd.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h,1,['hash'],['hash']
Security,/* Log size of hashTable */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h:15,hash,hashTable,15,builtins/zstd/compress/zstd_compress_internal.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h,1,['hash'],['hashTable']
Security,/* Loop over passwords file */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c:13,password,passwords,13,net/http/civetweb/civetweb.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c,1,['password'],['passwords']
Security,"/* MD5 hash given strings.; Buffer 'buf' must be 33 bytes long. Varargs is a NULL terminated list of; ASCIIz strings. When function returns, buf will contain human-readable; MD5 hash. Example:; char buf[33];; mg_md5(buf, ""aa"", ""bb"", NULL); */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.h:7,hash,hash,7,net/http/civetweb/civetweb.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.h,2,['hash'],['hash']
Security,/* Magic number to check header integrity. */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/clib/src/mmcheck.c:32,integrity,integrity,32,core/clib/src/mmcheck.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clib/src/mmcheck.c,1,['integrity'],['integrity']
Security,/* Make MAX_ALLOC_CHUNK accessible to other modules */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:24,access,accessible,24,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,1,['access'],['accessible']
Security,/* Make the desired part of the virtual array accessible */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:46,access,accessible,46,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,2,['access'],['accessible']
Security,"/* NB: The C standard requires that these be the same value, but the compiler; exposes separate internal width macros. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/stdint.h:79,expose,exposes,79,interpreter/llvm-project/clang/lib/Headers/stdint.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/stdint.h,2,['expose'],['exposes']
Security,/* No certificate and no init_ssl callbacks:; 		 * Essential data to set up TLS is missing.; 		 */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c:6,certificate,certificate,6,net/http/civetweb/civetweb.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c,1,['certificate'],['certificate']
Security,"/* Not all platforms that support asan provide sanitizers/asan_interface.h.; * We therefore declare the functions we need ourselves, rather than trying to; * include the header file... */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/compiler.h:47,sanitiz,sanitizers,47,builtins/zstd/common/compiler.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/compiler.h,1,['sanitiz'],['sanitizers']
Security,"/* Not all platforms that support msan provide sanitizers/msan_interface.h.; * We therefore declare the functions we need ourselves, rather than trying to; * include the header file... */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/compiler.h:47,sanitiz,sanitizers,47,builtins/zstd/common/compiler.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/compiler.h,1,['sanitiz'],['sanitizers']
Security,"/* Not enough to compute the hash.; * We will miss any synchronization points in this RSYNC_LENGTH byte; * window. However, since it depends only in the internal buffers, if the; * state is already synchronized, we will remain synchronized.; * Additionally, the probability that we miss a synchronization point is; * low: RSYNC_LENGTH / targetSectionSize.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c:29,hash,hash,29,builtins/zstd/compress/zstdmt_compress.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c,1,['hash'],['hash']
Security,"/* Note : This is an internal API.; * These APIs used to be exposed with ZSTDLIB_API,; * because it used to be the only way to invoke MT compression.; * Now, you must use ZSTD_compress2 and ZSTD_compressStream2() instead.; *; * This API requires ZSTD_MULTITHREAD to be defined during compilation,; * otherwise ZSTDMT_createCCtx*() will fail.; */; /* === Dependencies === */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.h:60,expose,exposed,60,builtins/zstd/compress/zstdmt_compress.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.h,1,['expose'],['exposed']
Security,"/* Note that K.. and I.. can't be combined since K.. has to access data before; R.., in order for functions returning strings which are also passed in as; arguments to work correctly. Note that R.. frees and hence may corrupt the; string. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/montecarlo/eg/inc/cfortran.h:60,access,access,60,montecarlo/eg/inc/cfortran.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/montecarlo/eg/inc/cfortran.h,1,['access'],['access']
Security,"/* Note that since V1.7 the ""begin_request"" function is called; 		 * before an authorization check. If an authorization check is; 		 * required, use a request_handler instead. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c:79,authoriz,authorization,79,net/http/civetweb/civetweb.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c,2,['authoriz'],['authorization']
Security,"/* Now read the tag table; a variable size buffer is; * needed at this point, allocate one for the whole; * profile. The header check has already validated; * that none of this stuff will overflow.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:146,validat,validated,146,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,1,['validat'],['validated']
Security,"/* Number of bits by which ins_h and del_h must be shifted at each; * input step. It must be such that after MIN_MATCH steps, the oldest; * byte no longer takes part in the hash key, that is:; * H_SHIFT * MIN_MATCH >= HASH_BITS; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/zip/src/Bits.h:173,hash,hash,173,core/zip/src/Bits.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/zip/src/Bits.h,1,['hash'],['hash']
Security,"/* Number of bits by which ins_h must be shifted at each input; * step. It must be such that after MIN_MATCH steps, the oldest; * byte no longer takes part in the hash key, that is:; * hash_shift * MIN_MATCH >= hash_bits; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate.h:163,hash,hash,163,builtins/zlib/deflate.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate.h,3,['hash'],['hash']
Security,/* Number of bits used to hash strings */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/zip/src/ZDeflate.c:26,hash,hash,26,core/zip/src/ZDeflate.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/zip/src/ZDeflate.c,1,['hash'],['hash']
Security,/* OBSOLETE: skip library validation */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/MachO.h:26,validat,validation,26,interpreter/llvm-project/llvm/include/llvm/BinaryFormat/MachO.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/MachO.h,1,['validat'],['validation']
Security,"/* Old clients (Win XP) will not support SNI. Then, there; 	 * is no server name available in the request - we can; 	 * only work with the default certificate.; 	 * Multiple HTTPS hosts on one IP+port are only possible; 	 * with a certificate containing all alternative names.; 	 */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c:147,certificate,certificate,147,net/http/civetweb/civetweb.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c,2,['certificate'],['certificate']
Security,"/* On read if the image is a 16-bit per component image and there is no gAMA; * or sRGB chunk assume that the components are sRGB encoded. Notice that; * images output by the simplified API always have gamma information; setting; * this flag only affects the interpretation of 16-bit images from an; * external source. It is recommended that the application expose this flag; * to the user; the user can normally easily recognize the difference between; * linear and sRGB encoding. This flag has no effect on write - the data; * passed to the write APIs must have the correct encoding (as defined; * above.); *; * If the flag is not set (the default) input 16-bit per component data is; * assumed to be linear.; *; * NOTE: the flag can only be set after the png_image_begin_read_ call,; * because that call initializes the 'flags' field.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:358,expose,expose,358,graf2d/asimage/src/libAfterImage/libpng/png.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h,1,['expose'],['expose']
Security,/* Parse authorization header */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c:9,authoriz,authorization,9,net/http/civetweb/civetweb.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c,1,['authoriz'],['authorization']
Security,/* Prepare for current scan --- the script is already validated */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jcmaster.c:54,validat,validated,54,graf2d/asimage/src/libAfterImage/libjpeg/jcmaster.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jcmaster.c,1,['validat'],['validated']
Security,"/* Prepare the reader to ignore all recognized chunks whose data will not; * be used, i.e., all chunks recognized by libpng except for those; * involved in basic image reading:; *; * IHDR, PLTE, IDAT, IEND; *; * Or image data handling:; *; * tRNS, bKGD, gAMA, cHRM, sRGB, [iCCP] and sBIT.; *; * This provides a small performance improvement and eliminates any; * potential vulnerability to security problems in the unused chunks.; *; * At present the iCCP chunk data isn't used, so iCCP chunk can be ignored; * too. This allows the simplified API to be compiled without iCCP support,; * however if the support is there the chunk is still checked to detect; * errors (which are unfortunately quite common.); */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c:390,secur,security,390,graf2d/asimage/src/libAfterImage/libpng/pngread.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c,1,['secur'],['security']
Security,/* Public function to check http digest authentication header */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c:40,authenticat,authentication,40,net/http/civetweb/civetweb.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c,1,['authenticat'],['authentication']
Security,"/* Put it in hash table, output the prefix code, and make our; * CrntCode equal to Pixel.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/egif_lib.c:13,hash,hash,13,graf2d/asimage/src/libAfterImage/libungif/egif_lib.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/egif_lib.c,1,['hash'],['hash']
Security,/* Put this unique key with its relative Code in hash table: */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/egif_lib.c:49,hash,hash,49,graf2d/asimage/src/libAfterImage/libungif/egif_lib.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/egif_lib.c,1,['hash'],['hash']
Security,"/* Read the information before the actual image data. This has been; * changed in v0.90 to allow reading a file that already has the magic; * bytes read from the stream. You can tell libpng how many bytes have; * been read from the beginning of the stream (up to the maximum of 8); * via png_set_sig_bytes(), and we will only check the remaining bytes; * here. The application can then have access to the signature bytes we; * read if it is determined that this isn't a valid PNG file.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c:391,access,access,391,graf2d/asimage/src/libAfterImage/libpng/pngread.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c,1,['access'],['access']
Security,"/* Record the we got a `Permission denied' error. If we end; * up finding no executable we can use, we want to diagnose; * that we did find one but were denied access.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/glib/gspawn.c:160,access,access,160,graf2d/win32gdk/gdk/src/glib/gspawn.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/glib/gspawn.c,1,['access'],['access']
Security,/* Regard empty password as no password - remove user record. */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c:16,password,password,16,net/http/civetweb/civetweb.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c,2,['password'],['password']
Security,"/* Return flags indicating compile-time options. Type sizes, two bits each, 00 = 16 bits, 01 = 32, 10 = 64, 11 = other:; 1.0: size of uInt; 3.2: size of uLong; 5.4: size of voidpf (pointer); 7.6: size of z_off_t. Compiler, assembler, and debug options:; 8: DEBUG; 9: ASMV or ASMINF -- use ASM code; 10: ZLIB_WINAPI -- exported functions use the WINAPI calling convention; 11: 0 (reserved). One-time table building (smaller code, but not thread-safe if true):; 12: BUILDFIXED -- build static block decoding tables when needed; 13: DYNAMIC_CRC_TABLE -- build CRC calculation tables when needed; 14,15: 0 (reserved). Library content (indicates missing functionality):; 16: NO_GZCOMPRESS -- gz* functions cannot compress (to avoid linking; deflate code when not needed); 17: NO_GZIP -- deflate can't write gzip streams, and inflate can't detect; and decode gzip streams (to avoid linking crc code); 18-19: 0 (reserved). Operation variations (changes in library functionality):; 20: PKZIP_BUG_WORKAROUND -- slightly more permissive inflate; 21: FASTEST -- deflate algorithm with only one, lowest compression level; 22,23: 0 (reserved). The sprintf variant used by gzprintf (zero is best):; 24: 0 = vs*, 1 = s* -- 1 means limited to 20 arguments after the format; 25: 0 = *nprintf, 1 = *printf -- 1 means gzprintf() not secure!; 26: 0 = returns value, 1 = void -- 1 means inferred string length returned. Remainder:; 27-31: 0 (reserved); */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:1314,secur,secure,1314,builtins/zlib/zlib.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h,1,['secur'],['secure']
Security,"/* Return flags indicating compile-time options. Type sizes, two bits each, 00 = 16 bits, 01 = 32, 10 = 64, 11 = other:; 1.0: size of uInt; 3.2: size of uLong; 5.4: size of voidpf (pointer); 7.6: size of z_off_t. Compiler, assembler, and debug options:; 8: DEBUG; 9: ASMV or ASMINF -- use ASM code; 10: ZLIB_WINAPI -- exported functions use the WINAPI calling convention; 11: 0 (reserved). One-time table building (smaller code, but not thread-safe if true):; 12: BUILDFIXED -- build static block decoding tables when needed; 13: DYNAMIC_CRC_TABLE -- build CRC calculation tables when needed; 14,15: 0 (reserved). Library content (indicates missing functionality):; 16: NO_GZCOMPRESS -- gz* functions cannot compress (to avoid linking; deflate code when not needed); 17: NO_GZIP -- deflate can't write gzip streams, and inflate can't detect; and decode gzip streams (to avoid linking crc code); 18-19: 0 (reserved). Operation variations (changes in library functionality):; 20: PKZIP_BUG_WORKAROUND -- slightly more permissive inflate; 21: FASTEST -- deflate algorithm with only one, lowest compression level; 22,23: 0 (reserved). The sprintf variant used by gzprintf (zero is best):; 24: 0 = vs*, 1 = s* -- 1 means limited to 20 arguments after the format; 25: 0 = *nprintf, 1 = *printf -- 1 means gzprintf() not secure!; 26: 0 = returns value, 1 = void -- 1 means inferred string length returned. Remainder:; 27-31: 0 (reserved); */; /* utility functions */; /*; The following utility functions are implemented on top of the; basic stream-oriented functions. To simplify the interface, some; default options are assumed (compression level and memory usage,; standard memory allocation functions). The source code of these; utility functions can easily be modified if you need special options.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:1314,secur,secure,1314,graf2d/asimage/src/libAfterImage/zlib/zlib.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h,1,['secur'],['secure']
Security,/* Rolling hash */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.c:11,hash,hash,11,builtins/zstd/compress/zstd_ldm.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.c,1,['hash'],['hash']
Security,"/* SECURITY and SAFETY:; *; * libpng is built with support for internal limits on image dimensions and; * memory usage. These are documented in scripts/pnglibconf.dfa of the; * source and recorded in the machine generated header file pnglibconf.h.; */; /* If you are running on a machine where you cannot allocate more; * than 64K of memory at once, uncomment this. While libpng will not; * normally need that much memory in a chunk (unless you load up a very; * large file), zlib needs to know how big of a chunk it can use, and; * libpng thus makes sure to check any memory allocation to verify it; * will fit into memory.; *; * zlib provides 'MAXSEG_64K' which, if defined, indicates the; * same limit and pngconf.h (already included) sets the limit; * if certain operating systems are detected.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:3,SECUR,SECURITY,3,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,1,['SECUR'],['SECURITY']
Security,"/* START of code to validate stdio-free compilation */; /* These copies of the default read/write functions come from pngrio.c and; * pngwio.c. They allow ""don't include stdio"" testing of the library.; * This is the function that does the actual reading of data. If you are; * not reading from a standard C stream, you should create a replacement; * read_data function and use it at run time with png_set_read_fn(), rather; * than changing the library.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c:20,validat,validate,20,graf2d/asimage/src/libAfterImage/libpng/pngtest.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c,1,['validat'],['validate']
Security,"/* Same as mg_modify_passwords_file, but instead of the plain-text; * password, the HA1 hash is specified. The plain-text password is; * not made known to civetweb.; *; * The HA1 hash is the MD5 checksum of a ""user:realm:password"" string; * in lower-case hex format. For example, if the user name is ""myuser"",; * the realm is ""myrealm"", and the password is ""secret"", then the HA1 is; * e67fd3248b58975c3e89ff18ecb75e2f.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.h:70,password,password,70,net/http/civetweb/civetweb.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.h,7,"['checksum', 'hash', 'password']","['checksum', 'hash', 'password']"
Security,"/* Select a size limit (in power of 2) beyond which; * the streaming API will refuse to allocate memory buffer; * in order to protect the host from unreasonable memory requirements.; * This parameter is only useful in streaming mode, since no internal buffer is allocated in single-pass mode.; * By default, a decompression context accepts window sizes <= (1 << ZSTD_WINDOWLOG_LIMIT_DEFAULT).; * Special: value 0 means ""use default maximum windowLog"". */; /* note : additional experimental parameters are also available; * within the experimental section of the API.; * At the time of this writing, they include :; * ZSTD_d_format; * ZSTD_d_stableOutBuffer; * ZSTD_d_forceIgnoreChecksum; * Because they are not stable, it's necessary to define ZSTD_STATIC_LINKING_ONLY to access them.; * note : never ever use experimentalParam? names directly; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:772,access,access,772,builtins/zstd/zstd.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h,1,['access'],['access']
Security,"/* Send HTTP digest access authentication request.; * Browsers will send a user name and password in their next request, showing; * an authentication dialog if the password is not stored.; * Parameters:; * conn: Current connection handle.; * realm: Authentication realm. If NULL is supplied, the sever domain; * set in the authentication_domain configuration is used.; * Return:; * < 0 Error; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.h:20,access,access,20,net/http/civetweb/civetweb.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.h,6,"['Authenticat', 'access', 'authenticat', 'password']","['Authentication', 'access', 'authentication', 'password']"
Security,"/* Server start time, used for authentication; 	 * and for diagnstics. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c:31,authenticat,authentication,31,net/http/civetweb/civetweb.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c,1,['authenticat'],['authentication']
Security,/* Set the colorspace first because this validates the profile; do not; * override previously set app cHRM or gAMA here (because likely as not the; * application knows better than libpng what the correct values are.) Pass; * the info_ptr color_type field to png_colorspace_set_ICC because in the; * write case it has not yet been stored in png_ptr.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngset.c:41,validat,validates,41,graf2d/asimage/src/libAfterImage/libpng/pngset.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngset.c,1,['validat'],['validates']
Security,/* Shift hash cache down 1. */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_lazy.c:9,hash,hash,9,builtins/zstd/compress/zstd_lazy.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_lazy.c,1,['hash'],['hash']
Security,"/* Should we support client certificates? */; /* Default is ""no"". */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c:28,certificate,certificates,28,net/http/civetweb/civetweb.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c,1,['certificate'],['certificates']
Security,"/* Size of the initial probe table, as a power of 2.; * Resulting memory usage is (1 << (hashLog+2)).; * Must be clamped between ZSTD_HASHLOG_MIN and ZSTD_HASHLOG_MAX.; * Larger tables improve compression ratio of strategies <= dFast,; * and improve speed of strategies > dFast.; * Special: value 0 means ""use default hashLog"". */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:89,hash,hashLog,89,builtins/zstd/zstd.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h,2,['hash'],['hashLog']
Security,"/* Size of the table for long distance matching, as a power of 2.; * Larger values increase memory usage and compression ratio,; * but decrease compression speed.; * Must be clamped between ZSTD_HASHLOG_MIN and ZSTD_HASHLOG_MAX; * default: windowlog - 7.; * Special: value 0 means ""automatically determine hashlog"". */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:306,hash,hashlog,306,builtins/zstd/zstd.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h,1,['hash'],['hashlog']
Security,"/* Skip to next match if the match length cannot increase; * or if the match length is less than 2. Note that the checks below; * for insufficient lookahead only occur occasionally for performance; * reasons. Therefore uninitialized memory will be accessed, and; * conditional jumps will be made that depend on those values.; * However the length of the match is limited to the lookahead, so; * the output of deflate is not affected by the uninitialized values.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate.c:248,access,accessed,248,builtins/zlib/deflate.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate.c,3,['access'],['accessed']
Security,"/* Slide the hash table (could be avoided with 32 bit values; at the expense of memory usage). We slide even when level == 0; to keep the hash table consistent if we switch back to level > 0; later. (Using level 0 permanently is not an optimal usage of; zlib, so we don't care about this pathological case.); */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate.c:13,hash,hash,13,builtins/zlib/deflate.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate.c,4,['hash'],['hash']
Security,"/* Slide the hash table (could be avoided with 32 bit values; at the expense of memory usage). We slide even when level == 0; to keep the hash table consistent if we switch back to level > 0; later. (Using level 0 permanently is not an optimal usage of; zlib, so we don't care about this pathological case.); */; /* %%% avoid this when Z_RLE */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c:13,hash,hash,13,graf2d/asimage/src/libAfterImage/zlib/deflate.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/deflate.c,2,['hash'],['hash']
Security,/* Start the operations. In this version the Elements of the array AP */; /* are accessed sequentially with one pass through AP. */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/mndspr.cxx:81,access,accessed,81,math/minuit2/src/mndspr.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/mndspr.cxx,1,['access'],['accessed']
Security,/* Start the operations. In this version the Elements of the array AP */; /* are accessed sequentially with one pass through AP. */; /* First form y := beta*y. */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/mndspmv.cxx:81,access,accessed,81,math/minuit2/src/mndspmv.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/mndspmv.cxx,1,['access'],['accessed']
Security,"/* Starting with the hash of the previous RSYNC_LENGTH bytes, roll; * through the input. If we hit a synchronization point, then cut the; * job off, and tell the compressor to flush the job. Otherwise, load; * all the bytes and continue as normal.; * If we go too long without a synchronization point (targetSectionSize); * then a block will be emitted anyways, but this is okay, since if we; * are already synchronized we will remain synchronized.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c:21,hash,hash,21,builtins/zstd/compress/zstdmt_compress.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c,1,['hash'],['hash']
Security,"/* Statistics available to the user.; FIXME: By design, the internals of the malloc package are no longer; exported to the user via an include file, so access to this data needs; to be via some other mechanism, such as mmstat_<something> where the; return value is the <something> the user is interested in. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/clib/res/mmprivate.h:152,access,access,152,core/clib/res/mmprivate.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clib/res/mmprivate.h,1,['access'],['access']
Security,"/* Substitute files have already been handled above. */; /* Here we can either generate and send a directory listing,; 		 * or send an ""access denied"" error. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c:136,access,access,136,net/http/civetweb/civetweb.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c,1,['access'],['access']
Security,"/* Support transport layer security (TLS). */; /* SSL is still often used synonymously for TLS. */; /* Will only work, if NO_SSL is not set. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.h:27,secur,security,27,net/http/civetweb/civetweb.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.h,1,['secur'],['security']
Security,"/* TODO: Check ssl_verify_peer and ssl_ca_path here.; 		 * SSL_CTX_set_verify call is needed to switch off server; 		 * certificate checking, which is off by default in OpenSSL and; 		 * on in yaSSL. */; /* TODO: SSL_CTX_set_verify(conn->dom_ctx,; 		 * SSL_VERIFY_PEER, verify_ssl_server); */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c:120,certificate,certificate,120,net/http/civetweb/civetweb.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c,1,['certificate'],['certificate']
Security,"/* TODO: Deprecate and remove this API.; * Somewhere the implementation of this seems to have been lost,; * or abandoned. It was only to support some internal back-door access; * to png_struct) in libpng-1.4.x.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpread.c:169,access,access,169,graf2d/asimage/src/libAfterImage/libpng/pngpread.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpread.c,1,['access'],['access']
Security,/* TODO: validate format of calibration name and unit name */; /* Check that the type matches the specification. */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngset.c:9,validat,validate,9,graf2d/asimage/src/libAfterImage/libpng/pngset.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngset.c,1,['validat'],['validate']
Security,/* TRACE method (RFC 2616) is not supported for security reasons */; /* PATCH method (RFC 5789) */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c:48,secur,security,48,net/http/civetweb/civetweb.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c,1,['secur'],['security']
Security,/* Tail of hash chains */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate.c:11,hash,hash,11,builtins/zlib/deflate.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate.c,4,['hash'],['hash']
Security,"/* Terminate access to a mmalloc managed region by unmapping all memory pages; associated with the region, and closing the file descriptor if it is one; that we opened. Returns NULL on success. Returns the malloc descriptor on failure, which can subsequently be used; for further action, such as obtaining more information about the nature of; the failure by examining the preserved errno value. Note that the malloc descriptor that we are using is currently located in; region we are about to unmap, so we first make a local copy of it on the; stack and use the copy. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/clib/src/detach.c:13,access,access,13,core/clib/src/detach.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clib/src/detach.c,1,['access'],['access']
Security,"/* The check at best_len-1 can be removed because it will be made; * again later. (This heuristic is not always a win.); * It is not necessary to compare scan[2] and match[2] since they; * are always equal when the other bytes match, given that; * the hash keys are equal and that HASH_BITS >= 8.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate.c:252,hash,hash,252,builtins/zlib/deflate.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate.c,5,['hash'],['hash']
Security,"/* The converted number corresponds to the time the nounce has been; 	 * created. This should not be earlier than the server start. */; /* Server side nonce check is valuable in all situations but one:; 	 * if the server restarts frequently, but the client should not see; 	 * that, so the server should accept nonces from previous starts. */; /* However, the reasonable default is to not accept a nonce from a; 	 * previous start, so if anyone changed the access rights between; 	 * two restarts, a new login is required. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c:457,access,access,457,net/http/civetweb/civetweb.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c,1,['access'],['access']
Security,"/* The following functions are from Tk8.0, but heavily modified.; Here are tk's licensing terms. I hope these terms don't conflict; with the GNU Library General Public License? They shouldn't, as; they are looser that the GLPL, yes? */; /*; This software is copyrighted by the Regents of the University of; California, Sun Microsystems, Inc., and other parties. The following; terms apply to all files associated with the software unless explicitly; disclaimed in individual files. The authors hereby grant permission to use, copy, modify, distribute,; and license this software and its documentation for any purpose, provided; that existing copyright notices are retained in all copies and that this; notice is included verbatim in any distributions. No written agreement,; license, or royalty fee is required for any of the authorized uses.; Modifications to this software may be copyrighted by their authors; and need not follow the licensing terms described here, provided that; the new terms are clearly indicated on the first page of each file where; they apply. IN NO EVENT SHALL THE AUTHORS OR DISTRIBUTORS BE LIABLE TO ANY PARTY; FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES; ARISING OUT OF THE USE OF THIS SOFTWARE, ITS DOCUMENTATION, OR ANY; DERIVATIVES THEREOF, EVEN IF THE AUTHORS HAVE BEEN ADVISED OF THE; POSSIBILITY OF SUCH DAMAGE. THE AUTHORS AND DISTRIBUTORS SPECIFICALLY DISCLAIM ANY WARRANTIES,; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY,; FITNESS FOR A PARTICULAR PURPOSE, AND NON-INFRINGEMENT. THIS SOFTWARE; IS PROVIDED ON AN ""AS IS"" BASIS, AND THE AUTHORS AND DISTRIBUTORS HAVE; NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR; MODIFICATIONS. GOVERNMENT USE: If you are acquiring this software on behalf of the; U.S. government, the Government shall have only ""Restricted Rights""; in the software and related documentation as defined in the Federal ; Acquisition Regulations (FARs) in Clause 52.227",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/gdk/win32/gdkcolor-win32.c:826,authoriz,authorized,826,graf2d/win32gdk/gdk/src/gdk/win32/gdkcolor-win32.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/gdk/win32/gdkcolor-win32.c,1,['authoriz'],['authorized']
Security,/* The following has to be safe; this function only gets called on PNG data; * and if we get here that data is invalid. 0 is the most safe value and; * if not then an attacker would surely just generate a PNG with 0 instead.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:167,attack,attacker,167,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,1,['attack'],['attacker']
Security,/* The following is here *only* for access by debugging routines */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve7/glu/sweep.h:36,access,access,36,graf3d/eve7/glu/sweep.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve7/glu/sweep.h,1,['access'],['access']
Security,/* The following profiles have no known MD5 checksum. If there is a match; * on the (empty) MD5 the other fields are used to attempt a match and; * a warning is produced. The first two of these profiles have a 'cprt' tag; * which suggests that they were also made by Hewlett Packard.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:44,checksum,checksum,44,graf2d/asimage/src/libAfterImage/libpng/png.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c,1,['checksum'],['checksum']
Security,"/* The function g_io_channel_new_file() is prototyped in both; * giounix.c and giowin32.c, so we stick its documentation here.; */; /**; * g_io_channel_new_file:; * @filename: A string containing the name of a file.; * @mode: One of ""r"", ""w"", ""a"", ""r+"", ""w+"", ""a+"". These have; * the same meaning as in fopen().; * @error: A location to return an error of type %G_IO_FILE_ERROR.; *; * Open a file @filename as a #GIOChannel using mode @mode. This; * channel will be closed when the last reference to it is dropped,; * so there is no need to call g_io_channel_close() (though doing; * so will not cause problems, as long as no attempt is made to; * access the channel after it is closed).; *; * Return value: A #GIOChannel on success, %NULL on failure.; **/; /**; * g_io_channel_close:; * @channel: A #GIOChannel; * ; * Close an IO channel. Any pending data to be written will be; * flushed, ignoring errors. The channel will not be freed until the; * last reference is dropped using g_io_channel_unref(). This; * function is deprecated: you should use g_io_channel_shutdown(); * instead.; **/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/glib/giochannel.c:648,access,access,648,graf2d/win32gdk/gdk/src/glib/giochannel.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/glib/giochannel.c,1,['access'],['access']
Security,"/* The handler did NOT handle the request. */; /* Some proper reactions would be:; 				 * a) close the connections without sending anything; 				 * b) send a 404 not found; 				 * c) try if there is a file matching the URI; 				 * It would be possible to do a, b or c in the callback; 				 * implementation, and return 1 - we cannot do anything; 				 * here, that is not possible in the callback.; 				 *; 				 * TODO: What would be the best reaction here?; 				 * (Note: The reaction may change, if there is a better; 				 * idea.); 				 */; /* For the moment, use option c: We look for a proper file,; 				 * but since a file request is not always a script resource,; 				 * the authorization check might be different. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c:681,authoriz,authorization,681,net/http/civetweb/civetweb.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c,1,['authoriz'],['authorization']
Security,/* The hash on a sequence */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/guihtml/src/TGHtmlParse.cxx:7,hash,hash,7,gui/guihtml/src/TGHtmlParse.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/guihtml/src/TGHtmlParse.cxx,1,['hash'],['hash']
Security,/* The maximum length of the path to the password file is limited */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c:41,password,password,41,net/http/civetweb/civetweb.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c,1,['password'],['password']
Security,"/* The minimum 'zlib' stream is assumed to be just the 2 byte header,; * 5 bytes minimum 'deflate' stream, and the 4 byte checksum.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:122,checksum,checksum,122,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,1,['checksum'],['checksum']
Security,"/* The parse routine is meant for dates typed in by a user, so it; * permits many formats but tries to catch common typos. If your data; * needs to be strictly validated, it is not an appropriate function.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/glib/gdate.h:160,validat,validated,160,graf2d/win32gdk/gdk/src/glib/gdate.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/glib/gdate.h,1,['validat'],['validated']
Security,"/* The png_set_<chunk> functions are for storing values in the png_info_struct.; * Similarly, the png_get_<chunk> calls are used to read values from the; * png_info_struct, either storing the parameters in the passed variables, or; * setting pointers into the png_info_struct where the data is stored. The; * png_get_<chunk> functions return a non-zero value if the data was available; * in info_ptr, or return zero and do not change any of the parameters if the; * data was not available.; *; * These functions should be used instead of directly accessing png_info; * to avoid problems with future changes in the size and internal layout of; * png_info_struct.; */; /* Returns ""flag"" if chunk data is valid in info_ptr. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:547,access,accessing,547,graf2d/asimage/src/libAfterImage/libpng/png.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h,1,['access'],['accessing']
Security,"/* The profile has been validated for basic; * security issues, so read the whole thing in.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:24,validat,validated,24,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,2,"['secur', 'validat']","['security', 'validated']"
Security,"/* The profile must have been previously validated for correctness, the; * length comes from the first four bytes. Only the base, deflate,; * compression is supported.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:41,validat,validated,41,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,1,['validat'],['validated']
Security,"/* The user callback takes precedence over the chunk keep value, but the; * keep value is still required to validate a save of a critical chunk.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:108,validat,validate,108,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,1,['validat'],['validate']
Security,/* The xy value must have been previously validated */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:42,validat,validated,42,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,1,['validat'],['validated']
Security,"/* There is no `PATH' in the environment. The default; 		* search path in GNU libc is the current directory followed by; 		* the path `confstr' returns for `_CS_PATH'.; 		*/; /* In GLib we put . last, for security, and don't use the; 		* unportable confstr(); UNIX98 does not actually specify; 		* what to search if PATH is unset. POSIX may, dunno.; 		*/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/glib/gutils.c:205,secur,security,205,graf2d/win32gdk/gdk/src/glib/gutils.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/glib/gutils.c,1,['secur'],['security']
Security,"/* There is no `PATH' in the environment. The default; 	 * search path in libc is the current directory followed by; 	 * the path `confstr' returns for `_CS_PATH'.; */; /* In GLib we put . last, for security, and don't use the; * unportable confstr(); UNIX98 does not actually specify; * what to search if PATH is unset. POSIX may, dunno.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/glib/gspawn.c:199,secur,security,199,graf2d/win32gdk/gdk/src/glib/gspawn.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/glib/gspawn.c,1,['secur'],['security']
Security,"/* These basic checks suggest that the data has not been; * modified, but if the check level is more than 1 perform; * our own crc32 checksum on the data.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:133,checksum,checksum,133,graf2d/asimage/src/libAfterImage/libpng/png.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c,1,['checksum'],['checksum']
Security,"/* This ""hash"" function will just return the key's adress as an; * unsigned integer. Useful for hashing on plain adresses or; * simple integer values.; * passing NULL into g_hash_table_new() as GHashFunc has the; * same effect as passing g_direct_hash().; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/glib/ghash.h:9,hash,hash,9,graf2d/win32gdk/gdk/src/glib/ghash.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/glib/ghash.h,2,['hash'],"['hash', 'hashing']"
Security,"/* This allows Pvariables for ARGS. ARGF machinery is above ARGFP.; * B is not needed because the variable may be changed by the Fortran routine,; * but because B is the only way to access an arbitrary macro argument. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/montecarlo/eg/inc/cfortran.h:182,access,access,182,montecarlo/eg/inc/cfortran.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/montecarlo/eg/inc/cfortran.h,1,['access'],['access']
Security,"/* This data comes from contrib/tools/checksum-icc run on downloads of; * all four ICC sRGB profiles from www.color.org.; */; /* adler32, crc32, MD5[4], intent, date, length, file-name */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:38,checksum,checksum-icc,38,graf2d/asimage/src/libAfterImage/libpng/png.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c,1,['checksum'],['checksum-icc']
Security,/* This following used to be declared (as globals) in ZDeflate.h */; /**; * Size of internal hash table.; *; * Previously controlled by various macros which no longer exist.; *; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/zip/src/Bits.h:93,hash,hash,93,core/zip/src/Bits.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/zip/src/Bits.h,1,['hash'],['hash']
Security,"/* This header file is to help porting code using Intel intrinsics; explicitly from x86_64 to powerpc64/powerpc64le. Since X86 SSE intrinsics mainly handles __m128 type, PowerPC; VMX/VSX ISA is a good match for vector float SIMD operations.; However scalar float operations in vector (XMM) registers require; the POWER8 VSX ISA (2.07) level. There are differences for data; format and placement of float scalars in the vector register, which; require extra steps to match SSE scalar float semantics on POWER. It should be noted that there's much difference between X86_64's; MXSCR and PowerISA's FPSCR/VSCR registers. It's recommended to use; portable <fenv.h> instead of access MXSCR directly. Most SSE scalar float intrinsic operations can be performed more; efficiently as C language float scalar operations or optimized to; use vector SIMD operations. We recommend this for new applications. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/ppc_wrappers/xmmintrin.h:672,access,access,672,interpreter/llvm-project/clang/lib/Headers/ppc_wrappers/xmmintrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/ppc_wrappers/xmmintrin.h,1,['access'],['access']
Security,"/* This header file is to help porting code using Intel intrinsics; explicitly from x86_64 to powerpc64/powerpc64le. Since X86 SSE2 intrinsics mainly handles __m128i and __m128d type,; PowerPC VMX/VSX ISA is a good match for vector float SIMD operations.; However scalar float operations in vector (XMM) registers require; the POWER8 VSX ISA (2.07) level. There are differences for data; format and placement of float scalars in the vector register, which; require extra steps to match SSE2 scalar float semantics on POWER. It should be noted that there's much difference between X86_64's; MXSCR and PowerISA's FPSCR/VSCR registers. It's recommended to use; portable <fenv.h> instead of access MXSCR directly. Most SSE2 scalar float intrinsic operations can be performed more; efficiently as C language float scalar operations or optimized to; use vector SIMD operations. We recommend this for new applications.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/ppc_wrappers/emmintrin.h:687,access,access,687,interpreter/llvm-project/clang/lib/Headers/ppc_wrappers/emmintrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/ppc_wrappers/emmintrin.h,1,['access'],['access']
Security,"/* This is used because in some compiler implementations non-aligned; * structure members are supported, so the offsetof approach below fails.; * Set PNG_ALIGN_SIZE=0 for compiler combinations where unaligned access; * is good for performance. Do not do this unless you have tested the; * result and understand it.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:209,access,access,209,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,1,['access'],['access']
Security,"/* This pair of functions encapsulates the operation of (a) compressing a; * text string, and (b) issuing it later as a series of chunk data writes.; * The compression_state structure is shared context for these functions; * set up by the caller to allow access to the relevant local variables.; *; * compression_buffer (new in 1.6.0) is just a linked list of zbuffer_size; * temporary buffers. From 1.6.0 it is retained in png_struct so that it will; * be correctly freed in the event of a write error (previous implementations; * just leaked memory.); */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c:255,access,access,255,graf2d/asimage/src/libAfterImage/libpng/pngwutil.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c,1,['access'],['access']
Security,/* This should be a binary subdivision search or a hash for; * matching the chunk name rather than a linear search.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c:51,hash,hash,51,graf2d/asimage/src/libAfterImage/libpng/pngread.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c,1,['hash'],['hash']
Security,"/* This table is used to remember the original form of pointers; * to large buffers (64K). Such pointers are normalized with a zero offset.; * Since MSDOS is not a preemptive multitasking OS, this table is not; * protected from concurrent access. This hack doesn't work anyway on; * a protected system like OS/2. Use Microsoft C instead.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zutil.c:239,access,access,239,builtins/zlib/zutil.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zutil.c,2,['access'],['access']
Security,"/* To speed up deflation, hash chains are never searched beyond this length.; * A higher limit improves compression ratio but degrades the speed.; */; /* local */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/zip/src/Bits.h:26,hash,hash,26,core/zip/src/Bits.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/zip/src/Bits.h,1,['hash'],['hash']
Security,"/* To speed up deflation, hash chains are never searched beyond this; * length. A higher limit improves compression ratio but degrades the; * speed.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate.h:26,hash,hash,26,builtins/zlib/deflate.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate.h,3,['hash'],['hash']
Security,"/* To validate that the context re-use logic is sound, and that we don't; * access stuff that this compression hasn't initialized, we re-""poison""; * the workspace (or at least the non-static, non-table parts of it); * every time we start a new compression. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h:6,validat,validate,6,builtins/zstd/compress/zstd_cwksp.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h,2,"['access', 'validat']","['access', 'validate']"
Security,"/* To validate that the table re-use logic is sound, and that we don't; * access table space that we haven't cleaned, we re-""poison"" the table; * space every time we mark it dirty. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h:6,validat,validate,6,builtins/zstd/compress/zstd_cwksp.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h,2,"['access', 'validat']","['access', 'validate']"
Security,"/* To validate that the table re-use logic is sound, and that we don't; * access table space that we haven't cleaned, we re-""poison"" the table; * space every time we mark it dirty.; *; * This function however is intended to operate on those dirty tables and; * re-clean them. So when this function is used correctly, we can unpoison; * the memory it operated on. This introduces a blind spot though, since; * if we now try to operate on __actually__ poisoned memory, we will not; * detect that. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:6,validat,validate,6,builtins/zstd/compress/zstd_compress.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c,2,"['access', 'validat']","['access', 'validate']"
Security,"/* Try to keep application from accessing now-deleted marker list.; * A bit kludgy to do it here, but this is the most central place.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jcomapi.c:32,access,accessing,32,graf2d/asimage/src/libAfterImage/libjpeg/jcomapi.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jcomapi.c,1,['access'],['accessing']
Security,/* Turn off validation of the ADLER32 checksum in IDAT chunks */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:12,validat,validation,12,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,2,"['checksum', 'validat']","['checksum', 'validation']"
Security,"/* UTF-8, just validate, emulate g_iconv */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/glib/giochannel.c:15,validat,validate,15,graf2d/win32gdk/gdk/src/glib/giochannel.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/glib/giochannel.c,1,['validat'],['validate']
Security,/* Update Hash Table */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_lazy.c:10,Hash,Hash,10,builtins/zstd/compress/zstd_lazy.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_lazy.c,4,['Hash'],['Hash']
Security,/* Update window state and fill hash table with dict */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c:32,hash,hash,32,builtins/zstd/compress/zstdmt_compress.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c,1,['hash'],['hash']
Security,/* Use Lua background state for access log */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c:32,access,access,32,net/http/civetweb/civetweb.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c,1,['access'],['access']
Security,"/* Use direct access to info_ptr here because otherwise the simplified API; * would require PNG_EASY_ACCESS_SUPPORTED (just for this.) Note this is; * checking the value after libpng expansions, not the original value in the; * PNG.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c:14,access,access,14,graf2d/asimage/src/libAfterImage/libpng/pngread.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c,1,['access'],['access']
Security,/* Use global passwords file */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c:14,password,passwords,14,net/http/civetweb/civetweb.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c,1,['password'],['passwords']
Security,"/* Use the global passwords file, if specified by auth_gpass option,; * or search for .htpasswd in the requested directory. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c:18,password,passwords,18,net/http/civetweb/civetweb.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c,1,['password'],['passwords']
Security,"/* Used nonces, used for authentication */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c:25,authenticat,authentication,25,net/http/civetweb/civetweb.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c,1,['authenticat'],['authentication']
Security,/* Used to compute the rolling hash.; * Depends on ldmParams.minMatchLength */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h:31,hash,hash,31,builtins/zstd/compress/zstd_compress_internal.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h,1,['hash'],['hash']
Security,"/* User defined pointer in thread local storage,; 	 * for quick access */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c:64,access,access,64,net/http/civetweb/civetweb.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c,1,['access'],['access']
Security,"/* User specified: if == 1, will ignore checksums in compressed frame. Default == 0 */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_internal.h:40,checksum,checksums,40,builtins/zstd/decompress/zstd_decompress_internal.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_internal.h,1,['checksum'],['checksums']
Security,"/* User-defined data */; /* Part 2 - Logical domain:; 	 * This holds hostname, TLS certificate, document root, ...; 	 * set for a domain hosted at the server.; 	 * There may be multiple domains hosted at one physical server.; 	 * The default domain ""dd"" is the first element of a list of; 	 * domains.; 	 */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c:83,certificate,certificate,83,net/http/civetweb/civetweb.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c,1,['certificate'],['certificate']
Security,"/* Validate UTF8 (must be done after we find the end, since; * we could have a trailing incomplete char); */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/glib/gmarkup.c:3,Validat,Validate,3,graf2d/win32gdk/gdk/src/glib/gmarkup.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/glib/gmarkup.c,1,['Validat'],['Validate']
Security,"/* Validate a UTF8 string, return TRUE if valid, put pointer to; * first invalid char in **end; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/glib/gunicode.h:3,Validat,Validate,3,graf2d/win32gdk/gdk/src/glib/gunicode.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/glib/gunicode.h,1,['Validat'],['Validate']
Security,/* Validate a Unicode character */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/glib/gunicode.h:3,Validat,Validate,3,graf2d/win32gdk/gdk/src/glib/gunicode.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/glib/gunicode.h,1,['Validat'],['Validate']
Security,/* Validate component indexes */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jcmaster.c:3,Validat,Validate,3,graf2d/asimage/src/libAfterImage/libjpeg/jcmaster.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jcmaster.c,1,['Validat'],['Validate']
Security,"/* Validate parameters, determine derived values */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jcmaster.c:3,Validat,Validate,3,graf2d/asimage/src/libAfterImage/libjpeg/jcmaster.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jcmaster.c,1,['Validat'],['Validate']
Security,/* Validate params[nparams] */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngset.c:3,Validat,Validate,3,graf2d/asimage/src/libAfterImage/libpng/pngset.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngset.c,1,['Validat'],['Validate']
Security,/* Validate progression parameters */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jcmaster.c:3,Validat,Validate,3,graf2d/asimage/src/libAfterImage/libjpeg/jcmaster.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jcmaster.c,1,['Validat'],['Validate']
Security,/* Validate progressive scan parameters */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdarith.c:3,Validat,Validate,3,graf2d/asimage/src/libAfterImage/libjpeg/jdarith.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdarith.c,2,['Validat'],['Validate']
Security,"/* Validate symbols as being reasonable.; * For AC tables, we make no check, but accept all byte values 0..255.; * For DC tables, we require the symbols to be in range 0..15.; * (Tighter bounds could be applied depending on the data depth and mode,; * but this is sufficient to ensure safe decoding.); */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdhuff.c:3,Validat,Validate,3,graf2d/asimage/src/libAfterImage/libjpeg/jdhuff.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdhuff.c,1,['Validat'],['Validate']
Security,/* Validate that the input/output buffers match the expectations set by; * ZSTD_setBufferExpectations.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:3,Validat,Validate,3,builtins/zstd/compress/zstd_compress.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c,1,['Validat'],['Validate']
Security,"/* Validate the ASCII numbers, need two ASCII numbers separated by; * a '\0' and they need to fit exactly in the chunk data.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:3,Validat,Validate,3,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,1,['Validat'],['Validate']
Security,"/* Validate the counts. We do this here mainly so we can copy the right; * number of symbols from the val[] array, without risking marching off; * the end of memory. jchuff.c will do a more thorough test later.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jcparam.c:3,Validat,Validate,3,graf2d/asimage/src/libAfterImage/libjpeg/jcparam.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jcparam.c,1,['Validat'],['Validate']
Security,/* Validate the depth - it must be a multiple of 8 */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:3,Validat,Validate,3,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,1,['Validat'],['Validate']
Security,"/* Validate the include paths - the include path used to generate pnglibconf.h; * must match that used in the build, or we must be using pnglibconf.h.prebuilt:; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:3,Validat,Validate,3,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,1,['Validat'],['Validate']
Security,/* Validate the previous Huffman table */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_superblock.c:3,Validat,Validate,3,builtins/zstd/compress/zstd_compress_superblock.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_superblock.c,1,['Validat'],['Validate']
Security,/* Validate the unit. */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:3,Validat,Validate,3,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,1,['Validat'],['Validate']
Security,"/* Validate the value to ensure it is in a reasonable range. The value; * is expected to be 1 or greater, but this range test allows for some; * viewing correction values. The intent is to weed out users of this API; * who use the inverse of the gamma value accidentally! Since some of these; * values are reasonable this may have to be changed:; *; * 1.6.x: changed from 0.07..3 to 0.01..100 (to accommodate the optimal 16-bit; * gamma of 36, and its reciprocal.); */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c:3,Validat,Validate,3,graf2d/asimage/src/libAfterImage/libpng/pngrtran.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c,1,['Validat'],['Validate']
Security,/* Validate thumbnail dimensions and issue appropriate messages */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c:3,Validat,Validate,3,graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmarker.c,1,['Validat'],['Validate']
Security,/* Validate user-specified bits are not reserved by DAOS */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/libdaos_mock/libdaos_mock.cxx:3,Validat,Validate,3,tree/ntuple/v7/src/libdaos_mock/libdaos_mock.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/libdaos_mock/libdaos_mock.cxx,1,['Validat'],['Validate']
Security,/* We assume jcmaster.c already validated the progressive scan parameters. */; /* Select execution routines */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jcarith.c:32,validat,validated,32,graf2d/asimage/src/libAfterImage/libjpeg/jcarith.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jcarith.c,1,['validat'],['validated']
Security,/* We assume jcmaster.c already validated the scan parameters. */; /* Select execution routine */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jchuff.c:32,validat,validated,32,graf2d/asimage/src/libAfterImage/libjpeg/jchuff.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jchuff.c,1,['validat'],['validated']
Security,/* We assume jcmaster.c already validated the scan parameters. */; /* Select execution routines */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jcphuff.c:32,validat,validated,32,graf2d/asimage/src/libAfterImage/libjpeg/jcphuff.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jcphuff.c,1,['validat'],['validated']
Security,"/* We don't have enough bytes buffered to initialize the hash, but; * we know we have at least RSYNC_LENGTH bytes total.; * Start scanning after the first RSYNC_LENGTH bytes less the bytes; * already buffered.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c:57,hash,hash,57,builtins/zstd/compress/zstdmt_compress.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c,1,['hash'],['hash']
Security,/* We emulate the GDK_SELECTION window properties by storing; * it's data in a per-window hashtable.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/gdk/win32/gdkselection-win32.c:90,hash,hashtable,90,graf2d/win32gdk/gdk/src/gdk/win32/gdkselection-win32.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/gdk/win32/gdkselection-win32.c,1,['hash'],['hashtable']
Security,/* We have already filled up to filledIp so if ip ends up less than filledIp; * we have positions in the hash table beyond the current position. This is; * a problem if we reuse the hash table. So we have to remove these positions; * from the hash table.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/lz4/lz4.c:105,hash,hash,105,builtins/lz4/lz4.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/lz4/lz4.c,3,['hash'],['hash']
Security,/* We have enough bytes buffered to initialize the hash.; * Start scanning at the beginning of the input.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c:51,hash,hash,51,builtins/zstd/compress/zstdmt_compress.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c,1,['hash'],['hash']
Security,"/* We know the hashtable is oversized by a factor of `bucketSize`.; * We are going to temporarily pretend `bucketSize == 1`, keeping only a; * single entry. We will use the rest of the space to construct a temporary; * chaintable.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_lazy.c:15,hash,hashtable,15,builtins/zstd/compress/zstd_lazy.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_lazy.c,1,['hash'],['hashtable']
Security,"/* We validate UTF-8, so we can't get a partial write */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/glib/giochannel.c:6,validat,validate,6,graf2d/win32gdk/gdk/src/glib/giochannel.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/glib/giochannel.c,1,['validat'],['validate']
Security,"/* ZSTD_buildFSETable() :; * generate FSE decoding table for one symbol (ll, ml or off); * cannot fail if input is valid =>; * all inputs are presumed validated at this stage */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_block.c:151,validat,validated,151,builtins/zstd/decompress/zstd_decompress_block.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_block.c,1,['validat'],['validated']
Security,"/* ZSTD_c_stableInBuffer; * Experimental parameter.; * Default is 0 == disabled. Set to 1 to enable.; *; * Tells the compressor that the ZSTD_inBuffer will ALWAYS be the same; * between calls, except for the modifications that zstd makes to pos (the; * caller must not modify pos). This is checked by the compressor, and; * compression will fail if it ever changes. This means the only flush; * mode that makes sense is ZSTD_e_end, so zstd will error if ZSTD_e_end; * is not used. The data in the ZSTD_inBuffer in the range [src, src + pos); * MUST not be modified during compression or you will get data corruption.; *; * When this flag is enabled zstd won't allocate an input window buffer,; * because the user guarantees it can reference the ZSTD_inBuffer until; * the frame is complete. But, it will still allocate an output buffer; * large enough to fit a block (see ZSTD_c_stableOutBuffer). This will also; * avoid the memcpy() from the input buffer to the input window buffer.; *; * NOTE: ZSTD_compressStream2() will error if ZSTD_e_end is not used.; * That means this flag cannot be used with ZSTD_compressStream().; *; * NOTE: So long as the ZSTD_inBuffer always points to valid memory, using; * this flag is ALWAYS memory safe, and will never access out-of-bounds; * memory. However, compression WILL fail if you violate the preconditions.; *; * WARNING: The data in the ZSTD_inBuffer in the range [dst, dst + pos) MUST; * not be modified during compression or you will get data corruption. This; * is because zstd needs to reference data in the ZSTD_inBuffer to find; * matches. Normally zstd maintains its own window buffer for this purpose,; * but passing this flag tells zstd to use the user provided buffer.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:1253,access,access,1253,builtins/zstd/zstd.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h,1,['access'],['access']
Security,"/* ZSTD_c_validateSequences; * Default is 0 == disabled. Set to 1 to enable sequence validation.; *; * For use with sequence compression API: ZSTD_compressSequences().; * Designates whether or not we validate sequences provided to ZSTD_compressSequences(); * during function execution.; *; * Without validation, providing a sequence that does not conform to the zstd spec will cause; * undefined behavior, and may produce a corrupted block.; *; * With validation enabled, a if sequence is invalid (see doc/zstd_compression_format.md for; * specifics regarding offset/matchlength requirements) then the function will bail out and; * return an error.; *; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:85,validat,validation,85,builtins/zstd/zstd.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h,4,['validat'],"['validate', 'validation']"
Security,"/* ZSTD_d_forceIgnoreChecksum; * Experimental parameter.; * Default is 0 == disabled. Set to 1 to enable; *; * Tells the decompressor to skip checksum validation during decompression, regardless; * of whether checksumming was specified during compression. This offers some; * slight performance benefits, and may be useful for debugging.; * Param has values of type ZSTD_forceIgnoreChecksum_e; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:142,checksum,checksum,142,builtins/zstd/zstd.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h,3,"['checksum', 'validat']","['checksum', 'checksumming', 'validation']"
Security,"/* ZSTD_d_stableOutBuffer; * Experimental parameter.; * Default is 0 == disabled. Set to 1 to enable.; *; * Tells the decompressor that the ZSTD_outBuffer will ALWAYS be the same; * between calls, except for the modifications that zstd makes to pos (the; * caller must not modify pos). This is checked by the decompressor, and; * decompression will fail if it ever changes. Therefore the ZSTD_outBuffer; * MUST be large enough to fit the entire decompressed frame. This will be; * checked when the frame content size is known. The data in the ZSTD_outBuffer; * in the range [dst, dst + pos) MUST not be modified during decompression; * or you will get data corruption.; *; * When this flags is enabled zstd won't allocate an output buffer, because; * it can write directly to the ZSTD_outBuffer, but it will still allocate; * an input buffer large enough to fit any compressed block. This will also; * avoid the memcpy() from the internal output buffer to the ZSTD_outBuffer.; * If you need to avoid the input buffer allocation use the buffer-less; * streaming API.; *; * NOTE: So long as the ZSTD_outBuffer always points to valid memory, using; * this flag is ALWAYS memory safe, and will never access out-of-bounds; * memory. However, decompression WILL fail if you violate the preconditions.; *; * WARNING: The data in the ZSTD_outBuffer in the range [dst, dst + pos) MUST; * not be modified during decompression or you will get data corruption. This; * is because zstd needs to reference data in the ZSTD_outBuffer to regenerate; * matches. Normally zstd maintains its own buffer for this purpose, but passing; * this flag tells zstd to use the user provided buffer.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:1196,access,access,1196,builtins/zstd/zstd.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h,1,['access'],['access']
Security,/* Zero the frequency of hash value of each dmer covered by the chosen segment. */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/fastcover.c:25,hash,hash,25,builtins/zstd/dictBuilder/fastcover.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/fastcover.c,1,['hash'],['hash']
Security,/* access advanced declarations */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/xxhash/xxhash.c:3,access,access,3,builtins/xxhash/xxhash.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/xxhash/xxhash.c,1,['access'],['access']
Security,/* access definitions */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/xxhash/xxhash.c:3,access,access,3,builtins/xxhash/xxhash.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/xxhash/xxhash.c,1,['access'],['access']
Security,/* add frame checksum if necessary (can only happen once) */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c:13,checksum,checksum,13,builtins/zstd/compress/zstdmt_compress.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c,1,['checksum'],['checksum']
Security,"/* adler32.c -- compute the Adler-32 checksum of a data stream; * Copyright (C) 1995-2004 Mark Adler; * For conditions of distribution and use, see copyright notice in zlib.h; */; /* @(#) $Id$ */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/adler32.c:37,checksum,checksum,37,graf2d/asimage/src/libAfterImage/zlib/adler32.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/adler32.c,1,['checksum'],['checksum']
Security,"/* adler32.c -- compute the Adler-32 checksum of a data stream; * Copyright (C) 1995-2011 Mark Adler; * For conditions of distribution and use, see copyright notice in zlib.h; */; /* @(#) $Id$ */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/adler32.c:37,checksum,checksum,37,builtins/zlib/adler32.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/adler32.c,2,['checksum'],['checksum']
Security,/* always - larger hashes are truncated */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/MachO.h:19,hash,hashes,19,interpreter/llvm-project/llvm/include/llvm/BinaryFormat/MachO.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/MachO.h,1,['hash'],['hashes']
Security,/* another round for frame checksum */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress.c:27,checksum,checksum,27,builtins/zstd/decompress/zstd_decompress.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress.c,1,['checksum'],['checksum']
Security,/* assume unaligned accesses are OK */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:20,access,accesses,20,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,1,['access'],['accesses']
Security,/* block checksum */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/lz4/lz4frame.c:9,checksum,checksum,9,builtins/lz4/lz4frame.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/lz4/lz4frame.c,1,['checksum'],['checksum']
Security,/* block footer : checksum (optional) */; /*-************************************; * Structures and local types; **************************************/,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/lz4/lz4frame.c:18,checksum,checksum,18,builtins/lz4/lz4frame.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/lz4/lz4frame.c,1,['checksum'],['checksum']
Security,/* callback already processed the request. Store the; 			return value as a status code for the access log. */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c:95,access,access,95,net/http/civetweb/civetweb.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c,1,['access'],['access']
Security,/* cannot compress within `dst` budget. Stored indexes in hash table are nonetheless fine */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/lz4/lz4.c:58,hash,hash,58,builtins/lz4/lz4.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/lz4/lz4.c,3,['hash'],['hash']
Security,/* case sensitive strings hash */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/afterbase.c:26,hash,hash,26,graf2d/asimage/src/libAfterImage/afterbase.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/afterbase.c,1,['hash'],['hash']
Security,/* check block checksum for recently transferred uncompressed block */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/lz4/lz4frame.c:15,checksum,checksum,15,builtins/lz4/lz4frame.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/lz4/lz4frame.c,1,['checksum'],['checksum']
Security,/* checks if permissions have secure field unset */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/arm_cmse.h:30,secur,secure,30,interpreter/llvm-project/clang/lib/Headers/arm_cmse.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/arm_cmse.h,1,['secur'],['secure']
Security,/* checksum of compressed data */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/lz4/lz4frame.c:3,checksum,checksum,3,builtins/lz4/lz4frame.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/lz4/lz4frame.c,1,['checksum'],['checksum']
Security,/* clear hash table if present */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/gdk/win32/gdkcc-win32.c:9,hash,hash,9,graf2d/win32gdk/gdk/src/gdk/win32/gdkcc-win32.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/gdk/win32/gdkcc-win32.c,1,['hash'],['hash']
Security,"/* clear the hash table, we don't use it when dithering */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/gdk/win32/gdkcc-win32.c:13,hash,hash,13,graf2d/win32gdk/gdk/src/gdk/win32/gdkcc-win32.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/gdk/win32/gdkcc-win32.c,1,['hash'],['hash']
Security,/* code -> hashtable */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/src/gifencode.c:11,hash,hashtable,11,graf2d/win32gdk/src/gifencode.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/src/gifencode.c,2,['hash'],['hashtable']
Security,"/* compressed size, including the checksum. */; // NOTE: these next 6 bytes are required from the ROOT compressed buffer format;; // upper layers will assume they are laid out in a specific manner.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/lz4/src/ZipLZ4.cxx:34,checksum,checksum,34,core/lz4/src/ZipLZ4.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/lz4/src/ZipLZ4.cxx,1,['checksum'],['checksum']
Security,/* conn->dom_ctx is set in get_request */; /* Get SSL client certificate information (if set) */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c:61,certificate,certificate,61,net/http/civetweb/civetweb.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c,1,['certificate'],['certificate']
Security,/* content Checksum */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/lz4/lz4frame.c:11,Checksum,Checksum,11,builtins/lz4/lz4frame.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/lz4/lz4frame.c,1,['Checksum'],['Checksum']
Security,/* converge into final hash */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/xxhash/xxhash.h:23,hash,hash,23,builtins/xxhash/xxhash.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/xxhash/xxhash.h,3,['hash'],['hash']
Security,"/* current operating mode */; /* If using just a strip buffer, this points to the entire set of buffers; * (we allocate one for each component). In the full-image case, this; * points to the currently accessible strips of the virtual arrays.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jcmainct.c:201,access,accessible,201,graf2d/asimage/src/libAfterImage/libjpeg/jcmainct.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jcmainct.c,1,['access'],['accessible']
Security,"/* defined(XXH_STATIC_LINKING_ONLY) && !defined(XXHASH_H_STATIC_13879238742) */; /* ======================================================================== */; /* ======================================================================== */; /* ======================================================================== */; /*-**********************************************************************; * xxHash implementation; *-**********************************************************************; * xxHash's implementation used to be hosted inside xxhash.c.; *; * However, inlining requires implementation to be visible to the compiler,; * hence be included alongside the header.; * Previously, implementation was hosted inside xxhash.c,; * which was then #included when inlining was activated.; * This construction created issues with a few build and install systems,; * as it required xxhash.c to be stored in /include directory.; *; * xxHash implementation is now directly integrated within xxhash.h.; * As a consequence, xxhash.c is no longer needed in /include.; *; * xxhash.c is still available and is still useful.; * In a ""normal"" setup, when xxhash is not inlined,; * xxhash.h only exposes the prototypes and public symbols,; * while xxhash.c can be built into an object file xxhash.o; * which can then be linked into the final binary.; ************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/xxhash/xxhash.h:1189,expose,exposes,1189,builtins/xxhash/xxhash.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/xxhash/xxhash.h,1,['expose'],['exposes']
Security,/* direct interpreter access ---------------------------------------------- */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/capi.h:22,access,access,22,bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/capi.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/capi.h,2,['access'],['access']
Security,/* dump_buffer needs access to this */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jchuff.c:21,access,access,21,graf2d/asimage/src/libAfterImage/libjpeg/jchuff.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jchuff.c,1,['access'],['access']
Security,/* equivalent to `curr > repIndex >= dictLimit` */; /* We must validate the repcode offset because when we're using a dictionary the; * valid offset range shrinks when the dictionary goes out of bounds.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_opt.c:63,validat,validate,63,builtins/zstd/compress/zstd_opt.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_opt.c,1,['validat'],['validate']
Security,/* exposed contents for gzgetc() macro */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzguts.h:3,expose,exposed,3,builtins/zlib/gzguts.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzguts.h,1,['expose'],['exposed']
Security,/* fill conventional hash table and conventional chain table */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_lazy.c:21,hash,hash,21,builtins/zstd/compress/zstd_lazy.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_lazy.c,1,['hash'],['hash']
Security,/* fill the buckets of the hash table */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_lazy.c:27,hash,hash,27,builtins/zstd/compress/zstd_lazy.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_lazy.c,1,['hash'],['hash']
Security,"/* find_current_text_end () assumes the string starts at; * a character start, so we need to validate at least; * that much. It doesn't assume any following bytes; * are valid.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/glib/gmarkup.c:93,validat,validate,93,graf2d/win32gdk/gdk/src/glib/gmarkup.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/glib/gmarkup.c,1,['validat'],['validate']
Security,/* for access in EdgeLeq() */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve7/glu/sweep.c:7,access,access,7,graf3d/eve7/glu/sweep.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve7/glu/sweep.c,1,['access'],['access']
Security,"/* for crypt.c: include zip password functions, not unzip */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/zip/src/ZIP.h:28,password,password,28,core/zip/src/ZIP.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/zip/src/ZIP.h,1,['password'],['password']
Security,"/* for strict validation, an actual IPv6 argument is needed */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c:14,validat,validation,14,net/http/civetweb/civetweb.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c,1,['validat'],['validation']
Security,"/* for the keywod separator */; /* We leave it to the application to meet PNG-1.0 requirements on the; * contents of the text. PNG-1.0 through PNG-1.2 discourage the use of; * any non-Latin-1 characters except for NEWLINE. ISO PNG, however,; * specifies that the text is UTF-8 and this really doesn't require any; * checking.; *; * The NUL character is forbidden by PNG-1.0 through PNG-1.2 and ISO PNG.; *; * TODO: validate the language tag correctly (see the spec.); */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c:415,validat,validate,415,graf2d/asimage/src/libAfterImage/libpng/pngwutil.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c,1,['validat'],['validate']
Security,/* frame checksum */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress.c:9,checksum,checksum,9,builtins/zstd/decompress/zstd_decompress.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress.c,1,['checksum'],['checksum']
Security,/* get internal structure and check integrity */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzlib.c:36,integrity,integrity,36,builtins/zlib/gzlib.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzlib.c,7,['integrity'],['integrity']
Security,"/* give access to the advanced API, required to compile implementations */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/xxhash/xxhash.h:8,access,access,8,builtins/xxhash/xxhash.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/xxhash/xxhash.h,1,['access'],['access']
Security,"/* gzgetc() macro and its supporting function and exposed data structure. Note; * that the real internal state is much larger than the exposed structure.; * This abbreviated structure exposes just enough for the gzgetc() macro. The; * user should not mess with these exposed elements, since their names or; * behavior could change in the future, perhaps even capriciously. They can; * only be used by the gzgetc() macro. You have been warned.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:50,expose,exposed,50,builtins/zlib/zlib.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h,4,['expose'],"['exposed', 'exposes']"
Security,"/* gzip modes, also provide a little integrity check on the passed structure */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzguts.h:37,integrity,integrity,37,builtins/zlib/gzguts.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzguts.h,1,['integrity'],['integrity']
Security,/* hash code */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regex2.h:3,hash,hash,3,interpreter/llvm-project/llvm/lib/Support/regex2.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regex2.h,1,['hash'],['hash']
Security,/* hash index of string to be inserted */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate.h:3,hash,hash,3,builtins/zlib/deflate.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate.h,4,['hash'],['hash']
Security,/* hash of locale specific glyphs */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/asfont.h:3,hash,hash,3,graf2d/asimage/src/libAfterImage/asfont.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/asfont.h,1,['hash'],['hash']
Security,/* hash table */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/src/gifencode.c:3,hash,hash,3,graf2d/win32gdk/src/gifencode.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/src/gifencode.c,2,['hash'],['hash']
Security,/* hash table of allocated colors */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/gdk/gdkcc.h:3,hash,hash,3,graf2d/win32gdk/gdk/src/gdk/gdkcc.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/gdk/gdkcc.h,1,['hash'],['hash']
Security,/* hash table size */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/src/gifencode.c:3,hash,hash,3,graf2d/win32gdk/src/gifencode.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/src/gifencode.c,2,['hash'],['hash']
Security,/* head of hash chain */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate.c:11,hash,hash,11,builtins/zlib/deflate.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate.c,4,['hash'],['hash']
Security,/* head of the hash chain */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate.c:15,hash,hash,15,builtins/zlib/deflate.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate.c,4,['hash'],['hash']
Security,"/* http://www.webdav.org/specs/rfc4918.html, 9.1:; * Some PROPFIND results MAY be cached, with care,; * as there is no cache validation mechanism for; * most properties. This method is both safe and; * idempotent (see Section 9.1 of [RFC2616]). */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c:125,validat,validation,125,net/http/civetweb/civetweb.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c,1,['validat'],['validation']
Security,"/* http://www.webdav.org/specs/rfc4918.html, 9.1:; * When MKCOL is invoked without a request body,; * the newly created collection SHOULD have no; * members. A MKCOL request message may contain; * a message body. The precise behavior of a MKCOL; * request when the body is present is undefined,; * ... ==> We do not support MKCOL with body data.; * This method is idempotent, but not safe (see; * Section 9.1 of [RFC2616]). Responses to this; * method MUST NOT be cached. */; /* Methods for write access to files on WEBDAV (RFC 2518) */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c:497,access,access,497,net/http/civetweb/civetweb.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c,1,['access'],['access']
Security,"/* if (pos >= RSYNC_LENGTH) assert(ZSTD_rollingHash_compute(istart + pos - RSYNC_LENGTH, RSYNC_LENGTH) == hash); */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c:106,hash,hash,106,builtins/zstd/compress/zstdmt_compress.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c,1,['hash'],['hash']
Security,"/* if == 1, will validate checksum. Is == 1 if (fParams.checksumFlag == 1) and (forceIgnoreChecksum == 0). */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_internal.h:17,validat,validate,17,builtins/zstd/decompress/zstd_decompress_internal.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_internal.h,3,"['checksum', 'validat']","['checksum', 'checksumFlag', 'validate']"
Security,/* impossible: pre-validated */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h:19,validat,validated,19,builtins/zstd/compress/zstd_compress_internal.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h,1,['validat'],['validated']
Security,/* insert dictionary into window and hash */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate.c:37,hash,hash,37,builtins/zlib/deflate.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate.c,2,['hash'],['hash']
Security,/* ldm hash table */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:7,hash,hash,7,builtins/zstd/compress/zstd_compress.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c,1,['hash'],['hash']
Security,/* ll validated; now adjust match length */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/lz4/lz4hc.c:6,validat,validated,6,builtins/lz4/lz4hc.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/lz4/lz4hc.c,2,['validat'],['validated']
Security,/* max hash chain length */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate.c:7,hash,hash,7,builtins/zlib/deflate.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate.c,4,['hash'],['hash']
Security,/* max rows accessed by access_virt_barray */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:12,access,accessed,12,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,1,['access'],['accessed']
Security,/* max rows accessed by access_virt_sarray */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:12,access,accessed,12,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,1,['access'],['accessed']
Security,"/* max size of the hash we'll support */; /*; * Currently only to support Legacy VPN plugins, and Mac App Store; * but intended to replace all the various platform code, dev code etc. bits.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/MachO.h:19,hash,hash,19,interpreter/llvm-project/llvm/include/llvm/BinaryFormat/MachO.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/MachO.h,1,['hash'],['hash']
Security,/* mg_authorization_handler. Callback function definition for mg_set_auth_handler. Parameters:; conn: current connection information.; cbdata: the callback data configured with mg_set_request_handler().; Returns:; 0: access denied; 1: access granted; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.h:217,access,access,217,net/http/civetweb/civetweb.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.h,2,['access'],['access']
Security,"/* mg_request_handler. Called when a new request comes in. This callback is URI based; and configured with mg_set_request_handler(). Parameters:; conn: current connection information.; cbdata: the callback data configured with mg_set_request_handler().; Returns:; 0: the handler could not handle the request, so fall through.; 1 - 999: the handler processed the request. The return code is; stored as a HTTP status code for the access log. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.h:428,access,access,428,net/http/civetweb/civetweb.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.h,1,['access'],['access']
Security,/* mg_set_auth_handler. Sets or removes a URI mapping for an authorization handler.; This function works similar to mg_set_request_handler - see there. */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.h:61,authoriz,authorization,61,net/http/civetweb/civetweb.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.h,1,['authoriz'],['authorization']
Security,/* move chain pointers into the last entry of each hash bucket */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_lazy.c:51,hash,hash,51,builtins/zstd/compress/zstd_lazy.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_lazy.c,1,['hash'],['hash']
Security,"/* no checksum, frame is completed */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/lz4/lz4frame.c:6,checksum,checksum,6,builtins/lz4/lz4frame.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/lz4/lz4frame.c,1,['checksum'],['checksum']
Security,/* nonce is from a previous start of the server and no longer valid; 		 * (replay attack?) */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c:82,attack,attack,82,net/http/civetweb/civetweb.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c,1,['attack'],['attack']
Security,"/* note : bets that, in most cases, hash values are different */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/xxhash/xxhash.h:36,hash,hash,36,builtins/xxhash/xxhash.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/xxhash/xxhash.h,1,['hash'],['hash']
Security,"/* note : this operation can overflow when seq.offset is really too large, which can only happen when input is corrupted.; * No consequence though : no memory access will occur, offset is only used for prefetching */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_block.c:159,access,access,159,builtins/zstd/decompress/zstd_decompress_block.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_block.c,1,['access'],['access']
Security,/* number of elements in hash table */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate.h:25,hash,hash,25,builtins/zlib/deflate.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate.h,3,['hash'],['hash']
Security,/* number of ordinary (code) hash slots */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/MachO.h:29,hash,hash,29,interpreter/llvm-project/llvm/include/llvm/BinaryFormat/MachO.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/MachO.h,1,['hash'],['hash']
Security,/* number of special hash slots */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/MachO.h:21,hash,hash,21,interpreter/llvm-project/llvm/include/llvm/BinaryFormat/MachO.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/MachO.h,1,['hash'],['hash']
Security,/* offset of hash slot element at index zero */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/MachO.h:13,hash,hash,13,interpreter/llvm-project/llvm/include/llvm/BinaryFormat/MachO.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/MachO.h,1,['hash'],['hash']
Security,/* optional data structure related to this; 				 hashable value */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/asim_afterbase.h:49,hash,hashable,49,graf2d/asimage/src/libAfterImage/asim_afterbase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/asim_afterbase.h,1,['hash'],['hashable']
Security,/* params are supposed to be fully validated at this point */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:35,validat,validated,35,builtins/zstd/compress/zstd_compress.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c,1,['validat'],['validated']
Security,/* params supposed partially fully validated at this point */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c:35,validat,validated,35,builtins/zstd/compress/zstdmt_compress.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c,1,['validat'],['validated']
Security,"/* png_info contains information read from or to be written to a PNG file. One; * or more of these must exist while reading or creating a PNG file. The; * information is not used by libpng during read but is used to control what; * gets written when a PNG file is created. ""png_get_"" function calls read; * information during read and ""png_set_"" functions calls write information; * when creating a PNG.; * been moved into a separate header file that is not accessible to; * applications. Read libpng-manual.txt or libpng.3 for more info.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:458,access,accessible,458,graf2d/asimage/src/libAfterImage/libpng/png.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h,1,['access'],['accessible']
Security,"/* pngstruct.h - header file for PNG reference library; *; * Copyright (c) 2018-2022 Cosmin Truta; * Copyright (c) 1998-2002,2004,2006-2018 Glenn Randers-Pehrson; * Copyright (c) 1996-1997 Andreas Dilger; * Copyright (c) 1995-1996 Guy Eric Schalnat, Group 42, Inc.; *; * This code is released under the libpng license.; * For conditions of distribution and use, see the disclaimer; * and license in png.h; */; /* The structure that holds the information to read and write PNG files.; * The only people who need to care about what is inside of this are the; * people who will be modifying the library for their own special needs.; * It should NOT be accessed directly by an application.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngstruct.h:649,access,accessed,649,graf2d/asimage/src/libAfterImage/libpng/pngstruct.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngstruct.h,1,['access'],['accessed']
Security,/* potential ptrdiff_t overflow (32-bits mode) */; /* rescale hash table */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/lz4/lz4.c:62,hash,hash,62,builtins/lz4/lz4.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/lz4/lz4.c,1,['hash'],['hash']
Security,/* process HTTPS/1.x or WEBSOCKET-SECURE connection */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c:34,SECUR,SECURE,34,net/http/civetweb/civetweb.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c,1,['SECUR'],['SECURE']
Security,"/* quick access, in case conn is known */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c:9,access,access,9,net/http/civetweb/civetweb.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c,1,['access'],['access']
Security,"/* readonly copy of image name ; 									 * this name is a hash value used to ; 									 * store image in the image-man's hash,; 									 * and gets freed automagically on image ; 									 * removal from hash */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/asimage.h:60,hash,hash,60,graf2d/asimage/src/libAfterImage/asimage.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/asimage.h,3,['hash'],['hash']
Security,/* require library validation */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/MachO.h:19,validat,validation,19,interpreter/llvm-project/llvm/include/llvm/BinaryFormat/MachO.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/MachO.h,1,['validat'],['validation']
Security,/* safe and portable access using memcpy() */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/lz4/lz4.c:21,access,access,21,builtins/lz4/lz4.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/lz4/lz4.c,1,['access'],['access']
Security,/* secondary hash */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/src/gifencode.c:13,hash,hash,13,graf2d/win32gdk/src/gifencode.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/src/gifencode.c,2,['hash'],['hash']
Security,"/* sets A flag, checks if secure field unset */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/arm_cmse.h:26,secur,secure,26,interpreter/llvm-project/clang/lib/Headers/arm_cmse.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/arm_cmse.h,1,['secur'],['secure']
Security,/* shift for hashing */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/src/gifencode.c:13,hash,hashing,13,graf2d/win32gdk/src/gifencode.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/src/gifencode.c,2,['hash'],['hashing']
Security,/* single job exception : checksum is already calculated directly within worker thread */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c:26,checksum,checksum,26,builtins/zstd/compress/zstdmt_compress.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c,1,['checksum'],['checksum']
Security,/* size of each hash in bytes */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/MachO.h:16,hash,hash,16,interpreter/llvm-project/llvm/include/llvm/BinaryFormat/MachO.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/MachO.h,1,['hash'],['hash']
Security,/* skip through the chain to the first position that won't be; * in the hash cache bucket */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_lazy.c:72,hash,hash,72,builtins/zstd/compress/zstd_lazy.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_lazy.c,1,['hash'],['hash']
Security,"/* state is presumed correctly initialized,; * in which case its size and alignment have already been validate */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/lz4/lz4hc.c:102,validat,validate,102,builtins/lz4/lz4hc.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/lz4/lz4hc.c,1,['validat'],['validate']
Security,"/* static allocation of HUF's Compression Table */; /* this is a private definition, just exposed for allocation and strict aliasing purpose. never EVER access its members directly */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/huf.h:90,expose,exposed,90,builtins/zstd/common/huf.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/huf.h,2,"['access', 'expose']","['access', 'exposed']"
Security,/* store ptr for quick access */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c:23,access,access,23,net/http/civetweb/civetweb.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c,1,['access'],['access']
Security,/* string at strstart already in hash table */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/zip/src/ZDeflate.c:33,hash,hash,33,core/zip/src/ZDeflate.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/zip/src/ZDeflate.c,1,['hash'],['hash']
Security,"/* testgdk -- validation program for GDK; * Copyright (C) 2000 Tor Lillqvist; *; * This library is free software; you can redistribute it and/or; * modify it under the terms of the GNU Library General Public; * License as published by the Free Software Foundation; either; * version 2 of the License, or (at your option) any later version.; *; * This library is distributed in the hope that it will be useful,; * but WITHOUT ANY WARRANTY; without even the implied warranty of; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU; * Library General Public License for more details.; *; * You should have received a copy of the GNU Library General Public; * License along with this library; if not, write to the; * Free Software Foundation, Inc., 59 Temple Place - Suite 330,; * Boston, MA 02111-1307, USA.; */; /* This program is intended to be used to validate the correctness of; * the basic graphics operations in a GDK backend. The results of the; * operations are compared against those produced by a correctly; * functioning X11 backend (and X11 server).; *; * Obviously, only the most basic operations reasonably be expected to; * produce pixel-by-pixel identical results as the X11 backend. We; * don't even try to test the correctness of ellipses, tiles or; * stipples. Not to mention fonts.; *; * But, for those operations we do test, we should try to test quite; * many combinations of parameters.; *; * This is just a quick hack, and could be improved a lot. There are; * copy-pasted code snippets all over that need to be factored out; * into separate functions.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/gdk/testgdk.c:14,validat,validation,14,graf2d/win32gdk/gdk/src/gdk/testgdk.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/gdk/testgdk.c,2,['validat'],"['validate', 'validation']"
Security,/* the follwoing files has to be included in user app to get access to; * libAfterImage functionality.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/afterimage.h:61,access,access,61,graf2d/asimage/src/libAfterImage/afterimage.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/afterimage.h,1,['access'],['access']
Security,"/* there needs to be support for Unicode here,; * unless we pretend that we can redefine the MD-5; * algorithm for multi-byte characters (perhaps; * by adding every four 16-bit characters and; * shortening the sum to 32 bits). Otherwise; * I suggest performing MD-5 as if every character; * was two bytes--e.g., 0040 0025 = @%--but then; * how will an ordinary MD-5 sum be matched?; * There is no way to standardize text to something; * like UTF-8 before transformation; speed cost is; * utterly prohibitive. The JavaScript standard; * itself needs to look at this: it should start; * providing access to strings as preformed UTF-8; * 8-bit unsigned value arrays.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:595,access,access,595,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['access'],['access']
Security,/* this will provide access to default storage heap that is used whenever above functions get; * NULL passed as ASStorage parameter :; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/asstorage.h:21,access,access,21,graf2d/asimage/src/libAfterImage/asstorage.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/asstorage.h,1,['access'],['access']
Security,/* to expose flockfile and friends in stdio.h */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c:6,expose,expose,6,net/http/civetweb/civetweb.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c,1,['expose'],['expose']
Security,"/* type for top-level pointer */; /* Declarations for Floyd-Steinberg dithering.; *; * Errors are accumulated into the array fserrors[], at a resolution of; * 1/16th of a pixel count. The error at a given pixel is propagated; * to its not-yet-processed neighbors using the standard F-S fractions,; *		...	(here)	7/16; *		3/16	5/16	1/16; * We work left-to-right on even rows, right-to-left on odd rows.; *; * We can get away with a single array (holding one row's worth of errors); * by using it to store the current row's errors at pixel columns not yet; * processed, but the next row's errors at columns already processed. We; * need only a few extra variables to hold the errors immediately around the; * current column. (If we are lucky, those variables are in registers, but; * even if not, they're probably cheaper to access than array elements are.); *; * The fserrors[] array has (#columns + 2) entries; the extra entry at; * each end saves us from special-casing the first and last pixels.; * Each entry is three values long, one value for each color component.; *; * Note: on a wide image, we might not have enough room in a PC's near data; * segment to hold the error array; so it is allocated with alloc_large.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:823,access,access,823,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,1,['access'],['access']
Security,/* type of hash (cdHashType* constants) */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/MachO.h:11,hash,hash,11,interpreter/llvm-project/llvm/include/llvm/BinaryFormat/MachO.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/MachO.h,1,['hash'],['hash']
Security,/* unaligned access routines */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h:13,access,access,13,builtins/zstd/common/bitstream.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h,1,['access'],['access']
Security,/* update hash table */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_double_fast.c:10,hash,hash,10,builtins/zstd/compress/zstd_double_fast.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_double_fast.c,5,['hash'],['hash']
Security,/* update hash tables */; /* check dictMatchState repcode */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_double_fast.c:10,hash,hash,10,builtins/zstd/compress/zstd_double_fast.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_double_fast.c,1,['hash'],['hash']
Security,/* validate */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/lz4/lz4frame.c:3,validat,validate,3,builtins/lz4/lz4frame.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/lz4/lz4frame.c,2,['validat'],['validate']
Security,/* validation checks */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/huf_decompress.c:3,validat,validation,3,builtins/zstd/decompress/huf_decompress.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/huf_decompress.c,5,['validat'],['validation']
Security,/* we better disable errors as some of this data will belong to memory audit : */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/afterbase.c:71,audit,audit,71,graf2d/asimage/src/libAfterImage/afterbase.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/afterbase.c,1,['audit'],['audit']
Security,/* xor hashing */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/src/gifencode.c:7,hash,hashing,7,graf2d/win32gdk/src/gifencode.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/src/gifencode.c,2,['hash'],['hashing']
Security,"/* zlib can't necessarily handle more than 65535 bytes at once (i.e. it; * can't even necessarily handle 65536 bytes) because the type uInt is; * ""16 bits or more"". Consequently it is necessary to chunk the input to; * zlib. This code uses ZLIB_IO_MAX, from pngpriv.h, as the maximum (the; * maximum value that can be stored in a uInt.) It is possible to set; * ZLIB_IO_MAX to a lower value in pngpriv.h and this may sometimes have; * a performance advantage, because it reduces the amount of data accessed; * at each step and that may give the OS more time to page it in.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:498,access,accessed,498,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,1,['access'],['accessed']
Security,"/*! LZ4F_compressEnd() :; * When you want to properly finish the compressed frame, just call LZ4F_compressEnd().; * It will flush whatever data remained within compressionContext (like LZ4_flush()); * but also properly finalize the frame, with an endMark and an (optional) checksum.; * LZ4F_compressOptions_t structure is optional : you can provide NULL as argument.; * @return: the number of bytes written into dstBuffer (necessarily >= 4 (endMark size)); * or an error code if it fails (can be tested using LZ4F_isError()); * The context can then be used again to compress a new frame, starting with LZ4F_compressBegin().; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/lz4/lz4frame.c:273,checksum,checksum,273,builtins/lz4/lz4frame.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/lz4/lz4frame.c,1,['checksum'],['checksum']
Security,"/*! LZ4F_decompress_usingDict() :; * Same as LZ4F_decompress(), using a predefined dictionary.; * Dictionary is used ""in place"", without any preprocessing.; * It must remain accessible throughout the entire frame decoding.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/lz4/lz4frame.c:174,access,accessible,174,builtins/lz4/lz4frame.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/lz4/lz4frame.c,1,['access'],['accessible']
Security,"/*! LZ4F_getFrameInfo() :; * This function extracts frame parameters (max blockSize, frame checksum, etc.).; * Usage is optional. Objective is to provide relevant information for allocation purposes.; * This function works in 2 situations :; * - At the beginning of a new frame, in which case it will decode this information from `srcBuffer`, and start the decoding process.; * Amount of input data provided must be large enough to successfully decode the frame header.; * A header size is variable, but is guaranteed to be <= LZ4F_HEADER_SIZE_MAX bytes. It's possible to provide more input data than this minimum.; * - After decoding has been started. In which case, no input is read, frame parameters are extracted from dctx.; * The number of bytes consumed from srcBuffer will be updated within *srcSizePtr (necessarily <= original value).; * Decompression must resume from (srcBuffer + *srcSizePtr).; * @return : an hint about how many srcSize bytes LZ4F_decompress() expects for next call,; * or an error code which can be tested using LZ4F_isError(); * note 1 : in case of error, dctx is not modified. Decoding operations can resume from where they stopped.; * note 2 : frame parameters are *copied into* an already allocated LZ4F_frameInfo_t structure.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/lz4/lz4frame.c:91,checksum,checksum,91,builtins/lz4/lz4frame.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/lz4/lz4frame.c,1,['checksum'],['checksum']
Security,"/*! LZ4F_makeBlock():; * compress a single block, add header and optional checksum.; * assumption : dst buffer capacity is >= BHSize + srcSize + crcSize; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/lz4/lz4frame.c:74,checksum,checksum,74,builtins/lz4/lz4frame.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/lz4/lz4frame.c,1,['checksum'],['checksum']
Security,"/*! LZ4_attach_dictionary() :; * This is an experimental API that allows; * efficient use of a static dictionary many times.; *; * Rather than re-loading the dictionary buffer into a working context before; * each compression, or copying a pre-loaded dictionary's LZ4_stream_t into a; * working LZ4_stream_t, this function introduces a no-copy setup mechanism,; * in which the working stream references the dictionary stream in-place.; *; * Several assumptions are made about the state of the dictionary stream.; * Currently, only streams which have been prepared by LZ4_loadDict() should; * be expected to work.; *; * Alternatively, the provided dictionaryStream may be NULL,; * in which case any existing dictionary stream is unset.; *; * If a dictionary is provided, it replaces any pre-existing stream history.; * The dictionary contents are the only history that can be referenced and; * logically immediately precede the data compressed in the first subsequent; * compression call.; *; * The dictionary will only remain attached to the working stream through the; * first compression call, at the end of which it is cleared. The dictionary; * stream (and source buffer) must remain in-place / accessible / unchanged; * through the completion of the first compression call on the stream.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/lz4/lz4.h:1199,access,accessible,1199,builtins/lz4/lz4.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/lz4/lz4.h,1,['access'],['accessible']
Security,"/*! LZ4_decompress_*_usingDict() :; * These decoding functions work the same as; * a combination of LZ4_setStreamDecode() followed by LZ4_decompress_*_continue(); * They are stand-alone, and don't need an LZ4_streamDecode_t structure.; * Dictionary is presumed stable : it must remain accessible and unmodified during decompression.; * Performance tip : Decompression speed can be substantially increased; * when dst == dictStart + dictSize.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/lz4/lz4.h:285,access,accessible,285,builtins/lz4/lz4.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/lz4/lz4.h,1,['access'],['accessible']
Security,"/*! LZ4_setStreamDecode() :; * An LZ4_streamDecode_t context can be allocated once and re-used multiple times.; * Use this function to start decompression of a new stream of blocks.; * A dictionary can optionally be set. Use NULL or size 0 for a reset order.; * Dictionary is presumed stable : it must remain accessible and unmodified during next decompression.; * @return : 1 if OK, 0 if error; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/lz4/lz4.h:309,access,accessible,309,builtins/lz4/lz4.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/lz4/lz4.h,1,['access'],['accessible']
Security,"/*! Obsolete LZ4_decompress_fast variants (since v1.9.0) :; * These functions used to be faster than LZ4_decompress_safe(),; * but this is no longer the case. They are now slower.; * This is because LZ4_decompress_fast() doesn't know the input size,; * and therefore must progress more cautiously into the input buffer to not read beyond the end of block.; * On top of that `LZ4_decompress_fast()` is not protected vs malformed or malicious inputs, making it a security liability.; * As a consequence, LZ4_decompress_fast() is strongly discouraged, and deprecated.; *; * The last remaining LZ4_decompress_fast() specificity is that; * it can decompress a block without knowing its compressed size.; * Such functionality can be achieved in a more secure manner; * by employing LZ4_decompress_safe_partial().; *; * Parameters:; * originalSize : is the uncompressed size to regenerate.; * `dst` must be already allocated, its size must be >= 'originalSize' bytes.; * @return : number of bytes read from source buffer (== compressed size).; * The function expects to finish at block's end exactly.; * If the source stream is detected malformed, the function stops decoding and returns a negative result.; * note : LZ4_decompress_fast*() requires originalSize. Thanks to this information, it never writes past the output buffer.; * However, since it doesn't know its 'src' size, it may read an unknown amount of input, past input buffer bounds.; * Also, since match offsets are not validated, match reads from 'src' may underflow too.; * These issues never happen if input (compressed) data is correct.; * But they may happen if input data is invalid (error or intentional tampering).; * As a consequence, use these functions in trusted environments with trusted data **only**.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/lz4/lz4.h:461,secur,security,461,builtins/lz4/lz4.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/lz4/lz4.h,3,"['secur', 'validat']","['secure', 'security', 'validated']"
Security,"/*! ZSTD_CCtx_setParameter() :; * Set one compression parameter, selected by enum ZSTD_cParameter.; * All parameters have valid bounds. Bounds can be queried using ZSTD_cParam_getBounds().; * Providing a value beyond bound will either clamp it, or trigger an error (depending on parameter).; * Setting a parameter is generally only possible during frame initialization (before starting compression).; * Exception : when using multi-threading mode (nbWorkers >= 1),; * the following parameters can be updated _during_ compression (within same frame):; * => compressionLevel, hashLog, chainLog, searchLog, minMatch, targetLength and strategy.; * new parameters will be active for next job only (after a flush()).; * @return : an error code (which can be tested using ZSTD_isError()).; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:574,hash,hashLog,574,builtins/zstd/zstd.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h,1,['hash'],['hashLog']
Security,"/*! ZSTD_DCtx_loadDictionary_byReference() :; * Same as ZSTD_DCtx_loadDictionary(),; * but references `dict` content instead of copying it into `dctx`.; * This saves memory if `dict` remains around.,; * However, it's imperative that `dict` remains accessible (and unmodified) while being used, so it must outlive decompression. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:248,access,accessible,248,builtins/zstd/zstd.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h,1,['access'],['accessible']
Security,"/*! ZSTD_DCtx_setMaxWindowSize() :; * Refuses allocating internal buffers for frames requiring a window size larger than provided limit.; * This protects a decoder context from reserving too much memory for itself (potential attack scenario).; * This parameter is only useful in streaming mode, since no internal buffer is allocated in single-pass mode.; * By default, a decompression context accepts all window sizes <= (1 << ZSTD_WINDOWLOG_LIMIT_DEFAULT); * @return : 0, or an error code (which can be tested using ZSTD_isError()).; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:225,attack,attack,225,builtins/zstd/zstd.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h,1,['attack'],['attack']
Security,"/*! ZSTD_checkCParams() :; * Ensure param values remain within authorized range.; * @return 0 on success, or an error code (can be checked with ZSTD_isError()) */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:63,authoriz,authorized,63,builtins/zstd/zstd.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h,1,['authoriz'],['authorized']
Security,"/*! ZSTD_compress_usingCDict() :; * Compression using a digested Dictionary.; * Recommended when same dictionary is used multiple times.; * Note : compression level is _decided at dictionary creation time_,; * and frame parameters are hardcoded (dictID=yes, contentSize=yes, checksum=no) */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:275,checksum,checksum,275,builtins/zstd/zstd.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h,1,['checksum'],['checksum']
Security,"/*! ZSTD_copyCCtx_internal() :; * Duplicate an existing context `srcCCtx` into another one `dstCCtx`.; * Only works during stage ZSTDcs_init (i.e. after creation, but before first call to ZSTD_compressContinue()).; * The ""context"", in this case, refers to the hash and chain tables,; * entropy tables, and dictionary references.; * `windowLog` value is enforced if != 0, otherwise value is copied from srcCCtx.; * @return : 0, or an error code */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:260,hash,hash,260,builtins/zstd/compress/zstd_compress.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c,1,['hash'],['hash']
Security,"/*! ZSTD_createDDict_byReference() :; * Create a digested dictionary, ready to start decompression operation without startup delay.; * Dictionary content is referenced, and therefore stays in dictBuffer.; * It is important that dictBuffer outlives DDict,; * it must remain read accessible throughout the lifetime of DDict */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:278,access,accessible,278,builtins/zstd/zstd.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h,1,['access'],['accessible']
Security,"/*! ZSTD_createDDict_byReference() :; * Create a digested dictionary, to start decompression without startup delay.; * Dictionary content is simply referenced, it will be accessed during decompression.; * Warning : dictBuffer must outlive DDict (DDict must be freed before dictBuffer) */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_ddict.c:171,access,accessed,171,builtins/zstd/decompress/zstd_ddict.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_ddict.c,1,['access'],['accessed']
Security,/*! ZSTD_decodeLiteralsBlock() :; * @return : nb of bytes read from src (< srcSize ); * note : symbol not declared but exposed for fullbench */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_block.c:119,expose,exposed,119,builtins/zstd/decompress/zstd_decompress_block.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_block.c,1,['expose'],['exposed']
Security,"/*! ZSTD_getFrameContentSize() : requires v1.3.0+; * `src` should point to the start of a ZSTD encoded frame.; * `srcSize` must be at least as large as the frame header.; * hint : any size >= `ZSTD_frameHeaderSize_max` is large enough.; * @return : - decompressed size of `src` frame content, if known; * - ZSTD_CONTENTSIZE_UNKNOWN if the size cannot be determined; * - ZSTD_CONTENTSIZE_ERROR if an error occurred (e.g. invalid magic number, srcSize too small); * note 1 : a 0 return value means the frame is valid but ""empty"".; * note 2 : decompressed size is an optional field, it may not be present, typically in streaming mode.; * When `return==ZSTD_CONTENTSIZE_UNKNOWN`, data to decompress could be any size.; * In which case, it's necessary to use streaming mode to decompress data.; * Optionally, application can rely on some implicit limit,; * as ZSTD_decompress() only needs an upper bound of decompressed size.; * (For example, data could be necessarily cut into blocks <= 16 KB).; * note 3 : decompressed size is always present when compression is completed using single-pass functions,; * such as ZSTD_compress(), ZSTD_compressCCtx() ZSTD_compress_usingDict() or ZSTD_compress_usingCDict().; * note 4 : decompressed size can be very large (64-bits value),; * potentially larger than what local system can handle as a single memory segment.; * In which case, it's necessary to use streaming mode to decompress data.; * note 5 : If source is untrusted, decompressed size could be wrong or intentionally modified.; * Always ensure return value fits within application's authorized limits.; * Each application can set its own limits.; * note 6 : This function replaces ZSTD_getDecompressedSize() */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:1579,authoriz,authorized,1579,builtins/zstd/zstd.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h,1,['authoriz'],['authorized']
Security,"/*! ZSTD_getParams() :; * same as ZSTD_getCParams(), but @return a full `ZSTD_parameters` object instead of sub-component `ZSTD_compressionParameters`.; * All fields of `ZSTD_frameParameters` are set to default : contentSize=1, checksum=0, noDictID=0 */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:228,checksum,checksum,228,builtins/zstd/zstd.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h,1,['checksum'],['checksum']
Security,/*! ZSTD_resetCCtx_internal() :; note : `params` are assumed fully validated at this stage */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:67,validat,validated,67,builtins/zstd/compress/zstd_compress.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c,1,['validat'],['validated']
Security,"/*! \class TMVA::CCPruner; \ingroup TMVA; A helper class to prune a decision tree using the Cost Complexity method; (see Classification and Regression Trees by Leo Breiman et al). ### Some definitions:. - \f$ T_{max} \f$ - the initial, usually highly overtrained tree, that is to be pruned back; - \f$ R(T) \f$ - quality index (Gini, misclassification rate, or other) of a tree \f$ T \f$; - \f$ \sim T \f$ - set of terminal nodes in \f$ T \f$; - \f$ T' \f$ - the pruned subtree of \f$ T_max \f$ that has the best quality index \f$ R(T') \f$; - \f$ \alpha \f$ - the prune strength parameter in Cost Complexity pruning \f$ (R_{\alpha}(T) = R(T) + \alpha*|\sim T|) \f$. There are two running modes in CCPruner: (i) one may select a prune strength and prune back; the tree \f$ T_{max}\f$ until the criterion:; \f[; \alpha < \frac{R(T) - R(t)}{|\sim T_t| - 1}; \f]. is true for all nodes t in \f$ T \f$, or (ii) the algorithm finds the sequence of critical points; \f$ \alpha_k < \alpha_{k+1} ... < \alpha_K \f$ such that \f$ T_K = root(T_{max}) \f$ and then selects the optimally-pruned; subtree, defined to be the subtree with the best quality index for the validation sample.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CCPruner.cxx:1155,validat,validation,1155,tmva/tmva/src/CCPruner.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CCPruner.cxx,1,['validat'],['validation']
Security,"/*! \class TMVA::CrossValidationResult; * Class to save the results of cross validation,; * the metric for the classification ins ROC and you can ROC curves; * ROC integrals, ROC average and ROC standard deviation.; \ingroup TMVA; */; /*! \class TMVA::CrossValidation; * Class to perform cross validation, splitting the dataloader into folds.; \ingroup TMVA; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/CrossValidation.h:77,validat,validation,77,tmva/tmva/inc/TMVA/CrossValidation.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/CrossValidation.h,2,['validat'],['validation']
Security,"/*!; * XXH32():; * Calculate the 32-bit hash of sequence ""length"" bytes stored at memory address ""input"".; * The memory between input & input+length must be valid (allocated and read-accessible).; * ""seed"" can be used to alter the result predictably.; * Speed on Core 2 Duo @ 3 GHz (single thread, SMHasher benchmark): 5.4 GB/s; *; * Note: XXH3 provides competitive speed for both 32-bit and 64-bit systems,; * and offers true 64/128 bit hash results. It provides a superior level of; * dispersion, and greatly reduces the risks of collisions.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/xxhash/xxhash.h:40,hash,hash,40,builtins/xxhash/xxhash.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/xxhash/xxhash.h,3,"['access', 'hash']","['accessible', 'hash']"
Security,"/*!; * XXH64():; * Returns the 64-bit hash of sequence of length @length stored at memory; * address @input.; * @seed can be used to alter the result predictably.; *; * This function usually runs faster on 64-bit systems, but slower on 32-bit; * systems (see benchmark).; *; * Note: XXH3 provides competitive speed for both 32-bit and 64-bit systems,; * and offers true 64/128 bit hash results. It provides a superior level of; * dispersion, and greatly reduces the risks of collisions.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/xxhash/xxhash.h:38,hash,hash,38,builtins/xxhash/xxhash.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/xxhash/xxhash.h,2,['hash'],['hash']
Security,"/*!; * XXH_FORCE_ALIGN_CHECK:; * This is an important performance trick; * for architectures without decent unaligned memory access performance.; * It checks for input alignment, and when conditions are met,; * uses a ""fast path"" employing direct 32-bit/64-bit read,; * resulting in _dramatically faster_ read speed.; *; * The check costs one initial branch per hash, which is generally negligible, but not zero.; * Moreover, it's not useful to generate binary for an additional code path; * if memory access uses same instruction for both aligned and unaligned adresses.; *; * In these cases, the alignment check can be removed by setting this macro to 0.; * Then the code will always use unaligned memory access.; * Align check is automatically disabled on x86, x64 & arm64,; * which are platforms known to offer good unaligned memory accesses performance.; *; * This option does not affect XXH3 (only XXH32 and XXH64).; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/xxhash/xxhash.h:125,access,access,125,builtins/xxhash/xxhash.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/xxhash/xxhash.h,5,"['access', 'hash']","['access', 'accesses', 'hash']"
Security,/*!FSE_MAX_SYMBOL_VALUE :; * Maximum symbol value authorized.; * Required for proper stack allocation */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:50,authoriz,authorized,50,builtins/zstd/common/fse.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h,1,['authoriz'],['authorized']
Security,"/** @class ROOT::Detail::TCollectionProxyInfo::Insert; *; * Small helper to encapsulate all necessary data accesses for; * containers like set, multiset etc.; *; * @author M.Frank; * @version 1.0; * @date 10/10/2004; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TCollectionProxyInfo.h:107,access,accesses,107,core/cont/inc/TCollectionProxyInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TCollectionProxyInfo.h,1,['access'],['accesses']
Security,"/** @class ROOT::Detail::TCollectionProxyInfo::Iterators; *; * Small helper to implement the function to create,access and destroy; * iterators.; *; **/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TCollectionProxyInfo.h:112,access,access,112,core/cont/inc/TCollectionProxyInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TCollectionProxyInfo.h,1,['access'],['access']
Security,"/** @class ROOT::Detail::TCollectionProxyInfo::MapInsert; *; * Small helper to encapsulate all necessary data accesses for; * containers like set, multiset etc.; *; * @author M.Frank; * @version 1.0; * @date 10/10/2004; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TCollectionProxyInfo.h:110,access,accesses,110,core/cont/inc/TCollectionProxyInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TCollectionProxyInfo.h,1,['access'],['accesses']
Security,"/** @class ROOT::Detail::TCollectionProxyInfo::Pushback; *; * Small helper to encapsulate all necessary data accesses for; * containers like vector, list, deque; *; * @author M.Frank; * @version 1.0; * @date 10/10/2004; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TCollectionProxyInfo.h:109,access,accesses,109,core/cont/inc/TCollectionProxyInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TCollectionProxyInfo.h,1,['access'],['accesses']
Security,/** @class ROOT::Detail::TCollectionProxyInfo::Pushfront; *; * Small helper to encapsulate all necessary data accesses for; * containers like forward_list; *; * @author D.Piparo; * @version 1.0; * @date 26/02/2015; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TCollectionProxyInfo.h:110,access,accesses,110,core/cont/inc/TCollectionProxyInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TCollectionProxyInfo.h,1,['access'],['accesses']
Security,/** @class ROOT::Detail::TCollectionProxyInfo::Type; *; * Small helper to encapsulate basic data accesses for; * all STL continers.; *; * @author M.Frank; * @version 1.0; * @date 10/10/2004; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TCollectionProxyInfo.h:97,access,accesses,97,core/cont/inc/TCollectionProxyInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TCollectionProxyInfo.h,1,['access'],['accesses']
Security,/** @class TGenCollectionProxy::Method TGenCollectionProxy.h TGenCollectionProxy.h; *; * Small helper to execute (compiler) generated function for the; * access to STL or other containers.; *; * @author M.Frank; * @version 1.0; * @date 10/10/2004; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/inc/TGenCollectionProxy.h:154,access,access,154,io/io/inc/TGenCollectionProxy.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/inc/TGenCollectionProxy.h,2,['access'],['access']
Security,"/** @file; * header file containing the templated implementation of matrix inversion; * routines for use with ROOT's SMatrix classes (symmetric positive; * definite case); *; * @author Manuel Schiller; * @date Aug 29 2008; * initial release inside LHCb; * @date May 7 2009; * factored code to provide a nice Cholesky decomposition class, along; * with separate methods for solving a single linear system and to; * obtain the inverse matrix from the decomposition; * @date July 15th 2013; * provide a version of that class which works if the dimension of the; * problem is only known at run time; * @date September 30th 2013; * provide routines to access the result of the decomposition L and its; * inverse; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/inc/Math/CholeskyDecomp.h:647,access,access,647,math/smatrix/inc/Math/CholeskyDecomp.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/inc/Math/CholeskyDecomp.h,1,['access'],['access']
Security,/** @name --- Access functions --- */; /** access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/inc/Math/SMatrix.h:14,Access,Access,14,math/smatrix/inc/Math/SMatrix.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/inc/Math/SMatrix.h,3,"['Access', 'access']","['Access', 'access', 'accessing']"
Security,/** @name --- Access functions --- */; /**; Enumeration defining the Vector size; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/inc/Math/SVector.h:14,Access,Access,14,math/smatrix/inc/Math/SVector.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/inc/Math/SVector.h,1,['Access'],['Access']
Security,"/** @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]; */; /** STL iterator interface. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/inc/Math/SMatrix.h:52,access,access,52,math/smatrix/inc/Math/SMatrix.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/inc/Math/SMatrix.h,1,['access'],['access']
Security,/** @summary Access THttpServer with provided address; * @param {string} server_address - URL to server like 'http://localhost:8090/'; * @return {Promise} when ready */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:13,Access,Access,13,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['Access'],['Access']
Security,"/** @summary Access current 3d mode; * @param {string} [new_value] - when specified, set new 3d mode; * @return current value; * @private */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:13,Access,Access,13,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['Access'],['Access']
Security,/** @summary Access or modify histogram min/max; * @private */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:13,Access,Access,13,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,4,['Access'],['Access']
Security,/** @summary Access/change top painter; * @private */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:13,Access,Access,13,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['Access'],['Access']
Security,/** @summary Inject javascript code; * @desc Replacement for eval; * @return {Promise} when code is injected; * @private */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:13,Inject,Inject,13,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,4,"['Inject', 'inject']","['Inject', 'injected']"
Security,"/** @summary Inject message(s) into input queue, for debug purposes only; * @private */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/modules/webwindow.mjs:13,Inject,Inject,13,js/modules/webwindow.mjs,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/modules/webwindow.mjs,1,['Inject'],['Inject']
Security,/** @summary Inject style; * @param {String} code - css string; * @private */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:13,Inject,Inject,13,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['Inject'],['Inject']
Security,"/** @summary Search streamer info; * @param {string} clanme - class name; * @param {number} [clversion] - class version; * @param {number} [checksum] - streamer info checksum, have to match when specified; * @private */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:140,checksum,checksum,140,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,4,['checksum'],['checksum']
Security,/** @summary either change mesh wireframe or return current value; * @return undefined when wireframe cannot be accessed; * @private */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:112,access,accessed,112,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['access'],['accessed']
Security,/** @summary returns color from current list of colors; * @desc First checks canvas painter and then just access global list of colors; * @param {number} indx - color index; * @return {string} with SVG color name or rgb(); * @protected */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:106,access,access,106,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['access'],['access']
Security,"/** API class for the user interaction with the parameters;; serves as input to the minimizer as well as output from it;; users can interact: Fix/release parameters, set values and errors, etc.;; parameters can be accessed via their Parameter number (determined; internally by Minuit and followed the order how the parameters are created); or via their user-specified Name (10 character string).; Minuit has also an internal parameter number which is used during the minimization; (the fix parameter are skipped). The parameter number used in this class is the external; one. The class ROOT::Minuit2::MnUserTransformation is used to keep the; internal <-> external transformation; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnUserParameters.h:214,access,accessed,214,math/minuit2/inc/Minuit2/MnUserParameters.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnUserParameters.h,1,['access'],['accessed']
Security,/** Access object */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/browsable/inc/ROOT/Browsable/RElement.hxx:4,Access,Access,4,gui/browsable/inc/ROOT/Browsable/RElement.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/browsable/inc/ROOT/Browsable/RElement.hxx,2,['Access'],['Access']
Security,/** Access to elements of device matrices provided through TCudaDeviceReference; * class. Note that access is synchronous end enforces device synchronization; * on all streams. Only used for testing. */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cuda/CudaMatrix.h:4,Access,Access,4,tmva/tmva/inc/TMVA/DNN/Architectures/Cuda/CudaMatrix.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cuda/CudaMatrix.h,2,"['Access', 'access']","['Access', 'access']"
Security,/** An access specifier. */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang-c/Index.h:7,access,access,7,interpreter/llvm-project/clang/include/clang-c/Index.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang-c/Index.h,1,['access'],['access']
Security,"/** Enable CORS header to ProcessRequests() responses; * Specified location (typically ""*"") add as ""Access-Control-Allow-Origin"" header */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/inc/THttpServer.h:100,Access,Access-Control-Allow-Origin,100,net/http/inc/THttpServer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/inc/THttpServer.h,1,['Access'],['Access-Control-Allow-Origin']
Security,/** Enable/disable usage Access-Control-Allow-Credentials response header */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/inc/THttpServer.h:25,Access,Access-Control-Allow-Credentials,25,net/http/inc/THttpServer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/inc/THttpServer.h,1,['Access'],['Access-Control-Allow-Credentials']
Security,/** LLVMInitializeAllTargetInfos - The main program should call this function if; it wants access to all available targets that LLVM is configured to; support. */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm-c/Target.h:91,access,access,91,interpreter/llvm-project/llvm/include/llvm-c/Target.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm-c/Target.h,1,['access'],['access']
Security,/** LLVMInitializeAllTargetMCs - The main program should call this function if; it wants access to all available target MC that LLVM is configured to; support. */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm-c/Target.h:89,access,access,89,interpreter/llvm-project/llvm/include/llvm-c/Target.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm-c/Target.h,1,['access'],['access']
Security,/** Restrict access to specified object */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/inc/THttpServer.h:13,access,access,13,net/http/inc/THttpServer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/inc/THttpServer.h,1,['access'],['access']
Security,/** Returns kTRUE if Access-Control-Allow-Credentials header should be used */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/inc/THttpServer.h:21,Access,Access-Control-Allow-Credentials,21,net/http/inc/THttpServer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/inc/THttpServer.h,1,['Access'],['Access-Control-Allow-Credentials']
Security,"/** TBatch; *; * Class representing training batches consisting of a matrix of input data; * and a matrix of output data. The input and output data can be accessed using; * the GetInput() and GetOutput() member functions.; *; * \tparam AArchitecture The underlying architecture.; */; //______________________________________________________________________________",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DataLoader.h:155,access,accessed,155,tmva/tmva/inc/TMVA/DNN/DataLoader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DataLoader.h,1,['access'],['accessed']
Security,/** TTensorBatch; *; * Class representing training batches consisting of a vector of matrices as input data; * and a matrix of output data. The input and output data can be accessed using; * the GetInput() and GetOutput() member functions.; *; * \tparam Architecture_t The underlying architecture.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/TensorDataLoader.h:173,access,accessed,173,tmva/tmva/inc/TMVA/DNN/TensorDataLoader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/TensorDataLoader.h,1,['access'],['accessed']
Security,/** Type of the value accessed in an IOD */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/libdaos_mock/daos.h:22,access,accessed,22,tree/ntuple/v7/inc/ROOT/libdaos_mock/daos.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/libdaos_mock/daos.h,1,['access'],['accessed']
Security,"/** ZSTDMT_compressStream_generic() :; * internal use only - exposed to be invoked from zstd_compress.c; * assumption : output and input are valid (pos <= size); * @return : minimum amount of data remaining to flush, 0 if none */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c:61,expose,exposed,61,builtins/zstd/compress/zstdmt_compress.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c,1,['expose'],['exposed']
Security,/** ZSTD_adjustCParams_internal() :; * optimize `cPar` for a specified input (`srcSize` and `dictSize`).; * mostly downsize to reduce memory consumption and initialization latency.; * `srcSize` can be ZSTD_CONTENTSIZE_UNKNOWN when not known.; * `mode` is the mode for parameter adjustment. See docs for `ZSTD_cParamMode_e`.; * note : `srcSize==0` means 0!; * condition : cPar is presumed validated (can be checked using ZSTD_checkCParams()). */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:388,validat,validated,388,builtins/zstd/compress/zstd_compress.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c,1,['validat'],['validated']
Security,"/** ZSTD_checkCParams() :; control CParam values remain within authorized range.; @return : 0, or an error code if one value is beyond authorized range */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:63,authoriz,authorized,63,builtins/zstd/compress/zstd_compress.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c,2,['authoriz'],['authorized']
Security,/** ZSTD_cycleLog() :; * condition for correct operation : hashLog > 1 */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:59,hash,hashLog,59,builtins/zstd/compress/zstd_compress.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c,1,['hash'],['hashLog']
Security,/** ZSTD_dictAndWindowLog() :; * Returns an adjusted window log that is large enough to fit the source and the dictionary.; * The zstd format says that the entire dictionary is valid if one byte of the dictionary; * is within the window. So the hashLog and chainLog should be large enough to reference both; * the dictionary and the window. So we must use this adjusted dictAndWindowLog when downsizing; * the hashLog and windowLog.; * NOTE: srcSize must not be ZSTD_CONTENTSIZE_UNKNOWN.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:245,hash,hashLog,245,builtins/zstd/compress/zstd_compress.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c,2,['hash'],['hashLog']
Security,"/** ZSTD_ldm_adjustParameters() :; * If the params->hashRateLog is not set, set it to its default value based on; * windowLog and params->hashLog.; *; * Ensures that params->bucketSizeLog is <= params->hashLog (setting it to; * params->hashLog if it is not).; *; * Ensures that the minMatchLength >= targetLength during optimal parsing.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.h:52,hash,hashRateLog,52,builtins/zstd/compress/zstd_ldm.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.h,4,['hash'],"['hashLog', 'hashRateLog']"
Security,/** ZSTD_ldm_fillLdmHashTable() :; *; * Fills hashTable from (lastHashed + 1) to iend (non-inclusive).; * lastHash is the rolling hash that corresponds to lastHashed.; *; * Returns the rolling hash corresponding to position iend-1. */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.c:46,hash,hashTable,46,builtins/zstd/compress/zstd_ldm.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.c,3,['hash'],"['hash', 'hashTable']"
Security,/** ZSTD_ldm_getBucket() :; * Returns a pointer to the start of the bucket associated with hash. */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.c:91,hash,hash,91,builtins/zstd/compress/zstd_ldm.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.c,1,['hash'],['hash']
Security,"/** ZSTD_ldm_getTag() ;; * Given the hash, returns the most significant numTagBits bits; * after (32 + hbits) bits.; *; * If there are not enough bits remaining, return the last; * numTagBits bits. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.c:37,hash,hash,37,builtins/zstd/compress/zstd_ldm.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.c,1,['hash'],['hash']
Security,/** ZSTD_ldm_insertEntry() :; * Insert the entry with corresponding hash into the hash table */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.c:68,hash,hash,68,builtins/zstd/compress/zstd_ldm.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.c,2,['hash'],['hash']
Security,"/** ZSTD_ldm_makeEntryAndInsertByTag() :; *; * Gets the small hash, checksum, and tag from the rollingHash.; *; * If the tag matches (1 << ldmParams.hashRateLog)-1, then; * creates an ldmEntry from the offset, and inserts it into the hash table.; *; * hBits is the length of the small hash, which is the most significant hBits; * of rollingHash. The checksum is the next 32 most significant bits, followed; * by ldmParams.hashRateLog bits that make up the tag. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.c:62,hash,hash,62,builtins/zstd/compress/zstd_ldm.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.c,7,"['checksum', 'hash']","['checksum', 'hash', 'hashRateLog']"
Security,"/** \brief Get JobManager instance; create and activate if necessary; *; * Child classes should refrain from direct access to the JobManager instance; * (through JobManager::instance), but rather use the here provided; * Job::get_manager(). This function starts the worker_loop on the worker when; * first called, meaning that the workers will not be running before they; * are needed.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/multiprocess/src/Job.cxx:116,access,access,116,roofit/multiprocess/src/Job.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/multiprocess/src/Job.cxx,1,['access'],['access']
Security,"/** \class Config; *; * \brief Configuration for MultiProcess infrastructure; *; * This class offers user-accessible configuration of the MultiProcess infrastructure.; * Since the rest of the MultiProcess classes are only accessible at compile time, a; * separate class is needed to set configuration. Currently, the configurable parts; * are:; * 1. the number of workers to be deployed,; * 2. the number of event-tasks in LikelihoodJobs,; * 3. and the number of component-tasks in LikelihoodJobs.; *; * The default number of workers is set using 'std::thread::hardware_concurrency()'.; * To change it, use 'Config::setDefaultNWorkers()' to set it to a different value; * before creation of a new JobManager instance. Note that it cannot be set to zero; * and also cannot be changed after JobManager has been instantiated.; *; * Use Config::getDefaultNWorkers() to access the current value.; *; * Under Config::LikelihoodJob, we find two members for the number of tasks to use to; * calculate the range of events and components in parallel, respectively:; * defaultNEventTasks and defaultNComponentTasks. Newly created LikelihoodJobs will; * then use these values at construction time. Note that (like with the number of; * workers) the number cannot be changed for an individual LikelihoodJob after it has; * been created.; *; * Both event- and component-based tasks by default are set to automatic mode using; * the automaticNEventTasks and automaticNComponentTasks constants (both under; * Config::LikelihoodJob as well). These are currently set to zero, but this could; * change. Automatic mode for events means that the number of tasks is set to the; * number of workers in the JobManager, with events divided equally over workers. For; * components, the automatic mode uses just 1 task for all components. These automatic; * modes may change in the future (for instance, we may switch them around).; *; * Under Config::Queue, we can set the desired queue type: FIFO or Priority. This; * setting ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/multiprocess/src/Config.cxx:106,access,accessible,106,roofit/multiprocess/src/Config.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/multiprocess/src/Config.cxx,3,['access'],"['access', 'accessible']"
Security,"/** \class JobManager; *; * \brief Main point of access for all MultiProcess infrastructure; *; * This class mainly serves as the access point to the multi-process infrastructure; * for 'Job's. It is meant to be used as a singleton that holds and connects the other; * infrastructural classes: the messenger, process manager, worker and queue loops.; *; * It is important that the user of this class, particularly the one that calls; * 'instance()' first, calls 'activate()' soon after, because everything that is; * done in between 'instance()' and 'activate()' will be executed on all processes.; * This may be useful in some cases, but in general, one will probably want to always; * use the 'JobManager' in its full capacity, including the queue and worker loops.; * This is the way the Job class uses this class, see 'Job::get_manager()'.; *; * The default number of processes is set using 'std::thread::hardware_concurrency()'.; * To change it, use 'Config::setDefaultNWorkers()' to set it to a different value; * before creation of a new JobManager instance.; */; // static function",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/multiprocess/src/JobManager.cxx:49,access,access,49,roofit/multiprocess/src/JobManager.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/multiprocess/src/JobManager.cxx,2,['access'],['access']
Security,"/** \class ProofConfig; \ingroup Roostats. Holds configuration options for proof and proof-lite. This class will be expanded in the future to hold more specific configuration; options for the tools in RooStats. Access to TProof::Mgr for configuration is still possible as usual; (e.g. to set Root Version to be used on workers). You can do:. ~~~ {.cpp}; TProof::Mgr(""my.server.url"")->ShowROOTVersions(); TProof::Mgr(""my.server.url"")->SetROOTVersion(""v5-27-06_dbg""); ~~~. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ProofConfig.h:211,Access,Access,211,roofit/roostats/inc/RooStats/ProofConfig.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ProofConfig.h,1,['Access'],['Access']
Security,/** \class RAttrValue; \ingroup GpadROOT7; \author Sergey Linev <s.linev@gsi.de>; \date 2020-06-24; \brief Template class to access single value from drawable or other attributes; \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback is welcome!; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpadv7/inc/ROOT/RAttrValue.hxx:125,access,access,125,graf2d/gpadv7/inc/ROOT/RAttrValue.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpadv7/inc/ROOT/RAttrValue.hxx,1,['access'],['access']
Security,"/** \class RElement; \ingroup rbrowser; \brief Basic element of browsable hierarchy. Provides access to data, creates iterator if any; \author Sergey Linev <S.Linev@gsi.de>; \date 2019-10-14; \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback is welcome!; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/browsable/inc/ROOT/Browsable/RElement.hxx:94,access,access,94,gui/browsable/inc/ROOT/Browsable/RElement.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/browsable/inc/ROOT/Browsable/RElement.hxx,1,['access'],['access']
Security,"/** \class REveShape; \ingroup REve; Abstract base-class for 2D/3D shapes. It provides:; - fill color / transparency, accessible via Get/SetMainColor/Transparency;; - frame line color / width;; - flag if frame should be drawn;; - flag specifying whether frame or whole shape should be emphasised for; highlight.; */; ////////////////////////////////////////////////////////////////////////////////; /// Constructor.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve7/src/REveShape.cxx:118,access,accessible,118,graf3d/eve7/src/REveShape.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve7/src/REveShape.cxx,1,['access'],['accessible']
Security,"/** \class REveTrans; \ingroup REve; REveTrans is a 4x4 transformation matrix for homogeneous coordinates; stored internally in a column-major order to allow direct usage by; GL. The element type is Double32_t as statically the floats would; be precise enough but continuous operations on the matrix must; retain precision of column vectors. Cartan angles are stored in fA[1-3] (+z, -y, +x). They are; recalculated on demand. Direct element access (first two should be used with care):; - operator[i] direct access to elements, i:0->15; - CM(i,j) element 4*j + i; i,j:0->3 { CM ~ c-matrix }; - operator(i,j) element 4*(j-1) + i - 1 i,j:1->4. Column-vector access:; USet Get/SetBaseVec(), Get/SetPos() and Arr[XYZT]() methods. For all methods taking the matrix indices:; 1->X, 2->Y, 3->Z; 4->Position (if applicable). 0 reserved for time. Shorthands in method-names:; LF ~ LocalFrame; PF ~ ParentFrame; IP ~ InPlace; */; ////////////////////////////////////////////////////////////////////////////////; /// Default constructor.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve7/src/REveTrans.cxx:441,access,access,441,graf3d/eve7/src/REveTrans.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve7/src/REveTrans.cxx,3,['access'],['access']
Security,"/** \class RHistData; A `RHistImplBase`'s data, provides accessors to all its statistics.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/inc/ROOT/RHistData.hxx:57,access,accessors,57,hist/histv7/inc/ROOT/RHistData.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/inc/ROOT/RHistData.hxx,1,['access'],['accessors']
Security,"/** \class RRawFileDavix RRawFileDavix.hxx. The RRawFileDavix class provides read-only access to remote non-ROOT files. It uses the Davix library for; the transport layer. It instructs the RRawFile base class to buffer in larger chunks than the default for; local files, assuming that remote file access has high(er) latency. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/davix/inc/ROOT/RRawFileDavix.hxx:87,access,access,87,net/davix/inc/ROOT/RRawFileDavix.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/davix/inc/ROOT/RRawFileDavix.hxx,2,['access'],['access']
Security,"/** \class RRawFileNetXNG RRawFileNetXNG.hxx. The RRawFileNetXNG class provides read-only access to remote files using root/roots protocol. It uses the; XrdCl (XRootD client) library for the transport layer. It instructs the RRawFile base class to buffer in; larger chunks than the default for local files, assuming that remote file access has high(er) latency. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/netxng/inc/ROOT/RRawFileNetXNG.hxx:90,access,access,90,net/netxng/inc/ROOT/RRawFileNetXNG.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/netxng/inc/ROOT/RRawFileNetXNG.hxx,2,['access'],['access']
Security,"/** \class RooRealL; * \ingroup Roofitcore; *; * \brief RooAbsReal that wraps RooAbsL likelihoods for use in RooFit outside of the RooMinimizer context; *; * This class provides a simple wrapper to evaluate RooAbsL derived likelihood objects like a regular RooFit real value.; * Whereas the RooAbsL objects are meant to be used within the context of minimization, RooRealL can be used in any; * RooFit context, like plotting. The value can be accessed through getVal(), like with other RooFit real variables.; **/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/TestStatistics/RooRealL.cxx:443,access,accessed,443,roofit/roofitcore/src/TestStatistics/RooRealL.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/TestStatistics/RooRealL.cxx,1,['access'],['accessed']
Security,"/** \class TAxis3D; \ingroup g3d. The 3D axis painter class. This class provide up to 3 axes to any 3D ROOT plot and ""ZOOM"" service.; ExecuteEvent() method does provide zooming and moving a projection; 3D object within TPad client area. With Zoom mode on the user can access; TAxis3D context menu and set /change the attributes of axes all together; or separately. To add the 3D rulers to any 3D view one has to create; an instance of this class and Draw it. ~~~ {.cpp}; TAxis3D rulers;; rulers.Draw();; ~~~. One can use a static method to create ruler and attach it to the current gPad. ~~~ {.cpp}; TAxis3D::ToggleRulers(); // Brings the 3D axes up; TAxis3D::ToggleRulers(); // next calls remove the rulers from the TPad etc; ~~~. To activate Zoomer one may call. ~~~ {.cpp}; TAxis3D::ToggleZoom();; ~~~. each time one needs move or zoom the image. Then the user can:. - move:; \image html g3d_axis3d_01.png; - zoom:; \image html g3d_axis3d_02.png. its 3D view with <left-mouse button> press / move.; The ""Zoom"" deactivates itself just the user release the <left-mouse button>. To change attributes of the rulers attached to the current Pad, one may; query its pointer first:. ~~~ {.cpp}; TAxis3D *axis = TAxis3D::GetPadAxis(); // Ask axis pointer; if (axis) {; TAxis3D::ToggleRulers() // To pop axes down; axis->SetLabelColor(kBlue); // Paint the axes labels with blue color; axis->SetAxisColor(kRed); // Paint the axes itself with blue color; TAxis3D::ToggleRulers() // To pop axes up; }; ~~~. The attributes of the created axes are affected by the current style; (see TStyle class ) and Set... methods of this class. For example:; ~~~ {.cpp}; gStyle->SetAxisColor(kYellow,""X"");; gStyle->SetAxisColor(kYellow,""Y"");; gStyle->SetAxisColor(kYellow,""Z"");. gStyle->SetLabelColor(kYellow,""X"");; gStyle->SetLabelColor(kYellow,""Y"");; gStyle->SetLabelColor(kYellow,""Z"");. TAxis3D::ToggleRulers();; TAxis3D::ToggleRulers();; ~~~. will draw all axes and labels with yellow color.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/g3d/src/TAxis3D.cxx:268,access,access,268,graf3d/g3d/src/TAxis3D.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/g3d/src/TAxis3D.cxx,1,['access'],['access']
Security,/** \class TBrowserObject; This class is designed to wrap a Foreign object in order to inject it into the Browse sub-system.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/gui/src/TBrowser.cxx:87,inject,inject,87,core/gui/src/TBrowser.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/gui/src/TBrowser.cxx,1,['inject'],['inject']
Security,"/** \class TCivetweb; \ingroup http. THttpEngine implementation, based on civetweb embedded server. It is default kind of engine, created for THttpServer; Currently v1.15 from https://github.com/civetweb/civetweb is used. Additional options can be specified:. top=foldername - name of top folder, seen in the browser; thrds=N - use N threads to run civetweb server (default 5); auth_file - global authentication file; auth_domain - domain name, used for authentication. Example:. new THttpServer(""http:8080?top=MyApp&thrds=3"");. For the full list of supported options see TCivetweb::Create() documentation. When `auth_file` and `auth_domain` parameters are specified, access; to running http server will be possible only after user; authentication, using so-call digest method. To generate; authentication file, htdigest routine should be used:. [shell] htdigest -c .htdigest domain_name user. When creating server, parameters should be:. auto serv = new THttpServer(""http:8080?auth_file=.htdigets&auth_domain=domain_name"");. */; ////////////////////////////////////////////////////////////////////////////////; /// constructor",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/src/TCivetweb.cxx:397,authenticat,authentication,397,net/http/src/TCivetweb.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/src/TCivetweb.cxx,5,"['access', 'authenticat']","['access', 'authentication']"
Security,"/** \class TCollectionProxyFactory TCollectionProxyFactory.h; TCollectionProxyFactory; Interface to collection proxy and streamer generator.; Proxy around an arbitrary container, which implements basic; functionality and iteration. The purpose of this implementation; is to shield any generated dictionary implementation from the; underlying streamer/proxy implementation and only expose; the creation functions. In particular this is used to implement splitting and abstract; element access of any container. Access to compiled code is necessary; to implement the abstract iteration sequence and functionality like; size(), clear(), resize(). resize() may be a void operation. \author M.Frank; \version 1.0; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/inc/TCollectionProxyFactory.h:381,expose,expose,381,io/io/inc/TCollectionProxyFactory.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/inc/TCollectionProxyFactory.h,3,"['Access', 'access', 'expose']","['Access', 'access', 'expose']"
Security,"/** \class TColor; \ingroup Base; \ingroup GraphicsAtt. The color creation and management class. - [Introduction](\ref C00); - [Basic colors](\ref C01); - [The color wheel](\ref C02); - [Bright and dark colors](\ref C03); - [Accessible Color Schemes](\ref C031); - [Gray scale view of of canvas with colors](\ref C04); - [Color palettes](\ref C05); - [High quality predefined palettes](\ref C06); - [Colour Vision Deficiency (CVD) friendly palettes](\ref C06a); - [Non Colour Vision Deficiency (CVD) friendly palettes](\ref C06b); - [Palette inversion](\ref C061); - [Color transparency](\ref C07). \anchor C00; ## Introduction. Colors are defined by their red, green and blue components, simply called the; RGB components. The colors are also known by the hue, light and saturation; components also known as the HLS components. When a new color is created the; components of both color systems are computed. At initialization time, a table of colors is generated. An existing color can; be retrieved by its index:. ~~~ {.cpp}; TColor *color = gROOT->GetColor(10);; ~~~. Then it can be manipulated. For example its RGB components can be modified:. ~~~ {.cpp}; color->SetRGB(0.1, 0.2, 0.3);; ~~~. A new color can be created the following way:. ~~~ {.cpp}; Int_t ci = 1756; // color index; auto color = new TColor(ci, 0.1, 0.2, 0.3);; ~~~. \since **6.07/07:**; TColor::GetFreeColorIndex() allows to make sure the new color is created with an; unused color index:. ~~~ {.cpp}; Int_t ci = TColor::GetFreeColorIndex();; auto color = new TColor(ci, 0.1, 0.2, 0.3);; ~~~. Two sets of colors are initialized;. - The basic colors: colors with index from 0 to 50.; - The color wheel: colors with indices from 300 to 1000. \anchor C01; ## Basic colors; The following image displays the 50 basic colors. Begin_Macro(source); {; auto c = new TCanvas(""c"",""Fill Area colors"",0,0,500,200);; c->DrawColorTable();; return c;; }; End_Macro. \anchor C02; ## The color wheel; The wheel contains the recommended 216 colors ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:225,Access,Accessible,225,core/base/src/TColor.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx,1,['Access'],['Accessible']
Security,"/** \class TEveShape; \ingroup TEve; Abstract base-class for 2D/3D shapes. It provides:; - fill color / transparency, accessible via Get/SetMainColor/Transparency;; - frame line color / width;; - flag if frame should be drawn;; - flag specifying whether frame or whole shape should be emphasised for; highlight.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve/src/TEveShape.cxx:118,access,accessible,118,graf3d/eve/src/TEveShape.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve/src/TEveShape.cxx,1,['access'],['accessible']
Security,/** \class TEveTrackPropagator; \ingroup TEve; Holding structure for a number of track rendering parameters.; Calculates path taking into account the parameters. NOTE: Magnetic field direction convention is inverted. This is decoupled from TEveTrack/TEveTrackList to allow sharing of the; Propagator among several instances. Back references are kept so the tracks; can be recreated when the parameters change. TEveTrackList has Get/Set methods for RnrStlye. TEveTrackEditor and; TEveTrackListEditor provide editor access. Enum EProjTrackBreaking_e and member fProjTrackBreaking specify whether 2D; projected tracks get broken into several segments when the projected space; consists of separate domains (like Rho-Z). The track-breaking is enabled by; default.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve/src/TEveTrackPropagator.cxx:514,access,access,514,graf3d/eve/src/TEveTrackPropagator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve/src/TEveTrackPropagator.cxx,1,['access'],['access']
Security,"/** \class TEveTrans; \ingroup TEve; TEveTrans is a 4x4 transformation matrix for homogeneous coordinates; stored internally in a column-major order to allow direct usage by; GL. The element type is Double32_t as statically the floats would; be precise enough but continuous operations on the matrix must; retain precision of column vectors. Cartan angles are stored in fA[1-3] (+z, -y, +x). They are; recalculated on demand. Direct element access (first two should be used with care):; - operator[i] direct access to elements, i:0->15; - CM(i,j) element 4*j + i; i,j:0->3 { CM ~ c-matrix }; - operator(i,j) element 4*(j-1) + i - 1 i,j:1->4. Column-vector access:; USet Get/SetBaseVec(), Get/SetPos() and Arr[XYZT]() methods. For all methods taking the matrix indices:; 1->X, 2->Y, 3->Z; 4->Position (if applicable). 0 reserved for time. Shorthands in method-names:; LF ~ LocalFrame; PF ~ ParentFrame; IP ~ InPlace; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve/src/TEveTrans.cxx:441,access,access,441,graf3d/eve/src/TEveTrans.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve/src/TEveTrans.cxx,3,['access'],['access']
Security,"/** \class TGLMatrix; \ingroup opengl; 16 component (4x4) transform matrix - column MAJOR as per GL.; Provides limited support for adjusting the translation, scale and; rotation components. This is part of collection of simple utility classes for GL only in; TGLUtil.h/cxx. These provide const and non-const accessors Arr() &; CArr() to a GL compatible internal field - so can be used directly; with OpenGL C API calls - which TVector3 etc cannot (easily).; They are not intended to be fully featured just provide minimum; required.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLUtil.cxx:308,access,accessors,308,graf3d/gl/src/TGLUtil.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLUtil.cxx,1,['access'],['accessors']
Security,/** \class TGLPlane; \ingroup opengl; 3D plane class - of format Ax + By + Cz + D = 0. This is part of collection of simple utility classes for GL only in; TGLUtil.h/cxx. These provide const and non-const accessors Arr() &; CArr() to a GL compatible internal field - so can be used directly; with OpenGL C API calls - which TVector3 etc cannot (easily).; They are not intended to be fully featured just provide minimum; required.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLUtil.cxx:205,access,accessors,205,graf3d/gl/src/TGLUtil.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLUtil.cxx,1,['access'],['accessors']
Security,/** \class TGLVector3; \ingroup opengl; 3 component (x/y/z) vector class. This is part of collection of utility classes for GL in TGLUtil.h/cxx; These provide const and non-const accessors Arr() / CArr() to a GL; compatible internal field - so can be used directly with OpenGL C API; calls. They are not intended to be fully featured just provide; minimum required.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLUtil.cxx:179,access,accessors,179,graf3d/gl/src/TGLUtil.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLUtil.cxx,1,['access'],['accessors']
Security,/** \class TGLVertex3; \ingroup opengl; 3 component (x/y/z) vertex class. This is part of collection of simple utility classes for GL only in; TGLUtil.h/cxx. These provide const and non-const accessors Arr() &; CArr() to a GL compatible internal field - so can be used directly; with OpenGL C API calls - which TVector3 etc cannot (easily).; They are not intended to be fully featured just provide minimum required.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLUtil.cxx:192,access,accessors,192,graf3d/gl/src/TGLUtil.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLUtil.cxx,1,['access'],['accessors']
Security,"/** \class TGeoGlobalMagField; \ingroup Geometry_classes. Global magnetic field manager. Provides access to; and owns the actual magnetic field set via `SetField()`. The field is deleted; upon destruction of the field manager at the end of ROOT session or; by calling:. ~~~ {.cpp}; TGeoGlobalMagField::Instance()->SetField(0).; ~~~. The previous global field is deleted upon replacement with notification. The global field manager provides access to the global field via:. ~~~ {.cpp}; TGeoGlobalMagField::Instance()->GetField(); ~~~. One can directly call the Field() method of a field via the global field manager:. ~~~ {.cpp}; TGeoGlobalMagField::Instance()->Field(x,B); ~~~; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoGlobalMagField.cxx:98,access,access,98,geom/geom/src/TGeoGlobalMagField.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoGlobalMagField.cxx,2,['access'],['access']
Security,/** \class THashTableIter; Iterator of hash table.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx:39,hash,hash,39,core/cont/src/THashTable.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx,1,['hash'],['hash']
Security,"/** \class THnSparse; \ingroup Hist. Efficient multidimensional histogram. Use a THnSparse instead of TH1 / TH2 / TH3 / array for histogramming when; only a small fraction of bins is filled. A 10-dimensional histogram with 10; bins per dimension has 10^10 bins; in a naive implementation this will not; fit in memory. THnSparse only allocates memory for the bins that have; non-zero bin content instead, drastically reducing both the memory usage; and the access time. To construct a THnSparse object you must use one of its templated, derived; classes:; - THnSparseD (typedef for THnSparseT<ArrayD>): bin content held by a Double_t,; - THnSparseF (typedef for THnSparseT<ArrayF>): bin content held by a Float_t,; - THnSparseL (typedef for THnSparseT<ArrayL64>): bin content held by a Long64_t,; - THnSparseI (typedef for THnSparseT<ArrayI>): bin content held by an Int_t,; - THnSparseS (typedef for THnSparseT<ArrayS>): bin content held by a Short_t,; - THnSparseC (typedef for THnSparseT<ArrayC>): bin content held by a Char_t,. They take name and title, the number of dimensions, and for each dimension; the number of bins, the minimal, and the maximal value on the dimension's; axis. A TH2 h(""h"",""h"",10, 0., 10., 20, -5., 5.) would correspond to. Int_t bins[2] = {10, 20};; Double_t xmin[2] = {0., -5.};; Double_t xmax[2] = {10., 5.};; THnSparseD hs(""hs"", ""hs"", 2, bins, xmin, xmax);. ## Filling; A THnSparse is filled just like a regular histogram, using; THnSparse::Fill(x, weight), where x is a n-dimensional Double_t value.; To take errors into account, Sumw2() must be called before filling the; histogram. Bins are allocated as needed; the status of the allocation can be observed; by GetSparseFractionBins(), GetSparseFractionMem(). ## Fast Bin Content Access; When iterating over a THnSparse one should only look at filled bins to save; processing time. The number of filled bins is returned by; THnSparse::GetNbins(); the bin content for each (linear) bin number can; be retrieved by THnS",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx:456,access,access,456,hist/hist/src/THnSparse.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx,1,['access'],['access']
Security,"/** \class THnSparseCoordCompression; THnSparseCoordCompression is a class used by THnSparse internally. It; represents a compacted n-dimensional array of bin coordinates (indices).; As the total number of bins in each dimension is known by THnSparse, bin; indices can be compacted to only use the amount of bins needed by the total; number of bins in each dimension. E.g. for a THnSparse with; {15, 100, 2, 20, 10, 100} bins per dimension, a bin index will only occupy; 28 bits (4+7+1+5+4+7), i.e. less than a 32bit integer. The tricky part is; the fast compression and decompression, the platform-independent storage; (think of endianness: the bits of the number 0x123456 depend on the; platform), and the hashing needed by THnSparseArrayChunk.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx:708,hash,hashing,708,hist/hist/src/THnSparse.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx,1,['hash'],['hashing']
Security,"/** \class THtml; \brief Legacy ROOT documentation system. \deprecated; We keep THtml for those who still need it for legacy use cases.; ROOT has since several years moved to [doxygen](https://www.doxygen.nl) as documentation generator.; THtml is not developed nor supported anymore; please migrate to [doxygen](https://www.doxygen.nl) instead. <p>The THtml class is designed to easily document; classes, code, and code related text files (like change logs). It generates HTML; pages conforming to the XHTML 1.0 transitional specifications; an example of; these pages is ROOT's own <a href=""http://root.cern.ch/root/html/ClassIndex.html"">; reference guide</a>. This page was verified to be valid XHTML 1.0 transitional,; which proves that all pages generated by THtml can be valid, as long as the user; provided XHTML (documentation, header, etc) is valid. You can check the current; THtml by clicking this icon:; <a href=""http://validator.w3.org/check?uri=referer""><img; src=""http://www.w3.org/Icons/valid-xhtml10""; alt=""Valid XHTML 1.0 Transitional"" height=""31"" width=""88"" style=""border: none;""/></a></p>; Overview:; <ol style=""list-style-type: upper-roman;"">; <li><a href=""#usage"">Usage</a></li>; <li><a href=""#conf"">Configuration</a>; <ol><li><a href=""#conf:input"">Input files</a></li>; <li><a href=""#conf:output"">Output directory</a></li>; <li><a href=""#conf:liblink"">Linking other documentation</a></li>; <li><a href=""#conf:classdoc"">Recognizing class documentation</a></li>; <li><a href=""#conf:tags"">Author, copyright, etc.</a></li>; <li><a href=""#conf:header"">Header and footer</a></li>; <li><a href=""#conf:search"">Links to searches, home page, ViewVC</a></li>; <li><a href=""#conf:charset"">HTML Charset</a></li>; </ol></li>; <li><a href=""#syntax"">Documentation syntax</a>; <ol><li><a href=""#syntax:classdesc"">Class description</a></li>; <li><a href=""#syntax:classidx"">Class index</a></li>; <li><a href=""#syntax:meth"">Method documentation</a></li>; <li><a href=""#syntax:datamem"">Data member doc",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/html/src/THtml.cxx:930,validat,validator,930,html/src/THtml.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/html/src/THtml.cxx,1,['validat'],['validator']
Security,"/** \class THttpServer; \ingroup http. Online http server for arbitrary ROOT application. Idea of THttpServer - provide remote http access to running; ROOT application and enable HTML/JavaScript user interface.; Any registered object can be requested and displayed in the browser.; There are many benefits of such approach:. 1. standard http interface to ROOT application; 2. no any temporary ROOT files when access data; 3. user interface running in all browsers. To start http server simply create instance; of the THttpServer class like:. serv = new THttpServer(""http:8080"");. This will starts civetweb-based http server with http port 8080.; Than one should be able to open address ""http://localhost:8080""; in any modern web browser (Firefox, Chrome, Opera, ...) and browse objects,; created in ROOT application. By default, server can access files,; canvases and histograms via `gROOT` pointer. All such objects; can be displayed with JSROOT graphics. At any time one could register other objects with the command:. TGraph* gr = new TGraph(10);; gr->SetName(""gr1"");; serv->Register(""graphs/subfolder"", gr);. If objects content is changing in the application, one could; enable monitoring flag in the browser - than objects view; will be regularly updated. More information: https://root.cern/root/htmldoc/guides/HttpServer/HttpServer.html; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/src/THttpServer.cxx:132,access,access,132,net/http/src/THttpServer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/src/THttpServer.cxx,3,['access'],['access']
Security,/** \class TInspectorObject; \ingroup gpad. This class is designed to wrap a Foreign object in order to; inject it into the Browse sub-system.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TInspectCanvas.cxx:105,inject,inject,105,graf2d/gpad/src/TInspectCanvas.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TInspectCanvas.cxx,1,['inject'],['inject']
Security,"/** \class TNDArray. N-Dim array class. Storage layout:; Assume 3 dimensions, array sizes 2, 4 and 3 i.e. 24 bins:; Data is stored as [0,0,0], [0,0,1], [0,0,2], [0,1,0],... fSizes stores the combined size of each bin in a dimension, i.e. in; above example it would contain 24, 12, 3, 1. Storage is allocated lazily, only when data is written to the array.; */; /** \class TNDArrayRef. gives access to a sub-dimension, e.g. arr[0][1] in above; three-dimensional example, up to an element with conversion operator; to double: double value = arr[0][1][2];; */; // Array layout:; // nbins[0] = 2, nbins[1] = 4, nbins[2] = 3 => 24 bins; //; // fSizes: 24, 12, 3 [, 1",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TNDArray.h:391,access,access,391,hist/hist/inc/TNDArray.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TNDArray.h,1,['access'],['access']
Security,/** \class TObjectElement; \ingroup rbrowser; \brief Access to TObject basic properties for RBrowsable; \author Sergey Linev <S.Linev@gsi.de>; \date 2021-01-11; \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback is welcome!; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/browsable/inc/ROOT/Browsable/TObjectElement.hxx:53,Access,Access,53,gui/browsable/inc/ROOT/Browsable/TObjectElement.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/browsable/inc/ROOT/Browsable/TObjectElement.hxx,1,['Access'],['Access']
Security,"/** \class TRefArrayProxy; A container proxy, which allows to access references stored; in a TRefArray from TTree::Draw; */; ////////////////////////////////////////////////////////////////////////////////; /// Access referenced object(-data)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TRefArrayProxy.cxx:62,access,access,62,tree/treeplayer/src/TRefArrayProxy.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TRefArrayProxy.cxx,2,"['Access', 'access']","['Access', 'access']"
Security,"/** \class TRootSniffer; \ingroup http. Sniffer of ROOT objects, data provider for THttpServer. Provides methods to scan different structures like folders,; directories, files and collections. Can locate objects (or its data member) per name.; Can be extended to application-specific classes. Normally TRootSnifferFull class is used which able to access data from trees, canvases, histograms.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/src/TRootSniffer.cxx:347,access,access,347,net/http/src/TRootSniffer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/src/TRootSniffer.cxx,1,['access'],['access']
Security,"/** \class TRootSnifferFull; \ingroup http. Extends TRootSniffer for many ROOT classes. Provides access to different ROOT collections and containers; like TTree, TCanvas, TFile, ...; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/httpsniff/src/TRootSnifferFull.cxx:97,access,access,97,net/httpsniff/src/TRootSnifferFull.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/httpsniff/src/TRootSnifferFull.cxx,1,['access'],['access']
Security,"/** \class TStyle; \ingroup Base; \ingroup GraphicsAtt. TStyle objects may be created to define special styles.; By default ROOT creates a default style that can be accessed via; the gStyle pointer. This class includes functions to set some of the following object attributes.; - Canvas; - Pad; - Histogram axis; - Lines; - Fill areas; - Text; - Markers; - Functions; - Histogram Statistics and Titles. All objects that can be drawn in a pad inherit from one or more attribute classes; like TAttLine, TAttFill, TAttText, TAttMarker. When the objects are created, their; default attributes are taken from the current style. The current style is an object; of the class[TStyle](https://root.cern/doc/master/classTStyle.html) and can be; referenced via the global variable `gStyle` (in TStyle.h). ROOT provides two styles called ""Default"" and ""Plain"". The ""Default""; style is created simply by:. ~~~ {.cpp}; auto default = new TStyle(""Default"",""Default Style"");; ~~~. The `Plain` style can be used if you are working on a monochrome display or; if you want to get a ""conventional"" Postscript output. These are the instructions; in the ROOT constructor to create the `Plain` style. ```; auto plain = new TStyle(""Plain"",""Plain Style (no colors/fill areas)"");. plain->SetCanvasBorderMode(0);; plain->SetPadBorderMode(0);; plain->SetPadColor(0);; plain->SetCanvasColor(0);; plain->SetTitleColor(0);; plain->SetStatColor(0);; ```. You can set the current style with:. ```; gROOT->SetStyle(style_name);; ```. You can get a pointer to an existing style with:. ```; auto style = gROOT->GetStyle(style_name);; ```. You can create additional styles with:. ```; TStyle *st1 = new TStyle(""st1"",""my style"");; st1->Set....; st1->cd(); this becomes now the current style gStyle; ```. In your [rootlogon.C](https://root.cern/doc/master/classexamples/startsession.log.html); file, you can redefine the default parameters via statements like:. ```; gStyle->SetStatX(0.7);; gStyle->SetStatW(0.2);; gStyle->SetLabelOffset(1.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStyle.cxx:165,access,accessed,165,core/base/src/TStyle.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStyle.cxx,1,['access'],['accessed']
Security,"/** \class TTreeView; \brief A helper class that encapsulates a file and a tree. A helper class that encapsulates a TFile and a TTree, along with their names.; It is used together with TTProcessor and ROOT::TThreadedObject, so that; in the TTProcessor::Process method each thread can work on its own; <TFile,TTree> pair. This class can also be used with a collection of file names or a TChain, in case; the tree is stored in more than one file. A view will always contain only the; current (active) tree and file objects. A copy constructor is defined for TTreeView to work with ROOT::TThreadedObject.; The latter makes a copy of a model object every time a new thread accesses; the threaded object.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/inc/ROOT/TTreeProcessorMT.hxx:669,access,accesses,669,tree/treeplayer/inc/ROOT/TTreeProcessorMT.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/inc/ROOT/TTreeProcessorMT.hxx,1,['access'],['accesses']
Security,"/** \defgroup CINDEX libclang: C Interface to Clang; *; * The C Interface to Clang provides a relatively small API that exposes; * facilities for parsing source code into an abstract syntax tree (AST),; * loading already-parsed ASTs, traversing the AST, associating; * physical source locations with elements within the AST, and other; * facilities that support Clang-based development tools.; *; * This C interface to Clang will never provide all of the information; * representation stored in Clang's C++ AST, nor should it: the intent is to; * maintain an API that is relatively stable from one release to the next,; * providing only the basic functionality needed to support development tools.; *; * To avoid namespace pollution, data types are prefixed with ""CX"" and; * functions are prefixed with ""clang_"".; *; * @{; */; /**; * An ""index"" that consists of a set of translation units that would; * typically be linked together into an executable or library.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang-c/Index.h:120,expose,exposes,120,interpreter/llvm-project/clang/include/clang-c/Index.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang-c/Index.h,1,['expose'],['exposes']
Security,"/** class TRefProxy; A reference proxy, which allows to access ROOT references (TRef); stored contained in other objects from TTree::Draw; */; ////////////////////////////////////////////////////////////////////////////////; /// TVirtualRefProxy overload: Update (and propagate) cached information",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TRefProxy.cxx:56,access,access,56,tree/treeplayer/src/TRefProxy.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TRefProxy.cxx,1,['access'],['access']
Security,"/** facade: forward interface of MnUserParameters and MnUserTransformation */; // access to parameters (row-wise)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnUserParameterState.h:82,access,access,82,math/minuit2/inc/Minuit2/MnUserParameterState.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnUserParameterState.h,1,['access'],['access']
Security,/** return authenticated user name (0 - when no authentication) */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/inc/THttpCallArg.h:11,authenticat,authenticated,11,net/http/inc/THttpCallArg.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/inc/THttpCallArg.h,2,['authenticat'],"['authenticated', 'authentication']"
Security,/** set name of authenticated user */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/inc/THttpCallArg.h:16,authenticat,authenticated,16,net/http/inc/THttpCallArg.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/inc/THttpCallArg.h,1,['authenticat'],['authenticated']
Security,"/*** \class TDLGradientDescent; *; * Generic implementation of gradient descent minimization for the; * deep learning neural nets.; *; * The TDLGradientDescent class implements an architecture, input data and; * deep learning neural network type independent implementation of the gradient; * descent minimization algorithm.; *; * This is provided by the Step(...), StepMomentum(...) and; * StepNesterov(...) functions that perform a single minimization step.; *; * The main training characteristics are defined by the provided learning rate,; * the test interval, and the convergence steps required for convergence. The; * test interval defines how often the error on the validation set is computed,; * and the values with which the step counter is increased each time the; * HasConverged() member function is called. A convergence step is defined as; * a step in which the test error is NOT less than 0.999 times the current; * minimal test error that has been reached. If between two subsequent calls; * to HasConverged(Double_t) the test error has not been sufficiently reduced; * it is assumed that a number of convergence steps equal to the test interval; * has been performed.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DLMinimizers.h:672,validat,validation,672,tmva/tmva/inc/TMVA/DNN/DLMinimizers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DLMinimizers.h,1,['validat'],['validation']
Security,"/******* Canonical representation *******/; /*; * The default return values from XXH functions are unsigned 32 and 64 bit; * integers.; * This the simplest and fastest format for further post-processing.; *; * However, this leaves open the question of what is the order on the byte level,; * since little and big endian conventions will store the same number differently.; *; * The canonical representation settles this issue by mandating big-endian; * convention, the same convention as human-readable numbers (large digits first).; *; * When writing hash values to storage, sending them over a network, or printing; * them, it's highly recommended to use the canonical representation to ensure; * portability across a wider range of systems, present and future.; *; * The following functions allow transformation of hash values to and from; * canonical format.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/xxhash/xxhash.h:552,hash,hash,552,builtins/xxhash/xxhash.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/xxhash/xxhash.h,2,['hash'],['hash']
Security,"/******* Canonical representation *******/; /*; * The default return values from XXH functions are unsigned 32 and 64 bit; * integers.; *; * The canonical representation uses big endian convention, the same convention; * as human-readable numbers (large digits first).; *; * This way, hash values can be written into a file or buffer, remaining; * comparable across different systems.; *; * The following functions allow transformation of hash values to and from their; * canonical format.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/xxhash/xxhash.h:285,hash,hash,285,builtins/xxhash/xxhash.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/xxhash/xxhash.h,2,['hash'],['hash']
Security,/******* Hash Streaming *******/,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/xxhash/xxhash.h:9,Hash,Hash,9,builtins/xxhash/xxhash.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/xxhash/xxhash.h,1,['Hash'],['Hash']
Security,/******* Hash streaming *******/,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/xxhash/xxhash.h:9,Hash,Hash,9,builtins/xxhash/xxhash.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/xxhash/xxhash.h,1,['Hash'],['Hash']
Security,"/******* Streaming *******/; /*; * Streaming functions generate the xxHash value from an incrememtal input.; * This method is slower than single-call functions, due to state management.; * For small inputs, prefer `XXH32()` and `XXH64()`, which are better optimized.; *; * An XXH state must first be allocated using `XXH*_createState()`.; *; * Start a new hash by initializing the state with a seed using `XXH*_reset()`.; *; * Then, feed the hash state by calling `XXH*_update()` as many times as necessary.; *; * The function returns an error code, with 0 meaning OK, and any other value; * meaning there is an error.; *; * Finally, a hash value can be produced anytime, by using `XXH*_digest()`.; * This function returns the nn-bits hash as an int or long long.; *; * It's still possible to continue inserting input into the hash state after a; * digest, and generate new hash values later on by invoking `XXH*_digest()`.; *; * When done, release the state using `XXH*_freeState()`.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/xxhash/xxhash.h:356,hash,hash,356,builtins/xxhash/xxhash.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/xxhash/xxhash.h,6,['hash'],['hash']
Security,"/******* Streaming *******/; /*; * Streaming requires state maintenance.; * This operation costs memory and CPU.; * As a consequence, streaming is slower than one-shot hashing.; * For better performance, prefer one-shot functions whenever applicable.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/xxhash/xxhash.h:168,hash,hashing,168,builtins/xxhash/xxhash.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/xxhash/xxhash.h,1,['hash'],['hashing']
Security,"/******* Streaming *******/; /*; * Streaming requires state maintenance.; * This operation costs memory and CPU.; * As a consequence, streaming is slower than one-shot hashing.; * For better performance, prefer one-shot functions whenever applicable.; *; * XXH3_128bits uses the same XXH3_state_t as XXH3_64bits().; * Use already declared XXH3_createState() and XXH3_freeState().; *; * All reset and streaming functions have same meaning as their 64-bit counterpart.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/xxhash/xxhash.h:168,hash,hashing,168,builtins/xxhash/xxhash.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/xxhash/xxhash.h,1,['hash'],['hashing']
Security,"/******************* End Escape Sequence Translator ***************/; /******************* Begin HTML tokenizer code *******************/; // The following variable becomes TRUE when the markup hash table; // (stored in HtmlMarkupMap[]) is initialized.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/guihtml/src/TGHtmlParse.cxx:194,hash,hash,194,gui/guihtml/src/TGHtmlParse.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/guihtml/src/TGHtmlParse.cxx,1,['hash'],['hash']
Security,"/********************* access by global bin number ******/; ////////////////////////////////////////////////////////////////////////; /// get the name of a bin; ///; /// \param[in] iBin global bin number; ///; /// returns a string describing the bin",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfoldBinning.cxx:23,access,access,23,hist/unfold/src/TUnfoldBinning.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfoldBinning.cxx,1,['access'],['access']
Security,"/*****************************************************************************************************/; /* function : Directory generator */; /* comment : Initialize the offset, tag, length, and checksum for each table for the font to be used.*/; /*****************************************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:196,checksum,checksum,196,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['checksum'],['checksum']
Security,"/*******************************************************************************; Introduction. zstd, short for Zstandard, is a fast lossless compression algorithm, targeting; real-time compression scenarios at zlib-level and better compression ratios.; The zstd compression library provides in-memory compression and decompression; functions. The library supports regular compression levels from 1 up to ZSTD_maxCLevel(),; which is currently 22. Levels >= 20, labeled `--ultra`, should be used with; caution, as they require more memory. The library also offers negative; compression levels, which extend the range of speed vs. ratio preferences.; The lower the level, the faster the speed (at the cost of compression). Compression can be done in:; - a single step (described as Simple API); - a single step, reusing a context (described as Explicit context); - unbounded multiple steps (described as Streaming compression). The compression ratio achievable on small data can be highly improved using; a dictionary. Dictionary compression can be performed in:; - a single step (described as Simple dictionary API); - a single step, reusing a dictionary (described as Bulk-processing; dictionary API). Advanced experimental functions can be accessed using; `#define ZSTD_STATIC_LINKING_ONLY` before including zstd.h. Advanced experimental APIs should never be used with a dynamically-linked; library. They are not ""stable""; their definitions or signatures may change in; the future. Only static linking is allowed.; *******************************************************************************/; /*------ Version ------*/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:1241,access,accessed,1241,builtins/zstd/zstd.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h,1,['access'],['accessed']
Security,/******************************************************************************; * Debugging routine to print the hit ratio - number of times the hash table *; * was tested per operation. This routine was used to test the KeyItem routine *; ******************************************************************************/,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gif_hash.c:146,hash,hash,146,graf2d/asimage/src/libAfterImage/libungif/gif_hash.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gif_hash.c,1,['hash'],['hash']
Security,"/******************************************************************************; * Declarations, global to other of the GIF-HASH.C module.		 *; *									 *; *					Written by Gershon Elber, Jun 1989 *; *******************************************************************************; * History:								 *; * 14 Jun 89 - Version 1.0 by Gershon Elber.				 *; ******************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gif_hash.h:124,HASH,HASH,124,graf2d/asimage/src/libAfterImage/libungif/gif_hash.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gif_hash.h,1,['HASH'],['HASH']
Security,/******************************************************************************; * Initialize HashTable - allocate the memory needed and clear it.	 *; ******************************************************************************/,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gif_hash.c:94,Hash,HashTable,94,graf2d/asimage/src/libAfterImage/libungif/gif_hash.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gif_hash.c,1,['Hash'],['HashTable']
Security,"/******************************************************************************; * O.K., here are the routines one can access in order to decode GIF file: *; * (GIF_LIB file DGIF_LIB.C).						 *; ******************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gif_lib.h:119,access,access,119,graf2d/asimage/src/libAfterImage/libungif/gif_lib.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gif_lib.h,1,['access'],['access']
Security,"/******************************************************************************; * O.K., here are the routines one can access in order to encode GIF file: *; * (GIF_LIB file EGIF_LIB.C).						 *; ******************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gif_lib.h:119,access,access,119,graf2d/asimage/src/libAfterImage/libungif/gif_lib.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gif_lib.h,1,['access'],['access']
Security,/******************************************************************************; * Routine to clear the HashTable to an empty state.			 *; * This part is a little machine depended. Use the commented part otherwise. *; ******************************************************************************/,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gif_hash.c:104,Hash,HashTable,104,graf2d/asimage/src/libAfterImage/libungif/gif_hash.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gif_hash.c,1,['Hash'],['HashTable']
Security,"/******************************************************************************; * Routine to generate an HKey for the hashtable out of the given unique key. *; * The given Key is assumed to be 20 bits as follows: lower 8 bits are the *; * new postfix character, while the upper 12 bits are the prefix code.	 *; * Because the average hit ratio is only 2 (2 hash references per entry), *; * evaluating more complex keys (such as twin prime keys) does not worth it! *; ******************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gif_hash.c:119,hash,hashtable,119,graf2d/asimage/src/libAfterImage/libungif/gif_hash.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gif_hash.c,2,['hash'],"['hash', 'hashtable']"
Security,/******************************************************************************; * Routine to insert a new Item into the HashTable. The data is assumed to be *; * new one.								 *; ******************************************************************************/,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gif_hash.c:121,Hash,HashTable,121,graf2d/asimage/src/libAfterImage/libungif/gif_hash.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gif_hash.c,1,['Hash'],['HashTable']
Security,"/******************************************************************************; * Routine to set current GIF version. All files open for write will be *; * using this version until next call to this routine. Version consists of *; * 3 characters as ""87a"" or ""89a"". No test is made to validate the version. *; ******************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/egif_lib.c:285,validat,validate,285,graf2d/asimage/src/libAfterImage/libungif/egif_lib.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/egif_lib.c,1,['validat'],['validate']
Security,"/******************************************************************************; * Routine to test if given Key exists in HashTable and if so returns its code *; * Returns the Code if key was found, -1 if not.				 *; ******************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gif_hash.c:122,Hash,HashTable,122,graf2d/asimage/src/libAfterImage/libungif/gif_hash.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gif_hash.c,1,['Hash'],['HashTable']
Security,"/*****************************************************************************; * ""Gif-Lib"" - Yet another gif library.				 *; *									 *; * Written by: Gershon Elber			IBM PC Ver 0.1,	Jun. 1989 *; ******************************************************************************; * Module to support the following operations:				 *; *									 *; * 1. InitHashTable - initialize hash table.				 *; * 2. ClearHashTable - clear the hash table to an empty state.		 *; * 2. InsertHashTable - insert one item into data structure.		 *; * 3. ExistsHashTable - test if item exists in data structure.		 *; *									 *; * This module is used to hash the GIF codes during encoding.		 *; ******************************************************************************; * History:								 *; * 14 Jun 89 - Version 1.0 by Gershon Elber.				 *; *****************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gif_hash.c:378,hash,hash,378,graf2d/asimage/src/libAfterImage/libungif/gif_hash.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gif_hash.c,3,['hash'],['hash']
Security,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooChangeTracker.cxx; \class RooChangeTracker; \ingroup Roofitcore. Meta object that tracks value; changes in a given set of RooAbsArgs by registering itself as value; client of these objects. The change tracker can perform an; additional validation step where it also compares the numeric; values of the tracked arguments with reference values to ensure; that values have actually changed. This may be useful in case some; of the tracked observables are in binned datasets where each; observable propagates a valueDirty flag when an event is loaded even; though usually only one observable actually changes.; **/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooChangeTracker.cxx:945,validat,validation,945,roofit/roofitcore/src/RooChangeTracker.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooChangeTracker.cxx,1,['validat'],['validation']
Security,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooFoamGenerator.cxx; \class RooFoamGenerator; \ingroup Roofitcore. Generic Monte Carlo toy generator that implement; the TFOAM sampling technique on any positively valued function.; The RooFoamGenerator generator is used by the various generator context; classes to take care of generation of observables for which p.d.fs; do not define internal methods. The foam generator reacts to the following config options:; - nCell[123N]D; - nSample; - chatLevel; Access those using:; myPdf->specialGeneratorConfig()->getConfigSection(""RooFoamGenerator"").setRealValue(""nSample"",1e4);. \see rf902_numgenconfig.C; **/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFoamGenerator.cxx:1162,Access,Access,1162,roofit/roofitcore/src/RooFoamGenerator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFoamGenerator.cxx,1,['Access'],['Access']
Security,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooLinkedList.cxx; \class RooLinkedList; \ingroup Roofitcore. Collection class for internal use, storing; a collection of RooAbsArg pointers in a doubly linked list.; It can optionally add a hash table to speed up random access; in large collections; Use RooAbsCollection derived objects for public use; (e.g. RooArgSet or RooArgList); **/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooLinkedList.cxx:897,hash,hash,897,roofit/roofitcore/src/RooLinkedList.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooLinkedList.cxx,2,"['access', 'hash']","['access', 'hash']"
Security,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooRealVar.cxx; \class RooRealVar; \ingroup Roofitcore. Variable that can be changed from the outside.; For example by the user or a fitter. It can be written into datasets, can hold a (possibly asymmetric) error, and; can have several ranges. These can be accessed with names, to e.g. limit fits; or integrals to sub ranges. The range without any name is used as default range.; **/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooRealVar.cxx:963,access,accessed,963,roofit/roofitcore/src/RooRealVar.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooRealVar.cxx,1,['access'],['accessed']
Security,"/****************************************************************************; *; * Find the specified icon file somewhere along the given path.; *; * There is a possible race condition here: We check the file and later; * do something with it. By then, the file might not be accessible.; * Oh well.; *; ****************************************************************************/; /* supposedly pathlist should not include any environment variables; including things like ~/; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/afterbase.c:276,access,accessible,276,graf2d/asimage/src/libAfterImage/afterbase.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/afterbase.c,1,['access'],['accessible']
Security,"/**************************************************************************/; // ColorSet access & management; /******************************************************************************/; ////////////////////////////////////////////////////////////////////////////////; /// Create copy of current color-set on the top of the stack.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLRnrCtx.cxx:90,access,access,90,graf3d/gl/src/TGLRnrCtx.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLRnrCtx.cxx,1,['access'],['access']
Security,/***************************************************************/; /* function : checksum */; /* comment : Duplicate the table for the tag. */; /***************************************************************/,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:81,checksum,checksum,81,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['checksum'],['checksum']
Security,"/************************************************************. Copyright 1989, 1998 The Open Group. Permission to use, copy, modify, distribute, and sell this software and its; documentation for any purpose is hereby granted without fee, provided that; the above copyright notice appear in all copies and that both that; copyright notice and this permission notice appear in supporting; documentation. The above copyright notice and this permission notice shall be included in; all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE; OPEN GROUP BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN; AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN; CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Except as contained in this notice, the name of The Open Group shall not be; used in advertising or otherwise to promote the sale, use or other dealings; in this Software without prior written authorization from The Open Group. ********************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/x11/inc/X11/extensions/shapeconst.h:1171,authoriz,authorization,1171,graf2d/x11/inc/X11/extensions/shapeconst.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/x11/inc/X11/extensions/shapeconst.h,1,['authoriz'],['authorization']
Security,"/*************/; /****f* libAfterImage/asfont/create_font_manager(); * NAME; * create_font_manager(); * SYNOPSIS; * ASFontManager *create_font_manager( Display *dpy,; * const char *font_path,; * ASFontManager *reusable_memory );; * INPUTS; * dpy - pointer to valid and opened Display.; * font_path - string, representing colon separated list of; * directories to search for FreeType fonts.; * reusable_memory - optional preallocated memory for the ASFontMagaer; * object; * RETURN VALUE; * Pointer to Initialized ASFontManager object on success.; * NULL otherwise.; * DESCRIPTION; * create_font_manager() will create new ASFontManager structure if; * needed. It wioll then store copy of font_path and supplied pointer to; * Display in it. At that time Hash table of loaded fonts is initialized,; * and if needed FreeType library is initialized as well.; * ASFontManager object returned by this functions has to be open at all; * times untill text drawing is no longer needed.; *********/; /****f* libAfterImage/asfont/destroy_font_manager(); * NAME; * destroy_font_manager(); * SYNOPSIS; * void destroy_font_manager( ASFontManager *fontman,; * Bool reusable );; * INPUTS; * fontman - pointer to valid ASFontManager object to be deallocated.; * reusable - If True, then memory holding object itself will not be; * freed - only resources will be deallocated. That is; * usefull for structures created on stack.; * DESCRIPTION; * destroy_font_manager() closes all the fonts open with this; * ASFontManager. It will also close connection to FreeType library, and; * deallocate all cached data. If reusable is False - then memory used; * for object itself will not be freed.; *********/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/asfont.h:752,Hash,Hash,752,graf2d/asimage/src/libAfterImage/asfont.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/asfont.h,1,['Hash'],['Hash']
Security,"/*************/; /****s* libAfterImage/ASFontManager; * NAME; * ASFontManager; * DESCRIPTION; * Global data identifying connection to external libraries, as well as; * fonts location paths.; * This structure has to be created/initialized prior to any font being; * loaded.; * It also holds list of fonts that are currently open, allowing for; * easy access to fonts.; * When ASFontManagaer object is destroyd it automagically closes all; * the open fonts.; * SOURCE; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/asfont.h:350,access,access,350,graf2d/asimage/src/libAfterImage/asfont.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/asfont.h,1,['access'],['access']
Security,"/****f* libAfterImage/asimage/create_image_manager(); * NAME; * create_image_manager() create ASImage management and reference ; * counting object.; * SYNOPSIS; * ASImageManager *create_image_manager( ASImageManager *reusable_memory,; * double gamma, ... );; * INPUTS; * reusable_memory - optional pointer to a block of memory to be used to; * store ASImageManager object.; * double gamma - value of gamma correction to be used while loading; * images from files.; * ... - NULL terminated list of up to 8 PATH strings to list; * locations at which images could be found.; * DESCRIPTION; * Creates ASImageManager object in memory and initializes it with; * requested gamma value and PATH list. This Object will contain a hash; * table referencing all the loaded images. When such object is used while; * loading images from the file - gamma and PATH values will be used, so; * that all the loaded and referenced images will have same parameters.; * File name will be used as the image name, and if same file is attempted; * to be loaded again - instead reference will be incremented, and; * previously loaded image will be retyrned. All the images stored in; * ASImageManager's table will contain a back pointer to it, and they must; * be deallocated only by calling release_asimage(). destroy_asimage() will; * refuse to deallocate such an image.; *********/; /****f* libAfterImage/asimage/destroy_image_manager(); * NAME ; * destroy_image_manager() destroy management obejct.; * SYNOPSIS; * void destroy_image_manager( struct ASImageManager *imman, ; * 							 Bool reusable );; * INPUTS; * imman - pointer to ASImageManager object to be deallocated; * reusable - if True, then memory that holds object itself will; * not be deallocated. Usefull when object is created; * on stack.; * DESCRIPTION; * Destroys all the referenced images, PATH values and if reusable is False,; * also deallocates object's memory.; *********/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/asimage.h:720,hash,hash,720,graf2d/asimage/src/libAfterImage/asimage.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/asimage.h,1,['hash'],['hash']
Security,"/****f* libAfterImage/asimage/forget_asimage(); * NAME; * forget_asimage() remove ASImage from ASImageManager's hash by pointer.; * NAME; * forget_asimage_name() remove ASImage from ASImageManager's hash by its ; * name.; * SYNOPSIS; * void	 forget_asimage( ASImage *im );; * void forget_asimage_name( ASImageManager *imman, const char *name );; * INPUTS; * im pointer to already referenced image.; * imageman pointer to valid ASImageManager object.; * name unique name of the image.; *********/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/asimage.h:112,hash,hash,112,graf2d/asimage/src/libAfterImage/asimage.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/asimage.h,2,['hash'],['hash']
Security,"/****h* libAfterImage/ascmap.h; * NAME; * ascmap - Defines main structures and function for image quantization.; * DESCRIPTION; * Image quantization is needed primarily in order to be able to export; * images into file, with colormap format, such as GIF and XPM.; * libAfterImage attempts to allocate colorcells to the most used colors,; * and then approximate remaining colors with the closest colorcell.; *; * Since quality of quantization is in reverse proportion to the number; * of colors in original image, libAfterImage allows to set arbitrary; * level of downsampling of the color spectrum in the range of 8 bit per; * channel to 1 bit per channel. Downsampling is performed by simple; * dropping of less significant bits off of color values.; *; * In order to be able to determine closeness of colors, 3-channel RGB; * values are converted into flat 24bit (or less if downsampling is used); * index. That is done by intermixing bits from different channels, like; * so : R8G8B8R7G7B7...R1G1B1. That flat index is used to arrange colors; * in ascending order, and later on to be able to find closest mapped; * color. Simple hashing technique is used to speed up the; * sorting/searching, as it allows to limit linked lists traversals.; *; * SEE ALSO; * Structures :; * ASColormapEntry; * ASColormap; *; * Functions :; * colormap_asimage(), destroy_colormap(); *; * Other libAfterImage modules :; * ascmap.h asfont.h asimage.h asvisual.h blender.h export.h; * import.h transform.h ximage.h; * AUTHOR; * Sasha Vasko <sasha at aftercode dot net>; *******/; /***********************************************************************************/; /* reduced colormap building code : */; /***********************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/ascmap.h:1132,hash,hashing,1132,graf2d/asimage/src/libAfterImage/ascmap.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/ascmap.h,1,['hash'],['hashing']
Security,"/****h* libAfterImage/imencdec.h; * NAME; * imencdec defines main structures and function for image storing,; * extraction and conversion to/from usable formats.; * DESCRIPTION; * this header defines structures and functions to be used by outside ; * applications for reading and writing into ASImages. ASImage pixel ; * data maybe stored in sevral different formats, and should not be ; * accessed directly, but only through encoder/decoder facility.; *; * SEE ALSO; * Structures :; * ASImageBevel; * ASImageDecoder; * ASImageOutput; *; * Functions :; * Encoding :; * asimage_add_line(),	asimage_add_line_mono(),; * asimage_print_line(), get_asimage_chanmask(),; * move_asimage_channel(), copy_asimage_channel(),; * copy_asimage_lines(); *; * Decoding; * start_image_decoding(), stop_image_decoding(),; * asimage_decode_line (), set_decoder_shift(),; * set_decoder_back_color(); *; * Output :; * start_image_output(), set_image_output_back_color(),; * toggle_image_output_direction(), stop_image_output(); *; * Other libAfterImage modules :; * ascmap.h asfont.h asimage.h asvisual.h blender.h export.h; * import.h transform.h ximage.h; * AUTHOR; * Sasha Vasko <sasha at aftercode dot net>; ******/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/imencdec.h:390,access,accessed,390,graf2d/asimage/src/libAfterImage/imencdec.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/imencdec.h,1,['access'],['accessed']
Security,"/****h* libAfterImage/scanline.h; * NAME; * scanline - Structures and functions for manipulation of image data ; * in blocks of uncompressed scanlines. Each scanline has 4 32 bit channels.; * Data in scanline could be both 8bit or 16 bit, with automated ; * dithering of 16 bit data into standard 8-bit image.; * SEE ALSO; * Structures:; * 	 ASScanline; *; * Functions :; * ASScanline handling:; * 	 prepare_scanline(), free_scanline(); *; * Other libAfterImage modules :; * asvisual.h imencdec.h asimage.h blender.h; * AUTHOR; * Sasha Vasko <sasha at aftercode dot net>; ******************/; /****s* libAfterImage/ASScanline; * NAME; * ASScanline - structure to hold contents of the single scanline.; * DESCRIPTION; * ASScanline holds data for the single scanline, split into channels; * with 32 bits per pixel per channel. All the memory is allocated at; * once, and then split in between channels. There are three ways to; * access channel data :; * 1) using blue, green, red, alpha pointers.; * 2) using channels[] array of pointers - convenient in loops; * 4) using xc3, xc2, xc1 pointers. These are different from red, green,; * blue in the way that xc3 will point to blue when BGR mode is specified; * at the time of creation, otherwise it will point to red channel.; * Likewise xc1 will point to red in BGR mode and blue otherwise.; * xc2 always points to green channel's data. This is convenient while; * writing XImages and when channels in source and destination has to be; * reversed, while reading images from files.; * Channel data is always aligned by 8 byte boundary allowing for; * utilization of MMX, floating point and other 64bit registers for; * transfer and processing.; * SEE ALSO; * ASImage; * SOURCE; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/scanline.h:928,access,access,928,graf2d/asimage/src/libAfterImage/scanline.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/scanline.h,1,['access'],['access']
Security,"/****s* libAfterImage/ASVisual; * NAME; * ASVisual - an abstraction layer on top of X Server Visual.; * DESCRIPTION; * This structure has been introduced in order to compensate for the; * fact that X may have so many different types of Visuals. It provides; * shortcuts to most Visual data, compensated for differences in Visuals.; * For PseudoColor visual it also contains preallocated set of colors.; * This colormap allows us to write XImages very fast and without; * exhausting available X colors. This colormap consist of 8, 64, or 4096; * colors and constitutes fraction of colors available in particular; * colordepth. This colors are allocated to be evenly spread around RGB; * spectrum. Thus when converting from internal presentation - all we; * need to do is to discard unused bits, and use rest of them bits as; * an index in our colormap. Opposite conversion is much trickier and we; * engage into nasty business of having hash table mapping pixel values; * into colors, or straight table doing same in lower colordepths.; * Idea is that we do all internal processing in 32bit colordepth, and; * ASVisual provides us with means to convert it to actual X display; * format. Respectively ASVisual has methods to write out XImage lines; * and read XImage lines.; * ASVisual creation is a tricky process. Basically first we have to go; * through the list of available Visuals and choose the best suitable.; * Then based on the type of this Visual we have to setup our data; * members and method hooks. Several functions provided for that :; * query_screen_visual() - will lookup best suitable visual; * setup_truecolor_visual() - will setup hooks if visual is TrueColor; * setup_pseudo_visual()	 - will setup hooks and data if Visual is; * PseudoColor.; * setup_as_colormap() - will preallocate colors for PseudoColor.; * Alternative to the above is :; * create_asvisual() - it encapsulates all of the above; * functionality, and returns completely set; * up ASVisual object.; * Since Visual ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/asvisual.h:936,hash,hash,936,graf2d/asimage/src/libAfterImage/asvisual.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/asvisual.h,1,['hash'],['hash']
Security,"/**. ASTNodeTraverser traverses the Clang AST for dumping purposes. The `Derived::doGetNodeDelegate()` method is required to be an accessible member; which returns a reference of type `NodeDelegateType &` which implements the; following interface:. struct {; template <typename Fn> void AddChild(Fn DoAddChild);; template <typename Fn> void AddChild(StringRef Label, Fn DoAddChild);. void Visit(const comments::Comment *C, const comments::FullComment *FC);; void Visit(const Attr *A);; void Visit(const TemplateArgument &TA, SourceRange R = {},; const Decl *From = nullptr, StringRef Label = {});; void Visit(const Stmt *Node);; void Visit(const Type *T);; void Visit(QualType T);; void Visit(const Decl *D);; void Visit(const CXXCtorInitializer *Init);; void Visit(const OMPClause *C);; void Visit(const BlockDecl::Capture &C);; void Visit(const GenericSelectionExpr::ConstAssociation &A);; void Visit(const concepts::Requirement *R);; void Visit(const APValue &Value, QualType Ty);; };; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTNodeTraverser.h:131,access,accessible,131,interpreter/llvm-project/clang/include/clang/AST/ASTNodeTraverser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTNodeTraverser.h,1,['access'],['accessible']
Security,/**. Accessor for the number of parameters. @return the number of function parameters. */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/ParametricFunction.h:5,Access,Accessor,5,math/minuit2/inc/Minuit2/ParametricFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/ParametricFunction.h,1,['Access'],['Accessor']
Security,/**. Accessor for the state of the parameters. @return vector containing the present Parameter settings. */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/ParametricFunction.h:5,Access,Accessor,5,math/minuit2/inc/Minuit2/ParametricFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/ParametricFunction.h,1,['Access'],['Accessor']
Security,/**. Accessor to the EDM (expected vertical distance to the Minimum) estimator. @return The EDM estimator used in the builder. \todo Maybe a little explanation concerning EDM in all relevant classes. */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FumiliBuilder.h:5,Access,Accessor,5,math/minuit2/inc/Minuit2/FumiliBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FumiliBuilder.h,1,['Access'],['Accessor']
Security,/**. Accessor to the Error updator of the builder. @return The FumiliErrorUpdator used by the FumiliBuilder. */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FumiliBuilder.h:5,Access,Accessor,5,math/minuit2/inc/Minuit2/FumiliBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FumiliBuilder.h,1,['Access'],['Accessor']
Security,/**. Accessor to the Minimum builder of the minimizer. @return a reference to the Minimum builder. */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FumiliMinimizer.h:5,Access,Accessor,5,math/minuit2/inc/Minuit2/FumiliMinimizer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FumiliMinimizer.h,1,['Access'],['Accessor']
Security,/**. Accessor to the coefficient of the constant term. @return the coefficient of the constant term. */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnParabola.h:5,Access,Accessor,5,math/minuit2/inc/Minuit2/MnParabola.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnParabola.h,1,['Access'],['Accessor']
Security,/**. Accessor to the coefficient of the linear term. @return the coefficient of the linear term. */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnParabola.h:5,Access,Accessor,5,math/minuit2/inc/Minuit2/MnParabola.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnParabola.h,1,['Access'],['Accessor']
Security,/**. Accessor to the coefficient of the quadratic term. @return the coefficient of the quadratic term. */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnParabola.h:5,Access,Accessor,5,math/minuit2/inc/Minuit2/MnParabola.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnParabola.h,1,['Access'],['Accessor']
Security,/**. Accessor to the number of measurements used for calculating the; present figure of merit. @return the number of measurements. */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FumiliChi2FCN.h:5,Access,Accessor,5,math/minuit2/inc/Minuit2/FumiliChi2FCN.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FumiliChi2FCN.h,2,['Access'],['Accessor']
Security,/**. Accessor to the number of measurements used for calculating; the chi-square. @return the number of measurements. */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FumiliStandardChi2FCN.h:5,Access,Accessor,5,math/minuit2/inc/Minuit2/FumiliStandardChi2FCN.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FumiliStandardChi2FCN.h,1,['Access'],['Accessor']
Security,/**. Accessor to the number of measurements used for calculating; the maximum likelihood. @return the number of measurements. */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FumiliStandardMaximumLikelihoodFCN.h:5,Access,Accessor,5,math/minuit2/inc/Minuit2/FumiliStandardMaximumLikelihoodFCN.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FumiliStandardMaximumLikelihoodFCN.h,1,['Access'],['Accessor']
Security,"/**. Accessor to the parameters of a given measurement. For example in the; case of a chi-square fit with a one-dimensional Gaussian, the Parameter; characterizing the measurement will be the position. It is the Parameter; that is passed to the model function. @param Index Index of the measueremnt the parameters of which to return; @return A reference to a vector containing the values characterizing a measurement. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FumiliChi2FCN.h:5,Access,Accessor,5,math/minuit2/inc/Minuit2/FumiliChi2FCN.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FumiliChi2FCN.h,1,['Access'],['Accessor']
Security,"/**. Accessor to the parameters of a given measurement. For example in the; case of a chi-square fit with a one-dimensional Gaussian, the Parameter; characterizing the measurement will be the position. It is the Parameter; that is passed to the model function. @param Index Index of the measueremnt the parameters of which to return; @return A vector containing the values characterizing a measurement. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FumiliMaximumLikelihoodFCN.h:5,Access,Accessor,5,math/minuit2/inc/Minuit2/FumiliMaximumLikelihoodFCN.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FumiliMaximumLikelihoodFCN.h,1,['Access'],['Accessor']
Security,/**. Accessor to the position of the measurement (x coordinate). @param Index Index of the measuerement the position of which to return. @return the position of the measurement. */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FumiliStandardChi2FCN.h:5,Access,Accessor,5,math/minuit2/inc/Minuit2/FumiliStandardChi2FCN.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FumiliStandardChi2FCN.h,2,['Access'],['Accessor']
Security,/**. Accessor to the seed generator of the minimizer. @return A reference to the seed generator used by the minimizer. */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FumiliMinimizer.h:5,Access,Accessor,5,math/minuit2/inc/Minuit2/FumiliMinimizer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FumiliMinimizer.h,1,['Access'],['Accessor']
Security,/**. Accessor to the x (first) coordinate. @return the x (first) coordinate of the point. */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnParabolaPoint.h:5,Access,Accessor,5,math/minuit2/inc/Minuit2/MnParabolaPoint.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnParabolaPoint.h,1,['Access'],['Accessor']
Security,/**. Accessor to the y (second) coordinate. @return the y (second) coordinate of the point. */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnParabolaPoint.h:5,Access,Accessor,5,math/minuit2/inc/Minuit2/MnParabolaPoint.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnParabolaPoint.h,1,['Access'],['Accessor']
Security,/**; 		 * Used to access the function bound to `onChange` events. Don't modify this value directly.; 		 * Use the `controller.onChange( callback )` method instead.; 		 * @type {Function}; 		 */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:18,access,access,18,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['access'],['access']
Security,/**; 		 * Used to access the function bound to `onChange` events. Don't modify this value; 		 * directly. Use the `gui.onChange( callback )` method instead.; 		 * @type {Function}; 		 */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:18,access,access,18,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['access'],['access']
Security,/**; 		 * Used to access the function bound to `onFinishChange` events. Don't modify this value; 		 * directly. Use the `controller.onFinishChange( callback )` method instead.; 		 * @type {Function}; 		 */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:18,access,access,18,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['access'],['access']
Security,/**; 		 * Used to access the function bound to `onFinishChange` events. Don't modify this value; 		 * directly. Use the `gui.onFinishChange( callback )` method instead.; 		 * @type {Function}; 		 */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:18,access,access,18,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['access'],['access']
Security,"/**; 	 * Creates a panel that holds controllers.; 	 * @example; 	 * new GUI();; 	 * new GUI( { container: document.getElementById( 'custom' ) } );; 	 *; 	 * @param {object} [options]; 	 * @param {boolean} [options.autoPlace=true]; 	 * Adds the GUI to `document.body` and fixes it to the top right of the page.; 	 *; 	 * @param {HTMLElement} [options.container]; 	 * Adds the GUI to this DOM element. Overrides `autoPlace`.; 	 *; 	 * @param {number} [options.width=245]; 	 * Width of the GUI in pixels, usually set when name labels become too long. Note that you can make; 	 * name labels wider in CSS with `.lil‑gui { ‑‑name‑width: 55% }`.; 	 *; 	 * @param {string} [options.title=Controls]; 	 * Name to display in the title bar.; 	 *; 	 * @param {boolean} [options.closeFolders=false]; 	 * Pass `true` to close all folders in this GUI by default.; 	 *; 	 * @param {boolean} [options.injectStyles=true]; 	 * Injects the default stylesheet into the page if this is the first GUI.; 	 * Pass `false` to use your own stylesheet.; 	 *; 	 * @param {number} [options.touchStyles=true]; 	 * Makes controllers larger on touch devices. Pass `false` to disable touch styles.; 	 *; 	 * @param {GUI} [options.parent]; 	 * Adds this GUI as a child in another GUI. Usually this is done for you by `addFolder()`.; 	 *; 	 */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:884,inject,injectStyles,884,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,4,"['Inject', 'inject']","['Injects', 'injectStyles']"
Security,"/**; * (PDF 1.5) May be set only if the MaxLen entry is present in the text field dictionary (see Table 229) and if the Multiline, Password, and FileSelect flags are clear. If set, the field shall be automatically divided into as many equally spaced positions, or combs, as the value of MaxLen, and the text is laid out into those combs.; *; * @name AcroFormTextField#comb; * @type {boolean}; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:131,Password,Password,131,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['Password'],['Password']
Security,/**; * @brief Get a const pointer to the start of the array.; * @return A const pointer to the start of the array.; *; * This function returns a const pointer to the underlying memory.; * It allows read-only access to array elements.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/batchcompute/src/CudaInterface.h:208,access,access,208,roofit/batchcompute/src/CudaInterface.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/batchcompute/src/CudaInterface.h,1,['access'],['access']
Security,"/**; * @defgroup LLVMC LLVM-C: C interface to LLVM; *; * This module exposes parts of the LLVM library as a C API.; *; * @{; */; /**; * @defgroup LLVMCTransforms Transforms; */; /**; * @defgroup LLVMCCore Core; *; * This modules provide an interface to libLLVMCore, which implements; * the LLVM intermediate representation as well as other related types; * and utilities.; *; * Many exotic languages can interoperate with C code but have a harder time; * with C++ due to name mangling. So in addition to C, this interface enables; * tools written in such languages.; *; * @{; */; /**; * @defgroup LLVMCCoreTypes Types and Enumerations; *; * @{; */; /// External users depend on the following values being stable. It is not safe; /// to reorder them.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm-c/Core.h:69,expose,exposes,69,interpreter/llvm-project/llvm/include/llvm-c/Core.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm-c/Core.h,1,['expose'],['exposes']
Security,/**; * @defgroup LLVMCExecutionEngineLLJITUtils LLJIT Utilities; * @ingroup LLVMCExecutionEngineLLJIT; *; * @{; */; /**; * Install the plugin that submits debug objects to the executor. Executors must; * expose the llvm_orc_registerJITLoaderGDBWrapper symbol.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm-c/LLJITUtils.h:204,expose,expose,204,interpreter/llvm-project/llvm/include/llvm-c/LLJITUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm-c/LLJITUtils.h,1,['expose'],['expose']
Security,/**; * @license; * Joseph Myers does not specify a particular license for his work.; *; * Author: Joseph Myers; * Accessed from: http://www.myersdaily.org/joseph/javascript/md5.js; *; * Modified by: Owen Leong; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:114,Access,Accessed,114,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,3,['Access'],['Accessed']
Security,/**; * @license; * Licensed under the MIT License.; * http://opensource.org/licenses/mit-license; * Author: Owen Leong (@owenl131); * Date: 15 Oct 2020; * References:; * https://www.cs.cmu.edu/~dst/Adobe/Gallery/anon21jul01-pdf-encryption.txt; * https://github.com/foliojs/pdfkit/blob/master/lib/security.js; * http://www.fpdf.org/en/script/script37.php; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:228,encrypt,encryption,228,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,6,"['encrypt', 'secur']","['encryption', 'security']"
Security,/**; * @summary Class to read data from TTree; *; * @desc Instance of TSelector can be used to access TTree data; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:95,access,access,95,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['access'],['access']
Security,/**; * @}; */; /**; * \defgroup CINDEX_CPP C++ AST introspection; *; * The routines in this group provide access information in the ASTs specific; * to C++ language features.; *; * @{; */; /**; * Determine if a C++ constructor is a converting constructor.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang-c/Index.h:106,access,access,106,interpreter/llvm-project/clang/include/clang-c/Index.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang-c/Index.h,1,['access'],['access']
Security,"/**; * @}; */; /**; * \defgroup CINDEX_LEX Token extraction and manipulation; *; * The routines in this group provide access to the tokens within a; * translation unit, along with a semantic mapping of those tokens to; * their corresponding cursors.; *; * @{; */; /**; * Describes a kind of token.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang-c/Index.h:118,access,access,118,interpreter/llvm-project/clang/include/clang-c/Index.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang-c/Index.h,1,['access'],['access']
Security,/**; * @}; */; /**; * \defgroup CINDEX_MODULE Module introspection; *; * The functions in this group provide access to information about modules.; *; * @{; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang-c/Index.h:109,access,access,109,interpreter/llvm-project/clang/include/clang-c/Index.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang-c/Index.h,1,['access'],['access']
Security,"/**; * A code-completion string that describes ""optional"" text that; * could be a part of the template (but is not required).; *; * The Optional chunk is the only kind of chunk that has a code-completion; * string for its representation, which is accessible via; * \c clang_getCompletionChunkCompletionString(). The code-completion string; * describes an additional part of the template that is completely optional.; * For example, optional chunks can be used to describe the placeholders for; * arguments that match up with defaulted function parameters, e.g. given:; *; * \code; * void f(int x, float y = 3.14, double z = 2.71828);; * \endcode; *; * The code-completion string for this function would contain:; * - a TypedText chunk for ""f"".; * - a LeftParen chunk for ""("".; * - a Placeholder chunk for ""int x""; * - an Optional chunk containing the remaining defaulted arguments, e.g.,; * - a Comma chunk for "",""; * - a Placeholder chunk for ""float y""; * - an Optional chunk containing the last defaulted argument:; * - a Comma chunk for "",""; * - a Placeholder chunk for ""double z""; * - a RightParen chunk for "")""; *; * There are many ways to handle Optional chunks. Two simple approaches are:; * - Completely ignore optional chunks, in which case the template for the; * function ""f"" would only include the first parameter (""int x"").; * - Fully expand all optional chunks, in which case the template for the; * function ""f"" would have all of the parameters.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang-c/Index.h:247,access,accessible,247,interpreter/llvm-project/clang/include/clang-c/Index.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang-c/Index.h,1,['access'],['accessible']
Security,"/**; * A function for applying transformations as part of an transform layer.; *; * Implementations of this type are responsible for managing the lifetime; * of the Module pointed to by ModInOut: If the LLVMModuleRef value is; * overwritten then the function is responsible for disposing of the incoming; * module. If the module is simply accessed/mutated in-place then ownership; * returns to the caller and the function does not need to do any lifetime; * management.; *; * Clients can call LLVMOrcLLJITGetIRTransformLayer to obtain the transform; * layer of a LLJIT instance, and use LLVMOrcIRTransformLayerSetTransform; * to set the function. This can be used to override the default transform; * layer.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm-c/Orc.h:339,access,accessed,339,interpreter/llvm-project/llvm/include/llvm-c/Orc.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm-c/Orc.h,1,['access'],['accessed']
Security,"/**; * A function for applying transformations to an object file buffer.; *; * Implementations of this type are responsible for managing the lifetime; * of the memory buffer pointed to by ObjInOut: If the LLVMMemoryBufferRef; * value is overwritten then the function is responsible for disposing of the; * incoming buffer. If the buffer is simply accessed/mutated in-place then; * ownership returns to the caller and the function does not need to do any; * lifetime management.; *; * The transform is allowed to return an error, in which case the ObjInOut; * buffer should be disposed of and set to null.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm-c/Orc.h:347,access,accessed,347,interpreter/llvm-project/llvm/include/llvm-c/Orc.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm-c/Orc.h,1,['access'],['accessed']
Security,"/**; * A pinned array of specific type that allocated on the host with `cudaMallocHost` and freed with `cudaFreeHost`.; * The memory is ""pinned"", i.e. page-locked and accessible to the device for fast copying.; * \see The documentation of `cudaMallocHost` on <a; * href=""https://developer.download.nvidia.com/compute/DevZone/docs/html/C/doc/html/group__CUDART__HIGHLEVEL_ge439496de696b166ba457dab5dd4f356.html"">developer.download.nvidia.com</a>.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/batchcompute/src/CudaInterface.h:167,access,accessible,167,roofit/batchcompute/src/CudaInterface.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/batchcompute/src/CudaInterface.h,1,['access'],['accessible']
Security,"/**; * A statement whose specific kind is not exposed via this; * interface.; *; * Unexposed statements have the same operations as any other kind of; * statement; one can extract their location information, spelling,; * children, etc. However, the specific kind of the statement is not; * reported.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang-c/Index.h:46,expose,exposed,46,interpreter/llvm-project/clang/include/clang-c/Index.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang-c/Index.h,1,['expose'],['exposed']
Security,/**; * A type whose specific kind is not exposed via this; * interface.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang-c/Index.h:41,expose,exposed,41,interpreter/llvm-project/clang/include/clang-c/Index.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang-c/Index.h,1,['expose'],['exposed']
Security,"/**; * Abstract base class of interpolants over parametric samples.; *; * The parameter domain is one dimensional, typically the time or a path; * along a curve defined by the data.; *; * The sample values can have any dimensionality and derived classes may; * apply special interpretations to the data.; *; * This class provides the interval seek in a Template Method, deferring; * the actual interpolation to derived classes.; *; * Time complexity is O(1) for linear access crossing at most two points; * and O(log N) for random access, where N is the number of positions.; *; * References:; *; * 		http://www.oodesign.com/template-method-pattern.html; *; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/modules/three.mjs:469,access,access,469,js/modules/three.mjs,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/modules/three.mjs,2,['access'],['access']
Security,"/**; * Adds XMP formatted metadata to PDF; *; * @name addMetadata; * @function; * @param {String} metadata The actual metadata to be added. The metadata shall be stored as XMP simple value. Note that if the metadata string contains XML markup characters ""<"", "">"" or ""&"", those characters should be written using XML entities.; * @param {String} namespaceuri Sets the namespace URI for the metadata. Last character should be slash or hash.; * @returns {jsPDF} jsPDF-instance; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:433,hash,hash,433,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['hash'],['hash']
Security,/**; * An attribute whose specific kind is not exposed via this; * interface.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang-c/Index.h:47,expose,exposed,47,interpreter/llvm-project/clang/include/clang-c/Index.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang-c/Index.h,1,['expose'],['exposed']
Security,"/**; * An expression whose specific kind is not exposed via this; * interface.; *; * Unexposed expressions have the same operations as any other kind; * of expression; one can extract their location information,; * spelling, children, etc. However, the specific kind of the; * expression is not reported.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang-c/Index.h:48,expose,exposed,48,interpreter/llvm-project/clang/include/clang-c/Index.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang-c/Index.h,1,['expose'],['exposed']
Security,/**; * Calculate for frequency of hash value of each dmer in ctx->samples; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/fastcover.c:34,hash,hash,34,builtins/zstd/dictBuilder/fastcover.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/fastcover.c,1,['hash'],['hash']
Security,"/**; * Callback type for ExecutionSession lookups.; *; * If Err is LLVMErrorSuccess then Result will contain a pointer to a; * list of ( SymbolStringPtr, JITEvaluatedSymbol ) pairs of length NumPairs.; *; * If Err is a failure value then Result and Ctx are undefined and should; * not be accessed. The Callback is responsible for handling the error; * value (e.g. by calling LLVMGetErrorMessage + LLVMDisposeErrorMessage).; *; * The caller retains ownership of the Result array and will release all; * contained symbol names. Clients are responsible for retaining any symbol; * names that they wish to hold after the function returns.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm-c/Orc.h:288,access,accessed,288,interpreter/llvm-project/llvm/include/llvm-c/Orc.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm-c/Orc.h,1,['access'],['accessed']
Security,"/**; * Common function used to match vmrgew and vmrgow shuffles; *; * The indexOffset determines whether to look for even or odd words in; * the shuffle mask. This is based on the of the endianness of the target; * machine.; * - Little Endian:; * - Use offset of 0 to check for odd elements; * - Use offset of 4 to check for even elements; * - Big Endian:; * - Use offset of 0 to check for even elements; * - Use offset of 4 to check for odd elements; * A detailed description of the vector element ordering for little endian and; * big endian can be found at; * http://www.ibm.com/developerworks/library/l-ibm-xl-c-cpp-compiler/index.html; * Targeting your applications - what little endian and big endian IBM XL C/C++; * compiler differences mean to you; *; * The mask to the shuffle vector instruction specifies the indices of the; * elements from the two input vectors to place in the result. The elements are; * numbered in array-access order, starting with the first vector. These vectors; * are always of type v16i8, thus each vector will contain 16 elements of size; * 8. More info on the shuffle vector can be found in the; * http://llvm.org/docs/LangRef.html#shufflevector-instruction; * Language Reference.; *; * The RHSStartValue indicates whether the same input vectors are used (unary); * or two different input vectors are used, based on the following:; * - If the instruction uses the same vector for both inputs, the range of the; * indices will be 0 to 15. In this case, the RHSStart value passed should; * be 0.; * - If the instruction has two different vectors then the range of the; * indices will be 0 to 31. In this case, the RHSStart value passed should; * be 16 (indices 0-15 specify elements in the first vector while indices 16; * to 31 specify elements in the second vector).; *; * \param[in] N The shuffle vector SD Node to analyze; * \param[in] IndexOffset Specifies whether to look for even or odd elements; * \param[in] RHSStartValue Specifies the starting index for th",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp:935,access,access,935,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,1,['access'],['access']
Security,/**; * Completions for fields of the member being accessed using the arrow; * operator should be included in the results.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang-c/Index.h:50,access,accessed,50,interpreter/llvm-project/clang/include/clang-c/Index.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang-c/Index.h,1,['access'],['accessed']
Security,/**; * Completions for fields of the member being accessed using the dot; * operator should be included in the results.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang-c/Index.h:50,access,accessed,50,interpreter/llvm-project/clang/include/clang-c/Index.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang-c/Index.h,1,['access'],['accessed']
Security,/**; * Completions for properties of the Objective-C object being accessed; * using the dot operator should be included in the results.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang-c/Index.h:66,access,accessed,66,interpreter/llvm-project/clang/include/clang-c/Index.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang-c/Index.h,1,['access'],['accessed']
Security,/**; * Compute a hash value for the given cursor.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang-c/Index.h:17,hash,hash,17,interpreter/llvm-project/clang/include/clang-c/Index.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang-c/Index.h,1,['hash'],['hash']
Security,/**; * Computes the 'O' field in the encryption dictionary; *; * @name processOwnerPassword; * @function; * @param {String} paddedUserPassword Byte string of padded user password; * @param {String} paddedOwnerPassword Byte string of padded owner password; * @returns {String}; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:37,encrypt,encryption,37,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,6,"['encrypt', 'password']","['encryption', 'password']"
Security,/**; * Converts a byte string to a hex string; *; * @name rc4; * @function; * @param {string} key Byte string of encryption key; * @param {string} data Byte string of data to be encrypted; * @returns {string} Encrypted string; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:113,encrypt,encryption,113,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,6,"['Encrypt', 'encrypt']","['Encrypted', 'encrypted', 'encryption']"
Security,"/**; * Dedicated Dictionary Search Structure bucket log. In the; * ZSTD_dedicatedDictSearch mode, the hashTable has; * 2 ** ZSTD_LAZY_DDSS_BUCKET_LOG entries in each bucket, rather than just; * one.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_lazy.h:102,hash,hashTable,102,builtins/zstd/compress/zstd_lazy.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_lazy.h,1,['hash'],['hashTable']
Security,/**; * FTFont is the public interface for the FTGL library.; *; * Specific font classes are derived from this class. It uses the helper; * classes FTFace and FTSize to access the Freetype library. This class; * is abstract and deriving classes must implement the protected; * <code>MakeGlyph</code> function to create glyphs of the; * appropriate type.; *; * It is good practice after using these functions to test the error; * code returned. <code>FT_Error Error()</code>. Check the freetype file fterrdef.h; * for error definitions.; *; * @see FTFace; * @see FTSize; * @see FTGlyphContainer; * @see FTGlyph; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/ftgl/inc/FTFont.h:168,access,access,168,graf3d/ftgl/inc/FTFont.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/ftgl/inc/FTFont.h,1,['access'],['access']
Security,"/**; * FTLibrary class is the global accessor for the Freetype library.; *; * This class encapsulates the Freetype Library. This is a singleton class; * and ensures that only one FT_Library is in existence at any one time.; * All constructors are private therefore clients cannot create or; * instantiate this class themselves and must access it's methods via the; * static <code>FTLibrary::Instance()</code> function.; *; * Just because this class returns a valid <code>FTLibrary</code> object; * doesn't mean that the Freetype Library has been successfully initialised.; * Clients should check for errors. You can initialse the library AND check; * for errors using the following code...; * <code>err = FTLibrary::Instance().Error();</code>; *; * @see ""Freetype 2 Documentation""; *; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/ftgl/inc/FTLibrary.h:37,access,accessor,37,graf3d/ftgl/inc/FTLibrary.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/ftgl/inc/FTLibrary.h,2,['access'],"['access', 'accessor']"
Security,"/**; * Helper for hash-map-assisted finding of elements by name.; * Create this helper if finding of elements by name is needed.; * Upon creation, this object checks the global; * RooNameReg::renameCounter(); * and tracks elements of this collection by name. If an element; * gets renamed, this counter will be increased, and the name to; * object map becomes invalid. In this case, it has to be recreated.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx:18,hash,hash-map-assisted,18,roofit/roofitcore/src/RooAbsCollection.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx,1,['hash'],['hash-map-assisted']
Security,"/**; * Hierarchical representation of mathematical formulae; *; * The class math_text_t is a hierarchical representation of; * mathematical formulae similar to TeX's math list.; *; * Limitations:; *; * - Only (spacing) symbols and combining diacritical marks from; * TeX, AMS-TeX, LaTeX, AMS-LaTeX, and MathTime Professional II; * that are representable within ISO/IEC 10646:2003/Amd.2:2006; * Universal Character Set can be accessed.; *; * - Illegal TeX syntax may result in not well defined behaviors.; * Most notably, `a^b^c' or `a_b_c' result in `a^c' and `a_c',; * i.e. the overwriting of the previous superscripts and; * subscripts, and `a \\atop b \\atop c' or `a \\over b \\over c'; * result in `a \\atop {b \\atop c}' and `a \\over {b \\over c}', i.e.; * a right associative interpretation.; *; * @see ISO/IEC JTC1/SC2/WG2, ISO/IEC 10646:2003/Amd.2:2006 (ISO,; * Geneva, 2006).; * @see D. E. Knuth, The TeXbook (Addision-Wesley, Cambridge, MA,; * 1986).; * @see D. E. Knuth, The METAFONTbook (Addision-Wesley, Cambridge,; * MA, 1986).; * @see B. Beeton, A. Freytag, M. Sargent III, Unicode support for; * mathematics, Unicode Technical Report #25; * @author Yue Shi Lai <ylai@phys.columbia.edu>; * @version 1.0; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/mathtext/inc/mathtext.h:425,access,accessed,425,graf2d/mathtext/inc/mathtext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/mathtext/inc/mathtext.h,1,['access'],['accessed']
Security,"/**; * If set, the field is intended for entering a secure password that should not be echoed visibly to the screen. Characters typed from the keyboard shall instead be echoed in some unreadable form, such as asterisks or bullet characters.; * NOTE To protect password confidentiality, readers should never store the value of the text field in the PDF file if this flag is set.; *; * @name AcroFormTextField#password; * @type {boolean}; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:52,secur,secure,52,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,10,"['confidential', 'password', 'secur']","['confidentiality', 'password', 'secure']"
Security,"/**; * Initializes encryption settings; *; * @name constructor; * @function; * @param {Array} permissions Permissions allowed for user, ""print"", ""modify"", ""copy"" and ""annot-forms"".; * @param {String} userPassword Permissions apply to this user. Leaving this empty means the document; * is not password protected but viewer has the above permissions.; * @param {String} ownerPassword Owner has full functionalities to the file.; * @param {String} fileId As hex string, should be same as the file ID in the trailer.; * @example; * var security = new PDFSecurity([""print""]); */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:19,encrypt,encryption,19,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,6,"['encrypt', 'password', 'secur']","['encryption', 'password', 'security']"
Security,/**; * Internal hash function; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/cover.c:16,hash,hash,16,builtins/zstd/dictBuilder/cover.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/cover.c,1,['hash'],['hash']
Security,"/**; * Marks a memory region (<c>[addr, addr+size)</c>) as addressable.; *; * This memory must be previously allocated by your program. Accessing; * addresses in this region is allowed until this region is poisoned again.; * This function could unpoison a super-region of <c>[addr, addr+size)</c> due; * to ASan alignment restrictions.; *; * \note This function is not thread-safe because no two threads can; * poison or unpoison memory in the same memory region simultaneously.; *; * \param addr Start of memory region.; * \param size Size of memory region. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/compiler.h:136,Access,Accessing,136,builtins/zstd/common/compiler.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/compiler.h,1,['Access'],['Accessing']
Security,"/**; * Marks a memory region (<c>[addr, addr+size)</c>) as unaddressable.; *; * This memory must be previously allocated by your program. Instrumented; * code is forbidden from accessing addresses in this region until it is; * unpoisoned. This function is not guaranteed to poison the entire region -; * it could poison only a subregion of <c>[addr, addr+size)</c> due to ASan; * alignment restrictions.; *; * \note This function is not thread-safe because no two threads can poison or; * unpoison memory in the same memory region simultaneously.; *; * \param addr Start of memory region.; * \param size Size of memory region. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/compiler.h:177,access,accessing,177,builtins/zstd/common/compiler.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/compiler.h,1,['access'],['accessing']
Security,/**; * Optimize and codegen all the modules added to the codegenerator using; * ThinLTO. Resulting objects are accessible using thinlto_module_get_object().; *; * \since LTO_API_VERSION=18; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm-c/lto.h:111,access,accessible,111,interpreter/llvm-project/llvm/include/llvm-c/lto.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm-c/lto.h,1,['access'],['accessible']
Security,"/**; * Process all the modules that were added to the code generator in parallel.; *; * Client can access the resulting object files using getProducedBinaries(),; * unless setGeneratedObjectsDirectory() has been called, in which case; * results are available through getProducedBinaryFiles().; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h:99,access,access,99,interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h,1,['access'],['access']
Security,/**; * Represents the C++ access control level to a base class for a; * cursor with kind CX_CXXBaseSpecifier.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang-c/Index.h:26,access,access,26,interpreter/llvm-project/clang/include/clang-c/Index.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang-c/Index.h,1,['access'],['access']
Security,"/**; * Returns an encryptor function which can take in a byte string and returns the encrypted version; *; * @name encryptor; * @function; * @param {number} objectId; * @param {number} generation Not sure what this is for, you can set it to 0; * @returns {Function}; * @example; * out(""stream"");; * encryptor = security.encryptor(object.id, 0);; * out(encryptor(data));; * out(""endstream"");; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:18,encrypt,encryptor,18,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,14,"['encrypt', 'secur']","['encrypted', 'encryptor', 'security']"
Security,"/**; * Returns the access control level for the referenced object.; *; * If the cursor refers to a C++ declaration, its access control level within; * its parent scope is returned. Otherwise, if the cursor refers to a base; * specifier or access specifier, the specifier itself is returned.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang-c/Index.h:19,access,access,19,interpreter/llvm-project/clang/include/clang-c/Index.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang-c/Index.h,3,['access'],['access']
Security,"/**; * Returns the cursor kind for the container for the current code; * completion context. The container is only guaranteed to be set for; * contexts where a container exists (i.e. member accesses or Objective-C; * message sends); if there is not a container, this function will return; * CXCursor_InvalidCode.; *; * \param Results the code completion results to query; *; * \param IsIncomplete on return, this value will be false if Clang has complete; * information about the container. If Clang does not have complete; * information, this value will be true.; *; * \returns the container kind, or CXCursor_InvalidCode if there is not a; * container; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang-c/Index.h:190,access,accesses,190,interpreter/llvm-project/clang/include/clang-c/Index.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang-c/Index.h,1,['access'],['accesses']
Security,/**; * Roles that are attributed to symbol occurrences.; *; * Internal: this currently mirrors low 9 bits of clang::index::SymbolRole with; * higher bits zeroed. These high bits may be exposed in the future.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang-c/Index.h:185,expose,exposed,185,interpreter/llvm-project/clang/include/clang-c/Index.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang-c/Index.h,1,['expose'],['exposed']
Security,/**; * Sampler-less Image Access; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/opencl-c.h:26,Access,Access,26,interpreter/llvm-project/clang/lib/Headers/opencl-c.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/opencl-c.h,2,['Access'],['Access']
Security,"/**; * The entity is available, but not accessible; any use of it will be; * an error.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang-c/Index.h:40,access,accessible,40,interpreter/llvm-project/clang/include/clang-c/Index.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang-c/Index.h,1,['access'],['accessible']
Security,"/**; * This class generates a Prefiltered, Mipmapped Radiance Environment Map; * (PMREM) from a cubeMap environment texture. This allows different levels of; * blur to be quickly accessed based on material roughness. It is packed into a; * special CubeUV format that allows us to perform custom interpolation so that; * we can support nonlinear formats such as RGBE. Unlike a traditional mipmap; * chain, it only goes down to the LOD_MIN level (above), and then creates extra; * even more filtered 'mips' at the same LOD_MIN resolution, associated with; * higher roughness levels. In this way we maintain resolution to smoothly; * interpolate diffuse lighting while limiting sampling computation.; *; * Paper: Fast, Accurate Image-Based Lighting; * https://drive.google.com/file/d/15y8r_UpKlU9SvV4ILb0C3qCPecS8pvLz/view; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:179,access,accessed,179,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['access'],['accessed']
Security,/**; * This is the main include for the xRooFit project.; * Including this should give you access to all xRooFit features; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/inc/RooFit/xRooFit/xRooFit.h:91,access,access,91,roofit/xroofit/inc/RooFit/xRooFit/xRooFit.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/inc/RooFit/xRooFit/xRooFit.h,1,['access'],['access']
Security,"/**; * This vector stores the vectorizable data:; * The inner vectors contain the coordinates data; * fCoords[0] is the vector for the x-coords; * fCoords[1] is the vector for the y-coords; * etc.; * The vector of pointers stores the pointers; * to the first elements of the corresponding; * elements; *; * If fWrapped is true, fCoords is empty.; * the data can only be accessed by using; * fCoordsPtr.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Fit/FitData.h:370,access,accessed,370,math/mathcore/inc/Fit/FitData.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Fit/FitData.h,1,['access'],['accessed']
Security,/**; * Validates if given String is a valid Base64-String; *; * @name validateStringAsBase64; * @public; * @function; * @param {String} possible Base64-String; *; * @returns {boolean}; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:7,Validat,Validates,7,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['Validat'],['Validates']
Security,"/**; * Whether to include completions with small; * fix-its, e.g. change '.' to '->' on member access, etc.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang-c/Index.h:95,access,access,95,interpreter/llvm-project/clang/include/clang-c/Index.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang-c/Index.h,1,['access'],['access']
Security,"/**; * \class ROOT::Internal::RDF::RColumnRegister; * \ingroup dataframe; * \brief A binder for user-defined columns, variations and aliases.; *; * The storage is copy-on-write and shared between all instances of the class that have the same values.; *; * Several components of an RDF computation graph make use of a column register. It keeps track of which columns have; * been defined, varied or aliased at each point of the computation graph.; * In many cases, the contents of the different column register instances are the same or only differ by a single; * extra defined/varied/aliased column. For this reason, in order to avoid unnecessary data duplication, fDefines,; * fAliases, fVariations and fColumnNames are all shared_ptr<const T> that (whenever possible) are shared across; * RColumnRegister instances that are part of the same computation graph. If a new column, alias or variation is added; * between one node and the next, then the new node contains a new instance of a RColumnRegister that shares all data; * members with the previous instance except for the one data member that needed updating, which is replaced with a new; * updated instance.; *; * The contents of the collections that keep track of other objects of the computation graph are not owned by the; * RColumnRegister object. They are registered centrally by the RLoopManager and only accessed via reference in the; * RColumnRegister.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RDF/RColumnRegister.hxx:1369,access,accessed,1369,tree/dataframe/inc/ROOT/RDF/RColumnRegister.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RDF/RColumnRegister.hxx,1,['access'],['accessed']
Security,"/**; * \class ROOT::TIOFeatures; * \ingroup tree; *; * `TIOFeatures` provides the end-user with the ability to change the IO behavior; * of data written via a `TTree`. This class allows access to experimental and non-default; * features.; *; * When one of these features are activated, forward compatibility breaks may occur.; * That is, older versions of ROOT may not be able to read files written by this version; * of ROOT that have enabled these non-default features.; *; * To utilize `TIOFeatures`, create the object, set the desired feature flags, then attach; * it to a `TTree`. All subsequently created branches (and their baskets) will be serialized; * using those particular features.; *; * Example usage:; * ~~~{.cpp}; * ROOT::TIOFeatures features;; * features.Set(ROOT::Experimental::EIOFeatures::kGenerateOffsetMap);; * ttree_ref.SetIOFeatures(features);; * ~~~; *; * The method `TTree::SetIOFeatures` creates a copy of the feature set; subsequent changes; * to the `TIOFeatures` object do not propagate to the `TTree`.; */; ////////////////////////////////////////////////////////////////////////////; /// \brief Clear a specific IO feature from this set.; /// \param[in] input_bits The specific feature to disable.; ///; /// Removes a feature from the `TIOFeatures` object; emits an Error message if; /// the IO feature is not supported by this version of ROOT.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TIOFeatures.cxx:186,access,access,186,tree/tree/src/TIOFeatures.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TIOFeatures.cxx,1,['access'],['access']
Security,"/**; * \class RRawFile RRawFile.hxx; * \ingroup IO; *; * The RRawFile provides read-only access to local and remote files. Data can be read either byte-wise or line-wise.; * The RRawFile base class provides line-wise access and buffering for byte-wise access. Derived classes provide the; * low-level read operations, e.g. from a local file system or from a web server. The RRawFile is used for non-ROOT; * RDataSource implementations and for RNTuple.; *; * Files are addressed by URL consisting of a transport protocol part and a location, like file:///path/to/data; * If the transport protocol part and the :// separator are missing, the default protocol is local file. Files are; * opened when required (on reading, getting file size) and closed on object destruction.; *; * RRawFiles manage system resources and are therefore made non-copyable. They can be explicitly cloned though.; *; * RRawFile objects are conditionally thread safe. See the user manual for further details:; * https://root.cern/manual/thread_safety/; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/inc/ROOT/RRawFile.hxx:89,access,access,89,io/io/inc/ROOT/RRawFile.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/inc/ROOT/RRawFile.hxx,3,['access'],['access']
Security,/**; * \defgroup CINDEX_COMMENT Comment introspection; *; * The routines in this group provide access to information in documentation; * comments. These facilities are distinct from the core and may be subject to; * their own schedule of stability and deprecation.; *; * @{; */; /**; * A parsed comment.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang-c/Documentation.h:95,access,access,95,interpreter/llvm-project/clang/include/clang-c/Documentation.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang-c/Documentation.h,1,['access'],['access']
Security,"/**; * g_hash_table_new:; * @hash_func: a function to create a hash value from a key.; * Hash values are used to determine where keys are stored within the; * #GHashTable data structure. The g_direct_hash(), g_int_hash() and ; * g_str_hash() functions are provided for some common types of keys. ; * If hash_func is NULL, g_direct_hash() is used.; * @key_equal_func: a function to check two keys for equality. This is; * used when looking up keys in the #GHashTable. The g_direct_equal(),; * g_int_equal() and g_str_equal() functions are provided for the most; * common types of keys. If @key_equal_func is NULL, keys are compared; * directly in a similar fashion to g_direct_equal(), but without the; * overhead of a function call.; *; * Creates a new #GHashTable.; * ; * Return value: a new #GHashTable.; **/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/glib/ghash.c:63,hash,hash,63,graf2d/win32gdk/gdk/src/glib/ghash.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/glib/ghash.c,2,"['Hash', 'hash']","['Hash', 'hash']"
Security,/**; * g_hash_table_new_full:; * @hash_func: a function to create a hash value from a key.; * @key_equal_func: a function to check two keys for equality.; * @key_destroy_func: a function to free the memory allocated for the key ; * used when removing the entry from the #GHashTable or #NULL if you ; * don't want to supply such a function.; * @value_destroy_func: a function to free the memory allocated for the ; * value used when removing the entry from the #GHashTable or #NULL if ; * you don't want to supply such a function.; * ; * Creates a new #GHashTable like g_hash_table_new() and allows to specify; * functions to free the memory allocated for the key and value that get ; * called when removing the entry from the #GHashTable.; * ; * Return value: a new #GHashTable.; **/,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/glib/ghash.c:68,hash,hash,68,graf2d/win32gdk/gdk/src/glib/ghash.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/glib/ghash.c,1,['hash'],['hash']
Security,"/**; * g_spawn_command_line_async:; * @command_line: a command line; * @error: return location for errors; * ; * A simple version of g_spawn_async() that parses a command line with; * g_shell_parse_argv() and passes it to g_spawn_async(). Runs a; * command line in the background. Unlike g_spawn_async(), the; * %G_SPAWN_SEARCH_PATH flag is enabled, other flags are not. Note; * that %G_SPAWN_SEARCH_PATH can have security implications, so; * consider using g_spawn_async() directly if appropriate. Possible; * errors are those from g_shell_parse_argv() and g_spawn_async().; * ; * Return value: TRUE on success, FALSE if error is set.; **/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/glib/gspawn-win32.c:414,secur,security,414,graf2d/win32gdk/gdk/src/glib/gspawn-win32.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/glib/gspawn-win32.c,2,['secur'],['security']
Security,"/**; * g_spawn_command_line_sync:; * @command_line: a command line ; * @standard_output: return location for child output; * @standard_error: return location for child errors; * @exit_status: return location for child exit status; * @error: return location for errors; *; * A simple version of g_spawn_sync() with little-used parameters; * removed, taking a command line instead of an argument vector. See; * g_spawn_sync() for full details. @command_line will be parsed by; * g_shell_parse_argv(). Unlike g_spawn_sync(), the %G_SPAWN_SEARCH_PATH flag; * is enabled. Note that %G_SPAWN_SEARCH_PATH can have security; * implications, so consider using g_spawn_sync() directly if; * appropriate. Possible errors are those from g_spawn_sync() and those; * from g_shell_parse_argv().; * ; * Return value: TRUE on success, FALSE if an error was set; **/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/glib/gspawn-win32.c:607,secur,security,607,graf2d/win32gdk/gdk/src/glib/gspawn-win32.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/glib/gspawn-win32.c,2,['secur'],['security']
Security,"/**; * g_utf8_validate:; * @str: a pointer to character data; * @max_len: max bytes to validate, or -1 to go until nul; * @end: return location for end of valid data; * ; * Validates UTF-8 encoded text. @str is the text to validate;; * if @str is nul-terminated, then @max_len can be -1, otherwise; * @max_len should be the number of bytes to validate.; * If @end is non-%NULL, then the end of the valid range; * will be stored there (i.e. the address of the first invalid byte; * if some bytes were invalid, or the end of the text being validated; * otherwise).; *; * Returns %TRUE if all of @str was valid. Many GLib and GTK+; * routines <emphasis>require</emphasis> valid UTF-8 as input;; * so data read from a file or the network should be checked; * with g_utf8_validate() before doing anything else with it.; * ; * Return value: %TRUE if the text was valid UTF-8; **/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/glib/gutf8.c:87,validat,validate,87,graf2d/win32gdk/gdk/src/glib/gutf8.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/glib/gutf8.c,5,"['Validat', 'validat']","['Validates', 'validate', 'validated']"
Security,/**; Access the parameter values; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/IParamFunction.h:5,Access,Access,5,math/mathcore/inc/Math/IParamFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/IParamFunction.h,4,['Access'],['Access']
Security,"/**; Access to the four quaternion components:; U() is the coefficient of the identity Pauli matrix,; I(), J() and K() are the coefficients of sigma_x, sigma_y, sigma_z; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/genvector/inc/Math/GenVector/Quaternion.h:5,Access,Access,5,math/genvector/inc/Math/GenVector/Quaternion.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genvector/inc/Math/GenVector/Quaternion.h,1,['Access'],['Access']
Security,"/**; Get components into a linear algebra matrix of size at least 3x3,; which must support operator()(i,j) for write access to elements; (0,0) thru (2,2).; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/genvector/inc/Math/GenVector/Rotation3D.h:117,access,access,117,math/genvector/inc/Math/GenVector/Rotation3D.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genvector/inc/Math/GenVector/Rotation3D.h,1,['access'],['access']
Security,"/**; Get components into a linear algebra matrix of size at least 3x4,; which must support operator()(i,j) for write access to elements; (0,0) thru (2,3).; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/genvector/inc/Math/GenVector/Transform3D.h:117,access,access,117,math/genvector/inc/Math/GenVector/Transform3D.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genvector/inc/Math/GenVector/Transform3D.h,1,['access'],['access']
Security,"/**; Get components into a linear algebra matrix of size at least 4x4,; which must support operator()(i,j) for write access to elements; (0,0) thru (3,3).; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/genvector/inc/Math/GenVector/LorentzRotation.h:117,access,access,117,math/genvector/inc/Math/GenVector/LorentzRotation.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genvector/inc/Math/GenVector/LorentzRotation.h,1,['access'],['access']
Security,/**; \class RDaosContainer; \brief A RDaosContainer provides read/write access to objects in a given container.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RDaos.hxx:72,access,access,72,tree/ntuple/v7/inc/ROOT/RDaos.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RDaos.hxx,1,['access'],['access']
Security,/**; \class RDaosObject; \brief Provides low-level access to DAOS objects in a container.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RDaos.hxx:51,access,access,51,tree/ntuple/v7/inc/ROOT/RDaos.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RDaos.hxx,1,['access'],['access']
Security,/**; \class RDaosPool; \brief A RDaosPool provides access to containers in a specific DAOS pool.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RDaos.hxx:51,access,access,51,tree/ntuple/v7/inc/ROOT/RDaos.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RDaos.hxx,1,['access'],['access']
Security,"/**; \class RHistBinRef; Represents a bin reference. Value of the bin iteration. Provides access to bin content, bin geometry (from, to, center), and statistics; (for instance higher moments) associated to the bin.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/inc/ROOT/RHistBinIter.hxx:90,access,access,90,hist/histv7/inc/ROOT/RHistBinIter.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/inc/ROOT/RHistBinIter.hxx,1,['access'],['access']
Security,"/**; \class RHistImplBase; Interface class for `RHistImpl`. `RHistImpl` is templated for a specific configuration of axes. To enable access; through `RHist`, `RHistImpl` inherits from `RHistImplBase`, exposing only dimension; (`DIMENSION`) and bin type (`PRECISION`).; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/inc/ROOT/RHistImpl.hxx:133,access,access,133,hist/histv7/inc/ROOT/RHistImpl.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/inc/ROOT/RHistImpl.hxx,1,['access'],['access']
Security,"/**; \class ROOT::RDF::Experimental::RMetaData; \ingroup dataframe; \brief Class behaving as a heterogenuous dictionary to store the metadata of a dataset. The supported types of the metadata are: std::string, int and double. An example of creating the RMetaData object:; ~~~{.cpp}; ROOT::RDF::Experimental::RMetaData meta;; meta.Add(""sample_name"", ""name"""");; meta.Add(""luminosity"", 10064);; meta.Add(""xsecs"", 1.0);; ~~~. The RMetaData object is passed to an RSample object which represents a single dataset sample. A dataframe built with the RMetaData object can be accessed with the \ref ROOT::RDF::RInterface< Proxied,; DS_t>::DefinePerSample ""DefinePerSample()"" method.; **/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RDF/RMetaData.hxx:567,access,accessed,567,tree/dataframe/inc/ROOT/RDF/RMetaData.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RDF/RMetaData.hxx,1,['access'],['accessed']
Security,"/**; \class ROOT::TSeq; \brief A pseudo container class which is a generator of indices. \tparam T Type of the numerical sequence.; \ingroup Containers; A pseudo container class which is a generator of indices. The model is the `xrange`; built-in function of Python.; Possible usages:; Loop on a sequence of integers; ~~~{.cpp}; for (auto i : TSeqI(10)) {; cout << ""Element "" << i << endl;; }; ~~~; Loop on a sequence of integers in steps; ~~~{.cpp}; for (auto i : TSeqI(-5, 29, 6)) {; cout << ""Element "" << i << endl;; }; ~~~; Loop backwards on a sequence of integers; ~~~{.cpp}; for (auto i : TSeqI(50, 30, -3)) {; cout << ""Element "" << i << endl;; }; ~~~; Use an stl algorithm, for_each; ~~~{.cpp}; TSeqUL ulSeq(2,30,3);; std::for_each(std::begin(ulSeq),std::end(ulSeq),[](ULong_t i){cout << ""For each: "" << i <<endl;});; ~~~; Random access:; ~~~{.cpp}; cout << ""Random access: 3rd element is "" << ulSeq[2] << endl;; ~~~; A function to create sequences inferring the type:; ~~~{.cpp}; for (auto i : MakeSeq(1000000000000UL, 1000000000003UL)) {; cout << ""Element "" << i << endl;; }; ~~~. **/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/ROOT/TSeq.hxx:837,access,access,837,core/cont/inc/ROOT/TSeq.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/ROOT/TSeq.hxx,2,['access'],['access']
Security,"/**; \class RooTemplateProxy; \ingroup Roofitcore. ## Introduction; A RooTemplateProxy is used to hold references to other RooFit objects in an expression tree.; A `RooGaussian(..., x, mean, sigma)` can e.g. store references to `x, mean, sigma` as; ```; RooTemplateProxy<RooAbsReal> _x;; RooTemplateProxy<RooAbsReal> _mean;; RooTemplateProxy<RooAbsReal> _sigma;; ```; Now, the values of these three can be accessed, and the template argument ensures that only objects that evaluate; to real numbers (RooAbsReal) can be stored in such a proxy. These can e.g. be variables, PDFs and functions.; To store an object that's a `RooCategory`, one would, for example, use; ```; RooTemplateProxy<RooCategory> _category;; ```. Since %ROOT 6.22, the proxy can be used like a pointer to an instance of the template argument.; For this, it provides `operator*` and `operator->`, e.g.; ```; double oldValue = _x->getVal(normalisationSet);; *_x = 17.;; ```. RooTemplateProxy's base class RooArgProxy registers the proxied objects as ""servers"" of the object; that holds the proxy. When the value of the proxied object is changed, the owner is; notified, and can recalculate its own value. Renaming or exchanging objects that; serve values to the owner of the proxy is handled automatically. ## Modernisation of proxies in ROOT 6.22; In ROOT 6.22, the classes RooRealProxy and RooCategoryProxy were replaced by RooTemplateProxy<class T>. Two typedefs have been defined for backward compatibility:; - `RooRealProxy = RooTemplateProxy<RooAbsReal>`. Any generic object that converts to a real value.; - `RooCategoryProxy = RooTemplateProxy<RooAbsCategory>`. Any category object. To modernise a class, one can change the template argument of the proxy to the most appropriate type,; and increment the class version of the owner. <table>; <tr><th> %RooFit before %ROOT 6.22 <th> %RooFit starting with %ROOT 6.22; <tr><td>; ~~~{.cpp}; // In .h: Declare member; RooRealProxy pdfProxy;. ClassDefOverride(MyPdf, 1); };. // In .",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooTemplateProxy.h:406,access,accessed,406,roofit/roofitcore/inc/RooTemplateProxy.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooTemplateProxy.h,1,['access'],['accessed']
Security,"/**; \class TGenCollectionProxy TGenCollectionProxy.cxx; \ingroup IO. Proxy around an arbitrary container, which implements basic; functionality and iteration. The purpose of this implementation; is to shield any generated dictionary implementation from the; underlying streamer/proxy implementation and only expose; the creation functions. In particular this is used to implement splitting and abstract; element access of any container. Access to compiled code is necessary; to implement the abstract iteration sequence and functionality like; size(), clear(), resize(). resize() may be a void operation.; */; ////////////////////////////////////////////////////////////////////////////////; /// Build a proxy for an emulated container.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TGenCollectionProxy.cxx:309,expose,expose,309,io/io/src/TGenCollectionProxy.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TGenCollectionProxy.cxx,3,"['Access', 'access', 'expose']","['Access', 'access', 'expose']"
Security,/**; \class TGenMapProxy; \ingroup IO; Localoptimization class. Collection proxies get copied. On copy we switch the type of the; proxy to the concrete STL type. The concrete types are optimized; for element access.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TGenCollectionProxy.cxx:208,access,access,208,io/io/src/TGenCollectionProxy.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TGenCollectionProxy.cxx,1,['access'],['access']
Security,/**; \class TGenSetProxy; \ingroup IO; Localoptimization class. Collection proxies get copied. On copy we switch the type of the; proxy to the concrete STL type. The concrete types are optimized; for element access.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TGenCollectionProxy.cxx:208,access,access,208,io/io/src/TGenCollectionProxy.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TGenCollectionProxy.cxx,1,['access'],['access']
Security,/**; \class TGenVectorBoolProxy; \ingroup IO; Local optimization class. Collection proxies get copied. On copy we switch the type of the; proxy to the concrete STL type. The concrete types are optimized; for element access.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TGenCollectionProxy.cxx:216,access,access,216,io/io/src/TGenCollectionProxy.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TGenCollectionProxy.cxx,1,['access'],['access']
Security,/**; \class TGenVectorProxy; \ingroup IO; Local optimization class. Collection proxies get copied. On copy we switch the type of the; proxy to the concrete STL type. The concrete types are optimized; for element access.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TGenCollectionProxy.cxx:212,access,access,212,io/io/src/TGenCollectionProxy.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TGenCollectionProxy.cxx,1,['access'],['access']
Security,"/**; \class TMapFile; \ingroup IO. This class implements a shared memory region mapped to a file.; Objects can be placed into this shared memory area using the Add(); member function. To actually place a copy of the object is shared; memory call Update() also whenever the mapped object(s) change(s); call Update() to put a fresh copy in the shared memory. This extra; step is necessary since it is not possible to share objects with; virtual pointers between processes (the vtbl ptr points to the; originators unique address space and can not be used by the; consumer process(es)). Consumer processes can map the memory region; from this file and access the objects stored in it via the Get(); method (which returns a copy of the object stored in the shared; memory with correct vtbl ptr set). Only objects of classes with a; Streamer() member function defined can be shared. I know the current implementation is not ideal (you need to copy to; and from the shared memory file) but the main problem is with the; class' virtual_table pointer. This pointer points to a table unique; for every process. Therefore, different options are:; -# One could allocate an object directly in shared memory in the; producer, but the consumer still has to copy the object from; shared memory into a local object which has the correct vtbl; pointer for that process (copy ctor's can be used for creating; the local copy).; -# Another possibility is to only allow objects without virtual; functions in shared memory (like simple C structs), or to; forbid (how?) the consumer from calling any virtual functions; of the objects in shared memory.; -# A last option is to copy the object internals to shared memory; and copy them again from there. This is what is done in the; TMapFile (using the object Streamer() to make a deep copy). Option 1) saves one copy, but requires solid copy ctor's (along the; full inheritance chain) to rebuild the object in the consumer. Most; classes don't provide these copy ctor's, espec",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TMapFile.cxx:648,access,access,648,io/io/src/TMapFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TMapFile.cxx,1,['access'],['access']
Security,/**; \class TVirtualArray; \ingroup IO; Wrapper around an object and giving indirect access to its content; even if the object is not of a class in the Cint/Reflex dictionary.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/inc/TVirtualArray.h:85,access,access,85,core/meta/inc/TVirtualArray.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/inc/TVirtualArray.h,1,['access'],['access']
Security,/**; \class TVirtualObject; \ingroup IO. Wrapper around an object and giving indirect access to its content; even if the object is not of a class in the Cint/Reflex dictionary.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/inc/TVirtualObject.h:86,access,access,86,core/meta/inc/TVirtualObject.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/inc/TVirtualObject.h,1,['access'],['access']
Security,/**; access to options; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Fit/FitData.h:5,access,access,5,math/mathcore/inc/Fit/FitData.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Fit/FitData.h,1,['access'],['access']
Security,/**; access to range; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Fit/FitData.h:5,access,access,5,math/mathcore/inc/Fit/FitData.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Fit/FitData.h,1,['access'],['access']
Security,/**; access to rotation angle; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/genvector/inc/Math/GenVector/AxisAngle.h:5,access,access,5,math/genvector/inc/Math/GenVector/AxisAngle.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genvector/inc/Math/GenVector/AxisAngle.h,1,['access'],['access']
Security,/**; access to rotation axis; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/genvector/inc/Math/GenVector/AxisAngle.h:5,access,access,5,math/genvector/inc/Math/GenVector/AxisAngle.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genvector/inc/Math/GenVector/AxisAngle.h,1,['access'],['access']
Security,/**; access to the configuration (non const method); */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Fit/Fitter.h:5,access,access,5,math/mathcore/inc/Fit/Fitter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Fit/Fitter.h,1,['access'],['access']
Security,/**; access to the fit configuration (const method); */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Fit/Fitter.h:5,access,access,5,math/mathcore/inc/Fit/Fitter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Fit/Fitter.h,1,['access'],['access']
Security,/**; access to the minimizer control parameter (non const method); */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Fit/FitConfig.h:5,access,access,5,math/mathcore/inc/Fit/FitConfig.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Fit/FitConfig.h,1,['access'],['access']
Security,/**; direct access to coord data ptrs; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Fit/FitData.h:12,access,access,12,math/mathcore/inc/Fit/FitData.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Fit/FitData.h,1,['access'],['access']
Security,"/**; read only access to matrix element, with indices starting from 0 : m[i][j]; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/inc/Math/SMatrix.h:15,access,access,15,math/smatrix/inc/Math/SMatrix.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/inc/Math/SMatrix.h,1,['access'],['access']
Security,"/**; read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/inc/Math/SMatrix.h:15,access,access,15,math/smatrix/inc/Math/SMatrix.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/inc/Math/SMatrix.h,1,['access'],['access']
Security,"/**; read only access to matrix element, with indices starting from 0; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/inc/Math/SMatrix.h:15,access,access,15,math/smatrix/inc/Math/SMatrix.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/inc/Math/SMatrix.h,1,['access'],['access']
Security,/**; read/write access to matrix element with indices starting from 0 : m[i][j]; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/inc/Math/SMatrix.h:16,access,access,16,math/smatrix/inc/Math/SMatrix.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/inc/Math/SMatrix.h,1,['access'],['access']
Security,/**; read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/inc/Math/SMatrix.h:16,access,access,16,math/smatrix/inc/Math/SMatrix.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/inc/Math/SMatrix.h,1,['access'],['access']
Security,/**; read/write access to matrix element with indices starting from 0; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/inc/Math/SMatrix.h:16,access,access,16,math/smatrix/inc/Math/SMatrix.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/inc/Math/SMatrix.h,1,['access'],['access']
Security,"/**< 1: generate a 32-bits checksum using XXH64 algorithm at end of frame, for error detection */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:27,checksum,checksum,27,builtins/zstd/zstd.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h,1,['checksum'],['checksum']
Security,/**< Acquire provides a barrier of the sort; necessary to acquire a lock to access other; memory with normal loads and stores. */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm-c/Core.h:76,access,access,76,interpreter/llvm-project/llvm/include/llvm-c/Core.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm-c/Core.h,1,['access'],['access']
Security,/**< Function to be accessible from DLL. */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm-c/Core.h:20,access,accessible,20,interpreter/llvm-project/llvm/include/llvm-c/Core.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm-c/Core.h,1,['access'],['accessible']
Security,/*-**********************************************************************; * 32-bit hash; ************************************************************************/,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/xxhash/xxhash.h:84,hash,hash,84,builtins/xxhash/xxhash.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/xxhash/xxhash.h,1,['hash'],['hash']
Security,/*-**********************************************************************; * 64-bit hash; ************************************************************************/,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/xxhash/xxhash.h:84,hash,hash,84,builtins/xxhash/xxhash.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/xxhash/xxhash.h,1,['hash'],['hash']
Security,"/*-**********************************************************************; * XXH3 64-bit variant; ************************************************************************/; /* ************************************************************************; * XXH3 is a new hash algorithm featuring:; * - Improved speed for both small and large inputs; * - True 64-bit and 128-bit outputs; * - SIMD acceleration; * - Improved 32-bit viability; *; * Speed analysis methodology is explained here:; *; * https://fastcompression.blogspot.com/2019/03/presenting-xxh3.html; *; * In general, expect XXH3 to run about ~2x faster on large inputs and >3x; * faster on small ones compared to XXH64, though exact differences depend on; * the platform.; *; * The algorithm is portable: Like XXH32 and XXH64, it generates the same hash; * on all platforms.; *; * It benefits greatly from SIMD and 64-bit arithmetic, but does not require it.; *; * Almost all 32-bit and 64-bit targets that can run XXH32 smoothly can run; * XXH3 at competitive speeds, even if XXH64 runs slowly. Further details are; * explained in the implementation.; *; * Optimized implementations are provided for AVX512, AVX2, SSE2, NEON, POWER8,; * ZVector and scalar targets. This can be controlled with the XXH_VECTOR macro.; *; * XXH3 offers 2 variants, _64bits and _128bits.; * When only 64 bits are needed, prefer calling the _64bits variant, as it; * reduces the amount of mixing, resulting in faster speed on small inputs.; *; * It's also generally simpler to manipulate a scalar return type than a struct.; *; * The 128-bit version adds additional strength, but it is slightly slower.; *; * The XXH3 algorithm is still in development.; * The results it produces may still change in future versions.; *; * Results produced by v0.7.x are not comparable with results from v0.7.y.; * However, the API is completely stable, and it can safely be used for; * ephemeral data (local sessions).; *; * Avoid storing values in long-term storage until the a",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/xxhash/xxhash.h:266,hash,hash,266,builtins/xxhash/xxhash.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/xxhash/xxhash.h,2,['hash'],['hash']
Security,"/*-**************************************************************; * Memory I/O Implementation; *****************************************************************/; /* MEM_FORCE_MEMORY_ACCESS :; * By default, access to unaligned memory is controlled by `memcpy()`, which is safe and portable.; * Unfortunately, on some target/compiler combinations, the generated assembly is sub-optimal.; * The below switch allow to select different access method for improved performance.; * Method 0 (default) : use `memcpy()`. Safe and portable.; * Method 1 : `__packed` statement. It depends on compiler extension (i.e., not portable).; * This method is safe if your compiler supports it, and *generally* as fast or faster than `memcpy`.; * Method 2 : direct access. This method is portable but violate C standard.; * It can generate buggy code on targets depending on alignment.; * In some circumstances, it's the only known way to get the most performance (i.e. GCC + ARMv6); * See http://fastcompression.blogspot.fr/2015/08/accessing-unaligned-memory.html for details.; * Prefer these methods in priority order (0 > 1 > 2); */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/mem.h:208,access,access,208,builtins/zstd/common/mem.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/mem.h,4,['access'],"['access', 'accessing-unaligned-memory']"
Security,/*-************************************************************; * Private Definitions; **************************************************************; * Do not use these definitions directly.; * They are only exposed to allow static allocation of `LZ4_stream_t` and `LZ4_streamDecode_t`.; * Accessing members will expose user code to API and/or ABI break in future versions of the library.; **************************************************************/,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/lz4/lz4.h:210,expose,exposed,210,builtins/lz4/lz4.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/lz4/lz4.h,3,"['Access', 'expose']","['Accessing', 'expose', 'exposed']"
Security,/*-*************************************; * Hash Functions; ***************************************/; /**; * Hash the d-byte value pointed to by p and mod 2^f into the frequency vector; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/fastcover.c:44,Hash,Hash,44,builtins/zstd/dictBuilder/fastcover.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/fastcover.c,2,['Hash'],['Hash']
Security,"/*-*************************************; * Hash table; ***************************************; * A small specialized hash map for storing activeDmers.; * The map does not resize, so if it becomes full it will loop forever.; * Thus, the map must be large enough to store every value.; * The map implements linear probing and keeps its load less than 0.5.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/cover.c:44,Hash,Hash,44,builtins/zstd/dictBuilder/cover.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/cover.c,2,"['Hash', 'hash']","['Hash', 'hash']"
Security,/*-*************************************; * Helper functions; ***************************************/; /**; * Selects the best segment in an epoch.; * Segments of are scored according to the function:; *; * Let F(d) be the frequency of all dmers with hash value d.; * Let S_i be hash value of the dmer at position i of segment S which has length k.; *; * Score(S) = F(S_1) + F(S_2) + ... + F(S_{k-d+1}); *; * Once the dmer with hash value d is in the dictionary we set F(d) = 0.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/fastcover.c:252,hash,hash,252,builtins/zstd/dictBuilder/fastcover.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/fastcover.c,3,['hash'],['hash']
Security,"/*-************************************; * Tuning parameters; **************************************/; /*; * LZ4F_HEAPMODE :; * Select how default compression functions will allocate memory for their hash table,; * in memory stack (0:default, fastest), or in memory heap (1:requires malloc()).; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/lz4/lz4frame.c:200,hash,hash,200,builtins/lz4/lz4frame.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/lz4/lz4frame.c,1,['hash'],['hash']
Security,/*----------------------------------------------------------------------------*\; |* Interlocked And; \*----------------------------------------------------------------------------*/,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/intrin.h:85,Interlock,Interlocked,85,interpreter/llvm-project/clang/lib/Headers/intrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/intrin.h,1,['Interlock'],['Interlocked']
Security,/*----------------------------------------------------------------------------*\; |* Interlocked Compare Exchange HLE; \*----------------------------------------------------------------------------*/,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/immintrin.h:85,Interlock,Interlocked,85,interpreter/llvm-project/clang/lib/Headers/immintrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/immintrin.h,1,['Interlock'],['Interlocked']
Security,/*----------------------------------------------------------------------------*\; |* Interlocked Compare Exchange; \*----------------------------------------------------------------------------*/,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/intrin.h:85,Interlock,Interlocked,85,interpreter/llvm-project/clang/lib/Headers/intrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/intrin.h,1,['Interlock'],['Interlocked']
Security,/*----------------------------------------------------------------------------*\; |* Interlocked Decrement; \*----------------------------------------------------------------------------*/,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/intrin.h:85,Interlock,Interlocked,85,interpreter/llvm-project/clang/lib/Headers/intrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/intrin.h,1,['Interlock'],['Interlocked']
Security,/*----------------------------------------------------------------------------*\; |* Interlocked Exchange Add; \*----------------------------------------------------------------------------*/,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/intrin.h:85,Interlock,Interlocked,85,interpreter/llvm-project/clang/lib/Headers/intrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/intrin.h,1,['Interlock'],['Interlocked']
Security,/*----------------------------------------------------------------------------*\; |* Interlocked Exchange HLE; \*----------------------------------------------------------------------------*/,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/immintrin.h:85,Interlock,Interlocked,85,interpreter/llvm-project/clang/lib/Headers/immintrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/immintrin.h,1,['Interlock'],['Interlocked']
Security,/*----------------------------------------------------------------------------*\; |* Interlocked Exchange; \*----------------------------------------------------------------------------*/,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/intrin.h:85,Interlock,Interlocked,85,interpreter/llvm-project/clang/lib/Headers/intrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/intrin.h,1,['Interlock'],['Interlocked']
Security,/*----------------------------------------------------------------------------*\; |* Interlocked Increment; \*----------------------------------------------------------------------------*/,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/intrin.h:85,Interlock,Interlocked,85,interpreter/llvm-project/clang/lib/Headers/intrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/intrin.h,1,['Interlock'],['Interlocked']
Security,/*----------------------------------------------------------------------------*\; |* Interlocked Or; \*----------------------------------------------------------------------------*/,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/intrin.h:85,Interlock,Interlocked,85,interpreter/llvm-project/clang/lib/Headers/intrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/intrin.h,1,['Interlock'],['Interlocked']
Security,/*----------------------------------------------------------------------------*\; |* Interlocked Xor; \*----------------------------------------------------------------------------*/,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/intrin.h:85,Interlock,Interlocked,85,interpreter/llvm-project/clang/lib/Headers/intrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/intrin.h,1,['Interlock'],['Interlocked']
Security,"/*; * About virtual array management:; *; * The above ""normal"" array routines are only used to allocate strip buffers; * (as wide as the image, but just a few rows high). Full-image-sized buffers; * are handled as ""virtual"" arrays. The array is still accessed a strip at a; * time, but the memory manager must save the whole array for repeated; * accesses. The intended implementation is that there is a strip buffer in; * memory (as high as is possible given the desired memory limit), plus a; * backing file that holds the rest of the array.; *; * The request_virt_array routines are told the total size of the image and; * the maximum number of rows that will be accessed at once. The in-memory; * buffer must be at least as large as the maxaccess value.; *; * The request routines create control blocks but not the in-memory buffers.; * That is postponed until realize_virt_arrays is called. At that time the; * total amount of space needed is known (approximately, anyway), so free; * memory can be divided up fairly.; *; * The access_virt_array routines are responsible for making a specific strip; * area accessible (after reading or writing the backing file, if necessary).; * Note that the access routines are told whether the caller intends to modify; * the accessed strip; during a read-only pass this saves having to rewrite; * data to disk. The access routines are also responsible for pre-zeroing; * any newly accessed rows, if pre-zeroing was requested.; *; * In current usage, the access requests are usually for nonoverlapping; * strips; that is, successive access start_row numbers differ by exactly; * num_rows = maxaccess. This means we can get good performance with simple; * buffer dump/reload logic, by making the in-memory buffer be a multiple; * of the access height; then there will never be accesses across bufferload; * boundaries. The code will still work with overlapping access requests,; * but it doesn't handle bufferload overlaps very efficiently.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:251,access,accessed,251,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,13,['access'],"['access', 'accessed', 'accesses', 'accessible']"
Security,"/*; * Basic data types.; * You may need to change these if you have a machine with unusual data; * type sizes; for example, ""char"" not 8 bits, ""short"" not 16 bits,; * or ""long"" not 32 bits. We don't care whether ""int"" is 16 or 32 bits,; * but it had better be at least 16.; */; /* Representation of a single sample (pixel element value).; * We frequently allocate large arrays of these, so it's important to keep; * them small. But if you have memory to burn and access to char or short; * arrays is very slow on your hardware, you might want to change these.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmorecfg.h:463,access,access,463,graf2d/asimage/src/libAfterImage/libjpeg/jmorecfg.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmorecfg.h,1,['access'],['access']
Security,/*; * Compute the derived values for a Huffman table.; * This routine also performs some validation checks on the table.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jchuff.c:89,validat,validation,89,graf2d/asimage/src/libAfterImage/libjpeg/jchuff.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jchuff.c,2,['validat'],['validation']
Security,"/*; * Copyright (c) 2016-2020, Yann Collet, Facebook, Inc.; * All rights reserved.; *; * This source code is licensed under both the BSD-style license (found in the; * LICENSE file in the root directory of this source tree) and the GPLv2 (found; * in the COPYING file in the root directory of this source tree).; * You may select, at your option, one of the above-listed licenses.; */; /* Note : this module is expected to remain private, do not expose it */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/error_private.h:446,expose,expose,446,builtins/zstd/common/error_private.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/error_private.h,1,['expose'],['expose']
Security,"/*; * DISCLAIMER: There are known *seed-dependent* multicollisions here due to; * multiplication by zero, affecting hashes of lengths 17 to 240.; *; * However, they are very unlikely.; *; * Keep this in mind when using the unseeded XXH3_64bits() variant: As with all; * unseeded non-cryptographic hashes, it does not attempt to defend itself; * against specially crafted inputs, only random inputs.; *; * Compared to classic UMAC where a 1 in 2^31 chance of 4 consecutive bytes; * cancelling out the secret is taken an arbitrary number of times (addressed; * in XXH3_accumulate_512), this collision is very unlikely with random inputs; * and/or proper seeding:; *; * This only has a 1 in 2^63 chance of 8 consecutive bytes cancelling out, in a; * function that is only called up to 16 times per hash with up to 240 bytes of; * input.; *; * This is not too bad for a non-cryptographic hash function, especially with; * only 64 bit outputs.; *; * The 128-bit variant (which trades some speed for strength) is NOT affected; * by this, although it is always a good idea to use a proper seed if you care; * about strength.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/xxhash/xxhash.h:116,hash,hashes,116,builtins/xxhash/xxhash.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/xxhash/xxhash.h,4,['hash'],"['hash', 'hashes']"
Security,"/*; * For the simple (no-context-row) case, we just need to buffer one; * row group's worth of pixels for the downsampling step. At the bottom of; * the image, we pad to a full row group by replicating the last pixel row.; * The downsampler's last output row is then replicated if needed to pad; * out to a full iMCU row.; *; * When providing context rows, we must buffer three row groups' worth of; * pixels. Three row groups are physically allocated, but the row pointer; * arrays are made five row groups high, with the extra pointers above and; * below ""wrapping around"" to point to the last and first real row groups.; * This allows the downsampler to access the proper context rows.; * At the top and bottom of the image, we create dummy context rows by; * copying the first or last real pixel row. This copying could be avoided; * by pointer hacking as is done in jdmainct.c, but it doesn't seem worth the; * trouble on the compression side.; */; /* Private buffer controller object */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jcprepct.c:657,access,access,657,graf2d/asimage/src/libAfterImage/libjpeg/jcprepct.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jcprepct.c,1,['access'],['access']
Security,/*; * Force direct memory access. Only works on CPU which support unaligned memory; * access in hardware.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/xxhash/xxhash.h:26,access,access,26,builtins/xxhash/xxhash.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/xxhash/xxhash.h,2,['access'],['access']
Security,"/*; * If an action is to be taken if `secretLen` condition is not respected,; * it should be done here.; * For now, it's a contract pre-condition.; * Adding a check and a branch here would cost performance at every hash.; * Also, note that function signature doesn't offer room to return an error.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/xxhash/xxhash.h:215,hash,hash,215,builtins/xxhash/xxhash.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/xxhash/xxhash.h,1,['hash'],['hash']
Security,"/*; * If an action is to be taken if `secret` conditions are not respected,; * it should be done here.; * For now, it's a contract pre-condition.; * Adding a check and a branch here would cost performance at every hash.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/xxhash/xxhash.h:214,hash,hash,214,builtins/xxhash/xxhash.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/xxhash/xxhash.h,1,['hash'],['hash']
Security,"/*; * Load validation data to numpy array; */; // NOTE: TMVA Validation data is a subset of all the training data; // we will not use test data for validation. They will be used for the real testing",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyTorch.cxx:11,validat,validation,11,tmva/pymva/src/MethodPyTorch.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyTorch.cxx,3,"['Validat', 'validat']","['Validation', 'validation']"
Security,"/*; * Load validation data to numpy array; */; // NOTE: from TMVA, we get the validation data as a subset of all the training data; // we will not use test data for validation. They will be used for the real testing",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx:11,validat,validation,11,tmva/pymva/src/MethodPyKeras.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx,3,['validat'],['validation']
Security,"/*; * One goal of XXH3 is to make it fast on both 32-bit and 64-bit, while; * remaining a true 64-bit/128-bit hash function.; *; * This is done by prioritizing a subset of 64-bit operations that can be; * emulated without too many steps on the average 32-bit machine.; *; * For example, these two lines seem similar, and run equally fast on 64-bit:; *; * xxh_u64 x;; * x ^= (x >> 47); // good; * x ^= (x >> 13); // bad; *; * However, to a 32-bit machine, there is a major difference.; *; * x ^= (x >> 47) looks like this:; *; * x.lo ^= (x.hi >> (47 - 32));; *; * while x ^= (x >> 13) looks like this:; *; * // note: funnel shifts are not usually cheap.; * x.lo ^= (x.lo >> 13) | (x.hi << (32 - 13));; * x.hi ^= (x.hi >> 13);; *; * The first one is significantly faster than the second, simply because the; * shift is larger than 32. This means:; * - All the bits we need are in the upper 32 bits, so we can ignore the lower; * 32 bits in the shift.; * - The shift result will always fit in the lower 32 bits, and therefore,; * we can ignore the upper 32 bits in the xor.; *; * Thanks to this optimization, XXH3 only requires these features to be efficient:; *; * - Usable unaligned access; * - A 32-bit or 64-bit ALU; * - If 32-bit, a decent ADC instruction; * - A 32 or 64-bit multiply with a 64-bit result; * - For the 128-bit variant, a decent byteswap helps short inputs.; *; * The first two are already required by XXH32, and almost all 32-bit and 64-bit; * platforms which can run XXH32 can run XXH3 efficiently.; *; * Thumb-1, the classic 16-bit only subset of ARM's instruction set, is one; * notable exception.; *; * First of all, Thumb-1 lacks support for the UMULL instruction which; * performs the important long multiply. This means numerous __aeabi_lmul; * calls.; *; * Second of all, the 8 functional registers are just not enough.; * Setup for __aeabi_lmul, byteshift loads, pointers, and all arithmetic need; * Lo registers, and this shuffling results in thousands more MOVs than A32.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/xxhash/xxhash.h:110,hash,hash,110,builtins/xxhash/xxhash.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/xxhash/xxhash.h,1,['hash'],['hash']
Security,"/*; * Project: RooFit; * Authors:; * Jonas Rembser, CERN 2021; * Emmanouil Michalainas, CERN 2021; *; * Copyright (c) 2021, CERN; *; * Redistribution and use in source and binary forms,; * with or without modification, are permitted according to the terms; * listed in LICENSE (http://roofit.sourceforge.net/license.txt); */; /**; \file Evaluator.cxx; \class RooFit::Evaluator; \ingroup Roofitcore. Evaluates a RooAbsReal object in other ways than recursive graph; traversal. Currently, it is being used for evaluating a RooAbsReal object and; supplying the value to the minimizer, during a fit. The class scans the; dependencies and schedules the computations in a secure and efficient way. The; computations take place in the RooBatchCompute library and can be carried off; by either the CPU or a CUDA-supporting GPU. The Evaluator class takes care; of data transfers. An instance of this class is created every time; RooAbsPdf::fitTo() is called and gets destroyed when the fitting ends.; **/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFit/Evaluator.cxx:666,secur,secure,666,roofit/roofitcore/src/RooFit/Evaluator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFit/Evaluator.cxx,1,['secur'],['secure']
Security,"/*; * Project: xRooFit; * Author:; * Will Buttinger, RAL 2022; *; * Copyright (c) 2022, CERN; *; * Redistribution and use in source and binary forms,; * with or without modification, are permitted according to the terms; * listed in LICENSE (http://roofit.sourceforge.net/license.txt); */; /** \class ROOT::Experimental::XRooFit::xRooNode; \ingroup xroofit. The xRooNode class is designed to wrap over a TObject and provide functionality to aid with interacting with that; object, particularly in the case where the object is a RooFit class instance. It is a smart pointer to the object, so; you have access to all the methods of the object too. xRooNode is designed to work in both python and C++, but examples below are given in python because that is imagined; be the most common way to use the xRooFit API. -# [Exploring workspaces](\ref exploring-workspaces). \anchor exploring-workspaces; ## Exploring workspaces. An existing workspace file (either a ROOT file containing a RooWorkspace, or a json HS3 file) can be opened using; xRooNode like this:. \code{.py}; from ROOT.Experimental import XRooFit; w = XRooFit.xRooNode(""workspace.root"") # or can use workspace.json for HS3; \endcode. You can explore the content of the workspace somewhat like you would a file system: each node contains sub-nodes,; which you can interact with to explore ever deeper. The most relevant methods for navigating the workspace and; exploring the content are:. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:601,access,access,601,roofit/xroofit/src/xRooNode.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx,1,['access'],['access']
Security,"/*; * Read the coefficient arrays from a JPEG file.; * jpeg_read_header must be completed before calling this.; *; * The entire image is read into a set of virtual coefficient-block arrays,; * one per component. The return value is a pointer to the array of; * virtual-array descriptors. These can be manipulated directly via the; * JPEG memory manager, or handed off to jpeg_write_coefficients().; * To release the memory occupied by the virtual arrays, call; * jpeg_finish_decompress() when done with the data.; *; * An alternative usage is to simply obtain access to the coefficient arrays; * during a buffered-image-mode decompression operation. This is allowed; * after any jpeg_finish_output() call. The arrays can be accessed until; * jpeg_finish_decompress() is called. (Note that any call to the library; * may reposition the arrays, so don't rely on access_virt_barray() results; * to stay valid across library calls.); *; * Returns NULL if suspended. This case need be checked only if; * a suspending data source is used.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdtrans.c:560,access,access,560,graf2d/asimage/src/libAfterImage/libjpeg/jdtrans.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdtrans.c,2,['access'],"['access', 'accessed']"
Security,"/*; * SGI FREE SOFTWARE LICENSE B (Version 2.0, Sept. 18, 2008); * Copyright (C) 1991-2000 Silicon Graphics, Inc. All Rights Reserved.; *; * Permission is hereby granted, free of charge, to any person obtaining a; * copy of this software and associated documentation files (the ""Software""),; * to deal in the Software without restriction, including without limitation; * the rights to use, copy, modify, merge, publish, distribute, sublicense,; * and/or sell copies of the Software, and to permit persons to whom the; * Software is furnished to do so, subject to the following conditions:; *; * The above copyright notice including the dates of first publication and; * either this permission notice or a reference to; * http://oss.sgi.com/projects/FreeB/; * shall be included in all copies or substantial portions of the Software.; *; * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS; * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,; * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL; * SILICON GRAPHICS, INC. BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,; * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF; * OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE; * SOFTWARE.; *; * Except as contained in this notice, the name of Silicon Graphics, Inc.; * shall not be used in advertising or otherwise to promote the sale, use or; * other dealings in this Software without prior written authorization from; * Silicon Graphics, Inc.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve7/glu/GL_glu.h:1518,authoriz,authorization,1518,graf3d/eve7/glu/GL_glu.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve7/glu/GL_glu.h,1,['authoriz'],['authorization']
Security,"/*; * SGI FREE SOFTWARE LICENSE B (Version 2.0, Sept. 18, 2008); * Copyright (C) 1991-2000 Silicon Graphics, Inc. All Rights Reserved.; *; * Permission is hereby granted, free of charge, to any person obtaining a; * copy of this software and associated documentation files (the ""Software""),; * to deal in the Software without restriction, including without limitation; * the rights to use, copy, modify, merge, publish, distribute, sublicense,; * and/or sell copies of the Software, and to permit persons to whom the; * Software is furnished to do so, subject to the following conditions:; *; * The above copyright notice including the dates of first publication and; * either this permission notice or a reference to; * http://oss.sgi.com/projects/FreeB/; * shall be included in all copies or substantial portions of the Software.; *; * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS; * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,; * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL; * SILICON GRAPHICS, INC. BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,; * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF; * OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE; * SOFTWARE.; *; * Except as contained in this notice, the name of Silicon Graphics, Inc.; * shall not be used in advertising or otherwise to promote the sale, use or; * other dealings in this Software without prior written authorization from; * Silicon Graphics, Inc.; */; /*; ** Author: Eric Veach, July 1994.; **; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve7/glu/dict-list.h:1518,authoriz,authorization,1518,graf3d/eve7/glu/dict-list.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve7/glu/dict-list.h,24,['authoriz'],['authorization']
Security,"/*; * Structure for [] character-set representation. Character sets are; * done as bit vectors, grouped 8 to a byte vector for compactness.; * The individual set therefore has both a pointer to the byte vector; * and a mask to pick out the relevant bit of each byte. A hash code; * simplifies testing whether two sets could be identical.; *; * This will get trickier for multicharacter collating elements. As; * preliminary hooks for dealing with such things, we also carry along; * a string of multi-character elements, and decide the size of the; * vectors at run time.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regex2.h:269,hash,hash,269,interpreter/llvm-project/llvm/lib/Support/regex2.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regex2.h,1,['hash'],['hash']
Security,"/*; * The core arithmetic decoding routine (common in JPEG and JBIG).; * This needs to go as fast as possible.; * Machine-dependent optimization facilities; * are not utilized in this portable implementation.; * However, this code should be fairly efficient and; * may be a good base for further optimizations anyway.; *; * Return value is 0 or 1 (binary decision).; *; * Note: I've changed the handling of the code base & bit; * buffer register C compared to other implementations; * based on the standards layout & procedures.; * While it also contains both the actual base of the; * coding interval (16 bits) and the next-bits buffer,; * the cut-point between these two parts is floating; * (instead of fixed) with the bit shift counter CT.; * Thus, we also need only one (variable instead of; * fixed size) shift for the LPS/MPS decision, and; * we can get away with any renormalization update; * of C (except for new data insertion, of course).; *; * I've also introduced a new scheme for accessing; * the probability estimation state machine table,; * derived from Markus Kuhn's JBIG implementation.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdarith.c:994,access,accessing,994,graf2d/asimage/src/libAfterImage/libjpeg/jdarith.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdarith.c,1,['access'],['accessing']
Security,"/*; * The core arithmetic encoding routine (common in JPEG and JBIG).; * This needs to go as fast as possible.; * Machine-dependent optimization facilities; * are not utilized in this portable implementation.; * However, this code should be fairly efficient and; * may be a good base for further optimizations anyway.; *; * Parameter 'val' to be encoded may be 0 or 1 (binary decision).; *; * Note: I've added full ""Pacman"" termination support to the; * byte output routines, which is equivalent to the optional; * Discard_final_zeros procedure (Figure D.15) in the spec.; * Thus, we always produce the shortest possible output; * stream compliant to the spec (no trailing zero bytes,; * except for FF stuffing).; *; * I've also introduced a new scheme for accessing; * the probability estimation state machine table,; * derived from Markus Kuhn's JBIG implementation.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jcarith.c:757,access,accessing,757,graf2d/asimage/src/libAfterImage/libjpeg/jcarith.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jcarith.c,1,['access'],['accessing']
Security,"/*; * This code is derived from (original license follows):; *; * This is an OpenSSL-compatible implementation of the RSA Data Security, Inc.; * MD5 Message-Digest Algorithm (RFC 1321).; *; * Homepage:; * http://openwall.info/wiki/people/solar/software/public-domain-source-code/md5; *; * Author:; * Alexander Peslyak, better known as Solar Designer <solar at openwall.com>; *; * This software was written by Alexander Peslyak in 2001. No copyright is; * claimed, and the software is hereby placed in the public domain.; * In case this attempt to disclaim copyright and place the software in the; * public domain is deemed null and void, then the software is; * Copyright (c) 2001 Alexander Peslyak and it is hereby released to the; * general public under the following terms:; *; * Redistribution and use in source and binary forms, with or without; * modification, are permitted.; *; * There's ABSOLUTELY NO WARRANTY, express or implied.; *; * (This is a heavily cut-down ""BSD license"".); *; * This differs from Colin Plumb's older public domain implementation in that; * no exactly 32-bit integer data type is required (any 32-bit or wider; * unsigned integer data type will do), there's no compile-time endianness; * configuration, and the function prototypes match OpenSSL's. No code from; * Colin Plumb's implementation has been reused; this comment merely compares; * the properties of the two independent implementations.; *; * The primary goals of this implementation are portability and ease of use.; * It is meant to be fast, but not as fast as possible. Some known; * optimizations are not included to reduce source code size and avoid; * compile-time configuration.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/MD5.cpp:127,Secur,Security,127,interpreter/llvm-project/llvm/lib/Support/MD5.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/MD5.cpp,1,['Secur'],['Security']
Security,"/*; * This routine computes the total space still available for allocation by; * jpeg_get_large. If more space than this is needed, backing store will be; * used. NOTE: any memory already allocated must not be counted.; *; * There is a minimum space requirement, corresponding to the minimum; * feasible buffer sizes; jmemmgr.c will request that much space even if; * jpeg_mem_available returns zero. The maximum space needed, enough to hold; * all working storage in memory, is also passed in case it is useful.; * Finally, the total space already allocated is passed. If no better; * method is available, cinfo->mem->max_memory_to_use - already_allocated; * is often a suitable calculation.; *; * It is OK for jpeg_mem_available to underestimate the space available; * (that'll just lead to more backing-store access than is really necessary).; * However, an overestimate will lead to failure. Hence it's wise to subtract; * a slop factor from the true available space. 5% should be enough.; *; * On machines with lots of virtual memory, any large constant may be returned.; * Conversely, zero may be returned to always use the minimum amount of memory.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemsys.h:812,access,access,812,graf2d/asimage/src/libAfterImage/libjpeg/jmemsys.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemsys.h,1,['access'],['access']
Security,/*; * This structure holds whatever state is needed to access a single; * backing-store object. The read/write/close method pointers are called; * by jmemmgr.c to manipulate the backing-store object; all other fields; * are private to the system-dependent backing store routines.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemsys.h:55,access,access,55,graf2d/asimage/src/libAfterImage/libjpeg/jmemsys.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemsys.h,1,['access'],['access']
Security,"/*; * To get prototypes for the following POSIXish functions, you have to; * include the indicated non-POSIX headers. The functions are defined; * in OLDNAMES.LIB (MSVC) or -lmoldname-msvc (mingw32).; *; * getcwd: <direct.h> (MSVC), <io.h> (mingw32); * getpid: <process.h>; * access: <io.h>; * unlink: <stdio.h> or <io.h>; * open, read, write, lseek, close: <io.h>; * rmdir: <direct.h>; * pipe: <direct.h>; */; /* pipe is not in OLDNAMES.LIB or -lmoldname-msvc. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/glib/gwin32.h:276,access,access,276,graf2d/win32gdk/gdk/src/glib/gwin32.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/glib/gwin32.h,1,['access'],['access']
Security,"/*; * XXH3_64bits_reset_withSecret():; * `secret` is referenced, it _must outlive_ the hash streaming session.; * Similar to one-shot API, `secretSize` must be >= `XXH3_SECRET_SIZE_MIN`,; * and the quality of produced hash values depends on secret's entropy; * (secret's content should look like a bunch of random bytes).; * When in doubt about the randomness of a candidate `secret`,; * consider employing `XXH3_generateSecret()` instead (see below).; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/xxhash/xxhash.h:87,hash,hash,87,builtins/xxhash/xxhash.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/xxhash/xxhash.h,2,['hash'],['hash']
Security,"/*; * XXH3_64bits_withSecret():; * It's possible to provide any blob of bytes as a ""secret"" to generate the hash.; * This makes it more difficult for an external actor to prepare an intentional collision.; * The main condition is that secretSize *must* be large enough (>= XXH3_SECRET_SIZE_MIN).; * However, the quality of produced hash values depends on secret's entropy.; * Technically, the secret must look like a bunch of random bytes.; * Avoid ""trivial"" or structured data such as repeated sequences or a text document.; * Whenever unsure about the ""randomness"" of the blob of bytes,; * consider relabelling it as a ""custom seed"" instead,; * and employ ""XXH3_generateSecret()"" (see below); * to generate a high entropy secret derived from the custom seed.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/xxhash/xxhash.h:108,hash,hash,108,builtins/xxhash/xxhash.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/xxhash/xxhash.h,2,['hash'],['hash']
Security,"/*; * XXH3_accumulate_512 is the tightest loop for long inputs, and it is the most optimized.; *; * It is a hardened version of UMAC, based off of FARSH's implementation.; *; * This was chosen because it adapts quite well to 32-bit, 64-bit, and SIMD; * implementations, and it is ridiculously fast.; *; * We harden it by mixing the original input to the accumulators as well as the product.; *; * This means that in the (relatively likely) case of a multiply by zero, the; * original input is preserved.; *; * On 128-bit inputs, we swap 64-bit pairs when we add the input to improve; * cross-pollination, as otherwise the upper and lower halves would be; * essentially independent.; *; * This doesn't matter on 64-bit hashes since they all get merged together in; * the end, so we skip the extra step.; *; * Both XXH3_64bits and XXH3_128bits use this subroutine.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/xxhash/xxhash.h:718,hash,hashes,718,builtins/xxhash/xxhash.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/xxhash/xxhash.h,1,['hash'],['hashes']
Security,"/*; * XXH3_hashLong_64b_withSeed():; * Generate a custom key based on alteration of default XXH3_kSecret with the seed,; * and then use this key for long mode hashing.; *; * This operation is decently fast but nonetheless costs a little bit of time.; * Try to avoid it whenever possible (typically when seed==0).; *; * It's important for performance that XXH3_hashLong is not inlined. Not sure; * why (uop cache maybe?), but the difference is large and easily measurable.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/xxhash/xxhash.h:159,hash,hashing,159,builtins/xxhash/xxhash.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/xxhash/xxhash.h,1,['hash'],['hashing']
Security,/*; * access; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ROOT/span.hxx:6,access,access,6,core/foundation/inc/ROOT/span.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ROOT/span.hxx,1,['access'],['access']
Security,"/*; * jcmaster.c; *; * Copyright (C) 1991-1997, Thomas G. Lane.; * Modified 2003-2010 by Guido Vollbeding.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This file contains master control logic for the JPEG compressor.; * These routines are concerned with parameter validation, initial setup,; * and inter-pass control (determining the number of passes and the work ; * to be done in each pass).; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jcmaster.c:365,validat,validation,365,graf2d/asimage/src/libAfterImage/libjpeg/jcmaster.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jcmaster.c,1,['validat'],['validation']
Security,"/*; * jmemmgr.c; *; * Copyright (C) 1991-1997, Thomas G. Lane.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This file contains the JPEG system-independent memory management; * routines. This code is usable across a wide variety of machines; most; * of the system dependencies have been isolated in a separate file.; * The major functions provided here are:; * * pool-based allocation and freeing of memory;; * * policy decisions about how to divide available memory among the; * virtual arrays;; * * control logic for swapping virtual arrays between main memory and; * backing storage.; * The separate system-dependent file provides the actual backing-storage; * access code, and it contains the policy decision about how much total; * main memory to use.; * This file is system-dependent in the sense that some of its functions; * are unnecessary in some systems. For example, if there is enough virtual; * memory so that backing storage will never be used, much of the virtual; * array control logic could be removed. (Of course, if you have that much; * memory then you shouldn't care about a little bit of unused code...); */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:764,access,access,764,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,1,['access'],['access']
Security,"/*; * transupp.c; *; * Copyright (C) 1997-2009, Thomas G. Lane, Guido Vollbeding.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This file contains image transformation routines and other utility code; * used by the jpegtran sample application. These are NOT part of the core; * JPEG library. But we keep these routines separate from jpegtran.c to; * ease the task of maintaining jpegtran-like programs that have other user; * interfaces.; */; /* Although this file really shouldn't have access to the library internals,; * it's helpful to let it call jround_up() and jcopy_block_row().; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/transupp.c:587,access,access,587,graf2d/asimage/src/libAfterImage/libjpeg/transupp.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/transupp.c,1,['access'],['access']
Security,"/*; * xxHash - Extremely Fast Hash algorithm; * Copyright (C) 2012-2020 Yann Collet; *; * BSD 2-Clause License (https://www.opensource.org/licenses/bsd-license.php); *; * Redistribution and use in source and binary forms, with or without; * modification, are permitted provided that the following conditions are; * met:; *; * * Redistributions of source code must retain the above copyright; * notice, this list of conditions and the following disclaimer.; * * Redistributions in binary form must reproduce the above; * copyright notice, this list of conditions and the following disclaimer; * in the documentation and/or other materials provided with the; * distribution.; *; * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS; * ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT; * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR; * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT; * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,; * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT; * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,; * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY; * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT; * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE; * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.; *; * You can contact the author at:; * - xxHash homepage: https://www.xxhash.com; * - xxHash source repository: https://github.com/Cyan4973/xxHash; */; /*; * xxhash.c instantiates functions defined in xxhash.h; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/xxhash/xxhash.c:30,Hash,Hash,30,builtins/xxhash/xxhash.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/xxhash/xxhash.c,1,['Hash'],['Hash']
Security,"/*; * xxHash - Extremely Fast Hash algorithm; * Header File; * Copyright (C) 2012-2020 Yann Collet; *; * BSD 2-Clause License (https://www.opensource.org/licenses/bsd-license.php); *; * Redistribution and use in source and binary forms, with or without; * modification, are permitted provided that the following conditions are; * met:; *; * * Redistributions of source code must retain the above copyright; * notice, this list of conditions and the following disclaimer.; * * Redistributions in binary form must reproduce the above; * copyright notice, this list of conditions and the following disclaimer; * in the documentation and/or other materials provided with the; * distribution.; *; * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS; * ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT; * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR; * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT; * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,; * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT; * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,; * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY; * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT; * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE; * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.; *; * You can contact the author at:; * - xxHash homepage: https://www.xxhash.com; * - xxHash source repository: https://github.com/Cyan4973/xxHash; */; /* TODO: update */; /* Notice extracted from xxHash homepage:. xxHash is an extremely fast hash algorithm, running at RAM speed limits.; It also successfully passes all tests from the SMHasher suite. Comparison (single thread, Windows Seven 32 bits, using SMHasher on a Core 2 Duo @3GHz). Name Speed Q.Score Author; xxHash 5.4 GB/s 10; CrapWow 3.2 GB/s 2 Andrew; MumurH",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/xxhash/xxhash.h:30,Hash,Hash,30,builtins/xxhash/xxhash.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/xxhash/xxhash.h,1,['Hash'],['Hash']
Security,"/*; * xxHash - Fast Hash algorithm; * Copyright (C) 2012-2021, Yann Collet; *; * BSD 2-Clause License (http://www.opensource.org/licenses/bsd-license.php); *; * Redistribution and use in source and binary forms, with or without; * modification, are permitted provided that the following conditions are; * met:; *; * * Redistributions of source code must retain the above copyright; * notice, this list of conditions and the following disclaimer.; * * Redistributions in binary form must reproduce the above; * copyright notice, this list of conditions and the following disclaimer; * in the documentation and/or other materials provided with the; * distribution.; *; * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS; * ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT; * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR; * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT; * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,; * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT; * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,; * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY; * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT; * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE; * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.; *; * You can contact the author at :; * - xxHash homepage: http://www.xxhash.com; * - xxHash source repository : https://github.com/Cyan4973/xxHash; */; // xxhash64 is based on commit d2df04efcbef7d7f6886d345861e5dfda4edacc1. Removed; // everything but a simple interface for computing xxh64.; // xxh3_64bits is based on commit d5891596637d21366b9b1dcf2c0007a3edb26a9e (July; // 2023).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/xxhash.cpp:20,Hash,Hash,20,interpreter/llvm-project/llvm/lib/Support/xxhash.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/xxhash.cpp,1,['Hash'],['Hash']
Security,"/*; - freezeset - final processing on a set of characters; *; * The main task here is merging identical sets. This is usually a waste; * of time (although the hash code minimizes the overhead), but can win; * big if REG_ICASE is being used. REG_ICASE, by the way, is why the hash; * is done using addition rather than xor -- all ASCII [aA] sets xor to; * the same value!; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regcomp.c:159,hash,hash,159,interpreter/llvm-project/llvm/lib/Support/regcomp.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regcomp.c,2,['hash'],['hash']
Security,"/*; ////////////////////////////////////////////////////////////////////////////////. const RooArgSet& RooStats::HistFactory::RooBarlowBeestonLL::bestFitParams() const; {; validateAbsMin() ;; return _paramAbsMin ;; }. ////////////////////////////////////////////////////////////////////////////////. const RooArgSet& RooStats::HistFactory::RooBarlowBeestonLL::bestFitObs() const; {; validateAbsMin() ;; return _obsAbsMin ;; }; */; ////////////////////////////////////////////////////////////////////////////////; /// Optimized implementation of createProfile for profile likelihoods.; /// Return profile of original function in terms of stated parameters; /// of interest rather than profiling recursively.; /*; RooAbsReal* RooStats::HistFactory::RooBarlowBeestonLL::createProfile(const RooArgSet& paramsOfInterest); {; return nll().createProfile(paramsOfInterest) ;; }; */; /*; void RooStats::HistFactory::RooBarlowBeestonLL::FactorizePdf(const RooArgSet &observables, RooAbsPdf &pdf, RooArgList &obsTerms, RooArgList &constraints) const {; // utility function to factorize constraint terms from a pdf; // (from G. Petrucciani); const std::type_info & id = typeid(pdf);; if (id == typeid(RooProdPdf)) {; RooProdPdf *prod = dynamic_cast<RooProdPdf *>(&pdf);; RooArgList list(prod->pdfList());; for (int i = 0, n = list.size(); i < n; ++i) {; RooAbsPdf *pdfi = (RooAbsPdf *) list.at(i);; FactorizePdf(observables, *pdfi, obsTerms, constraints);; }; } else if (id == typeid(RooSimultaneous) ) { //|| id == typeid(RooSimultaneousOpt)) {; RooSimultaneous *sim = dynamic_cast<RooSimultaneous *>(&pdf);; std::unique_ptr<RooAbsCategoryLValue> cat{(RooAbsCategoryLValue *) sim->indexCat().Clone()};; for (int ic = 0, nc = cat->numBins((const char *)0); ic < nc; ++ic) {; cat->setBin(ic);; FactorizePdf(observables, *sim->getPdf(cat->getLabel()), obsTerms, constraints);; }; } else if (pdf.dependsOn(observables)) {; if (!obsTerms.contains(pdf)) obsTerms.add(pdf);; } else {; if (!constraints.contains(pdf)) co",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/src/RooBarlowBeestonLL.cxx:172,validat,validateAbsMin,172,roofit/histfactory/src/RooBarlowBeestonLL.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/src/RooBarlowBeestonLL.cxx,2,['validat'],['validateAbsMin']
Security,"/*; ////////////////////////////////////////////////////////////////////////////////; /// Calculate hash from bin indexes. ULong64_t THnSparseCoordCompression::GetHashFromCoords(const Int_t* coord) const; {; // Bins are addressed in two different modes, depending; // on whether the compact bin index fits into a Long64_t or not.; // If it does, we can use it as a ""perfect hash"" for the TExMap.; // If not we build a hash from the compact bin index, and use that; // as the TExMap's hash. if (fCoordBufferSize <= 8) {; // fits into a Long64_t; ULong64_t hash1 = 0;; for (Int_t i = 0; i < fNdimensions; ++i) {; hash1 += coord[i] << fBitOffsets[i];; }; return hash1;; }. // else: doesn't fit into a Long64_t:; memset(coord, 0, fCoordBufferSize);; for (Int_t i = 0; i < fNdimensions; ++i) {; const Int_t offset = fBitOffsets[i] / 8;; const Int_t shift = fBitOffsets[i] % 8;; ULong64_t val = coord[i];. Char_t* pbuf = fCoordBuffer + offset;; *pbuf += 0xff & (val << shift);; val = val >> (8 - shift);; while (val) {; ++pbuf;; *pbuf += 0xff & val;; val = val >> 8;; }; }. ULong64_t hash = 5381;; Char_t* str = fCoordBuffer;; while (str - fCoordBuffer < fCoordBufferSize) {; hash *= 5;; hash += *(str++);; }; return hash;; }; */; ////////////////////////////////////////////////////////////////////////////////; /// Calculate hash from compact bin index.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx:100,hash,hash,100,hist/hist/src/THnSparse.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx,9,['hash'],['hash']
Security,"/*; ////////////////////////////////////////////////////////////////////////////////; /// Check that parameters and likelihood value for 'best fit' are still valid. If not,; /// because the best fit has never been calculated, or because constant parameters have; /// changed value or parameters have changed const/float status, the minimum is recalculated. void RooStats::HistFactory::RooBarlowBeestonLL::validateAbsMin() const; {; // Check if constant status of any of the parameters have changed; if (_absMinValid) {; _piter->Reset() ;; RooAbsArg* par ;; while((par=(RooAbsArg*)_piter->Next())) {; if (_paramFixed[par->GetName()] != par->isConstant()) {; cxcoutI(Minimization) << ""RooStats::HistFactory::RooBarlowBeestonLL::evaluate("" << GetName() << "") constant status of parameter "" << par->GetName() << "" has changed from ""; << (_paramFixed[par->GetName()]?""fixed"":""floating"") << "" to "" << (par->isConstant()?""fixed"":""floating""); << "", recalculating absolute minimum"" << endl ;; _absMinValid = false ;; break ;; }; }; }. // If we don't have the absolute minimum w.r.t all observables, calculate that first; if (!_absMinValid) {. cxcoutI(Minimization) << ""RooStats::HistFactory::RooBarlowBeestonLL::evaluate("" << GetName() << "") determining minimum likelihood for current configurations w.r.t all observable"" << endl ;. // Save current values of non-marginalized parameters; std::unique_ptr<RooArgSet> obsStart{(RooArgSet*) _obs.snapshot(false)};. // Start from previous global minimum; if (_paramAbsMin.size()>0) {; const_cast<RooSetProxy&>(_par).assignValueOnly(_paramAbsMin) ;; }; if (_obsAbsMin.size()>0) {; const_cast<RooSetProxy&>(_obs).assignValueOnly(_obsAbsMin) ;; }. // Find minimum with all observables floating; const_cast<RooSetProxy&>(_obs).setAttribAll(""Constant"",false) ;; _minuit->migrad() ;. // Save value and remember; _absMin = _nll ;; _absMinValid = true ;. // Save parameter values at abs minimum as well; _paramAbsMin.removeAll() ;. // Only store non-constant parameters her",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/src/RooBarlowBeestonLL.cxx:405,validat,validateAbsMin,405,roofit/histfactory/src/RooBarlowBeestonLL.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/src/RooBarlowBeestonLL.cxx,1,['validat'],['validateAbsMin']
Security,/*; Clears the error and end-of-file flags for file. This is analogous to the; clearerr() function in stdio. This is useful for continuing to read a gzip; file that is being written concurrently.; */; /* checksum functions */; /*; These functions are not related to compression but are exported; anyway because they might be useful in applications using the; compression library.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:204,checksum,checksum,204,graf2d/asimage/src/libAfterImage/zlib/zlib.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h,1,['checksum'],['checksum']
Security,"/*; Combine two Adler-32 checksums into one. For two sequences of bytes, seq1; and seq2 with lengths len1 and len2, Adler-32 checksums were calculated for; each, adler1 and adler2. adler32_combine() returns the Adler-32 checksum of; seq1 and seq2 concatenated, requiring only adler1, adler2, and len2.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:25,checksum,checksums,25,graf2d/asimage/src/libAfterImage/zlib/zlib.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h,3,['checksum'],"['checksum', 'checksums']"
Security,"/*; Converts, formats, and writes the args to the compressed file under; control of the format string, as in fprintf. gzprintf returns the number of; uncompressed bytes actually written (0 in case of error). The number of; uncompressed bytes written is limited to 4095. The caller should assure that; this limit is not exceeded. If it is exceeded, then gzprintf() will return; return an error (0) with nothing written. In this case, there may also be a; buffer overflow with unpredictable consequences, which is possible only if; zlib was compiled with the insecure functions sprintf() or vsprintf(); because the secure snprintf() or vsnprintf() functions were not available.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:613,secur,secure,613,graf2d/asimage/src/libAfterImage/zlib/zlib.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h,1,['secur'],['secure']
Security,"/*; Converts, formats, and writes the arguments to the compressed file under; control of the format string, as in fprintf. gzprintf returns the number of; uncompressed bytes actually written, or 0 in case of error. The number of; uncompressed bytes written is limited to 8191, or one less than the buffer; size given to gzbuffer(). The caller should assure that this limit is not; exceeded. If it is exceeded, then gzprintf() will return an error (0) with; nothing written. In this case, there may also be a buffer overflow with; unpredictable consequences, which is possible only if zlib was compiled with; the insecure functions sprintf() or vsprintf() because the secure snprintf(); or vsnprintf() functions were not available. This can be determined using; zlibCompileFlags().; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:667,secur,secure,667,builtins/zlib/zlib.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h,1,['secur'],['secure']
Security,"/*; Decompresses the source buffer into the destination buffer. sourceLen is; the byte length of the source buffer. Upon entry, destLen is the total size; of the destination buffer, which must be large enough to hold the entire; uncompressed data. (The size of the uncompressed data must have been saved; previously by the compressor and transmitted to the decompressor by some; mechanism outside the scope of this compression library.) Upon exit, destLen; is the actual size of the uncompressed buffer. uncompress returns Z_OK if success, Z_MEM_ERROR if there was not; enough memory, Z_BUF_ERROR if there was not enough room in the output; buffer, or Z_DATA_ERROR if the input data was corrupted or incomplete. In; the case where there is not enough room, uncompress() will fill the output; buffer with the uncompressed data up to that point.; */; /* gzip file access functions */; /*; This library supports reading and writing files in gzip (.gz) format with; an interface similar to that of stdio, using the functions that start with; ""gz"". The gzip format is different from the zlib format. gzip is a gzip; wrapper, documented in RFC 1952, wrapped around a deflate stream.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:862,access,access,862,builtins/zlib/zlib.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h,1,['access'],['access']
Security,"/*; In CallFunc we currently always (intentionally and somewhat necessarily); always fully specify member function template, however this can lead to; an ambiguity with a class template. For example in; roottest/cling/functionTemplate we get:. input_line_171:3:15: warning: lookup of 'set' in member access expression; is ambiguous; using member of 't'; ((t*)obj)->set<int>(*(int*)args[0]);; ^; roottest/cling/functionTemplate/t.h:19:9: note: lookup in the object type; 't' refers here; void set(T targ) {; ^; /usr/include/c++/4.4.5/bits/stl_set.h:87:11: note: lookup from the; current scope refers here; class set; ^; This is an intention warning implemented in clang, see; http://llvm.org/viewvc/llvm-project?view=revision&revision=105518. which 'should have been' an error:. C++ [basic.lookup.classref] requires this to be an error, but,; because it's hard to work around, Clang downgrades it to a warning as; an extension.</p>. // C++98 [basic.lookup.classref]p1:; // In a class member access expression (5.2.5), if the . or -> token is; // immediately followed by an identifier followed by a <, the identifier; // must be looked up to determine whether the < is the beginning of a; // template argument list (14.2) or a less-than operator. The identifier; // is first looked up in the class of the object expression. If the; // identifier is not found, it is then looked up in the context of the; // entire postfix-expression and shall name a class or function template. If; // the lookup in the class of the object expression finds a template, the; // name is also looked up in the context of the entire postfix-expression; // and; // -- if the name is not found, the name found in the class of the; // object expression is used, otherwise; // -- if the name is found in the context of the entire postfix-expression; // and does not name a class template, the name found in the class of the; // object expression is used, otherwise; // -- if the name found is a class template, it must refer to ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/Interpreter.cpp:300,access,access,300,interpreter/cling/lib/Interpreter/Interpreter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/Interpreter.cpp,2,['access'],['access']
Security,"/*; Mesh builder requires generic ""data source"": it can; be a wrapped TH3 object, a wrapped TF3 object or some; ""density estimator"" object.; Mesh builder inherits this data source type. TH3Adapter is one of such data sources.; It has _direct_ access to TH3 internal data.; GetBinContent(i, j, k) is a virtual function; and it calls two other virtual functions - this; is very expensive if you call GetBinContent; several million times as I do in marching cubes. ""H"" parameter is one of TH3 classes,; ""E"" is the type of internal data. For example, H == TH3C, E == Char_t.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/inc/TGLMarchingCubes.h:243,access,access,243,graf3d/gl/inc/TGLMarchingCubes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/inc/TGLMarchingCubes.h,1,['access'],['access']
Security,"/*; Sets the destination stream as a complete copy of the source stream. This function can be useful when randomly accessing a large stream. The; first pass through the stream can periodically record the inflate state,; allowing restarting inflate at those points when randomly accessing the; stream. inflateCopy returns Z_OK if success, Z_MEM_ERROR if there was not; enough memory, Z_STREAM_ERROR if the source stream state was inconsistent; (such as zalloc being NULL). msg is left unchanged in both source and; destination.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:115,access,accessing,115,graf2d/asimage/src/libAfterImage/zlib/zlib.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h,2,['access'],['accessing']
Security,"/*; Sets the destination stream as a complete copy of the source stream. This function can be useful when randomly accessing a large stream. The; first pass through the stream can periodically record the inflate state,; allowing restarting inflate at those points when randomly accessing the; stream. inflateCopy returns Z_OK if success, Z_MEM_ERROR if there was not; enough memory, Z_STREAM_ERROR if the source stream state was inconsistent; (such as zalloc being Z_NULL). msg is left unchanged in both source and; destination.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:115,access,accessing,115,builtins/zlib/zlib.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h,2,['access'],['accessing']
Security,"/*; THIS FILE IS PROPERTY OF BURKHARD BUROW. IF YOU ARE USING THIS FILE YOU; SHOULD ALSO HAVE ACCESS TO CFORTRAN.DOC WHICH PROVIDES TERMS FOR USING,; MODIFYING, COPYING AND DISTRIBUTING THE CFORTRAN.H PACKAGE.; */; /* The following modifications were made by the authors of CFITSIO or by me.; * They are flagged below with CFITSIO, the author's initials, or KMCCARTY.; * PDW = Peter Wilson; * DM = Doug Mink; * LEB = Lee E Brotzman; * MR = Martin Reinecke; * WDP = William D Pence; * -- Kevin McCarty, for Debian (19 Dec. 2005) */; /*******; Modifications:; Oct 1997: Changed symbol name extname to appendus (PDW/HSTX); (Conflicted with a common variable name in FTOOLS); Nov 1997: If g77Fortran defined, also define f2cFortran (PDW/HSTX); Feb 1998: Let VMS see the NUM_ELEMS code. Lets programs treat; single strings as vectors with single elements; Nov 1999: If macintoxh defined, also define f2cfortran (for Mac OS-X); Apr 2000: If WIN32 defined, also define PowerStationFortran and; VISUAL_CPLUSPLUS (Visual C++); Jun 2000: If __GNUC__ and linux defined, also define f2cFortran; (linux/gcc environment detection); Apr 2002: If __CYGWIN__ is defined, also define f2cFortran; Nov 2002: If __APPLE__ defined, also define f2cfortran (for Mac OS-X). Nov 2003: If __INTEL_COMPILER or INTEL_COMPILER defined, also define; f2cFortran (KMCCARTY); Dec 2005: If f2cFortran is defined, enforce REAL functions in FORTRAN; returning ""double"" in C. This was one of the items on; Burkhard's TODO list. (KMCCARTY); Dec 2005: Modifications to support 8-byte integers. (MR); USE AT YOUR OWN RISK!; Feb 2006 Added logic to typedef the symbol 'LONGLONG' to an appropriate; intrinsic 8-byte integer datatype (WDP); Apr 2006: Modifications to support gfortran (and g77 with -fno-f2c flag); since by default it returns ""float"" for FORTRAN REAL function.; (KMCCARTY); May 2008: Revert commenting out of ""extern"" in COMMON_BLOCK_DEF macro.; Add braces around do-nothing "";"" in 3 empty while blocks to; get rid of compiler w",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/montecarlo/eg/inc/cfortran.h:94,ACCESS,ACCESS,94,montecarlo/eg/inc/cfortran.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/montecarlo/eg/inc/cfortran.h,1,['ACCESS'],['ACCESS']
Security,"/*; The 'zlib' compression library provides in-memory compression and; decompression functions, including integrity checks of the uncompressed data.; This version of the library supports only one compression method (deflation); but other algorithms will be added later and will have the same stream; interface. Compression can be done in a single step if the buffers are large enough,; or can be done by repeated calls of the compression function. In the latter; case, the application must provide more input and/or consume the output; (providing more output space) before each call. The compressed data format used by default by the in-memory functions is; the zlib format, which is a zlib wrapper documented in RFC 1950, wrapped; around a deflate stream, which is itself documented in RFC 1951. The library also supports reading and writing files in gzip (.gz) format; with an interface similar to that of stdio using the functions that start; with ""gz"". The gzip format is different from the zlib format. gzip is a; gzip wrapper, documented in RFC 1952, wrapped around a deflate stream. This library can optionally read and write gzip streams in memory as well. The zlib format was designed to be compact and fast for use in memory; and on communications channels. The gzip format was designed for single-; file compression on file systems, has a larger header than zlib to maintain; directory information, and uses a different, slower check method than zlib. The library does not install any signal handler. The decoder checks; the consistency of the compressed data, so the library should never crash; even in case of corrupted input.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:106,integrity,integrity,106,builtins/zlib/zlib.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h,1,['integrity'],['integrity']
Security,"/*; The 'zlib' compression library provides in-memory compression and; decompression functions, including integrity checks of the uncompressed; data. This version of the library supports only one compression method; (deflation) but other algorithms will be added later and will have the same; stream interface. Compression can be done in a single step if the buffers are large; enough (for example if an input file is mmap'ed), or can be done by; repeated calls of the compression function. In the latter case, the; application must provide more input and/or consume the output; (providing more output space) before each call. The compressed data format used by default by the in-memory functions is; the zlib format, which is a zlib wrapper documented in RFC 1950, wrapped; around a deflate stream, which is itself documented in RFC 1951. The library also supports reading and writing files in gzip (.gz) format; with an interface similar to that of stdio using the functions that start; with ""gz"". The gzip format is different from the zlib format. gzip is a; gzip wrapper, documented in RFC 1952, wrapped around a deflate stream. This library can optionally read and write gzip streams in memory as well. The zlib format was designed to be compact and fast for use in memory; and on communications channels. The gzip format was designed for single-; file compression on file systems, has a larger header than zlib to maintain; directory information, and uses a different, slower check method than zlib. The library does not install any signal handler. The decoder checks; the consistency of the compressed data, so the library should never; crash even in case of corrupted input.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:106,integrity,integrity,106,graf2d/asimage/src/libAfterImage/zlib/zlib.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h,1,['integrity'],['integrity']
Security,"/*; This function returns two values, one in the lower 16 bits of the return; value, and the other in the remaining upper bits, obtained by shifting the; return value down 16 bits. If the upper value is -1 and the lower value is; zero, then inflate() is currently decoding information outside of a block.; If the upper value is -1 and the lower value is non-zero, then inflate is in; the middle of a stored block, with the lower value equaling the number of; bytes from the input remaining to copy. If the upper value is not -1, then; it is the number of bits back from the current bit position in the input of; the code (literal or length/distance pair) currently being processed. In; that case the lower value is the number of bytes already emitted for that; code. A code is being processed if inflate is waiting for more input to complete; decoding of the code, or if it has completed decoding but is waiting for; more output space to write the literal or match data. inflateMark() is used to mark locations in the input data for random; access, which may be at bit positions, and to note those cases where the; output of a code may span boundaries of random access blocks. The current; location in the input stream can be determined from avail_in and data_type; as noted in the description for the Z_BLOCK flush parameter for inflate. inflateMark returns the value noted above or -1 << 16 if the provided; source stream state was inconsistent.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:1041,access,access,1041,builtins/zlib/zlib.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h,2,['access'],['access']
Security,"/*; Update a running Adler-32 checksum with the bytes buf[0..len-1] and; return the updated checksum. If buf is NULL, this function returns; the required initial value for the checksum.; An Adler-32 checksum is almost as reliable as a CRC32 but can be computed; much faster. Usage example:. uLong adler = adler32(0L, Z_NULL, 0);. while (read_buffer(buffer, length) != EOF) {; adler = adler32(adler, buffer, length);; }; if (adler != original_adler) error();; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:30,checksum,checksum,30,graf2d/asimage/src/libAfterImage/zlib/zlib.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h,4,['checksum'],['checksum']
Security,"/*; Update a running Adler-32 checksum with the bytes buf[0..len-1] and; return the updated checksum. If buf is Z_NULL, this function returns the; required initial value for the checksum. An Adler-32 checksum is almost as reliable as a CRC32 but can be computed; much faster. Usage example:. uLong adler = adler32(0L, Z_NULL, 0);. while (read_buffer(buffer, length) != EOF) {; adler = adler32(adler, buffer, length);; }; if (adler != original_adler) error();; */; /*; ZEXTERN uLong ZEXPORT adler32_combine OF((uLong adler1, uLong adler2,; z_off_t len2));. Combine two Adler-32 checksums into one. For two sequences of bytes, seq1; and seq2 with lengths len1 and len2, Adler-32 checksums were calculated for; each, adler1 and adler2. adler32_combine() returns the Adler-32 checksum of; seq1 and seq2 concatenated, requiring only adler1, adler2, and len2. Note; that the z_off_t type (like off_t) is a signed integer. If len2 is; negative, the result has no meaning or utility.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:30,checksum,checksum,30,builtins/zlib/zlib.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h,7,['checksum'],"['checksum', 'checksums']"
Security,/*; ValidateAddress();. //; // Silently do nothing if we have no user i/o buffer.; //. if (!fObject) {; return;; }; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TBranchElement.cxx:4,Validat,ValidateAddress,4,tree/tree/src/TBranchElement.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TBranchElement.cxx,1,['Validat'],['ValidateAddress']
Security,/*; \class TGenListProxy; \ingroup IO; Local optimization class. Collection proxies get copied. On copy we switch the type of the; proxy to the concrete STL type. The concrete types are optimized; for element access.; **/,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TGenCollectionProxy.cxx:209,access,access,209,io/io/src/TGenCollectionProxy.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TGenCollectionProxy.cxx,1,['access'],['access']
Security,"/*; dt->ApplyValidationSample(validationSample);; Double_t weights = dt->GetSumWeights(validationSample);; // set the initial prune strength; fPruneStrength = 1.0e-3; //! FIXME somehow make this automatic, it depends strongly on the tree structure; // better to set it too small, it will be increased automatically; fDeltaPruneStrength = 1.0e-5;; Int_t nnodes = this->CountNodes((DecisionTreeNode*)dt->GetRoot());. Bool_t forceStop = kFALSE;; Int_t errCount = 0,; lastNodeCount = nnodes;. // find the maximum prune strength that still leaves the root's daughter nodes. while ( nnodes > 1 && !forceStop ) {; fPruneStrength += fDeltaPruneStrength;; Log() << ""----------------------------------------------------"" << Endl;; FindListOfNodes((DecisionTreeNode*)dt->GetRoot());; for( UInt_t i = 0; i < fPruneSequence.size(); i++ ); fPruneSequence[i]->SetTerminal(); // prune all the nodes from the sequence; // test the quality of the pruned tree; Double_t quality = 1.0 - dt->TestPrunedTreeQuality()/weights;; fQualityMap.insert(std::make_pair<const Double_t,Double_t>(quality,fPruneStrength));. nnodes = CountNodes((DecisionTreeNode*)dt->GetRoot()); // count the number of nodes in the pruned tree. Log() << ""Prune strength : "" << fPruneStrength << Endl;; Log() << ""Had "" << lastNodeCount << "" nodes, now have "" << nnodes << Endl;; Log() << ""Quality index is: "" << quality << Endl;. if (lastNodeCount == nnodes) errCount++;; else {; errCount=0; // reset counter; if ( nnodes < lastNodeCount / 2 ) {; Log() << ""Decreasing fDeltaPruneStrength to "" << fDeltaPruneStrength/2.0; << "" because the number of nodes in the tree decreased by a factor of 2."" << Endl;; fDeltaPruneStrength /= 2.;; }; }; lastNodeCount = nnodes;; if (errCount > 20) {; Log() << ""Increasing fDeltaPruneStrength to "" << fDeltaPruneStrength*2.0; << "" because the number of nodes in the tree didn't change."" << Endl;; fDeltaPruneStrength *= 2.0;; }; if (errCount > 40) {; Log() << ""Having difficulty determining the optimal prune strength,",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ExpectedErrorPruneTool.cxx:30,validat,validationSample,30,tmva/tmva/src/ExpectedErrorPruneTool.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ExpectedErrorPruneTool.cxx,2,['validat'],['validationSample']
Security,"/*; xxHash - Extremely Fast Hash algorithm; Header File; Copyright (C) 2012-2016, Yann Collet. BSD 2-Clause License (http://www.opensource.org/licenses/bsd-license.php). Redistribution and use in source and binary forms, with or without; modification, are permitted provided that the following conditions are; met:. * Redistributions of source code must retain the above copyright; notice, this list of conditions and the following disclaimer.; * Redistributions in binary form must reproduce the above; copyright notice, this list of conditions and the following disclaimer; in the documentation and/or other materials provided with the; distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS; ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR; A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT; OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,; SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT; LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,; DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY; THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT; (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE; OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. You can contact the author at :; - xxHash source repository : https://github.com/Cyan4973/xxHash; */; /* based on revision d2df04efcbef7d7f6886d345861e5dfda4edacc1 Removed; * everything but a simple interface for computing XXh64. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/xxhash.h:28,Hash,Hash,28,interpreter/llvm-project/llvm/include/llvm/Support/xxhash.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/xxhash.h,1,['Hash'],['Hash']
Security,"/*===---- stdarg.h - Variable argument handling ----------------------------===; *; * Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; * See https://llvm.org/LICENSE.txt for license information.; * SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; *; *===-----------------------------------------------------------------------===; */; /*; * This header is designed to be included multiple times. If any of the __need_; * macros are defined, then only that subset of interfaces are provided. This; * can be useful for POSIX headers that need to not expose all of stdarg.h, but; * need to use some of its interfaces. Otherwise this header provides all of; * the expected interfaces.; *; * When clang modules are enabled, this header is a textual header. It ignores; * its header guard so that multiple submodules can export its interfaces.; * Take module SM with submodules A and B, whose headers both include stdarg.h; * When SM.A builds, __STDARG_H will be defined. When SM.B builds, the; * definition from SM.A will leak when building without local submodule; * visibility. stdarg.h wouldn't include any of its implementation headers, and; * SM.B wouldn't import any of the stdarg modules, and SM.B's `export *`; * wouldn't export any stdarg interfaces as expected. However, since stdarg.h; * ignores its header guard when building with modules, it all works as; * expected.; *; * When clang modules are not enabled, the header guards can function in the; * normal simple fashion.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/stdarg.h:585,expose,expose,585,interpreter/llvm-project/clang/lib/Headers/stdarg.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/stdarg.h,1,['expose'],['expose']
Security,"/*===---- stddef.h - Basic type definitions --------------------------------===; *; * Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; * See https://llvm.org/LICENSE.txt for license information.; * SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; *; *===-----------------------------------------------------------------------===; */; /*; * This header is designed to be included multiple times. If any of the __need_; * macros are defined, then only that subset of interfaces are provided. This; * can be useful for POSIX headers that need to not expose all of stddef.h, but; * need to use some of its interfaces. Otherwise this header provides all of; * the expected interfaces.; *; * When clang modules are enabled, this header is a textual header. It ignores; * its header guard so that multiple submodules can export its interfaces.; * Take module SM with submodules A and B, whose headers both include stddef.h; * When SM.A builds, __STDDEF_H will be defined. When SM.B builds, the; * definition from SM.A will leak when building without local submodule; * visibility. stddef.h wouldn't include any of its implementation headers, and; * SM.B wouldn't import any of the stddef modules, and SM.B's `export *`; * wouldn't export any stddef interfaces as expected. However, since stddef.h; * ignores its header guard when building with modules, it all works as; * expected.; *; * When clang modules are not enabled, the header guards can function in the; * normal simple fashion.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/stddef.h:585,expose,expose,585,interpreter/llvm-project/clang/lib/Headers/stddef.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/stddef.h,1,['expose'],['expose']
Security,/*AccessCheckingSFINAE=*/,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaConcept.cpp:2,Access,AccessCheckingSFINAE,2,interpreter/llvm-project/clang/lib/Sema/SemaConcept.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaConcept.cpp,4,['Access'],['AccessCheckingSFINAE']
Security,/*AccessSpecifier=*/,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseExprCXX.cpp:2,Access,AccessSpecifier,2,interpreter/llvm-project/clang/lib/Parse/ParseExprCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseExprCXX.cpp,1,['Access'],['AccessSpecifier']
Security,/*AccessTy*/,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:2,Access,AccessTy,2,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,2,['Access'],['AccessTy']
Security,/*Accessed*/,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:2,Access,Accessed,2,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,5,['Access'],['Accessed']
Security,/*HashLoc*/,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx:2,Hash,HashLoc,2,core/dictgen/src/rootcling_impl.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx,6,['Hash'],['HashLoc']
Security,/*InjectedCondition*/,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp:2,Inject,InjectedCondition,2,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp,1,['Inject'],['InjectedCondition']
Security,/*ValidateAllVtablesHaveTypeInfos=*/,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/LTO/LTOCodeGenerator.cpp:2,Validat,ValidateAllVtablesHaveTypeInfos,2,interpreter/llvm-project/llvm/lib/LTO/LTOCodeGenerator.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/LTO/LTOCodeGenerator.cpp,2,['Validat'],['ValidateAllVtablesHaveTypeInfos']
Security,/*ValidateDiagnosticOptions=*/,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/CIFactory.cpp:2,Validat,ValidateDiagnosticOptions,2,interpreter/cling/lib/Interpreter/CIFactory.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/CIFactory.cpp,4,['Validat'],['ValidateDiagnosticOptions']
Security,/*ValidateSystemInputs*/,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/FrontendActions.cpp:2,Validat,ValidateSystemInputs,2,interpreter/llvm-project/clang/lib/Frontend/FrontendActions.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/FrontendActions.cpp,1,['Validat'],['ValidateSystemInputs']
Security,/*We validate our own chains*/,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp:5,validat,validate,5,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,1,['validat'],['validate']
Security,/*checksum*/,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:2,checksum,checksum,2,builtins/zstd/compress/zstd_compress.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c,4,['checksum'],['checksum']
Security,"/*else if(auto p = get<RooFitResult>(); p) {; // look for datasets in workspace that match the fit result name after hashing; for(auto& _d : xRooNode(*_ws,*this).datasets()) {; auto _hash = RooAbsTree::nameToHash(_d->get()->GetName());; if (TString::Format(""%d;%d"",_hash.first,_hash.second) == p->GetTitle()) {; out.emplace_back(std::make_shared<xRooNode>(_d->fComp, *this));; }; }; }*/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:117,hash,hashing,117,roofit/xroofit/src/xRooNode.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx,1,['hash'],['hashing']
Security,/*injected-class-name used as template name*/,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp:2,inject,injected-class-name,2,interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp,3,['inject'],['injected-class-name']
Security,"// ""+ 1"" for the space after access qualifier.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:29,access,access,29,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,1,['access'],['access']
Security,"// ""Index"" registers: any general register that can be used as an; // index in a base+index memory access.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/X86.cpp:99,access,access,99,interpreter/llvm-project/clang/lib/Basic/Targets/X86.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/X86.cpp,1,['access'],['access']
Security,"// ""Windows Secure API""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Errno.cpp:12,Secur,Secure,12,interpreter/llvm-project/llvm/lib/Support/Errno.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Errno.cpp,1,['Secur'],['Secure']
Security,"// ""linking"" section requires DATA section in order to validate data symbols",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/Wasm.h:55,validat,validate,55,interpreter/llvm-project/llvm/include/llvm/Object/Wasm.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/Wasm.h,1,['validat'],['validate']
Security,"// ""newValue"" indicates the ""newValue"" argument for a setter.; // There should only be one 'newValue', but it's only significant for; // subscript accessors, so don't error right away.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclAttr.cpp:147,access,accessors,147,interpreter/llvm-project/clang/lib/Sema/SemaDeclAttr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclAttr.cpp,1,['access'],['accessors']
Security,"// #16249: range based loop and the tree has zero entries; // as well as analogous cases.; // Getting the number of events can have a cost, for example in; // case of chains of remote files accessible with high latency.; // However, it is reasonable to assume that if iterators are; // being compared is because an iteration is taking place,; // therefore such cost has to be paid anyway, it's just; // anticipated.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/inc/TTreeReader.h:190,access,accessible,190,tree/treeplayer/inc/TTreeReader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/inc/TTreeReader.h,1,['access'],['accessible']
Security,"// #define R__CHECK_COLLECTION_MULTI_ACCESS; // When R__CHECK_COLLECTION_MULTI_ACCESS is turned on (defined),; // the normal (not locked) ROOT TCollections are instrumented with a; // pseudo read-write lock which does not halt the execution but detects; // and report concurrent access to the same collections.; // Multiple readers are allowed.; // Multiple concurrent writer is reported as a Conflict; // Readers access while a write is running is reported as Conflict; // Re-entrant writing call by the same Writer thread are allowed.; // Entering a writing section by a single Reader thread is allowed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TCollection.h:279,access,access,279,core/cont/inc/TCollection.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TCollection.h,2,['access'],['access']
Security,"// #ifdef LLVM_HAVE_TFLITE; /// The score injection pass.; /// This pass calculates the score for a function and inserts it in the log, but; /// this happens only in development mode. It's a no-op otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MLRegAllocEvictAdvisor.cpp:42,inject,injection,42,interpreter/llvm-project/llvm/lib/CodeGen/MLRegAllocEvictAdvisor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MLRegAllocEvictAdvisor.cpp,1,['inject'],['injection']
Security,"// $Id $; //; // Tests that each form of vector has all the properties that stem from; // owning and forwarding to a coordinates instance, and that they give proper; // results.; //; // 3D vectors have:; //; // accessors x(), y(), z(), r(), theta(), phi(), rho(), eta(); //; // =================================================================",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/coordinates3D.cxx:211,access,accessors,211,math/genvector/test/coordinates3D.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/coordinates3D.cxx,1,['access'],['accessors']
Security,// ':' + Length + Address + Type + Checksum with empty data ':LLAAAATTCC',MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.cpp:35,Checksum,Checksum,35,interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.cpp,1,['Checksum'],['Checksum']
Security,"// 'APValue::Profile' uses pointer values to make hash for LValue and; // MemberPointer, but they differ from one compiler invocation to another.; // So, handle them explicitly here.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ODRHash.cpp:50,hash,hash,50,interpreter/llvm-project/clang/lib/AST/ODRHash.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ODRHash.cpp,1,['hash'],['hash']
Security,// 'Node' in this context names the injected-class-name of the base class.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/ItaniumManglingCanonicalizer.cpp:36,inject,injected-class-name,36,interpreter/llvm-project/llvm/lib/ProfileData/ItaniumManglingCanonicalizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/ItaniumManglingCanonicalizer.cpp,1,['inject'],['injected-class-name']
Security,// 'using Dependent::foo;' can resolve to a template name.; // 'using typename Dependent::foo;' cannot (not even if 'foo' is an; // injected-class-name).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp:132,inject,injected-class-name,132,interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp,1,['inject'],['injected-class-name']
Security,// (2) Add to the worklist all bitcast and getelementptr instructions used by; // memory accesses requiring a scalar use. The pointer operands of loads and; // stores will be scalar as long as the memory accesses is not a gather or; // scatter operation. The value operand of a store will remain scalar if the; // store is scalarized.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:89,access,accesses,89,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,2,['access'],['accesses']
Security,"// (Re)create hash tables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooLinkedList.cxx:14,hash,hash,14,roofit/roofitcore/src/RooLinkedList.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooLinkedList.cxx,1,['hash'],['hash']
Security,"// (X | C1) & C2 --> (X & C2^(C1&C2)) | (C1&C2); // NOTE: This reduces the number of bits set in the & mask, which; // can expose opportunities for store narrowing for scalars.; // NOTE: SimplifyDemandedBits should have already removed bits from C1; // that aren't set in C2. Meaning we can replace (C1&C2) with C1 in; // above, but this feels safer.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp:123,expose,expose,123,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,1,['expose'],['expose']
Security,"// ****** access methods",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/montecarlo/eg/inc/TParticleClassPDG.h:10,access,access,10,montecarlo/eg/inc/TParticleClassPDG.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/montecarlo/eg/inc/TParticleClassPDG.h,2,['access'],['access']
Security,"// ****** accessors",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/montecarlo/eg/inc/TDecayChannel.h:10,access,accessors,10,montecarlo/eg/inc/TDecayChannel.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/montecarlo/eg/inc/TDecayChannel.h,1,['access'],['accessors']
Security,"// - ""G2"" merge 2 consecutive bins along Y; /// - ""G3"" merge 3 consecutive bins along Y; /// - ""G4"" merge 4 consecutive bins along Y; /// - ""G5"" merge 5 consecutive bins along Y; /// - ""S"" sliding merge: merge n consecutive bins along Y accordingly to what Gn is given.; /// It makes sense when used together with a Gn option; ///; /// The generated histograms are returned by adding them to arr, if arr is not NULL.; /// arr's SetOwner() is called, to signal that it is the user's responsibility to; /// delete the histograms, possibly by deleting the array.; /// ~~~ {.cpp}; /// TObjArray aSlices;; /// h2->FitSlicesY(func, 0, -1, 0, ""QNR"", &aSlices);; /// ~~~; /// will already delete the histograms once aSlice goes out of scope. aSlices will; /// contain the histogram for the i-th parameter of the fit function at aSlices[i];; /// aSlices[n] (n being the number of parameters) contains the chi2 distribution of; /// the fits.; ///; /// If arr is NULL, the generated histograms are added to the list of objects; /// in the current directory. It is the user's responsibility to delete; /// these histograms.; ///; /// Example: Assume a 2-d histogram h2; /// ~~~ {.cpp}; /// Root > h2->FitSlicesY(); produces 4 TH1D histograms; /// with h2_0 containing parameter 0(Constant) for a Gaus fit; /// of each bin in X projected along Y; /// with h2_1 containing parameter 1(Mean) for a gaus fit; /// with h2_2 containing parameter 2(StdDev) for a gaus fit; /// with h2_chi2 containing the chisquare/number of degrees of freedom for a gaus fit; ///; /// Root > h2->FitSlicesY(0,15,22,10);; /// same as above, but only for bins 15 to 22 along X; /// and only for bins in X for which the corresponding projection; /// along Y has more than cut bins filled.; /// ~~~; ///; /// NOTE: To access the generated histograms in the current directory, do eg:; /// ~~~ {.cpp}; /// TH1D *h2_1 = (TH1D*)gDirectory->Get(""h2_1"");; /// ~~~; ///; /// A complete example of this function is given in tutorial:fitslicesy.C.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx:2572,access,access,2572,hist/hist/src/TH2.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx,1,['access'],['access']
Security,"// - class member access (5.2.5),",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Expr.cpp:18,access,access,18,interpreter/llvm-project/clang/lib/AST/Expr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Expr.cpp,1,['access'],['access']
Security,"// - if T is a (possibly cv-qualified) class type (Clause 9), the default; // constructor for T is called (and the initialization is ill-formed if; // T has no accessible default constructor);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp:160,access,accessible,160,interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp,1,['access'],['accessible']
Security,"// - if _RangeT is a class type, the unqualified-ids begin and end are; // looked up in the scope of class _RangeT as if by class member access; // lookup (3.4.5), and if either (or both) finds at least one; // declaration, begin-expr and end-expr are __range.begin() and; // __range.end(), respectively;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaStmt.cpp:137,access,access,137,interpreter/llvm-project/clang/lib/Sema/SemaStmt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaStmt.cpp,1,['access'],['access']
Security,"// - if e is an unparenthesized id-expression or an unparenthesized class; // member access (5.2.5), decltype(e) is the type of the entity named; // by e. If there is no such entity, or if e names a set of overloaded; // functions, the program is ill-formed;; //; // We apply the same rules for Objective-C ivar and property references.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaType.cpp:85,access,access,85,interpreter/llvm-project/clang/lib/Sema/SemaType.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaType.cpp,1,['access'],['access']
Security,"// -- A collection was stored in a collection, we choose not to split it.; // Note: Splitting it would require extending TTreeFormula; // to understand how to access it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TBranchElement.cxx:159,access,access,159,tree/tree/src/TBranchElement.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TBranchElement.cxx,1,['access'],['access']
Security,// -- If e is a class member access expression [...] naming a non-static; // data member...,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:29,access,access,29,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['access'],['access']
Security,"// -- If e is a class member access expression naming a static data member,; // ...",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:29,access,access,29,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['access'],['access']
Security,"// -- The interleave heuristics --; // We interleave the loop in order to expose ILP and reduce the loop overhead.; // There are many micro-architectural considerations that we can't predict; // at this level. For example, frontend pressure (on decode or fetch) due to; // code size, or the number and capabilities of the execution ports.; //; // We use the following heuristics to select the interleave count:; // 1. If the code has reductions, then we interleave to break the cross; // iteration dependency.; // 2. If the loop is really small, then we interleave to reduce the loop; // overhead.; // 3. We don't interleave if we think that we will spill registers to memory; // due to the increased register pressure.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:74,expose,expose,74,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,1,['expose'],['expose']
Security,"// -- The return type is the class template specialization designated by; // the template-name and template arguments corresponding to the; // template parameters obtained from the class template.; //; // We use the injected-class-name type of the primary template instead.; // This has the convenient property that it is different from any type that; // the user can write in a deduction-guide (because they cannot enter the; // context of the template), so implicit deduction guides can never collide; // with explicit ones.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp:216,inject,injected-class-name,216,interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp,1,['inject'],['injected-class-name']
Security,"// --- Access Functions ---",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/periodic/NdbParticle.h:7,Access,Access,7,test/periodic/NdbParticle.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/NdbParticle.h,2,['Access'],['Access']
Security,"// --- Access functions ---",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/periodic/NdbMaterial.h:7,Access,Access,7,test/periodic/NdbMaterial.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/NdbMaterial.h,3,['Access'],['Access']
Security,"// --- Internal stuff that must be public so that CINT can access it ---; // CINT constructor interface",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFactoryWSTool.h:59,access,access,59,roofit/roofitcore/inc/RooFactoryWSTool.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFactoryWSTool.h,1,['access'],['access']
Security,"// ---- first validation: simple(st) possible chi2 test; // count number of empty bins",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDF.cxx:14,validat,validation,14,tmva/tmva/src/PDF.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDF.cxx,1,['validat'],['validation']
Security,"// ------ Individual element access, in various coordinate systems ------; /**; Dimension; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/genvector/inc/Math/GenVector/DisplacementVector2D.h:29,access,access,29,math/genvector/inc/Math/GenVector/DisplacementVector2D.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genvector/inc/Math/GenVector/DisplacementVector2D.h,4,['access'],['access']
Security,"// ------ Individual element access, in various coordinate systems ------; /**; dimension; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/genvector/inc/Math/GenVector/LorentzVector.h:29,access,access,29,math/genvector/inc/Math/GenVector/LorentzVector.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genvector/inc/Math/GenVector/LorentzVector.h,1,['access'],['access']
Security,"// ------ Set, Get, and access coordinate data ------; /**; Retrieve a const reference to the coordinates object; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/genvector/inc/Math/GenVector/LorentzVector.h:24,access,access,24,math/genvector/inc/Math/GenVector/LorentzVector.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genvector/inc/Math/GenVector/LorentzVector.h,1,['access'],['access']
Security,"// ------ Set, Get, and access coordinate data ------; /**; Retrieve a copy of the coordinates object; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/genvector/inc/Math/GenVector/DisplacementVector2D.h:24,access,access,24,math/genvector/inc/Math/GenVector/DisplacementVector2D.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genvector/inc/Math/GenVector/DisplacementVector2D.h,2,['access'],['access']
Security,"// --------- Coordinates and Coordinate-like Scalar properties -------------; // 4-D Cylindrical eta coordinate accessors",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/genvector/inc/Math/GenVector/PtEtaPhiE4D.h:112,access,accessors,112,math/genvector/inc/Math/GenVector/PtEtaPhiE4D.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genvector/inc/Math/GenVector/PtEtaPhiE4D.h,2,['access'],['accessors']
Security,"// --------- Coordinates and Coordinate-like Scalar properties -------------; // cartesian (Minkowski)coordinate accessors",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/genvector/inc/Math/GenVector/PxPyPzE4D.h:113,access,accessors,113,math/genvector/inc/Math/GenVector/PxPyPzE4D.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genvector/inc/Math/GenVector/PxPyPzE4D.h,2,['access'],['accessors']
Security,"// ---------- event accessors ------------------------------------------------; // returns reference to data set; // NOTE: this DataSet is the ""original"" dataset, i.e. the one seen by ALL Classifiers WITHOUT transformation",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h:20,access,accessors,20,tmva/tmva/inc/TMVA/MethodBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h,1,['access'],['accessors']
Security,"// ---------- private accessors ---------------------------------------------; // reset required for RootFinder",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h:22,access,accessors,22,tmva/tmva/inc/TMVA/MethodBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h,1,['access'],['accessors']
Security,"// ---------- protected accessors -------------------------------------------; //TDirectory* LocalTDir() const { return Data().LocalRootDir(); }; // weight file name and directory (given by global config variable)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h:24,access,accessors,24,tmva/tmva/inc/TMVA/MethodBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h,1,['access'],['accessors']
Security,"// ---------- protected event and tree accessors -----------------------------; // names of input variables (if the original names are expressions, they are; // transformed into regexps)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h:39,access,accessors,39,tmva/tmva/inc/TMVA/MethodBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h,1,['access'],['accessors']
Security,"// ---------- public accessors -----------------------------------------------; // classifier naming (a lot of names ... aren't they ;-)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h:21,access,accessors,21,tmva/tmva/inc/TMVA/MethodBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h,1,['access'],['accessors']
Security,// --internal=integrity,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVOptions.h:14,integrity,integrity,14,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVOptions.h,1,['integrity'],['integrity']
Security,"// -1 means automatic determination of the prune strength using a validation sample",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDT.cxx:66,validat,validation,66,tmva/tmva/src/MethodDT.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDT.cxx,1,['validat'],['validation']
Security,// -fhosted is default.; // TODO: Audit uses of KernelOrKext and see where it'd be more appropriate to; // use Freestanding.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:34,Audit,Audit,34,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,1,['Audit'],['Audit']
Security,"// -fno-pic sets dso_local on a function declaration to allow direct; // accesses when taking its address (similar to a data symbol). If the; // function is not defined in the executable, a canonical PLT entry will be; // needed at link time. -fno-direct-access-external-data can avoid the; // canonical PLT entry. We don't generalize this condition to -fpie/-fpic as; // it could just cause trouble without providing perceptible benefits.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:73,access,accesses,73,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,2,['access'],"['access-external-data', 'accesses']"
Security,"// -fsanitize=function and -fsanitize=kcfi instrument indirect function calls; // to load a type hash before the function label. Ensure functions are aligned; // by a least 4 to avoid unaligned access, which is especially important for; // -mno-unaligned-access.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineFunction.cpp:97,hash,hash,97,interpreter/llvm-project/llvm/lib/CodeGen/MachineFunction.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineFunction.cpp,3,"['access', 'hash']","['access', 'hash']"
Security,"// -fsanitize=function and -fsanitize=kcfi instrument indirect function; // calls to load a type hash before the function label. Therefore, an; // execute-only target doesn't support the function and kcfi sanitizers.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp:97,hash,hash,97,interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,2,"['hash', 'sanitiz']","['hash', 'sanitizers']"
Security,"// -mno-unaligned-access is default, unless -munaligned-access is specified.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Arch/RISCV.cpp:18,access,access,18,interpreter/llvm-project/clang/lib/Driver/ToolChains/Arch/RISCV.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Arch/RISCV.cpp,2,['access'],['access']
Security,"// ... [accessible, implied by other rules] base class of E.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp:8,access,accessible,8,interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,1,['access'],['accessible']
Security,"// ... and file access",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:16,access,access,16,core/base/src/TSystem.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx,1,['access'],['access']
Security,// ... and the maximum offset we may need to reach into the; // caller's frame to access the save area or stack arguments.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZFrameLowering.cpp:82,access,access,82,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZFrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZFrameLowering.cpp,1,['access'],['access']
Security,"// ... but make sure that is not local or that a remote-like connection; // is forced. Treat it as local if:; // i) the url points to the localhost, the file will be opened in; // readonly mode and the current user has read access;; // ii) the specified user is equal to the current user then open local; // TFile.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TFile.cxx:224,access,access,224,io/io/src/TFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TFile.cxx,1,['access'],['access']
Security,"// ... or access Parameter by Index",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/MnSim/DemoGaussSim.cxx:10,access,access,10,math/minuit2/test/MnSim/DemoGaussSim.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/MnSim/DemoGaussSim.cxx,1,['access'],['access']
Security,// ...and the access stride is less than the cache line size.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopCacheAnalysis.cpp:14,access,access,14,interpreter/llvm-project/llvm/lib/Analysis/LoopCacheAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopCacheAnalysis.cpp,1,['access'],['access']
Security,"// ...but also want the values accessible from MnPrint scope for convenience",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnPrint.h:31,access,accessible,31,math/minuit2/inc/Minuit2/MnPrint.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnPrint.h,1,['access'],['accessible']
Security,"// ...but instead we use `<filename>/<treename>` as a sample ID (cannot; // change this easily because of backward compatibility: the sample ID; // is exposed to users via RSampleInfo and DefinePerSample).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RLoopManager.cxx:151,expose,exposed,151,tree/dataframe/src/RLoopManager.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RLoopManager.cxx,1,['expose'],['exposed']
Security,// ...or a list of access scopes.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Verifier.cpp:19,access,access,19,interpreter/llvm-project/llvm/lib/IR/Verifier.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Verifier.cpp,1,['access'],['access']
Security,// .gnu.hash section,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFTypes.h:8,hash,hash,8,interpreter/llvm-project/llvm/include/llvm/Object/ELFTypes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFTypes.h,1,['hash'],['hash']
Security,// .gnu.hash section is not compatible with the MIPS target,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/OHOS.cpp:8,hash,hash,8,interpreter/llvm-project/clang/lib/Driver/ToolChains/OHOS.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/OHOS.cpp,1,['hash'],['hash']
Security,// 1 bit: DisableSplitLTOUnit flag.; // Set on per module indexes. It is up to the client to validate; // the consistency of this flag across modules being linked.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/ModuleSummaryIndex.cpp:93,validat,validate,93,interpreter/llvm-project/llvm/lib/IR/ModuleSummaryIndex.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/ModuleSummaryIndex.cpp,1,['validat'],['validate']
Security,"// 1) OptSize takes precedence over all other options, i.e. if this is set,; // don't look at hints or options, and don't request a scalar epilogue.; // (For PGSO, as shouldOptimizeForSize isn't currently accessible from; // LoopAccessInfo (due to code dependency and not being able to reliably get; // PSI/BFI from a loop analysis under NPM), we cannot suppress the collection; // of strides in LoopAccessInfo::analyzeLoop() and vectorize without; // versioning when the vectorization is forced, unlike hasOptSize. So revert; // back to the old way and vectorize with versioning when forced. See D81345.)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:205,access,accessible,205,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,1,['access'],['accessible']
Security,"// 100 - uses all events in training set for validation -> error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/Method/TestMethodDNNValidationSize.cxx:45,validat,validation,45,tmva/tmva/test/Method/TestMethodDNNValidationSize.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/Method/TestMethodDNNValidationSize.cxx,1,['validat'],['validation']
Security,// 12 byte accessing via ds_read/write_b96 require 16-byte alignment on; // gfx8 and older.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp:11,access,accessing,11,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp,1,['access'],['accessing']
Security,"// 128-bit system register accesses; // lo64, hi64, chain = MRRS(chain, sysregname)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.h:27,access,accesses,27,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.h,1,['access'],['accesses']
Security,"// 16 byte accessing via ds_read/write_b128 require 16-byte alignment on; // gfx8 and older, but we can do a 8 byte aligned, 16 byte access in a; // single operation using ds_read2/write2_b64.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp:11,access,accessing,11,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp,2,['access'],"['access', 'accessing']"
Security,"// 2D graphs are named objects in a THashList.; // We must update the hashlist if we change the name",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2D.cxx:70,hash,hashlist,70,hist/hist/src/TGraph2D.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph2D.cxx,2,['hash'],['hashlist']
Security,// 32-bit ELF always uses a small code model toc access.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp:49,access,access,49,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,1,['access'],['access']
Security,// 32-bit SVR4 ABI access everything as got-indirect.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp:19,access,access,19,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,1,['access'],['access']
Security,"// 32-bit extract of a 64-bit value is just access of a subregister, so free.; // TODO: Cost of 0 hits assert, though it's not clear it's what we really; // want.; // TODO: 32-bit insert to a 64-bit SGPR may incur a non-free copy due to SGPR; // alignment restrictions, but this probably isn't important.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPURegisterBankInfo.cpp:44,access,access,44,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPURegisterBankInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPURegisterBankInfo.cpp,1,['access'],['access']
Security,"// 32-bit private, local, and region pointers. 64-bit global, constant and; // flat. 160-bit non-integral fat buffer pointers that include a 128-bit; // buffer descriptor and a 32-bit offset, which are indexed by 32-bit values; // (address space 7), and 128-bit non-integral buffer resourcees (address; // space 8) which cannot be non-trivilally accessed by LLVM memory operations; // like getelementptr.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUTargetMachine.cpp:346,access,accessed,346,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUTargetMachine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUTargetMachine.cpp,1,['access'],['accessed']
Security,"// 4 KiB; // For each block, a SHA256 hash (256 bits, 32 bytes) is written to; // the CodeSignature section.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOLayoutBuilder.h:38,hash,hash,38,interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOLayoutBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOLayoutBuilder.h,1,['hash'],['hash']
Security,"// 8 byte accessing via ds_read/write_b64 require 8-byte alignment, but we; // can do a 4 byte aligned, 8 byte access in a single operation using; // ds_read2/write2_b32 with adjacent offsets.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp:10,access,accessing,10,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp,2,['access'],"['access', 'accessing']"
Security,// <#Frame index + const>; // Allow folding offsets bigger than 63 so the frame pointer can be used; // directly instead of copying it around by adjusting and restoring it for; // each access.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AVR/AVRISelDAGToDAG.cpp:185,access,access,185,interpreter/llvm-project/llvm/lib/Target/AVR/AVRISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AVR/AVRISelDAGToDAG.cpp,1,['access'],['access']
Security,// <decltype> ::= Dt <expression> E # decltype of an id-expression or class member access (C++0x); // ::= DT <expression> E # decltype of an expression (C++0x),MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h:83,access,access,83,interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h,1,['access'],['access']
Security,"// === String encodings ===; //; // JSON strings are character sequences (not byte sequences like std::string).; // We need to know the encoding, and for simplicity only support UTF-8.; //; // - When parsing, invalid UTF-8 is a syntax error like any other; //; // - When creating Values from strings, callers must ensure they are UTF-8.; // with asserts on, invalid UTF-8 will crash the program; // with asserts off, we'll substitute the replacement character (U+FFFD); // Callers can use json::isUTF8() and json::fixUTF8() for validation.; //; // - When retrieving strings from Values (e.g. asString()), the result will; // always be valid UTF-8.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h:528,validat,validation,528,interpreter/llvm-project/llvm/include/llvm/Support/JSON.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h,1,['validat'],['validation']
Security,"// =============================================================================; // If the function had a byval struct ptr arg, say foo(%struct.x* byval %d),; // and we can't guarantee that the only accesses are loads,; // then add the following instructions to the first basic block:; //; // %temp = alloca %struct.x, align 8; // %tempd = addrspacecast %struct.x* %d to %struct.x addrspace(101)*; // %tv = load %struct.x addrspace(101)* %tempd; // store %struct.x %tv, %struct.x* %temp, align 8; //; // The above code allocates some space in the stack and copies the incoming; // struct from param space to local space.; // Then replace all occurrences of %d by %temp.; //; // In case we know that all users are GEPs or Loads, replace them with the same; // ones in parameter AS, so we can access them using ld.param.; // =============================================================================; // Replaces the \p OldUser instruction with the same in parameter AS.; // Only Load and GEP are supported.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXLowerArgs.cpp:200,access,accesses,200,interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXLowerArgs.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXLowerArgs.cpp,2,['access'],"['access', 'accesses']"
Security,"// ==============================================================================================; /** \class RTFileProvider; \ingroup rbrowser. Provides access to ROOT files with extension ""root""; Other extensions can be registered; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/browsable/src/TDirectoryElement.cxx:154,access,access,154,gui/browsable/src/TDirectoryElement.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/browsable/src/TDirectoryElement.cxx,1,['access'],['access']
Security,"// @(#)root/auth:$Id$; // Author: G. Ganis 19/03/2003; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; //////////////////////////////////////////////////////////////////////////; // //; // THostAuth //; // //; // Contains details about host-specific authentication methods and the //; // result of their application. //; // Used by TAuthenticate. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/THostAuth.cxx:560,authenticat,authentication,560,net/auth/src/THostAuth.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/THostAuth.cxx,1,['authenticat'],['authentication']
Security,"// @(#)root/auth:$Id$; // Author: Gerardo Ganis 08/07/05; /*************************************************************************; * Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; //////////////////////////////////////////////////////////////////////////; // //; // TRootAuth //; // //; // TVirtualAuth implementation based on the old client authentication //; // code. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/TRootAuth.cxx:578,authenticat,authentication,578,net/auth/src/TRootAuth.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/TRootAuth.cxx,1,['authenticat'],['authentication']
Security,"// @(#)root/auth:$Id$; // Author: Gerri Ganis 19/1/2004; /*************************************************************************; * Copyright (C) 1995-2003, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; //////////////////////////////////////////////////////////////////////////; // //; // DaemonUtils //; // //; // This file defines wrappers to client utils calls used by server //; // authentication daemons //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/DaemonUtils.cxx:598,authenticat,authentication,598,net/rpdutils/src/DaemonUtils.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/DaemonUtils.cxx,1,['authenticat'],['authentication']
Security,"// @(#)root/auth:$Id: f2cfa663e232707e1201467b5805ff1d13575326 $; // Author: Fons Rademakers 26/11/2000; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; //////////////////////////////////////////////////////////////////////////; // //; // TAuthenticate //; // //; // An authentication module for ROOT based network services, like rootd //; // and proofd. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/TAuthenticate.cxx:580,authenticat,authentication,580,net/auth/src/TAuthenticate.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/TAuthenticate.cxx,1,['authenticat'],['authentication']
Security,"// @(#)root/base:$Id$; // Author: Fons Rademakers 04/08/95; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TString; \ingroup Base. Basic string class. Cannot be stored in a TCollection... use TObjString instead. The underlying string is stored as a char* that can be accessed via; TString::Data().; TString provides Short String Optimization (SSO) so that short; strings (<15 on 64-bit and <11 on 32-bit) are contained in the; TString internal data structure without the need for mallocing the; required space. Substring operations are provided by the TSubString class, which; holds a reference to the original string and its data, along with; the offset and length of the substring. To retrieve the substring; as a TString, construct a TString from it, eg:; ~~~ {.cpp}; root [0] TString s(""hello world""); root [1] TString s2( s(0,5) ); root [2] s2; (class TString)""hello""; ~~~; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx:589,access,accessed,589,core/base/src/TString.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx,1,['access'],['accessed']
Security,"// @(#)root/base:$Id$; // Author: Fons Rademakers 15/07/96; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TMemberInspector; \ingroup Base. Abstract base class for accessing the data-members of a class.; Classes derived from this class can be given as argument to the; ShowMembers() methods of ROOT classes. This feature facilitates; the writing of class browsers and inspectors.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMemberInspector.cxx:486,access,accessing,486,core/base/src/TMemberInspector.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMemberInspector.cxx,1,['access'],['accessing']
Security,"// @(#)root/base:$Id$; // Author: Fons Rademakers 29/9/2001; /*************************************************************************; * Copyright (C) 1995-2001, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TMD5; \ingroup Base. This code implements the MD5 message-digest algorithm.; The algorithm is due to Ron Rivest. This code was; written by Colin Plumb in 1993, no copyright is claimed.; This code is in the public domain; do with it what you wish. Equivalent code is available from RSA Data Security, Inc.; This code has been tested against that, and is equivalent,; except that you don't need to include two pages of legalese; with every copy. To compute the message digest of a chunk of bytes, create an; TMD5 object, call Update() as needed on buffers full of bytes, and; then call Final(), which will, optionally, fill a supplied 16-byte; array with the digest.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx:720,Secur,Security,720,core/base/src/TMD5.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx,1,['Secur'],['Security']
Security,"// @(#)root/base:$Id$; // Author: Gerardo Ganis + Fons Rademakers 15/5/2009; /*************************************************************************; * Copyright (C) 1995-2009, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TBase64; \ingroup Base. This code implements the Base64 encoding and decoding. Base64 encoded messages are typically used in authentication; protocols and to pack binary data in HTTP messages.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBase64.cxx:571,authenticat,authentication,571,core/base/src/TBase64.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBase64.cxx,1,['authenticat'],['authentication']
Security,"// @(#)root/base:$Id$; // Author: Gerhard E. Bruckner 15/07/07; /*************************************************************************; * Copyright (C) 1995-2007, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TUri; \ingroup Base. This class represents a RFC 3986 compatible URI.; \see https://doi.org/10.17487/RFC3986; It provides member functions to set and return the different; the different parts of an URI. The functionality is that of; a validating parser.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUri.cxx:668,validat,validating,668,core/base/src/TUri.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUri.cxx,1,['validat'],['validating']
Security,"// @(#)root/base:$Id$; // Author: Philippe Canal 13/05/2003; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun, Fons Rademakers and al. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TBranchProxyDirector; This class is used to 'drive' and hold a serie of TBranchProxy objects; which represent and give access to the content of TTree object.; This is intended to be used as part of a generate Selector class; which will hold the directory and its associate; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TBranchProxyDirector.cxx:553,access,access,553,tree/treeplayer/src/TBranchProxyDirector.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TBranchProxyDirector.cxx,1,['access'],['access']
Security,"// @(#)root/base:$Id$; // Author: Rene Brun 02/09/2000; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TFolder; \ingroup Base. \legacy{TFolder}. A TFolder object is a collection of objects and folders.; Folders have a name and a title and are identified in the folder hierarchy; by a ""Unix-like"" naming mechanism. The root of all folders is //root.; New folders can be dynamically added or removed to/from a folder.; The folder hierarchy can be visualized via the TBrowser. \image html base_browser.png. The Root folders hierarchy can be seen as a whiteboard where objects; are posted. Other classes/tasks can access these objects by specifying; only a string pathname. This whiteboard facility greatly improves the; modularity of an application, minimizing the class relationship problem; that penalizes large applications. Pointers are efficient to communicate between classes.; However, one has interest to minimize direct coupling between classes; in the form of direct pointers. One better uses the naming and search; service provided by the Root folders hierarchy. This makes the classes; loosely coupled and also greatly facilitates I/O operations.; In a client/server environment, this mechanism facilitates the access; to any kind of object in //root stores running on different processes. A TFolder is created by invoking the TFolder constructor. It is placed; inside an existing folder via the TFolder::AddFolder method.; One can search for a folder or an object in a folder using the FindObject; method. FindObject analyses the string passed as its argument and searches; in the hierarchy until it finds an object or folder matching the name. When a folder is deleted",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TFolder.cxx:932,access,access,932,core/base/src/TFolder.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TFolder.cxx,1,['access'],['access']
Security,"// @(#)root/base:$Id$; // Author: Rene Brun 08/12/94; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TROOT; \ingroup Base. ROOT top level object description. The TROOT object is the entry point to the ROOT system.; The single instance of TROOT is accessible via the global gROOT.; Using the gROOT pointer one has access to basically every object; created in a ROOT based program. The TROOT object is essentially a; container of several lists pointing to the main ROOT objects. The following lists are accessible from gROOT object:. ~~~ {.cpp}; gROOT->GetListOfClasses; gROOT->GetListOfColors; gROOT->GetListOfTypes; gROOT->GetListOfGlobals; gROOT->GetListOfGlobalFunctions; gROOT->GetListOfFiles; gROOT->GetListOfMappedFiles; gROOT->GetListOfSockets; gROOT->GetListOfSecContexts; gROOT->GetListOfCanvases; gROOT->GetListOfStyles; gROOT->GetListOfFunctions; gROOT->GetListOfSpecials (for example graphical cuts); gROOT->GetListOfGeometries; gROOT->GetListOfBrowsers; gROOT->GetListOfCleanups; gROOT->GetListOfMessageHandlers; ~~~. The TROOT class provides also many useful services:; - Get pointer to an object in any of the lists above; - Time utilities TROOT::Time. The ROOT object must be created as a static object. An example; of a main program creating an interactive version is shown below:. ### Example of a main program. ~~~ {.cpp}; #include ""TRint.h"". int main(int argc, char **argv); {; TRint *theApp = new TRint(""ROOT example"", &argc, argv);. // Init Intrinsics, build all windows, and enter event loop; theApp->Run();. return(0);; }; ~~~; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:569,access,accessible,569,core/base/src/TROOT.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx,3,['access'],"['access', 'accessible']"
Security,"// @(#)root/base:$Id$; // Author: Rene Brun 11/11/99; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TMessageHandler. \ingroup Base; Handle messages that might be generated by the system.; By default a handler only keeps track of the different messages; generated for a specific class. By deriving from this class and; overriding Notify() one can implement custom message handling.; In Notify() one has access to the message id and the object; generating the message. One can install more than one message; handler per class. A message handler can be removed or again; added when needed. - All Root ""Warnings"" are logged as message 1001; - All Root ""Errors"" are logged as message 1002; - All Root ""SysErrors"" are logged as message 1003; - All Root ""Fatals"" are logged as message 1004; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx:725,access,access,725,core/base/src/TMessageHandler.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx,1,['access'],['access']
Security,"// @(#)root/cont:$Id$; // Author: Fons Rademakers 10/08/95; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class THashList; \ingroup Containers; THashList implements a hybrid collection class consisting of a; hash table and a list to store TObject's. The hash table is used for; quick access and lookup of objects while the list allows the objects; to be ordered. The hash value is calculated using the value returned; by the TObject's Hash() function. Each class inheriting from TObject; can override Hash() as it sees fit.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashList.cxx:525,hash,hash,525,core/cont/src/THashList.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashList.cxx,6,"['Hash', 'access', 'hash']","['Hash', 'access', 'hash']"
Security,"// @(#)root/cont:$Id$; // Author: Fons Rademakers 11/08/95; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TClassTable; \ingroup Containers; This class registers for all classes their name, id and dictionary; function in a hash table. Classes are automatically added by the; ctor of a special init class when a global of this init class is; initialized when the program starts (see the ClassImp macro). All functions in TClassTable are thread-safe.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClassTable.cxx:545,hash,hash,545,core/cont/src/TClassTable.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClassTable.cxx,1,['hash'],['hash']
Security,"// @(#)root/cont:$Id$; // Author: Fons Rademakers 11/08/95; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TObjectTable; \ingroup Containers; This class registers all instances of TObject and its derived; classes in a hash table. The Add() and Remove() members are called; from the TObject ctor and dtor, respectively. Using the Print(); member one can see all currently active objects in the system.; Using the resource (in .rootrc): Root.ObjectStat one can toggle this; feature on or off. Using the compile option R__NOSTATS one can de-active this feature; for the entire system (for maximum performance in highly time; critical applications). The following output has been produced in a ROOT interactive session; via the command gObjectTable->Print(); ~~~ {.cpp}; class cnt on heap size total size heap size; ============================================================================; TKey 4 4 72 288 288; TClass 84 84 80 6720 6720; TDataMember 276 276 24 6624 6624; TObject 11 11 12 132 132; TMethod 1974 1974 64 126336 126336; TDataType 34 34 56 1904 1904; TList 2328 2328 36 83808 83808; TH1F 1 1 448 448 448; TText 2688 2688 56 150528 150528; TGaxis 1 0 120 120 0; TAxis 6 3 88 528 264; TBox 57 57 52 2964 2964; TLine 118 118 40 4720 4720; TWbox 1 1 56 56 56; TArrow 1 1 64 64 64; TPaveText 59 59 124 7316 7316; TPave 1 1 92 92 92; TFile 1 1 136 136 136; TCanvas 3 3 444 1332 1332; TPad 1 1 312 312 312; TContextMenu 3 3 48 144 144; TMethodArg 2166 2166 44 95304 95304; TPaveLabel 1 1 120 120 120; THtml 1 1 32 32 32; TROOT 1 0 208 208 0; TApplication 1 1 28 28 28; TFileHandler 1 1 20 20 20; TColor 163 163 40 6520 6520; TStyle 1 1 364 364 364; TRealData 117 117 28 327",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TObjectTable.cxx:540,hash,hash,540,core/cont/src/TObjectTable.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TObjectTable.cxx,1,['hash'],['hash']
Security,"// @(#)root/cont:$Id$; // Author: Fons Rademakers 12/11/95; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TMap; \ingroup Containers; TMap implements an associative array of (key,value) pairs using a; THashTable for efficient retrieval (therefore TMap does not conserve; the order of the entries). The hash value is calculated; using the value returned by the keys Hash() function and the; key comparison is done via the IsEqual() function.; Both key and value must inherit from TObject.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TMap.cxx:624,hash,hash,624,core/cont/src/TMap.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TMap.cxx,2,"['Hash', 'hash']","['Hash', 'hash']"
Security,"// @(#)root/cont:$Id$; // Author: Fons Rademakers 26/05/99; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TExMap. This class stores a (key,value) pair using an external hash.; The (key,value) are Long64_t's and therefore can contain object; pointers or any longs. The map uses an open addressing hashing; method (linear probing).; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TExMap.cxx:492,hash,hash,492,core/cont/src/TExMap.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TExMap.cxx,2,['hash'],"['hash', 'hashing']"
Security,"// @(#)root/cont:$Id$; // Author: Fons Rademakers 27/09/95; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class THashTable; \ingroup Containers; THashTable implements a hash table to store TObject's. The hash; value is calculated using the value returned by the TObject's; Hash() function. Each class inheriting from TObject can override; Hash() as it sees fit. THashTable does not preserve the insertion order of the objects.; If the insertion order is important AND fast retrieval is needed; use THashList instead.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx:486,hash,hash,486,core/cont/src/THashTable.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx,4,"['Hash', 'hash']","['Hash', 'hash']"
Security,"// @(#)root/cont:$Id$; // Author: Philippe Canal October 2013; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TViewPubDataMembers; View implementing the TList interface and giving access all the; TDictionary describing public data members in a class and all its; base classes without caching any of the TDictionary pointers. Adding to this collection directly is prohibited.; Iteration can only be done via the TIterator interfaces.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TViewPubDataMembers.cxx:502,access,access,502,core/meta/src/TViewPubDataMembers.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TViewPubDataMembers.cxx,1,['access'],['access']
Security,"// @(#)root/cont:$Id$; // Author: Philippe Canal October 2013; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TViewPubFunctions; View implementing the TList interface and giving access all the; TFunction describing public methods in a class and all its base; classes without caching any of the TFunction pointers. Adding to this collection directly is prohibited.; Iteration can only be done via the TIterator interfaces.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TViewPubFunctions.cxx:500,access,access,500,core/meta/src/TViewPubFunctions.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TViewPubFunctions.cxx,1,['access'],['access']
Security,"// @(#)root/cont:$Id$; // Author: Rene Brun 28/09/2001; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TProcessID; \ingroup Base. A TProcessID identifies a ROOT job in a unique way in time and space.; The TProcessID title consists of a TUUID object which provides a globally; unique identifier (for more see TUUID.h). A TProcessID is automatically created by the TROOT constructor.; When a TFile contains referenced objects (see TRef), the TProcessID; object is written to the file.; If a file has been written in multiple sessions (same machine or not),; a TProcessID is written for each session.; These objects are used by the class TRef to uniquely identified; any TObject pointed by a TRef. When a referenced object is read from a file (its bit kIsReferenced is set),; this object is entered into the objects table of the corresponding TProcessID.; Each TFile has a list of TProcessIDs (see TFile::fProcessIDs) also; accessible via TProcessID::fgPIDs (for all files).; When this object is deleted, it is removed from the table via the cleanup; mechanism invoked by the TObject destructor. Each TProcessID has a table (TObjArray *fObjects) that keeps track; of all referenced objects. If a referenced object has a fUniqueID set,; a pointer to this unique object may be found via fObjects->At(fUniqueID).; In the same way, when a TRef::GetObject is called, GetObject uses; its own fUniqueID to find the pointer to the referenced object.; See TProcessID::GetObjectWithID and PutObjectWithID. When a referenced object is deleted, its slot in fObjects is set to null.; //; See also TProcessUUID: a specialized TProcessID to manage the single list; of TUUIDs.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TProcessID.cxx:1243,access,accessible,1243,core/base/src/TProcessID.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TProcessID.cxx,1,['access'],['accessible']
Security,"// @(#)root/cont; // Author: Bianca-Cristina Cristescu February 2014; /*************************************************************************; * Copyright (C) 1995-2013, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TListOfEnums; A collection of TEnum objects designed for fast access given a; DeclId_t and for keep track of TEnum that were described; unloaded enum.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TListOfEnums.cxx:501,access,access,501,core/meta/src/TListOfEnums.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TListOfEnums.cxx,1,['access'],['access']
Security,"// @(#)root/cont; // Author: Bianca-Cristina Cristescu February 2014; /*************************************************************************; * Copyright (C) 1995-2013, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TListOfEnumsWithLock; A collection of TEnum objects designed for fast access given a; DeclId_t and for keep track of TEnum that were described; unloaded enum.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TListOfEnumsWithLock.cxx:509,access,access,509,core/meta/src/TListOfEnumsWithLock.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TListOfEnumsWithLock.cxx,1,['access'],['access']
Security,"// @(#)root/cont; // Author: Bianca-Cristina Cristescu March 2014; /*************************************************************************; * Copyright (C) 1995-2013, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TListOfFunctionTemplates; A collection of TFunction objects designed for fast access given a; DeclId_t and for keep track of TFunction that were described; unloaded function.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TListOfFunctionTemplates.cxx:514,access,access,514,core/meta/src/TListOfFunctionTemplates.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TListOfFunctionTemplates.cxx,1,['access'],['access']
Security,"// @(#)root/cont; // Author: Philippe Canal Aug 2013; /*************************************************************************; * Copyright (C) 1995-2013, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TListOfDataMembers; A collection of TDataMember objects designed for fast access given a; DeclId_t and for keep track of TDataMember that were described; unloaded data member.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TListOfDataMembers.cxx:497,access,access,497,core/meta/src/TListOfDataMembers.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TListOfDataMembers.cxx,1,['access'],['access']
Security,"// @(#)root/cont; // Author: Philippe Canal Aug 2013; /*************************************************************************; * Copyright (C) 1995-2013, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TListOfFunctions; A collection of TFunction objects designed for fast access given a; DeclId_t and for keep track of TFunction that were described; unloaded function.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TListOfFunctions.cxx:493,access,access,493,core/meta/src/TListOfFunctions.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TListOfFunctions.cxx,1,['access'],['access']
Security,"// @(#)root/eve7:$Id$; // Authors: Matevz Tadel and Alja Mrak Tadel: 2006, 2007, 2018; //; // Based of initial implementation of generic collection access interface; // for CMS framework and Fireworks event display by Christopher D. Jones.; /*************************************************************************; * Copyright (C) 1995-2019, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve7/inc/ROOT/REveDataCollection.hxx:148,access,access,148,graf3d/eve7/inc/ROOT/REveDataCollection.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve7/inc/ROOT/REveDataCollection.hxx,1,['access'],['access']
Security,"// @(#)root/gpad:$Id$; // Author: Nenad Buncic 20/02/96; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TControlBar; \ingroup gpad. A Control Bar is a fully user configurable tool which provides fast; access to frequently used operations. The user can choose between; buttons and drawn buttons (let's say icons) and assign to them their; own actions (let's say ROOT or C++ commands). The macro below shows an example of control bar.; To execute an item, click with the left mouse button.; To see the HELP of a button, click on the right mouse button. You have access to the last clicked button via the method; GetClicked(). For example, bar->GetClicked()->GetName(); will return the name of the last clicked button. ~~~ {.cpp}; {; // run macro from tutorials directory of ROOT!; TControlBar bar(""vertical"");; bar.AddButton(""Help to run demos"","".x demoshelp.C"",; ""Explains how to run the demos"");; bar.AddButton(""framework"", "".x graphics/framework.C"",; ""An Example of Object Oriented User Interface"");; bar.AddButton(""hsimple"", "".x hsimple.C"",; ""An Example Creating Histograms/Ntuples on File"");; bar.AddButton(""hsum"", "".x hist/hsum.C"",; ""Filling histograms and some graphics options"");; bar.AddButton(""canvas"", "".x graphics/canvas.C"",; ""Canvas and Pad Management"");; bar.AddButton(""formula1"", "".x graphics/formula1.C"",; ""Simple Formula and Functions"");; bar.AddButton(""fillrandom"", "".x hist/fillrandom.C"",; ""Histograms with Random Numbers from a Function"");; bar.AddButton(""fit1"", "".x fit/fit1.C"",; ""A Simple Fitting Example"");; bar.AddButton(""draw2dopt"", "".x hist/draw2dopt.C"",; ""Drawing Options for 2D Histograms"");; bar.AddButton(""graph"", "".x graphs/graph.C"",; ""Examples of a ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TControlBar.cxx:523,access,access,523,graf2d/gpad/src/TControlBar.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TControlBar.cxx,2,['access'],['access']
Security,"// @(#)root/gui:$Id$; // Author: G. Ganis 10/10/2005; /*************************************************************************; * Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TGPasswdDialog; \ingroup guiwidgets. Graphic dialog to enter passwords. Usage:. ```; {; // Buffer for the passwd; char pwdbuf[128]. Open the dialog box; TGPasswdDialog dialog(""My prompt"", pwdbuf, 128);. // Wait until the user is done; while (gROOT->IsInterrupted()); gSystem->DispatchOneEvent(kFALSE);. // Password is now in pwdbuf; ... }; ```. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGPasswdDialog.cxx:484,password,passwords,484,gui/gui/src/TGPasswdDialog.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGPasswdDialog.cxx,2,"['Password', 'password']","['Password', 'passwords']"
Security,"// @(#)root/hist:$Id$; // Author: Lorenzo Moneta; /*************************************************************************; * Copyright (C) 1995-2012, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ////////////////////////////////////////////////////////////////////////////////; /** \class TBackCompFitter; \ingroup Hist; \brief Backward compatible implementation of TVirtualFitter. Backward compatible implementation of TVirtualFitter using the; class ROOT::Fit::Fitter. This class is created after fitting an; histogram (TH1), TGraph or TTree and provides in addition to the; methods of the TVirtualFitter hooks to access the fit result class; (ROOT::Fit::FitResult), the fit configuration; (ROOT::Fit::FitConfig) or the fit data (ROOT::Fit::FitData) using. ~~~~~~~~{.cpp}; TBackCompFitter * fitter = (TBackCompFitter *) TVirtualFitter::GetFitter();; ROOT::Fit::FitResult & result = fitter->GetFitResult();; result.Print(std::cout);; ~~~~~~~~. Methods for getting the confidence level or contours are also; provided. Note that after a new calls to TH1::Fit (or similar) the; class will be deleted and all reference to the FitResult, FitConfig; or minimizer will be invalid. One could eventually copying the; class before issuing a new fit to avoid deleting this information.; */; //////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBackCompFitter.cxx:828,access,access,828,hist/hist/src/TBackCompFitter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBackCompFitter.cxx,1,['access'],['access']
Security,"// @(#)root/io:$Id$; // Author: Andreas Peters + Fons Rademakers + Rene Brun 26/5/2005; /*************************************************************************; * Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /**; \class TFileMerger TFileMerger.cxx; \ingroup IO. This class provides file copy and merging services. It can be used to copy files (not only ROOT files), using TFile or; any of its remote file access plugins. It is therefore useful in; a Grid environment where the files might be accessible only remotely.; The merging interface allows files containing histograms and trees; to be merged, like the standalone hadd program.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TFileMerger.cxx:643,access,access,643,io/io/src/TFileMerger.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TFileMerger.cxx,2,['access'],"['access', 'accessible']"
Security,"// @(#)root/io:$Id$; // Author: Markus Frank 28/10/04; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /*; \class TGenCollectionStreamer; \ingroup IO. Streamer around an arbitrary container, which implements basic; functionality and iteration. In particular this is used to implement splitting and abstract; element access of any container. Access to compiled code is necessary; to implement the abstract iteration sequence and functionality like; size(), clear(), resize(). resize() may be a void operation.; **/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TGenCollectionStreamer.cxx:626,access,access,626,io/io/src/TGenCollectionStreamer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TGenCollectionStreamer.cxx,2,"['Access', 'access']","['Access', 'access']"
Security,"// @(#)root/io:$Id$; // Author: Markus Frank 28/10/04; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; //////////////////////////////////////////////////////////////////////////; // //; // TEmulatedMapProxy; //; // Streamer around an arbitrary container, which implements basic; // functionality and iteration.; //; // In particular this is used to implement splitting and abstract; // element access of any container. Access to compiled code is necessary; // to implement the abstract iteration sequence and functionality like; // size(), clear(), resize(). resize() may be a void operation.; //; //////////////////////////////////////////////////////////////////////////; /**; \class TEmulatedMapProxy; \ingroup IO. Streamer around a map container. For optimization reasons this functionality; is separated from the TEmulatedProxy.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TEmulatedMapProxy.cxx:704,access,access,704,io/io/src/TEmulatedMapProxy.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TEmulatedMapProxy.cxx,2,"['Access', 'access']","['Access', 'access']"
Security,"// @(#)root/io:$Id$; // Author: Rene Brun 28/12/94; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /**; \class TKey; \ingroup IO. Book space in a file, create I/O buffers, to fill them, (un)compress them. The TKey class includes functions to book space in a file, to create I/O; buffers, to fill these buffers, to compress/uncompress data buffers.; Before saving (making persistent) an object in a file, a key must; be created. The key structure contains all the information to; uniquely identify a persistent object in a file.; | Data Member | Explanation |; |-------------|-------------|; | fNbytes | Number of bytes for the compressed object and key. |; | fObjlen | Length of uncompressed object. |; | fDatime | Date/Time when the object was written. |; | fKeylen | Number of bytes for the key structure. |; | fCycle | Cycle number of the object. |; | fSeekKey | Address of the object on file (points to fNbytes). This is a redundant information used to cross-check the data base integrity. |; | fSeekPdir | Pointer to the directory supporting this object.|; | fClassName | Object class name. |; | fName | Name of the object. |; | fTitle | Title of the object. |. In the 16 highest bits of fSeekPdir is encoded a pid offset. This; offset is to be added to the pid index stored in the TRef object; and the referenced TObject. The TKey class is used by ROOT to:; - Write an object in the current directory; - Write a new ntuple buffer. The structure of a file is shown in TFile::TFile.; The structure of a directory is shown in TDirectoryFile::TDirectoryFile.; The TKey class is used by the TBasket class.; See also TTree.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TKey.cxx:1294,integrity,integrity,1294,io/io/src/TKey.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TKey.cxx,1,['integrity'],['integrity']
Security,"// @(#)root/matrix:$Id$; // Authors: Fons Rademakers, Eddy Offermann Feb 2004; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TMatrixTSparse; \ingroup Matrix. TMatrixTSparse. Template class of a general sparse matrix in the Harwell-Boeing; format. Besides the usual shape/size descriptors of a matrix like fNrows,; fRowLwb,fNcols and fColLwb, we also store a row index, fRowIndex and; column index, fColIndex only for those elements unequal zero:. ~~~; fRowIndex[0,..,fNrows]: Stores for each row the index range of; the elements in the data and column array; fColIndex[0,..,fNelems-1]: Stores the column number for each data; element != 0; ~~~. As an example how to access all sparse data elements:. ~~~; for (Int_t irow = 0; irow < this->fNrows; irow++) {; const Int_t sIndex = fRowIndex[irow];; const Int_t eIndex = fRowIndex[irow+1];; for (Int_t index = sIndex; index < eIndex; index++) {; const Int_t icol = fColIndex[index];; const Element data = fElements[index];; printf(""data(%d,%d) = %.4e\n"",irow+this->fRowLwb,icol+; this->fColLwb,data);; }; }; ~~~. When checking whether sparse matrices are compatible (like in an; assignment !), not only the shape parameters are compared but also; the sparse structure through fRowIndex and fColIndex . Several methods exist to fill a sparse matrix with data entries.; Most are the same like for dense matrices but some care has to be; taken with regard to performance. In the constructor, always the; shape of the matrix has to be specified in some form . Data can be; entered through the following methods :; 1. constructor from COO matrix format; ~~~; TMatrixTSparse(Int_t row_lwb,Int_t row_upb,Int_t dol_lwb,; Int_t col_upb,Int_",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTSparse.cxx:989,access,access,989,math/matrix/src/TMatrixTSparse.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTSparse.cxx,1,['access'],['access']
Security,"// @(#)root/meta:$Id$; // Author: Fons Rademakers 07/02/97; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TFunction; Global functions class (global functions are obtained from CINT).; This class describes one single global function.; The TROOT class contains a list of all currently defined global; functions (accessible via TROOT::GetListOfGlobalFunctions()).; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TFunction.cxx:633,access,accessible,633,core/meta/src/TFunction.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TFunction.cxx,1,['access'],['accessible']
Security,"// @(#)root/meta:$Id$; // Author: Rene Brun 04/02/95; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons . *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TDataType; Basic data type descriptor (datatype information is obtained from; CINT). This class describes the attributes of type definitions; (typedef's). The TROOT class contains a list of all currently; defined types (accessible via TROOT::GetListOfTypes()).; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TDataType.cxx:633,access,accessible,633,core/meta/src/TDataType.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TDataType.cxx,1,['access'],['accessible']
Security,"// @(#)root/meta:$Id$; // Author: Rene Brun 13/11/95; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TGlobal; Global variables class (global variables are obtained from CINT).; This class describes the attributes of a global variable.; The TROOT class contains a list of all currently defined global; variables (accessible via TROOT::GetListOfGlobals()).; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TGlobal.cxx:634,access,accessible,634,core/meta/src/TGlobal.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TGlobal.cxx,1,['access'],['accessible']
Security,"// @(#)root/mysql:$Id$; // Author: Fons Rademakers 15/02/2000; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; //////////////////////////////////////////////////////////////////////////; // //; // TMySQLServer //; // //; // MySQL server plugin implementing the TSQLServer interface. //; // //; // To open a connection to a server use the static method Connect(). //; // The db argument of Connect() is of the form: //; // mysql://<host>[:<port>][/<database>], e.g. //; // mysql://pcroot.cern.ch:3456/test //; // //; // As an example of connecting to mysql we assume that the server is //; // running on the local host and that you have access to a database //; // named ""test"" by connecting using an account that has a username and //; // password of ""tuser"" and ""tpass"". You can set up this account //; // by using the ""mysql"" program to connect to the server as the MySQL //; // root user and issuing the following statement: //; // //; // mysql> GRANT ALL ON test.* TO 'tuser'@'localhost' IDENTIFIED BY 'tpass';; // //; // If the test database does not exist, create it with this statement: //; // //; // mysql> CREATE DATABASE test; //; // //; // If you want to use a different server host, username, password, //; // or database name, just substitute the appropriate values. //; // To connect do: //; // //; // TSQLServer *db = TSQLServer::Connect(""mysql://localhost/test"", ""tuser"", ""tpass"");; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/sql/mysql/src/TMySQLServer.cxx:946,access,access,946,sql/mysql/src/TMySQLServer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/mysql/src/TMySQLServer.cxx,3,"['access', 'password']","['access', 'password']"
Security,"// @(#)root/net:$Id$; // Author: Fabio Hernandez 22/01/2013; // extending an initial version by Marcelo Sousa (class TAS3File); /*************************************************************************; * Copyright (C) 1995-2011, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /**; \file TS3WebFile.cxx; \class TS3WebFile; \ingroup IO. A TS3WebFile is a TWebFile which retrieves the file contents from a; web server implementing the REST API of the Amazon S3 protocol. This; class is meant to be as generic as possible to be used with files; hosted not only by Amazon S3 servers but also by other providers; implementing the core of the S3 protocol. The S3 protocol works on top of HTTPS (and HTTP) and imposes that; each HTTP request be signed using a specific convention: the request; must include an 'Authorization' header which contains the signature; of a concatenation of selected request fields. For signing the; request, an 'Access Key Id' and a 'Secret Access Key' need to be; known. These keys are used by the S3 servers to identify the client; and to authenticate the request as genuine. As an end user, you must know the Access Key and Secret Access Key; in order to access each S3 file. They are provided to you by your S3; service provider. Those two keys can be provided to ROOT when; initializing an object of this class by two means:; a. by using the environmental variables S3_ACCESS_KEY and ; S3_SECRET_KEY, or; b. by specifying them when opening each file. You can use AWS temporary security credentials (temporary access key; and secret access key), but you must also give the associated; session token. The token may be set in the S3_SESSION_TOKEN; environmental variable, or on open in the TOKEN option. The first method is convenient if all the S3 files you want to; a",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TS3WebFile.cxx:1013,Authoriz,Authorization,1013,net/net/src/TS3WebFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TS3WebFile.cxx,1,['Authoriz'],['Authorization']
Security,"// @(#)root/net:$Id$; // Author: Fabio Hernandez 30/01/2013; // based on an initial version by Marcelo Sousa (class THTTPMessage); /*************************************************************************; * Copyright (C) 1995-2011, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; //////////////////////////////////////////////////////////////////////////; // //; // TS3HTTPRequest //; // //; // An object of this class represents an HTTP request extended to be //; // compatible with Amazon's S3 protocol. //; // Specifically, such a request contains an 'Authorization' header with //; // information used by the S3 server for authenticating this request. //; // The authentication information is computed based on a pair of access //; // key and secret key which are both provided to the user by the S3 //; // service provider (e.g. Amazon, Google, etc.). //; // The secret key is used to compute a signature of selected fields in //; // the request. The algorithm for computing the signature is documented //; // in: //; // //; // Google storage: //; // http://code.google.com/apis/storage/docs/reference/v1/developer-guidev1.html#authentication; // //; // Amazon: //; // http://docs.aws.amazon.com/AmazonS3/latest/dev/S3_Authentication2.html; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TS3HTTPRequest.cxx:764,Authoriz,Authorization,764,net/net/src/TS3HTTPRequest.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TS3HTTPRequest.cxx,5,"['Authoriz', 'access', 'authenticat']","['Authorization', 'access', 'authenticating', 'authentication']"
Security,"// @(#)root/net:$Id$; // Author: G. Ganis 19/03/2003; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; //////////////////////////////////////////////////////////////////////////; // //; // TSecContext //; // //; // Contains details about an established security context //; // Used by THostAuth //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TSecContext.cxx:562,secur,security,562,net/net/src/TSecContext.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TSecContext.cxx,1,['secur'],['security']
Security,"// @(#)root/net:$Id$; // Author: Sergey Linev 6/02/2006; /*************************************************************************; * Copyright (C) 1995-2006, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ////////////////////////////////////////////////////////////////////////////////; //; // TSQLStatement; //; // Abstract base class defining SQL statements, which can be submitted; // in bulk to DB server.; //; // This is alternative to TSQLServer::Query() method, which allows only pure; // text queries and pure text result in TSQLResult classes.; // TSQLStatement is designed to support following features:; // - usage of basic data types (like int or double) as parameters; // in SQL statements; // - bulk operation when inserting/updating/selecting data in database; // - uasge of basic data types when accessing result set of executed query; //; //; // 1. Creation of statement; // ======================================; // To create an instance of the TSQLStatement class, the TSQLServer::Statement() method; // should be used. Depending on the driver used for an ODBC connection,; // the appropriate object instance will be created. For the moment there are; // six different implementations of the TSQLStatement class: for MySQL,; // Oracle, PostgreSQL, SQLite3 and ODBC. Hopefully, support of ODBC will allow usage of; // statements for most existing RDBMS.; //; // // first, connect to the database; // TSQLServer* serv = TSQLServer::Connect(""mysql://hostname.domain:3306/test"",; // ""user"", ""pass"");; // // check if connection is ok; // if ((serv!=0) && serv->IsConnected()) {; // // create instance of sql-statement; // TSQLStatement* stmt = serv->Statement(""CREATE TABLE TESTTABLE (ID1 INT, ID2 INT, FFIELD VARCHAR(255), FVALUE VARCHAR(255))"";; // // process statement; // ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TSQLStatement.cxx:1022,access,accessing,1022,net/net/src/TSQLStatement.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TSQLStatement.cxx,1,['access'],['accessing']
Security,"// @(#)root/netx:$Id$; /*************************************************************************; * Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ////////////////////////////////////////////////////////////////////////////////; // //; // TNetXNGFileStager //; // //; // Authors: Justin Salmon, Lukasz Janyst //; // CERN, 2013 //; // //; // Enables access to XRootD staging capabilities using the new client. //; // //; ////////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/netxng/src/TNetXNGFileStager.cxx:583,access,access,583,net/netxng/src/TNetXNGFileStager.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/netxng/src/TNetXNGFileStager.cxx,1,['access'],['access']
Security,"// @(#)root/netx:$Id$; /*************************************************************************; * Copyright (C) 1995-2016, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ////////////////////////////////////////////////////////////////////////////////; // //; // TNetXNGSystem //; // //; // Authors: Justin Salmon, Lukasz Janyst //; // CERN, 2013 //; // //; // Enables access to XRootD filesystem interface using the new client. //; // //; ////////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/netxng/src/TNetXNGSystem.cxx:579,access,access,579,net/netxng/src/TNetXNGSystem.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/netxng/src/TNetXNGSystem.cxx,1,['access'],['access']
Security,"// @(#)root/netxng:$Id$; /*************************************************************************; * Copyright (C) 1995-2013, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ////////////////////////////////////////////////////////////////////////////////; // //; // TNetXNGFile //; // //; // Authors: Justin Salmon, Lukasz Janyst //; // CERN, 2013 //; // //; // Enables access to XRootD files using the new client. //; // //; ////////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/netxng/src/TNetXNGFile.cxx:579,access,access,579,net/netxng/src/TNetXNGFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/netxng/src/TNetXNGFile.cxx,1,['access'],['access']
Security,"// @(#)root/new:$Id$; // Author: Fons Rademakers 29/07/95; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; //////////////////////////////////////////////////////////////////////////; // //; // Custom operators new and delete and ReAlloc functions. //; // //; // All new and delete operations in the ROOT system pass //; // via the custom new and delete operators defined in this file. //; // This scheme allows extensive memory checking and usage statistics //; // gathering and an easy way to access shared memory segments. //; // Memory checking is by default enabled and usage statistics is //; // gathered. Using the resource (in .rootrc): Root.MemStat one can //; // toggle statistics gathering on or off. More specifically on can trap //; // the allocation of a block of memory of a certain size. This can be //; // specified using the resource: Root.MemStat.size, using the resource //; // Root.MemStat.cnt one can specify after how many allocations of //; // this size the trap should occur. //; // Set the compile option R__NOSTATS to de-activate all memory checking //; // statistics gathering in the system. //; // //; // When memory checking is enabled the following happens during //; // allocation: //; // - each allocation results in the allocation of 9 extra bytes: //; // 2 words in front and 1 byte at the end of the memory chunck //; // returned to the caller. //; // - the allocated memory is set to 0. //; // - the size of the chunck is stored in the first word. The second //; // word is left empty (for alignment). //; // - the last byte is initialized to MEM_MAGIC. //; // //; // And during de-allocation this happens: //; // - first the size if the block is checked.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/newdelete/src/NewDelete.cxx:804,access,access,804,core/newdelete/src/NewDelete.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/newdelete/src/NewDelete.cxx,1,['access'],['access']
Security,"// @(#)root/physics:$Id$; // Author: Pasha Murat, Peter Malzacher 12/02/99; // Aug 11 1999: added Pt == 0 guard to Eta(); // Oct 8 1999: changed Warning to Error and; // return fX in Double_t & operator(); // Oct 20 1999: Bug fix: sign in PseudoRapidity; // Warning-> Error in Double_t operator(); /** \class TVector3; \ingroup Physics. \attention \parblock; TVector3 is a legacy class. It is slower and worse for serialization than the recommended superior alternative ROOT::Math::XYZVector. More details can be found in the documentation of the @ref GenVector package.; \endparblock. TVector3 is a general three vector class, which can be used for; the description of different vectors in 3D. ### Declaration / Access to the components. TVector3 has been implemented as a vector of three Double_t; variables, representing the cartesian coordinates. By default all components; are initialized to zero:. ~~~; TVector3 v1; // v1 = (0,0,0); TVector3 v3(1,2,3); // v3 = (1,2,3); TVector3 v4(v2); // v4 = v2; ~~~. It is also possible (but not recommended) to initialize a TVector3; with a Double_t or Float_t C array. You can get the basic components either by name or by index using operator():. ~~~; xx = v1.X(); or xx = v1(0);; yy = v1.Y(); yy = v1(1);; zz = v1.Z(); zz = v1(2);; ~~~. The member functions SetX(), SetY(), SetZ() and SetXYZ() allow to set the components:. ~~~; v1.SetX(1.); v1.SetY(2.); v1.SetZ(3.);; v1.SetXYZ(1.,2.,3.);; ~~~. ### Non-cartesian coordinates. To get information on the TVector3 in spherical (rho,phi,theta); or cylindrical (z,r,theta) coordinates, the. the member functions Mag() (=magnitude=rho in spherical coordinates),; Mag2(), Theta(), CosTheta(), Phi(), Perp() (the transverse component=r in; cylindrical coordinates), Perp2() can be used:. ~~~; Double_t m = v.Mag(); // get magnitude (=rho=Sqrt(x*x+y*y+z*z))); Double_t m2 = v.Mag2(); // get magnitude squared; Double_t t = v.Theta(); // get polar angle; Double_t ct = v.CosTheta(); // get cos of theta; Double_t ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/physics/src/TVector3.cxx:713,Access,Access,713,math/physics/src/TVector3.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/physics/src/TVector3.cxx,1,['Access'],['Access']
Security,"// @(#)root/physics:$Id$; // Author: Peter Malzacher 19/06/99; /** \class TRotation; \legacy{TRotation, Consider using instead ROOT::Math::Rotation3D.}; \ingroup Physics. The TRotation class describes a rotation of objects of the TVector3 class.; It is a 3*3 matrix of Double_t:. ~~~; | xx xy xz |; | yx yy yz |; | zx zy zz |; ~~~. It describes a so called active rotation, i.e. rotation of objects inside; a static system of coordinates. In case you want to rotate the frame and; want to know the coordinates of objects in the rotated system, you should; apply the inverse rotation to the objects. If you want to transform coordinates; from the rotated frame to the original frame you have to apply the direct; transformation. A rotation around a specified axis means counterclockwise rotation around; the positive direction of the axis. ### Declaration, Access, Comparisons. ~~~; TRotation r; // r initialized as identity; TRotation m(r); // m = r; ~~~. There is no direct way to set the matrix elements - to ensure that; a TRotation object always describes a real rotation. But you can get the; values by the member functions XX()..ZZ() or the (,); operator:. ~~~; Double_t xx = r.XX(); // the same as xx=r(0,0); xx = r(0,0);. if (r==m) {...} // test for equality; if (r!=m) {..} // test for inequality; if (r.IsIdentity()) {...} // test for identity; ~~~. ### Rotation around axes; The following matrices describe counterclockwise rotations around coordinate; axes. ~~~; | 1 0 0 |; Rx(a) = | 0 cos(a) -sin(a) |; | 0 sin(a) cos(a) |. | cos(a) 0 sin(a) |; Ry(a) = | 0 1 0 |; | -sin(a) 0 cos(a) |. | cos(a) -sin(a) 0 |; Rz(a) = | sin(a) cos(a) 0 |; | 0 0 1 |; ~~~. and are implemented as member functions RotateX(), RotateY() and RotateZ():. ~~~; r.RotateX(TMath::Pi()); // rotation around the x-axis; ~~~. ### Rotation around arbitrary axis; The member function Rotate() allows to rotate around an arbitrary vector; (not necessary a unit one) and returns the result. ~~~; r.Rotate(TMath::Pi()/3,TVec",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/physics/src/TRotation.cxx:856,Access,Access,856,math/physics/src/TRotation.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/physics/src/TRotation.cxx,1,['Access'],['Access']
Security,"// @(#)root/rint:$Id$; // Author: Rene Brun 17/02/95; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; //////////////////////////////////////////////////////////////////////////; // //; // Rint //; // //; // Rint is the ROOT Interactive Interface. It allows interactive access //; // to the ROOT system via the Cling C/C++ interpreter. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/rint/src/TRint.cxx:579,access,access,579,core/rint/src/TRint.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/rint/src/TRint.cxx,1,['access'],['access']
Security,"// @(#)root/roostats:$Id$; /*************************************************************************; * Project: RooStats *; * Package: RooFit/RooStats *; * Authors: *; * Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke *; *************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class RooStats::HybridResult; \ingroup Roostats. Class encapsulating the result of the HybridCalculatorOriginal.; This class is a fresh rewrite in RooStats of; RooStatsCms/LimitResults developed by D. Piparo and G. Schott; New contributions to this class have been written by Matthias Wolf (error estimation). The objects of this class store and access with lightweight methods the; information calculated by LimitResults through a Lent calculation using; MC toy experiments.; In some ways can be considered an extended and extensible implementation of; TConfidenceLevel.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HybridResult.cxx:945,access,access,945,roofit/roostats/src/HybridResult.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HybridResult.cxx,1,['access'],['access']
Security,"// @(#)root/roostats:$Id$; // Authors: Kevin Belasco 17/06/2009; // Authors: Kyle Cranmer 17/06/2009; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class RooStats::MarkovChain; \ingroup Roostats. Stores the steps in a Markov Chain of points. Allows user to access the; weight and NLL value (if applicable) with which a point was added to the; MarkovChain. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MarkovChain.cxx:574,access,access,574,roofit/roostats/src/MarkovChain.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MarkovChain.cxx,1,['access'],['access']
Security,"// @(#)root/rpdutils:$Id$; // Author: Gerardo Ganis 7/4/2003; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; //////////////////////////////////////////////////////////////////////////; // //; // rpdutils //; // //; // Set of utilities for rootd/proofd daemon authentication. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/rpdutils.cxx:570,authenticat,authentication,570,net/rpdutils/src/rpdutils.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/rpdutils.cxx,1,['authenticat'],['authentication']
Security,"// @(#)root/rpdutils:$Id$; // Author: Gerardo Ganis, March 2011; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; //////////////////////////////////////////////////////////////////////////; // //; // rpdpriv //; // //; // Implementation of a privileges handling API following the paper //; // ""Setuid Demystified"" by H.Chen, D.Wagner, D.Dean //; // also quoted in ""Secure programming Cookbook"" by J.Viega & M.Messier. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/rpdpriv.cxx:674,Secur,Secure,674,net/rpdutils/src/rpdpriv.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/rpdpriv.cxx,1,['Secur'],['Secure']
Security,"// @(#)root/spectrumpainter:$Id: TSpectrum2Painter.cxx,v 1.00; // Author: Miroslav Morhac 29/09/06; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TSpectrum2Painter; \ingroup Spectrumpainter. \legacy{TSpectrum2Painter}. Two-dimensional graphics function. TSpectrum2Painter is a set of graphical functions developed by Miroslav; Morhac to paint 2D-histograms in three dimensions. This package is accessed; via THistPainter in a transparent way. For the ROOT user it is enough to use; the ""SPEC"" option to draw a 2D-Histogram. This option offers many; functionalities detailed in the header of the PaintSpectrum function. Reference:. Morhac M., Kliman J., Matousek V., Turzo I.: Sophisticated visualization; algorithms for analysis of multidimensional experimental nuclear data. Acta; Pysica Slovaca Vol. 54/ 4 (2004), pp. 385-400.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/spectrumpainter/src/TSpectrum2Painter.cxx:717,access,accessed,717,hist/spectrumpainter/src/TSpectrum2Painter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/spectrumpainter/src/TSpectrum2Painter.cxx,1,['access'],['accessed']
Security,"// @(#)root/sql:$Id: 6f6608219c30ddefdf8e25d7cf170d5e69704cd3 $; // Author: Sergey Linev 20/11/2005; /*************************************************************************; * Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /**; \class TSQLFile; \ingroup IO. Access an SQL db via the TFile interface. The main motivation for the TSQLFile development is to have; ""transparent"" access to SQL data base via standard TFile interface.; The main approach that each class (but not each object) has one or two tables; with names like $(CLASSNAME)_ver$(VERSION) and $(CLASSNAME)_raw$(VERSION); For example: TAxis_ver8 or TList_raw5; Second kind of tables appears, when some of class members can not be converted to; normalized form or when class has custom streamer.; For instance, for TH1 class two tables are required: TH1_ver4 and TH1_raw4; Most of members are stored in TH1_ver4 table column-wise, and only member:; Double_t* fBuffer; //[fBufferSize]; can not be represented as column while size of array is not fixed.; Therefore, fBuffer will be written as list of values in TH1_raw4 table.; All objects, stored in the DB, will be registered in table ""ObjectsTable"".; In this there are following columns:; | Name | Description |; |------|-------------|; | ""key:id"" | key identifier to which belong object |; | ""obj:id"" | object identifier |; | ""Class"" | object class name |; | ""Version"" | object class version |. Data in each ""ObjectsTable"" row uniquely identify, in which table; and which column object is stored. In normal situation all class data should be sorted column-wise.; Up to now following member are supported:; -# Basic data types. Here is everything clear. Column SQL type will be as much as possible; close to the original type of value.; -# Fixed array o",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/sql/src/TSQLFile.cxx:494,Access,Access,494,io/sql/src/TSQLFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/sql/src/TSQLFile.cxx,2,"['Access', 'access']","['Access', 'access']"
Security,"// @(#)root/test:$Id$; // Author: David Smith 20/10/14; /////////////////////////////////////////////////////////////////; //; //___A test for I/O plugins by reading files___; //; // The files used in this test have been generated by; // stress.cxx and preplaced on some data servers.; // stressIOPlugins reads the remote files via various data; // access protocols to test ROOT IO plugins. The data read are; // tested via tests based on some of stress.cxx tests.; //; // Can be run as:; // stressIOPlugins [name]; //; // The name parameter is a protocol name, as expected; // in a url. The supported names are: xroot, root, http, https.; // If the name is omitted a selection of schemes are tested; // based on feature availability:; //; // feature protocol multithreaded test available; //; // xrootd root no; // davix http no; //; // An example of output of a non multithreaded test, when all the tests; // run OK is shown below:; //; // ****************************************************************************; // * Starting stressIOPlugins test for protocol http; // * Test files will be read from:; // * http://root.cern/files/StressIOPluginsTestFiles/; // ****************************************************************************; // Test 1 : Check size & compression factor of a Root file........ using stress_2.root; // : opened file with plugin class......................... TDavixFile; // : Check size & compression factor of a Root file........ OK; // Test 2 : Test graphics & Postscript............................ using stress_5.root; // : opened file with plugin class......................... TDavixFile; // : Test graphics & Postscript............................ OK; // Test 3 : Trees split and compression modes..................... using Event_8a.root; // : opened file with plugin class......................... TDavixFile; // : Trees split and compression modes..................... using Event_8b.root; // : opened file with plugin class......................... TDavix",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressIOPlugins.cxx:349,access,access,349,test/stressIOPlugins.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressIOPlugins.cxx,1,['access'],['access']
Security,"// @(#)root/thread:$Id$; /*; * Copyright (c) 2006-2011 High Performance Computing Center Stuttgart,; * University of Stuttgart. All rights reserved.; * Author: Rainer Keller, HLRS; * Modified: Fons Rademakers, CERN; * Modified: Philippe Canal, FNAL; *; * Thread-local storage (TLS) is not supported on all environments.; * This header file and test-program shows how to abstract away, using either; * __thread,; * __declspec(thread),; * thread_local or; * Pthread-Keys; * depending on the (configure-set) CPP-variables R__HAS___THREAD,; * R__HAS_DECLSPEC_THREAD or R__HAS_PTHREAD.; *; * Use the macros TTHREAD_TLS_DECLARE, TTHREAD_TLS_INIT, and the; * getters and setters TTHREAD_TLS_GET and TTHREAD_TLS_GET; * to work on the declared variables.; *; * In case of PThread keys, we need to resolve to using keys!; * In order to do so, we need to declare and access; * TLS variables through three macros:; * - TTHREAD_TLS_DECLARE; * - TTHREAD_TLS_INIT; * - TTHREAD_TLS_SET and; * - TTHREAD_TLS_GET; * We do depend on the following (GCC-)extension:; * - In case of function-local static functions,; * we declare a sub-function to create a specific key.; * Unfortunately, we do NOT use the following extensions:; * - Using typeof, we could get rid of the type-declaration; * which is used for casting, however typeof is not ANSI C.; * - We do NOT allow something like; * func (a, TTHREAD_TLS_SET(int, my_var, 5));; * as we do not use the gcc-extension of returning macro-values.; *; * C++11 requires the implementation of the thread_local storage.; *; * For simple type use:; * TTHREAD_TLS(int) varname;; *; * For array of simple type use:; * TTHREAD_TLS_ARRAY(int, arraysize, varname);; *; * For object use:; * TTHREAD_TLS_DECL(classname, varname);; * TTHREAD_TLS_DECL_ARG(classname, varname, arg);; * TTHREAD_TLS_DECL_ARG2(classname, varname, arg1, arg2);; *; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ThreadLocalStorage.h:856,access,access,856,core/foundation/inc/ThreadLocalStorage.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ThreadLocalStorage.h,1,['access'],['access']
Security,"// @(#)root/thread:$Id$; // Author: Fons Rademakers 04/01/2000; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; //////////////////////////////////////////////////////////////////////////; // //; // TRWLock //; // //; // This class implements a reader/writer lock. A rwlock allows //; // a resource to be accessed by multiple reader threads but only //; // one writer thread. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/thread/src/TRWLock.cxx:614,access,accessed,614,core/thread/src/TRWLock.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/thread/src/TRWLock.cxx,1,['access'],['accessed']
Security,"// @(#)root/tree:$Id$; // Author: Rene Brun 12/01/96; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /**; \defgroup tree Tree Library. In order to store columnar datasets, ROOT provides the TTree, TChain,; TNtuple and TNtupleD classes.; The TTree class represents a columnar dataset. Any C++ type can be stored in the; columns. The TTree has allowed to store about **1 EB** of data coming from the LHC alone:; it is demonstrated to scale and it's battle tested. It has been optimized during the years; to reduce dataset sizes on disk and to deliver excellent runtime performance.; It allows to access only part of the columns of the datasets, too.; The TNtuple and TNtupleD classes are specialisations of the TTree class which can; only hold single precision and double precision floating-point numbers respectively;; The TChain is a collection of TTrees, which can be located also in different files. */; /** \class TTree; \ingroup tree. A TTree represents a columnar dataset. Any C++ type can be stored in its columns. A TTree, often called in jargon *tree*, consists of a list of independent columns or *branches*,; represented by the TBranch class.; Behind each branch, buffers are allocated automatically by ROOT.; Such buffers are automatically written to disk or kept in memory until the size stored in the; attribute fMaxVirtualSize is reached.; Variables of one branch are written to the same buffer. A branch buffer is; automatically compressed if the file compression attribute is set (default).; Branches may be written to different files (see TBranch::SetFile). The ROOT user can decide to make one single branch and serialize one object into; one single I/O buffer or to make ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTree.cxx:905,access,access,905,tree/tree/src/TTree.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTree.cxx,1,['access'],['access']
Security,"// @(#)root/treeplayer:$Id$; // Author: Philippe Canal 06/06/2004; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers and al. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /*; TODO:; Have separate names for the wrapper classes in the cases of: [done]; clones/non clones; split/non split; split levels. Have a solution for passing top+"".""+middle to the parents classes [probably done .. need testing]. Have a solution for the return by references of abstract classes [not done]. Have object inside ClonesArray properly treated! [done]; Why is there 2 TRef proxy classes? [done]. check why some inheritance are TObjProxy and not TPx_. Be smart enough to avoid issue about having 2 classes one unrolled and one non unrolled!. When using in interpreted mode understand why the reloading reloads the calling script and then crashes :(. CINT does not properly call the custom operators when doing return fNtrack. CINT does not handle fMatrix[2][1] well. The user's function in script.h are not exposed by ACLiC. Review the method to avoid the useless refreshing of the generated file; - for most efficiency it would require a different name for each tree; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeProxyGenerator.cxx:1248,expose,exposed,1248,tree/treeplayer/src/TTreeProxyGenerator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeProxyGenerator.cxx,1,['expose'],['exposed']
Security,"// @(#)root/treeplayer:$Id$; // Author: Rene Brun 12/01/96; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /**; * \defgroup treeplayer TreePlayer Library; * \brief It contains utilities to plot data stored in a TTree.; * \sa Tree package documentation; * \sa Chapter about Trees and Selectors in the Users Guide; * \sa ROOT examples in tutorials and test directories: Event application, benchmarks; */; /** \class TTreePlayer. Implement some of the functionality of the class TTree requiring access to; extra libraries (Histogram, display, etc).; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreePlayer.cxx:803,access,access,803,tree/treeplayer/src/TTreePlayer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreePlayer.cxx,1,['access'],['access']
Security,"// @(#)root/x11:$Id$; // Author: Rene Brun, Olivier Couet, Fons Rademakers 28/11/94; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /// \defgroup x11 X11 backend; /// \brief Interface to X11 graphics.; /// \ingroup GraphicsBackends; /** \class TGX11; \ingroup x11; This class is the basic interface to the X11 (Xlib) graphics system.; It is an implementation of the abstract TVirtualX class. This class gives access to basic X11 graphics, pixmap, text and font handling; routines. The companion class for Win32 is TGWin32. The file G11Gui.cxx contains the implementation of the GUI methods of the; TGX11 class. Most of the methods are used by the machine independent; GUI classes (libGUI.so). This code was initially developed in the context of HIGZ and PAW; by Olivier Couet (package X11INT).; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/x11/src/TGX11.cxx:720,access,access,720,graf2d/x11/src/TGX11.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/x11/src/TGX11.cxx,1,['access'],['access']
Security,"// @(#)root/x11ttf:$Id: 80028b538e60290371c1c5d73728f78b1c32f09a $; // Author: Valeriy Onuchin (Xft support) 02/10/07; // Author: Olivier Couet 01/10/02; // Author: Fons Rademakers 21/11/98; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TGX11TTF; \ingroup x11. Interface to low level X11 (Xlib). This class gives access to basic; X11 graphics via the parent class TGX11. However, all text and font; handling is done via the Freetype TrueType library. When the; shared library containing this class is loaded the global gVirtualX; is redirected to point to this class.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/x11ttf/src/TGX11TTF.cxx:636,access,access,636,graf2d/x11ttf/src/TGX11TTF.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/x11ttf/src/TGX11TTF.cxx,1,['access'],['access']
Security,"// @(#)root/xmlparser:$Id$; // Author: Jose Lo 12/4/2005; /*************************************************************************; * Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /**; \class TDomParser; \ingroup IO. DOM stands for the Document Object Model; this is an API for; accessing XML or HTML structured documents.; The Document Object Model is a platform and language-neutral; interface that will allow programs and scripts to dynamically; access and update the content, structure and style of documents. The parser returns a tree built during the document analysis.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/xmlparser/src/TDOMParser.cxx:515,access,accessing,515,io/xmlparser/src/TDOMParser.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/xmlparser/src/TDOMParser.cxx,2,['access'],"['access', 'accessing']"
Security,"// @(#)root/xmlparser:$Id$; // Author: Jose Lo 12/4/2005; /*************************************************************************; * Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /**; \class TXMLNode; \ingroup IO. TXMLNode contains a pointer to xmlNode, which is a node under the; DOM tree. A node can be an Element, an Attribute, a Text Node; or a Comment Node.; One can navigate the DOM tree by accessing the siblings and; parent or child nodes. Also retriving the Attribute or the Text in; an Element node.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/xmlparser/src/TXMLNode.cxx:634,access,accessing,634,io/xmlparser/src/TXMLNode.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/xmlparser/src/TXMLNode.cxx,1,['access'],['accessing']
Security,// @public and @package ivars are always accessible.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaAccess.cpp:41,access,accessible,41,interpreter/llvm-project/clang/lib/Sema/SemaAccess.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaAccess.cpp,1,['access'],['accessible']
Security,"// A (multi-)dword access at an address == 2 (mod 4) will be decomposed by the; // hardware into byte accesses. If you assume all alignments are equally; // probable, it's more efficient on average to use short accesses for this; // case.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUTargetTransformInfo.cpp:19,access,access,19,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUTargetTransformInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUTargetTransformInfo.cpp,3,['access'],"['access', 'accesses']"
Security,// A 5-bit unsigned immediate for CSR access instructions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/RISCV.cpp:38,access,access,38,interpreter/llvm-project/clang/lib/Basic/Targets/RISCV.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/RISCV.cpp,1,['access'],['access']
Security,"// A Chain is a set of instructions such that:; // - All instructions have the same equivalence class, so in particular all are; // loads, or all are stores.; // - We know the address accessed by the i'th chain elem relative to the; // chain's leader instruction, which is the first instr of the chain in BB; // order.; //; // Chains have two canonical orderings:; // - BB order, sorted by Instr->comesBefore.; // - Offset order, sorted by OffsetFromLeader.; // This pass switches back and forth between these orders.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoadStoreVectorizer.cpp:184,access,accessed,184,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoadStoreVectorizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoadStoreVectorizer.cpp,1,['access'],['accessed']
Security,// A Flat memory operation must access at least one address space.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIInsertWaitcnts.cpp:32,access,access,32,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIInsertWaitcnts.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIInsertWaitcnts.cpp,1,['access'],['access']
Security,"// A PHI node is allowed to have multiple (duplicated) entries for the same; // basic block, as long as the value is the same. So if we already injected; // a load in the predecessor, then we should reuse the same load for all; // duplicated entries.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp:144,inject,injected,144,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,1,['inject'],['injected']
Security,// A PseudoProbeInst has the IntrInaccessibleMemOnly tag hence it is; // considered accessing memory and will be marked as a tail call if we; // don't bail out here.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/TailRecursionElimination.cpp:84,access,accessing,84,interpreter/llvm-project/llvm/lib/Transforms/Scalar/TailRecursionElimination.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/TailRecursionElimination.cpp,1,['access'],['accessing']
Security,"// A RISC-V hart has a single byte-addressable address space of 2^XLEN bytes; // for all memory accesses, so it is reasonable to assume that an; // implementation has no-op address space casts. If an implementation makes a; // change to this, they can override it here.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVTargetMachine.cpp:96,access,accesses,96,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVTargetMachine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVTargetMachine.cpp,1,['access'],['accesses']
Security,"// A TableGen backend is a function that looks like; //; // EmitFoo(RecordKeeper &RK, raw_ostream &OS /*, anything else you need */ ); //; // What you do inside of that function is up to you, but it will usually; // involve generating C++ code to the provided raw_ostream.; //; // The RecordKeeper is just a top-level container for an in-memory; // representation of the data encoded in the TableGen file. What a TableGen; // backend does is walk around that in-memory representation and generate; // stuff based on the information it contains.; //; // The in-memory representation is a node-graph (think of it like JSON but; // with a richer ontology of types), where the nodes are subclasses of; // Record. The methods `getClass`, `getDef` are the basic interface to; // access the node-graph. RecordKeeper also provides a handy method; // `getAllDerivedDefinitions`. Consult ""include/llvm/TableGen/Record.h"" for; // the exact interfaces provided by Record's and RecordKeeper.; //; // A common pattern for TableGen backends is for the EmitFoo function to; // instantiate a class which holds some context for the generation process,; // and then have most of the work happen in that class's methods. This; // pattern partly has historical roots in the previous TableGen backend API; // that involved a class and an invocation like `FooEmitter(RK).run(OS)`.; //; // Remember to wrap private things in an anonymous namespace. For most; // backends, this means that the EmitFoo function is the only thing not in; // the anonymous namespace.; // FIXME: Reorganize TableGen so that build dependencies can be more; // accurately expressed. Currently, touching any of the emitters (or; // anything that they transitively depend on) causes everything dependent; // on TableGen to be rebuilt (this includes all the targets!). Perhaps have; // a standalone TableGen binary and have the backends be loadable modules; // of some sort; then the dependency could be expressed as being on the; // module, and all th",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/TableGenBackends.h:773,access,access,773,interpreter/llvm-project/llvm/utils/TableGen/TableGenBackends.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/TableGenBackends.h,1,['access'],['access']
Security,"// A \p tok::hashhash at this location is passed by the preprocessor to the; // parser to interpret, like any other token. So for dependency scanning; // skip it like a normal token not affecting the preprocessor.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/DependencyDirectivesScanner.cpp:13,hash,hashhash,13,interpreter/llvm-project/clang/lib/Lex/DependencyDirectivesScanner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/DependencyDirectivesScanner.cpp,1,['hash'],['hashhash']
Security,"// A call can access a locally allocated object either because it is passed as; // an argument to the call, or because it has escaped prior to the call.; //; // Make sure the object has not escaped here, and then check that none of the; // call arguments alias the object below.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/BasicAliasAnalysis.cpp:14,access,access,14,interpreter/llvm-project/llvm/lib/Analysis/BasicAliasAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/BasicAliasAnalysis.cpp,1,['access'],['access']
Security,"// A const char* string may not neccessarily be utf8.; // When the locale can output utf8 strings, validate it as utf8 first.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Utils/UTF8.cpp:99,validat,validate,99,interpreter/cling/lib/Utils/UTF8.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Utils/UTF8.cpp,1,['validat'],['validate']
Security,// A different hash value means we have reached the end of the sequence.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CloneDetection.cpp:15,hash,hash,15,interpreter/llvm-project/clang/lib/Analysis/CloneDetection.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CloneDetection.cpp,1,['hash'],['hash']
Security,// A direct inbounds access to a stack variable is always valid.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/AddressSanitizer.cpp:21,access,access,21,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/AddressSanitizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/AddressSanitizer.cpp,1,['access'],['access']
Security,"// A faster local-exec TLS access sequence (enabled with the; // -maix-small-local-exec-tls option) can be produced for TLS variables;; // consistent with the IBM XL compiler, we apply a max size of slightly under; // 32KB.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp:27,access,access,27,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,1,['access'],['access']
Security,// A flat load may access private memory.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp:19,access,access,19,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp,1,['access'],['access']
Security,"// A function has a unique identifier, a checksum (we leave as zero) and a; // set of blocks and a map of edges between blocks. This is the only GCOV; // object users can construct, the blocks and lines will be rooted here.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/GCOVProfiling.cpp:41,checksum,checksum,41,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/GCOVProfiling.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/GCOVProfiling.cpp,1,['checksum'],['checksum']
Security,"// A function hash is calculated by considering only the number of arguments; // and whether a function is varargs, the order of basic blocks (given by the; // successors of each basic block in depth first order), and the order of; // opcodes of each instruction within each of these basic blocks. This mirrors; // the strategy FunctionComparator::compare() uses to compare functions by; // walking the BBs in depth first order and comparing each instruction in; // sequence. Because this hash currently does not look at the operands, it is; // insensitive to things such as the target of calls and the constants used in; // the function, which makes it useful when possibly merging functions which; // are the same modulo constants and call targets.; //; // Note that different users of StructuralHash will want different behavior; // out of it (i.e., MergeFunctions will want something different from PM; // expensive checks for pass modification status). When modifying this; // function, most changes should be gated behind an option and enabled; // selectively.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/StructuralHash.cpp:14,hash,hash,14,interpreter/llvm-project/llvm/lib/IR/StructuralHash.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/StructuralHash.cpp,2,['hash'],['hash']
Security,"// A hash on the escape sequence",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/guihtml/src/TGHtmlParse.cxx:5,hash,hash,5,gui/guihtml/src/TGHtmlParse.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/guihtml/src/TGHtmlParse.cxx,1,['hash'],['hash']
Security,"// A helper that evaluates a memory access's use of a pointer. If the use will; // be a scalar use and the pointer is only used by memory accesses, we place; // the pointer in ScalarPtrs. Otherwise, the pointer is placed in; // PossibleNonScalarPtrs.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:36,access,access,36,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,2,['access'],"['access', 'accesses']"
Security,// A helper that returns true if the use of Ptr by MemAccess will be scalar.; // The pointer operands of loads and stores will be scalar as long as the; // memory access is not a gather or scatter operation. The value operand of a; // store will remain scalar if the store is scalarized.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:163,access,access,163,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,1,['access'],['access']
Security,"// A list of 8-bit numbers that have at most one run of non-zero bits.; // x = x ^ (mask << 56) can be encoded as a single armv8 instruction for these; // masks.; // The list does not include the value 255, which is used for UAR.; //; // Because we are more likely to use earlier elements of this list than later; // ones, it is sorted in increasing order of probability of collision with a; // mask allocated (temporally) nearby. The program that generated this list; // can be found at:; // https://github.com/google/sanitizers/blob/master/hwaddress-sanitizer/sort_masks.py",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/HWAddressSanitizer.cpp:519,sanitiz,sanitizers,519,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/HWAddressSanitizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/HWAddressSanitizer.cpp,2,['sanitiz'],"['sanitizer', 'sanitizers']"
Security,"// A list of pointers which are known to be dereferenceable within scope of; // the loop body for each iteration of the loop which executes. That is,; // the memory pointed to can be dereferenced (with the access size implied by; // the value's type) unconditionally within the loop header without; // introducing a new fault.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorizationLegality.cpp:206,access,access,206,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorizationLegality.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorizationLegality.cpp,1,['access'],['access']
Security,"// A list of the template argument list flattened in a predictible manner for; // the purposes of caching. The ConstraintSatisfaction type is in AST so it; // has no access to the MultiLevelTemplateArgumentList, so this has to happen; // here.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaConcept.cpp:166,access,access,166,interpreter/llvm-project/clang/lib/Sema/SemaConcept.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaConcept.cpp,1,['access'],['access']
Security,// A map from function runtime address to function name MD5 hash.; // This map is only populated and used by raw instr profile reader.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h:60,hash,hash,60,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,1,['hash'],['hash']
Security,"// A map from mangled names to their function's source location, used for; // backend diagnostics as the Clang AST may be unavailable. We actually use; // the mangled name's hash as the key because mangled names can be very; // long and take up lots of space. Using a hash can cause name collision,; // but that is rare and the consequences are pointing to a wrong source; // location which is not severe. This is a vector instead of an actual map; // because we optimize for time building this map rather than time; // retrieving an entry, as backend diagnostics are uncommon.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendConsumer.h:174,hash,hash,174,interpreter/llvm-project/clang/lib/CodeGen/BackendConsumer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendConsumer.h,2,['hash'],['hash']
Security,// A map to hold memprof data per function. The lower 64 bits obtained from; // the md5 hash of the function name is used to index into the map.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfWriter.h:88,hash,hash,88,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfWriter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfWriter.h,1,['hash'],['hash']
Security,// A mapping from FrameId (a hash of the contents) to the frame.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/RawMemProfReader.h:29,hash,hash,29,interpreter/llvm-project/llvm/include/llvm/ProfileData/RawMemProfReader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/RawMemProfReader.h,1,['hash'],['hash']
Security,"// A mapping from function GUID, hash of the canonical function symbol to the; // memprof profile data for that function, i.e allocation and callsite info.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/RawMemProfReader.h:33,hash,hash,33,interpreter/llvm-project/llvm/include/llvm/ProfileData/RawMemProfReader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/RawMemProfReader.h,1,['hash'],['hash']
Security,"// A mapping of the hash to symbol name, only used if KeepSymbolName is true.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/RawMemProfReader.h:20,hash,hash,20,interpreter/llvm-project/llvm/include/llvm/ProfileData/RawMemProfReader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/RawMemProfReader.h,1,['hash'],['hash']
Security,"// A masked load can not be unfolded to a full load, otherwise it would access; // unexpected memory. A simple store can not be unfolded.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/X86FoldTablesEmitter.cpp:72,access,access,72,interpreter/llvm-project/llvm/utils/TableGen/X86FoldTablesEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/X86FoldTablesEmitter.cpp,1,['access'],['access']
Security,"// A member of a union must have a trivial corresponding special member.; // As a weird special case, a destructor call from a union's constructor; // must be accessible and non-deleted, but need not be trivial. Such a; // destructor is never actually called, but is semantically checked as; // if it were.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp:159,access,accessible,159,interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,1,['access'],['accessible']
Security,// A memory access through a pointer is considered UB; // only if the pointer has constant null value.; // TODO: Expand it to not only check constant values.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp:12,access,access,12,interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp,1,['access'],['access']
Security,// A memory access using constant null pointer is only considered UB; // if null pointer is _not_ defined for the target platform.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp:12,access,access,12,interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp,1,['access'],['access']
Security,"// A narrow (<16 bytes) vector will as a parameter also expose the ABI as; // it will be passed in a vector register. A wide (>16 bytes) vector will; // be passed via ""hidden"" pointer where any extra alignment is not; // required (per GCC).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/SystemZ.cpp:56,expose,expose,56,interpreter/llvm-project/clang/lib/CodeGen/Targets/SystemZ.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/SystemZ.cpp,1,['expose'],['expose']
Security,"// A noalias return is not accessible from any other code. If the pointer; // does not escape prior to the unwind, then the caller cannot access the; // memory either.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/AliasAnalysis.cpp:27,access,accessible,27,interpreter/llvm-project/llvm/lib/Analysis/AliasAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/AliasAnalysis.cpp,2,['access'],"['access', 'accessible']"
Security,"// A normal empty GNU hash table section produced by linker might have; // symndx set to the number of dynamic symbols + 1 (for the zero symbol); // and have dummy null values in the Bloom filter and in the buckets; // vector (or no values at all). It happens because the value of symndx is not; // important for dynamic loaders when the GNU hash table is empty. They just; // skip the whole object during symbol lookup. In such cases, the symndx value; // is irrelevant and we should not report a warning.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp:22,hash,hash,22,interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp,2,['hash'],['hash']
Security,// A null pointer access can be undefined but any offset from null may; // be OK. We do not try to optimize the latter.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/Attributor.cpp:18,access,access,18,interpreter/llvm-project/llvm/lib/Transforms/IPO/Attributor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/Attributor.cpp,1,['access'],['access']
Security,"// A pointer to the object that sent the last signal.; // Getting access to the sender might be practical; // when many signals are connected to a single slot.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQObject.cxx:66,access,access,66,core/base/src/TQObject.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQObject.cxx,1,['access'],['access']
Security,// A pointer to the type identifier member through which the pointer to Fn is; // accessed.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/WholeProgramDevirt.h:82,access,accessed,82,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/WholeProgramDevirt.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/WholeProgramDevirt.h,1,['access'],['accessed']
Security,// A prefix only applies to the instruction following it. Here we extract; // prefix information for the next instruction before validating the current; // one so that in the case of failure we don't erronously continue using the; // current prefix.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AsmParser/AArch64AsmParser.cpp:129,validat,validating,129,interpreter/llvm-project/llvm/lib/Target/AArch64/AsmParser/AArch64AsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AsmParser/AArch64AsmParser.cpp,1,['validat'],['validating']
Security,// A pseudo probe call shouldn't change any function attribute since it; // doesn't translate to a real instruction. It comes with a memory access; // tag to prevent itself being removed by optimizations and not block; // other instructions being optimized.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/FunctionAttrs.cpp:140,access,access,140,interpreter/llvm-project/llvm/lib/Transforms/IPO/FunctionAttrs.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/FunctionAttrs.cpp,1,['access'],['access']
Security,"// A runtime call that involves memory offloading looks something like:; // call void @__tgt_target_data_begin_mapper(arg0, arg1,; // i8** %offload_baseptrs, i8** %offload_ptrs, i64* %offload_sizes,; // ...); // So, the idea is to access the allocas that allocate space for these; // offload arrays, offload_baseptrs, offload_ptrs, offload_sizes.; // Therefore:; // i8** %offload_baseptrs.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/OpenMPOpt.cpp:231,access,access,231,interpreter/llvm-project/llvm/lib/Transforms/IPO/OpenMPOpt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/OpenMPOpt.cpp,1,['access'],['access']
Security,// A scoped hash table mapping memory locations (represented as typed; // addresses) to generation numbers at which that memory location became; // (henceforth indefinitely) invariant.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/EarlyCSE.cpp:12,hash,hash,12,interpreter/llvm-project/llvm/lib/Transforms/Scalar/EarlyCSE.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/EarlyCSE.cpp,1,['hash'],['hash']
Security,"// A sequence number, injected into IR builtin functions, to; // prevent CSE given the only difference of the function; // may just be the debuginfo metadata.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:22,inject,injected,22,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,1,['inject'],['injected']
Security,"// A simple hashing function",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TCling.h:12,hash,hashing,12,core/metacling/src/TCling.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TCling.h,1,['hash'],['hashing']
Security,// A simple offsetted value that is accessed.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/GVN.cpp:36,access,accessed,36,interpreter/llvm-project/llvm/lib/Transforms/Scalar/GVN.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/GVN.cpp,1,['access'],['accessed']
Security,"// A socket got invalid during validation",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/src/TPacketizer.cxx:31,validat,validation,31,proof/proofplayer/src/TPacketizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/src/TPacketizer.cxx,2,['validat'],['validation']
Security,"// A stencil operation to build a member access `e.m` or `e->m`, as appropriate.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/Transformer/Stencil.cpp:41,access,access,41,interpreter/llvm-project/clang/lib/Tooling/Transformer/Stencil.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/Transformer/Stencil.cpp,1,['access'],['access']
Security,// A subscript accessor must be a getter or setter.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclAttr.cpp:15,access,accessor,15,interpreter/llvm-project/clang/lib/Sema/SemaDeclAttr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclAttr.cpp,1,['access'],['accessor']
Security,"// A traversal scope limits the parts of the AST visible to certain analyses.; // RecursiveASTVisitor only visits specified children of TranslationUnitDecl.; // getParents() will only observe reachable parent edges.; //; // The scope is defined by a set of ""top-level"" declarations which will be; // visible under the TranslationUnitDecl.; // Initially, it is the entire TU, represented by {getTranslationUnitDecl()}.; //; // After setTraversalScope({foo, bar}), the exposed AST looks like:; // TranslationUnitDecl; // - foo; // - ...; // - bar; // - ...; // All other siblings of foo and bar are pruned from the tree.; // (However they are still accessible via TranslationUnitDecl->decls()); //; // Changing the scope clears the parent cache, which is expensive to rebuild.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h:467,expose,exposed,467,interpreter/llvm-project/clang/include/clang/AST/ASTContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h,2,"['access', 'expose']","['accessible', 'exposed']"
Security,// A trivial property accessor is of the form:; // { [ACCESS_SPECIFIER] [get]; [ACCESS_SPECIFIER] [set|init] }; // Track these as they do not require line breaks to be introduced.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/UnwrappedLineParser.cpp:22,access,accessor,22,interpreter/llvm-project/clang/lib/Format/UnwrappedLineParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/UnwrappedLineParser.cpp,1,['access'],['accessor']
Security,// A type representing the id generated by hashing the contents of the Frame.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/MemProf.h:43,hash,hashing,43,interpreter/llvm-project/llvm/include/llvm/ProfileData/MemProf.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/MemProf.h,1,['hash'],['hashing']
Security,"// A valid authentication exists: we are done ...",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/TAuthenticate.cxx:11,authenticat,authentication,11,net/auth/src/TAuthenticate.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/TAuthenticate.cxx,1,['authenticat'],['authentication']
Security,"// A variable array type that has an initializer can only do empty; // initialization. And because this feature is not exposed as an extension; // in C++, we can safely memset the array memory to zero.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp:119,expose,exposed,119,interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp,1,['expose'],['exposed']
Security,// AArch64 does not use section-relative relocations so any global symbol must; // be accessed via at least a linker-private symbol.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64TargetObjectFile.cpp:86,access,accessed,86,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64TargetObjectFile.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64TargetObjectFile.cpp,1,['access'],['accessed']
Security,"// AArch64 mandates that the RHS of the operation must use the smallest; // register class that could contain the size being extended from. Thus,; // if we're folding a (sext i8), we need the RHS to be a GPR32, even though; // there might not be an actual 32-bit value in the program. We can; // (harmlessly) synthesize one by injected an EXTRACT_SUBREG here.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelDAGToDAG.cpp:327,inject,injected,327,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelDAGToDAG.cpp,1,['inject'],['injected']
Security,// ABI require that for returning structs by value we copy the sret argument; // into %D0 for the return. Save the argument into a virtual register so; // that we can access it from the return points.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/M68k/M68kISelLowering.cpp:167,access,access,167,interpreter/llvm-project/llvm/lib/Target/M68k/M68kISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/M68k/M68kISelLowering.cpp,1,['access'],['access']
Security,// ACLE 6.4.3 Unaligned access supported in hardware,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/ARM.cpp:24,access,access,24,interpreter/llvm-project/clang/lib/Basic/Targets/ARM.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/ARM.cpp,1,['access'],['access']
Security,"// ADA access using Global value; // Note: for functions, address of descriptor is returned",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp:7,access,access,7,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp,1,['access'],['access']
Security,"// AFS: we cannot reuse the token because remotely the; // daemon token must be re-initialized; for PROOF, we; // just flag the entry as AFS; this allows to skip reusing; // but to keep the session key for password forwarding",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/TAuthenticate.cxx:206,password,password,206,net/auth/src/TAuthenticate.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/TAuthenticate.cxx,1,['password'],['password']
Security,"// AIX accesses everything indirectly through the TOC, which is similar to; // the GOT.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp:7,access,accesses,7,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,1,['access'],['accesses']
Security,// AMDGPU sanitizer support is experimental and controlled by -fgpu-sanitize.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp:10,sanitiz,sanitizer,10,interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,2,['sanitiz'],"['sanitize', 'sanitizer']"
Security,"// ARM EABI is the bare-metal EABI described in ARM ABI documents and; // can be accessed via -target arm-none-eabi. This is NOT GNUEABI.; // FIXME: Add a flag for bare-metal for that target and set Triple::EABI; // even for GNUEABI, so we can make a distinction here and still conform to; // the EABI on GNU (and Android) mode. This requires change in Clang, too.; // FIXME: The Darwin exception is temporary, while we move users to; // ""*-*-*-macho"" triples as quickly as possible.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMSubtarget.h:81,access,accessed,81,interpreter/llvm-project/llvm/lib/Target/ARM/ARMSubtarget.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMSubtarget.h,1,['access'],['accessed']
Security,"// ARM has 8-byte atomic accesses, but it's not clear whether we; // want to rely on them here.; // In the default case, just assume that any size up to a pointer is; // fine given adequate alignment.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:25,access,accesses,25,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,1,['access'],['accesses']
Security,"// ARM uses the least significant bit of the function pointer to select; // between ARM and Thumb modes for the callee. Instructions are always; // at least 16-bit aligned, so clear the LSB before we compute the hash; // location.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/KCFI.cpp:212,hash,hash,212,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/KCFI.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/KCFI.cpp,1,['hash'],['hash']
Security,"// ASan, HWASan and Memtag sanitizers have some instrumentation that applies; // specifically to global variables.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h:27,sanitiz,sanitizers,27,interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h,1,['sanitiz'],['sanitizers']
Security,// Access AnalysisResolver,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Pass.h:3,Access,Access,3,interpreter/llvm-project/llvm/include/llvm/Pass.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Pass.h,1,['Access'],['Access']
Security,// Access DW_AT_GNU_discriminator attribute.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVElement.h:3,Access,Access,3,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVElement.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVElement.h,1,['Access'],['Access']
Security,// Access DW_AT_extension reference.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h:3,Access,Access,3,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h,1,['Access'],['Access']
Security,"// Access DW_AT_specification, DW_AT_abstract_origin reference.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVSymbol.h:3,Access,Access,3,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVSymbol.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVSymbol.h,1,['Access'],['Access']
Security,// Access DW_LNE_set_discriminator attribute.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVLine.h:3,Access,Access,3,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVLine.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVLine.h,1,['Access'],['Access']
Security,// Access Index,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/BPF/BPFAbstractMemberAccess.cpp:3,Access,Access,3,interpreter/llvm-project/llvm/lib/Target/BPF/BPFAbstractMemberAccess.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/BPF/BPFAbstractMemberAccess.cpp,1,['Access'],['Access']
Security,// Access SystemZ-specific fields.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZConstantPoolValue.h:3,Access,Access,3,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZConstantPoolValue.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZConstantPoolValue.h,1,['Access'],['Access']
Security,"// Access a branch's collection content (not the collection itself); // through a proxy.; // Search for the branchname, determine what it contains, and wire the; // TBranchProxy representing it to us so we can access its data.; // A proxy for branch must not have been created before (i.e. check; // fProxies before calling this function!)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeReaderArray.cxx:3,Access,Access,3,tree/treeplayer/src/TTreeReaderArray.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeReaderArray.cxx,2,"['Access', 'access']","['Access', 'access']"
Security,"// Access a branch's collection content (not the collection itself); // through a proxy.; // Search for the branchname, determine what it contains, and wire the; // TBranchProxy representing it to us so we can access its data.; // Tell the branch proxy to suppress the errors for missing branch if this; // branch name is found in the list of suppressions",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeReaderArray.cxx:3,Access,Access,3,tree/treeplayer/src/TTreeReaderArray.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeReaderArray.cxx,2,"['Access', 'access']","['Access', 'access']"
Security,"// Access a vector element.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/matrix/inc/TVectorT.h:3,Access,Access,3,math/matrix/inc/TVectorT.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/inc/TVectorT.h,2,['Access'],['Access']
Security,"// Access a voxel given a 3D point P",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/inc/TGeoVoxelGrid.h:3,Access,Access,3,geom/geom/inc/TGeoVoxelGrid.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/inc/TGeoVoxelGrid.h,1,['Access'],['Access']
Security,"// Access as a vector type can work if the size of the access vector is a; // multiple of the size of the alloca's vector element type.; //; // Examples:; // - VecTy = <8 x float>, AccessTy = <4 x float> -> OK; // - VecTy = <4 x double>, AccessTy = <2 x float> -> OK; // - VecTy = <4 x double>, AccessTy = <3 x float> -> NOT OK; // - 3*32 is not a multiple of 64; //; // We could handle more complicated cases, but it'd make things a lot more; // complicated.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUPromoteAlloca.cpp:3,Access,Access,3,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUPromoteAlloca.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUPromoteAlloca.cpp,5,"['Access', 'access']","['Access', 'AccessTy', 'access']"
Security,"// Access components",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumConvolution.h:3,Access,Access,3,roofit/roofitcore/inc/RooNumConvolution.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumConvolution.h,2,['Access'],['Access']
Security,"// Access content",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/res/rpdconn.h:3,Access,Access,3,net/rpdutils/res/rpdconn.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/res/rpdconn.h,1,['Access'],['Access']
Security,"// Access control for names used in the declarations of functions; // and function templates should normally be evaluated in the context; // of the declaration, just in case it's a friend of something.; // However, this does not apply to local extern declarations.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaAccess.cpp:3,Access,Access,3,interpreter/llvm-project/clang/lib/Sema/SemaAccess.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaAccess.cpp,1,['Access'],['Access']
Security,// Access declarations.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseDeclCXX.cpp:3,Access,Access,3,interpreter/llvm-project/clang/lib/Parse/ParseDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseDeclCXX.cpp,1,['Access'],['Access']
Security,"// Access elements",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RTensor.hxx:3,Access,Access,3,tmva/tmva/inc/TMVA/RTensor.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RTensor.hxx,1,['Access'],['Access']
Security,"// Access functions",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/periodic/NdbEndfIO.h:3,Access,Access,3,test/periodic/NdbEndfIO.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/NdbEndfIO.h,3,['Access'],['Access']
Security,"// Access key (for authentication)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/inc/TS3HTTPRequest.h:3,Access,Access,3,net/net/inc/TS3HTTPRequest.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/inc/TS3HTTPRequest.h,2,"['Access', 'authenticat']","['Access', 'authentication']"
Security,"// Access key is the; // ""llvm."" + type name + "":"" + reloc type + "":"" + patched imm + ""$"" +; // access string,; // uniquely identifying one relocation.; // The prefix ""llvm."" indicates this is a temporary global, which should; // not be emitted to ELF file.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/BPF/BPFAbstractMemberAccess.cpp:3,Access,Access,3,interpreter/llvm-project/llvm/lib/Target/BPF/BPFAbstractMemberAccess.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/BPF/BPFAbstractMemberAccess.cpp,2,"['Access', 'access']","['Access', 'access']"
Security,// Access list for register. See MRI.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h:3,Access,Access,3,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h,1,['Access'],['Access']
Security,// Access must be aligned!,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeEmitter.cpp:3,Access,Access,3,interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeEmitter.cpp,2,['Access'],['Access']
Security,// Access objects from the walker context.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/InterpState.h:3,Access,Access,3,interpreter/llvm-project/clang/lib/AST/Interp/InterpState.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/InterpState.h,1,['Access'],['Access']
Security,"// Access of a parameter that's not associated with a frame isn't going; // to work out, but we can leave it to evaluateVarDeclInit to provide a; // suitable diagnostic.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp:3,Access,Access,3,interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,1,['Access'],['Access']
Security,"// Access of the ctor is access of the base inheritance, and; // cannot be overruled by the access of the using decl.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TClingMethodInfo.cxx:3,Access,Access,3,core/metacling/src/TClingMethodInfo.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TClingMethodInfo.cxx,3,"['Access', 'access']","['Access', 'access']"
Security,"// Access properties",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RTensor.hxx:3,Access,Access,3,tmva/tmva/inc/TMVA/RTensor.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RTensor.hxx,1,['Access'],['Access']
Security,// Access qualifier,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/SPIR.cpp:3,Access,Access,3,interpreter/llvm-project/clang/lib/CodeGen/Targets/SPIR.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/SPIR.cpp,1,['Access'],['Access']
Security,// Access range if the address (alloca or parameters).; // It is allowed to be empty-set when there are no known accesses.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/StackSafetyAnalysis.cpp:3,Access,Access,3,interpreter/llvm-project/llvm/lib/Analysis/StackSafetyAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/StackSafetyAnalysis.cpp,2,"['Access', 'access']","['Access', 'accesses']"
Security,"// Access referenced object(-data); //; // info [IN] Pointer to the structure called by TTree::Draw; // to extract the required object information.; // data [IN] Pointer to the referenced object; // instance [IN] Item number if ref collection; //; // return value: Pointer to the requested information",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/inc/TVirtualRefProxy.h:3,Access,Access,3,core/meta/inc/TVirtualRefProxy.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/inc/TVirtualRefProxy.h,1,['Access'],['Access']
Security,// Access size for load/store instructions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonBaseInfo.h:3,Access,Access,3,interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonBaseInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonBaseInfo.h,1,['Access'],['Access']
Security,// Access specifiers are only meaningful if both the template and the; // deduction guide are from the same scope.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp:3,Access,Access,3,interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,1,['Access'],['Access']
Security,// Access the final symbol via sym$non_lazy_ptr and generate the appropriated; // non_lazy_ptr stubs.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TargetLoweringObjectFileImpl.cpp:3,Access,Access,3,interpreter/llvm-project/llvm/lib/CodeGen/TargetLoweringObjectFileImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TargetLoweringObjectFileImpl.cpp,1,['Access'],['Access']
Security,// Access the path to this entry in the cache.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/LTO/ThinLTOCodeGenerator.cpp:3,Access,Access,3,interpreter/llvm-project/llvm/lib/LTO/ThinLTOCodeGenerator.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/LTO/ThinLTOCodeGenerator.cpp,1,['Access'],['Access']
Security,"// Access to a C/C++ class, struct, or union.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCodeComplete.cpp:3,Access,Access,3,interpreter/llvm-project/clang/lib/Sema/SemaCodeComplete.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCodeComplete.cpp,1,['Access'],['Access']
Security,"// Access to address of TLS varialbe xyz is lowered to a function call:; // __emutls_get_address( address of global variable named ""__emutls_v.xyz"" )",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:3,Access,Access,3,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,1,['Access'],['Access']
Security,"// Access to command line options, pattern and printing information.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVOptions.h:3,Access,Access,3,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVOptions.h,1,['Access'],['Access']
Security,"// Access to container size (if container reference (ie TRefArray) etc); //; // info [IN] Pointer to the structure called by TTree::Draw; // to extract the required object information.; // data [IN] Pointer to the reference object; //; // return value: The prepared pointer to the reference.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/inc/TVirtualRefProxy.h:3,Access,Access,3,core/meta/inc/TVirtualRefProxy.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/inc/TVirtualRefProxy.h,1,['Access'],['Access']
Security,"// Access to elements of sub-string with bounds checking",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TString.h:3,Access,Access,3,core/base/inc/TString.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TString.h,1,['Access'],['Access']
Security,// Access to floating-point environment.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64LegalizerInfo.cpp:3,Access,Access,3,interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64LegalizerInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64LegalizerInfo.cpp,1,['Access'],['Access']
Security,"// Access to instance",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMsgService.h:3,Access,Access,3,roofit/roofitcore/inc/RooMsgService.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMsgService.h,1,['Access'],['Access']
Security,"// Access to internals, needed for low-level control in advanced; // applications.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve/inc/TEveManager.h:3,Access,Access,3,graf3d/eve/inc/TEveManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve/inc/TEveManager.h,2,['Access'],['Access']
Security,// Access to split context.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVReader.h:3,Access,Access,3,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVReader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVReader.h,1,['Access'],['Access']
Security,"// Access to static data-members.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve/inc/TEveWindow.h:3,Access,Access,3,graf3d/eve/inc/TEveWindow.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve/inc/TEveWindow.h,1,['Access'],['Access']
Security,"// Access to the AST is no longer available after this.; // Other things that the ASTContext manages are still available, e.g.; // the SourceManager. It'd be nice if we could separate out all the; // things in ASTContext used after this point and null out the; // ASTContext, but too many various parts of the ASTContext are still; // used in various parts.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp:3,Access,Access,3,interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp,1,['Access'],['Access']
Security,"// Access to the Processor Version Register (PVR) on PowerPC is privileged,; // and so we must use an operating-system interface to determine the current; // processor type. On Linux, this is exposed through the /proc/cpuinfo file.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TargetParser/Host.cpp:3,Access,Access,3,interpreter/llvm-project/llvm/lib/TargetParser/Host.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TargetParser/Host.cpp,2,"['Access', 'expose']","['Access', 'exposed']"
Security,// Access to the pooled constant strings require an offset. Add a GEP; // before every use in order to compute this offset.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCMergeStringPool.cpp:3,Access,Access,3,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCMergeStringPool.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCMergeStringPool.cpp,1,['Access'],['Access']
Security,"// Access to the python interpreter",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/tpython/inc/TPython.h:3,Access,Access,3,bindings/tpython/inc/TPython.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/tpython/inc/TPython.h,1,['Access'],['Access']
Security,// Access to the scopes root.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVReader.h:3,Access,Access,3,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVReader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVReader.h,1,['Access'],['Access']
Security,// Access to the set of methods overridden by the given C++ method.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h:3,Access,Access,3,interpreter/llvm-project/clang/include/clang/AST/ASTContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h,1,['Access'],['Access']
Security,"// Access to the target class.; // In the event the value class cannot be specified from the reference; // itself, because the object behind the reference requires a cast,; // the return value must be NULL.; //; // data [IN] Resolved pointer to the referenced object",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/inc/TVirtualRefProxy.h:3,Access,Access,3,core/meta/inc/TVirtualRefProxy.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/inc/TVirtualRefProxy.h,1,['Access'],['Access']
Security,// Access toplevel manager,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h:3,Access,Access,3,interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManagers.h,1,['Access'],['Access']
Security,// AccessOffset or the requested field info,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/BPF/BPFAbstractMemberAccess.cpp:3,Access,AccessOffset,3,interpreter/llvm-project/llvm/lib/Target/BPF/BPFAbstractMemberAccess.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/BPF/BPFAbstractMemberAccess.cpp,1,['Access'],['AccessOffset']
Security,"// AccessPathName",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_cloning.cxx:3,Access,AccessPathName,3,tree/dataframe/test/dataframe_cloning.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_cloning.cxx,1,['Access'],['AccessPathName']
Security,"// AccessPathName() == kFALSE means file exits",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/crossvalidation/TestCrossValidationIntVar.cxx:3,Access,AccessPathName,3,tmva/tmva/test/crossvalidation/TestCrossValidationIntVar.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/crossvalidation/TestCrossValidationIntVar.cxx,2,['Access'],['AccessPathName']
Security,"// AccessProtected",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/crossinheritance.h:3,Access,AccessProtected,3,bindings/pyroot/cppyy/cppyy/test/crossinheritance.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/crossinheritance.h,1,['Access'],['AccessProtected']
Security,// Accesses from a function use the amdgcn_lds_kernel_id intrinsic which; // lowers to a read from a live in register. Emit it once in the entry; // block to spare deduplicating it later.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp:3,Access,Accesses,3,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp,1,['Access'],['Accesses']
Security,// Accesses from before the start or after the end of the object are not; // defined.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/Lint.cpp:3,Access,Accesses,3,interpreter/llvm-project/llvm/lib/Analysis/Lint.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/Lint.cpp,1,['Access'],['Accesses']
Security,"// Accesses larger than the native width are turned into cmpxchg/libcalls, so; // there is no benefit in turning such RMWs into loads, and it is actually; // harmful as it introduces a mfence.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:3,Access,Accesses,3,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['Access'],['Accesses']
Security,"// Accesses sizes are powers of two: 1, 2, 4, 8, 16.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/AddressSanitizer.cpp:3,Access,Accesses,3,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/AddressSanitizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/AddressSanitizer.cpp,3,['Access'],['Accesses']
Security,"// Accesses sizes are powers of two: 1, 2, 4, 8.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/MemorySanitizer.cpp:3,Access,Accesses,3,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/MemorySanitizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/MemorySanitizer.cpp,1,['Access'],['Accesses']
Security,// Accesses that say that the memory is more aligned than it is are not; // defined.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/Lint.cpp:3,Access,Accesses,3,interpreter/llvm-project/llvm/lib/Analysis/Lint.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/Lint.cpp,1,['Access'],['Accesses']
Security,// Accesses through fixed stack object frame indices may access a different; // fixed stack slot. Check that the object offsets + offsets match.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp:3,Access,Accesses,3,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp,2,"['Access', 'access']","['Accesses', 'access']"
Security,// Accesses to arrays are accesses to objects of their element types.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.cpp:3,Access,Accesses,3,interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.cpp,2,"['Access', 'access']","['Accesses', 'accesses']"
Security,// Accesses to objects accessible after the function returns can only be; // eliminated if the access is dead along all paths to the exit. Collect; // the blocks with killing (=completely overwriting MemoryDefs) and check if; // they cover all paths from MaybeDeadAccess to any function exit.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/DeadStoreElimination.cpp:3,Access,Accesses,3,interpreter/llvm-project/llvm/lib/Transforms/Scalar/DeadStoreElimination.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/DeadStoreElimination.cpp,3,"['Access', 'access']","['Accesses', 'access', 'accessible']"
Security,// Accesses to volatile objects are prohibited.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp:3,Access,Accesses,3,interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,1,['Access'],['Accesses']
Security,// Accesses with no TBAA information may alias with any other accesses.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/TypeBasedAliasAnalysis.cpp:3,Access,Accesses,3,interpreter/llvm-project/llvm/lib/Analysis/TypeBasedAliasAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/TypeBasedAliasAnalysis.cpp,2,"['Access', 'access']","['Accesses', 'accesses']"
Security,// Accessibility codes,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/Dwarf.h:3,Access,Accessibility,3,interpreter/llvm-project/llvm/include/llvm/BinaryFormat/Dwarf.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/Dwarf.h,2,['Access'],['Accessibility']
Security,"// Accessibility depends on the parent (class, structure).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Core/LVScope.cpp:3,Access,Accessibility,3,interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Core/LVScope.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Core/LVScope.cpp,2,['Access'],['Accessibility']
Security,"// Accessing an ivar directly is unusual. If we've done that, be more; // forgiving about what the surrounding code is allowed to do.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/RetainCountChecker/RetainCountChecker.cpp:3,Access,Accessing,3,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/RetainCountChecker/RetainCountChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/RetainCountChecker/RetainCountChecker.cpp,1,['Access'],['Accessing']
Security,// Accessor Methods for CatchSwitch stmt,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:3,Access,Accessor,3,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,2,['Access'],['Accessor']
Security,// Accessor Methods for IndirectBrInst instruction.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:3,Access,Accessor,3,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,1,['Access'],['Accessor']
Security,// Accessor Methods for Switch stmt,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:3,Access,Accessor,3,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,1,['Access'],['Accessor']
Security,// Accessor by index,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/Record.cpp:3,Access,Accessor,3,interpreter/llvm-project/llvm/lib/TableGen/Record.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/Record.cpp,1,['Access'],['Accessor']
Security,// Accessor by name,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/Record.cpp:3,Access,Accessor,3,interpreter/llvm-project/llvm/lib/TableGen/Record.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/Record.cpp,1,['Access'],['Accessor']
Security,"// Accessor for generator context, generator parameters, prototype data and projected dependents.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsMCStudyModule.h:3,Access,Accessor,3,roofit/roofitcore/inc/RooAbsMCStudyModule.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsMCStudyModule.h,1,['Access'],['Accessor']
Security,"// Accessor functions",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooWorkspace.h:3,Access,Accessor,3,roofit/roofitcore/inc/RooWorkspace.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooWorkspace.h,1,['Access'],['Accessor']
Security,// Accessor interface:,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DominanceFrontier.h:3,Access,Accessor,3,interpreter/llvm-project/llvm/include/llvm/Analysis/DominanceFrontier.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DominanceFrontier.h,1,['Access'],['Accessor']
Security,"// Accessor to the pointee",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/inc/TStreamerInfoActions.h:3,Access,Accessor,3,io/io/inc/TStreamerInfoActions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/inc/TStreamerInfoActions.h,1,['Access'],['Accessor']
Security,"// Accessor to the pointee.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/inc/TStreamerInfoActions.h:3,Access,Accessor,3,io/io/inc/TStreamerInfoActions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/inc/TStreamerInfoActions.h,1,['Access'],['Accessor']
Security,// Accessors,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h:3,Access,Accessors,3,interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h,3,['Access'],['Accessors']
Security,"// Accessors",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/inc/TGeoOpticalSurface.h:3,Access,Accessors,3,geom/geom/inc/TGeoOpticalSurface.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/inc/TGeoOpticalSurface.h,5,['Access'],['Accessors']
Security,"// Accessors can be wrapped in a try-catch block, so throwing the; // exception here is akin to checking the error.; //; // Setting fIsChecked to true also avoids a spurious warning in the RResult destructor",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/foundation/v7/inc/ROOT/RError.hxx:3,Access,Accessors,3,core/foundation/v7/inc/ROOT/RError.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/v7/inc/ROOT/RError.hxx,1,['Access'],['Accessors']
Security,// Accessors for encoding info.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Bitstream/BitCodes.h:3,Access,Accessors,3,interpreter/llvm-project/llvm/include/llvm/Bitstream/BitCodes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Bitstream/BitCodes.h,1,['Access'],['Accessors']
Security,"// Accessors for fit observables, fit model, current and initial fit parameters and NLL value; /// Return fit model observables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsMCStudyModule.h:3,Access,Accessors,3,roofit/roofitcore/inc/RooAbsMCStudyModule.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsMCStudyModule.h,1,['Access'],['Accessors']
Security,"// Accessors for fit options, generator and MCstudy configuration flags; /// Return list of fit options provided by user",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsMCStudyModule.h:3,Access,Accessors,3,roofit/roofitcore/inc/RooAbsMCStudyModule.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsMCStudyModule.h,1,['Access'],['Accessors']
Security,// Accessors for literals.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Bitstream/BitCodes.h:3,Access,Accessors,3,interpreter/llvm-project/llvm/include/llvm/Bitstream/BitCodes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Bitstream/BitCodes.h,1,['Access'],['Accessors']
Security,// Accessors for the remarks from the first file.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-remarkutil/RemarkSizeDiff.cpp:3,Access,Accessors,3,interpreter/llvm-project/llvm/tools/llvm-remarkutil/RemarkSizeDiff.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-remarkutil/RemarkSizeDiff.cpp,1,['Access'],['Accessors']
Security,// Accessors for the remarks from the second file.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-remarkutil/RemarkSizeDiff.cpp:3,Access,Accessors,3,interpreter/llvm-project/llvm/tools/llvm-remarkutil/RemarkSizeDiff.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-remarkutil/RemarkSizeDiff.cpp,1,['Access'],['Accessors']
Security,"// Accessors to attributes",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsArg.h:3,Access,Accessors,3,roofit/roofitcore/inc/RooAbsArg.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsArg.h,1,['Access'],['Accessors']
Security,// Accessors to get at the underlying iterators...,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstIterator.h:3,Access,Accessors,3,interpreter/llvm-project/llvm/include/llvm/IR/InstIterator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstIterator.h,1,['Access'],['Accessors']
Security,"// Accessors to transient attributes",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsArg.h:3,Access,Accessors,3,roofit/roofitcore/inc/RooAbsArg.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsArg.h,1,['Access'],['Accessors']
Security,// Accessors.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/DIE.h:3,Access,Accessors,3,interpreter/llvm-project/llvm/include/llvm/CodeGen/DIE.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/DIE.h,10,['Access'],['Accessors']
Security,"// Accessors. isEmpty() returns true for both a default-constructed DocNode; // that has no associated Document, and the result of getEmptyNode(), which; // does have an associated document.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/MsgPackDocument.h:3,Access,Accessors,3,interpreter/llvm-project/llvm/include/llvm/BinaryFormat/MsgPackDocument.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/MsgPackDocument.h,1,['Access'],['Accessors']
Security,// Accessors...,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ilist_iterator.h:3,Access,Accessors,3,interpreter/llvm-project/llvm/include/llvm/ADT/ilist_iterator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ilist_iterator.h,2,['Access'],['Accessors']
Security,// Accessors.; //,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:3,Access,Accessors,3,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,1,['Access'],['Accessors']
Security,// Accessors.; /// \return true iff this is a register-indirect location.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MachineLocation.h:3,Access,Accessors,3,interpreter/llvm-project/llvm/include/llvm/MC/MachineLocation.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MachineLocation.h,1,['Access'],['Accessors']
Security,"// Accessors; /// Return MINUIT status code",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFitResult.h:3,Access,Accessors,3,roofit/roofitcore/inc/RooFitResult.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFitResult.h,1,['Access'],['Accessors']
Security,"// According to the AACPS:; // When a volatile bit-field is written, and its container does not overlap; // with any non-bit-field member, its container must be read exactly once; // and written exactly once using the access width appropriate to the type; // of the container. The two accesses are not atomic.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:218,access,access,218,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,2,['access'],"['access', 'accesses']"
Security,"// According to the ELF gABI: ""The number of symbol table entries should; // equal nchain"". Check to see if the DT_HASH hash table nchain value; // conflicts with the number of symbols in the dynamic symbol table; // according to the section header.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp:120,hash,hash,120,interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp,1,['hash'],['hash']
Security,"// Actually access the file",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TDataSetManager.cxx:12,access,access,12,proof/proof/src/TDataSetManager.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TDataSetManager.cxx,1,['access'],['access']
Security,// Add Key-Value-Coding and Key-Value-Observing accessor methods for all of; // the properties in this class and its categories.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCodeComplete.cpp:48,access,accessor,48,interpreter/llvm-project/clang/lib/Sema/SemaCodeComplete.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCodeComplete.cpp,1,['access'],['accessor']
Security,"// Add a redundant copy of the callee global which will not be legalized, as; // we need direct access to the callee later.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp:96,access,access,96,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp,1,['access'],['access']
Security,// Add access group metadata to memory-access instructions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp:7,access,access,7,interpreter/llvm-project/llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp,2,['access'],['access']
Security,// Add accessibility info if available.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfUnit.cpp:7,access,accessibility,7,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfUnit.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfUnit.cpp,1,['access'],['accessibility']
Security,// Add all of the attributes for \param Die to the hash.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DIEHash.cpp:51,hash,hash,51,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DIEHash.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DIEHash.cpp,1,['hash'],['hash']
Security,// Add all the dso symbols to the table of symbols to expose.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp:54,expose,expose,54,interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp,1,['expose'],['expose']
Security,// Add booleans to ID and uses it to calculate the hash.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ODRHash.h:51,hash,hash,51,interpreter/llvm-project/clang/include/clang/AST/ODRHash.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ODRHash.h,1,['hash'],['hash']
Security,// Add default validator version if not set.; // TODO: remove this once read validator version from validator.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/HLSL.cpp:15,validat,validator,15,interpreter/llvm-project/clang/lib/Driver/ToolChains/HLSL.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/HLSL.cpp,3,['validat'],['validator']
Security,"// Add group info in the password firdl, if any",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx:25,password,password,25,proof/proof/src/TProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx,2,['password'],['password']
Security,"// Add module metadata for return address signing (ignoring; // non-leaf/all) and stack tagging. These are actually turned on by function; // attributes, but we use module metadata to emit build attributes. This is; // needed for LTO, where the function attributes are inside bitcode; // serialised into a global variable by the time build attributes are; // emitted, so we can't access them. LTO objects could be compiled with; // different flags therefore module flags are set to ""Min"" behavior to achieve; // the same end result of the normal build where e.g BTI is off if any object; // doesn't support it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:380,access,access,380,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,1,['access'],['access']
Security,// Add offset to the current pointer to access the argument.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/Hexagon.cpp:40,access,access,40,interpreter/llvm-project/clang/lib/CodeGen/Targets/Hexagon.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/Hexagon.cpp,1,['access'],['access']
Security,"// Add phi defs even if they are covered by subsequent defs. This is; // for cases where the reached use is not covered by any of the defs; // encountered so far: the phi def is needed to expose the liveness; // of that use to the entry of the block.; // Example:; // phi d1<R3>(,d2,), ... Phi def d1 is covered by d2.; // d2<R3>(d1,,u3), ...; // ..., u3<D1>(d2) This use needs to be live on entry.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RDFLiveness.cpp:188,expose,expose,188,interpreter/llvm-project/llvm/lib/CodeGen/RDFLiveness.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RDFLiveness.cpp,1,['expose'],['expose']
Security,// Add precise dependencies against all previously seen memory; // accesses mapped to the same Value(s).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ScheduleDAGInstrs.cpp:67,access,accesses,67,interpreter/llvm-project/llvm/lib/CodeGen/ScheduleDAGInstrs.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ScheduleDAGInstrs.cpp,1,['access'],['accesses']
Security,"// Add runtime flag for PS4/PS5 when PGO, coverage, or sanitizers are enabled.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:55,sanitiz,sanitizers,55,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,1,['sanitiz'],['sanitizers']
Security,"// Add sanitizer ignorelists as extra dependencies.; // They won't be discovered by the regular preprocessor, so; // we let make / ninja to know about this implicit dependency.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/CompilerInvocation.cpp:7,sanitiz,sanitizer,7,interpreter/llvm-project/clang/lib/Frontend/CompilerInvocation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/CompilerInvocation.cpp,1,['sanitiz'],['sanitizer']
Security,"// Add statically injected extra arguments, usually coming from rootcling.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TCling.cxx:18,inject,injected,18,core/metacling/src/TCling.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TCling.cxx,1,['inject'],['injected']
Security,"// Add the ROP protection Hash Store instruction.; // NOTE: This is technically a violation of the ABI. The hash can be saved; // up to 512 bytes into the Protected Zone. This can be outside of the; // initial 288 byte volatile program storage region in the Protected Zone.; // However, this restriction will be removed in an upcoming revision of the; // ABI.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCFrameLowering.cpp:26,Hash,Hash,26,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCFrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCFrameLowering.cpp,2,"['Hash', 'hash']","['Hash', 'hash']"
Security,"// Add the compiler-rt library directories if they exist to help; // the linker find the various sanitizer, builtin, and profiling runtimes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/MinGW.cpp:97,sanitiz,sanitizer,97,interpreter/llvm-project/clang/lib/Driver/ToolChains/MinGW.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/MinGW.cpp,1,['sanitiz'],['sanitizer']
Security,"// Add the compiler-rt library directories to libpath if they exist to help; // the linker find the various sanitizer, builtin, and profiling runtimes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/MSVC.cpp:108,sanitiz,sanitizer,108,interpreter/llvm-project/clang/lib/Driver/ToolChains/MSVC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/MSVC.cpp,1,['sanitiz'],['sanitizer']
Security,"// Add the edge only when the callee has body. We jump to the beginning; // of the *declaration*, however we expect it to be followed by the; // body. This isn't the case for autosynthesized property accessors in; // Objective-C. No need for a similar extra check for CallExit points; // because the exit edge comes from a statement (i.e. return),; // not from declaration.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/BugReporter.cpp:200,access,accessors,200,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/BugReporter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/BugReporter.cpp,1,['access'],['accessors']
Security,// Add the element access.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp:19,access,access,19,interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp,1,['access'],['access']
Security,"// Add the freshly created function to llvm.compiler.used, similar to as it; // is done in InjectTLIMappings.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ReplaceWithVeclib.cpp:91,Inject,InjectTLIMappings,91,interpreter/llvm-project/llvm/lib/CodeGen/ReplaceWithVeclib.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ReplaceWithVeclib.cpp,1,['Inject'],['InjectTLIMappings']
Security,"// Add the function's symbol to the .gfids section.; // Note: For dllimport functions, MSVC sometimes does not add this symbol; // to the .gfids section, but only adds the corresponding ""__imp_"" symbol; // to the .giats section. Here we always add the symbol to the .gfids; // section, since this does not introduce security risks.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/WinCFGuard.cpp:316,secur,security,316,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/WinCFGuard.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/WinCFGuard.cpp,1,['secur'],['security']
Security,// Add the given element to the integrity map.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Core/LVReader.cpp:32,integrity,integrity,32,interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Core/LVReader.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Core/LVReader.cpp,1,['integrity'],['integrity']
Security,// Add the intermediate negates to the redo list as processing them later; // could expose more reassociating opportunities.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/Reassociate.cpp:84,expose,expose,84,interpreter/llvm-project/llvm/lib/Transforms/Scalar/Reassociate.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/Reassociate.cpp,1,['expose'],['expose']
Security,// Add the normal accessor -(type)key.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCodeComplete.cpp:18,access,accessor,18,interpreter/llvm-project/clang/lib/Sema/SemaCodeComplete.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCodeComplete.cpp,1,['access'],['accessor']
Security,"// Add to hash table",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooLinkedList.cxx:10,hash,hash,10,roofit/roofitcore/src/RooLinkedList.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooLinkedList.cxx,1,['hash'],['hash']
Security,// Additional locations accessed if the SCC accesses argmem.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/FunctionAttrs.cpp:24,access,accessed,24,interpreter/llvm-project/llvm/lib/Transforms/IPO/FunctionAttrs.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/FunctionAttrs.cpp,2,['access'],"['accessed', 'accesses']"
Security,// Address sanitizer specific lowering for X86.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86AsmPrinter.h:11,sanitiz,sanitizer,11,interpreter/llvm-project/llvm/lib/Target/X86/X86AsmPrinter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86AsmPrinter.h,1,['sanitiz'],['sanitizer']
Security,"// Addressable stack objects are accessed using neg. offsets from; // %fp, or positive offsets from %sp.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Sparc/SparcFrameLowering.cpp:33,access,accessed,33,interpreter/llvm-project/llvm/lib/Target/Sparc/SparcFrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Sparc/SparcFrameLowering.cpp,1,['access'],['accessed']
Security,// Adds sections from IHEX data file. Data should have been; // fully validated by this time.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.cpp:70,validat,validated,70,interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.cpp,1,['validat'],['validated']
Security,// Adjust costs to account for sign and authentication instructions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMBaseInstrInfo.cpp:40,authenticat,authentication,40,interpreter/llvm-project/llvm/lib/Target/ARM/ARMBaseInstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMBaseInstrInfo.cpp,1,['authenticat'],['authentication']
Security,// Adjust the possible access behavior based on the information on the; // argument.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp:23,access,access,23,interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp,1,['access'],['access']
Security,"// After calling deleteBB or callbackDeleteBB under Lazy UpdateStrategy,; // validateDeleteBB() removes all instructions of DelBB and adds an; // UnreachableInst as its terminator. So we check whether the BasicBlock to; // delete only has an UnreachableInst inside.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DomTreeUpdater.cpp:77,validat,validateDeleteBB,77,interpreter/llvm-project/llvm/lib/Analysis/DomTreeUpdater.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DomTreeUpdater.cpp,1,['validat'],['validateDeleteBB']
Security,"// After deleting incoming memory access MA, the incoming accesses order may; // be changed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemorySSA.h:34,access,access,34,interpreter/llvm-project/llvm/include/llvm/Analysis/MemorySSA.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemorySSA.h,2,['access'],"['access', 'accesses']"
Security,"// After the item is in the cache, we can do further initialization which; // is then allowed to access the cache.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/SymbolCache.h:97,access,access,97,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/SymbolCache.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/SymbolCache.h,1,['access'],['access']
Security,"// Aggregates and complex variables are accessed by reference. All we; // need to do is realign the value, if requested. Also, if the address; // may be aliased, copy it to ensure that the parameter variable is; // mutable and has a unique adress, as C requires.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:40,access,accessed,40,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,1,['access'],['accessed']
Security,// Alias Set iteration - Allow access to all of the memory locations which are; // part of this alias set.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/AliasSetTracker.h:31,access,access,31,interpreter/llvm-project/llvm/include/llvm/Analysis/AliasSetTracker.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/AliasSetTracker.h,1,['access'],['access']
Security,"// Alias tracker should have pointers of same data type.; //; // FIXME: check no longer effective since opaque pointers?; // If the intent is to check that the memory accesses use the; // same data type (such that LICM can promote them), then we; // can no longer see this from the pointer value types.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopVersioningLICM.cpp:167,access,accesses,167,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopVersioningLICM.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopVersioningLICM.cpp,1,['access'],['accesses']
Security,// All CPUs that implement SSE4.2 or SSE4A support unaligned accesses of; // 16-bytes and under that are reasonably fast. These features were; // introduced with Intel's Nehalem/Silvermont and AMD's Family10h; // micro-architectures respectively.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86Subtarget.cpp:61,access,accesses,61,interpreter/llvm-project/llvm/lib/Target/X86/X86Subtarget.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86Subtarget.cpp,1,['access'],['accesses']
Security,// All LDS variables accessed indirectly have now been partitioned into; // the distinct lowering strategies.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp:21,access,accessed,21,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp,1,['access'],['accessed']
Security,// All accesses in To used to be in From. Move to end and update access lists.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/MemorySSAUpdater.cpp:7,access,accesses,7,interpreter/llvm-project/llvm/lib/Analysis/MemorySSAUpdater.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/MemorySSAUpdater.cpp,2,['access'],"['access', 'accesses']"
Security,// All atomic operations have an overload which takes a pointer to a volatile; // 'A'. We shouldn't let the volatile-ness of the pointee-type inject itself; // into the result or the other operands. Similarly atomic_load takes a; // pointer to a const 'A'.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp:142,inject,inject,142,interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp,1,['inject'],['inject']
Security,"// All defs/phis from outside BB that are used in BB, are valid uses in P1.; // Since those defs/phis must have dominated BB, and also dominate P1.; // Defs from BB being used in BB will be replaced with the cloned defs from; // VM. The uses of BB's Phi (if it exists) in BB will be replaced by the; // incoming def into the Phi from P1.; // Instructions cloned into the predecessor are in practice sometimes; // simplified, so disable the use of the template, and create an access from; // scratch.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/MemorySSAUpdater.cpp:475,access,access,475,interpreter/llvm-project/llvm/lib/Analysis/MemorySSAUpdater.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/MemorySSAUpdater.cpp,1,['access'],['access']
Security,"// All functions in the module, ordered by hash. Functions with a unique; // hash value are easily eliminated.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/MergeFunctions.cpp:43,hash,hash,43,interpreter/llvm-project/llvm/lib/Transforms/IPO/MergeFunctions.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/MergeFunctions.cpp,2,['hash'],['hash']
Security,"// All of the below API is for querying properties of the ""outer type"", i.e.; // the type that contains the indexed type. Most of the time this is just; // the type that was visited immediately prior to the indexed type, but for; // the first element this is an unbounded array of the GEP's source element; // type, for which there is no clearly corresponding IR type (we've; // historically used a pointer type as the outer type in this case, but; // pointers will soon lose their element type).; //; // FIXME: Most current users of this class are just interested in byte; // offsets (a few need to know whether the outer type is a struct because; // they are trying to replace a constant with a variable, which is only; // legal for arrays, e.g. canReplaceOperandWithVariable in SimplifyCFG.cpp);; // we should provide a more minimal API here that exposes not much more than; // that.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GetElementPtrTypeIterator.h:850,expose,exposes,850,interpreter/llvm-project/llvm/include/llvm/IR/GetElementPtrTypeIterator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GetElementPtrTypeIterator.h,1,['expose'],['exposes']
Security,// All of the implementation details of actually computing the various hash; // code values are held within this namespace. These routines are included in; // the header file mainly to allow inlining and constant propagation.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h:71,hash,hash,71,interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,1,['hash'],['hash']
Security,// All other pointers are assumed audited as harmless.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ARCMigrate/ObjCMT.cpp:34,audit,audited,34,interpreter/llvm-project/clang/lib/ARCMigrate/ObjCMT.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ARCMigrate/ObjCMT.cpp,1,['audit'],['audited']
Security,"// All relocation sections denote relocations to apply to another section.; // However, some relocation sections use a dynamic symbol table and others use; // a regular symbol table. Because the types of the two symbol tables differ in; // our system (because they should behave differently) we can't uniformly; // represent all relocations with the same base class if we expose an interface; // that mentions the symbol table type. So we split the two base types into two; // different classes, one which handles the section the relocation is applied to; // and another which handles the symbol table type. The symbol table type is; // taken as a type parameter to the class (see RelocSectionWithSymtabBase).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.h:372,expose,expose,372,interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.h,1,['expose'],['expose']
Security,// All sections with the GPREL flag are grouped into a global data area; // for faster accesses,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/ELF.h:87,access,accesses,87,interpreter/llvm-project/llvm/include/llvm/BinaryFormat/ELF.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/ELF.h,1,['access'],['accesses']
Security,// All x86 ABIs require that for returning structs by value we copy the; // sret argument into %rax/%eax (depending on ABI) for the return. Save; // the argument into a virtual register so that we can access it from the; // return points.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLoweringCall.cpp:201,access,access,201,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLoweringCall.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLoweringCall.cpp,1,['access'],['access']
Security,// Alloca already accessed as vector.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUPromoteAlloca.cpp:18,access,accessed,18,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUPromoteAlloca.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUPromoteAlloca.cpp,1,['access'],['accessed']
Security,"// Allocate a new CGBitFieldInfo object to describe this access.; //; // FIXME: This is incredibly wasteful, these should be uniqued or part of some; // layout object. However, this is blocked on other cleanups to the; // Objective-C code, so for now we just live with allocating a bunch of these; // objects.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.cpp:57,access,access,57,interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.cpp,1,['access'],['access']
Security,// Allocate new entries&hashes arrays.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h:24,hash,hashes,24,interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h,1,['hash'],['hashes']
Security,"// Allocate the mask array for the node out of the BumpPtrAllocator, since; // SDNode doesn't have access to it. This memory will be ""leaked"" when; // the node is deallocated, but recovered when the NodeAllocator is released.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:99,access,access,99,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,1,['access'],['access']
Security,// Allocating variables that are accessed indirectly so that a lookup of; // this struct instance can find them from nested functions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp:33,access,accessed,33,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp,1,['access'],['accessed']
Security,// Allow access to HasValueHandle.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Value.h:9,access,access,9,interpreter/llvm-project/llvm/include/llvm/IR/Value.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Value.h,1,['access'],['access']
Security,// Allow access to IsUsedByMD.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Value.h:9,access,access,9,interpreter/llvm-project/llvm/include/llvm/IR/Value.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Value.h,1,['access'],['access']
Security,"// Allow access to branches/leaves as if they were data members Returns a; // Python tuple where the first element is either the desired CPyCppyy proxy,; // or an address that still needs to be wrapped by the caller in a proxy using; // cppyy.ll.cast. In the latter case, the second tuple element is the target; // type name. Otherwise, the second element is an empty string.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/src/TTreePyz.cxx:9,access,access,9,bindings/pyroot/pythonizations/src/TTreePyz.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/src/TTreePyz.cxx,1,['access'],['access']
Security,// Allow access to the initial visit method.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopUnrollAnalyzer.h:9,access,access,9,interpreter/llvm-project/llvm/include/llvm/Analysis/LoopUnrollAnalyzer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopUnrollAnalyzer.h,1,['access'],['access']
Security,"// Allow fast access mode in getVal() and proxies; // Owned components",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsArg.h:14,access,access,14,roofit/roofitcore/inc/RooAbsArg.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsArg.h,1,['access'],['access']
Security,// Allow memory accesses to be unaligned.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/LoongArchTargetParser.h:16,access,accesses,16,interpreter/llvm-project/llvm/include/llvm/TargetParser/LoongArchTargetParser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/LoongArchTargetParser.h,1,['access'],['accesses']
Security,// Allow multi-threaded access if there is a .dwp file as the CU index and; // TU index might be accessed from multiple threads.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/DWARF/DWARFContext.cpp:24,access,access,24,interpreter/llvm-project/llvm/lib/DebugInfo/DWARF/DWARFContext.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/DWARF/DWARFContext.cpp,2,['access'],"['access', 'accessed']"
Security,"// Almost a POD, but needs to call the constructors for the scoped hash; // tables so that a new scope gets pushed on. These are RAII so that the; // scope gets popped when the NodeScope is destroyed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/EarlyCSE.cpp:67,hash,hash,67,interpreter/llvm-project/llvm/lib/Transforms/Scalar/EarlyCSE.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/EarlyCSE.cpp,1,['hash'],['hash']
Security,"// Already have an entry with this inode, return it.; // FIXME: This hack ensures that `getDir()` will use the path that was; // used to lookup this file, even if we found a file by different path; // first. This is required in order to find a module's structure when its; // headers/module map are mapped in the VFS.; //; // See above for how this will eventually be removed. `IsVFSMapped`; // *cannot* be narrowed to `ExposesExternalVFSPath` as crash reproducers; // also depend on this logic and they have `use-external-paths: false`.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/FileManager.cpp:420,Expose,ExposesExternalVFSPath,420,interpreter/llvm-project/clang/lib/Basic/FileManager.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/FileManager.cpp,1,['Expose'],['ExposesExternalVFSPath']
Security,"// Also check for these shuffles through CONCAT_VECTORS: we canonicalize; // shuffles that produce a result larger than their operands with:; // shuffle(concat(v1, undef), concat(v2, undef)); // ->; // shuffle(concat(v1, v2), undef); // because we can access quad vectors (see PerformVECTOR_SHUFFLECombine).; //; // This is useful in the general case, but there are special cases where; // native shuffles produce larger results: the two-result ops.; //; // Look through the concat when lowering them:; // shuffle(concat(v1, v2), undef); // ->; // concat(VZIP(v1, v2):0, :1); //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp:252,access,access,252,interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,1,['access'],['access']
Security,// Also look up property declaration in class extension whose one of its; // accessors is implemented by this method.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaObjCProperty.cpp:77,access,accessors,77,interpreter/llvm-project/clang/lib/Sema/SemaObjCProperty.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaObjCProperty.cpp,1,['access'],['accessors']
Security,// Also push in last position the remainder of the last division: it will be; // the access function of the innermost dimension.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/Delinearization.cpp:85,access,access,85,interpreter/llvm-project/llvm/lib/Analysis/Delinearization.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/Delinearization.cpp,1,['access'],['access']
Security,"// Although MachO 32-bit targets do not explicitly have a GOTPCREL relocation; // as 64-bit do, we replace the GOT equivalent by accessing the final symbol; // through a non_lazy_ptr stub instead. One advantage is that it allows the; // computation of deltas to final external symbols. Example:; //; // _extgotequiv:; // .long _extfoo; //; // _delta:; // .long _extgotequiv-_delta; //; // is transformed to:; //; // _delta:; // .long L_extfoo$non_lazy_ptr-(_delta+0); //; // .section __IMPORT,__pointers,non_lazy_symbol_pointers; // L_extfoo$non_lazy_ptr:; // .indirect_symbol _extfoo; // .long 0; //; // The indirect symbol table (and sections of non_lazy_symbol_pointers type); // may point to both local (same translation unit) and global (other; // translation units) symbols. Example:; //; // .section __DATA,__pointers,non_lazy_symbol_pointers; // L1:; // .indirect_symbol _myGlobal; // .long 0; // L2:; // .indirect_symbol _myLocal; // .long _myLocal; //; // If the symbol is local, instead of the symbol's index, the assembler; // places the constant INDIRECT_SYMBOL_LOCAL into the indirect symbol table.; // Then the linker will notice the constant in the table and will look at the; // content of the symbol.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TargetLoweringObjectFileImpl.cpp:129,access,accessing,129,interpreter/llvm-project/llvm/lib/CodeGen/TargetLoweringObjectFileImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TargetLoweringObjectFileImpl.cpp,1,['access'],['accessing']
Security,"// Although PTX has direct support for struct type and array type and LLVM IR; // is very similar to PTX, the LLVM CodeGen does not support for targets that; // support these high level field accesses. Structs and arrays are lowered; // into arrays of bytes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXAsmPrinter.cpp:192,access,accesses,192,interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXAsmPrinter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXAsmPrinter.cpp,1,['access'],['accesses']
Security,"// Although PTX has direct support for struct type and array type and; // LLVM IR is very similar to PTX, the LLVM CodeGen does not support for; // targets that support these high level field accesses. Structs, arrays; // and vectors are lowered into arrays of bytes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXAsmPrinter.cpp:192,access,accesses,192,interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXAsmPrinter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXAsmPrinter.cpp,1,['access'],['accesses']
Security,"// Although the initializer is not allocating a buffer, the pointer; // variable could still be used in buffer access operations.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp:111,access,access,111,interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp,1,['access'],['access']
Security,// Always rebuild; we don't know if this needs to be injected into a new; // context or if the promise type has changed.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/TreeTransform.h:53,inject,injected,53,interpreter/llvm-project/clang/lib/Sema/TreeTransform.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/TreeTransform.h,4,['inject'],['injected']
Security,"// Always skip the injected-class-name, along with any; // redeclarations of nested classes, since both would cause us; // to try to instantiate the members of a class twice.; // Skip closure types; they'll get instantiated when we instantiate; // the corresponding lambda-expression.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiate.cpp:19,inject,injected-class-name,19,interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiate.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiate.cpp,1,['inject'],['injected-class-name']
Security,// Always update LastRef to the last name by which a file was accessed.; // FIXME: Neither this nor always using the first reference is correct; we; // want to switch towards a design where we return a FileName object that; // encapsulates both the name by which the file was accessed and the; // corresponding FileEntry.; // FIXME: LastRef should be removed from FileEntry once all clients adopt; // FileEntryRef.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/FileManager.cpp:62,access,accessed,62,interpreter/llvm-project/clang/lib/Basic/FileManager.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/FileManager.cpp,2,['access'],['accessed']
Security,"// Amount to shift hash values to avoid clustering",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx:19,hash,hash,19,core/base/src/TString.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx,1,['hash'],['hash']
Security,// An access to GOT or the Constant Pool is aligned.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelDAGToDAG.cpp:6,access,access,6,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelDAGToDAG.cpp,1,['access'],['access']
Security,// An authenticated pointer.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/MachO.h:6,authenticat,authenticated,6,interpreter/llvm-project/llvm/include/llvm/BinaryFormat/MachO.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/MachO.h,1,['authenticat'],['authenticated']
Security,"// An existing authentication has been re-used: retrieve; // the related security context",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/DaemonUtils.cxx:15,authenticat,authentication,15,net/rpdutils/src/DaemonUtils.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/DaemonUtils.cxx,2,"['authenticat', 'secur']","['authentication', 'security']"
Security,"// An extern weak symbol may be undefined, i.e. have value 0, which may; // not be within 2GiB of PC, so use GOT-indirect addressing to access the; // symbol. This generates the pattern (PseudoLGA sym), which expands to; // (ld (addi (auipc %got_pcrel_hi(sym)) %pcrel_lo(auipc))).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp:136,access,access,136,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,2,['access'],['access']
Security,"// An implicit deduction guide is semantically in the context enclosing the; // class template, but for access purposes behaves like the constructor; // from which it was produced.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaAccess.cpp:104,access,access,104,interpreter/llvm-project/clang/lib/Sema/SemaAccess.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaAccess.cpp,1,['access'],['access']
Security,"// An inbounds getelementptr that is a AddRec with a unit stride; // cannot wrap per definition. If it did, the result would be poison; // and any memory access dependent on it would be immediate UB; // when executed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp:154,access,access,154,interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp,1,['access'],['access']
Security,// An injected-class-name of a class template (specialization) is valid; // as a template or as a non-template.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:6,inject,injected-class-name,6,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['inject'],['injected-class-name']
Security,// An instruction known never to access memory won't have a volatile access.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineInstr.cpp:33,access,access,33,interpreter/llvm-project/llvm/lib/CodeGen/MachineInstr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineInstr.cpp,2,['access'],['access']
Security,// An instruction without memory operands may access anything. Be; // conservative and return an empty list.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:46,access,access,46,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,1,['access'],['access']
Security,"// Analyze interleaved accesses and collect them into interleaved load and; // store groups.; //; // When generating code for an interleaved load group, we effectively hoist all; // loads in the group to the location of the first load in program order. When; // generating code for an interleaved store group, we sink all stores to the; // location of the last store. This code motion can change the order of load; // and store instructions and may break dependences.; //; // The code generation strategy mentioned above ensures that we won't violate; // any write-after-read (WAR) dependences.; //; // E.g., for the WAR dependence: a = A[i]; // (1); // A[i] = b; // (2); //; // The store group of (2) is always inserted at or below (2), and the load; // group of (1) is always inserted at or above (1). Thus, the instructions will; // never be reordered. All other dependences are checked to ensure the; // correctness of the instruction reordering.; //; // The algorithm visits all memory accesses in the loop in bottom-up program; // order. Program order is established by traversing the blocks in the loop in; // reverse postorder when collecting the accesses.; //; // We visit the memory accesses in bottom-up order because it can simplify the; // construction of store groups in the presence of write-after-write (WAW); // dependences.; //; // E.g., for the WAW dependence: A[i] = a; // (1); // A[i] = b; // (2); // A[i + 1] = c; // (3); //; // We will first create a store group with (3) and (2). (1) can't be added to; // this group because it and (2) are dependent. However, (1) can be grouped; // with other accesses that may precede it in program order. Note that a; // bottom-up order does not imply that WAW dependences should not be checked.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/VectorUtils.cpp:23,access,accesses,23,interpreter/llvm-project/llvm/lib/Analysis/VectorUtils.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/VectorUtils.cpp,5,['access'],['accesses']
Security,// Analyze interleaved memory accesses.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:30,access,accesses,30,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,1,['access'],['accesses']
Security,// Analyze the access pattern of the vector to see if we can extract; // two subvectors and do the shuffle.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:15,access,access,15,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,1,['access'],['access']
Security,"// And except when the sock is valid; this typically; // happens when talking to a old server, because the; // the parallel socket system is open before authentication",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TSocket.cxx:153,authenticat,authentication,153,net/net/src/TSocket.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TSocket.cxx,1,['authenticat'],['authentication']
Security,// Android provides a fixed TLS slot for sanitizers. See TLS_SLOT_SANITIZER; // in Bionic's libc/private/bionic_tls.h.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/HWAddressSanitizer.cpp:41,sanitiz,sanitizers,41,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/HWAddressSanitizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/HWAddressSanitizer.cpp,1,['sanitiz'],['sanitizers']
Security,"// Annotate the load as an invariant load iff inside an instance method; // and ivar belongs to instance method's class and one of its super class.; // This check is needed because the ivar offset is a lazily; // initialised value that may depend on objc_msgSend to perform a fixup on; // the first message dispatch.; //; // An additional opportunity to mark the load as invariant arises when the; // base of the ivar access is a parameter to an Objective C method.; // However, because the parameters are not available in the current; // interface, we cannot perform this check.; //; // Note that for direct methods, because objc_msgSend is skipped,; // and that the method may be inlined, this optimization actually; // can't be performed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:418,access,access,418,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,1,['access'],['access']
Security,// Annotation attributes are the only attributes allowed after an access; // specifier.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclAttr.cpp:66,access,access,66,interpreter/llvm-project/clang/lib/Sema/SemaDeclAttr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclAttr.cpp,1,['access'],['access']
Security,"// Anticipate the undefines.; // Suppose to have a namespace called ""declarations"" used in R5 for template; // instantiations in the header given to genreflex.; // Now, in this namespace, objects with some names, typically dummy, will be; // present.; // If you give such headers to cling to parse, problems will occour, as the; // names appear multiple times. One possible solution is to get out of this; // with preprocessor defines given to genreflex, redefining ""declarations""; // to a hash or <project>_<package> via the build system.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/TModuleGenerator.cxx:490,hash,hash,490,core/dictgen/src/TModuleGenerator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/TModuleGenerator.cxx,1,['hash'],['hash']
Security,// Any MIMG instructions that use tfe or lwe require an initialization of the; // result register that will be written in the case of a memory access failure.; // The required code is also added to tie this init code to the result of the; // img instruction.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp:143,access,access,143,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp,1,['access'],['access']
Security,// Any access specifier is fine.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:7,access,access,7,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['access'],['access']
Security,// Any corrections added below will be validated in subsequent; // iterations of the main while() loop over the Consumer's contents.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaLookup.cpp:39,validat,validated,39,interpreter/llvm-project/clang/lib/Sema/SemaLookup.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaLookup.cpp,1,['validat'],['validated']
Security,"// Any intermediate directories we create should be accessible by; // the owner, even if Perms says otherwise for the final path.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp:52,access,accessible,52,interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp,1,['access'],['accessible']
Security,"// Any register accessible as [r]h: a, b, c, and d.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/X86.cpp:16,access,accessible,16,interpreter/llvm-project/clang/lib/Basic/Targets/X86.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/X86.cpp,1,['access'],['accessible']
Security,"// Any register accessible as [r]l: a, b, c, and d.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/X86.cpp:16,access,accessible,16,interpreter/llvm-project/clang/lib/Basic/Targets/X86.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/X86.cpp,1,['access'],['accessible']
Security,"// Append the appropriate access operation (syntactically) to `E`, assuming `E`; // is a non-pointer value.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/Transformer/SourceCodeBuilders.cpp:26,access,access,26,interpreter/llvm-project/clang/lib/Tooling/Transformer/SourceCodeBuilders.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/Transformer/SourceCodeBuilders.cpp,1,['access'],['access']
Security,"// Append the appropriate access operation (syntactically) to `E`, assuming `E`; // is a pointer value.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/Transformer/SourceCodeBuilders.cpp:26,access,access,26,interpreter/llvm-project/clang/lib/Tooling/Transformer/SourceCodeBuilders.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/Transformer/SourceCodeBuilders.cpp,1,['access'],['access']
Security,// Append the declaration's access if applicable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaAccess.cpp:28,access,access,28,interpreter/llvm-project/clang/lib/Sema/SemaAccess.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaAccess.cpp,1,['access'],['access']
Security,// Apply sanitizer attributes to the function.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp:9,sanitiz,sanitizer,9,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp,1,['sanitiz'],['sanitizer']
Security,// Argument - `sizeof_kmp_task_t` (TaskSize); // Tasksize refers to the size in bytes of kmp_task_t data structure; // including private vars accessed in task.; // TODO: add kmp_task_t_with_privates (privates),MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp:142,access,accessed,142,interpreter/llvm-project/llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp,1,['access'],['accessed']
Security,// Arrange for ValidatedCorrections[0] to always be an empty correction.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/SemaInternal.h:15,Validat,ValidatedCorrections,15,interpreter/llvm-project/clang/include/clang/Sema/SemaInternal.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/SemaInternal.h,1,['Validat'],['ValidatedCorrections']
Security,// Array access methods.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/MsgPackDocument.h:9,access,access,9,interpreter/llvm-project/llvm/include/llvm/BinaryFormat/MsgPackDocument.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/MsgPackDocument.h,1,['access'],['access']
Security,"// Array of NumBuckets pointers to entries, null pointers are holes.; // TheTable[NumBuckets] contains a sentinel value for easy iteration. Followed; // by an array of the actual hash values as unsigned integers.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StringMap.h:179,hash,hash,179,interpreter/llvm-project/llvm/include/llvm/ADT/StringMap.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StringMap.h,1,['hash'],['hash']
Security,// Array of unknown bounds - cannot be accessed and pointer arithmetic; // is forbidden on pointers to such objects.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Program.cpp:39,access,accessed,39,interpreter/llvm-project/clang/lib/AST/Interp/Program.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Program.cpp,1,['access'],['accessed']
Security,// ArrayRef access to formal parameters.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h:12,access,access,12,interpreter/llvm-project/clang/include/clang/AST/Decl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h,1,['access'],['access']
Security,// ArrayRef access to formal parameters. This should eventually; // replace the iterator interface above.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:12,access,access,12,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,1,['access'],['access']
Security,"// As CUDA builtin surface/texture types are replaced, skip generating TBAA; // access info.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:80,access,access,80,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,1,['access'],['access']
Security,"// As SS is invalid, we try to collect accessible contexts from the current; // scope with a dummy lookup so that the completion consumer can try to; // guess what the specified scope is.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCodeComplete.cpp:39,access,accessible,39,interpreter/llvm-project/clang/lib/Sema/SemaCodeComplete.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCodeComplete.cpp,1,['access'],['accessible']
Security,"// As an example for the mapping of RNTuple fields to RDF columns, let's consider an RNTuple; // using the following types and with a top-level field named ""event"" of type Event:; //; // struct Event {; // int id;; // std::vector<Track> tracks;; // };; // struct Track {; // std::vector<Hit> hits;; // };; // struct Hit {; // float x;; // float y;; // };; //; // AddField() will be called from the constructor with the RNTuple root field (ENTupleStructure::kRecord).; // From there, we recurse into the ""event"" sub field (also ENTupleStructure::kRecord) and further down the; // tree of sub fields and expose the following RDF columns:; //; // ""event"" [Event]; // ""event.id"" [int]; // ""event.tracks"" [RVec<Track>]; // ""R_rdf_sizeof_event.tracks"" [unsigned int]; // ""event.tracks.hits"" [RVec<RVec<Hit>>]; // ""R_rdf_sizeof_event.tracks.hits"" [RVec<unsigned int>]; // ""event.tracks.hits.x"" [RVec<RVec<float>>]; // ""R_rdf_sizeof_event.tracks.hits.x"" [RVec<unsigned int>]; // ""event.tracks.hits.y"" [RVec<RVec<float>>]; // ""R_rdf_sizeof_event.tracks.hits.y"" [RVec<unsigned int>]",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RNTupleDS.cxx:602,expose,expose,602,tree/dataframe/src/RNTupleDS.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RNTupleDS.cxx,1,['expose'],['expose']
Security,"// As this transformation can cause memory accesses that didn't previously; // alias to begin to alias one another, we remove !noalias metadata from any; // uses of either alloca. This is conservative, but more precision doesn't; // seem worthwhile right now.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/MemCpyOptimizer.cpp:43,access,accesses,43,interpreter/llvm-project/llvm/lib/Transforms/Scalar/MemCpyOptimizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/MemCpyOptimizer.cpp,1,['access'],['accesses']
Security,"// As we recursed through GEPs to get here, we've incrementally checked; // that each step advanced by a multiple of the alignment. If our base is; // properly aligned, then the original offset accessed must also be.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/Loads.cpp:194,access,accessed,194,interpreter/llvm-project/llvm/lib/Analysis/Loads.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/Loads.cpp,1,['access'],['accessed']
Security,"// As we recursed through GEPs to get here, we've incrementally; // checked that each step advanced by a multiple of the alignment. If; // our base is properly aligned, then the original offset accessed; // must also be.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/Loads.cpp:194,access,accessed,194,interpreter/llvm-project/llvm/lib/Analysis/Loads.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/Loads.cpp,1,['access'],['accessed']
Security,// Asan needs to poison memory to detect invalid access which is possible; // even for empty lifetime range.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCalls.cpp:49,access,access,49,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCalls.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCalls.cpp,1,['access'],['access']
Security,"// Assign public and global symbol records into hash table buckets.; // Modifies the list of records to store the bucket index, but does not; // change the order.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/PDB/Native/GSIStreamBuilder.cpp:48,hash,hash,48,interpreter/llvm-project/llvm/lib/DebugInfo/PDB/Native/GSIStreamBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/PDB/Native/GSIStreamBuilder.cpp,1,['hash'],['hash']
Security,// Assign the smallest element access size to the highest; // value which assembler can handle.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonTargetObjectFile.cpp:31,access,access,31,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonTargetObjectFile.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonTargetObjectFile.cpp,1,['access'],['access']
Security,"// Assign to all items the initial value E + 1 so we can check if the extract; // instruction index was used already.; // Also, later we can check that all the indices are used and we have a; // consecutive access in the extract instructions, by checking that no; // element of CurrentOrder still has value E + 1.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp:207,access,access,207,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,1,['access'],['access']
Security,// Assignment to a property in ObjC is an implicit setter access. But a; // setter might not exist.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprClassification.cpp:58,access,access,58,interpreter/llvm-project/clang/lib/AST/ExprClassification.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprClassification.cpp,1,['access'],['access']
Security,// Assume memory ops cost scale with the number of vector registers; // possible accessed by the instruction. Note that BasicTTI already; // handles the LT.first term for us.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVTargetTransformInfo.cpp:81,access,accessed,81,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVTargetTransformInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVTargetTransformInfo.cpp,1,['access'],['accessed']
Security,"// Assume pre-ARMv6 doesn't support unaligned accesses.; //; // ARMv6 may or may not support unaligned accesses depending on the; // SCTLR.U bit, which is architecture-specific. We assume ARMv6; // Darwin and NetBSD targets support unaligned accesses, and others don't.; //; // ARMv7 always has SCTLR.U set to 1, but it has a new SCTLR.A bit; // which raises an alignment fault on unaligned accesses. Linux; // defaults this bit to 0 and handles it as a system-wide (not; // per-process) setting. It is therefore safe to assume that ARMv7+; // Linux targets support unaligned accesses. The same goes for NaCl; // and Windows.; //; // The above behavior is consistent with GCC.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Arch/ARM.cpp:46,access,accesses,46,interpreter/llvm-project/clang/lib/Driver/ToolChains/Arch/ARM.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Arch/ARM.cpp,5,['access'],['accesses']
Security,// Assume that an access that meets the ABI-specified alignment is fast.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TargetLoweringBase.cpp:18,access,access,18,interpreter/llvm-project/llvm/lib/CodeGen/TargetLoweringBase.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TargetLoweringBase.cpp,1,['access'],['access']
Security,// Assume that property accessors are not overridden.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/CallEvent.cpp:24,access,accessors,24,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/CallEvent.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/CallEvent.cpp,1,['access'],['accessors']
Security,"// Assume the we will use FLAT for all global memory accesses; // on VI.; // FIXME: This assumption is currently wrong. On VI we still use; // MUBUF instructions for the r + i addressing mode. As currently; // implemented, the MUBUF instructions only work on buffer < 4GB.; // It may be possible to support > 4GB buffers with MUBUF instructions,; // by setting the stride value in the resource descriptor which would; // increase the size limit to (stride * 4GB). However, this is risky,; // because it has never been validated.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp:53,access,accesses,53,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp,2,"['access', 'validat']","['accesses', 'validated']"
Security,// Assumes power of 2 memory size. Subtargets that have only naturally-aligned; // memory access need to perform additional legalization here.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsLegalizerInfo.cpp:90,access,access,90,interpreter/llvm-project/llvm/lib/Target/Mips/MipsLegalizerInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsLegalizerInfo.cpp,1,['access'],['access']
Security,"// Assumptions for function parameters are emitted at the start of the; // function, so there is no need to repeat that here,; // unless the alignment-assumption sanitizer is enabled,; // then we prefer the assumption over alignment attribute; // on IR function param.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:162,sanitiz,sanitizer,162,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,1,['sanitiz'],['sanitizer']
Security,// At least one of the accesses must be strided.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/VectorUtils.h:23,access,accesses,23,interpreter/llvm-project/llvm/include/llvm/Analysis/VectorUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/VectorUtils.h,1,['access'],['accesses']
Security,"// At least one of the memory access instructions may access a loop; // varying object, e.g. the address of underlying object is loaded inside; // the loop, like A[B[i]]. We cannot determine direction or distance in; // those cases, and also are unable to generate any runtime checks.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h:30,access,access,30,interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h,2,['access'],['access']
Security,"// At some point, RFieldBase::OnClusterCommit() may allow for a user-defined callback to change the; // column representation. For now, we inject this for testing and internal use only.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RFieldBase.hxx:139,inject,inject,139,tree/ntuple/v7/inc/ROOT/RFieldBase.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RFieldBase.hxx,1,['inject'],['inject']
Security,"// At the point where the designators diverge, the comparison has a; // specified value if:; // - we are comparing array indices; // - we are comparing fields of a union, or fields with the same access; // Otherwise, the result is unspecified and thus the comparison is not a; // constant expression.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp:195,access,access,195,interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,1,['access'],['access']
Security,// At this point result type is audited for potential inclusion.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ARCMigrate/ObjCMT.cpp:32,audit,audited,32,interpreter/llvm-project/clang/lib/ARCMigrate/ObjCMT.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ARCMigrate/ObjCMT.cpp,1,['audit'],['audited']
Security,// At this point result type is either annotated or audited.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ARCMigrate/ObjCMT.cpp:52,audit,audited,52,interpreter/llvm-project/clang/lib/ARCMigrate/ObjCMT.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ARCMigrate/ObjCMT.cpp,1,['audit'],['audited']
Security,"// At this point the checksum string should always be correct",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TSchemaRule.cxx:21,checksum,checksum,21,core/meta/src/TSchemaRule.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TSchemaRule.cxx,1,['checksum'],['checksum']
Security,"// At this point we have not expanded groups, so any unsupported; // sanitizers in Add are those which have been explicitly enabled.; // Diagnose them.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp:69,sanitiz,sanitizers,69,interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,1,['sanitiz'],['sanitizers']
Security,"// At this point, AnalyzerOptions is configured. Let's validate some options.; // FIXME: Here we try to validate the silenced checkers or packages are valid.; // The current approach only validates the registered checkers which does not; // contain the runtime enabled checkers and optimally we would validate both.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/CompilerInvocation.cpp:55,validat,validate,55,interpreter/llvm-project/clang/lib/Frontend/CompilerInvocation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/CompilerInvocation.cpp,4,['validat'],"['validate', 'validates']"
Security,"// At this point, the cost is either cheaper or equal. If it is; // equal, we consider this is profitable because it may expose; // more recoloring opportunities.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegAllocGreedy.cpp:121,expose,expose,121,interpreter/llvm-project/llvm/lib/CodeGen/RegAllocGreedy.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegAllocGreedy.cpp,1,['expose'],['expose']
Security,"// At this point, we've validated the rerolling, and we're committed to; // making changes!",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopRerollPass.cpp:24,validat,validated,24,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopRerollPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopRerollPass.cpp,1,['validat'],['validated']
Security,"// At this stage, the logical view contains all scopes, symbols and types.; // For PDBs we can use the module id, to access its specific compile unit.; // The line record addresses has been already resolved, so we can apply the; // flow as when processing DWARF.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVCodeViewReader.cpp:117,access,access,117,interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVCodeViewReader.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVCodeViewReader.cpp,1,['access'],['access']
Security,"// At this very end of the compilation pipeline, if any DBG_VALUEs with; // registers remain, it means they are dangling info which we failed to update; // when their corresponding def instruction was transformed/moved/splitted etc.; // Because Wasm cannot access values in LLVM virtual registers in the debugger,; // these dangling DBG_VALUEs in effect kill the effect of any previous DBG_VALUE; // associated with the variable, which will appear as ""optimized out"".",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyDebugFixup.cpp:257,access,access,257,interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyDebugFixup.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyDebugFixup.cpp,1,['access'],['access']
Security,// Attach global base pointer on GETtlsADDR32 node in order to; // generate secure plt code for TLS symbols.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp:76,secur,secure,76,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,1,['secur'],['secure']
Security,"// Attempt authentication",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/TRootAuth.cxx:11,authenticat,authentication,11,net/auth/src/TRootAuth.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/TRootAuth.cxx,1,['authenticat'],['authentication']
Security,// Attempt to deduce the offloading triple from the set of architectures.; // We can only correctly deduce NVPTX / AMDGPU triples currently. We need; // to temporarily create these toolchains so that we can access tools for; // inferring architectures.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:207,access,access,207,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp,1,['access'],['access']
Security,// Attempt to determine whether we have a single dimensional array access.; // before giving up.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopCacheAnalysis.cpp:67,access,access,67,interpreter/llvm-project/llvm/lib/Analysis/LoopCacheAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopCacheAnalysis.cpp,1,['access'],['access']
Security,// Attempt to prove strided accesses independent.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp:28,access,accesses,28,interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp,1,['access'],['accesses']
Security,// AuthKey will be the key we need to end up authenticating against in; // whatever we replace this sequence with.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCalls.cpp:45,authenticat,authenticating,45,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCalls.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCalls.cpp,1,['authenticat'],['authenticating']
Security,"// Authenticate now",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TSocket.cxx:3,Authenticat,Authenticate,3,net/net/src/TSocket.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TSocket.cxx,1,['Authenticat'],['Authenticate']
Security,"// Authentication method name",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/inc/TSecContext.h:3,Authenticat,Authentication,3,net/net/inc/TSecContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/inc/TSecContext.h,1,['Authenticat'],['Authentication']
Security,"// Authentication method used",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/inc/TSecContext.h:3,Authenticat,Authentication,3,net/net/inc/TSecContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/inc/TSecContext.h,1,['Authenticat'],['Authentication']
Security,"// Authentication not required by the remote server",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TSocket.cxx:3,Authenticat,Authentication,3,net/net/src/TSocket.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TSocket.cxx,1,['Authenticat'],['Authentication']
Security,"// Authentication type",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/inc/TS3HTTPRequest.h:3,Authenticat,Authentication,3,net/net/inc/TS3HTTPRequest.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/inc/TS3HTTPRequest.h,1,['Authenticat'],['Authentication']
Security,"// Authentication was not required: create inactive; // security context for consistency",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TSocket.cxx:3,Authenticat,Authentication,3,net/net/src/TSocket.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TSocket.cxx,2,"['Authenticat', 'secur']","['Authentication', 'security']"
Security,"// Author: Bertrand Bellenot 22/08/02; /*************************************************************************; * Copyright (C) 1995-2002, Bertrand Bellenot. *; * All rights reserved. *; * *; * For the licensing terms see the LICENSE file. *; *************************************************************************/; //////////////////////////////////////////////////////////////////////////; // //; // Definition of a dialog box used to access the main shower parameters //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/SettingsDlg.h:443,access,access,443,test/RootShower/SettingsDlg.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/SettingsDlg.h,1,['access'],['access']
Security,"// Author: Stefan Schmitt; // DESY, 10/08/11; // Version 17.9, parallel to changes in TUnfold; //; // History:; // Version 17.8, bug fix in GetNonemptyNode() and non-const access of tree; // Version 17.7, bug fix in ExtractHistogram; // Version 17.6, bug fix to avoid possible crash in method; // CreateHistogramOfMigrations(). Bug fix with NaN in GetGlobalBinNumber(); // Version 17.5, in parallel to changes in TUnfold; // Version 17.4, bug fix with error handling; // Version 17.3, bug fix with underflow/overflow bins; // Version 17.2, new option isPeriodic; // Version 17.1, in parallel to TUnfold; // Version 17.0, initial version, numbered in parallel to TUnfold",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/inc/TUnfoldBinning.h:172,access,access,172,hist/unfold/inc/TUnfoldBinning.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/inc/TUnfoldBinning.h,1,['access'],['access']
Security,"// Author: Stefan Schmitt; // DESY, 10/08/11; // Version 17.9, parallel to changes in TUnfold; //; // History:; // Version 17.8, bug fix in GetNonemptyNode() and non-const access of tree; // Version 17.7, bug fix in ExtractHistogram; // Version 17.6, bug fix to avoid possible crash in method; // CreateHistogramOfMigrations(). Bug fix with NaN in GetGlobalBinNumber(); // Version 17.5, in parallel to changes in TUnfold; // Version 17.4, bug fix with error handling; // Version 17.3, bug fix with underflow/overflow bins; // Version 17.2, with XML support, bug fix with bin map creation,; // isPeriodic option for neighbour bins; // Version 17.1, in parallel to changes in TUnfold; // Version 17.0, initial version, numbered in parallel to TUnfold; /** \class TUnfoldBinning; Binning schemes for use with the unfolding algorithm TUnfoldDensity. Binning schemes are used to map analysis bins on a single histogram; axis and back. The analysis bins may include unconnected bins (e.g; nuisances for background normalisation) or various multidimensional; histograms (signal bins, differential background normalisation bins, etc).; <br/>; If you use this software, please consider the following citation; <br/>; <b>S.Schmitt, JINST 7 (2012) T10003 [arXiv:1205.6201]</b>; <br/>; Detailed documentation and updates are available on; http://www.desy.de/~sschmitt. <h3>Functionality</h3>. The TUnfoldBinning objects are connected by a tree-like structure.; The structure does not hold any data, but is only responsible for; arranging the analysis bins in the proper order.; Each node of the tree is responsible for a group of bins. That group; may consist of; <ul>; <li> several unconnected bins, each with a dedicated name.</li>; <li> bins organized in a multidimensional distribution, defined by a; set of axes. The axes are defined by a number of bins N and by (N+1); bin borders. In addition to the N bins inside there may be an underflow and an; overflow bin</li>; </ul>; Each bin has a ""global"" bin numb",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfoldBinning.cxx:172,access,access,172,hist/unfold/src/TUnfoldBinning.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfoldBinning.cxx,1,['access'],['access']
Security,"// Autosynthesized property accessors are special because we'd never; // pop back up to non-autosynthesized code until we leave them.; // This is not generally true for autosynthesized callees, which may call; // non-autosynthesized callbacks.; // Unless set here, the IsCalleeAnAutosynthesizedPropertyAccessor flag; // defaults to false.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/PathDiagnostic.cpp:28,access,accessors,28,interpreter/llvm-project/clang/lib/Analysis/PathDiagnostic.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/PathDiagnostic.cpp,1,['access'],['accessors']
Security,// Avoid a gcc warning about accessing 'this' in an initializer.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-diff/lib/DifferenceEngine.cpp:29,access,accessing,29,interpreter/llvm-project/llvm/tools/llvm-diff/lib/DifferenceEngine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-diff/lib/DifferenceEngine.cpp,1,['access'],['accessing']
Security,"// Avoid adding the ""Stride == 1"" predicate when we know that; // Stride >= Trip-Count. Such a predicate will effectively optimize a single; // or zero iteration loop, as Trip-Count <= Stride == 1.; //; // TODO: We are currently not making a very informed decision on when it is; // beneficial to apply stride versioning. It might make more sense that the; // users of this analysis (such as the vectorizer) will trigger it, based on; // their specific cost considerations; For example, in cases where stride; // versioning does not help resolving memory accesses/dependences, the; // vectorizer should evaluate the cost of the runtime test, and the benefit; // of various possible stride specializations, considering the alternatives; // of using gather/scatters (if available).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp:555,access,accesses,555,interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp,1,['access'],['accesses']
Security,"// Avoid creating a conditional cleanup just to hold an llvm.lifetime.end; // marker. Instead, start the lifetime of a conditional temporary earlier; // so that it's unconditional. Don't do this with sanitizers which need; // more precise lifetime marks. However when inside an ""await.suspend""; // block, we should always avoid conditional cleanup because it creates; // boolean marker that lives across await_suspend, which can destroy coro; // frame.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:200,sanitiz,sanitizers,200,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,1,['sanitiz'],['sanitizers']
Security,// Avoid diagnosing any sanitizer which is disabled later.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp:24,sanitiz,sanitizer,24,interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,1,['sanitiz'],['sanitizer']
Security,"// Avoid emitting this error twice for the same location. Using a hashtable; // like this is unfortunate, but because we must continue parsing as normal; // after encountering a deferred error, it's otherwise very tricky for us to; // ensure that we only emit this deferred error once.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCUDA.cpp:66,hash,hashtable,66,interpreter/llvm-project/clang/lib/Sema/SemaCUDA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCUDA.cpp,1,['hash'],['hashtable']
Security,// Avoid interpreting hash as a directive under -fpreprocessed.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/PrintPreprocessedOutput.cpp:22,hash,hash,22,interpreter/llvm-project/clang/lib/Frontend/PrintPreprocessedOutput.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/PrintPreprocessedOutput.cpp,1,['hash'],['hash']
Security,"// Avoid making a copy when initializing a template parameter of class type; // from a template parameter object of the same type. This is going beyond; // the standard, but is required for soundness: in; // template<A a> struct X { X *p; X<a> *q; };; // ... we need p and q to have the same type.; //; // Similarly, don't inject a call to a copy constructor when initializing; // from a template parameter of the same type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp:323,inject,inject,323,interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp,1,['inject'],['inject']
Security,"// Avoid reading outside the memory accessed by the original load (could; // happened if we only adjust the load base pointer by ShAmt). Instead we; // try to narrow the load even further. The typical scenario here is:; // (i64 (truncate (i96 (srl (load x), 64)))) ->; // (i64 (truncate (i96 (zextload (load i32 + offset) from i32))))",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:36,access,accessed,36,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['access'],['accessed']
Security,"// Avoid splitting a MOVW+MOVT pair with a relocation on Windows.; // On Windows, this instruction pair is covered by one single; // IMAGE_REL_ARM_MOV32T relocation which covers both instructions. If a; // constant island is injected inbetween them, the relocation will clobber; // the instruction and fail to update the MOVT instruction.; // (These instructions are bundled up until right before the ConstantIslands; // pass.)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMConstantIslandPass.cpp:225,inject,injected,225,interpreter/llvm-project/llvm/lib/Target/ARM/ARMConstantIslandPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMConstantIslandPass.cpp,1,['inject'],['injected']
Security,"// Avoid stack access for dynamic indexing by custom lowering to; // v_bfi_b32 (v_bfm_b32 16, (shl idx, 16)), val, vec",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp:15,access,access,15,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp,1,['access'],['access']
Security,// Avoid stack access for these.; // TODO: Generalize to more vector types.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp:15,access,access,15,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp,1,['access'],['access']
Security,"// BUG in the cxx compiler. cxx complains that it cannot access fTree; // from TBtInnerNode. To reproduce the cxx bug uncomment the following line; // and delete the line after.; // fTree = p->fTree;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TBtree.cxx:57,access,access,57,core/cont/src/TBtree.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TBtree.cxx,1,['access'],['access']
Security,// Bail if the element is an array since it is not memory access.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:58,access,access,58,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['access'],['access']
Security,// Bail if there are effects that a plain copy will not expose.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp:56,expose,expose,56,interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp,1,['expose'],['expose']
Security,"// Bail out if an aligned load of the container cannot cover the entire; // bit-field. This can happen for example, if the bit-field is part of a; // packed struct. AAPCS does not define access rules for such cases, we let; // clang to follow its own rules.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp:187,access,access,187,interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp,1,['access'],['access']
Security,// Bail out if performing this load would access non-bit-fields members.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp:42,access,access,42,interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp,1,['access'],['access']
Security,// Bail out if the number of accesses to check exceeds the scan limit.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/DeadStoreElimination.cpp:29,access,accesses,29,interpreter/llvm-project/llvm/lib/Transforms/Scalar/DeadStoreElimination.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/DeadStoreElimination.cpp,1,['access'],['accesses']
Security,"// BareMetal toolchain allows all sanitizers where the compiler generates valid; // code, ignoring all runtime library support issues on the assumption that; // baremetal targets typically implement their own runtime support.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/BareMetal.cpp:34,sanitiz,sanitizers,34,interpreter/llvm-project/clang/lib/Driver/ToolChains/BareMetal.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/BareMetal.cpp,1,['sanitiz'],['sanitizers']
Security,"// Base only. The address will be materialized into a register before; // the memory is accessed.; // add x0, Xbase, #offset; // ldr x0, [x0]",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelDAGToDAG.cpp:88,access,accessed,88,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelDAGToDAG.cpp,1,['access'],['accessed']
Security,"// Base only. The address will be materialized into a register before; // the memory is accessed.; // add x0, Xbase, #offset; // stp x1, x2, [x0]",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelDAGToDAG.cpp:88,access,accessed,88,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelDAGToDAG.cpp,1,['access'],['accessed']
Security,"// BaseType is the type parameter T to infer members from.; // T must be accessible within S, as we use it to find the template entity; // that T is attached to in order to gather the relevant constraints.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCodeComplete.cpp:73,access,accessible,73,interpreter/llvm-project/clang/lib/Sema/SemaCodeComplete.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCodeComplete.cpp,1,['access'],['accessible']
Security,"// Basic correctness check: since we are deleting instructions, validate the; // iterators. There is a possibility that one of Def1 or Def2 is translated; // to ""mux"" and being considered for other ""mux"" instructions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonGenMux.cpp:64,validat,validate,64,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonGenMux.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonGenMux.cpp,1,['validat'],['validate']
Security,"// Basic hashing mechanism to detect structural change to the IR, used to verify; // pass return status consistency with actual change. In addition to being used; // by the MergeFunctions pass.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/StructuralHash.cpp:9,hash,hashing,9,interpreter/llvm-project/llvm/lib/IR/StructuralHash.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/StructuralHash.cpp,1,['hash'],['hashing']
Security,"// Basic, single offset DS instructions allow a 16-bit unsigned immediate; // field.; // XXX - If doing a 4-byte aligned 8-byte type access, we effectively have; // an 8-bit dword offset but we don't know the alignment here.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp:133,access,access,133,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp,1,['access'],['access']
Security,"// BasicBlock is destroyed already, so this access is UB detectable by msan.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/AsmPrinter.cpp:44,access,access,44,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/AsmPrinter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/AsmPrinter.cpp,1,['access'],['access']
Security,// Be conservative if the accessed pointer may alias the allocation -; // fallback to the generic handling below.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/BasicAliasAnalysis.cpp:26,access,accessed,26,interpreter/llvm-project/llvm/lib/Analysis/BasicAliasAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/BasicAliasAnalysis.cpp,1,['access'],['accessed']
Security,// Be sure that the destructor is accessible and is marked as referenced.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp:34,access,accessible,34,interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,1,['access'],['accessible']
Security,"// Because DepCands is constructed by visiting accesses in the order in; // which they appear in alias sets (which is deterministic) and the; // iteration order within an equivalence class member is only dependent on; // the order in which unions and insertions are performed on the; // equivalence class, the iteration order is deterministic.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp:47,access,accesses,47,interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp,1,['access'],['accesses']
Security,"// Because each bucket is a circular list, we don't need to compute N's hash; // to remove it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FoldingSet.cpp:72,hash,hash,72,interpreter/llvm-project/llvm/lib/Support/FoldingSet.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FoldingSet.cpp,1,['hash'],['hash']
Security,// Because this is exposed via libclang we must disable RemoveFileOnSignal.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/FrontendActions.cpp:19,expose,exposed,19,interpreter/llvm-project/clang/lib/Frontend/FrontendActions.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/FrontendActions.cpp,2,['expose'],['exposed']
Security,"// Before adding the decl to the selected ones, check its access.; // We do not yet support I/O of private or protected classes.; // See ROOT-7450.; // Additionally, private declarations lead to uncompilable code, so just ignore (ROOT-9112).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/Scanner.cxx:58,access,access,58,core/dictgen/src/Scanner.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/Scanner.cxx,1,['access'],['access']
Security,"// Before computing a checksum, checksum field must be; // filled with space characters.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/TarWriter.cpp:22,checksum,checksum,22,interpreter/llvm-project/llvm/lib/Support/TarWriter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/TarWriter.cpp,2,['checksum'],['checksum']
Security,"// Before the actual hash buckets, there is a bitmap of length determined by; // IPHR_HASH.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/PDB/Native/GlobalsStream.cpp:21,hash,hash,21,interpreter/llvm-project/llvm/lib/DebugInfo/PDB/Native/GlobalsStream.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/PDB/Native/GlobalsStream.cpp,1,['hash'],['hash']
Security,// Before this point all we've had was a stockpile of arbitrary layers.; // Now validate that it is shaped as one of the finite amount of expected; // patterns.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ConstructionContext.cpp:80,validat,validate,80,interpreter/llvm-project/clang/lib/Analysis/ConstructionContext.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ConstructionContext.cpp,1,['validat'],['validate']
Security,// Before validating the instruction in isolation we run through the rules; // applicable when it follows a prefix instruction.; // NOTE: brk & hlt can be prefixed but require no additional validation.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AsmParser/AArch64AsmParser.cpp:10,validat,validating,10,interpreter/llvm-project/llvm/lib/Target/AArch64/AsmParser/AArch64AsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AsmParser/AArch64AsmParser.cpp,2,['validat'],"['validating', 'validation']"
Security,"// Before we try to recalculate access paths, try to white-list; // accesses which just trade in on the final step, i.e. accesses; // which don't require [M4] or [B4]. These are by far the most; // common forms of privileged access.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaAccess.cpp:32,access,access,32,interpreter/llvm-project/clang/lib/Sema/SemaAccess.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaAccess.cpp,4,['access'],"['access', 'accesses']"
Security,// Befriend StmtVisitorBase so that we don't have to expose Visit*.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprConstant.cpp:53,expose,expose,53,interpreter/llvm-project/clang/lib/CodeGen/CGExprConstant.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprConstant.cpp,1,['expose'],['expose']
Security,"// Best effort path normalization. This is to guarantee an unique flag symbol; // is produced for the same directory. Some builds may want to use relative; // paths, or paths with a specific prefix (see the -fdebug-compilation-dir; // flag), so only hash paths in debuginfo. Don't expand them to absolute; // paths.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/JMCInstrumenter.cpp:250,hash,hash,250,interpreter/llvm-project/llvm/lib/CodeGen/JMCInstrumenter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/JMCInstrumenter.cpp,1,['hash'],['hash']
Security,// Best->Access is only meaningful for class members.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp:9,Access,Access,9,interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp,1,['Access'],['Access']
Security,"// Bins are addressed in two different modes, depending; // on whether the compact bin index fits into a Long64_t or not.; // If it does, we can use it as a ""perfect hash"" for the TExMap.; // If not we build a hash from the compact bin index, and use that; // as the TExMap's hash.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx:166,hash,hash,166,hist/hist/src/THnSparse.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnSparse.cxx,3,['hash'],['hash']
Security,// Bit field positions for the accessinfo parameter to; // llvm.hwasan.check.memaccess. Shared between the pass and the backend. Bits; // 0-15 are also used by the runtime.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/HWAddressSanitizer.h:31,access,accessinfo,31,interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/HWAddressSanitizer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/HWAddressSanitizer.h,1,['access'],['accessinfo']
Security,// Bitmask that indicates which ops have only been accessed 'inline'.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:51,access,accessed,51,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['access'],['accessed']
Security,"// Bitwise copy constructor and = operator are fine; // Accessors",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/inc/TGLUtil.h:56,Access,Accessors,56,graf3d/gl/inc/TGLUtil.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/inc/TGLUtil.h,1,['Access'],['Accessors']
Security,"// Black-list all explicit and implicit references to 'this'.; //; // Do we need to worry about external references to 'this' derived; // from arbitrary code? If so, then anything which runs arbitrary; // external code might potentially access the vtable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp:237,access,access,237,interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp,1,['access'],['access']
Security,"// Block iterator interface. This provides access to the list of incoming; // basic blocks, which parallels the list of incoming values.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemorySSA.h:43,access,access,43,interpreter/llvm-project/llvm/include/llvm/Analysis/MemorySSA.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemorySSA.h,1,['access'],['access']
Security,"// Block iterator interface. This provides access to the list of incoming; // basic blocks, which parallels the list of incoming values.; // Please note that we are not providing non-const iterators for blocks to; // force all updates go through an interface function.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:43,access,access,43,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,1,['access'],['access']
Security,"// Both st{p,r}ncpy(D, S, N) access the source and destination arrays; // only when N is nonzero.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyLibCalls.cpp:29,access,access,29,interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyLibCalls.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyLibCalls.cpp,1,['access'],['access']
Security,// Branch regions are hashed based on an ID.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp:22,hash,hashed,22,interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp,2,['hash'],['hashed']
Security,// Break out of the inner loop because we've already succeeded; // using largest possible AccessSize.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXISelLowering.cpp:90,Access,AccessSize,90,interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXISelLowering.cpp,1,['Access'],['AccessSize']
Security,// Break up 64-bit bit operation of a constant into two 32-bit and/or/xor. This; // will typically happen anyway for a VALU 64-bit and. This exposes other 32-bit; // integer combine opportunities since most 64-bit operations are decomposed; // this way. TODO: We won't want this for SALU especially if it is an inline; // immediate.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp:141,expose,exposes,141,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp,1,['expose'],['exposes']
Security,"// Breaking before the ""./->"" of a chained call/member access is reasonably; // cheap, as formatting those with one call per line is generally; // desirable. In particular, it should be cheaper to break before the call; // than it is to break inside a call's parameters, which could lead to weird; // ""hanging"" indents. The exception is the very last ""./->"" to support this; // frequent pattern:; //; // aaaaaaaa.aaaaaaaa.bbbbbbb().ccccccccccccccccccccc(; // dddddddd);; //; // which might otherwise be blown up onto many lines. Here, clang-format; // won't produce ""hanging"" indents anyway as there is no other trailing; // call.; //; // Also apply higher penalty is not a call as that might lead to a wrapping; // like:; //; // aaaaaaa; // .aaaaaaaaa.bbbbbbbb(cccccccc);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/TokenAnnotator.cpp:55,access,access,55,interpreter/llvm-project/clang/lib/Format/TokenAnnotator.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/TokenAnnotator.cpp,1,['access'],['access']
Security,"// Buckets point in the list of hashes, not to the data. Do not increment; // the index multiple times in case of hash collisions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/AccelTable.cpp:32,hash,hashes,32,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/AccelTable.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/AccelTable.cpp,2,['hash'],"['hash', 'hashes']"
Security,// Buffer has been validated.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp:19,validat,validated,19,interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp,1,['validat'],['validated']
Security,"// Build DPValue hashes for DPValues attached to the terminator, which isn't; // considered in the loop above.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopRotationUtils.cpp:17,hash,hashes,17,interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopRotationUtils.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopRotationUtils.cpp,1,['hash'],['hashes']
Security,"// Build SameTails, identifying the set of blocks with this hash code; // and with the maximum number of instructions in common.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/BranchFolding.cpp:60,hash,hash,60,interpreter/llvm-project/llvm/lib/CodeGen/BranchFolding.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/BranchFolding.cpp,1,['hash'],['hash']
Security,"// Build a hash from the types of the given python function arguments.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/CPPOverload.h:11,hash,hash,11,bindings/pyroot/cppyy/CPyCppyy/src/CPPOverload.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/CPPOverload.h,1,['hash'],['hash']
Security,"// Build direct access pointers to individual materials,matrices and shapes",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/g3d/src/TGeometry.cxx:16,access,access,16,graf3d/g3d/src/TGeometry.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/g3d/src/TGeometry.cxx,1,['access'],['access']
Security,// Build maps of the location hash to all profile data with that leaf location; // (allocation info and the callsites).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/MemProfiler.cpp:30,hash,hash,30,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/MemProfiler.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/MemProfiler.cpp,1,['hash'],['hash']
Security,"// Build the ""promoted"" result VTList for the load. If we are really loading; // i8s, then the return type will be promoted to i16 since we do not expose; // 8-bit registers in NVPTX.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXISelDAGToDAG.cpp:147,expose,expose,147,interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXISelDAGToDAG.cpp,1,['expose'],['expose']
Security,// Build the Call Graph by adding all the top level declarations to the graph.; // Note: CallGraph can trigger deserialization of more items from a pch; // (though HandleInterestingDecl); triggering additions to LocalTUDecls.; // We rely on random access to add the initially processed Decls to CG.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Frontend/AnalysisConsumer.cpp:248,access,access,248,interpreter/llvm-project/clang/lib/StaticAnalyzer/Frontend/AnalysisConsumer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Frontend/AnalysisConsumer.cpp,1,['access'],['access']
Security,// Build the first member access in the chain with full information.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprMember.cpp:26,access,access,26,interpreter/llvm-project/clang/lib/Sema/SemaExprMember.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprMember.cpp,1,['access'],['access']
Security,"// Build the list of RealData before we access it:",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TProtoClass.cxx:40,access,access,40,core/meta/src/TProtoClass.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TProtoClass.cxx,1,['access'],['access']
Security,// Build up a buffer of hash code components.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineInstr.cpp:24,hash,hash,24,interpreter/llvm-project/llvm/lib/CodeGen/MachineInstr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineInstr.cpp,2,['hash'],['hash']
Security,"// By construction, the operands are sorted in reverse order of their; // topological order.; // So we tend to form (sub) expressions with values that are close to; // each other.; //; // Now to expose more CSE opportunities we want to expose the pair of; // operands that occur the most (as statically computed in; // BuildPairMap.) as the first sub-expression.; //; // If two pairs occur as many times, we pick the one with the; // lowest rank, meaning the one with both operands appearing first in; // the topological order.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/Reassociate.cpp:195,expose,expose,195,interpreter/llvm-project/llvm/lib/Transforms/Scalar/Reassociate.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/Reassociate.cpp,2,['expose'],['expose']
Security,"// Bypass accessor to function value that also works in hidden mode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsHiddenReal.h:10,access,accessor,10,roofit/roofitcore/inc/RooAbsHiddenReal.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsHiddenReal.h,1,['access'],['accessor']
Security,// Byte-sized access,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/ELF.h:14,access,access,14,interpreter/llvm-project/llvm/include/llvm/BinaryFormat/ELF.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/ELF.h,1,['access'],['access']
Security,"// C++ 5.2.9p5: An lvalue of type ""cv1 B"", where B is a class type, can be; // cast to type ""reference to cv2 D"", where D is a class derived from B,; // if a valid standard conversion from ""pointer to D"" to ""pointer to B""; // exists, cv2 >= cv1, and B is not a virtual base class of D.; // In addition, DR54 clarifies that the base must be accessible in the; // current context. Although the wording of DR54 only applies to the pointer; // variant of this rule, the intent is clearly for it to apply to the this; // conversion as well.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCast.cpp:340,access,accessible,340,interpreter/llvm-project/clang/lib/Sema/SemaCast.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCast.cpp,1,['access'],['accessible']
Security,"// C++ 5.2.9p8: An rvalue of type ""pointer to cv1 B"", where B is a class; // type, can be converted to an rvalue of type ""pointer to cv2 D"", where D; // is a class derived from B, if a valid standard conversion from ""pointer; // to D"" to ""pointer to B"" exists, cv2 >= cv1, and B is not a virtual base; // class of D.; // In addition, DR54 clarifies that the base must be accessible in the; // current context.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCast.cpp:371,access,accessible,371,interpreter/llvm-project/clang/lib/Sema/SemaCast.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCast.cpp,1,['access'],['accessible']
Security,"// C++ [basic.lookup.classref]p1:; // In a class member access expression (5.2.5), if the . or -> token is; // immediately followed by an identifier followed by a <, the; // identifier must be looked up to determine whether the < is the; // beginning of a template argument list (14.2) or a less-than operator.; // The identifier is first looked up in the class of the object; // expression. If the identifier is not found, it is then looked up in; // the context of the entire postfix-expression and shall name a class; // template.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp:56,access,access,56,interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp,1,['access'],['access']
Security,"// C++ [basic.lookup.classref]p2:; // If the id-expression in a class member access (5.2.5) is an; // unqualified-id, and the type of the object expression is of a class; // type C (or of pointer to a class type C), the unqualified-id is looked; // up in the scope of class C. [...]",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp:77,access,access,77,interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp,1,['access'],['access']
Security,"// C++ [basic.lookup.classref]p2:; // [...] If the type of the object expression is of pointer to scalar; // type, the unqualified-id is looked up in the context of the complete; // postfix-expression.; //; // This also indicates that we could be parsing a pseudo-destructor-name.; // Note that Objective-C class and object types can be pseudo-destructor; // expressions or normal member (ivar or property) access expressions, and; // it's legal for the type to be incomplete if this is a pseudo-destructor; // call. We'll do more incomplete-type checks later in the lookup process,; // so just skip this check for ObjC types.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp:407,access,access,407,interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp,1,['access'],['access']
Security,"// C++ [basic.lookup.classref]p4:; // If the id-expression in a class member access is a qualified-id of; // the form; //; // class-name-or-namespace-name::...; //; // the class-name-or-namespace-name following the . or -> operator is; // looked up both in the context of the entire postfix-expression and in; // the scope of the class of the object expression. If the name is found; // only in the scope of the class of the object expression, the name; // shall refer to a class-name. If the name is found only in the; // context of the entire postfix-expression, the name shall refer to a; // class-name or namespace-name. [...]; //; // Qualified name lookup into a class will not find a namespace-name,; // so we do not need to diagnose that case specifically. However,; // this qualified name lookup may find nothing. In that case, perform; // unqualified name lookup in the given scope (if available) or; // reconstruct the result from when name lookup was performed at template; // definition time.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCXXScopeSpec.cpp:77,access,access,77,interpreter/llvm-project/clang/lib/Sema/SemaCXXScopeSpec.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCXXScopeSpec.cpp,1,['access'],['access']
Security,// C++ [class.access.spec]p3: When a member is redeclared its access; // specifier must be same as its initial declaration.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaAccess.cpp:14,access,access,14,interpreter/llvm-project/clang/lib/Sema/SemaAccess.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaAccess.cpp,2,['access'],['access']
Security,// C++ [class.member.lookup]p3:; // type declarations (including injected-class-names) are replaced by; // the types they designate,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaLookup.cpp:65,inject,injected-class-names,65,interpreter/llvm-project/clang/lib/Sema/SemaLookup.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaLookup.cpp,1,['inject'],['injected-class-names']
Security,"// C++ [class.protected]p1:; // An additional access check beyond those described earlier in; // [class.access] is applied when a non-static data member or; // non-static member function is a protected member of its naming; // class. As described earlier, access to a protected member is; // granted because the reference occurs in a friend or member of; // some class C. If the access is to form a pointer to member,; // the nested-name-specifier shall name C or a class derived from; // C. All other accesses involve a (possibly implicit) object; // expression. In this case, the class of the object expression; // shall be C or a class derived from C.; //; // We interpret this as a restriction on [M3].; // In this part of the code, 'C' is just our context class ECRecord.; // These rules are different if we don't have an instance context.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaAccess.cpp:46,access,access,46,interpreter/llvm-project/clang/lib/Sema/SemaAccess.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaAccess.cpp,5,['access'],"['access', 'accesses']"
Security,"// C++ [class.qual]p2: A lookup that would find the injected-class-name; // instead names the constructors of the class, except when naming a class.; // This is ill-formed when we're not actually forming a ctor or dtor name.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:52,inject,injected-class-name,52,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['inject'],['injected-class-name']
Security,"// C++ [class.qual]p2:; // In a lookup in which function names are not ignored and the; // nested-name-specifier nominates a class C, if the name specified; // after the nested-name-specifier, when looked up in C, is the; // injected-class-name of C [...] then the name is instead considered; // to name the constructor of class C.; //; // Unlike in an elaborated-type-specifier, function names are not ignored; // in typename-specifier lookup. However, they are ignored in all the; // contexts where we form a typename type with no keyword (that is, in; // mem-initializer-ids, base-specifiers, and elaborated-type-specifiers).; //; // FIXME: That's not strictly true: mem-initializer-id lookup does not; // ignore functions, but that appears to be an oversight.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp:225,inject,injected-class-name,225,interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp,1,['inject'],['injected-class-name']
Security,"// C++ [class]p2:; // [...] The class-name is also inserted into the scope of the; // class itself; this is known as the injected-class-name. For; // purposes of access checking, the injected-class-name is treated; // as if it were a public member name.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:121,inject,injected-class-name,121,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,3,"['access', 'inject']","['access', 'injected-class-name']"
Security,"// C++ [over.call.object]p2:; // In addition, for each (non-explicit in C++0x) conversion function; // declared in T of the form; //; // operator conversion-type-id () cv-qualifier;; //; // where cv-qualifier is the same cv-qualification as, or a; // greater cv-qualification than, cv, and where conversion-type-id; // denotes the type ""pointer to function of (P1,...,Pn) returning; // R"", or the type ""reference to pointer to function of; // (P1,...,Pn) returning R"", or the type ""reference to function; // of (P1,...,Pn) returning R"", a surrogate call function [...]; // is also considered as a candidate function. Similarly,; // surrogate call functions are added to the set of candidate; // functions for each conversion function declared in an; // accessible base class provided the function is not hidden; // within T by another intervening declaration.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp:753,access,accessible,753,interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp,1,['access'],['accessible']
Security,// C++ [temp.deduct.guide]p3:; // A deduction guide [...] for a member class template [shall be; // declared] with the same access [as the template].,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp:124,access,access,124,interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,1,['access'],['access']
Security,"// C++ [temp.local]p1:; // Like normal (non-template) classes, class templates have an; // injected-class-name (Clause 9). The injected-class-name; // can be used with or without a template-argument-list. When; // it is used without a template-argument-list, it is; // equivalent to the injected-class-name followed by the; // template-parameters of the class template enclosed in; // <>. When it is used with a template-argument-list, it; // refers to the specified class template specialization,; // which could be the current specialization or another; // specialization.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp:91,inject,injected-class-name,91,interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp,3,['inject'],['injected-class-name']
Security,"// C++ [temp.local]p3:; // A lookup that finds an injected-class-name (10.2) can result in an; // ambiguity in certain cases (for example, if it is found in more than; // one base class). If all of the injected-class-names that are found; // refer to specializations of the same class template, and if the name; // is followed by a template-argument-list, the reference refers to the; // class template itself and not a specialization thereof, and is not; // ambiguous.; //; // This filtering can make an ambiguous result into an unambiguous one,; // so try again after filtering out template names.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:50,inject,injected-class-name,50,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,2,['inject'],"['injected-class-name', 'injected-class-names']"
Security,"// C++ [temp.local]p3:; // A lookup that finds an injected-class-name (10.2) can result in; // an ambiguity in certain cases (for example, if it is found in; // more than one base class). If all of the injected-class-names; // that are found refer to specializations of the same class; // template, and if the name is used as a template-name, the; // reference refers to the class template itself and not a; // specialization thereof, and is not ambiguous.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaLookup.cpp:50,inject,injected-class-name,50,interpreter/llvm-project/clang/lib/Sema/SemaLookup.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaLookup.cpp,2,['inject'],"['injected-class-name', 'injected-class-names']"
Security,"// C++ performs lvalue-to-rvalue conversion as a default argument; // promotion, even on class types, but note:; // C++11 [conv.lval]p2:; // When an lvalue-to-rvalue conversion occurs in an unevaluated; // operand or a subexpression thereof the value contained in the; // referenced object is not accessed. Otherwise, if the glvalue; // has a class type, the conversion copy-initializes a temporary; // of type T from the glvalue and the result of the conversion; // is a prvalue for the temporary.; // FIXME: add some way to gate this entire thing for correctness in; // potentially potentially evaluated contexts.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:297,access,accessed,297,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['access'],['accessed']
Security,"// C++0x [class]p7:; // A standard-layout class is a class that:; // [...]; // -- has the same access control for all non-static data members,",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/DeclCXX.cpp:95,access,access,95,interpreter/llvm-project/clang/lib/AST/DeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/DeclCXX.cpp,1,['access'],['access']
Security,"// C++0x [meta.rel]p4:; // Given the following function prototype:; //; // template <class T>; // typename add_rvalue_reference<T>::type create();; //; // the predicate condition for a template specialization; // is_convertible<From, To> shall be satisfied if and only if; // the return expression in the following code would be; // well-formed, including any implicit conversions to the return; // type of the function:; //; // To test() {; // return create<From>();; // }; //; // Access checking is performed as if in a context unrelated to To and; // From. Only the validity of the immediate context of the expression; // of the return-statement (including conversions to the return type); // is considered.; //; // We model the initialization as a copy-initialization of a temporary; // of the appropriate type, which for this expression is identical to the; // return statement (since NRVO doesn't apply).; // Functions aren't allowed to return function or array types.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp:482,Access,Access,482,interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp,1,['Access'],['Access']
Security,"// C++11 [class.access.nest]p1:; // A nested class is a member and as such has the same access; // rights as any other member.; // C++11 [class.access]p2:; // A member of a class can also access all the names to which; // the class has access. A local class of a member function; // may access the same names that the member function itself; // may access.; // This almost implies that the privileges of nesting are transitive.; // Technically it says nothing about the local classes of non-member; // functions (which can gain privileges through friendship), but we; // take that as an oversight.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaAccess.cpp:16,access,access,16,interpreter/llvm-project/clang/lib/Sema/SemaAccess.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaAccess.cpp,7,['access'],['access']
Security,"// C++11 [expr.call]p1: ...If the selected function is non-virtual, or if the; // id-expression in the class member access expression is a qualified-id,; // that function is called. Otherwise, its final overrider in the dynamic type; // of the object expression is called.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/CallEvent.cpp:116,access,access,116,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/CallEvent.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/CallEvent.cpp,1,['access'],['access']
Security,// C++11 [expr.lambda.prim]p18:; // Every occurrence of decltype((x)) where x is a possibly; // parenthesized id-expression that names an entity of automatic; // storage duration is treated as if x were transformed into an; // access to a corresponding data member of the closure type that; // would have been declared if x were an odr-use of the denoted; // entity.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaType.cpp:227,access,access,227,interpreter/llvm-project/clang/lib/Sema/SemaType.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaType.cpp,1,['access'],['access']
Security,"// C++11 [expr.rel]p2:; // - If two pointers point to non-static data members of the same object,; // or to subobjects or array elements fo such members, recursively, the; // pointer to the later declared member compares greater provided the; // two members have the same access control and provided their class is; // not a union.; // [...]; // - Otherwise pointer comparisons are unspecified.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp:272,access,access,272,interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,1,['access'],['access']
Security,// C++11 [temp.explicit]p12:; // The usual access controls do not apply to names used to specify; // explicit instantiations.; // We extend this to also cover explicit specializations. Note that; // we don't suppress if this turns out to be an elaborated type; // specifier.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseDecl.cpp:43,access,access,43,interpreter/llvm-project/clang/lib/Parse/ParseDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseDecl.cpp,1,['access'],['access']
Security,"// C++11 and later guarantees that a thread eventually will do one of the; // following (C++11 [intro.multithread]p24 and C++17 [intro.progress]p1):; // - terminate,; // - make a call to a library I/O function,; // - perform an access through a volatile glvalue, or; // - perform a synchronization operation or an atomic operation.; //; // Hence each function is 'mustprogress' in C++11 or later.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:228,access,access,228,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,1,['access'],['access']
Security,"// C++14 [class.qual]p2:; // In a lookup in which function names are not ignored and the; // nested-name-specifier nominates a class C, if the name specified; // [...] is the injected-class-name of C, [...] the name is instead; // considered to name the constructor; //; // We don't get here if naming the constructor would be valid, so we; // just reject immediately and recover by treating the; // injected-class-name as naming the template.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp:175,inject,injected-class-name,175,interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp,2,['inject'],['injected-class-name']
Security,"// C++17 [temp.local]p2:; // the injected-class-name [...] is equivalent to the template-name followed; // by the template-arguments of the class template specialization or partial; // specialization enclosed in <>; // ... which means it's equivalent to a simple-template-id.; //; // This only arises during class template argument deduction for a copy; // deduction candidate, where it permits slicing.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateDeduction.cpp:33,inject,injected-class-name,33,interpreter/llvm-project/clang/lib/Sema/SemaTemplateDeduction.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateDeduction.cpp,1,['inject'],['injected-class-name']
Security,"// C++1z [basic.lval]p10: ""If a program attempts to access the stored value of; // an object through a glvalue of other than one of the following types the; // behavior is undefined: [...] a char, unsigned char, or std::byte type.""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.cpp:52,access,access,52,interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.cpp,1,['access'],['access']
Security,// C++1z [temp.local]p1: (DR1004); // When [the injected-class-name] is used [...] as a template-argument for; // a template template-parameter [...] it refers to the class template; // itself.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp:48,inject,injected-class-name,48,interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp,1,['inject'],['injected-class-name']
Security,// C++20 [temp.class.spec] 13.7.5/10; // The usual access checking rules do not apply to non-dependent names; // used to specify template arguments of the simple-template-id of the; // partial specialization.; // C++20 [temp.spec] 13.9/6:; // The usual access checking rules do not apply to names in a declaration; // of an explicit instantiation or explicit specialization...,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseDeclCXX.cpp:51,access,access,51,interpreter/llvm-project/clang/lib/Parse/ParseDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseDeclCXX.cpp,2,['access'],['access']
Security,// C++20 [temp.spec] 13.9/6.; // This disables the access checking rules for function template explicit; // instantiation and explicit specialization:; // - `return type`.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseDecl.cpp:51,access,access,51,interpreter/llvm-project/clang/lib/Parse/ParseDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseDecl.cpp,1,['access'],['access']
Security,// C++20 [temp.spec] 13.9/6.; // This disables the access checking rules for function template; // explicit instantiation and explicit specialization:; // - `return type`.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseDecl.cpp:51,access,access,51,interpreter/llvm-project/clang/lib/Parse/ParseDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseDecl.cpp,1,['access'],['access']
Security,// C++20 [temp.spec] 13.9/6.; // This disables the access checking rules for member function template; // explicit instantiation and explicit specialization.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseDeclCXX.cpp:51,access,access,51,interpreter/llvm-project/clang/lib/Parse/ParseDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseDeclCXX.cpp,1,['access'],['access']
Security,"// C++2a [basic.lookup.qual]p6:; // In a qualified-id of the form; //; // nested-name-specifier[opt] type-name :: ~ type-name; //; // the second type-name is looked up in the same scope as the first.; //; // We interpret this as meaning that if you do a dual-scope lookup for the; // first name, you also do a dual-scope lookup for the second name, per; // C++ [basic.lookup.classref]p4:; //; // If the id-expression in a class member access is a qualified-id of the; // form; //; // class-name-or-namespace-name :: ...; //; // the class-name-or-namespace-name following the . or -> is first looked; // up in the class of the object expression and the name, if found, is used.; // Otherwise, it is looked up in the context of the entire; // postfix-expression.; //; // This looks in the same scopes as for an unqualified destructor name:; //; // C++ [basic.lookup.classref]p3:; // If the unqualified-id is ~ type-name, the type-name is looked up; // in the context of the entire postfix-expression. If the type T; // of the object expression is of a class type C, the type-name is; // also looked up in the scope of class C. At least one of the; // lookups shall find a name that refers to cv T.; //; // FIXME: The intent is unclear here. Should type-name::~type-name look in; // the scope anyway if it finds a non-matching name declared in the class?; // If both lookups succeed and find a dependent result, which result should; // we retain? (Same question for p->~type-name().)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp:435,access,access,435,interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp,1,['access'],['access']
Security,// C++2a [class.compare.default]p3:; // an == operator function is declared implicitly [...] with the same; // access and function-definition and in the same class scope as the; // three-way comparison operator function,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp:111,access,access,111,interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp,1,['access'],['access']
Security,"// C++98:; // -- if T is a class type (clause 9) with a user-declared constructor; // (12.1), then the default constructor for T is called (and the; // initialization is ill-formed if T has no accessible default; // constructor);; // C++11:; // -- if T is a class type (clause 9) with either no default constructor; // (12.1 [class.ctor]) or a default constructor that is user-provided; // or deleted, then the object is default-initialized;; //; // Note that the C++11 rule is the same as the C++98 rule if there are no; // defaulted or deleted constructors, so we just use it unconditionally.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp:193,access,accessible,193,interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp,1,['access'],['accessible']
Security,"// C, C++98 [expr.sub]p1: The result is an lvalue of type ""T"".; // C++11 (DR1213): in the case of an array operand, the result is an lvalue; // if that operand is an lvalue and an xvalue otherwise.; // Subscripting vector types is more like member access.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprClassification.cpp:248,access,access,248,interpreter/llvm-project/clang/lib/AST/ExprClassification.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprClassification.cpp,1,['access'],['access']
Security,"// C99 6.5.2.3p3; // For dot access, the expression is an lvalue if the first part is. For; // arrow access, it always is an lvalue.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprClassification.cpp:29,access,access,29,interpreter/llvm-project/clang/lib/AST/ExprClassification.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprClassification.cpp,2,['access'],['access']
Security,// C99 6.7.6: Type names have no identifier. This is already validated by; // the parser.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaType.cpp:61,validat,validated,61,interpreter/llvm-project/clang/lib/Sema/SemaType.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaType.cpp,1,['validat'],['validated']
Security,"// CDT_USE_STRONG_TYPING; /// Edge hasher",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/CDTUtils.h:35,hash,hasher,35,math/mathcore/src/CDT/CDTUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/CDTUtils.h,1,['hash'],['hasher']
Security,// CFG hash value for this function.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/PGOInstrumentation.cpp:7,hash,hash,7,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/PGOInstrumentation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/PGOInstrumentation.cpp,1,['hash'],['hash']
Security,"// CLR funclets use a special ""Previous Stack Pointer Symbol"" slot on the; // stack. It holds a pointer to the bottom of the root function frame. The; // establisher frame pointer passed to a nested funclet may point to the; // (mostly empty) frame of its parent funclet, but it will need to find; // the frame of the root function to access locals. To facilitate this,; // every funclet copies the pointer to the bottom of the root function; // frame into a PSPSym slot in its own (mostly empty) stack frame. Using the; // same offset for the PSPSym in the root function frame that's used in the; // funclets' frames allows each funclet to dynamically accept any ancestor; // frame as its establisher argument (the runtime doesn't guarantee the; // immediate parent for some reason lost to history), and also allows the GC,; // which uses the PSPSym for some bookkeeping, to find it in any funclet's; // frame with only a single offset reported for the entire method.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FrameLowering.cpp:335,access,access,335,interpreter/llvm-project/llvm/lib/Target/X86/X86FrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FrameLowering.cpp,1,['access'],['access']
Security,// CMSE non-secure function call.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.h:12,secur,secure,12,interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.h,1,['secur'],['secure']
Security,"// CPYCPPYY_PARAMETER; // CallContext is not currently exposed",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/include/CPyCppyy/API.h:55,expose,exposed,55,bindings/pyroot/cppyy/CPyCppyy/include/CPyCppyy/API.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/include/CPyCppyy/API.h,1,['expose'],['exposed']
Security,"// CUDA B.2.1 ""The __device__ qualifier declares a variable that resides on; // the device. [...]""; // CUDA B.2.2 ""The __constant__ qualifier, optionally used together with; // __device__, declares a variable that: [...]; // Is accessible from all the threads within the grid and from the host; // through the runtime library (cudaGetSymbolAddress() / cudaGetSymbolSize(); // / cudaMemcpyToSymbol() / cudaMemcpyFromSymbol()).""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:228,access,accessible,228,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,1,['access'],['accessible']
Security,"// CUDA runtime uses this undocumented function to access kernel launch; // configuration. The declaration is in crt/device_functions.h but that file; // includes a lot of other stuff we don't want. Instead, we'll provide our own; // declaration for it here.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/__clang_cuda_runtime_wrapper.h:51,access,access,51,interpreter/llvm-project/clang/lib/Headers/__clang_cuda_runtime_wrapper.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/__clang_cuda_runtime_wrapper.h,1,['access'],['access']
Security,"// CXXDependentScopeMemberExpr is followed by several trailing objects,; // some of which optional. They are in order:; //; // * An optional ASTTemplateKWAndArgsInfo for the explicitly specified; // template keyword and arguments. Present if and only if; // hasTemplateKWAndArgsInfo().; //; // * An array of getNumTemplateArgs() TemplateArgumentLoc containing location; // information for the explicitly specified template arguments.; //; // * An optional NamedDecl *. In a qualified member access expression such; // as t->Base::f, this member stores the resolves of name lookup in the; // context of the member access expression, to be used at instantiation; // time. Present if and only if hasFirstQualifierFoundInScope().",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:491,access,access,491,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,2,['access'],['access']
Security,"// Cache copy feature is not publicly accessible",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooDataSet.h:38,access,accessible,38,roofit/roofitcore/inc/RooDataSet.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooDataSet.h,1,['access'],['accessible']
Security,// Cache disabled or no entry for this module in the combined index or; // no module hash.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/LTO/LTO.cpp:85,hash,hash,85,interpreter/llvm-project/llvm/lib/LTO/LTO.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/LTO/LTO.cpp,1,['hash'],['hash']
Security,"// Cache for the BitTracker's cell map. Map lookup has a logarithmic; // complexity, this class will memoize the lookup results to reduce; // the access time for repeated lookups of the same cell.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonGenInsert.cpp:146,access,access,146,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonGenInsert.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonGenInsert.cpp,1,['access'],['access']
Security,"// Cache optimisation, count true and false positives with memory access; // instead of code branch.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ResultsMulticlass.cxx:66,access,access,66,tmva/tmva/src/ResultsMulticlass.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ResultsMulticlass.cxx,1,['access'],['access']
Security,"// Cache the result of an SMT query (true, false, unknown). The key is the; // hash of the constraints in a state",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConstraintManager.h:79,hash,hash,79,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConstraintManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConstraintManager.h,1,['hash'],['hash']
Security,"// Cache the value in memory than is not part of the object but is accessible via a SchemaRule",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/inc/TVirtualStreamerInfo.h:67,access,accessible,67,core/meta/inc/TVirtualStreamerInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/inc/TVirtualStreamerInfo.h,1,['access'],['accessible']
Security,"// Cached the correct isprint variant rather than checking in a loop.; //; // If output handles UTF-8 and string is UTF-8, then validate against UTF-8.; // If string is UTF-8 validate printable against std::isprint<char32_t>.; // If nothing is UTF-8 validate against std::isprint<char> .",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Utils/UTF8.cpp:128,validat,validate,128,interpreter/cling/lib/Utils/UTF8.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Utils/UTF8.cpp,3,['validat'],['validate']
Security,"// Calculate and save the new checksum",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TDataSetManagerFile.cxx:30,checksum,checksum,30,proof/proof/src/TDataSetManagerFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TDataSetManagerFile.cxx,1,['checksum'],['checksum']
Security,"// Calculate crc32 checksum on given string",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooWorkspace.cxx:19,checksum,checksum,19,roofit/roofitcore/src/RooWorkspace.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooWorkspace.cxx,1,['checksum'],['checksum']
Security,// Calculate mask for extended hash bits.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h:31,hash,hash,31,interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h,1,['hash'],['hash']
Security,// Calculate pointer size and alignment. These are used for vfptr and vbprt; // injection.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:80,inject,injection,80,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,1,['inject'],['injection']
Security,"// Calculate the ""top-down"" access to this base class.; // The spec actually describes this bottom-up, but top-down is; // equivalent because the definition works out as follows:; // 1. Write down the access along each step in the inheritance; // chain, followed by the access of the decl itself.; // For example, in; // class A { public: int foo; };; // class B : protected A {};; // class C : public B {};; // class D : private C {};; // we would write:; // private public protected public; // 2. If 'private' appears anywhere except far-left, access is denied.; // 3. Otherwise, overall access is determined by the most restrictive; // access in the sequence.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/CXXInheritance.cpp:28,access,access,28,interpreter/llvm-project/clang/lib/AST/CXXInheritance.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/CXXInheritance.cpp,6,['access'],['access']
Security,// Calculate the PAL metadata key for *S_SCRATCH_SIZE. It can be used; // with a constant offset to access any non-register shader-specific PAL; // metadata key.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/Utils/AMDGPUPALMetadata.cpp:100,access,access,100,interpreter/llvm-project/llvm/lib/Target/AMDGPU/Utils/AMDGPUPALMetadata.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/Utils/AMDGPUPALMetadata.cpp,1,['access'],['access']
Security,// Calculate the exposed part of the reached use.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RDFLiveness.cpp:17,expose,exposed,17,interpreter/llvm-project/llvm/lib/CodeGen/RDFLiveness.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RDFLiveness.cpp,1,['expose'],['exposed']
Security,// Calculate the index needed to access the correct field based on the; // range. Also adjust the expected value.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:33,access,access,33,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,1,['access'],['access']
Security,// Calculate the total size to store. We don't have access to what we're; // actually storing other than performing the loop and collecting the; // info.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/LoongArch/LoongArchISelLowering.cpp:52,access,access,52,interpreter/llvm-project/llvm/lib/Target/LoongArch/LoongArchISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/LoongArch/LoongArchISelLowering.cpp,2,['access'],['access']
Security,"// Calculate the value for ""First octet"" of the hash",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUUID.cxx:48,hash,hash,48,core/base/src/TUUID.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUUID.cxx,1,['hash'],['hash']
Security,"// Calculate the value for ""second octet"" of the hash",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUUID.cxx:49,hash,hash,49,core/base/src/TUUID.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUUID.cxx,1,['hash'],['hash']
Security,"// Calculate what the offset of the first hash record in the chain would; // be if it were inflated to contain 32-bit pointers. On a 32-bit system,; // each record would be 12 bytes. See HROffsetCalc in gsi.h.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/PDB/Native/GSIStreamBuilder.cpp:42,hash,hash,42,interpreter/llvm-project/llvm/lib/DebugInfo/PDB/Native/GSIStreamBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/PDB/Native/GSIStreamBuilder.cpp,1,['hash'],['hash']
Security,// Calculates checksum of stringified record representation; // S must NOT contain leading ':' and trailing whitespace; // characters,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.h:14,checksum,checksum,14,interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.h,1,['checksum'],['checksum']
Security,"// Calculates frame size required for current printf expansion and allocates; // space on printf buffer. Printf frame includes following contents; // [ ControlDWord , format string/Hash , Arguments (each aligned to 8 byte) ]",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/AMDGPUEmitPrintf.cpp:181,Hash,Hash,181,interpreter/llvm-project/llvm/lib/Transforms/Utils/AMDGPUEmitPrintf.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/AMDGPUEmitPrintf.cpp,1,['Hash'],['Hash']
Security,"// Calculates hash index from any char string.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TString.h:14,hash,hash,14,core/base/inc/TString.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TString.h,1,['hash'],['hash']
Security,"// Call doesn't access memory through this operand, so we don't care; // if it aliases with Object.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/BasicAliasAnalysis.cpp:16,access,access,16,interpreter/llvm-project/llvm/lib/Analysis/BasicAliasAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/BasicAliasAnalysis.cpp,1,['access'],['access']
Security,"// Call sites inlined through a 'nounwind' call site should be; // 'nounwind' as well. However, avoid marking call sites explicitly; // where possible. This helps expose more opportunities for CSE after; // inlining, commonly when the callee is an intrinsic.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/InlineFunction.cpp:163,expose,expose,163,interpreter/llvm-project/llvm/lib/Transforms/Utils/InlineFunction.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/InlineFunction.cpp,1,['expose'],['expose']
Security,// Call stack metadata should consist of a list of at least 1 constant int; // (representing a hash of the location).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Verifier.cpp:95,hash,hash,95,interpreter/llvm-project/llvm/lib/IR/Verifier.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Verifier.cpp,1,['hash'],['hash']
Security,// Call validator for dxil when -Vd not in Args.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:8,validat,validator,8,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp,1,['validat'],['validator']
Security,"// CallExpr store some data in trailing objects. However since CallExpr; // is used a base of other expression classes we cannot use; // llvm::TrailingObjects. Instead we manually perform the pointer arithmetic; // and casts.; //; // The trailing objects are in order:; //; // * A single ""Stmt *"" for the callee expression.; //; // * An array of getNumPreArgs() ""Stmt *"" for the pre-argument expressions.; //; // * An array of getNumArgs() ""Stmt *"" for the argument expressions.; //; // * An optional of type FPOptionsOverride.; //; // Note that we store the offset in bytes from the this pointer to the start; // of the trailing objects. It would be perfectly possible to compute it; // based on the dynamic kind of the CallExpr. However 1.) we have plenty of; // space in the bit-fields of Stmt. 2.) It was benchmarked to be faster to; // compute this once and then load the offset from the bit-fields of Stmt,; // instead of re-computing the offset each time the trailing objects are; // accessed.; /// Return a pointer to the start of the trailing array of ""Stmt *"".",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:991,access,accessed,991,interpreter/llvm-project/clang/include/clang/AST/Expr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h,1,['access'],['accessed']
Security,// Callable functions have fixed registers used for stack access.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp:58,access,access,58,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp,1,['access'],['access']
Security,"// Callback to only accept typo corrections that are Objective-C classes.; // If an ObjCInterfaceDecl* is given to the constructor, then the validation; // function will reject corrections to that class.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclObjC.cpp:141,validat,validation,141,interpreter/llvm-project/clang/lib/Sema/SemaDeclObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclObjC.cpp,1,['validat'],['validation']
Security,"// Callback: Save only weights with smallest validation loss",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx:45,validat,validation,45,tmva/pymva/src/MethodPyKeras.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx,1,['validat'],['validation']
Security,"// Callback: Stop training early if no improvement in validation loss is observed",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx:54,validat,validation,54,tmva/pymva/src/MethodPyKeras.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx,1,['validat'],['validation']
Security,// Calls that only access inaccessible memory cannot read or write any memory; // locations we consider for elimination.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/DeadStoreElimination.cpp:19,access,access,19,interpreter/llvm-project/llvm/lib/Transforms/Scalar/DeadStoreElimination.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/DeadStoreElimination.cpp,1,['access'],['access']
Security,// Calls that only access inaccessible memory do not block merging; // accessible stores.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/MemCpyOptimizer.cpp:19,access,access,19,interpreter/llvm-project/llvm/lib/Transforms/Scalar/MemCpyOptimizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/MemCpyOptimizer.cpp,2,['access'],"['access', 'accessible']"
Security,// Calls that only access inaccessible memory do not block sinking the; // load.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombinePHI.cpp:19,access,access,19,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombinePHI.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombinePHI.cpp,1,['access'],['access']
Security,// Can reach here only if accesses are known not to overlap.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/DeadStoreElimination.cpp:26,access,accesses,26,interpreter/llvm-project/llvm/lib/Transforms/Scalar/DeadStoreElimination.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/DeadStoreElimination.cpp,1,['access'],['accesses']
Security,// Can't change the number of memory accesses for a volatile store or break; // atomicity for an atomic one.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:37,access,accesses,37,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['access'],['accesses']
Security,// Can't vectorize if AccessBytes if not a multiple of EltSize.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXISelLowering.cpp:22,Access,AccessBytes,22,interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXISelLowering.cpp,1,['Access'],['AccessBytes']
Security,"// Cannot use PyLong_AsSize_t here, as it cuts of at PY_SSIZE_T_MAX, which is; // only half of the max of std::size_t returned by the hash.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx:134,hash,hash,134,bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx,1,['hash'],['hash']
Security,"// Canonicalize the path. We have to do it textually because we may no longer; // have access the file in the filesystem.; // First, replace all slashes with backslashes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/CodeViewDebug.cpp:87,access,access,87,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/CodeViewDebug.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/CodeViewDebug.cpp,1,['access'],['access']
Security,// Capture of this pointer is allowed since this pointer may be pointing to; // managed memory which is accessible on both device and host sides. It only; // results in invalid memory access if this pointer points to memory not; // accessible on device side.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCUDA.cpp:104,access,accessible,104,interpreter/llvm-project/clang/lib/Sema/SemaCUDA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCUDA.cpp,3,['access'],"['access', 'accessible']"
Security,// Capture the context in which the function call is made. This is the context; // that is needed when the accessibility of template arguments is checked.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateDeduction.cpp:107,access,accessibility,107,interpreter/llvm-project/clang/lib/Sema/SemaTemplateDeduction.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateDeduction.cpp,1,['access'],['accessibility']
Security,"// Case 1: A full group. Can Skip the checks; For full groups, if the wide; // load would wrap around the address space we would do a memory access at; // nullptr even without the transformation.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/VectorUtils.cpp:141,access,access,141,interpreter/llvm-project/llvm/lib/Analysis/VectorUtils.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/VectorUtils.cpp,1,['access'],['access']
Security,"// Case 1: A full group. Can Skip the checks; For full groups, if the wide; // store would wrap around the address space we would do a memory access at; // nullptr even without the transformation.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/VectorUtils.cpp:142,access,access,142,interpreter/llvm-project/llvm/lib/Analysis/VectorUtils.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/VectorUtils.cpp,1,['access'],['access']
Security,"// Case 2: If first and last members of the group don't wrap this implies; // that all the pointers in the group don't wrap.; // So we check only group member 0 (which is always guaranteed to exist),; // and the last group member. Case 3 (scalar epilog) is not relevant for; // stores with gaps, which are implemented with masked-store (rather than; // speculative access, as in loads).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/VectorUtils.cpp:365,access,access,365,interpreter/llvm-project/llvm/lib/Analysis/VectorUtils.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/VectorUtils.cpp,1,['access'],['access']
Security,"// Case 3: A non-reversed interleaved load group with gaps: We need; // to execute at least one scalar epilogue iteration. This will ensure; // we don't speculatively access memory out-of-bounds. We only need; // to look for a member at index factor - 1, since every group must have; // a member at index zero.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/VectorUtils.cpp:167,access,access,167,interpreter/llvm-project/llvm/lib/Analysis/VectorUtils.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/VectorUtils.cpp,1,['access'],['access']
Security,// Catch weird sized loads that don't evenly divide into the access sizes; // TODO: May be able to widen depending on alignment etc.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULegalizerInfo.cpp:61,access,access,61,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULegalizerInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULegalizerInfo.cpp,1,['access'],['access']
Security,// Categorize potentially accessed pointer arguments as if there was an; // access instruction with them as pointer.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp:26,access,accessed,26,interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp,2,['access'],"['access', 'accessed']"
Security,"// Caution: this function is called by the AST reader during deserialization,; // so it cannot rely on AST invariants being met. Non-trivial accessors; // should be avoided, along with any traversal of redeclaration chains.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp:141,access,accessors,141,interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,1,['access'],['accessors']
Security,"// Certain memory accesses are known to not alias any SU in Stores; // or Loads, and have therefore their own 'NonAlias'; // domain. E.g. spill / reload instructions never alias LLVM I/R; // Values. It would be nice to assume that this type of memory; // accesses always have a proper memory operand modelling, and are; // therefore never unanalyzable, but this is conservatively not; // done.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ScheduleDAGInstrs.cpp:18,access,accesses,18,interpreter/llvm-project/llvm/lib/CodeGen/ScheduleDAGInstrs.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ScheduleDAGInstrs.cpp,2,['access'],['accesses']
Security,"// Change select and PHI nodes to select values instead of addresses: this; // helps alias analysis out a lot, allows many others simplifications, and; // exposes redundancy in the code.; //; // Note that we cannot do the transformation unless we know that the; // introduced loads cannot trap! Something like this is valid as long as; // the condition is always false: load (select bool %C, int* null, int* %G),; // but it would not be valid if we transformed it to load from null; // unconditionally.; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineLoadStoreAlloca.cpp:155,expose,exposes,155,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineLoadStoreAlloca.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineLoadStoreAlloca.cpp,1,['expose'],['exposes']
Security,"// Change the offset for checkSumAdjustment to the; // global indexing",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/mathtext/src/fontembed.cxx:25,checkSum,checkSumAdjustment,25,graf2d/mathtext/src/fontembed.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/mathtext/src/fontembed.cxx,1,['checkSum'],['checkSumAdjustment']
Security,"// Character not authorized within a template parameter",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx:17,authoriz,authorized,17,hist/hist/src/TFormula_v5.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx,1,['authoriz'],['authorized']
Security,"// Check Load, Store, GEP, and BitCast Uses on alloca and make them; // use the converted generic address, in order to expose non-generic; // addrspacecast to NVPTXInferAddressSpaces. For other types; // of instructions this is unnecessary and may introduce redundant; // address cast.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXLowerAlloca.cpp:119,expose,expose,119,interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXLowerAlloca.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXLowerAlloca.cpp,1,['expose'],['expose']
Security,"// Check access",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/winnt/src/TWinNTSystem.cxx:9,access,access,9,core/winnt/src/TWinNTSystem.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/winnt/src/TWinNTSystem.cxx,1,['access'],['access']
Security,// Check access and ambiguity of destructor if we're going to call it.; // Note that this is required even for a virtual delete.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp:9,access,access,9,interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp,1,['access'],['access']
Security,// Check accesses within this set.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp:9,access,accesses,9,interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp,1,['access'],['accesses']
Security,"// Check availability of the secure alternative:; // iOS 11+, macOS 10.13+, tvOS 11+, and watchOS 4.0+; // FIXME: We probably shouldn't register the check if it's not available.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CheckSecuritySyntaxOnly.cpp:29,secur,secure,29,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CheckSecuritySyntaxOnly.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CheckSecuritySyntaxOnly.cpp,1,['secur'],['secure']
Security,"// Check checksums",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/src/TProofPlayer.cxx:9,checksum,checksums,9,proof/proofplayer/src/TProofPlayer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/src/TProofPlayer.cxx,1,['checksum'],['checksums']
Security,"// Check checksums for the versions of the selector files",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/src/TProofPlayer.cxx:9,checksum,checksums,9,proof/proofplayer/src/TProofPlayer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/src/TProofPlayer.cxx,1,['checksum'],['checksums']
Security,"// Check established authentications",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/TAuthenticate.cxx:21,authenticat,authentications,21,net/auth/src/TAuthenticate.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/TAuthenticate.cxx,1,['authenticat'],['authentications']
Security,// Check every access pair.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp:15,access,access,15,interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp,1,['access'],['access']
Security,// Check every accessing instruction pair in program order.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp:15,access,accessing,15,interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp,1,['access'],['accessing']
Security,"// Check for a mismatched access type, and fall back conservatively as needed.; // TODO: Be less conservative when the type is similar and can use the same; // addressing modes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp:26,access,access,26,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp,1,['access'],['access']
Security,// Check for access of invalidated position,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/InvalidatedIteratorChecker.cpp:13,access,access,13,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/InvalidatedIteratorChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/InvalidatedIteratorChecker.cpp,1,['access'],['access']
Security,// Check for any kind of access of invalidated iterator positions,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/InvalidatedIteratorChecker.cpp:25,access,access,25,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/InvalidatedIteratorChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/InvalidatedIteratorChecker.cpp,1,['access'],['access']
Security,// Check for each StmtSequence if its successor has the same hash value.; // We don't check the last StmtSequence as it has no successor.; // Note: The 'size - 1 ' in the condition is safe because we check for an; // empty Group vector at the beginning of this function.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CloneDetection.cpp:61,hash,hash,61,interpreter/llvm-project/clang/lib/Analysis/CloneDetection.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CloneDetection.cpp,1,['hash'],['hash']
Security,"// Check for interlocks first. For the purpose of other heuristics, an; // instruction that cannot issue appears as if it's not in the ReadyQueue.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineScheduler.cpp:13,interlock,interlocks,13,interpreter/llvm-project/llvm/lib/CodeGen/MachineScheduler.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineScheduler.cpp,2,['interlock'],['interlocks']
Security,// Check for out of bound array element access.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/ArrayBoundChecker.cpp:40,access,access,40,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/ArrayBoundChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/ArrayBoundChecker.cpp,3,['access'],['access']
Security,// Check for out of range access,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/IteratorRangeChecker.cpp:26,access,access,26,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/IteratorRangeChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/IteratorRangeChecker.cpp,1,['access'],['access']
Security,"// Check for the case where we're going to rewrite to a new alloca of the; // exact same type as the original, and with the same access offsets. In that; // case, re-use the existing alloca, but still run through the rewriter to; // perform phi and select speculation.; // P.beginOffset() can be non-zero even with the same type in a case with; // out-of-bounds access (e.g. @PR35657 function in SROA/basictest.ll).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp:129,access,access,129,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,2,['access'],['access']
Security,"// Check for the gnu.hash section if ELF.; // If the symbol doesn't exist, exit early.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/DynamicLibraryManagerSymbol.cpp:21,hash,hash,21,interpreter/cling/lib/Interpreter/DynamicLibraryManagerSymbol.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/DynamicLibraryManagerSymbol.cpp,1,['hash'],['hash']
Security,// Check for the magic bytes. This file format is designed to be mmap'ed; // into a process and accessed as read only. This is done for performance; // and efficiency for symbolicating and parsing GSYM data.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/GSYM/GsymReader.cpp:96,access,accessed,96,interpreter/llvm-project/llvm/lib/DebugInfo/GSYM/GsymReader.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/GSYM/GsymReader.cpp,1,['access'],['accessed']
Security,// Check for working directory option before accessing any files,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:45,access,accessing,45,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp,1,['access'],['accessing']
Security,"// Check if OffsetInRecord (the size in bits of the current run) is better; // as a single field run. When OffsetInRecord has legal integer width, and; // its bitfield offset is naturally aligned, it is better to make the; // bitfield a separate storage component so as it can be accessed directly; // with lower cost.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp:280,access,accessed,280,interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp,1,['access'],['accessed']
Security,// Check if \p DeadI acts as a DSE barrier for \p KillingI. The following; // instructions act as barriers:; // * A memory instruction that may throw and \p KillingI accesses a non-stack; // object.; // * Atomic stores stronger that monotonic.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/DeadStoreElimination.cpp:166,access,accesses,166,interpreter/llvm-project/llvm/lib/Transforms/Scalar/DeadStoreElimination.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/DeadStoreElimination.cpp,1,['access'],['accesses']
Security,"// Check if \p Element matches a concrete answer. It could fail for some; // elements that are never accessed, so we keep iterating over each element; // from the table. The number of matched elements should be equal to the; // number of potential right answers which is \p InputBits actually.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/AggressiveInstCombine/AggressiveInstCombine.cpp:101,access,accessed,101,interpreter/llvm-project/llvm/lib/Transforms/AggressiveInstCombine/AggressiveInstCombine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/AggressiveInstCombine/AggressiveInstCombine.cpp,1,['access'],['accessed']
Security,// Check if any one of SanitizeBinaryMetadata* is enabled.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h:23,Sanitiz,SanitizeBinaryMetadata,23,interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h,1,['Sanitiz'],['SanitizeBinaryMetadata']
Security,// Check if any one of SanitizeCoverage* is enabled.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h:23,Sanitiz,SanitizeCoverage,23,interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h,1,['Sanitiz'],['SanitizeCoverage']
Security,"// Check if authentication is required; // Old clients do not support no authentication mode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/rpdutils.cxx:12,authenticat,authentication,12,net/rpdutils/src/rpdutils.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/rpdutils.cxx,2,['authenticat'],['authentication']
Security,"// Check if authorized; // If not anonymous, try to get passwd; // (if our system uses shadow passwds and we are not superuser; // we cannot authenticate users ...); // char *passw = 0;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/rpdutils.cxx:12,authoriz,authorized,12,net/rpdutils/src/rpdutils.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/rpdutils.cxx,2,"['authenticat', 'authoriz']","['authenticate', 'authorized']"
Security,// Check if it will be merged with the load.; // 1. Check the alignment / fast memory access constraint.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:86,access,access,86,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['access'],['access']
Security,"// Check if masking is required.; // A Group may need masking for one of two reasons: it resides in a block that; // needs predication, or it was decided to use masking to deal with gaps; // (either a gap at the end of a load-access that may result in a speculative; // load, or any gaps in a store-access).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:226,access,access,226,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,2,['access'],['access']
Security,"// Check if store instructions S1 and S2 are adjacent. More precisely,; // S2 has to access memory immediately following that accessed by S1.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonStoreWidening.cpp:85,access,access,85,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonStoreWidening.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonStoreWidening.cpp,2,['access'],"['access', 'accessed']"
Security,// Check if the access match.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ODRDiagsEmitter.cpp:16,access,access,16,interpreter/llvm-project/clang/lib/AST/ODRDiagsEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ODRDiagsEmitter.cpp,1,['access'],['access']
Security,"// Check if the administrator allows authentication",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/rpdutils.cxx:37,authenticat,authentication,37,net/rpdutils/src/rpdutils.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/rpdutils.cxx,1,['authenticat'],['authentication']
Security,// Check if the base type is a pointer to a member access of a struct; // marked with noderef.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:51,access,access,51,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['access'],['access']
Security,// Check if the file checksum table offset is valid.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVCodeViewReader.cpp:21,checksum,checksum,21,interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVCodeViewReader.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVCodeViewReader.cpp,2,['checksum'],['checksum']
Security,// Check if the first byte of the buffer is accessible.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CStringChecker.cpp:44,access,accessible,44,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CStringChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CStringChecker.cpp,1,['access'],['accessible']
Security,"// Check if the function has store-immediate instructions that access; // the stack. Since the offset field is not extendable, if the stack; // size exceeds the offset limit (6 bits, shifted), the stores will; // require a new base register.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonFrameLowering.cpp:63,access,access,63,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonFrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonFrameLowering.cpp,1,['access'],['access']
Security,"// Check if the gradient request was made as part of another TFormula.; // This can happen when we create multiple TFormula objects with the same; // formula. In that case, the hasher will give identical id and we can; // reuse the already generated gradient function.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:177,hash,hasher,177,hist/hist/src/TFormula.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx,1,['hash'],['hasher']
Security,"// Check if the hessian request was made as part of another TFormula.; // This can happen when we create multiple TFormula objects with the same; // formula. In that case, the hasher will give identical id and we can; // reuse the already generated hessian function.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:176,hash,hasher,176,hist/hist/src/TFormula.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx,1,['hash'],['hasher']
Security,"// Check if the indices in this chunk where already split in train and validations",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RBatchGenerator.hxx:71,validat,validations,71,tmva/tmva/inc/TMVA/RBatchGenerator.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RBatchGenerator.hxx,1,['validat'],['validations']
Security,"// Check if the load and the store have the same base, constant offsets and; // non-overlapping access ranges.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/Loads.cpp:96,access,access,96,interpreter/llvm-project/llvm/lib/Analysis/Loads.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/Loads.cpp,1,['access'],['access']
Security,"// Check if the loaded module covers all headers that were specified; // by the user on the command line. This is an integrity check to; // ensure that our used module map is not containing extraneous headers.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx:117,integrity,integrity,117,core/dictgen/src/rootcling_impl.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx,1,['integrity'],['integrity']
Security,// Check if the machine instruction MI accesses any storage aliased with; // any store in the group Stores.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonStoreWidening.cpp:39,access,accesses,39,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonStoreWidening.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonStoreWidening.cpp,1,['access'],['accesses']
Security,"// Check if the module name hash should be appended for internal linkage; // symbols. This should come before multi-version target suffixes are; // appended. This is to keep the name and module hash suffix of the; // internal linkage function together. The unique suffix should only be; // added when name mangling is done to make sure that the final name can; // be properly demangled. For example, for C functions without prototypes,; // name mangling is not done and the unique suffix should not be appeneded; // then.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:28,hash,hash,28,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,2,['hash'],['hash']
Security,"// Check if the new combined immediate forms an illegal addressing mode.; // Do not combine if it was legal before but would get illegal.; // To do so, we need to find a load/store user of the pointer to get; // the access type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp:216,access,access,216,interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp,1,['access'],['access']
Security,// Check if the shuffle mask accesses only the low half of each input vector; // (half-index output is 0 or 2).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:29,access,accesses,29,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['access'],['accesses']
Security,// Check if the stride of the accesses is large enough to warrant a; // prefetch.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopDataPrefetch.cpp:30,access,accesses,30,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopDataPrefetch.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopDataPrefetch.cpp,1,['access'],['accesses']
Security,// Check if there is only one access qualifier.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclAttr.cpp:30,access,access,30,interpreter/llvm-project/clang/lib/Sema/SemaDeclAttr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclAttr.cpp,1,['access'],['access']
Security,// Check if this instruction is a PLDpc that is part of a GOT indirect; // access.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCPreEmitPeephole.cpp:75,access,access,75,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCPreEmitPeephole.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCPreEmitPeephole.cpp,1,['access'],['access']
Security,"// Check if this is a type for security",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx:31,secur,security,31,core/clingutils/src/TClingUtils.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx,1,['secur'],['security']
Security,"// Check if user has a private daemon access file ...",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/rpdutils.cxx:38,access,access,38,net/rpdutils/src/rpdutils.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/rpdutils.cxx,1,['access'],['access']
Security,"// Check if we a have a const declaration with an initializer, we may be; // able to emit it as available_externally to expose it's value to the; // optimizer.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:120,expose,expose,120,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,1,['expose'],['expose']
Security,"// Check if we can find a physical register for renaming \p Reg. This register; // must:; // * not be defined already in \p DefinedInBB; DefinedInBB must contain all; // defined registers up to the point where the renamed register will be used,; // * not used in \p UsedInBetween; UsedInBetween must contain all accessed; // registers in the range the rename register will be used,; // * is available in all used register classes (checked using RequiredClasses).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64LoadStoreOptimizer.cpp:312,access,accessed,312,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64LoadStoreOptimizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64LoadStoreOptimizer.cpp,1,['access'],['accessed']
Security,// Check if we found any stack accesses in the predecessors. We are not; // doing a full dataflow analysis here to keep things simple but just; // rely on a reverse portorder traversal (RPOT) to guarantee predecessors; // are already processed except for loops (and accept the conservative; // result for loops).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ShrinkWrap.cpp:31,access,accesses,31,interpreter/llvm-project/llvm/lib/CodeGen/ShrinkWrap.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ShrinkWrap.cpp,1,['access'],['accesses']
Security,// Check if we have a good chance to form the memory access pattern with the; // base and offset,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp:53,access,access,53,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp,1,['access'],['access']
Security,"// Check if we have an access for this instruction, if not, simply add it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp:23,access,access,23,interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp,1,['access'],['access']
Security,"// Check if we need to download: get the remote checksum; // Retrieve the checksum of the file, if available; // Dowload checksum file, if available",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TPackMgr.cxx:48,checksum,checksum,48,proof/proof/src/TPackMgr.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TPackMgr.cxx,3,['checksum'],['checksum']
Security,// Check if we should emit type record hashes.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/CodeViewDebug.cpp:39,hash,hashes,39,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/CodeViewDebug.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/CodeViewDebug.cpp,1,['hash'],['hashes']
Security,// Check if we've already translated this type. Don't try to do a; // get-or-create style insertion that caches the hash lookup across the; // lowerType call. It will update the TypeIndices map.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/CodeViewDebug.cpp:116,hash,hash,116,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/CodeViewDebug.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/CodeViewDebug.cpp,1,['hash'],['hash']
Security,// Check init-expr for canonical loop form and save loop counter; // variable - #Var and its initialization value - #LB.; // OpenMP [2.6] Canonical loop form. init-expr may be one of the following:; // var = lb; // integer-type var = lb; // random-access-iterator-type var = lb; // pointer-type var = lb; //,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:248,access,access-iterator-type,248,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['access'],['access-iterator-type']
Security,// Check loop memory access leagality.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopVersioningLICM.cpp:21,access,access,21,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopVersioningLICM.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopVersioningLICM.cpp,1,['access'],['access']
Security,"// Check read (RAW) dependences and write (WAR) dependences as necessary.; // If we successfully excluded all effects we are interested in, the; // access can be skipped.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp:148,access,access,148,interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp,1,['access'],['access']
Security,"// Check that a warning message is generated when using auto-injection.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/metacling/test/TClingTests.cxx:61,inject,injection,61,core/metacling/test/TClingTests.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/metacling/test/TClingTests.cxx,1,['inject'],['injection']
Security,"// Check that all accesses to pointers in the alias set use the same type.; // We cannot (yet) promote a memory location that is loaded and stored in; // different sizes. While we are at it, collect alignment and AA info.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LICM.cpp:18,access,accesses,18,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LICM.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LICM.cpp,1,['access'],['accesses']
Security,"// Check that src is not accessed except via the call and the memcpy. This; // guarantees that it holds only undefined values when passed in (so the final; // memcpy can be dropped), that it is not read or written between the call and; // the memcpy, and that writing beyond the end of it is undefined.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/MemCpyOptimizer.cpp:25,access,accessed,25,interpreter/llvm-project/llvm/lib/Transforms/Scalar/MemCpyOptimizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/MemCpyOptimizer.cpp,1,['access'],['accessed']
Security,// Check that the base class can be accessed.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp:36,access,accessed,36,interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,1,['access'],['accessed']
Security,"// Check that the injected-class-name is named as a member of its own; // type; we don't want to suggest 'using Derived::Base;', since that; // means something else.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp:18,inject,injected-class-name,18,interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,1,['inject'],['injected-class-name']
Security,// Check that the type of the VarDecl has an accessible copy constructor and; // resolve its destructor's exception specification.; // This also performs initialization of block variables when they are moved; // to the heap. It uses the same rules as applicable for implicit moves; // according to the C++ standard in effect ([class.copy.elision]p3).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/Sema.cpp:45,access,accessible,45,interpreter/llvm-project/clang/lib/Sema/Sema.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/Sema.cpp,1,['access'],['accessible']
Security,// Check that the types of the remaining fields have accessible destructors.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp:53,access,accessible,53,interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp,1,['access'],['accessible']
Security,"// Check that there is no implicit control flow instructions above our load in; // its block. If there is an instruction that doesn't always pass the; // execution to the following instruction, then moving through it may become; // invalid. For example:; //; // int arr[LEN];; // int index = ???;; // ...; // guard(0 <= index && index < LEN);; // use(arr[index]);; //; // It is illegal to move the array access to any point above the guard,; // because if the index is out of bounds we should deoptimize rather than; // access the array.; // Check that there is no guard in this block above our instruction.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/GVN.cpp:404,access,access,404,interpreter/llvm-project/llvm/lib/Transforms/Scalar/GVN.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/GVN.cpp,2,['access'],['access']
Security,// Check that this is a simple access of a vector element.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUPromoteAlloca.cpp:31,access,access,31,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUPromoteAlloca.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUPromoteAlloca.cpp,1,['access'],['access']
Security,// Check that we can read all the hashes and offsets from the; // section (see SourceLevelDebugging.rst for the structure of the index).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/DWARF/DWARFAcceleratorTable.cpp:34,hash,hashes,34,interpreter/llvm-project/llvm/lib/DebugInfo/DWARF/DWARFAcceleratorTable.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/DWARF/DWARFAcceleratorTable.cpp,1,['hash'],['hashes']
Security,// Check the access size field.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Verifier.cpp:13,access,access,13,interpreter/llvm-project/llvm/lib/IR/Verifier.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Verifier.cpp,1,['access'],['access']
Security,// Check the action and ordering of the interlocked intrinsics.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:40,interlock,interlocked,40,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,1,['interlock'],['interlocked']
Security,// Check the array access.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/ObjCContainersChecker.cpp:19,access,access,19,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/ObjCContainersChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/ObjCContainersChecker.cpp,1,['access'],['access']
Security,"// Check the file for data integrity.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_snapshot.cxx:27,integrity,integrity,27,tree/dataframe/test/dataframe_snapshot.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_snapshot.cxx,1,['integrity'],['integrity']
Security,// Check the operands of the MDNode before accessing the operands.; // The verifier will actually catch these failures.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Module.cpp:43,access,accessing,43,interpreter/llvm-project/llvm/lib/IR/Module.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Module.cpp,1,['access'],['accessing']
Security,// Check what we can vectorize using 128/64/32-bit accesses.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXISelLowering.cpp:51,access,accesses,51,interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXISelLowering.cpp,1,['access'],['accesses']
Security,"// Check whether all pointer arguments point to local memory, and; // ignore calls that only access local memory.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/FunctionAttrs.cpp:93,access,access,93,interpreter/llvm-project/llvm/lib/Transforms/IPO/FunctionAttrs.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/FunctionAttrs.cpp,1,['access'],['access']
Security,"// Check whether the entire set of values fit in the buffer. If so, we'll; // use the optimized short hashing routine and skip state entirely.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h:102,hash,hashing,102,interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,1,['hash'],['hashing']
Security,// Check whether the flat scratch SVS swizzle bug affects this access.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUInstructionSelector.cpp:63,access,access,63,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUInstructionSelector.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUInstructionSelector.cpp,2,['access'],['access']
Security,"// Check whether the storage is valid by validating the canary bits.; // If someone accidentally write some invalid bits in the storage, the canary; // will be changed first, and `IsAlive` will return false then.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Interpreter/Value.cpp:41,validat,validating,41,interpreter/llvm-project/clang/lib/Interpreter/Value.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Interpreter/Value.cpp,1,['validat'],['validating']
Security,// Check whether there's an AccessSpecDecl preceding this in the; // chain of the DeclContext.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaAccess.cpp:28,Access,AccessSpecDecl,28,interpreter/llvm-project/clang/lib/Sema/SemaAccess.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaAccess.cpp,1,['Access'],['AccessSpecDecl']
Security,"// Check whether this is an AST file. ASTReader::isAcceptableASTFile is not; // used here since we're not interested in validating the PCH at this time,; // but only to check whether this is a file containing an AST.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/CompilerInstance.cpp:120,validat,validating,120,interpreter/llvm-project/clang/lib/Frontend/CompilerInstance.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/CompilerInstance.cpp,1,['validat'],['validating']
Security,"// Check whether this might be a C++ implicit instance member access.; // C++ [class.mfct.non-static]p3:; // When an id-expression that is not part of a class member access; // syntax and not used to form a pointer to member is used in the; // body of a non-static member function of class X, if name lookup; // resolves the name in the id-expression to a non-static non-type; // member of some class C, the id-expression is transformed into a; // class member access expression using (*this) as the; // postfix-expression to the left of the . operator.; //; // But we don't actually need to do this for '&' operands if R; // resolved to a function or overloaded function set, because the; // expression is ill-formed if it actually works out to be a; // non-static member function:; //; // C++ [expr.ref]p4:; // Otherwise, if E1.E2 refers to a non-static member function. . .; // [t]he expression can be used only as the left-hand operand of a; // member function call.; //; // There are other safeguards against such uses, but it's important; // to get this right here so that we don't end up making a; // spuriously dependent expression if we're inside a dependent; // instance method.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:62,access,access,62,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,3,['access'],['access']
Security,"// Check whether we can merge loads/stores of some of the pieces of a; // flattened function parameter or return value into a single vector; // load/store.; //; // The flattened parameter is represented as a list of EVTs and; // offsets, and the whole structure is aligned to ParamAlignment. This; // function determines whether we can load/store pieces of the; // parameter starting at index Idx using a single vectorized op of; // size AccessSize. If so, it returns the number of param pieces; // covered by the vector op. Otherwise, it returns 1.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXISelLowering.cpp:438,Access,AccessSize,438,interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXISelLowering.cpp,1,['Access'],['AccessSize']
Security,"// Checking the authenticated LR value may significantly impact; // SequenceSize, so account for it for more precise results.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp:16,authenticat,authenticated,16,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp,1,['authenticat'],['authenticated']
Security,// Checks for undefined behavior in reinterpret_cast.; // The cases that is checked for is:; // *reinterpret_cast<T*>(&a); // reinterpret_cast<T&>(a); // where accessing 'a' as type 'T' will result in undefined behavior.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCast.cpp:160,access,accessing,160,interpreter/llvm-project/clang/lib/Sema/SemaCast.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCast.cpp,1,['access'],['accessing']
Security,"// Checksum",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TDataSetManagerFile.cxx:3,Checksum,Checksum,3,proof/proof/src/TDataSetManagerFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TDataSetManagerFile.cxx,1,['Checksum'],['Checksum']
Security,"// Checksum offset stored as a symbol because it might be requested; // before it has been calculated, so a fixup may be needed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCCodeView.h:3,Checksum,Checksum,3,interpreter/llvm-project/llvm/include/llvm/MC/MCCodeView.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCCodeView.h,1,['Checksum'],['Checksum']
Security,"// Checksum, produced by hash of EdgeDestinations",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/GCOVProfiling.cpp:3,Checksum,Checksum,3,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/GCOVProfiling.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/GCOVProfiling.cpp,2,"['Checksum', 'hash']","['Checksum', 'hash']"
Security,"// Class providing host specific authentication information",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/auth/inc/THostAuth.h:33,authenticat,authentication,33,net/auth/inc/THostAuth.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/auth/inc/THostAuth.h,3,['authenticat'],['authentication']
Security,"// Class providing remote authentication service",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/auth/inc/TAuthenticate.h:26,authenticat,authentication,26,net/auth/inc/TAuthenticate.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/auth/inc/TAuthenticate.h,1,['authenticat'],['authentication']
Security,"// Class to make the Unit Testing. It is important than the test; // methods are inside the class as this in particular is defined as a; // friend of the TFitEditor. This way, we can access the private; // methods of TFitEditor to perform several types of tests.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/fitpanel/test/UnitTesting.cxx:183,access,access,183,gui/fitpanel/test/UnitTesting.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/fitpanel/test/UnitTesting.cxx,1,['access'],['access']
Security,// Classify the weak object being accessed for better warning text.; // This enum should stay in sync with the cases in; // warn_arc_repeated_use_of_weak and warn_arc_possible_repeated_use_of_weak.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/AnalysisBasedWarnings.cpp:34,access,accessed,34,interpreter/llvm-project/clang/lib/Sema/AnalysisBasedWarnings.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/AnalysisBasedWarnings.cpp,1,['access'],['accessed']
Security,"// CleanUp authentication table, if needed or required ...",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/rpdutils.cxx:11,authenticat,authentication,11,net/rpdutils/src/rpdutils.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/rpdutils.cxx,1,['authenticat'],['authentication']
Security,"// Cleans up some of the data structures. This allows us to do cleanup; // normally done in the destructor earlier. Renders much of the ASTContext; // unusable, mostly the actual AST nodes, so should be called when we no; // longer need access to the AST.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h:237,access,access,237,interpreter/llvm-project/clang/include/clang/AST/ASTContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h,1,['access'],['access']
Security,"// Cleanup hash list",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx:11,hash,hash,11,proof/proof/src/TProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx,1,['hash'],['hash']
Security,"// Cleanup the security contexts",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TServerSocket.cxx:15,secur,security,15,net/net/src/TServerSocket.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TServerSocket.cxx,1,['secur'],['security']
Security,"// Clear authentication",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/rpdutils.cxx:9,authenticat,authentication,9,net/rpdutils/src/rpdutils.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/rpdutils.cxx,1,['authenticat'],['authentication']
Security,"// Clear the IndexedMemProfRecord which results in clearing/freeing its; // vectors of allocs and callsites. This is owned by the associated on-disk; // hash table, but unused after this point. See also the comment added to; // the client which constructs the on-disk hash table for this trait.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/MemProf.h:153,hash,hash,153,interpreter/llvm-project/llvm/include/llvm/ProfileData/MemProf.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/MemProf.h,2,['hash'],['hash']
Security,// Code completion for a member access expression.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseExpr.cpp:32,access,access,32,interpreter/llvm-project/clang/lib/Parse/ParseExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseExpr.cpp,1,['access'],['access']
Security,"// Code motion for interleaved accesses can potentially hoist strided loads; // and sink strided stores. The code below checks the legality of the; // following two conditions:; //; // 1. Potentially moving a strided load (B) before any store (A) that; // precedes B, or; //; // 2. Potentially moving a strided store (A) after any load or store (B); // that A precedes.; //; // It's legal to reorder A and B if we know there isn't a dependence from A; // to B. Note that this determination is conservative since some; // dependences could potentially be reordered safely.; // A is potentially the source of a dependence.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/VectorUtils.h:31,access,accesses,31,interpreter/llvm-project/llvm/include/llvm/Analysis/VectorUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/VectorUtils.h,1,['access'],['accesses']
Security,"// Code motion for interleaved accesses can't violate WAR dependences.; // Thus, reordering is legal if the source isn't a write.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/VectorUtils.h:31,access,accesses,31,interpreter/llvm-project/llvm/include/llvm/Analysis/VectorUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/VectorUtils.h,1,['access'],['accesses']
Security,// CodeView Accessibility Codes.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVElement.h:12,Access,Accessibility,12,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVElement.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVElement.h,1,['Access'],['Accessibility']
Security,"// Coefficient normalization access",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsAnaConvPdf.h:29,access,access,29,roofit/roofitcore/inc/RooAbsAnaConvPdf.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsAnaConvPdf.h,1,['access'],['access']
Security,// Coerce the shift amount to the right type if we can. This exposes the; // truncate or zext to optimization early.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:61,expose,exposes,61,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,1,['expose'],['exposes']
Security,"// Coercion type builder for structs passed in registers. The coercion type; // serves two purposes:; //; // 1. Pad structs to a multiple of 64 bits, so they are passed 'left-aligned'; // in registers.; // 2. Expose aligned floating point elements as first-level elements, so the; // code generator knows to pass them in floating point registers.; //; // We also compute the InReg flag which indicates that the struct contains; // aligned 32-bit floats.; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/Sparc.cpp:209,Expose,Expose,209,interpreter/llvm-project/clang/lib/CodeGen/Targets/Sparc.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/Sparc.cpp,1,['Expose'],['Expose']
Security,// Collect PreserveDIAccessIndex Intrinsic call chains.; // The call chains will be used to generate the access; // patterns similar to GEP.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/BPF/BPFAbstractMemberAccess.cpp:105,access,access,105,interpreter/llvm-project/llvm/lib/Target/BPF/BPFAbstractMemberAccess.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/BPF/BPFAbstractMemberAccess.cpp,1,['access'],['access']
Security,"// Collect original trip counts and induction variable to be accessible by; // index. Also, the structure of the original loops is not preserved during; // the construction of the tiled loops, so do it before we scavenge the BBs of; // any original CanonicalLoopInfo.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp:61,access,accessible,61,interpreter/llvm-project/llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp,1,['access'],['accessible']
Security,// Collect property accessors implemented in current implementation.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaObjCProperty.cpp:20,access,accessors,20,interpreter/llvm-project/clang/lib/Sema/SemaObjCProperty.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaObjCProperty.cpp,1,['access'],['accessors']
Security,"// Collect the registers in the register list. Issue unwinding instructions in; // three parts: ordinary hardware registers, return address authentication; // code pseudo register, the rest of the registers. The RA PAC is kept in an; // architectural register (usually r12), but we treat it as a special case in; // order to distinguish between that register containing RA PAC or a general; // value.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/MCTargetDesc/ARMELFStreamer.cpp:140,authenticat,authentication,140,interpreter/llvm-project/llvm/lib/Target/ARM/MCTargetDesc/ARMELFStreamer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/MCTargetDesc/ARMELFStreamer.cpp,1,['authenticat'],['authentication']
Security,"// Collect the set of virtual functions that are eligible for virtual constant; // propagation. Each eligible function must not access memory, must return; // an integer of width <=64 bits, must take at least one argument, must not; // use its first argument (assumed to be ""this"") and all arguments other than; // the first one must be of <=64 bit integer type.; //; // Note that we test whether this copy of the function is readnone, rather; // than testing function attributes, which must hold for any copy of the; // function, even a less optimized version substituted at link time. This is; // sound because the virtual constant propagation optimizations effectively; // inline all implementations of the virtual function into each call site,; // rather than using function attributes to perform local optimization.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/ThinLTOBitcodeWriter.cpp:128,access,access,128,interpreter/llvm-project/llvm/lib/Transforms/IPO/ThinLTOBitcodeWriter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/ThinLTOBitcodeWriter.cpp,1,['access'],['access']
Security,// Collection of all attributes used in hashing a particular DIE.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DIEHash.h:40,hash,hashing,40,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DIEHash.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DIEHash.h,1,['hash'],['hashing']
Security,"// Collects completion-relevant information about a concept-constrainted type T.; // In particular, examines the constraint expressions to find members of T.; //; // The design is very simple: we walk down each constraint looking for; // expressions of the form T.foo().; // If we're extra lucky, the return type is specified.; // We don't do any clever handling of && or || in constraint expressions, we; // take members from both branches.; //; // For example, given:; // template <class T> concept X = requires (T t, string& s) { t.print(s); };; // template <X U> void foo(U u) { u.^ }; // We want to suggest the inferred member function 'print(string)'.; // We see that u has type U, so X<U> holds.; // X<U> requires t.print(s) to be valid, where t has type U (substituted for T).; // By looking at the CallExpr we find the signature of print().; //; // While we tend to know in advance which kind of members (access via . -> ::); // we want, it's simpler just to gather them all and post-filter.; //; // FIXME: some of this machinery could be used for non-concept type-parms too,; // enabling completion for type parameters based on other uses of that param.; //; // FIXME: there are other cases where a type can be constrained by a concept,; // e.g. inside `if constexpr(ConceptSpecializationExpr) { ... }`",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCodeComplete.cpp:914,access,access,914,interpreter/llvm-project/clang/lib/Sema/SemaCodeComplete.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCodeComplete.cpp,1,['access'],['access']
Security,"// Collects files whose existence would invalidate the preamble.; // Collecting *all* of these would make validating it too slow though, so we; // just find all the candidates for 'file not found' diagnostics.; //; // A caveat that may be significant for generated files: we'll omit files under; // search path entries whose roots don't exist when the preamble is built.; // These are pruned by InitHeaderSearch and so we don't see the search path.; // It would be nice to include them but we don't want to duplicate all the rest; // of the InitHeaderSearch logic to reconstruct them.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/PrecompiledPreamble.cpp:106,validat,validating,106,interpreter/llvm-project/clang/lib/Frontend/PrecompiledPreamble.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/PrecompiledPreamble.cpp,1,['validat'],['validating']
Security,"// Combine the access kind, which results in a bitwise union.; // If there is more than one range, then this must be a MAY.; // If we combine a may and a must access we clear the must bit.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:15,access,access,15,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,2,['access'],['access']
Security,// Combine the accesses bin by bin.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp:15,access,accesses,15,interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp,2,['access'],['accesses']
Security,"// Combine the new Access with the existing Access, and then update the; // mapping in the offset bins.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp:19,Access,Access,19,interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp,2,['Access'],['Access']
Security,"// Combine vmaxsw/h/b(a, a's negation) to abs(a); // Expose the vabsduw/h/b opportunity for down stream",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp:53,Expose,Expose,53,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,1,['Expose'],['Expose']
Security,// Command line option to control appending FunctionHash to the name of a COMDAT; // function. This is to avoid the hash mismatch caused by the preinliner.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/PGOInstrumentation.cpp:116,hash,hash,116,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/PGOInstrumentation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/PGOInstrumentation.cpp,1,['hash'],['hash']
Security,"// Command line option to enable/disable the warning about a hash mismatch in; // the profile data for Comdat functions, which often turns out to be false; // positive due to the pre-instrumentation inline.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/PGOInstrumentation.cpp:61,hash,hash,61,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/PGOInstrumentation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/PGOInstrumentation.cpp,1,['hash'],['hash']
Security,// Command line option to enable/disable the warning about a hash mismatch in; // the profile data.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/PGOInstrumentation.cpp:61,hash,hash,61,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/PGOInstrumentation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/PGOInstrumentation.cpp,1,['hash'],['hash']
Security,"// Common interface to collections; // FIXME: re-introduce once we have ClassDefInline!; //ClassDefOverride(TTreeReaderArrayBase, 0);//Accessor to member of an object stored in a collection",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/inc/TTreeReaderArray.h:135,Access,Accessor,135,tree/treeplayer/inc/TTreeReaderArray.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/inc/TTreeReaderArray.h,1,['Access'],['Accessor']
Security,"// Common symbols and local zero-initialized symbols for TLS and Non-TLS are; // eligible for .bss/.tbss csect, getKind().isThreadBSS() is used to cover; // TLS common and zero-initialized local symbols since linkage type (in the; // GlobalVariable) is not accessible in this class.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCSectionXCOFF.cpp:257,access,accessible,257,interpreter/llvm-project/llvm/lib/MC/MCSectionXCOFF.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCSectionXCOFF.cpp,1,['access'],['accessible']
Security,// Common:; // Instructions that access LDS.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIInsertHardClauses.cpp:33,access,access,33,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIInsertHardClauses.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIInsertHardClauses.cpp,1,['access'],['access']
Security,"// Commute binary operators, to canonicalize the order of their operands.; // This can potentially expose more CSE opportunities, and makes writing other; // transformations simpler.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/Reassociate.cpp:99,expose,expose,99,interpreter/llvm-project/llvm/lib/Transforms/Scalar/Reassociate.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/Reassociate.cpp,1,['expose'],['expose']
Security,"// Compare hashes before equality. This is *not* what the hashtable does,; // since it is computing it modulo the number of buckets, whereas we are; // using the full hash keyspace. Since the hashes are precomputed, this; // check is *much* faster than equality.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/NewGVN.cpp:11,hash,hashes,11,interpreter/llvm-project/llvm/lib/Transforms/Scalar/NewGVN.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/NewGVN.cpp,4,['hash'],"['hash', 'hashes', 'hashtable']"
Security,// Compare lexicographically by operand. The matcher validates that other; // orderings wouldn't be ambiguous using \see couldMatchAmbiguouslyWith().,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp:53,validat,validates,53,interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp,1,['validat'],['validates']
Security,"// Compare the contents of the cached buffer and the string we should; // process. If there are hash collisions this assert should trigger; // making it easier to debug.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/LookupHelper.cpp:96,hash,hash,96,interpreter/cling/lib/Interpreter/LookupHelper.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/LookupHelper.cpp,1,['hash'],['hash']
Security,"// Compare the hash generated to the hash stored. A difference means; // that a body was present in the original source. Due to merging,; // the standard way of detecting a body will not work.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ODRDiagsEmitter.cpp:15,hash,hash,15,interpreter/llvm-project/clang/lib/AST/ODRDiagsEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ODRDiagsEmitter.cpp,2,['hash'],['hash']
Security,// Compare the hashes and trap if there's a mismatch.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AsmPrinter.cpp:15,hash,hashes,15,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AsmPrinter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AsmPrinter.cpp,2,['hash'],['hashes']
Security,"// Compare the hashes. If they are not the same, skip the entry entirely.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h:15,hash,hashes,15,interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h,1,['hash'],['hashes']
Security,// Complain about attempts to #include files in an audit pragma.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/PPDirectives.cpp:51,audit,audit,51,interpreter/llvm-project/clang/lib/Lex/PPDirectives.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/PPDirectives.cpp,1,['audit'],['audit']
Security,// Complain about attempts to leave an audit that doesn't exist.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/Pragma.cpp:39,audit,audit,39,interpreter/llvm-project/clang/lib/Lex/Pragma.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/Pragma.cpp,2,['audit'],['audit']
Security,// Complain about attempts to re-enter an audit.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/Pragma.cpp:42,audit,audit,42,interpreter/llvm-project/clang/lib/Lex/Pragma.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/Pragma.cpp,2,['audit'],['audit']
Security,"// Complain about the repeated accessor, ignore it, and keep parsing.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseDecl.cpp:31,access,accessor,31,interpreter/llvm-project/clang/lib/Parse/ParseDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseDecl.cpp,1,['access'],['accessor']
Security,"// CompressedOffloadBundle represents the format for the compressed offload; // bundles.; //; // The format is as follows:; // - Magic Number (4 bytes) - A constant ""CCOB"".; // - Version (2 bytes); // - Compression Method (2 bytes) - Uses the values from; // llvm::compression::Format.; // - Uncompressed Size (4 bytes).; // - Truncated MD5 Hash (8 bytes).; // - Compressed Data (variable length).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/OffloadBundler.h:341,Hash,Hash,341,interpreter/llvm-project/clang/include/clang/Driver/OffloadBundler.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/OffloadBundler.h,1,['Hash'],['Hash']
Security,"// Compute Hash value for the CFG: the lower 32 bits are CRC32 of the index; // value of each BB in the CFG. The higher 32 bits record the number of edges; // preceded by the number of indirect calls.; // This is derived from FuncPGOInstrumentation<Edge, BBInfo>::computeCFGHash().",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/SampleProfileProbe.cpp:11,Hash,Hash,11,interpreter/llvm-project/llvm/lib/Transforms/IPO/SampleProfileProbe.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/SampleProfileProbe.cpp,1,['Hash'],['Hash']
Security,// Compute VF * IC * AccessSize.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopUtils.cpp:21,Access,AccessSize,21,interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopUtils.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopUtils.cpp,1,['Access'],['AccessSize']
Security,"// Compute a ""unique"" hash for the module based on the name of the public; // globals.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/NameAnonGlobals.cpp:22,hash,hash,22,interpreter/llvm-project/llvm/lib/Transforms/Utils/NameAnonGlobals.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/NameAnonGlobals.cpp,1,['hash'],['hash']
Security,// Compute a checksum and set it to the checksum field.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/TarWriter.cpp:13,checksum,checksum,13,interpreter/llvm-project/llvm/lib/Support/TarWriter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/TarWriter.cpp,2,['checksum'],['checksum']
Security,// Compute a hash of all sections of the output file.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/PDB/Native/PDBFileBuilder.cpp:13,hash,hash,13,interpreter/llvm-project/llvm/lib/DebugInfo/PDB/Native/PDBFileBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/PDB/Native/PDBFileBuilder.cpp,1,['hash'],['hash']
Security,// Compute a hash of the mangled name of the type.; //; // FIXME: This is not guaranteed to be deterministic! Move to a; // fingerprinting mechanism once LLVM provides one. For the time; // being the implementation happens to be deterministic.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:13,hash,hash,13,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,1,['hash'],['hash']
Security,"// Compute a hash value on the operands. Instcombine will likely have; // sorted them, which helps expose duplicates, but we have to check all; // the operands to be safe in case instcombine hasn't run.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/Local.cpp:13,hash,hash,13,interpreter/llvm-project/llvm/lib/Transforms/Utils/Local.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/Local.cpp,2,"['expose', 'hash']","['expose', 'hash']"
Security,"// Compute hash for the vertex",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoTessellated.cxx:11,hash,hash,11,geom/geom/src/TGeoTessellated.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoTessellated.cxx,1,['hash'],['hash']
Security,"// Compute hash of the current preprocessor branch.; // This is used to identify the different branches, and thus track if block; // open and close in the same branch.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/UnwrappedLineParser.h:11,hash,hash,11,interpreter/llvm-project/clang/lib/Format/UnwrappedLineParser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/UnwrappedLineParser.h,1,['hash'],['hash']
Security,"// Compute ranges of potentially accessed bytes for both accesses. If the; // interseciton is empty, there can be no overlap.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/BasicAliasAnalysis.cpp:33,access,accessed,33,interpreter/llvm-project/llvm/lib/Analysis/BasicAliasAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/BasicAliasAnalysis.cpp,2,['access'],"['accessed', 'accesses']"
Security,// Compute the bug report's hash to determine its equivalence class.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/BugReporter.cpp:28,hash,hash,28,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/BugReporter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/BugReporter.cpp,1,['hash'],['hash']
Security,"// Compute the checksum",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RMiniFile.cxx:15,checksum,checksum,15,tree/ntuple/v7/src/RMiniFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RMiniFile.cxx,1,['checksum'],['checksum']
Security,"// Compute the delta between the bitcode indices in the VST (the word offset; // to the word-aligned ENTER_SUBBLOCK for the function block, and that; // expected by the lazy reader. The reader's EnterSubBlock expects to have; // already read the ENTER_SUBBLOCK code (size getAbbrevIDWidth) and BlockID; // (size BlockIDWidth). Note that we access the stream's AbbrevID width here; // just before entering the VST subblock because: 1) the EnterSubBlock; // changes the AbbrevID width; 2) the VST block is nested within the same; // outer MODULE_BLOCK as the FUNCTION_BLOCKs and therefore have the same; // AbbrevID width before calling EnterSubBlock; and 3) when we want to; // jump to the FUNCTION_BLOCK using this offset later, we don't want; // to rely on the stream's AbbrevID width being that of the MODULE_BLOCK.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Bitcode/Reader/BitcodeReader.cpp:340,access,access,340,interpreter/llvm-project/llvm/lib/Bitcode/Reader/BitcodeReader.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Bitcode/Reader/BitcodeReader.cpp,1,['access'],['access']
Security,// Compute the hash of a DIE. This is based on the type signature computation; // given in section 7.27 of the DWARF4 standard. It is the md5 hash of a; // flattened description of the DIE.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DIEHash.cpp:15,hash,hash,15,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DIEHash.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DIEHash.cpp,2,['hash'],['hash']
Security,// Compute the hash of the method as if it has no body.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ODRDiagsEmitter.cpp:15,hash,hash,15,interpreter/llvm-project/clang/lib/AST/ODRDiagsEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ODRDiagsEmitter.cpp,1,['hash'],['hash']
Security,"// Compute the hash value of RVVType, used for cache the result of computeType.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Support/RISCVVIntrinsicUtils.cpp:15,hash,hash,15,interpreter/llvm-project/clang/lib/Support/RISCVVIntrinsicUtils.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Support/RISCVVIntrinsicUtils.cpp,1,['hash'],['hash']
Security,"// Compute the longest and average collision chain length for the; // escape sequence hash table",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/guihtml/src/TGHtmlParse.cxx:86,hash,hash,86,gui/guihtml/src/TGHtmlParse.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/guihtml/src/TGHtmlParse.cxx,1,['hash'],['hash']
Security,"// Compute the longest and average collision chain length for the; // markup hash table",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/guihtml/src/TGHtmlParse.cxx:77,hash,hash,77,gui/guihtml/src/TGHtmlParse.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/guihtml/src/TGHtmlParse.cxx,1,['hash'],['hash']
Security,// Compute the module access path corresponding to this module.; // FIXME: Should we have a second loadModule() overload to avoid this; // extra lookup step?,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/PPDirectives.cpp:22,access,access,22,interpreter/llvm-project/clang/lib/Lex/PPDirectives.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/PPDirectives.cpp,1,['access'],['access']
Security,// Compute the offset of the last element to be accessed: size-1.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CStringChecker.cpp:48,access,accessed,48,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CStringChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CStringChecker.cpp,1,['access'],['accessed']
Security,"// Compute the running CRC-32 of Data, with CRC being the previous value of the; // checksum.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/CRC.h:84,checksum,checksum,84,interpreter/llvm-project/llvm/include/llvm/Support/CRC.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/CRC.h,1,['checksum'],['checksum']
Security,"// Compute the total access size for access patterns with unit stride and; // patterns with gaps. For patterns with unit stride, Step and EltSize are the; // same.; // For patterns with gaps (i.e. non unit stride), we are; // accessing EltSize bytes at every Step.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/Loads.cpp:21,access,access,21,interpreter/llvm-project/llvm/lib/Analysis/Loads.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/Loads.cpp,3,['access'],"['access', 'accessing']"
Security,"// Compute the unique hash for this entry.; // This is based on the current compiler version, the module itself, the; // export list, the hash for every single module in the import list, the; // list of ResolvedODR for the module, and the list of preserved symbols.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/LTO/LTO.cpp:22,hash,hash,22,interpreter/llvm-project/llvm/lib/LTO/LTO.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/LTO/LTO.cpp,2,['hash'],['hash']
Security,"// Compute validation error.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx:11,validat,validation,11,tmva/tmva/src/MethodDL.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx,1,['validat'],['validation']
Security,"// Compute value for relocatable field by adding this.; // These accessors and mutators correspond to the ELF64_R_SYM, ELF64_R_TYPE,; // and ELF64_R_INFO macros defined in the ELF specification:",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/ELF.h:65,access,accessors,65,interpreter/llvm-project/llvm/include/llvm/BinaryFormat/ELF.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/ELF.h,1,['access'],['accessors']
Security,"// Compute value for relocatable field by adding this; // These accessors and mutators correspond to the ELF32_R_SYM, ELF32_R_TYPE,; // and ELF32_R_INFO macros defined in the ELF specification:",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/ELF.h:64,access,accessors,64,interpreter/llvm-project/llvm/include/llvm/BinaryFormat/ELF.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/ELF.h,1,['access'],['accessors']
Security,"// ComputeHash - Compute a hash value for X, using TempID to; // compute a temporary ID if necessary. The default implementation; // just calls Profile and does a regular hash computation.; // Implementations can override this to provide more efficient; // implementations.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h:27,hash,hash,27,interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h,2,['hash'],['hash']
Security,// Computes a checksum for a tar header.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/TarWriter.cpp:14,checksum,checksum,14,interpreter/llvm-project/llvm/lib/Support/TarWriter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/TarWriter.cpp,1,['checksum'],['checksum']
Security,"// Computes the hash for a user-defined type record. This could be a struct,; // class, union, or enum.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/PDB/Native/TpiHashing.cpp:16,hash,hash,16,interpreter/llvm-project/llvm/lib/DebugInfo/PDB/Native/TpiHashing.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/PDB/Native/TpiHashing.cpp,1,['hash'],['hash']
Security,"// Conceptually, there is a vector of N bytes covering the addresses; // starting from the minimum offset (i.e. Base.Addr+Start). This vector; // represents a contiguous memory region that spans all accessed memory; // locations.; // The correspondence between loaded or stored values will be expressed; // in terms of this vector. For example, the 0th element of the vector; // from the Base address info will start at byte Start from the beginning; // of this conceptual vector.; //; // This vector will be loaded/stored starting at the nearest down-aligned; // address and the amount od the down-alignment will be AlignVal:; // valign(load_vector(align_down(Base+Start)), AlignVal)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonVectorCombine.cpp:199,access,accessed,199,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonVectorCombine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonVectorCombine.cpp,1,['access'],['accessed']
Security,"// Configure the validate function to not fire assertions, instead print; // errors and return true if there's a problem.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Verifier.cpp:17,validat,validate,17,interpreter/llvm-project/llvm/lib/IR/Verifier.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Verifier.cpp,1,['validat'],['validate']
Security,// Consider different header search and diagnostic options to create; // different modules. This avoids the unsound aliasing of module PCMs.; //; // TODO: Implement diagnostic bucketing to reduce the impact of strict; // context hashing.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/DependencyScanning/DependencyScanningWorker.cpp:229,hash,hashing,229,interpreter/llvm-project/clang/lib/Tooling/DependencyScanning/DependencyScanningWorker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/DependencyScanning/DependencyScanningWorker.cpp,1,['hash'],['hashing']
Security,// Consider the access specifier to be a C identifier.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/UnwrappedLineParser.cpp:16,access,access,16,interpreter/llvm-project/clang/lib/Format/UnwrappedLineParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/UnwrappedLineParser.cpp,1,['access'],['access']
Security,// Consistency check; // We skip this check for relocates not in the same basic block as their; // statepoint. It would be too expensive to preserve validation info through; // different basic blocks.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp:149,validat,validation,149,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp,1,['validat'],['validation']
Security,// Consists of a counter measuring a specific event and associated validation; // counters measuring execution conditions. All counters in a group are part; // of a single event group and are thus scheduled on and off the CPU as a single; // unit.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/PerfHelper.h:67,validat,validation,67,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/PerfHelper.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/PerfHelper.h,1,['validat'],['validation']
Security,// ConstantArray accessors,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h:17,access,accessors,17,interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,1,['access'],['accessors']
Security,// ConstantFP accessors.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Constants.cpp:14,access,accessors,14,interpreter/llvm-project/llvm/lib/IR/Constants.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Constants.cpp,1,['access'],['accessors']
Security,// ConstantStruct accessors,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h:18,access,accessors,18,interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,1,['access'],['accessors']
Security,// ConstantStruct accessors.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Constants.cpp:18,access,accessors,18,interpreter/llvm-project/llvm/lib/IR/Constants.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Constants.cpp,1,['access'],['accessors']
Security,// ConstantVector accessors,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h:18,access,accessors,18,interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,1,['access'],['accessors']
Security,// ConstantVector accessors.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Constants.cpp:18,access,accessors,18,interpreter/llvm-project/llvm/lib/IR/Constants.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Constants.cpp,1,['access'],['accessors']
Security,// Construct MMOs for the accesses.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/LegalizerHelper.cpp:26,access,accesses,26,interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/LegalizerHelper.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/LegalizerHelper.cpp,1,['access'],['accesses']
Security,// Construct Property/Property Accessor to Ivar maps to assist checking if an; // ivar which is backing a property has been reset.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/IvarInvalidationChecker.cpp:31,Access,Accessor,31,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/IvarInvalidationChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/IvarInvalidationChecker.cpp,1,['Access'],['Accessor']
Security,"// Construct a blank object with the provided triple and features. Used in; // testing, where a sub class will dependency inject protected methods to; // allow analysis of raw binary, without requiring a fully valid ELF file.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-cfi-verify/lib/FileAnalysis.h:122,inject,inject,122,interpreter/llvm-project/llvm/tools/llvm-cfi-verify/lib/FileAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-cfi-verify/lib/FileAnalysis.h,1,['inject'],['inject']
Security,"// Construct the name <ModuleName>-<hash of ModuleMapPath>.pcm which should; // ideally be globally unique to this particular module. Name collisions; // in the hash are safe (because any translation unit can only import one; // module with each name), but result in a loss of caching.; //; // To avoid false-negatives, we form as canonical a path as we can, and map; // to lower-case in case we're on a case-insensitive file system.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/HeaderSearch.cpp:36,hash,hash,36,interpreter/llvm-project/clang/lib/Lex/HeaderSearch.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/HeaderSearch.cpp,2,['hash'],['hash']
Security,// Contains all indexes in HashGroup that were already added to a; // CloneGroup.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CloneDetection.cpp:27,Hash,HashGroup,27,interpreter/llvm-project/clang/lib/Analysis/CloneDetection.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CloneDetection.cpp,1,['Hash'],['HashGroup']
Security,// Contains the IDs for declarations that were requested before we have; // access to a Sema object.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:76,access,access,76,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,1,['access'],['access']
Security,"// Convenient type-safe accessors",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooPlot.h:24,access,accessors,24,roofit/roofitcore/inc/RooPlot.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooPlot.h,1,['access'],['accessors']
Security,// Convert a unswizzled wave uniform stack address to an address compatible; // with a vector offset for use in stack access.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUISelLowering.h:118,access,access,118,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUISelLowering.h,1,['access'],['access']
Security,"// Convert string to numeric representation via `std::hash`.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RPageStorageDaos.cxx:54,hash,hash,54,tree/ntuple/v7/src/RPageStorageDaos.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RPageStorageDaos.cxx,1,['hash'],['hash']
Security,"// Convert the preserved symbols set from string to GUID, this is needed for; // computing the caching hash and the internalization.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/LTO/ThinLTOCodeGenerator.cpp:103,hash,hash,103,interpreter/llvm-project/llvm/lib/LTO/ThinLTOCodeGenerator.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/LTO/ThinLTOCodeGenerator.cpp,1,['hash'],['hash']
Security,"// Convert the result back to the LHS type,; // potentially with Implicit Conversion sanitizer check.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:85,sanitiz,sanitizer,85,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,1,['sanitiz'],['sanitizer']
Security,// Convert the string checksum to an MD5Result for the streamer.; // The verifier validates the checksum so we assume it's okay.; // An MD5 checksum is 16 bytes.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfDebug.cpp:22,checksum,checksum,22,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfDebug.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfDebug.cpp,4,"['checksum', 'validat']","['checksum', 'validates']"
Security,"// Copy CandidateSet is necessary, to avoid unsynchronized access to; // the datastructure.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Speculation.h:59,access,access,59,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Speculation.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Speculation.h,1,['access'],['access']
Security,// Copy as much as possible of the generated hash code to the Stmt's hash; // code.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CloneDetection.cpp:45,hash,hash,45,interpreter/llvm-project/clang/lib/Analysis/CloneDetection.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CloneDetection.cpp,2,['hash'],['hash']
Security,// Copy over the defs in the outlined range.; // First inst in outlined range <-- Anything that's defined in this; // ... .. range has to be added as an; // implicit Last inst in outlined range <-- def to the call; // instruction. Also remove call site information for outlined block; // of code. The exposed uses need to be copied in the outlined range.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineOutliner.cpp:301,expose,exposed,301,interpreter/llvm-project/llvm/lib/CodeGen/MachineOutliner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineOutliner.cpp,1,['expose'],['exposed']
Security,"// Copy the lookup results into the target, merging the base's access into; // the path access.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaLookup.cpp:63,access,access,63,interpreter/llvm-project/clang/lib/Sema/SemaLookup.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaLookup.cpp,2,['access'],['access']
Security,// Copy the new elements over.; // TODO: NEED To compile time dispatch on whether in_iter is a random access; // iterator to use the fast uninitialized_copy.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTVector.h:102,access,access,102,interpreter/llvm-project/clang/include/clang/AST/ASTVector.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTVector.h,1,['access'],['access']
Security,// Corresponds to `Hasher::lhashPbCb` in PDB/include/misc.h.; // Used for name hash table and TPI/IPI hashes.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/PDB/Native/Hash.cpp:19,Hash,Hasher,19,interpreter/llvm-project/llvm/lib/DebugInfo/PDB/Native/Hash.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/PDB/Native/Hash.cpp,3,"['Hash', 'hash']","['Hasher', 'hash', 'hashes']"
Security,// Corresponds to `HasherV2::HashULONG` in PDB/include/misc.h.; // Used for name hash table.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/PDB/Native/Hash.cpp:29,Hash,HashULONG,29,interpreter/llvm-project/llvm/lib/DebugInfo/PDB/Native/Hash.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/PDB/Native/Hash.cpp,2,"['Hash', 'hash']","['HashULONG', 'hash']"
Security,"// Corrupt px sealed page's checksum",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/test/ntuple_test.cxx:28,checksum,checksum,28,tree/ntuple/v7/test/ntuple_test.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/test/ntuple_test.cxx,1,['checksum'],['checksum']
Security,"// Cost modeling of Strided Access Computation is hidden by the indexing; // modes of X86 regardless of the stride value. We dont believe that there; // is a difference between constant strided access in gerenal and constant; // strided value which is less than or equal to 64.; // Even in the case of (loop invariant) stride whose value is not known at; // compile time, the address computation will not incur more than one extra; // ADD instruction.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86TargetTransformInfo.cpp:28,Access,Access,28,interpreter/llvm-project/llvm/lib/Target/X86/X86TargetTransformInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86TargetTransformInfo.cpp,2,"['Access', 'access']","['Access', 'access']"
Security,"// Cost of a step. Accesses in the same block are more likely to be valid; // candidates for elimination, hence consider them cheaper.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/DeadStoreElimination.cpp:19,Access,Accesses,19,interpreter/llvm-project/llvm/lib/Transforms/Scalar/DeadStoreElimination.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/DeadStoreElimination.cpp,1,['Access'],['Accesses']
Security,// Could be a call to a pointer-to-member or a plain member access.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExceptionSpec.cpp:60,access,access,60,interpreter/llvm-project/clang/lib/Sema/SemaExceptionSpec.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExceptionSpec.cpp,1,['access'],['access']
Security,"// Count number of instructions for sizing of hash tables, and come; // up with a global dfs numbering for instructions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/NewGVN.cpp:46,hash,hash,46,interpreter/llvm-project/llvm/lib/Transforms/Scalar/NewGVN.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/NewGVN.cpp,1,['hash'],['hash']
Security,"// Coverage mappping data (V2) has the following layout:; // IPSK_covmap:; // [CoverageMapFileHeader]; // [ArrayStart]; // [CovMapFunctionRecordV2]; // [CovMapFunctionRecordV2]; // ...; // [ArrayEnd]; // [Encoded Filenames and Region Mapping Data]; //; // Coverage mappping data (V3) has the following layout:; // IPSK_covmap:; // [CoverageMapFileHeader]; // [Encoded Filenames]; // IPSK_covfun:; // [ArrayStart]; // odr_name_1: [CovMapFunctionRecordV3]; // odr_name_2: [CovMapFunctionRecordV3]; // ...; // [ArrayEnd]; //; // Both versions of the coverage mapping format encode the same information,; // but the V3 format does so more compactly by taking advantage of linkonce_odr; // semantics (it allows exactly 1 function record per name reference).; /// This namespace defines accessors shared by different versions of coverage; /// mapping records.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h:781,access,accessors,781,interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h,1,['access'],['accessors']
Security,"// Covered metadata is always emitted if explicitly requested, otherwise only; // if some other metadata requires it to unambiguously interpret it for; // modules compiled with SanitizerBinaryMetadata.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/SanitizerBinaryMetadata.cpp:177,Sanitiz,SanitizerBinaryMetadata,177,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/SanitizerBinaryMetadata.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/SanitizerBinaryMetadata.cpp,1,['Sanitiz'],['SanitizerBinaryMetadata']
Security,"// Create Authenticated socket",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TNetFile.cxx:10,Authenticat,Authenticated,10,net/net/src/TNetFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TNetFile.cxx,1,['Authenticat'],['Authenticated']
Security,"// Create MD5 hash for costant format string, push low 64 bits of the; // same onto buffer and metadata.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/AMDGPUEmitPrintf.cpp:14,hash,hash,14,interpreter/llvm-project/llvm/lib/Transforms/Utils/AMDGPUEmitPrintf.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/AMDGPUEmitPrintf.cpp,1,['hash'],['hash']
Security,// Create PLT stub; // FIXME: check PLT stub of data symbol is not accessed,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/Orc/ExecutionUtils.cpp:67,access,accessed,67,interpreter/llvm-project/llvm/lib/ExecutionEngine/Orc/ExecutionUtils.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/Orc/ExecutionUtils.cpp,1,['access'],['accessed']
Security,"// Create a cache entry. This compute a unique hash for the Module considering; // the current list of export/import, and offer an interface to query to; // access the content in the cache.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/LTO/ThinLTOCodeGenerator.cpp:47,hash,hash,47,interpreter/llvm-project/llvm/lib/LTO/ThinLTOCodeGenerator.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/LTO/ThinLTOCodeGenerator.cpp,2,"['access', 'hash']","['access', 'hash']"
Security,// Create a file manager object to provide access to and cache the filesystem.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/ASTUnit.cpp:43,access,access,43,interpreter/llvm-project/clang/lib/Frontend/ASTUnit.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/ASTUnit.cpp,2,['access'],['access']
Security,"// Create a hash table and trigger automatic rehashing when average; // collision rate becomes larger than 5.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/tcollex.cxx:12,hash,hash,12,test/tcollex.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/tcollex.cxx,1,['hash'],['hash']
Security,"// Create a hash table with an initial size of 20 (actually the next prime; // above 20). No automatic rehashing.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/tcollex.cxx:12,hash,hash,12,test/tcollex.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/tcollex.cxx,1,['hash'],['hash']
Security,// Create a new MemoryAccess and let MemorySSA set its defining access.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LICM.cpp:64,access,access,64,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LICM.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LICM.cpp,2,['access'],['access']
Security,"// Create a new memory mapped file. The memory mapped file can be; // opened in an other process on the same machine and the objects; // stored in it can be accessed.; // TMapFile::SetMapAddress(0x125000000);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/test/TMapFileTest.cxx:157,access,accessed,157,io/io/test/TMapFileTest.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/test/TMapFileTest.cxx,1,['access'],['accessed']
Security,"// Create a note that contains pointers to the list of global; // descriptors. Adding a note to the output file will cause the linker to; // create a PT_NOTE program header pointing to the note that we can use to; // find the descriptor list starting from the program headers. A function; // provided by the runtime initializes the shadow memory for the globals by; // accessing the descriptor list via the note. The dynamic loader needs to; // call this function whenever a library is loaded.; //; // The reason why we use a note for this instead of a more conventional; // approach of having a global constructor pass a descriptor list pointer to; // the runtime is because of an order of initialization problem. With; // constructors we can encounter the following problematic scenario:; //; // 1) library A depends on library B and also interposes one of B's symbols; // 2) B's constructors are called before A's (as required for correctness); // 3) during construction, B accesses one of its ""own"" globals (actually; // interposed by A) and triggers a HWASAN failure due to the initialization; // for A not having happened yet; //; // Even without interposition it is possible to run into similar situations in; // cases where two libraries mutually depend on each other.; //; // We only need one note per binary, so put everything for the note in a; // comdat. This needs to be a comdat with an .init_array section to prevent; // newer versions of lld from discarding the note.; //; // Create the note even if we aren't instrumenting globals. This ensures that; // binaries linked from object files with both instrumented and; // non-instrumented globals will end up with a note, even if a comdat from an; // object file with non-instrumented globals is selected. The note is harmless; // if the runtime doesn't support it, since it will just be ignored.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/HWAddressSanitizer.cpp:369,access,accessing,369,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/HWAddressSanitizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/HWAddressSanitizer.cpp,2,['access'],"['accesses', 'accessing']"
Security,// Create a place on the stack for the ROP Protection Hash.; // The ROP Protection Hash will always be 8 bytes and aligned to 8; // bytes.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp:54,Hash,Hash,54,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,2,['Hash'],['Hash']
Security,"// Create a pre-op if the ALU operation preceded the memory operation or the; // MemOffset is non-zero (i.e. the memory value should be adjusted before; // accessing it), else create a post-op.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Lanai/LanaiMemAluCombiner.cpp:156,access,accessing,156,interpreter/llvm-project/llvm/lib/Target/Lanai/LanaiMemAluCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Lanai/LanaiMemAluCombiner.cpp,1,['access'],['accessing']
Security,// Create all simple and struct types exposed by the runtime and remember; // the llvm::PointerTypes of them for easy access later.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp:38,expose,exposed,38,interpreter/llvm-project/llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp,2,"['access', 'expose']","['access', 'exposed']"
Security,// Create an access group for this loop.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGLoopInfo.cpp:13,access,access,13,interpreter/llvm-project/clang/lib/CodeGen/CGLoopInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGLoopInfo.cpp,1,['access'],['access']
Security,"// Create an array of all MFI objects. We won't need all of these; // objects, but we're going to create a full array of them to make; // it easier to index into when we're counting ""uses"" down below.; // We want to be able to easily/cheaply access an object by simply; // indexing into it, instead of having to search for it every time.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FrameLowering.cpp:242,access,access,242,interpreter/llvm-project/llvm/lib/Target/X86/X86FrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FrameLowering.cpp,1,['access'],['access']
Security,"// Create an injected type for the whole redecl chain.; // The chain may contain an already existing injected type at the start,; // if yes this should be reused. We must ensure that only one type; // object exists for the injected type (including the injected record; // declaration), ASTContext does not check it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTImporter.cpp:13,inject,injected,13,interpreter/llvm-project/clang/lib/AST/ASTImporter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTImporter.cpp,4,['inject'],['injected']
Security,// Create an interleaved access group.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InterleavedAccess.cpp:25,access,access,25,interpreter/llvm-project/llvm/lib/Target/X86/X86InterleavedAccess.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InterleavedAccess.cpp,2,['access'],['access']
Security,"// Create copy from CSR to a virtual register.; // FIXME: this currently does not emit CFI pseudo-instructions, it works; // fine for CXX_FAST_TLS since the C++-style TLS access functions should be; // nounwind. If we want to generalize this later, we may need to emit; // CFI pseudo-instructions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:171,access,access,171,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,3,['access'],['access']
Security,// Create input file hash abbreviation.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp:21,hash,hash,21,interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp,1,['hash'],['hash']
Security,"// Create the RVariedAction and inject it in the computation graph.; // This recursively creates all the required varied column readers and upstream nodes of the computation graph.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RDFHelpers.hxx:32,inject,inject,32,tree/dataframe/inc/ROOT/RDFHelpers.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RDFHelpers.hxx,1,['inject'],['inject']
Security,"// Create the Validation batches if this is not the first epoch",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RBatchGenerator.hxx:14,Validat,Validation,14,tmva/tmva/inc/TMVA/RBatchGenerator.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RBatchGenerator.hxx,1,['Validat'],['Validation']
Security,"// Create the array of ValueMapping.; // Note: this array will not hash to this instance of operands; // mapping, because we use the pointer of the ValueMapping; // to hash and we expect them to uniquely identify an instance; // of value mapping.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegisterBankInfo.cpp:67,hash,hash,67,interpreter/llvm-project/llvm/lib/CodeGen/RegisterBankInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegisterBankInfo.cpp,2,['hash'],['hash']
Security,// Create the final hash code for the current Stmt.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CloneDetection.cpp:20,hash,hash,20,interpreter/llvm-project/clang/lib/Analysis/CloneDetection.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CloneDetection.cpp,1,['hash'],['hash']
Security,"// Create the hash list of ordinal numbers",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx:14,hash,hash,14,proof/proof/src/TProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx,1,['hash'],['hash']
Security,// Create the individual hash data outputs.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/AccelTable.cpp:25,hash,hash,25,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/AccelTable.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/AccelTable.cpp,1,['hash'],['hash']
Security,// Create the on-disk hash table in a buffer.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp:22,hash,hash,22,interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp,6,['hash'],['hash']
Security,// Create the on-disk hash table representation.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp:22,hash,hash,22,interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp,1,['hash'],['hash']
Security,// Create the on-disk hash table representation. We only store offsets; // for identifiers that appear here for the first time.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp:22,hash,hash,22,interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp,1,['hash'],['hash']
Security,// Create the on-disk hash table representation. We walk through every; // selector we've seen and look it up in the method pool.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp:22,hash,hash,22,interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp,1,['hash'],['hash']
Security,// Create the on-disk hash table. Also emit the existing imported and; // merged table if there is one.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp:22,hash,hash,22,interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp,1,['hash'],['hash']
Security,// Creates an EH frame header prepared for a 32-bit relative relocation; // to the start of the .eh_frame section. Absolute injects a 64-bit absolute; // address space offset 4 bytes from the start instead of 4 bytes,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/Orc/Debugging/PerfSupportPlugin.cpp:124,inject,injects,124,interpreter/llvm-project/llvm/lib/ExecutionEngine/Orc/Debugging/PerfSupportPlugin.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/Orc/Debugging/PerfSupportPlugin.cpp,1,['inject'],['injects']
Security,"// Creating page with list of available widgets is disabled now for security reasons; // Later one can provide functionality back only if explicitly desired by the user; // BuildWSEntryPage();",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/src/THttpServer.cxx:68,secur,security,68,net/http/src/THttpServer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/src/THttpServer.cxx,1,['secur'],['security']
Security,"// Cross validation",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataLoader.h:9,validat,validation,9,tmva/tmva/inc/TMVA/DataLoader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataLoader.h,1,['validat'],['validation']
Security,// Current token is a C++ access specifier.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseDeclCXX.cpp:26,access,access,26,interpreter/llvm-project/clang/lib/Parse/ParseDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseDeclCXX.cpp,2,['access'],['access']
Security,"// Current token is the closing r_paren which marks the end of the; // __VA_OPT__ invocation, so handle any place-marker pasting (if; // empty) by removing hashhash either before (if exists) or after. And; // also stringify the entire contents if VAOPT was preceded by a hash,; // but do so only after any token concatenation that needs to occur; // within the contents of VAOPT.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/TokenLexer.cpp:156,hash,hashhash,156,interpreter/llvm-project/clang/lib/Lex/TokenLexer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/TokenLexer.cpp,2,['hash'],"['hash', 'hashhash']"
Security,// CurrentDef is the earliest write clobber of KillingDef. Use it as; // optimized access. Do not optimize if CurrentDef is already the; // defining access of KillingDef.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/DeadStoreElimination.cpp:83,access,access,83,interpreter/llvm-project/llvm/lib/Transforms/Scalar/DeadStoreElimination.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/DeadStoreElimination.cpp,2,['access'],['access']
Security,// Currently store defining access refinement is too slow due to basicaa being; // egregiously slow. This flag lets us keep it working while we work on this; // issue.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/NewGVN.cpp:28,access,access,28,interpreter/llvm-project/llvm/lib/Transforms/Scalar/NewGVN.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/NewGVN.cpp,1,['access'],['access']
Security,"// Currently, all atomic accesses have to be through integer; // types, so there's no point in trying to pick a prettier type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:25,access,accesses,25,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,2,['access'],['accesses']
Security,"// Currently, we only enable register pressure reducing in machine combiner; // for: 1: PPC64; 2: Code Model is Medium; 3: Power9 which also has vector; // support.; //; // So we need following instructions to access a TOC entry:; //; // %6:g8rc_and_g8rc_nox0 = ADDIStocHA8 $x2, %const.0; // %7:vssrc = DFLOADf32 target-flags(ppc-toc-lo) %const.0,; // killed %6:g8rc_and_g8rc_nox0, implicit $x2 :: (load 4 from constant-pool); //; // FIXME: add more supported targets, like Small and Large code model, PPC32,; // AIX.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCInstrInfo.cpp:210,access,access,210,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCInstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCInstrInfo.cpp,1,['access'],['access']
Security,"// Currently, we only track data-dependent loads within a basic block.; // FIXME: We should see if this is necessary or if we could be more; // aggressive here without opening up attack avenues.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86SpeculativeLoadHardening.cpp:179,attack,attack,179,interpreter/llvm-project/llvm/lib/Target/X86/X86SpeculativeLoadHardening.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86SpeculativeLoadHardening.cpp,1,['attack'],['attack']
Security,// Custom lower lane accesses to expand out variable indices,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyISelLowering.cpp:21,access,accesses,21,interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyISelLowering.cpp,1,['access'],['accesses']
Security,"// Custom lower scalar memory access, up to 8 bytes, for:; // - non-power-of-2 MemSizes; // - unaligned 2 or 8 byte MemSizes for MIPS32r5 and older",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsLegalizerInfo.cpp:30,access,access,30,interpreter/llvm-project/llvm/lib/Target/Mips/MipsLegalizerInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsLegalizerInfo.cpp,1,['access'],['access']
Security,// Cyclone supports unaligned accesses.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:30,access,accesses,30,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,1,['access'],['accesses']
Security,"// DA is a non-phi def that is live-on-exit from this block, and; // that is also located in this block. LRef is a register ref; // whose use this def reaches. If DA covers LRef, then no part; // of LRef is exposed upwards.A",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RDFLiveness.cpp:207,expose,exposed,207,interpreter/llvm-project/llvm/lib/CodeGen/RDFLiveness.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RDFLiveness.cpp,1,['expose'],['exposed']
Security,"// DEPRECATED - Please use findSymbol instead.; //; // This is not directly exposed via the ExecutionEngine API, but it is; // used by the LinkingMemoryManager.; //; // getSymbolAddress takes an unmangled name and returns the corresponding; // JITSymbol if a definition of the name has been added to the JIT.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/MCJIT/MCJIT.h:76,expose,exposed,76,interpreter/llvm-project/llvm/lib/ExecutionEngine/MCJIT/MCJIT.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/MCJIT/MCJIT.h,1,['expose'],['exposed']
Security,"// DESIGN PRINCIPLE: Access to the underlying IR must be strictly limited to; // the front-end and back-end of VPlan so that the middle-end is as; // independent as possible of the underlying IR. We grant access to the; // underlying IR using friendship. In that way, we should be able to use VPlan; // for multiple underlying IRs (Polly?) by providing a new VPlan front-end,; // back-end and analysis information for the new IR.; // Set \p Val as the underlying Value of this VPValue.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlanValue.h:21,Access,Access,21,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlanValue.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlanValue.h,2,"['Access', 'access']","['Access', 'access']"
Security,// DI accesses are always ES-based.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/MCTargetDesc/X86IntelInstPrinter.cpp:6,access,accesses,6,interpreter/llvm-project/llvm/lib/Target/X86/MCTargetDesc/X86IntelInstPrinter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/MCTargetDesc/X86IntelInstPrinter.cpp,1,['access'],['accesses']
Security,"// DIArgLists are not MDNodes, but we still want to unique them in a DenseSet; // based on a hash of their arguments.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/LLVMContextImpl.h:93,hash,hash,93,interpreter/llvm-project/llvm/lib/IR/LLVMContextImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/LLVMContextImpl.h,1,['hash'],['hash']
Security,// DWARF Accessibility Codes.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVElement.h:9,Access,Accessibility,9,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVElement.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVElement.h,1,['Access'],['Accessibility']
Security,// Data directive accessors.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAsmInfo.h:18,access,accessors,18,interpreter/llvm-project/llvm/include/llvm/MC/MCAsmInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAsmInfo.h,1,['access'],['accessors']
Security,"// Dataset string limited in length: get the authorized size",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/src/TPerfStats.cxx:45,authoriz,authorized,45,proof/proofplayer/src/TPerfStats.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/src/TPerfStats.cxx,1,['authoriz'],['authorized']
Security,"// Decl's context was neither the TU, a namespace, nor a; // TagDecl, which means it is a type local to a scope, and not; // accessible at the end of the TU.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/QualTypeNames.cpp:125,access,accessible,125,interpreter/llvm-project/clang/lib/AST/QualTypeNames.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/QualTypeNames.cpp,1,['access'],['accessible']
Security,"// Declared and documented above, but defined here so that any of the hashing; // infrastructure is available.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h:70,hash,hashing,70,interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,3,['hash'],['hashing']
Security,// Decode and validate the arguments of the result.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenInstAlias.cpp:14,validat,validate,14,interpreter/llvm-project/llvm/utils/TableGen/CodeGenInstAlias.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenInstAlias.cpp,1,['validat'],['validate']
Security,// Decode the disp field for a hash store or hash check operation.; // The field is composed of an immediate value that is 6 bits; // and covers the range -8 to -512. The immediate is always negative and 2s; // complement which is why we sign extend a 7 bit value.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/Disassembler/PPCDisassembler.cpp:31,hash,hash,31,interpreter/llvm-project/llvm/lib/Target/PowerPC/Disassembler/PPCDisassembler.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/Disassembler/PPCDisassembler.cpp,2,['hash'],['hash']
Security,// Decodes from minimum bit width representation and validates no; // unnecessary bits are used.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFTypes.h:53,validat,validates,53,interpreter/llvm-project/llvm/include/llvm/Object/ELFTypes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFTypes.h,1,['validat'],['validates']
Security,"// Default - access by name; //_____________________________________________________________",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/tcollbm.cxx:13,access,access,13,test/tcollbm.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/tcollbm.cxx,1,['access'],['access']
Security,// Default to using the intra-procedure-call temporary registers for; // comparing the hashes.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AsmPrinter.cpp:87,hash,hashes,87,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AsmPrinter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AsmPrinter.cpp,1,['hash'],['hashes']
Security,"// Default: use SP (except at -O0).; // Use FP at -O0, except when there are objects with extra alignment.; // That additional alignment requirement may cause a pad to be inserted,; // which will make it impossible to use FP to access objects located; // past the pad.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonFrameLowering.cpp:228,access,access,228,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonFrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonFrameLowering.cpp,1,['access'],['access']
Security,"// Defend against this resolving to an implicit member access. We usually; // won't get here if this might be a legitimate a class member (we end up in; // BuildMemberReferenceExpr instead), but this can be valid if we're forming; // a pointer-to-member or in an unevaluated context in C++11.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:55,access,access,55,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['access'],['access']
Security,"// Defensive maneuver for ill-formed code: we're likely not to make it to; // a point where we set the access specifier, so default it to ""public""; // to avoid triggering asserts elsewhere in the front end.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/DeclBase.cpp:103,access,access,103,interpreter/llvm-project/clang/lib/AST/DeclBase.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/DeclBase.cpp,1,['access'],['access']
Security,// Defer calling `setPure` until merging above has guaranteed we've set; // `DefinitionData` (as this will need to access it).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTReaderDecl.cpp:115,access,access,115,interpreter/llvm-project/clang/lib/Serialization/ASTReaderDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTReaderDecl.cpp,1,['access'],['access']
Security,"// Define a number of sub-types for CommonType, each with:; // - An accessor for a relevant ""tail"" information (data fields that; // follow the CommonType record in binary format).; // - A classof() definition based on CommonType::getKind() value to; // allow use with dyn_cast<>() function.; // For CommonType sub-types that are followed by a single entry of; // some type in the binary format.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/BTF/BTF.h:68,access,accessor,68,interpreter/llvm-project/llvm/include/llvm/DebugInfo/BTF/BTF.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/BTF/BTF.h,1,['access'],['accessor']
Security,// Define accessors/mutators for code generation options of enumeration type.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h:10,access,accessors,10,interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h,1,['access'],['accessors']
Security,// Define accessors/mutators for diagnostic options of enumeration type.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/DiagnosticOptions.h:10,access,accessors,10,interpreter/llvm-project/clang/include/clang/Basic/DiagnosticOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/DiagnosticOptions.h,1,['access'],['accessors']
Security,// Define accessors/mutators for language options of enumeration type.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h:10,access,accessors,10,interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h,1,['access'],['accessors']
Security,// Define all the input DBG_PHI values in ValidatedValues.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp:42,Validat,ValidatedValues,42,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,1,['Validat'],['ValidatedValues']
Security,"// Define diagnostic options of enumeration type. These are private, and will; // have accessors (below).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/DiagnosticOptions.h:87,access,accessors,87,interpreter/llvm-project/clang/include/clang/Basic/DiagnosticOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/DiagnosticOptions.h,1,['access'],['accessors']
Security,"// Define language options of enumeration type. These are private, and will; // have accessors (below).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h:85,access,accessors,85,interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h,1,['access'],['accessors']
Security,// Define simple diagnostic options (with no accessors).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/DiagnosticOptions.h:45,access,accessors,45,interpreter/llvm-project/clang/include/clang/Basic/DiagnosticOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/DiagnosticOptions.h,1,['access'],['accessors']
Security,// Define simple language options (with no accessors).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h:43,access,accessors,43,interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h,1,['access'],['accessors']
Security,"// Define the root of the tree for user-accessible memory. C and C++; // give special powers to char and certain similar types. However,; // these special powers only cover user-accessible memory, and doesn't; // include things like vtables.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.cpp:40,access,accessible,40,interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.cpp,2,['access'],['accessible']
Security,"// Define the set of sanitizer kinds, as well as the set of sanitizers each; // sanitizer group expands into.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Sanitizers.h:21,sanitiz,sanitizer,21,interpreter/llvm-project/clang/include/clang/Basic/Sanitizers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Sanitizers.h,3,['sanitiz'],"['sanitizer', 'sanitizers']"
Security,"// Defines an interface used to traverse SExprs. Traversals have been made as; // generic as possible, and are intended to handle any kind of pass over the; // AST, e.g. visitors, copying, non-destructive rewriting, destructive; // (in-place) rewriting, hashing, typing, etc.; //; // Traversals implement the functional notion of a ""fold"" operation on SExprs.; // Each SExpr class provides a traverse method, which does the following:; // * e->traverse(v):; // // compute a result r_i for each subexpression e_i; // for (i = 1..n) r_i = v.traverse(e_i);; // // combine results into a result for e, where X is the class of e; // return v.reduceX(*e, r_1, .. r_n).; //; // A visitor can control the traversal by overriding the following methods:; // * v.traverse(e):; // return v.traverseByCase(e), which returns v.traverseX(e); // * v.traverseX(e): (X is the class of e); // return e->traverse(v).; // * v.reduceX(*e, r_1, .. r_n):; // compute a result for a node of type X; //; // The reduceX methods control the kind of traversal (visitor, copy, etc.).; // They are defined in derived classes.; //; // Class R defines the basic interface types (R_SExpr).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafetyTraverse.h:254,hash,hashing,254,interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafetyTraverse.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafetyTraverse.h,1,['hash'],['hashing']
Security,// Definitions from LoongArch ELF psABI v2.01.; // Reference: https://github.com/loongson/LoongArch-Documentation; // (commit hash 296de4def055c871809068e0816325a4ac04eb12); // Base ABI Modifiers,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/ELF.h:126,hash,hash,126,interpreter/llvm-project/llvm/include/llvm/BinaryFormat/ELF.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/ELF.h,1,['hash'],['hash']
Security,// Degenerate case: memcpy marked as not accessing memory.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/MemCpyOptimizer.cpp:41,access,accessing,41,interpreter/llvm-project/llvm/lib/Transforms/Scalar/MemCpyOptimizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/MemCpyOptimizer.cpp,1,['access'],['accessing']
Security,// Delinearize the memory access as analyzed in all the surrounding loops.; // Do not analyze memory accesses outside loops.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/Delinearization.cpp:26,access,access,26,interpreter/llvm-project/llvm/lib/Analysis/Delinearization.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/Delinearization.cpp,2,['access'],"['access', 'accesses']"
Security,"// Depending on the setting of the private_element_size field in the; // resource descriptor, we can only make private accesses up to a certain; // size.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp:119,access,accesses,119,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp,1,['access'],['accesses']
Security,"// Derive the dynamic symbol table size from the DT_HASH hash table, if; // present.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp:57,hash,hash,57,interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp,1,['hash'],['hash']
Security,// Derive the friend-modified access along each path.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaAccess.cpp:30,access,access,30,interpreter/llvm-project/clang/lib/Sema/SemaAccess.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaAccess.cpp,1,['access'],['access']
Security,"// Despite the standard's confident wording, there is a case; // where you can have an instance member that's neither in a; // pointer-to-member expression nor in a member access: when; // it names a field in an unevaluated context that can't be an; // implicit member. Pending clarification, we just apply the; // same naming-class restriction here.; // FIXME: we're probably not correctly adding the; // protected-member restriction when we retroactively convert; // an expression to being evaluated.; // We know that ECRecord derives from NamingClass. The; // restriction says to check whether NamingClass derives from; // ECRecord, but that's not really necessary: two distinct; // classes can't be recursively derived from each other. So; // along this path, we just need to check whether the classes; // are equal.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaAccess.cpp:172,access,access,172,interpreter/llvm-project/clang/lib/Sema/SemaAccess.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaAccess.cpp,1,['access'],['access']
Security,"// Destructor. This class does not overload; // Hash so it can rely on the base class to call; // RecursiveRemove (and hence remove this from the list; // of cleanups).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TCheckHashRecursiveRemoveConsistency.h:48,Hash,Hash,48,core/meta/src/TCheckHashRecursiveRemoveConsistency.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TCheckHashRecursiveRemoveConsistency.h,1,['Hash'],['Hash']
Security,// Detailed record is important since it is used for the module cache hash.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTReader.cpp:70,hash,hash,70,interpreter/llvm-project/clang/lib/Serialization/ASTReader.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTReader.cpp,2,['hash'],['hash']
Security,// Detect ROCm packages built with SPACK.; // clang is installed at; // <rocm_root>/llvm-amdgpu-<rocm_release_string>-<hash>/bin directory.; // We only consider the parent directory of llvm-amdgpu package as ROCm; // installation candidate for SPACK.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/AMDGPU.cpp:119,hash,hash,119,interpreter/llvm-project/clang/lib/Driver/ToolChains/AMDGPU.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/AMDGPU.cpp,1,['hash'],['hash']
Security,// Determine if references to thread_local global variables can be made; // directly or require access through a thread wrapper function.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h:96,access,access,96,interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h,1,['access'],['access']
Security,// Determine if the declaration is accessible from EC when named; // in its declaring class.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaAccess.cpp:35,access,accessible,35,interpreter/llvm-project/clang/lib/Sema/SemaAccess.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaAccess.cpp,1,['access'],['accessible']
Security,// Determine if the pointer operand of the access is either consecutive or; // reverse consecutive.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:43,access,access,43,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,1,['access'],['access']
Security,// Determine whether this is a non-secure function call.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp:35,secur,secure,35,interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,1,['secur'],['secure']
Security,"// Determine whether this is an instruction prefix.; // FIXME:; // Enhance prefixes integrity robustness. for example, following forms; // are currently tolerated:; // repz repnz <insn> ; GAS errors for the use of two similar prefixes; // lock addq %rax, %rbx ; Destination operand must be of memory type; // xacquire <insn> ; xacquire must be accompanied by 'lock'",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/AsmParser/X86AsmParser.cpp:84,integrity,integrity,84,interpreter/llvm-project/llvm/lib/Target/X86/AsmParser/X86AsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/AsmParser/X86AsmParser.cpp,1,['integrity'],['integrity']
Security,"// Determine whether we have already seen this type. If so, we save; // ourselves the work of formatting the type string by using the; // temporary, CanQualType-based hash table to find the associated value.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/ASTUnit.cpp:167,hash,hash,167,interpreter/llvm-project/clang/lib/Frontend/ASTUnit.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/ASTUnit.cpp,1,['hash'],['hash']
Security,"// Determines which set of metadata to collect for this instruction.; //; // Returns true if covered metadata is required to unambiguously interpret; // other metadata. For example, if we are interested in atomics metadata, any; // function with memory operations (atomic or not) requires covered metadata; // to determine if a memory operation is atomic or not in modules compiled; // with SanitizerBinaryMetadata.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/SanitizerBinaryMetadata.cpp:391,Sanitiz,SanitizerBinaryMetadata,391,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/SanitizerBinaryMetadata.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/SanitizerBinaryMetadata.cpp,1,['Sanitiz'],['SanitizerBinaryMetadata']
Security,"// Devide the vector into training and validation",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RBatchGenerator.hxx:39,validat,validation,39,tmva/tmva/inc/TMVA/RBatchGenerator.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RBatchGenerator.hxx,1,['validat'],['validation']
Security,"// DiagProd returns the product of matrix diagonal elements in d1 and d2. d1; // is a mantissa and d2 an exponent for powers of 2. This is why we are; // using this specific formula to validate the method.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/matrix/test/testMatrixTDecomp.cxx:185,validat,validate,185,math/matrix/test/testMatrixTDecomp.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/test/testMatrixTDecomp.cxx,1,['validat'],['validate']
Security,"// Diagnose no_builtin attribute on function declaration that are not a; // definition.; // FIXME: We should really be doing this in; // SemaDeclAttr.cpp::handleNoBuiltinAttr, unfortunately we only have access to; // the FunctionDecl and at this point of the code; // FunctionDecl::isThisDeclarationADefinition() which always returns `false`; // because Sema::ActOnStartOfFunctionDef has not been called yet.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:203,access,access,203,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['access'],['access']
Security,// Diagnose unsupported sanitizer options only once.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/HIPAMD.cpp:24,sanitiz,sanitizer,24,interpreter/llvm-project/clang/lib/Driver/ToolChains/HIPAMD.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/HIPAMD.cpp,1,['sanitiz'],['sanitizer']
Security,"// Dialog for entering passwords",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/inc/TGPasswdDialog.h:23,password,passwords,23,gui/gui/inc/TGPasswdDialog.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/inc/TGPasswdDialog.h,1,['password'],['passwords']
Security,"// Different choices can be made for the maximum size of the TLS area for a; // module. For the small address model, the default TLS size is 16MiB and the; // maximum TLS size is 4GiB.; // FIXME: add tiny and large code model support for TLS access models other; // than local exec. We currently generate the same code as small for tiny,; // which may be larger than needed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:242,access,access,242,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,1,['access'],['access']
Security,"// Dimensions class not currently exposed",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/include/CPyCppyy/API.h:34,expose,exposed,34,bindings/pyroot/cppyy/CPyCppyy/include/CPyCppyy/API.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/include/CPyCppyy/API.h,1,['expose'],['exposed']
Security,// Direct access to thread_local variables from a different DLL isn't; // possible with Windows Native TLS.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Parallel.h:10,access,access,10,interpreter/llvm-project/llvm/include/llvm/Support/Parallel.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Parallel.h,1,['access'],['access']
Security,// Direct/Extend accessors,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/CGFunctionInfo.h:17,access,accessors,17,interpreter/llvm-project/clang/include/clang/CodeGen/CGFunctionInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/CGFunctionInfo.h,1,['access'],['accessors']
Security,"// Dirty state accessor",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsArg.h:15,access,accessor,15,roofit/roofitcore/inc/RooAbsArg.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsArg.h,1,['access'],['accessor']
Security,// Disable LeakSanitizer for this binary as it has too many leaks that are not; // very interesting to fix. See compiler-rt/include/sanitizer/lsan_interface.h .,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/TableGen.cpp:132,sanitiz,sanitizer,132,interpreter/llvm-project/clang/utils/TableGen/TableGen.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/TableGen.cpp,2,['sanitiz'],['sanitizer']
Security,// Disable coverage and not claim the flags if there is at least one; // non-supporting sanitizer.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp:88,sanitiz,sanitizer,88,interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,1,['sanitiz'],['sanitizer']
Security,// Disable default sanitizers that are incompatible with explicitly requested; // ones.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp:19,sanitiz,sanitizers,19,interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,1,['sanitiz'],['sanitizers']
Security,"// Disable hoisting past potentially interfering loads. Optimized; // Uses may point to an access outside the loop, as getClobbering; // checks the previous iteration when walking the backedge.; // FIXME: More precise: no Uses that alias SI.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LICM.cpp:91,access,access,91,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LICM.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LICM.cpp,1,['access'],['access']
Security,// Disable parallel access in case of prefix sum.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:20,access,access,20,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,1,['access'],['access']
Security,// Disable sanitizers to decrease size bloat. We don't expect; // sanitizers to catch interesting issues.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/GCOVProfiling.cpp:11,sanitiz,sanitizers,11,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/GCOVProfiling.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/GCOVProfiling.cpp,2,['sanitiz'],['sanitizers']
Security,"// Disable the module hash. This gives us a flat file layout in the; // modules cache directory. In clang this is used to prevent modules from; // different compiler invocations to not collide, but we only have one; // compiler invocation in cling, so we don't need this.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/CIFactory.cpp:22,hash,hash,22,interpreter/cling/lib/Interpreter/CIFactory.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/CIFactory.cpp,1,['hash'],['hash']
Security,"// Disable the ranges processing if we have just a single .dwo object,; // as any DW_AT_ranges will access not available range information.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVELFReader.cpp:100,access,access,100,interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVELFReader.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVELFReader.cpp,1,['access'],['access']
Security,// Disallow calls which expose returns-twice to a function not previously; // attributed as such.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InlineCost.cpp:24,expose,expose,24,interpreter/llvm-project/llvm/lib/Analysis/InlineCost.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InlineCost.cpp,1,['expose'],['expose']
Security,// Discard the pointer info except the address space because the memory; // operand can't represent this new access since the offset is variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp:109,access,access,109,interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp,2,['access'],['access']
Security,"// Display all logfiles directly on this terminal. Useful for getting; // test results without accessing the test machine (i.e. with CDash)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:95,access,accessing,95,test/stressProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx,1,['access'],['accessing']
Security,"// Distribute an SGPR->VGPR copy of a REG_SEQUENCE into a VGPR REG_SEQUENCE.; //; // SGPRx = ...; // SGPRy = REG_SEQUENCE SGPRx, sub0 ...; // VGPRz = COPY SGPRy; //; // ==>; //; // VGPRx = COPY SGPRx; // VGPRz = REG_SEQUENCE VGPRx, sub0; //; // This exposes immediate folding opportunities when materializing 64-bit; // immediates.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIFixSGPRCopies.cpp:250,expose,exposes,250,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIFixSGPRCopies.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIFixSGPRCopies.cpp,1,['expose'],['exposes']
Security,// Do a backwards scan through the CFG from SecondI to FirstI. Look for; // instructions which can modify the memory location accessed by SecondI.; //; // While doing the walk keep track of the address to check. It might be; // different in different basic blocks due to PHI translation.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/DeadStoreElimination.cpp:126,access,accessed,126,interpreter/llvm-project/llvm/lib/Transforms/Scalar/DeadStoreElimination.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/DeadStoreElimination.cpp,1,['access'],['accessed']
Security,// Do access control from the special member function,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp:6,access,access,6,interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,1,['access'],['access']
Security,"// Do loop versioning.; // Create memcheck for memory accessed inside loop.; // Clone original loop, and set blocks properly.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopVersioningLICM.cpp:54,access,accessed,54,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopVersioningLICM.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopVersioningLICM.cpp,1,['access'],['accessed']
Security,"// Do not assume 0x00 padding and calculate partial uint32_t; // checksums directly.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/mathtext/src/fontembed.cxx:65,checksum,checksums,65,graf2d/mathtext/src/fontembed.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/mathtext/src/fontembed.cxx,1,['checksum'],['checksums']
Security,// Do not hoist instructions that access memory.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86PreTileConfig.cpp:34,access,access,34,interpreter/llvm-project/llvm/lib/Target/X86/X86PreTileConfig.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86PreTileConfig.cpp,1,['access'],['access']
Security,// Do not instrument accesses from different address spaces; we cannot deal; // with them.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/HWAddressSanitizer.cpp:21,access,accesses,21,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/HWAddressSanitizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/HWAddressSanitizer.cpp,3,['access'],['accesses']
Security,// Do not instrument accesses to LLVM internal variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/MemProfiler.cpp:21,access,accesses,21,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/MemProfiler.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/MemProfiler.cpp,1,['access'],['accesses']
Security,// Do not instrument rtti proxy symbols for function sanitizer.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/AddressSanitizer.cpp:53,sanitiz,sanitizer,53,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/AddressSanitizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/AddressSanitizer.cpp,1,['sanitiz'],['sanitizer']
Security,"// Do not interleave loops with a relatively small known or estimated trip; // count. But we will interleave when InterleaveSmallLoopScalarReduction is; // enabled, and the code has scalar reductions(HasReductions && VF = 1),; // because with the above conditions interleaving can expose ILP and break; // cross iteration dependences for reductions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:281,expose,expose,281,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,1,['expose'],['expose']
Security,"// Do not issue ""bridge cast"" diagnostic when implicit casting; // a retainable object to a CF type parameter belonging to an audited; // CF API function. Let caller issue a normal type mismatched diagnostic; // instead.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprObjC.cpp:126,audit,audited,126,interpreter/llvm-project/clang/lib/Sema/SemaExprObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprObjC.cpp,1,['audit'],['audited']
Security,// Do not issue this warning if backing ivar is used somewhere and accessor; // implementation makes a self call. This is to prevent false positive in; // cases where the ivar is accessed by another method that the accessor; // delegates to.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclObjC.cpp:67,access,accessor,67,interpreter/llvm-project/clang/lib/Sema/SemaDeclObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclObjC.cpp,3,['access'],"['accessed', 'accessor']"
Security,// Do not treat local-addr memory access as large stride.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUPerfHintAnalysis.cpp:34,access,access,34,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUPerfHintAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUPerfHintAnalysis.cpp,1,['access'],['access']
Security,// Do not use 'gnu' hash style for Mips targets because .gnu.hash; // and the MIPS ABI require .dynsym to be sorted in different ways.; // .gnu.hash needs symbols to be grouped by hash code whereas the MIPS; // ABI requires a mapping between the GOT and the symbol table.; // Android loader does not support .gnu.hash until API 23.; // Hexagon linker/loader does not support .gnu.hash,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Linux.cpp:20,hash,hash,20,interpreter/llvm-project/clang/lib/Driver/ToolChains/Linux.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Linux.cpp,6,['hash'],['hash']
Security,"// Do not use f64 to lower memcpy if source is string constant. It's; // better to use i32 to avoid the loads.; // Also, do not use f64 to lower memset unless this is a memset of zeros.; // The gymnastics of splatting a byte value into an XMM register and then; // only using 8-byte stores (because this is a CPU with slow unaligned; // 16-byte accesses) makes that a loser.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLoweringCall.cpp:345,access,accesses,345,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLoweringCall.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLoweringCall.cpp,1,['access'],['accesses']
Security,// Do not use virtual base registers when ROP protection is turned on.; // Virtual base registers break the layout of the local variable space and may; // push the ROP Hash location past the 512 byte range of the ROP store; // instruction.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCRegisterInfo.cpp:168,Hash,Hash,168,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCRegisterInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCRegisterInfo.cpp,1,['Hash'],['Hash']
Security,"// Do not validate the default prefixes, or diagnostics about duplicates might; // incorrectly indicate that they were supplied by the user.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheck.cpp:10,validat,validate,10,interpreter/llvm-project/llvm/lib/FileCheck/FileCheck.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheck.cpp,1,['validat'],['validate']
Security,// Do not visit nodes that have been visited already. We return true because; // it means that we couldn't find any value that doesn't look hash-like.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/BypassSlowDivision.cpp:140,hash,hash-like,140,interpreter/llvm-project/llvm/lib/Transforms/Utils/BypassSlowDivision.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/BypassSlowDivision.cpp,1,['hash'],['hash-like']
Security,// Do nothing if there are no file checksums. Microsoft's linker rejects empty; // CodeView substreams.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCCodeView.cpp:35,checksum,checksums,35,interpreter/llvm-project/llvm/lib/MC/MCCodeView.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCCodeView.cpp,1,['checksum'],['checksums']
Security,"// Do nothing, but we might want to emit a security warning in future.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:43,secur,security,43,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,1,['secur'],['security']
Security,"// Do nothing, we'll validate it later.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:21,validat,validate,21,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,1,['validat'],['validate']
Security,// Do nothing.; // See https://github.com/google/sanitizers/issues/504,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/MemorySanitizer.cpp:49,sanitiz,sanitizers,49,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/MemorySanitizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/MemorySanitizer.cpp,1,['sanitiz'],['sanitizers']
Security,// Do pass non-default ScalarConversionOpts so that sanitizer check is; // emitted.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:52,sanitiz,sanitizer,52,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,1,['sanitiz'],['sanitizer']
Security,"// Do really simple DSE, to catch cases where there are several consecutive; // stores to the same location, separated by a few arithmetic operations. This; // situation often occurs with bitfield accesses.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineLoadStoreAlloca.cpp:197,access,accesses,197,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineLoadStoreAlloca.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineLoadStoreAlloca.cpp,1,['access'],['accesses']
Security,"// Do really simple store-to-load forwarding and load CSE, to catch cases; // where there are several consecutive memory accesses to the same location,; // separated by a few arithmetic operations.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineLoadStoreAlloca.cpp:121,access,accesses,121,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineLoadStoreAlloca.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineLoadStoreAlloca.cpp,1,['access'],['accesses']
Security,"// Do some additional validation, then merge default arguments; // from the existing declarations.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp:22,validat,validation,22,interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp,1,['validat'],['validation']
Security,// Do some basic validation checking on our liveness results before; // performing relocation. Relocation can and will turn mistakes in liveness; // results into non-sensical code which is must harder to debug.; // TODO: It would be nice to test consistency as well,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/RewriteStatepointsForGC.cpp:17,validat,validation,17,interpreter/llvm-project/llvm/lib/Transforms/Scalar/RewriteStatepointsForGC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/RewriteStatepointsForGC.cpp,1,['validat'],['validation']
Security,"// Do the access attribute and DSOLocal propagation in combined index.; // The goal of attribute propagation is internalization of readonly (RO); // or writeonly (WO) variables. To determine which variables are RO or WO; // and which are not we take following steps:; // - During analysis we speculatively assign readonly and writeonly; // attribute to all variables which can be internalized. When computing; // function summary we also assign readonly or writeonly attribute to a; // reference if function doesn't modify referenced variable (readonly); // or doesn't read it (writeonly).; //; // - After computing dead symbols in combined index we do the attribute; // and DSOLocal propagation. During this step we:; // a. clear RO and WO attributes from variables which are preserved or; // can't be imported; // b. clear RO and WO attributes from variables referenced by any global; // variable initializer; // c. clear RO attribute from variable referenced by a function when; // reference is not readonly; // d. clear WO attribute from variable referenced by a function when; // reference is not writeonly; // e. clear IsDSOLocal flag in every summary if any of them is false.; //; // Because of (c, d) we don't internalize variables read by function A; // and modified by function B.; //; // Internalization itself happens in the backend after import is finished; // See internalizeGVsAfterImport.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/ModuleSummaryIndex.cpp:10,access,access,10,interpreter/llvm-project/llvm/lib/IR/ModuleSummaryIndex.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/ModuleSummaryIndex.cpp,1,['access'],['access']
Security,// Do the same for injection of invariant conditions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp:19,inject,injection,19,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp,1,['inject'],['injection']
Security,"// Do this opt after PEI which is after RA. The reason is stack slot expansion; // in PEI may expose such opportunities since in PEI, stack slot offsets to; // frame base(OffsetAddi) are determined.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCInstrInfo.cpp:94,expose,expose,94,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCInstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCInstrInfo.cpp,1,['expose'],['expose']
Security,// Do we need to grow the hashtable?,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FoldingSet.cpp:26,hash,hashtable,26,interpreter/llvm-project/llvm/lib/Support/FoldingSet.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FoldingSet.cpp,1,['hash'],['hashtable']
Security,// Don't access the slot unless we're trying to cache the result.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:9,access,access,9,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,1,['access'],['access']
Security,"// Don't access this directly, use the getThreadIndex wrapper.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Parallel.h:9,access,access,9,interpreter/llvm-project/llvm/include/llvm/Support/Parallel.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Parallel.h,1,['access'],['access']
Security,// Don't actually mark a global constant if it's atomic because atomic loads; // are implemented by a trivial cmpxchg in some edge-cases and that usually; // requires write access to the variable even if it's not actually changed.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/GlobalOpt.cpp:173,access,access,173,interpreter/llvm-project/llvm/lib/Transforms/IPO/GlobalOpt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/GlobalOpt.cpp,1,['access'],['access']
Security,// Don't add bare keywords to the consumer since they will always fail; // validation by virtue of not being associated with any decls.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprMember.cpp:75,validat,validation,75,interpreter/llvm-project/clang/lib/Sema/SemaExprMember.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprMember.cpp,1,['validat'],['validation']
Security,// Don't add sanitizers if we are here from ThinLTO PostLink. That already; // done on PreLink stage.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp:13,sanitiz,sanitizers,13,interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp,1,['sanitiz'],['sanitizers']
Security,// Don't attempt Entry validation if any of the previous checks found errors,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/DWARF/DWARFVerifier.cpp:23,validat,validation,23,interpreter/llvm-project/llvm/lib/DebugInfo/DWARF/DWARFVerifier.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/DWARF/DWARFVerifier.cpp,1,['validat'],['validation']
Security,// Don't cache the result for nodes with different hashes. The hash; // comparison is fast enough.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonCommonGEP.cpp:51,hash,hashes,51,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonCommonGEP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonCommonGEP.cpp,2,['hash'],"['hash', 'hashes']"
Security,"// Don't chain dependent friend function definitions until instantiation, to; // permit cases like; //; // void func();; // template<typename T> class C1 { friend void func() {} };; // template<typename T> class C2 { friend void func() {} };; //; // ... which is valid if only one of C1 and C2 is ever instantiated.; //; // FIXME: This need only apply to function definitions. For now, we proxy; // this by checking for a file-scope function. We do not want this to apply; // to friend declarations nominating member functions, because that gets in; // the way of access checks.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:564,access,access,564,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['access'],['access']
Security,"// Don't codegen statics coming in from a module; they are already part of; // the library.; // We do need to expose static variables from template instantiations.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/DeclCollector.cpp:110,expose,expose,110,interpreter/cling/lib/Interpreter/DeclCollector.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/DeclCollector.cpp,1,['expose'],['expose']
Security,// Don't emit module relocation error if we have -fno-validate-pch,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTReader.cpp:54,validat,validate-pch,54,interpreter/llvm-project/clang/lib/Serialization/ASTReader.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTReader.cpp,2,['validat'],['validate-pch']
Security,// Don't list a class twice in the lookup failure diagnostic if it's; // found by both its injected-class-name and by the name in the enclosing; // scope.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp:91,inject,injected-class-name,91,interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp,1,['inject'],['injected-class-name']
Security,"// Don't modify the memory access size if this is atomic/volatile, but we can; // still adjust the opcode to indicate the high bit behavior.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp:27,access,access,27,interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp,2,['access'],['access']
Security,// Don't move volatile memory accesses; // TODO: unclear if we need to be as conservative about atomics,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Lanai/LanaiMemAluCombiner.cpp:30,access,accesses,30,interpreter/llvm-project/llvm/lib/Target/Lanai/LanaiMemAluCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Lanai/LanaiMemAluCombiner.cpp,1,['access'],['accesses']
Security,// Don't prefetch a loop with many far apart accesses.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZTargetTransformInfo.cpp:45,access,accesses,45,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZTargetTransformInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZTargetTransformInfo.cpp,1,['access'],['accesses']
Security,"// Don't print end of directive tokens, since they are typically newlines; // that mess up our line tracking. These come from unknown pre-processor; // directives or hash-prefixed comments in standalone assembly files.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/PrintPreprocessedOutput.cpp:166,hash,hash-prefixed,166,interpreter/llvm-project/clang/lib/Frontend/PrintPreprocessedOutput.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/PrintPreprocessedOutput.cpp,1,['hash'],['hash-prefixed']
Security,"// Don't protect against crashes if we cannot run anything.; // cling might also be in a PCH-generation mode; don't inject our Sema; // pointer into the PCH.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/IncrementalParser.cpp:116,inject,inject,116,interpreter/cling/lib/Interpreter/IncrementalParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/IncrementalParser.cpp,1,['inject'],['inject']
Security,"// Don't support a StartIndex that begins in the second input, or if the; // first non-undef index would access below the StartIndex.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Instructions.cpp:105,access,access,105,interpreter/llvm-project/llvm/lib/IR/Instructions.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Instructions.cpp,1,['access'],['access']
Security,"// Don't touch volatile memory accesses - we may be changing their order.; // TODO: We could allow unordered and monotonic atomics here, but we need to; // make sure the resulting ldm/stm is correctly marked as atomic.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMLoadStoreOptimizer.cpp:31,access,accesses,31,interpreter/llvm-project/llvm/lib/Target/ARM/ARMLoadStoreOptimizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMLoadStoreOptimizer.cpp,1,['access'],['accesses']
Security,// Don't use scalar loads for volatile accesses to non-constant address; // spaces.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPURegisterBankInfo.cpp:39,access,accesses,39,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPURegisterBankInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPURegisterBankInfo.cpp,1,['access'],['accesses']
Security,// Don't validate the input; trust the value supplied by the user.; // The motivation is to prevent unnecessary file and registry access.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/WindowsDriver/MSVCPaths.cpp:9,validat,validate,9,interpreter/llvm-project/llvm/lib/WindowsDriver/MSVCPaths.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/WindowsDriver/MSVCPaths.cpp,2,"['access', 'validat']","['access', 'validate']"
Security,// Don't validate the input; trust the value supplied by the user.; // The primary motivation is to prevent unnecessary file and registry access.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/WindowsDriver/MSVCPaths.cpp:9,validat,validate,9,interpreter/llvm-project/llvm/lib/WindowsDriver/MSVCPaths.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/WindowsDriver/MSVCPaths.cpp,2,"['access', 'validat']","['access', 'validate']"
Security,// Double-word-size access,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/ELF.h:20,access,access,20,interpreter/llvm-project/llvm/include/llvm/BinaryFormat/ELF.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/ELF.h,1,['access'],['access']
Security,"// Doubly linked list with hashtable for lookup",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TViewPubFunctions.h:27,hash,hashtable,27,core/meta/src/TViewPubFunctions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TViewPubFunctions.h,1,['hash'],['hashtable']
Security,"// Drill down the array types: if global variable of a fixed type is; // not sanitized, we also don't instrument arrays of them.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:77,sanitiz,sanitized,77,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,1,['sanitiz'],['sanitized']
Security,// Drop all references of all accesses in BB,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/MemorySSAUpdater.cpp:30,access,accesses,30,interpreter/llvm-project/llvm/lib/Analysis/MemorySSAUpdater.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/MemorySSAUpdater.cpp,1,['access'],['accesses']
Security,"// Dsymutil qualified hash extension.; // DW_ATOM_type_flags values.; // Always set for C++, only set for ObjC if this is the @implementation for a; // class.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/Dwarf.h:22,hash,hash,22,interpreter/llvm-project/llvm/include/llvm/BinaryFormat/Dwarf.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/Dwarf.h,1,['hash'],['hash']
Security,"// Due to hash collisions, it can happen that we load another template; // specialization with the same hash. This is fine, as long as the next; // call to findSpecializationImpl does not find a matching Decl for the; // template arguments.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/DeclTemplate.cpp:10,hash,hash,10,interpreter/llvm-project/clang/lib/AST/DeclTemplate.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/DeclTemplate.cpp,2,['hash'],['hash']
Security,// Dummy event that does not require access to counters (for tests).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/PerfHelper.h:37,access,access,37,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/PerfHelper.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/PerfHelper.h,1,['access'],['access']
Security,// Dump or access data inside GSYM files,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-gsymutil/llvm-gsymutil.cpp:11,access,access,11,interpreter/llvm-project/llvm/tools/llvm-gsymutil/llvm-gsymutil.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-gsymutil/llvm-gsymutil.cpp,1,['access'],['access']
Security,// Dump symbols. We need to do this early because other sections might want; // to access the deduplicated symbol names that we also create here.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/obj2yaml/elf2yaml.cpp:83,access,access,83,interpreter/llvm-project/llvm/tools/obj2yaml/elf2yaml.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/obj2yaml/elf2yaml.cpp,1,['access'],['access']
Security,"// During ISel lowering we always reserve the stack pointer in entry and chain; // functions, but never actually want to reference it when accessing our own; // frame. If we need a frame pointer we use it, but otherwise we can just use; // an immediate ""0"" which we represent by returning NoRegister.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIRegisterInfo.cpp:139,access,accessing,139,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIRegisterInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIRegisterInfo.cpp,1,['access'],['accessing']
Security,"// During context-sensitive analysis, a struct may be allocated in one; // function, but its field accessed in a function lower in the stack than; // the allocation. Since we only collect fields used in the function where; // the allocation occurs, we can't apply that filter when performing; // context-sensitive analysis. But, this only applies to storage locations,; // since field access it not allowed to fail. In contrast, field *values*; // don't need this allowance, since the API allows for uninitialized fields.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/DataflowAnalysisContext.cpp:99,access,accessed,99,interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/DataflowAnalysisContext.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/DataflowAnalysisContext.cpp,2,['access'],"['access', 'accessed']"
Security,"// During the loop below, the accumulated set of; // sanitizers disabled by the current sanitizer; // argument or any argument after it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp:53,sanitiz,sanitizers,53,interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,4,['sanitiz'],"['sanitizer', 'sanitizers']"
Security,// Each access has its own dependence set.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp:8,access,access,8,interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp,1,['access'],['access']
Security,// Each bucket is just an offset into the hash table file.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h:42,hash,hash,42,interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h,1,['hash'],['hash']
Security,"// Each buffer, even with the same name, is a distinct construct.; // Multiple buffers with the same name are allowed for backward; // compatibility.; // As long as buffers have unique resource bindings the names don't matter.; // The names get exposed via the CPU-side reflection API which; // supports querying bindings, so we cannot remove them.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/DeclBase.cpp:245,expose,exposed,245,interpreter/llvm-project/clang/lib/AST/DeclBase.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/DeclBase.cpp,1,['expose'],['exposed']
Security,"// Each module has its own checksum subsection, so scan for it every time.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-pdbutil/llvm-pdbutil.cpp:27,checksum,checksum,27,interpreter/llvm-project/llvm/tools/llvm-pdbutil/llvm-pdbutil.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-pdbutil/llvm-pdbutil.cpp,1,['checksum'],['checksum']
Security,"// Each module must have the same target triple, so we arbitrarily access the; // first one.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/IRObjectFile.cpp:67,access,access,67,interpreter/llvm-project/llvm/lib/Object/IRObjectFile.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/IRObjectFile.cpp,1,['access'],['access']
Security,"// Each use of the byte array uses a different alias. This makes the; // backend less likely to reuse previously computed byte array addresses,; // improving the security of the CFI mechanism based on this pass.; // This won't work when importing because TheByteArray is external.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/LowerTypeTests.cpp:162,secur,security,162,interpreter/llvm-project/llvm/lib/Transforms/IPO/LowerTypeTests.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/LowerTypeTests.cpp,1,['secur'],['security']
Security,// Eat hash token.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AsmParser/AArch64AsmParser.cpp:7,hash,hash,7,interpreter/llvm-project/llvm/lib/Target/AArch64/AsmParser/AArch64AsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AsmParser/AArch64AsmParser.cpp,9,['hash'],['hash']
Security,// Eat hash.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/AsmParser/ARMAsmParser.cpp:7,hash,hash,7,interpreter/llvm-project/llvm/lib/Target/ARM/AsmParser/ARMAsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/AsmParser/ARMAsmParser.cpp,1,['hash'],['hash']
Security,// Eat hash; // Parse the immediate operand.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AsmParser/AArch64AsmParser.cpp:7,hash,hash,7,interpreter/llvm-project/llvm/lib/Target/AArch64/AsmParser/AArch64AsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AsmParser/AArch64AsmParser.cpp,1,['hash'],['hash']
Security,// Eat the hash (dollar),MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/AsmParser/ARMAsmParser.cpp:11,hash,hash,11,interpreter/llvm-project/llvm/lib/Target/ARM/AsmParser/ARMAsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/AsmParser/ARMAsmParser.cpp,1,['hash'],['hash']
Security,// Eat the hash token.; // Lexer only ever emits HashDirective if it fully formed if it's; // done the checking already so this is an internal error.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp:11,hash,hash,11,interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,4,"['Hash', 'hash']","['HashDirective', 'hash']"
Security,"// Eat the identifier.; // In this context, we convert the register operand into; // a plain ""%asi"" token since the register access is already; // implicit in the instruction definition and encoding.; // See LoadASI/StoreASI in SparcInstrInfo.td.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Sparc/AsmParser/SparcAsmParser.cpp:125,access,access,125,interpreter/llvm-project/llvm/lib/Target/Sparc/AsmParser/SparcAsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Sparc/AsmParser/SparcAsmParser.cpp,1,['access'],['access']
Security,// Eat the optional hash (dollar),MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/AsmParser/ARMAsmParser.cpp:20,hash,hash,20,interpreter/llvm-project/llvm/lib/Target/ARM/AsmParser/ARMAsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/AsmParser/ARMAsmParser.cpp,1,['hash'],['hash']
Security,"// Either access a_ij as a(i,j)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/matrix/inc/TMatrixT.h:10,access,access,10,math/matrix/inc/TMatrixT.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/inc/TMatrixT.h,3,['access'],['access']
Security,// Either an identifier for named values or a 5-bit immediate.; // Eat optional hash.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AsmParser/AArch64AsmParser.cpp:80,hash,hash,80,interpreter/llvm-project/llvm/lib/Target/AArch64/AsmParser/AArch64AsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AsmParser/AArch64AsmParser.cpp,1,['hash'],['hash']
Security,"// Either we hit the assert, really have no accesses, or we have both; // accesses and an access list. Same with defs.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/MemorySSA.cpp:44,access,accesses,44,interpreter/llvm-project/llvm/lib/Analysis/MemorySSA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/MemorySSA.cpp,3,['access'],"['access', 'accesses']"
Security,"// Either, the alignment requirements are ""enabled"", or there is an; // unaligned LDS access related hardware bug though alignment requirements; // are ""disabled"". In either case, we need to check for proper alignment; // requirements.; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp:86,access,access,86,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp,1,['access'],['access']
Security,"// Element access",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve/inc/TEveTrans.h:11,access,access,11,graf3d/eve/inc/TEveTrans.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve/inc/TEveTrans.h,2,['access'],['access']
Security,// Embed the type hash in the X86::MOV32ri instruction to avoid special; // casing object file parsers.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86AsmPrinter.cpp:18,hash,hash,18,interpreter/llvm-project/llvm/lib/Target/X86/X86AsmPrinter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86AsmPrinter.cpp,1,['hash'],['hash']
Security,"// Embedded targets are simple at the moment, not supporting sanitizers and; // with different libraries for each member of the product { static, PIC } x; // { hard-float, soft-float }",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Darwin.cpp:61,sanitiz,sanitizers,61,interpreter/llvm-project/clang/lib/Driver/ToolChains/Darwin.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Darwin.cpp,1,['sanitiz'],['sanitizers']
Security,// Emit Validation Counters Array,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/ExegesisEmitter.cpp:8,Validat,Validation,8,interpreter/llvm-project/llvm/utils/TableGen/ExegesisEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/ExegesisEmitter.cpp,1,['Validat'],['Validation']
Security,// Emit a check and trap if the target hash doesn't match.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/KCFI.cpp:39,hash,hash,39,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/KCFI.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/KCFI.cpp,1,['hash'],['hash']
Security,// Emit a combined atomicrmw load/store operation for the interlocked; // intrinsics.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:58,interlock,interlocked,58,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,1,['interlock'],['interlocked']
Security,"// Emit a function symbol for the type data to avoid unreachable instruction; // warnings from binary validation tools, and use the same linkage as the; // parent function. Note that using local linkage would result in duplicate; // symbols for weak parent functions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86AsmPrinter.cpp:102,validat,validation,102,interpreter/llvm-project/llvm/lib/Target/X86/X86AsmPrinter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86AsmPrinter.cpp,1,['validat'],['validation']
Security,// Emit a hash-based bit set entry for cross-DSO calls.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:10,hash,hash-based,10,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,1,['hash'],['hash-based']
Security,// Emit a null check on the allocation result if the allocation; // function is allowed to return null (because it has a non-throwing; // exception spec or is the reserved placement new) and we have an; // interesting initializer will be running sanitizers on the initialization.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp:246,sanitiz,sanitizers,246,interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp,1,['sanitiz'],['sanitizers']
Security,"// Emit a package option.; //; // CHECKER_OPTION(OPTIONTYPE, CHECKERNAME, OPTIONNAME, DESCRIPTION, DEFAULT); // - OPTIONTYPE: Type of the option, whether it's integer or boolean etc.; // This is important for validating user input. Note that; // it's a string, rather than an actual type: since we can; // load checkers runtime, we can't use template hackery for; // sorting this out compile-time.; // - CHECKERNAME: Name of the package.; // - OPTIONNAME: Name of the option.; // - DESCRIPTION; // - DEFAULT: The default value for this option.; //; // The full option can be specified in the command like this:; // -analyzer-config CHECKERNAME:OPTIONNAME=VALUE",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangSACheckersEmitter.cpp:209,validat,validating,209,interpreter/llvm-project/clang/utils/TableGen/ClangSACheckersEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangSACheckersEmitter.cpp,1,['validat'],['validating']
Security,"// Emit a package option.; //; // PACKAGE_OPTION(OPTIONTYPE, PACKAGENAME, OPTIONNAME, DESCRIPTION, DEFAULT); // - OPTIONTYPE: Type of the option, whether it's integer or boolean etc.; // This is important for validating user input. Note that; // it's a string, rather than an actual type: since we can; // load checkers runtime, we can't use template hackery for; // sorting this out compile-time.; // - PACKAGENAME: Name of the package.; // - OPTIONNAME: Name of the option.; // - DESCRIPTION; // - DEFAULT: The default value for this option.; //; // The full option can be specified in the command like this:; // -analyzer-config PACKAGENAME:OPTIONNAME=VALUE",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangSACheckersEmitter.cpp:209,validat,validating,209,interpreter/llvm-project/clang/utils/TableGen/ClangSACheckersEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangSACheckersEmitter.cpp,1,['validat'],['validating']
Security,// Emit a plain load for the non-interlocked intrinsics.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:33,interlock,interlocked,33,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,1,['interlock'],['interlocked']
Security,"// Emit an EOL-comment describing which TypeIndex this hash corresponds; // to, as well as the stringified SHA1 hash.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/CodeViewDebug.cpp:55,hash,hash,55,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/CodeViewDebug.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/CodeViewDebug.cpp,2,['hash'],['hash']
Security,// Emit an array of FileChecksum entries. We index into this table using the; // user-provided file number. Each entry may be a variable number of bytes; // determined by the checksum kind and size.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCCodeView.cpp:175,checksum,checksum,175,interpreter/llvm-project/llvm/lib/MC/MCCodeView.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCCodeView.cpp,1,['checksum'],['checksum']
Security,// Emit an optional hash for the module now,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Bitcode/Writer/BitcodeWriter.cpp:20,hash,hash,20,interpreter/llvm-project/llvm/lib/Bitcode/Writer/BitcodeWriter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Bitcode/Writer/BitcodeWriter.cpp,1,['hash'],['hash']
Security,// Emit content hash for this file.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp:16,hash,hash,16,interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp,1,['hash'],['hash']
Security,// Emit namespace dies into a hashed accelerator table.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfDebug.cpp:30,hash,hashed,30,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfDebug.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfDebug.cpp,1,['hash'],['hashed']
Security,// Emit objective C classes and categories into a hashed accelerator table; // section.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfDebug.cpp:50,hash,hashed,50,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfDebug.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfDebug.cpp,1,['hash'],['hashed']
Security,"// Emit sanitizer checks for pointer value now, so that in the case of an; // array it was checked only once and not at each constructor call. We may; // have already checked that the pointer is non-null.; // FIXME: If we have an array cookie and a potentially-throwing allocator,; // we'll null check the wrong pointer here.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp:8,sanitiz,sanitizer,8,interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp,1,['sanitiz'],['sanitizer']
Security,// Emit symbol for CMSE non-secure entry point,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMAsmPrinter.cpp:28,secur,secure,28,interpreter/llvm-project/llvm/lib/Target/ARM/ARMAsmPrinter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMAsmPrinter.cpp,1,['secur'],['secure']
Security,"// Emit the FPEXTEND_PSEUDO instruction.; //; // Expand an f16 to either a FGR32Opnd or FGR64Opnd.; //; // Safety: Cycle the result through the GPRs so the result always ends up; // the correct floating point register.; //; // FIXME: This copying is strictly unnecessary. If we could tie FGR32Opnd:$Fd; // / FGR64Opnd:$Fd and MSA128F16:$Ws to the same physical register; // (which they can be, as the MSA registers are defined to alias the; // FPU's 64 bit and 32 bit registers) the result can be accessed using; // the correct register class. That requires operands be tie-able across; // register classes which have a sub/super register class relationship. I; // haven't checked.; //; // For FGR32Opnd:; //; // FPEXTEND FGR32Opnd:$fd, MSA128F16:$ws; // =>; // fexupr.w $wtemp, $ws; // copy_s.w $rtemp, $ws[0]; // mtc1 $rtemp, $fd; //; // For FGR64Opnd on Mips64:; //; // FPEXTEND FGR64Opnd:$fd, MSA128F16:$ws; // =>; // fexupr.w $wtemp, $ws; // fexupr.d $wtemp2, $wtemp; // copy_s.d $rtemp, $wtemp2s[0]; // dmtc1 $rtemp, $fd; //; // For FGR64Opnd on Mips32:; //; // FPEXTEND FGR64Opnd:$fd, MSA128F16:$ws; // =>; // fexupr.w $wtemp, $ws; // fexupr.d $wtemp2, $wtemp; // copy_s.w $rtemp, $wtemp2[0]; // mtc1 $rtemp, $ftemp; // copy_s.w $rtemp2, $wtemp2[1]; // $fd = mthc1 $rtemp2, $ftemp",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsSEISelLowering.cpp:497,access,accessed,497,interpreter/llvm-project/llvm/lib/Target/Mips/MipsSEISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsSEISelLowering.cpp,1,['access'],['accessed']
Security,"// Emit the FPROUND_PSEUDO instruction.; //; // Round an FGR64Opnd, FGR32Opnd to an f16.; //; // Safety: Cycle the operand through the GPRs so the result always ends up; // the correct MSA register.; //; // FIXME: This copying is strictly unnecessary. If we could tie FGR32Opnd:$Fs; // / FGR64Opnd:$Fs and MSA128F16:$Wd to the same physical register; // (which they can be, as the MSA registers are defined to alias the; // FPU's 64 bit and 32 bit registers) the result can be accessed using; // the correct register class. That requires operands be tie-able across; // register classes which have a sub/super register class relationship.; //; // For FPG32Opnd:; //; // FPROUND MSA128F16:$wd, FGR32Opnd:$fs; // =>; // mfc1 $rtemp, $fs; // fill.w $rtemp, $wtemp; // fexdo.w $wd, $wtemp, $wtemp; //; // For FPG64Opnd on mips32r2+:; //; // FPROUND MSA128F16:$wd, FGR64Opnd:$fs; // =>; // mfc1 $rtemp, $fs; // fill.w $rtemp, $wtemp; // mfhc1 $rtemp2, $fs; // insert.w $wtemp[1], $rtemp2; // insert.w $wtemp[3], $rtemp2; // fexdo.w $wtemp2, $wtemp, $wtemp; // fexdo.h $wd, $temp2, $temp2; //; // For FGR64Opnd on mips64r2+:; //; // FPROUND MSA128F16:$wd, FGR64Opnd:$fs; // =>; // dmfc1 $rtemp, $fs; // fill.d $rtemp, $wtemp; // fexdo.w $wtemp2, $wtemp, $wtemp; // fexdo.h $wd, $wtemp2, $wtemp2; //; // Safety note: As $wtemp is UNDEF, we may provoke a spurious exception if the; // undef bits are ""just right"" and the exception enable bits are; // set. By using fill.w to replicate $fs into all elements over; // insert.w for one element, we avoid that potiential case. If; // fexdo.[hw] causes an exception in, the exception is valid and it; // occurs for all elements.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsSEISelLowering.cpp:477,access,accessed,477,interpreter/llvm-project/llvm/lib/Target/Mips/MipsSEISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsSEISelLowering.cpp,1,['access'],['accessed']
Security,"// Emit the cases for the image types. For an image type name, there are 3; // corresponding QualTypes (""RO"", ""WO"", ""RW""). The ""AccessQualifier"" field; // tells which one is needed. Emit a switch statement that puts the; // corresponding QualType into ""QT"".",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangOpenCLBuiltinEmitter.cpp:128,Access,AccessQualifier,128,interpreter/llvm-project/clang/utils/TableGen/ClangOpenCLBuiltinEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangOpenCLBuiltinEmitter.cpp,1,['Access'],['AccessQualifier']
Security,// Emit the function prologue data for the indirect call sanitizer.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/AsmPrinter.cpp:57,sanitiz,sanitizer,57,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/AsmPrinter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/AsmPrinter.cpp,1,['sanitiz'],['sanitizer']
Security,// Emit the hash record.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Bitcode/Writer/BitcodeWriter.cpp:12,hash,hash,12,interpreter/llvm-project/llvm/lib/Bitcode/Writer/BitcodeWriter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Bitcode/Writer/BitcodeWriter.cpp,1,['hash'],['hash']
Security,// Emit the hashtable itself.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h:12,hash,hashtable,12,interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h,1,['hash'],['hashtable']
Security,// Emit the module's hash.; // MODULE_CODE_HASH: [5*i32],MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Bitcode/Writer/BitcodeWriter.cpp:21,hash,hash,21,interpreter/llvm-project/llvm/lib/Bitcode/Writer/BitcodeWriter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Bitcode/Writer/BitcodeWriter.cpp,1,['hash'],['hash']
Security,// Emit the routine to validate an operand against a match class.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp:23,validat,validate,23,interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp,1,['validat'],['validate']
Security,// Emit type dies into a hashed accelerator table.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfDebug.cpp:25,hash,hashed,25,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfDebug.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfDebug.cpp,1,['hash'],['hashed']
Security,"// Emit type information and hashes last, so that any types we translate while; // emitting function info are included.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/CodeViewDebug.cpp:29,hash,hashes,29,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/CodeViewDebug.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/CodeViewDebug.cpp,1,['hash'],['hashes']
Security,// Emit visible names into a hashed accelerator table section.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfDebug.cpp:29,hash,hashed,29,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfDebug.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfDebug.cpp,1,['hash'],['hashed']
Security,// EmitCommonSymbol and EmitLocalCommonSymbol are extended versions of the; // functions found in MCELFStreamer.cpp taking AccessSize as an additional; // parameter.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonMCELFStreamer.cpp:123,Access,AccessSize,123,interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonMCELFStreamer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonMCELFStreamer.cpp,1,['Access'],['AccessSize']
Security,"// Emits; // mov %SPL, %depot;; // cvta.local %SP, %SPL;; // for local address accesses in MF.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXFrameLowering.cpp:79,access,accesses,79,interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXFrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXFrameLowering.cpp,1,['access'],['accesses']
Security,// EmptyLineBeforeAccessModifier is handling the case when two access; // modifiers follow each other.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/UnwrappedLineFormatter.cpp:63,access,access,63,interpreter/llvm-project/clang/lib/Format/UnwrappedLineFormatter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/UnwrappedLineFormatter.cpp,1,['access'],['access']
Security,"// Enable compatilibily mode to avoid analyzer-config related errors.; // Since we can't access frontend flags through hasArg, let's manually iterate; // through them.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:89,access,access,89,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,1,['access'],['access']
Security,"// Enable stale profile matching by default for probe-based profile.; // Currently the matching relies on if the checksum mismatch is detected,; // which is currently only available for pseudo-probe mode. Removing the; // checksum check could cause regressions for some cases, so further tuning; // might be needed if we want to enable it for all cases.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/SampleProfile.cpp:113,checksum,checksum,113,interpreter/llvm-project/llvm/lib/Transforms/IPO/SampleProfile.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/SampleProfile.cpp,2,['checksum'],['checksum']
Security,// Enable toolchain specific default sanitizers if not explicitly disabled.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp:37,sanitiz,sanitizers,37,interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,1,['sanitiz'],['sanitizers']
Security,"// Encapsulates access to the input file and any dependent type server,; // including any precompiled header object.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVCodeViewReader.h:16,access,access,16,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVCodeViewReader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVCodeViewReader.h,2,['access'],['access']
Security,// Encode imm for the hash load/store to stack for the ROP Protection; // instructions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/MCTargetDesc/PPCMCCodeEmitter.cpp:22,hash,hash,22,interpreter/llvm-project/llvm/lib/Target/PowerPC/MCTargetDesc/PPCMCCodeEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/MCTargetDesc/PPCMCCodeEmitter.cpp,1,['hash'],['hash']
Security,// Encode the element access list into a vector of unsigned indices.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:22,access,access,22,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,1,['access'],['access']
Security,// End of Labels should be treated as end of line for lexing; // purposes but that information is not available to the Lexer who; // does not understand Labels. This may cause us to see a Hash; // here instead of a preprocessor line comment.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp:188,Hash,Hash,188,interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,2,['Hash'],['Hash']
Security,// End of sanitizer scope,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:10,sanitiz,sanitizer,10,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,1,['sanitiz'],['sanitizer']
Security,"// Ensure accessor methods throw in case of errors",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/foundation/v7/inc/ROOT/RError.hxx:10,access,accessor,10,core/foundation/v7/inc/ROOT/RError.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/v7/inc/ROOT/RError.hxx,1,['access'],['accessor']
Security,// Ensure no component accessor exceeds the width of the vector type it; // operates on.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprMember.cpp:23,access,accessor,23,interpreter/llvm-project/clang/lib/Sema/SemaExprMember.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprMember.cpp,1,['access'],['accessor']
Security,"// Ensure that the alloca array size argument has type equal to the offset; // size of the alloca() pointer, which, in the tyical case, is intptr_t,; // so that any casting is exposed early.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineLoadStoreAlloca.cpp:176,expose,exposed,176,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineLoadStoreAlloca.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineLoadStoreAlloca.cpp,1,['expose'],['exposed']
Security,// Ensure that this isn't going to produce an unsupported memory access.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:65,access,access,65,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['access'],['access']
Security,// Ensure the accesses are valid and that the buffers do not overlap.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CStringChecker.cpp:14,access,accesses,14,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CStringChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CStringChecker.cpp,1,['access'],['accesses']
Security,// Ensure the total vector size is 64 or a multiple of 128. Types larger than; // 128 will be split into multiple interleaved accesses.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:126,access,accesses,126,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,2,['access'],['accesses']
Security,"// Epilogue vectorization code has not been auditted to ensure it handles; // non-latch exits properly. It may be fine, but it needs auditted and; // tested.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:44,audit,auditted,44,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,2,['audit'],['auditted']
Security,"// Equivalent of above for accessing the high element of a vector as an; // integer operation.; // trunc (srl (bitcast (build_vector x, y))), 16 -> trunc (bitcast y)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUISelLowering.cpp:27,access,accessing,27,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUISelLowering.cpp,1,['access'],['accessing']
Security,"// Erase memory used for password",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/rpdutils.cxx:25,password,password,25,net/rpdutils/src/rpdutils.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/rpdutils.cxx,1,['password'],['password']
Security,// Error code returned by the target predicate when validating this; // instruction encoding.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h:52,validat,validating,52,interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h,1,['validat'],['validating']
Security,// Error code returned when validating the operand.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h:28,validat,validating,28,interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h,1,['validat'],['validating']
Security,"// Error we only access integer.; //NOTE: *** Need to print an error;; //fprintf(stderr,""*** Datamember %s::%s: size of array (%s) is not an interger\n"",; // member.MemberOf()->Name(), member.Name(), current);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx:17,access,access,17,core/clingutils/src/TClingUtils.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx,1,['access'],['access']
Security,"// Estimate an offset from the stack pointer.; // The incoming offset is relating to the SP at the start of the function,; // but when we access the local it'll be relative to the SP after local; // allocation, so adjust our SP-relative offset by that allocation size.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64RegisterInfo.cpp:138,access,access,138,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64RegisterInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64RegisterInfo.cpp,3,['access'],['access']
Security,"// Estimate if we might need to scavenge registers at some point in order; // to materialize a stack offset. If so, either spill one additional; // callee-saved register or reserve a special spill slot to facilitate; // register scavenging. Thumb1 needs a spill slot for stack pointer; // adjustments and for frame index accesses when FP is high register,; // even when the frame itself is small.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMFrameLowering.cpp:321,access,accesses,321,interpreter/llvm-project/llvm/lib/Target/ARM/ARMFrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMFrameLowering.cpp,1,['access'],['accesses']
Security,"// Evaluation and validation implementation",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooRealIntegral.h:18,validat,validation,18,roofit/roofitcore/inc/RooRealIntegral.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooRealIntegral.h,1,['validat'],['validation']
Security,"// Even if FLAT_SCRATCH is implicitly used, it has no effect if flat; // instructions aren't used to access the scratch buffer. Inline assembly may; // need it though.; //; // If we only have implicit uses of flat_scr on flat instructions, it is not; // really needed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUResourceUsageAnalysis.cpp:101,access,access,101,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUResourceUsageAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUResourceUsageAnalysis.cpp,1,['access'],['access']
Security,"// Even in dependent contexts, try to diagnose base expressions with; // obviously wrong types, e.g.:; //; // T* t;; // t.f;; //; // In Obj-C++, however, the above expression is valid, since it could be; // accessing the 'f' property if T is an Obj-C interface. The extra check; // allows this, while still reporting an error if T is a struct pointer.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprMember.cpp:207,access,accessing,207,interpreter/llvm-project/clang/lib/Sema/SemaExprMember.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprMember.cpp,1,['access'],['accessing']
Security,// Eventually StackSize will be calculated by a link-time pass; which will; // also decide whether checking code needs to be injected into this particular; // prologue.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FrameLowering.cpp:125,inject,injected,125,interpreter/llvm-project/llvm/lib/Target/X86/X86FrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FrameLowering.cpp,1,['inject'],['injected']
Security,"// Every memory instruction results in an Access object. We maintain a list of; // all Access objects that we own, along with the following maps:; //; // - OffsetBins: RangeTy -> { Access }; // - RemoteIMap: RemoteI x LocalI -> Access; //; // A RemoteI is any instruction that accesses memory. RemoteI is different; // from LocalI if and only if LocalI is a call; then RemoteI is some; // instruction in the callgraph starting from LocalI. Multiple paths in the; // callgraph from LocalI to RemoteI may produce multiple accesses, but these; // are all combined into a single Access object. This may result in loss of; // information in RangeTy in the Access object.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp:42,Access,Access,42,interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp,8,"['Access', 'access']","['Access', 'accesses']"
Security,"// Every other architecture would use shouldAssumeDSOLocal in here, but; // mips is special.; // * In PIC code mips requires got loads even for local statics!; // * To save on got entries, for local statics the got entry contains the; // page and an additional add instruction takes care of the low bits.; // * It is legal to access a hidden symbol with a non hidden undefined,; // so one cannot guarantee that all access to a hidden symbol will know; // it is hidden.; // * Mips linkers don't support creating a page and a full got entry for; // the same symbol.; // * Given all that, we have to use a full got entry for hidden symbols :-(",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsISelLowering.cpp:326,access,access,326,interpreter/llvm-project/llvm/lib/Target/Mips/MipsISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsISelLowering.cpp,2,['access'],['access']
Security,"// Exception: in very rare cases (for injected-class-names), not all; // redeclarations are in the same semantic context. Skip ones in a; // different context. They don't go in this lookup table at all.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp:38,inject,injected-class-names,38,interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp,1,['inject'],['injected-class-names']
Security,"// Existence of the file corresponds to the situation where a different; // Clang instance has emitted a bug report with the same issue hash.; // This is an entirely normal situation that does not deserve a warning,; // as apart from hash collisions this can happen because the reports; // are in fact similar enough to be considered duplicates of each other.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/HTMLDiagnostics.cpp:136,hash,hash,136,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/HTMLDiagnostics.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/HTMLDiagnostics.cpp,2,['hash'],['hash']
Security,"// Existing Phi blocks may need renaming too, if an access was previously; // optimized and the inserted Defs ""covers"" the Optimized value.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/MemorySSAUpdater.cpp:52,access,access,52,interpreter/llvm-project/llvm/lib/Analysis/MemorySSAUpdater.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/MemorySSAUpdater.cpp,1,['access'],['access']
Security,"// Expand capacity of hash table if #entries>#slots",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooLinkedList.cxx:22,hash,hash,22,roofit/roofitcore/src/RooLinkedList.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooLinkedList.cxx,1,['hash'],['hash']
Security,// Experiment to make sanitizers easier to debug,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:22,sanitiz,sanitizers,22,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,1,['sanitiz'],['sanitizers']
Security,// Experiment to move sanitizers earlier.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp:22,sanitiz,sanitizers,22,interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp,1,['sanitiz'],['sanitizers']
Security,"// Experimental option to allow imprecision in LICM in pathological cases, in; // exchange for faster compile. This is to be removed if MemorySSA starts to; // address the same issue. LICM calls MemorySSAWalker's; // getClobberingMemoryAccess, up to the value of the Cap, getting perfect; // accuracy. Afterwards, LICM will call into MemorySSA's getDefiningAccess,; // which may not be precise, since optimizeUses is capped. The result is; // correct, but we may not get as ""far up"" as possible to get which access is; // clobbering the one queried.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LICM.cpp:508,access,access,508,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LICM.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LICM.cpp,1,['access'],['access']
Security,"// Expiring date for new security contexts",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/auth/inc/TAuthenticate.h:25,secur,security,25,net/auth/inc/TAuthenticate.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/auth/inc/TAuthenticate.h,1,['secur'],['security']
Security,// Explicit because copying and hashing a string isn't free.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/CachedHashString.h:32,hash,hashing,32,interpreter/llvm-project/llvm/include/llvm/ADT/CachedHashString.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/CachedHashString.h,1,['hash'],['hashing']
Security,// Explicit because hashing a string isn't free.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/CachedHashString.h:20,hash,hashing,20,interpreter/llvm-project/llvm/include/llvm/ADT/CachedHashString.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/CachedHashString.h,1,['hash'],['hashing']
Security,// Explicit member accesses.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprMember.cpp:19,access,accesses,19,interpreter/llvm-project/clang/lib/Sema/SemaExprMember.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprMember.cpp,1,['access'],['accesses']
Security,"// Explicit request to be able to access private member from the interpreter.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/ClassSelectionRule.h:34,access,access,34,core/dictgen/res/ClassSelectionRule.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/ClassSelectionRule.h,1,['access'],['access']
Security,"// Explicit request to be able to access protected member from the interpreter.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/ClassSelectionRule.h:34,access,access,34,core/dictgen/res/ClassSelectionRule.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/ClassSelectionRule.h,1,['access'],['access']
Security,"// Explicitly check for out-of-bounds access, so we return poison even if the; // constant is a uniform value.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ConstantFolding.cpp:38,access,access,38,interpreter/llvm-project/llvm/lib/Analysis/ConstantFolding.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ConstantFolding.cpp,1,['access'],['access']
Security,"// Explicitly checking for zero avoids causing UB by passing a null pointer; // to memcpy. This comes up in practice with things like:; // std::vector<uint8_t> v;; // blake3_hasher_finalize(&hasher, v.data(), v.size());",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c:191,hash,hasher,191,interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c,1,['hash'],['hasher']
Security,"// Explicitly checking for zero avoids causing UB by passing a null pointer; // to memcpy. This comes up in practice with things like:; // std::vector<uint8_t> v;; // blake3_hasher_update(&hasher, v.data(), v.size());",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c:189,hash,hasher,189,interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c,1,['hash'],['hasher']
Security,// Expose a base class for LiveDebugValues interfaces to inherit from. This; // allows the generic LiveDebugValues pass handles to call into the; // implementation.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/LiveDebugValues.h:3,Expose,Expose,3,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/LiveDebugValues.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/LiveDebugValues.h,1,['Expose'],['Expose']
Security,// Expose an additional function intended to be used by other; // specializations of DenseMapInfo without needing to know how; // to combine hash values manually,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DenseMapInfo.h:3,Expose,Expose,3,interpreter/llvm-project/llvm/include/llvm/ADT/DenseMapInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DenseMapInfo.h,2,"['Expose', 'hash']","['Expose', 'hash']"
Security,// Expose the DAG combiner to the target combiner impls.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:3,Expose,Expose,3,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['Expose'],['Expose']
Security,"// Expose the internal Workspace; /// Process a configuration file",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HLFactory.h:3,Expose,Expose,3,roofit/roostats/inc/RooStats/HLFactory.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HLFactory.h,1,['Expose'],['Expose']
Security,// Expose the switch type we're parameterized with to the iterator.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:3,Expose,Expose,3,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,1,['Expose'],['Expose']
Security,// Expose the underlying metadata to casting.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/TrackingMDRef.h:3,Expose,Expose,3,interpreter/llvm-project/llvm/include/llvm/IR/TrackingMDRef.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/TrackingMDRef.h,1,['Expose'],['Expose']
Security,// Exposed for resource monitoring & error feedback via renderer.info:,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:3,Expose,Exposed,3,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['Expose'],['Exposed']
Security,// Exposes an interface expected by autogenerated code in; // FixedLenDecoderEmitter,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/Disassembler/AMDGPUDisassembler.h:3,Expose,Exposes,3,interpreter/llvm-project/llvm/lib/Target/AMDGPU/Disassembler/AMDGPUDisassembler.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/Disassembler/AMDGPUDisassembler.h,1,['Expose'],['Exposes']
Security,// Exposes event sources for IVsRunningDocTableEvents3 events.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format-vs/ClangFormat/RunningDocTableEventsDispatcher.cs:3,Expose,Exposes,3,interpreter/llvm-project/clang/tools/clang-format-vs/ClangFormat/RunningDocTableEventsDispatcher.cs,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format-vs/ClangFormat/RunningDocTableEventsDispatcher.cs,1,['Expose'],['Exposes']
Security,"// Extend the signature with the enabled sanitizers, if at least one is; // enabled. Sanitizers which cannot affect AST generation aren't hashed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/CompilerInvocation.cpp:41,sanitiz,sanitizers,41,interpreter/llvm-project/clang/lib/Frontend/CompilerInvocation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/CompilerInvocation.cpp,3,"['Sanitiz', 'hash', 'sanitiz']","['Sanitizers', 'hashed', 'sanitizers']"
Security,// Extended vector element access is an lvalue unless there are duplicates; // in the shuffle expression.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprClassification.cpp:27,access,access,27,interpreter/llvm-project/clang/lib/AST/ExprClassification.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprClassification.cpp,1,['access'],['access']
Security,"// FIXME(PR43094): When merging comdat groups, lld can select a local; // symbol as the signature symbol even though it cannot be accessed; // outside that symbol's TU. The relative vtables ABI would make; // __cxa_pure_virtual and __cxa_deleted_virtual local symbols, and; // depending on link order, the comdat groups could resolve to the one; // with the local symbol. As a temporary solution, fill these components; // with zero. We shouldn't be calling these in the first place anyway.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGVTables.cpp:130,access,accessed,130,interpreter/llvm-project/clang/lib/CodeGen/CGVTables.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGVTables.cpp,1,['access'],['accessed']
Security,// FIXME: Add a hash comparison to check if ImportedFile's hash and the; // new Modules Path's hash matches or not.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTReader.cpp:16,hash,hash,16,interpreter/llvm-project/clang/lib/Serialization/ASTReader.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTReader.cpp,3,['hash'],['hash']
Security,// FIXME: Add hashing support for the remaining types.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTTypeTraits.h:14,hash,hashing,14,interpreter/llvm-project/clang/include/clang/AST/ASTTypeTraits.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTTypeTraits.h,1,['hash'],['hashing']
Security,"// FIXME: Any access specifiers is supposed to make this no longer interface; // like.; // If this isn't a 'special' type, it must have a single interface-like base.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/DeclCXX.cpp:14,access,access,14,interpreter/llvm-project/clang/lib/AST/DeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/DeclCXX.cpp,1,['access'],['access']
Security,// FIXME: Audit interactions between these two options and make them; // compatible.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-dwarfdump/llvm-dwarfdump.cpp:10,Audit,Audit,10,interpreter/llvm-project/llvm/tools/llvm-dwarfdump/llvm-dwarfdump.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-dwarfdump/llvm-dwarfdump.cpp,1,['Audit'],['Audit']
Security,"// FIXME: Both positive and negative access functions will be placed; // into the same reference group, resulting in a bi-directional array; // access such as:; // for (i = N; i > 0; i--); // A[i] = A[N - i];; // having the same cost calculation as a single dimention access pattern; // for (i = 0; i < N; i++); // A[i] = A[i];; // when in actuality, depending on the array size, the first example; // should have a cost closer to 2x the second due to the two cache; // access per iteration from opposite ends of the array",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopCacheAnalysis.cpp:37,access,access,37,interpreter/llvm-project/llvm/lib/Analysis/LoopCacheAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopCacheAnalysis.cpp,4,['access'],['access']
Security,// FIXME: CallEvent maybe shouldn't be directly accessing StoreManager.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/CallEvent.cpp:48,access,accessing,48,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/CallEvent.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/CallEvent.cpp,1,['access'],['accessing']
Security,// FIXME: Check against AS_none is an ugly hack to work around the issue that; // the tag decls introduced by friend class declarations don't have an access; // specifier. Remove once this area of the code gets sorted out.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp:150,access,access,150,interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp,1,['access'],['access']
Security,// FIXME: Check if unaligned 32-byte accesses are slow.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLoweringCall.cpp:37,access,accesses,37,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLoweringCall.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLoweringCall.cpp,1,['access'],['accesses']
Security,// FIXME: Check if unaligned 64-byte accesses are slow.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLoweringCall.cpp:37,access,accesses,37,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLoweringCall.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLoweringCall.cpp,1,['access'],['accesses']
Security,// FIXME: Check that the base class member is accessible?,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp:46,access,accessible,46,interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,1,['access'],['accessible']
Security,"// FIXME: Check that the found streamer info checksum matches our branch class checksum here.; // Check to see if the class code was unloaded/reloaded; // since we were created.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TBranchElement.cxx:45,checksum,checksum,45,tree/tree/src/TBranchElement.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TBranchElement.cxx,2,['checksum'],['checksum']
Security,// FIXME: Command line flag should expose separate input/output modes.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CommandFlags.cpp:35,expose,expose,35,interpreter/llvm-project/llvm/lib/CodeGen/CommandFlags.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CommandFlags.cpp,2,['expose'],['expose']
Security,// FIXME: Compare unsaved file hashes and report mismatch in the reproducer.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/driver/cc1gen_reproducer_main.cpp:31,hash,hashes,31,interpreter/llvm-project/clang/tools/driver/cc1gen_reproducer_main.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/driver/cc1gen_reproducer_main.cpp,1,['hash'],['hashes']
Security,"// FIXME: Current only handle those Comdat groups that only containing one; // function.; // (1) For a Comdat group containing multiple functions, we need to have a; // unique postfix based on the hashes for each function. There is a; // non-trivial code refactoring to do this efficiently.; // (2) Variables can not be renamed, so we can not rename Comdat function in a; // group including global vars.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/PGOInstrumentation.cpp:197,hash,hashes,197,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/PGOInstrumentation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/PGOInstrumentation.cpp,1,['hash'],['hashes']
Security,"// FIXME: Currently -fsanitize=leak is silently ignored in the presence of; // -fsanitize=address. Perhaps it should print an error, or perhaps; // -f(-no)sanitize=leak should change whether leak detection is enabled by; // default in ASan?; // Parse -f(no-)?sanitize-recover flags.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp:155,sanitiz,sanitize,155,interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,2,['sanitiz'],"['sanitize', 'sanitize-recover']"
Security,"// FIXME: Currently the calls which may access the thread id may; // be considered as not accessing the memory. But this is; // problematic for coroutines, since coroutines may resume in a; // different thread. So we disable the optimization here for the; // correctness. However, it may block many other correct; // optimizations. Revert this one when we detect the memory; // accessing kind more precisely.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/EarlyCSE.cpp:40,access,access,40,interpreter/llvm-project/llvm/lib/Transforms/Scalar/EarlyCSE.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/EarlyCSE.cpp,12,['access'],"['access', 'accessing']"
Security,"// FIXME: Currently we add the same parent multiple times, but only; // when no memoization data is available for the type.; // For example when we visit all subexpressions of template; // instantiations; this is suboptimal, but benign: the only way to; // visit those is with hasAncestor / hasParent, and those do not create; // new matches.; // The plan is to enable DynTypedNode to be storable in a map or hash; // map. The main problem there is to implement hash functions /; // comparison operators for all types that DynTypedNode supports that; // do not have pointer identity.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ParentMapContext.cpp:409,hash,hash,409,interpreter/llvm-project/clang/lib/AST/ParentMapContext.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ParentMapContext.cpp,2,['hash'],['hash']
Security,// FIXME: Currently we allocate EC each time because we don't have; // access to the set representation on which to call clear(). Should; // consider adding a clear() method to the EquivalenceClasses class.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCVSXSwapRemoval.cpp:71,access,access,71,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCVSXSwapRemoval.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCVSXSwapRemoval.cpp,1,['access'],['access']
Security,"// FIXME: Currently, the set of symbolic strides is sometimes queried before; // it's collected. This happens from canVectorizeWithIfConvert, when the; // pointer is checked to reference consecutive elements suitable for a; // masked access.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorizationLegality.cpp:234,access,access,234,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorizationLegality.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorizationLegality.cpp,1,['access'],['access']
Security,"// FIXME: Despite the accessor name, the offset is really in bytes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/CodeViewDebug.cpp:22,access,accessor,22,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/CodeViewDebug.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/CodeViewDebug.cpp,1,['access'],['accessor']
Security,// FIXME: Diagnose this as field access into a scalar type.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaStmtAsm.cpp:33,access,access,33,interpreter/llvm-project/clang/lib/Sema/SemaStmtAsm.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaStmtAsm.cpp,1,['access'],['access']
Security,"// FIXME: Do not diagnose inaccessible deduction guides. The standard isn't; // clear on this, but they're not found by name so access does not apply.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp:128,access,access,128,interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp,1,['access'],['access']
Security,"// FIXME: Do something a bit more intelligent inside constructor and; // destructor code. Constructors and destructors must assume unique access; // to 'this', so checks on member variable access is disabled, but we should; // still enable checks on other objects.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ThreadSafety.cpp:138,access,access,138,interpreter/llvm-project/clang/lib/Analysis/ThreadSafety.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ThreadSafety.cpp,2,['access'],['access']
Security,// FIXME: Does injected class name need to be in the redeclarations chain?,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:15,inject,injected,15,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,1,['inject'],['injected']
Security,// FIXME: Expose these values.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXCursor.cpp:10,Expose,Expose,10,interpreter/llvm-project/clang/tools/libclang/CXCursor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXCursor.cpp,1,['Expose'],['Expose']
Security,"// FIXME: Figure out better way to handle:; // C++ [basic.lookup.classref]p1:; // In a class member access expression (5.2.5), if the . or -> token is; // immediately followed by an identifier followed by a <, the; // identifier must be looked up to determine whether the < is the; // beginning of a template argument list (14.2) or a less-than operator.; // The identifier is first looked up in the class of the object; // expression. If the identifier is not found, it is then looked up in; // the context of the entire postfix-expression and shall name a class; // or function template.; //; // We want to ignore object(.|->)member<template>",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/InterpreterCallbacks.cpp:100,access,access,100,interpreter/cling/lib/Interpreter/InterpreterCallbacks.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/InterpreterCallbacks.cpp,1,['access'],['access']
Security,"// FIXME: Figure out better way to handle:; // C++ [basic.lookup.classref]p1:; // In a class member access expression (5.2.5), if the . or -> token is; // immediately followed by an identifier followed by a <, the; // identifier must be looked up to determine whether the < is the; // beginning of a template argument list (14.2) or a less-than operator.; // The identifier is first looked up in the class of the object; // expression. If the identifier is not found, it is then looked up in; // the context of the entire postfix-expression and shall name a class; // or function template.; //; // We want to ignore object(.|->)member<template>; //if (R.getSema().PP.LookAhead(0).getKind() == tok::less); // TODO: check for . or -> in the cached token stream; // return false;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TClingCallbacks.cxx:100,access,access,100,core/metacling/src/TClingCallbacks.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TClingCallbacks.cxx,1,['access'],['access']
Security,"// FIXME: For now we conservatively ignore out of bound accesses, but; // we're allowed to perform the optimization in this case.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopUnrollAnalyzer.cpp:56,access,accesses,56,interpreter/llvm-project/llvm/lib/Analysis/LoopUnrollAnalyzer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopUnrollAnalyzer.cpp,2,['access'],['accesses']
Security,"// FIXME: Forward declarations of Objective-C classes and protocols; // are not directly exposed, but we want code completion to treat them; // like a definition.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/CodeCompleteConsumer.cpp:89,expose,exposed,89,interpreter/llvm-project/clang/lib/Sema/CodeCompleteConsumer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/CodeCompleteConsumer.cpp,1,['expose'],['exposed']
Security,"// FIXME: Hash more of Options. For now all clients initialize Options from; // command-line flags (which is unsupported in production), but may set; // RelaxELFRelocations. The clang driver can also pass FunctionSections,; // DataSections and DebuggerTuning via command line flags.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/LTO/LTO.cpp:10,Hash,Hash,10,interpreter/llvm-project/llvm/lib/LTO/LTO.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/LTO/LTO.cpp,1,['Hash'],['Hash']
Security,"// FIXME: Historically, we defined this legacy name, it would be nice to; // remove it at some point. We've never exposed fine-grained names for; // recent primary x86 CPUs, and we should keep it that way.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/X86.cpp:114,expose,exposed,114,interpreter/llvm-project/clang/lib/Basic/Targets/X86.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/X86.cpp,1,['expose'],['exposed']
Security,"// FIXME: Ideally the isEscaped check should come at the beginning.; // However there are a few loose ends that need to be fixed first before; // we can do that. We need to make sure we are not over-conservative, so; // that the data accessed in-between await_suspend and symmetric transfer; // is always put on the stack, and also data accessed after coro.end is; // always put on the stack (esp the return object). To fix that, we need; // to:; // 1) Potentially treat sret as nocapture in calls; // 2) Special handle the return object and put it on the stack; // 3) Utilize lifetime.end intrinsic",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Coroutines/CoroFrame.cpp:234,access,accessed,234,interpreter/llvm-project/llvm/lib/Transforms/Coroutines/CoroFrame.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Coroutines/CoroFrame.cpp,2,['access'],['accessed']
Security,"// FIXME: If a VR128 can have size 32, we should be checking if a 32-byte; // memory access is slow above.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.cpp:85,access,access,85,interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.cpp,2,['access'],['access']
Security,"// FIXME: If the cling::Value is destroyed and it handed out an address that; // might be accessing invalid memory.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/include/cling/Interpreter/Value.h:90,access,accessing,90,interpreter/cling/include/cling/Interpreter/Value.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/include/cling/Interpreter/Value.h,1,['access'],['accessing']
Security,"// FIXME: If this becomes too expensive, iterate until the first instruction; // with a memory access, then iterate over MemoryAccesses.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/MemorySSAUpdater.cpp:95,access,access,95,interpreter/llvm-project/llvm/lib/Analysis/MemorySSAUpdater.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/MemorySSAUpdater.cpp,1,['access'],['access']
Security,"// FIXME: Implement diagnostic identifier arguments; // (checker names, ""hashtags"").",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/BugSuppression.cpp:73,hash,hashtags,73,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/BugSuppression.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/BugSuppression.cpp,2,['hash'],['hashtags']
Security,// FIXME: Implement size/content validation when LinkGraph is able to; // handle this.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/JITLink/COFFLinkGraphBuilder.cpp:33,validat,validation,33,interpreter/llvm-project/llvm/lib/ExecutionEngine/JITLink/COFFLinkGraphBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/JITLink/COFFLinkGraphBuilder.cpp,1,['validat'],['validation']
Security,// FIXME: Injecting into the DAGISel pipeline seems to cause issues with; // analyses needing to be re-run. This can result in being unable to; // schedule passes (particularly with 'Function Alias Analysis; // Results'). It's not entirely clear why but AFAICT this seems to be; // due to one FunctionPassManager not being able to use analyses from a; // previous one. As we're injecting a ModulePass we break the usual; // pass manager into two. GlobalISel with the fallback path disabled; // and -run-pass seem to be unaffected. The majority of GlobalISel; // testing uses -run-pass so this probably isn't too bad.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TargetPassConfig.cpp:10,Inject,Injecting,10,interpreter/llvm-project/llvm/lib/CodeGen/TargetPassConfig.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TargetPassConfig.cpp,2,"['Inject', 'inject']","['Injecting', 'injecting']"
Security,"// FIXME: It might be nice if there's a way to walk location expressions; // without trying to resolve the address ranges - it'd be a more efficient; // API (since the API is currently unnecessarily resolving addresses for; // this use case which only wants to validate the expressions themselves) &; // then the expressions could be validated even if the addresses can't be; // resolved.; // That sort of API would probably look like a callback ""for each; // expression"" with some way to lazily resolve the address ranges when; // needed (& then the existing API used here could be built on top of that -; // using the callback API to build the data structure and return it).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/DWARF/DWARFVerifier.cpp:261,validat,validate,261,interpreter/llvm-project/llvm/lib/DebugInfo/DWARF/DWARFVerifier.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/DWARF/DWARFVerifier.cpp,2,['validat'],"['validate', 'validated']"
Security,"// FIXME: It would be nice to be able to determine whether referencing; // a particular member would be ambiguous. For example, given; //; // struct A { int member; };; // struct B { int member; };; // struct C : A, B { };; //; // void f(C *c) { c->### }; //; // accessing 'member' would result in an ambiguity. However, we; // could be smart enough to qualify the member with the base; // class, e.g.,; //; // c->B::member; //; // or; //; // c->A::member; // Find results in this base class (and its bases).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaLookup.cpp:263,access,accessing,263,interpreter/llvm-project/clang/lib/Sema/SemaLookup.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaLookup.cpp,1,['access'],['accessing']
Security,// FIXME: No need to make the entire Sema class a friend when it's just; // Sema::MakeFullExpr that needs access to the constructor below.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:106,access,access,106,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['access'],['access']
Security,// FIXME: Part of this logic is duplicated in the MCELFStreamer. What is; // the best way for us to get access to it?,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/ELFAsmParser.cpp:104,access,access,104,interpreter/llvm-project/llvm/lib/MC/MCParser/ELFAsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/ELFAsmParser.cpp,1,['access'],['access']
Security,"// FIXME: Really we would like to issue multiple 128-bit loads and stores per; // iteration. Should we report a larger size and let it legalize?; //; // FIXME: Should we use narrower types for local/region, or account for when; // unaligned access is legal?; //; // FIXME: This could use fine tuning and microbenchmarks.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUTargetTransformInfo.cpp:241,access,access,241,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUTargetTransformInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUTargetTransformInfo.cpp,1,['access'],['access']
Security,"// FIXME: Refactor this code to an accessor on the AST node which returns the; // ""type"" of component access, and share with code below and in Sema.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Expr.cpp:35,access,accessor,35,interpreter/llvm-project/clang/lib/AST/Expr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Expr.cpp,2,['access'],"['access', 'accessor']"
Security,// FIXME: Should account for address space here.; // The default fallback uses the private pointer size as a guess for a type to; // use. Make sure we switch these to 64-bit accesses.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp:174,access,accesses,174,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp,1,['access'],['accesses']
Security,// FIXME: Should check for private access too but access is set after we get; // the decl here.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:35,access,access,35,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,2,['access'],['access']
Security,"// FIXME: Should the Dyld be retaining module information? Probably not.; //; // This is the accessor for the target address, so make sure to check the; // load address of the symbol, not the local address.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/MCJIT/MCJIT.cpp:93,access,accessor,93,interpreter/llvm-project/llvm/lib/ExecutionEngine/MCJIT/MCJIT.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/MCJIT/MCJIT.cpp,1,['access'],['accessor']
Security,// FIXME: The Declaration form should expose a const ValueDecl*.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/TemplateBase.cpp:38,expose,expose,38,interpreter/llvm-project/clang/lib/AST/TemplateBase.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/TemplateBase.cpp,1,['expose'],['expose']
Security,// FIXME: The LEB128 routines are copied and only slightly modified out of; // LEB128.h.; /// Adds the unsigned in \p Value to the hash encoded as a ULEB128.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DIEHash.cpp:131,hash,hash,131,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DIEHash.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DIEHash.cpp,1,['hash'],['hash']
Security,"// FIXME: The offsets of empty bases can be tricky because of; // of the so called ""empty base class optimization"".; // If a base class has been optimized out; // we should not try to create a binding, otherwise we should.; // Unfortunately, at the moment ASTRecordLayout doesn't expose; // the actual sizes of the empty bases; // and trying to infer them from offsets/alignments; // seems to be error-prone and non-trivial because of the trailing padding.; // As a temporary mitigation we don't create bindings for empty bases.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/RegionStore.cpp:280,expose,expose,280,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/RegionStore.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/RegionStore.cpp,1,['expose'],['expose']
Security,"// FIXME: There's a hack in our Store implementation that always computes; // field offsets around null pointers as if they are always equal to 0.; // The idea here is to report accesses to fields as null dereferences; // even though the pointer value that's being dereferenced is actually; // the offset of the field rather than exactly 0.; // See the FIXME in StoreManager's getLValueFieldOrIvar() method.; // This code interacts heavily with this hack; otherwise the value; // would not be null at all for most fields, so we'd be unable to track it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/BugReporterVisitors.cpp:178,access,accesses,178,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/BugReporterVisitors.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/BugReporterVisitors.cpp,1,['access'],['accesses']
Security,// FIXME: This can access off the end of the operands() array.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIInstrInfo.cpp:19,access,access,19,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIInstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIInstrInfo.cpp,1,['access'],['access']
Security,// FIXME: This code relies on knowing what constitutes the issue hash.; // Otherwise deduplication won't work correctly.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/HTMLDiagnostics.cpp:65,hash,hash,65,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/HTMLDiagnostics.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/HTMLDiagnostics.cpp,1,['hash'],['hash']
Security,// FIXME: This entire function is a giant hack to provide us with decent; // operand range validation/diagnostics until TableGen/MC can be extended; // to support autogeneration of this kind of validation.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AsmParser/AArch64AsmParser.cpp:91,validat,validation,91,interpreter/llvm-project/llvm/lib/Target/AArch64/AsmParser/AArch64AsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AsmParser/AArch64AsmParser.cpp,2,['validat'],['validation']
Security,"// FIXME: This file goes against how a checker should be implemented either in; // a single file, or be exposed in a header file. Let's try to get rid of it!",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/InterCheckerAPI.h:104,expose,exposed,104,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/InterCheckerAPI.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/InterCheckerAPI.h,1,['expose'],['exposed']
Security,"// FIXME: This is broken. CXXRecordDecl::getMostRecentDecl() returns a; // different ""most recent"" declaration from this function for the same; // declaration, because we don't override getMostRecentDeclImpl(). But; // it's not clear that we should override that, because the most recent; // declaration as a CXXRecordDecl sometimes is the injected-class-name.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:340,inject,injected-class-name,340,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,1,['inject'],['injected-class-name']
Security,"// FIXME: This is mutable so that it can still be updated after insertion; // into an unordered associative container. This is ""fine"", since this; // field doesn't contribute to the hash, but it's a brittle hack.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-scan-deps/ClangScanDeps.cpp:182,hash,hash,182,interpreter/llvm-project/clang/tools/clang-scan-deps/ClangScanDeps.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-scan-deps/ClangScanDeps.cpp,1,['hash'],['hash']
Security,"// FIXME: This is overly conservative; the new instruction accesses 4; // bytes, not 8.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMLoadStoreOptimizer.cpp:59,access,accesses,59,interpreter/llvm-project/llvm/lib/Target/ARM/ARMLoadStoreOptimizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMLoadStoreOptimizer.cpp,2,['access'],['accesses']
Security,"// FIXME: This is totally the wrong concept. We should not expose an interface; // to be able to tell which component is in the pch and which needs extra; // scaffolding for interactive use. Moreover, some of the ROOT components are; // partially in the pch and this option makes it impossible to express that.; // We should be able to get the list of headers in the pch early and scan; // through them.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx:59,expose,expose,59,core/dictgen/src/rootcling_impl.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx,1,['expose'],['expose']
Security,"// FIXME: This iterator could conceptually be a random access iterator, and; // it would be nice if we could strengthen the iterator category someday.; // However this iterator does not satisfy two requirements of forward; // iterators:; // a) reference = T& or reference = const T&; // b) If It1 and It2 are both dereferenceable, then It1 == It2 if and only; // if *It1 and *It2 are bound to the same objects.; // An alternative design approach was discussed during review;; // store an Association object inside the iterator, and return a reference; // to it when dereferenced. This idea was discarded beacuse of nasty; // lifetime issues:; // AssociationIterator It = ...;; // const Association &Assoc = *It++; // Oops, Assoc is dangling.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:55,access,access,55,interpreter/llvm-project/clang/include/clang/AST/Expr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h,1,['access'],['access']
Security,// FIXME: This language rule no longer exists. Checking for ambiguous base; // subobjects should be done as part of formation of a class member access; // expression (when converting the object parameter to the member's type).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaLookup.cpp:144,access,access,144,interpreter/llvm-project/clang/lib/Sema/SemaLookup.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaLookup.cpp,1,['access'],['access']
Security,"// FIXME: This logic is meant to generate exactly the same output as; // Darwin's classic dsymutil. There is a nicer way to implement this; // by simply putting all the relocated line info in NewRows and simply; // sorting NewRows before passing it to emitLineTableForUnit. This; // should be correct as sequences for a function should stay; // together in the sorted output. There are a few corner cases that; // look suspicious though, and that required to implement the logic; // this way. Revisit that once initial validation is finished.; // Iterate over the object file line info and extract the sequences; // that correspond to linked functions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DWARFLinker/Classic/DWARFLinker.cpp:519,validat,validation,519,interpreter/llvm-project/llvm/lib/DWARFLinker/Classic/DWARFLinker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DWARFLinker/Classic/DWARFLinker.cpp,2,['validat'],['validation']
Security,"// FIXME: This message sounds scary, should be scary, but incorrectly states; // that all configs are super dangerous. In reality, many of them should be; // accessible to the user. We should create a user-facing subset of config; // options under a different frontend flag.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Frontend/AnalyzerHelpFlags.cpp:158,access,accessible,158,interpreter/llvm-project/clang/lib/StaticAnalyzer/Frontend/AnalyzerHelpFlags.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Frontend/AnalyzerHelpFlags.cpp,1,['access'],['accessible']
Security,// FIXME: This needs testing w/ member access expressions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiate.cpp:39,access,access,39,interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiate.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiate.cpp,1,['access'],['access']
Security,// FIXME: This typedef is here to enable SPS arg serialization from; // JITLink. It can be removed once JITLink can access SPS directly.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/SimplePackedSerialization.h:116,access,access,116,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/SimplePackedSerialization.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/SimplePackedSerialization.h,1,['access'],['access']
Security,"// FIXME: To support emitting this build attribute as GCC does, the; // -mfp16-format option and associated plumbing must be; // supported. For now the __fp16 type is exposed by default, so this; // attribute should be emitted with value 1.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMAsmPrinter.cpp:167,expose,exposed,167,interpreter/llvm-project/llvm/lib/Target/ARM/ARMAsmPrinter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMAsmPrinter.cpp,1,['expose'],['exposed']
Security,// FIXME: Unaligned accesses not lowered.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULegalizerInfo.cpp:20,access,accesses,20,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULegalizerInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULegalizerInfo.cpp,1,['access'],['accesses']
Security,"// FIXME: Unnamed fields can be handled in various different ways, for; // example, unnamed unions inject all members into the struct namespace!",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:99,inject,inject,99,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['inject'],['inject']
Security,// FIXME: Uses of 'MD' past this point need to be audited. We may need to use; // 'CalleeDecl' instead.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp:50,audit,audited,50,interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp,1,['audit'],['audited']
Security,// FIXME: Validates that repetition-mode is loop if LBR is requested.; // Returns a non-null reason if we cannot handle the memory references in this; // instruction.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/Target.cpp:10,Validat,Validates,10,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/Target.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/Target.cpp,1,['Validat'],['Validates']
Security,"// FIXME: We also need to take ElementRegions with symbolic indexes into; // account. This case handles both directly accessing an ElementRegion; // with a symbolic offset, but also fields within an element with; // a symbolic offset.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/RegionStore.cpp:118,access,accessing,118,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/RegionStore.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/RegionStore.cpp,1,['access'],['accessing']
Security,"// FIXME: We can meaningfully extend this to cover non-const objects, but; // we will need special handling: we should be able to access only; // subobjects of such objects that are themselves declared const.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp:130,access,access,130,interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,1,['access'],['access']
Security,// FIXME: We don't accept GNU attributes on access specifiers in OpenCL mode; // yet.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseDeclCXX.cpp:44,access,access,44,interpreter/llvm-project/clang/lib/Parse/ParseDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseDeclCXX.cpp,1,['access'],['access']
Security,"// FIXME: We don't have a location to use here. Using the class's; // location maintains the fiction that we declare all special members; // with the class, but (1) it's not clear that lying about that helps our; // users understand what's going on, and (2) there may be outer contexts; // on the stack (some of which are relevant) and printing them exposes; // our lies.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp:350,expose,exposes,350,interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,1,['expose'],['exposes']
Security,"// FIXME: We don't want this to happen. Rather, we should be able to; // detect all kinds of implicit accesses more cleanly.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Expr.cpp:102,access,accesses,102,interpreter/llvm-project/clang/lib/AST/Expr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Expr.cpp,1,['access'],['accesses']
Security,"// FIXME: We have to be conservative here and assume that flat operations; // will access scratch. If we had access to the IR function, then we; // could determine if any private memory was used in the function.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp:83,access,access,83,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp,2,['access'],['access']
Security,"// FIXME: We really need to improve the relocation validation. Basically, we; // want to implement a separate computation which evaluates the relocation; // entry as the linker would, and verifies that the resultant fixup value is; // exactly what the encoder wanted. This will catch several classes of; // problems:; //; // - Relocation entry bugs, the two algorithms are unlikely to have the same; // exact bug.; //; // - Relaxation issues, where we forget to relax something.; //; // - Input errors, where something cannot be correctly encoded. 'as' allows; // these through in many cases.; // Add a relocation to be output in the object file. At the time this is; // called, the symbol indexes are not know, so if the relocation refers; // to a symbol it should be passed as \p RelSymbol so that it can be updated; // afterwards. If the relocation doesn't refer to a symbol, nullptr should be; // used.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCMachObjectWriter.h:51,validat,validation,51,interpreter/llvm-project/llvm/include/llvm/MC/MCMachObjectWriter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCMachObjectWriter.h,1,['validat'],['validation']
Security,// FIXME: We should expose the canThrow(...) result instead of the EST.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXType.cpp:20,expose,expose,20,interpreter/llvm-project/clang/tools/libclang/CXType.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXType.cpp,1,['expose'],['expose']
Security,"// FIXME: We should trivially coalesce subregister copies to expose CSE; // opportunities on instructions with truncated operands (see; // cse-add-with-overflow.ll). This can be done here as follows:; // if (SrcSubReg); // RC = TRI->getMatchingSuperRegClass(MRI->getRegClass(SrcReg), RC,; // SrcSubReg);; // MO.substVirtReg(SrcReg, SrcSubReg, *TRI);; //; // The 2-addr pass has been updated to handle coalesced subregs. However,; // some machine-specific code still can't handle it.; // To handle it properly we also need a way find a constrained subregister; // class given a super-reg class and subreg index.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineCSE.cpp:61,expose,expose,61,interpreter/llvm-project/llvm/lib/CodeGen/MachineCSE.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineCSE.cpp,1,['expose'],['expose']
Security,"// FIXME: We use the 'unsafe' accessor for the access specifier here,; // because Sema may not have set it yet. That's really just a misdesign; // in Sema. However, LLDB *will* have set the access specifier correctly,; // and adds declarations after the class is technically completed,; // so completeDefinition()'s overriding of the access specifiers doesn't; // work.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/DeclCXX.cpp:30,access,accessor,30,interpreter/llvm-project/clang/lib/AST/DeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/DeclCXX.cpp,4,['access'],"['access', 'accessor']"
Security,"// FIXME: Why are we trying to remove files that we have not created? For; // example we should only try to remove a temporary assembly file if; // ""clang -cc1"" succeed in writing it. Was this a workaround for when; // clang was writing directly to a .s file and sometimes leaving it behind; // during a failure?; // FIXME: If this is necessary, we can still try to split; // llvm::sys::fs::remove into a removeFile and a removeDir and avoid the; // duplicated stat from is_regular_file.; // Don't try to remove files which we don't have write access to (but may be; // able to remove), or non-regular files. Underlying tools may have; // intentionally not overwritten them.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Compilation.cpp:544,access,access,544,interpreter/llvm-project/clang/lib/Driver/Compilation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Compilation.cpp,1,['access'],['access']
Security,// FIXME: Why do we choose the srcExpr if the access has no size?; // Note that the 3rd argument of the call would be the size parameter.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CStringChecker.cpp:46,access,access,46,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CStringChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CStringChecker.cpp,1,['access'],['access']
Security,"// FIXME: Without optimizations, the temporary result from `await_suspend()`; // may be put on the coroutine frame since the coroutine frame constructor; // will think the temporary variable will escape from the; // `coroutine_handle<>::address()` call. This is problematic since the; // coroutine should be considered to be suspended after it enters; // `await_suspend` so it shouldn't access/update the coroutine frame after; // that.; //; // See https://github.com/llvm/llvm-project/issues/65054 for the report.; //; // The long term solution may wrap the whole logic about `await-suspend`; // into a standalone function. This is similar to the proposed solution; // in tryMarkAwaitSuspendNoInline. See the comments there for details.; //; // The short term solution here is to mark `coroutine_handle<>::address()`; // function as always-inline so that the coroutine frame constructor won't; // think the temporary result is escaped incorrectly.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCoroutine.cpp:387,access,access,387,interpreter/llvm-project/clang/lib/Sema/SemaCoroutine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCoroutine.cpp,1,['access'],['access']
Security,// FIXME: a ClassTemplateSpecialization or CXXRecordDecl can have; // AS_none as access specifier.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/DeclBase.cpp:81,access,access,81,interpreter/llvm-project/clang/lib/AST/DeclBase.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/DeclBase.cpp,1,['access'],['access']
Security,"// FIXME: add these additional fields when needed.; // Privilege Access: Read, Write, Read-Only.; // unsigned ReadWrite;; // Privilege Mode: User, System or Machine.; // unsigned Mode;; // Check field name.; // unsigned Extra;; // Register number without the privilege bits.; // unsigned Number;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/MCTargetDesc/RISCVBaseInfo.h:65,Access,Access,65,interpreter/llvm-project/llvm/lib/Target/RISCV/MCTargetDesc/RISCVBaseInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/MCTargetDesc/RISCVBaseInfo.h,1,['Access'],['Access']
Security,// FIXME: add validation for enable_16bit_types should be after HLSL 2018 and; // shader model 6.2.; // See: https://github.com/llvm/llvm-project/issues/57876,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/HLSL.cpp:14,validat,validation,14,interpreter/llvm-project/clang/lib/Driver/ToolChains/HLSL.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/HLSL.cpp,1,['validat'],['validation']
Security,"// FIXME: all the access-control diagnostics are positioned on the; // field/base declaration. That's probably good; that said, the; // user might reasonably want to know why the destructor is being; // emitted, and we currently don't say.; // Non-static data members.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp:18,access,access-control,18,interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,1,['access'],['access-control']
Security,"// FIXME: also track:; // - kind of entity (function/variable/type), to expose structured results; // - template args kinds/types, as a proxy for template params; // For now we simply return these results as ""pattern"" strings.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCodeComplete.cpp:72,expose,expose,72,interpreter/llvm-project/clang/lib/Sema/SemaCodeComplete.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCodeComplete.cpp,1,['expose'],['expose']
Security,"// FIXME: convert these to parameters of the analysis or environment. Current; // settings have been experimentaly validated, but only for a particular; // analysis.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/DataflowEnvironment.cpp:115,validat,validated,115,interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/DataflowEnvironment.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/DataflowEnvironment.cpp,1,['validat'],['validated']
Security,// FIXME: don't use t2LDRs to access frame.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMBaseInstrInfo.cpp:30,access,access,30,interpreter/llvm-project/llvm/lib/Target/ARM/ARMBaseInstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMBaseInstrInfo.cpp,1,['access'],['access']
Security,// FIXME: don't use t2STRs to access frame.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMBaseInstrInfo.cpp:30,access,access,30,interpreter/llvm-project/llvm/lib/Target/ARM/ARMBaseInstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMBaseInstrInfo.cpp,1,['access'],['access']
Security,"// FIXME: gCling should be const so assignemnt is a compile time error.; // Currently the name mangling is coming up wrong for the const version; // (on OS X at least, so probably Linux too) and the JIT thinks the symbol; // is undefined in a child Interpreter. And speaking of children, should; // gCling actually be thisCling, so a child Interpreter can only access; // itself? One could use a macro (simillar to __dso_handle) to block; // assignemnt and get around the mangling issue.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/Interpreter.cpp:361,access,access,361,interpreter/cling/lib/Interpreter/Interpreter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/Interpreter.cpp,1,['access'],['access']
Security,// FIXME: init MCOptions from sanitizer flags here.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseStmtAsm.cpp:30,sanitiz,sanitizer,30,interpreter/llvm-project/clang/lib/Parse/ParseStmtAsm.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseStmtAsm.cpp,1,['sanitiz'],['sanitizer']
Security,// FIXME: init MCTargetOptions from sanitizer flags here.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/driver/cc1as_main.cpp:36,sanitiz,sanitizer,36,interpreter/llvm-project/clang/tools/driver/cc1as_main.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/driver/cc1as_main.cpp,1,['sanitiz'],['sanitizer']
Security,"// FIXME: re-introduce once we have ClassDefInline!; //ClassDefOverride(TTreeReaderValueBase, 0);//Base class for accessors to data via TTreeReader",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/inc/TTreeReaderValue.h:114,access,accessors,114,tree/treeplayer/inc/TTreeReaderValue.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/inc/TTreeReaderValue.h,1,['access'],['accessors']
Security,"// FIXME: re-introduce once we have ClassDefTInline!; // ClassDefT(TTreeReaderArray, 0);//Accessor to member of an object stored in a collection",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/inc/TTreeReaderArray.h:90,Access,Accessor,90,tree/treeplayer/inc/TTreeReaderArray.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/inc/TTreeReaderArray.h,1,['Access'],['Accessor']
Security,"// FIXME: re-introduce once we have ClassDefTInline!; //ClassDefT(TTreeReaderValue, 0);//Accessor to data via TTreeReader",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/inc/TTreeReaderValue.h:89,Access,Accessor,89,tree/treeplayer/inc/TTreeReaderValue.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/inc/TTreeReaderValue.h,1,['Access'],['Accessor']
Security,// FIXME: should use a custom expander to expose the SRA to the dag.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Sparc/SparcISelDAGToDAG.cpp:42,expose,expose,42,interpreter/llvm-project/llvm/lib/Target/Sparc/SparcISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Sparc/SparcISelDAGToDAG.cpp,1,['expose'],['expose']
Security,// FIXME: store AccessSpecifier given by inheritance,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/ExtractAPIVisitor.h:16,Access,AccessSpecifier,16,interpreter/llvm-project/clang/include/clang/ExtractAPI/ExtractAPIVisitor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/ExtractAPIVisitor.h,1,['Access'],['AccessSpecifier']
Security,"// FIXME: this exposes RField and RIntegralField into the global namespace",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/browsable/src/RFieldProvider.hxx:15,expose,exposes,15,gui/browsable/src/RFieldProvider.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/browsable/src/RFieldProvider.hxx,1,['expose'],['exposes']
Security,"// FIXME: this note won't trigger for delayed access control; // diagnostics, and it's impossible to get an undelayed error; // here from access control during the original parse because; // the ParsingDeclSpec/ParsingDeclarator are still in scope.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp:46,access,access,46,interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,2,['access'],['access']
Security,// FIXME: unify ClassTemplateSpecializationDecl and TemplateSpecializationType's; // APIs for accessing the template argument list.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h:94,access,accessing,94,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h,1,['access'],['accessing']
Security,// FIXME: validate the role.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/Syntax/Tree.cpp:10,validat,validate,10,interpreter/llvm-project/clang/lib/Tooling/Syntax/Tree.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/Syntax/Tree.cpp,1,['validat'],['validate']
Security,// FIXME: we don't handle the semantics of thread local well. So that the; // address of thread locals are fake constants in coroutines. So We forbid; // to treat onlyReadsMemory call in coroutines as constants now. Note that; // it is possible to hide a thread local access in a onlyReadsMemory call.; // Remove this check after we handle the semantics of thread locals well.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LICM.cpp:268,access,access,268,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LICM.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LICM.cpp,1,['access'],['access']
Security,// FLAT and SCRATCH instructions may access scratch. Other VMEM; // instructions do not.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIInsertWaitcnts.cpp:37,access,access,37,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIInsertWaitcnts.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIInsertWaitcnts.cpp,1,['access'],['access']
Security,// FLAT instruction accesses FLAT_GLBL segment.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIDefines.h:20,access,accesses,20,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIDefines.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIDefines.h,1,['access'],['accesses']
Security,// FLAT instruction accesses FLAT_SCRATCH segment.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIDefines.h:20,access,accesses,20,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIDefines.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIDefines.h,1,['access'],['accesses']
Security,// Fail when there is only a subscript: that's a linearized access function.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp:60,access,access,60,interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,1,['access'],['access']
Security,// Fake up an access specifier if it's supposed to be a class member.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:14,access,access,14,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['access'],['access']
Security,"// Fall back to the security check of looking for enough 'X's in the; // format string, since that is a less severe warning.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CheckSecuritySyntaxOnly.cpp:20,secur,security,20,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CheckSecuritySyntaxOnly.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CheckSecuritySyntaxOnly.cpp,1,['secur'],['security']
Security,// Fast path: the defining accesses are the same.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/DeadStoreElimination.cpp:27,access,accesses,27,interpreter/llvm-project/llvm/lib/Transforms/Scalar/DeadStoreElimination.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/DeadStoreElimination.cpp,1,['access'],['accesses']
Security,// Fetch the injected class name type and check whether its; // injected type is equal to the type we just built.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp:13,inject,injected,13,interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp,2,['inject'],['injected']
Security,// Field we are accessing,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h:16,access,accessing,16,interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h,1,['access'],['accessing']
Security,"// Figure out how many buckets we need, then compute the bucket contents and; // the final ordering. The hashes and offsets can be emitted by walking these; // data structures. We add temporary symbols to the data so they can be; // referenced when emitting the offsets.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/AccelTable.cpp:105,hash,hashes,105,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/AccelTable.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/AccelTable.cpp,1,['hash'],['hashes']
Security,// Figure out the offset for the store and the alignment of the access.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:64,access,access,64,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['access'],['access']
Security,// Figure out which registers should be reserved for stack access. Only after; // the function is legalized do we know all of the non-spill stack objects or if; // calls are present.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp:59,access,access,59,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp,1,['access'],['access']
Security,// FileChecksumKind; // Checksum bytes follow.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/CodeView/DebugChecksumsSubsection.cpp:24,Checksum,Checksum,24,interpreter/llvm-project/llvm/lib/DebugInfo/CodeView/DebugChecksumsSubsection.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/CodeView/DebugChecksumsSubsection.cpp,1,['Checksum'],['Checksum']
Security,"// Fill hash table with existing entries",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooLinkedList.cxx:8,hash,hash,8,roofit/roofitcore/src/RooLinkedList.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooLinkedList.cxx,1,['hash'],['hash']
Security,// Filter accesses to constant (GPU) memory if we have an AS at the access; // site or the object is known to actually have the associated AS.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp:10,access,accesses,10,interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp,2,['access'],"['access', 'accesses']"
Security,// Filter out synthesized property accessor redeclarations.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp:35,access,accessor,35,interpreter/llvm-project/clang/tools/libclang/CIndex.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp,1,['access'],['accessor']
Security,// Final estimate of whether sp or bp-relative accesses might require; // scavenging.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMFrameLowering.cpp:47,access,accesses,47,interpreter/llvm-project/llvm/lib/Target/ARM/ARMFrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMFrameLowering.cpp,1,['access'],['accesses']
Security,// Finalize the MD5 and return the hash.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp:35,hash,hash,35,interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp,1,['hash'],['hash']
Security,// Finally update start and size of dead access.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/DeadStoreElimination.cpp:41,access,access,41,interpreter/llvm-project/llvm/lib/Transforms/Scalar/DeadStoreElimination.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/DeadStoreElimination.cpp,1,['access'],['access']
Security,"// Finally, check whether the current memory access aliases with previous one.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ImplicitNullChecks.cpp:45,access,access,45,interpreter/llvm-project/llvm/lib/CodeGen/ImplicitNullChecks.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ImplicitNullChecks.cpp,1,['access'],['access']
Security,"// Finally, do an expensive DCE pass to catch all the dead code exposed by; // the simplifications and basic cleanup after all the simplifications.; // TODO: Investigate if this is too expensive.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:64,expose,exposed,64,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,2,['expose'],['exposed']
Security,"// Finally, initialize the set of available and recoverable sanitizers.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp:60,sanitiz,sanitizers,60,interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,1,['sanitiz'],['sanitizers']
Security,"// Finally, now that we know the full effect on this SCC, clone the; // information to each function in the SCC.; // FI is a reference into FunctionInfos, so copy it now so that it doesn't; // get invalidated if DenseMap decides to re-hash.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/GlobalsModRef.cpp:235,hash,hash,235,interpreter/llvm-project/llvm/lib/Analysis/GlobalsModRef.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/GlobalsModRef.cpp,1,['hash'],['hash']
Security,"// Finally, validate that this was a no-op as expected by reading it back; // out using the same underlying-storage read as above.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PointerSumType.h:12,validat,validate,12,interpreter/llvm-project/llvm/include/llvm/ADT/PointerSumType.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PointerSumType.h,1,['validat'],['validate']
Security,"// Finally, we have control-flow based knowledge of whether the cmpxchg; // succeeded or not. We expose this to later passes by converting any; // subsequent ""icmp eq/ne %loaded, %oldval"" into a use of an appropriate; // PHI.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AtomicExpandPass.cpp:97,expose,expose,97,interpreter/llvm-project/llvm/lib/CodeGen/AtomicExpandPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AtomicExpandPass.cpp,1,['expose'],['expose']
Security,// Find FE in hash map and insert if not present.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/GSYM/GsymCreator.cpp:14,hash,hash,14,interpreter/llvm-project/llvm/lib/DebugInfo/GSYM/GsymCreator.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/GSYM/GsymCreator.cpp,1,['hash'],['hash']
Security,"// Find MSSA insertion point. Normally P will always have a corresponding; // memory access before which we can insert. However, with non-standard AA; // pipelines, there may be a mismatch between AA and MSSA, in which case we; // will scan for a memory access before P. In either case, we know for sure; // that at least the load will have a memory access.; // TODO: Simplify this once P will be determined by MSSA, in which case the; // discrepancy can no longer occur.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/MemCpyOptimizer.cpp:85,access,access,85,interpreter/llvm-project/llvm/lib/Transforms/Scalar/MemCpyOptimizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/MemCpyOptimizer.cpp,3,['access'],['access']
Security,"// Find a MemoryDef writing to \p KillingLoc and dominating \p StartAccess,; // with no read access between them or on any other path to a function exit; // block if \p KillingLoc is not accessible after the function returns. If; // there is no such MemoryDef, return std::nullopt. The returned value may not; // (completely) overwrite \p KillingLoc. Currently we bail out when we; // encounter an aliasing MemoryUse (read).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/DeadStoreElimination.cpp:93,access,access,93,interpreter/llvm-project/llvm/lib/Transforms/Scalar/DeadStoreElimination.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/DeadStoreElimination.cpp,2,['access'],"['access', 'accessible']"
Security,"// Find out whether authentication is required",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TSocket.cxx:20,authenticat,authentication,20,net/net/src/TSocket.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TSocket.cxx,1,['authenticat'],['authentication']
Security,// Find stream with that name and read its data.; // FIXME: Consider validating (or even loading) all this in; // InjectedSourceStream so that no error can happen here.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/PDB/Native/NativeEnumInjectedSources.cpp:69,validat,validating,69,interpreter/llvm-project/llvm/lib/DebugInfo/PDB/Native/NativeEnumInjectedSources.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/PDB/Native/NativeEnumInjectedSources.cpp,2,"['Inject', 'validat']","['InjectedSourceStream', 'validating']"
Security,// Find the incoming block and use the canonical numbering as well to define; // the hash for the PHINode.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/IROutliner.cpp:85,hash,hash,85,interpreter/llvm-project/llvm/lib/Transforms/IPO/IROutliner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/IROutliner.cpp,1,['hash'],['hash']
Security,"// Find the injected-class-name declaration. Note that we make no attempt to; // diagnose cases where the injected-class-name is shadowed: the only; // declaration that can validly shadow the injected-class-name is a; // non-static data member, and if the class contains both a non-static data; // member and a constructor then it is ill-formed (we check that in; // CheckCompletedCXXClass).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp:12,inject,injected-class-name,12,interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp,3,['inject'],['injected-class-name']
Security,"// Find the next clobbering Mod access for DefLoc, starting at StartAccess.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/DeadStoreElimination.cpp:32,access,access,32,interpreter/llvm-project/llvm/lib/Transforms/Scalar/DeadStoreElimination.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/DeadStoreElimination.cpp,1,['access'],['access']
Security,// Find the relative path that would access this header.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/PPLexerChange.cpp:37,access,access,37,interpreter/llvm-project/clang/lib/Lex/PPLexerChange.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/PPLexerChange.cpp,1,['access'],['access']
Security,"// Find the scope in which the identifier is injected and the corresponding; // DeclContext.; // FIXME: C89 does not say what happens if there is no enclosing block scope.; // In that case, we inject the declaration into the translation unit scope; // instead.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:45,inject,injected,45,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,2,['inject'],"['inject', 'injected']"
Security,// Finish the compiler invocation. Requires dependencies and the context hash.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/DependencyScanning/ModuleDepCollector.cpp:73,hash,hash,73,interpreter/llvm-project/clang/lib/Tooling/DependencyScanning/ModuleDepCollector.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/DependencyScanning/ModuleDepCollector.cpp,1,['hash'],['hash']
Security,// First 8 bytes of MD5 hash,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/AMDGPUEmitPrintf.cpp:24,hash,hash,24,interpreter/llvm-project/llvm/lib/Transforms/Utils/AMDGPUEmitPrintf.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/AMDGPUEmitPrintf.cpp,1,['hash'],['hash']
Security,// First check if we assume any memory is access is visible.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp:42,access,access,42,interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp,1,['access'],['access']
Security,// First check that the bit field access is within bounds.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyLibCalls.cpp:34,access,access,34,interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyLibCalls.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyLibCalls.cpp,1,['access'],['access']
Security,"// First command MUST be M|m, it's safe to skip.; // Protect from access to [-1] for sure.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:66,access,access,66,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['access'],['access']
Security,// First get the number of unique hashes.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/AccelTable.cpp:34,hash,hashes,34,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/AccelTable.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/AccelTable.cpp,1,['hash'],['hashes']
Security,// First get the type of memory being accessed.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp:38,access,accessed,38,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp,1,['access'],['accessed']
Security,// First two bits to distinguish may and must accesses.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:46,access,accesses,46,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,1,['access'],['accesses']
Security,// First validate the slice offsets.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp:9,validat,validate,9,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,1,['validat'],['validate']
Security,"// First, count how many write and read accesses are in the alias set. Also; // collect MemAccessInfos for later.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp:40,access,accesses,40,interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp,1,['access'],['accesses']
Security,"// First, expose any CSR SGPR spills. This is mostly the same as what PEI; // does, but somewhat simpler.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SILowerSGPRSpills.cpp:10,expose,expose,10,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SILowerSGPRSpills.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SILowerSGPRSpills.cpp,1,['expose'],['expose']
Security,"// First, we need a perfect hash function and a few constexpr helper functions; // for converting a string literal into a numeric value which can be used to; // parametrize a template. We can not use string literals for that as that would; // require C++20.; //; // The hash function was generated with 'gperf' and then manually converted into; // its constexpr equivalent.; //; // NOTE: the perfect hashing scheme comes with inherent self-test. If the hash; // function has a collision for any of the texture operations, the compilation; // will fail due to an attempt to redefine a tag with the same value. If the; // header compiles, then the hash function is good enough for the job.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/__clang_cuda_texture_intrinsics.h:28,hash,hash,28,interpreter/llvm-project/clang/lib/Headers/__clang_cuda_texture_intrinsics.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/__clang_cuda_texture_intrinsics.h,5,['hash'],"['hash', 'hashing']"
Security,// Fixed and preallocated objects will be located before any padding; // so FP must be used to access them.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonFrameLowering.cpp:95,access,access,95,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonFrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonFrameLowering.cpp,1,['access'],['access']
Security,// Fixed register has been validated at pattern validation time.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CompressInstEmitter.cpp:27,validat,validated,27,interpreter/llvm-project/llvm/utils/TableGen/CompressInstEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CompressInstEmitter.cpp,2,['validat'],"['validated', 'validation']"
Security,// Flip it if we're accessing off of the FP.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FrameLowering.cpp:20,access,accessing,20,interpreter/llvm-project/llvm/lib/Target/X86/X86FrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FrameLowering.cpp,1,['access'],['accessing']
Security,// Flush first to prepare the PCM hash (signature).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp:34,hash,hash,34,interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp,1,['hash'],['hash']
Security,"// Fold the hash into 32-bit using `boost::hash_combine()` algorithm and magic number.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RPageStorageDaos.cxx:12,hash,hash,12,tree/ntuple/v7/src/RPageStorageDaos.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RPageStorageDaos.cxx,1,['hash'],['hash']
Security,"// For -fno-gpu-rdc, host-side shadows of external declarations of device-side; // global variables become internal definitions. These have to be internal in; // order to prevent name conflicts with global host variables with the same; // name in a different TUs.; //; // For -fgpu-rdc, the shadow variables should not be internalized because; // they may be accessed by different TU.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp:359,access,accessed,359,interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp,1,['access'],['accessed']
Security,"// For ARM mode, we have different pseudoinstructions for direct accesses; // and indirect accesses, and the ones for indirect accesses include the; // load from GOT. For Thumb mode, we use the same pseudoinstruction for both; // direct and indirect accesses, and we need to manually generate the load; // from GOT.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMInstructionSelector.cpp:65,access,accesses,65,interpreter/llvm-project/llvm/lib/Target/ARM/ARMInstructionSelector.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMInstructionSelector.cpp,4,['access'],['accesses']
Security,"// For ARM, we should only check the first bit, rather than the entire byte:; //; // ARM C++ ABI 3.2.3.1:; // To support the potential use of initialization guard variables; // as semaphores that are the target of ARM SWP and LDREX/STREX; // synchronizing instructions we define a static initialization; // guard variable to be a 4-byte aligned, 4-byte word with the; // following inline access protocol.; // #define INITIALIZED 1; // if ((obj_guard & INITIALIZED) != INITIALIZED) {; // if (__cxa_guard_acquire(&obj_guard)); // ...; // }; //; // and similarly for ARM64:; //; // ARM64 C++ ABI 3.2.2:; // This ABI instead only specifies the value bit 0 of the static guard; // variable; all other bits are platform defined. Bit 0 shall be 0 when the; // variable is not initialized and 1 when it is.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:388,access,access,388,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,1,['access'],['access']
Security,"// For ASan and HWASan, this instrumentation is implicitly applied to all; // global variables when built with -fsanitize=*. What we need is a way to; // persist the information that a certain global variable should *not* have; // sanitizers applied, which occurs if:; // 1. The global variable is in the sanitizer ignore list, or; // 2. The global variable is created by the sanitizers itself for internal; // usage, or; // 3. The global variable has __attribute__((no_sanitize(""...""))) or; // __attribute__((disable_sanitizer_instrumentation)).; //; // This is important, a some IR passes like GlobalMerge can delete global; // variables and replace them with new ones. If the old variables were; // marked to be unsanitized, then the new ones should also be.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h:231,sanitiz,sanitizers,231,interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h,3,['sanitiz'],"['sanitizer', 'sanitizers']"
Security,"// For ELF, cleanup any local-dynamic TLS accesses (i.e. combine as many; // references to _TLS_MODULE_BASE_ as possible.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64TargetMachine.cpp:42,access,accesses,42,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64TargetMachine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64TargetMachine.cpp,1,['access'],['accesses']
Security,"// For ELF, cleanup any local-dynamic TLS accesses.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86TargetMachine.cpp:42,access,accesses,42,interpreter/llvm-project/llvm/lib/Target/X86/X86TargetMachine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86TargetMachine.cpp,1,['access'],['accesses']
Security,"// For GD TLS access on AIX, we have two TOC entries for the symbol (one for; // the variable offset and the other for the region handle). They are; // differentiated by MO_TLSGD_FLAG and MO_TLSGDM_FLAG.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCAsmPrinter.cpp:14,access,access,14,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCAsmPrinter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCAsmPrinter.cpp,1,['access'],['access']
Security,"// For MSVC compatibility, check if Derived directly inherits from Base. Clang; // warns about this hierarchy under -Winaccessible-base, but MSVC allows the; // user to access such bases.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp:169,access,access,169,interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,1,['access'],['access']
Security,"// For MUBUF/MTBUF d16 is a part of opcode, so there is nothing to validate.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AsmParser/AMDGPUAsmParser.cpp:67,validat,validate,67,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AsmParser/AMDGPUAsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AsmParser/AMDGPUAsmParser.cpp,1,['validat'],['validate']
Security,"// For MemoryUses, getClobberingMemoryAccess may skip non-clobbering writes.; // Manually check read accesses between Start and End, if they are in the; // same block, for clobbers. Otherwise assume Loc is clobbered.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/MemCpyOptimizer.cpp:101,access,accesses,101,interpreter/llvm-project/llvm/lib/Transforms/Scalar/MemCpyOptimizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/MemCpyOptimizer.cpp,1,['access'],['accesses']
Security,"// For NEON intrinsics which are overloaded on vector element type, validate; // the immediate which specifies which variant to emit.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp:68,validat,validate,68,interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp,1,['validat'],['validate']
Security,"// For PHI and select operands outside the alloca, we can't nuke the entire; // phi or select -- the other side might still be relevant, so we special; // case them here and use a separate structure to track the operands; // themselves which should be replaced with poison.; // FIXME: This should instead be escaped in the event we're instrumenting; // for address sanitization.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp:365,sanitiz,sanitization,365,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,1,['sanitiz'],['sanitization']
Security,"// For RecordDecl the ODRHash is stored in the remaining 26; // bit of RecordDeclBits, adjust the hash to accomodate.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Decl.cpp:98,hash,hash,98,interpreter/llvm-project/clang/lib/AST/Decl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Decl.cpp,1,['hash'],['hash']
Security,"// For TLS initial-exec and local-exec accesses on AIX, we have one TOC; // entry for the symbol (with the variable offset), which is differentiated; // by MO_TPREL_FLAG.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCAsmPrinter.cpp:39,access,accesses,39,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCAsmPrinter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCAsmPrinter.cpp,1,['access'],['accesses']
Security,"// For Thumb1, don't bother to iterate over the function. The only; // instruction that requires an emergency spill slot is a store to a; // frame index.; //; // tSTRspi, which is used for sp-relative accesses, has an 8-bit unsigned; // immediate. tSTRi, which is used for bp- and fp-relative accesses, has; // a 5-bit unsigned immediate.; //; // We could try to check if the function actually contains a tSTRspi; // that might need the spill slot, but it's not really important.; // Functions with VLAs or extremely large call frames are rare, and; // if a function is allocating more than 1KB of stack, an extra 4-byte; // slot probably isn't relevant.; //; // A special case is the scenario where r11 is used as FP, where accesses; // to a frame index will require its value to be moved into a low reg.; // This is handled later on, once we are able to determine if we have any; // fp-relative accesses.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMFrameLowering.cpp:201,access,accesses,201,interpreter/llvm-project/llvm/lib/Target/ARM/ARMFrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMFrameLowering.cpp,4,['access'],['accesses']
Security,"// For Thumb1-only targets, we need some low registers when we save and; // restore the high registers (which aren't allocatable, but could be; // used by inline assembly) because the push/pop instructions can not; // access high registers. If necessary, we might need to push more low; // registers to ensure that there is at least one free that can be used; // for the saving & restoring, and preferably we should ensure that as; // many as are needed are available so that fewer push/pop instructions; // are required.; // Low registers which are not currently pushed, but could be (r4-r7).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMFrameLowering.cpp:218,access,access,218,interpreter/llvm-project/llvm/lib/Target/ARM/ARMFrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMFrameLowering.cpp,1,['access'],['access']
Security,"// For a block which requires predication, a address may be safe to access; // in the loop w/o predication if we can prove dereferenceability facts; // sufficient to ensure it'll never fault within the loop. For the moment,; // we restrict this to loads; stores are more complicated due to; // concurrency restrictions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorizationLegality.cpp:68,access,access,68,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorizationLegality.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorizationLegality.cpp,1,['access'],['access']
Security,"// For a function, this will validate a compound Swift name, e.g.; // <code>init(foo:bar:baz:)</code> or <code>controllerForName(_:)</code>, and; // the function will output the number of parameter names, and whether this is a; // single-arg initializer.; //; // For a type, enum constant, property, or variable declaration, this will; // validate either a simple identifier, or a qualified; // <code>context.identifier</code> name.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclAttr.cpp:29,validat,validate,29,interpreter/llvm-project/clang/lib/Sema/SemaDeclAttr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclAttr.cpp,2,['validat'],['validate']
Security,"// For a single memory access in AliasSetTracker, Accesses may contain; // both read and write, and they both need to be handled for CheckDeps.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp:23,access,access,23,interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp,2,"['Access', 'access']","['Accesses', 'access']"
Security,"// For access by the StreamerInfoActions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/inc/TStreamerInfo.h:7,access,access,7,io/io/inc/TStreamerInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/inc/TStreamerInfo.h,1,['access'],['access']
Security,"// For access to concrete addresses, return UnknownVal. Checks; // for null dereferences (and similar errors) are done by checkers, not; // the Store.; // FIXME: We can consider lazily symbolicating such memory, but we really; // should defer this when we can reason easily about symbolicating arrays; // of bytes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/RegionStore.cpp:7,access,access,7,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/RegionStore.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/RegionStore.cpp,1,['access'],['access']
Security,"// For accesses to locations visible after the function returns, make sure; // that the location is dead (=overwritten) along all paths from; // MaybeDeadAccess to the exit.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/DeadStoreElimination.cpp:7,access,accesses,7,interpreter/llvm-project/llvm/lib/Transforms/Scalar/DeadStoreElimination.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/DeadStoreElimination.cpp,1,['access'],['accesses']
Security,"// For accessing TThread::Tsd indirectly.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:7,access,accessing,7,core/base/src/TROOT.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx,1,['access'],['accessing']
Security,"// For accessor stubs, go back to the interface.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/DeclObjC.cpp:7,access,accessor,7,interpreter/llvm-project/clang/lib/AST/DeclObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/DeclObjC.cpp,1,['access'],['accessor']
Security,"// For an abstract class, non-base destructors are never used (and can't; // be emitted in general, because vbase dtors may not have been validated; // by Sema), but the Itanium ABI doesn't make them optional and Clang may; // in fact emit references to them from other compilations, so emit them; // as functions containing a trap instruction.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp:138,validat,validated,138,interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp,1,['validat'],['validated']
Security,"// For an implicit class member access, transform the result into a member; // access expression if necessary.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:32,access,access,32,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,2,['access'],['access']
Security,"// For an overridden file, there is nothing to validate.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTReader.cpp:47,validat,validate,47,interpreter/llvm-project/clang/lib/Serialization/ASTReader.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTReader.cpp,1,['validat'],['validate']
Security,// For an unscoped enum include the enumerators in the hash since they; // enter the top-level namespace.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/ASTUnit.cpp:55,hash,hash,55,interpreter/llvm-project/clang/lib/Frontend/ASTUnit.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/ASTUnit.cpp,1,['hash'],['hash']
Security,"// For any little-endian targets with neon, we can support unaligned ld/st; // of D and Q (e.g. {D0,D1}) registers by using vld1.i8/vst1.i8.; // A big-endian target may also explicitly support unaligned accesses",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp:203,access,accesses,203,interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,1,['access'],['accesses']
Security,"// For authentication",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/netxng/src/TNetXNGFile.cxx:7,authenticat,authentication,7,net/netxng/src/TNetXNGFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/netxng/src/TNetXNGFile.cxx,1,['authenticat'],['authentication']
Security,"// For backward-compatibility with CINT we must support stmts like:; // x = 4; y = new MyClass();; // I.e we should ""inject"" a C++11 auto keyword in front of ""x"" and ""y""; // This has to have higher precedence than the dynamic scopes. It is claimed; // that if one assigns to a name and the lookup of that name fails if *must*; // auto keyword must be injected and the stmt evaluation must not be delayed; // until runtime.; // For now supported only at the prompt.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TClingCallbacks.cxx:117,inject,inject,117,core/metacling/src/TClingCallbacks.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TClingCallbacks.cxx,2,['inject'],"['inject', 'injected']"
Security,"// For both the non-secure calls and the returns from a CMSE entry function,; // the function needs to do some extra work afte r the call, or before the; // return, respectively, thus it cannot end with atail call",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp:20,secur,secure,20,interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,1,['secur'],['secure']
Security,// For consecutive accesses with stride +1.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:19,access,accesses,19,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,1,['access'],['accesses']
Security,// For consecutive accesses with stride -1.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:19,access,accesses,19,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,1,['access'],['accesses']
Security,"// For constructors, the access check is performed against the underlying; // declaration, not the found declaration.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Overload.h:25,access,access,25,interpreter/llvm-project/clang/include/clang/Sema/Overload.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Overload.h,1,['access'],['access']
Security,"// For each NSObject descendant having a +load method, this method is invoked; // by the ObjC runtime before any of the static constructors is called.; // Therefore we need to instrument such methods with a call to __asan_init; // at the beginning in order to initialize our runtime before any access to; // the shadow memory.; // We cannot just ignore these methods, because they may call other; // instrumented functions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/AddressSanitizer.cpp:294,access,access,294,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/AddressSanitizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/AddressSanitizer.cpp,1,['access'],['access']
Security,"// For each NSObject descendant having a +load method, this method is invoked; // by the ObjC runtime before any of the static constructors is called.; // Therefore we need to instrument such methods with a call to __memprof_init; // at the beginning in order to initialize our runtime before any access to; // the shadow memory.; // We cannot just ignore these methods, because they may call other; // instrumented functions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/MemProfiler.cpp:297,access,access,297,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/MemProfiler.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/MemProfiler.cpp,1,['access'],['access']
Security,"// For each non-empty bucket, push the bucket start offset into HashBuckets; // and set a bit in the hash bitmap.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/PDB/Native/GSIStreamBuilder.cpp:64,Hash,HashBuckets,64,interpreter/llvm-project/llvm/lib/DebugInfo/PDB/Native/GSIStreamBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/PDB/Native/GSIStreamBuilder.cpp,2,"['Hash', 'hash']","['HashBuckets', 'hash']"
Security,"// For each type index referenced, add in the previously computed hash; // value of that type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/CodeView/TypeHashing.cpp:66,hash,hash,66,interpreter/llvm-project/llvm/lib/DebugInfo/CodeView/TypeHashing.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/CodeView/TypeHashing.cpp,1,['hash'],['hash']
Security,"// For each variable accessed through callees, which kernels access it",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp:21,access,accessed,21,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp,2,['access'],"['access', 'accessed']"
Security,"// For enum-based relocations access string is a single number,; // corresponding to the enum literal sequential number.; // E.g. for `enum E { U, V }`, relocation requesting value of `V`; // would look as follows:; // - kind: BTF::ENUM_VALUE; // - BTF id: id for `E`; // - access string: ""1""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/BTF/BTFParser.cpp:30,access,access,30,interpreter/llvm-project/llvm/lib/DebugInfo/BTF/BTFParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/BTF/BTFParser.cpp,2,['access'],['access']
Security,"// For fixed-length vector, return undef for out of range access.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/VectorUtils.cpp:58,access,access,58,interpreter/llvm-project/llvm/lib/Analysis/VectorUtils.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/VectorUtils.cpp,1,['access'],['access']
Security,"// For implicit modules, write the hash of the PCM as its signature.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp:35,hash,hash,35,interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp,2,['hash'],['hash']
Security,"// For in-memory preamble, we have to provide a VFS overlay that makes it; // accessible.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/PrecompiledPreamble.cpp:78,access,accessible,78,interpreter/llvm-project/clang/lib/Frontend/PrecompiledPreamble.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/PrecompiledPreamble.cpp,1,['access'],['accessible']
Security,"// For later type-checking purposes, turn arrow accesses into dot; // accesses. The only access type we support that doesn't follow; // the C equivalence ""a->b === (*a).b"" is ObjC property accesses,; // and those never use arrows, so this is unaffected.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprMember.cpp:48,access,accesses,48,interpreter/llvm-project/clang/lib/Sema/SemaExprMember.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprMember.cpp,4,['access'],"['access', 'accesses']"
Security,// For memmove case it's not enough to guarantee that loop doesn't access; // TheStore and TheLoad. Additionally we need to make sure that TheStore is; // the only user of TheLoad.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopIdiomRecognize.cpp:67,access,access,67,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopIdiomRecognize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopIdiomRecognize.cpp,1,['access'],['access']
Security,"// For mergeable objects we add the names in a local hashlist handling them; // again (see above)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TFileMerger.cxx:53,hash,hashlist,53,io/io/src/TFileMerger.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TFileMerger.cxx,1,['hash'],['hashlist']
Security,"// For now assume stack access is needed in any callee functions, so we need; // the scratch registers to pass in.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp:24,access,access,24,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp,1,['access'],['access']
Security,// For now we're just handling the calls we need for dwarf emission/hashing.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/ByteStreamer.h:68,hash,hashing,68,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/ByteStreamer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/ByteStreamer.h,1,['hash'],['hashing']
Security,"// For now, only provide the AccessType in the simple case where the GEP; // only has one user.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfoImpl.h:29,Access,AccessType,29,interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfoImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfoImpl.h,1,['Access'],['AccessType']
Security,"// For preprocessor indent with tabs, State.Column will be 1 because of the; // hash. This causes second-level indents onward to have an extra space; // after the tabs. We avoid this misalignment by subtracting 1 from the; // column value passed to replaceWhitespace().",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/ContinuationIndenter.cpp:80,hash,hash,80,interpreter/llvm-project/clang/lib/Format/ContinuationIndenter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/ContinuationIndenter.cpp,1,['hash'],['hash']
Security,"// For searching the markup name hash table",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/guihtml/src/TGHtmlParse.cxx:33,hash,hash,33,gui/guihtml/src/TGHtmlParse.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/guihtml/src/TGHtmlParse.cxx,3,['hash'],['hash']
Security,"// For simple multidimensional array indexing, set the 'accessed' flag for; // better bounds-checking of the base expression.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:56,access,accessed,56,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,2,['access'],['accessed']
Security,"// For strncpy and strlcat, this is just checking; // that lenVal <= sizeof(dst).; // (Yes, strncpy and strncat differ in how they treat termination.; // strncat ALWAYS terminates, but strncpy doesn't.); // We need a special case for when the copy size is zero, in which; // case strncpy will do no work at all. Our bounds check uses n-1; // as the last element accessed, so n == 0 is problematic.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CStringChecker.cpp:362,access,accessed,362,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CStringChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CStringChecker.cpp,1,['access'],['accessed']
Security,"// For struct-path aware TBAA, we use the access type of the tag.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/TypeBasedAliasAnalysis.cpp:42,access,access,42,interpreter/llvm-project/llvm/lib/Analysis/TypeBasedAliasAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/TypeBasedAliasAnalysis.cpp,1,['access'],['access']
Security,"// For the DataModelEvolution we need access to the transient member.; // so we now record them in the list of RealData.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TClass.cxx:38,access,access,38,core/meta/src/TClass.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TClass.cxx,1,['access'],['access']
Security,"// For the moment, restrict ourselves to the case where the access size is a; // multiple of the requested alignment and the base is aligned.; // TODO: generalize if a case found which warrants",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/Loads.cpp:60,access,access,60,interpreter/llvm-project/llvm/lib/Analysis/Loads.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/Loads.cpp,1,['access'],['access']
Security,"// For the purpose of tracking historical property accesses, the key for lookup; // is an object pointer (could be an instance or a class) paired with the unique; // identifier for the property being invoked on that object.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/NullabilityChecker.cpp:51,access,accesses,51,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/NullabilityChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/NullabilityChecker.cpp,1,['access'],['accesses']
Security,"// For the users of the source value being used for compare instruction, if; // the number of signed predicate is greater than unsigned predicate, we; // prefer to use SIGN_EXTEND.; //; // With this optimization, we would be able to reduce some redundant sign or; // zero extension instruction, and eventually more machine CSE opportunities; // can be exposed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FunctionLoweringInfo.cpp:352,expose,exposed,352,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FunctionLoweringInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FunctionLoweringInfo.cpp,1,['expose'],['exposed']
Security,"// For type-based relocations access string is an array of numbers,; // which resemble index parameters for `getelementptr` LLVM IR instruction.; // E.g. for the following types:; //; // struct foo {; // int a;; // int b;; // };; // struct bar {; // int u;; // struct foo v[7];; // };; //; // Relocation requesting `offsetof(struct bar, v[2].b)` will have; // the following access string: 0:1:2:1; // ^ ^ ^ ^; // | | | |; // initial index | | field 'b' is a field #1; // | | (counting from 0); // | array index #2; // field 'v' is a field #1; // (counting from 0)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/BTF/BTFParser.cpp:30,access,access,30,interpreter/llvm-project/llvm/lib/DebugInfo/BTF/BTFParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/BTF/BTFParser.cpp,2,['access'],['access']
Security,// For use with DenseMap. This hash is probably slow.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/ProgramPoint.h:31,hash,hash,31,interpreter/llvm-project/clang/include/clang/Analysis/ProgramPoint.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/ProgramPoint.h,1,['hash'],['hash']
Security,"// For use with a SegIndex, SegOffset, and PointerSize triple in; // MachOBindEntry::moveNext() to validate a MachOBindEntry or MachORebaseEntry.; //; // Given a SegIndex, SegOffset, and PointerSize, verify a valid section exists; // that fully contains a pointer at that location. Multiple fixups in a bind; // (such as with the BIND_OPCODE_DO_BIND_ULEB_TIMES_SKIPPING_ULEB opcode) can; // be tested via the Count and Skip parameters.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp:99,validat,validate,99,interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp,1,['validat'],['validate']
Security,"// For v8.0-M.Main we need to authenticate LR before clearing FPRs, which; // uses R12 as a scratch register.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMExpandPseudoInsts.cpp:30,authenticat,authenticate,30,interpreter/llvm-project/llvm/lib/Target/ARM/ARMExpandPseudoInsts.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMExpandPseudoInsts.cpp,1,['authenticat'],['authenticate']
Security,"// For vector loads, the expected load combine pattern will have an; // ExtractElement for each index in the vector. While each of these; // ExtractElements will be accessing the same base address as determined; // by the load instruction, the actual bytes they interact with will differ; // due to different ExtractElement indices. To accurately determine the; // byte position of an ExtractElement, we offset the base load ptr with; // the index multiplied by the byte size of each element in the vector.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:165,access,accessing,165,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['access'],['accessing']
Security,"// For version 4 there is no maxKeySize (there is the checksum instead)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RMiniFile.cxx:54,checksum,checksum,54,tree/ntuple/v7/src/RMiniFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RMiniFile.cxx,1,['checksum'],['checksum']
Security,"// For x87 extended precision, we want to make a NaN, not a; // pseudo-NaN. Maybe we should expose the ability to make; // pseudo-NaNs?",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp:92,expose,expose,92,interpreter/llvm-project/llvm/lib/Support/APFloat.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp,1,['expose'],['expose']
Security,// Force implicitly-built modules to hash the content of the module file.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/CompilerInstance.cpp:37,hash,hash,37,interpreter/llvm-project/clang/lib/Frontend/CompilerInstance.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/CompilerInstance.cpp,1,['hash'],['hash']
Security,// Force linking against the system libraries sanitizers depends on; // (see PR15823 why this is necessary).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/CommonArgs.cpp:46,sanitiz,sanitizers,46,interpreter/llvm-project/clang/lib/Driver/ToolChains/CommonArgs.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/CommonArgs.cpp,1,['sanitiz'],['sanitizers']
Security,"// Force no client authentication",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/inc/TServerSocket.h:19,authenticat,authentication,19,net/net/inc/TServerSocket.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/inc/TServerSocket.h,1,['authenticat'],['authentication']
Security,// Force the Function analysis manager to also be available so that it can; // be accessed in an SCC analysis and proxied onward to function passes.; // FIXME: It is pretty awkward to just drop the result here and assert that; // we can find it again later.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/CGSCCPassManager.cpp:82,access,accessed,82,interpreter/llvm-project/llvm/lib/Analysis/CGSCCPassManager.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/CGSCCPassManager.cpp,1,['access'],['accessed']
Security,// Forget that the previous declaration is the injected-class-name.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:47,inject,injected-class-name,47,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['inject'],['injected-class-name']
Security,// Form SSA out of local memory accesses after breaking apart aggregates into; // scalars.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:32,access,accesses,32,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,2,['access'],['accesses']
Security,// Forward declare the iterator and range accessor for walking the; // partitions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp:42,access,accessor,42,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,1,['access'],['accessor']
Security,// Forward declare the validation method if needed.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmWriterEmitter.cpp:23,validat,validation,23,interpreter/llvm-project/llvm/utils/TableGen/AsmWriterEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmWriterEmitter.cpp,1,['validat'],['validation']
Security,"// Forward to TClass::Hash(), return -1 if no TClass object was found.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/html/src/TDocInfo.cxx:22,Hash,Hash,22,html/src/TDocInfo.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/html/src/TDocInfo.cxx,1,['Hash'],['Hash']
Security,// Found it. Look for counters with the right hash.; // A flag to indicate if the records are from the same type; // of profile (i.e cs vs nocs).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProfReader.cpp:46,hash,hash,46,interpreter/llvm-project/llvm/lib/ProfileData/InstrProfReader.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProfReader.cpp,1,['hash'],['hash']
Security,// Found the injected-class-name for a class template. This will be; // dumped as part of its surrounding class so we don't need to dump it; // here.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTNodeTraverser.h:13,inject,injected-class-name,13,interpreter/llvm-project/clang/include/clang/AST/ASTNodeTraverser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTNodeTraverser.h,2,['inject'],['injected-class-name']
Security,// Friendly methods that need to access us for the maintenence of; // debug-info attachments.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/BasicBlock.h:33,access,access,33,interpreter/llvm-project/llvm/include/llvm/IR/BasicBlock.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/BasicBlock.h,1,['access'],['access']
Security,"// Friendship lookup is a redeclaration lookup, so there's never an; // inheritance path modifying access.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaAccess.cpp:99,access,access,99,interpreter/llvm-project/clang/lib/Sema/SemaAccess.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaAccess.cpp,1,['access'],['access']
Security,"// From FirstStore to LastLoad neither of the elimination candidate loads; // should overlap with any of the stores.; //; // E.g.:; //; // st1 C[i]; // ld1 B[i] <-------,; // ld0 A[i] <----, | * LastLoad; // ... | |; // st2 E[i] | |; // st3 B[i+1] -- | -' * FirstStore; // st0 A[i+1] ---'; // st4 D[i]; //; // st0 forwards to ld0 if the accesses in st4 and st1 don't overlap with; // ld0.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopLoadElimination.cpp:337,access,accesses,337,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopLoadElimination.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopLoadElimination.cpp,1,['access'],['accesses']
Security,"// From here on, we can't fail and will be building new accesses, so rig up; // an IR builder.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp:56,access,accesses,56,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,1,['access'],['accesses']
Security,"// From this point onwards, VPlan-to-VPlan transformations may change the plan; // in ways that accessing values using original IR values is incorrect.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:96,access,accessing,96,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,1,['access'],['accessing']
Security,"// Full file validation",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TDataSetManager.cxx:13,validat,validation,13,proof/proof/src/TDataSetManager.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TDataSetManager.cxx,1,['validat'],['validation']
Security,"// Funclets access the locals contained in the parent's stack frame; // via the frame pointer, so we have to use the FP in the parent; // function.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:12,access,access,12,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,1,['access'],['access']
Security,"// Function attribute flags. Used to track if a function accesses memory,; // recurses or aliases.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:57,access,accesses,57,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,1,['access'],['accesses']
Security,// Function hash,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProfWriter.cpp:12,hash,hash,12,interpreter/llvm-project/llvm/lib/ProfileData/InstrProfWriter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProfWriter.cpp,1,['hash'],['hash']
Security,"// Function pointers in the 64-bit SVR4 ABI do not point to the function; // entry point, but to the function descriptor (the function entry point; // address is part of the function descriptor though).; // The function descriptor is a three doubleword structure with the; // following fields: function entry point, TOC base address and; // environment pointer.; // Thus for a call through a function pointer, the following actions need; // to be performed:; // 1. Save the TOC of the caller in the TOC save area of its stack; // frame (this is done in LowerCall_Darwin() or LowerCall_64SVR4()).; // 2. Load the address of the function entry point from the function; // descriptor.; // 3. Load the TOC of the callee from the function descriptor into r2.; // 4. Load the environment pointer from the function descriptor into; // r11.; // 5. Branch to the function entry point address.; // 6. On return of the callee, the TOC of the caller needs to be; // restored (this is done in FinishCall()).; //; // The loads are scheduled at the beginning of the call sequence, and the; // register copies are flagged together to ensure that no other; // operations can be scheduled in between. E.g. without flagging the; // copies together, a TOC access in the caller could be scheduled between; // the assignment of the callee TOC and the branch to the callee, which leads; // to incorrect code.; // Start by loading the function address from the descriptor.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp:1236,access,access,1236,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,1,['access'],['access']
Security,"// Function templates always go through overload resolution, at which; // point we'll perform the various checks (e.g., accessibility) we need; // to based on which function we selected.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:120,access,accessibility,120,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['access'],['accessibility']
Security,"// Functions that target CBs can override to return a list of; // target specific Views that need to live within /lib/Target/ so that; // they can benefit from the target CB or from backend functionality that is; // not already exposed through MC-layer classes. Keep in mind that how this; // function is used is that the function is called within llvm-mca.cpp and; // then each unique_ptr<View> is passed into the PipelinePrinter::addView(); // function. This function will then std::move the View into its own vector of; // Views. So any CB that overrides this function needs to make sure that they; // are not relying on the current address or reference of the View; // unique_ptrs. If you do need the CB and View to be able to communicate with; // each other, consider giving the View a reference or pointer to the CB when; // the View is constructed. Then the View can query the CB for information; // when it needs it.; /// Return a vector of Views that will be added before all other Views.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/CustomBehaviour.h:228,expose,exposed,228,interpreter/llvm-project/llvm/include/llvm/MCA/CustomBehaviour.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/CustomBehaviour.h,1,['expose'],['exposed']
Security,// GLIBC_INITS_RSEQ; // The frontend that generates the memory annotation structures should; // validate that the address to map the snippet in at is a multiple of; // the page size. Assert that this is true here.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkRunner.cpp:96,validat,validate,96,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkRunner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkRunner.cpp,1,['validat'],['validate']
Security,// GLOBAL instructions never access scratch.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIInsertWaitcnts.cpp:29,access,access,29,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIInsertWaitcnts.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIInsertWaitcnts.cpp,1,['access'],['access']
Security,// GNU-style hash table.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/ELF.h:13,hash,hash,13,interpreter/llvm-project/llvm/include/llvm/BinaryFormat/ELF.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/ELF.h,1,['hash'],['hash']
Security,// GSI hash table bucket index. The maximum value is IPHR_HASH.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/GSIStreamBuilder.h:7,hash,hash,7,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/GSIStreamBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/GSIStreamBuilder.h,1,['hash'],['hash']
Security,"// GV == nullptr is for all other non-GlobalValue global data like the; // constant pool, jump tables, labels, etc. The small and medium code; // models treat these as accessible with a RIP-rel access.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86Subtarget.cpp:168,access,accessible,168,interpreter/llvm-project/llvm/lib/Target/X86/X86Subtarget.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86Subtarget.cpp,2,['access'],"['access', 'accessible']"
Security,"// Generally SrcSize is never greater than DstSize, since this means we are; // losing bits. However, this can happen in cases where the structure has; // additional padding, for example due to a user specified alignment.; //; // FIXME: Assert that we aren't truncating non-padding bits when have access; // to that information.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:297,access,access,297,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,1,['access'],['access']
Security,"// Generate ""fencem 3"" as acq_rel and seq_cst fence.; // FIXME: ""fencem 3"" doesn't wait for PCIe deveices accesses,; // so seq_cst may require more instruction for them.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/VE/VEISelLowering.cpp:106,access,accesses,106,interpreter/llvm-project/llvm/lib/Target/VE/VEISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/VE/VEISelLowering.cpp,1,['access'],['accesses']
Security,"// Generate a sequence for accessing addresses within any 2GiB range within; // the address space. This generates the pattern (PseudoLLA sym), which; // expands to (addi (auipc %pcrel_hi(sym)) %pcrel_lo(auipc)).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp:27,access,accessing,27,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,1,['access'],['accessing']
Security,"// Generate a sequence for accessing addresses within any 2GiB range; // within the address space. This generates the pattern (PseudoLLA sym),; // which expands to (addi (auipc %pcrel_hi(sym)) %pcrel_lo(auipc)).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/GISel/RISCVInstructionSelector.cpp:27,access,accessing,27,interpreter/llvm-project/llvm/lib/Target/RISCV/GISel/RISCVInstructionSelector.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/GISel/RISCVInstructionSelector.cpp,1,['access'],['accessing']
Security,// Generate a sequence for accessing addresses within the first 2 GiB of; // address space. This generates the pattern (addi (lui %hi(sym)) %lo(sym)).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp:27,access,accessing,27,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,1,['access'],['accessing']
Security,"// Generate a sequence for accessing the address relative to the thread; // pointer, with the appropriate adjustment for the thread pointer offset.; // This generates the pattern; // (add (add_tprel (lui %tprel_hi(sym)) tp %tprel_add(sym)) %tprel_lo(sym))",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp:27,access,accessing,27,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,1,['access'],['accessing']
Security,"// Generate execute-only output (no data access to code sections).; // This only makes sense for the compiler, not for the assembler.; // It's not needed for multilib selection and may hide an unused; // argument diagnostic if the code is always run.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Arch/ARM.cpp:41,access,access,41,interpreter/llvm-project/clang/lib/Driver/ToolChains/Arch/ARM.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Arch/ARM.cpp,1,['access'],['access']
Security,// Generate hash codes for all children of S and save them in StmtsByHash.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CloneDetection.cpp:12,hash,hash,12,interpreter/llvm-project/clang/lib/Analysis/CloneDetection.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CloneDetection.cpp,1,['hash'],['hash']
Security,// Generate non-pic code that has direct accesses to the constant pool.; // The address of the global is just (hi(&g)+lo(&g)).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp:41,access,accesses,41,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,1,['access'],['accesses']
Security,// Generate the instruction to store the LR. In the case where ROP protection; // is required the register holding the LR should not be killed as it will be; // used by the hash store instruction.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCFrameLowering.cpp:173,hash,hash,173,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCFrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCFrameLowering.cpp,1,['hash'],['hash']
Security,// Generate the module name hash here if needed.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:28,hash,hash,28,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,1,['hash'],['hash']
Security,// Generic loads and stores must have a single MachineMemOperand; // describing that access.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineVerifier.cpp:85,access,access,85,interpreter/llvm-project/llvm/lib/CodeGen/MachineVerifier.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineVerifier.cpp,1,['access'],['access']
Security,"// Generic validation for single-byte immediate (0X00, 00X0, etc).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/MCTargetDesc/ARMAddressingModes.h:11,validat,validation,11,interpreter/llvm-project/llvm/lib/Target/ARM/MCTargetDesc/ARMAddressingModes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/MCTargetDesc/ARMAddressingModes.h,1,['validat'],['validation']
Security,// Get access to MCRegisterClass data.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/RegisterInfoEmitter.cpp:7,access,access,7,interpreter/llvm-project/llvm/utils/TableGen/RegisterInfoEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/RegisterInfoEmitter.cpp,1,['access'],['access']
Security,// Get access to the plugin.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Frontend/CheckerRegistry.cpp:7,access,access,7,interpreter/llvm-project/clang/lib/StaticAnalyzer/Frontend/CheckerRegistry.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Frontend/CheckerRegistry.cpp,1,['access'],['access']
Security,"// Get checksum",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TDataSetManagerFile.cxx:7,checksum,checksum,7,proof/proof/src/TDataSetManagerFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TDataSetManagerFile.cxx,1,['checksum'],['checksum']
Security,// Get image and pipe access qualifier:,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:22,access,access,22,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,1,['access'],['access']
Security,"// Get offset string of axis time format: there is not accessor; // to time format in TGaxis.; // Assumes TAxis use the same format.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx:55,access,accessor,55,test/stressGraphics.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx,1,['access'],['accessor']
Security,"// Get rid of authentication suffix",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TSocket.cxx:14,authenticat,authentication,14,net/net/src/TSocket.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TSocket.cxx,1,['authenticat'],['authentication']
Security,"// Get the Base register operand index from the memory access MachineInst if we; // should attempt to distribute postinc on it. Return -1 if not of a valid; // instruction type. If it returns an index, it is assumed that instruction is a; // r+i indexing mode, and getBaseOperandIndex() + 1 is the Offset index.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMLoadStoreOptimizer.cpp:55,access,access,55,interpreter/llvm-project/llvm/lib/Target/ARM/ARMLoadStoreOptimizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMLoadStoreOptimizer.cpp,1,['access'],['access']
Security,// Get the High 16 bits from a 32 bit immediate for accessing the GOT.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsISelLowering.h:52,access,accessing,52,interpreter/llvm-project/llvm/lib/Target/Mips/MipsISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsISelLowering.h,1,['access'],['accessing']
Security,// Get the High 16 bits from a 32-bit immediate for accessing TLS.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsISelLowering.h:52,access,accessing,52,interpreter/llvm-project/llvm/lib/Target/Mips/MipsISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsISelLowering.h,1,['access'],['accessing']
Security,// Get the TpiStream pointer for forward decl resolution if this is a pdb.; // Build the hash map to enable resolving forward decls.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-pdbutil/TypeReferenceTracker.cpp:89,hash,hash,89,interpreter/llvm-project/llvm/tools/llvm-pdbutil/TypeReferenceTracker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-pdbutil/TypeReferenceTracker.cpp,1,['hash'],['hash']
Security,// Get the access length and make sure it is known.; // FIXME: This assumes the caller has already checked that the access length; // is positive. And that it's unsigned.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CStringChecker.cpp:11,access,access,11,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CStringChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CStringChecker.cpp,2,['access'],['access']
Security,// Get the access sizes.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonInstrInfo.cpp:11,access,access,11,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonInstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonInstrInfo.cpp,1,['access'],['access']
Security,// Get the access type.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:11,access,access,11,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,1,['access'],['access']
Security,// Get the attribute value as a section offset. No need to produce an; // error here if the encoding isn't correct because we validate this in; // the .debug_info verifier.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/DWARF/DWARFVerifier.cpp:126,validat,validate,126,interpreter/llvm-project/llvm/lib/DebugInfo/DWARF/DWARFVerifier.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/DWARF/DWARFVerifier.cpp,1,['validat'],['validate']
Security,// Get the class for a C++ injected-class-name,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndexCodeCompletion.cpp:27,inject,injected-class-name,27,interpreter/llvm-project/clang/tools/libclang/CIndexCodeCompletion.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndexCodeCompletion.cpp,1,['inject'],['injected-class-name']
Security,"// Get the concrete builder class to access its Append() specializations",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/datasource_arrow.cxx:37,access,access,37,tree/dataframe/test/datasource_arrow.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/datasource_arrow.cxx,2,['access'],['access']
Security,// Get the defining access for the load.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/DeadStoreElimination.cpp:20,access,access,20,interpreter/llvm-project/llvm/lib/Transforms/Scalar/DeadStoreElimination.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/DeadStoreElimination.cpp,1,['access'],['access']
Security,"// Get the dependence distance, stride, type size and what access writes for; // the dependence between A and B.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp:59,access,access,59,interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp,1,['access'],['access']
Security,// Get the expected hash value.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/KCFI.cpp:20,hash,hash,20,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/KCFI.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/KCFI.cpp,1,['hash'],['hash']
Security,// Get the first defining access before the loop.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp:26,access,access,26,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp,1,['access'],['access']
Security,// Get the hash of the user defined macros.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:11,hash,hash,11,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,1,['hash'],['hash']
Security,// Get the index of the accessed element.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/ArrayBoundChecker.cpp:24,access,accessed,24,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/ArrayBoundChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/ArrayBoundChecker.cpp,3,['access'],['accessed']
Security,"// Get the location that may be stored across the loop. Since the access is; // strided positively through memory, we say that the modified location starts; // at the pointer and has infinite size.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopIdiomRecognize.cpp:66,access,access,66,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopIdiomRecognize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopIdiomRecognize.cpp,1,['access'],['access']
Security,"// Get the location that may be stored across the loop. Since the access; // is strided positively through memory, we say that the modified location; // starts at the pointer and has infinite size.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonLoopIdiomRecognition.cpp:66,access,access,66,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonLoopIdiomRecognition.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonLoopIdiomRecognition.cpp,1,['access'],['access']
Security,"// Get the maximum safe dependence distance in bits computed by LAA.; // It is computed by MaxVF * sizeOf(type) * 8, where type is taken from; // the memory accesses that is most restrictive (involved in the smallest; // dependence distance).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:157,access,accesses,157,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,1,['access'],['accesses']
Security,"// Get the password hash or anonymous string",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/rpdutils.cxx:11,password,password,11,net/rpdutils/src/rpdutils.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/rpdutils.cxx,2,"['hash', 'password']","['hash', 'password']"
Security,// Get the relevant memory access set.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp:27,access,access,27,interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp,1,['access'],['access']
Security,// Get the secure log path.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/DarwinAsmParser.cpp:11,secur,secure,11,interpreter/llvm-project/llvm/lib/MC/MCParser/DarwinAsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/DarwinAsmParser.cpp,1,['secur'],['secure']
Security,"// Get the type being accessed in BaseType. If this is an arrow, the BaseExpr; // must have pointer type, and the accessed type is the pointee.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprMember.cpp:22,access,accessed,22,interpreter/llvm-project/clang/lib/Sema/SemaExprMember.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprMember.cpp,2,['access'],['accessed']
Security,// Get the visibility (access control) for this ivar.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:23,access,access,23,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['access'],['access']
Security,// Gets a hashable artifact from a given MachineOperand (ie an unsigned).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MIRVRegNamerUtils.cpp:10,hash,hashable,10,interpreter/llvm-project/llvm/lib/CodeGen/MIRVRegNamerUtils.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MIRVRegNamerUtils.cpp,1,['hash'],['hashable']
Security,"// Getting to any field of dynamic object requires stripping dynamic; // information provided by invariant.group. This is because accessing; // fields may leak the real address of dynamic object, which could result; // in miscompilation when leaked pointer would be compared.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:130,access,accessing,130,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,1,['access'],['accessing']
Security,// Give subclasses access to what otherwise would be wasted padding.; // (15 + 4 + 2 + 2 + 2 + 3 + 1 + 1 + 1 + 1) == 32.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h:19,access,access,19,interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalValue.h,1,['access'],['access']
Security,"// Give the possibility to the selector to access additional info in the; // incoming packet",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/src/TProofPlayer.cxx:43,access,access,43,proof/proofplayer/src/TProofPlayer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/src/TProofPlayer.cxx,1,['access'],['access']
Security,"// Given a Base Register, optimise the load/store uses to attempt to create more; // post-inc accesses and less register moves. We do this by taking zero offset; // loads/stores with an add, and convert them to a postinc load/store of the; // same type. Any subsequent accesses will be adjusted to use and account for; // the post-inc value.; // For example:; // LDR #0 LDR_POSTINC #16; // LDR #4 LDR #-12; // LDR #8 LDR #-8; // LDR #12 LDR #-4; // ADD #16; //; // At the same time if we do not find an increment but do find an existing; // pre/post inc instruction, we can still adjust the offsets of subsequent; // instructions to save the register move that would otherwise be needed for the; // in-place increment.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMLoadStoreOptimizer.cpp:94,access,accesses,94,interpreter/llvm-project/llvm/lib/Target/ARM/ARMLoadStoreOptimizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMLoadStoreOptimizer.cpp,2,['access'],['accesses']
Security,"// Given a SegIndex, SegOffset, and PointerSize, verify a valid section exists; // that fully contains a pointer at that location. Multiple fixups in a bind; // (such as with the BIND_OPCODE_DO_BIND_ULEB_TIMES_SKIPPING_ULEB opcode) can; // be tested via the Count and Skip parameters.; //; // This is used by MachOBindEntry::moveNext() to validate a MachOBindEntry.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/MachO.h:339,validat,validate,339,interpreter/llvm-project/llvm/include/llvm/Object/MachO.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/MachO.h,1,['validat'],['validate']
Security,"// Given a SegIndex, SegOffset, and PointerSize, verify a valid section exists; // that fully contains a pointer at that location. Multiple fixups in a rebase; // (such as with the REBASE_OPCODE_DO_*_TIMES* opcodes) can be tested via the; // Count and Skip parameters.; //; // This is used by MachORebaseEntry::moveNext() to validate a MachORebaseEntry",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/MachO.h:325,validat,validate,325,interpreter/llvm-project/llvm/include/llvm/Object/MachO.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/MachO.h,1,['validat'],['validate']
Security,"// Given a memory access Opcode, check that the give Imm would be a valid Offset; // for this instruction (same as isLegalAddressImm), Or if the instruction; // could be easily converted to one where that was valid. For example converting; // t2LDRi12 to t2LDRi8 for negative offsets. Works in conjunction with; // AdjustBaseAndOffset below.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMLoadStoreOptimizer.cpp:18,access,access,18,interpreter/llvm-project/llvm/lib/Target/ARM/ARMLoadStoreOptimizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMLoadStoreOptimizer.cpp,1,['access'],['access']
Security,"// Given a memory access Opcode, check that the give Imm would be a valid Offset; // for this instruction using its addressing mode.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMBaseInstrInfo.h:18,access,access,18,interpreter/llvm-project/llvm/lib/Target/ARM/ARMBaseInstrInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMBaseInstrInfo.h,1,['access'],['access']
Security,"// Given an offset for a load/store, return the adjustment required to the base; // register such that the address can be accessed with a compressible offset.; // This will return 0 if the offset is already compressible.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVMakeCompressible.cpp:122,access,accessed,122,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVMakeCompressible.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVMakeCompressible.cpp,1,['access'],['accessed']
Security,"// Given some data, this returns an array-like view of it: an object that; // exposes a length property and allows numeric indexing. Note that unlike; // selectAll, this isn’t worried about “live” collections because the resulting; // array will only be used briefly while data is being bound. (It is possible to; // cause the data to change while iterating by using a key function, but please; // don’t; we’d rather avoid a gratuitous copy.)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:78,expose,exposes,78,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['expose'],['exposes']
Security,// Given that \p CI and \p Paired are adjacent memory operations produce a new; // MMO for the combined operation with a new access size.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SILoadStoreOptimizer.cpp:125,access,access,125,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SILoadStoreOptimizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SILoadStoreOptimizer.cpp,1,['access'],['access']
Security,// Global Named registers access via intrinsics only,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:26,access,access,26,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,1,['access'],['access']
Security,// Global auditing required.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/ELF.h:10,audit,auditing,10,interpreter/llvm-project/llvm/include/llvm/BinaryFormat/ELF.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/ELF.h,1,['audit'],['auditing']
Security,"// Global correlation accessors",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFitResult.h:22,access,accessors,22,roofit/roofitcore/inc/RooFitResult.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFitResult.h,1,['access'],['accessors']
Security,// Global hashing entry points,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/CodeView/TypeStreamMerger.cpp:10,hash,hashing,10,interpreter/llvm-project/llvm/lib/DebugInfo/CodeView/TypeStreamMerger.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/CodeView/TypeStreamMerger.cpp,2,['hash'],['hashing']
Security,// Global mapping from mangled symbol names to resolutions.; // Make this an optional to guard against accessing after it has been reset; // (to reduce memory after we're done with it).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/LTO.h:103,access,accessing,103,interpreter/llvm-project/llvm/include/llvm/LTO/LTO.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/LTO.h,1,['access'],['accessing']
Security,"// Global memory works best with 16-byte accesses. Private memory will also; // hit this, although they'll be decomposed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUTargetTransformInfo.cpp:41,access,accesses,41,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUTargetTransformInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUTargetTransformInfo.cpp,1,['access'],['accesses']
Security,"// Global values placed in sections starting with .ldata do not fit in; // 21-bits, so always use large memory access for them. FIXME: This is a; // workaround for a tool limitation.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Lanai/LanaiTargetObjectFile.cpp:111,access,access,111,interpreter/llvm-project/llvm/lib/Target/Lanai/LanaiTargetObjectFile.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Lanai/LanaiTargetObjectFile.cpp,1,['access'],['access']
Security,// GlobalsAA is considered stateless and does not get invalidated unless; // explicitly invalidated; PreservedAnalyses::none() is not enough. Sanitizers; // make changes that require GlobalsAA to be invalidated.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/AddressSanitizer.cpp:142,Sanitiz,Sanitizers,142,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/AddressSanitizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/AddressSanitizer.cpp,5,['Sanitiz'],['Sanitizers']
Security,"// Go through all equivalence classes, get the ""pointer check groups""; // and add them to the overall solution. We use the order in which accesses; // appear in 'Pointers' to enforce determinism.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp:138,access,accesses,138,interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp,1,['access'],['accesses']
Security,"// Go through all uses of this alloca and check whether all accesses to the; // allocated object are statically known to be memory safe and, hence, the; // object can be placed on the safe stack.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SafeStack.cpp:60,access,accesses,60,interpreter/llvm-project/llvm/lib/CodeGen/SafeStack.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SafeStack.cpp,1,['access'],['accesses']
Security,"// Go through each block, figure out where defs occur, and chain together all; // the accesses.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/MemorySSA.cpp:86,access,accesses,86,interpreter/llvm-project/llvm/lib/Analysis/MemorySSA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/MemorySSA.cpp,1,['access'],['accesses']
Security,// Go through the attributes from \param Attrs in the order specified in 7.27.4; // and hash them.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DIEHash.cpp:88,hash,hash,88,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DIEHash.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DIEHash.cpp,1,['hash'],['hash']
Security,"// Go through the calls in this function. Each call to __nvvm_reflect or; // llvm.nvvm.reflect should be a CallInst with a ConstantArray argument.; // First validate that. If the c-string corresponding to the ConstantArray can; // be found successfully, see if it can be found in VarMap. If so, replace the; // uses of CallInst with the value found in VarMap. If not, replace the use; // with value 0.; // The IR for __nvvm_reflect calls differs between CUDA versions.; //; // CUDA 6.5 and earlier uses this sequence:; // %ptr = tail call i8* @llvm.nvvm.ptr.constant.to.gen.p0i8.p4i8; // (i8 addrspace(4)* getelementptr inbounds; // ([8 x i8], [8 x i8] addrspace(4)* @str, i32 0, i32 0)); // %reflect = tail call i32 @__nvvm_reflect(i8* %ptr); //; // The value returned by Sym->getOperand(0) is a Constant with a; // ConstantDataSequential operand which can be converted to string and used; // for lookup.; //; // CUDA 7.0 does it slightly differently:; // %reflect = call i32 @__nvvm_reflect(i8* addrspacecast; // (i8 addrspace(1)* getelementptr inbounds; // ([8 x i8], [8 x i8] addrspace(1)* @str, i32 0, i32 0) to i8*)); //; // In this case, we get a Constant with a GlobalVariable operand and we need; // to dig deeper to find its initializer with the string we'll use for lookup.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVVMReflect.cpp:157,validat,validate,157,interpreter/llvm-project/llvm/lib/Target/NVPTX/NVVMReflect.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVVMReflect.cpp,1,['validat'],['validate']
Security,"// Go to the first argument for phis, and the defining access for everything; // else.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemorySSA.h:55,access,access,55,interpreter/llvm-project/llvm/include/llvm/Analysis/MemorySSA.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemorySSA.h,1,['access'],['access']
Security,// Grab the current child hash and put it into our hash. We do; // -1 on the index because we start counting the length at 1.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CloneDetection.cpp:26,hash,hash,26,interpreter/llvm-project/clang/lib/Analysis/CloneDetection.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CloneDetection.cpp,2,['hash'],['hash']
Security,// Grab the value and do some validation.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:30,validat,validation,30,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,1,['validat'],['validation']
Security,"// Group accessors",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooWorkspace.h:9,access,accessors,9,roofit/roofitcore/inc/RooWorkspace.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooWorkspace.h,1,['access'],['accessors']
Security,// Group expansion may have enabled a sanitizer which is disabled later.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp:38,sanitiz,sanitizer,38,interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,1,['sanitiz'],['sanitizer']
Security,"// Growing requires rebuilding the table and re-hashing every item. Make a; // copy with a larger capacity, insert everything into the copy, then swap; // it in.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/HashTable.h:48,hash,hashing,48,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/HashTable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/HashTable.h,1,['hash'],['hashing']
Security,"// HACK: Ignore retain-count issues on values accessed through ivars,; // because of cases like this:; // [_contentView retain];; // [_contentView removeFromSuperview];; // [self addSubview:_contentView]; // invalidates 'self'; // [_contentView release];",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/RetainCountChecker/RetainCountChecker.cpp:46,access,accessed,46,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/RetainCountChecker/RetainCountChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/RetainCountChecker/RetainCountChecker.cpp,4,['access'],['accessed']
Security,// HASH: [5*i32],MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Bitcode/LLVMBitCodes.h:3,HASH,HASH,3,interpreter/llvm-project/llvm/include/llvm/Bitcode/LLVMBitCodes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Bitcode/LLVMBitCodes.h,1,['HASH'],['HASH']
Security,"// HAS_CGAL; // case of using GCAL; //Functor class for accessing the function values/gradients",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/Delaunay2D.h:56,access,accessing,56,math/mathcore/inc/Math/Delaunay2D.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/Delaunay2D.h,1,['access'],['accessing']
Security,// HIP runtime built by SPACK is installed to; // <rocm_root>/hip-<rocm_release_string>-<hash> directory.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/AMDGPU.cpp:89,hash,hash,89,interpreter/llvm-project/clang/lib/Driver/ToolChains/AMDGPU.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/AMDGPU.cpp,1,['hash'],['hash']
Security,// Half-word-sized access,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/ELF.h:19,access,access,19,interpreter/llvm-project/llvm/include/llvm/BinaryFormat/ELF.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/ELF.h,1,['access'],['access']
Security,// Handle 'dbg' as a special case since it is not stored in the hash table.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h:64,hash,hash,64,interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h,3,['hash'],['hash']
Security,"// Handle 'field access' to vectors, such as 'V.xx'.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprMember.cpp:17,access,access,17,interpreter/llvm-project/clang/lib/Sema/SemaExprMember.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprMember.cpp,1,['access'],['access']
Security,// Handle field access to simple records.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprMember.cpp:16,access,access,16,interpreter/llvm-project/clang/lib/Sema/SemaExprMember.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprMember.cpp,1,['access'],['access']
Security,// Handle ivar access to Objective-C objects.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprMember.cpp:15,access,access,15,interpreter/llvm-project/clang/lib/Sema/SemaExprMember.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprMember.cpp,1,['access'],['access']
Security,// Handle malformed access specifier e.g. 'private' without trailing ':'.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/UnwrappedLineFormatter.cpp:20,access,access,20,interpreter/llvm-project/clang/lib/Format/UnwrappedLineFormatter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/UnwrappedLineFormatter.cpp,1,['access'],['access']
Security,"// Handle shrink case: destroy the elements in the pages that are not; // needed any more and deallocate the pages.; //; // On the other hand, we do not destroy the extra elements in the last page,; // because we might need them later and the logic is simpler if we do not; // destroy them. This means that elements are only destroyed when the; // page they belong to is destroyed. This is similar to what happens on; // access of the elements of a page, where all the elements of the page are; // constructed not only the one effectively needed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PagedVector.h:421,access,access,421,interpreter/llvm-project/llvm/include/llvm/ADT/PagedVector.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PagedVector.h,1,['access'],['access']
Security,// Handle static member variables and enum constants accessed via; // member syntax.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngine.cpp:53,access,accessed,53,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngine.cpp,1,['access'],['accessed']
Security,"// Handle the case where we are accessing into a larger scalar object.; // For example, this handles:; // struct header {; // unsigned a : 1;; // unsigned b : 1;; // };; // struct parse_t {; // unsigned bits0 : 1;; // unsigned bits2 : 2; // <-- header; // unsigned bits4 : 4;; // };; // int parse(parse_t *p) {; // unsigned copy = p->bits2;; // header *bits = (header *)&copy;; // return bits->b; <-- here; // }",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/RegionStore.cpp:32,access,accessing,32,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/RegionStore.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/RegionStore.cpp,1,['access'],['accessing']
Security,// Handle the implicit-member-access case.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprMember.cpp:30,access,access,30,interpreter/llvm-project/clang/lib/Sema/SemaExprMember.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprMember.cpp,1,['access'],['access']
Security,// Handle the mistake of forgetting the accessor kind by skipping; // this accessor.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseDecl.cpp:40,access,accessor,40,interpreter/llvm-project/clang/lib/Parse/ParseDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseDecl.cpp,2,['access'],['accessor']
Security,"// Handle things like Class and struct objc_class*. Here we case the result; // to the pseudo-builtin, because that will be implicitly cast back to the; // redefinition type if an attempt is made to access its fields.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:199,access,access,199,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['access'],['access']
Security,// Handle vector access sizes.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonInstrInfo.cpp:17,access,access,17,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonInstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonInstrInfo.cpp,1,['access'],['access']
Security,"// Handling expressions which produce invariant results, but *haven't* yet; // been removed from the loop serves two important purposes.; // 1) Most importantly, it resolves a pass ordering cycle which would; // otherwise need us to iteration licm, loop-predication, and either; // loop-unswitch or loop-peeling to make progress on examples with lots of; // predicable range checks in a row. (Since, in the general case, we can't; // hoist the length checks until the dominating checks have been discharged; // as we can't prove doing so is safe.); // 2) As a nice side effect, this exposes the value of peeling or unswitching; // much more obviously in the IR. Otherwise, the cost modeling for other; // transforms would end up needing to duplicate all of this logic to model a; // check which becomes predictable based on a modeled peel or unswitch.; //; // The cost of doing so in the worst case is an extra fill from the stack in; // the loop to materialize the loop invariant test value instead of checking; // against the original IV which is presumable in a register inside the loop.; // Such cases are presumably rare, and hint at missing oppurtunities for; // other passes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopPredication.cpp:583,expose,exposes,583,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopPredication.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopPredication.cpp,1,['expose'],['exposes']
Security,"// Handling llvm.lifetime intrinsics for a given %alloca:; // (1) collect all llvm.lifetime.xxx(%size, %value) describing the alloca.; // (2) if %size is constant, poison memory for llvm.lifetime.end (to detect; // invalid accesses) and unpoison it for llvm.lifetime.start (the memory; // could be poisoned by previous llvm.lifetime.end instruction, as the; // variable may go in and out of scope several times, e.g. in loops).; // (3) if we poisoned at least one %alloca in a function,; // unpoison the whole stack frame at function exit.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/AddressSanitizer.cpp:223,access,accesses,223,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/AddressSanitizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/AddressSanitizer.cpp,1,['access'],['accesses']
Security,// Has optional access qualifier.; // TODO: check if it's OpenCL's kernel.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SPIRV/SPIRVModuleAnalysis.cpp:16,access,access,16,interpreter/llvm-project/llvm/lib/Target/SPIRV/SPIRVModuleAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SPIRV/SPIRVModuleAnalysis.cpp,1,['access'],['access']
Security,"// HasHvxVer is false, and UseHvx is true.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonMCTargetDesc.cpp:3,HasH,HasHvxVer,3,interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonMCTargetDesc.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonMCTargetDesc.cpp,1,['HasH'],['HasHvxVer']
Security,// Hash (dollar) is optional as per the ARMARM,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/AsmParser/ARMAsmParser.cpp:3,Hash,Hash,3,interpreter/llvm-project/llvm/lib/Target/ARM/AsmParser/ARMAsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/AsmParser/ARMAsmParser.cpp,1,['Hash'],['Hash']
Security,// Hash a FunctionDeclAndLoc by looking at both its FunctionDecl and its; // SourceLocation.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:3,Hash,Hash,3,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['Hash'],['Hash']
Security,"// Hash a escape sequence name. The value returned is an integer; // between 0 and ESC_HASH_SIZE-1, inclusive.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/guihtml/src/TGHtmlParse.cxx:3,Hash,Hash,3,gui/guihtml/src/TGHtmlParse.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/guihtml/src/TGHtmlParse.cxx,1,['Hash'],['Hash']
Security,"// Hash a markup name; //; // HTML markup is case insensitive, so this function will give the; // same hash regardless of the case of the markup name.; //; // The value returned is an integer between 0 and HTML_MARKUP_HASH_SIZE-1,; // inclusive.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/guihtml/src/TGHtmlParse.cxx:3,Hash,Hash,3,gui/guihtml/src/TGHtmlParse.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/guihtml/src/TGHtmlParse.cxx,2,"['Hash', 'hash']","['Hash', 'hash']"
Security,"// Hash a subtree with compress_subtree_wide(), and then condense the resulting; // list of chaining values down to a single parent node. Don't compress that; // last parent node, however. Instead, return its message bytes (the; // concatenated chaining values of its children). This is necessary when the; // first call to update() supplies a complete subtree, because the topmost; // parent node of that subtree could end up being the root. It's also necessary; // for extended output in the general case.; //; // As with compress_subtree_wide(), this function is not used on inputs of 1; // chunk or less. That's a different codepath.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c:3,Hash,Hash,3,interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c,1,['Hash'],['Hash']
Security,// Hash all of the operands as pointers and mix in the opcode.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/EarlyCSE.cpp:3,Hash,Hash,3,interpreter/llvm-project/llvm/lib/Transforms/Scalar/EarlyCSE.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/EarlyCSE.cpp,1,['Hash'],['Hash']
Security,// Hash all of the values in a block like set of values. This assumes that; // all of the data is going to be added as integers.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DIEHash.cpp:3,Hash,Hash,3,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DIEHash.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DIEHash.cpp,1,['Hash'],['Hash']
Security,"// Hash already taken by a differently-named ntuple.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RPageStorageDaos.cxx:3,Hash,Hash,3,tree/ntuple/v7/src/RPageStorageDaos.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RPageStorageDaos.cxx,1,['Hash'],['Hash']
Security,// Hash an individual attribute \param Attr based on the type of attribute and; // the form.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DIEHash.cpp:3,Hash,Hash,3,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DIEHash.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DIEHash.cpp,1,['Hash'],['Hash']
Security,// Hash any data that comes before this TiRef.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/CodeView/TypeHashing.cpp:3,Hash,Hash,3,interpreter/llvm-project/llvm/lib/DebugInfo/CodeView/TypeHashing.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/CodeView/TypeHashing.cpp,1,['Hash'],['Hash']
Security,// Hash buckets follow.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/PDB/Native/GlobalsStream.cpp:3,Hash,Hash,3,interpreter/llvm-project/llvm/lib/DebugInfo/PDB/Native/GlobalsStream.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/PDB/Native/GlobalsStream.cpp,1,['Hash'],['Hash']
Security,// Hash code generation,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.h:3,Hash,Hash,3,interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.h,1,['Hash'],['Hash']
Security,// Hash equal,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.h:3,Hash,Hash,3,interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.h,1,['Hash'],['Hash']
Security,// Hash every name in parallel.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/PDB/Native/GSIStreamBuilder.cpp:3,Hash,Hash,3,interpreter/llvm-project/llvm/lib/DebugInfo/PDB/Native/GSIStreamBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/PDB/Native/GSIStreamBuilder.cpp,1,['Hash'],['Hash']
Security,// Hash format for context sensitive profile. Reserve 4 bits for other; // information.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/PGOInstrumentation.cpp:3,Hash,Hash,3,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/PGOInstrumentation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/PGOInstrumentation.cpp,1,['Hash'],['Hash']
Security,// Hash functions.; // Daniel J. Bernstein hash.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/Dwarf.h:3,Hash,Hash,3,interpreter/llvm-project/llvm/include/llvm/BinaryFormat/Dwarf.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/Dwarf.h,2,"['Hash', 'hash']","['Hash', 'hash']"
Security,// Hash functor,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/GVNSink.cpp:3,Hash,Hash,3,interpreter/llvm-project/llvm/lib/Transforms/Scalar/GVNSink.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/GVNSink.cpp,1,['Hash'],['Hash']
Security,// Hash general selects to allow matching commuted true/false operands.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/EarlyCSE.cpp:3,Hash,Hash,3,interpreter/llvm-project/llvm/lib/Transforms/Scalar/EarlyCSE.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/EarlyCSE.cpp,1,['Hash'],['Hash']
Security,"// Hash general selects to allow matching commuted true/false operands.; // If we do not have a compare as the condition, just hash in the condition.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/EarlyCSE.cpp:3,Hash,Hash,3,interpreter/llvm-project/llvm/lib/Transforms/Scalar/EarlyCSE.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/EarlyCSE.cpp,2,"['Hash', 'hash']","['Hash', 'hash']"
Security,"// Hash histogram shows statistics of how efficient the hash was for the; // dynamic symbol table. The table shows the number of hash buckets for; // different lengths of chains as an absolute number and percentage of the; // total buckets, and the cumulative coverage of symbols for each set of; // buckets.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp:3,Hash,Hash,3,interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp,3,"['Hash', 'hash']","['Hash', 'hash']"
Security,// Hash in all of the operands as pointers.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/EarlyCSE.cpp:3,Hash,Hash,3,interpreter/llvm-project/llvm/lib/Transforms/Scalar/EarlyCSE.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/EarlyCSE.cpp,1,['Hash'],['Hash']
Security,"// Hash indices, hash values, etc come from the hash stream.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/PDB/Native/TpiStream.cpp:3,Hash,Hash,3,interpreter/llvm-project/llvm/lib/DebugInfo/PDB/Native/TpiStream.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/PDB/Native/TpiStream.cpp,3,"['Hash', 'hash']","['Hash', 'hash']"
Security,"// Hash interface for generic data of type T; // Data should implement a \fn getHashCode and a \fn isEqual; // Currently getHashCode is non-virtual to avoid the overhead of calling vtable,; // i.e we explicitly calculate hash of derived class, assign to base class's; // HashCode. This also provides the flexibility for calculating the hash code; // incrementally(like rolling hash) during frame stack unwinding since unwinding; // only changes the leaf of frame stack. \fn isEqual is a virtual function,; // which will have perf overhead. In the future, if we redesign a better hash; // function, then we can just skip this or switch to non-virtual function(like; // just ignore comparison if hash conflicts probabilities is low)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.h:3,Hash,Hash,3,interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.h,7,"['Hash', 'hash']","['Hash', 'HashCode', 'hash']"
Security,// Hash mask for the extended hash bits.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h:3,Hash,Hash,3,interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h,2,"['Hash', 'hash']","['Hash', 'hash']"
Security,// Hash mask.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h:3,Hash,Hash,3,interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h,1,['Hash'],['Hash']
Security,// Hash matched. Check value for equality.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h:3,Hash,Hash,3,interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h,1,['Hash'],['Hash']
Security,"// Hash min/max (cmp + select) to allow for commuted operands.; // Min/max may also have non-canonical compare predicate (eg, the compare for; // smin may use 'sgt' rather than 'slt'), and non-canonical operands in the; // compare.; // TODO: We should also detect FP min/max.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/EarlyCSE.cpp:3,Hash,Hash,3,interpreter/llvm-project/llvm/lib/Transforms/Scalar/EarlyCSE.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/EarlyCSE.cpp,1,['Hash'],['Hash']
Security,"// Hash miss.; // See if the key matches. If not, probe on.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/HeaderMap.cpp:3,Hash,Hash,3,interpreter/llvm-project/clang/lib/Lex/HeaderMap.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/HeaderMap.cpp,1,['Hash'],['Hash']
Security,// Hash of dependency name,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFTypes.h:3,Hash,Hash,3,interpreter/llvm-project/llvm/include/llvm/Object/ELFTypes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFTypes.h,1,['Hash'],['Hash']
Security,"// Hash of method proxy object for insertion into dictionaries; with actual; // method (fMethodInfo) shared, its address is best suited.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/CPPOverload.cxx:3,Hash,Hash,3,bindings/pyroot/cppyy/CPyCppyy/src/CPPOverload.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/CPPOverload.cxx,1,['Hash'],['Hash']
Security,// Hash of name,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFTypes.h:3,Hash,Hash,3,interpreter/llvm-project/llvm/include/llvm/Object/ELFTypes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFTypes.h,1,['Hash'],['Hash']
Security,// Hash referenced protocols.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ODRHash.cpp:3,Hash,Hash,3,interpreter/llvm-project/clang/lib/AST/ODRHash.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ODRHash.cpp,2,['Hash'],['Hash']
Security,// Hash size is not a power of two.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/ELF.h:3,Hash,Hash,3,interpreter/llvm-project/llvm/include/llvm/BinaryFormat/ELF.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/ELF.h,1,['Hash'],['Hash']
Security,// Hash table begins with 4-byte size field.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/PDB/Native/PDBStringTableBuilder.cpp:3,Hash,Hash,3,interpreter/llvm-project/llvm/lib/DebugInfo/PDB/Native/PDBStringTableBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/PDB/Native/PDBStringTableBuilder.cpp,1,['Hash'],['Hash']
Security,"// Hash table collision chain",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/guihtml/inc/TGHtml.h:3,Hash,Hash,3,gui/guihtml/inc/TGHtml.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/guihtml/inc/TGHtml.h,1,['Hash'],['Hash']
Security,// Hash table for deduplicating global typedef and constant records. Only used; // for globals.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/GSIStreamBuilder.h:3,Hash,Hash,3,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/GSIStreamBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/GSIStreamBuilder.h,1,['Hash'],['Hash']
Security,"// Hash table for some used string values like family names, etc.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/inc/TGFont.h:3,Hash,Hash,3,gui/gui/inc/TGFont.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/inc/TGFont.h,1,['Hash'],['Hash']
Security,"// Hash table for some used string values; // like color names, etc.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/guihtml/inc/TGHtml.h:3,Hash,Hash,3,gui/guihtml/inc/TGHtml.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/guihtml/inc/TGHtml.h,1,['Hash'],['Hash']
Security,// Hash table unallocated so far?,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/StringMap.cpp:3,Hash,Hash,3,interpreter/llvm-project/llvm/lib/Support/StringMap.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/StringMap.cpp,1,['Hash'],['Hash']
Security,// Hash tables should refer to SHT_DYNSYM which we're not going to change.; // Because of this we don't need to mess with the hash tables either.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.cpp:3,Hash,Hash,3,interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.cpp,2,"['Hash', 'hash']","['Hash', 'hash']"
Security,// Hash tables:,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/InterfaceStub/ELFObjHandler.cpp:3,Hash,Hash,3,interpreter/llvm-project/llvm/lib/InterfaceStub/ELFObjHandler.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/InterfaceStub/ELFObjHandler.cpp,1,['Hash'],['Hash']
Security,// Hash the BuildInvocation without any input files.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/DependencyScanning/ModuleDepCollector.cpp:3,Hash,Hash,3,interpreter/llvm-project/clang/lib/Tooling/DependencyScanning/ModuleDepCollector.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/DependencyScanning/ModuleDepCollector.cpp,1,['Hash'],['Hash']
Security,// Hash the DIE.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DIEHash.cpp:3,Hash,Hash,3,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DIEHash.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DIEHash.cpp,2,['Hash'],['Hash']
Security,// Hash the compiler version and serialization version to ensure the module; // will be readable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/DependencyScanning/ModuleDepCollector.cpp:3,Hash,Hash,3,interpreter/llvm-project/clang/lib/Tooling/DependencyScanning/ModuleDepCollector.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/DependencyScanning/ModuleDepCollector.cpp,1,['Hash'],['Hash']
Security,// Hash the contents of a loclistptr class.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DIEHash.cpp:3,Hash,Hash,3,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DIEHash.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DIEHash.cpp,1,['Hash'],['Hash']
Security,"// Hash the module dependencies. These paths may differ even if the invocation; // is identical if they depend on the contents of the files in the TU -- for; // example, case-insensitive paths to modulemap files. Usually such a case; // would indicate a missed optimization to canonicalize, but it may be; // difficult to canonicalize all cases when there is a VFS.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/DependencyScanning/ModuleDepCollector.cpp:3,Hash,Hash,3,interpreter/llvm-project/clang/lib/Tooling/DependencyScanning/ModuleDepCollector.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/DependencyScanning/ModuleDepCollector.cpp,1,['Hash'],['Hash']
Security,// Hash the name only as a referenced protocol can be a forward declaration.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ODRHash.cpp:3,Hash,Hash,3,interpreter/llvm-project/clang/lib/AST/ODRHash.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ODRHash.cpp,2,['Hash'],['Hash']
Security,// Hash the name to figure out which bucket this goes into.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/PDB/Native/GlobalsStream.cpp:3,Hash,Hash,3,interpreter/llvm-project/llvm/lib/DebugInfo/PDB/Native/GlobalsStream.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/PDB/Native/GlobalsStream.cpp,1,['Hash'],['Hash']
Security,"// Hash the remaining partial chunk, if there is one. Note that the empty; // chunk (meaning the empty message) is a different codepath.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c:3,Hash,Hash,3,interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c,1,['Hash'],['Hash']
Security,// Hash the store address and the stored value.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/GVNHoist.cpp:3,Hash,Hash,3,interpreter/llvm-project/llvm/lib/Transforms/Scalar/GVNHoist.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/GVNHoist.cpp,1,['Hash'],['Hash']
Security,// Hash. Not currently initialised by the compiler.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:3,Hash,Hash,3,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,2,['Hash'],['Hash']
Security,// HashHdr->HrSize specifies the number of bytes of PSHashRecords we have.; // Verify that we can read them all.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/PDB/Native/GlobalsStream.cpp:3,Hash,HashHdr,3,interpreter/llvm-project/llvm/lib/DebugInfo/PDB/Native/GlobalsStream.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/PDB/Native/GlobalsStream.cpp,1,['Hash'],['HashHdr']
Security,// Hashes for [Size] entries.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h:3,Hash,Hashes,3,interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h,1,['Hash'],['Hashes']
Security,// Hashes in the middle of a line can lead to any strange token; // sequence.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/TokenAnnotator.cpp:3,Hash,Hashes,3,interpreter/llvm-project/clang/lib/Format/TokenAnnotator.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/TokenAnnotator.cpp,1,['Hash'],['Hashes']
Security,"// Hashing",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/TMath.h:3,Hash,Hashing,3,math/mathcore/inc/TMath.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/TMath.h,1,['Hash'],['Hashing']
Security,"// Hashing after AddAll can be much more expensive than; // hashing before, as we need to add more elements.; // We assume an ideal hash, i.e. fUsedSlots==fSize.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx:3,Hash,Hashing,3,core/cont/src/THashTable.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/THashTable.cxx,3,"['Hash', 'hash']","['Hashing', 'hash', 'hashing']"
Security,"// Hashing support, used to distinguish between ordinary, empty, or tombstone; // keys.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionSpecialization.h:3,Hash,Hashing,3,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionSpecialization.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionSpecialization.h,1,['Hash'],['Hashing']
Security,// Hashing the name will be deterministic as LLVM's hashing infrastructure; // has explicit support for hashing strings and will not simply hash; // the pointer.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/StructuralHash.cpp:3,Hash,Hashing,3,interpreter/llvm-project/llvm/lib/IR/StructuralHash.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/StructuralHash.cpp,4,"['Hash', 'hash']","['Hashing', 'hash', 'hashing']"
Security,"// Having FP implies allocframe. Allocframe will store extra 8 bytes:; // FP/LR. If the base register is used to access an object across these; // 8 bytes, then the offset will need to be adjusted by 8.; //; // After allocframe:; // HexagonISelLowering adds 8 to ---+; // the offsets of all stack-based |; // arguments (*) |; // |; // getObjectOffset < 0 0 8 getObjectOffset >= 8; // ------------------------+-----+------------------------> increasing; // <local objects> |FP/LR| <input arguments> addresses; // -----------------+------+-----+------------------------>; // | |; // SP/AP point --+ +-- FP points here (**); // somewhere on; // this side of FP/LR; //; // (*) See LowerFormalArguments. The FP/LR is assumed to be present.; // (**) *FP == old-FP. FP+0..7 are the bytes of FP/LR.; // The lowering assumes that FP/LR is present, and so the offsets of; // the formal arguments start at 8. If FP/LR is not there we need to; // reduce the offset by 8.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonFrameLowering.cpp:113,access,access,113,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonFrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonFrameLowering.cpp,1,['access'],['access']
Security,"// Header consists of:; // - 2 byte identifier ""L4""; // - 1 byte LZ4 version string.; // - 3 bytes of uncompressed size; // - 3 bytes of compressed size; // - 8 byte checksum using xxhash 64.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/lz4/src/ZipLZ4.cxx:166,checksum,checksum,166,core/lz4/src/ZipLZ4.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/lz4/src/ZipLZ4.cxx,1,['checksum'],['checksum']
Security,"// Height of exposed area",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/recorder/inc/TRecorder.h:13,expose,exposed,13,gui/recorder/inc/TRecorder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/recorder/inc/TRecorder.h,1,['expose'],['exposed']
Security,// Helper class for building the public and global PDB hash table buckets.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/PDB/Native/GSIStreamBuilder.cpp:55,hash,hash,55,interpreter/llvm-project/llvm/lib/DebugInfo/PDB/Native/GSIStreamBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/PDB/Native/GSIStreamBuilder.cpp,1,['hash'],['hash']
Security,// Helper for easy access.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:19,access,access,19,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,1,['access'],['access']
Security,"// Helper function for the relocationViaAlloca.; //; // It receives iterator to the statepoint gc relocates and emits a store to the; // assigned location (via allocaMap) for the each one of them. It adds the; // visited values into the visitedLiveValues set, which we will later use them; // for validation checking.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/RewriteStatepointsForGC.cpp:297,validat,validation,297,interpreter/llvm-project/llvm/lib/Transforms/Scalar/RewriteStatepointsForGC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/RewriteStatepointsForGC.cpp,1,['validat'],['validation']
Security,// Helper methods for accessing attributes.; /// isReadOnly - Return true iff the property has a setter.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:22,access,accessing,22,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,1,['access'],['accessing']
Security,// Helper to check if we can access all the constituent subvectors without any; // extract ops.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:29,access,access,29,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['access'],['access']
Security,"// Helper to determine if the access is executed by the same thread as the; // given instruction, for now it is sufficient to avoid any potential; // threading effects as we cannot deal with them anyway.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp:30,access,access,30,interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp,1,['access'],['access']
Security,// Helper to determine if we can skip a specific write access.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp:55,access,access,55,interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp,1,['access'],['access']
Security,"// Helper to determine if we need to consider threading, which we cannot; // right now. However, if the function is (assumed) nosync or the thread; // executing all instructions is the main thread only we can ignore; // threading. Also, thread-local objects do not require threading reasoning.; // Finally, we can ignore threading if either access is executed in an; // aligned region.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp:341,access,access,341,interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp,1,['access'],['access']
Security,// Helper to load an API list to preserve from file and expose it as a functor; // for internalization.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/Internalize.cpp:56,expose,expose,56,interpreter/llvm-project/llvm/lib/Transforms/IPO/Internalize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/Internalize.cpp,1,['expose'],['expose']
Security,// Here we assume that every loop that has an access group is parallel.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGLoopInfo.cpp:46,access,access,46,interpreter/llvm-project/clang/lib/CodeGen/CGLoopInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGLoopInfo.cpp,1,['access'],['access']
Security,"// Here we filter out anything that's not set to DefaultVisibility.; // DefaultVisibility is set on a decl when -fvisibility is not specified on; // the command line (or specified as default) and the decl does not have; // __attribute__((visibility(""hidden""))) set or when the command line; // argument is set to hidden but the decl explicitly has; // __attribute__((visibility (""default""))) set. We do this so that the user; // can have fine grain control of what they want to expose in the stub.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/InterfaceStubFunctionsConsumer.cpp:478,expose,expose,478,interpreter/llvm-project/clang/lib/Frontend/InterfaceStubFunctionsConsumer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/InterfaceStubFunctionsConsumer.cpp,1,['expose'],['expose']
Security,"// Here we need to remove and re-add to keep the hashes consistent with; // the underlying names.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:49,hash,hashes,49,hist/hist/src/TFormula.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx,1,['hash'],['hashes']
Security,"// Hexagon stack frame layout as defined by the ABI:; //; // Incoming arguments; // passed via stack; // |; // |; // SP during function's FP during function's |; // +-- runtime (top of stack) runtime (bottom) --+ |; // | | |; // --++---------------------+------------------+-----------------++-+-------; // | parameter area for | variable-size | fixed-size |LR| arg; // | called functions | local objects | local objects |FP|; // --+----------------------+------------------+-----------------+--+-------; // <- size known -> <- size unknown -> <- size known ->; //; // Low address High address; //; // <--- stack growth; //; //; // - In any circumstances, the outgoing function arguments are always accessi-; // ble using the SP, and the incoming arguments are accessible using the FP.; // - If the local objects are not aligned, they can always be accessed using; // the FP.; // - If there are no variable-sized objects, the local objects can always be; // accessed using the SP, regardless whether they are aligned or not. (The; // alignment padding will be at the bottom of the stack (highest address),; // and so the offset with respect to the SP will be known at the compile-; // -time.); //; // The only complication occurs if there are both, local aligned objects, and; // dynamically allocated (variable-sized) objects. The alignment pad will be; // placed between the FP and the local objects, thus preventing the use of the; // FP to access the local objects. At the same time, the variable-sized objects; // will be between the SP and the local objects, thus introducing an unknown; // distance from the SP to the locals.; //; // To avoid this problem, a new register is created that holds the aligned; // address of the bottom of the stack, referred in the sources as AP (aligned; // pointer). The AP will be equal to ""FP-p"", where ""p"" is the smallest pad; // that aligns AP to the required boundary (a maximum of the alignments of; // all stack objects, fixed- and variable-sized). All lo",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonFrameLowering.cpp:699,access,accessi,699,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonFrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonFrameLowering.cpp,4,['access'],"['accessed', 'accessi', 'accessible']"
Security,"// Hist file's number of lines at previous access",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/textinput/src/textinput/History.h:43,access,access,43,core/textinput/src/textinput/History.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/textinput/src/textinput/History.h,1,['access'],['access']
Security,"// Histograms are named objects in a THashList.; // We must update the hashlist if we change the name",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:71,hash,hashlist,71,hist/hist/src/TH1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx,1,['hash'],['hashlist']
Security,"// Histograms are named objects in a THashList.; // We must update the hashlist if we change the name; // We protect this operation",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:71,hash,hashlist,71,hist/hist/src/TH1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx,1,['hash'],['hashlist']
Security,// Holds all accesses with a constant stride.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/VectorUtils.cpp:13,access,accesses,13,interpreter/llvm-project/llvm/lib/Analysis/VectorUtils.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/VectorUtils.cpp,1,['access'],['accesses']
Security,// Holds all the different accesses in the loop.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp:27,access,accesses,27,interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp,1,['access'],['accesses']
Security,"// Holds the analyzed pointers. We don't want to call getUnderlyingObjects; // multiple times on the same object. If the ptr is accessed twice, once; // for read and once for write, it will only appear once (on the write; // list). This is okay, since we are going to check for conflicts between; // writes and between reads and writes, but not between reads and reads.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp:128,access,accessed,128,interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp,1,['access'],['accessed']
Security,"// Hook to external function setting up authentication related stuff; // for old versions.; // For backward compatibility",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/inc/TProofServ.h:40,authenticat,authentication,40,proof/proof/inc/TProofServ.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/inc/TProofServ.h,1,['authenticat'],['authentication']
Security,"// Hook to server authentication wrapper",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TServerSocket.cxx:18,authenticat,authentication,18,net/net/src/TServerSocket.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TServerSocket.cxx,1,['authenticat'],['authentication']
Security,"// Humm there is no space reserve to write the data,; // the data member is likely 'removed' from the class; // layout, so rather than crashing by accessing; // random memory, make it clear we can't read it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeFormula.cxx:147,access,accessing,147,tree/treeplayer/src/TTreeFormula.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeFormula.cxx,1,['access'],['accessing']
Security,"// I keep the BDT EventSample and its Validation sample (eventually they should all; // disappear and just use the DataSet samples ..; // remove all the trees",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx:38,Validat,Validation,38,tmva/tmva/src/MethodBDT.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx,1,['Validat'],['Validation']
Security,"// IMPORTANT: final place where integrity of input message is checked!",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx:32,integrity,integrity,32,gui/webdisplay/src/RWebWindow.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx,1,['integrity'],['integrity']
Security,"// IO Rules; // From OSx to ROOT; // There the datamembers are called __re_ and __im_; // #pragma read sourceClass=""complex<float>"" \; // targetClass=""complex<float>"" \; // checksum=[3671150135] \; // source=""float __re_;"" \; // target="""" \; // code=""{ newObj->real(onfile.__re_);}""; //; // #pragma read sourceClass=""complex<float>"" \; // targetClass=""complex<float>"" \; // checksum=[3671150135] \; // source=""float __im_;"" \; // target="""" \; // code=""{ newObj->imag(onfile.__im_);}""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/complexLinkdef.h:173,checksum,checksum,173,core/clingutils/src/complexLinkdef.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/complexLinkdef.h,2,['checksum'],['checksum']
Security,// IOCSR access operations,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/LoongArch/LoongArchISelLowering.h:9,access,access,9,interpreter/llvm-project/llvm/lib/Target/LoongArch/LoongArchISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/LoongArch/LoongArchISelLowering.h,1,['access'],['access']
Security,// Ideally this should have been a stateless traits class. But the print methods; // for Machine IR need access to the owning function. So we track that state in; // the template itself.; //; // We use FunctionT as a template argument and not GenericSSATraits to allow; // forward declarations using well-known typenames.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/GenericSSAContext.h:105,access,access,105,interpreter/llvm-project/llvm/include/llvm/ADT/GenericSSAContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/GenericSSAContext.h,1,['access'],['access']
Security,"// Ideally, as in gled, MIR execution would be steered by scenes themselves.; // But this requires alpha/beta/gamma MIR elements and scene dependenices,; // so dependent scenes can be locked, too.; // On top of that, one could also implements authorization framework, as in gled.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve7/src/REveManager.cxx:243,authoriz,authorization,243,graf3d/eve7/src/REveManager.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve7/src/REveManager.cxx,1,['authoriz'],['authorization']
Security,// Idx is exposed only via accessors that specify specific encodings.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Attr.h:10,expose,exposed,10,interpreter/llvm-project/clang/include/clang/AST/Attr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Attr.h,2,"['access', 'expose']","['accessors', 'exposed']"
Security,"// If -earlycse-debug-hash was specified, return a constant -- this; // will force all hashing to collide, so we'll exhaustively search; // the table for a match, and the assertion in isEqual will fire if; // there's a bug causing equal keys to hash differently.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/EarlyCSE.cpp:22,hash,hash,22,interpreter/llvm-project/llvm/lib/Transforms/Scalar/EarlyCSE.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/EarlyCSE.cpp,3,['hash'],"['hash', 'hashing']"
Security,"// If -fdirect-access-external-data (default for -fno-pic), set dso_local; // for non-thread-local variables. If the symbol is not defined in the; // executable, a copy relocation will be needed at link time. dso_local is; // excluded for thread-local variables because they generally don't support; // copy relocations.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:15,access,access-external-data,15,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,1,['access'],['access-external-data']
Security,"// If -mno-sort-sda is not set, find out smallest accessible entity in; // declaration and add it to the section name string.; // Note. It does not track the actual usage of the value, only its de-; // claration. Also, compiler adds explicit pad fields to some struct; // declarations - they are currently counted towards smallest addres-; // sable entity.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonTargetObjectFile.cpp:50,access,accessible,50,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonTargetObjectFile.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonTargetObjectFile.cpp,1,['access'],['accessible']
Security,"// If -phicse-debug-hash was specified, return a constant -- this; // will force all hashing to collide, so we'll exhaustively search; // the table for a match, and the assertion in isEqual will fire if; // there's a bug causing equal keys to hash differently.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/Local.cpp:20,hash,hash,20,interpreter/llvm-project/llvm/lib/Transforms/Utils/Local.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/Local.cpp,3,['hash'],"['hash', 'hashing']"
Security,"// If BundleMember is a stand-alone instruction, no operand reordering; // has taken place, so we directly access its operands.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp:107,access,access,107,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,1,['access'],['access']
Security,"// If C compares the truncation of an extending load, try to compare; // the untruncated value instead. This exposes more opportunities to; // reuse CC.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp:109,expose,exposes,109,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp,1,['expose'],['exposes']
Security,"// If Call1 only accesses memory through arguments, check if Call2 references; // any of the memory referenced by Call1's arguments. If not, return NoModRef.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/AliasAnalysis.cpp:17,access,accesses,17,interpreter/llvm-project/llvm/lib/Analysis/AliasAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/AliasAnalysis.cpp,1,['access'],['accesses']
Security,"// If Call2 only access memory through arguments, accumulate the mod/ref; // information from Call1's references to the memory referenced by; // Call2's arguments.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/AliasAnalysis.cpp:17,access,access,17,interpreter/llvm-project/llvm/lib/Analysis/AliasAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/AliasAnalysis.cpp,1,['access'],['access']
Security,// If EFLAGS are live and we don't have access to instructions that avoid; // clobbering EFLAGS we need to save and restore them. This in turn makes; // the EFLAGS no longer live.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86SpeculativeLoadHardening.cpp:40,access,access,40,interpreter/llvm-project/llvm/lib/Target/X86/X86SpeculativeLoadHardening.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86SpeculativeLoadHardening.cpp,1,['access'],['access']
Security,"// If F was directly imported by another module, it's implicitly validated by; // the importing module.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTReader.cpp:65,validat,validated,65,interpreter/llvm-project/clang/lib/Serialization/ASTReader.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTReader.cpp,1,['validat'],['validated']
Security,"// If FP is not used, SP will be used to access arguments, so count the; // size of arguments into the estimation.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMFrameLowering.cpp:41,access,access,41,interpreter/llvm-project/llvm/lib/Target/ARM/ARMFrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMFrameLowering.cpp,1,['access'],['access']
Security,"// If FrameReg is a high register, add the reg values in a separate; // instruction as the load won't be able to access it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ThumbRegisterInfo.cpp:113,access,access,113,interpreter/llvm-project/llvm/lib/Target/ARM/ThumbRegisterInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ThumbRegisterInfo.cpp,2,['access'],['access']
Security,"// If HashPDBContentsToGUID is true on the InfoStreamBuilder, Guid is filled; // with the computed PDB GUID on return.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/PDBFileBuilder.h:6,Hash,HashPDBContentsToGUID,6,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/PDBFileBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/PDBFileBuilder.h,1,['Hash'],['HashPDBContentsToGUID']
Security,"// If I is in the chain, we can tell whether it aliases ChainIt by checking; // what offset ChainIt accesses. This may be better than AA is able to do.; //; // We should really only have duplicate offsets for stores (the duplicate; // loads should be CSE'ed), but in case we have a duplicate load, we'll; // split the chain so we don't have to handle this case specially.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoadStoreVectorizer.cpp:100,access,accesses,100,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoadStoreVectorizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoadStoreVectorizer.cpp,1,['access'],['accesses']
Security,"// If MI is a call we might be able to outline it. We don't want to outline; // any calls that rely on the position of items on the stack. When we outline; // something containing a call, we have to emit a save and restore of LR in; // the outlined function. Currently, this always happens by saving LR to the; // stack. Thus, if we outline, say, half the parameters for a function call; // plus the call, then we'll break the callee's expectations for the layout; // of the stack.; //; // FIXME: Allow calls to functions which construct a stack frame, as long; // as they don't access arguments on the stack.; // FIXME: Figure out some way to analyze functions defined in other modules.; // We should be able to compute the memory usage based on the IR calling; // convention, even if we can't see the definition.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp:579,access,access,579,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp,1,['access'],['access']
Security,"// If Pred has no unreachable predecessors, get last def looking at; // IDoms. If, while walkings IDoms, any of these has an unreachable; // predecessor, then the incoming def can be any access.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/MemorySSA.cpp:187,access,access,187,interpreter/llvm-project/llvm/lib/Analysis/MemorySSA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/MemorySSA.cpp,1,['access'],['access']
Security,"// If Pred has unreachable predecessors, but has at least a Def, the; // incoming access can be the last Def in Pred, or it could have been; // optimized to LoE. After an update, though, the LoE may have been; // replaced by another access, so IncAcc may be any access.; // If Pred has unreachable predecessors and no Defs, incoming access; // should be LoE; However, after an update, it may be any access.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/MemorySSA.cpp:82,access,access,82,interpreter/llvm-project/llvm/lib/Analysis/MemorySSA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/MemorySSA.cpp,5,['access'],['access']
Security,"// If ROP protection is required, an extra instruction is added to compute a; // hash and then compare it to the hash stored in the prologue.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCFrameLowering.cpp:81,hash,hash,81,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCFrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCFrameLowering.cpp,2,['hash'],['hash']
Security,"// If ShouldEmitEHBlock returns true, then the eh info table; // will be emitted via `AIXException::endFunction`. Otherwise, we; // need to emit a dumy eh info table when VRs are saved. We could not; // consolidate these two places into one because there is no easy way; // to access register information in `AIXException` class.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCAsmPrinter.cpp:277,access,access,277,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCAsmPrinter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCAsmPrinter.cpp,1,['access'],['access']
Security,// If a PCH is loaded and validation is disabled for PCH then disable; // validation for the PCH and the modules it loads.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTReader.cpp:26,validat,validation,26,interpreter/llvm-project/clang/lib/Serialization/ASTReader.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTReader.cpp,2,['validat'],['validation']
Security,"// If a class has a single non-virtual base and does not introduce or override; // virtual member functions or fields, it will have the same layout as its base.; // This function returns the least derived such class.; //; // Casting an instance of a base class to such a derived class is technically; // undefined behavior, but it is a relatively common hack for introducing member; // functions on class instances with specific properties (e.g. llvm::Operator); // that works under most compilers and should not have security implications, so; // we allow it by default. It can be disabled with -fsanitize=cfi-cast-strict.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp:518,secur,security,518,interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp,1,['secur'],['security']
Security,"// If a function accepts an object by argument (which would of course be a; // temporary that isn't lifetime-extended), invalidate the object itself,; // not only other objects reachable from it. This is necessary because the; // destructor has access to the temporary object after the call.; // TODO: Support placement arguments once we start; // constructing them directly.; // TODO: This is unnecessary when there's no destructor, but that's; // currently hard to figure out.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/CallEvent.cpp:245,access,access,245,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/CallEvent.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/CallEvent.cpp,1,['access'],['access']
Security,"// If a function is both internal and has a single use, then it is; // extremely likely to get inlined in the future (it was probably; // exposed by an interleaved devirtualization pass).; // When preparing for LTO, liberally consider calls as inline; // candidates.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/CodeMetrics.cpp:138,expose,exposed,138,interpreter/llvm-project/llvm/lib/Analysis/CodeMetrics.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/CodeMetrics.cpp,1,['expose'],['exposed']
Security,// If a macro gets undefined at some point during preprocessing of the inputs; // it means that it isn't an exposed API and we should therefore not add a; // macro definition for it.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ExtractAPI/ExtractAPIConsumer.cpp:108,expose,exposed,108,interpreter/llvm-project/clang/lib/ExtractAPI/ExtractAPIConsumer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ExtractAPI/ExtractAPIConsumer.cpp,1,['expose'],['exposed']
Security,"// If a previous property access was constrained as nonnull, we hold; // on to that constraint (effectively inferring that all subsequent; // accesses on that code path can be inferred as nonnull). If the; // previous property access was *not* constrained as nonnull, then; // let's throw it away in favor of keeping the SVal associated with; // this more recent access.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/NullabilityChecker.cpp:26,access,access,26,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/NullabilityChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/NullabilityChecker.cpp,4,['access'],"['access', 'accesses']"
Security,"// If accessible add it back to the old node; // and do DecProcessed",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/src/TPacketizerAdaptive.cxx:6,access,accessible,6,proof/proofplayer/src/TPacketizerAdaptive.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/src/TPacketizerAdaptive.cxx,1,['access'],['accessible']
Security,"// If accessing a stand-alone ivar in a class method, this is an error.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:6,access,accessing,6,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['access'],['accessing']
Security,"// If alignment-assumption sanitizer is enabled, we do *not* add; // alignment attribute here, but emit normal alignment assumption,; // so the UBSAN check could function.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:27,sanitiz,sanitizer,27,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,1,['sanitiz'],['sanitizer']
Security,"// If all accesses were moved and only a trivial Phi remains, we try to remove; // that Phi. This is needed when From is going to be deleted.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/MemorySSAUpdater.cpp:10,access,accesses,10,interpreter/llvm-project/llvm/lib/Analysis/MemorySSAUpdater.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/MemorySSAUpdater.cpp,1,['access'],['accesses']
Security,"// If all the Operands of BUILD_VECTOR extract from same; // vector, then split the vector efficiently based on the maximum; // vector access index and adjust the VectorMask and; // VecIn accordingly.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:135,access,access,135,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['access'],['access']
Security,"// If an ObjC object is type, assuming that it is not a CF function and; // that it is an un-audited function.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ARCMigrate/ObjCMT.cpp:93,audit,audited,93,interpreter/llvm-project/clang/lib/ARCMigrate/ObjCMT.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ARCMigrate/ObjCMT.cpp,1,['audit'],['audited']
Security,"// If an accessor is specified, promote it to a comparator. In this case we; // can test whether the search value is (self-) comparable. We can’t do this; // for a comparator (except for specific, known comparators) because we can’t; // tell if the comparator is symmetric, and an asymmetric comparator can’t be; // used to test whether a single value is comparable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:9,access,accessor,9,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['access'],['accessor']
Security,"// If an override option has been passed in for interleaved accesses, use it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:60,access,accesses,60,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,2,['access'],['accesses']
Security,"// If another instruction between Pred and PTest accesses flags, don't remove; // the ptest or update the earlier instruction to modify them.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp:49,access,accesses,49,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp,1,['access'],['accesses']
Security,"// If any of the registers accessed are non-constant, conservatively assume; // the instruction is not rematerializable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TargetInstrInfo.cpp:27,access,accessed,27,interpreter/llvm-project/llvm/lib/CodeGen/TargetInstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TargetInstrInfo.cpp,1,['access'],['accessed']
Security,"// If authentication failure, check if other methods could be tried ...",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/rpdutils.cxx:6,authenticat,authentication,6,net/rpdutils/src/rpdutils.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/rpdutils.cxx,1,['authenticat'],['authentication']
Security,"// If authentication is required, we need to find out which library; // has to be loaded (preparation for near future, 9/7/05)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TSocket.cxx:6,authenticat,authentication,6,net/net/src/TSocket.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TSocket.cxx,1,['authenticat'],['authentication']
Security,"// If both accesses have unknown size, we can only check whether the base; // objects don't alias.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/BasicAliasAnalysis.cpp:11,access,accesses,11,interpreter/llvm-project/llvm/lib/Analysis/BasicAliasAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/BasicAliasAnalysis.cpp,1,['access'],['accesses']
Security,"// If both pointers are pointing into the same object and one of them; // accesses the entire object, then the accesses must overlap in some way.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/BasicAliasAnalysis.cpp:74,access,accesses,74,interpreter/llvm-project/llvm/lib/Analysis/BasicAliasAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/BasicAliasAnalysis.cpp,2,['access'],['accesses']
Security,"// If branch and commit are identical - e.g. ""v5-34-18"" - then we have; // a release build. Else specify the git hash this build was made from.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:113,hash,hash,113,core/base/src/TApplication.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx,2,['hash'],['hash']
Security,"// If destination buffer is a field region and access is in bound, do; // not invalidate its super region.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CStringChecker.cpp:47,access,access,47,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CStringChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CStringChecker.cpp,1,['access'],['access']
Security,"// If either pointer is accessed multiple times, there may not be a clear; // src/sink relation. Bail out for now.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp:24,access,accessed,24,interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp,1,['access'],['accessed']
Security,"// If given a uniform (i.e. non-varying) address, see if we can prove the; // access is safe within the loop w/o needing predication.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/Loads.cpp:78,access,access,78,interpreter/llvm-project/llvm/lib/Analysis/Loads.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/Loads.cpp,1,['access'],['access']
Security,"// If hash table is correct, we have at least chains with 0 length.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp:6,hash,hash,6,interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp,1,['hash'],['hash']
Security,"// If hoisting an invariant group, we only need to check that there; // is no store to the loaded pointer between the start of the loop,; // and the load (since all values must be the same).; // This can be checked in two conditions:; // 1) if the memoryaccess is outside the loop; // 2) the earliest access is at the loop header,; // if the memory loaded is the phi node",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LICM.cpp:301,access,access,301,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LICM.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LICM.cpp,1,['access'],['access']
Security,"// If in sequential (0-PROOF) mode validate the data set to get; // the number of entries",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/src/TProofPlayer.cxx:35,validat,validate,35,proof/proofplayer/src/TProofPlayer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/src/TProofPlayer.cxx,1,['validat'],['validate']
Security,"// If initialization order checking is disabled, a simple access to a; // dynamically initialized global is always valid.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/AddressSanitizer.cpp:58,access,access,58,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/AddressSanitizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/AddressSanitizer.cpp,1,['access'],['access']
Security,"// If it accesses SPL, BPL, SIL, or DIL, then it requires a REX prefix.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/MCTargetDesc/X86MCCodeEmitter.cpp:9,access,accesses,9,interpreter/llvm-project/llvm/lib/Target/X86/MCTargetDesc/X86MCCodeEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/MCTargetDesc/X86MCCodeEmitter.cpp,1,['access'],['accesses']
Security,"// If it has a trivial copy constructor it is accessible and it is callable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/ValueExtractionSynthesizer.cpp:46,access,accessible,46,interpreter/cling/lib/Interpreter/ValueExtractionSynthesizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/ValueExtractionSynthesizer.cpp,1,['access'],['accessible']
Security,"// If it is accessed as got-indirect, we need an extra LWZ/LD to load; // the address.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp:12,access,accessed,12,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,1,['access'],['accessed']
Security,// If it is an atomic and alignment is less than the size then we will; // introduce the unaligned memory access which will be later transformed; // into libcall in CodeGen. This is not evident performance gain so disable; // it now.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCalls.cpp:106,access,access,106,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCalls.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCalls.cpp,1,['access'],['access']
Security,"// If it is not memory access, skip the check.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ImplicitNullChecks.cpp:23,access,access,23,interpreter/llvm-project/llvm/lib/CodeGen/ImplicitNullChecks.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ImplicitNullChecks.cpp,1,['access'],['access']
Security,"// If it is small or large code model, module locals are accessed; // indirectly by loading their address from .toc/.got.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp:57,access,accessed,57,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,1,['access'],['accessed']
Security,"// If it isn't found, look for ""."", which would have been added; // (followed by a hash) when the symbol was promoted during module; // splitting if it was defined in one part and used in the other.; // Try looking up the symbol name before the suffix.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lto2/llvm-lto2.cpp:83,hash,hash,83,interpreter/llvm-project/llvm/tools/llvm-lto2/llvm-lto2.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lto2/llvm-lto2.cpp,1,['hash'],['hash']
Security,// If it isn't in the InstInputs list it is a subexpr incorporated into the; // address. Validate that it is phi translatable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/PHITransAddr.cpp:89,Validat,Validate,89,interpreter/llvm-project/llvm/lib/Analysis/PHITransAddr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/PHITransAddr.cpp,1,['Validat'],['Validate']
Security,"// If it's a exposed use, add it to the call instruction.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineOutliner.cpp:13,expose,exposed,13,interpreter/llvm-project/llvm/lib/CodeGen/MachineOutliner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineOutliner.cpp,1,['expose'],['exposed']
Security,"// If it's a field, require the containing struct to have a; // complete definition so that we can compute the layout.; //; // This can happen in C++11 onwards, either by naming the member; // in a way that is not transformed into a member access expression; // (in an unevaluated operand, for instance), or by naming the member; // in a trailing-return-type.; //; // For the record, since __alignof__ on expressions is a GCC; // extension, GCC seems to permit this but always gives the; // nonsensical answer 0.; //; // We don't really need the layout here --- we could instead just; // directly check for all the appropriate alignment-lowing; // attributes --- but that would require duplicating a lot of; // logic that just isn't worth duplicating for such a marginal; // use-case.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:240,access,access,240,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['access'],['access']
Security,"// If it's a static member, it also encodes the access level.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp:48,access,access,48,interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp,1,['access'],['access']
Security,"// If it's not accessed by the initializer, try to emit the; // initialization with a copy or move.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:15,access,accessed,15,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,1,['access'],['accessed']
Security,"// If location is undefined, conservatively return starting access.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/MemorySSA.cpp:60,access,access,60,interpreter/llvm-project/llvm/lib/Analysis/MemorySSA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/MemorySSA.cpp,1,['access'],['access']
Security,"// If merged variables doesn't have external linkage, we needn't to expose; // the symbol after merging.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalMerge.cpp:68,expose,expose,68,interpreter/llvm-project/llvm/lib/CodeGen/GlobalMerge.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalMerge.cpp,1,['expose'],['expose']
Security,"// If needed, insert __asan_init before checking for SanitizeAddress attr.; // This function needs to be called even if the function body is not; // instrumented.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/AddressSanitizer.cpp:53,Sanitiz,SanitizeAddress,53,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/AddressSanitizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/AddressSanitizer.cpp,1,['Sanitiz'],['SanitizeAddress']
Security,"// If no base type been assigned for the base access, then try to generate; // one for this base lvalue.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:46,access,access,46,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,1,['access'],['access']
Security,"// If no hash symbol then iterate to detect symbol; // We Iterate only if BloomFilter and/or SymbolHashTable are not supported.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/DynamicLibraryManagerSymbol.cpp:9,hash,hash,9,interpreter/cling/lib/Interpreter/DynamicLibraryManagerSymbol.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/DynamicLibraryManagerSymbol.cpp,1,['hash'],['hash']
Security,"// If no location is known, conservatively assume anything can be; // accessed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/FunctionAttrs.cpp:70,access,accessed,70,interpreter/llvm-project/llvm/lib/Transforms/IPO/FunctionAttrs.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/FunctionAttrs.cpp,1,['access'],['accessed']
Security,"// If non-zero, at least this many more exposes",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/recorder/inc/TRecorder.h:40,expose,exposes,40,gui/recorder/inc/TRecorder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/recorder/inc/TRecorder.h,1,['expose'],['exposes']
Security,"// If none of the instruction has FunctionSample, we choose to return zero; // value sample to indicate the BB is cold. This could happen when the; // instruction is from inlinee and no profile data is found.; // FIXME: This should not be affected by the source drift issue as 1) if the; // newly added function is top-level inliner, it won't match the CFG checksum; // in the function profile or 2) if it's the inlinee, the inlinee should have; // a profile, otherwise it wouldn't be inlined. For non-probe based profile,; // we can improve it by adding a switch for profile-sample-block-accurate for; // block level counts in the future.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SampleProfileLoaderBaseImpl.h:357,checksum,checksum,357,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SampleProfileLoaderBaseImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SampleProfileLoaderBaseImpl.h,1,['checksum'],['checksum']
Security,"// If not 1/2/4/8 bytes, exit.; // If it is an atomic and alignment is less than the size then we will; // introduce the unaligned memory access which will be later transformed; // into libcall in CodeGen. This is not evident performance gain so disable; // it now.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCalls.cpp:138,access,access,138,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCalls.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCalls.cpp,1,['access'],['access']
Security,"// If old version, setup authentication related stuff",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofServ.cxx:25,authenticat,authentication,25,proof/proof/src/TProofServ.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofServ.cxx,1,['authenticat'],['authentication']
Security,"// If one of the accessed objects may be a subobject of the other, then such; // accesses may alias.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/TypeBasedAliasAnalysis.cpp:17,access,accessed,17,interpreter/llvm-project/llvm/lib/Analysis/TypeBasedAliasAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/TypeBasedAliasAnalysis.cpp,2,['access'],"['accessed', 'accesses']"
Security,"// If one the accesses may be before the accessed pointer, canonicalize this; // by using unknown after-pointer sizes for both accesses. This is; // equivalent, because regardless of which pointer is lower, one of them; // will always came after the other, as long as the underlying objects aren't; // disjoint. We do this so that the rest of BasicAA does not have to deal; // with accesses before the base pointer, and to improve cache utilization by; // merging equivalent states.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/BasicAliasAnalysis.cpp:14,access,accesses,14,interpreter/llvm-project/llvm/lib/Analysis/BasicAliasAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/BasicAliasAnalysis.cpp,4,['access'],"['accessed', 'accesses']"
Security,"// If only a string table subsection is given, we find a checksums subsection.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/StringsAndChecksums.h:57,checksum,checksums,57,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/StringsAndChecksums.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/StringsAndChecksums.h,1,['checksum'],['checksums']
Security,"// If optimising for minimum size, clear FP registers unconditionally.; // Otherwise, check the CONTROL.SFPA (Secure Floating-Point Active) bit and; // don't clear them if they belong to the non-secure state.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMExpandPseudoInsts.cpp:110,Secur,Secure,110,interpreter/llvm-project/llvm/lib/Target/ARM/ARMExpandPseudoInsts.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMExpandPseudoInsts.cpp,2,"['Secur', 'secur']","['Secure', 'secure']"
Security,"// If option ""READ"" test existence and access",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TFile.cxx:39,access,access,39,io/io/src/TFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TFile.cxx,1,['access'],['access']
Security,"// If our MemoryLeader is not our defining access, add a use to the; // MemoryLeader, so that we get reprocessed when it changes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/NewGVN.cpp:43,access,access,43,interpreter/llvm-project/llvm/lib/Transforms/Scalar/NewGVN.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/NewGVN.cpp,1,['access'],['access']
Security,"// If outer levels (levels enclosing the loop being unroll-and-jammed) have a; // non-equal direction, then the locations accessed in the inner levels cannot; // overlap in memory. We assumes the indexes never overlap into neighboring; // dimensions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopUnrollAndJam.cpp:122,access,accessed,122,interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopUnrollAndJam.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopUnrollAndJam.cpp,1,['access'],['accessed']
Security,"// If possible, check that the vptr indicates that there is a subobject of; // type Ty at offset zero within this object.; //; // C++11 [basic.life]p5,6:; // [For storage which does not refer to an object within its lifetime]; // The program has undefined behavior if:; // -- the [pointer or glvalue] is used to access a non-static data member; // or call a non-static member function",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:312,access,access,312,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,1,['access'],['access']
Security,"// If queried with a precise location size, we assume that location size to be; // accessed, thus valid.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/BasicAliasAnalysis.cpp:83,access,accessed,83,interpreter/llvm-project/llvm/lib/Analysis/BasicAliasAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/BasicAliasAnalysis.cpp,1,['access'],['accessed']
Security,"// If return address signing is enabled, tail calls are emitted as follows:; //; // ```; // <authenticate LR>; // <check LR>; // TCRETURN ; the callee may sign and spill the LR in its prologue; // ```; //; // LR may require explicit checking because if FEAT_FPAC is not implemented; // and LR was tampered with, then `<authenticate LR>` will not generate an; // exception on its own. Later, if the callee spills the signed LR value and; // neither FEAT_PAuth2 nor FEAT_EPAC are implemented, the valid PAC replaces; // the higher bits of LR thus hiding the authentication failure.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64Subtarget.cpp:93,authenticat,authenticate,93,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64Subtarget.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64Subtarget.cpp,3,['authenticat'],"['authenticate', 'authentication']"
Security,"// If sanitizer is enabled, disable OPT_ffine_grained_bitfield_accesses.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/CompilerInvocation.cpp:6,sanitiz,sanitizer,6,interpreter/llvm-project/clang/lib/Frontend/CompilerInvocation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/CompilerInvocation.cpp,1,['sanitiz'],['sanitizer']
Security,"// If sanitizing memory to check for use-after-dtor, do not emit as; // an alias, unless this class owns no members.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXX.cpp:6,sanitiz,sanitizing,6,interpreter/llvm-project/clang/lib/CodeGen/CGCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXX.cpp,1,['sanitiz'],['sanitizing']
Security,"// If so, the canonical type of this TST is the injected; // class name type of the record we just found.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp:48,inject,injected,48,interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp,1,['inject'],['injected']
Security,"// If so, we have a match in the hash table. Construct the destination; // path.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/HeaderMap.cpp:33,hash,hash,33,interpreter/llvm-project/clang/lib/Lex/HeaderMap.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/HeaderMap.cpp,1,['hash'],['hash']
Security,"// If start of the dead access is ""before"" end of the killing access; // then accesses overlap.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/DeadStoreElimination.cpp:24,access,access,24,interpreter/llvm-project/llvm/lib/Transforms/Scalar/DeadStoreElimination.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/DeadStoreElimination.cpp,3,['access'],"['access', 'accesses']"
Security,"// If start of the killing access is ""before"" end of the dead access then; // accesses overlap.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/DeadStoreElimination.cpp:27,access,access,27,interpreter/llvm-project/llvm/lib/Transforms/Scalar/DeadStoreElimination.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/DeadStoreElimination.cpp,3,['access'],"['access', 'accesses']"
Security,"// If the Branch Protection attribute is missing, validate the target; // Architecture attribute against Branch Protection command line; // settings.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/ARM.cpp:50,validat,validate,50,interpreter/llvm-project/clang/lib/CodeGen/Targets/ARM.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/ARM.cpp,1,['validat'],['validate']
Security,"// If the FP settings are set to the ""strict"" model, then; // FENV access is set to true. (ffp-model=strict)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h:67,access,access,67,interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h,1,['access'],['access']
Security,"// If the GEP offset is out-of-bounds, or is non-constant and so has to be; // assumed to be potentially out-of-bounds, then any memory access that; // would use it could also be out-of-bounds meaning stack protection is; // required.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/StackProtector.cpp:136,access,access,136,interpreter/llvm-project/llvm/lib/CodeGen/StackProtector.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/StackProtector.cpp,1,['access'],['access']
Security,"// If the OPFL_MemRefs glue is set on this node, slap all of the; // accumulated memrefs onto it.; //; // FIXME: This is vastly incorrect for patterns with multiple outputs; // instructions that access memory and for ComplexPatterns that match; // loads.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp:195,access,access,195,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,1,['access'],['access']
Security,"// If the PE header had a checksum, clear it, since it isn't valid; // any longer. (We don't calculate a new one.)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/COFF/COFFWriter.cpp:26,checksum,checksum,26,interpreter/llvm-project/llvm/lib/ObjCopy/COFF/COFFWriter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/COFF/COFFWriter.cpp,1,['checksum'],['checksum']
Security,"// If the SCC accesses argmem, add recursive accesses resulting from that.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/FunctionAttrs.cpp:14,access,accesses,14,interpreter/llvm-project/llvm/lib/Transforms/IPO/FunctionAttrs.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/FunctionAttrs.cpp,2,['access'],['accesses']
Security,"// If the Virtual Function Elim module flag is present and set to zero, then; // the vcall_visibility metadata was inserted for another optimization (WPD); // and we may not have type checked loads on all accesses to the vtable.; // Don't attempt VFE in that case.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/GlobalDCE.cpp:205,access,accesses,205,interpreter/llvm-project/llvm/lib/Transforms/IPO/GlobalDCE.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/GlobalDCE.cpp,1,['access'],['accesses']
Security,"// If the access is to a pointer that may or may not be the associated; // value, e.g. due to a PHI, we cannot assume it will be read.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp:10,access,access,10,interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp,1,['access'],['access']
Security,"// If the access is to a pointer that may or may not be the associated; // value, e.g. due to a PHI, we cannot assume it will be written.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp:10,access,access,10,interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp,1,['access'],['access']
Security,"// If the access path is public, it's accessible everywhere.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaAccess.cpp:10,access,access,10,interpreter/llvm-project/clang/lib/Sema/SemaAccess.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaAccess.cpp,2,['access'],"['access', 'accessible']"
Security,"// If the access to the base object is through a field of the subobject's; // type, then this may be an access to that field. To check for that we start; // from the base type, follow the edge with the correct offset in the type DAG; // and adjust the offset until we reach the field type or until we reach the; // access type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/TypeBasedAliasAnalysis.cpp:10,access,access,10,interpreter/llvm-project/llvm/lib/Analysis/TypeBasedAliasAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/TypeBasedAliasAnalysis.cpp,3,['access'],['access']
Security,"// If the access to this base is worse than the access we have to; // the declaration, remember it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaAccess.cpp:10,access,access,10,interpreter/llvm-project/clang/lib/Sema/SemaAccess.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaAccess.cpp,2,['access'],['access']
Security,"// If the address displacement is an immediate, it should not affect the; // hash so that memory operands which differ only be immediate displacement; // would have the same hash. If the address displacement is something else,; // we should reflect symbol/index/address in the hash.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86OptimizeLEAs.cpp:77,hash,hash,77,interpreter/llvm-project/llvm/lib/Target/X86/X86OptimizeLEAs.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86OptimizeLEAs.cpp,3,['hash'],['hash']
Security,"// If the alternative context does not correspond to the original DWO object; // (different hashes), the below 'getDWOCompileUnitForHash' call will catch; // the issue, with a returned null context.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/DWARF/DWARFUnit.cpp:92,hash,hashes,92,interpreter/llvm-project/llvm/lib/DebugInfo/DWARF/DWARFUnit.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/DWARF/DWARFUnit.cpp,1,['hash'],['hashes']
Security,// If the argument is readnone we are done as there are no accesses via the; // argument.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp:59,access,accesses,59,interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp,1,['access'],['accesses']
Security,"// If the array being accessed has a ""counted_by"" attribute, generate; // bounds checking code. The ""count"" field is at the top level of the; // struct or in an anonymous struct, that's also at the top level. Future; // expansions may allow the ""count"" to reside at any place in the struct,; // but the value of ""counted_by"" will be a ""simple"" path to the count,; // i.e. ""a.b.count"", so we shouldn't need the full force of EmitLValue or; // similar to emit the correct GEP.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:22,access,accessed,22,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,1,['access'],['accessed']
Security,"// If the atomicrmw address does not alias the location, it does not access; // it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/AliasAnalysis.cpp:69,access,access,69,interpreter/llvm-project/llvm/lib/Analysis/AliasAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/AliasAnalysis.cpp,1,['access'],['access']
Security,"// If the base object has a direct or indirect field of the subobject's type,; // then this may be an access to that field. We need this to check now that; // we support aggregates as access types.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/TypeBasedAliasAnalysis.cpp:102,access,access,102,interpreter/llvm-project/llvm/lib/Analysis/TypeBasedAliasAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/TypeBasedAliasAnalysis.cpp,2,['access'],['access']
Security,"// If the base object is of the least common type, then this may be an access; // to its subobject.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/TypeBasedAliasAnalysis.cpp:71,access,access,71,interpreter/llvm-project/llvm/lib/Analysis/TypeBasedAliasAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/TypeBasedAliasAnalysis.cpp,1,['access'],['access']
Security,"// If the base of the member access expression is an implicit 'this', don't; // visit it.; // FIXME: If we ever want to show these implicit accesses, this will be; // unfortunate. However, clang_getCursor() relies on this behavior.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp:29,access,access,29,interpreter/llvm-project/clang/tools/libclang/CIndex.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp,2,['access'],"['access', 'accesses']"
Security,"// If the base type is an atomic type, this access is undefined behavior per; // C11 6.5.2.3p5. Instead of giving a typecheck error, we'll warn the user; // about the UB and recover by converting the atomic lvalue into a non-atomic; // lvalue. Because this is inherently unsafe as an atomic operation, the; // warning defaults to an error.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprMember.cpp:44,access,access,44,interpreter/llvm-project/clang/lib/Sema/SemaExprMember.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprMember.cpp,1,['access'],['access']
Security,"// If the bug uniqueing location exists, use it for the hash.; // For example, this ensures that two leaks reported on the same line; // will have different issue_hashes and that the hash will identify; // the leak location even after code is added between the allocation; // site and the end of scope (leak report location).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/PlistDiagnostics.cpp:56,hash,hash,56,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/PlistDiagnostics.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/PlistDiagnostics.cpp,2,['hash'],['hash']
Security,"// If the call accesses captured memory (currently part of ""other"") and; // an argument is captured (currently not tracked), then it may also; // access argument memory.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/FunctionAttrs.cpp:15,access,accesses,15,interpreter/llvm-project/llvm/lib/Transforms/IPO/FunctionAttrs.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/FunctionAttrs.cpp,2,['access'],"['access', 'accesses']"
Security,"// If the call doesn't access memory, we're done.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/FunctionAttrs.cpp:23,access,access,23,interpreter/llvm-project/llvm/lib/Transforms/IPO/FunctionAttrs.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/FunctionAttrs.cpp,1,['access'],['access']
Security,"// If the call is malloc/calloc like, we can assume that it doesn't; // modify any IR visible value. This is only valid because we assume these; // routines do not read values visible in the IR. TODO: Consider special; // casing realloc and strdup routines which access only their arguments as; // well. Or alternatively, replace all of this with inaccessiblememonly once; // that's implemented fully.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/BasicAliasAnalysis.cpp:263,access,access,263,interpreter/llvm-project/llvm/lib/Analysis/BasicAliasAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/BasicAliasAnalysis.cpp,1,['access'],['access']
Security,"// If the callee isn't defined, it is not of security concern.; // Check and evaluate the call.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CheckSecuritySyntaxOnly.cpp:45,secur,security,45,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CheckSecuritySyntaxOnly.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CheckSecuritySyntaxOnly.cpp,1,['secur'],['security']
Security,"// If the class is properly aligned, assume the target offset is, too.; //; // This actually isn't necessarily the right thing to do --- if the; // class is a complete object, but it's only properly aligned for a; // base subobject, then the alignments of things relative to it are; // probably off as well. (Note that this requires the alignment of; // the target to be greater than the NV alignment of the derived; // class.); //; // However, our approach to this kind of under-alignment can only; // ever be best effort; after all, we're never going to propagate; // alignments through variables or parameters. Note, in particular,; // that constructing a polymorphic type in an address that's less; // than pointer-aligned will generally trap in the constructor,; // unless we someday add some sort of attribute to change the; // assumed alignment of 'this'. So our goal here is pretty much; // just to allow the user to explicitly say that a pointer is; // under-aligned and then safely access its fields and vtables.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp:992,access,access,992,interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp,1,['access'],['access']
Security,"// If the clobbering access is LiveOnEntry, no instructions between them; // can modify the memory location.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/DeadStoreElimination.cpp:21,access,access,21,interpreter/llvm-project/llvm/lib/Transforms/Scalar/DeadStoreElimination.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/DeadStoreElimination.cpp,1,['access'],['access']
Security,"// If the cmpxchg address does not alias the location, it does not access; // it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/AliasAnalysis.cpp:67,access,access,67,interpreter/llvm-project/llvm/lib/Analysis/AliasAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/AliasAnalysis.cpp,1,['access'],['access']
Security,"// If the data variable is not referenced by code (if we don't emit; // @llvm.instrprof.value.profile, NS will be 0), and the counter keeps the; // data variable live under linker GC, the data variable can be private. This; // optimization applies to ELF.; //; // On COFF, a comdat leader cannot be local so we require DataReferencedByCode; // to be false.; //; // If profd is in a deduplicate comdat, NS==0 with a hash suffix guarantees; // that other copies must have the same CFG and cannot have value profiling.; // If no hash suffix, other profd copies may be referenced by code.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/InstrProfiling.cpp:415,hash,hash,415,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/InstrProfiling.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/InstrProfiling.cpp,2,['hash'],['hash']
Security,"// If the dead access ends ""not after"" the killing access then the; // dead one is completely overwritten by the killing one.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/DeadStoreElimination.cpp:15,access,access,15,interpreter/llvm-project/llvm/lib/Transforms/Scalar/DeadStoreElimination.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/DeadStoreElimination.cpp,2,['access'],['access']
Security,"// If the decl has a name, make it accessible in the current scope.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:35,access,accessible,35,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['access'],['accessible']
Security,"// If the decl must be emitted then it will be in the library.; // If not, we must expose it to CodeGen now because it might; // not be in the library. Does this correspond to a weak symbol; // by definition?",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/DeclCollector.cpp:83,expose,expose,83,interpreter/cling/lib/Interpreter/DeclCollector.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/DeclCollector.cpp,1,['expose'],['expose']
Security,"// If the declaration is a constant value, emit it here even; // though the declaration was not evaluated in the current scope.; // The access mode can only be read in this case.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp:136,access,access,136,interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp,1,['access'],['access']
Security,"// If the declaration is a private member of a base class, there; // is no level of friendship in derived classes that can make it; // accessible.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaAccess.cpp:135,access,accessible,135,interpreter/llvm-project/clang/lib/Sema/SemaAccess.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaAccess.cpp,1,['access'],['accessible']
Security,"// If the declaration is accessible when named in its declaring; // class, then we must be constrained by the path.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaAccess.cpp:25,access,accessible,25,interpreter/llvm-project/clang/lib/Sema/SemaAccess.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaAccess.cpp,1,['access'],['accessible']
Security,"// If the declaration is public in a private nested struct, make the declaration; // private nonetheless, as for outside access (e.g. ROOT I/O) it's private:; // NOTE: this uses `GetDecl()`, to capture the access of the UsingShadowDecl,; // which is defined in the derived class and might differ from the access of the decl; // in the base class.; // TODO: move this somewhere such that TClingMethodInfo can use this, too.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TClingDataMemberInfo.cxx:121,access,access,121,core/metacling/src/TClingDataMemberInfo.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TClingDataMemberInfo.cxx,3,['access'],['access']
Security,"// If the default clause is unreachable, propagate that knowledge into; // JTH->FallthroughUnreachable which will use it to suppress the range; // check.; //; // However, don't do this if we're doing branch target enforcement,; // because a table branch _without_ a range check can be a tempting JOP; // gadget - out-of-bounds inputs that are impossible in correct; // execution become possible again if an attacker can influence the; // control flow. So if an attacker doesn't already have a BTI bypass; // available, we don't want them to be able to get one out of this; // table branch.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:407,attack,attacker,407,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,2,['attack'],['attacker']
Security,"// If the defining access is a MemoryPhi, get the incoming; // value for the pre-header as defining access.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp:19,access,access,19,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp,2,['access'],['access']
Security,"// If the destination integer type is not the intptr_t type for this target,; // do a ptrtoint to intptr_t then do a trunc or zext. This allows the cast; // to be exposed to other transforms.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp:163,expose,exposed,163,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp,1,['expose'],['exposed']
Security,"// If the distance carried by the unrolled loop is 0, then after unrolling; // that distance will become non-zero resulting in non-overlapping accesses in; // the inner loops.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopUnrollAndJam.cpp:143,access,accesses,143,interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopUnrollAndJam.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopUnrollAndJam.cpp,1,['access'],['accesses']
Security,"// If the element access is to the element itself and not to tail padding,; // read the bytes from the element.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ConstantFolding.cpp:18,access,access,18,interpreter/llvm-project/llvm/lib/Analysis/ConstantFolding.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ConstantFolding.cpp,1,['access'],['access']
Security,"// If the element is just cached and not repeat, we need to inject an element; // to insure the writing.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TStreamerInfo.cxx:60,inject,inject,60,io/io/src/TStreamerInfo.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TStreamerInfo.cxx,2,['inject'],['inject']
Security,"// If the enumeration is not anonymous we put ""scopeName::Enumeration"" in a TString,; // which will be hashed with MD5 later.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:103,hash,hashed,103,core/base/src/TApplication.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx,1,['hash'],['hashed']
Security,"// If the expression doesn't have :upper16:, :lower16: on it, it's just a; // plain immediate expression, previously those evaluated to the lower 16 bits; // of the expression regardless of whether we have a movt or a movw, but that; // led to misleadingly results. This is disallowed in the AsmParser in; // validateInstruction() so this should never happen. The same holds for; // thumb1 :upper8_15:, :upper0_7:, lower8_15: or :lower0_7: with movs or adds.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/MCTargetDesc/ARMMCCodeEmitter.cpp:309,validat,validateInstruction,309,interpreter/llvm-project/llvm/lib/Target/ARM/MCTargetDesc/ARMMCCodeEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/MCTargetDesc/ARMMCCodeEmitter.cpp,1,['validat'],['validateInstruction']
Security,"// If the final access types have different roots, they're part of different; // potentially unrelated type systems, so we must be conservative.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/TypeBasedAliasAnalysis.cpp:16,access,access,16,interpreter/llvm-project/llvm/lib/Analysis/TypeBasedAliasAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/TypeBasedAliasAnalysis.cpp,1,['access'],['access']
Security,"// If the final address of the GEP is a legal addressing mode for the given; // access type, then we can fold it into its users.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfoImpl.h:80,access,access,80,interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfoImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfoImpl.h,1,['access'],['access']
Security,"// If the full hash value matches, check deeply for a match. The common; // case here is that we are only looking at the buckets (for item info; // being non-null and for the full hash value) not at the items. This; // is important for cache locality.; // Do the comparison like this because Name isn't necessarily; // null-terminated!",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/StringMap.cpp:15,hash,hash,15,interpreter/llvm-project/llvm/lib/Support/StringMap.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/StringMap.cpp,2,['hash'],['hash']
Security,"// If the full hash value matches, check deeply for a match. The common; // case here is that we are only looking at the buckets (for item info; // being non-null and for the full hash value) not at the items. This; // is important for cache locality.; // Do the comparison like this because NameStart isn't necessarily; // null-terminated!",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/StringMap.cpp:15,hash,hash,15,interpreter/llvm-project/llvm/lib/Support/StringMap.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/StringMap.cpp,2,['hash'],['hash']
Security,"// If the function makes any unknown call, assume the worst case that it can; // access all variables accessed by functions whose address escaped",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp:81,access,access,81,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp,2,['access'],"['access', 'accessed']"
Security,"// If the function requires the implicit arg pointer due to sanitizers,; // assume it's needed even if explicitly marked as not requiring it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUAttributor.cpp:60,sanitiz,sanitizers,60,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUAttributor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUAttributor.cpp,1,['sanitiz'],['sanitizers']
Security,// If the global may be defined differently in another compilation unit; // then don't warn about funky memory accesses.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/Lint.cpp:111,access,accesses,111,interpreter/llvm-project/llvm/lib/Analysis/Lint.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/Lint.cpp,1,['access'],['accesses']
Security,"// If the group is reverse, adjust the index to refer to the last vector lane; // instead of the first. We adjust the index from the first vector lane,; // rather than directly getting the pointer for lane VF - 1, because the; // pointer operand of the interleaved access is supposed to be uniform. For; // uniform instructions, we're only required to generate a value for the; // first vector lane in each unroll iteration.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:265,access,access,265,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,1,['access'],['access']
Security,"// If the hash isn't in the cache, call a runtime handler to perform the; // hard work of checking whether the vptr is for an object of the right; // type. This will either fill in the cache and return, or produce a; // diagnostic.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:10,hash,hash,10,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,1,['hash'],['hash']
Security,"// If the hash of top-level entities differs from the hash of the top-level; // entities the last time we rebuilt the preamble, clear out the completion; // cache.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/ASTUnit.cpp:10,hash,hash,10,interpreter/llvm-project/clang/lib/Frontend/ASTUnit.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/ASTUnit.cpp,2,['hash'],['hash']
Security,"// If the hash table is now more than 3/4 full, or if fewer than 1/8 of; // the buckets are empty (meaning that many are filled with tombstones),; // grow/rehash the table.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/StringMap.cpp:10,hash,hash,10,interpreter/llvm-project/llvm/lib/Support/StringMap.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/StringMap.cpp,1,['hash'],['hash']
Security,"// If the hash value matches the previous value or the next one, we must; // consider merging it. Otherwise it is dropped and never considered again.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/MergeFunctions.cpp:10,hash,hash,10,interpreter/llvm-project/llvm/lib/Transforms/IPO/MergeFunctions.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/MergeFunctions.cpp,1,['hash'],['hash']
Security,"// If the header is includable and has an include guard, assume the; // intended way to expose its contents is by #include, not by importing a; // module that transitively includes it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/PPDirectives.cpp:88,expose,expose,88,interpreter/llvm-project/clang/lib/Lex/PPDirectives.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/PPDirectives.cpp,1,['expose'],['expose']
Security,"// If the immediate offset is negative and within certain range, the base; // address cannot also be negative. If the base is also negative, the sum; // would be either negative or much larger than the valid range of scratch; // memory a thread can access.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUInstructionSelector.cpp:249,access,access,249,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUInstructionSelector.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUInstructionSelector.cpp,4,['access'],['access']
Security,"// If the indexed reference is not 'consecutive' the cost is proportional to; // the trip count and the depth of the dimension which the subject loop; // subscript is accessing. We try to estimate this by multiplying the cost; // by the trip counts of loops corresponding to the inner dimensions. For; // example, given the indexed reference 'A[i][j][k]', and assuming the; // i-loop is in the innermost position, the cost would be equal to the; // iterations of the i-loop multiplied by iterations of the j-loop.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopCacheAnalysis.cpp:167,access,accessing,167,interpreter/llvm-project/llvm/lib/Analysis/LoopCacheAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopCacheAnalysis.cpp,1,['access'],['accessing']
Security,"// If the initializer for the base (other than the constructor; // itself) accesses 'this' in any way, we need to initialize the; // vtables.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp:75,access,accesses,75,interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp,1,['access'],['accesses']
Security,"// If the input is an extend_invec and the SimplifyDemandedBits call didn't; // convert it to any_extend_invec, due to the LegalOperations check, do the; // conversion directly to a vector shuffle manually. This exposes combine; // opportunities missed by combineEXTEND_VECTOR_INREG not calling; // combineX86ShufflesRecursively on SSE4.1 targets.; // FIXME: This is basically a hack around several other issues related to; // ANY_EXTEND_VECTOR_INREG.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:212,expose,exposes,212,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['expose'],['exposes']
Security,"// If the instruction can be easily simplified then do so now in preference; // to value numbering it. Value numbering often exposes redundancies, for; // example if it determines that %y is equal to %x then the instruction; // ""%z = and i32 %x, %y"" becomes ""%z = and i32 %x, %x"" which we now simplify.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/GVN.cpp:125,expose,exposes,125,interpreter/llvm-project/llvm/lib/Transforms/Scalar/GVN.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/GVN.cpp,1,['expose'],['exposes']
Security,"// If the instruction cannot be reach from the access, the latter does not; // interfere with what the instruction reads.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp:47,access,access,47,interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp,1,['access'],['access']
Security,"// If the instruction cannot reach the access, the former does not; // interfere with what the access reads.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp:39,access,access,39,interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp,2,['access'],['access']
Security,"// If the instruction does not access memory and has no side effects, it has; // no additional dependencies.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyRegStackify.cpp:31,access,access,31,interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyRegStackify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyRegStackify.cpp,1,['access'],['access']
Security,"// If the integer sign change sanitizer is enabled,; // and we are truncating from larger unsigned type to smaller signed type,; // let that next sanitizer deal with it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:30,sanitiz,sanitizer,30,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,2,['sanitiz'],['sanitizer']
Security,"// If the ivar's size exceeds the architecture's maximum atomic; // access size, we have to use CopyStruct.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:68,access,access,68,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,1,['access'],['access']
Security,// If the kernel accesses a variable that is going to be stored in the; // module instance through a call then that kernel needs to allocate the; // module instance,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp:17,access,accesses,17,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp,1,['access'],['accesses']
Security,"// If the lifetime.start covers a whole alloca (as it almost always; // does) and we're querying a pointer based on that alloca, then we know; // the memory is definitely undef, regardless of how exactly we alias.; // The size also doesn't matter, as an out-of-bounds access would be UB.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/MemCpyOptimizer.cpp:268,access,access,268,interpreter/llvm-project/llvm/lib/Transforms/Scalar/MemCpyOptimizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/MemCpyOptimizer.cpp,1,['access'],['access']
Security,// If the load is conditional we can't hoist its 0-iteration instance to; // the preheader because that would make it unconditional. Thus we would; // access a memory location that the original loop did not access.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopLoadElimination.cpp:151,access,access,151,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopLoadElimination.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopLoadElimination.cpp,2,['access'],['access']
