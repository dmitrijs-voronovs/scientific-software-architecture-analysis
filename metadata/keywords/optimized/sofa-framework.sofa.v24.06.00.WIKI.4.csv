quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,filename,wiki,url,total_similar,target_keywords,target_matched_words
Deployability,"t the current value is the default for this Data. More...;  ; void forceSet ();  Reset the isSet flag to true, to indicate that the current value has been modified. More...;  ; int getCounter () const;  ;  Public Member Functions inherited from sofa::core::objectmodel::DDGNode;  DDGNode ();  Constructor. More...;  ; virtual ~DDGNode ();  Destructor. Automatically remove remaining links. More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void delInput (DDGNode *n);  Remove an input from this node. More...;  ; void addOutput (DDGNode *n);  Add a new output to this node. More...;  ; void delOutput (DDGNode *n);  Remove an output from this node. More...;  ; const DDGLinkContainer & getInputs ();  Get the list of inputs for this DDGNode. More...;  ; const DDGLinkContainer & getOutputs ();  Get the list of outputs for this DDGNode. More...;  ; bool isDirty () const;  Returns true if the DDGNode needs to be updated. More...;  ; virtual void setDirtyValue ();  Indicate the value needs to be updated. More...;  ; virtual void setDirtyOutputs ();  Indicate the outputs needs to be updated. This method must be called after changing the value of this node. More...;  ; void cleanDirty ();  Set dirty flag to false. More...;  ; virtual void notifyEndEdit ();  Notify links that the DGNode has been modified. More...;  ; void updateIfDirty () const;  Utility method to call update if necessary. This method should be called before reading of writing the value of this node. More...;  . Protected Member Functions; virtual void swapPostProcess (Index i1, Index i2);  ; virtual void removePostProcess (sofa::Index elemId);  ; virtual void addPostProcess (sofa::Index dataLastId);  ; virtual void updateLastIndex (Index posLastIndex, Index newGlobalId);  ;  Protected Member Functions inherited from sofa::core::topology::TopologyData< ElementType, VecT >; void linkToElementDataArray (sofa::core::topology::BaseMeshTopology::Point *);  ; void linkToElementDataArray (s",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topology_subset_data.html:16302,update,updated,16302,api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topology_subset_data.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topology_subset_data.html,1,['update'],['updated']
Deployability,"t the current value is the default for this Data. More...;  ; void forceSet ();  Reset the isSet flag to true, to indicate that the current value has been modified. More...;  ; int getCounter () const;  ;  Public Member Functions inherited from sofa::core::objectmodel::DDGNode;  DDGNode ();  Constructor. More...;  ; virtual ~DDGNode ();  Destructor. Automatically remove remaining links. More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void delInput (DDGNode *n);  Remove an input from this node. More...;  ; void addOutput (DDGNode *n);  Add a new output to this node. More...;  ; void delOutput (DDGNode *n);  Remove an output from this node. More...;  ; const DDGLinkContainer & getInputs ();  Get the list of inputs for this DDGNode. More...;  ; const DDGLinkContainer & getOutputs ();  Get the list of outputs for this DDGNode. More...;  ; bool isDirty () const;  Returns true if the DDGNode needs to be updated. More...;  ; virtual void setDirtyValue ();  Indicate the value needs to be updated. More...;  ; virtual void setDirtyOutputs ();  Indicate the outputs needs to be updated. This method must be called after changing the value of this node. More...;  ; void cleanDirty ();  Set dirty flag to false. More...;  ; virtual void notifyEndEdit ();  Notify links that the DGNode has been modified. More...;  ; void updateIfDirty () const;  Utility method to call update if necessary. This method should be called before reading of writing the value of this node. More...;  . Protected Member Functions; void linkToElementDataArray (sofa::core::topology::BaseMeshTopology::Point *);  ; void linkToElementDataArray (sofa::core::topology::BaseMeshTopology::Edge *);  ; void linkToElementDataArray (sofa::core::topology::BaseMeshTopology::Triangle *);  ; void linkToElementDataArray (sofa::core::topology::BaseMeshTopology::Quad *);  ; void linkToElementDataArray (sofa::core::topology::BaseMeshTopology::Tetrahedron *);  ; void linkToElementDataArray (sofa::",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topology_data.html:15652,update,updated,15652,api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topology_data.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topology_data.html,1,['update'],['updated']
Deployability,"t the current value is the default for this Data. More...;  ; void forceSet ();  Reset the isSet flag to true, to indicate that the current value has been modified. More...;  ; int getCounter () const;  ;  Public Member Functions inherited from sofa::core::objectmodel::DDGNode;  DDGNode ();  Constructor. More...;  ; virtual ~DDGNode ();  Destructor. Automatically remove remaining links. More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void delInput (DDGNode *n);  Remove an input from this node. More...;  ; void addOutput (DDGNode *n);  Add a new output to this node. More...;  ; void delOutput (DDGNode *n);  Remove an output from this node. More...;  ; const DDGLinkContainer & getInputs ();  Get the list of inputs for this DDGNode. More...;  ; const DDGLinkContainer & getOutputs ();  Get the list of outputs for this DDGNode. More...;  ; bool isDirty () const;  Returns true if the DDGNode needs to be updated. More...;  ; virtual void setDirtyValue ();  Indicate the value needs to be updated. More...;  ; virtual void setDirtyOutputs ();  Indicate the outputs needs to be updated. This method must be called after changing the value of this node. More...;  ; void cleanDirty ();  Set dirty flag to false. More...;  ; virtual void notifyEndEdit ();  Notify links that the DGNode has been modified. More...;  ; void updateIfDirty () const;  Utility method to call update if necessary. This method should be called before reading of writing the value of this node. More...;  . Protected Member Functions; void swapPostProcess (Index i1, Index i2) override;  ; void removePostProcess (sofa::Index elemId) override;  ; void addPostProcess (sofa::Index dataLastId) override;  ; void updateLastIndex (Index posLastIndex, Index newGlobalId) override;  ;  Protected Member Functions inherited from sofa::core::topology::TopologyData< ElementType, VecT >; void linkToElementDataArray (sofa::core::topology::BaseMeshTopology::Point *);  ; void linkToElementDataArra",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topology_subset_indices.html:15853,update,updated,15853,api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topology_subset_indices.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topology_subset_indices.html,1,['update'],['updated']
Deployability,"t the current value is the default for this Data. More...;  ; void forceSet ();  Reset the isSet flag to true, to indicate that the current value has been modified. More...;  ; int getCounter () const;  ;  Public Member Functions inherited from sofa::core::objectmodel::DDGNode;  DDGNode ();  Constructor. More...;  ; virtual ~DDGNode ();  Destructor. Automatically remove remaining links. More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void delInput (DDGNode *n);  Remove an input from this node. More...;  ; void addOutput (DDGNode *n);  Add a new output to this node. More...;  ; void delOutput (DDGNode *n);  Remove an output from this node. More...;  ; const DDGLinkContainer & getInputs ();  Get the list of inputs for this DDGNode. More...;  ; const DDGLinkContainer & getOutputs ();  Get the list of outputs for this DDGNode. More...;  ; bool isDirty () const;  Returns true if the DDGNode needs to be updated. More...;  ; virtual void setDirtyValue ();  Indicate the value needs to be updated. More...;  ; virtual void setDirtyOutputs ();  Indicate the outputs needs to be updated. This method must be called after changing the value of this node. More...;  ; void cleanDirty ();  Set dirty flag to false. More...;  ; virtual void notifyEndEdit ();  Notify links that the DGNode has been modified. More...;  ; void updateIfDirty () const;  Utility method to call update if necessary. This method should be called before reading of writing the value of this node. More...;  . Protected Member Functions; void updatePath ();  ;  Protected Member Functions inherited from sofa::core::objectmodel::Data< sofa::type::SVector< std::string > >; std::istream & readValue (std::istream &in);  ; std::istream & readValue (std::istream &in);  ; SOFA_CORE_API std::istream & readValue (std::istream &in);  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseData; bool genericCopyValueFrom (const BaseData *parent);  Try to update this Data from",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector.html:9078,update,updated,9078,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector.html,1,['update'],['updated']
Deployability,"t the current value is the default for this Data. More...;  ; void forceSet ();  Reset the isSet flag to true, to indicate that the current value has been modified. More...;  ; int getCounter () const;  ;  Public Member Functions inherited from sofa::core::objectmodel::DDGNode;  DDGNode ();  Constructor. More...;  ; virtual ~DDGNode ();  Destructor. Automatically remove remaining links. More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void delInput (DDGNode *n);  Remove an input from this node. More...;  ; void addOutput (DDGNode *n);  Add a new output to this node. More...;  ; void delOutput (DDGNode *n);  Remove an output from this node. More...;  ; const DDGLinkContainer & getInputs ();  Get the list of inputs for this DDGNode. More...;  ; const DDGLinkContainer & getOutputs ();  Get the list of outputs for this DDGNode. More...;  ; bool isDirty () const;  Returns true if the DDGNode needs to be updated. More...;  ; virtual void setDirtyValue ();  Indicate the value needs to be updated. More...;  ; virtual void setDirtyOutputs ();  Indicate the outputs needs to be updated. This method must be called after changing the value of this node. More...;  ; void cleanDirty ();  Set dirty flag to false. More...;  ; virtual void notifyEndEdit ();  Notify links that the DGNode has been modified. More...;  ; void updateIfDirty () const;  Utility method to call update if necessary. This method should be called before reading of writing the value of this node. More...;  . Protected Member Functions; void updatePath ();  ;  Protected Member Functions inherited from sofa::core::objectmodel::Data< std::string >; std::istream & readValue (std::istream &in);  ; std::istream & readValue (std::istream &in);  ; SOFA_CORE_API std::istream & readValue (std::istream &in);  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseData; bool genericCopyValueFrom (const BaseData *parent);  Try to update this Data from the value of its paren",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name.html:8942,update,updated,8942,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name.html,1,['update'],['updated']
Deployability,"t the current value is the default for this Data. More...;  ; void forceSet ();  Reset the isSet flag to true, to indicate that the current value has been modified. More...;  ; int getCounter () const;  ;  Public Member Functions inherited from sofa::core::objectmodel::DDGNode;  DDGNode ();  Constructor. More...;  ; virtual ~DDGNode ();  Destructor. Automatically remove remaining links. More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void delInput (DDGNode *n);  Remove an input from this node. More...;  ; void addOutput (DDGNode *n);  Add a new output to this node. More...;  ; void delOutput (DDGNode *n);  Remove an output from this node. More...;  ; const DDGLinkContainer & getInputs ();  Get the list of inputs for this DDGNode. More...;  ; const DDGLinkContainer & getOutputs ();  Get the list of outputs for this DDGNode. More...;  ; bool isDirty () const;  Returns true if the DDGNode needs to be updated. More...;  ; virtual void setDirtyValue ();  Indicate the value needs to be updated. More...;  ; virtual void setDirtyOutputs ();  Indicate the outputs needs to be updated. This method must be called after changing the value of this node. More...;  ; void cleanDirty ();  Set dirty flag to false. More...;  ; virtual void notifyEndEdit ();  Notify links that the DGNode has been modified. More...;  ; void updateIfDirty () const;  Utility method to call update if necessary. This method should be called before reading of writing the value of this node. More...;  . Static Public Member Functions; static constexpr bool isCopyOnWrite ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseData; static std::string decodeTypeName (const std::type_info &t);  Helper method to decode the type name to a more readable form if possible. More...;  ; template<class T > ; static std::string typeName ();  Helper method to get the type name of type T. More...;  . Protected Member Functions; std::istream & readValue (std::ist",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data.html:9454,update,updated,9454,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data.html,1,['update'],['updated']
Deployability,"t the current value is the default for this Data. More...;  ; void forceSet ();  Reset the isSet flag to true, to indicate that the current value has been modified. More...;  ; int getCounter () const;  ;  Public Member Functions inherited from sofa::core::objectmodel::DDGNode;  DDGNode ();  Constructor. More...;  ; virtual ~DDGNode ();  Destructor. Automatically remove remaining links. More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void delInput (DDGNode *n);  Remove an input from this node. More...;  ; void addOutput (DDGNode *n);  Add a new output to this node. More...;  ; void delOutput (DDGNode *n);  Remove an output from this node. More...;  ; const DDGLinkContainer & getInputs ();  Get the list of inputs for this DDGNode. More...;  ; const DDGLinkContainer & getOutputs ();  Get the list of outputs for this DDGNode. More...;  ; bool isDirty () const;  Returns true if the DDGNode needs to be updated. More...;  ; virtual void setDirtyValue ();  Indicate the value needs to be updated. More...;  ; virtual void setDirtyOutputs ();  Indicate the outputs needs to be updated. This method must be called after changing the value of this node. More...;  ; void cleanDirty ();  Set dirty flag to false. More...;  ; virtual void notifyEndEdit ();  Notify links that the DGNode has been modified. More...;  ; void updateIfDirty () const;  Utility method to call update if necessary. This method should be called before reading of writing the value of this node. More...;  . Static Public Member Functions; static std::string decodeTypeName (const std::type_info &t);  Helper method to decode the type name to a more readable form if possible. More...;  ; template<class T > ; static std::string typeName ();  Helper method to get the type name of type T. More...;  . Protected Member Functions; bool genericCopyValueFrom (const BaseData *parent);  Try to update this Data from the value of its parent in ""fast mode"";. More...;  ;  Protected Member Functi",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html:7225,update,updated,7225,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html,1,['update'],['updated']
Deployability,"t the current value is the default for this Data. More...;  ; void forceSet ();  Reset the isSet flag to true, to indicate that the current value has been modified. More...;  ; int getCounter () const;  ;  Public Member Functions inherited from sofa::core::objectmodel::DDGNode;  DDGNode ();  Constructor. More...;  ; virtual ~DDGNode ();  Destructor. Automatically remove remaining links. More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void delInput (DDGNode *n);  Remove an input from this node. More...;  ; void addOutput (DDGNode *n);  Add a new output to this node. More...;  ; void delOutput (DDGNode *n);  Remove an output from this node. More...;  ; const DDGLinkContainer & getInputs ();  Get the list of inputs for this DDGNode. More...;  ; const DDGLinkContainer & getOutputs ();  Get the list of outputs for this DDGNode. More...;  ; bool isDirty () const;  Returns true if the DDGNode needs to be updated. More...;  ; virtual void setDirtyValue ();  Indicate the value needs to be updated. More...;  ; virtual void setDirtyOutputs ();  Indicate the outputs needs to be updated. This method must be called after changing the value of this node. More...;  ; void cleanDirty ();  Set dirty flag to false. More...;  ; virtual void notifyEndEdit ();  Notify links that the DGNode has been modified. More...;  ; void updateIfDirty () const;  Utility method to call update if necessary. This method should be called before reading of writing the value of this node. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Data< void * >; static constexpr bool isCopyOnWrite ();  ; static std::string templateName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseData; static std::string decodeTypeName (const std::type_info &t);  Helper method to decode the type name to a more readable form if possible. More...;  ; template<class T > ; static std::string typeName ();  Helper method to get the ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_empty_data.html:8560,update,updated,8560,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_empty_data.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_empty_data.html,1,['update'],['updated']
Deployability,"t)sofa::core::DataEngine; SOFA_CLASS(SOFA_TEMPLATE(ValuesFromPositions, DataTypes), core::DataEngine)sofa::component::engine::select::ValuesFromPositions< DataTypes >; sofa::core::DataEngine::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; Tetra typedefsofa::component::engine::select::ValuesFromPositions< DataTypes >; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; Triangle typedefsofa::component::engine::select::ValuesFromPositions< DataTypes >; update() finalsofa::core::DataEnginevirtual; updateAllInputsIfDirty()sofa::core::DataTrackerDDGNode; updateIfDirty() constsofa::core::objectmodel::DDGNode; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateValues(TempData &_data)sofa::component::engine::select::ValuesFromPositions< DataTypes >protected; updateVectors(TempData &_data)sofa::component::engine::select::ValuesFromPositions< DataTypes >protected; valueFromEdge(const Edge &e, const TempData &data)sofa::component::engine::select::ValuesFromPositions< DataTypes >protected; valueFromPoint(const PointID &pid, const TempData &data)sofa::component::engine::select::ValuesFromPositions< DataTypes >protected; valueFromPosition(const CPos &p, const TempData &data)sofa::component::engine::select::ValuesFromPositions< DataTypes >protected; valueFromTetrahedron(const Tetra &t, const TempData &data)sofa::component::engine::select::ValuesFromPositions< DataTypes >protected; valueFromTriangle(const Triangle &t, const TempData &data)sofa::component::engine::select::ValuesFromPositions< DataTypes >protected; ValuesFromPositions()sofa::component::engine::select::ValuesFromPositions< DataTypes >protected; Vec3 typedefsofa::component::engine::select::ValuesFromPositions< DataTypes >; VecCoord typedefsofa::component::engine::select::ValuesFromPositions<",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_values_from_positions-members.html:14524,update,updateVectors,14524,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_values_from_positions-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_values_from_positions-members.html,1,['update'],['updateVectors']
Deployability,"t, BaseContext, BaseLink::FLAG_DOUBLELINK > l_context;  ; LinkSlaves l_slaves;  ; SingleLink< BaseObject, BaseObject, BaseLink::FLAG_DOUBLELINK > l_master;  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  . Public Member Functions;  SOFA_ABSTRACT_CLASS (CollisionGroupManager, CollisionAlgorithm);  ; virtual void createGroups (objectmodel::BaseContext *scene, const sofa::type::vector< Contact::SPtr > &contacts)=0;  Create the integration groups. More...;  ; virtual void clearGroups (objectmodel::BaseContext *scene)=0;  Clear the integration groups. More...;  ; virtual const sofa::type::vector< objectmodel::BaseContext::SPtr > & getGroups ();  Get the integration groups. More...;  ;  Public Member Functions inherited from sofa::core::collision::CollisionAlgorithm;  SOFA_ABSTRACT_CLASS (CollisionAlgorithm, objectmodel::BaseObject);  ; virtual void setInstance (Instance inst);  Allow to store multiple internal states by specifying a different collision pipeline 'instance'. More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObject;  SOFA_CLASS (BaseObject, Base);  ; virtual void draw (const core::visual::VisualParams *);  Render internal data of this object, for debugging purposes. More...;  ; virtual void computeBBox (const core::ExecParams *, bool=false);  ; void setSrc (const std::string &v, std::vector< std::string > *attributeList=nullptr);  Sets a source Object and parses it to collect dependent Data. More...;  ; void setSrc (const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr);  ; Base * findLinkDestClass (const Bas",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_collision_group_manager.html:2430,integrat,integration,2430,api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_collision_group_manager.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_collision_group_manager.html,1,['integrat'],['integration']
Deployability,"t, BaseObject, BaseLink::FLAG_DOUBLELINK > l_master;  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  . Public Member Functions;  SOFA_CLASS (SOFA_TEMPLATE(LineCollisionModel, TDataTypes), core::CollisionModel);  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; void resize (sofa::Size size) override;  Set the number of elements. More...;  ; void computeBoundingTree (int maxDepth=0) override;  Create or update the bounding volume hierarchy. More...;  ; void computeContinuousBoundingTree (SReal dt, int maxDepth=0) override;  Create or update the bounding volume hierarchy, accounting for motions within the given timestep. More...;  ; void draw (const core::visual::VisualParams *vparams) override;  Render internal data of this object, for debugging purposes. More...;  ; void handleTopologyChange () override;  ; bool canCollideWithElement (sofa::Index index, CollisionModel *model2, sofa::Index index2) override;  Test if two elements can collide with each other. More...;  ; core::behavior::MechanicalState< DataTypes > * getMechanicalState ();  ; Deriv velocity (sofa::Index index) const;  ; virtual sofa::Index getElemEdgeIndex (sofa::Index index) const;  ; int getLineFlags (sofa::Index i);  ; sofa::core::topology::BaseMeshTopology * getCollisionTopology () override;  BaseMeshTopology associated to the collision model. TODO: epernod remove virtual pure method by l_topology.get as soons as new link will be available. More...;  ; void computeBBox (const core::ExecParams *params, bool onlyVisible) override;  ;  Public Member",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_line_collision_model.html:5584,update,update,5584,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_line_collision_model.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_line_collision_model.html,1,['update'],['update']
Deployability,"t. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  ;  Public Member Functions inherited from sofa::core::behavior::SingleStateAccessor< DataTypes >;  SOFA_ABSTRACT_CLASS (SOFA_TEMPLATE(SingleStateAccessor, DataTypes), StateAccessor);  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; MechanicalState< DataTypes > * getMState ();  ; const MechanicalState< DataTypes > * getMState () const;  . Protected Member Functions;  DiagonalVelocityDampingForceField ();  ;  Protected Member Functions inherited from sofa::core::behavior::ForceField< DataTypes >;  ForceField (MechanicalState< DataTypes > *mm=nullptr);  ;  ~ForceField () override;  ;  Protected Member Functions inherited from sofa::core::behavior::BaseForceField;  BaseForceField ();  ;  ~BaseForceField () override=default;  ;  Protected Member Functions inherited from sofa::core::behavior::StateAccessor;  StateAccessor ();  ;  ~StateAccessor () override=default;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; vo",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_diagonal_velocity_damping_force_field.html:15179,update,update,15179,api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_diagonal_velocity_damping_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_diagonal_velocity_damping_force_field.html,1,['update'],['update']
Deployability,"t. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  ;  Public Member Functions inherited from sofa::core::behavior::SingleStateAccessor< DataTypes >;  SOFA_ABSTRACT_CLASS (SOFA_TEMPLATE(SingleStateAccessor, DataTypes), StateAccessor);  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; MechanicalState< DataTypes > * getMState ();  ; const MechanicalState< DataTypes > * getMState () const;  . Protected Member Functions;  UniformVelocityDampingForceField ();  ;  Protected Member Functions inherited from sofa::core::behavior::ForceField< DataTypes >;  ForceField (MechanicalState< DataTypes > *mm=nullptr);  ;  ~ForceField () override;  ;  Protected Member Functions inherited from sofa::core::behavior::BaseForceField;  BaseForceField ();  ;  ~BaseForceField () override=default;  ;  Protected Member Functions inherited from sofa::core::behavior::StateAccessor;  StateAccessor ();  ;  ~StateAccessor () override=default;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; vo",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_uniform_velocity_damping_force_field.html:15282,update,update,15282,api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_uniform_velocity_damping_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_uniform_velocity_damping_force_field.html,1,['update'],['update']
Deployability,"t: it compute the mappings jacobian matrices, then the projection of the provided matrix. More...;  ; std::vector< unsigned int > identifyAffectedDoFs (BaseMechanicalState *mstate, TMatrix *crs);  Given a Mechanical State and its matrix, identifies the nodes affected by the matrix. More...;  ; MappingJacobians< TMatrix > computeJacobiansFrom (BaseMechanicalState *mstate, const core::MechanicalParams *mparams, const MappingGraph &mappingGraph, TMatrix *crs);  ; core::objectmodel::BaseContext * getSolveContext ();  ; void addMappedMatrixToGlobalMatrixEigen (sofa::type::fixed_array< core::behavior::BaseMechanicalState *, 2 > mstatePair, TMatrix *mappedMatrix, sofa::type::fixed_array< MappingJacobians< TMatrix >, 2 > jacobians, const MappingGraph &mappingGraph, linearalgebra::BaseMatrix *globalMatrix);  ; Eigen::Map< Eigen::SparseMatrix< Block, Eigen::RowMajor > > makeEigenMap (const TMatrix &matrix);  ; virtual void computeProjection (const Eigen::Map< Eigen::SparseMatrix< Block, Eigen::RowMajor > > KMap, const sofa::type::fixed_array< std::shared_ptr< TMatrix >, 2 > J, Eigen::SparseMatrix< Block, Eigen::RowMajor > &JT_K_J);  ;  Protected Member Functions inherited from sofa::component::linearsystem::BaseMatrixProjectionMethod< TMatrix >;  BaseMatrixProjectionMethod (const PairMechanicalStates &states);  ;  BaseMatrixProjectionMethod ()=default;  ;  Protected Member Functions inherited from sofa::core::behavior::StateAccessor;  StateAccessor ();  ;  ~StateAccessor () override=default;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsystem_1_1_constant_sparsity_projection_method.html:15842,update,update,15842,api/master/sofa/html/classsofa_1_1component_1_1linearsystem_1_1_constant_sparsity_projection_method.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsystem_1_1_constant_sparsity_projection_method.html,2,['update'],['update']
Deployability,"t::GraphDataWidget< T >inline; GraphDataWidget_Linear(QWidget *parent, const char *name, MyData *d)sofa::gui::qt::GraphDataWidget_Linear< T >inline; helper typedefsofa::gui::qt::SimpleDataWidget< T, graph_data_widget_container< T > >protected; Inherit typedefsofa::gui::qt::GraphDataWidget< T >; isDirty()sofa::gui::qt::DataWidgetinline; isFilled()sofa::gui::qt::DataWidgetinline; m_isFilledsofa::gui::qt::DataWidgetprotected; m_toFillsofa::gui::qt::DataWidgetprotected; MyData typedefsofa::gui::qt::GraphDataWidget_Linear< T >; MyTData typedefsofa::gui::qt::SimpleDataWidget< T, graph_data_widget_container< T > >; numColumnWidget()sofa::gui::qt::GraphDataWidget< T >inlinevirtual; readFromData()sofa::gui::qt::SimpleDataWidget< T, graph_data_widget_container< T > >inlinevirtual; setData(MyTData *d)sofa::gui::qt::TDataWidget< T >inlinevirtual; setData(MyData *d)sofa::gui::qt::TDataWidget< T >; sofa::gui::qt::DataWidget::setData(MyData *d)sofa::gui::qt::DataWidgetvirtual; setDataReadOnly(bool readOnly)sofa::gui::qt::SimpleDataWidget< T, graph_data_widget_container< T > >inlinevirtual; setFilled(bool value)sofa::gui::qt::DataWidgetinline; setReadOnly(bool readOnly)sofa::gui::qt::SimpleDataWidget< T, graph_data_widget_container< T > >inlinevirtual; setWidgetDirty(bool b=true)sofa::gui::qt::DataWidgetslot; SimpleDataWidget(QWidget *parent, const char *name, MyTData *d)sofa::gui::qt::SimpleDataWidget< T, graph_data_widget_container< T > >inline; sizeWidget()sofa::gui::qt::GraphDataWidget< T >inlinevirtual; Tdatasofa::gui::qt::TDataWidget< T >protected; TDataWidget(QWidget *parent, const char *name, MyTData *d)sofa::gui::qt::TDataWidget< T >inline; updateDataValue()sofa::gui::qt::DataWidgetslot; updateVisibility()sofa::gui::qt::DataWidget; updateWidgetValue()sofa::gui::qt::DataWidgetslot; WidgetDirty(bool)sofa::gui::qt::DataWidgetsignal; writeToData()sofa::gui::qt::SimpleDataWidget< T, graph_data_widget_container< T > >inlinevirtual; ~DataWidget() overridesofa::gui::qt::DataWidget.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_graph_data_widget___linear-members.html:3136,update,updateDataValue,3136,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_graph_data_widget___linear-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_graph_data_widget___linear-members.html,3,['update'],"['updateDataValue', 'updateVisibility', 'updateWidgetValue']"
Deployability,"t::QAddRecordedCameraOperation:. [legend]. Public Member Functions;  QAddRecordedCameraOperation ();  ; void configure (common::PickHandler *picker, sofa::component::setting::MouseButtonSetting *button) override;  ;  Public Member Functions inherited from sofa::gui::qt::QMouseOperation; DataWidget * createWidgetFromData (sofa::core::objectmodel::BaseData *data);  ;  Public Member Functions inherited from sofa::gui::common::AddRecordedCameraOperation;  AddRecordedCameraOperation ();  ;  Public Member Functions inherited from sofa::gui::common::Operation;  Operation (sofa::component::setting::MouseButtonSetting::SPtr s=nullptr);  ; virtual ~Operation ();  ; virtual void configure (PickHandler *picker, MOUSE_BUTTON b);  ; virtual void start ();  ; virtual void execution ();  This function is called each time the mouse is clicked. More...;  ; virtual void end ();  ; virtual void endOperation ();  This function is called after each mouse click. More...;  ; virtual void wait ();  This function is called when shift key is released. More...;  ; virtual void setSetting (sofa::component::setting::MouseButtonSetting *s);  ; virtual sofa::gui::component::performer::InteractionPerformer * createPerformer ();  ; MOUSE_BUTTON getMouseButton () const;  ; std::string getId ();  . Additional Inherited Members;  Public Attributes inherited from sofa::gui::common::Operation; sofa::gui::component::performer::InteractionPerformer * performer;  ;  Protected Attributes inherited from sofa::gui::common::AddRecordedCameraOperation; sofa::gui::component::AddRecordedCameraButtonSetting::SPtr setting;  ;  Protected Attributes inherited from sofa::gui::common::Operation; PickHandler * pickHandle;  ; sofa::component::setting::MouseButtonSetting::SPtr mbsetting;  ; MOUSE_BUTTON button;  ;  Static Public Member Functions inherited from sofa::gui::common::AddRecordedCameraOperation; static std::string getDescription ();  ;  Static Public Member Functions inherited from sofa::gui::common::Operation; s",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_add_recorded_camera_operation.html:1355,release,released,1355,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_add_recorded_camera_operation.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_add_recorded_camera_operation.html,1,['release'],['released']
Deployability,"t::SOFA_ABSTRACT_CLASS(ShaderElement, objectmodel::BaseObject)sofa::core::visual::ShaderElement; SOFA_CLASS(OglIntVector2Variable, OglIntVectorVariable)sofa::gl::component::shader::OglIntVector2Variable; sofa::gl::component::shader::OglIntVectorVariable::SOFA_CLASS(OglIntVectorVariable, OglVariable< type::vector< GLint > >)sofa::gl::component::shader::OglIntVectorVariable; OglVariable< type::vector< GLint > >::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SOFA_CLASS2(OglVariable, core::visual::VisualModel, OglShaderElement)sofa::gl::component::shader::OglVariable< type::vector< GLint > >; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateVisual(const VisualParams *)sofa::core::visual::VisualModel; updateVisual() finalsofa::core::visual::VisualModelvirtual; valuesofa::gl::component::shader::OglVariable< type::vector< GLint > >; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VisualModel()sofa::core::visual::VisualModelprotected; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~OglIntVector2Variable() overridesofa::gl::component::shader::OglIntVector2Variableinline; ~OglIntVectorVariable()sofa::gl::component::shader::OglIntVectorVariableinlinevirtual; ~OglShaderElement() overridesofa::gl::component::shader::OglShaderElementinline; ~OglVariable() overridesofa::gl::component::shader::OglVariable< type::vector< GLint > >inlineprotected; ~ShaderE",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_int_vector2_variable-members.html:13953,update,updateVisual,13953,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_int_vector2_variable-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_int_vector2_variable-members.html,1,['update'],['updateVisual']
Deployability,"t::SOFA_ABSTRACT_CLASS(ShaderElement, objectmodel::BaseObject)sofa::core::visual::ShaderElement; SOFA_CLASS(OglIntVector3Variable, OglIntVectorVariable)sofa::gl::component::shader::OglIntVector3Variable; sofa::gl::component::shader::OglIntVectorVariable::SOFA_CLASS(OglIntVectorVariable, OglVariable< type::vector< GLint > >)sofa::gl::component::shader::OglIntVectorVariable; OglVariable< type::vector< GLint > >::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SOFA_CLASS2(OglVariable, core::visual::VisualModel, OglShaderElement)sofa::gl::component::shader::OglVariable< type::vector< GLint > >; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateVisual(const VisualParams *)sofa::core::visual::VisualModel; updateVisual() finalsofa::core::visual::VisualModelvirtual; valuesofa::gl::component::shader::OglVariable< type::vector< GLint > >; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VisualModel()sofa::core::visual::VisualModelprotected; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~OglIntVector3Variable() overridesofa::gl::component::shader::OglIntVector3Variableinline; ~OglIntVectorVariable()sofa::gl::component::shader::OglIntVectorVariableinlinevirtual; ~OglShaderElement() overridesofa::gl::component::shader::OglShaderElementinline; ~OglVariable() overridesofa::gl::component::shader::OglVariable< type::vector< GLint > >inlineprotected; ~ShaderE",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_int_vector3_variable-members.html:13953,update,updateVisual,13953,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_int_vector3_variable-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_int_vector3_variable-members.html,1,['update'],['updateVisual']
Deployability,"t::SOFA_ABSTRACT_CLASS(ShaderElement, objectmodel::BaseObject)sofa::core::visual::ShaderElement; SOFA_CLASS(OglIntVector4Variable, OglIntVectorVariable)sofa::gl::component::shader::OglIntVector4Variable; sofa::gl::component::shader::OglIntVectorVariable::SOFA_CLASS(OglIntVectorVariable, OglVariable< type::vector< GLint > >)sofa::gl::component::shader::OglIntVectorVariable; OglVariable< type::vector< GLint > >::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SOFA_CLASS2(OglVariable, core::visual::VisualModel, OglShaderElement)sofa::gl::component::shader::OglVariable< type::vector< GLint > >; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateVisual(const VisualParams *)sofa::core::visual::VisualModel; updateVisual() finalsofa::core::visual::VisualModelvirtual; valuesofa::gl::component::shader::OglVariable< type::vector< GLint > >; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VisualModel()sofa::core::visual::VisualModelprotected; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~OglIntVector4Variable() overridesofa::gl::component::shader::OglIntVector4Variableinline; ~OglIntVectorVariable()sofa::gl::component::shader::OglIntVectorVariableinlinevirtual; ~OglShaderElement() overridesofa::gl::component::shader::OglShaderElementinline; ~OglVariable() overridesofa::gl::component::shader::OglVariable< type::vector< GLint > >inlineprotected; ~ShaderE",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_int_vector4_variable-members.html:13953,update,updateVisual,13953,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_int_vector4_variable-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_int_vector4_variable-members.html,1,['update'],['updateVisual']
Deployability,"t::lagrangian::correction::PrecomputedConstraintCorrection< TDataTypes >; rotateConstraints(bool back)sofa::component::constraint::lagrangian::correction::PrecomputedConstraintCorrection< TDataTypes >; rotateResponse()sofa::component::constraint::lagrangian::correction::PrecomputedConstraintCorrection< TDataTypes >virtual; rotateResponse()sofa::component::constraint::lagrangian::correction::PrecomputedConstraintCorrection< TDataTypes >; rotateResponse()sofa::component::constraint::lagrangian::correction::PrecomputedConstraintCorrection< TDataTypes >; rotateResponse()sofa::component::constraint::lagrangian::correction::PrecomputedConstraintCorrection< TDataTypes >; rotateResponse()sofa::component::constraint::lagrangian::correction::PrecomputedConstraintCorrection< TDataTypes >; saveCompliance(const std::string &fileName)sofa::component::constraint::lagrangian::correction::PrecomputedConstraintCorrection< TDataTypes >protected; setConstraintDForce(SReal *df, int begin, int end, bool update) overridesofa::component::constraint::lagrangian::correction::PrecomputedConstraintCorrection< TDataTypes >virtual; setDefinitionSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setDefinitionSourceFilePos(const int)sofa::core::objectmodel::Base; setInstanciationSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setInstanciationSourceFilePos(const int)sofa::core::objectmodel::Base; setMState(MechanicalState< DataTypes > *_mstate)sofa::core::behavior::ConstraintCorrection< TDataTypes >inline; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescript",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1correction_1_1_precomputed_constraint_correction-members.html:21980,update,update,21980,api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1correction_1_1_precomputed_constraint_correction-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1correction_1_1_precomputed_constraint_correction-members.html,1,['update'],['update']
Deployability,"t::lagrangian::solver::ConstraintSolverImpl; void postBuildSystem (const core::ConstraintParams *cParams) override;  ; void postSolveSystem (const core::ConstraintParams *cParams) override;  ; void clearConstraintCorrections ();  ; void resetConstraints (const core::ConstraintParams *cParams);  ; void buildLocalConstraintMatrix (const core::ConstraintParams *cparams, unsigned int &constraintId);  Call the method buildConstraintMatrix on all the BaseConstraintSet. More...;  ; void accumulateMatrixDeriv (const core::ConstraintParams *cparams);  ; unsigned int buildConstraintMatrix (const core::ConstraintParams *cparams);  ; void applyProjectiveConstraintOnConstraintMatrix (const core::ConstraintParams *cparams);  ; void getConstraintViolation (const core::ConstraintParams *cparams, sofa::linearalgebra::BaseVector *v);  ;  Protected Member Functions inherited from sofa::core::behavior::ConstraintSolver;  ConstraintSolver ();  ;  ~ConstraintSolver () override;  ; bool prepareStatesTask (const ConstraintParams *, MultiVecId res1, MultiVecId res2);  ; bool buildSystemTask (const ConstraintParams *, MultiVecId res1, MultiVecId res2);  ; bool solveSystemTask (const ConstraintParams *, MultiVecId res1, MultiVecId res2);  ; bool applyCorrectionTask (const ConstraintParams *, MultiVecId res1, MultiVecId res2);  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to k",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1solver_1_1_generic_constraint_solver.html:18513,update,update,18513,api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1solver_1_1_generic_constraint_solver.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1solver_1_1_generic_constraint_solver.html,2,['update'],['update']
Deployability,"t::solidmechanics::tensormass::TetrahedralTensorMassForceField< DataTypes >::getPotentialEnergy ; (; const core::MechanicalParams * ; mparams); const. overridevirtual . Get the potential energy associated to this ForceField during the last call of addForce( const MechanicalParams* mparams );. ; Used to estimate the total energy of the system by some post-stabilization techniques. ; Implements sofa::core::behavior::BaseForceField. ◆ init(). template<class DataTypes > . void sofa::component::solidmechanics::tensormass::TetrahedralTensorMassForceField< DataTypes >::init ; (; void ; ). overridevirtual . Initialization method called at graph creation and modification, during top-down traversal. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ initNeighbourhoodPoints(). template<class DataTypes > . void sofa::component::solidmechanics::tensormass::TetrahedralTensorMassForceField< DataTypes >::initNeighbourhoodPoints. ◆ setPoissonRatio(). template<class DataTypes > . void sofa::component::solidmechanics::tensormass::TetrahedralTensorMassForceField< DataTypes >::setPoissonRatio ; (; const Real ; ratio). inline . ◆ setYoungModulus(). template<class DataTypes > . void sofa::component::solidmechanics::tensormass::TetrahedralTensorMassForceField< DataTypes >::setYoungModulus ; (; const Real ; modulus). inline . ◆ SOFA_CLASS(). template<class DataTypes > . sofa::component::solidmechanics::tensormass::TetrahedralTensorMassForceField< DataTypes >::SOFA_CLASS ; (; SOFA_TEMPLATE(TetrahedralTensorMassForceField< DataTypes >, DataTypes) ; , . SOFA_TEMPLATE(core::behavior::ForceField, DataTypes) ;  . ). ◆ updateLameCoefficients(). template<class DataTypes > . void sofa::component::solidmechanics::tensormass::TetrahedralTensorMassForceField< DataTypes >::updateLameCoefficients. compute lambda and mu based on the Young modulus and Poisson ratio . sofacomponentsolidmechanicstensormassTetrahedralTensorMassForceField; Generated on Mon Nov 11 2024 03:09:04 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1tensormass_1_1_tetrahedral_tensor_mass_force_field.html:30054,update,updateLameCoefficients,30054,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1tensormass_1_1_tetrahedral_tensor_mass_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1tensormass_1_1_tetrahedral_tensor_mass_force_field.html,2,['update'],['updateLameCoefficients']
Deployability,"t::solidmechanics::tensormass::TriangularTensorMassForceField< DataTypes >::applyTriangleCreation ; (; const sofa::type::vector< Index > & ; triangleAdded, . const sofa::type::vector< core::topology::BaseMeshTopology::Triangle > & ; , . const sofa::type::vector< sofa::type::vector< Index > > & ; , . const sofa::type::vector< sofa::type::vector< SReal > > & ;  . ). protected . Method to update See alsod_edgeInfo when a new triangle is created. Will be set as callback in the EdgeData . d_edgeInfo when TRIANGLESADDED event is fired to create a new spring between new created triangles. . ◆ applyTriangleDestruction(). template<class DataTypes > . void sofa::component::solidmechanics::tensormass::TriangularTensorMassForceField< DataTypes >::applyTriangleDestruction ; (; const sofa::type::vector< Index > & ; triangleRemoved). protected . Method to update See alsod_edgeInfo when a triangle is removed. Will be set as callback in the EdgeData . d_edgeInfo when TRIANGLESREMOVED event is fired to remove spring if needed or update pair of triangles. . ◆ buildDampingMatrix(). template<class DataTypes > . void sofa::component::solidmechanics::tensormass::TriangularTensorMassForceField< DataTypes >::buildDampingMatrix ; (; core::behavior::DampingMatrix * ; ). finalvirtual . Reimplemented from sofa::core::behavior::BaseForceField. ◆ draw(). template<class DataTypes > . void sofa::component::solidmechanics::tensormass::TriangularTensorMassForceField< DataTypes >::draw ; (; const core::visual::VisualParams * ; ). overridevirtual . Render internal data of this object, for debugging purposes. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ getEdgeInfo(). template<class DataTypes > . sofa::core::topology::EdgeData<sofa::type::vector<EdgeRestInformation> >& sofa::component::solidmechanics::tensormass::TriangularTensorMassForceField< DataTypes >::getEdgeInfo ; (; ). inlineprotected . ◆ getLambda(). template<class DataTypes > . virtual Real sofa::component::solidmechanics::tenso",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1tensormass_1_1_triangular_tensor_mass_force_field.html:26453,update,update,26453,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1tensormass_1_1_triangular_tensor_mass_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1tensormass_1_1_triangular_tensor_mass_force_field.html,1,['update'],['update']
Deployability,"t::visual::BaseCamera::SOFA_ATTRIBUTE_REPLACED__TYPEMEMBER ; (; Ray ; , . sofa::type::Ray ;  . ). ◆ SOFA_ATTRIBUTE_REPLACED__TYPEMEMBER() [2/4]. sofa::component::visual::BaseCamera::SOFA_ATTRIBUTE_REPLACED__TYPEMEMBER ; (; Vec2 ; , . sofa::type::Vec2 ;  . ). ◆ SOFA_ATTRIBUTE_REPLACED__TYPEMEMBER() [3/4]. sofa::component::visual::BaseCamera::SOFA_ATTRIBUTE_REPLACED__TYPEMEMBER ; (; Vec3 ; , . sofa::type::Vec3 ;  . ). ◆ SOFA_ATTRIBUTE_REPLACED__TYPEMEMBER() [4/4]. sofa::component::visual::BaseCamera::SOFA_ATTRIBUTE_REPLACED__TYPEMEMBER ; (; Vec4 ; , . sofa::type::Vec4 ;  . ). ◆ SOFA_CLASS(). sofa::component::visual::BaseCamera::SOFA_CLASS ; (; BaseCamera ; , . core::objectmodel::BaseObject ;  . ). ◆ toRay(). type::Ray sofa::component::visual::BaseCamera::toRay ; (; ); const. ◆ translate(). void sofa::component::visual::BaseCamera::translate ; (; const type::Vec3 & ; t). ◆ translateLookAt(). void sofa::component::visual::BaseCamera::translateLookAt ; (; const type::Vec3 & ; t). ◆ updateOutputData(). void sofa::component::visual::BaseCamera::updateOutputData ; (; ). protected . ◆ viewportPointToRay(). type::Ray sofa::component::visual::BaseCamera::viewportPointToRay ; (; const type::Vec3 & ; p). ◆ viewportToScreenPoint(). type::Vec3 sofa::component::visual::BaseCamera::viewportToScreenPoint ; (; const type::Vec3 & ; p); const. ◆ viewportToWorldPoint(). type::Vec3 sofa::component::visual::BaseCamera::viewportToWorldPoint ; (; const type::Vec3 & ; p). ◆ worldToCameraCoordinates(). type::Vec3 sofa::component::visual::BaseCamera::worldToCameraCoordinates ; (; const type::Vec3 & ; p). ◆ worldToCameraTransform(). type::Vec3 sofa::component::visual::BaseCamera::worldToCameraTransform ; (; const type::Vec3 & ; v). ◆ worldToScreenCoordinates(). type::Vec2 sofa::component::visual::BaseCamera::worldToScreenCoordinates ; (; const type::Vec3 & ; p). ◆ worldToScreenPoint(). type::Vec3 sofa::component::visual::BaseCamera::worldToScreenPoint ; (; const type::Vec3 & ; p). ◆ worldToViewp",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1visual_1_1_base_camera.html:32746,update,updateOutputData,32746,api/master/sofa/html/classsofa_1_1component_1_1visual_1_1_base_camera.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1visual_1_1_base_camera.html,1,['update'],['updateOutputData']
Deployability,"t; . /feed; ; [SOLVED] Building Sofa on Windows VS2013 with boost – SOFA. /page; . /2; ; SOFA - Topic: [SOLVED] Building Sofa on Windows VS2013 with boost. /3; ; SOFA - Topic: [SOLVED] Building Sofa on Windows VS2013 with boost. /4; ; SOFA - Topic: [SOLVED] Building Sofa on Windows VS2013 with boost. /5; ; SOFA - Topic: [SOLVED] Building Sofa on Windows VS2013 with boost. SOFA - Topic: [SOLVED] Building Sofa on Windows VS2013 with boost. /building-sofa-problems; ; SOFA - Topic: [SOLVED] Building SOFA problems. /building-sofa-with-both-plugins-leapmotion-and-sensable-phantom-omni; ; SOFA - Topic: [SOLVED] Building SOFA with both plugins: LeapMotion and Sensable (Phantom Omni). /building-sofa-with-ninja; ; SOFA - Topic: [SOLVED] Building SOFA with ninja. /building-sofa-with-windows10-and-vs2015; . /feed; ; [SOLVED] Building SOFA with Windows10 and VS2015 – SOFA. SOFA - Topic: [SOLVED] Building SOFA with Windows10 and VS2015. /building-stlib-and-integration-with-sofa-in-windows-10; ; SOFA - Topic: Building Stlib and integration with sofa in windows 10. /building-the-tutorials; ; SOFA - Topic: [SOLVED] Building the tutorials. /building-v16-08-cmake-errors; . /feed; ; [SOLVED] Building v16.08, Cmake Errors – SOFA. SOFA - Topic: [SOLVED] Building v16.08, Cmake Errors. /building-v16-08-sofa-errors-in-sensable-plugin; . /feed; ; [SOLVED] Building v16.08 sofa, errors in sensable plugin. – SOFA. SOFA - Topic: [SOLVED] Building v16.08 sofa, errors in sensable plugin. /building-vrpn-plugin-on-linux; . /feed; ; [SOLVED] Building VRPN plugin on linux – SOFA. SOFA - Topic: [SOLVED] Building VRPN plugin on linux. /build-problem-for-advancedfem-plugin; ; SOFA - Topic: [SOLVED] Build problem for AdvancedFEM plugin. /build-problem-for-pardisio-solver-plugin; ; SOFA - Topic: [SOLVED] Build problem for Pardisio solver plugin. /build-sofa; . /page; . /11; ; SOFA - Topic: [SOLVED] Build SOFA with MSVC 11.0 and Qt 4.8.5 (64-bit). /12; ; SOFA - Topic: [SOLVED] Build SOFA with MSVC 11.0 and Q",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/index-wcopy.html:266464,integrat,integration-with-sofa-in-windows-,266464,index-wcopy.html,https://www.sofa-framework.org,https://www.sofa-framework.org/index-wcopy.html,2,['integrat'],"['integration', 'integration-with-sofa-in-windows-']"
Deployability,"t=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(AbstractTransformMatrixEngine, core::DataEngine)sofa::component::engine::transform::AbstractTransformMatrixEngine; sofa::core::DataEngine::SOFA_ABSTRACT_CLASS(DataEngine, core::objectmodel::BaseObject)sofa::core::DataEngine; SOFA_CLASS(InvertTransformMatrixEngine, AbstractTransformMatrixEngine)sofa::component::engine::transform::InvertTransformMatrixEngine; sofa::component::engine::transform::AbstractTransformMatrixEngine::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; update() finalsofa::core::DataEnginevirtual; updateAllInputsIfDirty()sofa::core::DataTrackerDDGNode; updateIfDirty() constsofa::core::objectmodel::DDGNode; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~AbstractTransformMatrixEngine() overridesofa::component::engine::transform::AbstractTransformMatrixEngineinlineprotected; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~DataEngine() overridesofa::core::DataEngineprotected; ~DDGNode()sofa::core::objectmodel::DDGNodevirtual; ~InvertTransformMatrixEngine() overridesofa::com",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_invert_transform_matrix_engine-members.html:12552,update,update,12552,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_invert_transform_matrix_engine-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_invert_transform_matrix_engine-members.html,1,['update'],['update']
Deployability,"t=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(AbstractTransformMatrixEngine, core::DataEngine)sofa::component::engine::transform::AbstractTransformMatrixEngine; sofa::core::DataEngine::SOFA_ABSTRACT_CLASS(DataEngine, core::objectmodel::BaseObject)sofa::core::DataEngine; SOFA_CLASS(RotateTransformMatrixEngine, AbstractTransformMatrixEngine)sofa::component::engine::transform::RotateTransformMatrixEngine; sofa::component::engine::transform::AbstractTransformMatrixEngine::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; update() finalsofa::core::DataEnginevirtual; updateAllInputsIfDirty()sofa::core::DataTrackerDDGNode; updateIfDirty() constsofa::core::objectmodel::DDGNode; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~AbstractTransformMatrixEngine() overridesofa::component::engine::transform::AbstractTransformMatrixEngineinlineprotected; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~DataEngine() overridesofa::core::DataEngineprotected; ~DDGNode()sofa::core::objectmodel::DDGNodevirtual; ~RotateTransformMatrixEngine() overridesofa::com",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_rotate_transform_matrix_engine-members.html:12628,update,update,12628,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_rotate_transform_matrix_engine-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_rotate_transform_matrix_engine-members.html,1,['update'],['update']
Deployability,"t=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; showIndicesScalesofa::gl::component::engine::TextureInterpolation< DataTypes >protected; SOFA_ABSTRACT_CLASS(DataEngine, core::objectmodel::BaseObject)sofa::core::DataEngine; SOFA_CLASS(SOFA_TEMPLATE(TextureInterpolation, DataTypes), core::DataEngine)sofa::gl::component::engine::TextureInterpolation< DataTypes >; sofa::core::DataEngine::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; standardLinearInterpolation()sofa::gl::component::engine::TextureInterpolation< DataTypes >protected; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; TextureInterpolation()sofa::gl::component::engine::TextureInterpolation< DataTypes >protected; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; update() finalsofa::core::DataEnginevirtual; updateAllInputsIfDirty()sofa::core::DataTrackerDDGNode; updateGraph()sofa::gl::component::engine::TextureInterpolation< DataTypes >protected; updateIfDirty() constsofa::core::objectmodel::DDGNode; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecCoord typedefsofa::gl::component::engine::TextureInterpolation< DataTypes >; VecCoord2D typedefsofa::gl::component::engine::TextureInterpolation< DataTypes >; VecCoord3D typedefsofa::gl::component::engine::TextureInterpolation< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1engine_1_1_texture_interpolation-members.html:13638,update,updateAllInputsIfDirty,13638,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1engine_1_1_texture_interpolation-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1engine_1_1_texture_interpolation-members.html,1,['update'],['updateAllInputsIfDirty']
Deployability,"tData() constsofa::gui::qt::TDataWidget< T >inline; GraphDataWidget(QWidget *parent, const char *name, MyData *d)sofa::gui::qt::GraphDataWidget< T >inline; helper typedefsofa::gui::qt::SimpleDataWidget< T, graph_data_widget_container< T > >protected; Inherit typedefsofa::gui::qt::GraphDataWidget< T >; isDirty()sofa::gui::qt::DataWidgetinline; isFilled()sofa::gui::qt::DataWidgetinline; m_isFilledsofa::gui::qt::DataWidgetprotected; m_toFillsofa::gui::qt::DataWidgetprotected; MyData typedefsofa::gui::qt::GraphDataWidget< T >; MyTData typedefsofa::gui::qt::SimpleDataWidget< T, graph_data_widget_container< T > >; numColumnWidget()sofa::gui::qt::GraphDataWidget< T >inlinevirtual; readFromData()sofa::gui::qt::SimpleDataWidget< T, graph_data_widget_container< T > >inlinevirtual; setData(MyTData *d)sofa::gui::qt::TDataWidget< T >inlinevirtual; setData(MyData *d)sofa::gui::qt::TDataWidget< T >; sofa::gui::qt::DataWidget::setData(MyData *d)sofa::gui::qt::DataWidgetvirtual; setDataReadOnly(bool readOnly)sofa::gui::qt::SimpleDataWidget< T, graph_data_widget_container< T > >inlinevirtual; setFilled(bool value)sofa::gui::qt::DataWidgetinline; setReadOnly(bool readOnly)sofa::gui::qt::SimpleDataWidget< T, graph_data_widget_container< T > >inlinevirtual; setWidgetDirty(bool b=true)sofa::gui::qt::DataWidgetslot; SimpleDataWidget(QWidget *parent, const char *name, MyTData *d)sofa::gui::qt::SimpleDataWidget< T, graph_data_widget_container< T > >inline; sizeWidget()sofa::gui::qt::GraphDataWidget< T >inlinevirtual; Tdatasofa::gui::qt::TDataWidget< T >protected; TDataWidget(QWidget *parent, const char *name, MyTData *d)sofa::gui::qt::TDataWidget< T >inline; updateDataValue()sofa::gui::qt::DataWidgetslot; updateVisibility()sofa::gui::qt::DataWidget; updateWidgetValue()sofa::gui::qt::DataWidgetslot; WidgetDirty(bool)sofa::gui::qt::DataWidgetsignal; writeToData()sofa::gui::qt::SimpleDataWidget< T, graph_data_widget_container< T > >inlinevirtual; ~DataWidget() overridesofa::gui::qt::DataWidget.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_graph_data_widget-members.html:3025,update,updateDataValue,3025,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_graph_data_widget-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_graph_data_widget-members.html,3,['update'],"['updateDataValue', 'updateVisibility', 'updateWidgetValue']"
Deployability,"tData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, BaseData::DataFlags dataFlags);  Helper method used by initData() More...;  ; template<class T > ; void initData0 (Data< T > *field, typename Data< T >::InitData &res, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ;  Protected Member Functions inherited from sofa::core::behavior::SingleStateAccessor< DataTypes >;  SingleStateAccessor (MechanicalState< DataTypes > *mm=nullptr);  ;  ~SingleStateAccessor () override=default;  . Static Protected Member Functions; static Mat33 integrateStiffness (int signx0, int signy0, int signz0, int signx1, int signy1, int signz1, const Real u, const Real v, const Real w, const Mat33 &J_1);  ; static void computeForce (Displacement &F, const Displacement &Depl, const ElementStiffness &K);  ; static void computeRotationLarge (Transformation &r, Coord &edgex, Coord &edgey);  . Friends; class HexahedronFEMForceFieldInternalData< DataTypes >;  . Additional Inherited Members;  Static Protected Attributes inherited from sofa::component::solidmechanics::fem::elastic::BaseLinearElasticityFEMForceField< DataTypes >; static constexpr Real defaultYoungModulusValue = 5000;  ; static constexpr Real defaultPoissonRatioValue = 0.45;  ;  Static Public Member Functions inherited from sofa::component::solidmechanics::fem::elastic::BaseLinearElasticityFEMForceField< DataTypes >; static std::pair< Real, Real > toLameParameters (_2DMaterials, Real youngModulus, Real poissonRatio);  ; static std::pair< Real, Real > toLameParameters (_3DMaterials, Real youngModulus, Real poissonRatio);  ;  Static Public Member Functions inherited from sofa::core::behavior::ForceField< DataTypes >; static",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_hexahedron_f_e_m_force_field.html:23221,integrat,integrateStiffness,23221,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_hexahedron_f_e_m_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_hexahedron_f_e_m_force_field.html,1,['integrat'],['integrateStiffness']
Deployability,"tDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(VisualModel, objectmodel::BaseObject)sofa::core::visual::VisualModel; SOFA_CLASS(CompositingVisualLoop, simulation::DefaultVisualManagerLoop)sofa::gl::component::shader::CompositingVisualLoop; sofa::simulation::DefaultVisualManagerLoop::SOFA_CLASS(DefaultVisualManagerLoop, sofa::core::visual::VisualLoop)sofa::simulation::DefaultVisualManagerLoop; sofa::core::visual::VisualLoop::SOFA_CLASS(VisualLoop, VisualModel)sofa::core::visual::VisualLoop; sofa::core::visual::VisualModel::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateContextStep(sofa::core::visual::VisualParams *vparams) overridesofa::simulation::DefaultVisualManagerLoopvirtual; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateStep(sofa::core::visual::VisualParams *vparams) overridesofa::simulation::DefaultVisualManagerLoopvirtual; updateVisual(const VisualParams *)sofa::core::visual::VisualModel; updateVisual() finalsofa::core::visual::VisualModelvirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; vertFilenamesofa::gl::component::shader::CompositingVisualLoop; VisualModel()sofa::core::visual::VisualModelprotected; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~CompositingVisualLoop() overridesofa::gl::component::shader::CompositingVisualLoopprotected; ~DefaultVisualManagerLoop() overrid",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_compositing_visual_loop-members.html:12429,update,updateLinks,12429,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_compositing_visual_loop-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_compositing_visual_loop-members.html,1,['update'],['updateLinks']
Deployability,"tIndex . ). protected . ◆ addDForce(). template<class DataTypes > . void sofa::component::solidmechanics::fem::elastic::TetrahedralCorotationalFEMForceField< DataTypes >::addDForce ; (; const core::MechanicalParams * ; mparams, . DataVecDeriv & ; df, . const DataVecDeriv & ; dx . ). overridevirtual . Internal addDForce Overloaded function, usually called from the generic addDForce version. This addDForce version directly gives access to df and dx vectors through its parameters. Parameters. mparams; dfOutput vector to fill, result of ; dxInput vector used to compute . Implements sofa::core::behavior::ForceField< DataTypes >. ◆ addForce(). template<class DataTypes > . void sofa::component::solidmechanics::fem::elastic::TetrahedralCorotationalFEMForceField< DataTypes >::addForce ; (; const core::MechanicalParams * ; , . DataVecDeriv & ; f, . const DataVecCoord & ; x, . const DataVecDeriv & ; v . ). overridevirtual . Given the current position and velocity states, update the current force vector by computing and adding the forces associated with this ForceField.; If the ForceField can be represented as a matrix, this method computes ; This is the method that should be implemented by the component ; Implements sofa::core::behavior::ForceField< DataTypes >. ◆ addKToMatrix(). template<class DataTypes > . void sofa::component::solidmechanics::fem::elastic::TetrahedralCorotationalFEMForceField< DataTypes >::addKToMatrix ; (; sofa::linearalgebra::BaseMatrix * ; matrix, . SReal ; kFact, . unsigned int & ; offset . ). overridevirtual . Internal addKToMatrix Overloaded function, usually called from the generic addKToMatrix version. This addKToMatrix version directly gives access to the matrix to fill, the stiffness factor and the offset used to identify where the force field must add its contributions in the matrix. Parameters. matrixthe global stiffness matrix in which the force field adds its contribution. The matrix is global, i.e. different objects can add their contribution",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_tetrahedral_corotational_f_e_m_force_field.html:35012,update,update,35012,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_tetrahedral_corotational_f_e_m_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_tetrahedral_corotational_f_e_m_force_field.html,1,['update'],['update']
Deployability,tInformation &);  Input stream. More...;  . Attribute details. ◆ m_deformationGradient. template<class DataTypes > . Matrix3 sofa::component::solidmechanics::fem::hyperelastic::TetrahedronHyperelasticityFEMForceField< DataTypes >::TetrahedronRestInformation::m_deformationGradient. deformation gradient = gradPhi . ◆ m_fiberDirection. template<class DataTypes > . Coord sofa::component::solidmechanics::fem::hyperelastic::TetrahedronHyperelasticityFEMForceField< DataTypes >::TetrahedronRestInformation::m_fiberDirection. fiber direction in rest configuration . ◆ m_restVolume. template<class DataTypes > . Real sofa::component::solidmechanics::fem::hyperelastic::TetrahedronHyperelasticityFEMForceField< DataTypes >::TetrahedronRestInformation::m_restVolume {}. rest volume . ◆ m_shapeVector. template<class DataTypes > . Coord sofa::component::solidmechanics::fem::hyperelastic::TetrahedronHyperelasticityFEMForceField< DataTypes >::TetrahedronRestInformation::m_shapeVector[4]. shape vector at the rest configuration . ◆ m_SPKTensorGeneral. template<class DataTypes > . MatrixSym sofa::component::solidmechanics::fem::hyperelastic::TetrahedronHyperelasticityFEMForceField< DataTypes >::TetrahedronRestInformation::m_SPKTensorGeneral. volume/ restVolume . ◆ m_strainEnergy. template<class DataTypes > . Real sofa::component::solidmechanics::fem::hyperelastic::TetrahedronHyperelasticityFEMForceField< DataTypes >::TetrahedronRestInformation::m_strainEnergy {}. right Cauchy-Green deformation tensor C (gradPhi^T gradPhi) . ◆ m_volScale. template<class DataTypes > . Real sofa::component::solidmechanics::fem::hyperelastic::TetrahedronHyperelasticityFEMForceField< DataTypes >::TetrahedronRestInformation::m_volScale {}. current tetrahedron volume . ◆ m_volume. template<class DataTypes > . Real sofa::component::solidmechanics::fem::hyperelastic::TetrahedronHyperelasticityFEMForceField< DataTypes >::TetrahedronRestInformation::m_volume {}. Constructor details. ◆ TetrahedronRestInformation(). temp,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1_tetrahedron_hyperelasticity_11a43b7aa7f251e640b19f2d5ec26614.html:3500,configurat,configuration,3500,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1_tetrahedron_hyperelasticity_11a43b7aa7f251e640b19f2d5ec26614.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1_tetrahedron_hyperelasticity_11a43b7aa7f251e640b19f2d5ec26614.html,1,['configurat'],['configuration']
Deployability,"tName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(BaseInteractionProjectiveConstraintSet, BaseProjectiveConstraintSet)sofa::core::behavior::BaseInteractionProjectiveConstraintSet; sofa::core::behavior::BaseProjectiveConstraintSet::SOFA_ABSTRACT_CLASS(BaseProjectiveConstraintSet, objectmodel::BaseObject)sofa::core::behavior::BaseProjectiveConstraintSet; sofa::core::behavior::StateAccessor::SOFA_ABSTRACT_CLASS(StateAccessor, objectmodel::BaseObject)sofa::core::behavior::StateAccessor; sofa::core::behavior::StateAccessor::SOFA_ABSTRACT_CLASS(StateAccessor, objectmodel::BaseObject)sofa::core::behavior::StateAccessor; SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; sofa::StateAccessor()sofa::core::behavior::StateAccessorinlineprotected; sofa::core::behavior::StateAccessor::StateAccessor()sofa::core::behavior::StateAccessorinlineprotected; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~BaseProjectiveConstraintSet() overridesofa::core::behavior::BaseProjectiveConstraintSetinlineprotected; sofa::~StateAccessor() override=defaultsofa::core::behavior::StateAccessorprotected; sofa::core::behavior::StateAccessor::~StateAccessor() override=defaultsofa::core::behavior::StateAccessorprotected.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_interaction_projective_constraint_set-members.html:12662,update,updateInternal,12662,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_interaction_projective_constraint_set-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_interaction_projective_constraint_set-members.html,2,['update'],"['updateInternal', 'updateLinks']"
Deployability,"tName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(DataEngine, core::objectmodel::BaseObject)sofa::core::DataEngine; SOFA_CLASS(SOFA_TEMPLATE(MeshROI, DataTypes), SOFA_TEMPLATE(BaseROI, DataTypes))sofa::component::engine::select::MeshROI< DataTypes >; sofa::component::engine::select::BaseROI::SOFA_CLASS(SOFA_TEMPLATE(BaseROI, DataTypes), Inherit)sofa::component::engine::select::BaseROI< DataTypes >; sofa::core::DataEngine::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; Tetra typedefsofa::component::engine::select::BaseROI< DataTypes >; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; Triangle typedefsofa::component::engine::select::BaseROI< DataTypes >; update() finalsofa::core::DataEnginevirtual; updateAllInputsIfDirty()sofa::core::DataTrackerDDGNode; updateIfDirty() constsofa::core::objectmodel::DDGNode; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecCoord typedefsofa::component::engine::select::MeshROI< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecEdge typedefsofa::component::engine::select::BaseROI< DataTypes >; VecHexa typedefsofa::component::engine::select::BaseROI< DataTypes >; VecLink typedefsofa::core::objectmodel::Base; VecQuad typedefsofa::component::engine::select::BaseROI< DataTypes >; VecSlaves typedefsofa::core::objectmodel::BaseObject; VecTetra typedefsofa::component::engine::select::BaseROI< DataTypes >; VecTriangle typedefsofa::component::engine::select::BaseROI< DataTypes >; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overrides",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_mesh_r_o_i-members.html:19663,update,updateIfDirty,19663,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_mesh_r_o_i-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_mesh_r_o_i-members.html,1,['update'],['updateIfDirty']
Deployability,"tName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; showIndicesScalesofa::gl::component::engine::TextureInterpolation< DataTypes >protected; SOFA_ABSTRACT_CLASS(DataEngine, core::objectmodel::BaseObject)sofa::core::DataEngine; SOFA_CLASS(SOFA_TEMPLATE(TextureInterpolation, DataTypes), core::DataEngine)sofa::gl::component::engine::TextureInterpolation< DataTypes >; sofa::core::DataEngine::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; standardLinearInterpolation()sofa::gl::component::engine::TextureInterpolation< DataTypes >protected; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; TextureInterpolation()sofa::gl::component::engine::TextureInterpolation< DataTypes >protected; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; update() finalsofa::core::DataEnginevirtual; updateAllInputsIfDirty()sofa::core::DataTrackerDDGNode; updateGraph()sofa::gl::component::engine::TextureInterpolation< DataTypes >protected; updateIfDirty() constsofa::core::objectmodel::DDGNode; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecCoord typedefsofa::gl::component::engine::TextureInterpolation< DataTypes >; VecCoord2D typedefsofa::gl::component::engine::TextureInterpolation< DataTypes >; VecCoord3D typedefsofa::gl::component::engine::TextureInterpolation< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~DataEngine() overridesofa::core::DataEngineprotec",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1engine_1_1_texture_interpolation-members.html:13694,update,updateGraph,13694,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1engine_1_1_texture_interpolation-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1engine_1_1_texture_interpolation-members.html,1,['update'],['updateGraph']
Deployability,"tName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(DataEngine, core::objectmodel::BaseObject)sofa::core::DataEngine; SOFA_CLASS(SOFA_TEMPLATE(ClusteringEngine, DataTypes), core::DataEngine)sofa::component::engine::analyze::ClusteringEngine< DataTypes >; sofa::core::DataEngine::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; update() finalsofa::core::DataEnginevirtual; updateAllInputsIfDirty()sofa::core::DataTrackerDDGNode; updateIfDirty() constsofa::core::objectmodel::DDGNode; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VD typedefsofa::component::engine::analyze::ClusteringEngine< DataTypes >; VecCoord typedefsofa::component::engine::analyze::ClusteringEngine< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VI typedefsofa::component::engine::analyze::ClusteringEngine< DataTypes >; VVD typedefsofa::component::engine::analyze::ClusteringEngine< DataTypes >; VVI typedefsofa::component::engine::analyze::ClusteringEngine< DataTypes >; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::cor",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1analyze_1_1_clustering_engine-members.html:13048,update,update,13048,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1analyze_1_1_clustering_engine-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1analyze_1_1_clustering_engine-members.html,1,['update'],['update']
Deployability,"tParams *, MultiVecId , MultiVecId ); The default implementation successively calls: prepareStates, buildSystem, solveSystem, applyCorrection. The parameters are defined in class ConstraintParams. More...;  ; class  CRSMultiMatrixAccessor;  ; class  DefaultMultiMatrixAccessor;  ; class  ForceField;  Component computing forces within a simulated body. More...;  ; class  LinearSolver;  Abstract interface for linear system solvers. More...;  ; class  LinearSolverAccessor;  ; class  Mass;  Component responsible for mass-related computations (gravity, acceleration). More...;  ; class  MatrixAccessorCompat;  ; class  AddToMatrixCompatMatrix;  ; class  ApplyConstraintCompat;  ; class  MechanicalMatrix;  ; class  MixedInteractionConstraint;  Component computing constraints between a pair of simulated body. More...;  ; class  MixedInteractionForceField;  Component computing forces between a pair of simulated body. More...;  ; class  MultiMatrix;  ; class  MultiMatrixAccessor;  ; class  TMultiVec;  ; class  OdeSolver;  Component responsible for timestep integration, i.e. advancing the state from time t to t+dt. More...;  ; class  PairInteractionConstraint;  Component computing constraints between a pair of simulated body. More...;  ; class  PairInteractionForceField;  Component computing forces between a pair of simulated body. More...;  ; class  PairInteractionProjectiveConstraintSet;  Component computing constraints between a pair of simulated body. More...;  ; class  PairStateAccessor;  ; class  ProjectiveConstraintSet;  Component computing constraints within a simulated body. More...;  ; class  RotationFinder;  ; class  SingleMatrixAccessor;  ; class  SingleStateAccessor;  ; class  StateAccessor;  . Typedefs; typedef TMultiVec< V_COORD > MultiVecCoord;  ; typedef TMultiVec< V_DERIV > MultiVecDeriv;  ; typedef TMultiVec< V_MATDERIV > MultiVecMatrixDeriv;  . Enumerations; enum class  BlocData { SCALAR; , MAT33; };  ; enum class  BlocPrecision { FLOAT; , DOUBLE; };  . Functio",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1behavior.html:4092,integrat,integration,4092,api/master/sofa/html/namespacesofa_1_1core_1_1behavior.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1behavior.html,1,['integrat'],['integration']
Deployability,"tPotentialEnergy ; (; const core::MechanicalParams * ; , . const DataVecCoord & ;  . ); const. inlineoverridevirtual . Implements sofa::core::behavior::ForceField< DataTypes >. ◆ init(). template<class DataTypes > . void sofa::component::solidmechanics::fem::elastic::FastTetrahedralCorotationalForceField< DataTypes >::init ; (; void ; ). overridevirtual . Initialization method called at graph creation and modification, during top-down traversal. ; Reimplemented from sofa::component::solidmechanics::fem::elastic::BaseLinearElasticityFEMForceField< DataTypes >. ◆ setRotationDecompositionMethod(). template<class DataTypes > . void sofa::component::solidmechanics::fem::elastic::FastTetrahedralCorotationalForceField< DataTypes >::setRotationDecompositionMethod ; (; const RotationDecompositionMethod ; m). inline . ◆ SOFA_ATTRIBUTE_DISABLED(). template<class DataTypes > . sofa::component::solidmechanics::fem::elastic::FastTetrahedralCorotationalForceField< DataTypes >::SOFA_ATTRIBUTE_DISABLED ; (; """" ; , . ""v24.12"" ; , . ""Use d_youngModulus instead"" ;  . ). ◆ SOFA_CLASS(). template<class DataTypes > . sofa::component::solidmechanics::fem::elastic::FastTetrahedralCorotationalForceField< DataTypes >::SOFA_CLASS ; (; SOFA_TEMPLATE(FastTetrahedralCorotationalForceField< DataTypes >, DataTypes) ; , . SOFA_TEMPLATE(BaseLinearElasticityFEMForceField, DataTypes) ;  . ). ◆ updateTopologyInformation(). template<class DataTypes > . void sofa::component::solidmechanics::fem::elastic::FastTetrahedralCorotationalForceField< DataTypes >::updateTopologyInformation. Enum details. ◆ RotationDecompositionMethod. template<class DataTypes > . enum sofa::component::solidmechanics::fem::elastic::FastTetrahedralCorotationalForceField::RotationDecompositionMethod. EnumeratorPOLAR_DECOMPOSITION ; QR_DECOMPOSITION ; POLAR_DECOMPOSITION_MODIFIED ; LINEAR_ELASTIC . sofacomponentsolidmechanicsfemelasticFastTetrahedralCorotationalForceField; Generated on Mon Nov 11 2024 02:56:54 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_fast_tetrahedral_corotational_force_field.html:34298,update,updateTopologyInformation,34298,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_fast_tetrahedral_corotational_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_fast_tetrahedral_corotational_force_field.html,2,['update'],['updateTopologyInformation']
Deployability,"tSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; showInputsofa::component::engine::transform::SmoothMeshEngine< DataTypes >; showOutputsofa::component::engine::transform::SmoothMeshEngine< DataTypes >; SmoothMeshEngine()sofa::component::engine::transform::SmoothMeshEngine< DataTypes >protected; SOFA_ABSTRACT_CLASS(DataEngine, core::objectmodel::BaseObject)sofa::core::DataEngine; SOFA_CLASS(SOFA_TEMPLATE(SmoothMeshEngine, DataTypes), core::DataEngine)sofa::component::engine::transform::SmoothMeshEngine< DataTypes >; sofa::core::DataEngine::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; update() finalsofa::core::DataEnginevirtual; updateAllInputsIfDirty()sofa::core::DataTrackerDDGNode; updateIfDirty() constsofa::core::objectmodel::DDGNode; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecCoord typedefsofa::component::engine::transform::SmoothMeshEngine< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~DataEngine() overridesofa::core::DataEngineprotected; ~DDGNode()sofa::core::objectmodel::DDGNodevirtual; ~SmoothMeshEngine() overridesofa::component::engine::transform::SmoothMeshEngine< DataTy",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_smooth_mesh_engine-members.html:12949,update,update,12949,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_smooth_mesh_engine-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_smooth_mesh_engine-members.html,1,['update'],['update']
Deployability,"tSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(BaseState, objectmodel::BaseObject)sofa::core::BaseState; SOFA_CLASS(VisualState, SOFA_TEMPLATE(core::State, defaulttype::Vec3Types))sofa::core::visual::VisualState< DataTypes >; State< DataTypes >::SOFA_CLASS(SOFA_TEMPLATE(State, DataTypes), BaseState)sofa::core::State< DataTypes >; sofa::core::BaseState::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; State()sofa::core::State< DataTypes >protected; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecCoord typedefsofa::core::visual::VisualState< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecDeriv typedefsofa::core::visual::VisualState< DataTypes >; VecLink typedefsofa::core::objectmodel::Base; VecReal typedefsofa::core::State< DataTypes >; VecSlaves typedefsofa::core::objectmodel::BaseObject; VisualState()sofa::core::visual::VisualState< DataTypes >; write(core::VecCoordId v) overridesofa::core::visual::VisualState< DataTypes >virtual; write(core::VecDerivId v) overridesofa::core::visual::VisualState< DataTypes >virtual; write(core::MatrixDerivId) overridesofa::core::visual::VisualState< DataTypes >inlinevirtual; WriteCoord typedefsofa::core::State< DataTypes >; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; WriteDeriv ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1visual_1_1_visual_state-members.html:12084,update,updateInternal,12084,api/master/sofa/html/classsofa_1_1core_1_1visual_1_1_visual_state-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1visual_1_1_visual_state-members.html,1,['update'],['updateInternal']
Deployability,"tSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(VisualModel, objectmodel::BaseObject)sofa::core::visual::VisualModel; SOFA_CLASS(PostProcessManager, core::visual::VisualModel)sofa::gl::component::shader::PostProcessManager; sofa::core::visual::VisualManager::SOFA_CLASS(VisualManager, VisualModel)sofa::core::visual::VisualManager; sofa::core::visual::VisualModel::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateVisual(const VisualParams *)sofa::core::visual::VisualModel; updateVisual() finalsofa::core::visual::VisualModelvirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; vertFilenamesofa::gl::component::shader::PostProcessManager; VisualModel()sofa::core::visual::VisualModelprotected; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~PostProcessManager() overridesofa::gl::component::shader::PostProcessManagerprotected; ~VisualManager() overridesofa::core::visual::VisualManagerinlineprotected; ~VisualModel() overridesofa::core::visual::VisualModelinlineprotected.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_post_process_manager-members.html:11941,update,updateLinks,11941,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_post_process_manager-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_post_process_manager-members.html,3,['update'],"['updateLinks', 'updateVisual']"
Deployability,"tState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  . Public Member Functions;  SOFA_CLASS (SOFA_TEMPLATE(MeshSampler, DataTypes), core::DataEngine);  ;  MeshSampler ();  ;  ~MeshSampler () override;  ; void reinit () override;  Update method called when variables used in precomputation are modified. More...;  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; void doUpdate () override;  Where you put your engine's impl. More...;  ; void draw (const core::visual::VisualParams *vparams) override;  Render internal data of this object, for debugging purposes. More...;  ;  Public Member Functions inherited from sofa::core::DataEngine;  SOFA_ABSTRACT_CLASS (DataEngine, core::objectmodel::BaseObject);  ; void update () final;  ; void addInput (sofa::core::objectmodel::BaseData *data);  Add a new input to this engine. More...;  ; void addOutput (objectmodel::BaseData *n);  Add a new output to this engine. More...;  ;  Public Member Functions inherited from sofa::core::DataTrackerDDGNode;  DataTrackerDDGNode ();  ; void addInputs (std::initializer_list< sofa::core::objectmodel::BaseData * > datas);  Create a DataCallback object associated with multiple Data fields. More...;  ; void addOutputs (std::initializer_list< sofa::core::objectmodel::BaseData * > datas);  ; virtual void cleanDirty (const core::ExecParams *params=nullptr);  ; void updateAllInputsIfDirty ();  ;  Public Member Functions inherited from sofa::core::objectmodel::DDGNode;  DDGNode ();  Constructor. More...;  ; virtual ~DDGNode ();  Destructor. Automatically remove remaining links. More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void delInput (DDGNode *n);  Remove an input fr",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_mesh_sampler.html:3025,update,update,3025,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_mesh_sampler.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_mesh_sampler.html,1,['update'],['update']
Deployability,"ta & getDataFields () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapData & getDataAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; const VecLink & getLinks () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapLink & getLinkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Protected Member Functions;  ViewerSetting ();  Default constructor. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::ConfigurationSetting;  ConfigurationSetting ();  Default constructor. More...;  ;  ~ConfigurationSetting () override;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1setting_1_1_viewer_setting.html:11370,update,update,11370,api/master/sofa/html/classsofa_1_1component_1_1setting_1_1_viewer_setting.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1setting_1_1_viewer_setting.html,1,['update'],['update']
Deployability,"ta *&ptr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  ;  Public Member Functions inherited from sofa::core::behavior::SingleStateAccessor< DataTypes >;  SOFA_ABSTRACT_CLASS (SOFA_TEMPLATE(SingleStateAccessor, DataTypes), StateAccessor);  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; MechanicalState< DataTypes > * getMState ();  ; const MechanicalState< DataTypes > * getMState () const;  . Protected Member Functions;  PlaneProjectiveConstraint ();  ; virtual ~PlaneProjectiveConstraint ();  ;  Protected Member Functions inherited from sofa::core::behavior::ProjectiveConstraintSet< DataTypes >;  ProjectiveConstraintSet (MechanicalState< DataTypes > *mm=nullptr);  ;  ~ProjectiveConstraintSet () override;  ;  Protected Member Functions inherited from sofa::core::behavior::BaseProjectiveConstraintSet;  BaseProjectiveConstraintSet ();  ;  ~BaseProjectiveConstraintSet () override;  ;  Protected Member Functions inherited from sofa::core::behavior::StateAccessor;  StateAccessor ();  ;  ~StateAccessor () override=default;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::obj",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_plane_projective_constraint.html:17774,update,update,17774,api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_plane_projective_constraint.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_plane_projective_constraint.html,1,['update'],['update']
Deployability,"ta *&ptr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  ;  Public Member Functions inherited from sofa::core::behavior::SingleStateAccessor< DataTypes >;  SOFA_ABSTRACT_CLASS (SOFA_TEMPLATE(SingleStateAccessor, DataTypes), StateAccessor);  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; MechanicalState< DataTypes > * getMState ();  ; const MechanicalState< DataTypes > * getMState () const;  . Protected Member Functions;  PointProjectiveConstraint ();  ; virtual ~PointProjectiveConstraint ();  ;  Protected Member Functions inherited from sofa::core::behavior::ProjectiveConstraintSet< DataTypes >;  ProjectiveConstraintSet (MechanicalState< DataTypes > *mm=nullptr);  ;  ~ProjectiveConstraintSet () override;  ;  Protected Member Functions inherited from sofa::core::behavior::BaseProjectiveConstraintSet;  BaseProjectiveConstraintSet ();  ;  ~BaseProjectiveConstraintSet () override;  ;  Protected Member Functions inherited from sofa::core::behavior::StateAccessor;  StateAccessor ();  ;  ~StateAccessor () override=default;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::obj",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_point_projective_constraint.html:17832,update,update,17832,api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_point_projective_constraint.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_point_projective_constraint.html,1,['update'],['update']
Deployability,"ta *field, const char *alias);  Add an alias to a Data. More...;  ; void addLink (BaseLink *l);  Add a link. More...;  ; void addAlias (BaseLink *link, const char *alias);  Add an alias to a Link. More...;  ; const VecData & getDataFields () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapData & getDataAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; const VecLink & getLinks () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapLink & getLinkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Protected Member Functions; void updateOutputData ();  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseIni",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1visual_1_1_base_camera.html:16918,update,updateOutputData,16918,api/master/sofa/html/classsofa_1_1component_1_1visual_1_1_base_camera.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1visual_1_1_base_camera.html,2,['update'],"['update', 'updateOutputData']"
Deployability,ta dependencies graph. The data dependency graph is used to update the data when some of other changes and it is at the root of the implementation of the data update mecanisme as well as DataEngines. . Protected Attributes; DDGLinkContainer inputs;  ; DDGLinkContainer outputs;  . Public Member Functions;  DDGNode ();  Constructor. More...;  ; virtual ~DDGNode ();  Destructor. Automatically remove remaining links. More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void delInput (DDGNode *n);  Remove an input from this node. More...;  ; void addOutput (DDGNode *n);  Add a new output to this node. More...;  ; void delOutput (DDGNode *n);  Remove an output from this node. More...;  ; const DDGLinkContainer & getInputs ();  Get the list of inputs for this DDGNode. More...;  ; const DDGLinkContainer & getOutputs ();  Get the list of outputs for this DDGNode. More...;  ; virtual void update ()=0;  Update this value. More...;  ; bool isDirty () const;  Returns true if the DDGNode needs to be updated. More...;  ; virtual void setDirtyValue ();  Indicate the value needs to be updated. More...;  ; virtual void setDirtyOutputs ();  Indicate the outputs needs to be updated. This method must be called after changing the value of this node. More...;  ; void cleanDirty ();  Set dirty flag to false. More...;  ; virtual void notifyEndEdit ();  Notify links that the DGNode has been modified. More...;  ; void updateIfDirty () const;  Utility method to call update if necessary. This method should be called before reading of writing the value of this node. More...;  . Protected Member Functions; virtual void doAddInput (DDGNode *n);  ; virtual void doDelInput (DDGNode *n);  ; virtual void doAddOutput (DDGNode *n);  ; virtual void doDelOutput (DDGNode *n);  ; void cleanDirtyOutputsOfInputs ();  the dirtyOutputs flags of all the inputs will be set to false More...;  . Attribute details. ◆ inputs. DDGLinkContainer sofa::core::objectmodel::DDGNode::inputs. prot,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_d_d_g_node.html:1726,update,updated,1726,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_d_d_g_node.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_d_d_g_node.html,1,['update'],['updated']
Deployability,"ta instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  ;  Protected Attributes inherited from sofa::core::behavior::SingleStateAccessor< DataTypes >; SingleLink< SingleStateAccessor< DataTypes >, MechanicalState< DataTypes >, BaseLink::FLAG_STRONGLINK > mstate;  . Public Member Functions;  SOFA_CLASS (SOFA_TEMPLATE2(MeshMatrixMass, DataTypes, GeometricalTypes), SOFA_TEMPLATE(core::behavior::Mass, DataTypes));  ; virtual void clear ();  ; void reinit () override;  Update method called when variables used in precomputation are modified. More...;  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; void handleEvent (sofa::core::objectmodel::Event *event) override;  Handle an event. More...;  ; void doUpdateInternal () override;  Implementation of the internal update. More...;  ; sofa::geometry::ElementType getMassTopologyType () const;  ; void setMassTopologyType (sofa::geometry::ElementType t);  ; std::size_t getMassCount () const;  ; void printMass ();  Print key mass information (totalMass, vertexMass and massDensity) More...;  ; void computeMass ();  Compute the mass from input values. More...;  ; void copyVertexMass ();  Copy the vertex mass scalar (in case of CudaTypes) More...;  ; void addMDx (const core::MechanicalParams *, DataVecDeriv &f, const DataVecDeriv &dx, SReal factor) override;  ; void accFromF (const core::MechanicalParams *, DataVecDeriv &a, const DataVecDeriv &f) override;  ; void addForce (const core::MechanicalParams *, DataVecDeriv &f, const DataVecCoord &x, const DataVecDeriv &v) override;  ; SReal getKineticEnergy (const core::MechanicalParams *, const DataVecDeriv &v) const override;  vMv/2 using dof->getV() override More...;  ; SReal getPotentialEnergy (const core::MechanicalParams",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_mesh_matrix_mass.html:7051,update,update,7051,api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_mesh_matrix_mass.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_mesh_matrix_mass.html,1,['update'],['update']
Deployability,"ta::BaseInitData &res, const char *name, const char *help, BaseData::DataFlags dataFlags);  Helper method used by initData() More...;  ; template<class T > ; void initData0 (Data< T > *field, typename Data< T >::InitData &res, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ;  Protected Member Functions inherited from sofa::core::behavior::SingleStateAccessor< DataTypes >;  SingleStateAccessor (MechanicalState< DataTypes > *mm=nullptr);  ;  ~SingleStateAccessor () override=default;  . Additional Inherited Members;  Protected Attributes inherited from sofa::component::solidmechanics::fem::elastic::TriangularFEMForceField< DataTypes >; bool _anisotropicMaterial;  ; bool updateMatrix;  ;  Protected Attributes inherited from sofa::core::behavior::StateAccessor; MultiLink< StateAccessor, BaseMechanicalState, BaseLink::FLAG_DUPLICATE > l_mechanicalStates;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObject; SingleLink< BaseObject, BaseContext, BaseLink::FLAG_DOUBLELINK > l_context;  ; LinkSlaves l_slaves;  ; SingleLink< BaseObject, BaseObject, BaseLink::FLAG_DOUBLELINK > l_master;  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  ;  Protected Attributes inherited from sofa::core::behavior::SingleStateAccessor< DataTypes >; SingleLink< SingleStateAccessor< DataTypes >, MechanicalState< DataTypes >, BaseLink::FLAG_STRONGLINK > mstate;  ;  Static Protected Attributes inherited from sofa::component::solidmechanics::fem::elastic::BaseLinearElasticityFEMForceField< DataTypes >; static cons",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_triangular_anisotropic_f_e_m_force_field.html:25332,update,updateMatrix,25332,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_triangular_anisotropic_f_e_m_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_triangular_anisotropic_f_e_m_force_field.html,1,['update'],['updateMatrix']
Deployability,"taTypes > . Data<bool> sofa::component::engine::select::BaseROI< DataTypes >::d_computeHexahedra. If true, will compute hexahedra list and index list inside the ROI. (default = true) . ◆ d_computeQuads. template<class DataTypes > . Data<bool> sofa::component::engine::select::BaseROI< DataTypes >::d_computeQuads. If true, will compute quad list and index list inside the ROI. (default = true) . ◆ d_computeTetrahedra. template<class DataTypes > . Data<bool> sofa::component::engine::select::BaseROI< DataTypes >::d_computeTetrahedra. If true, will compute tetrahedra list and index list inside the ROI. (default = true) . ◆ d_computeTriangles. template<class DataTypes > . Data<bool> sofa::component::engine::select::BaseROI< DataTypes >::d_computeTriangles. If true, will compute triangle list and index list inside the ROI. (default = true) . ◆ d_doUpdate. template<class DataTypes > . Data<bool> sofa::component::engine::select::BaseROI< DataTypes >::d_doUpdate. If true, updates the selection at the beginning of simulation steps. (default = true) . ◆ d_drawEdges. template<class DataTypes > . Data<bool> sofa::component::engine::select::BaseROI< DataTypes >::d_drawEdges. Draw Edges. (default = false) . ◆ d_drawHexahedra. template<class DataTypes > . Data<bool> sofa::component::engine::select::BaseROI< DataTypes >::d_drawHexahedra. Draw Tetrahedra. (default = false) . ◆ d_drawPoints. template<class DataTypes > . Data<bool> sofa::component::engine::select::BaseROI< DataTypes >::d_drawPoints. Draw Points. (default = false) . ◆ d_drawQuads. template<class DataTypes > . Data<bool> sofa::component::engine::select::BaseROI< DataTypes >::d_drawQuads. Draw Quads. (default = false) . ◆ d_drawROI. template<class DataTypes > . Data<bool> sofa::component::engine::select::BaseROI< DataTypes >::d_drawROI. Draw the ROI. (default = false) . ◆ d_drawSize. template<class DataTypes > . Data<float> sofa::component::engine::select::BaseROI< DataTypes >::d_drawSize. rendering size for ROI and topologi",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_base_r_o_i.html:22582,update,updates,22582,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_base_r_o_i.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_base_r_o_i.html,1,['update'],['updates']
Deployability,"tainer()sofa::core::topology::TopologyContainerinlineprotected; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; Triangle typedefsofa::component::topology::container::dynamic::TetrahedronSetTopologyContainer; TriangleID typedefsofa::component::topology::container::dynamic::TetrahedronSetTopologyContainer; TrianglesAroundEdge typedefsofa::component::topology::container::dynamic::TriangleSetTopologyContainer; TrianglesAroundVertex typedefsofa::component::topology::container::dynamic::TriangleSetTopologyContainer; TriangleSetTopologyContainer()sofa::component::topology::container::dynamic::TriangleSetTopologyContainerprotected; TrianglesInTetrahedron typedefsofa::component::topology::container::dynamic::TetrahedronSetTopologyContainer; unlinkTopologyHandlerToData(core::topology::TopologyHandler *topologyHandler, sofa::geometry::ElementType elementType) overridesofa::component::topology::container::dynamic::TetrahedronSetTopologyContainervirtual; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecEdgeID typedefsofa::component::topology::container::dynamic::EdgeSetTopologyContainer; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VecTetraID typedefsofa::component::topology::container::dynamic::TetrahedronSetTopologyContainer; VecTriangleID typedefsofa::component::topology::container::dynamic::TriangleSetTopologyContainer; VerticesAroundVertex typedefsofa::core::topology::BaseMeshTopology; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~BaseTopologyObject() overridesofa::core::topology::BaseTopologyObjectinlineprotect",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_tetrahedron_set_topology_container-members.html:43118,update,updateInternal,43118,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_tetrahedron_set_topology_container-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_tetrahedron_set_topology_container-members.html,1,['update'],['updateInternal']
Deployability,"tant::MeshTopology::init ; (; void ; ). overridevirtual . Initialization method called at graph creation and modification, during top-down traversal. ; Reimplemented from sofa::core::objectmodel::BaseObject.; Reimplemented in sofa::component::topology::container::grid::SparseGridTopology, sofa::component::topology::container::grid::SparseGridRamificationTopology, sofa::component::topology::container::grid::SparseGridMultipleTopology, sofa::component::topology::container::grid::RegularGridTopology, and sofa::component::topology::container::grid::GridTopology. ◆ invalidate(). void sofa::component::topology::container::constant::MeshTopology::invalidate ; (; ). ◆ isLines(). virtual bool sofa::component::topology::container::constant::MeshTopology::isLines ; (; ). inlinevirtual . ◆ isSurface(). virtual bool sofa::component::topology::container::constant::MeshTopology::isSurface ; (; ). inlinevirtual . ◆ isVolume(). virtual bool sofa::component::topology::container::constant::MeshTopology::isVolume ; (; ). inlinevirtual . ◆ reOrientateTriangle(). void sofa::component::topology::container::constant::MeshTopology::reOrientateTriangle ; (; TriangleID ; id). overridevirtual . Will change order of vertices in triangle: t[1] <=> t[2]. ; Reimplemented from sofa::core::topology::BaseMeshTopology. ◆ setNbPoints(). void sofa::component::topology::container::constant::MeshTopology::setNbPoints ; (; Size ; n). overridevirtual . Reimplemented from sofa::core::topology::Topology. ◆ SOFA_CLASS(). sofa::component::topology::container::constant::MeshTopology::SOFA_CLASS ; (; MeshTopology ; , . core::topology::BaseMeshTopology ;  . ). ◆ updateHexahedra(). void sofa::component::topology::container::constant::MeshTopology::updateHexahedra ; (; ). virtual . ◆ updateTetrahedra(). void sofa::component::topology::container::constant::MeshTopology::updateTetrahedra ; (; ). virtual . sofacomponenttopologycontainerconstantMeshTopology; Generated on Mon Nov 11 2024 03:10:01 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1constant_1_1_mesh_topology.html:81929,update,updateHexahedra,81929,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1constant_1_1_mesh_topology.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1constant_1_1_mesh_topology.html,4,['update'],"['updateHexahedra', 'updateTetrahedra']"
Deployability,"tate > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  . Public Member Functions;  SOFA_CLASS (OglSceneFrame, VisualModel);  ;  OglSceneFrame ();  ; void doDrawVisual (const core::visual::VisualParams *) override;  ;  Public Member Functions inherited from sofa::core::visual::VisualModel;  SOFA_ABSTRACT_CLASS (VisualModel, objectmodel::BaseObject);  ; virtual void drawVisual (const VisualParams *) final;  Display the VisualModel object. More...;  ; void initVisual (const VisualParams *);  Initialize the textures, or other graphical resources. More...;  ; virtual void initVisual () final;  ; void updateVisual (const VisualParams *);  used to update the model if necessary. More...;  ; virtual void updateVisual () final;  ; virtual void clearVisual ();  clear some graphical resources (generally called before the deleteVisitor). More...;  ; virtual void fwdDraw (VisualParams *);  Called before objects in the current branch are displayed. More...;  ; virtual void bwdDraw (VisualParams *);  Called after objects in the current branch are displayed. More...;  ; virtual void drawTransparent (const VisualParams *);  Display transparent surfaces. More...;  ; virtual void drawShadow (const VisualParams *vparams);  Display shadow-casting surfaces. More...;  ; virtual void parallelUpdateVisual ();  used to update the model if necessary. More...;  ; virtual bool addBBox (SReal *, SReal *);  used to add the bounding-box of this visual model to the given bounding box in order to compute the scene bounding box or cull hidden objects. More...;  ; virtual void applyTranslation (const SReal, const SReal, const SReal);  ; virtual void applyRotation (const SReal, const SReal, const SReal);  ; virtual void applyRotation (const type::Quat< SReal >);  ; virt",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_ogl_scene_frame.html:2512,update,updateVisual,2512,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_ogl_scene_frame.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_ogl_scene_frame.html,1,['update'],['updateVisual']
Deployability,"tateAccessor; SingleStateAccessor< TDataTypes >::SOFA_ABSTRACT_CLASS(SOFA_TEMPLATE(SingleStateAccessor, TDataTypes), StateAccessor)sofa::core::behavior::SingleStateAccessor< TDataTypes >; SOFA_CLASS(SOFA_TEMPLATE(PatchTestMovementProjectiveConstraint, TDataTypes), SOFA_TEMPLATE(sofa::core::behavior::ProjectiveConstraintSet, TDataTypes))sofa::component::constraint::projective::PatchTestMovementProjectiveConstraint< TDataTypes >; ProjectiveConstraintSet< TDataTypes >::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SOFA_CLASS2(SOFA_TEMPLATE(ProjectiveConstraintSet, TDataTypes), BaseProjectiveConstraintSet, SOFA_TEMPLATE(SingleStateAccessor, TDataTypes))sofa::core::behavior::ProjectiveConstraintSet< TDataTypes >; SPtr typedefsofa::core::objectmodel::Base; StateAccessor()sofa::core::behavior::StateAccessorinlineprotected; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecCoord typedefsofa::component::constraint::projective::PatchTestMovementProjectiveConstraint< TDataTypes >; VecData typedefsofa::core::objectmodel::Base; VecDeriv typedefsofa::component::constraint::projective::PatchTestMovementProjectiveConstraint< TDataTypes >; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; x0sofa::component::constraint::projective::PatchTestMovementProjectiveConstraint< TDataTypes >; xfsofa::component::constraint::projective::PatchTestMovementProjectiveConstraint< TDataTypes >; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~BaseProjectiveConstraint",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_patch_test_movement_projective_constraint-members.html:18420,update,updateInternal,18420,api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_patch_test_movement_projective_constraint-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_patch_test_movement_projective_constraint-members.html,1,['update'],['updateInternal']
Deployability,"tateAccessor; sofa::core::behavior::SingleStateAccessor::SOFA_ABSTRACT_CLASS(SOFA_TEMPLATE(SingleStateAccessor, DataTypes), StateAccessor)sofa::core::behavior::SingleStateAccessor< DataTypes >; SOFA_CLASS(SOFA_TEMPLATE(FixedRotationProjectiveConstraint, DataTypes), SOFA_TEMPLATE(sofa::core::behavior::ProjectiveConstraintSet, DataTypes))sofa::component::constraint::projective::FixedRotationProjectiveConstraint< DataTypes >; sofa::core::behavior::ProjectiveConstraintSet::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SOFA_CLASS2(SOFA_TEMPLATE(ProjectiveConstraintSet, DataTypes), BaseProjectiveConstraintSet, SOFA_TEMPLATE(SingleStateAccessor, DataTypes))sofa::core::behavior::ProjectiveConstraintSet< DataTypes >; SPtr typedefsofa::core::objectmodel::Base; StateAccessor()sofa::core::behavior::StateAccessorinlineprotected; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; Vec3 typedefsofa::component::constraint::projective::FixedRotationProjectiveConstraint< DataTypes >; VecCoord typedefsofa::component::constraint::projective::FixedRotationProjectiveConstraint< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecDeriv typedefsofa::component::constraint::projective::FixedRotationProjectiveConstraint< DataTypes >; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~BaseProjectiveConstraintSet() overridesofa::core::behavior::BaseProjectiveConstraintSetinlineprotected; ~FixedRotationProject",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_fixed_rotation_projective_constraint-members.html:16539,update,updateInternal,16539,api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_fixed_rotation_projective_constraint-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_fixed_rotation_projective_constraint-members.html,1,['update'],['updateInternal']
Deployability,"tateAccessor; sofa::core::behavior::SingleStateAccessor::SOFA_ABSTRACT_CLASS(SOFA_TEMPLATE(SingleStateAccessor, DataTypes), StateAccessor)sofa::core::behavior::SingleStateAccessor< DataTypes >; SOFA_CLASS(SOFA_TEMPLATE(HermiteSplineProjectiveConstraint, DataTypes), SOFA_TEMPLATE(sofa::core::behavior::ProjectiveConstraintSet, DataTypes))sofa::component::constraint::projective::HermiteSplineProjectiveConstraint< DataTypes >; sofa::core::behavior::ProjectiveConstraintSet::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SOFA_CLASS2(SOFA_TEMPLATE(ProjectiveConstraintSet, DataTypes), BaseProjectiveConstraintSet, SOFA_TEMPLATE(SingleStateAccessor, DataTypes))sofa::core::behavior::ProjectiveConstraintSet< DataTypes >; SPtr typedefsofa::core::objectmodel::Base; StateAccessor()sofa::core::behavior::StateAccessorinlineprotected; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; Vec2R typedefsofa::component::constraint::projective::HermiteSplineProjectiveConstraint< DataTypes >; Vec3R typedefsofa::component::constraint::projective::HermiteSplineProjectiveConstraint< DataTypes >; VecCoord typedefsofa::component::constraint::projective::HermiteSplineProjectiveConstraint< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecDeriv typedefsofa::component::constraint::projective::HermiteSplineProjectiveConstraint< DataTypes >; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~BaseProjectiveConstrai",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_hermite_spline_projective_constraint-members.html:19556,update,updateInternal,19556,api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_hermite_spline_projective_constraint-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_hermite_spline_projective_constraint-members.html,1,['update'],['updateInternal']
Deployability,"tateAccessor; sofa::core::behavior::SingleStateAccessor::SOFA_ABSTRACT_CLASS(SOFA_TEMPLATE(SingleStateAccessor, DataTypes), StateAccessor)sofa::core::behavior::SingleStateAccessor< DataTypes >; SOFA_CLASS(SOFA_TEMPLATE(PlaneForceField, DataTypes), SOFA_TEMPLATE(core::behavior::ForceField, DataTypes))sofa::component::mechanicalload::PlaneForceField< DataTypes >; ForceField< DataTypes >::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SOFA_CLASS2(SOFA_TEMPLATE(ForceField, DataTypes), BaseForceField, SOFA_TEMPLATE(SingleStateAccessor, DataTypes))sofa::core::behavior::ForceField< DataTypes >; SPtr typedefsofa::core::objectmodel::Base; StateAccessor()sofa::core::behavior::StateAccessorinlineprotected; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateStiffness(const VecCoord &x)sofa::component::mechanicalload::PlaneForceField< DataTypes >virtual; VecCoord typedefsofa::component::mechanicalload::PlaneForceField< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecDeriv typedefsofa::component::mechanicalload::PlaneForceField< DataTypes >; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseForceField() override=defaultsofa::core::behavior::BaseForceFieldprotected; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~ForceField() overridesofa::core::behavior::ForceField< DataTypes >protected; ~SingleStateAccessor() override=defaultsofa::core::behavior::SingleStateAccessor< DataTypes >protected; ~StateAccessor() override=defaultso",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_plane_force_field-members.html:17274,update,updateStiffness,17274,api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_plane_force_field-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_plane_force_field-members.html,1,['update'],['updateStiffness']
Deployability,"tatic Public Member Functions |; Friends |; List of all members . sofa::gui::common::Operation Class Reference . #include <MouseOperations.h>. Inheritance diagram for sofa::gui::common::Operation:. [legend]. Public Attributes; sofa::gui::component::performer::InteractionPerformer * performer;  . Protected Attributes; PickHandler * pickHandle;  ; sofa::component::setting::MouseButtonSetting::SPtr mbsetting;  ; MOUSE_BUTTON button;  . Public Member Functions;  Operation (sofa::component::setting::MouseButtonSetting::SPtr s=nullptr);  ; virtual ~Operation ();  ; virtual void configure (PickHandler *picker, MOUSE_BUTTON b);  ; virtual void configure (PickHandler *picker, sofa::component::setting::MouseButtonSetting *s);  ; virtual void start ();  ; virtual void execution ();  This function is called each time the mouse is clicked. More...;  ; virtual void end ();  ; virtual void endOperation ();  This function is called after each mouse click. More...;  ; virtual void wait ();  This function is called when shift key is released. More...;  ; virtual void setSetting (sofa::component::setting::MouseButtonSetting *s);  ; virtual std::string defaultPerformerType ();  ; virtual sofa::gui::component::performer::InteractionPerformer * createPerformer ();  ; virtual void configurePerformer (sofa::gui::component::performer::InteractionPerformer *p);  ; MOUSE_BUTTON getMouseButton () const;  ; std::string getId ();  . Static Public Member Functions; static MOUSE_BUTTON GetMouseId (unsigned int i);  . Friends; class OperationFactory;  . Attribute details. ◆ button. MOUSE_BUTTON sofa::gui::common::Operation::button. protected . ◆ mbsetting. sofa::component::setting::MouseButtonSetting::SPtr sofa::gui::common::Operation::mbsetting. protected . ◆ performer. sofa::gui::component::performer::InteractionPerformer* sofa::gui::common::Operation::performer. ◆ pickHandle. PickHandler* sofa::gui::common::Operation::pickHandle. protected . Constructor details. ◆ Operation(). sofa::gui::common::",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1common_1_1_operation.html:1237,release,released,1237,api/master/sofa/html/classsofa_1_1gui_1_1common_1_1_operation.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1common_1_1_operation.html,1,['release'],['released']
Deployability,"tatic; setSizeH(int _valH)sofa::gui::qt::RealGUIinlinevirtualslot; setSizeW(int _valW)sofa::gui::qt::RealGUIinlinevirtualslot; setSleepingNode(sofa::simulation::Node *, bool)sofa::gui::qt::RealGUIvirtualslot; setTitle(std::string windowTitle)sofa::gui::qt::RealGUIvirtual; setupSurfaceFormat()sofa::gui::qt::RealGUIstatic; setViewerConfiguration(sofa::component::setting::ViewerSetting *viewerConf) overridesofa::gui::qt::RealGUIvirtual; setViewerResolution(int w, int h) overridesofa::gui::qt::RealGUIvirtual; showAbout()sofa::gui::qt::RealGUIvirtualslot; showDocBrowser()sofa::gui::qt::RealGUIvirtualslot; showFPS(double fps) overridesofa::gui::qt::RealGUIvirtual; showhideElements()sofa::gui::qt::RealGUIvirtualslot; showMouseManager()sofa::gui::qt::RealGUIvirtualslot; showPluginManager()sofa::gui::qt::RealGUIvirtualslot; showVideoRecorderManager()sofa::gui::qt::RealGUIvirtualslot; showWindowDataGraph()sofa::gui::qt::RealGUIvirtualslot; simulationGraphsofa::gui::qt::RealGUI; simulationNamesofa::gui::qt::RealGUIprotected; sleep(float seconds, float init_time)sofa::gui::qt::RealGUIinlineprotected; startDumpVisitor()sofa::gui::qt::RealGUIprotected; statWidgetsofa::gui::qt::RealGUIprotected; step()sofa::gui::qt::RealGUIvirtualslot; stepMainLoop() overridesofa::gui::qt::RealGUIvirtual; stopDumpVisitor()sofa::gui::qt::RealGUIprotected; timeLabelsofa::gui::qt::RealGUIprotected; timerIdlesofa::gui::qt::RealGUIprotected; timerStepsofa::gui::qt::RealGUIprotected; toolsDockMoved()sofa::gui::qt::RealGUIvirtualslot; unloadScene(bool _withViewer=true)sofa::gui::qt::RealGUIvirtual; update()sofa::gui::qt::RealGUIvirtualslot; updateBackgroundColour()sofa::gui::qt::RealGUIvirtualslot; updateBackgroundImage()sofa::gui::qt::RealGUIvirtualslot; updateDtEditState()sofa::gui::qt::RealGUIvirtualslot; updateViewerList()sofa::gui::qt::RealGUIprotectedvirtualslot; viewerMapsofa::gui::qt::RealGUIprotected; ~BaseGUI()sofa::gui::common::BaseGUIprotectedvirtual; ~RealGUI() overridesofa::gui::qt::RealGUI.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_real_g_u_i-members.html:9474,update,update,9474,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_real_g_u_i-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_real_g_u_i-members.html,5,['update'],"['update', 'updateBackgroundColour', 'updateBackgroundImage', 'updateDtEditState', 'updateViewerList']"
Deployability,"tatic; sofa::SOFA_ABSTRACT_CLASS(VisualModel, objectmodel::BaseObject)sofa::core::visual::VisualModel; sofa::gl::component::shader::OglShaderElement::SOFA_ABSTRACT_CLASS(ShaderElement, objectmodel::BaseObject)sofa::core::visual::ShaderElement; SOFA_CLASS(OglInt2Variable, SOFA_TEMPLATE(OglVariable, SOFA_TEMPLATE2(type::Vec, 2, int)))sofa::gl::component::shader::OglInt2Variable; OglVariable< type::Vec< 2, int > >::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SOFA_CLASS2(OglVariable, core::visual::VisualModel, OglShaderElement)sofa::gl::component::shader::OglVariable< type::Vec< 2, int > >; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateVisual(const VisualParams *)sofa::core::visual::VisualModel; updateVisual() finalsofa::core::visual::VisualModelvirtual; valuesofa::gl::component::shader::OglVariable< type::Vec< 2, int > >; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VisualModel()sofa::core::visual::VisualModelprotected; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~OglInt2Variable()sofa::gl::component::shader::OglInt2Variableinlinevirtual; ~OglShaderElement() overridesofa::gl::component::shader::OglShaderElementinline; ~OglVariable() overridesofa::gl::component::shader::OglVariable< type::Vec< 2, int > >inlineprotected; ~ShaderElement() overridesofa::core::visual::ShaderElementinlineprotected; ~VisualModel() overridesofa::core::vis",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_int2_variable-members.html:13704,update,updateVisual,13704,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_int2_variable-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_int2_variable-members.html,1,['update'],['updateVisual']
Deployability,"tatic; sofa::SOFA_ABSTRACT_CLASS(VisualModel, objectmodel::BaseObject)sofa::core::visual::VisualModel; sofa::gl::component::shader::OglShaderElement::SOFA_ABSTRACT_CLASS(ShaderElement, objectmodel::BaseObject)sofa::core::visual::ShaderElement; SOFA_CLASS(OglInt3Variable, SOFA_TEMPLATE(OglVariable, SOFA_TEMPLATE2(type::Vec, 3, int)))sofa::gl::component::shader::OglInt3Variable; OglVariable< type::Vec< 3, int > >::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SOFA_CLASS2(OglVariable, core::visual::VisualModel, OglShaderElement)sofa::gl::component::shader::OglVariable< type::Vec< 3, int > >; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateVisual(const VisualParams *)sofa::core::visual::VisualModel; updateVisual() finalsofa::core::visual::VisualModelvirtual; valuesofa::gl::component::shader::OglVariable< type::Vec< 3, int > >; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VisualModel()sofa::core::visual::VisualModelprotected; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~OglInt3Variable()sofa::gl::component::shader::OglInt3Variableinlinevirtual; ~OglShaderElement() overridesofa::gl::component::shader::OglShaderElementinline; ~OglVariable() overridesofa::gl::component::shader::OglVariable< type::Vec< 3, int > >inlineprotected; ~ShaderElement() overridesofa::core::visual::ShaderElementinlineprotected; ~VisualModel() overridesofa::core::vis",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_int3_variable-members.html:13704,update,updateVisual,13704,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_int3_variable-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_int3_variable-members.html,1,['update'],['updateVisual']
Deployability,"tatic; sofa::SOFA_ABSTRACT_CLASS(VisualModel, objectmodel::BaseObject)sofa::core::visual::VisualModel; sofa::gl::component::shader::OglShaderElement::SOFA_ABSTRACT_CLASS(ShaderElement, objectmodel::BaseObject)sofa::core::visual::ShaderElement; SOFA_CLASS(OglInt4Variable, SOFA_TEMPLATE(OglVariable, SOFA_TEMPLATE2(type::Vec, 4, int)))sofa::gl::component::shader::OglInt4Variable; OglVariable< type::Vec< 4, int > >::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SOFA_CLASS2(OglVariable, core::visual::VisualModel, OglShaderElement)sofa::gl::component::shader::OglVariable< type::Vec< 4, int > >; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateVisual(const VisualParams *)sofa::core::visual::VisualModel; updateVisual() finalsofa::core::visual::VisualModelvirtual; valuesofa::gl::component::shader::OglVariable< type::Vec< 4, int > >; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VisualModel()sofa::core::visual::VisualModelprotected; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~OglInt4Variable()sofa::gl::component::shader::OglInt4Variableinlinevirtual; ~OglShaderElement() overridesofa::gl::component::shader::OglShaderElementinline; ~OglVariable() overridesofa::gl::component::shader::OglVariable< type::Vec< 4, int > >inlineprotected; ~ShaderElement() overridesofa::core::visual::ShaderElementinlineprotected; ~VisualModel() overridesofa::core::vis",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_int4_variable-members.html:13704,update,updateVisual,13704,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_int4_variable-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_int4_variable-members.html,1,['update'],['updateVisual']
Deployability,"tation are modified. More...;  ; void doUpdate () override;  Where you put your engine's impl. More...;  ; void handleEvent (core::objectmodel::Event *event) override;  Handle an event. More...;  ; void onBeginAnimationStep (const double);  ;  Public Member Functions inherited from sofa::core::DataEngine;  SOFA_ABSTRACT_CLASS (DataEngine, core::objectmodel::BaseObject);  ; void update () final;  ; void addInput (sofa::core::objectmodel::BaseData *data);  Add a new input to this engine. More...;  ; void addOutput (objectmodel::BaseData *n);  Add a new output to this engine. More...;  ;  Public Member Functions inherited from sofa::core::DataTrackerDDGNode;  DataTrackerDDGNode ();  ; void addInputs (std::initializer_list< sofa::core::objectmodel::BaseData * > datas);  Create a DataCallback object associated with multiple Data fields. More...;  ; void addOutputs (std::initializer_list< sofa::core::objectmodel::BaseData * > datas);  ; virtual void cleanDirty (const core::ExecParams *params=nullptr);  ; void updateAllInputsIfDirty ();  ;  Public Member Functions inherited from sofa::core::objectmodel::DDGNode;  DDGNode ();  Constructor. More...;  ; virtual ~DDGNode ();  Destructor. Automatically remove remaining links. More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void delInput (DDGNode *n);  Remove an input from this node. More...;  ; void addOutput (DDGNode *n);  Add a new output to this node. More...;  ; void delOutput (DDGNode *n);  Remove an output from this node. More...;  ; const DDGLinkContainer & getInputs ();  Get the list of inputs for this DDGNode. More...;  ; const DDGLinkContainer & getOutputs ();  Get the list of outputs for this DDGNode. More...;  ; bool isDirty () const;  Returns true if the DDGNode needs to be updated. More...;  ; virtual void setDirtyValue ();  Indicate the value needs to be updated. More...;  ; virtual void setDirtyOutputs ();  Indicate the outputs needs to be updated. This method must be called af",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1analyze_1_1_average_coord.html:3230,update,updateAllInputsIfDirty,3230,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1analyze_1_1_average_coord.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1analyze_1_1_average_coord.html,1,['update'],['updateAllInputsIfDirty']
Deployability,"td::istream &in)sofa::core::objectmodel::Data< T >protected; setAutoLink(bool b)sofa::core::objectmodel::BaseDatainline; setDirtyOutputs()sofa::core::objectmodel::DDGNodevirtual; setDirtyValue()sofa::core::objectmodel::DDGNodevirtual; setDisplayed(bool b)sofa::core::objectmodel::BaseDatainline; setFlag(DataFlagsEnum flag, bool b)sofa::core::objectmodel::BaseDatainline; setGroup(const std::string &val)sofa::core::objectmodel::BaseDatainline; setHelp(const std::string &val)sofa::core::objectmodel::BaseDatainline; setName(const std::string &name)sofa::core::objectmodel::BaseDatainline; setOwner(Base *o)sofa::core::objectmodel::BaseDatainline; setParent(BaseData *parent, const std::string &path=std::string())sofa::core::objectmodel::BaseData; setParent(const std::string &path)sofa::core::objectmodel::BaseData; setPersistent(bool b)sofa::core::objectmodel::BaseDatainline; setReadOnly(bool b)sofa::core::objectmodel::BaseDatainline; setRequired(bool b)sofa::core::objectmodel::BaseDatainline; setValue(const T &value)sofa::core::objectmodel::Data< T >inline; setWidget(const char *val)sofa::core::objectmodel::BaseDatainline; SOFA_ATTRIBUTE_DEPRECATED__UNNECESSARY_PARAMETER_IN_TYPENAME() static stdsofa::core::objectmodel::BaseDatainline; templateName()sofa::core::objectmodel::Data< T >inlinestatic; typeName()sofa::core::objectmodel::BaseDatainlinestatic; unset()sofa::core::objectmodel::BaseDatainline; update() overridesofa::core::objectmodel::BaseDatavirtual; updateIfDirty() constsofa::core::objectmodel::DDGNode; updateValueFromLink(const BaseData *data)sofa::core::objectmodel::BaseData; validParent(const BaseData *parent)sofa::core::objectmodel::BaseDatavirtual; value_type typedefsofa::core::objectmodel::Data< T >; ValueType typedefsofa::core::objectmodel::Data< T >protected; widgetsofa::core::objectmodel::BaseData; ~BaseData() overridesofa::core::objectmodel::BaseData; ~Data() overridesofa::core::objectmodel::Data< T >inline; ~DDGNode()sofa::core::objectmodel::DDGNodevirtual.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data-members.html:8259,update,update,8259,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data-members.html,3,['update'],"['update', 'updateIfDirty', 'updateValueFromLink']"
Deployability,"td::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(DataEngine, core::objectmodel::BaseObject)sofa::core::DataEngine; SOFA_CLASS(SOFA_TEMPLATE(DilateEngine, DataTypes), core::DataEngine)sofa::component::engine::transform::DilateEngine< DataTypes >; sofa::core::DataEngine::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; Triangle typedefsofa::component::engine::transform::DilateEngine< DataTypes >; update() finalsofa::core::DataEnginevirtual; updateAllInputsIfDirty()sofa::core::DataTrackerDDGNode; updateIfDirty() constsofa::core::objectmodel::DDGNode; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecCoord typedefsofa::component::engine::transform::DilateEngine< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~DataEngine() overridesofa::core::DataEngineprotected; ~DDGNode()sofa::core::objectmodel::DDGNodevirtual; ~DilateEngine() overridesofa::component::engine::transform::DilateEngine< DataTypes >inline.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_dilate_engine-members.html:13143,update,update,13143,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_dilate_engine-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_dilate_engine-members.html,5,['update'],"['update', 'updateAllInputsIfDirty', 'updateIfDirty', 'updateInternal', 'updateLinks']"
Deployability,"td::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(DataEngine, core::objectmodel::BaseObject)sofa::core::DataEngine; SOFA_CLASS(SOFA_TEMPLATE(MathOp, VecT), core::DataEngine)sofa::component::engine::transform::MathOp< VecT >; sofa::core::DataEngine::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; update() finalsofa::core::DataEnginevirtual; updateAllInputsIfDirty()sofa::core::DataTrackerDDGNode; updateIfDirty() constsofa::core::objectmodel::DDGNode; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; Value typedefsofa::component::engine::transform::MathOp< VecT >; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VecValue typedefsofa::component::engine::transform::MathOp< VecT >; vf_inputssofa::component::engine::transform::MathOp< VecT >; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~DataEngine() overridesofa::core::DataEngineprotected; ~DDGNode()sofa::core::objectmodel::DDGNodevirtual; ~MathOp() overridesofa::component::engine::transform::MathOp< VecT >protected.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_math_op-members.html:12393,update,updateIfDirty,12393,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_math_op-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_math_op-members.html,3,['update'],"['updateIfDirty', 'updateInternal', 'updateLinks']"
Deployability,"td::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(DataEngine, core::objectmodel::BaseObject)sofa::core::DataEngine; SOFA_CLASS(SOFA_TEMPLATE(ProjectiveTransformEngine, DataTypes), core::DataEngine)sofa::component::engine::transform::ProjectiveTransformEngine< DataTypes >; sofa::core::DataEngine::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; update() finalsofa::core::DataEnginevirtual; updateAllInputsIfDirty()sofa::core::DataTrackerDDGNode; updateIfDirty() constsofa::core::objectmodel::DDGNode; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; Vec3 typedefsofa::component::engine::transform::ProjectiveTransformEngine< DataTypes >; Vec4 typedefsofa::component::engine::transform::ProjectiveTransformEngine< DataTypes >; VecCoord typedefsofa::component::engine::transform::ProjectiveTransformEngine< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~DataEngine() overridesofa::core::DataEngineprotected; ~DDGNod",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_projective_transform_engine-members.html:12839,update,updateAllInputsIfDirty,12839,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_projective_transform_engine-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_projective_transform_engine-members.html,1,['update'],['updateAllInputsIfDirty']
Deployability,"td::string &sourceFileName)sofa::core::objectmodel::Base; setInstanciationSourceFilePos(const int)sofa::core::objectmodel::Base; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_CLASS(AddFrameButtonSetting, sofa::component::setting::MouseButtonSetting)sofa::gui::component::AddFrameButtonSetting; sofa::component::setting::MouseButtonSetting::SOFA_CLASS(MouseButtonSetting, core::objectmodel::ConfigurationSetting)sofa::component::setting::MouseButtonSetting; sofa::core::objectmodel::ConfigurationSetting::SOFA_CLASS(ConfigurationSetting, BaseObject)sofa::core::objectmodel::ConfigurationSetting; sofa::core::objectmodel::BaseObject::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~ConfigurationSetting() overridesofa::core::objectmodel::ConfigurationSettingprotected.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1component_1_1_add_frame_button_setting-members.html:10508,update,updateInternal,10508,api/master/sofa/html/classsofa_1_1gui_1_1component_1_1_add_frame_button_setting-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1component_1_1_add_frame_button_setting-members.html,2,['update'],"['updateInternal', 'updateLinks']"
Deployability,"td::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_CLASS(PointSetTopologyModifier, core::topology::TopologyModifier)sofa::component::topology::container::dynamic::PointSetTopologyModifier; sofa::core::topology::TopologyModifier::SOFA_CLASS(TopologyModifier, BaseTopologyObject)sofa::core::topology::TopologyModifier; sofa::core::topology::BaseTopologyObject::SOFA_CLASS(BaseTopologyObject, core::objectmodel::BaseObject)sofa::core::topology::BaseTopologyObject; sofa::core::objectmodel::BaseObject::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; swapPoints(const Index i1, const Index i2)sofa::component::topology::container::dynamic::PointSetTopologyModifiervirtual; TopologyModifier()sofa::core::topology::TopologyModifierinlineprotected; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~BaseTopologyObject() overridesofa::core::topology::BaseTopologyObjectinlineprotected; ~PointSetTopologyModifier() overridesofa::component::topology::container::dynamic::PointSetTopologyModifierinlineprotected; ~TopologyModifier() overridesofa::core::topology::TopologyModifierinlineprotected.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_point_set_topology_modifier-members.html:14651,update,updateInternal,14651,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_point_set_topology_modifier-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_point_set_topology_modifier-members.html,2,['update'],"['updateInternal', 'updateLinks']"
Deployability,"td::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_CLASS(SOFA_TEMPLATE(PointSetGeometryAlgorithms, DataTypes), core::topology::GeometryAlgorithms)sofa::component::topology::container::dynamic::PointSetGeometryAlgorithms< DataTypes >; sofa::core::topology::GeometryAlgorithms::SOFA_CLASS(GeometryAlgorithms, BaseTopologyObject)sofa::core::topology::GeometryAlgorithms; sofa::core::topology::BaseTopologyObject::SOFA_CLASS(BaseTopologyObject, core::objectmodel::BaseObject)sofa::core::topology::BaseTopologyObject; sofa::core::objectmodel::BaseObject::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecCoord typedefsofa::component::topology::container::dynamic::PointSetGeometryAlgorithms< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecDeriv typedefsofa::component::topology::container::dynamic::PointSetGeometryAlgorithms< DataTypes >; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~BaseTopologyObject() overridesofa::core::topology::BaseTopologyObjectinlineprotected; ~GeometryAlgorithms() overridesofa::core::topology::GeometryAlgorithmsinlineprotected; ~PointSetGeometryAlgorithms() overridesofa::component::",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_point_set_geometry_algorithms-members.html:14523,update,updateInternal,14523,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_point_set_geometry_algorithms-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_point_set_geometry_algorithms-members.html,1,['update'],['updateInternal']
Deployability,"td::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  . Protected Attributes; bool _anisotropicMaterial;  ; bool updateMatrix;  ;  Protected Attributes inherited from sofa::core::behavior::StateAccessor; MultiLink< StateAccessor, BaseMechanicalState, BaseLink::FLAG_DUPLICATE > l_mechanicalStates;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObject; SingleLink< BaseObject, BaseContext, BaseLink::FLAG_DOUBLELINK > l_context;  ; LinkSlaves l_slaves;  ; SingleLink< BaseObject, BaseObject, BaseLink::FLAG_DOUBLELINK > l_master;  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  ;  Protected Attributes inherited from sofa::core::behavior::SingleStateAccessor< DataTypes >; SingleLink< SingleStateAccessor< DataTypes >, MechanicalState< DataTypes >, BaseLink::FLAG_STRONGLINK > mstate;  . Public Member Functions;  SOFA_CLASS (SOFA_TEMPLATE(TriangularFEMForceField, DataTypes), SOFA_TEMPLATE(BaseLinearElasticityFEMForceField, DataTypes));  ; void init () override;  Initialization method called at graph",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_triangular_f_e_m_force_field.html:5631,update,updateMatrix,5631,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_triangular_f_e_m_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_triangular_f_e_m_force_field.html,1,['update'],['updateMatrix']
Deployability,"td::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(BaseState, objectmodel::BaseObject)sofa::core::BaseState; SOFA_CLASS(SOFA_TEMPLATE(MappedObject, DataTypes), SOFA_TEMPLATE(core::State, DataTypes))sofa::component::statecontainer::MappedObject< DataTypes >; State< DataTypes >::SOFA_CLASS(SOFA_TEMPLATE(State, DataTypes), BaseState)sofa::core::State< DataTypes >; sofa::core::BaseState::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; State()sofa::core::State< DataTypes >protected; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecCoord typedefsofa::component::statecontainer::MappedObject< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecDeriv typedefsofa::component::statecontainer::MappedObject< DataTypes >; VecLink typedefsofa::core::objectmodel::Base; VecReal typedefsofa::core::State< DataTypes >; VecSlaves typedefsofa::core::objectmodel::BaseObject; write(core::VecCoordId v) overridesofa::component::statecontainer::MappedObject< DataTypes >inlinevirtual; write(core::VecDerivId v) overridesofa::component::statecontainer::MappedObject< DataTypes >inlinevirtual; write(core::MatrixDerivId) overridesofa::component::statecontainer::MappedObject< DataTypes >inlinevirtual; WriteCoord typedefsofa::core::State< DataTypes >; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectm",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1statecontainer_1_1_mapped_object-members.html:12915,update,updateInternal,12915,api/master/sofa/html/classsofa_1_1component_1_1statecontainer_1_1_mapped_object-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1statecontainer_1_1_mapped_object-members.html,1,['update'],['updateInternal']
Deployability,"te > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  ;  Public Attributes inherited from sofa::helper::TriangleOctreeRoot; const SeqTriangles * octreeTriangles;  the triangles used as input to construct the octree More...;  ; const VecCoord * octreePos;  the positions of vertices used as input to construct the octree More...;  ; TriangleOctree * octreeRoot;  the first node of the octree More...;  ; int cubeSize;  the size of the octree cube More...;  . Public Member Functions;  SOFA_CLASS (TriangleOctreeModel, TriangleCollisionModel< sofa::defaulttype::Vec3Types >);  ; void draw (const core::visual::VisualParams *vparams) override;  Render internal data of this object, for debugging purposes. More...;  ; void computeBoundingTree (int maxDepth=0) override;  Create or update the bounding volume hierarchy. More...;  ; void computeContinuousBoundingTree (SReal dt, int maxDepth=0) override;  Create or update the bounding volume hierarchy, accounting for motions within the given timestep. More...;  ; void buildOctree ();  init the octree creation More...;  ;  Public Member Functions inherited from sofa::component::collision::geometry::TriangleCollisionModel< sofa::defaulttype::Vec3Types >;  SOFA_CLASS (SOFA_TEMPLATE(TriangleCollisionModel, sofa::defaulttype::Vec3Types), core::CollisionModel);  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; void resize (sofa::Size size) override;  Set the number of elements. More...;  ; void computeBoundingTree (int maxDepth=0) override;  Create or update the bounding volume hierarchy. More...;  ; void computeContinuousBoundingTree (SReal dt, int maxDepth=0) override;  Create or update the bounding volume hierarchy, accounti",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_triangle_octree_model.html:3136,update,update,3136,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_triangle_octree_model.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_triangle_octree_model.html,1,['update'],['update']
Deployability,"te)sofa::core::State< TDataTypes >; SOFA_CLASS2(VisualModelImpl, core::visual::VisualModel, sofa::core::visual::VisualState< defaulttype::Vec3Types >)sofa::component::visual::VisualModelImpl; sourceFactorsofa::gl::component::rendering3d::OglModelprotected; SPtr typedefsofa::core::objectmodel::Base; srgbTexturingsofa::component::visual::VisualModelImpl; State()sofa::core::State< TDataTypes >protected; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; texsofa::gl::component::rendering3d::OglModelprotected; TexCoord typedefsofa::component::visual::VisualModelImpl; texturenamesofa::component::visual::VisualModelImpl; texturessofa::gl::component::rendering3d::OglModelprotected; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; trianglesRevisionsofa::gl::component::rendering3d::OglModelprotected; updateBuffers() overridesofa::gl::component::rendering3d::OglModelvirtual; updateEdgesIndicesBuffer()sofa::gl::component::rendering3d::OglModel; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateQuadsIndicesBuffer()sofa::gl::component::rendering3d::OglModel; updateTrianglesIndicesBuffer()sofa::gl::component::rendering3d::OglModel; updateVertexBuffer()sofa::gl::component::rendering3d::OglModel; updateVisual(const VisualParams *)sofa::core::visual::VisualModel; updateVisual() finalsofa::core::visual::VisualModelvirtual; useEdgessofa::gl::component::rendering3d::OglModelprotected; useQuadssofa::gl::component::rendering3d::OglModelprotected; useTopologysofa::component::visual::VisualModelImpl; useTrianglessofa::gl::component::rendering3d::OglModelprotected; vbosofa::gl::component::rendering3d::OglModelprotected; VBOGenDonesofa::gl::component::rendering3d::OglModelprotected; Vec3Real typedefsofa::component::visual::VisualModelImpl; VecCoord typedefsofa::component::visual::VisualModelImpl; VecData typedefsofa::core::objectmodel::Base; VecDeriv typedefsofa::compone",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_ogl_model-members.html:26854,update,updateInternal,26854,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_ogl_model-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_ogl_model-members.html,2,['update'],['updateInternal']
Deployability,"te. More...;  ; const BaseMechanicalState * getMechModel2 () const;  Retrieve the associated MechanicalState #2 as a BaseMechanicalState. More...;  . Protected Member Functions; virtual void getPositionViolation (linearalgebra::BaseVector *v);  ; virtual void getVelocityViolation (linearalgebra::BaseVector *v);  ; virtual type::vector< std::string > getUnilateralInteractionIdentifiers ();  ; virtual type::vector< std::string > getPairInteractionIdentifiers () override final;  ;  UnilateralLagrangianConstraint (MechanicalState *object1=nullptr, MechanicalState *object2=nullptr);  ; virtual ~UnilateralLagrangianConstraint ();  ;  Protected Member Functions inherited from sofa::core::behavior::PairInteractionConstraint< DataTypes >;  PairInteractionConstraint (MechanicalState< DataTypes > *mm1=nullptr, MechanicalState< DataTypes > *mm2=nullptr);  ;  ~PairInteractionConstraint () override;  ; void storeLambda (const ConstraintParams *cParams, Data< VecDeriv > &res1, Data< VecDeriv > &res2, const Data< MatrixDeriv > &j1, const Data< MatrixDeriv > &j2, const sofa::linearalgebra::BaseVector *lambda);  ; virtual type::vector< std::string > getInteractionIdentifiers () override final;  ;  Protected Member Functions inherited from sofa::core::behavior::BaseInteractionConstraint;  BaseInteractionConstraint ();  ;  ~BaseInteractionConstraint () override;  ;  Protected Member Functions inherited from sofa::core::behavior::BaseConstraint;  BaseConstraint ();  ;  ~BaseConstraint () override;  ;  Protected Member Functions inherited from sofa::core::behavior::BaseConstraintSet;  BaseConstraintSet ();  ;  ~BaseConstraintSet () override;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1model_1_1_unilateral_lagrangian_constraint.html:19575,update,update,19575,api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1model_1_1_unilateral_lagrangian_constraint.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1model_1_1_unilateral_lagrangian_constraint.html,1,['update'],['update']
Deployability,"te< TDataTypes > *mm=nullptr)sofa::core::behavior::SingleStateAccessor< TDataTypes >inlineexplicitprotected; sofa::SOFA_ABSTRACT_CLASS(BaseForceField, StateAccessor)sofa::core::behavior::BaseForceField; sofa::core::behavior::StateAccessor::SOFA_ABSTRACT_CLASS(StateAccessor, objectmodel::BaseObject)sofa::core::behavior::StateAccessor; SingleStateAccessor< TDataTypes >::SOFA_ABSTRACT_CLASS(SOFA_TEMPLATE(SingleStateAccessor, TDataTypes), StateAccessor)sofa::core::behavior::SingleStateAccessor< TDataTypes >; SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SOFA_CLASS2(SOFA_TEMPLATE(ForceField, TDataTypes), BaseForceField, SOFA_TEMPLATE(SingleStateAccessor, TDataTypes))sofa::core::behavior::ForceField< TDataTypes >; SPtr typedefsofa::core::objectmodel::Base; StateAccessor()sofa::core::behavior::StateAccessorinlineprotected; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecCoord typedefsofa::core::behavior::ForceField< TDataTypes >; VecData typedefsofa::core::objectmodel::Base; VecDeriv typedefsofa::core::behavior::ForceField< TDataTypes >; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseForceField() override=defaultsofa::core::behavior::BaseForceFieldprotected; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~ForceField() overridesofa::core::behavior::ForceField< TDataTypes >protected; ~SingleStateAccessor() override=defaultsofa::core::behavior::SingleStateAccessor< TDataTypes >protected; ~StateAccessor() override=defaultsofa::core:",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_force_field-members.html:14381,update,updateInternal,14381,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_force_field-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_force_field-members.html,1,['update'],['updateInternal']
Deployability,"te<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  ;  Public Member Functions inherited from sofa::core::behavior::SingleStateAccessor< DataTypes >;  SOFA_ABSTRACT_CLASS (SOFA_TEMPLATE(SingleStateAccessor, DataTypes), StateAccessor);  ; MechanicalState< DataTypes > * getMState ();  ; const MechanicalState< DataTypes > * getMState () const;  ;  Public Member Functions inherited from sofa::core::behavior::BaseMass;  SOFA_ABSTRACT_CLASS (BaseMass, StateAccessor);  . Protected Member Functions;  UniformMass ();  ;  ~UniformMass ();  ; void constructor_message ();  ; SOFA_COMPONENT_MASS_API void constructor_message ();  ;  Protected Member Functions inherited from sofa::core::behavior::Mass< DataTypes >;  Mass (MechanicalState< DataTypes > *mm=nullptr);  ;  ~Mass () override;  ;  Protected Member Functions inherited from sofa::core::behavior::ForceField< DataTypes >;  ForceField (MechanicalState< DataTypes > *mm=nullptr);  ;  ~ForceField () override;  ;  Protected Member Functions inherited from sofa::core::behavior::BaseForceField;  BaseForceField ();  ;  ~BaseForceField () override=default;  ;  Protected Member Functions inherited from sofa::core::behavior::StateAccessor;  StateAccessor ();  ;  ~StateAccessor () override=default;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_uniform_mass.html:22810,update,update,22810,api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_uniform_mass.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_uniform_mass.html,1,['update'],['update']
Deployability,"teAccessor)sofa::core::behavior::SingleStateAccessor< DataTypes >; SOFA_ATTRIBUTE_REPLACED__TYPEMEMBER(Vector3, sofa::type::Vec3)sofa::component::constraint::projective::PointProjectiveConstraint< DataTypes >; SOFA_CLASS(SOFA_TEMPLATE(PointProjectiveConstraint, DataTypes), SOFA_TEMPLATE(sofa::core::behavior::ProjectiveConstraintSet, DataTypes))sofa::component::constraint::projective::PointProjectiveConstraint< DataTypes >; sofa::core::behavior::ProjectiveConstraintSet::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SOFA_CLASS2(SOFA_TEMPLATE(ProjectiveConstraintSet, DataTypes), BaseProjectiveConstraintSet, SOFA_TEMPLATE(SingleStateAccessor, DataTypes))sofa::core::behavior::ProjectiveConstraintSet< DataTypes >; SPtr typedefsofa::core::objectmodel::Base; StateAccessor()sofa::core::behavior::StateAccessorinlineprotected; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecCoord typedefsofa::component::constraint::projective::PointProjectiveConstraint< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecDeriv typedefsofa::component::constraint::projective::PointProjectiveConstraint< DataTypes >; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~BaseProjectiveConstraintSet() overridesofa::core::behavior::BaseProjectiveConstraintSetinlineprotected; ~PointProjectiveConstraint()sofa::component::constraint::projective::PointProjectiveConstraint< DataTypes >protectedvirtual; ~ProjectiveCo",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_point_projective_constraint-members.html:17745,update,updateInternal,17745,api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_point_projective_constraint-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_point_projective_constraint-members.html,1,['update'],['updateInternal']
Deployability,"teAccessor< DataTypes >; SOFA_CLASS(SOFA_TEMPLATE(OscillatingTorsionPressureForceField, DataTypes), SOFA_TEMPLATE(core::behavior::ForceField, DataTypes))sofa::component::mechanicalload::OscillatingTorsionPressureForceField< DataTypes >; ForceField< DataTypes >::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SOFA_CLASS2(SOFA_TEMPLATE(ForceField, DataTypes), BaseForceField, SOFA_TEMPLATE(SingleStateAccessor, DataTypes))sofa::core::behavior::ForceField< DataTypes >; SPtr typedefsofa::core::objectmodel::Base; StateAccessor()sofa::core::behavior::StateAccessorinlineprotected; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; triangleListsofa::component::mechanicalload::OscillatingTorsionPressureForceField< DataTypes >; trianglePressureMapsofa::component::mechanicalload::OscillatingTorsionPressureForceField< DataTypes >; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecCoord typedefsofa::component::mechanicalload::OscillatingTorsionPressureForceField< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecDeriv typedefsofa::component::mechanicalload::OscillatingTorsionPressureForceField< DataTypes >; vecFromCentersofa::component::mechanicalload::OscillatingTorsionPressureForceField< DataTypes >protected; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseForceField() override=defaultsofa::core::behavior::BaseForceFieldprotected; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~ForceField() overridesofa::core::behavior::ForceField< DataTypes >protected; ~OscillatingTorsionPres",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_oscillating_torsion_pressure_force_field-members.html:19676,update,updateLinks,19676,api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_oscillating_torsion_pressure_force_field-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_oscillating_torsion_pressure_force_field-members.html,1,['update'],['updateLinks']
Deployability,"teBBoxStep(). void sofa::simulation::DefaultVisualManagerLoop::computeBBoxStep ; (; sofa::core::visual::VisualParams * ; vparams, . SReal * ; minBBox, . SReal * ; maxBBox, . bool ; init . ). overridevirtual . Compute the bounding box of the scene. If init is set to ""true"", then minBBox and maxBBox will be initialised to a default value. ; Reimplemented from sofa::core::visual::VisualLoop. ◆ drawStep(). void sofa::simulation::DefaultVisualManagerLoop::drawStep ; (; sofa::core::visual::VisualParams * ; vparams). overridevirtual . Render the scene. ; Reimplemented from sofa::core::visual::VisualLoop.; Reimplemented in sofa::gl::component::shader::CompositingVisualLoop. ◆ init(). void sofa::simulation::DefaultVisualManagerLoop::init ; (; void ; ). overridevirtual . Initialization method called at graph creation and modification, during top-down traversal. ; Reimplemented from sofa::core::objectmodel::BaseObject.; Reimplemented in sofa::gl::component::shader::CompositingVisualLoop. ◆ initStep(). void sofa::simulation::DefaultVisualManagerLoop::initStep ; (; sofa::core::visual::VisualParams * ; vparams). overridevirtual . Initialize the textures. ; Reimplemented from sofa::core::visual::VisualLoop. ◆ SOFA_CLASS(). sofa::simulation::DefaultVisualManagerLoop::SOFA_CLASS ; (; DefaultVisualManagerLoop ; , . sofa::core::visual::VisualLoop ;  . ). ◆ updateContextStep(). void sofa::simulation::DefaultVisualManagerLoop::updateContextStep ; (; sofa::core::visual::VisualParams * ; vparams). overridevirtual . Update contexts. Required before drawing the scene if root flags are modified. ; Reimplemented from sofa::core::visual::VisualLoop. ◆ updateStep(). void sofa::simulation::DefaultVisualManagerLoop::updateStep ; (; sofa::core::visual::VisualParams * ; vparams). overridevirtual . Update the Visual Models: triggers the Mappings. ; Reimplemented from sofa::core::visual::VisualLoop. sofasimulationDefaultVisualManagerLoop; Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_default_visual_manager_loop.html:18314,update,updateContextStep,18314,api/master/sofa/html/classsofa_1_1simulation_1_1_default_visual_manager_loop.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_default_visual_manager_loop.html,4,['update'],"['updateContextStep', 'updateStep']"
Deployability,"tected . forces computed from the constraints . ◆ J. template<class TDataTypes > . DeprecatedAndRemoved sofa::component::constraint::lagrangian::correction::LinearSolverConstraintCorrection< TDataTypes >::J. protected . use m_constraintMatrix instead . ◆ l_linearSolver. template<class TDataTypes > . SingleLink<LinearSolverConstraintCorrection, sofa::core::behavior::LinearSolver, BaseLink::FLAG_STOREPATH | BaseLink::FLAG_STRONGLINK> sofa::component::constraint::lagrangian::correction::LinearSolverConstraintCorrection< TDataTypes >::l_linearSolver. Link towards the linear solver used to compute the compliance matrix, requiring the inverse of the linear system matrix. . ◆ l_ODESolver. template<class TDataTypes > . SingleLink<LinearSolverConstraintCorrection, sofa::core::behavior::OdeSolver, BaseLink::FLAG_STOREPATH | BaseLink::FLAG_STRONGLINK> sofa::component::constraint::lagrangian::correction::LinearSolverConstraintCorrection< TDataTypes >::l_ODESolver. Link towards the ODE solver used to recover the integration factors. . ◆ m_constraintJacobian. template<class TDataTypes > . linearalgebra::SparseMatrix<Real> sofa::component::constraint::lagrangian::correction::LinearSolverConstraintCorrection< TDataTypes >::m_constraintJacobian. protected . ◆ mstate. template<class TDataTypes > . MechanicalState<DataTypes>* sofa::core::behavior::ConstraintCorrection< TDataTypes >::mstate. protected . ◆ wire_optimization. template<class TDataTypes > . Data< bool > sofa::component::constraint::lagrangian::correction::LinearSolverConstraintCorrection< TDataTypes >::wire_optimization. constraints are reordered along a wire-like topology (from tip to base) . Constructor details. ◆ LinearSolverConstraintCorrection(). template<class DataTypes > . sofa::component::constraint::lagrangian::correction::LinearSolverConstraintCorrection< DataTypes >::LinearSolverConstraintCorrection ; (; sofa::core::behavior::MechanicalState< DataTypes > * ; mm = nullptr). protected . ◆ ~LinearSolverConstraintCor",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1correction_1_1_linear_solver_constraint_correction.html:20254,integrat,integration,20254,api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1correction_1_1_linear_solver_constraint_correction.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1correction_1_1_linear_solver_constraint_correction.html,1,['integrat'],['integration']
Deployability,"tected Member Functions;  Distances (sofa::component::topology::container::dynamic::DynamicSparseGridTopologyContainer *hexaTopoContainer, core::behavior::MechanicalState< DataTypes > *targetPointSet);  ;  ~Distances () override;  ;  Protected Member Functions inherited from sofa::core::DataEngine;  DataEngine ();  Constructor. More...;  ;  ~DataEngine () override;  Destructor. Do nothing. More...;  ; virtual void doInternalUpdate () final;  Prevent engines to use the internalUpdate mechanism, so that only update/doUpdate is used. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::DDGNode; virtual void doAddInput (DDGNode *n);  ; virtual void doDelInput (DDGNode *n);  ; virtual void doAddOutput (DDGNode *n);  ; virtual void doDelOutput (DDGNode *n);  ; void cleanDirtyOutputsOfInputs ();  the dirtyOutputs flags of all the inputs will be set to false More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *na",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1analyze_1_1_distances.html:18026,update,update,18026,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1analyze_1_1_distances.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1analyze_1_1_distances.html,1,['update'],['update']
Deployability,"ted in sofa::gui::qt::GLPickHandler. ◆ findCollisionUsingPipeline(). BodyPicked sofa::gui::common::PickHandler::findCollisionUsingPipeline ; (; ). protected . ◆ getCallBackPicker(). type::vector< CallBackPicker* > sofa::gui::common::PickHandler::getCallBackPicker ; (; ). inline . ◆ getInteraction(). ComponentMouseInteraction * sofa::gui::common::PickHandler::getInteraction ; (; ). ◆ getLastPicked(). BodyPicked* sofa::gui::common::PickHandler::getLastPicked ; (; ). inline . ◆ getOperation(). Operation* sofa::gui::common::PickHandler::getOperation ; (; MOUSE_BUTTON ; button). inline . ◆ handleMouseEvent(). void sofa::gui::common::PickHandler::handleMouseEvent ; (; MOUSE_STATUS ; status, . MOUSE_BUTTON ; button . ). ◆ init(). void sofa::gui::common::PickHandler::init ; (; core::objectmodel::BaseNode * ; root). ◆ needToCastRay(). bool sofa::gui::common::PickHandler::needToCastRay ; (; ). protected . ◆ reset(). void sofa::gui::common::PickHandler::reset ; (; void ; ). ◆ setColourRenderCallback(). void sofa::gui::common::PickHandler::setColourRenderCallback ; (; CallBackRender * ; colourRender). inline . ◆ setCompatibleInteractor(). void sofa::gui::common::PickHandler::setCompatibleInteractor ; (; ). protected . ◆ setPickingMethod(). void sofa::gui::common::PickHandler::setPickingMethod ; (; PickingMethod ; method). inline . ◆ unload(). void sofa::gui::common::PickHandler::unload ; (; void ; ). ◆ updateMouse2D(). void sofa::gui::common::PickHandler::updateMouse2D ; (; MousePosition ; mouse). inline . ◆ updateRay(). void sofa::gui::common::PickHandler::updateRay ; (; const sofa::type::Vec3 & ; position, . const sofa::type::Vec3 & ; orientation . ). ◆ useSelectionBufferMethod(). bool sofa::gui::common::PickHandler::useSelectionBufferMethod ; (; ); const. inline . Enum details. ◆ PickingMethod. enum sofa::gui::common::PickHandler::PickingMethod. EnumeratorRAY_CASTING ; SELECTION_BUFFER . sofaguicommonPickHandler; Generated on Mon Nov 11 2024 03:19:19 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1common_1_1_pick_handler.html:8082,update,updateRay,8082,api/master/sofa/html/classsofa_1_1gui_1_1common_1_1_pick_handler.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1common_1_1_pick_handler.html,2,['update'],['updateRay']
Deployability,"ted to the first scalar value after the ones used by this operation when this method returns . Implements sofa::core::behavior::BaseMechanicalState. ◆ copyToBaseMatrix(). template<class DataTypes > . void sofa::component::statecontainer::MechanicalObject< DataTypes >::copyToBaseMatrix ; (; linearalgebra::BaseMatrix * ; dest, . core::ConstMatrixDerivId ; src, . unsigned int & ; offset . ). overridevirtual . Copy data to a global BaseMatrix from the state stored in a local vector. ; Implements sofa::core::behavior::BaseMechanicalState. ◆ copyToBaseVector(). template<class DataTypes > . void sofa::component::statecontainer::MechanicalObject< DataTypes >::copyToBaseVector ; (; linearalgebra::BaseVector * ; dest, . core::ConstVecId ; src, . unsigned int & ; offset . ). overridevirtual . Copy data to a global BaseVector the state stored in a local vector Parameters. offsetthe offset in the BaseVector where the scalar values will be used. It will be updated to the first scalar value after the ones used by this operation when this method returns . Implements sofa::core::behavior::BaseMechanicalState. ◆ draw() [1/3]. void sofa::component::statecontainer::MechanicalObject< defaulttype::Rigid3Types >::draw ; (; const core::visual::VisualParams * ; ). virtual . Render internal data of this object, for debugging purposes. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ draw() [2/3]. SOFA_COMPONENT_STATECONTAINER_API void sofa::component::statecontainer::MechanicalObject< defaulttype::Rigid3Types >::draw ; (; const core::visual::VisualParams * ; ). virtual . Render internal data of this object, for debugging purposes. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ draw() [3/3]. template<class DataTypes > . void sofa::component::statecontainer::MechanicalObject< DataTypes >::draw ; (; const core::visual::VisualParams * ; ). inlineoverridevirtual . Render internal data of this object, for debugging purposes. ; Reimplemented from sofa::core::objectmodel::Bas",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1statecontainer_1_1_mechanical_object.html:53236,update,updated,53236,api/master/sofa/html/classsofa_1_1component_1_1statecontainer_1_1_mechanical_object.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1statecontainer_1_1_mechanical_object.html,1,['update'],['updated']
Deployability,"template<class DataTypes > . sofa::core::objectmodel::RenamedData<Real> sofa::component::solidmechanics::fem::elastic::FastTetrahedralCorotationalForceField< DataTypes >::f_poissonRatio. ◆ m_data. template<class DataTypes > . ExtraData sofa::component::solidmechanics::fem::elastic::FastTetrahedralCorotationalForceField< DataTypes >::m_data. protected . ◆ m_decompositionMethod. template<class DataTypes > . RotationDecompositionMethod sofa::component::solidmechanics::fem::elastic::FastTetrahedralCorotationalForceField< DataTypes >::m_decompositionMethod. ◆ pointInfo. template<class DataTypes > . sofa::core::objectmodel::RenamedData<VecMat3x3 > sofa::component::solidmechanics::fem::elastic::FastTetrahedralCorotationalForceField< DataTypes >::pointInfo. ◆ tetrahedronInfo. template<class DataTypes > . sofa::core::objectmodel::RenamedData<VecTetrahedronRestInformation > sofa::component::solidmechanics::fem::elastic::FastTetrahedralCorotationalForceField< DataTypes >::tetrahedronInfo. ◆ updateMatrix. template<class DataTypes > . bool sofa::component::solidmechanics::fem::elastic::FastTetrahedralCorotationalForceField< DataTypes >::updateMatrix. protected . Constructor details. ◆ FastTetrahedralCorotationalForceField(). template<class DataTypes > . sofa::component::solidmechanics::fem::elastic::FastTetrahedralCorotationalForceField< DataTypes >::FastTetrahedralCorotationalForceField. ◆ ~FastTetrahedralCorotationalForceField(). template<class DataTypes > . sofa::component::solidmechanics::fem::elastic::FastTetrahedralCorotationalForceField< DataTypes >::~FastTetrahedralCorotationalForceField. virtual . Function details. ◆ addDForce(). template<class DataTypes > . void sofa::component::solidmechanics::fem::elastic::FastTetrahedralCorotationalForceField< DataTypes >::addDForce ; (; const sofa::core::MechanicalParams * ; mparams, . DataVecDeriv & ; df, . const DataVecDeriv & ; dx . ). overridevirtual . Internal addDForce Overloaded function, usually called from the generic addD",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_fast_tetrahedral_corotational_force_field.html:27702,update,updateMatrix,27702,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_fast_tetrahedral_corotational_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_fast_tetrahedral_corotational_force_field.html,1,['update'],['updateMatrix']
Deployability,"template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Protected Member Functions;  CompositeLinearSystem ();  ; void allocateSystem () override;  ; void resizeVectors (sofa::Size n) override;  Set the size of RHS and solution to n. More...;  ; void preAssembleSystem (const core::MechanicalParams *) override;  ; void assembleSystem (const core::MechanicalParams *) override;  ; void postAssembleSystem (const core::MechanicalParams *) override;  List of linear systems to assemble. More...;  ;  Protected Member Functions inherited from sofa::component::linearsystem::TypedMatrixLinearSystem< TMatrix, TVector >; void preAssembleSystem (const core::MechanicalParams *) override;  ; virtual void associateLocalMatrixToComponents (const core::MechanicalParams *);  ; void copyLocalVectorToGlobalVector (core::MultiVecDerivId v, TVector *globalVector);  ; SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API void copyLocalVectorToGlobalVector (core::MultiVecDerivId v, GraphScatteredVector *globalVector);  ; void copyLocalVectorToGlobalVector (core::MultiVecDerivId v, GraphScatteredVector *globalVector);  ;  Protected Member Functions inherited from sofa::core::behavior::BaseMatrixLinearSystem;  BaseMatrixLinearSystem ();  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Mem",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsystem_1_1_composite_linear_system.html:15312,update,update,15312,api/master/sofa/html/classsofa_1_1component_1_1linearsystem_1_1_composite_linear_system.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsystem_1_1_composite_linear_system.html,1,['update'],['update']
Deployability,"template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  . Protected Member Functions; virtual void checkLinearSystem ();  ; template<class TLinearSystemType > ; void doCheckLinearSystem ();  ; template<class TLinearSystemType > ; void createDefaultLinearSystem ();  ; virtual void partial_solve (Matrix &, Vector &, Vector &, ListIndex &, ListIndex &);  newPartially solve the system More...;  ; Vector * createPersistentVector ();  ; Matrix * createMatrix ();  ; virtual MatrixInvertData * createInvertData ();  ; bool singleThreadAddJMInvJtLocal (Matrix *, ResMatrixType *result, const JMatrixType *J, SReal fact);  ;  Protected Member Functions inherited from sofa::core::behavior::LinearSolver;  LinearSolver ();  ;  ~LinearSolver () override;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsolver_1_1_matrix_linear_solver_3_01_matrix_00_01_vector_00_01_no_thread_manager_01_4.html:18318,update,update,18318,api/master/sofa/html/classsofa_1_1component_1_1linearsolver_1_1_matrix_linear_solver_3_01_matrix_00_01_vector_00_01_no_thread_manager_01_4.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsolver_1_1_matrix_linear_solver_3_01_matrix_00_01_vector_00_01_no_thread_manager_01_4.html,1,['update'],['update']
Deployability,"ter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(DataEngine, core::objectmodel::BaseObject)sofa::core::DataEngine; SOFA_CLASS(SOFA_TEMPLATE(MergeMeshes, DataTypes), core::DataEngine)sofa::component::engine::generate::MergeMeshes< DataTypes >; sofa::core::DataEngine::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; update() finalsofa::core::DataEnginevirtual; updateAllInputsIfDirty()sofa::core::DataTrackerDDGNode; updateIfDirty() constsofa::core::objectmodel::DDGNode; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecCoord typedefsofa::component::engine::generate::MergeMeshes< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecIndex typedefsofa::component::engine::generate::MergeMeshes< DataTypes >; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; vf_edgessofa::component::engine::generate::MergeMeshes< DataTypes >; vf_hexahedrasofa::component::engine::generate::MergeMeshes< DataTypes >; vf_polygonssofa::component::engine::generate::MergeMeshes< DataTypes >; vf_positionssofa::component::engine::generate::MergeMeshes< DataTypes >; vf_quadssofa::component::engine::generate::MergeMeshes< DataTypes >; vf_tetrahedrasofa::component::engine::generate::MergeMeshes< DataTypes >; vf_trianglessofa::component::engine::generate::MergeMeshes< DataTypes >; writeDatas(std::map< std::",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_merge_meshes-members.html:13742,update,updateIfDirty,13742,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_merge_meshes-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_merge_meshes-members.html,1,['update'],['updateIfDirty']
Deployability,"ter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(DataEngine, core::objectmodel::BaseObject)sofa::core::DataEngine; SOFA_CLASS(SOFA_TEMPLATE(ProximityROI, DataTypes), core::DataEngine)sofa::component::engine::select::ProximityROI< DataTypes >; sofa::core::DataEngine::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; update() finalsofa::core::DataEnginevirtual; updateAllInputsIfDirty()sofa::core::DataTrackerDDGNode; updateIfDirty() constsofa::core::objectmodel::DDGNode; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; Vec3 typedefsofa::component::engine::select::ProximityROI< DataTypes >; Vec6 typedefsofa::component::engine::select::ProximityROI< DataTypes >; VecCoord typedefsofa::component::engine::select::ProximityROI< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~DataEngine() overridesofa::core::DataEngineprotected; ~DDGNode()sofa::core::objectmodel::DDGNodevirtual; ~ProximityROI() overridesofa::component::engine::select",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_proximity_r_o_i-members.html:13476,update,updateIfDirty,13476,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_proximity_r_o_i-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_proximity_r_o_i-members.html,1,['update'],['updateIfDirty']
Deployability,"terialDataWidget, sofa::gui::qt::GenericDataWidget< DATA, WIDGET >, sofa::gui::qt::DisplayFlagsDataWidget, and sofa::gui::qt::DataFileNameWidget. ◆ setFilled(). void sofa::gui::qt::DataWidget::setFilled ; (; bool ; value). inline . method to warn if Data has not been filled at constructor. . ◆ setWidgetDirty. void sofa::gui::qt::DataWidget::setWidgetDirty ; (; bool ; b = true). slot . You call this slot anytime you want to specify that the widget value is out of sync with the underlying data value. . ◆ sizeWidget(). virtual unsigned int sofa::gui::qt::DataWidget::sizeWidget ; (; ). inlinevirtual . Helper method to give a size. ; Reimplemented in sofa::gui::qt::QDataSimpleEdit, sofa::gui::qt::TableDataWidget< T, FLAGS >, sofa::gui::qt::GraphDataWidget< T >, and sofa::gui::qt::DisplayFlagsDataWidget. ◆ updateDataValue. void sofa::gui::qt::DataWidget::updateDataValue ; (; ). slot . Checks that widget has been edited emit DataOwnerDirty in case the name field has been modified . ◆ updateVisibility(). void sofa::gui::qt::DataWidget::updateVisibility ; (; ). ◆ updateWidgetValue. void sofa::gui::qt::DataWidget::updateWidgetValue ; (; ). slot . First checks that the widget is not currently being edited checks that the data has changed since the last time the widget has read the data value. ultimately read the data value. . ◆ WidgetDirty. void sofa::gui::qt::DataWidget::WidgetDirty ; (; bool ; ). signal . Emitted each time setWidgetDirty is called. You can also emit it if you want to tell the widget value is out of sync with the underlying data value. . ◆ writeToData(). virtual void sofa::gui::qt::DataWidget::writeToData ; (; ). protectedpure virtual . The implementation of this methods needs to tell how the widget can write its value in the data ; Implemented in sofa::gui::qt::QDataSimpleEdit, sofa::gui::qt::RadioDataWidget, sofa::gui::qt::SimpleDataWidget< T, Container >, sofa::gui::qt::SimpleDataWidget< T, graph_data_widget_container< T > >, sofa::gui::qt::SimpleDataWidge",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_data_widget.html:8587,update,updateVisibility,8587,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_data_widget.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_data_widget.html,1,['update'],['updateVisibility']
Deployability,"tersection (collision::geometry::Sphere &sph1, collision::geometry::Sphere &sph2, OutputVector *contacts, const core::collision::Intersection *currentIntersection);  ; virtual bool testIntersection (collision::geometry::RigidSphere &sph1, collision::geometry::RigidSphere &sph2, const core::collision::Intersection *currentIntersection);  ; virtual int computeIntersection (collision::geometry::RigidSphere &sph1, collision::geometry::RigidSphere &sph2, OutputVector *contacts, const core::collision::Intersection *currentIntersection);  ; virtual bool testIntersection (collision::geometry::Sphere &sph1, collision::geometry::RigidSphere &sph2, const core::collision::Intersection *currentIntersection);  ; virtual int computeIntersection (collision::geometry::Sphere &sph1, collision::geometry::RigidSphere &sph2, OutputVector *contacts, const core::collision::Intersection *currentIntersection);  ; virtual bool testIntersection (collision::geometry::Sphere &sph1, collision::geometry::Sphere &sph2)=delete;  ; virtual int computeIntersection (collision::geometry::Sphere &sph1, collision::geometry::Sphere &sph2, OutputVector *)=delete;  ; virtual bool testIntersection (collision::geometry::RigidSphere &sph1, collision::geometry::RigidSphere &sph2)=delete;  ; virtual int computeIntersection (collision::geometry::RigidSphere &sph1, collision::geometry::RigidSphere &sph2, OutputVector *)=delete;  ; virtual bool testIntersection (collision::geometry::Sphere &sph1, collision::geometry::RigidSphere &sph2)=delete;  ; virtual int computeIntersection (collision::geometry::Sphere &sph1, collision::geometry::RigidSphere &sph2, OutputVector *)=delete;  ;  Public Member Functions inherited from sofa::core::collision::Intersection;  SOFA_ABSTRACT_CLASS (Intersection, objectmodel::BaseObject);  ; virtual bool isSupported (core::CollisionElementIterator elem1, core::CollisionElementIterator elem2);  ; virtual bool useContinuous () const;  returns true if algorithm uses continuous detection More.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1intersection_1_1_base_proximity_intersection.html:6305,continuous,continuous,6305,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1intersection_1_1_base_proximity_intersection.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1intersection_1_1_base_proximity_intersection.html,3,['continuous'],['continuous']
Deployability,"tes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  . Public Member Functions;  SOFA_CLASS (TriangleModelInRegularGrid, TriangleCollisionModel< sofa::defaulttype::Vec3Types >);  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; void computeBoundingTree (int maxDepth=0) override;  Create or update the bounding volume hierarchy. More...;  ;  Public Member Functions inherited from sofa::component::collision::geometry::TriangleCollisionModel< sofa::defaulttype::Vec3Types >;  SOFA_CLASS (SOFA_TEMPLATE(TriangleCollisionModel, sofa::defaulttype::Vec3Types), core::CollisionModel);  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; void resize (sofa::Size size) override;  Set the number of elements. More...;  ; void computeBoundingTree (int maxDepth=0) override;  Create or update the bounding volume hierarchy. More...;  ; void computeContinuousBoundingTree (SReal dt, int maxDepth=0) override;  Create or update the bounding volume hierarchy, accounting for motions within the given timestep. More...;  ; void draw (const core::visual::VisualParams *, sofa::Index index) override;  Render an collision element. More...;  ; void draw (const core::visual::VisualParams *vparams) override;  Rende",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_triangle_model_in_regular_grid.html:2876,update,update,2876,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_triangle_model_in_regular_grid.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_triangle_model_in_regular_grid.html,1,['update'],['update']
Deployability,"text *context, core::objectmodel::BaseObjectDescription *arg);  ; template<class T > ; static T::SPtr create (T *, core::objectmodel::BaseContext *context, core::objectmodel::BaseObjectDescription *arg);  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseObject; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  . Protected Member Functions;  TopologicalMapping ();  ;  ~TopologicalMapping () override;  ; bool checkTopologyInputTypes ();  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topological_mapping.html:15344,update,update,15344,api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topological_mapping.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topological_mapping.html,1,['update'],['update']
Deployability,"text(BaseObject::SPtr obj)sofa::core::objectmodel::BaseNodeprotected; setSleeping(bool val) overridesofa::simulation::Nodevirtual; setTime(SReal t)sofa::core::objectmodel::Contextvirtual; setTopology(BaseObject *)sofa::core::objectmodel::BaseContextinlinevirtual; shaderssofa::simulation::Node; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; Single typedefsofa::simulation::Node; SOFA_ABSTRACT_CLASS(BaseNode, Base)sofa::core::objectmodel::BaseNode; SOFA_ABSTRACT_CLASS2(Node, BaseNode, Context)sofa::simulation::Node; SOFA_CLASS(Context, BaseContext)sofa::core::objectmodel::Context; sofa::core::objectmodel::BaseContext::SOFA_CLASS(BaseContext, Base)sofa::core::objectmodel::BaseContext; solversofa::simulation::Node; SPtr typedefsofa::core::objectmodel::Base; statesofa::simulation::Node; time_sofa::core::objectmodel::Context; topologysofa::simulation::Node; topologyObjectsofa::simulation::Node; unsortedsofa::simulation::Node; updateContext()sofa::simulation::Nodevirtual; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateSimulationContext()sofa::simulation::Nodevirtual; updateVisualContext()sofa::simulation::Nodevirtual; Vec3 typedefsofa::core::objectmodel::BaseContext; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VisitorScheduler classsofa::simulation::Nodefriend; visualLoopsofa::simulation::Node; visualManagersofa::simulation::Node; visualModelsofa::simulation::Node; worldGravity_sofa::core::objectmodel::Context; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseContext() overridesofa::core::objectmodel::BaseContextprotected; ~BaseNode() overridesofa::core::objectmodel::BaseNodeprotected; ~Context() overridesofa::core::objectmodel::Contextinlineprotectedvi",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node-members.html:20488,update,updateContext,20488,api/master/sofa/html/classsofa_1_1simulation_1_1_node-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node-members.html,1,['update'],['updateContext']
Deployability,"th, const BaseLink *link) override;  ; virtual std::string getPathName () const override;  Return the full path name of this object. More...;  ; SReal getTime () const;  Current time. More...;  ; const BaseContext * getContext () const;  ; BaseContext * getContext ();  ; const BaseObject * getMaster () const;  ; BaseObject * getMaster ();  ; const VecSlaves & getSlaves () const;  ; BaseObject * getSlave (const std::string &name) const;  ; virtual void addSlave (BaseObject::SPtr s);  ; virtual void removeSlave (BaseObject::SPtr s);  ; virtual void handleEvent (Event *);  Handle an event. More...;  ; virtual void handleTopologyChange ();  ; void parse (BaseObjectDescription *arg) override;  Parse the given description to assign values to this object's fields and potentially other parameters. More...;  ; virtual void bwdInit ();  Initialization method called at graph creation and modification, during bottom-up traversal. More...;  ; void updateInternal ();  Update method called when variables (used to compute other internal variables) are modified. More...;  ; virtual void storeResetState ();  Save the initial state for later uses in reset() More...;  ; virtual void reset ();  Reset to initial state. More...;  ; virtual void cleanup ();  ;  Public Member Functions inherited from sofa::core::objectmodel::Base; virtual const BaseClass * getClass () const;  ; void addDeprecatedAttribute (lifecycle::DeprecatedData *attribute);  ; void addUpdateCallback (const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs);  ; void addOutputsToCallback (const std::string &name, std::initializer_list< BaseData * > outputs);  ; const std::string & getName () const;  Accessor to the object name. More...;  ; void setName (const std::string &n);  Set the name of this object. More...;  ; void setName (const std::string &n, int counter);  Set the name ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1nonuniform_1_1_non_uniform_hexahedral_f_e_m_force_field_and_mass.html:13286,update,updateInternal,13286,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1nonuniform_1_1_non_uniform_hexahedral_f_e_m_force_field_and_mass.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1nonuniform_1_1_non_uniform_hexahedral_f_e_m_force_field_and_mass.html,1,['update'],['updateInternal']
Deployability,"the fields of this object. More...;  ; const MapData & getDataAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; const VecLink & getLinks () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapLink & getLinkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Protected Member Functions;  Vertex2Frame ();  ;  ~Vertex2Frame () override;  ; type::Quat< SReal > computeOrientation (const CPos &xAxis, const CPos &yAxis, const CPos &zAxis);  ;  Protected Member Functions inherited from sofa::core::DataEngine;  DataEngine ();  Constructor. More...;  ;  ~DataEngine () override;  Destructor. Do nothing. More...;  ; virtual void doInternalUpdate () final;  Prevent engines to use the internalUpdate mechanism, so that only update/doUpdate is used. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::DDGNode; virtual void doAddInput (DDGNode *n);  ; virtual void doDelInput (DDGNode *n);  ; virtual void doAddOutput (DDGNode *n);  ; virtual void doDelOutput (DDGNode *n);  ; void cleanDirtyOutputsOfInputs ();  the dirtyOutputs flags of all the inputs will be set to false More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_vertex2_frame.html:13880,update,update,13880,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_vertex2_frame.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_vertex2_frame.html,1,['update'],['update']
Deployability,"the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  . Public Member Functions;  SOFA_CLASS (SOFA_TEMPLATE(HausdorffDistance, DataTypes), core::DataEngine);  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; void reinit () override;  Update method called when variables used in precomputation are modified. More...;  ; void doUpdate () override;  Where you put your engine's impl. More...;  ;  Public Member Functions inherited from sofa::core::DataEngine;  SOFA_ABSTRACT_CLASS (DataEngine, core::objectmodel::BaseObject);  ; void update () final;  ; void addInput (sofa::core::objectmodel::BaseData *data);  Add a new input to this engine. More...;  ; void addOutput (objectmodel::BaseData *n);  Add a new output to this engine. More...;  ;  Public Member Functions inherited from sofa::core::DataTrackerDDGNode;  DataTrackerDDGNode ();  ; void addInputs (std::initializer_list< sofa::core::objectmodel::BaseData * > datas);  Create a DataCallback object associated with multiple Data fields. More...;  ; void addOutputs (std::initializer_list< sofa::core::objectmodel::BaseData * > datas);  ; virtual void cleanDirty (const core::ExecParams *params=nullptr);  ; void updateAllInputsIfDirty ();  ;  Public Member Functions inherited from sofa::core::objectmodel::DDGNode;  DDGNode ();  Constructor. More...;  ; virtual ~DDGNode ();  Destructor. Automatically remove remaining links. More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void delInput (DDGNode *n);  Remove an input fr",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1analyze_1_1_hausdorff_distance.html:3026,update,update,3026,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1analyze_1_1_hausdorff_distance.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1analyze_1_1_hausdorff_distance.html,1,['update'],['update']
Deployability,"the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  . Public Member Functions;  SOFA_CLASS (SOFA_TEMPLATE(NormalsFromPoints, DataTypes), core::DataEngine);  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; void reinit () override;  Update method called when variables used in precomputation are modified. More...;  ; void doUpdate () override;  Where you put your engine's impl. More...;  ;  Public Member Functions inherited from sofa::core::DataEngine;  SOFA_ABSTRACT_CLASS (DataEngine, core::objectmodel::BaseObject);  ; void update () final;  ; void addInput (sofa::core::objectmodel::BaseData *data);  Add a new input to this engine. More...;  ; void addOutput (objectmodel::BaseData *n);  Add a new output to this engine. More...;  ;  Public Member Functions inherited from sofa::core::DataTrackerDDGNode;  DataTrackerDDGNode ();  ; void addInputs (std::initializer_list< sofa::core::objectmodel::BaseData * > datas);  Create a DataCallback object associated with multiple Data fields. More...;  ; void addOutputs (std::initializer_list< sofa::core::objectmodel::BaseData * > datas);  ; virtual void cleanDirty (const core::ExecParams *params=nullptr);  ; void updateAllInputsIfDirty ();  ;  Public Member Functions inherited from sofa::core::objectmodel::DDGNode;  DDGNode ();  Constructor. More...;  ; virtual ~DDGNode ();  Destructor. Automatically remove remaining links. More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void delInput (DDGNode *n);  Remove an input fr",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_normals_from_points.html:2761,update,update,2761,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_normals_from_points.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_normals_from_points.html,1,['update'],['update']
Deployability,"the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  . Public Member Functions;  SOFA_CLASS (SOFA_TEMPLATE(PointsFromIndices, DataTypes), core::DataEngine);  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; void reinit () override;  Update method called when variables used in precomputation are modified. More...;  ; void doUpdate () override;  Where you put your engine's impl. More...;  ;  Public Member Functions inherited from sofa::core::DataEngine;  SOFA_ABSTRACT_CLASS (DataEngine, core::objectmodel::BaseObject);  ; void update () final;  ; void addInput (sofa::core::objectmodel::BaseData *data);  Add a new input to this engine. More...;  ; void addOutput (objectmodel::BaseData *n);  Add a new output to this engine. More...;  ;  Public Member Functions inherited from sofa::core::DataTrackerDDGNode;  DataTrackerDDGNode ();  ; void addInputs (std::initializer_list< sofa::core::objectmodel::BaseData * > datas);  Create a DataCallback object associated with multiple Data fields. More...;  ; void addOutputs (std::initializer_list< sofa::core::objectmodel::BaseData * > datas);  ; virtual void cleanDirty (const core::ExecParams *params=nullptr);  ; void updateAllInputsIfDirty ();  ;  Public Member Functions inherited from sofa::core::objectmodel::DDGNode;  DDGNode ();  Constructor. More...;  ; virtual ~DDGNode ();  Destructor. Automatically remove remaining links. More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void delInput (DDGNode *n);  Remove an input fr",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_points_from_indices.html:2482,update,update,2482,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_points_from_indices.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_points_from_indices.html,1,['update'],['update']
Deployability,"the timestep).; If the ForceField can be represented as a matrix, this method computes $ df += kFactor K dx + bFactor B dx $; This method must be implemented by the component, and is usually called by the generic PairInteractionForceField::addDForce() method.; To support old components that implement the deprecated addForce method without scalar coefficients, it defaults to using a temporaty vector to compute $ K dx $ and then manually scaling all values by kFactor. ; Implements sofa::core::behavior::PairInteractionForceField< DataTypes >. ◆ addForce(). template<class DataTypes > . void sofa::component::collision::response::contact::PenalityContactForceField< DataTypes >::addForce ; (; const sofa::core::MechanicalParams * ; mparams, . DataVecDeriv & ; f1, . DataVecDeriv & ; f2, . const DataVecCoord & ; x1, . const DataVecCoord & ; x2, . const DataVecDeriv & ; v1, . const DataVecDeriv & ; v2 . ). overridevirtual . Given the current position and velocity states, update the current force vector by computing and adding the forces associated with this ForceField.; If the ForceField can be represented as a matrix, this method computes $ f += B v + K x $; This method must be implemented by the component, and is usually called by the generic ForceField::addForce() method. ; Implements sofa::core::behavior::PairInteractionForceField< DataTypes >. ◆ addKToMatrix(). template<class DataTypes > . void sofa::component::collision::response::contact::PenalityContactForceField< DataTypes >::addKToMatrix ; (; const sofa::core::MechanicalParams * ; mparams, . const sofa::core::behavior::MultiMatrixAccessor * ; matrix . ). overridevirtual . Compute the system matrix corresponding to . ; Parameters. mparamsmparams->kFactor() is the coefficient for stiffness contributions (i.e. DOFs term in the ODE) ; matrixthe matrix to add the result to . Implements sofa::core::behavior::BaseForceField. ◆ buildDampingMatrix(). template<class DataTypes > . void sofa::component::collision::response::cont",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1contact_1_1_penality_contact_force_field.html:24210,update,update,24210,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1contact_1_1_penality_contact_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1contact_1_1_penality_contact_force_field.html,1,['update'],['update']
Deployability,"the vector is empty. More...;  ; virtual void release ();  Delete this vector from memory once the contact pair is no longer active. More...;  ; virtual type::Vec3 getFirstPosition (unsigned idx)=0;  Const iterator to iterate the detection pairs. More...;  ; virtual type::Vec3 getSecondPosition (unsigned idx)=0;  Const iterator end to iterate the detection pairs. More...;  . Protected Member Functions; virtual ~DetectionOutputVector ();  . Constructor details. ◆ ~DetectionOutputVector(). virtual sofa::core::collision::DetectionOutputVector::~DetectionOutputVector ; (; ). inlineprotectedvirtual . Function details. ◆ clear(). virtual void sofa::core::collision::DetectionOutputVector::clear ; (; ). pure virtual . Clear the content of this vector. ; Implemented in sofa::core::collision::TDetectionOutputVector< CM1, CM2 >. ◆ empty(). bool sofa::core::collision::DetectionOutputVector::empty ; (; ); const. inline . Test if the vector is empty. . ◆ getFirstPosition(). virtual type::Vec3 sofa::core::collision::DetectionOutputVector::getFirstPosition ; (; unsigned ; idx). pure virtual . Const iterator to iterate the detection pairs. ; Implemented in sofa::core::collision::TDetectionOutputVector< CM1, CM2 >. ◆ getSecondPosition(). virtual type::Vec3 sofa::core::collision::DetectionOutputVector::getSecondPosition ; (; unsigned ; idx). pure virtual . Const iterator end to iterate the detection pairs. ; Implemented in sofa::core::collision::TDetectionOutputVector< CM1, CM2 >. ◆ release(). virtual void sofa::core::collision::DetectionOutputVector::release ; (; ). inlinevirtual . Delete this vector from memory once the contact pair is no longer active. . ◆ size(). virtual unsigned int sofa::core::collision::DetectionOutputVector::size ; (; ); const. pure virtual . Current size (number of detected contacts. ; Implemented in sofa::core::collision::TDetectionOutputVector< CM1, CM2 >. sofacorecollisionDetectionOutputVector; Generated on Mon Nov 11 2024 03:15:47 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_detection_output_vector.html:2251,release,release,2251,api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_detection_output_vector.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_detection_output_vector.html,2,['release'],['release']
Deployability,"their current positions and velocities.; For implicit integration schemes, it must also compute the derivative ( df, given a displacement dx ). . Public Member Functions;  SOFA_ABSTRACT_CLASS (BaseInteractionForceField, BaseForceField);  ; virtual BaseMechanicalState * getMechModel1 ();  ; virtual BaseMechanicalState * getMechModel2 ();  ; void addKToMatrix (const MechanicalParams *, const sofa::core::behavior::MultiMatrixAccessor *) override;  Compute the system matrix corresponding to . More...;  ; virtual void initGnuplot (const std::string path);  initialization to export potential energy to gnuplot files format More...;  ; virtual void exportGnuplot (SReal time);  export kinetic and potential energy state at ""time"" to a gnuplot file More...;  ; bool insertInNode (objectmodel::BaseNode *node) override;  ; bool removeInNode (objectmodel::BaseNode *node) override;  ;  Public Member Functions inherited from sofa::core::behavior::BaseForceField;  SOFA_ABSTRACT_CLASS (BaseForceField, StateAccessor);  ; virtual void addForce (const MechanicalParams *mparams, MultiVecDerivId fId)=0;  Given the current position and velocity states, update the current force vector by computing and adding the forces associated with this ForceField. More...;  ; virtual void addDForce (const MechanicalParams *mparams, MultiVecDerivId dfId)=0;  Compute the force derivative given a small displacement from the position and velocity used in the previous call to addForce(). More...;  ; virtual void addMBKdx (const MechanicalParams *mparams, MultiVecDerivId dfId);  Accumulate the contribution of M, B, and/or K matrices multiplied by the dx vector with the given coefficients. More...;  ; virtual SReal getPotentialEnergy (const MechanicalParams *mparams=mechanicalparams::defaultInstance()) const =0;  Get the potential energy associated to this ForceField during the last call of addForce( const MechanicalParams* mparams );. More...;  ; virtual void addBToMatrix (const MechanicalParams *mparams, cons",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_interaction_force_field.html:1844,update,update,1844,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_interaction_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_interaction_force_field.html,1,['update'],['update']
Deployability,"them This vector store which input position is used for each vertex If it is empty then each vertex correspond to one position . ◆ d_vtangents. core::topology::PointData< VecCoord > sofa::component::visual::VisualModelImpl::d_vtangents. tangents for normal mapping . ◆ d_vtexcoords. core::topology::PointData< VecTexCoord > sofa::component::visual::VisualModelImpl::d_vtexcoords. coordinates of the texture . ◆ fileMesh. sofa::core::objectmodel::DataFileName sofa::component::visual::VisualModelImpl::fileMesh. ◆ groups. sofa::core::objectmodel::RenamedData< type::vector<FaceGroup> > sofa::component::visual::VisualModelImpl::groups. ◆ l_topology. SingleLink<VisualModelImpl, sofa::core::topology::BaseMeshTopology, BaseLink::FLAG_STOREPATH | BaseLink::FLAG_STRONGLINK> sofa::component::visual::VisualModelImpl::l_topology. Link to be set to the topology container in the component graph. . ◆ lastMeshRev. int sofa::component::visual::VisualModelImpl::lastMeshRev. Time stamps from the last time the mesh was updated from the topology. . ◆ m_computeTangents. sofa::core::objectmodel::RenamedData<bool> sofa::component::visual::VisualModelImpl::m_computeTangents. ◆ m_dirtyQuads. std::set< sofa::core::topology::BaseMeshTopology::QuadID> sofa::component::visual::VisualModelImpl::m_dirtyQuads. protected . Internal buffer similar to. ; See alsom_dirtyTriangles but to be used by topolgy Data . d_quads callback when points are removed. . ◆ m_dirtyTriangles. std::set< sofa::core::topology::BaseMeshTopology::TriangleID> sofa::component::visual::VisualModelImpl::m_dirtyTriangles. protected . Internal buffer to be filled by topology Data See alsod_triangles callback when points are removed. Those dirty triangles will be updated at next updateVisual This avoid to update the whole mesh. . ◆ m_edges. sofa::core::objectmodel::RenamedData< VecVisualEdge > sofa::component::visual::VisualModelImpl::m_edges. ◆ m_fixMergedUVSeams. sofa::core::objectmodel::RenamedData<bool> sofa::component::visual::Visua",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1visual_1_1_visual_model_impl.html:32423,update,updated,32423,api/master/sofa/html/classsofa_1_1component_1_1visual_1_1_visual_model_impl.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1visual_1_1_visual_model_impl.html,1,['update'],['updated']
Deployability,"this is NOT a component and can be used everywhere.; Note that it contains a DataTracker (m_dataTracker) to be able to check precisely which input changed if needed.; **** Implementation good rules: (similar to DataEngine); //init addInput // indicate all inputs addOutput // indicate all outputs setDirtyValue(); // the engine must start dirty (of course, no output are up-to-date); DataTrackerCallback is usually created using the ""addUpdateCallback()"" method from Base. Thus the context is usually passed to the lambda making all public & private attributes & methods of the component accessible within the callback function. example:; addUpdateCallback(""name"", {&name}, [this](DataTracker& tracker){ // Increment the state counter but without changing the state. return d_componentState.getValue(); }, {&d_componentState});; A member function with the same signature - core::objectmodel::ComponentState(DataTracker&) - can also be used.; The update of the inputs is done for you before calling the callback, and they are also cleaned for you after the call. Thus there's no need to manually call updateAllInputsIfDirty() or cleanDirty() (see implementation of update() . Protected Attributes; std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> m_callback;  ; sofa::core::objectmodel::Base * m_owner {nullptr};  ;  Protected Attributes inherited from sofa::core::DataTrackerDDGNode; DataTracker m_dataTracker;  ;  Protected Attributes inherited from sofa::core::objectmodel::DDGNode; DDGLinkContainer inputs;  ; DDGLinkContainer outputs;  . Public Member Functions; void setCallback (std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> f);  ; void update () override;  Calls the callback when one of the data has changed. More...;  ; void setOwner (sofa::core::objectmodel::Base *owner);  ;  Public Member Functions inherited from sofa::core::DataTrackerDDGNode;  DataTrackerDDGNode ();  ; void addInputs (std::initializer_list< sofa::core::object",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_data_tracker_callback.html:1476,update,update,1476,api/master/sofa/html/classsofa_1_1core_1_1_data_tracker_callback.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_data_tracker_callback.html,1,['update'],['update']
Deployability,"this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  ;  Public Member Functions inherited from sofa::core::behavior::StateAccessor;  SOFA_ABSTRACT_CLASS (StateAccessor, objectmodel::BaseObject);  ; virtual const MultiLink< StateAccessor, BaseMechanicalState, BaseLink::FLAG_DUPLICATE >::Container & getMechanicalStates () const;  Return a list of mechanical states to which this component is associated. More...;  ; void computeBBox (const core::ExecParams *params, bool onlyVisible=false) override;  . Protected Member Functions;  BaseInteractionConstraint ();  ;  ~BaseInteractionConstraint () override;  ; virtual type::vector< std::string > getInteractionIdentifiers ();  ;  Protected Member Functions inherited from sofa::core::behavior::BaseConstraint;  BaseConstraint ();  ;  ~BaseConstraint () override;  ;  Protected Member Functions inherited from sofa::core::behavior::BaseConstraintSet;  BaseConstraintSet ();  ;  ~BaseConstraintSet () override;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseDat",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_interaction_constraint.html:12436,update,update,12436,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_interaction_constraint.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_interaction_constraint.html,1,['update'],['update']
Deployability,"thod called at graph creation and modification, during top-down traversal. More...;  ; void doDrawVisual (const core::visual::VisualParams *vparams) override;  ; void exportOBJ (std::string, std::ostream *, std::ostream *, Index &, Index &, Index &, int &) override;  Append this mesh to an OBJ format stream. More...;  ; bool insertInNode (core::objectmodel::BaseNode *node) override;  ; bool removeInNode (core::objectmodel::BaseNode *node) override;  ;  Public Member Functions inherited from sofa::core::visual::VisualModel;  SOFA_ABSTRACT_CLASS (VisualModel, objectmodel::BaseObject);  ; virtual void drawVisual (const VisualParams *) final;  Display the VisualModel object. More...;  ; void initVisual (const VisualParams *);  Initialize the textures, or other graphical resources. More...;  ; virtual void initVisual () final;  ; void updateVisual (const VisualParams *);  used to update the model if necessary. More...;  ; virtual void updateVisual () final;  ; virtual void clearVisual ();  clear some graphical resources (generally called before the deleteVisitor). More...;  ; virtual void fwdDraw (VisualParams *);  Called before objects in the current branch are displayed. More...;  ; virtual void bwdDraw (VisualParams *);  Called after objects in the current branch are displayed. More...;  ; virtual void drawTransparent (const VisualParams *);  Display transparent surfaces. More...;  ; virtual void drawShadow (const VisualParams *vparams);  Display shadow-casting surfaces. More...;  ; virtual void parallelUpdateVisual ();  used to update the model if necessary. More...;  ; virtual bool addBBox (SReal *, SReal *);  used to add the bounding-box of this visual model to the given bounding box in order to compute the scene bounding box or cull hidden objects. More...;  ; virtual void applyTranslation (const SReal, const SReal, const SReal);  ; virtual void applyRotation (const SReal, const SReal, const SReal);  ; virtual void applyRotation (const type::Quat< SReal >);  ; virt",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_ogl_cylinder_model.html:1505,update,updateVisual,1505,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_ogl_cylinder_model.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_ogl_cylinder_model.html,1,['update'],['updateVisual']
Deployability,"thod called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  . Protected Member Functions;  NewProximityIntersection ();  ;  Protected Member Functions inherited from sofa::component::collision::detection::intersection::BaseProximityIntersection;  BaseProximityIntersection ();  ;  ~BaseProximityIntersection () override;  ;  Protected Member Functions inherited from sofa::component::collision::detection::intersection::DiscreteIntersection;  DiscreteIntersection ();  ;  ~DiscreteIntersection () override;  ; template<class SphereType1 , class SphereType2 > ; bool testIntersectionSphere (SphereType1 &sph1, SphereType2 &sph2, const SReal alarmDist);  ; template<class SphereType1 , class SphereType2 > ; int computeIntersectionSphere (SphereType1 &sph1, SphereType2 &sph2, DiscreteIntersection::OutputVector *contacts, const SReal alarmDist, const SReal contactDist);  ;  Protected Member Functions inherited from sofa::core::collision::Intersection;  Intersection ();  ;  ~Intersection () override;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChan",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1intersection_1_1_new_proximity_intersection.html:19357,update,update,19357,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1intersection_1_1_new_proximity_intersection.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1intersection_1_1_new_proximity_intersection.html,1,['update'],['update']
Deployability,"tic::material::MooneyRivlin< DataTypes >::Name = ""MooneyRivlin"". staticconstexpr . Function details. ◆ applyElasticityTensor(). template<class DataTypes > . void sofa::component::solidmechanics::fem::hyperelastic::material::MooneyRivlin< DataTypes >::applyElasticityTensor ; (; StrainInformation< DataTypes > * ; , . const MaterialParameters< DataTypes > & ; , . const MatrixSym & ; , . MatrixSym & ;  . ). inlineoverridevirtual . computes the Elasticity Tensor of the current configuration ; Reimplemented from sofa::component::solidmechanics::fem::hyperelastic::material::HyperelasticMaterial< DataTypes >. ◆ deriveSPKTensor(). template<class DataTypes > . void sofa::component::solidmechanics::fem::hyperelastic::material::MooneyRivlin< DataTypes >::deriveSPKTensor ; (; StrainInformation< DataTypes > * ; , . const MaterialParameters< DataTypes > & ; , . MatrixSym & ;  . ). inlineoverridevirtual . computes the second Piola Kirchhoff stress tensor of the current configuration ; Reimplemented from sofa::component::solidmechanics::fem::hyperelastic::material::HyperelasticMaterial< DataTypes >. ◆ ElasticityTensor(). template<class DataTypes > . void sofa::component::solidmechanics::fem::hyperelastic::material::MooneyRivlin< DataTypes >::ElasticityTensor ; (; StrainInformation< DataTypes > * ; sinfo, . const MaterialParameters< DataTypes > & ; param, . Matrix6 & ; outputTensor . ). inlineoverridevirtual . Reimplemented from sofa::component::solidmechanics::fem::hyperelastic::material::HyperelasticMaterial< DataTypes >. ◆ getStrainEnergy(). template<class DataTypes > . Real sofa::component::solidmechanics::fem::hyperelastic::material::MooneyRivlin< DataTypes >::getStrainEnergy ; (; StrainInformation< DataTypes > * ; , . const MaterialParameters< DataTypes > & ;  . ). inlineoverridevirtual . returns the strain energy of the current configuration ; Reimplemented from sofa::component::solidmechanics::fem::hyperelastic::material::HyperelasticMaterial< DataTypes >. sofacomponentsolidme",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_mooney_rivlin.html:3186,configurat,configuration,3186,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_mooney_rivlin.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_mooney_rivlin.html,1,['configurat'],['configuration']
Deployability,"tic; showDistanceMapsofa::component::engine::analyze::Distances< DataTypes >; showGoalDistanceMapsofa::component::engine::analyze::Distances< DataTypes >; showGradientMapsofa::component::engine::analyze::Distances< DataTypes >; showGradientsScaleFactorsofa::component::engine::analyze::Distances< DataTypes >; showMapIndexsofa::component::engine::analyze::Distances< DataTypes >; showTextScaleFactorsofa::component::engine::analyze::Distances< DataTypes >; SOFA_ABSTRACT_CLASS(DataEngine, core::objectmodel::BaseObject)sofa::core::DataEngine; SOFA_CLASS(SOFA_TEMPLATE(Distances, DataTypes), core::DataEngine)sofa::component::engine::analyze::Distances< DataTypes >; sofa::core::DataEngine::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; update() finalsofa::core::DataEnginevirtual; updateAllInputsIfDirty()sofa::core::DataTrackerDDGNode; updateIfDirty() constsofa::core::objectmodel::DDGNode; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecCoord typedefsofa::component::engine::analyze::Distances< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VecVecCoord typedefsofa::component::engine::analyze::Distances< DataTypes >; VVD typedefsofa::component::engine::analyze::Distances< DataTypes >; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; zonesFramePairsofa::component::engine::analyze::Distances< DataTypes >; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~DataEngine() overridesofa::core::Data",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1analyze_1_1_distances-members.html:14975,update,updateAllInputsIfDirty,14975,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1analyze_1_1_distances-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1analyze_1_1_distances-members.html,1,['update'],['updateAllInputsIfDirty']
Deployability,"tic; sofa::SOFA_ABSTRACT_CLASS(BaseConstraint, BaseConstraintSet)sofa::core::behavior::BaseConstraint; sofa::core::behavior::BaseConstraintSet::SOFA_ABSTRACT_CLASS(BaseConstraintSet, objectmodel::BaseObject)sofa::core::behavior::BaseConstraintSet; sofa::core::behavior::StateAccessor::SOFA_ABSTRACT_CLASS(StateAccessor, objectmodel::BaseObject)sofa::core::behavior::StateAccessor; SOFA_ABSTRACT_CLASS2(BaseInteractionConstraint, BaseConstraint, StateAccessor)sofa::core::behavior::BaseInteractionConstraint; SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; StateAccessor()sofa::core::behavior::StateAccessorinlineprotected; storeLambda(const ConstraintParams *cParams, MultiVecDerivId res, const sofa::linearalgebra::BaseVector *lambda)=0sofa::core::behavior::BaseConstraintpure virtual; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecConstArea typedefsofa::core::behavior::BaseConstraint; VecConstCoord typedefsofa::core::behavior::BaseConstraint; VecConstDeriv typedefsofa::core::behavior::BaseConstraint; VecConstraintBlockInfo typedefsofa::core::behavior::BaseConstraint; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecPersistentID typedefsofa::core::behavior::BaseConstraint; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseConstraint() overridesofa::core::behavior::BaseConstraintinlineprotected; ~BaseConstraintSet() overridesofa::core::behavior::BaseConstraintSetprotected; ~BaseInteractionConstraint() overridesofa:",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_interaction_constraint-members.html:13044,update,updateInternal,13044,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_interaction_constraint-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_interaction_constraint-members.html,1,['update'],['updateInternal']
Deployability,"tic; sofa::SOFA_ABSTRACT_CLASS(VisualModel, objectmodel::BaseObject)sofa::core::visual::VisualModel; sofa::gl::component::shader::OglShaderElement::SOFA_ABSTRACT_CLASS(ShaderElement, objectmodel::BaseObject)sofa::core::visual::ShaderElement; SOFA_CLASS(OglMatrix3Variable, OglMatrix2Variable)sofa::gl::component::shader::OglMatrix3Variable; sofa::gl::component::shader::OglMatrix2Variable::SOFA_CLASS(OglMatrix2Variable, OglVariable< type::vector< float > >)sofa::gl::component::shader::OglMatrix2Variable; OglVariable< type::vector< float > >::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SOFA_CLASS2(OglVariable, core::visual::VisualModel, OglShaderElement)sofa::gl::component::shader::OglVariable< type::vector< float > >; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; transposesofa::gl::component::shader::OglMatrix2Variable; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateVisual(const VisualParams *)sofa::core::visual::VisualModel; updateVisual() finalsofa::core::visual::VisualModelvirtual; valuesofa::gl::component::shader::OglVariable< type::vector< float > >; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VisualModel()sofa::core::visual::VisualModelprotected; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~OglMatrix2Variable()sofa::gl::component::shader::OglMatrix2Variableinlinevirtual; ~OglMatrix3Variable() overridesofa::gl::component::shader::OglMatrix3Variableinline; ~OglShaderEleme",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_matrix3_variable-members.html:13874,update,updateInternal,13874,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_matrix3_variable-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_matrix3_variable-members.html,1,['update'],['updateInternal']
Deployability,"tic; sofa::SOFA_ABSTRACT_CLASS(VisualModel, objectmodel::BaseObject)sofa::core::visual::VisualModel; sofa::gl::component::shader::OglShaderElement::SOFA_ABSTRACT_CLASS(ShaderElement, objectmodel::BaseObject)sofa::core::visual::ShaderElement; SOFA_CLASS(OglMatrix4Variable, OglMatrix2Variable)sofa::gl::component::shader::OglMatrix4Variable; sofa::gl::component::shader::OglMatrix2Variable::SOFA_CLASS(OglMatrix2Variable, OglVariable< type::vector< float > >)sofa::gl::component::shader::OglMatrix2Variable; OglVariable< type::vector< float > >::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SOFA_CLASS2(OglVariable, core::visual::VisualModel, OglShaderElement)sofa::gl::component::shader::OglVariable< type::vector< float > >; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; transposesofa::gl::component::shader::OglMatrix2Variable; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateVisual(const VisualParams *)sofa::core::visual::VisualModel; updateVisual() finalsofa::core::visual::VisualModelvirtual; valuesofa::gl::component::shader::OglVariable< type::vector< float > >; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VisualModel()sofa::core::visual::VisualModelprotected; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~OglMatrix2Variable()sofa::gl::component::shader::OglMatrix2Variableinlinevirtual; ~OglMatrix4Variable() overridesofa::gl::component::shader::OglMatrix4Variableinline; ~OglShaderEleme",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_matrix4_variable-members.html:13874,update,updateInternal,13874,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_matrix4_variable-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_matrix4_variable-members.html,1,['update'],['updateInternal']
Deployability,"ticSpringsForceField, DataTypes), SOFA_TEMPLATE(core::behavior::ForceField, DataTypes))sofa::component::solidmechanics::spring::TriangularQuadraticSpringsForceField< DataTypes >; ForceField< DataTypes >::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SOFA_CLASS2(SOFA_TEMPLATE(ForceField, DataTypes), BaseForceField, SOFA_TEMPLATE(SingleStateAccessor, DataTypes))sofa::core::behavior::ForceField< DataTypes >; SPtr typedefsofa::core::objectmodel::Base; StateAccessor()sofa::core::behavior::StateAccessorinlineprotected; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; triangleInfosofa::component::solidmechanics::spring::TriangularQuadraticSpringsForceField< DataTypes >protected; TriangularQuadraticSpringsForceField()sofa::component::solidmechanics::spring::TriangularQuadraticSpringsForceField< DataTypes >protected; updateInternal()sofa::core::objectmodel::BaseObject; updateLameCoefficients()sofa::component::solidmechanics::spring::TriangularQuadraticSpringsForceField< DataTypes >; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateMatrixsofa::component::solidmechanics::spring::TriangularQuadraticSpringsForceField< DataTypes >protected; VecCoord typedefsofa::component::solidmechanics::spring::TriangularQuadraticSpringsForceField< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecDeriv typedefsofa::component::solidmechanics::spring::TriangularQuadraticSpringsForceField< DataTypes >; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseForceField() override=defaultsofa::core::behavior::BaseForceFieldprotected; ~BaseObject() overridesofa::core::ob",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_triangular_quadratic_springs_force_field-members.html:19237,update,updateLameCoefficients,19237,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_triangular_quadratic_springs_force_field-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_triangular_quadratic_springs_force_field-members.html,1,['update'],['updateLameCoefficients']
Deployability,"ticityFEMForceField< DataTypes >; ForceField< DataTypes >::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SOFA_CLASS2(SOFA_TEMPLATE(ForceField, DataTypes), BaseForceField, SOFA_TEMPLATE(SingleStateAccessor, DataTypes))sofa::core::behavior::ForceField< DataTypes >; SPtr typedefsofa::core::objectmodel::Base; StateAccessor()sofa::core::behavior::StateAccessorinlineprotected; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; toLameParameters(_2DMaterials, Real youngModulus, Real poissonRatio)sofa::component::solidmechanics::fem::elastic::BaseLinearElasticityFEMForceField< DataTypes >static; toLameParameters(_3DMaterials, Real youngModulus, Real poissonRatio)sofa::component::solidmechanics::fem::elastic::BaseLinearElasticityFEMForceField< DataTypes >static; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; Transformation typedefsofa::component::solidmechanics::fem::elastic::HexahedralFEMForceField< DataTypes >protected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecCoord typedefsofa::component::solidmechanics::fem::elastic::HexahedralFEMForceField< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecDeriv typedefsofa::component::solidmechanics::fem::elastic::HexahedralFEMForceField< DataTypes >; VecElement typedefsofa::component::solidmechanics::fem::elastic::HexahedralFEMForceField< DataTypes >; VecElementStiffness typedefsofa::component::solidmechanics::fem::elastic::HexahedralFEMForceField< DataTypes >; VecLink typedefsofa::core::objectmodel::Base; VecMaterialStiffness typedefsofa::component::solidmechanics::fem::elastic::HexahedralFEMForceField< DataTypes >; VecReal typedefsofa::component::solidmechanics::fem::elastic::BaseLinearElasticityFEMForceField< DataTypes >; VecSlaves typedefsofa::core::objectmodel::BaseObject; Vector typedefsofa::component::solidmechanics::fem::elastic::HexahedralFEMForceField< DataTypes >; ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_hexahedral_f_e_m_force_field-members.html:22487,update,updateInternal,22487,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_hexahedral_f_e_m_force_field-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_hexahedral_f_e_m_force_field-members.html,1,['update'],['updateInternal']
Deployability,tics 2021: 6 new papers. /sofa-in-the-jfr-2015; ; SOFA – SOFA in the JFR 2015. /sofa-is-on-twitter; ; SOFA – SOFA is on twitter !. /sofa-partner-of-medfit-2019; ; SOFA – SOFA partner of MedFIT 2019. /sofa-presented-at-medteq-2018-in-montreal; ; SOFA – SOFA presented at MedTeq 2018 in Montreal. /sofa-presented-in-webinar-radiologie-numerique-french; ; SOFA – SOFA presented in webinar “Radiologie Numérique” [French]. /sofa-soon-on-github; ; SOFA – SOFA soon on GitHub. /sofa-stc5-coming-soon; ; SOFA – SOFA STC#5 in Strasbourg. /sofa-technical-committee-3-upcoming-raise-your-expectations; ; SOFA – SOFA Technical Committee #3 upcoming: raise your expectations!. /sofa-technologies-exhibited-amd-learning-day-in-paris; ; SOFA – SOFA technologies exhibited @ AMD Learning Day in Paris. /sofa-training-discover-and-learn-sofa-at-ismar2017; ; SOFA – SOFA training: discover and learn SOFA at ISMAR 2017. /sofa-v16-12-has-been-released; ; SOFA – SOFA v16.12 has been released!. /sofa-v17-06-has-been-released; ; SOFA – SOFA v17.06 has been released!. /sofa-v17-12-has-been-released; ; SOFA – SOFA v17.12 has been released!. /sofa-v18-06-has-been-released; ; SOFA – SOFA v18.06 has been released!. /sofa-v18-12-has-been-released; ; SOFA – SOFA v18.12 has been released!. /sofa-v19-06-has-been-released; ; SOFA – SOFA v19.06 has been released!. /sofa-v19-12-has-been-released; ; SOFA – SOFA v19.12 has been released!. /sofa-v20-06-has-been-released; ; SOFA – SOFA v20.06 has been released!. /sofa-v20-12-has-been-released; ; SOFA – SOFA v20.12 has been released!. /sofa-v21-06-has-been-released; ; SOFA – SOFA v21.06 has been released!. /sofa-v21-12-has-been-released; ; SOFA – SOFA v21.12 has been released!. /sofa-v22-06-has-been-released; ; SOFA – SOFA v22.06 has been released!. /sofa-v22-12-has-been-released; ; SOFA – SOFA v22.12 has been released!. /sofa-v23-06-has-been-released; ; SOFA – SOFA v23.06 has been released!. /sofa-v23-12-has-been-released; ; SOFA – SOFA v23.12 has been released!. /so,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/index-wcopy.html:8739,release,released,8739,index-wcopy.html,https://www.sofa-framework.org,https://www.sofa-framework.org/index-wcopy.html,1,['release'],['released']
Deployability,"tiffness &fine, Index indice);  add a matrix of a fine element to its englobing coarser matrix More...;  ; virtual void computeMechanicalMatricesByCondensation (ElementStiffness &K, ElementMass &M, const int elementIndice, int level);  ; void computeClassicalMechanicalMatrices (ElementStiffness &K, ElementMass &M, const Index elementIndice, int level);  ; void computeMaterialStiffness (MaterialStiffness &m, double youngModulus, double poissonRatio);  compute the hookean material matrix More...;  ;  Protected Member Functions inherited from sofa::component::solidmechanics::fem::elastic::HexahedronFEMForceFieldAndMass< DataTypes >;  HexahedronFEMForceFieldAndMass ();  ;  Protected Member Functions inherited from sofa::core::behavior::Mass< DataTypes >;  Mass (MechanicalState< DataTypes > *mm=nullptr);  ;  ~Mass () override;  ;  Protected Member Functions inherited from sofa::core::behavior::ForceField< DataTypes >;  ForceField (MechanicalState< DataTypes > *mm=nullptr);  ;  ~ForceField () override;  ;  Protected Member Functions inherited from sofa::core::behavior::BaseForceField;  BaseForceField ();  ;  ~BaseForceField () override=default;  ;  Protected Member Functions inherited from sofa::core::behavior::StateAccessor;  StateAccessor ();  ;  ~StateAccessor () override=default;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data h",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1nonuniform_1_1_hexahedron_composite_f_e_m_force_field_and_mass.html:26673,update,update,26673,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1nonuniform_1_1_hexahedron_composite_f_e_m_force_field_and_mass.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1nonuniform_1_1_hexahedron_composite_f_e_m_force_field_and_mass.html,1,['update'],['update']
Deployability,"time. More...;  ; const BaseContext * getContext () const;  ; BaseContext * getContext ();  ; const BaseObject * getMaster () const;  ; BaseObject * getMaster ();  ; const VecSlaves & getSlaves () const;  ; BaseObject * getSlave (const std::string &name) const;  ; virtual void addSlave (BaseObject::SPtr s);  ; virtual void removeSlave (BaseObject::SPtr s);  ; virtual void handleEvent (Event *);  Handle an event. More...;  ; virtual void handleTopologyChange ();  ; virtual void handleTopologyChange (core::topology::Topology *t);  ; void parse (BaseObjectDescription *arg) override;  Parse the given description to assign values to this object's fields and potentially other parameters. More...;  ; virtual void bwdInit ();  Initialization method called at graph creation and modification, during bottom-up traversal. More...;  ; virtual void reinit ();  Update method called when variables used in precomputation are modified. More...;  ; void updateInternal ();  Update method called when variables (used to compute other internal variables) are modified. More...;  ; virtual void reset ();  Reset to initial state. More...;  ; virtual void cleanup ();  ;  Public Member Functions inherited from sofa::core::objectmodel::Base; virtual const BaseClass * getClass () const;  ; void addDeprecatedAttribute (lifecycle::DeprecatedData *attribute);  ; void addUpdateCallback (const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs);  ; void addOutputsToCallback (const std::string &name, std::initializer_list< BaseData * > outputs);  ; const std::string & getName () const;  Accessor to the object name. More...;  ; void setName (const std::string &n);  Set the name of this object. More...;  ; void setName (const std::string &n, int counter);  Set the name of this object, adding an integer counter. More...;  ; std::string getTypeName () const;  Get t",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1animationloop_1_1_constraint_animation_loop.html:7042,update,updateInternal,7042,api/master/sofa/html/classsofa_1_1component_1_1animationloop_1_1_constraint_animation_loop.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1animationloop_1_1_constraint_animation_loop.html,7,['update'],['updateInternal']
Deployability,"time. More...;  ; const BaseContext * getContext () const;  ; BaseContext * getContext ();  ; const BaseObject * getMaster () const;  ; BaseObject * getMaster ();  ; const VecSlaves & getSlaves () const;  ; BaseObject * getSlave (const std::string &name) const;  ; virtual void addSlave (BaseObject::SPtr s);  ; virtual void removeSlave (BaseObject::SPtr s);  ; virtual void handleEvent (Event *);  Handle an event. More...;  ; virtual void handleTopologyChange ();  ; virtual void handleTopologyChange (core::topology::Topology *t);  ; void parse (BaseObjectDescription *arg) override;  Parse the given description to assign values to this object's fields and potentially other parameters. More...;  ; virtual void bwdInit ();  Initialization method called at graph creation and modification, during bottom-up traversal. More...;  ; virtual void reinit ();  Update method called when variables used in precomputation are modified. More...;  ; void updateInternal ();  Update method called when variables (used to compute other internal variables) are modified. More...;  ; virtual void storeResetState ();  Save the initial state for later uses in reset() More...;  ; virtual void cleanup ();  ;  Public Member Functions inherited from sofa::core::objectmodel::Base; virtual const BaseClass * getClass () const;  ; void addDeprecatedAttribute (lifecycle::DeprecatedData *attribute);  ; void addUpdateCallback (const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs);  ; void addOutputsToCallback (const std::string &name, std::initializer_list< BaseData * > outputs);  ; const std::string & getName () const;  Accessor to the object name. More...;  ; void setName (const std::string &n);  Set the name of this object. More...;  ; void setName (const std::string &n, int counter);  Set the name of this object, adding an integer counter. More...;  ; std::",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_collision_pipeline.html:4985,update,updateInternal,4985,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_collision_pipeline.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_collision_pipeline.html,6,['update'],['updateInternal']
Deployability,"time. More...;  ; const BaseContext * getContext () const;  ; BaseContext * getContext ();  ; const BaseObject * getMaster () const;  ; BaseObject * getMaster ();  ; const VecSlaves & getSlaves () const;  ; BaseObject * getSlave (const std::string &name) const;  ; virtual void addSlave (BaseObject::SPtr s);  ; virtual void removeSlave (BaseObject::SPtr s);  ; virtual void handleEvent (Event *);  Handle an event. More...;  ; virtual void handleTopologyChange ();  ; virtual void handleTopologyChange (core::topology::Topology *t);  ; void parse (BaseObjectDescription *arg) override;  Parse the given description to assign values to this object's fields and potentially other parameters. More...;  ; virtual void bwdInit ();  Initialization method called at graph creation and modification, during bottom-up traversal. More...;  ; virtual void reinit ();  Update method called when variables used in precomputation are modified. More...;  ; void updateInternal ();  Update method called when variables (used to compute other internal variables) are modified. More...;  ; virtual void storeResetState ();  Save the initial state for later uses in reset() More...;  ; virtual void reset ();  Reset to initial state. More...;  ; virtual void cleanup ();  ;  Public Member Functions inherited from sofa::core::objectmodel::Base; virtual const BaseClass * getClass () const;  ; void addDeprecatedAttribute (lifecycle::DeprecatedData *attribute);  ; void addUpdateCallback (const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs);  ; void addOutputsToCallback (const std::string &name, std::initializer_list< BaseData * > outputs);  ; const std::string & getName () const;  Accessor to the object name. More...;  ; void setName (const std::string &n);  Set the name of this object. More...;  ; void setName (const std::string &n, int counter);  Set the name ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_brute_force_detection.html:2623,update,updateInternal,2623,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_brute_force_detection.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_brute_force_detection.html,135,['update'],['updateInternal']
Deployability,"time. More...;  ; const BaseContext * getContext () const;  ; BaseContext * getContext ();  ; const BaseObject * getMaster () const;  ; BaseObject * getMaster ();  ; const VecSlaves & getSlaves () const;  ; BaseObject * getSlave (const std::string &name) const;  ; virtual void addSlave (BaseObject::SPtr s);  ; virtual void removeSlave (BaseObject::SPtr s);  ; virtual void handleEvent (Event *);  Handle an event. More...;  ; virtual void handleTopologyChange ();  ; virtual void handleTopologyChange (core::topology::Topology *t);  ; void parse (BaseObjectDescription *arg) override;  Parse the given description to assign values to this object's fields and potentially other parameters. More...;  ; virtual void bwdInit ();  Initialization method called at graph creation and modification, during bottom-up traversal. More...;  ; virtual void reinit ();  Update method called when variables used in precomputation are modified. More...;  ; void updateInternal ();  Update method called when variables (used to compute other internal variables) are modified. More...;  ; virtual void storeResetState ();  Save the initial state for later uses in reset() More...;  ; virtual void reset ();  Reset to initial state. More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::Base; virtual const BaseClass * getClass () const;  ; void addDeprecatedAttribute (lifecycle::DeprecatedData *attribute);  ; void addUpdateCallback (const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs);  ; void addOutputsToCallback (const std::string &name, std::initializer_list< BaseData * > outputs);  ; const std::string & getName () const;  Accessor to the object name. More...;  ; void setName (const std::string &n);  Set the name of this object. More...;  ; void setName (const std::string &n, int counter);  Set the name of this object, adding an in",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1backward_1_1_euler_implicit_solver.html:8051,update,updateInternal,8051,api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1backward_1_1_euler_implicit_solver.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1backward_1_1_euler_implicit_solver.html,6,['update'],['updateInternal']
Deployability,"time. More...;  ; const BaseContext * getContext () const;  ; BaseContext * getContext ();  ; const BaseObject * getMaster () const;  ; BaseObject * getMaster ();  ; const VecSlaves & getSlaves () const;  ; BaseObject * getSlave (const std::string &name) const;  ; virtual void addSlave (BaseObject::SPtr s);  ; virtual void removeSlave (BaseObject::SPtr s);  ; virtual void handleEvent (Event *);  Handle an event. More...;  ; virtual void handleTopologyChange ();  ; virtual void handleTopologyChange (core::topology::Topology *t);  ; void parse (BaseObjectDescription *arg) override;  Parse the given description to assign values to this object's fields and potentially other parameters. More...;  ; virtual void bwdInit ();  Initialization method called at graph creation and modification, during bottom-up traversal. More...;  ; virtual void reinit ();  Update method called when variables used in precomputation are modified. More...;  ; void updateInternal ();  Update method called when variables (used to compute other internal variables) are modified. More...;  ; virtual void storeResetState ();  Save the initial state for later uses in reset() More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::Base; virtual const BaseClass * getClass () const;  ; void addDeprecatedAttribute (lifecycle::DeprecatedData *attribute);  ; void addUpdateCallback (const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs);  ; void addOutputsToCallback (const std::string &name, std::initializer_list< BaseData * > outputs);  ; const std::string & getName () const;  Accessor to the object name. More...;  ; void setName (const std::string &n);  Set the name of this object. More...;  ; void setName (const std::string &n, int counter);  Set the name of this object, adding an integer counter. More...;  ; std::string getTypeName () const;",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1contact_1_1_collision_response.html:6696,update,updateInternal,6696,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1contact_1_1_collision_response.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1contact_1_1_collision_response.html,2,['update'],['updateInternal']
Deployability,"ting;  ; MOUSE_BUTTON button;  . Public Member Functions;  QAddSutureOperation ();  ; double getStiffness () const override;  ; double getDamping () const override;  ; void configure (common::PickHandler *picker, common::MOUSE_BUTTON b) override;  ;  Public Member Functions inherited from sofa::gui::common::AddSutureOperation;  AddSutureOperation ();  ;  ~AddSutureOperation () override;  ; void setStiffness (double f);  ; void setDamping (double f);  ;  Public Member Functions inherited from sofa::gui::common::Operation;  Operation (sofa::component::setting::MouseButtonSetting::SPtr s=nullptr);  ; virtual ~Operation ();  ; virtual void configure (PickHandler *picker, sofa::component::setting::MouseButtonSetting *s);  ; virtual void start ();  ; virtual void execution ();  This function is called each time the mouse is clicked. More...;  ; virtual void end ();  ; virtual void endOperation ();  This function is called after each mouse click. More...;  ; virtual void wait ();  This function is called when shift key is released. More...;  ; virtual void setSetting (sofa::component::setting::MouseButtonSetting *s);  ; virtual sofa::gui::component::performer::InteractionPerformer * createPerformer ();  ; MOUSE_BUTTON getMouseButton () const;  ; std::string getId ();  . Additional Inherited Members;  Public Attributes inherited from sofa::gui::common::Operation; sofa::gui::component::performer::InteractionPerformer * performer;  ;  Static Public Member Functions inherited from sofa::gui::common::AddSutureOperation; static std::string getDescription ();  ;  Static Public Member Functions inherited from sofa::gui::common::Operation; static MOUSE_BUTTON GetMouseId (unsigned int i);  ;  Protected Member Functions inherited from sofa::gui::common::AddSutureOperation; virtual std::string defaultPerformerType () override;  ; void configurePerformer (sofa::gui::component::performer::InteractionPerformer *p) override;  . Attribute details. ◆ damping. QLineEdit* sofa::gui::qt::QAddSu",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_add_suture_operation.html:1738,release,released,1738,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_add_suture_operation.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_add_suture_operation.html,1,['release'],['released']
Deployability,"tingClass;  ; int ConstraintAttachButtonSettingClass;  ; int FixPickedParticleButtonSettingClass;  . Function Documentation. ◆ getModuleName(). const char * sofa::gui::component::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::gui::component::getModuleVersion ; (; ). ◆ init(). SOFA_GUI_COMPONENT_API void sofa::gui::component::init ; (; ). ◆ initExternalModule(). void sofa::gui::component::initExternalModule ; (; ). Variable Documentation. ◆ AddFrameButtonSettingClass. int sofa::gui::component::AddFrameButtonSettingClass. Initial value:= core::RegisterObject(""Add a frame to a skinned model""); .add< AddFrameButtonSetting >(); .addAlias(""AddFrameButton""). ◆ AddRecordedCameraButtonSettingClass. int sofa::gui::component::AddRecordedCameraButtonSettingClass. Initial value:= core::RegisterObject(""Save Camera's View Point Button configuration""); .add< AddRecordedCameraButtonSetting >(); .addAlias(""AddRecordedCameraButton""). ◆ AttachBodyButtonSettingClass. int sofa::gui::component::AttachBodyButtonSettingClass. Initial value:= core::RegisterObject(""Attach Body Button configuration""); .add< AttachBodyButtonSetting >(); .addAlias(""AttachBodyButton""). ◆ ConstraintAttachButtonSettingClass. int sofa::gui::component::ConstraintAttachButtonSettingClass. Initial value:= core::RegisterObject(""Attach an object to the mouse using lagrangian multiplier""); .add< ConstraintAttachButtonSetting >(). ◆ FixPickedParticleButtonSettingClass. int sofa::gui::component::FixPickedParticleButtonSettingClass. Initial value:= core::RegisterObject(""Fix a picked particle in space""); .add< FixPickedParticleButtonSetting >(); .addAlias(""FixPickedParticleButton""). ◆ StartNavigationButtonSettingClass. int sofa::gui::component::StartNavigationButtonSettingClass. Initial value:= core::RegisterObject(""Start Navigation Button configuration""); .add< StartNavigationButtonSetting >(); .addAlias(""StartNavigationButton""). sofaguicomponent; Generated on Mon Nov 11 2024 03:19:19 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component.html:1950,configurat,configuration,1950,api/master/sofa/html/namespacesofa_1_1gui_1_1component.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1component.html,2,['configurat'],['configuration']
Deployability,"tion *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(DataEngine, core::objectmodel::BaseObject)sofa::core::DataEngine; SOFA_CLASS(SOFA_TEMPLATE(TransformPosition, DataTypes), core::DataEngine)sofa::component::engine::transform::TransformPosition< DataTypes >; sofa::core::DataEngine::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; TransformationMethod enum namesofa::component::engine::transform::TransformPosition< DataTypes >; transformationMethodsofa::component::engine::transform::TransformPosition< DataTypes >protected; TransformPosition()sofa::component::engine::transform::TransformPosition< DataTypes >protected; TRANSLATION enum valuesofa::component::engine::transform::TransformPosition< DataTypes >; update() finalsofa::core::DataEnginevirtual; updateAllInputsIfDirty()sofa::core::DataTrackerDDGNode; updateIfDirty() constsofa::core::objectmodel::DDGNode; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; Vec16 typedefsofa::component::engine::transform::TransformPosition< DataTypes >; Vec4 typedefsofa::component::engine::transform::TransformPosition< DataTypes >; VecCoord typedefsofa::component::engine::transform::TransformPosition< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~DataEngine() overridesofa::core::DataEngineprotected; ~DDGNode()sofa::core::objectmo",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_transform_position-members.html:15289,update,updateAllInputsIfDirty,15289,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_transform_position-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_transform_position-members.html,1,['update'],['updateAllInputsIfDirty']
Deployability,"tion *=nullptr)sofa::core::objectmodel::Baseinlinestatic; showDistanceMapsofa::component::engine::analyze::Distances< DataTypes >; showGoalDistanceMapsofa::component::engine::analyze::Distances< DataTypes >; showGradientMapsofa::component::engine::analyze::Distances< DataTypes >; showGradientsScaleFactorsofa::component::engine::analyze::Distances< DataTypes >; showMapIndexsofa::component::engine::analyze::Distances< DataTypes >; showTextScaleFactorsofa::component::engine::analyze::Distances< DataTypes >; SOFA_ABSTRACT_CLASS(DataEngine, core::objectmodel::BaseObject)sofa::core::DataEngine; SOFA_CLASS(SOFA_TEMPLATE(Distances, DataTypes), core::DataEngine)sofa::component::engine::analyze::Distances< DataTypes >; sofa::core::DataEngine::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; update() finalsofa::core::DataEnginevirtual; updateAllInputsIfDirty()sofa::core::DataTrackerDDGNode; updateIfDirty() constsofa::core::objectmodel::DDGNode; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecCoord typedefsofa::component::engine::analyze::Distances< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VecVecCoord typedefsofa::component::engine::analyze::Distances< DataTypes >; VVD typedefsofa::component::engine::analyze::Distances< DataTypes >; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; zonesFramePairsofa::component::engine::analyze::Distances< DataTypes >; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseOb",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1analyze_1_1_distances-members.html:14930,update,update,14930,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1analyze_1_1_distances-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1analyze_1_1_distances-members.html,1,['update'],['update']
Deployability,"tion *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  . Protected Member Functions; void preAssembleSystem (const core::MechanicalParams *) override;  ; virtual void associateLocalMatrixToComponents (const core::MechanicalParams *);  ; virtual void allocateSystem ();  ; virtual void resizeVectors (sofa::Size n);  Set the size of RHS and solution to n. More...;  ; void copyLocalVectorToGlobalVector (core::MultiVecDerivId v, TVector *globalVector);  ; SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API void copyLocalVectorToGlobalVector (core::MultiVecDerivId v, GraphScatteredVector *globalVector);  ; void copyLocalVectorToGlobalVector (core::MultiVecDerivId v, GraphScatteredVector *globalVector);  ;  Protected Member Functions inherited from sofa::core::behavior::BaseMatrixLinearSystem;  BaseMatrixLinearSystem ();  ; virtual void assembleSystem (const core::MechanicalParams *);  ; virtual void postAssembleSystem (const core::MechanicalParams *);  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ()",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsystem_1_1_typed_matrix_linear_system.html:14689,update,update,14689,api/master/sofa/html/classsofa_1_1component_1_1linearsystem_1_1_typed_matrix_linear_system.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsystem_1_1_typed_matrix_linear_system.html,1,['update'],['update']
Deployability,"tion and velocity through all mappings. More...;  ; void propagateXAndResetF (core::MultiVecCoordId x, core::MultiVecDerivId f);  Propagate the given position through all mappings and reset the current force delta. More...;  ; void projectPosition (core::MultiVecCoordId x, SReal time=0.0);  Apply projective constraints to the given position vector. More...;  ; void projectVelocity (core::MultiVecDerivId v, SReal time=0.0);  Apply projective constraints to the given velocity vector. More...;  ; void projectResponse (core::MultiVecDerivId dx, double **W=nullptr);  Apply projective constraints to the given vector. More...;  ; void projectPositionAndVelocity (core::MultiVecCoordId x, core::MultiVecDerivId v, double time=0.0);  Apply projective constraints to the given position and velocity vectors. More...;  ; void addMdx (core::MultiVecDerivId res, core::MultiVecDerivId dx, SReal factor=1.0);  res += factor M.dx More...;  ; void integrateVelocity (core::MultiVecDerivId res, core::ConstMultiVecCoordId x, core::ConstMultiVecDerivId v, SReal dt);  res = x + v.dt More...;  ; void accFromF (core::MultiVecDerivId a, core::ConstMultiVecDerivId f);  ; void computeEnergy (SReal &kineticEnergy, SReal &potentialEnergy);  Compute Energy. More...;  ; void computeForce (core::MultiVecDerivId result, bool clear=true, bool accumulate=true);  Compute the current force (given the latest propagated position and velocity) More...;  ; void computeDf (core::MultiVecDerivId df, bool clear=true, bool accumulate=true);  Compute the current force delta (given the latest propagated displacement) More...;  ; void computeDfV (core::MultiVecDerivId df, bool clear=true, bool accumulate=true);  Compute the current force delta (given the latest propagated velocity) More...;  ; void addMBKdx (core::MultiVecDerivId df, SReal m, SReal b, SReal k, bool clear=true, bool accumulate=true);  accumulate $ df += (m M + b B + k K) dx $ (given the latest propagated displacement) More...;  ; void addMBKv (core::Mu",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_mechanical_operations.html:2815,integrat,integrateVelocity,2815,api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_mechanical_operations.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_mechanical_operations.html,1,['integrat'],['integrateVelocity']
Deployability,"tion are modified. More...;  ; void doUpdate () override;  Where you put your engine's impl. More...;  ; void draw (const core::visual::VisualParams *vparams) override;  Render internal data of this object, for debugging purposes. More...;  ;  Public Member Functions inherited from sofa::core::DataEngine;  SOFA_ABSTRACT_CLASS (DataEngine, core::objectmodel::BaseObject);  ; void update () final;  ; void addInput (sofa::core::objectmodel::BaseData *data);  Add a new input to this engine. More...;  ; void addOutput (objectmodel::BaseData *n);  Add a new output to this engine. More...;  ;  Public Member Functions inherited from sofa::core::DataTrackerDDGNode;  DataTrackerDDGNode ();  ; void addInputs (std::initializer_list< sofa::core::objectmodel::BaseData * > datas);  Create a DataCallback object associated with multiple Data fields. More...;  ; void addOutputs (std::initializer_list< sofa::core::objectmodel::BaseData * > datas);  ; virtual void cleanDirty (const core::ExecParams *params=nullptr);  ; void updateAllInputsIfDirty ();  ;  Public Member Functions inherited from sofa::core::objectmodel::DDGNode;  DDGNode ();  Constructor. More...;  ; virtual ~DDGNode ();  Destructor. Automatically remove remaining links. More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void delInput (DDGNode *n);  Remove an input from this node. More...;  ; void addOutput (DDGNode *n);  Add a new output to this node. More...;  ; void delOutput (DDGNode *n);  Remove an output from this node. More...;  ; const DDGLinkContainer & getInputs ();  Get the list of inputs for this DDGNode. More...;  ; const DDGLinkContainer & getOutputs ();  Get the list of outputs for this DDGNode. More...;  ; bool isDirty () const;  Returns true if the DDGNode needs to be updated. More...;  ; virtual void setDirtyValue ();  Indicate the value needs to be updated. More...;  ; virtual void setDirtyOutputs ();  Indicate the outputs needs to be updated. This method must be called af",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_transform_position.html:4570,update,updateAllInputsIfDirty,4570,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_transform_position.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_transform_position.html,9,['update'],['updateAllInputsIfDirty']
Deployability,"tion easy in the GUI. . Static Public Attributes; static Simulation::SPtr theSimulation { nullptr };  . Public Member Functions;  Simulation ();  ; virtual ~Simulation ();  ;  Simulation (const Simulation &n)=delete;  ; Simulation & operator= (const Simulation &n)=delete;  ; virtual void print (Node *root)=delete;  Print all object in the graph. More...;  ; virtual void init (Node *root)=delete;  Initialize the objects. More...;  ; virtual void initNode (Node *node)=delete;  Init a node without changing the context of the simulation. More...;  ; virtual void animate (Node *root, SReal dt=0.0)=delete;  Execute one timestep. If dt is 0, the dt parameter in the graph will be used. More...;  ; virtual void updateVisual (Node *root)=delete;  Update the Visual Models: triggers the Mappings. More...;  ; virtual void reset (Node *root)=delete;  Reset to initial state. More...;  ; virtual void initTextures (Node *root)=delete;  Initialize the textures. More...;  ; virtual void updateContext (Node *root)=delete;  Update contexts. Required before drawing the scene if root flags are modified. More...;  ; virtual void updateVisualContext (Node *root)=delete;  Update contexts. Required before drawing the scene if root flags are modified. More...;  ; virtual void computeBBox (Node *root, SReal *minBBox, SReal *maxBBox, bool init=true)=delete;  ; virtual void computeTotalBBox (Node *root, SReal *minBBox, SReal *maxBBox)=delete;  ; virtual void draw (sofa::core::visual::VisualParams *vparams, Node *root)=delete;  Render the scene. More...;  ; virtual void exportOBJ (Node *root, const char *filename, bool exportMTL=true)=delete;  Export a scene to an OBJ 3D Scene. More...;  ; virtual void exportXML (Node *root, const char *fileName=nullptr)=delete;  Print all object in the graph in XML format. More...;  ; virtual void exportGraph (Node *root, const char *filename=nullptr)=delete;  Print all objects in the graph in the given file (format is given by the filename extension) More...;  ;",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_simulation.html:1576,update,updateContext,1576,api/master/sofa/html/classsofa_1_1simulation_1_1_simulation.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_simulation.html,1,['update'],['updateContext']
Deployability,"tion method called at graph creation and modification, during top-down traversal. More...;  ; void reinit () override;  Update method called when variables used in precomputation are modified. More...;  ; void fwdDraw (core::visual::VisualParams *) override;  Called before objects in the current branch are displayed. More...;  ; void bwdDraw (core::visual::VisualParams *) override;  Called after objects in the current branch are displayed. More...;  ;  Public Member Functions inherited from sofa::core::visual::VisualModel;  SOFA_ABSTRACT_CLASS (VisualModel, objectmodel::BaseObject);  ; virtual void drawVisual (const VisualParams *) final;  Display the VisualModel object. More...;  ; void initVisual (const VisualParams *);  Initialize the textures, or other graphical resources. More...;  ; virtual void initVisual () final;  ; void updateVisual (const VisualParams *);  used to update the model if necessary. More...;  ; virtual void updateVisual () final;  ; virtual void clearVisual ();  clear some graphical resources (generally called before the deleteVisitor). More...;  ; virtual void drawTransparent (const VisualParams *);  Display transparent surfaces. More...;  ; virtual void drawShadow (const VisualParams *vparams);  Display shadow-casting surfaces. More...;  ; virtual void parallelUpdateVisual ();  used to update the model if necessary. More...;  ; virtual bool addBBox (SReal *, SReal *);  used to add the bounding-box of this visual model to the given bounding box in order to compute the scene bounding box or cull hidden objects. More...;  ; virtual void applyTranslation (const SReal, const SReal, const SReal);  ; virtual void applyRotation (const SReal, const SReal, const SReal);  ; virtual void applyRotation (const type::Quat< SReal >);  ; virtual void applyScale (const SReal, const SReal, const SReal);  ; virtual void exportOBJ (std::string, std::ostream *, std::ostream *, sofa::Index &, sofa::Index &, sofa::Index &, int &);  Append this mesh to an OBJ format ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_clip_plane.html:3799,update,updateVisual,3799,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_clip_plane.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_clip_plane.html,1,['update'],['updateVisual']
Deployability,"tion otherwise false. . ReturnsCoord of intersection point, 0 if no intersection. . ◆ computeEdgeSegmentIntersection() [2/2]. template<class DataTypes > . bool sofa::component::topology::container::dynamic::EdgeSetGeometryAlgorithms< DataTypes >::computeEdgeSegmentIntersection ; (; EdgeID ; edgeID, . const type::Vec3 & ; a, . const type::Vec3 & ; b, . Real & ; baryCoef . ). ◆ computeLocalFrameEdgeWeights(). template<class DataTypes > . void sofa::component::topology::container::dynamic::EdgeSetGeometryAlgorithms< DataTypes >::computeLocalFrameEdgeWeights ; (; type::vector< EdgeID > & ; numEdges, . type::vector< Edge > & ; edges, . type::vector< Vec3d > & ; weights . ); const. Computes weights allowing to compute the deformation gradient (deformed basis) at each vertex during the simulation, for a volumetric object. For each vertex, computes the weights associated with each edge around the vertex, so that the weighted sum of the edges corresponds to the identity. The current configuration is taken as reference. During the simulation, the weights and edge indices can be used to compute rotated and deformed bases for each vertex; The output vectors contain the concatenation of the values for each vertex. The weights are computed using a pseudo-inverse of the edge matrix: w_i = Vt_i.(V.Vt)^{-1}.Id3 Parameters. numEdgesnumber of edges attached to a vertex ; edgesattached to the vertices ; weightsassociated with the edges. Each Vec3d represents the contribution of the associated edge to x,y and z of the deformed basis. . ◆ computePointProjectionOnEdge(). template<class DataTypes > . auto sofa::component::topology::container::dynamic::EdgeSetGeometryAlgorithms< DataTypes >::computePointProjectionOnEdge ; (; const EdgeID ; i, . sofa::type::Vec< 3, Real > ; coord_x, . bool & ; intersected . ). Compute the projection coordinate of a point C on the edge i. Using compute2EdgesIntersection(). ; Parameters. iedgeID on which point is projected. ; coord_xcoordinate of point to proje",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_edge_set_geometry_algorithms.html:27061,configurat,configuration,27061,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_edge_set_geometry_algorithms.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_edge_set_geometry_algorithms.html,1,['configurat'],['configuration']
Deployability,"tion(core::MultiVecDerivId v)sofa::component::linearsystem::TypedMatrixLinearSystem< TMatrix, TVector >; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(BaseMatrixLinearSystem, core::objectmodel::BaseObject)sofa::core::behavior::BaseMatrixLinearSystem; SOFA_CLASS(SOFA_TEMPLATE2(ConstantSparsityPatternSystem, TMatrix, TVector), SOFA_TEMPLATE2(MatrixLinearSystem, TMatrix, TVector))sofa::component::linearsystem::ConstantSparsityPatternSystem< TMatrix, TVector >; sofa::component::linearsystem::MatrixLinearSystem::SOFA_CLASS(SOFA_TEMPLATE2(MatrixLinearSystem, TMatrix, TVector), SOFA_TEMPLATE2(TypedMatrixLinearSystem, TMatrix, TVector))sofa::component::linearsystem::MatrixLinearSystem< TMatrix, TVector >; sofa::component::linearsystem::TypedMatrixLinearSystem::SOFA_CLASS(SOFA_TEMPLATE2(TypedMatrixLinearSystem, TMatrix, TVector), sofa::core::behavior::BaseMatrixLinearSystem)sofa::component::linearsystem::TypedMatrixLinearSystem< TMatrix, TVector >; sofa::core::behavior::BaseMatrixLinearSystem::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; Vector typedefsofa::component::linearsystem::ConstantSparsityPatternSystem< TMatrix, TVector >; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsystem_1_1_constant_sparsity_pattern_system-members.html:24572,update,updateInternal,24572,api/master/sofa/html/classsofa_1_1component_1_1linearsystem_1_1_constant_sparsity_pattern_system-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsystem_1_1_constant_sparsity_pattern_system-members.html,2,['update'],"['updateInternal', 'updateLinks']"
Deployability,tion. /3; ; SOFA - Topic: [SOLVED] viewAll() function. SOFA - Topic: [SOLVED] viewAll() function. /view-port-via-hdmi-port; . /feed; ; [SOLVED] View Port via HDMI port – SOFA. /page; . /3; ; SOFA - Topic: [SOLVED] View Port via HDMI port. /5; ; SOFA - Topic: [SOLVED] View Port via HDMI port. SOFA - Topic: [SOLVED] View Port via HDMI port. /visualisation-of-2d-scenes-in-sofa; . /feed; ; [SOLVED] Visualisation of 2D scenes in SOFA – SOFA. SOFA - Topic: [SOLVED] Visualisation of 2D scenes in SOFA. /visualization-bug-with-a-softrobots-plugin-example; . /feed; ; [SOLVED] Visualization bug with a SoftRobots plugin example – SOFA. SOFA - Topic: [SOLVED] Visualization bug with a SoftRobots plugin example. /visualizing-diagonalcompliance-compliance-plugin; ; SOFA - Topic: [SOLVED] Visualizing DiagonalCompliance (Compliance Plugin). /visualizing-the-difference-between-two-models-as-a-hot-plot; ; SOFA - Topic: [SOLVED] visualizing the difference between two models as a hot plot. /visual-not-updated-using-python; . /feed; ; Visual not updated using python – SOFA. SOFA - Topic: Visual not updated using python. /visual-not-updating-when-using-with-a-glfw-window-imgui; ; SOFA - Topic: Visual not updating when using with a GLFW window (ImGUI). /visual-problem-tutorial-sofa-v-18-06; ; SOFA - Topic: [SOLVED] Visual Problem Tutorial SOFA v.18.06. /visual-studio-cant-work-with-more-than-260-character-length-variables; ; SOFA - Topic: visual studio cant work with more than 260 character-length variables. /volume-of-element; ; SOFA - Topic: Volume of element. /volumetric-mesh-generation-error; ; SOFA - Topic: [SOLVED] Volumetric Mesh Generation Error. /volumetric-mesh-generation-of-woven-t-yarn; . /page; . /2; ; SOFA - Topic: [SOLVED] Volumetric Mesh Generation of Woven T-yarn. SOFA - Topic: [SOLVED] Volumetric Mesh Generation of Woven T-yarn. /voxelization-of-meshes; ; SOFA - Topic: Voxelization of meshes. /vs-code-sofaruntime-importplugin-cannot-be-resolved; ; SOFA - Topic: [SOLVED] VS,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/index-wcopy.html:417751,update,updated-using-python,417751,index-wcopy.html,https://www.sofa-framework.org,https://www.sofa-framework.org/index-wcopy.html,1,['update'],['updated-using-python']
Deployability,"tionForceField(). template<class DataTypes > . sofa::core::behavior::PairInteractionForceField< DataTypes >::PairInteractionForceField ; (; MechanicalState< DataTypes > * ; mm1 = nullptr, . MechanicalState< DataTypes > * ; mm2 = nullptr . ). explicitprotected . ◆ ~PairInteractionForceField(). template<class DataTypes > . sofa::core::behavior::PairInteractionForceField< DataTypes >::~PairInteractionForceField. overrideprotected . Function details. ◆ addDForce() [1/2]. template<class TDataTypes > . virtual void sofa::core::behavior::PairInteractionForceField< TDataTypes >::addDForce ; (; const MechanicalParams * ; mparams, . DataVecDeriv & ; df1, . DataVecDeriv & ; df2, . const DataVecDeriv & ; dx1, . const DataVecDeriv & ; dx2 . ). pure virtual . Compute the force derivative given a small displacement from the position and velocity used in the previous call to addForce().; The derivative should be directly derived from the computations done by addForce. Any forces neglected in addDForce will be integrated explicitly (i.e. using its value at the beginning of the timestep).; If the ForceField can be represented as a matrix, this method computes $ df += kFactor K dx + bFactor B dx $; This method must be implemented by the component, and is usually called by the generic PairInteractionForceField::addDForce() method.; To support old components that implement the deprecated addForce method without scalar coefficients, it defaults to using a temporaty vector to compute $ K dx $ and then manually scaling all values by kFactor. ; Implemented in sofa::component::collision::response::contact::PenalityContactForceField< DataTypes >, sofa::component::solidmechanics::spring::VectorSpringForceField< DataTypes >, sofa::component::solidmechanics::spring::RegularGridSpringForceField< DataTypes >, sofa::component::solidmechanics::spring::PolynomialSpringsForceField< DataTypes >, sofa::component::solidmechanics::spring::JointSpringForceField< DataTypes >, sofa::component::solidmechanics",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_pair_interaction_force_field.html:20890,integrat,integrated,20890,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_pair_interaction_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_pair_interaction_force_field.html,1,['integrat'],['integrated']
Deployability,"tionSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setInstanciationSourceFilePos(const int)sofa::core::objectmodel::Base; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(VisualModel, objectmodel::BaseObject)sofa::core::visual::VisualModel; SOFA_CLASS(VisualManager, VisualModel)sofa::core::visual::VisualManager; sofa::core::visual::VisualModel::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateVisual(const VisualParams *)sofa::core::visual::VisualModel; updateVisual() finalsofa::core::visual::VisualModelvirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VisualModel()sofa::core::visual::VisualModelprotected; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~VisualManager() overridesofa::core::visual::VisualManagerinlineprotected; ~VisualModel() overridesofa::core::visual::VisualModelinlineprotected.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1visual_1_1_visual_manager-members.html:11262,update,updateInternal,11262,api/master/sofa/html/classsofa_1_1core_1_1visual_1_1_visual_manager-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1visual_1_1_visual_manager-members.html,4,['update'],"['updateInternal', 'updateLinks', 'updateVisual']"
Deployability,tioncontroller; . /feed; ; #communicationcontroller – SOFA. SOFA - Topic Tag: #communicationcontroller. /compile; . /feed; ; compile – SOFA. SOFA - Topic Tag: compile. /compliance; . /feed; ; compliance – SOFA. SOFA - Topic Tag: compliance. /compliant; . /feed; ; Compliant – SOFA. SOFA - Topic Tag: Compliant. /complie-softrobots; . /feed; ; Complie SoftRobots – SOFA. SOFA - Topic Tag: Complie SoftRobots. /component; . /feed; ; component – SOFA. SOFA - Topic Tag: component. /component-declaration; . /feed; ; component declaration – SOFA. SOFA - Topic Tag: component declaration. /components; . /feed; ; Components – SOFA. SOFA - Topic Tag: Components. /computation-time; . /feed; ; Computation Time – SOFA. SOFA - Topic Tag: Computation Time. /comp-vtu-precomputedconstraintcorrection-dentistry-tongue; . /feed; ; .comp .vtu PrecomputedConstraintCorrection dentistry tongue – SOFA. SOFA - Topic Tag: .comp .vtu PrecomputedConstraintCorrection dentistry tongue. /configurations; . /feed; ; configurations – SOFA. SOFA - Topic Tag: configurations. /connect; . /feed; ; connect – SOFA. SOFA - Topic Tag: connect. /connect-sofa; . /feed; ; Connect SOFA – SOFA. SOFA - Topic Tag: Connect SOFA. /constraint; . /feed; ; constraint – SOFA. SOFA - Topic Tag: constraint. /constraint-forces; . /feed; ; Constraint Forces – SOFA. SOFA - Topic Tag: Constraint Forces. /constraintresolution-h; . /feed; ; ConstraintResolution.h – SOFA. SOFA - Topic Tag: ConstraintResolution.h. /constraints; . /feed; ; constraints – SOFA. SOFA - Topic Tag: constraints. /constraint-solver; . /feed; ; Constraint Solver – SOFA. SOFA - Topic Tag: Constraint Solver. /contact; . /feed; ; contact – SOFA. SOFA - Topic Tag: contact. /contact-force; . /feed; ; contact force – SOFA. SOFA - Topic Tag: contact force. /contactlistener; . /feed; ; contactlistener – SOFA. SOFA - Topic Tag: contactlistener. /contain; . /feed; ; contain – SOFA. SOFA - Topic Tag: contain. /continuum-robots-beam-adaptater-constraints; . /feed; ; conti,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/index-wcopy.html:436459,configurat,configurations,436459,index-wcopy.html,https://www.sofa-framework.org,https://www.sofa-framework.org/index-wcopy.html,1,['configurat'],['configurations']
Deployability,tions!. /sofa-technologies-exhibited-amd-learning-day-in-paris; ; SOFA – SOFA technologies exhibited @ AMD Learning Day in Paris. /sofa-training-discover-and-learn-sofa-at-ismar2017; ; SOFA – SOFA training: discover and learn SOFA at ISMAR 2017. /sofa-v16-12-has-been-released; ; SOFA – SOFA v16.12 has been released!. /sofa-v17-06-has-been-released; ; SOFA – SOFA v17.06 has been released!. /sofa-v17-12-has-been-released; ; SOFA – SOFA v17.12 has been released!. /sofa-v18-06-has-been-released; ; SOFA – SOFA v18.06 has been released!. /sofa-v18-12-has-been-released; ; SOFA – SOFA v18.12 has been released!. /sofa-v19-06-has-been-released; ; SOFA – SOFA v19.06 has been released!. /sofa-v19-12-has-been-released; ; SOFA – SOFA v19.12 has been released!. /sofa-v20-06-has-been-released; ; SOFA – SOFA v20.06 has been released!. /sofa-v20-12-has-been-released; ; SOFA – SOFA v20.12 has been released!. /sofa-v21-06-has-been-released; ; SOFA – SOFA v21.06 has been released!. /sofa-v21-12-has-been-released; ; SOFA – SOFA v21.12 has been released!. /sofa-v22-06-has-been-released; ; SOFA – SOFA v22.06 has been released!. /sofa-v22-12-has-been-released; ; SOFA – SOFA v22.12 has been released!. /sofa-v23-06-has-been-released; ; SOFA – SOFA v23.06 has been released!. /sofa-v23-12-has-been-released; ; SOFA – SOFA v23.12 has been released!. /sofa-v24-06-has-been-released; ; SOFA – SOFA v24.06 has been released!. /sofa-week-2018-experience; ; SOFA – SOFA Week 2018 Experience. /sofa-week-2021-register-now; ; SOFA – SOFA Week 2021: register now!. /sofa-week-2022-register-now; ; SOFA – SOFA Week 2022: register now!. /sofa-week-2023-register-now; ; SOFA – SOFA Week 2023: register now!. /sofa-week-2024-registration-is-open; ; SOFA – SOFA Week 2024: registration is open!. /soft-robotics-summer-school-in-lille; ; SOFA – Soft-Robotics Summer School in Lille. /softrobots-inverse-plugin-open-source-release; ; SOFA – SoftRobots.Inverse plugin open-source release!. /spin-offs-from-sofa-against-covid-1,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/index-wcopy.html:9396,release,released,9396,index-wcopy.html,https://www.sofa-framework.org,https://www.sofa-framework.org/index-wcopy.html,1,['release'],['released']
Deployability,"tityContactMapper< TCollisionModel, DataTypes >::cleanup. virtual . Implements sofa::component::collision::response::mapper::BaseContactMapper< DataTypes >. ◆ createMapping(). template<class TCollisionModel , class DataTypes > . IdentityContactMapper< TCollisionModel, DataTypes >::MMechanicalState * sofa::component::collision::response::mapper::IdentityContactMapper< TCollisionModel, DataTypes >::createMapping ; (; const char * ; name = ""contactPoints""). virtual . Implements sofa::component::collision::response::mapper::BaseContactMapper< DataTypes >. ◆ resize(). template<class TCollisionModel , class DataTypes > . void sofa::component::collision::response::mapper::IdentityContactMapper< TCollisionModel, DataTypes >::resize ; (; Size ; ). inlinevirtual . Implements sofa::component::collision::response::mapper::BaseContactMapper< DataTypes >. ◆ setCollisionModel(). template<class TCollisionModel , class DataTypes > . void sofa::component::collision::response::mapper::IdentityContactMapper< TCollisionModel, DataTypes >::setCollisionModel ; (; MCollisionModel * ; model). inline . ◆ update(). template<class TCollisionModel , class DataTypes > . void sofa::component::collision::response::mapper::IdentityContactMapper< TCollisionModel, DataTypes >::update ; (; ). inlinevirtual . Implements sofa::component::collision::response::mapper::BaseContactMapper< DataTypes >. ◆ updateX0(). template<class TCollisionModel , class DataTypes > . void sofa::component::collision::response::mapper::IdentityContactMapper< TCollisionModel, DataTypes >::updateX0 ; (; ). inline . ◆ updateXfree(). template<class TCollisionModel , class DataTypes > . void sofa::component::collision::response::mapper::IdentityContactMapper< TCollisionModel, DataTypes >::updateXfree ; (; ). inlinevirtual . Implements sofa::component::collision::response::mapper::BaseContactMapper< DataTypes >. sofacomponentcollisionresponsemapperIdentityContactMapper; Generated on Mon Nov 11 2024 02:30:18 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1mapper_1_1_identity_contact_mapper.html:4263,update,update,4263,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1mapper_1_1_identity_contact_mapper.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1mapper_1_1_identity_contact_mapper.html,4,['update'],"['update', 'updateXfree']"
Deployability,"tly derived from the computations done by addForce. Any forces neglected in addDForce will be integrated explicitly (i.e. using its value at the beginning of the timestep).; If the ForceField can be represented as a matrix, this method computes $ df += K dx $; This method must be implemented by the component, and is usually called by the generic MixedInteractionForceField::addDForce() method. ; Implemented in sofa::component::mechanicalload::InteractionEllipsoidForceField< TDataTypes1, TDataTypes2 >. ◆ addDForce() [2/2]. template<class DataTypes1 , class DataTypes2 > . void sofa::core::behavior::MixedInteractionForceField< DataTypes1, DataTypes2 >::addDForce ; (; const MechanicalParams * ; mparams, . MultiVecDerivId ; dfId . ). overridevirtual . Compute the force derivative given a small displacement from the position and velocity used in the previous call to addForce().; The derivative should be directly derived from the computations done by addForce. Any forces neglected in addDForce will be integrated explicitly (i.e. using its value at the beginning of the timestep).; If the ForceField can be represented as a matrix, this method computes $ df += kFactor K dx + bFactor B dx $; This method retrieves the force and dx vector from the two MechanicalState and call the internal addDForce(VecDeriv1&,VecDeriv2&,const VecDeriv1&,const VecDeriv2&,SReal,SReal) method implemented by the component. ; Implements sofa::core::behavior::BaseForceField. ◆ addForce() [1/2]. template<class TDataTypes1 , class TDataTypes2 > . virtual void sofa::core::behavior::MixedInteractionForceField< TDataTypes1, TDataTypes2 >::addForce ; (; const MechanicalParams * ; mparams, . DataVecDeriv1 & ; f1, . DataVecDeriv2 & ; f2, . const DataVecCoord1 & ; x1, . const DataVecCoord2 & ; x2, . const DataVecDeriv1 & ; v1, . const DataVecDeriv2 & ; v2 . ). pure virtual . Given the current position and velocity states, update the current force vector by computing and adding the forces associated with this Fo",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_mixed_interaction_force_field.html:21378,integrat,integrated,21378,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_mixed_interaction_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_mixed_interaction_force_field.html,1,['integrat'],['integrated']
Deployability,"tmodel::Base; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setTime(double time)sofa::component::topology::utility::TopologicalChangeProcessor; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_CLASS(TopologicalChangeProcessor, core::objectmodel::BaseObject)sofa::component::topology::utility::TopologicalChangeProcessor; sofa::core::objectmodel::BaseObject::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; TopologicalChangeProcessor()sofa::component::topology::utility::TopologicalChangeProcessorprotected; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; triangleIncisionInformationsofa::component::topology::utility::TopologicalChangeProcessorprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateTriangleIncisionInformation()sofa::component::topology::utility::TopologicalChangeProcessor; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~TopologicalChangeProcessor() overridesofa::component::topology::utility::TopologicalChangeProcessorprotected.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1utility_1_1_topological_change_processor-members.html:14795,update,updateInternal,14795,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1utility_1_1_topological_change_processor-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1utility_1_1_topological_change_processor-members.html,3,['update'],"['updateInternal', 'updateLinks', 'updateTriangleIncisionInformation']"
Deployability,"tmodel::Base; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(DataEngine, core::objectmodel::BaseObject)sofa::core::DataEngine; SOFA_CLASS(QuatToRigidEngine, sofa::core::DataEngine)sofa::component::engine::transform::QuatToRigidEngine< DataTypes >; sofa::core::DataEngine::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; update() finalsofa::core::DataEnginevirtual; updateAllInputsIfDirty()sofa::core::DataTrackerDDGNode; updateIfDirty() constsofa::core::objectmodel::DDGNode; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; Vec3 typedefsofa::component::engine::transform::QuatToRigidEngine< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~DataEngine() overridesofa::core::DataEngineprotected; ~DDGNode()sofa::core::objectmodel::DDGNodevirtual; ~QuatToRigidEngine() overridesofa::component::engine::transform::QuatToRigidEngine< DataTyp",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_quat_to_rigid_engine-members.html:12624,update,update,12624,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_quat_to_rigid_engine-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_quat_to_rigid_engine-members.html,1,['update'],['update']
Deployability,"tmodel::Base; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(DataEngine, core::objectmodel::BaseObject)sofa::core::DataEngine; SOFA_CLASS(RigidToQuatEngine, sofa::core::DataEngine)sofa::component::engine::transform::RigidToQuatEngine< DataTypes >; sofa::core::DataEngine::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; update() finalsofa::core::DataEnginevirtual; updateAllInputsIfDirty()sofa::core::DataTrackerDDGNode; updateIfDirty() constsofa::core::objectmodel::DDGNode; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; Vec3 typedefsofa::component::engine::transform::RigidToQuatEngine< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~DataEngine() overridesofa::core::DataEngineprotected; ~DDGNode()sofa::core::objectmodel::DDGNodevirtual; ~RigidToQuatEngine() overridesofa::component::engine::transform::RigidToQuatEngine< DataTyp",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_rigid_to_quat_engine-members.html:12624,update,update,12624,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_rigid_to_quat_engine-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_rigid_to_quat_engine-members.html,1,['update'],['update']
Deployability,"tmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(DataEngine, core::objectmodel::BaseObject)sofa::core::DataEngine; SOFA_ATTRIBUTE_REPLACED__TYPEMEMBER(Inherited, Inherit1)sofa::component::engine::select::MeshBoundaryROI; SOFA_CLASS(MeshBoundaryROI, DataEngine)sofa::component::engine::select::MeshBoundaryROI; sofa::core::DataEngine::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; Triangle typedefsofa::component::engine::select::MeshBoundaryROI; update() finalsofa::core::DataEnginevirtual; updateAllInputsIfDirty()sofa::core::DataTrackerDDGNode; updateIfDirty() constsofa::core::objectmodel::DDGNode; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~DataEngine() overridesofa::core::DataEngineprotected; ~DDGNode()sofa::core::objectmodel::DDGNodevirtual; ~MeshBoundaryROI() overridesofa::component::engine::select::MeshBoundaryROIinlineprotected.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_mesh_boundary_r_o_i-members.html:12875,update,update,12875,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_mesh_boundary_r_o_i-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_mesh_boundary_r_o_i-members.html,5,['update'],"['update', 'updateAllInputsIfDirty', 'updateIfDirty', 'updateInternal', 'updateLinks']"
Deployability,"tmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(DataEngine, core::objectmodel::BaseObject)sofa::core::DataEngine; SOFA_CLASS(SOFA_TEMPLATE(MergeMeshes, DataTypes), core::DataEngine)sofa::component::engine::generate::MergeMeshes< DataTypes >; sofa::core::DataEngine::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; update() finalsofa::core::DataEnginevirtual; updateAllInputsIfDirty()sofa::core::DataTrackerDDGNode; updateIfDirty() constsofa::core::objectmodel::DDGNode; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecCoord typedefsofa::component::engine::generate::MergeMeshes< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecIndex typedefsofa::component::engine::generate::MergeMeshes< DataTypes >; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; vf_edgessofa::component::engine::generate::MergeMeshes< DataTypes >; vf_hexahedrasofa::component::engine::generate::MergeMeshes< DataTypes >; vf_polygonssofa::component::engine::generate::MergeMeshes< DataTypes >; vf_positionssofa::component::engine::generate::MergeMeshes< DataTypes >; vf_quadssofa::component::engine::generate::MergeMeshes< DataTypes >; vf_tetrahedrasofa::component::engine::generate::MergeMeshes< DataTypes >; vf_trianglessofa::component::engine::generate::M",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_merge_meshes-members.html:13686,update,updateAllInputsIfDirty,13686,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_merge_meshes-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_merge_meshes-members.html,1,['update'],['updateAllInputsIfDirty']
Deployability,"tmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(DataEngine, core::objectmodel::BaseObject)sofa::core::DataEngine; SOFA_CLASS(SOFA_TEMPLATE(ProximityROI, DataTypes), core::DataEngine)sofa::component::engine::select::ProximityROI< DataTypes >; sofa::core::DataEngine::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; update() finalsofa::core::DataEnginevirtual; updateAllInputsIfDirty()sofa::core::DataTrackerDDGNode; updateIfDirty() constsofa::core::objectmodel::DDGNode; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; Vec3 typedefsofa::component::engine::select::ProximityROI< DataTypes >; Vec6 typedefsofa::component::engine::select::ProximityROI< DataTypes >; VecCoord typedefsofa::component::engine::select::ProximityROI< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~DataEngine() overridesofa::core::DataEngineprotected; ~DDGNode()sofa::core::objectmodel::DDGNodevirtual; ~Pro",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_proximity_r_o_i-members.html:13420,update,updateAllInputsIfDirty,13420,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_proximity_r_o_i-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_proximity_r_o_i-members.html,1,['update'],['updateAllInputsIfDirty']
Deployability,"tmodel::BaseData * getBaseData () const;  BaseData pointer accessor function. More...;  ; core::objectmodel::BaseData * getBaseData ();  ; void updateVisibility ();  ; bool isDirty ();  ; bool isFilled ();  return if DataWidget as been filled More...;  ; void setFilled (bool value);  method to warn if Data has not been filled at constructor. More...;  ; virtual unsigned int sizeWidget ();  Helper method to give a size. More...;  . Protected Member Functions; virtual void readFromData ();  The implementation of this method tells how the widget reads the value of the data. More...;  ; virtual void writeToData ();  . Additional Inherited Members;  Static Public Member Functions inherited from sofa::gui::qt::TDataWidget< Material >; static RealObject * create (RealObject *, CreatorArgument &arg);  ;  Static Public Member Functions inherited from sofa::gui::qt::DataWidget; template<class T > ; static T * create (T *, const CreatorArgument &arg);  ; static DataWidget * CreateDataWidget (const DataWidget::CreatorArgument &dwarg);  ;  Signals inherited from sofa::gui::qt::DataWidget; void WidgetDirty (bool);  ; void DataOwnerDirty (bool);  ; void dataValueChanged (QString dataValueString);  ;  Public Slots inherited from sofa::gui::qt::DataWidget; void updateDataValue ();  ; void updateWidgetValue ();  ; void setWidgetDirty (bool b=true);  ; void fillFromData ();  . Attribute details. ◆ _ambientCheckBox. QCheckBox* sofa::gui::qt::materialdatawidget_h::MaterialDataWidget::_ambientCheckBox. protected . ◆ _ambientPicker. QRGBAColorPicker* sofa::gui::qt::materialdatawidget_h::MaterialDataWidget::_ambientPicker. protected . ◆ _diffuseCheckBox. QCheckBox* sofa::gui::qt::materialdatawidget_h::MaterialDataWidget::_diffuseCheckBox. protected . ◆ _diffusePicker. QRGBAColorPicker* sofa::gui::qt::materialdatawidget_h::MaterialDataWidget::_diffusePicker. protected . ◆ _emissiveCheckBox. QCheckBox* sofa::gui::qt::materialdatawidget_h::MaterialDataWidget::_emissiveCheckBox. protected . ◆ _",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1materialdatawidget__h_1_1_material_data_widget.html:3493,update,updateDataValue,3493,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1materialdatawidget__h_1_1_material_data_widget.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1materialdatawidget__h_1_1_material_data_widget.html,2,['update'],"['updateDataValue', 'updateWidgetValue']"
Deployability,"tmodel::BaseObject; SingleLink< BaseObject, BaseContext, BaseLink::FLAG_DOUBLELINK > l_context;  ; LinkSlaves l_slaves;  ; SingleLink< BaseObject, BaseObject, BaseLink::FLAG_DOUBLELINK > l_master;  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  . Public Member Functions;  SOFA_CLASS (SOFA_TEMPLATE(CylinderCollisionModel, TDataTypes), core::CollisionModel);  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; void resize (sofa::Size size) override;  Set the number of elements. More...;  ; void computeBoundingTree (int maxDepth=0) override;  Create or update the bounding volume hierarchy. More...;  ; void draw (const core::visual::VisualParams *vparams, sofa::Index index) override;  Render an collision element. More...;  ; void draw (const core::visual::VisualParams *vparams) override;  Render internal data of this object, for debugging purposes. More...;  ; core::behavior::MechanicalState< DataTypes > * getMechanicalState ();  ; Real radius (sofa::Index index) const;  ; const Coord & center (sofa::Index i) const;  ; Coord axis (sofa::Index index) const;  ; Coord local_axis (sofa::Index index) const;  ; const sofa::type::Quat< SReal > orientation (sofa::Index index) const;  ; Real height (sofa::Index index) const;  ; Coord point1 (sofa::Index i) const;  ; Coord point2 (sofa::Index i) const;  ; Real defaultRadius () const;  ; const Coord & velocity (sofa::Index index) const;  ; Data< VecReal > & writeRadii ();  ; Data< VecReal > & writeHeights ();  ; Data< VecAxisCoord > & writeLocalAxes ();  ;  Public Member Functions",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_cylinder_collision_model.html:5274,update,update,5274,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_cylinder_collision_model.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_cylinder_collision_model.html,1,['update'],['update']
Deployability,"tmodel::BaseObject; SingleLink< BaseObject, BaseContext, BaseLink::FLAG_DOUBLELINK > l_context;  ; LinkSlaves l_slaves;  ; SingleLink< BaseObject, BaseObject, BaseLink::FLAG_DOUBLELINK > l_master;  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  . Public Member Functions;  SOFA_CLASS (SOFA_TEMPLATE(TriangleCollisionModel, TDataTypes), core::CollisionModel);  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; void resize (sofa::Size size) override;  Set the number of elements. More...;  ; void computeBoundingTree (int maxDepth=0) override;  Create or update the bounding volume hierarchy. More...;  ; void computeContinuousBoundingTree (SReal dt, int maxDepth=0) override;  Create or update the bounding volume hierarchy, accounting for motions within the given timestep. More...;  ; void draw (const core::visual::VisualParams *, sofa::Index index) override;  Render an collision element. More...;  ; void draw (const core::visual::VisualParams *vparams) override;  Render internal data of this object, for debugging purposes. More...;  ; bool canCollideWithElement (sofa::Index index, CollisionModel *model2, sofa::Index index2) override;  Test if two elements can collide with each other. More...;  ; core::behavior::MechanicalState< DataTypes > * getMechanicalState ();  ; const core::behavior::MechanicalState< DataTypes > * getMechanicalState () const;  ; const VecCoord & getX () const;  ; const sofa::core::topology::BaseMeshTopology::SeqTriangles & getTriangles () const;  ; const VecDeriv & getNormals () const;  ; int getTria",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_triangle_collision_model.html:6371,update,update,6371,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_triangle_collision_model.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_triangle_collision_model.html,1,['update'],['update']
Deployability,"to build stiffness and mass matrices) . Constructor details. ◆ NonUniformHexahedronFEMForceFieldAndMass(). template<class DataTypes > . sofa::component::solidmechanics::fem::nonuniform::NonUniformHexahedronFEMForceFieldAndMass< DataTypes >::NonUniformHexahedronFEMForceFieldAndMass. protected . Function details. ◆ addFineToCoarse(). template<class T > . void sofa::component::solidmechanics::fem::nonuniform::NonUniformHexahedronFEMForceFieldAndMass< T >::addFineToCoarse ; (; ElementStiffness & ; coarse, . const ElementStiffness & ; fine, . Index ; indice . ). protected . add a matrix of a fine element to its englobing coarser matrix . ◆ addForce(). template<class T > . void sofa::component::solidmechanics::fem::nonuniform::NonUniformHexahedronFEMForceFieldAndMass< T >::addForce ; (; const core::MechanicalParams * ; , . DataVecDeriv & ; f, . const DataVecCoord & ; x, . const DataVecDeriv & ; v . ). overridevirtual . Given the current position and velocity states, update the current force vector by computing and adding the forces associated with this ForceField.; If the ForceField can be represented as a matrix, this method computes ; This is the method that should be implemented by the component ; Reimplemented from sofa::component::solidmechanics::fem::elastic::HexahedronFEMForceFieldAndMass< DataTypes >. ◆ addGravityToV(). template<class T > . void sofa::component::solidmechanics::fem::nonuniform::NonUniformHexahedronFEMForceFieldAndMass< T >::addGravityToV ; (; const core::MechanicalParams * ; mparams, . DataVecDeriv & ; d_v . ). overridevirtual . Reimplemented from sofa::component::solidmechanics::fem::elastic::HexahedronFEMForceFieldAndMass< DataTypes >. ◆ addMDx(). template<class T > . void sofa::component::solidmechanics::fem::nonuniform::NonUniformHexahedronFEMForceFieldAndMass< T >::addMDx ; (; const core::MechanicalParams * ; mparams, . DataVecDeriv & ; f, . const DataVecDeriv & ; dx, . SReal ; factor . ). overridevirtual . Reimplemented from sofa::component:",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1nonuniform_1_1_non_uniform_hexahedron_f_e_m_force_field_and_mass.html:33784,update,update,33784,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1nonuniform_1_1_non_uniform_hexahedron_f_e_m_force_field_and_mass.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1nonuniform_1_1_non_uniform_hexahedron_f_e_m_force_field_and_mass.html,1,['update'],['update']
Deployability,"to the directory of the executable that is currently running. . ◆ getExecutablePath(). const std::string & sofa::helper::Utils::getExecutablePath ; (; ). static . Get the path of the executable that is currently running. ; Note that this function uses various non-portable tricks to achieve its goal, and it might not be the most reliable thing ever written. . ◆ getSofaPathPrefix(). const std::string & sofa::helper::Utils::getSofaPathPrefix ; (; ). static . Get the path to the ""root"" path of Sofa (i.e. the build directory or the installation prefix). ; WarningThis function is meant to be used only by the applications that are distributed with SOFA ; ReturnsThe ABSOLUTE path of Sofa build dir (or install dir) . ◆ getSofaPathTo(). const std::string sofa::helper::Utils::getSofaPathTo ; (; const std::string & ; pathFromBuildDir). static . Construct a path based on the build dir path of Sofa. ; WarningThis function is meant to be used only by the applications that are distributed with SOFA: it uses getSofaPathPrefix() ; ReturnsThe ABSOLUTE path of anything in Sofa build dir (or install dir) . ◆ getSofaUserLocalDirectory(). const std::string & sofa::helper::Utils::getSofaUserLocalDirectory ; (; ). static . Get the path to the SOFA directory into the current user local config directory. . ◆ getUserLocalDirectory(). const std::string & sofa::helper::Utils::getUserLocalDirectory ; (; ). static . Get the path to the current user local config directory. . ◆ narrowString(). std::string sofa::helper::Utils::narrowString ; (; const std::wstring & ; ws). static . Convert a wstring to a string. ; ReturnsThe converted string on success, or a empty string on failure. . ◆ readBasicIniFile(). std::map< std::string, std::string > sofa::helper::Utils::readBasicIniFile ; (; const std::string & ; path). static . Read a file written in a very basic ini-like format. ; For each line that contains a '=' character, (e.g. ""key=value""), the returned map will contains a pair <""key"", ""value"">. Other ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_utils.html:3205,install,install,3205,api/master/sofa/html/classsofa_1_1helper_1_1_utils.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_utils.html,1,['install'],['install']
Deployability,"to the given bounding box in order to compute the scene bounding box or cull hidden objects. More...;  ; virtual void applyTranslation (const SReal, const SReal, const SReal);  ; virtual void applyRotation (const SReal, const SReal, const SReal);  ; virtual void applyRotation (const type::Quat< SReal >);  ; virtual void applyScale (const SReal, const SReal, const SReal);  ; virtual void exportOBJ (std::string, std::ostream *, std::ostream *, sofa::Index &, sofa::Index &, sofa::Index &, int &);  Append this mesh to an OBJ format stream. More...;  . Protected Member Functions;  OglShadowShader ();  ;  ~OglShadowShader () override;  ;  Protected Member Functions inherited from sofa::gl::component::shader::OglShader;  OglShader ();  ;  ~OglShader () override;  ;  Protected Member Functions inherited from sofa::core::visual::Shader;  Shader ();  ;  ~Shader () override;  Destructor. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *na",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_shadow_shader.html:15669,update,update,15669,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_shadow_shader.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_shadow_shader.html,1,['update'],['update']
Deployability,to this node. More...;  ; void delInput (DDGNode *n);  Remove an input from this node. More...;  ; void addOutput (DDGNode *n);  Add a new output to this node. More...;  ; void delOutput (DDGNode *n);  Remove an output from this node. More...;  ; const DDGLinkContainer & getInputs ();  Get the list of inputs for this DDGNode. More...;  ; const DDGLinkContainer & getOutputs ();  Get the list of outputs for this DDGNode. More...;  ; virtual void update ()=0;  Update this value. More...;  ; bool isDirty () const;  Returns true if the DDGNode needs to be updated. More...;  ; virtual void setDirtyValue ();  Indicate the value needs to be updated. More...;  ; virtual void setDirtyOutputs ();  Indicate the outputs needs to be updated. This method must be called after changing the value of this node. More...;  ; void cleanDirty ();  Set dirty flag to false. More...;  ; virtual void notifyEndEdit ();  Notify links that the DGNode has been modified. More...;  ; void updateIfDirty () const;  Utility method to call update if necessary. This method should be called before reading of writing the value of this node. More...;  . Additional Inherited Members;  Protected Member Functions inherited from sofa::core::objectmodel::DDGNode; virtual void doAddInput (DDGNode *n);  ; virtual void doDelInput (DDGNode *n);  ; virtual void doAddOutput (DDGNode *n);  ; virtual void doDelOutput (DDGNode *n);  ; void cleanDirtyOutputsOfInputs ();  the dirtyOutputs flags of all the inputs will be set to false More...;  . Attribute details. ◆ m_dataTracker. DataTracker sofa::core::DataTrackerDDGNode::m_dataTracker. protected . Constructor details. ◆ DataTrackerDDGNode(). sofa::core::DataTrackerDDGNode::DataTrackerDDGNode ; (; ). inline . Function details. ◆ addInputs(). void sofa::core::DataTrackerDDGNode::addInputs ; (; std::initializer_list< sofa::core::objectmodel::BaseData * > ; datas). Create a DataCallback object associated with multiple Data fields. . ◆ addOutputs(). void sofa::core::DataTrac,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_data_tracker_d_d_g_node.html:2482,update,updateIfDirty,2482,api/master/sofa/html/classsofa_1_1core_1_1_data_tracker_d_d_g_node.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_data_tracker_d_d_g_node.html,2,['update'],"['update', 'updateIfDirty']"
Deployability,to this node. More...;  ; void delInput (DDGNode *n);  Remove an input from this node. More...;  ; void addOutput (DDGNode *n);  Add a new output to this node. More...;  ; void delOutput (DDGNode *n);  Remove an output from this node. More...;  ; const DDGLinkContainer & getInputs ();  Get the list of inputs for this DDGNode. More...;  ; const DDGLinkContainer & getOutputs ();  Get the list of outputs for this DDGNode. More...;  ; virtual void update ()=0;  Update this value. More...;  ; bool isDirty () const;  Returns true if the DDGNode needs to be updated. More...;  ; virtual void setDirtyValue ();  Indicate the value needs to be updated. More...;  ; virtual void setDirtyOutputs ();  Indicate the outputs needs to be updated. This method must be called after changing the value of this node. More...;  ; void cleanDirty ();  Set dirty flag to false. More...;  ; virtual void notifyEndEdit ();  Notify links that the DGNode has been modified. More...;  ; void updateIfDirty () const;  Utility method to call update if necessary. This method should be called before reading of writing the value of this node. More...;  . Protected Member Functions; virtual void doAddInput (DDGNode *n);  ; virtual void doDelInput (DDGNode *n);  ; virtual void doAddOutput (DDGNode *n);  ; virtual void doDelOutput (DDGNode *n);  ; void cleanDirtyOutputsOfInputs ();  the dirtyOutputs flags of all the inputs will be set to false More...;  . Attribute details. ◆ inputs. DDGLinkContainer sofa::core::objectmodel::DDGNode::inputs. protected . ◆ outputs. DDGLinkContainer sofa::core::objectmodel::DDGNode::outputs. protected . Constructor details. ◆ DDGNode(). sofa::core::objectmodel::DDGNode::DDGNode ; (; ). Constructor. . ◆ ~DDGNode(). sofa::core::objectmodel::DDGNode::~DDGNode ; (; ). virtual . Destructor. Automatically remove remaining links. . Function details. ◆ addInput(). void sofa::core::objectmodel::DDGNode::addInput ; (; DDGNode * ; n). Add a new input to this node. . ◆ addOutput(). void sof,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_d_d_g_node.html:2140,update,updateIfDirty,2140,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_d_d_g_node.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_d_d_g_node.html,2,['update'],"['update', 'updateIfDirty']"
Deployability,"toLameParameters(_2DMaterials, Real youngModulus, Real poissonRatio)sofa::component::solidmechanics::fem::elastic::BaseLinearElasticityFEMForceField< DataTypes >static; toLameParameters(_3DMaterials, Real youngModulus, Real poissonRatio)sofa::component::solidmechanics::fem::elastic::BaseLinearElasticityFEMForceField< DataTypes >static; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; Transformation typedefsofa::component::solidmechanics::fem::elastic::TriangularFEMForceField< DataTypes >protected; triangleInfosofa::component::solidmechanics::fem::elastic::TriangularFEMForceField< DataTypes >; TrianglesAroundVertex typedefsofa::component::solidmechanics::fem::elastic::TriangularFEMForceField< DataTypes >; TriangularFEMForceField()sofa::component::solidmechanics::fem::elastic::TriangularFEMForceField< DataTypes >protected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateMatrixsofa::component::solidmechanics::fem::elastic::TriangularFEMForceField< DataTypes >protected; VecCoord typedefsofa::component::solidmechanics::fem::elastic::TriangularFEMForceField< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecDeriv typedefsofa::component::solidmechanics::fem::elastic::TriangularFEMForceField< DataTypes >; VecElement typedefsofa::component::solidmechanics::fem::elastic::TriangularFEMForceField< DataTypes >; VecLink typedefsofa::core::objectmodel::Base; VecMaterialStiffness typedefsofa::component::solidmechanics::fem::elastic::TriangularFEMForceField< DataTypes >protected; VecReal typedefsofa::component::solidmechanics::fem::elastic::TriangularFEMForceField< DataTypes >; VecSlaves typedefsofa::core::objectmodel::BaseObject; VecStrainDisplacement typedefsofa::component::solidmechanics::fem::elastic::TriangularFEMForceField< DataTypes >protected; Vector typedefsofa::component::solidmechanics::fem::elastic::TriangularFEMForceField< DataTypes >; vertexIn",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_triangular_f_e_m_force_field-members.html:26062,update,updateMatrixsofa,26062,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_triangular_f_e_m_force_field-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_triangular_f_e_m_force_field-members.html,1,['update'],['updateMatrixsofa']
Deployability,topology::Topology; TetrahedraAroundEdge typedefsofa::core::topology::BaseMeshTopology; TetrahedraAroundTriangle typedefsofa::core::topology::BaseMeshTopology; TetrahedraAroundVertex typedefsofa::core::topology::BaseMeshTopology; Tetrahedron typedefsofa::core::topology::Topology; TetrahedronID typedefsofa::core::topology::Topology; TetraID typedefsofa::core::topology::Topology; Topology()sofa::core::topology::Topologyinlineprotected; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; Triangle typedefsofa::core::topology::Topology; TriangleID typedefsofa::core::topology::Topology; TrianglesAroundEdge typedefsofa::core::topology::BaseMeshTopology; TrianglesAroundVertex typedefsofa::core::topology::BaseMeshTopology; TrianglesInTetrahedron typedefsofa::core::topology::BaseMeshTopology; Type enum namesofa::component::topology::container::grid::SparseGridTopology; UP enum valuesofa::component::topology::container::grid::SparseGridRamificationTopology; updateEdges()sofa::component::topology::container::grid::SparseGridTopologyprotectedvirtual; updateHexahedra()sofa::component::topology::container::constant::MeshTopologyvirtual; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateMesh()sofa::component::topology::container::grid::SparseGridTopology; updateQuads()sofa::component::topology::container::grid::SparseGridTopologyprotectedvirtual; updateTetrahedra()sofa::component::topology::container::constant::MeshTopologyvirtual; UV typedefsofa::component::topology::container::constant::MeshTopology; UVID typedefsofa::component::topology::container::constant::MeshTopology; validHexahedrasofa::component::topology::container::constant::MeshTopologyprotected; validTetrahedrasofa::component::topology::container::constant::MeshTopologyprotected; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmode,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1grid_1_1_sparse_grid_multiple_topology-members.html:50408,update,updateEdges,50408,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1grid_1_1_sparse_grid_multiple_topology-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1grid_1_1_sparse_grid_multiple_topology-members.html,2,['update'],['updateEdges']
Deployability,"tor to fill, result of ; dxInput vector used to compute . Implements sofa::core::behavior::ForceField< DataTypes >. ◆ addDForce() [3/3]. template<typename DataTypes > . void sofa::component::mechanicalload::TorsionForceField< DataTypes >::addDForce ; (; const MechanicalParams * ; mparams, . DataVecDeriv & ; df, . const DataVecDeriv & ; dx . ). overridevirtual . Internal addDForce Overloaded function, usually called from the generic addDForce version. This addDForce version directly gives access to df and dx vectors through its parameters. Parameters. mparams; dfOutput vector to fill, result of ; dxInput vector used to compute . Implements sofa::core::behavior::ForceField< DataTypes >. ◆ addForce() [1/3]. void sofa::component::mechanicalload::TorsionForceField< Rigid3Types >::addForce ; (; const core::MechanicalParams * ; , . DataVecDeriv & ; f, . const DataVecCoord & ; x, . const DataVecDeriv & ; v . ). virtual . Given the current position and velocity states, update the current force vector by computing and adding the forces associated with this ForceField.; If the ForceField can be represented as a matrix, this method computes ; This is the method that should be implemented by the component ; Implements sofa::core::behavior::ForceField< DataTypes >. ◆ addForce() [2/3]. void sofa::component::mechanicalload::TorsionForceField< Rigid3Types >::addForce ; (; const core::MechanicalParams * ; , . DataVecDeriv & ; f, . const DataVecCoord & ; x, . const DataVecDeriv & ; v . ). virtual . Given the current position and velocity states, update the current force vector by computing and adding the forces associated with this ForceField.; If the ForceField can be represented as a matrix, this method computes ; This is the method that should be implemented by the component ; Implements sofa::core::behavior::ForceField< DataTypes >. ◆ addForce() [3/3]. template<typename DataTypes > . void sofa::component::mechanicalload::TorsionForceField< DataTypes >::addForce ; (; const Mechanic",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_torsion_force_field.html:23182,update,update,23182,api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_torsion_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_torsion_force_field.html,1,['update'],['update']
Deployability,"tor to fill, result of ; dxInput vector used to compute . Implements sofa::core::behavior::ForceField< DataTypes >. ◆ addForce() [1/3]. void sofa::component::mechanicalload::TorsionForceField< Rigid3Types >::addForce ; (; const core::MechanicalParams * ; , . DataVecDeriv & ; f, . const DataVecCoord & ; x, . const DataVecDeriv & ; v . ). virtual . Given the current position and velocity states, update the current force vector by computing and adding the forces associated with this ForceField.; If the ForceField can be represented as a matrix, this method computes ; This is the method that should be implemented by the component ; Implements sofa::core::behavior::ForceField< DataTypes >. ◆ addForce() [2/3]. void sofa::component::mechanicalload::TorsionForceField< Rigid3Types >::addForce ; (; const core::MechanicalParams * ; , . DataVecDeriv & ; f, . const DataVecCoord & ; x, . const DataVecDeriv & ; v . ). virtual . Given the current position and velocity states, update the current force vector by computing and adding the forces associated with this ForceField.; If the ForceField can be represented as a matrix, this method computes ; This is the method that should be implemented by the component ; Implements sofa::core::behavior::ForceField< DataTypes >. ◆ addForce() [3/3]. template<typename DataTypes > . void sofa::component::mechanicalload::TorsionForceField< DataTypes >::addForce ; (; const MechanicalParams * ; , . DataVecDeriv & ; f, . const DataVecCoord & ; x, . const DataVecDeriv & ; v . ). overridevirtual . Given the current position and velocity states, update the current force vector by computing and adding the forces associated with this ForceField.; If the ForceField can be represented as a matrix, this method computes ; This is the method that should be implemented by the component ; Implements sofa::core::behavior::ForceField< DataTypes >. ◆ addKToMatrix(). template<typename DataTypes > . void sofa::component::mechanicalload::TorsionForceField< DataTypes >",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_torsion_force_field.html:23760,update,update,23760,api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_torsion_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_torsion_force_field.html,1,['update'],['update']
Deployability,"tor. Data<bool> sofa::component::odesolver::forward::CentralDifferenceSolver::d_threadSafeVisitor. If true, do not use realloc and free visitors in fwdInteractionForceField. . ◆ f_rayleighMass. sofa::core::objectmodel::RenamedData<SReal> sofa::component::odesolver::forward::CentralDifferenceSolver::f_rayleighMass. Constructor details. ◆ CentralDifferenceSolver(). sofa::component::odesolver::forward::CentralDifferenceSolver::CentralDifferenceSolver ; (; ). protected . Function details. ◆ getIntegrationFactor(). SReal sofa::component::odesolver::forward::CentralDifferenceSolver::getIntegrationFactor ; (; int ; inputDerivative, . int ; outputDerivative . ); const. inlineoverridevirtual . Given an input derivative order (0 for position, 1 for velocity, 2 for acceleration), how much will it affect the output derivative of the given order. ; Reimplemented from sofa::core::behavior::OdeSolver. ◆ getSolutionIntegrationFactor(). SReal sofa::component::odesolver::forward::CentralDifferenceSolver::getSolutionIntegrationFactor ; (; int ; outputDerivative); const. inlineoverridevirtual . Given a solution of the linear system, how much will it affect the output derivative of the given order. ; Reimplemented from sofa::core::behavior::OdeSolver. ◆ SOFA_CLASS(). sofa::component::odesolver::forward::CentralDifferenceSolver::SOFA_CLASS ; (; CentralDifferenceSolver ; , . sofa::core::behavior::OdeSolver ;  . ). ◆ solve(). void sofa::component::odesolver::forward::CentralDifferenceSolver::solve ; (; const core::ExecParams * ; , . SReal ; , . sofa::core::MultiVecCoordId ; , . sofa::core::MultiVecDerivId ;  . ). overridevirtual . Main computation method.; Specify and execute all computation for timestep integration, i.e. advancing the state from time t to t+dt, putting the resulting position and velocity in the provided vectors. ; Implements sofa::core::behavior::OdeSolver. sofacomponentodesolverforwardCentralDifferenceSolver; Generated on Mon Nov 11 2024 02:56:13 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1forward_1_1_central_difference_solver.html:16177,integrat,integration,16177,api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1forward_1_1_central_difference_solver.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1forward_1_1_central_difference_solver.html,1,['integrat'],['integration']
Deployability,"tor< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(DataEngine, core::objectmodel::BaseObject)sofa::core::DataEngine; SOFA_CLASS(SOFA_TEMPLATE(GenerateCylinder, DataTypes), core::DataEngine)sofa::component::engine::generate::GenerateCylinder< DataTypes >; sofa::core::DataEngine::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; Tetrahedron typedefsofa::component::engine::generate::GenerateCylinder< DataTypes >; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; Triangle typedefsofa::component::engine::generate::GenerateCylinder< DataTypes >; update() finalsofa::core::DataEnginevirtual; updateAllInputsIfDirty()sofa::core::DataTrackerDDGNode; updateIfDirty() constsofa::core::objectmodel::DDGNode; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecCoord typedefsofa::component::engine::generate::GenerateCylinder< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~DataEngine() overridesofa::core::DataEngineprotected; ~DDGNode()sofa::core::objectmodel::DDGNodevirtual; ~GenerateCylinder() overridesofa::component::engine::generate::GenerateCylinder< DataType",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_generate_cylinder-members.html:14072,update,update,14072,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_generate_cylinder-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_generate_cylinder-members.html,1,['update'],['update']
Deployability,"tor< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(DataEngine, core::objectmodel::BaseObject)sofa::core::DataEngine; SOFA_CLASS(SOFA_TEMPLATE(ValuesFromPositions, DataTypes), core::DataEngine)sofa::component::engine::select::ValuesFromPositions< DataTypes >; sofa::core::DataEngine::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; Tetra typedefsofa::component::engine::select::ValuesFromPositions< DataTypes >; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; Triangle typedefsofa::component::engine::select::ValuesFromPositions< DataTypes >; update() finalsofa::core::DataEnginevirtual; updateAllInputsIfDirty()sofa::core::DataTrackerDDGNode; updateIfDirty() constsofa::core::objectmodel::DDGNode; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateValues(TempData &_data)sofa::component::engine::select::ValuesFromPositions< DataTypes >protected; updateVectors(TempData &_data)sofa::component::engine::select::ValuesFromPositions< DataTypes >protected; valueFromEdge(const Edge &e, const TempData &data)sofa::component::engine::select::ValuesFromPositions< DataTypes >protected; valueFromPoint(const PointID &pid, const TempData &data)sofa::component::engine::select::ValuesFromPositions< DataTypes >protected; valueFromPosition(const CPos &p, const TempData &data)sofa::component::engine::select::ValuesFromPositions< DataTypes >protected; valueFromTetrahedron(const Tetra &t, const TempData &data)sofa::component::engine::select::ValuesFromPositions< DataTypes >pro",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_values_from_positions-members.html:14140,update,update,14140,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_values_from_positions-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_values_from_positions-members.html,1,['update'],['update']
Deployability,"tor< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(DataEngine, core::objectmodel::BaseObject)sofa::core::DataEngine; SOFA_ATTRIBUTE_REPLACED__TYPEMEMBER(Inherited, Inherit1)sofa::component::engine::select::SelectConnectedLabelsROI< _T >; SOFA_ATTRIBUTE_REPLACED__TYPEMEMBER(Index, sofa::Index)sofa::component::engine::select::SelectConnectedLabelsROI< _T >; SOFA_CLASS(SOFA_TEMPLATE(SelectConnectedLabelsROI, _T), DataEngine)sofa::component::engine::select::SelectConnectedLabelsROI< _T >; sofa::core::DataEngine::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; T typedefsofa::component::engine::select::SelectConnectedLabelsROI< _T >; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; update() finalsofa::core::DataEnginevirtual; updateAllInputsIfDirty()sofa::core::DataTrackerDDGNode; updateIfDirty() constsofa::core::objectmodel::DDGNode; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VecVLabels typedefsofa::component::engine::select::SelectConnectedLabelsROI< _T >; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~DataEngine() overridesofa::core::DataEngineprotected; ~DDGNode()sofa::core::objectmodel::DDGNodevirtual; ~SelectConnectedLabelsROI() overridesofa::component::engine::select::SelectConnectedLabe",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_select_connected_labels_r_o_i-members.html:12828,update,update,12828,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_select_connected_labels_r_o_i-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_select_connected_labels_r_o_i-members.html,1,['update'],['update']
Deployability,"tr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(DataEngine, core::objectmodel::BaseObject)sofa::core::DataEngine; SOFA_CLASS(SOFA_TEMPLATE(ValuesFromPositions, DataTypes), core::DataEngine)sofa::component::engine::select::ValuesFromPositions< DataTypes >; sofa::core::DataEngine::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; Tetra typedefsofa::component::engine::select::ValuesFromPositions< DataTypes >; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; Triangle typedefsofa::component::engine::select::ValuesFromPositions< DataTypes >; update() finalsofa::core::DataEnginevirtual; updateAllInputsIfDirty()sofa::core::DataTrackerDDGNode; updateIfDirty() constsofa::core::objectmodel::DDGNode; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateValues(TempData &_data)sofa::component::engine::select::ValuesFromPositions< DataTypes >protected; updateVectors(TempData &_data)sofa::component::engine::select::ValuesFromPositions< DataTypes >protected; valueFromEdge(const Edge &e, const TempData &data)sofa::component::engine::select::ValuesFromPositions< DataTypes >protected; valueFromPoint(const PointID &pid, const TempData &data)sofa::component::engine::select::ValuesFromPositions< DataTypes >protected; valueFromPosition(const CPos &p, const TempData &data)sofa::component::engine::select::ValuesFromPositions< DataTypes >protected; valueFromTetrahedron(const Tetra &t, const TempData &data)sofa::component::engine::select::ValuesFromPositions< DataTypes >protected; valueFromTriangle(const Triangle &t, const TempData &data)sofa::component::engine::select::ValuesFromPositions< DataTypes >protected; ValuesFromPositions()sofa::component::engine::select::ValuesFromPositions< DataTypes >protected; Vec3 typedefsofa::component::engine::select",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_values_from_positions-members.html:14419,update,updateValues,14419,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_values_from_positions-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_values_from_positions-members.html,1,['update'],['updateValues']
Deployability,"tr, const std::string &path, const BaseLink *link);  . Static Public Member Functions; template<class T > ; static bool canCreate (T *obj, core::objectmodel::BaseContext *context, core::objectmodel::BaseObjectDescription *arg);  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseObject; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  . Protected Member Functions;  ReadTopology ();  ;  ~ReadTopology () override;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseD",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1playback_1_1_read_topology.html:13427,update,update,13427,api/master/sofa/html/classsofa_1_1component_1_1playback_1_1_read_topology.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1playback_1_1_read_topology.html,1,['update'],['update']
Deployability,"tr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Protected Member Functions;  MergePoints ();  ;  ~MergePoints () override;  ;  Protected Member Functions inherited from sofa::core::DataEngine;  DataEngine ();  Constructor. More...;  ;  ~DataEngine () override;  Destructor. Do nothing. More...;  ; virtual void doInternalUpdate () final;  Prevent engines to use the internalUpdate mechanism, so that only update/doUpdate is used. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::DDGNode; virtual void doAddInput (DDGNode *n);  ; virtual void doDelInput (DDGNode *n);  ; virtual void doAddOutput (DDGNode *n);  ; virtual void doDelOutput (DDGNode *n);  ; void cleanDirtyOutputsOfInputs ();  the dirtyOutputs flags of all the inputs will be set to false More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *na",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_merge_points.html:14008,update,update,14008,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_merge_points.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_merge_points.html,1,['update'],['update']
Deployability,"trahedron typedefsofa::core::topology::Topology; TetrahedronID typedefsofa::core::topology::Topology; TetraID typedefsofa::core::topology::Topology; Topology()sofa::core::topology::Topologyinlineprotected; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; Triangle typedefsofa::core::topology::Topology; TriangleID typedefsofa::core::topology::Topology; TrianglesAroundEdge typedefsofa::core::topology::BaseMeshTopology; TrianglesAroundVertex typedefsofa::core::topology::BaseMeshTopology; TrianglesInTetrahedron typedefsofa::core::topology::BaseMeshTopology; Type enum namesofa::component::topology::container::grid::SparseGridTopology; UP enum valuesofa::component::topology::container::grid::SparseGridRamificationTopology; updateEdges()sofa::component::topology::container::grid::SparseGridTopologyprotectedvirtual; updateHexahedra()sofa::component::topology::container::constant::MeshTopologyvirtual; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateMesh()sofa::component::topology::container::grid::SparseGridTopology; updateQuads()sofa::component::topology::container::grid::SparseGridTopologyprotectedvirtual; updateTetrahedra()sofa::component::topology::container::constant::MeshTopologyvirtual; UV typedefsofa::component::topology::container::constant::MeshTopology; UVID typedefsofa::component::topology::container::constant::MeshTopology; validHexahedrasofa::component::topology::container::constant::MeshTopologyprotected; validTetrahedrasofa::component::topology::container::constant::MeshTopologyprotected; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VerticesAroundVertex typedefsofa::core::topology::BaseMeshTopology; voxelizeTriangleMesh(helper::io::Mesh *mesh, sofa::core::sptr< RegularGridTopology > regularGrid, type::vector< Type > &regularGridTypes) constsofa::",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1grid_1_1_sparse_grid_multiple_topology-members.html:50640,update,updateLinks,50640,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1grid_1_1_sparse_grid_multiple_topology-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1grid_1_1_sparse_grid_multiple_topology-members.html,2,['update'],['updateLinks']
Deployability,"traint::projective::LineProjectiveConstraint< DataTypes >; SOFA_CLASS(SOFA_TEMPLATE(LineProjectiveConstraint, DataTypes), SOFA_TEMPLATE(sofa::core::behavior::ProjectiveConstraintSet, DataTypes))sofa::component::constraint::projective::LineProjectiveConstraint< DataTypes >; sofa::core::behavior::ProjectiveConstraintSet::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SOFA_CLASS2(SOFA_TEMPLATE(ProjectiveConstraintSet, DataTypes), BaseProjectiveConstraintSet, SOFA_TEMPLATE(SingleStateAccessor, DataTypes))sofa::core::behavior::ProjectiveConstraintSet< DataTypes >; SparseMatrix typedefsofa::component::constraint::projective::LineProjectiveConstraint< DataTypes >; SPtr typedefsofa::core::objectmodel::Base; StateAccessor()sofa::core::behavior::StateAccessorinlineprotected; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateJacobian()sofa::component::constraint::projective::LineProjectiveConstraint< DataTypes >protected; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecCoord typedefsofa::component::constraint::projective::LineProjectiveConstraint< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecDeriv typedefsofa::component::constraint::projective::LineProjectiveConstraint< DataTypes >; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~BaseProjectiveConstraintSet() overridesofa::core::behavior::BaseProjectiveConstraintSetinlineprotected; ~LineProjectiveConstraint()sofa::component::constraint::projective::LineProjectiveConstr",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_line_projective_constraint-members.html:18337,update,updateJacobian,18337,api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_line_projective_constraint-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_line_projective_constraint-members.html,1,['update'],['updateJacobian']
Deployability,"tributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSystemLHVector(core::MultiVecDerivId v)=0sofa::core::behavior::LinearSolverpure virtual; setSystemMBKMatrix(const MechanicalParams *mparams)=0sofa::core::behavior::LinearSolverpure virtual; setSystemRHVector(core::MultiVecDerivId v)=0sofa::core::behavior::LinearSolverpure virtual; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(LinearSolver, BaseLinearSolver)sofa::core::behavior::LinearSolver; sofa::core::behavior::BaseLinearSolver::SOFA_ABSTRACT_CLASS(BaseLinearSolver, objectmodel::BaseObject)sofa::core::behavior::BaseLinearSolver; SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; solveSystem()=0sofa::core::behavior::LinearSolverpure virtual; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; supportNonSymmetricSystem() constsofa::core::behavior::LinearSolverinlinevirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateSystemMatrix()sofa::core::behavior::LinearSolverinlinevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; writeFile(std::ostream &)sofa::core::behavior::LinearSolverinlinevirtual; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~LinearSolver() overridesofa::core::behavior::LinearSolverprotected.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_linear_solver-members.html:12067,update,updateInternal,12067,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_linear_solver-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_linear_solver-members.html,3,['update'],"['updateInternal', 'updateLinks', 'updateSystemMatrix']"
Deployability,"tricalTypes >::m_massLumpingCoeff. protected . ◆ m_massTopologyType. template<class DataTypes , class GeometricalTypes = DataTypes> . sofa::geometry::ElementType sofa::component::mass::MeshMatrixMass< DataTypes, GeometricalTypes >::m_massTopologyType. protected . The type of topology to build the mass from the topology. . ◆ m_topology. template<class DataTypes , class GeometricalTypes = DataTypes> . template<typename T = GeometricalTypes, typename std::enable_if_t< T::spatial_dimensions > = 3, int > . sofa::core::topology::BaseMeshTopology* sofa::component::mass::MeshMatrixMass< DataTypes, GeometricalTypes >::m_topology. protected . Initial value:= 0 >; void applyEdgeMassHexahedronDestruction(const sofa::type::vector<Index>& ); sofa::type::vector< Index >. Pointer to the topology container. Will be set by link. ; Method to update See alsod_edgeMass using mass matrix coefficient when a new Triangle is created. Will be set as callback in the EdgeData . d_edgeMass to update the mass vector when TRIANGLESADDED event is fired. Method to update . d_edgeMass using mass matrix coefficient when a Triangle is removed. Will be set as callback in the EdgeData . d_edgeMass to update the mass vector when TRIANGLESREMOVED event is fired. Method to update . d_edgeMass using mass matrix coefficient when a new Quad is created. Will be set as callback in the EdgeData . d_edgeMass to update the mass vector when QUADSADDED event is fired. Method to update . d_edgeMass using mass matrix coefficient when a Quad is removed. Will be set as callback in the EdgeData . d_edgeMass to update the mass vector when QUADSREMOVED event is fired. Method to update . d_edgeMass using mass matrix coefficient when a new Tetrahedron is created. Will be set as callback in the EdgeData . d_edgeMass to update the mass vector when TETRAHEDRAADDED event is fired. Method to update . d_edgeMass using mass matrix coefficient when a Tetrahedron is removed. Will be set as callback in the EdgeData . d_edgeMass to upda",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_mesh_matrix_mass.html:33154,update,update,33154,api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_mesh_matrix_mass.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_mesh_matrix_mass.html,1,['update'],['update']
Deployability,"tricalTypes >::m_topology. protected . Initial value:= 0 >; void applyEdgeMassHexahedronDestruction(const sofa::type::vector<Index>& ); sofa::type::vector< Index >. Pointer to the topology container. Will be set by link. ; Method to update See alsod_edgeMass using mass matrix coefficient when a new Triangle is created. Will be set as callback in the EdgeData . d_edgeMass to update the mass vector when TRIANGLESADDED event is fired. Method to update . d_edgeMass using mass matrix coefficient when a Triangle is removed. Will be set as callback in the EdgeData . d_edgeMass to update the mass vector when TRIANGLESREMOVED event is fired. Method to update . d_edgeMass using mass matrix coefficient when a new Quad is created. Will be set as callback in the EdgeData . d_edgeMass to update the mass vector when QUADSADDED event is fired. Method to update . d_edgeMass using mass matrix coefficient when a Quad is removed. Will be set as callback in the EdgeData . d_edgeMass to update the mass vector when QUADSREMOVED event is fired. Method to update . d_edgeMass using mass matrix coefficient when a new Tetrahedron is created. Will be set as callback in the EdgeData . d_edgeMass to update the mass vector when TETRAHEDRAADDED event is fired. Method to update . d_edgeMass using mass matrix coefficient when a Tetrahedron is removed. Will be set as callback in the EdgeData . d_edgeMass to update the mass vector when TETRAHEDRAREMOVED event is fired. Method to update . d_edgeMass using mass matrix coefficient when a new Hexahedron is created. Will be set as callback in the EdgeData . d_edgeMass to update the mass vector when HEXAHEDRAADDED event is fired. Method to update . d_vertexMass using mass matrix coefficient when a Hexahedron is removed. Will be set as callback in the EdgeData . d_edgeMass to update the mass vector when HEXAHEDRAREMOVED event is fired. . l_topology . Constructor details. ◆ MeshMatrixMass(). template<class DataTypes , class GeometricalTypes > . sofa::component:",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_mesh_matrix_mass.html:33757,update,update,33757,api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_mesh_matrix_mass.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_mesh_matrix_mass.html,1,['update'],['update']
Deployability,"tring &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(DataEngine, core::objectmodel::BaseObject)sofa::core::DataEngine; SOFA_CLASS(SOFA_TEMPLATE(ExtrudeEdgesAndGenerateQuads, DataTypes), core::DataEngine)sofa::component::engine::generate::ExtrudeEdgesAndGenerateQuads< DataTypes >; sofa::core::DataEngine::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; update() finalsofa::core::DataEnginevirtual; updateAllInputsIfDirty()sofa::core::DataTrackerDDGNode; updateIfDirty() constsofa::core::objectmodel::DDGNode; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; Vec3 typedefsofa::component::engine::generate::ExtrudeEdgesAndGenerateQuads< DataTypes >; VecCoord typedefsofa::component::engine::generate::ExtrudeEdgesAndGenerateQuads< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~DataEngine() overridesofa::core::DataEngineprotected; ~DDGNode()sofa::core::objectmodel::DDGNodevirtual; ~ExtrudeEdgesAndGenerateQuads() override",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_extrude_edges_and_generate_quads-members.html:13497,update,updateAllInputsIfDirty,13497,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_extrude_edges_and_generate_quads-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_extrude_edges_and_generate_quads-members.html,1,['update'],['updateAllInputsIfDirty']
Deployability,"tring &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(DataEngine, core::objectmodel::BaseObject)sofa::core::DataEngine; SOFA_CLASS(SOFA_TEMPLATE(ExtrudeQuadsAndGenerateHexas, DataTypes), core::DataEngine)sofa::component::engine::generate::ExtrudeQuadsAndGenerateHexas< DataTypes >; sofa::core::DataEngine::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; update() finalsofa::core::DataEnginevirtual; updateAllInputsIfDirty()sofa::core::DataTrackerDDGNode; updateIfDirty() constsofa::core::objectmodel::DDGNode; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; Vec3 typedefsofa::component::engine::generate::ExtrudeQuadsAndGenerateHexas< DataTypes >; VecCoord typedefsofa::component::engine::generate::ExtrudeQuadsAndGenerateHexas< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~DataEngine() overridesofa::core::DataEngineprotected; ~DDGNode()sofa::core::objectmodel::DDGNodevirtual; ~ExtrudeQuadsAndGenerateHexas() override",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_extrude_quads_and_generate_hexas-members.html:13724,update,updateAllInputsIfDirty,13724,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_extrude_quads_and_generate_hexas-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_extrude_quads_and_generate_hexas-members.html,1,['update'],['updateAllInputsIfDirty']
Deployability,"tring &name);  ; const std::string & getHelp () const;  Get help message. More...;  ; void setHelp (const std::string &val);  Set help message. More...;  ; void setFlag (LinkFlagsEnum flag, bool b);  Set one of the flags. More...;  ; bool getFlag (LinkFlagsEnum flag) const;  Get one flag. More...;  ; bool isMultiLink () const;  ; bool isStrongLink () const;  ; bool isDoubleLink () const;  ; bool isDuplicate () const;  ; bool storePath () const;  ; void setPersistent (bool b);  Alias to match BaseData API. More...;  ; bool isPersistent () const;  ; bool isReadOnly () const;  Alias to match BaseData API. More...;  ; int getCounter () const;  ; void setLinkedBase (Base *link);  ; Base * getLinkedBase (std::size_t index=0) const;  ; void clear ();  ; std::string getLinkedPath (const std::size_t index=0) const;  ; std::string getPath (std::size_t index=0) const;  ; bool read (const std::string &str);  Read the command line. More...;  ; bool updateLinks ();  ; virtual void printValue (std::ostream &) const;  Print the value of the associated variable. More...;  ; virtual std::string getValueString () const;  Print the value of the associated variable. More...;  ; virtual std::string getValueTypeString () const;  Print the value type of the associated variable. More...;  ; bool parseString (const std::string &text, std::string *path, std::string *data=nullptr) const;  ; Base * getOwner () const;  ; void setOwner (Base *owner);  ; bool add (Base *baseptr, const std::string &path);  Add a new target to the link. More...;  ; bool set (Base *baseptr, size_t index=0);  Change the link's target at the provided index. More...;  . Additional Inherited Members;  Static Public Attributes inherited from sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >; static constexpr unsigned ActiveFlags = TFlags;  ; static constexpr bool IsStrongLink = (ActiveFlags & FLAG_STRONGLINK) != 0;  ; static constexpr bool IsMultiLink = (ActiveFlags & FLAG_MULTILINK) != 0;  ; static constexpr",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node_sequence.html:3292,update,updateLinks,3292,api/master/sofa/html/classsofa_1_1simulation_1_1_node_sequence.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node_sequence.html,2,['update'],['updateLinks']
Deployability,"tring &name);  ; const std::string & getHelp () const;  Get help message. More...;  ; void setHelp (const std::string &val);  Set help message. More...;  ; void setFlag (LinkFlagsEnum flag, bool b);  Set one of the flags. More...;  ; bool getFlag (LinkFlagsEnum flag) const;  Get one flag. More...;  ; bool isMultiLink () const;  ; bool isStrongLink () const;  ; bool isDoubleLink () const;  ; bool isDuplicate () const;  ; bool storePath () const;  ; void setPersistent (bool b);  Alias to match BaseData API. More...;  ; bool isPersistent () const;  ; bool isReadOnly () const;  Alias to match BaseData API. More...;  ; int getCounter () const;  ; void setLinkedBase (Base *link);  ; Base * getLinkedBase (std::size_t index=0) const;  ; void clear ();  ; std::string getLinkedPath (const std::size_t index=0) const;  ; std::string getPath (std::size_t index=0) const;  ; bool read (const std::string &str);  Read the command line. More...;  ; bool updateLinks ();  ; virtual void printValue (std::ostream &) const;  Print the value of the associated variable. More...;  ; virtual std::string getValueString () const;  Print the value of the associated variable. More...;  ; virtual std::string getValueTypeString () const;  Print the value type of the associated variable. More...;  ; bool parseString (const std::string &text, std::string *path, std::string *data=nullptr) const;  ; Base * getOwner () const;  ; void setOwner (Base *owner);  ; bool add (Base *baseptr, const std::string &path);  Add a new target to the link. More...;  ; bool set (Base *baseptr, size_t index=0);  Change the link's target at the provided index. More...;  . Protected Member Functions; DestType * getIndex (std::size_t index) const;  ; virtual void added (DestPtr ptr, std::size_t index)=0;  ; virtual void removed (DestPtr ptr, std::size_t index)=0;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseLink; void updateCounter ();  . Additional Inherited Members;  Static Public Member Funct",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_t_link.html:3555,update,updateLinks,3555,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_t_link.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_t_link.html,1,['update'],['updateLinks']
Deployability,"tring &name);  ; const std::string & getHelp () const;  Get help message. More...;  ; void setHelp (const std::string &val);  Set help message. More...;  ; void setFlag (LinkFlagsEnum flag, bool b);  Set one of the flags. More...;  ; bool getFlag (LinkFlagsEnum flag) const;  Get one flag. More...;  ; bool isMultiLink () const;  ; bool isStrongLink () const;  ; bool isDoubleLink () const;  ; bool isDuplicate () const;  ; bool storePath () const;  ; void setPersistent (bool b);  Alias to match BaseData API. More...;  ; bool isPersistent () const;  ; bool isReadOnly () const;  Alias to match BaseData API. More...;  ; int getCounter () const;  ; void setLinkedBase (Base *link);  ; Base * getLinkedBase (std::size_t index=0) const;  ; void clear ();  ; std::string getLinkedPath (const std::size_t index=0) const;  ; std::string getPath (std::size_t index=0) const;  ; bool read (const std::string &str);  Read the command line. More...;  ; bool updateLinks ();  ; virtual void printValue (std::ostream &) const;  Print the value of the associated variable. More...;  ; virtual std::string getValueString () const;  Print the value of the associated variable. More...;  ; virtual std::string getValueTypeString () const;  Print the value type of the associated variable. More...;  ; bool parseString (const std::string &text, std::string *path, std::string *data=nullptr) const;  ; Base * getOwner () const;  ; void setOwner (Base *owner);  ; bool add (Base *baseptr, const std::string &path);  Add a new target to the link. More...;  ; bool set (Base *baseptr, size_t index=0);  Change the link's target at the provided index. More...;  . Protected Member Functions; void added (DestPtr val, std::size_t index);  ; void removed (DestPtr val, std::size_t index);  ;  Protected Member Functions inherited from sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags|BaseLink::FLAG_MULTILINK >; DestType * getIndex (std::size_t index) const;  ;  Protected Member Functions inherited from sofa:",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_multi_link.html:3834,update,updateLinks,3834,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_multi_link.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_multi_link.html,1,['update'],['updateLinks']
Deployability,"tring &name);  ; const std::string & getHelp () const;  Get help message. More...;  ; void setHelp (const std::string &val);  Set help message. More...;  ; void setFlag (LinkFlagsEnum flag, bool b);  Set one of the flags. More...;  ; bool getFlag (LinkFlagsEnum flag) const;  Get one flag. More...;  ; bool isMultiLink () const;  ; bool isStrongLink () const;  ; bool isDoubleLink () const;  ; bool isDuplicate () const;  ; bool storePath () const;  ; void setPersistent (bool b);  Alias to match BaseData API. More...;  ; bool isPersistent () const;  ; bool isReadOnly () const;  Alias to match BaseData API. More...;  ; int getCounter () const;  ; void setLinkedBase (Base *link);  ; Base * getLinkedBase (std::size_t index=0) const;  ; void clear ();  ; std::string getLinkedPath (const std::size_t index=0) const;  ; std::string getPath (std::size_t index=0) const;  ; bool read (const std::string &str);  Read the command line. More...;  ; bool updateLinks ();  ; virtual void printValue (std::ostream &) const;  Print the value of the associated variable. More...;  ; virtual std::string getValueString () const;  Print the value of the associated variable. More...;  ; virtual std::string getValueTypeString () const;  Print the value type of the associated variable. More...;  ; bool parseString (const std::string &text, std::string *path, std::string *data=nullptr) const;  ; Base * getOwner () const;  ; void setOwner (Base *owner);  ; bool add (Base *baseptr, const std::string &path);  Add a new target to the link. More...;  ; bool set (Base *baseptr, size_t index=0);  Change the link's target at the provided index. More...;  . Protected Member Functions; void added (DestPtr val, std::size_t);  ; void removed (DestPtr val, std::size_t);  ; void changed (DestPtr before, DestPtr val);  ;  Protected Member Functions inherited from sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags &~BaseLink::FLAG_MULTILINK >; DestType * getIndex (std::size_t index) const;  ;  Protected ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_single_link.html:4123,update,updateLinks,4123,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_single_link.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_single_link.html,1,['update'],['updateLinks']
Deployability,"tring &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(AbstractTransformMatrixEngine, core::DataEngine)sofa::component::engine::transform::AbstractTransformMatrixEngine; sofa::core::DataEngine::SOFA_ABSTRACT_CLASS(DataEngine, core::objectmodel::BaseObject)sofa::core::DataEngine; SOFA_CLASS(ScaleTransformMatrixEngine, AbstractTransformMatrixEngine)sofa::component::engine::transform::ScaleTransformMatrixEngine; sofa::component::engine::transform::AbstractTransformMatrixEngine::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; update() finalsofa::core::DataEnginevirtual; updateAllInputsIfDirty()sofa::core::DataTrackerDDGNode; updateIfDirty() constsofa::core::objectmodel::DDGNode; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~AbstractTransformMatrixEngine() overridesofa::component::engine::transform::AbstractTransformMatrixEngineinlineprotected; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~DataEngine() overridesofa::core::DataEngineprotected; ~DDGNode()sofa::core::objectmodel::DDGNodevirtual; ~ScaleTransformMatrixEngine() overridesofa::component::engine::transform::ScaleTransformMatrixEngineinlineprotected.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_scale_transform_matrix_engine-members.html:12717,update,updateIfDirty,12717,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_scale_transform_matrix_engine-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_scale_transform_matrix_engine-members.html,3,['update'],"['updateIfDirty', 'updateInternal', 'updateLinks']"
Deployability,"tring &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(DataEngine, core::objectmodel::BaseObject)sofa::core::DataEngine; SOFA_ATTRIBUTE_REPLACED__TYPEMEMBER(Index, sofa::Index)sofa::component::engine::select::IndicesFromValues< T >; SOFA_CLASS(SOFA_TEMPLATE(IndicesFromValues, T), core::DataEngine)sofa::component::engine::select::IndicesFromValues< T >; sofa::core::DataEngine::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; update() finalsofa::core::DataEnginevirtual; updateAllInputsIfDirty()sofa::core::DataTrackerDDGNode; updateIfDirty() constsofa::core::objectmodel::DDGNode; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; Value typedefsofa::component::engine::select::IndicesFromValues< T >; VecData typedefsofa::core::objectmodel::Base; VecIndex typedefsofa::component::engine::select::IndicesFromValues< T >; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VecValue typedefsofa::component::engine::select::IndicesFromValues< T >; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~DataEngine() overridesofa::core::DataEngineprotected; ~DDGNode()sofa::core::objectmodel::DDGNodevirtual; ~Indices",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_indices_from_values-members.html:12488,update,updateAllInputsIfDirty,12488,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_indices_from_values-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_indices_from_values-members.html,1,['update'],['updateAllInputsIfDirty']
Deployability,"tring &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(DataEngine, core::objectmodel::BaseObject)sofa::core::DataEngine; SOFA_ATTRIBUTE_REPLACED__TYPEMEMBER(Index, sofa::Index)sofa::component::engine::select::ValuesFromIndices< T >; SOFA_CLASS(SOFA_TEMPLATE(ValuesFromIndices, T), core::DataEngine)sofa::component::engine::select::ValuesFromIndices< T >; sofa::core::DataEngine::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; update() finalsofa::core::DataEnginevirtual; updateAllInputsIfDirty()sofa::core::DataTrackerDDGNode; updateIfDirty() constsofa::core::objectmodel::DDGNode; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; Value typedefsofa::component::engine::select::ValuesFromIndices< T >; ValuesFromIndices()sofa::component::engine::select::ValuesFromIndices< T >protected; VecData typedefsofa::core::objectmodel::Base; VecIndex typedefsofa::component::engine::select::ValuesFromIndices< T >; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VecValue typedefsofa::component::engine::select::ValuesFromIndices< T >; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~DataEngine() overridesofa::c",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_values_from_indices-members.html:12316,update,updateAllInputsIfDirty,12316,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_values_from_indices-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_values_from_indices-members.html,1,['update'],['updateAllInputsIfDirty']
Deployability,"tring > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setTo(BaseState *to)sofa::core::BaseMappingvirtual; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(SOFA_TEMPLATE3(Multi2Mapping, TIn1, TIn2, TOut), BaseMapping)sofa::core::Multi2Mapping< TIn1, TIn2, TOut >; sofa::core::BaseMapping::SOFA_ABSTRACT_CLASS(BaseMapping, objectmodel::BaseObject)sofa::core::BaseMapping; SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; testMechanicalState(BaseState *state)sofa::core::BaseMappingprotected; toModelssofa::core::Multi2Mapping< TIn1, TIn2, TOut >protected; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateK(const MechanicalParams *, ConstMultiVecDerivId)sofa::core::BaseMappinginlinevirtual; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecFromModels1 typedefsofa::core::Multi2Mapping< TIn1, TIn2, TOut >; VecFromModels2 typedefsofa::core::Multi2Mapping< TIn1, TIn2, TOut >; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VecToModels typedefsofa::core::Multi2Mapping< TIn1, TIn2, TOut >; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseMapping() overridesofa::core::BaseMappingprotected; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~Multi2Mapping() overridesofa::core::Multi2Mapping< TIn1, TIn2, TOut >inlineprotect",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_multi2_mapping-members.html:18835,update,updateInternal,18835,api/master/sofa/html/classsofa_1_1core_1_1_multi2_mapping-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_multi2_mapping-members.html,1,['update'],['updateInternal']
Deployability,"tring > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(BaseController, core::objectmodel::BaseObject)sofa::core::behavior::BaseController; SOFA_CLASS(SOFA_TEMPLATE(MechanicalStateController, DataTypes), Controller)sofa::component::controller::MechanicalStateController< DataTypes >; sofa::component::controller::Controller::SOFA_CLASS(Controller, core::behavior::BaseController)sofa::component::controller::Controller; sofa::core::behavior::BaseController::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecCoord typedefsofa::component::controller::MechanicalStateController< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecDeriv typedefsofa::component::controller::MechanicalStateController< DataTypes >; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; Wheel enum valuesofa::component::controller::MechanicalStateController< DataTypes >protected; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~Controller() overridesofa::component::controller::Controllerprotected; ~MechanicalStateController() overridesofa::component::controller::MechanicalStateController< DataType",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1controller_1_1_mechanical_state_controller-members.html:14920,update,updateInternal,14920,api/master/sofa/html/classsofa_1_1component_1_1controller_1_1_mechanical_state_controller-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1controller_1_1_mechanical_state_controller-members.html,1,['update'],['updateInternal']
Deployability,"tring > id;  Name of element (corresponding with the shader) More...;  ; Data< unsigned int > indexShader;  Name of element (corresponding with the shader) More...;  ; std::set< OglShader * > shaders;  Shader to use the element with. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseObject; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  ;  Protected Member Functions inherited from sofa::gl::component::shader::OglVariable< type::Vec< 2, int > >;  OglVariable ();  ;  ~OglVariable () override;  ;  Protected Member Functions inherited from sofa::core::visual::VisualModel;  VisualModel ();  ;  ~VisualModel () override;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initDa",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_int2_variable.html:15414,update,update,15414,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_int2_variable.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_int2_variable.html,1,['update'],['update']
Deployability,"tring > id;  Name of element (corresponding with the shader) More...;  ; Data< unsigned int > indexShader;  Name of element (corresponding with the shader) More...;  ; std::set< OglShader * > shaders;  Shader to use the element with. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseObject; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  ;  Protected Member Functions inherited from sofa::gl::component::shader::OglVariable< type::Vec< 3, int > >;  OglVariable ();  ;  ~OglVariable () override;  ;  Protected Member Functions inherited from sofa::core::visual::VisualModel;  VisualModel ();  ;  ~VisualModel () override;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initDa",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_int3_variable.html:15414,update,update,15414,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_int3_variable.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_int3_variable.html,1,['update'],['update']
Deployability,"tring > id;  Name of element (corresponding with the shader) More...;  ; Data< unsigned int > indexShader;  Name of element (corresponding with the shader) More...;  ; std::set< OglShader * > shaders;  Shader to use the element with. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseObject; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  ;  Protected Member Functions inherited from sofa::gl::component::shader::OglVariable< type::Vec< 4, int > >;  OglVariable ();  ;  ~OglVariable () override;  ;  Protected Member Functions inherited from sofa::core::visual::VisualModel;  VisualModel ();  ;  ~VisualModel () override;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initDa",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_int4_variable.html:15414,update,update,15414,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_int4_variable.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_int4_variable.html,1,['update'],['update']
Deployability,"tring > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  . Static Public Attributes; static const int defaultDepthValue = 6;  . Public Member Functions;  SOFA_CLASS (CollisionPipeline, sofa::simulation::PipelineImpl);  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; std::set< std::string > getResponseList () const override;  get the set of response available with the current collision pipeline More...;  ;  Public Member Functions inherited from sofa::simulation::PipelineImpl; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; void reset () override;  Reset to initial state. More...;  ; void computeCollisionReset () override;  Remove collision response from last step. More...;  ; void computeCollisionDetection () override;  Detect new collisions. Note that this step must not modify the simulation graph. More...;  ; void computeCollisionResponse () override;  Add collision response in the simulation graph. More...;  ;  Public Member Functions inherited from sofa::core::collision::Pipeline;  SOFA_ABSTRACT_CLASS (Pipeline, sofa::core::objectmodel::BaseObject);  ; void computeCollisions ();  ; const BroadPhaseDetection * getBroadPhaseDetection () const;  Broad phase collision detection method accessor. More...;  ; const NarrowPhaseDetection",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_collision_pipeline.html:2030,pipeline,pipeline,2030,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_collision_pipeline.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_collision_pipeline.html,1,['pipeline'],['pipeline']
Deployability,"tructor. More...;  ; virtual ~DDGNode ();  Destructor. Automatically remove remaining links. More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void delInput (DDGNode *n);  Remove an input from this node. More...;  ; void addOutput (DDGNode *n);  Add a new output to this node. More...;  ; void delOutput (DDGNode *n);  Remove an output from this node. More...;  ; const DDGLinkContainer & getInputs ();  Get the list of inputs for this DDGNode. More...;  ; const DDGLinkContainer & getOutputs ();  Get the list of outputs for this DDGNode. More...;  ; bool isDirty () const;  Returns true if the DDGNode needs to be updated. More...;  ; virtual void setDirtyValue ();  Indicate the value needs to be updated. More...;  ; virtual void setDirtyOutputs ();  Indicate the outputs needs to be updated. This method must be called after changing the value of this node. More...;  ; void cleanDirty ();  Set dirty flag to false. More...;  ; void updateIfDirty () const;  Utility method to call update if necessary. This method should be called before reading of writing the value of this node. More...;  . Additional Inherited Members;  Protected Attributes inherited from sofa::core::objectmodel::DDGNode; DDGLinkContainer inputs;  ; DDGLinkContainer outputs;  ;  Protected Member Functions inherited from sofa::core::objectmodel::DDGNode; virtual void doAddInput (DDGNode *n);  ; virtual void doDelInput (DDGNode *n);  ; virtual void doAddOutput (DDGNode *n);  ; virtual void doDelOutput (DDGNode *n);  ; void cleanDirtyOutputsOfInputs ();  the dirtyOutputs flags of all the inputs will be set to false More...;  . Attribute details. ◆ item. QTreeWidgetItem* sofa::gui::qt::ObjectStateListener::item. ◆ object. sofa::core::objectmodel::Base::SPtr sofa::gui::qt::ObjectStateListener::object. Constructor details. ◆ ObjectStateListener(). sofa::gui::qt::ObjectStateListener::ObjectStateListener ; (; QTreeWidgetItem * ; item_, . sofa::core::objectmodel::Base * ; object_ . ).",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_object_state_listener.html:2062,update,updateIfDirty,2062,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_object_state_listener.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_object_state_listener.html,2,['update'],"['update', 'updateIfDirty']"
Deployability,"tryAlgorithms ();  ; bool mustComputeBBox () const override;  Return true if the visibility parameters are showing the object in any way whatsoever, false otherwise. More...;  ;  Protected Member Functions inherited from sofa::component::topology::container::dynamic::EdgeSetGeometryAlgorithms< DataTypes >;  EdgeSetGeometryAlgorithms ();  ;  ~EdgeSetGeometryAlgorithms () override;  ; void defineEdgeCubaturePoints ();  ;  Protected Member Functions inherited from sofa::component::topology::container::dynamic::PointSetGeometryAlgorithms< DataTypes >;  PointSetGeometryAlgorithms ();  ;  ~PointSetGeometryAlgorithms () override;  ;  Protected Member Functions inherited from sofa::core::topology::GeometryAlgorithms;  GeometryAlgorithms ();  Constructor. More...;  ;  ~GeometryAlgorithms () override;  Destructor. More...;  ;  Protected Member Functions inherited from sofa::core::topology::BaseTopologyObject;  BaseTopologyObject ();  ;  ~BaseTopologyObject () override;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; vo",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_dynamic_sparse_grid_geometry_algorithms.html:27396,update,update,27396,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_dynamic_sparse_grid_geometry_algorithms.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_dynamic_sparse_grid_geometry_algorithms.html,5,['update'],['update']
Deployability,"ts ();  ; virtual void setDataReadOnly (bool readOnly);  This method is called after createWidgets to configure whether the created widgets should be read-only. More...;  ; virtual unsigned int numColumnWidget ();  Helper method for column. More...;  ;  Public Member Functions inherited from sofa::gui::qt::TDataWidget< VectorMaterial >;  TDataWidget (QWidget *parent, const char *name, MyTData *d);  ; sofa::core::objectmodel::Data< VectorMaterial > * getData ();  ; const sofa::core::objectmodel::Data< VectorMaterial > * getData () const;  ; virtual void setData (MyTData *d);  ; virtual void setData (MyData *d);  ;  Public Member Functions inherited from sofa::gui::qt::DataWidget;  DataWidget (QWidget *parent, const char *name, MyData *d);  ;  ~DataWidget () override;  ; virtual void setData (MyData *d);  ; const core::objectmodel::BaseData * getBaseData () const;  BaseData pointer accessor function. More...;  ; core::objectmodel::BaseData * getBaseData ();  ; void updateVisibility ();  ; bool isDirty ();  ; bool isFilled ();  return if DataWidget as been filled More...;  ; void setFilled (bool value);  method to warn if Data has not been filled at constructor. More...;  ; virtual unsigned int sizeWidget ();  Helper method to give a size. More...;  . Protected Member Functions; virtual void readFromData ();  The implementation of this method tells how the widget reads the value of the data. More...;  ; virtual void writeToData ();  . Protected Slots; void changeMaterial (int);  . Additional Inherited Members;  Static Public Member Functions inherited from sofa::gui::qt::TDataWidget< VectorMaterial >; static RealObject * create (RealObject *, CreatorArgument &arg);  ;  Static Public Member Functions inherited from sofa::gui::qt::DataWidget; template<class T > ; static T * create (T *, const CreatorArgument &arg);  ; static DataWidget * CreateDataWidget (const DataWidget::CreatorArgument &dwarg);  ;  Signals inherited from sofa::gui::qt::DataWidget; void WidgetDirty (boo",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1materialdatawidget__h_1_1_vector_material_data_widget.html:2272,update,updateVisibility,2272,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1materialdatawidget__h_1_1_vector_material_data_widget.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1materialdatawidget__h_1_1_vector_material_data_widget.html,1,['update'],['updateVisibility']
Deployability,"ts the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  . Public Member Functions;  SOFA_CLASS (SOFA_TEMPLATE(Indices2ValuesMapper, DataTypes), sofa::core::DataEngine);  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; void reinit () override;  Update method called when variables used in precomputation are modified. More...;  ; void doUpdate () override;  Where you put your engine's impl. More...;  ;  Public Member Functions inherited from sofa::core::DataEngine;  SOFA_ABSTRACT_CLASS (DataEngine, core::objectmodel::BaseObject);  ; void update () final;  ; void addInput (sofa::core::objectmodel::BaseData *data);  Add a new input to this engine. More...;  ; void addOutput (objectmodel::BaseData *n);  Add a new output to this engine. More...;  ;  Public Member Functions inherited from sofa::core::DataTrackerDDGNode;  DataTrackerDDGNode ();  ; void addInputs (std::initializer_list< sofa::core::objectmodel::BaseData * > datas);  Create a DataCallback object associated with multiple Data fields. More...;  ; void addOutputs (std::initializer_list< sofa::core::objectmodel::BaseData * > datas);  ; virtual void cleanDirty (const core::ExecParams *params=nullptr);  ; void updateAllInputsIfDirty ();  ;  Public Member Functions inherited from sofa::core::objectmodel::DDGNode;  DDGNode ();  Constructor. More...;  ; virtual ~DDGNode ();  Destructor. Automatically remove remaining links. More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void delInput (DDGNode *n);  Remove an input fr",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_indices2_values_mapper.html:2547,update,update,2547,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_indices2_values_mapper.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_indices2_values_mapper.html,1,['update'],['update']
Deployability,ttee #3 upcoming: raise your expectations!. /sofa-technologies-exhibited-amd-learning-day-in-paris; ; SOFA – SOFA technologies exhibited @ AMD Learning Day in Paris. /sofa-training-discover-and-learn-sofa-at-ismar2017; ; SOFA – SOFA training: discover and learn SOFA at ISMAR 2017. /sofa-v16-12-has-been-released; ; SOFA – SOFA v16.12 has been released!. /sofa-v17-06-has-been-released; ; SOFA – SOFA v17.06 has been released!. /sofa-v17-12-has-been-released; ; SOFA – SOFA v17.12 has been released!. /sofa-v18-06-has-been-released; ; SOFA – SOFA v18.06 has been released!. /sofa-v18-12-has-been-released; ; SOFA – SOFA v18.12 has been released!. /sofa-v19-06-has-been-released; ; SOFA – SOFA v19.06 has been released!. /sofa-v19-12-has-been-released; ; SOFA – SOFA v19.12 has been released!. /sofa-v20-06-has-been-released; ; SOFA – SOFA v20.06 has been released!. /sofa-v20-12-has-been-released; ; SOFA – SOFA v20.12 has been released!. /sofa-v21-06-has-been-released; ; SOFA – SOFA v21.06 has been released!. /sofa-v21-12-has-been-released; ; SOFA – SOFA v21.12 has been released!. /sofa-v22-06-has-been-released; ; SOFA – SOFA v22.06 has been released!. /sofa-v22-12-has-been-released; ; SOFA – SOFA v22.12 has been released!. /sofa-v23-06-has-been-released; ; SOFA – SOFA v23.06 has been released!. /sofa-v23-12-has-been-released; ; SOFA – SOFA v23.12 has been released!. /sofa-v24-06-has-been-released; ; SOFA – SOFA v24.06 has been released!. /sofa-week-2018-experience; ; SOFA – SOFA Week 2018 Experience. /sofa-week-2021-register-now; ; SOFA – SOFA Week 2021: register now!. /sofa-week-2022-register-now; ; SOFA – SOFA Week 2022: register now!. /sofa-week-2023-register-now; ; SOFA – SOFA Week 2023: register now!. /sofa-week-2024-registration-is-open; ; SOFA – SOFA Week 2024: registration is open!. /soft-robotics-summer-school-in-lille; ; SOFA – Soft-Robotics Summer School in Lille. /softrobots-inverse-plugin-open-source-release; ; SOFA – SoftRobots.Inverse plugin open-source release!.,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/index-wcopy.html:9363,release,released,9363,index-wcopy.html,https://www.sofa-framework.org,https://www.sofa-framework.org/index-wcopy.html,1,['release'],['released']
Deployability,"ttributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  . Public Member Functions;  SOFA_ABSTRACT_CLASS (LinearSolver, BaseLinearSolver);  ; virtual void resetSystem ()=0;  Reset the current linear system. More...;  ; virtual void setSystemMBKMatrix (const MechanicalParams *mparams)=0;  ; virtual void rebuildSystem (SReal, SReal);  ; virtual bool isAsyncSolver ();  Indicate if the solver update the system in parallel. More...;  ; virtual bool supportNonSymmetricSystem () const;  Returns true if the solver supports non-symmetric systems. More...;  ; virtual bool hasUpdatedMatrix ();  Indicate if the solver updated the system after the last call of setSystemMBKMatrix (should return true if isParallelSolver return false) More...;  ; virtual void updateSystemMatrix ();  This function is use for the preconditioner it must be called at each time step event if setSystemMBKMatrix is not called. More...;  ; virtual void setSystemRHVector (core::MultiVecDerivId v)=0;  Set the linear system right-hand term vector, from the values contained in the (Mechanical/Physical)State objects. More...;  ; virtual void setSystemLHVector (core::MultiVecDerivId v)=0;  ; virtual void solveSystem ()=0;  Solve the system as constructed using the previous methods. More...;  ; virtual void init_partial_solve ();  ; virtual void partial_solve (std::list< linearalgebra::BaseMatrix::Index > &, std::list< linearalgebra::BaseMatrix::Index > &, bool);  ; virtual void invertSystem ();  Invert the system, this method is optional because it's called when solveSystem() is called for the first time. More...;  ; virtual bool addMInvJt (linearalgebra::BaseMa",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_linear_solver.html:1803,update,updated,1803,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_linear_solver.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_linear_solver.html,1,['update'],['updated']
Deployability,"ttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  . Public Member Functions;  SOFA_CLASS (SubsetTopologicalMapping, sofa::core::topology::TopologicalMapping);  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; void updateTopologicalMappingTopDown () override;  Translates the TopologyChange objects from the source to the target. More...;  ; bool isTheOutputTopologySubdividingTheInputOne () override;  return true if the output topology subdivide the input one. (the topology uses the Loc2GlobVec/Glob2LocMap/In2OutMap structs and share the same DOFs) More...;  ; Index getGlobIndex (Index ind) override;  ; Index getFromIndex (Index ind) override;  ;  Public Member Functions inherited from sofa::core::topology::TopologicalMapping;  SOFA_ABSTRACT_CLASS (TopologicalMapping, objectmodel::BaseObject);  ; virtual void setTopologies (In *from, Out *to);  Specify the input and output models. More...;  ; void setPathInputObject (const std::string &o);  Set the path to the objects mapped in the scene graph. More...;  ; void setPathOutputObject (const std::string &o);  ; In * getFrom ();  Accessor to the INPUT topology of the TopologicalMapping : More...;  ; Out * getTo ();  Accessor to the OUTPUT topology of the TopologicalMapping : More...;  ; virtual void upda",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1mapping_1_1_subset_topological_mapping.html:5377,update,updateTopologicalMappingTopDown,5377,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1mapping_1_1_subset_topological_mapping.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1mapping_1_1_subset_topological_mapping.html,1,['update'],['updateTopologicalMappingTopDown']
Deployability,"tual; StrainDisplacementTransposed typedefsofa::component::solidmechanics::fem::elastic::TetrahedralCorotationalFEMForceField< DataTypes >; TetrahedralCorotationalFEMForceField()sofa::component::solidmechanics::fem::elastic::TetrahedralCorotationalFEMForceField< DataTypes >protected; tetrahedronInfosofa::component::solidmechanics::fem::elastic::TetrahedralCorotationalFEMForceField< DataTypes >; toLameParameters(_2DMaterials, Real youngModulus, Real poissonRatio)sofa::component::solidmechanics::fem::elastic::BaseLinearElasticityFEMForceField< DataTypes >static; toLameParameters(_3DMaterials, Real youngModulus, Real poissonRatio)sofa::component::solidmechanics::fem::elastic::BaseLinearElasticityFEMForceField< DataTypes >static; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; Transformation typedefsofa::component::solidmechanics::fem::elastic::TetrahedralCorotationalFEMForceField< DataTypes >; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecCoord typedefsofa::component::solidmechanics::fem::elastic::TetrahedralCorotationalFEMForceField< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecDeriv typedefsofa::component::solidmechanics::fem::elastic::TetrahedralCorotationalFEMForceField< DataTypes >; VecLink typedefsofa::core::objectmodel::Base; VecReal typedefsofa::component::solidmechanics::fem::elastic::TetrahedralCorotationalFEMForceField< DataTypes >; VecSlaves typedefsofa::core::objectmodel::BaseObject; Vector typedefsofa::component::solidmechanics::fem::elastic::TetrahedralCorotationalFEMForceField< DataTypes >; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseForceField() override=defaultsofa::core::behavior::BaseForceFieldprotected; ~BaseObject() override",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_tetrahedral_corotational_f_e_m_force_field-members.html:28629,update,updateLinks,28629,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_tetrahedral_corotational_f_e_m_force_field-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_tetrahedral_corotational_f_e_m_force_field-members.html,1,['update'],['updateLinks']
Deployability,"tual; removeTag(Tag t)sofa::core::objectmodel::Base; reset()sofa::core::objectmodel::BaseObjectvirtual; setDefinitionSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setDefinitionSourceFilePos(const int)sofa::core::objectmodel::Base; setInstanciationSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setInstanciationSourceFilePos(const int)sofa::core::objectmodel::Base; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_CLASS(NaturalOrderingMethod, core::behavior::BaseOrderingMethod)sofa::component::linearsolver::ordering::NaturalOrderingMethod; sofa::core::behavior::BaseOrderingMethod::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~BaseOrderingMethod() overridesofa::core::behavior::BaseOrderingMethod.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsolver_1_1ordering_1_1_natural_ordering_method-members.html:10189,update,updateInternal,10189,api/master/sofa/html/classsofa_1_1component_1_1linearsolver_1_1ordering_1_1_natural_ordering_method-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsolver_1_1ordering_1_1_natural_ordering_method-members.html,2,['update'],"['updateInternal', 'updateLinks']"
Deployability,"tual; testIntersection(collision::geometry::Cube &cube1, collision::geometry::Cube &cube2)=deletesofa::component::collision::detection::intersection::BaseProximityIntersectionvirtual; sofa::component::collision::detection::intersection::DiscreteIntersection::testIntersection(collision::geometry::Sphere &sph1, collision::geometry::Sphere &sph2, const core::collision::Intersection *currentIntersection)sofa::component::collision::detection::intersection::DiscreteIntersectionvirtual; sofa::component::collision::detection::intersection::DiscreteIntersection::testIntersection(collision::geometry::Sphere &sph1, collision::geometry::Sphere &sph2)=deletesofa::component::collision::detection::intersection::DiscreteIntersectionvirtual; testIntersectionSphere(SphereType1 &sph1, SphereType2 &sph2, const SReal alarmDist)sofa::component::collision::detection::intersection::DiscreteIntersectioninlineprotected; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; useContinuous() constsofa::core::collision::Intersectioninlinevirtual; useProximity() const overridesofa::component::collision::detection::intersection::BaseProximityIntersectioninlinevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseIntersector()sofa::core::collision::BaseIntersectorinline; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~BaseProximityIntersection() overridesofa::component::collision::detection::intersection::BaseProximityIntersectioninlineprotected; ~DiscreteIntersection() overridesofa::component:",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1intersection_1_1_base_proximity_intersection-members.html:15138,update,updateInternal,15138,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1intersection_1_1_base_proximity_intersection-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1intersection_1_1_base_proximity_intersection-members.html,1,['update'],['updateInternal']
Deployability,turbances; ; SOFA - Topic: SOFA forum disturbances. /sofa-for-virtual-commissioning; ; SOFA - Topic: SOFA for virtual commissioning?. /sofa-generating-error; ; SOFA - Topic: sofa generating error. /sofa-gui-with-sofapython3; ; SOFA - Topic: Sofa Gui with SofaPython3. /sofahapi-and-mouse-interference; . /feed; ; [SOLVED] SofaHAPI and Mouse Interference – SOFA. /page; . /14; ; SOFA - Topic: [SOLVED] SofaHAPI and Mouse Interference. /15; ; SOFA - Topic: [SOLVED] SofaHAPI and Mouse Interference. /4; ; SOFA - Topic: [SOLVED] SofaHAPI and Mouse Interference. /8; ; SOFA - Topic: [SOLVED] SofaHAPI and Mouse Interference. SOFA - Topic: [SOLVED] SofaHAPI and Mouse Interference. /sofahapi-loading-failed; ; SOFA - Topic: [SOLVED] SofaHAPI loading failed. /sofa-in-c-and-code-optimization-tips; ; SOFA - Topic: SOFA in C++ and Code Optimization Tips. /sofa-installation; . /page; . /13; ; SOFA - Topic: [SOLVED] SOFA installation. /14; ; SOFA - Topic: [SOLVED] SOFA installation. /4; ; SOFA - Topic: [SOLVED] SOFA installation. SOFA - Topic: [SOLVED] SOFA installation. /sofa-in-your-browser; . /page; . /11; ; SOFA - Topic: SOFA in your browser !. /14; ; SOFA - Topic: SOFA in your browser !. /4; ; SOFA - Topic: SOFA in your browser !. SOFA - Topic: SOFA in your browser !. /sofa-launcher-and-modelorderreduction-problems; ; SOFA - Topic: sofa-launcher and modelOrderReduction problems. /sofa-libraries-headers-files-on-different-versions; ; SOFA - Topic: SOFA libraries/headers/files on different versions. /sofa-needs-your-support; ; SOFA - Topic: SOFA needs your support. /sofaphysicsapi-improvementsbackward-compatibility; ; SOFA - Topic: SofaPhysicsAPI improvements/backward compatibility. /sofapluginmanager-h-building; ; SOFA - Topic: [SOLVED] SofaPluginManager.h (building). /sofa-plugin-with-some-additional-libraries; ; SOFA - Topic: SOFA plugin with some additional libraries. /sofapython; . /feed; ; [SOLVED] sofa+python – SOFA. /page; . /2; ; SOFA - Topic: [SOLVED] sofa+python. /5; ; SOF,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/index-wcopy.html:392755,install,installation,392755,index-wcopy.html,https://www.sofa-framework.org,https://www.sofa-framework.org/index-wcopy.html,1,['install'],['installation']
Deployability,"tures ();  ; void doUpdateVisual (const core::visual::VisualParams *) override;  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; void initFromTopology ();  ; void initPositionFromVertices ();  ; void initFromFileMesh ();  ; void exportOBJ (std::string name, std::ostream *out, std::ostream *mtl, sofa::Index &vindex, sofa::Index &nindex, sofa::Index &tindex, int &count) override;  ; bool insertInNode (core::objectmodel::BaseNode *node) override;  ; bool removeInNode (core::objectmodel::BaseNode *node) override;  ;  Public Member Functions inherited from sofa::core::visual::VisualModel;  SOFA_ABSTRACT_CLASS (VisualModel, objectmodel::BaseObject);  ; virtual void drawVisual (const VisualParams *) final;  Display the VisualModel object. More...;  ; void initVisual (const VisualParams *);  Initialize the textures, or other graphical resources. More...;  ; virtual void initVisual () final;  ; void updateVisual (const VisualParams *);  used to update the model if necessary. More...;  ; virtual void updateVisual () final;  ; virtual void clearVisual ();  clear some graphical resources (generally called before the deleteVisitor). More...;  ; virtual void fwdDraw (VisualParams *);  Called before objects in the current branch are displayed. More...;  ; virtual void bwdDraw (VisualParams *);  Called after objects in the current branch are displayed. More...;  ; virtual void parallelUpdateVisual ();  used to update the model if necessary. More...;  ; virtual bool addBBox (SReal *, SReal *);  used to add the bounding-box of this visual model to the given bounding box in order to compute the scene bounding box or cull hidden objects. More...;  ; bool insertInNode (objectmodel::BaseNode *node) override;  ; bool removeInNode (objectmodel::BaseNode *node) override;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObject;  SOFA_CLASS (BaseObject, Base);  ; virtual void draw (const co",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1visual_1_1_visual_model_impl.html:11382,update,updateVisual,11382,api/master/sofa/html/classsofa_1_1component_1_1visual_1_1_visual_model_impl.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1visual_1_1_visual_model_impl.html,2,['update'],"['update', 'updateVisual']"
Deployability,"ty () const;  Returns true if the DDGNode needs to be updated. More...;  ; virtual void setDirtyValue ();  Indicate the value needs to be updated. More...;  ; virtual void setDirtyOutputs ();  Indicate the outputs needs to be updated. This method must be called after changing the value of this node. More...;  ; void cleanDirty ();  Set dirty flag to false. More...;  ; virtual void notifyEndEdit ();  Notify links that the DGNode has been modified. More...;  ; void updateIfDirty () const;  Utility method to call update if necessary. This method should be called before reading of writing the value of this node. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Data< void * >; static constexpr bool isCopyOnWrite ();  ; static std::string templateName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseData; static std::string decodeTypeName (const std::type_info &t);  Helper method to decode the type name to a more readable form if possible. More...;  ; template<class T > ; static std::string typeName ();  Helper method to get the type name of type T. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Data< void * >; std::istream & readValue (std::istream &in);  ; std::istream & readValue (std::istream &in);  ; SOFA_CORE_API std::istream & readValue (std::istream &in);  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseData; bool genericCopyValueFrom (const BaseData *parent);  Try to update this Data from the value of its parent in ""fast mode"";. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::DDGNode; virtual void doAddInput (DDGNode *n);  ; virtual void doAddOutput (DDGNode *n);  ; virtual void doDelOutput (DDGNode *n);  ; void cleanDirtyOutputsOfInputs ();  the dirtyOutputs flags of all the inputs will be set to false More...;  . sofacoreobjectmodelEmptyData; Generated on Mon Nov 11 2024 03:15:53 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_empty_data.html:9943,update,update,9943,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_empty_data.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_empty_data.html,1,['update'],['update']
Deployability,"ty ();  ; bool isDirty ();  ; bool isFilled ();  return if DataWidget as been filled More...;  ; void setFilled (bool value);  method to warn if Data has not been filled at constructor. More...;  ; virtual unsigned int sizeWidget ();  Helper method to give a size. More...;  ; virtual unsigned int numColumnWidget ();  Helper method for column. More...;  . Protected Member Functions; virtual void readFromData ();  The implementation of this method tells how the widget reads the value of the data. More...;  ; virtual void writeToData ();  . Protected Slots; void changeLineEditValue ();  ; void changeSliderValue ();  . Additional Inherited Members;  Static Public Member Functions inherited from sofa::gui::qt::TDataWidget< double >; static RealObject * create (RealObject *, CreatorArgument &arg);  ;  Static Public Member Functions inherited from sofa::gui::qt::DataWidget; template<class T > ; static T * create (T *, const CreatorArgument &arg);  ; static DataWidget * CreateDataWidget (const DataWidget::CreatorArgument &dwarg);  ;  Signals inherited from sofa::gui::qt::DataWidget; void WidgetDirty (bool);  ; void DataOwnerDirty (bool);  ; void dataValueChanged (QString dataValueString);  ;  Public Slots inherited from sofa::gui::qt::DataWidget; void updateDataValue ();  ; void updateWidgetValue ();  ; void setWidgetDirty (bool b=true);  ; void fillFromData ();  . Attribute details. ◆ lineEdit. QLineEdit* sofa::gui::qt::QPoissonRatioWidget::lineEdit. protected . ◆ slider. QSlider* sofa::gui::qt::QPoissonRatioWidget::slider. protected . Constructor details. ◆ QPoissonRatioWidget(). sofa::gui::qt::QPoissonRatioWidget::QPoissonRatioWidget ; (; QWidget * ; parent, . const char * ; name, . core::objectmodel::Data< double > * ; data . ). Function details. ◆ changeLineEditValue. void sofa::gui::qt::QPoissonRatioWidget::changeLineEditValue ; (; ). protectedslot . ◆ changeSliderValue. void sofa::gui::qt::QPoissonRatioWidget::changeSliderValue ; (; ). protectedslot . ◆ createWidgets(",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_poisson_ratio_widget.html:3188,update,updateDataValue,3188,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_poisson_ratio_widget.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_poisson_ratio_widget.html,2,['update'],"['updateDataValue', 'updateWidgetValue']"
Deployability,"ty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  . Protected Attributes; std::map< std::string, Data< std::string > * > variablesData;  ;  Protected Attributes inherited from sofa::component::collision::response::contact::CollisionResponse; ContactMap contactMap;  ; std::map< Instance, ContactMap > storedContactMap;  ; std::map< std::pair< std::string, std::pair< std::string, std::string > >, int > errorMsgCount;  ;  Protected Attributes inherited from sofa::core::collision::ContactManager; Intersection * intersectionMethod;  Current intersection method. More...;  ; ContactVector contacts;  ; std::map< Instance, Intersection * > storedIntersectionMethod;  All intersection methods. More...;  ; std::map< Instance, ContactVector > storedContacts;  ;  Protected Attributes inherited from sofa::core::collision::CollisionAlgorithm; Instance instance;  Current collision 'pipeline' instance, allowing to store multiple internal states. More...;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObject; SingleLink< BaseObject, BaseContext, BaseLink::FLAG_DOUBLELINK > l_context;  ; LinkSlaves l_slaves;  ; SingleLink< BaseObject, BaseObject, BaseLink::FLAG_DOUBLELINK > l_master;  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  . Public Member Functions;  SOFA_CLASS (RuleBasedContactManager, CollisionResponse);  ; virtual std::string getContactResponse (core::CollisionModel *model1, core::CollisionModel *model",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1contact_1_1_rule_based_contact_manager.html:3065,pipeline,pipeline,3065,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1contact_1_1_rule_based_contact_manager.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1contact_1_1_rule_based_contact_manager.html,1,['pipeline'],['pipeline']
Deployability,"ual std::string sofa::gui::common::Operation::defaultPerformerType ; (; ). inlinevirtual . Reimplemented in sofa::gui::common::AddSutureOperation, sofa::gui::common::StartNavigationOperation, sofa::gui::common::AddRecordedCameraOperation, sofa::gui::common::AddFrameOperation, sofa::gui::common::FixOperation, sofa::gui::common::AttachOperation, and sofa::gui::common::ConstraintAttachOperation. ◆ end(). void sofa::gui::common::Operation::end ; (; ). virtual . Reimplemented in sofa::gui::common::TopologyOperation, and sofa::gui::common::InciseOperation. ◆ endOperation(). virtual void sofa::gui::common::Operation::endOperation ; (; ). inlinevirtual . This function is called after each mouse click. ; Reimplemented in sofa::gui::common::TopologyOperation, and sofa::gui::common::InciseOperation. ◆ execution(). virtual void sofa::gui::common::Operation::execution ; (; ). inlinevirtual . This function is called each time the mouse is clicked. ; Reimplemented in sofa::gui::common::TopologyOperation, and sofa::gui::common::InciseOperation. ◆ getId(). std::string sofa::gui::common::Operation::getId ; (; ). inline . ◆ getMouseButton(). MOUSE_BUTTON sofa::gui::common::Operation::getMouseButton ; (; ); const. inline . ◆ GetMouseId(). static MOUSE_BUTTON sofa::gui::common::Operation::GetMouseId ; (; unsigned int ; i). inlinestatic . ◆ setSetting(). virtual void sofa::gui::common::Operation::setSetting ; (; sofa::component::setting::MouseButtonSetting * ; s). inlinevirtual . Reimplemented in sofa::gui::common::AttachOperation. ◆ start(). void sofa::gui::common::Operation::start ; (; ). virtual . Reimplemented in sofa::gui::common::TopologyOperation, and sofa::gui::common::InciseOperation. ◆ wait(). virtual void sofa::gui::common::Operation::wait ; (; ). inlinevirtual . This function is called when shift key is released. . Related details. ◆ OperationFactory. friend class OperationFactory. friend . sofaguicommonOperation; Generated on Mon Nov 11 2024 03:19:18 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1common_1_1_operation.html:5408,release,released,5408,api/master/sofa/html/classsofa_1_1gui_1_1common_1_1_operation.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1common_1_1_operation.html,1,['release'],['released']
Deployability,"ual void getIndicesInSpace (sofa::type::vector< Index > &, Real, Real, Real, Real, Real, Real) const =0;  Get the indices of the particles located in the given bounding box. More...;  ; void copyToBuffer (SReal *dst, ConstVecId src, unsigned n) const override;  ; void copyFromBuffer (VecId dst, const SReal *src, unsigned n) override;  ; void addFromBuffer (VecId dst, const SReal *src, unsigned n) override;  ;  Public Member Functions inherited from sofa::core::behavior::BaseMechanicalState;  SOFA_ABSTRACT_CLASS (BaseMechanicalState, BaseState);  ;  SOFA_BASE_CAST_IMPLEMENTATION (BaseMechanicalState);  ; bool insertInNode (objectmodel::BaseNode *node) override;  ; bool removeInNode (objectmodel::BaseNode *node) override;  ; virtual SReal getPX (Index) const;  ; virtual SReal getPY (Index) const;  ; virtual SReal getPZ (Index) const;  ; virtual void beginIntegration (SReal);  Called at the beginning of each integration step. More...;  ; virtual void endIntegration (const ExecParams *params, SReal);  Called at the end of each integration step. More...;  ; virtual void resetForce (const ExecParams *params, VecDerivId f=VecDerivId::force());  Set F = 0. More...;  ; virtual void resetAcc (const ExecParams *params, VecDerivId a=VecDerivId::dx());  Set Acc =0. More...;  ; virtual void accumulateForce (const ExecParams *params, VecDerivId f=VecDerivId::force());  Add stored external forces to F. More...;  ; virtual void resetConstraint (const ConstraintParams *params)=0;  Reset the constraint matrix. More...;  ; virtual void getConstraintJacobian (const ConstraintParams *params, sofa::linearalgebra::BaseMatrix *J, unsigned int &off)=0;  build the jacobian of the constraint in a baseMatrix More...;  ; virtual void buildIdentityBlocksInJacobian (const sofa::type::vector< unsigned int > &list_n, core::MatrixDerivId &mID)=0;  fill the jacobian matrix (of the constraints) with identity blocks on the provided list of nodes(dofs) More...;  ; virtual std::list< ConstraintBlock > con",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_mechanical_state.html:3712,integrat,integration,3712,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_mechanical_state.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_mechanical_state.html,1,['integrat'],['integration']
Deployability,"ual::VisualModel; sofa::gl::component::shader::OglShaderElement::SOFA_ABSTRACT_CLASS(ShaderElement, objectmodel::BaseObject)sofa::core::visual::ShaderElement; SOFA_CLASS(OglMatrix4VectorVariable, OglVariable< type::vector< type::Mat4x4f > >)sofa::gl::component::shader::OglMatrix4VectorVariable; OglVariable< type::vector< type::Mat4x4f > >::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SOFA_CLASS2(OglVariable, core::visual::VisualModel, OglShaderElement)sofa::gl::component::shader::OglVariable< type::vector< type::Mat4x4f > >; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; transposesofa::gl::component::shader::OglMatrix4VectorVariable; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateVisual(const VisualParams *)sofa::core::visual::VisualModel; updateVisual() finalsofa::core::visual::VisualModelvirtual; valuesofa::gl::component::shader::OglVariable< type::vector< type::Mat4x4f > >; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VisualModel()sofa::core::visual::VisualModelprotected; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~OglMatrix4VectorVariable()sofa::gl::component::shader::OglMatrix4VectorVariableinlinevirtual; ~OglShaderElement() overridesofa::gl::component::shader::OglShaderElementinline; ~OglVariable() overridesofa::gl::component::shader::OglVariable< type::vector< type::Mat4x4f > >inlineprotected; ~ShaderElement() overridesofa::core::visual::ShaderElementinlineprotected; ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_matrix4_vector_variable-members.html:14003,update,updateVisual,14003,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_matrix4_vector_variable-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_matrix4_vector_variable-members.html,1,['update'],['updateVisual']
Deployability,"ual; removeSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; removeTag(Tag t)sofa::core::objectmodel::Base; reset() override=0sofa::core::collision::Pipelinepure virtual; setDefinitionSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setDefinitionSourceFilePos(const int)sofa::core::objectmodel::Base; setInstanciationSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setInstanciationSourceFilePos(const int)sofa::core::objectmodel::Base; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(Pipeline, sofa::core::objectmodel::BaseObject)sofa::core::collision::Pipeline; SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~Pipeline() overridesofa::core::collision::Pipelineprotected.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_pipeline-members.html:11077,update,updateInternal,11077,api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_pipeline-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_pipeline-members.html,2,['update'],"['updateInternal', 'updateLinks']"
Deployability,"ualManager;  SOFA_CLASS (VisualManager, VisualModel);  ; virtual void preDrawScene (VisualParams *);  Called before rendering the scene. More...;  ; virtual void postDrawScene (VisualParams *);  Called after rendering the scene. More...;  ; virtual bool drawScene (VisualParams *);  Called instead of rendering the scene. More...;  ; bool insertInNode (objectmodel::BaseNode *node) override;  ; bool removeInNode (objectmodel::BaseNode *node) override;  ;  Public Member Functions inherited from sofa::core::visual::VisualModel;  SOFA_ABSTRACT_CLASS (VisualModel, objectmodel::BaseObject);  ; virtual void drawVisual (const VisualParams *) final;  Display the VisualModel object. More...;  ; void initVisual (const VisualParams *);  Initialize the textures, or other graphical resources. More...;  ; virtual void initVisual () final;  ; void updateVisual (const VisualParams *);  used to update the model if necessary. More...;  ; virtual void updateVisual () final;  ; virtual void clearVisual ();  clear some graphical resources (generally called before the deleteVisitor). More...;  ; virtual void drawTransparent (const VisualParams *);  Display transparent surfaces. More...;  ; virtual void drawShadow (const VisualParams *vparams);  Display shadow-casting surfaces. More...;  ; virtual void parallelUpdateVisual ();  used to update the model if necessary. More...;  ; virtual bool addBBox (SReal *, SReal *);  used to add the bounding-box of this visual model to the given bounding box in order to compute the scene bounding box or cull hidden objects. More...;  ; virtual void applyTranslation (const SReal, const SReal, const SReal);  ; virtual void applyRotation (const SReal, const SReal, const SReal);  ; virtual void applyRotation (const type::Quat< SReal >);  ; virtual void applyScale (const SReal, const SReal, const SReal);  ; virtual void exportOBJ (std::string, std::ostream *, std::ostream *, sofa::Index &, sofa::Index &, sofa::Index &, int &);  Append this mesh to an OBJ format ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_rendering_s_r_g_b.html:1849,update,updateVisual,1849,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_rendering_s_r_g_b.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_rendering_s_r_g_b.html,1,['update'],['updateVisual']
Deployability,"ualParamsinline; pass()sofa::core::visual::VisualParamsinline; Pass enum namesofa::core::visual::VisualParams; PERSPECTIVE_TYPE enum valuesofa::core::visual::VisualParams; readV(const S *state) constsofa::core::visual::VisualParamsinline; readX(const S *state) constsofa::core::visual::VisualParamsinline; sceneBBox()sofa::core::visual::VisualParamsinline; sceneBBox() constsofa::core::visual::VisualParamsinline; setExecMode(ExecMode v)sofa::core::ExecParamsinline; setModelViewMatrix(const double m[16])sofa::core::visual::VisualParamsinline; setProjectionMatrix(const double m[16])sofa::core::visual::VisualParamsinline; setSupported(unsigned int api, bool val=true)sofa::core::visual::VisualParamsinline; setThreadID(int v)sofa::core::ExecParamsinline; setV(ConstVecDerivId v)sofa::core::visual::VisualParamsinline; setV(ConstMultiVecDerivId v)sofa::core::visual::VisualParamsinline; setV(const StateSet &g, ConstVecDerivId v)sofa::core::visual::VisualParamsinline; setX(ConstVecCoordId v)sofa::core::visual::VisualParamsinline; setX(ConstMultiVecCoordId v)sofa::core::visual::VisualParamsinline; setX(const StateSet &g, ConstVecCoordId v)sofa::core::visual::VisualParamsinline; Shadow enum valuesofa::core::visual::VisualParams; Std enum valuesofa::core::visual::VisualParams; threadID() constsofa::core::ExecParamsinline; Transparent enum valuesofa::core::visual::VisualParams; update()sofa::core::ExecParams; v() constsofa::core::visual::VisualParamsinline; v()sofa::core::visual::VisualParamsinline; viewport() constsofa::core::visual::VisualParamsinline; viewport()sofa::core::visual::VisualParamsinline; Viewport typedefsofa::core::visual::VisualParams; VisualParams()sofa::core::visual::VisualParams; x() constsofa::core::visual::VisualParamsinline; x()sofa::core::visual::VisualParamsinline; zFar() constsofa::core::visual::VisualParamsinline; zFar()sofa::core::visual::VisualParamsinline; zNear() constsofa::core::visual::VisualParamsinline; zNear()sofa::core::visual::VisualParamsinline.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1visual_1_1_visual_params-members.html:3564,update,update,3564,api/master/sofa/html/classsofa_1_1core_1_1visual_1_1_visual_params-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1visual_1_1_visual_params-members.html,1,['update'],['update']
Deployability,"ubeCollisionModel::isLeaf ; (; sofa::Index ; ); const. overridevirtual . Checks if the element(index) is a leaf and a primitive of the collision model. ; Default to true since triangle model, line model, etc. does not have this method implemented and they are themselves (normally) leaves and primitives ; Reimplemented from sofa::core::CollisionModel. ◆ resize(). void sofa::component::collision::geometry::CubeCollisionModel::resize ; (; sofa::Size ; s). overridevirtual . Set the number of elements. ; Reimplemented from sofa::core::CollisionModel. ◆ setLeafCube() [1/2]. void sofa::component::collision::geometry::CubeCollisionModel::setLeafCube ; (; sofa::Index ; cubeIndex, . sofa::Index ; childIndex . ). ◆ setLeafCube() [2/2]. void sofa::component::collision::geometry::CubeCollisionModel::setLeafCube ; (; sofa::Index ; cubeIndex, . std::pair< core::CollisionElementIterator, core::CollisionElementIterator > ; children, . const sofa::type::Vec3 & ; min, . const sofa::type::Vec3 & ; max . ). ◆ setParentOf() [1/2]. void sofa::component::collision::geometry::CubeCollisionModel::setParentOf ; (; sofa::Index ; childIndex, . const sofa::type::Vec3 & ; min, . const sofa::type::Vec3 & ; max . ). ◆ setParentOf() [2/2]. void sofa::component::collision::geometry::CubeCollisionModel::setParentOf ; (; sofa::Index ; childIndex, . const sofa::type::Vec3 & ; min, . const sofa::type::Vec3 & ; max, . const sofa::type::Vec3 & ; normal, . const SReal ; angle = 0 . ). ◆ SOFA_CLASS(). sofa::component::collision::geometry::CubeCollisionModel::SOFA_CLASS ; (; CubeCollisionModel ; , . sofa::core::CollisionModel ;  . ). ◆ updateCube(). void sofa::component::collision::geometry::CubeCollisionModel::updateCube ; (; sofa::Index ; index). ◆ updateCubes(). void sofa::component::collision::geometry::CubeCollisionModel::updateCubes ; (; ). Related details. ◆ Cube. friend class Cube. friend . sofacomponentcollisiongeometryCubeCollisionModel; Generated on Mon Nov 11 2024 02:19:54 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_cube_collision_model.html:27201,update,updateCube,27201,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_cube_collision_model.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_cube_collision_model.html,4,['update'],"['updateCube', 'updateCubes']"
Deployability,"ublic Member Functions |; List of all members . sofa::component::collision::response::mapper::IdentityContactMapper< TCollisionModel, DataTypes > Class Template Reference . #include <IdentityContactMapper.h>; Base class for IdentityMapping based mappers. ; More... Inheritance diagram for sofa::component::collision::response::mapper::IdentityContactMapper< TCollisionModel, DataTypes >:. [legend]; Detailed Description; template<class TCollisionModel, class DataTypes>; class sofa::component::collision::response::mapper::IdentityContactMapper< TCollisionModel, DataTypes >; Base class for IdentityMapping based mappers. . Public Attributes; MCollisionModel * model;  ; MMapping::SPtr mapping;  . Public Member Functions;  IdentityContactMapper ();  ; void setCollisionModel (MCollisionModel *model);  ; void cleanup ();  ; MMechanicalState * createMapping (const char *name=""contactPoints"");  ; void resize (Size);  ; Index addPoint (const Coord &, Index index, Real &);  ; void update ();  ; void updateXfree ();  ; void updateX0 ();  ;  Public Member Functions inherited from sofa::component::collision::response::mapper::BaseContactMapper< DataTypes >; virtual ~BaseContactMapper ();  ; virtual Index addPoint (const Coord &, Index, Real &);  Adding a point of the global referentiel to the mapping. More...;  ; virtual Index addPointB (const Coord &P, Index elementId, Real &r, const sofa::type::Vec3 &);  ; Index addPointB (const Coord &P, Index elementId, Real &r);  . Additional Inherited Members;  Static Public Member Functions inherited from sofa::component::collision::response::mapper::BaseContactMapper< DataTypes >; static BaseContactMapper< DataTypes > * Create (core::CollisionModel *model, const std::string &name=std::string(""PenalityContactForceField""));  ; static ContactMapper< TCollisionModel, DataTypes > * create (ContactMapper< TCollisionModel, DataTypes > *, core::CollisionModel *arg);  . Attribute details. ◆ mapping. template<class TCollisionModel , class DataTypes > . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1mapper_1_1_identity_contact_mapper.html:1214,update,update,1214,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1mapper_1_1_identity_contact_mapper.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1mapper_1_1_identity_contact_mapper.html,2,['update'],"['update', 'updateXfree']"
Deployability,"ublic Member Functions |; Protected Member Functions |; List of all members . sofa::core::collision::Intersection Class Referenceabstract . #include <Intersection.h>; Given 2 collision elements, test if an intersection is possible (for bounding volumes), or compute intersection points if any. ; More... Inheritance diagram for sofa::core::collision::Intersection:. [legend]; Detailed Description; Given 2 collision elements, test if an intersection is possible (for bounding volumes), or compute intersection points if any. . Public Member Functions;  SOFA_ABSTRACT_CLASS (Intersection, objectmodel::BaseObject);  ; virtual ElementIntersector * findIntersector (core::CollisionModel *object1, core::CollisionModel *object2, bool &swapModels)=0;  ; virtual bool isSupported (core::CollisionElementIterator elem1, core::CollisionElementIterator elem2);  ; virtual bool useProximity () const;  returns true if algorithm uses proximity detection More...;  ; virtual bool useContinuous () const;  returns true if algorithm uses continuous detection More...;  ; virtual SReal getAlarmDistance () const;  Return the alarm distance (must return 0 if useProximity() is false) More...;  ; virtual SReal getContactDistance () const;  Return the contact distance (must return 0 if useProximity() is false) More...;  ; virtual void setAlarmDistance (SReal);  Set the alarm distance (must return 0 if useProximity() is false) More...;  ; virtual void setContactDistance (SReal);  Set the contact distance (must return 0 if useProximity() is false) More...;  ; virtual void beginBroadPhase ();  Actions to accomplish when the broadPhase is started. By default do nothing. More...;  ; virtual void endBroadPhase ();  Actions to accomplish when the broadPhase is finished. By default do nothing. More...;  ; virtual void beginNarrowPhase ();  Actions to accomplish when the narrow Phase is started. By default do nothing. More...;  ; virtual void endNarrowPhase ();  Actions to accomplish when the narrow Phase is fi",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_intersection.html:1165,continuous,continuous,1165,api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_intersection.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_intersection.html,1,['continuous'],['continuous']
Deployability,"ubsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  . Public Member Functions;  SOFA_CLASS (SOFA_TEMPLATE(IndexValueMapper, DataTypes), sofa::core::DataEngine);  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; void reinit () override;  Update method called when variables used in precomputation are modified. More...;  ; void doUpdate () override;  Where you put your engine's impl. More...;  ;  Public Member Functions inherited from sofa::core::DataEngine;  SOFA_ABSTRACT_CLASS (DataEngine, core::objectmodel::BaseObject);  ; void update () final;  ; void addInput (sofa::core::objectmodel::BaseData *data);  Add a new input to this engine. More...;  ; void addOutput (objectmodel::BaseData *n);  Add a new output to this engine. More...;  ;  Public Member Functions inherited from sofa::core::DataTrackerDDGNode;  DataTrackerDDGNode ();  ; void addInputs (std::initializer_list< sofa::core::objectmodel::BaseData * > datas);  Create a DataCallback object associated with multiple Data fields. More...;  ; void addOutputs (std::initializer_list< sofa::core::objectmodel::BaseData * > datas);  ; virtual void cleanDirty (const core::ExecParams *params=nullptr);  ; void updateAllInputsIfDirty ();  ;  Public Member Functions inherited from sofa::core::objectmodel::DDGNode;  DDGNode ();  Constructor. More...;  ; virtual ~DDGNode ();  Destructor. Automatically remove remaining links. More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void delInput (DDGNode *n);  Remove an input fr",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_index_value_mapper.html:2504,update,update,2504,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_index_value_mapper.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_index_value_mapper.html,1,['update'],['update']
Deployability,"uctor details. ◆ FixedLagrangianConstraint(). template<class DataTypes > . sofa::component::constraint::lagrangian::model::FixedLagrangianConstraint< DataTypes >::FixedLagrangianConstraint ; (; MechanicalState * ; object = nullptr). protected . ◆ ~FixedLagrangianConstraint(). template<class DataTypes > . virtual sofa::component::constraint::lagrangian::model::FixedLagrangianConstraint< DataTypes >::~FixedLagrangianConstraint ; (; ). inlineprotectedvirtual . Function details. ◆ buildConstraintMatrix(). template<class DataTypes > . void sofa::component::constraint::lagrangian::model::FixedLagrangianConstraint< DataTypes >::buildConstraintMatrix ; (; const core::ConstraintParams * ; cParams, . DataMatrixDeriv & ; c, . unsigned int & ; cIndex, . const DataVecCoord & ; x . ). overridevirtual . Construct the Jacobian Matrix; Parameters. cis the result constraint sparse matrix ; cIndexis the index of the next constraint equation: when building the constraint matrix, you have to use this index, and then update it ; xis the position vector used for constraint equation computation ; cParamsdefines the state vectors to use for positions and velocities. Also defines the order of the constraint (POS, VEL, ACC). This is the method that should be implemented by the component ; Implements sofa::core::behavior::Constraint< DataTypes >. ◆ getConstraintIdentifiers(). template<class DataTypes > . virtual type::vector<std::string> sofa::component::constraint::lagrangian::model::FixedLagrangianConstraint< DataTypes >::getConstraintIdentifiers ; (; ). inlinefinaloverrideprotectedvirtual . Reimplemented from sofa::core::behavior::Constraint< DataTypes >. ◆ getConstraintResolution(). template<class DataTypes > . void sofa::component::constraint::lagrangian::model::FixedLagrangianConstraint< DataTypes >::getConstraintResolution ; (; const core::ConstraintParams * ; cParams, . std::vector< core::behavior::ConstraintResolution * > & ; resTab, . unsigned int & ; offset . ). overridevirtual . Add",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1model_1_1_fixed_lagrangian_constraint.html:21006,update,update,21006,api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1model_1_1_fixed_lagrangian_constraint.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1model_1_1_fixed_lagrangian_constraint.html,1,['update'],['update']
Deployability,"ude <IdentityContactMapper.h>; Mapper for PointModel. ; More... Inheritance diagram for sofa::component::collision::response::mapper::ContactMapper< collision::geometry::PointCollisionModel< sofa::defaulttype::Vec3Types >, DataTypes >:. [legend]; Detailed Description; template<class DataTypes>; class sofa::component::collision::response::mapper::ContactMapper< collision::geometry::PointCollisionModel< sofa::defaulttype::Vec3Types >, DataTypes >; Mapper for PointModel. . Additional Inherited Members;  Public Attributes inherited from sofa::component::collision::response::mapper::IdentityContactMapper< collision::geometry::PointCollisionModel< sofa::defaulttype::Vec3Types >, DataTypes >; MCollisionModel * model;  ; MMapping::SPtr mapping;  ;  Public Member Functions inherited from sofa::component::collision::response::mapper::IdentityContactMapper< collision::geometry::PointCollisionModel< sofa::defaulttype::Vec3Types >, DataTypes >;  IdentityContactMapper ();  ; void setCollisionModel (MCollisionModel *model);  ; void cleanup ();  ; MMechanicalState * createMapping (const char *name=""contactPoints"");  ; void resize (Size);  ; Index addPoint (const Coord &, Index index, Real &);  ; void update ();  ; void updateXfree ();  ; void updateX0 ();  ;  Public Member Functions inherited from sofa::component::collision::response::mapper::BaseContactMapper< DataTypes >; virtual ~BaseContactMapper ();  ; virtual Index addPoint (const Coord &, Index, Real &);  Adding a point of the global referentiel to the mapping. More...;  ; virtual Index addPointB (const Coord &P, Index elementId, Real &r, const sofa::type::Vec3 &);  ; Index addPointB (const Coord &P, Index elementId, Real &r);  ;  Static Public Member Functions inherited from sofa::component::collision::response::mapper::BaseContactMapper< DataTypes >; static BaseContactMapper< DataTypes > * Create (core::CollisionModel *model, const std::string &name=std::string(""PenalityContactForceField""));  ; static ContactMapper< TCollis",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1mapper_1_1_contact_mapper_3_01collision_1_1ge46d407b1b91a6cbf0a65c8890b0f3043.html:1665,update,update,1665,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1mapper_1_1_contact_mapper_3_01collision_1_1ge46d407b1b91a6cbf0a65c8890b0f3043.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1mapper_1_1_contact_mapper_3_01collision_1_1ge46d407b1b91a6cbf0a65c8890b0f3043.html,2,['update'],"['update', 'updateXfree']"
Deployability,"ude <SofaSceneGraphWidget.h>. Inheritance diagram for sofa::gui::qt::SofaSceneGraphWidget:. [legend]. Protected Attributes; bool m_isDirty;  ; bool m_isLocked;  . Public Member Functions;  SofaSceneGraphWidget (QWidget *parent);  ;  ~SofaSceneGraphWidget ();  ; void lock ();  ; void unLock ();  ; bool isDirty ();  ; bool isLocked ();  Returns true if the view updates for any scene graph change is disable. More...;  ; void setViewToDirty ();  . Signals; void dirtynessChanged (bool isDirty);  Connect to this signal to be notified when the dirtiness status of the QSofaListView changed. More...;  ; void lockingChanged (bool isLocked);  Connect to this signal to be notified when the locking status changed. More...;  . Attribute details. ◆ m_isDirty. bool sofa::gui::qt::SofaSceneGraphWidget::m_isDirty. protected . Indicate that the view is de-synchronized with the real content of the simulation graph. This can happen if the graph has been freezed (i.e. not graphically updated) for performance reason while simulating complex scenes. . ◆ m_isLocked. bool sofa::gui::qt::SofaSceneGraphWidget::m_isLocked. protected . Constructor details. ◆ SofaSceneGraphWidget(). sofa::gui::qt::SofaSceneGraphWidget::SofaSceneGraphWidget ; (; QWidget * ; parent). inline . ◆ ~SofaSceneGraphWidget(). sofa::gui::qt::SofaSceneGraphWidget::~SofaSceneGraphWidget ; (; ). inline . Function details. ◆ dirtynessChanged. void sofa::gui::qt::SofaSceneGraphWidget::dirtynessChanged ; (; bool ; isDirty). signal . Connect to this signal to be notified when the dirtiness status of the QSofaListView changed. . ◆ isDirty(). bool sofa::gui::qt::SofaSceneGraphWidget::isDirty ; (; ). Returns true if the view is not synchronized anymore with the simulation graph. To re-syncronize the view you can:; call unfreeze() so any future change will be reflected; call update(), to update one time the graph. . ◆ isLocked(). bool sofa::gui::qt::SofaSceneGraphWidget::isLocked ; (; ). Returns true if the view updates for any scene ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_sofa_scene_graph_widget.html:1260,update,updated,1260,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_sofa_scene_graph_widget.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_sofa_scene_graph_widget.html,1,['update'],['updated']
Deployability,"udes names and aliases) More...;  . Public Member Functions;  SOFA_CLASS (SOFA_TEMPLATE(BoxROI, DataTypes), SOFA_TEMPLATE(BaseROI, DataTypes));  ; void roiInit () override;  ; bool roiDoUpdate () override;  ; void roiDraw (const VisualParams *vparams) override;  ; void roiComputeBBox (const ExecParams *params, type::BoundingBox &bbox) override;  ;  Public Member Functions inherited from sofa::component::engine::select::BaseROI< DataTypes >;  SOFA_CLASS (SOFA_TEMPLATE(BaseROI, DataTypes), Inherit);  ; void init () final;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; void doUpdate () override;  Where you put your engine's impl. More...;  ; void draw (const core::visual::VisualParams *vparams) final;  Render internal data of this object, for debugging purposes. More...;  ; void computeBBox (const core::ExecParams *params, bool onlyVisible) final;  ;  Public Member Functions inherited from sofa::core::DataEngine;  SOFA_ABSTRACT_CLASS (DataEngine, core::objectmodel::BaseObject);  ; void update () final;  ; void addInput (sofa::core::objectmodel::BaseData *data);  Add a new input to this engine. More...;  ; void addOutput (objectmodel::BaseData *n);  Add a new output to this engine. More...;  ;  Public Member Functions inherited from sofa::core::DataTrackerDDGNode;  DataTrackerDDGNode ();  ; void addInputs (std::initializer_list< sofa::core::objectmodel::BaseData * > datas);  Create a DataCallback object associated with multiple Data fields. More...;  ; void addOutputs (std::initializer_list< sofa::core::objectmodel::BaseData * > datas);  ; virtual void cleanDirty (const core::ExecParams *params=nullptr);  ; void updateAllInputsIfDirty ();  ;  Public Member Functions inherited from sofa::core::objectmodel::DDGNode;  DDGNode ();  Constructor. More...;  ; virtual ~DDGNode ();  Destructor. Automatically remove remaining links. More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void del",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1boxroi_1_1_box_r_o_i.html:8344,update,update,8344,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1boxroi_1_1_box_r_o_i.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1boxroi_1_1_box_r_o_i.html,1,['update'],['update']
Deployability,"ui::qt::DataFileNameWidget. ◆ setFilled(). void sofa::gui::qt::DataWidget::setFilled ; (; bool ; value). inline . method to warn if Data has not been filled at constructor. . ◆ setWidgetDirty. void sofa::gui::qt::DataWidget::setWidgetDirty ; (; bool ; b = true). slot . You call this slot anytime you want to specify that the widget value is out of sync with the underlying data value. . ◆ sizeWidget(). virtual unsigned int sofa::gui::qt::DataWidget::sizeWidget ; (; ). inlinevirtual . Helper method to give a size. ; Reimplemented in sofa::gui::qt::QDataSimpleEdit, sofa::gui::qt::TableDataWidget< T, FLAGS >, sofa::gui::qt::GraphDataWidget< T >, and sofa::gui::qt::DisplayFlagsDataWidget. ◆ updateDataValue. void sofa::gui::qt::DataWidget::updateDataValue ; (; ). slot . Checks that widget has been edited emit DataOwnerDirty in case the name field has been modified . ◆ updateVisibility(). void sofa::gui::qt::DataWidget::updateVisibility ; (; ). ◆ updateWidgetValue. void sofa::gui::qt::DataWidget::updateWidgetValue ; (; ). slot . First checks that the widget is not currently being edited checks that the data has changed since the last time the widget has read the data value. ultimately read the data value. . ◆ WidgetDirty. void sofa::gui::qt::DataWidget::WidgetDirty ; (; bool ; ). signal . Emitted each time setWidgetDirty is called. You can also emit it if you want to tell the widget value is out of sync with the underlying data value. . ◆ writeToData(). virtual void sofa::gui::qt::DataWidget::writeToData ; (; ). protectedpure virtual . The implementation of this methods needs to tell how the widget can write its value in the data ; Implemented in sofa::gui::qt::QDataSimpleEdit, sofa::gui::qt::RadioDataWidget, sofa::gui::qt::SimpleDataWidget< T, Container >, sofa::gui::qt::SimpleDataWidget< T, graph_data_widget_container< T > >, sofa::gui::qt::SimpleDataWidget< T, table_data_widget_container< T, TABLE_NORMAL > >, sofa::gui::qt::rgbacolordatawidget_h::RGBAColorDataWidget, sof",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_data_widget.html:8717,update,updateWidgetValue,8717,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_data_widget.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_data_widget.html,1,['update'],['updateWidgetValue']
Deployability,"ui::qt::SofaWindowProfiler Member List . This is the complete list of members for sofa::gui::qt::SofaWindowProfiler, including all inherited members. activateATimer(bool activate)sofa::gui::qt::SofaWindowProfiler; addTreeItem(AnimationSubStepData *subStep)sofa::gui::qt::SofaWindowProfilerprotected; addTreeItem(const AnimationStepData *step)sofa::gui::qt::SofaWindowProfilerprotected; closeEvent(QCloseEvent *) overridesofa::gui::qt::SofaWindowProfilerinlineslot; closeWindow(bool)sofa::gui::qt::SofaWindowProfilersignal; createChart()sofa::gui::qt::SofaWindowProfilerprotected; createTreeView()sofa::gui::qt::SofaWindowProfilerprotected; expandRootNodeOnly() constsofa::gui::qt::SofaWindowProfilerslot; m_axisYsofa::gui::qt::SofaWindowProfilerprotected; m_bufferSizesofa::gui::qt::SofaWindowProfilerprotected; m_chartsofa::gui::qt::SofaWindowProfilerprotected; m_chartViewsofa::gui::qt::SofaWindowProfilerprotected; m_checkedSeriessofa::gui::qt::SofaWindowProfilerprotected; m_fpsMaxAxissofa::gui::qt::SofaWindowProfilerprotected; m_maxFpssofa::gui::qt::SofaWindowProfilerprotected; m_profilingDatasofa::gui::qt::SofaWindowProfilerprotected; m_selectedParentStepsofa::gui::qt::SofaWindowProfilerprotected; m_selectedStepsofa::gui::qt::SofaWindowProfilerprotected; m_selectionSeriessofa::gui::qt::SofaWindowProfilerprotected; m_seriessofa::gui::qt::SofaWindowProfilerprotected; m_stepsofa::gui::qt::SofaWindowProfilerprotected; onStepSelected(QTreeWidgetItem *item, int column)sofa::gui::qt::SofaWindowProfilerslot; pushStepData()sofa::gui::qt::SofaWindowProfiler; resetGraph()sofa::gui::qt::SofaWindowProfiler; SofaWindowProfiler(QWidget *parent)sofa::gui::qt::SofaWindowProfiler; updateChart()sofa::gui::qt::SofaWindowProfilerprotected; updateFromSelectedStep(int step)sofa::gui::qt::SofaWindowProfilerslot; updateSummaryLabels(int step)sofa::gui::qt::SofaWindowProfilerslot; updateTree(int step)sofa::gui::qt::SofaWindowProfilerslot. Generated on Mon Nov 11 2024 03:25:43 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_sofa_window_profiler-members.html:1790,update,updateChart,1790,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_sofa_window_profiler-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_sofa_window_profiler-members.html,4,['update'],"['updateChart', 'updateFromSelectedStep', 'updateSummaryLabels', 'updateTree']"
Deployability,"uild dir path of Sofa. More...;  ; static std::map< std::string, std::string > readBasicIniFile (const std::string &path);  Read a file written in a very basic ini-like format. More...;  . Function details. ◆ downcaseString(). std::string sofa::helper::Utils::downcaseString ; (; const std::string & ; s). static . Convert a string to lower case. . ◆ getExecutableDirectory(). const std::string & sofa::helper::Utils::getExecutableDirectory ; (; ). static . Get the path to the directory of the executable that is currently running. . ◆ getExecutablePath(). const std::string & sofa::helper::Utils::getExecutablePath ; (; ). static . Get the path of the executable that is currently running. ; Note that this function uses various non-portable tricks to achieve its goal, and it might not be the most reliable thing ever written. . ◆ getSofaPathPrefix(). const std::string & sofa::helper::Utils::getSofaPathPrefix ; (; ). static . Get the path to the ""root"" path of Sofa (i.e. the build directory or the installation prefix). ; WarningThis function is meant to be used only by the applications that are distributed with SOFA ; ReturnsThe ABSOLUTE path of Sofa build dir (or install dir) . ◆ getSofaPathTo(). const std::string sofa::helper::Utils::getSofaPathTo ; (; const std::string & ; pathFromBuildDir). static . Construct a path based on the build dir path of Sofa. ; WarningThis function is meant to be used only by the applications that are distributed with SOFA: it uses getSofaPathPrefix() ; ReturnsThe ABSOLUTE path of anything in Sofa build dir (or install dir) . ◆ getSofaUserLocalDirectory(). const std::string & sofa::helper::Utils::getSofaUserLocalDirectory ; (; ). static . Get the path to the SOFA directory into the current user local config directory. . ◆ getUserLocalDirectory(). const std::string & sofa::helper::Utils::getUserLocalDirectory ; (; ). static . Get the path to the current user local config directory. . ◆ narrowString(). std::string sofa::helper::Utils::narrowString",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_utils.html:2650,install,installation,2650,api/master/sofa/html/classsofa_1_1helper_1_1_utils.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_utils.html,1,['install'],['installation']
Deployability,"ullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(DataEngine, core::objectmodel::BaseObject)sofa::core::DataEngine; SOFA_CLASS(SOFA_TEMPLATE(MergeMeshes, DataTypes), core::DataEngine)sofa::component::engine::generate::MergeMeshes< DataTypes >; sofa::core::DataEngine::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; update() finalsofa::core::DataEnginevirtual; updateAllInputsIfDirty()sofa::core::DataTrackerDDGNode; updateIfDirty() constsofa::core::objectmodel::DDGNode; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecCoord typedefsofa::component::engine::generate::MergeMeshes< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecIndex typedefsofa::component::engine::generate::MergeMeshes< DataTypes >; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; vf_edgessofa::component::engine::generate::MergeMeshes< DataTypes >; vf_hexahedrasofa::component::engine::generate::MergeMeshes< DataTypes >; vf_polygonssofa::component::engine::generate::MergeMeshes< DataTypes >; vf_positionssofa::component::engine::generate::MergeMeshes< DataTypes >; vf_quadssofa::component::engine::generate::MergeMeshes< DataTypes >; vf_tetrahedrasofa::component::engine::generate::MergeMeshes< DataTypes >; vf_trianglessofa::component::engine::generate::MergeMeshes< DataTypes >; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_merge_meshes-members.html:13850,update,updateLinks,13850,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_merge_meshes-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_merge_meshes-members.html,1,['update'],['updateLinks']
Deployability,"ullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(BaseAnimationLoop, objectmodel::BaseObject)sofa::core::behavior::BaseAnimationLoop; SOFA_CLASS(DefaultAnimationLoop, sofa::core::behavior::BaseAnimationLoop)sofa::simulation::DefaultAnimationLoop; sofa::core::behavior::BaseAnimationLoop::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; solve(const sofa::core::ExecParams *params, SReal dt) constsofa::simulation::DefaultAnimationLoopprotected; SPtr typedefsofa::core::objectmodel::Base; step(const sofa::core::ExecParams *params, SReal dt) overridesofa::simulation::DefaultAnimationLoopvirtual; storeResetState() overridesofa::core::behavior::BaseAnimationLoopprotectedvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateInternalData(const sofa::core::ExecParams *params) constsofa::simulation::DefaultAnimationLoopprotected; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateMapping(const sofa::core::ExecParams *params, SReal dt) constsofa::simulation::DefaultAnimationLoopprotected; updateSimulationContext(const sofa::core::ExecParams *params, SReal dt, SReal startTime) constsofa::simulation::DefaultAnimationLoopprotected; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseAnimationLoop() overridesofa::core::behavior::BaseAnimationLoopprotected; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~DefaultAnimationLoop() overridesofa::simulation::DefaultAnimationLoopprotected.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_default_animation_loop-members.html:12870,update,updateLinks,12870,api/master/sofa/html/classsofa_1_1simulation_1_1_default_animation_loop-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_default_animation_loop-members.html,3,['update'],"['updateLinks', 'updateMapping', 'updateSimulationContext']"
Deployability,"ullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; sofa::SOFA_ABSTRACT_CLASS(VisualModel, objectmodel::BaseObject)sofa::core::visual::VisualModel; sofa::gl::component::shader::OglShaderElement::SOFA_ABSTRACT_CLASS(ShaderElement, objectmodel::BaseObject)sofa::core::visual::ShaderElement; SOFA_CLASS(OglInt2Attribute, SOFA_TEMPLATE3(OglAttribute, 2, GL_INT, SOFA_TEMPLATE2(sofa::type::Vec, 2, int)))sofa::gl::component::shader::OglInt2Attribute; OglAttribute< 2, GL_INT, sofa::type::Vec< 2, int > >::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SOFA_CLASS2(SOFA_TEMPLATE3(OglAttribute, size, type, sofa::type::Vec< 2, int >), core::visual::VisualModel, OglShaderElement)sofa::gl::component::shader::OglAttribute< 2, GL_INT, sofa::type::Vec< 2, int > >; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateVisual(const VisualParams *)sofa::core::visual::VisualModel; updateVisual() finalsofa::core::visual::VisualModelvirtual; valuesofa::gl::component::shader::OglAttribute< 2, GL_INT, sofa::type::Vec< 2, int > >protected; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VisualModel()sofa::core::visual::VisualModelprotected; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~OglAttribute() overridesofa::gl::component::shader::OglAttribute< 2, GL_INT, sofa::type::Vec< 2, int > >protected; ~OglInt2Attribute()sofa::gl::component::sh",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_int2_attribute-members.html:15473,update,updateInternal,15473,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_int2_attribute-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_int2_attribute-members.html,1,['update'],['updateInternal']
Deployability,"ullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; sofa::SOFA_ABSTRACT_CLASS(VisualModel, objectmodel::BaseObject)sofa::core::visual::VisualModel; sofa::gl::component::shader::OglShaderElement::SOFA_ABSTRACT_CLASS(ShaderElement, objectmodel::BaseObject)sofa::core::visual::ShaderElement; SOFA_CLASS(OglInt3Attribute, SOFA_TEMPLATE3(OglAttribute, 3, GL_INT, SOFA_TEMPLATE2(sofa::type::Vec, 3, int)))sofa::gl::component::shader::OglInt3Attribute; OglAttribute< 3, GL_INT, sofa::type::Vec< 3, int > >::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SOFA_CLASS2(SOFA_TEMPLATE3(OglAttribute, size, type, sofa::type::Vec< 3, int >), core::visual::VisualModel, OglShaderElement)sofa::gl::component::shader::OglAttribute< 3, GL_INT, sofa::type::Vec< 3, int > >; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateVisual(const VisualParams *)sofa::core::visual::VisualModel; updateVisual() finalsofa::core::visual::VisualModelvirtual; valuesofa::gl::component::shader::OglAttribute< 3, GL_INT, sofa::type::Vec< 3, int > >protected; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VisualModel()sofa::core::visual::VisualModelprotected; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~OglAttribute() overridesofa::gl::component::shader::OglAttribute< 3, GL_INT, sofa::type::Vec< 3, int > >protected; ~OglInt3Attribute()sofa::gl::component::sh",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_int3_attribute-members.html:15473,update,updateInternal,15473,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_int3_attribute-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_int3_attribute-members.html,1,['update'],['updateInternal']
Deployability,"ullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; sofa::SOFA_ABSTRACT_CLASS(VisualModel, objectmodel::BaseObject)sofa::core::visual::VisualModel; sofa::gl::component::shader::OglShaderElement::SOFA_ABSTRACT_CLASS(ShaderElement, objectmodel::BaseObject)sofa::core::visual::ShaderElement; SOFA_CLASS(OglInt4Attribute, SOFA_TEMPLATE3(OglAttribute, 4, GL_INT, SOFA_TEMPLATE2(sofa::type::Vec, 4, int)))sofa::gl::component::shader::OglInt4Attribute; OglAttribute< 4, GL_INT, sofa::type::Vec< 4, int > >::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SOFA_CLASS2(SOFA_TEMPLATE3(OglAttribute, size, type, sofa::type::Vec< 4, int >), core::visual::VisualModel, OglShaderElement)sofa::gl::component::shader::OglAttribute< 4, GL_INT, sofa::type::Vec< 4, int > >; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateVisual(const VisualParams *)sofa::core::visual::VisualModel; updateVisual() finalsofa::core::visual::VisualModelvirtual; valuesofa::gl::component::shader::OglAttribute< 4, GL_INT, sofa::type::Vec< 4, int > >protected; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VisualModel()sofa::core::visual::VisualModelprotected; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~OglAttribute() overridesofa::gl::component::shader::OglAttribute< 4, GL_INT, sofa::type::Vec< 4, int > >protected; ~OglInt4Attribute()sofa::gl::component::sh",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_int4_attribute-members.html:15473,update,updateInternal,15473,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_int4_attribute-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_int4_attribute-members.html,1,['update'],['updateInternal']
Deployability,"ully implicit, 0 is fully explicit) More...;  ; void setImplicitVelocity (SReal i);  ; const SReal & implicitVelocity () const;  ; void setImplicitPosition (SReal i);  ; const SReal & implicitPosition () const;  . Attribute details. ◆ m_bFactor. SReal sofa::core::MechanicalParams::m_bFactor. protected . Damping matrix contributions factor (for implicit schemes) . ◆ m_df. ConstMultiVecDerivId sofa::core::MechanicalParams::m_df. protected . Ids of df vector (for implicit schemes) . ◆ m_dt. SReal sofa::core::MechanicalParams::m_dt. protected . Time step. . ◆ m_dx. ConstMultiVecDerivId sofa::core::MechanicalParams::m_dx. protected . Ids of dx vector (for implicit schemes) . ◆ m_energy. bool sofa::core::MechanicalParams::m_energy. protected . Should the kinematic and potential energies be computed ? . ◆ m_f. ConstMultiVecDerivId sofa::core::MechanicalParams::m_f. protected . Ids of force vector. . ◆ m_implicit. bool sofa::core::MechanicalParams::m_implicit. protected . Is the time integration scheme implicit ? . ◆ m_implicitPosition. SReal sofa::core::MechanicalParams::m_implicitPosition. protected . ratio of future and current velocity used for position update (1 is fully implicit, 0 is fully explicit) . ◆ m_implicitVelocity. SReal sofa::core::MechanicalParams::m_implicitVelocity. protected . ratio of future and current force used for velocity update (1 is fully implicit, 0 is fully explicit) . ◆ m_kFactor. SReal sofa::core::MechanicalParams::m_kFactor. protected . Stiffness matrix contributions factor (for implicit schemes) . ◆ m_kFactorUsed. bool sofa::core::MechanicalParams::m_kFactorUsed. mutableprotected . Checks if the stiffness matrix contributions factor has been accessed. . ◆ m_mFactor. SReal sofa::core::MechanicalParams::m_mFactor. protected . Mass matrix contributions factor (for implicit schemes) . ◆ m_supportOnlySymmetricMatrix. bool sofa::core::MechanicalParams::m_supportOnlySymmetricMatrix. protected . True if a symmetric matrix is assumed in the left-han",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_mechanical_params.html:9099,integrat,integration,9099,api/master/sofa/html/classsofa_1_1core_1_1_mechanical_params.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_mechanical_params.html,1,['integrat'],['integration']
Deployability,"unctions inherited from sofa::core::behavior::SingleStateAccessor< DataTypes >;  SOFA_ABSTRACT_CLASS (SOFA_TEMPLATE(SingleStateAccessor, DataTypes), StateAccessor);  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; MechanicalState< DataTypes > * getMState ();  ; const MechanicalState< DataTypes > * getMState () const;  . Protected Member Functions;  TriangularFEMForceFieldOptim ();  ForceField API. More...;  ; virtual ~TriangularFEMForceFieldOptim ();  ;  Protected Member Functions inherited from sofa::component::solidmechanics::fem::elastic::BaseLinearElasticityFEMForceField< DataTypes >; void checkPoissonRatio ();  ; void checkYoungModulus ();  ; Real getVecRealInElement (sofa::Size elementId, const Data< VecReal > &data, Real defaultValue) const;  ;  Protected Member Functions inherited from sofa::core::behavior::ForceField< DataTypes >;  ForceField (MechanicalState< DataTypes > *mm=nullptr);  ;  ~ForceField () override;  ;  Protected Member Functions inherited from sofa::core::behavior::BaseForceField;  BaseForceField ();  ;  ~BaseForceField () override=default;  ;  Protected Member Functions inherited from sofa::core::behavior::StateAccessor;  StateAccessor ();  ;  ~StateAccessor () override=default;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracke",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_triangular_f_e_m_force_field_optim.html:20878,update,update,20878,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_triangular_f_e_m_force_field_optim.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_triangular_f_e_m_force_field_optim.html,1,['update'],['update']
Deployability,"unctions; template<class T > ; static T::SPtr create (T *, sofa::core::objectmodel::BaseContext *context, sofa::core::objectmodel::BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseObject; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  . Protected Member Functions;  RayTraceDetection ()=default;  ;  ~RayTraceDetection () override=default;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_ray_trace_detection.html:10653,update,update,10653,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_ray_trace_detection.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_ray_trace_detection.html,1,['update'],['update']
Deployability,"unctions;  QuadBendingFEMForceField ();  ForceField API. More...;  ;  ~QuadBendingFEMForceField () override;  ; void computeDisplacementSmall (Displacement &D, Index elementIndex, const VecCoord &p);  Forcefiled computations. More...;  ; void computeBendingStrainDisplacement (StrainDisplacement &Jb, Real gauss1, Real gauss2, Real l, Real h);  ; void computeShearStrainDisplacement (StrainDisplacement &Js, Real l, Real h);  ; void computeElementStiffness (Stiffness &K, Index elementIndex);  ; void computeForce (Displacement &F, Index elementIndex, Displacement &D);  ; virtual void applyStiffness (VecCoord &f, Real h, const VecCoord &x, const SReal &kFactor);  ; virtual void computeBendingMaterialStiffness (int i, Index &a, Index &b, Index &c, Index &d);  ; virtual void computeShearMaterialStiffness (int i, Index &a, Index &b, Index &c, Index &d);  ; void initSmall (int i, Index &a, Index &b, Index &c, Index &d);  ; void accumulateForceSmall (VecCoord &f, const VecCoord &p, Index elementIndex);  ; void applyStiffnessSmall (VecCoord &f, Real h, const VecCoord &x, const SReal &kFactor);  ;  Protected Member Functions inherited from sofa::core::behavior::ForceField< DataTypes >;  ForceField (MechanicalState< DataTypes > *mm=nullptr);  ;  ~ForceField () override;  ;  Protected Member Functions inherited from sofa::core::behavior::BaseForceField;  BaseForceField ();  ;  ~BaseForceField () override=default;  ;  Protected Member Functions inherited from sofa::core::behavior::StateAccessor;  StateAccessor ();  ;  ~StateAccessor () override=default;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correc",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_quad_bending_f_e_m_force_field.html:18372,update,update,18372,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_quad_bending_f_e_m_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_quad_bending_f_e_m_force_field.html,1,['update'],['update']
Deployability,"unctions;  SOFA_CLASS (SOFA_TEMPLATE(SelectConnectedLabelsROI, _T), DataEngine);  ;  SOFA_ATTRIBUTE_REPLACED__TYPEMEMBER (Inherited, Inherit1);  ;  SOFA_ATTRIBUTE_REPLACED__TYPEMEMBER (Index, sofa::Index);  ;  SelectConnectedLabelsROI ();  ;  ~SelectConnectedLabelsROI () override;  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; void reinit () override;  Update method called when variables used in precomputation are modified. More...;  ; void parse (sofa::core::objectmodel::BaseObjectDescription *arg) override;  Parse the given description to assign values to this object's fields and potentially other parameters. More...;  ; void parseFields (const std::map< std::string, std::string * > &str) override;  Assign the field values stored in the given map of name -> value pairs. More...;  ;  Public Member Functions inherited from sofa::core::DataEngine;  SOFA_ABSTRACT_CLASS (DataEngine, core::objectmodel::BaseObject);  ; void update () final;  ; void addInput (sofa::core::objectmodel::BaseData *data);  Add a new input to this engine. More...;  ; void addOutput (objectmodel::BaseData *n);  Add a new output to this engine. More...;  ;  Public Member Functions inherited from sofa::core::DataTrackerDDGNode;  DataTrackerDDGNode ();  ; void addInputs (std::initializer_list< sofa::core::objectmodel::BaseData * > datas);  Create a DataCallback object associated with multiple Data fields. More...;  ; void addOutputs (std::initializer_list< sofa::core::objectmodel::BaseData * > datas);  ; virtual void cleanDirty (const core::ExecParams *params=nullptr);  ; void updateAllInputsIfDirty ();  ;  Public Member Functions inherited from sofa::core::objectmodel::DDGNode;  DDGNode ();  Constructor. More...;  ; virtual ~DDGNode ();  Destructor. Automatically remove remaining links. More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void delInput (DDGNode *n);  Remove an input fr",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_select_connected_labels_r_o_i.html:3107,update,update,3107,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_select_connected_labels_r_o_i.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_select_connected_labels_r_o_i.html,1,['update'],['update']
Deployability,"unsigned int index)sofa::gl::component::shader::OglShaderElementinline; setInstanciationSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setInstanciationSourceFilePos(const int)sofa::core::objectmodel::Base; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; ShaderElement()sofa::core::visual::ShaderElementinlineprotected; ShaderElementType enum namesofa::core::visual::ShaderElement; shaderssofa::gl::component::shader::OglShaderElementprotected; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(ShaderElement, objectmodel::BaseObject)sofa::core::visual::ShaderElement; SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~OglShaderElement() overridesofa::gl::component::shader::OglShaderElementinline; ~ShaderElement() overridesofa::core::visual::ShaderElementinlineprotected.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_shader_element-members.html:10961,update,updateInternal,10961,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_shader_element-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_shader_element-members.html,2,['update'],"['updateInternal', 'updateLinks']"
Deployability,"unter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(DataEngine, core::objectmodel::BaseObject)sofa::core::DataEngine; SOFA_CLASS(SOFA_TEMPLATE(MeshSampler, DataTypes), core::DataEngine)sofa::component::engine::select::MeshSampler< DataTypes >; sofa::core::DataEngine::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; update() finalsofa::core::DataEnginevirtual; updateAllInputsIfDirty()sofa::core::DataTrackerDDGNode; updateIfDirty() constsofa::core::objectmodel::DDGNode; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VD typedefsofa::component::engine::select::MeshSampler< DataTypes >; VecCoord typedefsofa::component::engine::select::MeshSampler< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VI typedefsofa::component::engine::select::MeshSampler< DataTypes >; VVD typedefsofa::component::engine::select::MeshSampler< DataTypes >; VVI typedefsofa::component::engine::select::MeshSampler< DataTypes >; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~DataEngine() overridesofa::",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_mesh_sampler-members.html:12976,update,updateIfDirty,12976,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_mesh_sampler-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_mesh_sampler-members.html,1,['update'],['updateIfDirty']
Deployability,"unter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(VisualModel, objectmodel::BaseObject)sofa::core::visual::VisualModel; SOFA_CLASS(PostProcessManager, core::visual::VisualModel)sofa::gl::component::shader::PostProcessManager; sofa::core::visual::VisualManager::SOFA_CLASS(VisualManager, VisualModel)sofa::core::visual::VisualManager; sofa::core::visual::VisualModel::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateVisual(const VisualParams *)sofa::core::visual::VisualModel; updateVisual() finalsofa::core::visual::VisualModelvirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; vertFilenamesofa::gl::component::shader::PostProcessManager; VisualModel()sofa::core::visual::VisualModelprotected; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~PostProcessManager() overridesofa::gl::component::shader::PostProcessManagerprotected; ~VisualManager() overridesofa::core::visual::VisualManagerinlineprotected; ~VisualModel() overridesofa::co",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_post_process_manager-members.html:11888,update,updateInternal,11888,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_post_process_manager-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_post_process_manager-members.html,1,['update'],['updateInternal']
Deployability,"unter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(VisualModel, objectmodel::BaseObject)sofa::core::visual::VisualModel; SOFA_CLASS(VisualManagerPass, core::visual::VisualManager)sofa::gl::component::shader::VisualManagerPass; sofa::core::visual::VisualManager::SOFA_CLASS(VisualManager, VisualModel)sofa::core::visual::VisualManager; sofa::core::visual::VisualModel::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateVisual(const VisualParams *)sofa::core::visual::VisualModel; updateVisual() finalsofa::core::visual::VisualModelvirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VisualManagerPass()sofa::gl::component::shader::VisualManagerPass; VisualModel()sofa::core::visual::VisualModelprotected; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~VisualManager() overridesofa::core::visual::VisualManagerinlineprotected; ~VisualManagerPass() overridesofa::gl::component::shader::VisualManagerPass; ~VisualModel() overridesofa::core::v",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_visual_manager_pass-members.html:12679,update,updateInternal,12679,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_visual_manager_pass-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_visual_manager_pass-members.html,1,['update'],['updateInternal']
Deployability,"upledConstraint…. /where-is-the-modeler-how-to-run-tutorials; ; SOFA - Topic: Where is the modeler / how to run tutorials?. /where-should-i-start-to-read-the-code; . /feed; ; [SOLVED] Where should I start to read the code – SOFA. /page; . /10; ; SOFA - Topic: [SOLVED] Where should I start to read the code. /11; ; SOFA - Topic: [SOLVED] Where should I start to read the code. /3; ; SOFA - Topic: [SOLVED] Where should I start to read the code. SOFA - Topic: [SOLVED] Where should I start to read the code. /which-matrix-should-i-use; ; SOFA - Topic: [SOLVED] which matrix should I use ?. /why-both-fem-and-pdeode-solvers; . /feed; ; [SOLVED] Why both FEM and PDE/ODE Solvers? – SOFA. SOFA - Topic: [SOLVED] Why both FEM and PDE/ODE Solvers?. /why-no-one-answered-my-question%EF%BC%9F; . /feed; ; [SOLVED] Why no one answered my question？ – SOFA. SOFA - Topic: [SOLVED] Why no one answered my question？. /windows-10-gtx-970-download-install-execute-crash-wtf; . /feed; ; windows 10, gtx 970, download, install, execute, crash, wtf ? – SOFA. SOFA - Topic: windows 10, gtx 970, download, install, execute, crash, wtf ?. /windows-compile-error-msbuild-exe-sofa-17-12; ; SOFA - Topic: Windows compile error – MSBuild.exe (sofa 17.12). /windows-dependency-pack-for-vs-2019; ; SOFA - Topic: [SOLVED] Windows Dependency Pack for VS 2019. /windows-documentation-still-up-to-date; . /feed; ; [SOLVED] Windows documentation – still up to date? – SOFA. SOFA - Topic: [SOLVED] Windows documentation – still up to date?. /wonder-about-fem-model-for-bending-flat-element; ; SOFA - Topic: [SOLVED] Wonder about FEM model for REISSNER-MINDLIN FLAT SHELL. /working-example-on-simple-suturing-with-suturepointperformer; ; SOFA - Topic: [SOLVED] Working example on simple suturing with SuturePointPerformer. /working-with-obj-files-in-sofa; ; SOFA - Topic: [SOLVED] Working with .obj-files in SOFA. /write-an-xml-file-with-sofa; ; SOFA - Topic: Write an XML file with SOFA. /writing-a-scene-in-cpp-fails; ; SOFA - Topic:",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/index-wcopy.html:421623,install,install,421623,index-wcopy.html,https://www.sofa-framework.org,https://www.sofa-framework.org/index-wcopy.html,1,['install'],['install']
Deployability,"ur engine's impl. More...;  ; void draw (const core::visual::VisualParams *vparams) final;  Render internal data of this object, for debugging purposes. More...;  ; void computeBBox (const core::ExecParams *params, bool onlyVisible) final;  ;  Public Member Functions inherited from sofa::core::DataEngine;  SOFA_ABSTRACT_CLASS (DataEngine, core::objectmodel::BaseObject);  ; void update () final;  ; void addInput (sofa::core::objectmodel::BaseData *data);  Add a new input to this engine. More...;  ; void addOutput (objectmodel::BaseData *n);  Add a new output to this engine. More...;  ;  Public Member Functions inherited from sofa::core::DataTrackerDDGNode;  DataTrackerDDGNode ();  ; void addInputs (std::initializer_list< sofa::core::objectmodel::BaseData * > datas);  Create a DataCallback object associated with multiple Data fields. More...;  ; void addOutputs (std::initializer_list< sofa::core::objectmodel::BaseData * > datas);  ; virtual void cleanDirty (const core::ExecParams *params=nullptr);  ; void updateAllInputsIfDirty ();  ;  Public Member Functions inherited from sofa::core::objectmodel::DDGNode;  DDGNode ();  Constructor. More...;  ; virtual ~DDGNode ();  Destructor. Automatically remove remaining links. More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void delInput (DDGNode *n);  Remove an input from this node. More...;  ; void addOutput (DDGNode *n);  Add a new output to this node. More...;  ; void delOutput (DDGNode *n);  Remove an output from this node. More...;  ; const DDGLinkContainer & getInputs ();  Get the list of inputs for this DDGNode. More...;  ; const DDGLinkContainer & getOutputs ();  Get the list of outputs for this DDGNode. More...;  ; bool isDirty () const;  Returns true if the DDGNode needs to be updated. More...;  ; virtual void setDirtyValue ();  Indicate the value needs to be updated. More...;  ; virtual void setDirtyOutputs ();  Indicate the outputs needs to be updated. This method must be called af",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1boxroi_1_1_box_r_o_i.html:8982,update,updateAllInputsIfDirty,8982,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1boxroi_1_1_box_r_o_i.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1boxroi_1_1_box_r_o_i.html,2,['update'],['updateAllInputsIfDirty']
Deployability,"urceFilePos(const int)sofa::core::objectmodel::Base; setInstance(Instance inst)sofa::core::collision::CollisionAlgorithminlinevirtual; setInstanciationSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setInstanciationSourceFilePos(const int)sofa::core::objectmodel::Base; setIntersectionMethod(Intersection *v)sofa::core::collision::Detectioninlinevirtual; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(CollisionAlgorithm, objectmodel::BaseObject)sofa::core::collision::CollisionAlgorithm; SOFA_CLASS(Detection, CollisionAlgorithm)sofa::core::collision::Detection; sofa::core::collision::CollisionAlgorithm::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storedIntersectionMethodsofa::core::collision::Detectionprotected; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_detection-members.html:10704,update,updateInternal,10704,api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_detection-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_detection-members.html,2,['update'],"['updateInternal', 'updateLinks']"
Deployability,"uring top-down traversal. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ matrixFreeApplyDJT(). template<class TIn , class TOut , bool HasStabilizedGeometricStiffness> . virtual void sofa::component::mapping::nonlinear::BaseNonLinearMapping< TIn, TOut, HasStabilizedGeometricStiffness >::matrixFreeApplyDJT ; (; const core::MechanicalParams * ; mparams, . Real ; kFactor, . Data< VecDeriv_t< In > > & ; parentForce, . const Data< VecDeriv_t< In > > & ; parentDisplacement, . const Data< VecDeriv_t< Out > > & ; childForce . ). protectedpure virtual . Implemented in sofa::component::mapping::nonlinear::VolumeMapping< TIn, TOut >, sofa::component::mapping::nonlinear::SquareMapping< TIn, TOut >, sofa::component::mapping::nonlinear::SquareDistanceMapping< TIn, TOut >, sofa::component::mapping::nonlinear::DistanceMapping< TIn, TOut >, sofa::component::mapping::nonlinear::DistanceFromTargetMapping< TIn, TOut >, and sofa::component::mapping::nonlinear::AreaMapping< TIn, TOut >. ◆ SOFA_CLASS(). template<class TIn , class TOut , bool HasStabilizedGeometricStiffness> . sofa::component::mapping::nonlinear::BaseNonLinearMapping< TIn, TOut, HasStabilizedGeometricStiffness >::SOFA_CLASS ; (; SOFA_TEMPLATE3(BaseNonLinearMapping< TIn, TOut, HasStabilizedGeometricStiffness >, TIn, TOut, HasStabilizedGeometricStiffness) ; , . SOFA_TEMPLATE2(core::Mapping, TIn, TOut) ;  . ). ◆ updateK(). template<class TIn , class TOut , bool HasStabilizedGeometricStiffness> . void sofa::component::mapping::nonlinear::BaseNonLinearMapping< TIn, TOut, HasStabilizedGeometricStiffness >::updateK ; (; const core::MechanicalParams * ; , . core::ConstMultiVecDerivId ;  . ). finalvirtual . Compute the geometric stiffness matrix based on given child forces K = dJ^T * outForce Default implementation does nothing, corresponding to a linear mapping. ; Reimplemented from sofa::core::BaseMapping. sofacomponentmappingnonlinearBaseNonLinearMapping; Generated on Mon Nov 11 2024 02:51:15 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1nonlinear_1_1_base_non_linear_mapping.html:27140,update,updateK,27140,api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1nonlinear_1_1_base_non_linear_mapping.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1nonlinear_1_1_base_non_linear_mapping.html,2,['update'],['updateK']
Deployability,"ut), BaseMapping)sofa::core::MultiMapping< TIn, TOut >; sofa::core::BaseMapping::SOFA_ABSTRACT_CLASS(BaseMapping, objectmodel::BaseObject)sofa::core::BaseMapping; SOFA_CLASS(SOFA_TEMPLATE2(DistanceMultiMapping, TIn, TOut), SOFA_TEMPLATE2(core::MultiMapping, TIn, TOut))sofa::component::mapping::nonlinear::DistanceMultiMapping< TIn, TOut >; sofa::core::MultiMapping::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SparseKMatrixEigen typedefsofa::component::mapping::nonlinear::DistanceMultiMapping< TIn, TOut >; SparseMatrixEigen typedefsofa::component::mapping::nonlinear::DistanceMultiMapping< TIn, TOut >; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; testMechanicalState(BaseState *state)sofa::core::BaseMappingprotected; toModelssofa::core::MultiMapping< TIn, TOut >protected; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateK(const core::MechanicalParams *mparams, core::ConstMultiVecDerivId childForce) overridesofa::component::mapping::nonlinear::DistanceMultiMapping< TIn, TOut >virtual; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; vecConstInVecCoord typedefsofa::component::mapping::nonlinear::DistanceMultiMapping< TIn, TOut >; VecData typedefsofa::core::objectmodel::Base; VecFromModels typedefsofa::core::MultiMapping< TIn, TOut >protected; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VecToModels typedefsofa::core::MultiMapping< TIn, TOut >protected; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseMapping() overridesofa::core::BaseMappingprotected; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~DistanceMultiMapping(",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1nonlinear_1_1_distance_multi_mapping-members.html:23774,update,updateK,23774,api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1nonlinear_1_1_distance_multi_mapping-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1nonlinear_1_1_distance_multi_mapping-members.html,1,['update'],['updateK']
Deployability,"utObject ; (; const std::string & ; o). inline . Set the path to the objects mapped in the scene graph. . ◆ setPathOutputObject(). void sofa::core::topology::TopologicalMapping::setPathOutputObject ; (; const std::string & ; o). inline . ◆ setTopologies(). void sofa::core::topology::TopologicalMapping::setTopologies ; (; In * ; from, . Out * ; to . ). virtual . Specify the input and output models. . ◆ SOFA_ABSTRACT_CLASS(). sofa::core::topology::TopologicalMapping::SOFA_ABSTRACT_CLASS ; (; TopologicalMapping ; , . objectmodel::BaseObject ;  . ). ◆ updateTopologicalMappingBottomUp(). virtual void sofa::core::topology::TopologicalMapping::updateTopologicalMappingBottomUp ; (; ). inlinevirtual . Method called at each topological changes propagation which comes from the OUTPUT topology to adapt the INPUT topology : ; Reimplemented in sofa::component::mapping::linear::SimpleTesselatedTetraTopologicalMapping. ◆ updateTopologicalMappingTopDown(). virtual void sofa::core::topology::TopologicalMapping::updateTopologicalMappingTopDown ; (; ). pure virtual . Method called at each topological changes propagation which comes from the INPUT topology to adapt the OUTPUT topology : ; Implemented in sofa::component::topology::mapping::Triangle2EdgeTopologicalMapping, sofa::component::topology::mapping::Tetra2TriangleTopologicalMapping, sofa::component::topology::mapping::SubsetTopologicalMapping, sofa::component::topology::mapping::Quad2TriangleTopologicalMapping, sofa::component::topology::mapping::IdentityTopologicalMapping, sofa::component::topology::mapping::Hexa2TetraTopologicalMapping, sofa::component::topology::mapping::Hexa2QuadTopologicalMapping, sofa::component::topology::mapping::Edge2QuadTopologicalMapping, sofa::component::topology::mapping::CenterPointTopologicalMapping, sofa::component::mapping::linear::SimpleTesselatedTetraTopologicalMapping, sofa::component::mapping::linear::SimpleTesselatedHexaTopologicalMapping, and sofa::component::mapping::linear::Mesh2PointTopol",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topological_mapping.html:23494,update,updateTopologicalMappingTopDown,23494,api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topological_mapping.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topological_mapping.html,1,['update'],['updateTopologicalMappingTopDown']
Deployability,"utTensor) override;  ; void ElasticityTensor (StrainInformation< DataTypes > *, const MaterialParameters< DataTypes > &param, Matrix6 &outputTensor) override;  ;  Public Member Functions inherited from sofa::component::solidmechanics::fem::hyperelastic::material::HyperelasticMaterial< DataTypes >; virtual ~HyperelasticMaterial ();  . Attribute details. ◆ Name. template<class DataTypes > . constexpr std::string_view sofa::component::solidmechanics::fem::hyperelastic::material::STVenantKirchhoff< DataTypes >::Name = ""StVenantKirchhoff"". staticconstexpr . Function details. ◆ applyElasticityTensor(). template<class DataTypes > . void sofa::component::solidmechanics::fem::hyperelastic::material::STVenantKirchhoff< DataTypes >::applyElasticityTensor ; (; StrainInformation< DataTypes > * ; , . const MaterialParameters< DataTypes > & ; , . const MatrixSym & ; , . MatrixSym & ;  . ). inlineoverridevirtual . computes the Elasticity Tensor of the current configuration ; Reimplemented from sofa::component::solidmechanics::fem::hyperelastic::material::HyperelasticMaterial< DataTypes >. ◆ deriveSPKTensor(). template<class DataTypes > . void sofa::component::solidmechanics::fem::hyperelastic::material::STVenantKirchhoff< DataTypes >::deriveSPKTensor ; (; StrainInformation< DataTypes > * ; , . const MaterialParameters< DataTypes > & ; , . MatrixSym & ;  . ). inlineoverridevirtual . computes the second Piola Kirchhoff stress tensor of the current configuration ; Reimplemented from sofa::component::solidmechanics::fem::hyperelastic::material::HyperelasticMaterial< DataTypes >. ◆ ElasticityTensor(). template<class DataTypes > . void sofa::component::solidmechanics::fem::hyperelastic::material::STVenantKirchhoff< DataTypes >::ElasticityTensor ; (; StrainInformation< DataTypes > * ; , . const MaterialParameters< DataTypes > & ; param, . Matrix6 & ; outputTensor . ). inlineoverridevirtual . Reimplemented from sofa::component::solidmechanics::fem::hyperelastic::material::HyperelasticMater",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_s_t_venant_kirchhoff.html:2243,configurat,configuration,2243,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_s_t_venant_kirchhoff.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_s_t_venant_kirchhoff.html,1,['configurat'],['configuration']
Deployability,"uted according to the pressureSpeed attribute and the simulation time step. More...;  ; void verifyDerivative (VecDeriv &v_plus, VecDeriv &v, VecVec3DerivValues &DVval, VecVec3DerivIndices &DVind, const VecDeriv &Din);  ; SurfacePressureForceField< defaulttype::Rigid3Types >::Real computeMeshVolume (const VecDeriv &, const VecCoord &x);  ; void addTriangleSurfacePressure (unsigned int triId, VecDeriv &f, const VecCoord &x, const VecDeriv &, const Real &pressure, bool computeDerivatives);  ; void addQuadSurfacePressure (unsigned int quadId, VecDeriv &f, const VecCoord &x, const VecDeriv &, const Real &pressure);  ; void verifyDerivative (VecDeriv &, VecDeriv &, VecVec3DerivValues &, VecVec3DerivIndices &, const VecDeriv &);  ; SurfacePressureForceField< defaulttype::Rigid3Types >::Real computeMeshVolume (const VecDeriv &f, const VecCoord &x);  ; void addTriangleSurfacePressure (unsigned int triId, VecDeriv &, const VecCoord &, const VecDeriv &, const Real &, bool computeDerivatives);  ; void addQuadSurfacePressure (unsigned int quadId, VecDeriv &, const VecCoord &, const VecDeriv &, const Real &);  ; void verifyDerivative (VecDeriv &v_plus, VecDeriv &v, VecVec3DerivValues &DVval, VecVec3DerivIndices &DVind, const VecDeriv &Din);  ;  Protected Member Functions inherited from sofa::core::behavior::ForceField< DataTypes >;  ForceField (MechanicalState< DataTypes > *mm=nullptr);  ;  ~ForceField () override;  ;  Protected Member Functions inherited from sofa::core::behavior::BaseForceField;  BaseForceField ();  ;  ~BaseForceField () override=default;  ;  Protected Member Functions inherited from sofa::core::behavior::StateAccessor;  StateAccessor ();  ;  ~StateAccessor () override=default;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_surface_pressure_force_field.html:21581,update,update,21581,api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_surface_pressure_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_surface_pressure_force_field.html,1,['update'],['update']
Deployability,"utes |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; List of all members . sofa::core::topology::TopologicalMapping Class Referenceabstract . #include <TopologicalMapping.h>; This Interface is a new kind of Mapping, called TopologicalMapping, which converts an INPUT TOPOLOGY to an OUTPUT TOPOLOGY (both topologies are of type BaseTopology) ; More... Inheritance diagram for sofa::core::topology::TopologicalMapping:. [legend]; Detailed Description; This Interface is a new kind of Mapping, called TopologicalMapping, which converts an INPUT TOPOLOGY to an OUTPUT TOPOLOGY (both topologies are of type BaseTopology) ; It first initializes the mesh of the output topology from the mesh of the input topology, and it creates the two Index Maps that maintain the correspondence between the indices of their common elements.; Then, at each propagation of topological changes, it translates the topological change events that are propagated from the INPUT topology into specific actions that call element adding or element removal methods on the OUTPUT topology, and it updates the Index Maps.; So, at each time step, the geometrical and adjacency information are consistent in both topologies. . Public Attributes; SingleLink< TopologicalMapping, In, BaseLink::FLAG_STOREPATH|BaseLink::FLAG_STRONGLINK > fromModel;  Input source BaseTopology. More...;  ; SingleLink< TopologicalMapping, Out, BaseLink::FLAG_STOREPATH|BaseLink::FLAG_STRONGLINK > toModel;  Output target BaseTopology. More...;  ; Data< sofa::type::vector< Index > > Loc2GlobDataVec;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_print",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topological_mapping.html:1293,update,updates,1293,api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topological_mapping.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topological_mapping.html,1,['update'],['updates']
Deployability,"v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(DataEngine, core::objectmodel::BaseObject)sofa::core::DataEngine; SOFA_CLASS(SOFA_TEMPLATE(ValuesFromPositions, DataTypes), core::DataEngine)sofa::component::engine::select::ValuesFromPositions< DataTypes >; sofa::core::DataEngine::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; Tetra typedefsofa::component::engine::select::ValuesFromPositions< DataTypes >; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; Triangle typedefsofa::component::engine::select::ValuesFromPositions< DataTypes >; update() finalsofa::core::DataEnginevirtual; updateAllInputsIfDirty()sofa::core::DataTrackerDDGNode; updateIfDirty() constsofa::core::objectmodel::DDGNode; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateValues(TempData &_data)sofa::component::engine::select::ValuesFromPositions< DataTypes >protected; updateVectors(TempData &_data)sofa::component::engine::select::ValuesFromPositions< DataTypes >protected; valueFromEdge(const Edge &e, const TempData &data)sofa::component::engine::select::ValuesFromPositions< DataTypes >protected; valueFromPoint(const PointID &pid, const TempData &data)sofa::component::engine::select::ValuesFromPositions< DataTypes >protected; valueFromPosition(const CPos &p, const TempData &data)sofa::component::engine::select::ValuesFromPositions< DataTypes >protected; valueFromTetrahedron(const Tetra &t, const TempData &data)sofa::component::engine::select::ValuesFromPositions< DataTypes >protected; valueFromTriangle(const Triangle &t, const TempData &data)sofa::component::engine::select::Value",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_values_from_positions-members.html:14241,update,updateIfDirty,14241,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_values_from_positions-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_values_from_positions-members.html,1,['update'],['updateIfDirty']
Deployability,v16.12 has been released!. /sofa-v17-06-has-been-released; ; SOFA – SOFA v17.06 has been released!. /sofa-v17-12-has-been-released; ; SOFA – SOFA v17.12 has been released!. /sofa-v18-06-has-been-released; ; SOFA – SOFA v18.06 has been released!. /sofa-v18-12-has-been-released; ; SOFA – SOFA v18.12 has been released!. /sofa-v19-06-has-been-released; ; SOFA – SOFA v19.06 has been released!. /sofa-v19-12-has-been-released; ; SOFA – SOFA v19.12 has been released!. /sofa-v20-06-has-been-released; ; SOFA – SOFA v20.06 has been released!. /sofa-v20-12-has-been-released; ; SOFA – SOFA v20.12 has been released!. /sofa-v21-06-has-been-released; ; SOFA – SOFA v21.06 has been released!. /sofa-v21-12-has-been-released; ; SOFA – SOFA v21.12 has been released!. /sofa-v22-06-has-been-released; ; SOFA – SOFA v22.06 has been released!. /sofa-v22-12-has-been-released; ; SOFA – SOFA v22.12 has been released!. /sofa-v23-06-has-been-released; ; SOFA – SOFA v23.06 has been released!. /sofa-v23-12-has-been-released; ; SOFA – SOFA v23.12 has been released!. /sofa-v24-06-has-been-released; ; SOFA – SOFA v24.06 has been released!. /sofa-week-2018-experience; ; SOFA – SOFA Week 2018 Experience. /sofa-week-2021-register-now; ; SOFA – SOFA Week 2021: register now!. /sofa-week-2022-register-now; ; SOFA – SOFA Week 2022: register now!. /sofa-week-2023-register-now; ; SOFA – SOFA Week 2023: register now!. /sofa-week-2024-registration-is-open; ; SOFA – SOFA Week 2024: registration is open!. /soft-robotics-summer-school-in-lille; ; SOFA – Soft-Robotics Summer School in Lille. /softrobots-inverse-plugin-open-source-release; ; SOFA – SoftRobots.Inverse plugin open-source release!. /spin-offs-from-sofa-against-covid-19; ; SOFA – Spin-offs from SOFA against Covid-19. /stc11-join-us-in-june-to-design-the-sofa-roadmap; ; SOFA – STC#11: join us in June to design the SOFA roadmap!. /stc13-join-us-in-may-to-design-the-sofa-roadmap; ; SOFA – STC#13: co-design the SOFA roadmap!. /stc15-join-us-in-may-to-design-t,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/index-wcopy.html:9688,release,released,9688,index-wcopy.html,https://www.sofa-framework.org,https://www.sofa-framework.org/index-wcopy.html,1,['release'],['released']
Deployability,v17.06 has been released!. /sofa-v17-12-has-been-released; ; SOFA – SOFA v17.12 has been released!. /sofa-v18-06-has-been-released; ; SOFA – SOFA v18.06 has been released!. /sofa-v18-12-has-been-released; ; SOFA – SOFA v18.12 has been released!. /sofa-v19-06-has-been-released; ; SOFA – SOFA v19.06 has been released!. /sofa-v19-12-has-been-released; ; SOFA – SOFA v19.12 has been released!. /sofa-v20-06-has-been-released; ; SOFA – SOFA v20.06 has been released!. /sofa-v20-12-has-been-released; ; SOFA – SOFA v20.12 has been released!. /sofa-v21-06-has-been-released; ; SOFA – SOFA v21.06 has been released!. /sofa-v21-12-has-been-released; ; SOFA – SOFA v21.12 has been released!. /sofa-v22-06-has-been-released; ; SOFA – SOFA v22.06 has been released!. /sofa-v22-12-has-been-released; ; SOFA – SOFA v22.12 has been released!. /sofa-v23-06-has-been-released; ; SOFA – SOFA v23.06 has been released!. /sofa-v23-12-has-been-released; ; SOFA – SOFA v23.12 has been released!. /sofa-v24-06-has-been-released; ; SOFA – SOFA v24.06 has been released!. /sofa-week-2018-experience; ; SOFA – SOFA Week 2018 Experience. /sofa-week-2021-register-now; ; SOFA – SOFA Week 2021: register now!. /sofa-week-2022-register-now; ; SOFA – SOFA Week 2022: register now!. /sofa-week-2023-register-now; ; SOFA – SOFA Week 2023: register now!. /sofa-week-2024-registration-is-open; ; SOFA – SOFA Week 2024: registration is open!. /soft-robotics-summer-school-in-lille; ; SOFA – Soft-Robotics Summer School in Lille. /softrobots-inverse-plugin-open-source-release; ; SOFA – SoftRobots.Inverse plugin open-source release!. /spin-offs-from-sofa-against-covid-19; ; SOFA – Spin-offs from SOFA against Covid-19. /stc11-join-us-in-june-to-design-the-sofa-roadmap; ; SOFA – STC#11: join us in June to design the SOFA roadmap!. /stc13-join-us-in-may-to-design-the-sofa-roadmap; ; SOFA – STC#13: co-design the SOFA roadmap!. /stc15-join-us-in-may-to-design-the-sofa-roadmap; ; SOFA – STC#15: join us in May to design the SOFA roadm,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/index-wcopy.html:9761,release,released,9761,index-wcopy.html,https://www.sofa-framework.org,https://www.sofa-framework.org/index-wcopy.html,1,['release'],['released']
Deployability,"ve the associated MechanicalState #2 as a BaseMechanicalState. More...;  . Protected Member Functions; void addSpringForce (SReal &potentialEnergy, VecDeriv &f1, const VecCoord &p1, const VecDeriv &v1, VecDeriv &f2, const VecCoord &p2, const VecDeriv &v2, int i, Spring &spring);  Accumulate the spring force and compute and store its stiffness. More...;  ; void addSpringDForce (VecDeriv &df1, const VecDeriv &dx1, VecDeriv &df2, const VecDeriv &dx2, int i, Spring &spring, Real kFactor);  Apply the stiffness, i.e. accumulate df given dx. More...;  ;  GearSpringForceField ();  ;  GearSpringForceField (MechanicalState *object1, MechanicalState *object2);  ; virtual ~GearSpringForceField ();  ;  Protected Member Functions inherited from sofa::core::behavior::PairInteractionForceField< DataTypes >;  PairInteractionForceField (MechanicalState< DataTypes > *mm1=nullptr, MechanicalState< DataTypes > *mm2=nullptr);  ;  ~PairInteractionForceField () override;  ;  Protected Member Functions inherited from sofa::core::behavior::BaseForceField;  BaseForceField ();  ;  ~BaseForceField () override=default;  ;  Protected Member Functions inherited from sofa::core::behavior::StateAccessor;  StateAccessor ();  ;  ~StateAccessor () override=default;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Function",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_gear_spring_force_field.html:19862,update,update,19862,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_gear_spring_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_gear_spring_force_field.html,1,['update'],['update']
Deployability,"ve. template<class DataTypes > . sofa::Data<bool> sofa::component::constraint::lagrangian::model::UniformLagrangianConstraint< DataTypes >::d_iterative. Iterate over the bilateral constraints, otherwise a block factorisation is computed. . Constructor details. ◆ UniformLagrangianConstraint(). template<class DataTypes > . sofa::component::constraint::lagrangian::model::UniformLagrangianConstraint< DataTypes >::UniformLagrangianConstraint. protected . Function details. ◆ buildConstraintMatrix(). template<class DataTypes > . void sofa::component::constraint::lagrangian::model::UniformLagrangianConstraint< DataTypes >::buildConstraintMatrix ; (; const sofa::core::ConstraintParams * ; cParams, . DataMatrixDeriv & ; c, . unsigned int & ; cIndex, . const DataVecCoord & ; x . ). overridevirtual . Construct the Jacobian Matrix; Parameters. cis the result constraint sparse matrix ; cIndexis the index of the next constraint equation: when building the constraint matrix, you have to use this index, and then update it ; xis the position vector used for constraint equation computation ; cParamsdefines the state vectors to use for positions and velocities. Also defines the order of the constraint (POS, VEL, ACC). This is the method that should be implemented by the component ; Implements sofa::core::behavior::Constraint< DataTypes >. ◆ getConstraintIdentifiers(). template<class DataTypes > . virtual type::vector<std::string> sofa::component::constraint::lagrangian::model::UniformLagrangianConstraint< DataTypes >::getConstraintIdentifiers ; (; ). inlinefinaloverrideprotectedvirtual . Reimplemented from sofa::core::behavior::Constraint< DataTypes >. ◆ getConstraintResolution(). template<class DataTypes > . void sofa::component::constraint::lagrangian::model::UniformLagrangianConstraint< DataTypes >::getConstraintResolution ; (; const sofa::core::ConstraintParams * ; cParams, . std::vector< sofa::core::behavior::ConstraintResolution * > & ; resTab, . unsigned int & ; offset . ). overr",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1model_1_1_uniform_lagrangian_constraint.html:20688,update,update,20688,api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1model_1_1_uniform_lagrangian_constraint.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1model_1_1_uniform_lagrangian_constraint.html,1,['update'],['update']
Deployability,"vector specified by VecId dest. It will be updated to the first scalar value after the ones used by this operation when this method returns. . Implemented in sofa::component::statecontainer::MechanicalObject< DataTypes >, sofa::component::statecontainer::MechanicalObject< T >, sofa::component::statecontainer::MechanicalObject< DataTypes >, sofa::component::statecontainer::MechanicalObject< T >, sofa::component::statecontainer::MechanicalObject< DataTypes >, and sofa::component::statecontainer::MechanicalObject< T >. ◆ addFromBaseVectorSameSize(). virtual void sofa::core::behavior::BaseMechanicalState::addFromBaseVectorSameSize ; (; VecId ; dest, . const linearalgebra::BaseVector * ; src, . unsigned int & ; offset . ). pure virtual . Perform dest[i][j] += src[offset + i][j] 0<= i < src_entries 0<= j < 3 (for 3D objects) 0 <= j < 2 (for 2D objects) ; Parameters. offsetthe offset in the BaseVector where the scalar values will be used. It will be updated to the first scalar value after the ones used by this operation when this method returns . Implemented in sofa::component::statecontainer::MechanicalObject< DataTypes >, sofa::component::statecontainer::MechanicalObject< T >, sofa::component::statecontainer::MechanicalObject< DataTypes >, sofa::component::statecontainer::MechanicalObject< T >, sofa::component::statecontainer::MechanicalObject< DataTypes >, and sofa::component::statecontainer::MechanicalObject< T >. ◆ addFromBuffer(). virtual void sofa::core::behavior::BaseMechanicalState::addFromBuffer ; (; VecId ; dst, . const SReal * ; src, . unsigned int ; n . ). pure virtual . Add data from an external, user-allocated buffer. ; Exact element count must be provided for consistency checks. . ◆ addToBaseVector(). virtual void sofa::core::behavior::BaseMechanicalState::addToBaseVector ; (; linearalgebra::BaseVector * ; dest, . ConstVecId ; src, . unsigned int & ; offset . ). pure virtual . Add data to a global BaseVector from the state stored in a local vector. ; Parame",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_mechanical_state.html:25213,update,updated,25213,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_mechanical_state.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_mechanical_state.html,1,['update'],['updated']
Deployability,"vector< Vec3d > & getTriangleBaryCoords () const;  ; const type::vector< Vec3d > & getQuadBaryCoords () const;  ; const type::vector< Vec3d > & getTetraBaryCoords () const;  ; const type::vector< Vec3d > & getHexaBaryCoords () const;  ; const type::vector< std::pair< Element, Index > > & getPointSource () const;  ;  Public Member Functions inherited from sofa::core::topology::TopologicalMapping;  SOFA_ABSTRACT_CLASS (TopologicalMapping, objectmodel::BaseObject);  ; virtual void setTopologies (In *from, Out *to);  Specify the input and output models. More...;  ; void setPathInputObject (const std::string &o);  Set the path to the objects mapped in the scene graph. More...;  ; void setPathOutputObject (const std::string &o);  ; In * getFrom ();  Accessor to the INPUT topology of the TopologicalMapping : More...;  ; Out * getTo ();  Accessor to the OUTPUT topology of the TopologicalMapping : More...;  ; virtual void updateTopologicalMappingBottomUp ();  Method called at each topological changes propagation which comes from the OUTPUT topology to adapt the INPUT topology : More...;  ; virtual bool propagateFromInputToOutputModel ();  Return true if this mapping is able to propagate topological changes from input to output model. More...;  ; virtual bool propagateFromOutputToInputModel ();  Return true if this mapping is able to propagate topological changes from output to input model. More...;  ; virtual bool isTheOutputTopologySubdividingTheInputOne ();  return true if the output topology subdivide the input one. (the topology uses the Loc2GlobVec/Glob2LocMap/In2OutMap structs and share the same DOFs) More...;  ; const std::map< Index, Index > & getGlob2LocMap ();  Accessor to index maps : More...;  ; void dumpGlob2LocMap ();  ; void dumpLoc2GlobVec ();  ; virtual bool checkTopologies ();  Method to check the topology mapping maps regarding the upper topology. More...;  ; virtual void getFromIndex (type::vector< Index > &, const Index) const;  ; const std::map< Index, ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1linear_1_1_mesh2_point_topological_mapping.html:5914,update,updateTopologicalMappingBottomUp,5914,api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1linear_1_1_mesh2_point_topological_mapping.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1linear_1_1_mesh2_point_topological_mapping.html,1,['update'],['updateTopologicalMappingBottomUp']
Deployability,"vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setTransformation(const sofa::type::Matrix4 &t)sofa::core::loader::MeshLoaderinline; setTranslation(SReal dx, SReal dy, SReal dz)sofa::core::loader::MeshLoaderinline; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; skipToEOL(FILE *f)sofa::core::loader::BaseLoaderprotectedstatic; SOFA_ABSTRACT_CLASS(MeshLoader, BaseLoader)sofa::core::loader::MeshLoader; sofa::core::loader::BaseLoader::SOFA_ABSTRACT_CLASS(BaseLoader, objectmodel::BaseObject)sofa::core::loader::BaseLoader; SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; Tetrahedron typedefsofa::core::loader::MeshLoader; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; Triangle typedefsofa::core::loader::MeshLoader; updateElements()sofa::core::loader::MeshLoadervirtual; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateMesh()sofa::core::loader::MeshLoadervirtual; updateNormals()sofa::core::loader::MeshLoadervirtual; updatePoints()sofa::core::loader::MeshLoadervirtual; Vec3 typedefsofa::core::loader::MeshLoader; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseLoader() overridesofa::core::loader::BaseLoaderprotected; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_mesh_loader-members.html:16041,update,updateElements,16041,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_mesh_loader-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_mesh_loader-members.html,6,['update'],"['updateElements', 'updateInternal', 'updateLinks', 'updateMesh', 'updateNormals', 'updatePoints']"
Deployability,"vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(VisualModel, objectmodel::BaseObject)sofa::core::visual::VisualModel; SOFA_CLASS(SpotLight, PositionalLight)sofa::gl::component::shader::SpotLight; sofa::gl::component::shader::PositionalLight::SOFA_CLASS(PositionalLight, Light)sofa::gl::component::shader::PositionalLight; sofa::gl::component::shader::Light::SOFA_CLASS(Light, core::visual::VisualModel)sofa::gl::component::shader::Light; sofa::core::visual::VisualModel::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SpotLight()sofa::gl::component::shader::SpotLight; SPOTLIGHT enum valuesofa::gl::component::shader::Light; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateVisual(const VisualParams *)sofa::core::visual::VisualModel; updateVisual() finalsofa::core::visual::VisualModelvirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VisualModel()sofa::core::visual::VisualModelprotected; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~Light() overridesofa::gl::component::shader::Lightprotected; ~PositionalLight() overridesofa::gl::component::shader::PositionalLight; ~SpotLight() overridesofa::gl::component::shader::SpotLight; ~VisualModel() overridesofa::core::visual::VisualModelinlin",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_spot_light-members.html:15529,update,updateInternal,15529,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_spot_light-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_spot_light-members.html,1,['update'],['updateInternal']
Deployability,"vent(). void sofa::simulation::DefaultAnimationLoop::propagateCollisionEndEvent ; (; const sofa::core::ExecParams * ; params); const. protected . ◆ propagateIntegrateBeginEvent(). void sofa::simulation::DefaultAnimationLoop::propagateIntegrateBeginEvent ; (; const sofa::core::ExecParams * ; params); const. protected . ◆ propagateIntegrateEndEvent(). void sofa::simulation::DefaultAnimationLoop::propagateIntegrateEndEvent ; (; const sofa::core::ExecParams * ; params); const. protected . ◆ propagateOnlyPositionAndVelocity(). void sofa::simulation::DefaultAnimationLoop::propagateOnlyPositionAndVelocity ; (; SReal ; nextTime, . const sofa::core::MechanicalParams & ; mparams . ); const. protected . ◆ setNode(). void sofa::simulation::DefaultAnimationLoop::setNode ; (; simulation::Node * ; n). virtual . Set the simulation node this animation loop is controlling. . ◆ SOFA_CLASS(). sofa::simulation::DefaultAnimationLoop::SOFA_CLASS ; (; DefaultAnimationLoop ; , . sofa::core::behavior::BaseAnimationLoop ;  . ). ◆ solve(). void sofa::simulation::DefaultAnimationLoop::solve ; (; const sofa::core::ExecParams * ; params, . SReal ; dt . ); const. protected . ◆ step(). void sofa::simulation::DefaultAnimationLoop::step ; (; const sofa::core::ExecParams * ; params, . SReal ; dt . ). overridevirtual . perform one animation step ; Implements sofa::core::behavior::BaseAnimationLoop. ◆ updateInternalData(). void sofa::simulation::DefaultAnimationLoop::updateInternalData ; (; const sofa::core::ExecParams * ; params); const. protected . ◆ updateMapping(). void sofa::simulation::DefaultAnimationLoop::updateMapping ; (; const sofa::core::ExecParams * ; params, . SReal ; dt . ); const. protected . ◆ updateSimulationContext(). void sofa::simulation::DefaultAnimationLoop::updateSimulationContext ; (; const sofa::core::ExecParams * ; params, . SReal ; dt, . SReal ; startTime . ); const. protected . sofasimulationDefaultAnimationLoop; Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_default_animation_loop.html:20045,update,updateInternalData,20045,api/master/sofa/html/classsofa_1_1simulation_1_1_default_animation_loop.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_default_animation_loop.html,6,['update'],"['updateInternalData', 'updateMapping', 'updateSimulationContext']"
Deployability,"verride;  ; virtual std::string getPathName () const override;  Return the full path name of this object. More...;  ; SReal getTime () const;  Current time. More...;  ; const BaseContext * getContext () const;  ; BaseContext * getContext ();  ; const BaseObject * getMaster () const;  ; BaseObject * getMaster ();  ; const VecSlaves & getSlaves () const;  ; BaseObject * getSlave (const std::string &name) const;  ; virtual void addSlave (BaseObject::SPtr s);  ; virtual void removeSlave (BaseObject::SPtr s);  ; virtual void handleEvent (Event *);  Handle an event. More...;  ; virtual void handleTopologyChange (core::topology::Topology *t);  ; void parse (BaseObjectDescription *arg) override;  Parse the given description to assign values to this object's fields and potentially other parameters. More...;  ; virtual void bwdInit ();  Initialization method called at graph creation and modification, during bottom-up traversal. More...;  ; void updateInternal ();  Update method called when variables (used to compute other internal variables) are modified. More...;  ; virtual void storeResetState ();  Save the initial state for later uses in reset() More...;  ; virtual void reset ();  Reset to initial state. More...;  ; virtual void cleanup ();  ;  Public Member Functions inherited from sofa::core::objectmodel::Base; virtual const BaseClass * getClass () const;  ; void addDeprecatedAttribute (lifecycle::DeprecatedData *attribute);  ; void addUpdateCallback (const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs);  ; void addOutputsToCallback (const std::string &name, std::initializer_list< BaseData * > outputs);  ; const std::string & getName () const;  Accessor to the object name. More...;  ; void setName (const std::string &n);  Set the name of this object. More...;  ; void setName (const std::string &n, int counter);  Set the name ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_hexahedron_f_e_m_force_field.html:12956,update,updateInternal,12956,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_hexahedron_f_e_m_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_hexahedron_f_e_m_force_field.html,4,['update'],['updateInternal']
Deployability,"verride;  Called before objects in the current branch are displayed. More...;  ; void setUsage (unsigned int usage);  ; ShaderElementType getSEType () const override;  Returns the type of shader element (texture, macro, variable, or attribute) More...;  ; const core::objectmodel::BaseData * getSEValue () const override;  ; core::objectmodel::BaseData * getSEValue () override;  ; int getSESizePerVertex () override;  ; int getSETotalSize () override;  ;  Public Member Functions inherited from sofa::core::visual::VisualModel;  SOFA_ABSTRACT_CLASS (VisualModel, objectmodel::BaseObject);  ; virtual void drawVisual (const VisualParams *) final;  Display the VisualModel object. More...;  ; void initVisual (const VisualParams *);  Initialize the textures, or other graphical resources. More...;  ; virtual void initVisual () final;  ; void updateVisual (const VisualParams *);  used to update the model if necessary. More...;  ; virtual void updateVisual () final;  ; virtual void clearVisual ();  clear some graphical resources (generally called before the deleteVisitor). More...;  ; virtual void drawTransparent (const VisualParams *);  Display transparent surfaces. More...;  ; virtual void drawShadow (const VisualParams *vparams);  Display shadow-casting surfaces. More...;  ; virtual void parallelUpdateVisual ();  used to update the model if necessary. More...;  ; virtual bool addBBox (SReal *, SReal *);  used to add the bounding-box of this visual model to the given bounding box in order to compute the scene bounding box or cull hidden objects. More...;  ; virtual void applyTranslation (const SReal, const SReal, const SReal);  ; virtual void applyRotation (const SReal, const SReal, const SReal);  ; virtual void applyRotation (const type::Quat< SReal >);  ; virtual void applyScale (const SReal, const SReal, const SReal);  ; virtual void exportOBJ (std::string, std::ostream *, std::ostream *, sofa::Index &, sofa::Index &, sofa::Index &, int &);  Append this mesh to an OBJ format ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_attribute.html:3804,update,updateVisual,3804,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_attribute.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_attribute.html,13,['update'],['updateVisual']
Deployability,"vior::BaseConstraintSet; sofa::core::behavior::SingleStateAccessor::SOFA_ABSTRACT_CLASS(SOFA_TEMPLATE(SingleStateAccessor, DataTypes), StateAccessor)sofa::core::behavior::SingleStateAccessor< DataTypes >; sofa::core::behavior::StateAccessor::SOFA_ABSTRACT_CLASS(StateAccessor, objectmodel::BaseObject)sofa::core::behavior::StateAccessor; SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SOFA_CLASS2(SOFA_TEMPLATE(Constraint, DataTypes), BaseConstraint, SOFA_TEMPLATE(SingleStateAccessor, DataTypes))sofa::core::behavior::Constraint< DataTypes >; SPtr typedefsofa::core::objectmodel::Base; StateAccessor()sofa::core::behavior::StateAccessorinlineprotected; storeLambda(const ConstraintParams *cParams, MultiVecDerivId res, const sofa::linearalgebra::BaseVector *lambda) overridesofa::core::behavior::Constraint< DataTypes >virtual; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecConstArea typedefsofa::core::behavior::BaseConstraint; VecConstCoord typedefsofa::core::behavior::BaseConstraint; VecConstDeriv typedefsofa::core::behavior::BaseConstraint; VecConstraintBlockInfo typedefsofa::core::behavior::BaseConstraint; VecCoord typedefsofa::core::behavior::Constraint< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecDeriv typedefsofa::core::behavior::Constraint< DataTypes >; VecLink typedefsofa::core::objectmodel::Base; VecPersistentID typedefsofa::core::behavior::BaseConstraint; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseConstraint() overridesofa::core::behavior::BaseConstraintinlineprotec",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_constraint-members.html:14994,update,updateInternal,14994,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_constraint-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_constraint-members.html,1,['update'],['updateInternal']
Deployability,"vior::ForceField, DataTypes))sofa::component::solidmechanics::tensormass::TriangularTensorMassForceField< DataTypes >; ForceField< DataTypes >::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SOFA_CLASS2(SOFA_TEMPLATE(ForceField, DataTypes), BaseForceField, SOFA_TEMPLATE(SingleStateAccessor, DataTypes))sofa::core::behavior::ForceField< DataTypes >; SPtr typedefsofa::core::objectmodel::Base; StateAccessor()sofa::core::behavior::StateAccessorinlineprotected; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; TriangularTensorMassForceField()sofa::component::solidmechanics::tensormass::TriangularTensorMassForceField< DataTypes >protected; updateInternal()sofa::core::objectmodel::BaseObject; updateLameCoefficients()sofa::component::solidmechanics::tensormass::TriangularTensorMassForceField< DataTypes >; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateMatrixsofa::component::solidmechanics::tensormass::TriangularTensorMassForceField< DataTypes >protected; VecCoord typedefsofa::component::solidmechanics::tensormass::TriangularTensorMassForceField< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecDeriv typedefsofa::component::solidmechanics::tensormass::TriangularTensorMassForceField< DataTypes >; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseForceField() override=defaultsofa::core::behavior::BaseForceFieldprotected; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~ForceField() overridesofa::core::behavior::ForceField< DataTypes >protected; ~SingleStateAccessor() override=defaultsofa::core::behavior::SingleStateAccesso",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1tensormass_1_1_triangular_tensor_mass_force_field-members.html:18422,update,updateMatrixsofa,18422,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1tensormass_1_1_triangular_tensor_mass_force_field-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1tensormass_1_1_triangular_tensor_mass_force_field-members.html,1,['update'],['updateMatrixsofa']
Deployability,"vior::Mass< DataTypes >. ◆ applyEdgeCreation(). template<class DataTypes , class GeometricalTypes > . void sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >::applyEdgeCreation ; (; const sofa::type::vector< EdgeID > & ; edgeAdded, . const sofa::type::vector< Edge > & ; , . const sofa::type::vector< sofa::type::vector< EdgeID > > & ; , . const sofa::type::vector< sofa::type::vector< SReal > > & ;  . ). protected . Method to update See alsod_vertexMass when a new Edge is created. Will be set as callback in the PointData . d_vertexMass to update the mass vector when EDGESADDED event is fired. . ◆ applyEdgeDestruction(). template<class DataTypes , class GeometricalTypes > . void sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >::applyEdgeDestruction ; (; const sofa::type::vector< EdgeID > & ; edgeRemoved). protected . Method to update See alsod_vertexMass when a Edge is removed. Will be set as callback in the PointData . d_vertexMass to update the mass vector when EDGESREMOVED event is fired. . ◆ applyPointCreation(). template<class DataTypes , class GeometricalTypes > . void sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >::applyPointCreation ; (; PointID ; pointIndex, . MassType & ; m, . const Point & ; , . const sofa::type::vector< PointID > & ; , . const sofa::type::vector< SReal > & ;  . ). protected . Method to initialize See alsoMassVector when a new Point is created. Will be set as creation callback in the PointData . d_vertexMass . ◆ applyPointDestruction(). template<class DataTypes , class GeometricalTypes > . void sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >::applyPointDestruction ; (; Index ; id, . MassType & ; VertexMass . ). protected . Method to update See alsod_vertexMass when a Point is removed. Will be set as destruction callback in the PointData . d_vertexMass . ◆ buildDampingMatrix(). template<class DataTypes , class GeometricalTypes = DataTypes> . void sofa::component::mass::Di",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_diagonal_mass.html:34986,update,update,34986,api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_diagonal_mass.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_diagonal_mass.html,1,['update'],['update']
Deployability,"vior::SingleStateAccessor< DataTypes >;  SOFA_ABSTRACT_CLASS (SOFA_TEMPLATE(SingleStateAccessor, DataTypes), StateAccessor);  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; MechanicalState< DataTypes > * getMState ();  ; const MechanicalState< DataTypes > * getMState () const;  ;  Public Member Functions inherited from sofa::core::behavior::BaseMass;  SOFA_ABSTRACT_CLASS (BaseMass, StateAccessor);  ; virtual bool isDiagonal () const =0;  ; virtual void buildMassMatrix (sofa::core::behavior::MassMatrixAccumulator *matrices);  . Protected Member Functions;  Mass (MechanicalState< DataTypes > *mm=nullptr);  ;  ~Mass () override;  ;  Protected Member Functions inherited from sofa::core::behavior::ForceField< DataTypes >;  ForceField (MechanicalState< DataTypes > *mm=nullptr);  ;  ~ForceField () override;  ;  Protected Member Functions inherited from sofa::core::behavior::BaseForceField;  BaseForceField ();  ;  ~BaseForceField () override=default;  ;  Protected Member Functions inherited from sofa::core::behavior::StateAccessor;  StateAccessor ();  ;  ~StateAccessor () override=default;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtua",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_mass.html:17351,update,update,17351,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_mass.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_mass.html,1,['update'],['update']
Deployability,"virtual void removeControllers ();  Remove odesolvers and mastercontroler. More...;  ; Node * getChild (const std::string &name) const;  Find a child node given its name. More...;  ; Node * getTreeNode (const std::string &name) const;  Get a descendant node given its name. More...;  ; Node * getNodeInGraph (const std::string &absolutePath) const;  Get a node in the scene graph matching the given absolute path. More...;  ; Children getChildren () const override;  Get children nodes. More...;  ; BaseContext * getRootContext () const override;  Get the root context of the graph. More...;  ; Node * setDebug (bool);  ; bool getDebug () const;  ; void printComponents ();  ; const BaseContext * getContext () const override;  Get this node context. More...;  ; BaseContext * getContext () override;  Get this node context. More...;  ; virtual void updateContext ();  Update the whole context values, based on parent and local ContextObjects. More...;  ; virtual void updateSimulationContext ();  Update the simulation context values(gravity, time...), based on parent and local ContextObjects. More...;  ; virtual void initVisualContext ();  Called during initialization to correctly propagate the visual context to the children. More...;  ; void propagateEvent (const sofa::core::ExecParams *params, sofa::core::objectmodel::Event *event) override;  Propagate an event. More...;  ; virtual void updateVisualContext ();  Update the visual context values, based on parent and local ContextObjects. More...;  ; virtual void initialize ();  Must be called after each graph modification. Do not call it directly, apply an InitVisitor instead. More...;  ; virtual void setDefaultVisualContextValue ();  Called after initialization to set the default value of the visual context. More...;  ; virtual Node * findCommonParent (simulation::Node *node2)=0;  return the smallest common parent between this and node2 (returns nullptr if separated sub-graphes) More...;  ; void setSleeping (bool val) override; ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:5838,update,updateSimulationContext,5838,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,1,['update'],['updateSimulationContext']
Deployability,"visual::VisualModel; sofa::gl::component::shader::OglShaderElement::SOFA_ABSTRACT_CLASS(ShaderElement, objectmodel::BaseObject)sofa::core::visual::ShaderElement; SOFA_CLASS(OglTexture2D, OglTexture)sofa::gl::component::shader::OglTexture2D; sofa::gl::component::shader::OglTexture::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SOFA_CLASS2(OglTexture, core::visual::VisualModel, OglShaderElement)sofa::gl::component::shader::OglTexture; SPtr typedefsofa::core::objectmodel::Base; srgbColorspacesofa::gl::component::shader::OglTextureprotected; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; texturesofa::gl::component::shader::OglTextureprotected; textureFilenamesofa::gl::component::shader::OglTextureprotected; textureUnitsofa::gl::component::shader::OglTextureprotected; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; unbind()sofa::gl::component::shader::OglTexture; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateVisual(const VisualParams *)sofa::core::visual::VisualModel; updateVisual() finalsofa::core::visual::VisualModelvirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VisualModel()sofa::core::visual::VisualModelprotected; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~OglShaderElement() overridesofa::gl::component::shader::OglShaderElementinline; ~OglTexture() overridesofa::gl::component::shader::OglTextureprotected; ~OglTexture2D() overridesofa::gl::component::shader::OglTexture2D; ~ShaderElement() overridesofa::core::visual::ShaderElementinlineprotected; ~VisualMode",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_texture2_d-members.html:14753,update,updateLinks,14753,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_texture2_d-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_texture2_d-members.html,1,['update'],['updateLinks']
Deployability,visual::VisualModelImpl; State()sofa::core::State< TDataTypes >protected; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; texsofa::gl::component::rendering3d::OglModelprotected; TexCoord typedefsofa::component::visual::VisualModelImpl; texturenamesofa::component::visual::VisualModelImpl; texturessofa::gl::component::rendering3d::OglModelprotected; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; trianglesRevisionsofa::gl::component::rendering3d::OglModelprotected; updateBuffers() overridesofa::gl::component::rendering3d::OglModelvirtual; updateEdgesIndicesBuffer()sofa::gl::component::rendering3d::OglModel; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateQuadsIndicesBuffer()sofa::gl::component::rendering3d::OglModel; updateTrianglesIndicesBuffer()sofa::gl::component::rendering3d::OglModel; updateVertexBuffer()sofa::gl::component::rendering3d::OglModel; updateVisual(const VisualParams *)sofa::core::visual::VisualModel; updateVisual() finalsofa::core::visual::VisualModelvirtual; useEdgessofa::gl::component::rendering3d::OglModelprotected; useQuadssofa::gl::component::rendering3d::OglModelprotected; useTopologysofa::component::visual::VisualModelImpl; useTrianglessofa::gl::component::rendering3d::OglModelprotected; vbosofa::gl::component::rendering3d::OglModelprotected; VBOGenDonesofa::gl::component::rendering3d::OglModelprotected; Vec3Real typedefsofa::component::visual::VisualModelImpl; VecCoord typedefsofa::component::visual::VisualModelImpl; VecData typedefsofa::core::objectmodel::Base; VecDeriv typedefsofa::component::visual::VisualModelImpl; VecLink typedefsofa::core::objectmodel::Base; VecReal typedefsofa::core::State< TDataTypes >; VecSlaves typedefsofa::core::objectmodel::BaseObject; VecTexCoord typedefsofa::component::visual::VisualModelImpl; VecVisualEdge typedefsofa::component::visual::VisualModelImpl; VecVisualQuad typedefsofa::co,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_ogl_model-members.html:27185,update,updateVisual,27185,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_ogl_model-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_ogl_model-members.html,2,['update'],['updateVisual']
Deployability,"visual::VisualParams *) override;  Called before objects in the current branch are displayed. More...;  ; void bwdDraw (core::visual::VisualParams *) override;  Called after objects in the current branch are displayed. More...;  ; std::string getTextureName ();  ; unsigned short getTextureUnit ();  ; void bind ();  ; void unbind ();  ; ShaderElementType getSEType () const override;  Returns the type of shader element (texture, macro, variable, or attribute) More...;  ; const core::objectmodel::BaseData * getSEValue () const override;  ; core::objectmodel::BaseData * getSEValue () override;  ;  Public Member Functions inherited from sofa::core::visual::VisualModel;  SOFA_ABSTRACT_CLASS (VisualModel, objectmodel::BaseObject);  ; virtual void drawVisual (const VisualParams *) final;  Display the VisualModel object. More...;  ; void initVisual (const VisualParams *);  Initialize the textures, or other graphical resources. More...;  ; virtual void initVisual () final;  ; void updateVisual (const VisualParams *);  used to update the model if necessary. More...;  ; virtual void updateVisual () final;  ; virtual void clearVisual ();  clear some graphical resources (generally called before the deleteVisitor). More...;  ; virtual void drawTransparent (const VisualParams *);  Display transparent surfaces. More...;  ; virtual void drawShadow (const VisualParams *vparams);  Display shadow-casting surfaces. More...;  ; virtual void parallelUpdateVisual ();  used to update the model if necessary. More...;  ; virtual bool addBBox (SReal *, SReal *);  used to add the bounding-box of this visual model to the given bounding box in order to compute the scene bounding box or cull hidden objects. More...;  ; virtual void applyTranslation (const SReal, const SReal, const SReal);  ; virtual void applyRotation (const SReal, const SReal, const SReal);  ; virtual void applyRotation (const type::Quat< SReal >);  ; virtual void applyScale (const SReal, const SReal, const SReal);  ; virtual void ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_texture.html:4651,update,updateVisual,4651,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_texture.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_texture.html,4,['update'],"['update', 'updateVisual']"
Deployability,"void sofa::component::topology::utility::TopologicalChangeProcessor::inciseWithSavedIndices ; (; ). protected . ◆ init(). void sofa::component::topology::utility::TopologicalChangeProcessor::init ; (; void ; ). overridevirtual . Initialization method called at graph creation and modification, during top-down traversal. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ processTopologicalChanges() [1/2]. void sofa::component::topology::utility::TopologicalChangeProcessor::processTopologicalChanges ; (; ). ◆ processTopologicalChanges() [2/2]. void sofa::component::topology::utility::TopologicalChangeProcessor::processTopologicalChanges ; (; double ; time). ◆ readDataFile(). void sofa::component::topology::utility::TopologicalChangeProcessor::readDataFile ; (; ). virtual . ◆ readNext(). bool sofa::component::topology::utility::TopologicalChangeProcessor::readNext ; (; double ; time, . std::vector< std::string > & ; lines . ). ◆ reinit(). void sofa::component::topology::utility::TopologicalChangeProcessor::reinit ; (; ). overridevirtual . Update method called when variables used in precomputation are modified. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ saveIndices(). void sofa::component::topology::utility::TopologicalChangeProcessor::saveIndices ; (; ). protected . ◆ setTime(). void sofa::component::topology::utility::TopologicalChangeProcessor::setTime ; (; double ; time). ◆ SOFA_CLASS(). sofa::component::topology::utility::TopologicalChangeProcessor::SOFA_CLASS ; (; TopologicalChangeProcessor ; , . core::objectmodel::BaseObject ;  . ). ◆ updateTriangleIncisionInformation(). void sofa::component::topology::utility::TopologicalChangeProcessor::updateTriangleIncisionInformation ; (; ). If a topological change happened, the triangleIncisionInformation are wrong, so the need to update them Note : only after a computeCoordinates . sofacomponenttopologyutilityTopologicalChangeProcessor; Generated on Mon Nov 11 2024 03:10:04 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1utility_1_1_topological_change_processor.html:27783,update,updateTriangleIncisionInformation,27783,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1utility_1_1_topological_change_processor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1utility_1_1_topological_change_processor.html,3,['update'],"['update', 'updateTriangleIncisionInformation']"
Deployability,"void addAlias (BaseLink *link, const char *alias);  Add an alias to a Link. More...;  ; const VecData & getDataFields () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapData & getDataAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; const VecLink & getLinks () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapLink & getLinkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Protected Member Functions;  Detection ();  ; virtual void changeInstanceBP (Instance);  ; virtual void changeInstanceNP (Instance);  ; void changeInstance (Instance inst) override;  ;  Protected Member Functions inherited from sofa::core::collision::CollisionAlgorithm;  CollisionAlgorithm ();  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true,",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_detection.html:11140,update,update,11140,api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_detection.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_detection.html,1,['update'],['update']
Deployability,"void addLink (BaseLink *l);  Add a link. More...;  ; void addAlias (BaseLink *link, const char *alias);  Add an alias to a Link. More...;  ; const VecData & getDataFields () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapData & getDataAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; const VecLink & getLinks () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapLink & getLinkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Protected Member Functions;  RecordedCamera ();  ;  ~RecordedCamera () override;  ;  Protected Member Functions inherited from sofa::component::visual::BaseCamera; void updateOutputData ();  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initD",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1visual_1_1_recorded_camera.html:20209,update,updateOutputData,20209,api/master/sofa/html/classsofa_1_1component_1_1visual_1_1_recorded_camera.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1visual_1_1_recorded_camera.html,2,['update'],"['update', 'updateOutputData']"
Deployability,"void applyRotation (const sofa::type::Quat< SReal > q) override;  ; void applyScale (const SReal sx, const SReal sy, const SReal sz) override;  ; virtual void applyUVTransformation ();  ; void applyUVTranslation (const Real dU, const Real dV);  ; void applyUVScale (const Real su, const Real sv);  ; void setTranslation (SReal dx, SReal dy, SReal dz);  ; void setRotation (SReal rx, SReal ry, SReal rz);  ; void setScale (SReal sx, SReal sy, SReal sz);  ;  Public Member Functions inherited from sofa::core::visual::VisualModel;  SOFA_ABSTRACT_CLASS (VisualModel, objectmodel::BaseObject);  ; virtual void drawVisual (const VisualParams *) final;  Display the VisualModel object. More...;  ; void initVisual (const VisualParams *);  Initialize the textures, or other graphical resources. More...;  ; virtual void initVisual () final;  ; void updateVisual (const VisualParams *);  used to update the model if necessary. More...;  ; virtual void updateVisual () final;  ; virtual void clearVisual ();  clear some graphical resources (generally called before the deleteVisitor). More...;  ; virtual void fwdDraw (VisualParams *);  Called before objects in the current branch are displayed. More...;  ; virtual void bwdDraw (VisualParams *);  Called after objects in the current branch are displayed. More...;  ; virtual void parallelUpdateVisual ();  used to update the model if necessary. More...;  ; virtual bool addBBox (SReal *, SReal *);  used to add the bounding-box of this visual model to the given bounding box in order to compute the scene bounding box or cull hidden objects. More...;  ; bool insertInNode (objectmodel::BaseNode *node) override;  ; bool removeInNode (objectmodel::BaseNode *node) override;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObject;  SOFA_CLASS (BaseObject, Base);  ; virtual void draw (const core::visual::VisualParams *);  Render internal data of this object, for debugging purposes. More...;  ; void setSrc (const std::string &v, std::v",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_merge_visual_models.html:13536,update,updateVisual,13536,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_merge_visual_models.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_merge_visual_models.html,2,['update'],['updateVisual']
Deployability,"void applyRotation (const sofa::type::Quat< SReal > q) override;  ; void applyScale (const SReal sx, const SReal sy, const SReal sz) override;  ; virtual void applyUVTransformation ();  ; void applyUVTranslation (const Real dU, const Real dV);  ; void applyUVScale (const Real su, const Real sv);  ; void setTranslation (SReal dx, SReal dy, SReal dz);  ; void setRotation (SReal rx, SReal ry, SReal rz);  ; void setScale (SReal sx, SReal sy, SReal sz);  ;  Public Member Functions inherited from sofa::core::visual::VisualModel;  SOFA_ABSTRACT_CLASS (VisualModel, objectmodel::BaseObject);  ; virtual void drawVisual (const VisualParams *) final;  Display the VisualModel object. More...;  ; void initVisual (const VisualParams *);  Initialize the textures, or other graphical resources. More...;  ; virtual void initVisual () final;  ; void updateVisual (const VisualParams *);  used to update the model if necessary. More...;  ; virtual void updateVisual () final;  ; virtual void clearVisual ();  clear some graphical resources (generally called before the deleteVisitor). More...;  ; virtual void parallelUpdateVisual ();  used to update the model if necessary. More...;  ; virtual bool addBBox (SReal *, SReal *);  used to add the bounding-box of this visual model to the given bounding box in order to compute the scene bounding box or cull hidden objects. More...;  ; bool insertInNode (objectmodel::BaseNode *node) override;  ; bool removeInNode (objectmodel::BaseNode *node) override;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObject;  SOFA_CLASS (BaseObject, Base);  ; virtual void draw (const core::visual::VisualParams *);  Render internal data of this object, for debugging purposes. More...;  ; void setSrc (const std::string &v, std::vector< std::string > *attributeList=nullptr);  Sets a source Object and parses it to collect dependent Data. More...;  ; void setSrc (const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeLi",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_shader_visual_model.html:16547,update,updateVisual,16547,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_shader_visual_model.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_shader_visual_model.html,1,['update'],['updateVisual']
Deployability,"void computeStressPerVertex ();  Method to compute the averageStress per vertex. Call if. More...;  ; virtual void applyStiffness (VecCoord &f, Real h, const VecCoord &x, const Real &kFactor);  f += Kx where K is the stiffness matrix and x a displacement More...;  ; virtual void computeMaterialStiffness (int i, Index &a, Index &b, Index &c);  ; void initSmall (int i, Index &a, Index &b, Index &c);  ; void accumulateForceSmall (VecCoord &f, const VecCoord &p);  ; void applyStiffnessSmall (VecCoord &f, Real h, const VecCoord &x, const Real &kFactor);  ; void initLarge (int i, Index &a, Index &b, Index &c);  ; void accumulateForceLarge (VecCoord &f, const VecCoord &p);  ; void applyStiffnessLarge (VecCoord &f, Real h, const VecCoord &x, const Real &kFactor);  ;  Protected Member Functions inherited from sofa::component::solidmechanics::fem::elastic::BaseLinearElasticityFEMForceField< DataTypes >; void checkPoissonRatio ();  ; void checkYoungModulus ();  ; Real getVecRealInElement (sofa::Size elementId, const Data< VecReal > &data, Real defaultValue) const;  ;  Protected Member Functions inherited from sofa::core::behavior::ForceField< DataTypes >;  ForceField (MechanicalState< DataTypes > *mm=nullptr);  ;  ~ForceField () override;  ;  Protected Member Functions inherited from sofa::core::behavior::BaseForceField;  BaseForceField ();  ;  ~BaseForceField () override=default;  ;  Protected Member Functions inherited from sofa::core::behavior::StateAccessor;  StateAccessor ();  ;  ~StateAccessor () override=default;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackIn",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_triangular_f_e_m_force_field.html:23466,update,update,23466,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_triangular_f_e_m_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_triangular_f_e_m_force_field.html,1,['update'],['update']
Deployability,"void setYoungModulus (Real val);  ; Real getYoungModulusInElement (sofa::Size elementId) const;  ; Real getPoissonRatioInElement (sofa::Size elementId) const;  . Protected Member Functions;  HexahedralFEMForceFieldAndMass ();  ; virtual void computeElementMasses ();  compute the mass matrices More...;  ; Real integrateVolume (int signx, int signy, int signz, Real l0, Real l1, Real l2);  ; virtual void computeElementMass (ElementMass &Mass, Real &totalMass, const type::fixed_array< Coord, 8 > &nodes);  compute the mass matrix of an element More...;  ; void computeParticleMasses ();  ; void computeLumpedMasses ();  ;  Protected Member Functions inherited from sofa::core::behavior::Mass< DataTypes >;  Mass (MechanicalState< DataTypes > *mm=nullptr);  ;  ~Mass () override;  ;  Protected Member Functions inherited from sofa::core::behavior::ForceField< DataTypes >;  ForceField (MechanicalState< DataTypes > *mm=nullptr);  ;  ~ForceField () override;  ;  Protected Member Functions inherited from sofa::core::behavior::BaseForceField;  BaseForceField ();  ;  ~BaseForceField () override=default;  ;  Protected Member Functions inherited from sofa::core::behavior::StateAccessor;  StateAccessor ();  ;  ~StateAccessor () override=default;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions in",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_hexahedral_f_e_m_force_field_and_mass.html:21648,update,update,21648,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_hexahedral_f_e_m_force_field_and_mass.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_hexahedral_f_e_m_force_field_and_mass.html,1,['update'],['update']
Deployability,"void updateContextStep (sofa::core::visual::VisualParams *);  Update contexts. Required before drawing the scene if root flags are modified. More...;  ; virtual void drawStep (sofa::core::visual::VisualParams *);  Render the scene. More...;  ; virtual void computeBBoxStep (sofa::core::visual::VisualParams *, SReal *, SReal *, bool);  Compute the bounding box of the scene. If init is set to ""true"", then minBBox and maxBBox will be initialised to a default value. More...;  ; bool insertInNode (objectmodel::BaseNode *node) override;  ; bool removeInNode (objectmodel::BaseNode *node) override;  ;  Public Member Functions inherited from sofa::core::visual::VisualModel;  SOFA_ABSTRACT_CLASS (VisualModel, objectmodel::BaseObject);  ; virtual void drawVisual (const VisualParams *) final;  Display the VisualModel object. More...;  ; void initVisual (const VisualParams *);  Initialize the textures, or other graphical resources. More...;  ; virtual void initVisual () final;  ; void updateVisual (const VisualParams *);  used to update the model if necessary. More...;  ; virtual void updateVisual () final;  ; virtual void clearVisual ();  clear some graphical resources (generally called before the deleteVisitor). More...;  ; virtual void fwdDraw (VisualParams *);  Called before objects in the current branch are displayed. More...;  ; virtual void bwdDraw (VisualParams *);  Called after objects in the current branch are displayed. More...;  ; virtual void drawTransparent (const VisualParams *);  Display transparent surfaces. More...;  ; virtual void drawShadow (const VisualParams *vparams);  Display shadow-casting surfaces. More...;  ; virtual void parallelUpdateVisual ();  used to update the model if necessary. More...;  ; virtual bool addBBox (SReal *, SReal *);  used to add the bounding-box of this visual model to the given bounding box in order to compute the scene bounding box or cull hidden objects. More...;  ; virtual void applyTranslation (const SReal, const SReal, const S",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1visual_1_1_visual_loop.html:1638,update,updateVisual,1638,api/master/sofa/html/classsofa_1_1core_1_1visual_1_1_visual_loop.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1visual_1_1_visual_loop.html,2,['update'],"['update', 'updateVisual']"
Deployability,"v readForces () const;  ; WriteVecDeriv writeForces ();  ; WriteOnlyVecDeriv writeOnlyForces ();  ; ReadVecDeriv readDx () const;  ; WriteVecDeriv writeDx ();  ; WriteOnlyVecDeriv writeOnlyDx ();  ; ReadVecDeriv readNormals () const;  ; const AccumulationVecId< TDataTypes, V_DERIV, V_READ > & readTotalForces () const;  Returns a proxy objects offering simplified access to elements of the cumulative sum of all force containers. More...;  ; void addToTotalForces (core::ConstVecDerivId forceId) override;  The provided VecDerivId will contribute to the sum of all force containers. More...;  ; void removeFromTotalForces (core::ConstVecDerivId forceId) override;  ;  Public Member Functions inherited from sofa::core::BaseState;  SOFA_ABSTRACT_CLASS (BaseState, objectmodel::BaseObject);  . Protected Member Functions;  OglCylinderModel ();  ;  ~OglCylinderModel () override;  ;  Protected Member Functions inherited from sofa::core::visual::VisualModel;  VisualModel ();  ;  ~VisualModel () override;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method us",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_ogl_cylinder_model.html:13689,update,update,13689,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_ogl_cylinder_model.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_ogl_cylinder_model.html,1,['update'],['update']
Deployability,"w of the mechanical system to animate. They are implemented by executing Visitors in the subtree of the scene-graph below this solver. . typedef simulation::Node::Sequence< core::behavior::OdeSolver > Solvers;  ; typedef core::collision::Pipeline Pipeline;  ; virtual void preCollisionComputation (const core::ExecParams *params=core::execparams::defaultInstance());  Function meant to be called before the actual collision computation. More...;  ; virtual void internalCollisionComputation (const core::ExecParams *params=core::execparams::defaultInstance());  Function performing the actual collision computation. More...;  ; virtual void postCollisionComputation (const core::ExecParams *params=core::execparams::defaultInstance());  Function meant to be called after the actual collision computation. More...;  ; virtual void computeCollision (const core::ExecParams *params=core::execparams::defaultInstance());  Activate collision pipeline. More...;  ; virtual void integrate (const core::ExecParams *params, SReal dt);  Activate OdeSolvers. More...;  ; const Solvers & getSolverSequence ();  . Additional Inherited Members;  Public Attributes inherited from sofa::core::behavior::BaseAnimationLoop; SingleLink< BaseAnimationLoop, core::objectmodel::BaseNode, BaseLink::FLAG_STOREPATH > l_node;  ; Data< bool > d_computeBoundingBox;  If true, compute the global bounding box of the scene at each time step. Used mostly for rendering. More...;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object be",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html:3675,integrat,integrate,3675,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html,1,['integrat'],['integrate']
Deployability,with multiple Data fields. More...;  ; void addOutputs (std::initializer_list< sofa::core::objectmodel::BaseData * > datas);  ; virtual void cleanDirty (const core::ExecParams *params=nullptr);  ; void updateAllInputsIfDirty ();  ;  Public Member Functions inherited from sofa::core::objectmodel::DDGNode;  DDGNode ();  Constructor. More...;  ; virtual ~DDGNode ();  Destructor. Automatically remove remaining links. More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void delInput (DDGNode *n);  Remove an input from this node. More...;  ; void addOutput (DDGNode *n);  Add a new output to this node. More...;  ; void delOutput (DDGNode *n);  Remove an output from this node. More...;  ; const DDGLinkContainer & getInputs ();  Get the list of inputs for this DDGNode. More...;  ; const DDGLinkContainer & getOutputs ();  Get the list of outputs for this DDGNode. More...;  ; virtual void update ()=0;  Update this value. More...;  ; bool isDirty () const;  Returns true if the DDGNode needs to be updated. More...;  ; virtual void setDirtyValue ();  Indicate the value needs to be updated. More...;  ; virtual void setDirtyOutputs ();  Indicate the outputs needs to be updated. This method must be called after changing the value of this node. More...;  ; void cleanDirty ();  Set dirty flag to false. More...;  ; virtual void notifyEndEdit ();  Notify links that the DGNode has been modified. More...;  ; void updateIfDirty () const;  Utility method to call update if necessary. This method should be called before reading of writing the value of this node. More...;  . Additional Inherited Members;  Protected Member Functions inherited from sofa::core::objectmodel::DDGNode; virtual void doAddInput (DDGNode *n);  ; virtual void doDelInput (DDGNode *n);  ; virtual void doAddOutput (DDGNode *n);  ; virtual void doDelOutput (DDGNode *n);  ; void cleanDirtyOutputsOfInputs ();  the dirtyOutputs flags of all the inputs will be set to false More...;  . Attribute det,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_data_tracker_d_d_g_node.html:2068,update,updated,2068,api/master/sofa/html/classsofa_1_1core_1_1_data_tracker_d_d_g_node.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_data_tracker_d_d_g_node.html,1,['update'],['updated']
Deployability,"wn traversal. More...;  ; void draw (const core::visual::VisualParams *vparams) override;  Render internal data of this object, for debugging purposes. More...;  ; void doUpdate () override;  Where you put your engine's impl. More...;  ; int getEdgePoint2 (int p, int e);  ; int getEdgeSize2 (int e);  ; Point getEdgeDir (int e);  ; void addTetra (SeqTetrahedra &outT, SeqPoints &outP, int p1, int p2, int p3, int p4, int line=0);  ; void addFinalTetra (SeqTetrahedra &outT, SeqPoints &outP, int p1, int p2, int p3, int p4, bool flip=false, int line=0);  ; int getSplitPoint (int from, int to);  ; bool flipDiag (const SeqPoints &outP, int a, int b, int c, int d, int e=-1);  Should the diagonal of abcd should be bd instead of ac ? More...;  ; bool needFlip (int p1, int p2, int p3, int p4, int q1, int q2, int q3, int q4);  Is the two given vertices order flipped. More...;  ;  Public Member Functions inherited from sofa::core::DataEngine;  SOFA_ABSTRACT_CLASS (DataEngine, core::objectmodel::BaseObject);  ; void update () final;  ; void addInput (sofa::core::objectmodel::BaseData *data);  Add a new input to this engine. More...;  ; void addOutput (objectmodel::BaseData *n);  Add a new output to this engine. More...;  ;  Public Member Functions inherited from sofa::core::DataTrackerDDGNode;  DataTrackerDDGNode ();  ; void addInputs (std::initializer_list< sofa::core::objectmodel::BaseData * > datas);  Create a DataCallback object associated with multiple Data fields. More...;  ; void addOutputs (std::initializer_list< sofa::core::objectmodel::BaseData * > datas);  ; virtual void cleanDirty (const core::ExecParams *params=nullptr);  ; void updateAllInputsIfDirty ();  ;  Public Member Functions inherited from sofa::core::objectmodel::DDGNode;  DDGNode ();  Constructor. More...;  ; virtual ~DDGNode ();  Destructor. Automatically remove remaining links. More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void delInput (DDGNode *n);  Remove an input fr",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_mesh_tetra_stuffing.html:5307,update,update,5307,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_mesh_tetra_stuffing.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_mesh_tetra_stuffing.html,1,['update'],['update']
Deployability,"x whose global index is vertexIndex. Returns -1 if none. More...;  ; int getEdgeIndexInHexahedron (const EdgesInHexahedron &t, EdgeID edgeIndex) const override;  Returns the index (either 0, 1 ,2 ,3, 4, 5, 6, 7, 8, 9, 10, 11) of the edge whose global index is edgeIndex. Returns -1 if none. More...;  ; int getQuadIndexInHexahedron (const QuadsInHexahedron &t, QuadID quadIndex) const override;  Returns the index (either 0, 1 ,2 ,3, 4, 5) of the quad whose global index is quadIndex. Returns -1 if none. More...;  ; Edge getLocalEdgesInTetrahedron (const HexahedronID i) const override;  Returns for each index (between 0 and 5) the two vertex indices that are adjacent to that edge. More...;  ; Edge getLocalEdgesInHexahedron (const HexahedronID i) const override;  Returns for each index (between 0 and 12) the two vertex indices that are adjacent to that edge. More...;  ; sofa::geometry::ElementType getTopologyType () const override;  ; void invalidate ();  ; virtual void updateTetrahedra ();  ; virtual void updateHexahedra ();  ; neighbors queries for Edge Topology; Returns the set of edges adjacent to a given vertex. . const EdgesAroundVertex & getEdgesAroundVertex (PointID i) override;  Returns the set of edges adjacent to a given vertex. More...;  ; const type::vector< EdgesAroundVertex > & getEdgesAroundVertexArray ();  Returns the TrianglesAroundVertex array (i.e. provide the triangles indices adjacent to each vertex). More...;  ; neighbors queries for Triangle Topology; Returns the set of triangle adjacent to a given vertex. . const TrianglesAroundVertex & getTrianglesAroundVertex (PointID i) override;  Returns the set of triangles adjacent to a given vertex. More...;  ; const type::vector< TrianglesAroundVertex > & getTrianglesAroundVertexArray ();  Returns the TrianglesAroundVertex array (i.e. provide the triangles indices adjacent to each vertex). More...;  ; const EdgesInTriangle & getEdgesInTriangle (TriangleID i) override;  Returns the set of 3 edge indices of ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1constant_1_1_mesh_topology.html:13100,update,updateTetrahedra,13100,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1constant_1_1_mesh_topology.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1constant_1_1_mesh_topology.html,2,['update'],"['updateHexahedra', 'updateTetrahedra']"
Deployability,"x, Vector > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::component::linearsolver::BaseMatrixLinearSolver< Matrix, Vector > Class Template Referenceabstract . #include <MatrixLinearSolver.h>. Inheritance diagram for sofa::component::linearsolver::BaseMatrixLinearSolver< Matrix, Vector >:. [legend]. Public Member Functions;  SOFA_CLASS (SOFA_TEMPLATE2(BaseMatrixLinearSolver, Matrix, Vector), sofa::core::behavior::LinearSolver);  ; virtual void invert (Matrix &M)=0;  ; virtual void solve (Matrix &M, Vector &solution, Vector &rh)=0;  ; virtual Matrix * getSystemMatrix ()=0;  ;  Public Member Functions inherited from sofa::core::behavior::LinearSolver;  SOFA_ABSTRACT_CLASS (LinearSolver, BaseLinearSolver);  ; virtual void resetSystem ()=0;  Reset the current linear system. More...;  ; virtual void setSystemMBKMatrix (const MechanicalParams *mparams)=0;  ; virtual void rebuildSystem (SReal, SReal);  ; virtual bool isAsyncSolver ();  Indicate if the solver update the system in parallel. More...;  ; virtual bool supportNonSymmetricSystem () const;  Returns true if the solver supports non-symmetric systems. More...;  ; virtual bool hasUpdatedMatrix ();  Indicate if the solver updated the system after the last call of setSystemMBKMatrix (should return true if isParallelSolver return false) More...;  ; virtual void updateSystemMatrix ();  This function is use for the preconditioner it must be called at each time step event if setSystemMBKMatrix is not called. More...;  ; virtual void setSystemRHVector (core::MultiVecDerivId v)=0;  Set the linear system right-hand term vector, from the values contained in the (Mechanical/Physical)State objects. More...;  ; virtual void setSystemLHVector (core::MultiVecDerivId v)=0;  ; virtual void solveSystem ()=0;  Solve the system as constructed using the previous methods. More...;  ; virtual void init_partial_solve ();  ; virtual voi",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsolver_1_1_base_matrix_linear_solver.html:1147,update,update,1147,api/master/sofa/html/classsofa_1_1component_1_1linearsolver_1_1_base_matrix_linear_solver.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsolver_1_1_base_matrix_linear_solver.html,1,['update'],['update']
Deployability,"x0);  functions that depends on OutputType and must be specialized More...;  ; void setInverse (Rigid3Types::Coord &inv, const Coord &x0);  ; void setInverse (Mat4x4 &inv, const Coord &x0);  ; void setInverse (defaulttype::Rigid3Types::Coord &inv, const Coord &x0);  ; void setInverse (type::Mat4x4 &inv, const Coord &x0);  ; void mult (type::Mat4x4 &out, const type::Mat4x4 &inv, const Coord &x);  out = out * inv More...;  ; void mult (Rigid3Types::Coord &out, const Rigid3Types::Coord &inv, const Coord &x);  ; void mult (Mat4x4 &out, const Mat4x4 &inv, const Coord &x);  ; void mult (defaulttype::Rigid3Types::Coord &out, const defaulttype::Rigid3Types::Coord &inv, const Coord &x);  ; void mult (type::Mat4x4 &out, const type::Mat4x4 &inv, const Coord &x);  ;  Protected Member Functions inherited from sofa::core::DataEngine;  DataEngine ();  Constructor. More...;  ;  ~DataEngine () override;  Destructor. Do nothing. More...;  ; virtual void doInternalUpdate () final;  Prevent engines to use the internalUpdate mechanism, so that only update/doUpdate is used. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::DDGNode; virtual void doAddInput (DDGNode *n);  ; virtual void doDelInput (DDGNode *n);  ; virtual void doAddOutput (DDGNode *n);  ; virtual void doDelOutput (DDGNode *n);  ; void cleanDirtyOutputsOfInputs ();  the dirtyOutputs flags of all the inputs will be set to false More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_displacement_matrix_engine.html:16471,update,update,16471,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_displacement_matrix_engine.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_displacement_matrix_engine.html,1,['update'],['update']
Deployability,"xInput vector used to compute . Implements sofa::core::behavior::ForceField< DataTypes >. ◆ addDForce() [3/3]. void sofa::component::mechanicalload::SurfacePressureForceField< defaulttype::Rigid3Types >::addDForce ; (; const core::MechanicalParams * ; mparams, . DataVecDeriv & ; df, . const DataVecDeriv & ; dx . ). virtual . Internal addDForce Overloaded function, usually called from the generic addDForce version. This addDForce version directly gives access to df and dx vectors through its parameters. Parameters. mparams; dfOutput vector to fill, result of ; dxInput vector used to compute . Implements sofa::core::behavior::ForceField< DataTypes >. ◆ addForce(). template<class DataTypes > . void sofa::component::mechanicalload::SurfacePressureForceField< DataTypes >::addForce ; (; const core::MechanicalParams * ; , . DataVecDeriv & ; f, . const DataVecCoord & ; x, . const DataVecDeriv & ; v . ). overridevirtual . Given the current position and velocity states, update the current force vector by computing and adding the forces associated with this ForceField.; If the ForceField can be represented as a matrix, this method computes ; This is the method that should be implemented by the component ; Implements sofa::core::behavior::ForceField< DataTypes >. ◆ addKToMatrix(). template<class DataTypes > . void sofa::component::mechanicalload::SurfacePressureForceField< DataTypes >::addKToMatrix ; (; const core::MechanicalParams * ; mparams, . const sofa::core::behavior::MultiMatrixAccessor * ; matrix . ). overridevirtual . Compute the system matrix corresponding to . ; Parameters. mparamsmparams->kFactor() is the coefficient for stiffness contributions (i.e. DOFs term in the ODE) ; matrixthe matrix to add the result to . Implements sofa::core::behavior::BaseForceField. ◆ addQuadSurfacePressure() [1/3]. template<class DataTypes > . void sofa::component::mechanicalload::SurfacePressureForceField< DataTypes >::addQuadSurfacePressure ; (; unsigned int ; quadId, . VecDeriv & ; f",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_surface_pressure_force_field.html:32830,update,update,32830,api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_surface_pressure_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_surface_pressure_force_field.html,1,['update'],['update']
Deployability,"xSym &outputTensor) override;  ; void ElasticityTensor (StrainInformation< DataTypes > *sinfo, const MaterialParameters< DataTypes > &param, Matrix6 &outputTensor) override;  ;  Public Member Functions inherited from sofa::component::solidmechanics::fem::hyperelastic::material::HyperelasticMaterial< DataTypes >; virtual ~HyperelasticMaterial ();  . Attribute details. ◆ Name. template<class DataTypes > . constexpr std::string_view sofa::component::solidmechanics::fem::hyperelastic::material::MooneyRivlin< DataTypes >::Name = ""MooneyRivlin"". staticconstexpr . Function details. ◆ applyElasticityTensor(). template<class DataTypes > . void sofa::component::solidmechanics::fem::hyperelastic::material::MooneyRivlin< DataTypes >::applyElasticityTensor ; (; StrainInformation< DataTypes > * ; , . const MaterialParameters< DataTypes > & ; , . const MatrixSym & ; , . MatrixSym & ;  . ). inlineoverridevirtual . computes the Elasticity Tensor of the current configuration ; Reimplemented from sofa::component::solidmechanics::fem::hyperelastic::material::HyperelasticMaterial< DataTypes >. ◆ deriveSPKTensor(). template<class DataTypes > . void sofa::component::solidmechanics::fem::hyperelastic::material::MooneyRivlin< DataTypes >::deriveSPKTensor ; (; StrainInformation< DataTypes > * ; , . const MaterialParameters< DataTypes > & ; , . MatrixSym & ;  . ). inlineoverridevirtual . computes the second Piola Kirchhoff stress tensor of the current configuration ; Reimplemented from sofa::component::solidmechanics::fem::hyperelastic::material::HyperelasticMaterial< DataTypes >. ◆ ElasticityTensor(). template<class DataTypes > . void sofa::component::solidmechanics::fem::hyperelastic::material::MooneyRivlin< DataTypes >::ElasticityTensor ; (; StrainInformation< DataTypes > * ; sinfo, . const MaterialParameters< DataTypes > & ; param, . Matrix6 & ; outputTensor . ). inlineoverridevirtual . Reimplemented from sofa::component::solidmechanics::fem::hyperelastic::material::HyperelasticMaterial< ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_mooney_rivlin.html:2695,configurat,configuration,2695,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_mooney_rivlin.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_mooney_rivlin.html,1,['configurat'],['configuration']
Deployability,"xecParams * ; params, . simulation::Node * ; context . ). protected . 2.calling GetConstraintViolationVisitor: each constraint provides its present violation for a given state (by default: free_position TODO: add VecId to make this method more generic) . ◆ init(). void sofa::component::animationloop::ConstraintAnimationLoop::init ; (; void ; ). overridevirtual . Initialization method called at graph creation and modification, during top-down traversal. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ launchCollisionDetection(). void sofa::component::animationloop::ConstraintAnimationLoop::launchCollisionDetection ; (; const core::ExecParams * ; params). protected . ◆ setConstraintEquations(). void sofa::component::animationloop::ConstraintAnimationLoop::setConstraintEquations ; (; const core::ExecParams * ; params, . simulation::Node * ; context . ). protected . ◆ SOFA_CLASS(). sofa::component::animationloop::ConstraintAnimationLoop::SOFA_CLASS ; (; ConstraintAnimationLoop ; , . sofa::simulation::CollisionAnimationLoop ;  . ). ◆ step(). void sofa::component::animationloop::ConstraintAnimationLoop::step ; (; const core::ExecParams * ; params, . SReal ; dt . ). overridevirtual . Main computation method.; Specify and execute all computations for computing a timestep, such as one or more collisions and integrations stages. ; Implements sofa::core::behavior::BaseAnimationLoop. ◆ writeAndAccumulateAndCountConstraintDirections(). void sofa::component::animationloop::ConstraintAnimationLoop::writeAndAccumulateAndCountConstraintDirections ; (; const core::ExecParams * ; params, . simulation::Node * ; context, . unsigned int & ; numConstraints . ). protected . Specific procedures that are called for setting the constraints: ; 1.calling resetConstraint & setConstraint & accumulateConstraint visitors and resize the constraint problem that will be solved . sofacomponentanimationloopConstraintAnimationLoop; Generated on Mon Nov 11 2024 02:19:50 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1animationloop_1_1_constraint_animation_loop.html:25327,integrat,integrations,25327,api/master/sofa/html/classsofa_1_1component_1_1animationloop_1_1_constraint_animation_loop.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1animationloop_1_1_constraint_animation_loop.html,1,['integrat'],['integrations']
Deployability,"xt;  ; LinkSlaves l_slaves;  ; SingleLink< BaseObject, BaseObject, BaseLink::FLAG_DOUBLELINK > l_master;  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  . Public Member Functions;  SOFA_CLASS (SOFA_TEMPLATE(TransformEngine, DataTypes), core::DataEngine);  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; void reinit () override;  Update method called when variables used in precomputation are modified. More...;  ;  Public Member Functions inherited from sofa::core::DataEngine;  SOFA_ABSTRACT_CLASS (DataEngine, core::objectmodel::BaseObject);  ; void update () final;  ; void addInput (sofa::core::objectmodel::BaseData *data);  Add a new input to this engine. More...;  ; void addOutput (objectmodel::BaseData *n);  Add a new output to this engine. More...;  ;  Public Member Functions inherited from sofa::core::DataTrackerDDGNode;  DataTrackerDDGNode ();  ; void addInputs (std::initializer_list< sofa::core::objectmodel::BaseData * > datas);  Create a DataCallback object associated with multiple Data fields. More...;  ; void addOutputs (std::initializer_list< sofa::core::objectmodel::BaseData * > datas);  ; virtual void cleanDirty (const core::ExecParams *params=nullptr);  ; void updateAllInputsIfDirty ();  ;  Public Member Functions inherited from sofa::core::objectmodel::DDGNode;  DDGNode ();  Constructor. More...;  ; virtual ~DDGNode ();  Destructor. Automatically remove remaining links. More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void delInput (DDGNode *n);  Remove an input fr",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_transform_engine.html:2688,update,update,2688,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_transform_engine.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_transform_engine.html,1,['update'],['update']
Deployability,"y (const core::MechanicalParams *mparams, Data< OutVecCoord > &out, const Data< InVecCoord > &in) override;  ; void applyJ (const core::MechanicalParams *mparams, Data< OutVecDeriv > &out, const Data< InVecDeriv > &in) override;  ; void applyJT (const core::MechanicalParams *mparams, Data< InVecDeriv > &out, const Data< OutVecDeriv > &in) override;  ; void applyJT (const core::ConstraintParams *cparams, Data< InMatrixDeriv > &out, const Data< OutMatrixDeriv > &in) override;  ; void applyDJT (const core::MechanicalParams *mparams, core::MultiVecDerivId parentForce, core::ConstMultiVecDerivId childForce) override;  Accumulate a change of parent force due to the change of the mapping, for a constant child force. Null for linear mappings. More...;  ; const sofa::linearalgebra::BaseMatrix * getJ () override;  ; virtual const type::vector< sofa::linearalgebra::BaseMatrix * > * getJs () override;  ; void updateK (const core::MechanicalParams *mparams, core::ConstMultiVecDerivId childForceId) override;  ; const linearalgebra::BaseMatrix * getK () override;  ; void buildGeometricStiffnessMatrix (sofa::core::GeometricStiffnessMatrix *matrices) override;  Assembles the geometric stiffness matrix of the mapping in the provided matrix object. More...;  ; void draw (const core::visual::VisualParams *vparams) override;  Render internal data of this object, for debugging purposes. More...;  ; void clear (sofa::Size reserve=0);  ; void setRepartition (sofa::Size value);  ; void setRepartition (sofa::type::vector< sofa::Size > values);  ; void parse (core::objectmodel::BaseObjectDescription *arg) override;  Parse the given description to assign values to this object's fields and potentially other parameters. More...;  ; void getGlobalToLocalCoords (OutCoord &result, const InCoord &xfrom, const OutCoord &xto);  ; void updateOmega (typename InDeriv::Rot &omega, const OutDeriv &out, const OutCoord &rotatedpoint);  ; void getGlobalToLocalCoords (OutCoord &result, const InCoord &xFrom, con",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1nonlinear_1_1_rigid_mapping.html:6791,update,updateK,6791,api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1nonlinear_1_1_rigid_mapping.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1nonlinear_1_1_rigid_mapping.html,1,['update'],['updateK']
Deployability,"y min and max coordinates of the cube on a coordinate axis. The between end points (d_min, d_max) and the field cube is that cube is always updated whereas d_min and d_max are stored values of the cube end points at previous time step. . Public Attributes; collision::geometry::Cube cube;  ; EndPointID * _min [3];  ; EndPointID * _max [3];  . Static Public Attributes; static double tolerance = (double)(1e-7);  . Public Member Functions;  ISAPBox ();  ;  ISAPBox (collision::geometry::Cube c);  ; bool endPointsOverlap (const ISAPBox &other, int axis) const;  ; bool overlaps (const ISAPBox &other, double alarmDist) const;  ; double squaredDistance (const ISAPBox &other) const;  ; void show () const;  ; void showEndPoints () const;  ; bool moving (int axis, double alarmDist) const;  ; bool moving (double alarmDist) const;  ; void init (int boxID, EndPointID **endPts);  ; void update (double alarmDist);  ; void updatedMin (int dim, EndPointID &end_point, double alarmDist) const;  ; void updatedMax (int dim, EndPointID &end_point, double alarmDist) const;  ; void updateMin (int dim, double alarmDist);  ; void updateMax (int dim, double alarmDist);  ; bool minMoving (int axis, double alarmDist) const;  ; bool maxMoving (int axis, double alarmDist) const;  ; const core::CollisionElementIterator finalElement () const;  ; EndPointID & min (int dim);  ; const EndPointID & min (int dim) const;  ; EndPointID & max (int dim);  ; const EndPointID & max (int dim) const;  ; double curMin (int dim) const;  ; double curMax (int dim) const;  ; bool endPointsAreAlright (int ID);  . Attribute details. ◆ _max. EndPointID* sofa::component::collision::detection::algorithm::ISAPBox::_max[3]. ◆ _min. EndPointID* sofa::component::collision::detection::algorithm::ISAPBox::_min[3]. ◆ cube. collision::geometry::Cube sofa::component::collision::detection::algorithm::ISAPBox::cube. ◆ tolerance. double sofa::component::collision::detection::algorithm::ISAPBox::tolerance = (double)(1e-7). static . Con",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_i_s_a_p_box.html:1468,update,update,1468,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_i_s_a_p_box.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_i_s_a_p_box.html,5,['update'],"['update', 'updateMax', 'updateMin', 'updatedMax', 'updatedMin']"
Deployability,"y vector. More...;  ; MechanicalParams & setV (ConstMultiVecDerivId v);  ; template<class StateSet > ; MechanicalParams & setV (const StateSet &g, ConstVecDerivId v);  ; MechanicalParams & setF (ConstVecDerivId v);  Set the IDs of force vector. More...;  ; MechanicalParams & setF (ConstMultiVecDerivId v);  ; template<class StateSet > ; MechanicalParams & setF (const StateSet &g, ConstVecDerivId v);  ; MechanicalParams & setDx (ConstVecDerivId v);  Set the IDs of dx vector (for implicit schemes) More...;  ; MechanicalParams & setDx (ConstMultiVecDerivId v);  ; template<class StateSet > ; MechanicalParams & setDx (const StateSet &g, ConstVecDerivId v);  ; MechanicalParams & setDf (ConstVecDerivId v);  Set the IDs of df vector (for implicit schemes) More...;  ; MechanicalParams & setDf (ConstMultiVecDerivId v);  ; template<class StateSet > ; MechanicalParams & setDf (const StateSet &g, ConstVecDerivId v);  . Experimental compliance API; SReal m_implicitVelocity;  ratio of future and current force used for velocity update (1 is fully implicit, 0 is fully explicit) More...;  ; SReal m_implicitPosition;  ratio of future and current velocity used for position update (1 is fully implicit, 0 is fully explicit) More...;  ; void setImplicitVelocity (SReal i);  ; const SReal & implicitVelocity () const;  ; void setImplicitPosition (SReal i);  ; const SReal & implicitPosition () const;  . Attribute details. ◆ m_bFactor. SReal sofa::core::MechanicalParams::m_bFactor. protected . Damping matrix contributions factor (for implicit schemes) . ◆ m_df. ConstMultiVecDerivId sofa::core::MechanicalParams::m_df. protected . Ids of df vector (for implicit schemes) . ◆ m_dt. SReal sofa::core::MechanicalParams::m_dt. protected . Time step. . ◆ m_dx. ConstMultiVecDerivId sofa::core::MechanicalParams::m_dx. protected . Ids of dx vector (for implicit schemes) . ◆ m_energy. bool sofa::core::MechanicalParams::m_energy. protected . Should the kinematic and potential energies be computed ? . ◆ m_f. ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_mechanical_params.html:7950,update,update,7950,api/master/sofa/html/classsofa_1_1core_1_1_mechanical_params.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_mechanical_params.html,1,['update'],['update']
Deployability,"y(bool)sofa::gui::qt::DataWidgetsignal; dataValueChanged(QString dataValueString)sofa::gui::qt::DataWidgetsignal; DataWidget(QWidget *parent, const char *name, MyData *d)sofa::gui::qt::DataWidget; dirtysofa::gui::qt::DataWidgetprotected; fillFromData()sofa::gui::qt::DataWidgetslot; getBaseData() constsofa::gui::qt::DataWidgetinline; getBaseData()sofa::gui::qt::DataWidgetinline; getData()sofa::gui::qt::TDataWidget< std::string >inline; getData() constsofa::gui::qt::TDataWidget< std::string >inline; isDirty()sofa::gui::qt::DataWidgetinline; isFilled()sofa::gui::qt::DataWidgetinline; m_isFilledsofa::gui::qt::DataWidgetprotected; m_toFillsofa::gui::qt::DataWidgetprotected; MyData typedefsofa::gui::qt::DataWidget; MyTData typedefsofa::gui::qt::TDataWidget< std::string >; numColumnWidget()sofa::gui::qt::DataWidgetinlinevirtual; openFileButtonsofa::gui::qt::DataFileNameWidgetprotected; openFilePathsofa::gui::qt::DataFileNameWidgetprotected; raiseDialog()sofa::gui::qt::DataFileNameWidgetprotectedvirtualslot; readFromData()sofa::gui::qt::DataFileNameWidgetprotectedvirtual; setData(MyTData *d)sofa::gui::qt::TDataWidget< std::string >inlinevirtual; setData(MyData *d)sofa::gui::qt::TDataWidget< std::string >; sofa::gui::qt::DataWidget::setData(MyData *d)sofa::gui::qt::DataWidgetvirtual; setDataReadOnly(bool readOnly)sofa::gui::qt::DataFileNameWidgetvirtual; setFilled(bool value)sofa::gui::qt::DataWidgetinline; setWidgetDirty(bool b=true)sofa::gui::qt::DataWidgetslot; sizeWidget()sofa::gui::qt::DataWidgetinlinevirtual; Tdatasofa::gui::qt::TDataWidget< std::string >protected; TDataWidget(QWidget *parent, const char *name, MyTData *d)sofa::gui::qt::TDataWidget< std::string >inline; updateDataValue()sofa::gui::qt::DataWidgetslot; updateVisibility()sofa::gui::qt::DataWidget; updateWidgetValue()sofa::gui::qt::DataWidgetslot; WidgetDirty(bool)sofa::gui::qt::DataWidgetsignal; writeToData()sofa::gui::qt::DataFileNameWidgetprotectedvirtual; ~DataWidget() overridesofa::gui::qt::DataWidget.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_data_file_name_widget-members.html:2543,update,updateDataValue,2543,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_data_file_name_widget-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_data_file_name_widget-members.html,3,['update'],"['updateDataValue', 'updateVisibility', 'updateWidgetValue']"
Deployability,y-of-units-in-sofa; ; SOFA - Topic: [SOLVED] Consistency of units in Sofa. /constrain-and-control-movements-of-an-object; ; SOFA - Topic: Constrain and control movements of an object. /constraining-a-spring; ; SOFA - Topic: [SOLVED] Constraining a spring. /constraint-on-collision-model-points; ; SOFA - Topic: Constraint on collision model points. /constraint-tutorial-scene-crash; . /feed; ; [SOLVED] Constraint Tutorial scene crash – SOFA. SOFA - Topic: [SOLVED] Constraint Tutorial scene crash. /contactlistener-error-on-sofapython3; ; SOFA - Topic: [SOLVED] ContactListener error on SofaPython3. /continuous-collision-detection; ; SOFA - Topic: Continuous collision detection. /continuously-grid-topology; ; SOFA - Topic: [SOLVED] Continuously Grid Topology. /continuous-rotation-of-view-by-mouse-click-and-move; ; SOFA - Topic: [SOLVED] Continuous rotation of view by mouse click and move. /contributing-to-sofa; ; SOFA - Topic: [SOLVED] Contributing to SOFA. /contributor-list-updated; ; SOFA - Topic: Contributor list updated!. /control-actuators-and-receive-sensor-variables-of-scene-scn; ; SOFA - Topic: Control actuators and receive sensor variables of scene .scn. /control-actuators-and-receive-sensor-variables-of-scene-scn-legged-robot; ; SOFA - Topic: [SOLVED] Control actuators and receive sensor variables of scene .scn Legged Robot. /converting-the-stl-mesh-to-vtk-mesh; ; SOFA - Topic: [SOLVED] Converting the STL mesh to VTK mesh. /could-not-find-git-for-clone-of-sofapython3; ; SOFA - Topic: [SOLVED] could not find git for clone of SofaPython3. /could-not-read-value-for-data-field-position-and-segfault; ; SOFA - Topic: [SOLVED] “Could not read value for data field position” and segfault. /could-sofa-use-full-python-instead-of-being-embedded-in-xml-file-using-component; . /feed; ; [SOLVED] Could sofa use full Python instead of being embedded in XML file using component – SOFA. SOFA - Topic: [SOLVED] Could sofa use full Python instead of being embedded in XML file using c,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/index-wcopy.html:281280,update,updated,281280,index-wcopy.html,https://www.sofa-framework.org,https://www.sofa-framework.org/index-wcopy.html,2,['update'],['updated']
Deployability,"y::HexahedronID p4, Topology::HexahedronID p5, Topology::HexahedronID p6, Topology::HexahedronID p7);  ; void addPentahedron (type::vector< Pentahedron > &pPentahedra, const Pentahedron &p);  ; void addPentahedron (type::vector< Pentahedron > &pPentahedra, Topology::ElemID p0, Topology::ElemID p1, Topology::ElemID p2, Topology::ElemID p3, Topology::ElemID p4, Topology::ElemID p5);  ; void addPyramid (type::vector< Pyramid > &pPyramids, const Pyramid &p);  ; void addPyramid (type::vector< Pyramid > &pPyramids, Topology::ElemID p0, Topology::ElemID p1, Topology::ElemID p2, Topology::ElemID p3, Topology::ElemID p4);  ; void copyMeshToData (helper::io::Mesh &_mesh);  Temporary method that will copy all buffers from a io::Mesh into the corresponding Data. Will be removed as soon as work on unifying meshloader is finished. More...;  ;  Protected Member Functions inherited from sofa::core::loader::BaseLoader;  BaseLoader ();  ;  ~BaseLoader () override;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1io_1_1mesh_1_1_grid_mesh_creator.html:19492,update,update,19492,api/master/sofa/html/classsofa_1_1component_1_1io_1_1mesh_1_1_grid_mesh_creator.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1io_1_1mesh_1_1_grid_mesh_creator.html,12,['update'],['update']
Deployability,"y; Topology()sofa::core::topology::Topologyinlineprotected; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; Triangle typedefsofa::core::topology::Topology; TriangleID typedefsofa::core::topology::Topology; TrianglesAroundEdge typedefsofa::core::topology::BaseMeshTopology; TrianglesAroundVertex typedefsofa::core::topology::BaseMeshTopology; TrianglesInTetrahedron typedefsofa::core::topology::BaseMeshTopology; Type enum namesofa::component::topology::container::grid::SparseGridTopology; UP enum valuesofa::component::topology::container::grid::SparseGridRamificationTopology; updateEdges()sofa::component::topology::container::grid::SparseGridTopologyprotectedvirtual; updateHexahedra()sofa::component::topology::container::constant::MeshTopologyvirtual; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateMesh()sofa::component::topology::container::grid::SparseGridTopology; updateQuads()sofa::component::topology::container::grid::SparseGridTopologyprotectedvirtual; updateTetrahedra()sofa::component::topology::container::constant::MeshTopologyvirtual; UV typedefsofa::component::topology::container::constant::MeshTopology; UVID typedefsofa::component::topology::container::constant::MeshTopology; validHexahedrasofa::component::topology::container::constant::MeshTopologyprotected; validTetrahedrasofa::component::topology::container::constant::MeshTopologyprotected; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VerticesAroundVertex typedefsofa::core::topology::BaseMeshTopology; voxelizeTriangleMesh(helper::io::Mesh *mesh, sofa::core::sptr< RegularGridTopology > regularGrid, type::vector< Type > &regularGridTypes) constsofa::component::topology::container::grid::SparseGridTopologyprotected; voxelSizesofa::component::topology::container::grid::SparseGridTopology; WEIGHT",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1grid_1_1_sparse_grid_multiple_topology-members.html:50786,update,updateQuads,50786,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1grid_1_1_sparse_grid_multiple_topology-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1grid_1_1_sparse_grid_multiple_topology-members.html,2,['update'],['updateQuads']
Deployability,"yComputationTime (bool);  ; virtual void setExportGnuplot (bool);  ; virtual void setExportVisitor (bool);  ; virtual void displayProflierWindow (bool);  ; virtual void currentTabChanged (int index);  ; virtual void popupOpenFileSelector ();  This open popup the file selection windows. More...;  ; virtual void fileReload ();  ; virtual void fileExit ();  ; virtual void helpAbout ();  ; virtual void editRecordDirectory ();  ; virtual void editGnuplotDirectory ();  ; virtual void showDocBrowser ();  ; virtual void showAbout ();  ; virtual void showPluginManager ();  ; virtual void showMouseManager ();  ; virtual void showVideoRecorderManager ();  ; virtual void showWindowDataGraph ();  ; virtual void toolsDockMoved ();  . Protected Slots; virtual void changeViewer ();  ; virtual void updateViewerList ();  ; virtual void onSceneGraphRefreshButtonClicked ();  Update the scenegraph and activate the automatic refresh. More...;  ; virtual void sceneGraphViewDirtynessChanged (bool isDirty);  Update the SceneGraph update button to reflect the dirtiness status. More...;  ; virtual void sceneGraphViewLockingChanged (bool isLocked);  Update the SceneGraph update button to reflect the locking status. More...;  ; void propertyDockMoved (Qt::DockWidgetArea a);  ; void appendToDataLogFile (QString);  ; void docBrowserVisibilityChanged (bool);  . Additional Inherited Members;  Static Protected Attributes inherited from sofa::gui::common::BaseGUI; static std::string mGuiName = """";  ; static std::string configDirectoryPath = ""."";  ; static std::string screenshotDirectoryPath = ""."";  ; static const char * mProgramName = nullptr;  ; static ArgumentParser * mArgumentParser = nullptr;  . Attribute details. ◆ background. WDoubleLineEdit* sofa::gui::qt::RealGUI::background[3]. protected . ◆ backgroundImage. QLineEdit* sofa::gui::qt::RealGUI::backgroundImage. protected . ◆ currentTab. QWidget* sofa::gui::qt::RealGUI::currentTab. protected . ◆ fpsLabel. QLabel* sofa::gui::qt::RealGUI::fpsLabe",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_real_g_u_i.html:8637,update,update,8637,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_real_g_u_i.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_real_g_u_i.html,1,['update'],['update']
Deployability,"yElasticityTensor(). template<class DataTypes > . void sofa::component::solidmechanics::fem::hyperelastic::material::MooneyRivlin< DataTypes >::applyElasticityTensor ; (; StrainInformation< DataTypes > * ; , . const MaterialParameters< DataTypes > & ; , . const MatrixSym & ; , . MatrixSym & ;  . ). inlineoverridevirtual . computes the Elasticity Tensor of the current configuration ; Reimplemented from sofa::component::solidmechanics::fem::hyperelastic::material::HyperelasticMaterial< DataTypes >. ◆ deriveSPKTensor(). template<class DataTypes > . void sofa::component::solidmechanics::fem::hyperelastic::material::MooneyRivlin< DataTypes >::deriveSPKTensor ; (; StrainInformation< DataTypes > * ; , . const MaterialParameters< DataTypes > & ; , . MatrixSym & ;  . ). inlineoverridevirtual . computes the second Piola Kirchhoff stress tensor of the current configuration ; Reimplemented from sofa::component::solidmechanics::fem::hyperelastic::material::HyperelasticMaterial< DataTypes >. ◆ ElasticityTensor(). template<class DataTypes > . void sofa::component::solidmechanics::fem::hyperelastic::material::MooneyRivlin< DataTypes >::ElasticityTensor ; (; StrainInformation< DataTypes > * ; sinfo, . const MaterialParameters< DataTypes > & ; param, . Matrix6 & ; outputTensor . ). inlineoverridevirtual . Reimplemented from sofa::component::solidmechanics::fem::hyperelastic::material::HyperelasticMaterial< DataTypes >. ◆ getStrainEnergy(). template<class DataTypes > . Real sofa::component::solidmechanics::fem::hyperelastic::material::MooneyRivlin< DataTypes >::getStrainEnergy ; (; StrainInformation< DataTypes > * ; , . const MaterialParameters< DataTypes > & ;  . ). inlineoverridevirtual . returns the strain energy of the current configuration ; Reimplemented from sofa::component::solidmechanics::fem::hyperelastic::material::HyperelasticMaterial< DataTypes >. sofacomponentsolidmechanicsfemhyperelasticmaterialMooneyRivlin; Generated on Mon Nov 11 2024 03:02:25 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_mooney_rivlin.html:4067,configurat,configuration,4067,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_mooney_rivlin.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_mooney_rivlin.html,1,['configurat'],['configuration']
Deployability,"yTensor(). template<class DataTypes > . virtual void sofa::component::solidmechanics::fem::hyperelastic::material::BoyceAndArruda< DataTypes >::applyElasticityTensor ; (; StrainInformation< DataTypes > * ; , . const MaterialParameters< DataTypes > & ; , . const MatrixSym & ; , . MatrixSym & ;  . ). inlinevirtual . computes the Elasticity Tensor of the current configuration ; Reimplemented from sofa::component::solidmechanics::fem::hyperelastic::material::HyperelasticMaterial< DataTypes >. ◆ deriveSPKTensor(). template<class DataTypes > . virtual void sofa::component::solidmechanics::fem::hyperelastic::material::BoyceAndArruda< DataTypes >::deriveSPKTensor ; (; StrainInformation< DataTypes > * ; , . const MaterialParameters< DataTypes > & ; , . MatrixSym & ;  . ). inlinevirtual . computes the second Piola Kirchhoff stress tensor of the current configuration ; Reimplemented from sofa::component::solidmechanics::fem::hyperelastic::material::HyperelasticMaterial< DataTypes >. ◆ ElasticityTensor(). template<class DataTypes > . virtual void sofa::component::solidmechanics::fem::hyperelastic::material::BoyceAndArruda< DataTypes >::ElasticityTensor ; (; StrainInformation< DataTypes > * ; sinfo, . const MaterialParameters< DataTypes > & ; param, . Matrix6 & ; outputTensor . ). inlinevirtual . Reimplemented from sofa::component::solidmechanics::fem::hyperelastic::material::HyperelasticMaterial< DataTypes >. ◆ getStrainEnergy(). template<class DataTypes > . virtual Real sofa::component::solidmechanics::fem::hyperelastic::material::BoyceAndArruda< DataTypes >::getStrainEnergy ; (; StrainInformation< DataTypes > * ; , . const MaterialParameters< DataTypes > & ;  . ). inlinevirtual . returns the strain energy of the current configuration ; Reimplemented from sofa::component::solidmechanics::fem::hyperelastic::material::HyperelasticMaterial< DataTypes >. sofacomponentsolidmechanicsfemhyperelasticmaterialBoyceAndArruda; Generated on Mon Nov 11 2024 03:00:51 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_boyce_and_arruda.html:4081,configurat,configuration,4081,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_boyce_and_arruda.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_boyce_and_arruda.html,1,['configurat'],['configuration']
Deployability,"yTensor(). template<class DataTypes > . void sofa::component::solidmechanics::fem::hyperelastic::material::VerondaWestman< DataTypes >::applyElasticityTensor ; (; StrainInformation< DataTypes > * ; , . const MaterialParameters< DataTypes > & ; , . const MatrixSym & ; , . MatrixSym & ;  . ). inlineoverridevirtual . computes the Elasticity Tensor of the current configuration ; Reimplemented from sofa::component::solidmechanics::fem::hyperelastic::material::HyperelasticMaterial< DataTypes >. ◆ deriveSPKTensor(). template<class DataTypes > . void sofa::component::solidmechanics::fem::hyperelastic::material::VerondaWestman< DataTypes >::deriveSPKTensor ; (; StrainInformation< DataTypes > * ; , . const MaterialParameters< DataTypes > & ; , . MatrixSym & ;  . ). inlineoverridevirtual . computes the second Piola Kirchhoff stress tensor of the current configuration ; Reimplemented from sofa::component::solidmechanics::fem::hyperelastic::material::HyperelasticMaterial< DataTypes >. ◆ ElasticityTensor(). template<class DataTypes > . void sofa::component::solidmechanics::fem::hyperelastic::material::VerondaWestman< DataTypes >::ElasticityTensor ; (; StrainInformation< DataTypes > * ; sinfo, . const MaterialParameters< DataTypes > & ; param, . Matrix6 & ; outputTensor . ). inlineoverridevirtual . Reimplemented from sofa::component::solidmechanics::fem::hyperelastic::material::HyperelasticMaterial< DataTypes >. ◆ getStrainEnergy(). template<class DataTypes > . Real sofa::component::solidmechanics::fem::hyperelastic::material::VerondaWestman< DataTypes >::getStrainEnergy ; (; StrainInformation< DataTypes > * ; , . const MaterialParameters< DataTypes > & ;  . ). inlineoverridevirtual . returns the strain energy of the current configuration ; Reimplemented from sofa::component::solidmechanics::fem::hyperelastic::material::HyperelasticMaterial< DataTypes >. sofacomponentsolidmechanicsfemhyperelasticmaterialVerondaWestman; Generated on Mon Nov 11 2024 03:02:25 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_veronda_westman.html:4091,configurat,configuration,4091,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_veronda_westman.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_veronda_westman.html,1,['configurat'],['configuration']
Deployability,"ype::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  . Public Member Functions;  SOFA_CLASS (SOFA_TEMPLATE(GenerateCylinder, DataTypes), core::DataEngine);  ;  GenerateCylinder ();  ;  ~GenerateCylinder () override;  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; void reinit () override;  Update method called when variables used in precomputation are modified. More...;  ; void doUpdate () override;  Where you put your engine's impl. More...;  ;  Public Member Functions inherited from sofa::core::DataEngine;  SOFA_ABSTRACT_CLASS (DataEngine, core::objectmodel::BaseObject);  ; void update () final;  ; void addInput (sofa::core::objectmodel::BaseData *data);  Add a new input to this engine. More...;  ; void addOutput (objectmodel::BaseData *n);  Add a new output to this engine. More...;  ;  Public Member Functions inherited from sofa::core::DataTrackerDDGNode;  DataTrackerDDGNode ();  ; void addInputs (std::initializer_list< sofa::core::objectmodel::BaseData * > datas);  Create a DataCallback object associated with multiple Data fields. More...;  ; void addOutputs (std::initializer_list< sofa::core::objectmodel::BaseData * > datas);  ; virtual void cleanDirty (const core::ExecParams *params=nullptr);  ; void updateAllInputsIfDirty ();  ;  Public Member Functions inherited from sofa::core::objectmodel::DDGNode;  DDGNode ();  Constructor. More...;  ; virtual ~DDGNode ();  Destructor. Automatically remove remaining links. More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void delInput (DDGNode *n);  Remove an input fr",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_generate_cylinder.html:3920,update,update,3920,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_generate_cylinder.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_generate_cylinder.html,1,['update'],['update']
Deployability,"ype::Mat< 2, 2, Real > & ; U, . type::Vec< 2, Real > & ; S, . type::Mat< 2, 2, Real > & ; V . ). static . ◆ SVD_stable() [2/3]. template<class Real > . bool sofa::helper::Decompose< Real >::SVD_stable ; (; const type::Mat< 3, 2, Real > & ; F, . type::Mat< 3, 2, Real > & ; U, . type::Vec< 2, Real > & ; S, . type::Mat< 2, 2, Real > & ; V . ). static . SVD based on the Eigensystem decomposition of FtF with robustness against inversion and degenerate configurations Returnstrue in a degenerate case U & V are rotations Warning eigenvalues are not guaranteed to be positive, eigenvalues are not sorted . ◆ SVD_stable() [3/3]. template<class Real > . bool sofa::helper::Decompose< Real >::SVD_stable ; (; const type::Mat< 3, 3, Real > & ; F, . type::Mat< 3, 3, Real > & ; U, . type::Vec< 3, Real > & ; S, . type::Mat< 3, 3, Real > & ; V . ). static . SVD based on the Eigensystem decomposition of FtF with robustness against inversion and degenerate configurations Returnstrue iff the stabilization processed an inverted rotation or a degenerate case U & V are rotations Warning eigenvalues are not guaranteed to be positive, eigenvalues are not sorted . ◆ SVDGradient_dUdV() [1/2]. template<class Real > . bool sofa::helper::Decompose< Real >::SVDGradient_dUdV ; (; const type::Mat< 3, 2, Real > & ; U, . const type::Vec< 2, Real > & ; S, . const type::Mat< 2, 2, Real > & ; V, . const type::Mat< 3, 2, Real > & ; dM, . type::Mat< 3, 2, Real > & ; dU, . type::Mat< 2, 2, Real > & ; dV . ). static . SVD rotation gradients, computes the rotation gradients dU & dV T. Papadopoulo, M.I.A. Lourakis, ""Estimating the Jacobian of the Singular Value Decomposition: Theory and Applications"", European Conference on Computer Vision, 2000 . ◆ SVDGradient_dUdV() [2/2]. template<class Real > . bool sofa::helper::Decompose< Real >::SVDGradient_dUdV ; (; const type::Mat< 3, 3, Real > & ; U, . const type::Vec< 3, Real > & ; S, . const type::Mat< 3, 3, Real > & ; V, . const type::Mat< 3, 3, Real > & ; dM, . type",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_decompose.html:23794,configurat,configurations,23794,api/master/sofa/html/classsofa_1_1helper_1_1_decompose.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_decompose.html,1,['configurat'],['configurations']
Deployability,"ype::Vec3Types >::SOFA_ABSTRACT_CLASS(BaseState, objectmodel::BaseObject)sofa::core::BaseState; sofa::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; VisualState< defaulttype::Vec3Types >::SOFA_CLASS(VisualState, SOFA_TEMPLATE(core::State, defaulttype::Vec3Types))sofa::core::visual::VisualState< defaulttype::Vec3Types >; sofa::core::State::SOFA_CLASS(SOFA_TEMPLATE(State, TDataTypes), BaseState)sofa::core::State< TDataTypes >; SOFA_CLASS2(OglCylinderModel, core::visual::VisualModel, Vec3State)sofa::gl::component::rendering3d::OglCylinderModel; SPtr typedefsofa::core::objectmodel::Base; State()sofa::core::State< TDataTypes >protected; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateVisual(const VisualParams *)sofa::core::visual::VisualModel; updateVisual() finalsofa::core::visual::VisualModelvirtual; Vec3State typedefsofa::gl::component::rendering3d::OglCylinderModel; VecData typedefsofa::core::objectmodel::Base; VecDeriv typedefsofa::core::visual::VisualState< defaulttype::Vec3Types >; VecLink typedefsofa::core::objectmodel::Base; VecReal typedefsofa::core::State< TDataTypes >; VecSlaves typedefsofa::core::objectmodel::BaseObject; VisualModel()sofa::core::visual::VisualModelprotected; VisualState()sofa::core::visual::VisualState< defaulttype::Vec3Types >; write(core::VecCoordId v) overridesofa::core::visual::VisualState< defaulttype::Vec3Types >virtual; write(core::VecDerivId v) overridesofa::core::visual::VisualState< defaulttype::Vec3Types >virtual; write(core::MatrixDerivId) overridesofa::core::visual::VisualState< defaulttype::Vec3Types >inlinevirtual; WriteCoord typedefsofa::core::State< TDataTypes >; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const st",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_ogl_cylinder_model-members.html:14478,update,updateVisual,14478,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_ogl_cylinder_model-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_ogl_cylinder_model-members.html,1,['update'],['updateVisual']
Deployability,"ypes >::getPotentialEnergy ; (; const MechanicalParams * ; mparams, . const DataVecCoord & ; x . ); const. virtual . Reimplemented from sofa::core::behavior::Mass< DataTypes >. ◆ getPotentialEnergy() [5/5]. SReal sofa::component::mass::DiagonalMass< Rigid2Types >::getPotentialEnergy ; (; const MechanicalParams * ; mparams, . const DataVecCoord & ; x . ); const. virtual . Reimplemented from sofa::core::behavior::Mass< DataTypes >. ◆ getTotalMass() [1/2]. template<class DataTypes , class GeometricalTypes > . const DiagonalMass< DataTypes, GeometricalTypes >::Real & sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >::getTotalMass. virtual . ◆ getTotalMass() [2/2]. template<class DataTypes , class GeometricalTypes = DataTypes> . template<typename T = GeometricalTypes, typename std::enable_if_t< T::spatial_dimensions > = 3, int > . SReal sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >::getTotalMass ; (; ); const. inline . Method to update See alsod_vertexMass when a new Triangle is created. Will be set as callback in the PointData . d_vertexMass to update the mass vector when TRIANGLESADDED event is fired. Method to update . d_vertexMass when a Triangle is removed. Will be set as callback in the PointData . d_vertexMass to update the mass vector when TRIANGLESREMOVED event is fired. Method to update . d_vertexMass when a new Quad is created. Will be set as callback in the PointData . d_vertexMass to update the mass vector when QUADSADDED event is fired. Method to update . d_vertexMass when a Quad is removed. Will be set as callback in the PointData . d_vertexMass to update the mass vector when QUADSREMOVED event is fired. Method to update . d_vertexMass when a new Tetrahedron is created. Will be set as callback in the PointData . d_vertexMass to update the mass vector when TETRAHEDRAADDED event is fired. Method to update . d_vertexMass when a Tetrahedron is removed. Will be set as callback in the PointData . d_vertexMass to update the m",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_diagonal_mass.html:45183,update,update,45183,api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_diagonal_mass.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_diagonal_mass.html,1,['update'],['update']
Deployability,"ypes >;  SOFA_ABSTRACT_CLASS (SOFA_TEMPLATE(SingleStateAccessor, DataTypes), StateAccessor);  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; MechanicalState< DataTypes > * getMState ();  ; const MechanicalState< DataTypes > * getMState () const;  . Protected Member Functions;  PolynomialRestShapeSpringsForceField ();  ; void recomputeIndices ();  ; void ComputeJacobian (sofa::Index stiffnessIndex, sofa::Index springIndex);  Indicator whether an external MechanicalState is used as rest reference. More...;  ; Real PolynomialValue (sofa::Index springIndex, Real strainValue);  ; Real PolynomialDerivativeValue (sofa::Index springIndex, Real strainValue);  ;  Protected Member Functions inherited from sofa::core::behavior::ForceField< DataTypes >;  ForceField (MechanicalState< DataTypes > *mm=nullptr);  ;  ~ForceField () override;  ;  Protected Member Functions inherited from sofa::core::behavior::BaseForceField;  BaseForceField ();  ;  ~BaseForceField () override=default;  ;  Protected Member Functions inherited from sofa::core::behavior::StateAccessor;  StateAccessor ();  ;  ~StateAccessor () override=default;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::B",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_polynomial_rest_shape_springs_force_field.html:18762,update,update,18762,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_polynomial_rest_shape_springs_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_polynomial_rest_shape_springs_force_field.html,1,['update'],['update']
Deployability,"ypes >inlineexplicitprotected; sofa::SOFA_ABSTRACT_CLASS(BaseProjectiveConstraintSet, objectmodel::BaseObject)sofa::core::behavior::BaseProjectiveConstraintSet; sofa::core::behavior::StateAccessor::SOFA_ABSTRACT_CLASS(StateAccessor, objectmodel::BaseObject)sofa::core::behavior::StateAccessor; sofa::core::behavior::SingleStateAccessor::SOFA_ABSTRACT_CLASS(SOFA_TEMPLATE(SingleStateAccessor, DataTypes), StateAccessor)sofa::core::behavior::SingleStateAccessor< DataTypes >; SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SOFA_CLASS2(SOFA_TEMPLATE(ProjectiveConstraintSet, DataTypes), BaseProjectiveConstraintSet, SOFA_TEMPLATE(SingleStateAccessor, DataTypes))sofa::core::behavior::ProjectiveConstraintSet< DataTypes >; SPtr typedefsofa::core::objectmodel::Base; StateAccessor()sofa::core::behavior::StateAccessorinlineprotected; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecCoord typedefsofa::core::behavior::ProjectiveConstraintSet< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecDeriv typedefsofa::core::behavior::ProjectiveConstraintSet< DataTypes >; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~BaseProjectiveConstraintSet() overridesofa::core::behavior::BaseProjectiveConstraintSetinlineprotected; ~ProjectiveConstraintSet() overridesofa::core::behavior::ProjectiveConstraintSet< DataTypes >protected; ~SingleStateAccessor() override=defaultsofa::core::behavior::SingleStateAcce",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_projective_constraint_set-members.html:14696,update,updateInternal,14696,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_projective_constraint_set-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_projective_constraint_set-members.html,1,['update'],['updateInternal']
Deployability,"ypes), Inherit)sofa::component::engine::select::BaseROI< DataTypes >; sofa::core::DataEngine::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SphereROI()sofa::component::engine::select::SphereROI< DataTypes >protected; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; testEdgeAngle(const Edge &e) constsofa::component::engine::select::SphereROI< DataTypes >protected; testTriangleAngle(const Triangle &t) constsofa::component::engine::select::SphereROI< DataTypes >protected; Tetra typedefsofa::component::engine::select::BaseROI< DataTypes >; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; triAnglesofa::component::engine::select::SphereROI< DataTypes >; Triangle typedefsofa::component::engine::select::BaseROI< DataTypes >; update() finalsofa::core::DataEnginevirtual; updateAllInputsIfDirty()sofa::core::DataTrackerDDGNode; updateIfDirty() constsofa::core::objectmodel::DDGNode; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecCoord typedefsofa::component::engine::select::BaseROI< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecEdge typedefsofa::component::engine::select::BaseROI< DataTypes >; VecHexa typedefsofa::component::engine::select::BaseROI< DataTypes >; VecLink typedefsofa::core::objectmodel::Base; VecQuad typedefsofa::component::engine::select::BaseROI< DataTypes >; VecSlaves typedefsofa::core::objectmodel::BaseObject; VecTetra typedefsofa::component::engine::select::BaseROI< DataTypes >; VecTriangle typedefsofa::component::engine::select::BaseROI< DataTypes >; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~BaseROI() ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_sphere_r_o_i-members.html:19503,update,updateInternal,19503,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_sphere_r_o_i-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_sphere_r_o_i-members.html,1,['update'],['updateInternal']
Deployability,"ypes), StateAccessor)sofa::core::behavior::SingleStateAccessor< DataTypes >; SOFA_CLASS(SOFA_TEMPLATE(OscillatingTorsionPressureForceField, DataTypes), SOFA_TEMPLATE(core::behavior::ForceField, DataTypes))sofa::component::mechanicalload::OscillatingTorsionPressureForceField< DataTypes >; ForceField< DataTypes >::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SOFA_CLASS2(SOFA_TEMPLATE(ForceField, DataTypes), BaseForceField, SOFA_TEMPLATE(SingleStateAccessor, DataTypes))sofa::core::behavior::ForceField< DataTypes >; SPtr typedefsofa::core::objectmodel::Base; StateAccessor()sofa::core::behavior::StateAccessorinlineprotected; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; triangleListsofa::component::mechanicalload::OscillatingTorsionPressureForceField< DataTypes >; trianglePressureMapsofa::component::mechanicalload::OscillatingTorsionPressureForceField< DataTypes >; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecCoord typedefsofa::component::mechanicalload::OscillatingTorsionPressureForceField< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecDeriv typedefsofa::component::mechanicalload::OscillatingTorsionPressureForceField< DataTypes >; vecFromCentersofa::component::mechanicalload::OscillatingTorsionPressureForceField< DataTypes >protected; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseForceField() override=defaultsofa::core::behavior::BaseForceFieldprotected; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~ForceField() overridesofa::core::behavior::ForceF",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_oscillating_torsion_pressure_force_field-members.html:19623,update,updateInternal,19623,api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_oscillating_torsion_pressure_force_field-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_oscillating_torsion_pressure_force_field-members.html,1,['update'],['updateInternal']
Deployability,"ystem(SReal, SReal)sofa::core::behavior::BaseConstraintCorrectionvirtual; reinit() overridesofa::component::constraint::lagrangian::correction::UncoupledConstraintCorrection< TDataTypes >virtual; removeConstraintSolver(core::behavior::ConstraintSolver *s) overridesofa::core::behavior::ConstraintCorrection< TDataTypes >virtual; removeData(BaseData *f)sofa::core::objectmodel::Base; removeInNode(BaseNode *)sofa::core::objectmodel::BaseObjectinlinevirtual; removeSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; removeTag(Tag t)sofa::core::objectmodel::Base; reset()sofa::core::objectmodel::BaseObjectvirtual; resetContactForce() overridesofa::component::constraint::lagrangian::correction::UncoupledConstraintCorrection< TDataTypes >virtual; resetForUnbuiltResolution(SReal *f, std::list< unsigned int > &) overridesofa::component::constraint::lagrangian::correction::UncoupledConstraintCorrection< TDataTypes >virtual; setConstraintDForce(SReal *df, int begin, int end, bool update) overridesofa::component::constraint::lagrangian::correction::UncoupledConstraintCorrection< TDataTypes >virtual; setDefinitionSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setDefinitionSourceFilePos(const int)sofa::core::objectmodel::Base; setInstanciationSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setInstanciationSourceFilePos(const int)sofa::core::objectmodel::Base; setMState(MechanicalState< DataTypes > *_mstate)sofa::core::behavior::ConstraintCorrection< TDataTypes >inline; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescriptio",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1correction_1_1_uncoupled_constraint_correction-members.html:16980,update,update,16980,api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1correction_1_1_uncoupled_constraint_correction-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1correction_1_1_uncoupled_constraint_correction-members.html,1,['update'],['update']
Deployability,"ze ();  ; const GLfloat * getOpenGLProjectionMatrix ();  ; const GLfloat * getOpenGLModelViewMatrix ();  ; virtual GLuint getDepthTexture ();  ; virtual GLuint getColorTexture ();  ; virtual unsigned short getShadowTextureUnit ();  ; virtual void setShadowTextureUnit (const unsigned short unit);  ; virtual type::Vec3 getDirection ();  ; virtual float getShadowFactor ();  ; virtual float getVSMLightBleeding ();  ; virtual float getVSMMinVariance ();  ;  Public Member Functions inherited from sofa::core::visual::VisualModel;  SOFA_ABSTRACT_CLASS (VisualModel, objectmodel::BaseObject);  ; virtual void drawVisual (const VisualParams *) final;  Display the VisualModel object. More...;  ; void initVisual (const VisualParams *);  Initialize the textures, or other graphical resources. More...;  ; virtual void initVisual () final;  ; void updateVisual (const VisualParams *);  used to update the model if necessary. More...;  ; virtual void updateVisual () final;  ; virtual void clearVisual ();  clear some graphical resources (generally called before the deleteVisitor). More...;  ; virtual void fwdDraw (VisualParams *);  Called before objects in the current branch are displayed. More...;  ; virtual void bwdDraw (VisualParams *);  Called after objects in the current branch are displayed. More...;  ; virtual void drawTransparent (const VisualParams *);  Display transparent surfaces. More...;  ; virtual void drawShadow (const VisualParams *vparams);  Display shadow-casting surfaces. More...;  ; virtual void parallelUpdateVisual ();  used to update the model if necessary. More...;  ; virtual bool addBBox (SReal *, SReal *);  used to add the bounding-box of this visual model to the given bounding box in order to compute the scene bounding box or cull hidden objects. More...;  ; virtual void applyTranslation (const SReal, const SReal, const SReal);  ; virtual void applyRotation (const SReal, const SReal, const SReal);  ; virtual void applyRotation (const type::Quat< SReal >);  ; virt",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_positional_light.html:5173,update,updateVisual,5173,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_positional_light.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_positional_light.html,1,['update'],['updateVisual']
Deployability,"ze_t index=0) const;  ; bool read (const std::string &str);  Read the command line. More...;  ; bool updateLinks ();  ; virtual void printValue (std::ostream &) const;  Print the value of the associated variable. More...;  ; virtual std::string getValueString () const;  Print the value of the associated variable. More...;  ; virtual std::string getValueTypeString () const;  Print the value type of the associated variable. More...;  ; bool parseString (const std::string &text, std::string *path, std::string *data=nullptr) const;  ; Base * getOwner () const;  ; void setOwner (Base *owner);  ; bool add (Base *baseptr, const std::string &path);  Add a new target to the link. More...;  ; bool set (Base *baseptr, size_t index=0);  Change the link's target at the provided index. More...;  . Protected Member Functions; void added (DestPtr val, std::size_t index);  ; void removed (DestPtr val, std::size_t index);  ;  Protected Member Functions inherited from sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags|BaseLink::FLAG_MULTILINK >; DestType * getIndex (std::size_t index) const;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseLink; void updateCounter ();  . Additional Inherited Members;  Static Public Attributes inherited from sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags|BaseLink::FLAG_MULTILINK >; static constexpr unsigned ActiveFlags;  ; static constexpr bool IsStrongLink;  ; static constexpr bool IsMultiLink;  ; static constexpr bool StorePath;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseLink; static bool ParseString (const std::string &text, std::string *path, std::string *data=nullptr, Base *start=nullptr);  ; static std::string CreateString (const std::string &path, const std::string &data="""");  ; static std::string CreateStringPath (Base *object, Base *from);  ; static std::string CreateStringData (BaseData *data);  ; static std::string CreateString (Base *object, Base *from); ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_multi_link.html:4920,update,updateCounter,4920,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_multi_link.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_multi_link.html,1,['update'],['updateCounter']
Deployability,"};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  . Public Member Functions;  SOFA_CLASS (ROIValueMapper, Inherited);  ;  SOFA_ATTRIBUTE_REPLACED__TYPEMEMBER (Real, SReal);  ;  SOFA_ATTRIBUTE_REPLACED__TYPEMEMBER (Index, sofa::Index);  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; void reinit () override;  Update method called when variables used in precomputation are modified. More...;  ; void parse (sofa::core::objectmodel::BaseObjectDescription *arg) override;  Parse the given description to assign values to this object's fields and potentially other parameters. More...;  ; void parseFields (const std::map< std::string, std::string * > &str) override;  Assign the field values stored in the given map of name -> value pairs. More...;  ;  Public Member Functions inherited from sofa::core::DataEngine;  SOFA_ABSTRACT_CLASS (DataEngine, core::objectmodel::BaseObject);  ; void update () final;  ; void addInput (sofa::core::objectmodel::BaseData *data);  Add a new input to this engine. More...;  ; void addOutput (objectmodel::BaseData *n);  Add a new output to this engine. More...;  ;  Public Member Functions inherited from sofa::core::DataTrackerDDGNode;  DataTrackerDDGNode ();  ; void addInputs (std::initializer_list< sofa::core::objectmodel::BaseData * > datas);  Create a DataCallback object associated with multiple Data fields. More...;  ; void addOutputs (std::initializer_list< sofa::core::objectmodel::BaseData * > datas);  ; virtual void cleanDirty (const core::ExecParams *params=nullptr);  ; void updateAllInputsIfDirty ();  ;  Public Member Functions inherited from sofa::core::objectmodel::DDGNode;  DDGNode ();  Constructor. More...;  ; virtual ~DDGNode ();  Destructor. Automatically remove remaining links. More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void delInput (DDGNode *n);  Remove an input fr",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_r_o_i_value_mapper.html:2813,update,update,2813,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_r_o_i_value_mapper.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_r_o_i_value_mapper.html,1,['update'],['update']
Deployability," . Protected Member Functions;  MultiStepAnimationLoop ();  ;  ~MultiStepAnimationLoop () override;  ;  Protected Member Functions inherited from sofa::simulation::CollisionAnimationLoop;  CollisionAnimationLoop ();  ;  ~CollisionAnimationLoop () override;  ; virtual void preCollisionComputation (const core::ExecParams *params=core::execparams::defaultInstance());  Function meant to be called before the actual collision computation. More...;  ; virtual void internalCollisionComputation (const core::ExecParams *params=core::execparams::defaultInstance());  Function performing the actual collision computation. More...;  ; virtual void postCollisionComputation (const core::ExecParams *params=core::execparams::defaultInstance());  Function meant to be called after the actual collision computation. More...;  ; virtual void computeCollision (const core::ExecParams *params=core::execparams::defaultInstance());  Activate collision pipeline. More...;  ; virtual void integrate (const core::ExecParams *params, SReal dt);  Activate OdeSolvers. More...;  ; const Solvers & getSolverSequence ();  ;  Protected Member Functions inherited from sofa::core::behavior::BaseAnimationLoop;  BaseAnimationLoop ();  ;  ~BaseAnimationLoop () override;  ; void storeResetState () override;  Save the initial state for later uses in reset() More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1animationloop_1_1_multi_step_animation_loop.html:11878,integrat,integrate,11878,api/master/sofa/html/classsofa_1_1component_1_1animationloop_1_1_multi_step_animation_loop.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1animationloop_1_1_multi_step_animation_loop.html,1,['integrat'],['integrate']
Deployability," ; , . bool ;  . ). signal . ◆ RootNodeChanged. void sofa::gui::qt::QSofaListView::RootNodeChanged ; (; sofa::simulation::Node * ; newroot, . const char * ; newpath . ). signal . ◆ RunSofaDoubleClicked. void sofa::gui::qt::QSofaListView::RunSofaDoubleClicked ; (; QTreeWidgetItem * ; item, . int ; index . ). protectedslot . ◆ RunSofaRightClicked. void sofa::gui::qt::QSofaListView::RunSofaRightClicked ; (; const QPoint & ; point). protectedslot . ◆ SaveNode. void sofa::gui::qt::QSofaListView::SaveNode ; (; ). protectedslot . ◆ setPropertyWidget(). void sofa::gui::qt::QSofaListView::setPropertyWidget ; (; QDisplayPropertyWidget * ; propertyWid). inline . ◆ setRoot(). void sofa::gui::qt::QSofaListView::setRoot ; (; sofa::simulation::Node * ; root). ◆ transformObject(). void sofa::gui::qt::QSofaListView::transformObject ; (; sofa::simulation::Node * ; node, . double ; dx, . double ; dy, . double ; dz, . double ; rx, . double ; ry, . double ; rz, . double ; scale . ). protecteddelete . ◆ update(). void sofa::gui::qt::QSofaListView::update ; (; ). Updates the view so it is synchronized with the simulation graph. The view can be visually de-synchronized with the simulation graph. This happens when the view is ""frozen"" for performance reason. In that case, use isDirty to get current view state or the dirtynessChanged() signal. To resynchronize the view call the update method. . ◆ Updated. void sofa::gui::qt::QSofaListView::Updated ; (; ). signal . ◆ updateMatchingObjectmodel [1/2]. void sofa::gui::qt::QSofaListView::updateMatchingObjectmodel ; (; QTreeWidgetItem * ; item). protectedslot . ◆ updateMatchingObjectmodel [2/2]. void sofa::gui::qt::QSofaListView::updateMatchingObjectmodel ; (; QTreeWidgetItem * ; item, . int ;  . ). protectedslot . ◆ UpdateOpenedDialogs. void sofa::gui::qt::QSofaListView::UpdateOpenedDialogs ; (; ). slot . ◆ WakeUpNode. void sofa::gui::qt::QSofaListView::WakeUpNode ; (; ). protectedslot . sofaguiqtQSofaListView; Generated on Mon Nov 11 2024 03:23:",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_sofa_list_view.html:11482,update,update,11482,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_sofa_list_view.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_sofa_list_view.html,1,['update'],['update']
Deployability," ; BaseData * getData () const;  This method is needed by DDGNode. More...;  ; const std::string & getName () const;  Return the name of this Data within the Base component. More...;  ; void setName (const std::string &name);  ; bool hasDefaultValue () const;  Return whether the Data has a default value or not. More...;  ; bool setParent (BaseData *parent, const std::string &path=std::string());  Link to a parent data. The value of this data will automatically duplicate the value of the parent data. More...;  ; bool setParent (const std::string &path);  ; virtual bool validParent (const BaseData *parent);  Check if a given Data can be linked as a parent of this data. More...;  ; BaseData * getParent () const;  ; void update () override;  Update the value of this Data. More...;  ; bool copyValueFrom (const BaseData *data);  Update this Data from the value of its parent. More...;  ; bool updateValueFromLink (const BaseData *data);  ; template<class T > ;  SOFA_ATTRIBUTE_DEPRECATED__UNNECESSARY_PARAMETER_IN_TYPENAME () static std;  ; void setFlag (DataFlagsEnum flag, bool b);  Set one of the flags. More...;  ; bool getFlag (DataFlagsEnum flag) const;  Get one of the flags. More...;  ; bool isDisplayed () const;  Return whether this Data has to be displayed in GUIs. More...;  ; bool isReadOnly () const;  Return whether this Data will be read-only in GUIs. More...;  ; bool isPersistent () const;  Return whether this Data contains persistent information. More...;  ; bool isAutoLink () const;  Return whether this Data should be autolinked when using the src="""" syntax. More...;  ; bool isRequired () const;  Return whether the Data has to be set by the user for the owner component to be valid. More...;  ; void setDisplayed (bool b);  Set whether this Data should be displayed in GUIs. More...;  ; void setReadOnly (bool b);  Set whether this Data is read-only. More...;  ; void setPersistent (bool b);  Set whether this Data contains persistent information. More...;  ; void setAu",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data.html:7009,update,updateValueFromLink,7009,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data.html,8,['update'],['updateValueFromLink']
Deployability," ; MatrixSym E;  . Public Member Functions;  TetrahedronRestInformation ()=default;  ;  Public Member Functions inherited from sofa::component::solidmechanics::fem::hyperelastic::material::StrainInformation< DataTypes >;  StrainInformation ();  ; virtual ~StrainInformation ();  . Friends; std::ostream & operator<< (std::ostream &os, const TetrahedronRestInformation &);  Output stream. More...;  ; std::istream & operator>> (std::istream &in, TetrahedronRestInformation &);  Input stream. More...;  . Attribute details. ◆ m_deformationGradient. template<class DataTypes > . Matrix3 sofa::component::solidmechanics::fem::hyperelastic::TetrahedronHyperelasticityFEMForceField< DataTypes >::TetrahedronRestInformation::m_deformationGradient. deformation gradient = gradPhi . ◆ m_fiberDirection. template<class DataTypes > . Coord sofa::component::solidmechanics::fem::hyperelastic::TetrahedronHyperelasticityFEMForceField< DataTypes >::TetrahedronRestInformation::m_fiberDirection. fiber direction in rest configuration . ◆ m_restVolume. template<class DataTypes > . Real sofa::component::solidmechanics::fem::hyperelastic::TetrahedronHyperelasticityFEMForceField< DataTypes >::TetrahedronRestInformation::m_restVolume {}. rest volume . ◆ m_shapeVector. template<class DataTypes > . Coord sofa::component::solidmechanics::fem::hyperelastic::TetrahedronHyperelasticityFEMForceField< DataTypes >::TetrahedronRestInformation::m_shapeVector[4]. shape vector at the rest configuration . ◆ m_SPKTensorGeneral. template<class DataTypes > . MatrixSym sofa::component::solidmechanics::fem::hyperelastic::TetrahedronHyperelasticityFEMForceField< DataTypes >::TetrahedronRestInformation::m_SPKTensorGeneral. volume/ restVolume . ◆ m_strainEnergy. template<class DataTypes > . Real sofa::component::solidmechanics::fem::hyperelastic::TetrahedronHyperelasticityFEMForceField< DataTypes >::TetrahedronRestInformation::m_strainEnergy {}. right Cauchy-Green deformation tensor C (gradPhi^T gradPhi) . ◆ m_volScale. te",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1_tetrahedron_hyperelasticity_11a43b7aa7f251e640b19f2d5ec26614.html:3040,configurat,configuration,3040,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1_tetrahedron_hyperelasticity_11a43b7aa7f251e640b19f2d5ec26614.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1_tetrahedron_hyperelasticity_11a43b7aa7f251e640b19f2d5ec26614.html,1,['configurat'],['configuration']
Deployability," ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseObject; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  ;  Protected Member Functions inherited from sofa::core::DataEngine;  DataEngine ();  Constructor. More...;  ;  ~DataEngine () override;  Destructor. Do nothing. More...;  ; virtual void doInternalUpdate () final;  Prevent engines to use the internalUpdate mechanism, so that only update/doUpdate is used. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::DDGNode; virtual void doAddInput (DDGNode *n);  ; virtual void doDelInput (DDGNode *n);  ; virtual void doAddOutput (DDGNode *n);  ; virtual void doDelOutput (DDGNode *n);  ; void cleanDirtyOutputsOfInputs ();  the dirtyOutputs flags of all the inputs will be set to false More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1analyze_1_1_clustering_engine.html:15265,update,update,15265,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1analyze_1_1_clustering_engine.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1analyze_1_1_clustering_engine.html,5,['update'],['update']
Deployability," ; const MapLink & getLinkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Protected Member Functions;  CollisionPipeline ();  ; void doCollisionReset () override;  Remove collision response from last step. More...;  ; void doCollisionDetection (const sofa::type::vector< core::CollisionModel * > &collisionModels) override;  Detect new collisions. Note that this step must not modify the simulation graph. More...;  ; void doCollisionResponse () override;  Add collision response in the simulation graph. More...;  ; virtual void checkDataValues ();  ;  Protected Member Functions inherited from sofa::simulation::PipelineImpl;  PipelineImpl ();  ;  ~PipelineImpl () override;  ;  Protected Member Functions inherited from sofa::core::collision::Pipeline;  Pipeline ();  ;  ~Pipeline () override;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_collision_pipeline.html:12279,update,update,12279,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_collision_pipeline.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_collision_pipeline.html,1,['update'],['update']
Deployability," ; const VecLink & getLinks () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapLink & getLinkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Protected Member Functions;  ScaleTransformMatrixEngine ();  ;  ~ScaleTransformMatrixEngine () override;  ; void doUpdate () override;  ;  Protected Member Functions inherited from sofa::component::engine::transform::AbstractTransformMatrixEngine;  AbstractTransformMatrixEngine ();  ;  ~AbstractTransformMatrixEngine () override;  ;  Protected Member Functions inherited from sofa::core::DataEngine;  DataEngine ();  Constructor. More...;  ;  ~DataEngine () override;  Destructor. Do nothing. More...;  ; virtual void doInternalUpdate () final;  Prevent engines to use the internalUpdate mechanism, so that only update/doUpdate is used. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::DDGNode; virtual void doAddInput (DDGNode *n);  ; virtual void doDelInput (DDGNode *n);  ; virtual void doAddOutput (DDGNode *n);  ; virtual void doDelOutput (DDGNode *n);  ; void cleanDirtyOutputsOfInputs ();  the dirtyOutputs flags of all the inputs will be set to false More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_scale_transform_matrix_engine.html:13355,update,update,13355,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_scale_transform_matrix_engine.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_scale_transform_matrix_engine.html,1,['update'],['update']
Deployability," ; const VecLink & getLinks () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapLink & getLinkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Protected Member Functions;  SlicedVolumetricModel ();  ;  ~SlicedVolumetricModel () override;  ; void findAndDrawTriangles ();  ; void computePlaneSeparations ();  ; int intersectionSegmentPlane (const Coord &s0, const Coord &s1, const Coord &segmentDirection, const Coord &planeNormal, const Real &planeConstant, Real &m_fLineT);  return 0->no intersection, 1->1 intersection, 2->line on plane More...;  ;  Protected Member Functions inherited from sofa::core::visual::VisualModel;  VisualModel ();  ;  ~VisualModel () override;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_sliced_volumetric_model.html:12951,update,update,12951,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_sliced_volumetric_model.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_sliced_volumetric_model.html,1,['update'],['update']
Deployability," ; idx = 1 . ). Function details. ◆ addData(). void sofa::gui::qt::QTabulationModifyObject::addData ; (; sofa::core::objectmodel::BaseData * ; data, . const ModifyObjectFlags & ; flags . ). ◆ addLink(). void sofa::gui::qt::QTabulationModifyObject::addLink ; (; sofa::core::objectmodel::BaseLink * ; link, . const ModifyObjectFlags & ; flags . ). ◆ addStretch(). void sofa::gui::qt::QTabulationModifyObject::addStretch ; (; ). ◆ dataValueChanged. void sofa::gui::qt::QTabulationModifyObject::dataValueChanged ; (; QString ; dataValue). slot . ◆ externalWidgetAddition(). void sofa::gui::qt::QTabulationModifyObject::externalWidgetAddition ; (; int ; num). inline . ◆ getDataModifiedString(). QString sofa::gui::qt::QTabulationModifyObject::getDataModifiedString ; (; ); const. ◆ getIndex(). unsigned int sofa::gui::qt::QTabulationModifyObject::getIndex ; (; ); const. inline . ◆ isDirty(). bool sofa::gui::qt::QTabulationModifyObject::isDirty ; (; ); const. ◆ isEmpty(). bool sofa::gui::qt::QTabulationModifyObject::isEmpty ; (; ); const. ◆ isFull(). bool sofa::gui::qt::QTabulationModifyObject::isFull ; (; ); const. ◆ nodeNameModification. void sofa::gui::qt::QTabulationModifyObject::nodeNameModification ; (; simulation::Node * ; ). signal . ◆ setFull(). void sofa::gui::qt::QTabulationModifyObject::setFull ; (; ). inline . ◆ setTabDirty. void sofa::gui::qt::QTabulationModifyObject::setTabDirty ; (; bool ; b = true). slot . ◆ TabDirty. void sofa::gui::qt::QTabulationModifyObject::TabDirty ; (; bool ; ). signal . ◆ UpdateDatas. void sofa::gui::qt::QTabulationModifyObject::UpdateDatas ; (; ). signal . ◆ updateDataValue. void sofa::gui::qt::QTabulationModifyObject::updateDataValue ; (; ). slot . ◆ UpdateDataWidgets. void sofa::gui::qt::QTabulationModifyObject::UpdateDataWidgets ; (; ). signal . ◆ updateWidgetValue. void sofa::gui::qt::QTabulationModifyObject::updateWidgetValue ; (; ). slot . sofaguiqtQTabulationModifyObject; Generated on Mon Nov 11 2024 03:23:43 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_tabulation_modify_object.html:4112,update,updateDataValue,4112,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_tabulation_modify_object.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_tabulation_modify_object.html,4,['update'],"['updateDataValue', 'updateWidgetValue']"
Deployability," ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  . Public Member Functions;  SOFA_CLASS (TriangleModelInRegularGrid, TriangleCollisionModel< sofa::defaulttype::Vec3Types >);  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; void computeBoundingTree (int maxDepth=0) override;  Create or update the bounding volume hierarchy. More...;  ;  Public Member Functions inherited from sofa::component::collision::geometry::TriangleCollisionModel< sofa::defaulttype::Vec3Types >;  SOFA_CLASS (SOFA_TEMPLATE(TriangleCollisionModel, sofa::defaulttype::Vec3Types), core::CollisionModel);  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; void resize (sofa::Size size) override;  Set the number of elements. More...;  ; void computeBoundingTree (int maxDepth=0) override;  Create or update the bounding volume hierarchy. More...;  ; void computeContinuousBoundingTree (SReal dt, int maxDepth=0) override;  Create or update the bounding volume hierarchy, accounting for motions within the given timestep. More...;  ; void draw (const core::visual::VisualParams *, sofa::Index index) override;  Render an collision element. More...;  ; void draw (const core::visual::VisualParams *vparams) override;  Render internal data of this object, for debugging purposes. More...;  ; bool canCollideWithElement (sofa::Index index, CollisionModel *model2, sofa::Index index2) override;  Test if two elements can collide with each other. More...;  ; core::behavior::MechanicalState< DataTypes > * getMechanicalState ();  ; const core::behavior::MechanicalState< DataTypes > * getMechanicalState () const;  ; const VecCoord & getX () const;  ; const sofa::core::topology::BaseMeshTopology::SeqTriangles & getTriangles () const;  ; const VecDeriv & getNormals () const;  ; int getTria",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_triangle_model_in_regular_grid.html:3440,update,update,3440,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_triangle_model_in_regular_grid.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_triangle_model_in_regular_grid.html,1,['update'],['update']
Deployability," ; offset . ). virtual . Perform dest[ offset + i ][j] += src[i][j] 0<= i < src_entries 0<= j < 3 (for 3D objects) 0 <= j < 2 (for 2D objects) ; Parameters. offsetthe offset in the MechanicalObject local vector specified by VecId dest. It will be updated to the first scalar value after the ones used by this operation when this method returns. . Implements sofa::core::behavior::BaseMechanicalState. ◆ addFromBaseVectorDifferentSize() [3/3]. template<class DataTypes > . void sofa::component::statecontainer::MechanicalObject< DataTypes >::addFromBaseVectorDifferentSize ; (; core::VecId ; dest, . const linearalgebra::BaseVector * ; src, . unsigned int & ; offset . ). overridevirtual . src size can be smaller or equal to dest size. Performs: dest[ offset + i ][j] += src[i][j] 0<= i < src_entries 0<= j < 3 (for 3D objects) 0 <= j < 2 (for 2D objects) Parameters. offsetthe offset in the MechanicalObject local vector specified by VecId dest. It will be updated to the first scalar value after the ones used by this operation when this method returns. . Implements sofa::core::behavior::BaseMechanicalState. ◆ addFromBaseVectorSameSize() [1/3]. void sofa::component::statecontainer::MechanicalObject< defaulttype::Rigid3Types >::addFromBaseVectorSameSize ; (; core::VecId ; dest, . const linearalgebra::BaseVector * ; src, . unsigned int & ; offset . ). virtual . Perform dest[i][j] += src[offset + i][j] 0<= i < src_entries 0<= j < 3 (for 3D objects) 0 <= j < 2 (for 2D objects) ; Parameters. offsetthe offset in the BaseVector where the scalar values will be used. It will be updated to the first scalar value after the ones used by this operation when this method returns . Implements sofa::core::behavior::BaseMechanicalState. ◆ addFromBaseVectorSameSize() [2/3]. SOFA_COMPONENT_STATECONTAINER_API void sofa::component::statecontainer::MechanicalObject< defaulttype::Rigid3Types >::addFromBaseVectorSameSize ; (; core::VecId ; dest, . const linearalgebra::BaseVector * ; src, . unsigned int & ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1statecontainer_1_1_mechanical_object.html:45262,update,updated,45262,api/master/sofa/html/classsofa_1_1component_1_1statecontainer_1_1_mechanical_object.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1statecontainer_1_1_mechanical_object.html,1,['update'],['updated']
Deployability," ; sofa::core::objectmodel::RenamedData< SReal > f_rayleighMass;  ; sofa::core::objectmodel::RenamedData< bool > f_saveEnergyInFile;  ; sofa::core::objectmodel::RenamedData< bool > f_explicit;  ; sofa::core::objectmodel::RenamedData< std::string > f_fileName;  ; sofa::core::objectmodel::RenamedData< bool > f_computeHamiltonian;  ; sofa::core::objectmodel::RenamedData< SReal > f_hamiltonianEnergy;  ; sofa::core::objectmodel::RenamedData< bool > f_useIncrementalPotentialEnergy;  ; Data< SReal > d_newtonError;  Error tolerance for Newton iterations. More...;  ; Data< unsigned int > d_newtonSteps;  Maximum number of Newton steps. More...;  ; Data< SReal > d_rayleighStiffness;  Rayleigh damping coefficient related to stiffness, > 0. More...;  ; Data< SReal > d_rayleighMass;  Rayleigh damping coefficient related to mass, > 0. More...;  ; Data< bool > d_saveEnergyInFile;  If kinetic and potential energies should be dumped in a CSV file at each iteration. More...;  ; Data< bool > d_explicit;  Use explicit integration scheme. More...;  ; Data< std::string > d_fileName;  File name where kinetic and potential energies are saved in a CSV file. More...;  ; Data< bool > d_computeHamiltonian;  Compute hamiltonian. More...;  ; Data< SReal > d_hamiltonianEnergy;  hamiltonian energy More...;  ; Data< bool > d_useIncrementalPotentialEnergy;  use real potential energy, if false use approximate potential energy More...;  ; Data< bool > d_threadSafeVisitor;  If true, do not use realloc and free visitors in fwdInteractionForceField. More...;  ; sofa::core::objectmodel::lifecycle::RemovedData f_verbose {this, ""v23.12"", ""v24.06"", ""verbose"", ""This Data is no longer used""};  ; std::ofstream energies;  ; int cpt;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttr",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1backward_1_1_variational_symplectic_solver.html:2138,integrat,integration,2138,api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1backward_1_1_variational_symplectic_solver.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1backward_1_1_variational_symplectic_solver.html,1,['integrat'],['integration']
Deployability," ; step). inlineprotected . ◆ internalCheck() [2/2]. bool sofa::component::mapping::linear::Mesh2PointTopologicalMapping::internalCheck ; (; const char * ; step, . const type::fixed_array< size_t, NB_ELEMENTS > & ; nbInputRemoved . ). protected . Check consistency of internal maps and output topology. . ◆ removeInput(). void sofa::component::mapping::linear::Mesh2PointTopologicalMapping::removeInput ; (; Element ; elem, . const sofa::type::vector< Index > & ; tab . ). protected . ◆ removeOutputPoints(). void sofa::component::mapping::linear::Mesh2PointTopologicalMapping::removeOutputPoints ; (; const sofa::type::vector< Index > & ; tab). protected . ◆ renumberInput(). void sofa::component::mapping::linear::Mesh2PointTopologicalMapping::renumberInput ; (; Element ; elem, . const sofa::type::vector< Index > & ; index . ). protected . ◆ SOFA_CLASS(). sofa::component::mapping::linear::Mesh2PointTopologicalMapping::SOFA_CLASS ; (; Mesh2PointTopologicalMapping ; , . sofa::core::topology::TopologicalMapping ;  . ). ◆ swapInput(). void sofa::component::mapping::linear::Mesh2PointTopologicalMapping::swapInput ; (; Element ; elem, . Index ; i1, . Index ; i2 . ). protected . ◆ swapOutputPoints(). void sofa::component::mapping::linear::Mesh2PointTopologicalMapping::swapOutputPoints ; (; Index ; i1, . Index ; i2, . bool ; removeLast = false . ). protected . ◆ updateTopologicalMappingTopDown(). void sofa::component::mapping::linear::Mesh2PointTopologicalMapping::updateTopologicalMappingTopDown ; (; ). overridevirtual . Method called at each topological changes propagation which comes from the INPUT topology to adapt the OUTPUT topology : ; Implements sofa::core::topology::TopologicalMapping. Enum details. ◆ Element. enum sofa::component::mapping::linear::Mesh2PointTopologicalMapping::Element. EnumeratorPOINT ; EDGE ; TRIANGLE ; QUAD ; TETRA ; HEXA ; NB_ELEMENTS . sofacomponentmappinglinearMesh2PointTopologicalMapping; Generated on Mon Nov 11 2024 02:50:45 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1linear_1_1_mesh2_point_topological_mapping.html:29257,update,updateTopologicalMappingTopDown,29257,api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1linear_1_1_mesh2_point_topological_mapping.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1linear_1_1_mesh2_point_topological_mapping.html,2,['update'],['updateTopologicalMappingTopDown']
Deployability," ; virtual void computeElementStiffness (ElementStiffness &K, const MaterialStiffness &M, const type::Vec< 8, Coord > &nodes, const sofa::Index elementIndice, double stiffnessFactor=1.0) const;  ; void computeMaterialStiffness (sofa::Index i);  ; void initLarge (sofa::Index i, const Element &elem);  ; virtual void accumulateForceLarge (WDataRefVecDeriv &f, RDataRefVecCoord &p, sofa::Index i, const Element &elem);  ; void initPolar (sofa::Index i, const Element &elem);  ; void computeRotationPolar (Transformation &r, type::Vec< 8, Coord > &nodes);  ; virtual void accumulateForcePolar (WDataRefVecDeriv &f, RDataRefVecCoord &p, sofa::Index i, const Element &elem);  ; void initSmall (sofa::Index i, const Element &elem);  ; virtual void accumulateForceSmall (WDataRefVecDeriv &f, RDataRefVecCoord &p, sofa::Index i, const Element &elem);  ;  Protected Member Functions inherited from sofa::component::solidmechanics::fem::elastic::BaseLinearElasticityFEMForceField< DataTypes >; void checkPoissonRatio ();  ; void checkYoungModulus ();  ; Real getVecRealInElement (sofa::Size elementId, const Data< VecReal > &data, Real defaultValue) const;  ;  Protected Member Functions inherited from sofa::core::behavior::ForceField< DataTypes >;  ForceField (MechanicalState< DataTypes > *mm=nullptr);  ;  ~ForceField () override;  ;  Protected Member Functions inherited from sofa::core::behavior::BaseForceField;  BaseForceField ();  ;  ~BaseForceField () override=default;  ;  Protected Member Functions inherited from sofa::core::behavior::StateAccessor;  StateAccessor ();  ;  ~StateAccessor () override=default;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_hexahedron_f_e_m_force_field.html:21721,update,update,21721,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_hexahedron_f_e_m_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_hexahedron_f_e_m_force_field.html,1,['update'],['update']
Deployability," ; void NodeAdded ();  ; void focusChanged (sofa::core::objectmodel::BaseObject *);  ; void focusChanged (sofa::core::objectmodel::BaseNode *);  ; void dataModified (QString);  ;  Signals inherited from sofa::gui::qt::SofaSceneGraphWidget; void dirtynessChanged (bool isDirty);  Connect to this signal to be notified when the dirtiness status of the QSofaListView changed. More...;  ; void lockingChanged (bool isLocked);  Connect to this signal to be notified when the locking status changed. More...;  . Public Slots; void Export ();  ; void CloseAllDialogs ();  ; void UpdateOpenedDialogs ();  ; void ExpandRootNodeOnly ();  . Protected Slots; void SaveNode ();  ; void exportOBJ ();  ; void collapseNode ();  ; void expandNode ();  ; void modifyUnlock (void *Id);  ; void RemoveNode ();  ; void Modify ();  ; void openInEditor ();  ; void openInstanciation ();  ; void openImplementation ();  ; void copyFilePathToClipBoard ();  ; void DeactivateNode ();  ; void ActivateNode ();  ; void PutNodeToSleep ();  ; void WakeUpNode ();  ; void updateMatchingObjectmodel (QTreeWidgetItem *item, int);  ; void updateMatchingObjectmodel (QTreeWidgetItem *item);  ; void RunSofaRightClicked (const QPoint &point);  ; void RunSofaDoubleClicked (QTreeWidgetItem *item, int index);  ; void nodeNameModification (simulation::Node *);  ; void focusObject ();  ; void focusNode ();  . Attribute details. ◆ AddObjectDialog_. AddObject* sofa::gui::qt::QSofaListView::AddObjectDialog_. protected . ◆ attribute_. SofaListViewAttribute sofa::gui::qt::QSofaListView::attribute_. protected . ◆ graphListener_. GraphListenerQListView* sofa::gui::qt::QSofaListView::graphListener_. protected . ◆ list_object. std::vector< std::string > sofa::gui::qt::QSofaListView::list_object. protected . ◆ map_modifyDialogOpened. std::map< void*, QTreeWidgetItem* > sofa::gui::qt::QSofaListView::map_modifyDialogOpened. protected . ◆ map_modifyObjectWindow. std::map< void*, QDialog* > sofa::gui::qt::QSofaListView::map_modifyObjectWin",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_sofa_list_view.html:4157,update,updateMatchingObjectmodel,4157,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_sofa_list_view.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_sofa_list_view.html,2,['update'],['updateMatchingObjectmodel']
Deployability," ; void addAlias (BaseLink *link, const char *alias);  Add an alias to a Link. More...;  ; const VecData & getDataFields () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapData & getDataAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; const VecLink & getLinks () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapLink & getLinkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Protected Member Functions;  IdentityTopologicalMapping ();  ;  ~IdentityTopologicalMapping () override;  ;  Protected Member Functions inherited from sofa::core::topology::TopologicalMapping;  TopologicalMapping ();  ;  ~TopologicalMapping () override;  ; bool checkTopologyInputTypes ();  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bo",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1mapping_1_1_identity_topological_mapping.html:11714,update,update,11714,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1mapping_1_1_identity_topological_mapping.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1mapping_1_1_identity_topological_mapping.html,1,['update'],['update']
Deployability," ;  . ). ◆ updateK() [1/3]. void sofa::component::mapping::nonlinear::RigidMapping< sofa::defaulttype::Rigid2Types, sofa::defaulttype::Vec2Types >::updateK ; (; const core::MechanicalParams * ; , . core::ConstMultiVecDerivId ;  . ). virtual . Compute the geometric stiffness matrix based on given child forces K = dJ^T * outForce Default implementation does nothing, corresponding to a linear mapping. ; Reimplemented from sofa::core::BaseMapping. ◆ updateK() [2/3]. void sofa::component::mapping::nonlinear::RigidMapping< sofa::defaulttype::Rigid2Types, sofa::defaulttype::Vec2Types >::updateK ; (; const core::MechanicalParams * ; , . core::ConstMultiVecDerivId ;  . ). virtual . Compute the geometric stiffness matrix based on given child forces K = dJ^T * outForce Default implementation does nothing, corresponding to a linear mapping. ; Reimplemented from sofa::core::BaseMapping. ◆ updateK() [3/3]. template<class TIn , class TOut > . void sofa::component::mapping::nonlinear::RigidMapping< TIn, TOut >::updateK ; (; const core::MechanicalParams * ; , . core::ConstMultiVecDerivId ;  . ). overridevirtual . Compute the geometric stiffness matrix based on given child forces K = dJ^T * outForce Default implementation does nothing, corresponding to a linear mapping. ; Reimplemented from sofa::core::BaseMapping. ◆ updateOmega() [1/2]. void sofa::component::mapping::nonlinear::RigidMapping< Rigid3Types, Rigid3Types >::updateOmega ; (; typename InDeriv::Rot & ; omega, . const OutDeriv & ; out, . const OutCoord & ; rotatedpoint . ). ◆ updateOmega() [2/2]. template<class TIn , class TOut > . void sofa::component::mapping::nonlinear::RigidMapping< TIn, TOut >::updateOmega ; (; typename InDeriv::Rot & ; omega, . const OutDeriv & ; out, . const OutCoord & ; rotatedpoint . ). Enum details. ◆ anonymous enum. template<class TIn , class TOut > . anonymous enum. EnumeratorN . ◆ anonymous enum. template<class TIn , class TOut > . anonymous enum. EnumeratorNIn . ◆ anonymous enum. template<class ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1nonlinear_1_1_rigid_mapping.html:40819,update,updateK,40819,api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1nonlinear_1_1_rigid_mapping.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1nonlinear_1_1_rigid_mapping.html,1,['update'],['updateK']
Deployability," Add an alias to a Link. More...;  ; const VecData & getDataFields () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapData & getDataAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; const VecLink & getLinks () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapLink & getLinkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Protected Member Functions;  BaseMouseInteractor ();  ;  Protected Member Functions inherited from sofa::core::BehaviorModel;  BehaviorModel ();  ;  ~BehaviorModel () override;  Destructor. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *na",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1component_1_1performer_1_1_base_mouse_interactor.html:11091,update,update,11091,api/master/sofa/html/classsofa_1_1gui_1_1component_1_1performer_1_1_base_mouse_interactor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1component_1_1performer_1_1_base_mouse_interactor.html,1,['update'],['update']
Deployability," Apply the contactforce dx = Minv * J^t * f and store the result in dx VecId. More...;  ; void computeResidual (const core::ExecParams *params, linearalgebra::BaseVector *f) override;  ; MatrixInvertData * getMatrixInvertData (linearalgebra::BaseMatrix *m);  ;  Public Member Functions inherited from sofa::component::linearsolver::BaseMatrixLinearSolver< Matrix, Vector >;  SOFA_CLASS (SOFA_TEMPLATE2(BaseMatrixLinearSolver, Matrix, Vector), sofa::core::behavior::LinearSolver);  ;  Public Member Functions inherited from sofa::core::behavior::LinearSolver;  SOFA_ABSTRACT_CLASS (LinearSolver, BaseLinearSolver);  ; virtual bool supportNonSymmetricSystem () const;  Returns true if the solver supports non-symmetric systems. More...;  ; virtual bool hasUpdatedMatrix ();  Indicate if the solver updated the system after the last call of setSystemMBKMatrix (should return true if isParallelSolver return false) More...;  ; virtual void updateSystemMatrix ();  This function is use for the preconditioner it must be called at each time step event if setSystemMBKMatrix is not called. More...;  ; virtual void init_partial_solve ();  ; virtual void partial_solve (std::list< linearalgebra::BaseMatrix::Index > &, std::list< linearalgebra::BaseMatrix::Index > &, bool);  ; virtual linearalgebra::BaseMatrix * getSystemInverseBaseMatrix ();  Get the linear system inverse matrix, or nullptr if this solver does not build it. More...;  ; virtual bool readFile (std::istream &);  Read the Matrix solver from a file. More...;  ; virtual bool writeFile (std::ostream &);  Read the Matrix solver from a file. More...;  ; virtual void freezeSystemMatrix ();  Ask the solver to no longer update the system matrix. More...;  ;  Public Member Functions inherited from sofa::core::behavior::BaseLinearSolver;  SOFA_ABSTRACT_CLASS (BaseLinearSolver, objectmodel::BaseObject);  ; bool insertInNode (objectmodel::BaseNode *node) override;  ; bool removeInNode (objectmodel::BaseNode *node) override;  ;  Public Member",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsolver_1_1_matrix_linear_solver_3_01_matrix_00_01_vector_00_01_no_thread_manager_01_4.html:7449,update,updateSystemMatrix,7449,api/master/sofa/html/classsofa_1_1component_1_1linearsolver_1_1_matrix_linear_solver_3_01_matrix_00_01_vector_00_01_no_thread_manager_01_4.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsolver_1_1_matrix_linear_solver_3_01_matrix_00_01_vector_00_01_no_thread_manager_01_4.html,1,['update'],['updateSystemMatrix']
Deployability," Name of element (corresponding with the shader) More...;  ; Data< unsigned int > indexShader;  Name of element (corresponding with the shader) More...;  ; std::set< OglShader * > shaders;  Shader to use the element with. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseObject; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  ;  Protected Member Functions inherited from sofa::gl::component::shader::OglAttribute< 2, GL_FLOAT, sofa::type::Vec< 2, float > >;  OglAttribute ();  ;  ~OglAttribute () override;  ;  Protected Member Functions inherited from sofa::core::visual::VisualModel;  VisualModel ();  ;  ~VisualModel () override;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ;",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_float2_attribute.html:16212,update,update,16212,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_float2_attribute.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_float2_attribute.html,1,['update'],['update']
Deployability," Name of element (corresponding with the shader) More...;  ; Data< unsigned int > indexShader;  Name of element (corresponding with the shader) More...;  ; std::set< OglShader * > shaders;  Shader to use the element with. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseObject; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  ;  Protected Member Functions inherited from sofa::gl::component::shader::OglAttribute< 3, GL_FLOAT, sofa::type::Vec< 3, float > >;  OglAttribute ();  ;  ~OglAttribute () override;  ;  Protected Member Functions inherited from sofa::core::visual::VisualModel;  VisualModel ();  ;  ~VisualModel () override;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ;",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_float3_attribute.html:16212,update,update,16212,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_float3_attribute.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_float3_attribute.html,1,['update'],['update']
Deployability," Name of element (corresponding with the shader) More...;  ; Data< unsigned int > indexShader;  Name of element (corresponding with the shader) More...;  ; std::set< OglShader * > shaders;  Shader to use the element with. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseObject; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  ;  Protected Member Functions inherited from sofa::gl::component::shader::OglAttribute< 4, GL_FLOAT, sofa::type::Vec< 4, float > >;  OglAttribute ();  ;  ~OglAttribute () override;  ;  Protected Member Functions inherited from sofa::core::visual::VisualModel;  VisualModel ();  ;  ~VisualModel () override;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ;",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_float4_attribute.html:16212,update,update,16212,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_float4_attribute.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_float4_attribute.html,1,['update'],['update']
Deployability," Public Member Functions inherited from sofa::core::behavior::SingleStateAccessor< DataTypes >;  SOFA_ABSTRACT_CLASS (SOFA_TEMPLATE(SingleStateAccessor, DataTypes), StateAccessor);  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; MechanicalState< DataTypes > * getMState ();  ; const MechanicalState< DataTypes > * getMState () const;  . Protected Member Functions;  TaitSurfacePressureForceField ();  ; virtual ~TaitSurfacePressureForceField ();  ; virtual void updateFromTopology ();  ; virtual void computePressureTriangles ();  ; virtual void computeMeshVolumeAndArea (Real &volume, Real &area, const helper::ReadAccessor< DataVecCoord > &x);  ; void computePressureAndStiffness (Real &pressure, Real &stiffness, Real currentVolume, Real v0);  ; virtual void computeStatistics (const helper::ReadAccessor< DataVecCoord > &x);  ;  Protected Member Functions inherited from sofa::core::behavior::ForceField< DataTypes >;  ForceField (MechanicalState< DataTypes > *mm=nullptr);  ;  ~ForceField () override;  ;  Protected Member Functions inherited from sofa::core::behavior::BaseForceField;  BaseForceField ();  ;  ~BaseForceField () override=default;  ;  Protected Member Functions inherited from sofa::core::behavior::StateAccessor;  StateAccessor ();  ;  ~StateAccessor () override=default;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool ha",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_tait_surface_pressure_force_field.html:19673,update,updateFromTopology,19673,api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_tait_surface_pressure_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_tait_surface_pressure_force_field.html,2,['update'],"['update', 'updateFromTopology']"
Deployability," SofaMouseManager (QWidget *parent);  ;  ~SofaMouseManager () override;  ; void updateContent ();  ; void setPickHandler (common::PickHandler *);  ; std::map< int, std::string > & getMapIndexOperation ();  ; void updateOperation (sofa::component::setting::MouseButtonSetting *setting);  ; void updateOperation (common::MOUSE_BUTTON button, const std::string &id);  . Protected Member Functions; void updateOperation (common::Operation *op);  . Public Slots; void selectOperation (int);  . Attribute details. ◆ mapIndexOperation. std::map< int, std::string > sofa::gui::qt::SofaMouseManager::mapIndexOperation. protected . ◆ pickHandler. common::PickHandler* sofa::gui::qt::SofaMouseManager::pickHandler. protected . ◆ usedOperations. type::fixed_array< std::string, common::NONE > sofa::gui::qt::SofaMouseManager::usedOperations. protected . Constructor details. ◆ SofaMouseManager(). sofa::gui::qt::SofaMouseManager::SofaMouseManager ; (; QWidget * ; parent). ◆ ~SofaMouseManager(). sofa::gui::qt::SofaMouseManager::~SofaMouseManager ; (; ). override . Function details. ◆ getMapIndexOperation(). std::map< int, std::string >& sofa::gui::qt::SofaMouseManager::getMapIndexOperation ; (; ). inline . ◆ selectOperation. void sofa::gui::qt::SofaMouseManager::selectOperation ; (; int ; operation). slot . ◆ setPickHandler(). void sofa::gui::qt::SofaMouseManager::setPickHandler ; (; common::PickHandler * ; picker). ◆ updateContent(). void sofa::gui::qt::SofaMouseManager::updateContent ; (; ). ◆ updateOperation() [1/3]. void sofa::gui::qt::SofaMouseManager::updateOperation ; (; common::MOUSE_BUTTON ; button, . const std::string & ; id . ). ◆ updateOperation() [2/3]. void sofa::gui::qt::SofaMouseManager::updateOperation ; (; common::Operation * ; op). protected . ◆ updateOperation() [3/3]. void sofa::gui::qt::SofaMouseManager::updateOperation ; (; sofa::component::setting::MouseButtonSetting * ; setting). sofaguiqtSofaMouseManager; Generated on Mon Nov 11 2024 03:25:43 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_sofa_mouse_manager.html:2021,update,updateContent,2021,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_sofa_mouse_manager.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_sofa_mouse_manager.html,8,['update'],"['updateContent', 'updateOperation']"
Deployability," addLink (BaseLink *l);  Add a link. More...;  ; void addAlias (BaseLink *link, const char *alias);  Add an alias to a Link. More...;  ; const VecData & getDataFields () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapData & getDataAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; const VecLink & getLinks () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapLink & getLinkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Protected Member Functions;  ClipPlane ();  ;  ~ClipPlane () override;  ;  Protected Member Functions inherited from sofa::core::visual::VisualModel;  VisualModel ();  ;  ~VisualModel () override;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by i",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_clip_plane.html:13505,update,update,13505,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_clip_plane.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_clip_plane.html,1,['update'],['update']
Deployability," addLink (BaseLink *l);  Add a link. More...;  ; void addAlias (BaseLink *link, const char *alias);  Add an alias to a Link. More...;  ; const VecData & getDataFields () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapData & getDataAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; const VecLink & getLinks () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapLink & getLinkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Protected Member Functions;  VoxelLoader ();  ;  ~VoxelLoader () override;  ;  Protected Member Functions inherited from sofa::core::loader::BaseLoader;  BaseLoader ();  ;  ~BaseLoader () override;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by i",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html:11737,update,update,11737,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader.html,1,['update'],['update']
Deployability," applyEdgeCreation(). template<class DataTypes > . void sofa::component::solidmechanics::tensormass::TriangularTensorMassForceField< DataTypes >::applyEdgeCreation ; (; Index ; edgeIndex, . EdgeRestInformation & ; ei, . const core::topology::BaseMeshTopology::Edge & ; e, . const sofa::type::vector< Index > & ; , . const sofa::type::vector< SReal > & ;  . ). protected . Method to initialize See alsoEdgeRestInformation when a new edge is created. Will be set as creation callback in the EdgeData . d_edgeInfo . ◆ applyTriangleCreation(). template<class DataTypes > . void sofa::component::solidmechanics::tensormass::TriangularTensorMassForceField< DataTypes >::applyTriangleCreation ; (; const sofa::type::vector< Index > & ; triangleAdded, . const sofa::type::vector< core::topology::BaseMeshTopology::Triangle > & ; , . const sofa::type::vector< sofa::type::vector< Index > > & ; , . const sofa::type::vector< sofa::type::vector< SReal > > & ;  . ). protected . Method to update See alsod_edgeInfo when a new triangle is created. Will be set as callback in the EdgeData . d_edgeInfo when TRIANGLESADDED event is fired to create a new spring between new created triangles. . ◆ applyTriangleDestruction(). template<class DataTypes > . void sofa::component::solidmechanics::tensormass::TriangularTensorMassForceField< DataTypes >::applyTriangleDestruction ; (; const sofa::type::vector< Index > & ; triangleRemoved). protected . Method to update See alsod_edgeInfo when a triangle is removed. Will be set as callback in the EdgeData . d_edgeInfo when TRIANGLESREMOVED event is fired to remove spring if needed or update pair of triangles. . ◆ buildDampingMatrix(). template<class DataTypes > . void sofa::component::solidmechanics::tensormass::TriangularTensorMassForceField< DataTypes >::buildDampingMatrix ; (; core::behavior::DampingMatrix * ; ). finalvirtual . Reimplemented from sofa::core::behavior::BaseForceField. ◆ draw(). template<class DataTypes > . void sofa::component::solidmechanics:",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1tensormass_1_1_triangular_tensor_mass_force_field.html:25815,update,update,25815,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1tensormass_1_1_triangular_tensor_mass_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1tensormass_1_1_triangular_tensor_mass_force_field.html,1,['update'],['update']
Deployability," bwdDraw (core::visual::VisualParams *) override;  Called after objects in the current branch are displayed. More...;  ; unsigned short getTextureUnit ();  ; void bind ();  ; void unbind ();  ; ShaderElementType getSEType () const override;  Returns the type of shader element (texture, macro, variable, or attribute) More...;  ; const core::objectmodel::BaseData * getSEValue () const override;  ; core::objectmodel::BaseData * getSEValue () override;  ;  Public Member Functions inherited from sofa::core::visual::VisualModel;  SOFA_ABSTRACT_CLASS (VisualModel, objectmodel::BaseObject);  ; virtual void drawVisual (const VisualParams *) final;  Display the VisualModel object. More...;  ; void initVisual (const VisualParams *);  Initialize the textures, or other graphical resources. More...;  ; virtual void initVisual () final;  ; void updateVisual (const VisualParams *);  used to update the model if necessary. More...;  ; virtual void updateVisual () final;  ; virtual void clearVisual ();  clear some graphical resources (generally called before the deleteVisitor). More...;  ; virtual void drawTransparent (const VisualParams *);  Display transparent surfaces. More...;  ; virtual void drawShadow (const VisualParams *vparams);  Display shadow-casting surfaces. More...;  ; virtual void parallelUpdateVisual ();  used to update the model if necessary. More...;  ; virtual bool addBBox (SReal *, SReal *);  used to add the bounding-box of this visual model to the given bounding box in order to compute the scene bounding box or cull hidden objects. More...;  ; virtual void applyTranslation (const SReal, const SReal, const SReal);  ; virtual void applyRotation (const SReal, const SReal, const SReal);  ; virtual void applyRotation (const type::Quat< SReal >);  ; virtual void applyScale (const SReal, const SReal, const SReal);  ; virtual void exportOBJ (std::string, std::ostream *, std::ostream *, sofa::Index &, sofa::Index &, sofa::Index &, int &);  Append this mesh to an OBJ format ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_texture_pointer.html:3296,update,updateVisual,3296,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_texture_pointer.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_texture_pointer.html,1,['update'],['updateVisual']
Deployability," findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Protected Member Functions;  ROIValueMapper ();  ;  ~ROIValueMapper () override;  ; void doUpdate () override;  Where you put your engine's impl. More...;  ;  Protected Member Functions inherited from sofa::core::DataEngine;  DataEngine ();  Constructor. More...;  ;  ~DataEngine () override;  Destructor. Do nothing. More...;  ; virtual void doInternalUpdate () final;  Prevent engines to use the internalUpdate mechanism, so that only update/doUpdate is used. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::DDGNode; virtual void doAddInput (DDGNode *n);  ; virtual void doDelInput (DDGNode *n);  ; virtual void doAddOutput (DDGNode *n);  ; virtual void doDelOutput (DDGNode *n);  ; void cleanDirtyOutputsOfInputs ();  the dirtyOutputs flags of all the inputs will be set to false More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *na",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_r_o_i_value_mapper.html:13853,update,update,13853,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_r_o_i_value_mapper.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_r_o_i_value_mapper.html,1,['update'],['update']
Deployability," findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Protected Member Functions;  SelectLabelROI ();  ;  ~SelectLabelROI () override;  ; void doUpdate () override;  Where you put your engine's impl. More...;  ;  Protected Member Functions inherited from sofa::core::DataEngine;  DataEngine ();  Constructor. More...;  ;  ~DataEngine () override;  Destructor. Do nothing. More...;  ; virtual void doInternalUpdate () final;  Prevent engines to use the internalUpdate mechanism, so that only update/doUpdate is used. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::DDGNode; virtual void doAddInput (DDGNode *n);  ; virtual void doDelInput (DDGNode *n);  ; virtual void doAddOutput (DDGNode *n);  ; virtual void doDelOutput (DDGNode *n);  ; void cleanDirtyOutputsOfInputs ();  the dirtyOutputs flags of all the inputs will be set to false More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *na",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_select_label_r_o_i.html:13748,update,update,13748,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_select_label_r_o_i.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_select_label_r_o_i.html,1,['update'],['update']
Deployability," getDataFields () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapData & getDataAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; const VecLink & getLinks () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapLink & getLinkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Protected Member Functions;  BackgroundSetting ();  Default constructor. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::ConfigurationSetting;  ConfigurationSetting ();  Default constructor. More...;  ;  ~ConfigurationSetting () override;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1setting_1_1_background_setting.html:11144,update,update,11144,api/master/sofa/html/classsofa_1_1component_1_1setting_1_1_background_setting.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1setting_1_1_background_setting.html,1,['update'],['update']
Deployability," getDataFields () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapData & getDataAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; const VecLink & getLinks () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapLink & getLinkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Protected Member Functions;  MeshSplittingEngine ();  ;  ~MeshSplittingEngine () override;  ; void resizeData ();  ;  Protected Member Functions inherited from sofa::core::DataEngine;  DataEngine ();  Constructor. More...;  ;  ~DataEngine () override;  Destructor. Do nothing. More...;  ; virtual void doInternalUpdate () final;  Prevent engines to use the internalUpdate mechanism, so that only update/doUpdate is used. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::DDGNode; virtual void doAddInput (DDGNode *n);  ; virtual void doDelInput (DDGNode *n);  ; virtual void doAddOutput (DDGNode *n);  ; virtual void doDelOutput (DDGNode *n);  ; void cleanDirtyOutputsOfInputs ();  the dirtyOutputs flags of all the inputs will be set to false More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_mesh_splitting_engine.html:14051,update,update,14051,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_mesh_splitting_engine.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_mesh_splitting_engine.html,1,['update'],['update']
Deployability," getKd () const;  ; void setKs (const SReal ks);  ; void setKd (const SReal kd);  ; void draw (const core::visual::VisualParams *vparams) override;  Render internal data of this object, for debugging purposes. More...;  ; sofa::core::topology::EdgeData< sofa::type::vector< EdgeInformation > > & getEdgeInfo ();  ; void applyEdgeCreation (Index edgeIndex, EdgeInformation &ei, const core::topology::BaseMeshTopology::Edge &, const sofa::type::vector< Index > &, const sofa::type::vector< SReal > &);  ; void applyQuadCreation (const sofa::type::vector< Index > &quadAdded, const sofa::type::vector< core::topology::BaseMeshTopology::Quad > &, const sofa::type::vector< sofa::type::vector< Index > > &, const sofa::type::vector< sofa::type::vector< SReal > > &);  ; void applyQuadDestruction (const sofa::type::vector< Index > &quadRemoved);  ; void applyPointDestruction (const sofa::type::vector< Index > &pointIndices);  Method to update. More...;  ; void applyPointRenumbering (const sofa::type::vector< Index > &pointToRenumber);  Method to update. More...;  ;  Public Member Functions inherited from sofa::core::behavior::ForceField< DataTypes >;  SOFA_CLASS2 (SOFA_TEMPLATE(ForceField, DataTypes), BaseForceField, SOFA_TEMPLATE(SingleStateAccessor, DataTypes));  ; void addForce (const MechanicalParams *mparams, MultiVecDerivId fId) override;  ; void addDForce (const MechanicalParams *mparams, MultiVecDerivId dfId) override;  ; virtual void addClambda (const MechanicalParams *mparams, DataVecDeriv &df, const DataVecDeriv &lambda, SReal cFactor);  ; virtual void addClambda (const MechanicalParams *, MultiVecDerivId, MultiVecDerivId, SReal);  Accumulate the contribution of the C compliant matrix multiplied by the given Lagrange multipliers lambda vector with the given cFactor coefficient. More...;  ; SReal getPotentialEnergy (const MechanicalParams *mparams) const override;  ; void addKToMatrix (const MechanicalParams *mparams, const sofa::core::behavior::MultiMatrixAccessor *matrix",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_quadular_bending_springs.html:5891,update,update,5891,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_quadular_bending_springs.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_quadular_bending_springs.html,1,['update'],['update']
Deployability," getMState ();  ; const MechanicalState< DataTypes > * getMState () const;  ;  Public Member Functions inherited from sofa::core::behavior::StateAccessor;  SOFA_ABSTRACT_CLASS (StateAccessor, objectmodel::BaseObject);  ; virtual const MultiLink< StateAccessor, BaseMechanicalState, BaseLink::FLAG_DUPLICATE >::Container & getMechanicalStates () const;  Return a list of mechanical states to which this component is associated. More...;  ; void computeBBox (const core::ExecParams *params, bool onlyVisible=false) override;  . Protected Member Functions;  StopperLagrangianConstraint (MechanicalState *object=nullptr);  ; virtual ~StopperLagrangianConstraint ();  ; virtual type::vector< std::string > getConstraintIdentifiers () override final;  ; virtual type::vector< std::string > getStopperIdentifiers ();  ;  Protected Member Functions inherited from sofa::core::behavior::Constraint< DataTypes >;  Constraint (MechanicalState< DataTypes > *mm=nullptr);  ;  ~Constraint () override;  ;  Protected Member Functions inherited from sofa::core::behavior::BaseConstraint;  BaseConstraint ();  ;  ~BaseConstraint () override;  ;  Protected Member Functions inherited from sofa::core::behavior::BaseConstraintSet;  BaseConstraintSet ();  ;  ~BaseConstraintSet () override;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Pr",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1model_1_1_stopper_lagrangian_constraint.html:15450,update,update,15450,api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1model_1_1_stopper_lagrangian_constraint.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1model_1_1_stopper_lagrangian_constraint.html,1,['update'],['update']
Deployability," getZFar ();  ; virtual void preDrawShadow (core::visual::VisualParams *vp);  ; virtual void postDrawShadow ();  ; virtual GLuint getShadowMapSize ();  ; const GLfloat * getOpenGLProjectionMatrix ();  ; const GLfloat * getOpenGLModelViewMatrix ();  ; virtual GLuint getDepthTexture ();  ; virtual GLuint getColorTexture ();  ; virtual unsigned short getShadowTextureUnit ();  ; virtual void setShadowTextureUnit (const unsigned short unit);  ; virtual type::Vec3 getDirection ();  ; virtual float getShadowFactor ();  ; virtual float getVSMLightBleeding ();  ; virtual float getVSMMinVariance ();  ;  Public Member Functions inherited from sofa::core::visual::VisualModel;  SOFA_ABSTRACT_CLASS (VisualModel, objectmodel::BaseObject);  ; virtual void drawVisual (const VisualParams *) final;  Display the VisualModel object. More...;  ; void initVisual (const VisualParams *);  Initialize the textures, or other graphical resources. More...;  ; virtual void initVisual () final;  ; void updateVisual (const VisualParams *);  used to update the model if necessary. More...;  ; virtual void updateVisual () final;  ; virtual void clearVisual ();  clear some graphical resources (generally called before the deleteVisitor). More...;  ; virtual void fwdDraw (VisualParams *);  Called before objects in the current branch are displayed. More...;  ; virtual void bwdDraw (VisualParams *);  Called after objects in the current branch are displayed. More...;  ; virtual void drawTransparent (const VisualParams *);  Display transparent surfaces. More...;  ; virtual void drawShadow (const VisualParams *vparams);  Display shadow-casting surfaces. More...;  ; virtual void parallelUpdateVisual ();  used to update the model if necessary. More...;  ; virtual bool addBBox (SReal *, SReal *);  used to add the bounding-box of this visual model to the given bounding box in order to compute the scene bounding box or cull hidden objects. More...;  ; virtual void applyTranslation (const SReal, const SReal, const S",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_positional_light.html:5071,update,updateVisual,5071,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_positional_light.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_positional_light.html,2,['update'],"['update', 'updateVisual']"
Deployability," object;  ; QTreeWidgetItem * item;  ; const unsigned int index;  ; unsigned int size;  ; bool dirty;  ; std::map< QObject *, QString > m_dataValueModified;  ; unsigned int pixelSize;  ; unsigned int pixelMaxSize;  . Public Member Functions;  QTabulationModifyObject (QWidget *parent, core::objectmodel::Base *object, QTreeWidgetItem *item, unsigned int idx=1);  ; void externalWidgetAddition (int num);  ; void addData (sofa::core::objectmodel::BaseData *data, const ModifyObjectFlags &flags);  ; void addLink (sofa::core::objectmodel::BaseLink *link, const ModifyObjectFlags &flags);  ; void addStretch ();  ; unsigned int getIndex () const;  ; bool isFull () const;  ; void setFull ();  ; bool isEmpty () const;  ; bool isDirty () const;  ; QString getDataModifiedString () const;  . Signals; void UpdateDatas ();  ; void UpdateDataWidgets ();  ; void TabDirty (bool);  ; void nodeNameModification (simulation::Node *);  . Public Slots; void setTabDirty (bool=true);  ; void updateDataValue ();  ; void updateWidgetValue ();  ; void dataValueChanged (QString dataValue);  . Attribute details. ◆ dirty. bool sofa::gui::qt::QTabulationModifyObject::dirty. protected . ◆ index. const unsigned int sofa::gui::qt::QTabulationModifyObject::index. protected . ◆ item. QTreeWidgetItem* sofa::gui::qt::QTabulationModifyObject::item. protected . ◆ m_dataValueModified. std::map< QObject*, QString> sofa::gui::qt::QTabulationModifyObject::m_dataValueModified. protected . ◆ object. core::objectmodel::Base* sofa::gui::qt::QTabulationModifyObject::object. protected . ◆ pixelMaxSize. unsigned int sofa::gui::qt::QTabulationModifyObject::pixelMaxSize. protected . ◆ pixelSize. unsigned int sofa::gui::qt::QTabulationModifyObject::pixelSize. protected . ◆ size. unsigned int sofa::gui::qt::QTabulationModifyObject::size. protected . Constructor details. ◆ QTabulationModifyObject(). sofa::gui::qt::QTabulationModifyObject::QTabulationModifyObject ; (; QWidget * ; parent, . core::objectmodel::Base * ; object, . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_tabulation_modify_object.html:1438,update,updateDataValue,1438,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_tabulation_modify_object.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_tabulation_modify_object.html,2,['update'],"['updateDataValue', 'updateWidgetValue']"
Deployability," this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  . Public Member Functions;  SOFA_CLASS (SOFA_TEMPLATE(ClusteringEngine, DataTypes), core::DataEngine);  ;  ClusteringEngine ();  ;  ~ClusteringEngine () override;  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; void doUpdate () override;  Where you put your engine's impl. More...;  ; void draw (const core::visual::VisualParams *vparams) override;  Render internal data of this object, for debugging purposes. More...;  ;  Public Member Functions inherited from sofa::core::DataEngine;  SOFA_ABSTRACT_CLASS (DataEngine, core::objectmodel::BaseObject);  ; void update () final;  ; void addInput (sofa::core::objectmodel::BaseData *data);  Add a new input to this engine. More...;  ; void addOutput (objectmodel::BaseData *n);  Add a new output to this engine. More...;  ;  Public Member Functions inherited from sofa::core::DataTrackerDDGNode;  DataTrackerDDGNode ();  ; void addInputs (std::initializer_list< sofa::core::objectmodel::BaseData * > datas);  Create a DataCallback object associated with multiple Data fields. More...;  ; void addOutputs (std::initializer_list< sofa::core::objectmodel::BaseData * > datas);  ; virtual void cleanDirty (const core::ExecParams *params=nullptr);  ; void updateAllInputsIfDirty ();  ;  Public Member Functions inherited from sofa::core::objectmodel::DDGNode;  DDGNode ();  Constructor. More...;  ; virtual ~DDGNode ();  Destructor. Automatically remove remaining links. More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void delInput (DDGNode *n);  Remove an input fr",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1analyze_1_1_clustering_engine.html:3255,update,update,3255,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1analyze_1_1_clustering_engine.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1analyze_1_1_clustering_engine.html,1,['update'],['update']
Deployability,"◆ addTreeItem() [2/2]. QTreeWidgetItem * sofa::gui::qt::SofaWindowProfiler::addTreeItem ; (; const AnimationStepData * ; step). protected . ◆ closeEvent. void sofa::gui::qt::SofaWindowProfiler::closeEvent ; (; QCloseEvent * ; ). inlineoverrideslot . ◆ closeWindow. void sofa::gui::qt::SofaWindowProfiler::closeWindow ; (; bool ; ). signal . ◆ createChart(). void sofa::gui::qt::SofaWindowProfiler::createChart ; (; ). protected . Method called at creation to init the chart. . ◆ createTreeView(). void sofa::gui::qt::SofaWindowProfiler::createTreeView ; (; ). protected . Method called at creation to init the QTreeWidget. . ◆ expandRootNodeOnly. void sofa::gui::qt::SofaWindowProfiler::expandRootNodeOnly ; (; ); const. slot . ◆ onStepSelected. void sofa::gui::qt::SofaWindowProfiler::onStepSelected ; (; QTreeWidgetItem * ; item, . int ; column . ). slot . Method called when a QTreeWidgetItem is selected in the Tree view. . ◆ pushStepData(). void sofa::gui::qt::SofaWindowProfiler::pushStepData ; (; ). main method to iterate on the AdvancedTimer Data and update the info in the widgets . ◆ resetGraph(). void sofa::gui::qt::SofaWindowProfiler::resetGraph ; (; ). Method to clear all Data and reset graph. . ◆ updateChart(). void sofa::gui::qt::SofaWindowProfiler::updateChart ; (; ). protected . Method called at each iteration to update the chart. . ◆ updateFromSelectedStep. void sofa::gui::qt::SofaWindowProfiler::updateFromSelectedStep ; (; int ; step). slot . Method to update all widgets from select absisse on the graph. . ◆ updateSummaryLabels. void sofa::gui::qt::SofaWindowProfiler::updateSummaryLabels ; (; int ; step). slot . Method called when a given. ; Parameters. stepis triggered to update summary information . ◆ updateTree. void sofa::gui::qt::SofaWindowProfiler::updateTree ; (; int ; step). slot . Method called when a given. ; Parameters. stepis triggered to update the QTreeView . sofaguiqtSofaWindowProfiler; Generated on Mon Nov 11 2024 03:25:43 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_sofa_window_profiler.html:7957,update,update,7957,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_sofa_window_profiler.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_sofa_window_profiler.html,13,['update'],"['update', 'updateChart', 'updateFromSelectedStep', 'updateSummaryLabels', 'updateTree']"
Deployability,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::collision::detection::algorithm::DSAPBox Member List . This is the complete list of members for sofa::component::collision::detection::algorithm::DSAPBox, including all inherited members. cubesofa::component::collision::detection::algorithm::DSAPBox; DSAPBox(const collision::geometry::Cube &c, EndPoint *mi=nullptr, EndPoint *ma=nullptr)sofa::component::collision::detection::algorithm::DSAPBoxinlineexplicit; maxsofa::component::collision::detection::algorithm::DSAPBox; minsofa::component::collision::detection::algorithm::DSAPBox; show() constsofa::component::collision::detection::algorithm::DSAPBoxinline; squaredDistance(const DSAPBox &other) constsofa::component::collision::detection::algorithm::DSAPBox; squaredDistance(const DSAPBox &other, int axis) constsofa::component::collision::detection::algorithm::DSAPBox; update(int axis, double alarmDist)sofa::component::collision::detection::algorithm::DSAPBox. Generated on Mon Nov 11 2024 02:19:52 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_d_s_a_p_box-members.html:943,update,update,943,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_d_s_a_p_box-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_d_s_a_p_box-members.html,1,['update'],['update']
Deployability,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::mapping::nonlinear::BaseDistanceFromTargetMapping Member List . This is the complete list of members for sofa::component::mapping::nonlinear::BaseDistanceFromTargetMapping, including all inherited members. updateTarget(unsigned index, SReal x, SReal y, SReal z)=0sofa::component::mapping::nonlinear::BaseDistanceFromTargetMappingpure virtual. Generated on Mon Nov 11 2024 02:51:17 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1mapping_1_1nonlinear_1_1_base_distance_from_target_mapping-members.html:323,update,updateTarget,323,api/master/sofa/html/structsofa_1_1component_1_1mapping_1_1nonlinear_1_1_base_distance_from_target_mapping-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1mapping_1_1nonlinear_1_1_base_distance_from_target_mapping-members.html,1,['update'],['updateTarget']
Deployability,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::DataTrackerFunctor< FunctorType > Member List . This is the complete list of members for sofa::core::DataTrackerFunctor< FunctorType >, including all inherited members. addInput(DDGNode *n)sofa::core::objectmodel::DDGNode; addOutput(DDGNode *n)sofa::core::objectmodel::DDGNode; cleanDirty()sofa::core::objectmodel::DDGNode; cleanDirtyOutputsOfInputs()sofa::core::objectmodel::DDGNodeprotected; DataTrackerFunctor(FunctorType &functor)sofa::core::DataTrackerFunctor< FunctorType >inline; DDGLinkContainer typedefsofa::core::objectmodel::DDGNode; DDGLinkIterator typedefsofa::core::objectmodel::DDGNode; DDGNode()sofa::core::objectmodel::DDGNode; delInput(DDGNode *n)sofa::core::objectmodel::DDGNode; delOutput(DDGNode *n)sofa::core::objectmodel::DDGNode; doAddInput(DDGNode *n)sofa::core::objectmodel::DDGNodeprotectedvirtual; doAddOutput(DDGNode *n)sofa::core::objectmodel::DDGNodeprotectedvirtual; doDelInput(DDGNode *n)sofa::core::objectmodel::DDGNodeprotectedvirtual; doDelOutput(DDGNode *n)sofa::core::objectmodel::DDGNodeprotectedvirtual; getInputs()sofa::core::objectmodel::DDGNode; getOutputs()sofa::core::objectmodel::DDGNode; inputssofa::core::objectmodel::DDGNodeprotected; isDirty() constsofa::core::objectmodel::DDGNodeinline; notifyEndEdit()sofa::core::objectmodel::DDGNodevirtual; outputssofa::core::objectmodel::DDGNodeprotected; setDirtyOutputs()sofa::core::objectmodel::DDGNodevirtual; setDirtyValue() overridesofa::core::DataTrackerFunctor< FunctorType >inlinevirtual; update() overridesofa::core::DataTrackerFunctor< FunctorType >inlinevirtual; updateIfDirty() constsofa::core::objectmodel::DDGNode; ~DDGNode()sofa::core::objectmodel::DDGNodevirtual. Generated on Mon Nov 11 2024 03:14:09 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_data_tracker_functor-members.html:1599,update,update,1599,api/master/sofa/html/classsofa_1_1core_1_1_data_tracker_functor-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_data_tracker_functor-members.html,2,['update'],"['update', 'updateIfDirty']"
Deployability,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::ExecParams Member List . This is the complete list of members for sofa::core::ExecParams, including all inherited members. checkValidStorage() constsofa::core::ExecParams; defaultInstance()sofa::core::ExecParamsstatic; EXEC_DEBUG enum valuesofa::core::ExecParams; EXEC_DEFAULT enum valuesofa::core::ExecParams; EXEC_GPU enum valuesofa::core::ExecParams; EXEC_GRAPH enum valuesofa::core::ExecParams; EXEC_NONE enum valuesofa::core::ExecParams; ExecMode enum namesofa::core::ExecParams; execMode() constsofa::core::ExecParamsinline; ExecParams()sofa::core::ExecParamsinline; nbThreads() constsofa::core::ExecParamsinline; setExecMode(ExecMode v)sofa::core::ExecParamsinline; setThreadID(int v)sofa::core::ExecParamsinline; threadID() constsofa::core::ExecParamsinline; update()sofa::core::ExecParams. Generated on Mon Nov 11 2024 03:14:09 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_exec_params-members.html:879,update,update,879,api/master/sofa/html/classsofa_1_1core_1_1_exec_params-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_exec_params-members.html,1,['update'],['update']
Deployability,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::collision::DetectionOutputVector Member List . This is the complete list of members for sofa::core::collision::DetectionOutputVector, including all inherited members. clear()=0sofa::core::collision::DetectionOutputVectorpure virtual; empty() constsofa::core::collision::DetectionOutputVectorinline; getFirstPosition(unsigned idx)=0sofa::core::collision::DetectionOutputVectorpure virtual; getSecondPosition(unsigned idx)=0sofa::core::collision::DetectionOutputVectorpure virtual; release()sofa::core::collision::DetectionOutputVectorinlinevirtual; size() const =0sofa::core::collision::DetectionOutputVectorpure virtual; ~DetectionOutputVector()sofa::core::collision::DetectionOutputVectorinlineprotectedvirtual. Generated on Mon Nov 11 2024 03:15:47 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_detection_output_vector-members.html:592,release,release,592,api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_detection_output_vector-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_detection_output_vector-members.html,1,['release'],['release']
Deployability,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::objectmodel::Aspect Member List . This is the complete list of members for sofa::core::objectmodel::Aspect, including all inherited members. add_ref()sofa::core::objectmodel::Aspect; aspectID() constsofa::core::objectmodel::Aspectinline; AspectPool classsofa::core::objectmodel::Aspectfriend; release()sofa::core::objectmodel::Aspect. Generated on Mon Nov 11 2024 03:15:52 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect-members.html:405,release,release,405,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect-members.html,1,['release'],['release']
Deployability,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::objectmodel::AspectPool Member List . This is the complete list of members for sofa::core::objectmodel::AspectPool, including all inherited members. allocate()sofa::core::objectmodel::AspectPool; Aspect classsofa::core::objectmodel::AspectPoolfriend; AspectPool()sofa::core::objectmodel::AspectPool; getAspect(int id)sofa::core::objectmodel::AspectPool; getAspectCounter(int id) constsofa::core::objectmodel::AspectPoolinline; nbAspects() constsofa::core::objectmodel::AspectPoolinline; release(int id)sofa::core::objectmodel::AspectPoolprotected; setReleaseCallback(const std::function< void(int)> &callback)sofa::core::objectmodel::AspectPool; ~AspectPool()sofa::core::objectmodel::AspectPool. Generated on Mon Nov 11 2024 03:15:52 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_pool-members.html:599,release,release,599,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_pool-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_pool-members.html,1,['release'],['release']
Deployability,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::objectmodel::DDGNode Member List . This is the complete list of members for sofa::core::objectmodel::DDGNode, including all inherited members. addInput(DDGNode *n)sofa::core::objectmodel::DDGNode; addOutput(DDGNode *n)sofa::core::objectmodel::DDGNode; cleanDirty()sofa::core::objectmodel::DDGNode; cleanDirtyOutputsOfInputs()sofa::core::objectmodel::DDGNodeprotected; DDGLinkContainer typedefsofa::core::objectmodel::DDGNode; DDGLinkIterator typedefsofa::core::objectmodel::DDGNode; DDGNode()sofa::core::objectmodel::DDGNode; delInput(DDGNode *n)sofa::core::objectmodel::DDGNode; delOutput(DDGNode *n)sofa::core::objectmodel::DDGNode; doAddInput(DDGNode *n)sofa::core::objectmodel::DDGNodeprotectedvirtual; doAddOutput(DDGNode *n)sofa::core::objectmodel::DDGNodeprotectedvirtual; doDelInput(DDGNode *n)sofa::core::objectmodel::DDGNodeprotectedvirtual; doDelOutput(DDGNode *n)sofa::core::objectmodel::DDGNodeprotectedvirtual; getInputs()sofa::core::objectmodel::DDGNode; getOutputs()sofa::core::objectmodel::DDGNode; inputssofa::core::objectmodel::DDGNodeprotected; isDirty() constsofa::core::objectmodel::DDGNodeinline; notifyEndEdit()sofa::core::objectmodel::DDGNodevirtual; outputssofa::core::objectmodel::DDGNodeprotected; setDirtyOutputs()sofa::core::objectmodel::DDGNodevirtual; setDirtyValue()sofa::core::objectmodel::DDGNodevirtual; update()=0sofa::core::objectmodel::DDGNodepure virtual; updateIfDirty() constsofa::core::objectmodel::DDGNode; ~DDGNode()sofa::core::objectmodel::DDGNodevirtual. Generated on Mon Nov 11 2024 03:15:53 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_d_d_g_node-members.html:1452,update,update,1452,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_d_d_g_node-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_d_d_g_node-members.html,2,['update'],"['update', 'updateIfDirty']"
Deployability,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::objectmodel::DataContentValue< T, false > Member List . This is the complete list of members for sofa::core::objectmodel::DataContentValue< T, false >, including all inherited members. beginEdit()sofa::core::objectmodel::DataContentValue< T, false >inline; DataContentValue()sofa::core::objectmodel::DataContentValue< T, false >inline; DataContentValue(const T &value)sofa::core::objectmodel::DataContentValue< T, false >inlineexplicit; DataContentValue(const DataContentValue &dc)sofa::core::objectmodel::DataContentValue< T, false >inline; endEdit()sofa::core::objectmodel::DataContentValue< T, false >inline; getValue() constsofa::core::objectmodel::DataContentValue< T, false >inline; operator=(const DataContentValue &dc)sofa::core::objectmodel::DataContentValue< T, false >inline; release()sofa::core::objectmodel::DataContentValue< T, false >inline; setValue(const T &value)sofa::core::objectmodel::DataContentValue< T, false >inline. Generated on Mon Nov 11 2024 03:15:53 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_content_value_3_01_t_00_01false_01_4-members.html:899,release,release,899,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_content_value_3_01_t_00_01false_01_4-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_content_value_3_01_t_00_01false_01_4-members.html,1,['release'],['release']
Deployability,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::objectmodel::DataContentValue< T, true > Member List . This is the complete list of members for sofa::core::objectmodel::DataContentValue< T, true >, including all inherited members. beginEdit()sofa::core::objectmodel::DataContentValue< T, true >inline; DataContentValue()sofa::core::objectmodel::DataContentValue< T, true >inline; DataContentValue(const T &value)sofa::core::objectmodel::DataContentValue< T, true >inlineexplicit; DataContentValue(const DataContentValue &dc)sofa::core::objectmodel::DataContentValue< T, true >inline; endEdit()sofa::core::objectmodel::DataContentValue< T, true >inline; getValue() constsofa::core::objectmodel::DataContentValue< T, true >inline; operator=(const DataContentValue &dc)sofa::core::objectmodel::DataContentValue< T, true >inline; release()sofa::core::objectmodel::DataContentValue< T, true >inline; setValue(const T &value)sofa::core::objectmodel::DataContentValue< T, true >inline; ~DataContentValue()sofa::core::objectmodel::DataContentValue< T, true >inline. Generated on Mon Nov 11 2024 03:15:53 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_content_value_3_01_t_00_01true_01_4-members.html:890,release,release,890,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_content_value_3_01_t_00_01true_01_4-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_content_value_3_01_t_00_01true_01_4-members.html,1,['release'],['release']
Deployability,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::gl::Cylinder Member List . This is the complete list of members for sofa::gl::Cylinder, including all inherited members. clear()sofa::gl::Cylinderinlinestatic; Cylinder(SReal len=1.0_sreal)sofa::gl::Cylinder; Cylinder(const Vec3 &len)sofa::gl::Cylinder; Cylinder(const Vec3 &center, const Quaternion &orient, const Vec3 &length)sofa::gl::Cylinder; Cylinder(const Vec3 &center, const double orient[4][4], const Vec3 &length)sofa::gl::Cylinder; Cylinder(const double *mat, const Vec3 &length)sofa::gl::Cylinder; Cylinder(const Vec3 &center, const Quaternion &orient, SReal length=1.0_sreal)sofa::gl::Cylinder; Cylinder(const Vec3 &center, const double orient[4][4], SReal length=1.0_sreal)sofa::gl::Cylinder; Cylinder(const double *mat, SReal length=1.0_sreal)sofa::gl::Cylinder; draw()sofa::gl::Cylinder; draw(const Vec3 &center, const Quaternion &orient, const Vec3 &length)sofa::gl::Cylinderstatic; draw(const Vec3 &center, const double orient[4][4], const Vec3 &length)sofa::gl::Cylinderstatic; draw(const double *mat, const Vec3 &length)sofa::gl::Cylinderstatic; draw(const Vec3 &center, const Quaternion &orient, SReal length=1.0_sreal)sofa::gl::Cylinderstatic; draw(const Vec3 &center, const double orient[4][4], SReal length=1.0_sreal)sofa::gl::Cylinderstatic; draw(const double *mat, SReal length=1.0_sreal)sofa::gl::Cylinderstatic; Quaternion typedefsofa::gl::Cylinder; SOFA_ATTRIBUTE_REPLACED__TYPEMEMBER(Vector3, sofa::type::Vec3)sofa::gl::Cylinder; update(const Vec3 &center, const Quaternion &orient=Quaternion())sofa::gl::Cylinder; update(const Vec3 &center, const double orient[4][4])sofa::gl::Cylinder; update(const double *mat)sofa::gl::Cylinder; ~Cylinder()sofa::gl::Cylinder. Generated on Mon Nov 11 2024 03:18:55 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1_cylinder-members.html:1566,update,update,1566,api/master/sofa/html/classsofa_1_1gl_1_1_cylinder-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1_cylinder-members.html,3,['update'],['update']
Deployability,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::gl::GlText Member List . This is the complete list of members for sofa::gl::GlText, including all inherited members. draw()sofa::gl::GlText; draw(const T &text, const type::Vec3 &position=type::Vec3(0.0, 0.0, 0.0), const double &scale=1.0)sofa::gl::GlTextstatic; GlText()sofa::gl::GlText; GlText(const std::string &text)sofa::gl::GlText; GlText(const std::string &text, const type::Vec3 &position)sofa::gl::GlText; GlText(const std::string &text, const type::Vec3 &position, const double &scale)sofa::gl::GlText; setText(const std::string &text)sofa::gl::GlText; setText(const T &text)sofa::gl::GlText; textureDraw_Indices(const type::vector< type::Vec3 > &positions, const float &scale)sofa::gl::GlTextstatic; textureDraw_Overlay(const char *text, const double scale=1.0)sofa::gl::GlTextstatic; update(const type::Vec3 &position)sofa::gl::GlText; update(const double &scale)sofa::gl::GlText; ~GlText()sofa::gl::GlText. Generated on Mon Nov 11 2024 03:18:55 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1_gl_text-members.html:902,update,update,902,api/master/sofa/html/classsofa_1_1gl_1_1_gl_text-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1_gl_text-members.html,2,['update'],['update']
Deployability,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::gl::Texture Member List . This is the complete list of members for sofa::gl::Texture, including all inherited members. bind(void)sofa::gl::Texture; getId() constsofa::gl::Textureinline; getImage(void)sofa::gl::Texture; getTarget() constsofa::gl::Textureinline; init()sofa::gl::Texture; Texture()sofa::gl::Textureinline; Texture(helper::io::Image *img, bool repeat=true, bool linearInterpolation=true, bool generateMipmaps=true, bool srgbColorspace=false, float minLod=-1000, float maxLod=1000)sofa::gl::Textureinline; unbind(void)sofa::gl::Texture; update()sofa::gl::Texture; ~Texture()sofa::gl::Texture. Generated on Mon Nov 11 2024 03:18:55 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1_texture-members.html:655,update,update,655,api/master/sofa/html/classsofa_1_1gl_1_1_texture-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1_texture-members.html,1,['update'],['update']
Deployability,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::gui::qt::DataWidget Member List . This is the complete list of members for sofa::gui::qt::DataWidget, including all inherited members. baseDatasofa::gui::qt::DataWidgetprotected; countersofa::gui::qt::DataWidgetprotected; create(T *, const CreatorArgument &arg)sofa::gui::qt::DataWidgetinlinestatic; CreateDataWidget(const DataWidget::CreatorArgument &dwarg)sofa::gui::qt::DataWidgetstatic; createWidgets()=0sofa::gui::qt::DataWidgetpure virtual; DataOwnerDirty(bool)sofa::gui::qt::DataWidgetsignal; dataValueChanged(QString dataValueString)sofa::gui::qt::DataWidgetsignal; DataWidget(QWidget *parent, const char *name, MyData *d)sofa::gui::qt::DataWidget; dirtysofa::gui::qt::DataWidgetprotected; fillFromData()sofa::gui::qt::DataWidgetslot; getBaseData() constsofa::gui::qt::DataWidgetinline; getBaseData()sofa::gui::qt::DataWidgetinline; isDirty()sofa::gui::qt::DataWidgetinline; isFilled()sofa::gui::qt::DataWidgetinline; m_isFilledsofa::gui::qt::DataWidgetprotected; m_toFillsofa::gui::qt::DataWidgetprotected; MyData typedefsofa::gui::qt::DataWidget; numColumnWidget()sofa::gui::qt::DataWidgetinlinevirtual; readFromData()=0sofa::gui::qt::DataWidgetprotectedpure virtual; setData(MyData *d)sofa::gui::qt::DataWidgetvirtual; setDataReadOnly(bool readOnly)=0sofa::gui::qt::DataWidgetpure virtual; setFilled(bool value)sofa::gui::qt::DataWidgetinline; setWidgetDirty(bool b=true)sofa::gui::qt::DataWidgetslot; sizeWidget()sofa::gui::qt::DataWidgetinlinevirtual; updateDataValue()sofa::gui::qt::DataWidgetslot; updateVisibility()sofa::gui::qt::DataWidget; updateWidgetValue()sofa::gui::qt::DataWidgetslot; WidgetDirty(bool)sofa::gui::qt::DataWidgetsignal; writeToData()=0sofa::gui::qt::DataWidgetprotectedpure virtual; ~DataWidget() overridesofa::gui::qt::DataWidget. Generated on Mon Nov 11 2024 03:23:37 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_data_widget-members.html:1571,update,updateDataValue,1571,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_data_widget-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_data_widget-members.html,3,['update'],"['updateDataValue', 'updateVisibility', 'updateWidgetValue']"
Deployability,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::gui::qt::LinkWidget Member List . This is the complete list of members for sofa::gui::qt::LinkWidget, including all inherited members. baseLinksofa::gui::qt::LinkWidgetprotected; countersofa::gui::qt::LinkWidgetprotected; CreateLinkWidget(const LinkWidget::CreatorArgument &dwarg)sofa::gui::qt::LinkWidgetstatic; createWidgets()=0sofa::gui::qt::LinkWidgetpure virtual; dirtysofa::gui::qt::LinkWidgetprotected; getBaseLink() constsofa::gui::qt::LinkWidgetinline; getBaseLink()sofa::gui::qt::LinkWidgetinline; isDirty()sofa::gui::qt::LinkWidgetinline; LinkBeingChanged()sofa::gui::qt::LinkWidgetsignal; LinkOwnerDirty(bool)sofa::gui::qt::LinkWidgetsignal; LinkWidget(QWidget *parent, const char *, MyLink *l)sofa::gui::qt::LinkWidgetinline; MyLink typedefsofa::gui::qt::LinkWidget; numColumnWidget()sofa::gui::qt::LinkWidgetinlinevirtual; readFromLink()=0sofa::gui::qt::LinkWidgetprotectedpure virtual; setLink(MyLink *d)sofa::gui::qt::LinkWidgetinlinevirtual; setWidgetDirty()sofa::gui::qt::LinkWidgetinlineslot; setWidgetDirty(bool b)sofa::gui::qt::LinkWidgetinlineslot; sizeWidget()sofa::gui::qt::LinkWidgetinlinevirtual; updateLinkValue()sofa::gui::qt::LinkWidgetinlineslot; updateVisibility()sofa::gui::qt::LinkWidgetinline; updateWidgetValue()sofa::gui::qt::LinkWidgetinlineslot; WidgetDirty(bool)sofa::gui::qt::LinkWidgetsignal; writeToLink()=0sofa::gui::qt::LinkWidgetprotectedpure virtual; ~LinkWidget() overridesofa::gui::qt::LinkWidgetinline. Generated on Mon Nov 11 2024 03:23:42 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_link_widget-members.html:1229,update,updateLinkValue,1229,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_link_widget-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_link_widget-members.html,3,['update'],"['updateLinkValue', 'updateVisibility', 'updateWidgetValue']"
Deployability,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::gui::qt::ObjectStateListener Member List . This is the complete list of members for sofa::gui::qt::ObjectStateListener, including all inherited members. addInput(DDGNode *n)sofa::core::objectmodel::DDGNode; addOutput(DDGNode *n)sofa::core::objectmodel::DDGNode; cleanDirty()sofa::core::objectmodel::DDGNode; cleanDirtyOutputsOfInputs()sofa::core::objectmodel::DDGNodeprotected; DDGLinkContainer typedefsofa::core::objectmodel::DDGNode; DDGLinkIterator typedefsofa::core::objectmodel::DDGNode; DDGNode()sofa::core::objectmodel::DDGNode; delInput(DDGNode *n)sofa::core::objectmodel::DDGNode; delOutput(DDGNode *n)sofa::core::objectmodel::DDGNode; doAddInput(DDGNode *n)sofa::core::objectmodel::DDGNodeprotectedvirtual; doAddOutput(DDGNode *n)sofa::core::objectmodel::DDGNodeprotectedvirtual; doDelInput(DDGNode *n)sofa::core::objectmodel::DDGNodeprotectedvirtual; doDelOutput(DDGNode *n)sofa::core::objectmodel::DDGNodeprotectedvirtual; getInputs()sofa::core::objectmodel::DDGNode; getOutputs()sofa::core::objectmodel::DDGNode; inputssofa::core::objectmodel::DDGNodeprotected; isDirty() constsofa::core::objectmodel::DDGNodeinline; itemsofa::gui::qt::ObjectStateListener; notifyEndEdit() overridesofa::gui::qt::ObjectStateListenervirtual; objectsofa::gui::qt::ObjectStateListener; ObjectStateListener(QTreeWidgetItem *item_, sofa::core::objectmodel::Base *object_)sofa::gui::qt::ObjectStateListener; outputssofa::core::objectmodel::DDGNodeprotected; setDirtyOutputs()sofa::core::objectmodel::DDGNodevirtual; setDirtyValue()sofa::core::objectmodel::DDGNodevirtual; update() overridesofa::gui::qt::ObjectStateListenervirtual; updateIfDirty() constsofa::core::objectmodel::DDGNode; ~DDGNode()sofa::core::objectmodel::DDGNodevirtual; ~ObjectStateListener() overridesofa::gui::qt::ObjectStateListener. Generated on Mon Nov 11 2024 03:23:42 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_object_state_listener-members.html:1668,update,update,1668,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_object_state_listener-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_object_state_listener-members.html,2,['update'],"['update', 'updateIfDirty']"
Deployability,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::gui::qt::ProfilerChartView Member List . This is the complete list of members for sofa::gui::qt::ProfilerChartView, including all inherited members. drawForeground(QPainter *painter, const QRectF &rect)sofa::gui::qt::ProfilerChartViewprotectedvirtual; m_bufferSizesofa::gui::qt::ProfilerChartViewprotected; m_lineOriginsofa::gui::qt::ProfilerChartViewprotected; m_lineSelectsofa::gui::qt::ProfilerChartViewprotected; m_maxYsofa::gui::qt::ProfilerChartViewprotected; m_pointSelectedsofa::gui::qt::ProfilerChartViewprotected; mousePressEvent(QMouseEvent *event)sofa::gui::qt::ProfilerChartViewprotectedvirtual; pointSelected(int)sofa::gui::qt::ProfilerChartViewsignal; ProfilerChartView(QChart *chart, QWidget *parent, int bufferSize)sofa::gui::qt::ProfilerChartView; updateSelection(int x)sofa::gui::qt::ProfilerChartViewslot; updateYMax(int y)sofa::gui::qt::ProfilerChartViewinline. Generated on Mon Nov 11 2024 03:25:43 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_profiler_chart_view-members.html:872,update,updateSelection,872,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_profiler_chart_view-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_profiler_chart_view-members.html,2,['update'],"['updateSelection', 'updateYMax']"
Deployability,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::gui::qt::QDisplayTreeItemWidget Member List . This is the complete list of members for sofa::gui::qt::QDisplayTreeItemWidget, including all inherited members. QDisplayTreeItemWidget(QWidget *parent=nullptr, QTreeWidgetItem *item=nullptr)sofa::gui::qt::QDisplayTreeItemWidget; updateDirtyWidget()sofa::gui::qt::QDisplayTreeItemWidgetprotectedslot; ~QDisplayTreeItemWidget() overridesofa::gui::qt::QDisplayTreeItemWidget. Generated on Mon Nov 11 2024 03:23:43 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_display_tree_item_widget-members.html:382,update,updateDirtyWidget,382,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_display_tree_item_widget-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_display_tree_item_widget-members.html,1,['update'],['updateDirtyWidget']
Deployability,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::gui::qt::QEnergyStatWidget Member List . This is the complete list of members for sofa::gui::qt::QEnergyStatWidget, including all inherited members. flushSeries()sofa::gui::qt::QGraphStatWidgetprotected; m_axisXsofa::gui::qt::QGraphStatWidgetprotected; m_axisYsofa::gui::qt::QGraphStatWidgetprotected; m_bufferSizesofa::gui::qt::QGraphStatWidgetprotected; m_chartsofa::gui::qt::QGraphStatWidgetprotected; m_cptStepsofa::gui::qt::QGraphStatWidgetprotected; m_curvessofa::gui::qt::QGraphStatWidgetprotected; m_lastTimesofa::gui::qt::QGraphStatWidgetprotected; m_nodesofa::gui::qt::QGraphStatWidgetprotected; m_yMaxsofa::gui::qt::QGraphStatWidgetprotected; m_yMinsofa::gui::qt::QGraphStatWidgetprotected; QEnergyStatWidget(QWidget *parent, simulation::Node *node)sofa::gui::qt::QEnergyStatWidget; QGraphStatWidget(QWidget *parent, simulation::Node *node, const QString &title, unsigned numberOfCurves, int bufferSize)sofa::gui::qt::QGraphStatWidget; setCurve(unsigned index, const QString &name, const QColor &color)sofa::gui::qt::QGraphStatWidgetprotected; step() finalsofa::gui::qt::QGraphStatWidgetvirtual; stepImpl() overridesofa::gui::qt::QEnergyStatWidgetvirtual; updateYAxisBounds(SReal value)sofa::gui::qt::QGraphStatWidgetprotected; ~QEnergyStatWidget()sofa::gui::qt::QEnergyStatWidget; ~QGraphStatWidget()sofa::gui::qt::QGraphStatWidgetvirtual. Generated on Mon Nov 11 2024 03:23:43 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_energy_stat_widget-members.html:1273,update,updateYAxisBounds,1273,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_energy_stat_widget-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_energy_stat_widget-members.html,1,['update'],['updateYAxisBounds']
Deployability,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::gui::qt::QGraphStatWidget Member List . This is the complete list of members for sofa::gui::qt::QGraphStatWidget, including all inherited members. flushSeries()sofa::gui::qt::QGraphStatWidgetprotected; m_axisXsofa::gui::qt::QGraphStatWidgetprotected; m_axisYsofa::gui::qt::QGraphStatWidgetprotected; m_bufferSizesofa::gui::qt::QGraphStatWidgetprotected; m_chartsofa::gui::qt::QGraphStatWidgetprotected; m_cptStepsofa::gui::qt::QGraphStatWidgetprotected; m_curvessofa::gui::qt::QGraphStatWidgetprotected; m_lastTimesofa::gui::qt::QGraphStatWidgetprotected; m_nodesofa::gui::qt::QGraphStatWidgetprotected; m_yMaxsofa::gui::qt::QGraphStatWidgetprotected; m_yMinsofa::gui::qt::QGraphStatWidgetprotected; QGraphStatWidget(QWidget *parent, simulation::Node *node, const QString &title, unsigned numberOfCurves, int bufferSize)sofa::gui::qt::QGraphStatWidget; setCurve(unsigned index, const QString &name, const QColor &color)sofa::gui::qt::QGraphStatWidgetprotected; step() finalsofa::gui::qt::QGraphStatWidgetvirtual; stepImpl()=0sofa::gui::qt::QGraphStatWidgetpure virtual; updateYAxisBounds(SReal value)sofa::gui::qt::QGraphStatWidgetprotected; ~QGraphStatWidget()sofa::gui::qt::QGraphStatWidgetvirtual. Generated on Mon Nov 11 2024 03:23:43 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_graph_stat_widget-members.html:1176,update,updateYAxisBounds,1176,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_graph_stat_widget-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_graph_stat_widget-members.html,1,['update'],['updateYAxisBounds']
Deployability,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::gui::qt::QLinkSimpleEdit Member List . This is the complete list of members for sofa::gui::qt::QLinkSimpleEdit, including all inherited members. baseLinksofa::gui::qt::LinkWidgetprotected; countersofa::gui::qt::LinkWidgetprotected; CreateLinkWidget(const LinkWidget::CreatorArgument &dwarg)sofa::gui::qt::LinkWidgetstatic; createWidgets() overridesofa::gui::qt::QLinkSimpleEditvirtual; dirtysofa::gui::qt::LinkWidgetprotected; getBaseLink() constsofa::gui::qt::LinkWidgetinline; getBaseLink()sofa::gui::qt::LinkWidgetinline; innerWidget_sofa::gui::qt::QLinkSimpleEditprotected; isDirty()sofa::gui::qt::LinkWidgetinline; LinkBeingChanged()sofa::gui::qt::LinkWidgetsignal; LinkOwnerDirty(bool)sofa::gui::qt::LinkWidgetsignal; LinkWidget(QWidget *parent, const char *, MyLink *l)sofa::gui::qt::LinkWidgetinline; MyLink typedefsofa::gui::qt::LinkWidget; numColumnWidget() overridesofa::gui::qt::QLinkSimpleEditinlinevirtual; QLinkSimpleEdit(QWidget *, const char *name, core::objectmodel::BaseLink *)sofa::gui::qt::QLinkSimpleEdit; readFromLink() overridesofa::gui::qt::QLinkSimpleEditprotectedvirtual; setLink(MyLink *d)sofa::gui::qt::LinkWidgetinlinevirtual; setWidgetDirty()sofa::gui::qt::LinkWidgetinlineslot; setWidgetDirty(bool b)sofa::gui::qt::LinkWidgetinlineslot; sizeWidget() overridesofa::gui::qt::QLinkSimpleEditinlinevirtual; updateLinkValue()sofa::gui::qt::LinkWidgetinlineslot; updateVisibility()sofa::gui::qt::LinkWidgetinline; updateWidgetValue()sofa::gui::qt::LinkWidgetinlineslot; WidgetDirty(bool)sofa::gui::qt::LinkWidgetsignal; writeToLink() overridesofa::gui::qt::QLinkSimpleEditprotectedvirtual; ~LinkWidget() overridesofa::gui::qt::LinkWidgetinline. Generated on Mon Nov 11 2024 03:23:43 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_link_simple_edit-members.html:1441,update,updateLinkValue,1441,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_link_simple_edit-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_link_simple_edit-members.html,3,['update'],"['updateLinkValue', 'updateVisibility', 'updateWidgetValue']"
Deployability,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::gui::qt::QMenuFilesRecentlyOpened Member List . This is the complete list of members for sofa::gui::qt::QMenuFilesRecentlyOpened, including all inherited members. createWidget(QWidget *parent, const std::string &=std::string(""Recently Opened Files ...""))sofa::gui::qt::QMenuFilesRecentlyOpened; filessofa::gui::common::FilesRecentlyOpenedManagerprotected; FilesRecentlyOpenedManager(const std::string &configFile)sofa::gui::common::FilesRecentlyOpenedManager; getFilename(unsigned int idx) constsofa::gui::common::FilesRecentlyOpenedManagerinlinevirtual; getFiles() constsofa::gui::common::FilesRecentlyOpenedManagerinline; getMaxNumFiles() constsofa::gui::common::FilesRecentlyOpenedManagerinline; getMenu()sofa::gui::qt::QMenuFilesRecentlyOpenedinline; getPath() constsofa::gui::common::FilesRecentlyOpenedManagerinline; max_num_filessofa::gui::common::FilesRecentlyOpenedManagerprotected; menuRecentlyOpenedFilessofa::gui::qt::QMenuFilesRecentlyOpenedprotected; openFile(const std::string &file) overridesofa::gui::qt::QMenuFilesRecentlyOpenedvirtual; pathsofa::gui::common::FilesRecentlyOpenedManagerprotected; QMenuFilesRecentlyOpened(const std::string &configFile)sofa::gui::qt::QMenuFilesRecentlyOpenedinline; setFiles(const type::vector< std::string > &f)sofa::gui::common::FilesRecentlyOpenedManagerinline; setPath(const std::string &p)sofa::gui::common::FilesRecentlyOpenedManager; updateWidget()sofa::gui::qt::QMenuFilesRecentlyOpenedprotected; writeFiles() constsofa::gui::common::FilesRecentlyOpenedManagerprotected; ~FilesRecentlyOpenedManager()sofa::gui::common::FilesRecentlyOpenedManagerinlinevirtual; ~QMenuFilesRecentlyOpened() overridesofa::gui::qt::QMenuFilesRecentlyOpenedinline. Generated on Mon Nov 11 2024 03:23:43 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_menu_files_recently_opened-members.html:1498,update,updateWidget,1498,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_menu_files_recently_opened-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_menu_files_recently_opened-members.html,1,['update'],['updateWidget']
Deployability,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::gui::qt::QMomentumStatWidget Member List . This is the complete list of members for sofa::gui::qt::QMomentumStatWidget, including all inherited members. flushSeries()sofa::gui::qt::QGraphStatWidgetprotected; m_axisXsofa::gui::qt::QGraphStatWidgetprotected; m_axisYsofa::gui::qt::QGraphStatWidgetprotected; m_bufferSizesofa::gui::qt::QGraphStatWidgetprotected; m_chartsofa::gui::qt::QGraphStatWidgetprotected; m_cptStepsofa::gui::qt::QGraphStatWidgetprotected; m_curvessofa::gui::qt::QGraphStatWidgetprotected; m_lastTimesofa::gui::qt::QGraphStatWidgetprotected; m_nodesofa::gui::qt::QGraphStatWidgetprotected; m_yMaxsofa::gui::qt::QGraphStatWidgetprotected; m_yMinsofa::gui::qt::QGraphStatWidgetprotected; QGraphStatWidget(QWidget *parent, simulation::Node *node, const QString &title, unsigned numberOfCurves, int bufferSize)sofa::gui::qt::QGraphStatWidget; QMomentumStatWidget(QWidget *parent, simulation::Node *node)sofa::gui::qt::QMomentumStatWidget; setCurve(unsigned index, const QString &name, const QColor &color)sofa::gui::qt::QGraphStatWidgetprotected; step() finalsofa::gui::qt::QGraphStatWidgetvirtual; stepImpl() overridesofa::gui::qt::QMomentumStatWidgetvirtual; updateYAxisBounds(SReal value)sofa::gui::qt::QGraphStatWidgetprotected; ~QGraphStatWidget()sofa::gui::qt::QGraphStatWidgetvirtual; ~QMomentumStatWidget()sofa::gui::qt::QMomentumStatWidgetvirtual. Generated on Mon Nov 11 2024 03:23:43 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_momentum_stat_widget-members.html:1283,update,updateYAxisBounds,1283,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_momentum_stat_widget-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_momentum_stat_widget-members.html,1,['update'],['updateYAxisBounds']
Deployability,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::gui::qt::SofaMouseManager Member List . This is the complete list of members for sofa::gui::qt::SofaMouseManager, including all inherited members. getMapIndexOperation()sofa::gui::qt::SofaMouseManagerinline; mapIndexOperationsofa::gui::qt::SofaMouseManagerprotected; pickHandlersofa::gui::qt::SofaMouseManagerprotected; selectOperation(int)sofa::gui::qt::SofaMouseManagerslot; setPickHandler(common::PickHandler *)sofa::gui::qt::SofaMouseManager; SofaMouseManager(QWidget *parent)sofa::gui::qt::SofaMouseManager; updateContent()sofa::gui::qt::SofaMouseManager; updateOperation(sofa::component::setting::MouseButtonSetting *setting)sofa::gui::qt::SofaMouseManager; updateOperation(common::MOUSE_BUTTON button, const std::string &id)sofa::gui::qt::SofaMouseManager; updateOperation(common::Operation *op)sofa::gui::qt::SofaMouseManagerprotected; usedOperationssofa::gui::qt::SofaMouseManagerprotected; ~SofaMouseManager() overridesofa::gui::qt::SofaMouseManager. Generated on Mon Nov 11 2024 03:25:43 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_sofa_mouse_manager-members.html:619,update,updateContent,619,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_sofa_mouse_manager-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_sofa_mouse_manager-members.html,4,['update'],"['updateContent', 'updateOperation']"
Deployability,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::gui::qt::SofaPluginManager Member List . This is the complete list of members for sofa::gui::qt::SofaPluginManager, including all inherited members. addLibrary()sofa::gui::qt::SofaPluginManagerslot; libraryAdded()sofa::gui::qt::SofaPluginManagersignal; libraryRemoved()sofa::gui::qt::SofaPluginManagersignal; removeLibrary()sofa::gui::qt::SofaPluginManagerslot; SofaPluginManager(QWidget *parent)sofa::gui::qt::SofaPluginManager; updateComponentList()sofa::gui::qt::SofaPluginManagerslot; updateDescription()sofa::gui::qt::SofaPluginManagerslot; updatePluginsListView()sofa::gui::qt::SofaPluginManager. Generated on Mon Nov 11 2024 03:25:43 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_sofa_plugin_manager-members.html:536,update,updateComponentList,536,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_sofa_plugin_manager-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_sofa_plugin_manager-members.html,3,['update'],"['updateComponentList', 'updateDescription', 'updatePluginsListView']"
Deployability,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::gui::qt::SofaVideoRecorderManager Member List . This is the complete list of members for sofa::gui::qt::SofaVideoRecorderManager, including all inherited members. captureOptionsWidgetsofa::gui::qt::SofaVideoRecorderManagerprotected; close()sofa::gui::qt::SofaVideoRecorderManagervirtualslot; currentRecordingTypesofa::gui::qt::SofaVideoRecorderManagerprotected; getBitrate()sofa::gui::qt::SofaVideoRecorderManager; getCodecExtension()sofa::gui::qt::SofaVideoRecorderManager; getCodecName()sofa::gui::qt::SofaVideoRecorderManager; getFramerate()sofa::gui::qt::SofaVideoRecorderManager; getFrameskip()sofa::gui::qt::SofaVideoRecorderManager; getInstance()sofa::gui::qt::SofaVideoRecorderManagerinlinestatic; getRecordingType()sofa::gui::qt::SofaVideoRecorderManagerinline; internalAddWidget(QWidget *parent, QWidget *widgetToAdd)sofa::gui::qt::SofaVideoRecorderManagerstatic; MOVIE enum valuesofa::gui::qt::SofaVideoRecorderManager; movieOptionsWidgetsofa::gui::qt::SofaVideoRecorderManagerprotected; onChangeRecordingType()sofa::gui::qt::SofaVideoRecorderManagervirtualslot; realtime()sofa::gui::qt::SofaVideoRecorderManager; RecordingType enum namesofa::gui::qt::SofaVideoRecorderManager; SCREENSHOTS enum valuesofa::gui::qt::SofaVideoRecorderManager; screenshotsOptionsWidgetsofa::gui::qt::SofaVideoRecorderManagerprotected; SofaVideoRecorderManager(QWidget *parent=Q_NULLPTR)sofa::gui::qt::SofaVideoRecorderManager; updateContent()sofa::gui::qt::SofaVideoRecorderManager. Generated on Mon Nov 11 2024 03:25:43 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_sofa_video_recorder_manager-members.html:1524,update,updateContent,1524,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_sofa_video_recorder_manager-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_sofa_video_recorder_manager-members.html,1,['update'],['updateContent']
Deployability,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::gui::qt::qrgbacolorpicker_h::QRGBAColorPicker Member List . This is the complete list of members for sofa::gui::qt::qrgbacolorpicker_h::QRGBAColorPicker, including all inherited members. _asofa::gui::qt::qrgbacolorpicker_h::QRGBAColorPickerprotected; _bsofa::gui::qt::qrgbacolorpicker_h::QRGBAColorPickerprotected; _colorButtonsofa::gui::qt::qrgbacolorpicker_h::QRGBAColorPickerprotected; _gsofa::gui::qt::qrgbacolorpicker_h::QRGBAColorPickerprotected; _rsofa::gui::qt::qrgbacolorpicker_h::QRGBAColorPickerprotected; _rgbasofa::gui::qt::qrgbacolorpicker_h::QRGBAColorPickerprotected; getColor() constsofa::gui::qt::qrgbacolorpicker_h::QRGBAColorPicker; hasChanged()sofa::gui::qt::qrgbacolorpicker_h::QRGBAColorPickersignal; QRGBAColorPicker(QWidget *parent)sofa::gui::qt::qrgbacolorpicker_h::QRGBAColorPicker; raiseQColorDialog()sofa::gui::qt::qrgbacolorpicker_h::QRGBAColorPickerprotectedslot; redrawColorButton()sofa::gui::qt::qrgbacolorpicker_h::QRGBAColorPickerprotectedslot; setColor(const type::RGBAColor &color)sofa::gui::qt::qrgbacolorpicker_h::QRGBAColorPicker; setColor(const Vec4f &color)sofa::gui::qt::qrgbacolorpicker_h::QRGBAColorPicker; updateRGBAColor()sofa::gui::qt::qrgbacolorpicker_h::QRGBAColorPickerprotectedslot. Generated on Mon Nov 11 2024 03:25:44 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1qrgbacolorpicker__h_1_1_q_r_g_b_a_color_picker-members.html:1258,update,updateRGBAColor,1258,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1qrgbacolorpicker__h_1_1_q_r_g_b_a_color_picker-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1qrgbacolorpicker__h_1_1_q_r_g_b_a_color_picker-members.html,1,['update'],['updateRGBAColor']
Deployability,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::helper::system::FileMonitor Member List . This is the complete list of members for sofa::helper::system::FileMonitor, including all inherited members. addFile(const std::string &filename, FileEventListener *listener)sofa::helper::system::FileMonitorstatic; addFile(const std::string &directoryname, const std::string &filename, FileEventListener *listener)sofa::helper::system::FileMonitorstatic; removeFileListener(const std::string &filename, FileEventListener *listener)sofa::helper::system::FileMonitorstatic; removeListener(FileEventListener *listener)sofa::helper::system::FileMonitorstatic; updates(int timeout=1)sofa::helper::system::FileMonitorstatic. Generated on Mon Nov 11 2024 03:31:03 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_file_monitor-members.html:704,update,updates,704,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_file_monitor-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_file_monitor-members.html,1,['update'],['updates']
Deployability,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::helper::system::MonitoredFile Member List . This is the complete list of members for sofa::helper::system::MonitoredFile, including all inherited members. m_filenamesofa::helper::system::MonitoredFile; m_listenersofa::helper::system::MonitoredFile; MonitoredFile(const string &filename, FileEventListener *listener)sofa::helper::system::MonitoredFileinline; MonitoredFile(const string &filename, FileEventListener *listener)sofa::helper::system::MonitoredFileinline; update()sofa::helper::system::MonitoredFileinline; update()sofa::helper::system::MonitoredFileinline; ~MonitoredFile()sofa::helper::system::MonitoredFileinline. Generated on Mon Nov 11 2024 03:31:03 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_monitored_file-members.html:573,update,update,573,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_monitored_file-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_monitored_file-members.html,2,['update'],['update']
Deployability,"﻿. SOFA API: sofa::AffinePatch_sofa_test< _DataTypes > Struct Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::AffinePatch_sofa_test< _DataTypes > Struct Template Reference . Inheritance diagram for sofa::AffinePatch_sofa_test< _DataTypes >:. [legend]; Detailed Description; template<typename _DataTypes>; struct sofa::AffinePatch_sofa_test< _DataTypes >; AFfine Patch test. An affine movement (rotation and translation) is applied to the borders of a mesh. Test if the points inside have the same affine movement. . Public Attributes; simulation::Node::SPtr root;  Root of the scene graph. More...;  ; simulation::Simulation * simulation;  Tested simulation. More...;  ; PatchTestStruct< DataTypes > patchStruct;  Structure which contains current node and pointers to the mechanical object and the affine constraint. More...;  ; type::Mat< 3, 3, Real > testedRotation;  Tested Rotation: random rotation matrix. More...;  ; Coord testedTranslation;  Tested Translation: random translation. More...;  ;  Public Attributes inherited from sofa::testing::BaseTest; sofa::testing::MessageAsTestFailure m_fatal;  ; sofa::testing::MessageAsTestFailure m_error;  . Public Member Functions; void SetUp () override;  Create the context for the scene. More...;  ; void createScene2DRegularGrid (bool randomRotation=true, bool randomTranslation=true);  Create a scene with a 2D regular grid and an affine constraint. More...;  ; void createScene3DRegularGrid (bool randomRotation=true, bool randomTranslation=true);  Create a scene with a 3D regular grid and an affine constraint. More...;  ; void setRotation (type::Mat< 3, 3, Real > rotationMatrix);  ; void setTranslation (int x, int y, int z);  ; bool compareSimulatedToTheoreticalPositions (double convergenceAccuracy, double diffMaxBetweenSimulatedAndTheoreticalPosition);  After simulation compare the positions of points to the theore",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1_affine_patch__sofa__test.html:822,patch,patchStruct,822,api/master/sofa/html/structsofa_1_1_affine_patch__sofa__test.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1_affine_patch__sofa__test.html,1,['patch'],['patchStruct']
Deployability,﻿. SOFA API: sofa::PatchTestStruct< T > Struct Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; List of all members . sofa::PatchTestStruct< T > Struct Template Reference . #include <RegularGridNodeCreation.h>; Structure which contains the nodes and the pointers useful for the patch test. ; More... Inheritance diagram for sofa::PatchTestStruct< T >:. [legend]; Detailed Description; template<class T>; struct sofa::PatchTestStruct< T >; Structure which contains the nodes and the pointers useful for the patch test. . Public Attributes; simulation::Node::SPtr SquareNode;  ; component::constraint::projective::AffineMovementProjectiveConstraint< T >::SPtr affineConstraint;  ; component::statecontainer::MechanicalObject< T >::SPtr dofs;  . Attribute details. ◆ affineConstraint. template<class T > . component::constraint::projective::AffineMovementProjectiveConstraint<T>::SPtr sofa::PatchTestStruct< T >::affineConstraint. ◆ dofs. template<class T > . component::statecontainer::MechanicalObject<T>::SPtr sofa::PatchTestStruct< T >::dofs. ◆ SquareNode. template<class T > . simulation::Node::SPtr sofa::PatchTestStruct< T >::SquareNode. sofaPatchTestStruct; Generated on Mon Nov 11 2024 02:19:50 for SOFA API by 1.9.1 . ,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1_patch_test_struct.html:344,patch,patch,344,api/master/sofa/html/structsofa_1_1_patch_test_struct.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1_patch_test_struct.html,2,['patch'],['patch']
Deployability,"﻿. SOFA API: sofa::component::animationloop::MultiStepAnimationLoop Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; Protected Member Functions |; List of all members . sofa::component::animationloop::MultiStepAnimationLoop Class Reference . #include <MultiStepAnimationLoop.h>. Inheritance diagram for sofa::component::animationloop::MultiStepAnimationLoop:. [legend]. Public Attributes; sofa::core::objectmodel::RenamedData< int > collisionSteps;  ; sofa::core::objectmodel::RenamedData< int > integrationSteps;  ; Data< int > d_collisionSteps;  number of collision steps between each frame rendering More...;  ; Data< int > d_integrationSteps;  number of integration steps between each collision detection More...;  ;  Public Attributes inherited from sofa::core::behavior::BaseAnimationLoop; SingleLink< BaseAnimationLoop, core::objectmodel::BaseNode, BaseLink::FLAG_STOREPATH > l_node;  ; Data< bool > d_computeBoundingBox;  If true, compute the global bounding box of the scene at each time step. Used mostly for rendering. More...;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definition",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1animationloop_1_1_multi_step_animation_loop.html:586,integrat,integrationSteps,586,api/master/sofa/html/classsofa_1_1component_1_1animationloop_1_1_multi_step_animation_loop.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1animationloop_1_1_multi_step_animation_loop.html,2,['integrat'],"['integration', 'integrationSteps']"
Deployability,"﻿. SOFA API: sofa::component::collision::detection::algorithm::DSAPBox Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::component::collision::detection::algorithm::DSAPBox Class Reference . #include <DSAPBox.h>; Detailed Description; SAPBox is a simple bounding box. It contains a Cube which contains only one final CollisionElement and pointers to min and max EndPoints. min and max end points are respectively min and max coordinates of the cube on a coordinate axis. min and max are updated with the method update(int i), so min and max have min/max values on the i-th axis after the method update(int i). . Public Attributes; collision::geometry::Cube cube;  ; EndPoint * min {nullptr};  ; EndPoint * max {nullptr};  . Public Member Functions;  DSAPBox (const collision::geometry::Cube &c, EndPoint *mi=nullptr, EndPoint *ma=nullptr);  ; void update (int axis, double alarmDist);  ; double squaredDistance (const DSAPBox &other) const;  ; double squaredDistance (const DSAPBox &other, int axis) const;  Compute the squared distance from this to other on a specific axis. More...;  ; void show () const;  . Attribute details. ◆ cube. collision::geometry::Cube sofa::component::collision::detection::algorithm::DSAPBox::cube. ◆ max. EndPoint* sofa::component::collision::detection::algorithm::DSAPBox::max {nullptr}. ◆ min. EndPoint* sofa::component::collision::detection::algorithm::DSAPBox::min {nullptr}. Constructor details. ◆ DSAPBox(). sofa::component::collision::detection::algorithm::DSAPBox::DSAPBox ; (; const collision::geometry::Cube & ; c, . EndPoint * ; mi = nullptr, . EndPoint * ; ma = nullptr . ). inlineexplicit . Function details. ◆ show(). void sofa::component::collision::detection::algorithm::DSAPBox::show ; (; ); const. inline . ◆ squaredDistance() [1/2]. double sofa::component::collision::detection::algorithm::DSAPBox::squaredDistance ; (; const DSAPBox ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_d_s_a_p_box.html:604,update,updated,604,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_d_s_a_p_box.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_d_s_a_p_box.html,3,['update'],"['update', 'updated']"
Deployability,"﻿. SOFA API: sofa::component::collision::detection::algorithm::ISAPBox Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Static Public Attributes |; Public Member Functions |; List of all members . sofa::component::collision::detection::algorithm::ISAPBox Class Reference . #include <IncrSAP.h>; Detailed Description; ISAPBox is a simple bounding box. It contains a Cube which contains only one final CollisionElement and pointers to min and max EndPoints along the three dimensions. min and max end points are respectively min and max coordinates of the cube on a coordinate axis. The between end points (d_min, d_max) and the field cube is that cube is always updated whereas d_min and d_max are stored values of the cube end points at previous time step. . Public Attributes; collision::geometry::Cube cube;  ; EndPointID * _min [3];  ; EndPointID * _max [3];  . Static Public Attributes; static double tolerance = (double)(1e-7);  . Public Member Functions;  ISAPBox ();  ;  ISAPBox (collision::geometry::Cube c);  ; bool endPointsOverlap (const ISAPBox &other, int axis) const;  ; bool overlaps (const ISAPBox &other, double alarmDist) const;  ; double squaredDistance (const ISAPBox &other) const;  ; void show () const;  ; void showEndPoints () const;  ; bool moving (int axis, double alarmDist) const;  ; bool moving (double alarmDist) const;  ; void init (int boxID, EndPointID **endPts);  ; void update (double alarmDist);  ; void updatedMin (int dim, EndPointID &end_point, double alarmDist) const;  ; void updatedMax (int dim, EndPointID &end_point, double alarmDist) const;  ; void updateMin (int dim, double alarmDist);  ; void updateMax (int dim, double alarmDist);  ; bool minMoving (int axis, double alarmDist) const;  ; bool maxMoving (int axis, double alarmDist) const;  ; const core::CollisionElementIterator finalElement () const;  ; EndPointID & min (int dim);  ; const EndPointID & min (int dim) const;  ; EndPointID",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_i_s_a_p_box.html:724,update,updated,724,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_i_s_a_p_box.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_i_s_a_p_box.html,1,['update'],['updated']
Deployability,"﻿. SOFA API: sofa::component::collision::detection::algorithm::IncrSAP Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Protected Member Functions |; List of all members . sofa::component::collision::detection::algorithm::IncrSAP Class Reference . #include <IncrSAP.h>. Inheritance diagram for sofa::component::collision::detection::algorithm::IncrSAP:. [legend]; Detailed Description; Implementation of incremental sweep and prune. i.e. collision primitives are stored and updated which should speed up the collision detection compared to the DirectSAP. . Public Member Functions;  SOFA_CLASS2 (IncrSAP, core::collision::BroadPhaseDetection, core::collision::NarrowPhaseDetection);  ; void setDraw (bool);  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; void reinit () override;  Update method called when variables used in precomputation are modified. More...;  ; void addCollisionModel (core::CollisionModel *cm) override;  Add a new collision model to the set of root collision models managed by this class. More...;  ; void addCollisionPair (const std::pair< core::CollisionModel *, core::CollisionModel * > &) override;  Add a new potentially colliding pairs of models. More...;  ; void addCollisionPairs (const type::vector< std::pair< core::CollisionModel *, core::CollisionModel * > > &) override;  Add a new list of potentially colliding pairs of models. More...;  ; void beginNarrowPhase () override;  Clear all the potentially colliding pairs detected in the previous simulation step. More...;  ; bool needsDeepBoundingTree () const override;  Returns true if the detection algorithm requires a deep bounding tree i.e. a depth that can be superior to 1. More...;  ; void showEndPoints () const;  ; void showBoxes () const;  ;  Public Member Functions inherited from sofa::core::collision::BroadPhaseDetection;  SOFA_ABSTRACT_CLASS (Broad",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_incr_s_a_p.html:543,update,updated,543,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_incr_s_a_p.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_incr_s_a_p.html,1,['update'],['updated']
Deployability,"﻿. SOFA API: sofa::component::constraint::lagrangian::correction::GenericConstraintCorrection Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Protected Attributes |; Public Member Functions |; Protected Member Functions |; List of all members . sofa::component::constraint::lagrangian::correction::GenericConstraintCorrection Class Reference . #include <GenericConstraintCorrection.h>. Inheritance diagram for sofa::component::constraint::lagrangian::correction::GenericConstraintCorrection:. [legend]. Public Attributes; SingleLink< GenericConstraintCorrection, sofa::core::behavior::LinearSolver, BaseLink::FLAG_STOREPATH|BaseLink::FLAG_STRONGLINK > l_linearSolver;  Link towards the linear solver used to compute the compliance matrix, requiring the inverse of the linear system matrix. More...;  ; SingleLink< GenericConstraintCorrection, sofa::core::behavior::OdeSolver, BaseLink::FLAG_STOREPATH|BaseLink::FLAG_STRONGLINK > l_ODESolver;  Link towards the ODE solver used to recover the integration factors. More...;  ; Data< SReal > d_complianceFactor;  Factor applied to the position factor and velocity factor used to calculate compliance matrix. More...;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefine",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1correction_1_1_generic_constraint_correction.html:1055,integrat,integration,1055,api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1correction_1_1_generic_constraint_correction.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1correction_1_1_generic_constraint_correction.html,1,['integrat'],['integration']
Deployability,"﻿. SOFA API: sofa::component::controller::Controller Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; Protected Member Functions |; List of all members . sofa::component::controller::Controller Class Reference . #include <Controller.h>; Controller Class. Interface of user interaction on SOFA Components. Provides also an interface for BeginAnimation and EndAnimation events launched at the beginning and the end of a time step. ; More... Inheritance diagram for sofa::component::controller::Controller:. [legend]; Detailed Description; Controller Class. Interface of user interaction on SOFA Components. Provides also an interface for BeginAnimation and EndAnimation events launched at the beginning and the end of a time step. . Protected Attributes; sofa::core::objectmodel::RenamedData< bool > handleEventTriggersUpdate;  ; Data< bool > d_handleEventTriggersUpdate;  Event handling frequency controls the controller update frequency. More...;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObject; SingleLink< BaseObject, BaseContext, BaseLink::FLAG_DOUBLELINK > l_context;  ; LinkSlaves l_slaves;  ; SingleLink< BaseObject, BaseObject, BaseLink::FLAG_DOUBLELINK > l_master;  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  . Public Member Functions;  SOFA_CLASS (Controller, core::behavior::BaseController);  ; virtual void onMouseEvent (core::objectmodel::MouseEvent *);  Mouse event callback. More...;  ; virtual void onHapticDeviceEvent (core::objectmodel::HapticDeviceEvent *);  HapticDevice even",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1controller_1_1_controller.html:1013,update,update,1013,api/master/sofa/html/classsofa_1_1component_1_1controller_1_1_controller.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1controller_1_1_controller.html,1,['update'],['update']
Deployability,"﻿. SOFA API: sofa::component::engine::generate::ExtrudeEdgesAndGenerateQuads< DataTypes > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; Protected Member Functions |; List of all members . sofa::component::engine::generate::ExtrudeEdgesAndGenerateQuads< DataTypes > Class Template Reference . #include <ExtrudeEdgesAndGenerateQuads.h>. Inheritance diagram for sofa::component::engine::generate::ExtrudeEdgesAndGenerateQuads< DataTypes >:. [legend]; Detailed Description; template<class DataTypes>; class sofa::component::engine::generate::ExtrudeEdgesAndGenerateQuads< DataTypes >; This engine extrudes an edge-based curve into a quad surface patch . Public Attributes; bool initialized;  ; Data< Coord > d_direction;  Direction along which to extrude the curve. More...;  ; Data< Real > d_thickness;  ; Data< Real > d_thicknessIn;  Thickness of the extruded volume in the opposite direction of the normals. More...;  ; Data< Real > d_thicknessOut;  Thickness of the extruded volume in the direction of the normals. More...;  ; Data< int > d_nbSections;  Number of sections / steps in the extrusion. More...;  ; Data< VecCoord > d_curveVertices;  Position coordinates along the initial curve. More...;  ; Data< type::vector< sofa::core::topology::BaseMeshTopology::Edge > > d_curveEdges;  Indices of the edges of the curve to extrude. More...;  ; Data< VecCoord > d_extrudedVertices;  Coordinates of the extruded vertices. More...;  ; Data< type::vector< sofa::core::topology::BaseMeshTopology::Edge > > d_extrudedEdges;  List of all edges generated during the extrusion. More...;  ; Data< type::vector< sofa::core::topology::BaseMeshTopology::Quad > > d_extrudedQuads;  List of all quads generated during the extrusion. More...;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_extrude_edges_and_generate_quads.html:744,patch,patch,744,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_extrude_edges_and_generate_quads.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_extrude_edges_and_generate_quads.html,1,['patch'],['patch']
Deployability,"﻿. SOFA API: sofa::component::mapping::linear::BeamLinearMapping< TIn, TOut > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Protected Attributes |; Public Member Functions |; Protected Member Functions |; List of all members . sofa::component::mapping::linear::BeamLinearMapping< TIn, TOut > Class Template Reference . #include <BeamLinearMapping.h>. Inheritance diagram for sofa::component::mapping::linear::BeamLinearMapping< TIn, TOut >:. [legend]. Public Attributes; Data< bool > localCoord;  true if initial coordinates are in the beam local coordinate system (i.e. a point at (10,0,0) is on the DOF number 10, whereas if this is false it is at whatever position on the beam where the distance from the initial DOF is 10) More...;  . Protected Attributes; type::vector< Coord > points;  ; sofa::type::vector< Real > beamLength;  ; sofa::type::vector< Coord > rotatedPoints0;  ; sofa::type::vector< Coord > rotatedPoints1;  ; std::unique_ptr< MatrixType > matrixJ;  ; bool updateJ;  . Public Member Functions;  SOFA_CLASS (SOFA_TEMPLATE2(BeamLinearMapping, TIn, TOut), SOFA_TEMPLATE2(LinearMapping, TIn, TOut));  ; void init () override;  ; void apply (const core::MechanicalParams *mparams, Data< typename Out::VecCoord > &out, const Data< typename In::VecCoord > &in) override;  ; void applyJ (const core::MechanicalParams *mparams, Data< typename Out::VecDeriv > &out, const Data< typename In::VecDeriv > &in) override;  ; void applyJT (const core::MechanicalParams *mparams, Data< typename In::VecDeriv > &out, const Data< typename Out::VecDeriv > &in) override;  ; void applyJT (const core::ConstraintParams *cparams, Data< typename In::MatrixDeriv > &out, const Data< typename Out::MatrixDeriv > &in) override;  ; const sofa::linearalgebra::BaseMatrix * getJ () override;  ; void draw (const core::visual::VisualParams *vparams) override;  ;  Public Member Functions inherited from sofa::component::mapping::linear::",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1linear_1_1_beam_linear_mapping.html:1052,update,updateJ,1052,api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1linear_1_1_beam_linear_mapping.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1linear_1_1_beam_linear_mapping.html,1,['update'],['updateJ']
Deployability,"﻿. SOFA API: sofa::component::mapping::nonlinear::BaseDistanceFromTargetMapping Struct Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::component::mapping::nonlinear::BaseDistanceFromTargetMapping Struct Referenceabstract . #include <DistanceFromTargetMapping.h>. Inheritance diagram for sofa::component::mapping::nonlinear::BaseDistanceFromTargetMapping:. [legend]. Public Member Functions; virtual void updateTarget (unsigned index, SReal x, SReal y, SReal z)=0;  . Function details. ◆ updateTarget(). virtual void sofa::component::mapping::nonlinear::BaseDistanceFromTargetMapping::updateTarget ; (; unsigned ; index, . SReal ; x, . SReal ; y, . SReal ; z . ). pure virtual . Implemented in sofa::component::mapping::nonlinear::DistanceFromTargetMapping< TIn, TOut >. sofacomponentmappingnonlinearBaseDistanceFromTargetMapping; Generated on Mon Nov 11 2024 02:51:17 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1mapping_1_1nonlinear_1_1_base_distance_from_target_mapping.html:496,update,updateTarget,496,api/master/sofa/html/structsofa_1_1component_1_1mapping_1_1nonlinear_1_1_base_distance_from_target_mapping.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1mapping_1_1nonlinear_1_1_base_distance_from_target_mapping.html,3,['update'],['updateTarget']
Deployability,"﻿. SOFA API: sofa::component::odesolver::backward::EulerImplicitSolver Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Protected Attributes |; Public Member Functions |; Protected Member Functions |; List of all members . sofa::component::odesolver::backward::EulerImplicitSolver Class Reference . #include <EulerImplicitSolver.h>. Inheritance diagram for sofa::component::odesolver::backward::EulerImplicitSolver:. [legend]; Detailed Description; Semi-implicit time integrator using backward Euler scheme for first and second degree ODEs. (default: second); 2nd Order ***; This is based on [Baraff and Witkin, Large Steps in Cloth Simulation, SIGGRAPH 1998] The integration scheme is based on the following equations:; ; The unknown is ; Newton's law is ; is the mass matrix. is the stiffness implemented (or not) by the force fields. is the damping implemented (or not) by the force fields. An additional, uniform Rayleigh damping is imposed by the solver.; This corresponds to the following equation system:. Moreover, the projective constraints filter out the forbidden motions. This is equivalent with multiplying vectors with a projection matrix . Finally, the equation system set by this ode solver is:. 1st Order ***; This integration scheme is based on the following equation:. Applied to this mechanical system:. . Trapezoidal Rule ***; The trapezoidal scheme is based on. With this and the same techniques as for the implicit Euler scheme we receive for *** 2nd Order *** equations. and for *** 1st Order ***; . Public Attributes; sofa::core::objectmodel::RenamedData< SReal > f_rayleighStiffness;  ; sofa::core::objectmodel::RenamedData< SReal > f_rayleighMass;  ; sofa::core::objectmodel::RenamedData< SReal > f_velocityDamping;  ; sofa::core::objectmodel::RenamedData< bool > f_firstOrder;  ; sofa::core::objectmodel::RenamedData< bool > f_solveConstraint;  ; Data< SReal > d_rayleighStiffness;  Rayleigh damping coefficien",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1backward_1_1_euler_implicit_solver.html:531,integrat,integrator,531,api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1backward_1_1_euler_implicit_solver.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1backward_1_1_euler_implicit_solver.html,2,['integrat'],"['integration', 'integrator']"
Deployability,"﻿. SOFA API: sofa::component::odesolver::backward::NewmarkImplicitSolver Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Protected Attributes |; Public Member Functions |; Protected Member Functions |; List of all members . sofa::component::odesolver::backward::NewmarkImplicitSolver Class Reference . #include <NewmarkImplicitSolver.h>. Inheritance diagram for sofa::component::odesolver::backward::NewmarkImplicitSolver:. [legend]; Detailed Description; Implicit time integrator using Newmark scheme.; This integration scheme is based on the following equations:; $x_{t+h} = x_t + h v_t + h^2/2 ( (1-2\beta) a_t + 2\beta a_{t+h} )$ $v_{t+h} = v_t + h ( (1-\gamma) a_t + \gamma a_{t+h} )$; Applied to a mechanical system where $ M a_t + (r_M M + r_K K) v_t + K x_t = f_ext$, we need to solve the following system:; $ M a_{t+h} + (r_M M + r_K K) v_{t+h} + K x_{t+h} = f_ext $ $ M a_{t+h} + (r_M M + r_K K) ( v_t + h ( (1-\gamma) a_t + \gamma a_{t+h} ) ) + K ( x_t + h v_t + h^2/2 ( (1-2\beta) a_t + 2\beta a_{t+h} ) ) = f_ext $ $ ( M + h \gamma (r_M M + r_K K) + h^2 \beta K ) a_{t+h} = f_ext - (r_M M + r_K K) ( v_t + h (1-\gamma) a_t ) - K ( x_t + h v_t + h^2/2 (1-2\beta) a_t ) $ $ ( (1 + h \gamma r_M) M + (h^2 \beta + h \gamma r_K) K ) a_{t+h} = f_ext - (r_M M + r_K K) v_t - K x_t - (r_M M + r_K K) ( h (1-\gamma) a_t ) - K ( h v_t + h^2/2 (1-2\beta) a_t ) $ $ ( (1 + h \gamma r_M) M + (h^2 \beta + h \gamma r_K) K ) a_{t+h} = a_t - (r_M M + r_K K) ( h (1-\gamma) a_t ) - K ( h v_t + h^2/2 (1-2\beta) a_t ) $; The current implementation first computes $a_t$ directly (as in the explicit solvers), then solves the previous system to compute $a_{t+dt}$, and finally computes the new position and velocity. . Public Attributes; Data< SReal > d_rayleighStiffness;  Rayleigh damping coefficient related to stiffness. More...;  ; Data< SReal > d_rayleighMass;  Rayleigh damping coefficient related to mass. More...;  ; Data< SReal > d_ve",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1backward_1_1_newmark_implicit_solver.html:534,integrat,integrator,534,api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1backward_1_1_newmark_implicit_solver.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1backward_1_1_newmark_implicit_solver.html,1,['integrat'],['integrator']
Deployability,"﻿. SOFA API: sofa::component::odesolver::backward::VariationalSymplecticSolver Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Protected Attributes |; Public Member Functions |; List of all members . sofa::component::odesolver::backward::VariationalSymplecticSolver Class Reference . #include <VariationalSymplecticSolver.h>. Inheritance diagram for sofa::component::odesolver::backward::VariationalSymplecticSolver:. [legend]; Detailed Description; Implicit and Explicit time integrator using the Variational Symplectic Integrator as defined in : Kharevych, L et al. “Geometric, Variational Integrators for Computer Animation.” ACM SIGGRAPH Symposium on Computer Animation 4 (2006): 43–51.; The current implementation for implicit integration assume alpha =0.5 (quadratic accuracy) and uses several Newton steps to estimate the velocity . Public Attributes; sofa::core::objectmodel::RenamedData< SReal > f_newtonError;  ; sofa::core::objectmodel::RenamedData< unsigned int > f_newtonSteps;  ; sofa::core::objectmodel::RenamedData< SReal > f_rayleighStiffness;  ; sofa::core::objectmodel::RenamedData< SReal > f_rayleighMass;  ; sofa::core::objectmodel::RenamedData< bool > f_saveEnergyInFile;  ; sofa::core::objectmodel::RenamedData< bool > f_explicit;  ; sofa::core::objectmodel::RenamedData< std::string > f_fileName;  ; sofa::core::objectmodel::RenamedData< bool > f_computeHamiltonian;  ; sofa::core::objectmodel::RenamedData< SReal > f_hamiltonianEnergy;  ; sofa::core::objectmodel::RenamedData< bool > f_useIncrementalPotentialEnergy;  ; Data< SReal > d_newtonError;  Error tolerance for Newton iterations. More...;  ; Data< unsigned int > d_newtonSteps;  Maximum number of Newton steps. More...;  ; Data< SReal > d_rayleighStiffness;  Rayleigh damping coefficient related to stiffness, > 0. More...;  ; Data< SReal > d_rayleighMass;  Rayleigh damping coefficient related to mass, > 0. More...;  ; Data< bool > d_saveEnergyInFile;",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1backward_1_1_variational_symplectic_solver.html:541,integrat,integrator,541,api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1backward_1_1_variational_symplectic_solver.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1backward_1_1_variational_symplectic_solver.html,2,['integrat'],"['integration', 'integrator']"
Deployability,"﻿. SOFA API: sofa::component::odesolver::forward::CentralDifferenceSolver Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; Protected Member Functions |; List of all members . sofa::component::odesolver::forward::CentralDifferenceSolver Class Reference . #include <CentralDifferenceSolver.h>. Inheritance diagram for sofa::component::odesolver::forward::CentralDifferenceSolver:. [legend]; Detailed Description; Explicit time integrator using central difference (also known as Verlet of Leap-frop).; See alsohttp://www.dynasupport.com/support/tutorial/users.guide/time.integration . http://en.wikipedia.org/wiki/Leapfrog_method . Public Attributes; sofa::core::objectmodel::RenamedData< SReal > f_rayleighMass;  ; Data< SReal > d_rayleighMass;  Rayleigh damping coefficient related to mass. More...;  ; Data< bool > d_threadSafeVisitor;  If true, do not use realloc and free visitors in fwdInteractionForceField. More...;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  . Pu",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1forward_1_1_central_difference_solver.html:515,integrat,integrator,515,api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1forward_1_1_central_difference_solver.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1forward_1_1_central_difference_solver.html,2,['integrat'],"['integration', 'integrator']"
Deployability,"﻿. SOFA API: sofa::component::odesolver::forward::EulerExplicitSolver Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; List of all members . sofa::component::odesolver::forward::EulerExplicitSolver Class Reference . #include <EulerExplicitSolver.h>. Inheritance diagram for sofa::component::odesolver::forward::EulerExplicitSolver:. [legend]; Detailed Description; The simplest time integration. Two variants of the Euler solver are available in this component:; forward Euler method, also called explicit Euler method; semi-implicit Euler method, also called semi-explicit Euler method or symplectic Euler. In both variants, acceleration is first computed. The system to compute the acceleration is M * a = f, where M is the mass matrix and f can be a force. In case of a diagonal mass matrix, M is trivially invertible and the acceleration can be computed without a linear solver.; f is accumulated by force fields through the addForce function. Mappings can also contribute by projecting forces of mapped objects. f is computed based on the current state (current velocity and position).; Explicit Euler method: The option ""symplectic"" must be set to false to use this variant. The explicit Euler method produces an approximate discrete solution by iterating x_{n+1} = x_n + v_n * dt v_{n+1} = v_n + a * dt; Semi-implicit Euler method: The option ""symplectic"" must be set to true to use this variant. The semi-implicit Euler method produces an approximate discrete solution by iterating v_{n+1} = v_n + a * dt x_{n+1} = x_n + v_{n+1} * dt; The semi-implicit Euler method is more robust than the standard Euler method. . Public Attributes; Data< bool > d_symplectic;  If true (default), the velocities are updated before the positions and the method is symplectic, more robust. If false, the positions are updated before the velocities (stand",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1forward_1_1_euler_explicit_solver.html:540,integrat,integration,540,api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1forward_1_1_euler_explicit_solver.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1forward_1_1_euler_explicit_solver.html,1,['integrat'],['integration']
Deployability,"﻿. SOFA API: sofa::component::odesolver::forward::RungeKutta2Solver Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::component::odesolver::forward::RungeKutta2Solver Class Reference . #include <RungeKutta2Solver.h>. Inheritance diagram for sofa::component::odesolver::forward::RungeKutta2Solver:. [legend]; Detailed Description; A popular time integration method, much more precise than the EulerSolver . Public Member Functions;  SOFA_CLASS (RungeKutta2Solver, sofa::core::behavior::OdeSolver);  ; void solve (const core::ExecParams *params, SReal dt, sofa::core::MultiVecCoordId xResult, sofa::core::MultiVecDerivId vResult) override;  ; SReal getIntegrationFactor (int inputDerivative, int outputDerivative) const override;  ; SReal getSolutionIntegrationFactor (int outputDerivative) const override;  ;  Public Member Functions inherited from sofa::core::behavior::OdeSolver;  SOFA_ABSTRACT_CLASS (OdeSolver, objectmodel::BaseObject);  ; virtual void solve (const core::ExecParams *params, SReal dt);  ; virtual void computeResidual (const core::ExecParams *, SReal, sofa::core::MultiVecCoordId, sofa::core::MultiVecDerivId);  ; virtual SReal getVelocityIntegrationFactor () const;  ; virtual SReal getPositionIntegrationFactor () const;  ; bool insertInNode (objectmodel::BaseNode *node) override;  ; bool removeInNode (objectmodel::BaseNode *node) override;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObject;  SOFA_CLASS (BaseObject, Base);  ; virtual void draw (const core::visual::VisualParams *);  Render internal data of this object, for debugging purposes. More...;  ; virtual void computeBBox (const core::ExecParams *, bool=false);  ; void setSrc (const std::string &v, std::vector< std::string > *attributeList=nullptr);  Sets a source Object and parses it to collect dependent Data. More...;  ; void setSrc (const std::string &v, const BaseObject *loader, std:",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1forward_1_1_runge_kutta2_solver.html:441,integrat,integration,441,api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1forward_1_1_runge_kutta2_solver.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1forward_1_1_runge_kutta2_solver.html,1,['integrat'],['integration']
Deployability,"﻿. SOFA API: sofa::component::odesolver::forward::RungeKutta4Solver Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::component::odesolver::forward::RungeKutta4Solver Class Reference . #include <RungeKutta4Solver.h>. Inheritance diagram for sofa::component::odesolver::forward::RungeKutta4Solver:. [legend]; Detailed Description; A popular time integration method, much more precise than the EulerSolver . Public Member Functions;  SOFA_CLASS (RungeKutta4Solver, sofa::core::behavior::OdeSolver);  ; void solve (const core::ExecParams *params, SReal dt, sofa::core::MultiVecCoordId xResult, sofa::core::MultiVecDerivId vResult) override;  ; SReal getIntegrationFactor (int inputDerivative, int outputDerivative) const override;  ; SReal getSolutionIntegrationFactor (int outputDerivative) const override;  ;  Public Member Functions inherited from sofa::core::behavior::OdeSolver;  SOFA_ABSTRACT_CLASS (OdeSolver, objectmodel::BaseObject);  ; virtual void solve (const core::ExecParams *params, SReal dt);  ; virtual void computeResidual (const core::ExecParams *, SReal, sofa::core::MultiVecCoordId, sofa::core::MultiVecDerivId);  ; virtual SReal getVelocityIntegrationFactor () const;  ; virtual SReal getPositionIntegrationFactor () const;  ; bool insertInNode (objectmodel::BaseNode *node) override;  ; bool removeInNode (objectmodel::BaseNode *node) override;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObject;  SOFA_CLASS (BaseObject, Base);  ; virtual void draw (const core::visual::VisualParams *);  Render internal data of this object, for debugging purposes. More...;  ; virtual void computeBBox (const core::ExecParams *, bool=false);  ; void setSrc (const std::string &v, std::vector< std::string > *attributeList=nullptr);  Sets a source Object and parses it to collect dependent Data. More...;  ; void setSrc (const std::string &v, const BaseObject *loader, std:",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1forward_1_1_runge_kutta4_solver.html:441,integrat,integration,441,api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1forward_1_1_runge_kutta4_solver.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1forward_1_1_runge_kutta4_solver.html,1,['integrat'],['integration']
Deployability,﻿. SOFA API: sofa::component::setting Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Functions . sofa::component::setting Namespace Reference . Classes; class  BackgroundSetting;  Class for the configuration of background settings. More...;  ; class  MouseButtonSetting;  ; class  SofaDefaultPathSetting;  Class for the configuration of default path for sofa application. More...;  ; class  StatsSetting;  Class for the configuration of stats settings. More...;  ; class  ViewerSetting;  Class for the configuration of viewer settings. More...;  . Functions; void registerBackgroundSetting (sofa::core::ObjectFactory *factory);  ; void registerSofaDefaultPathSetting (sofa::core::ObjectFactory *factory);  ; void registerStatsSetting (sofa::core::ObjectFactory *factory);  ; void registerViewerSetting (sofa::core::ObjectFactory *factory);  ; SOFA_EXPORT_DYNAMIC_LIBRARY void initExternalModule ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleName ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY const char * getModuleVersion ();  ; SOFA_EXPORT_DYNAMIC_LIBRARY void registerObjects (sofa::core::ObjectFactory *factory);  ; void init ();  . Function Documentation. ◆ getModuleName(). const char * sofa::component::setting::getModuleName ; (; ). ◆ getModuleVersion(). const char * sofa::component::setting::getModuleVersion ; (; ). ◆ init(). SOFA_COMPONENT_SETTING_API void sofa::component::setting::init ; (; ). ◆ initExternalModule(). void sofa::component::setting::initExternalModule ; (; ). ◆ registerBackgroundSetting(). void sofa::component::setting::registerBackgroundSetting ; (; sofa::core::ObjectFactory * ; factory). ◆ registerObjects(). void sofa::component::setting::registerObjects ; (; sofa::core::ObjectFactory * ; factory). ◆ registerSofaDefaultPathSetting(). void sofa::component::setting::registerSofaDefaultPathSetting ; (; sofa::core::ObjectFactory * ; factory). ◆ registerStatsSetting(). void sofa::component::setting::registe,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1setting.html:253,configurat,configuration,253,api/master/sofa/html/namespacesofa_1_1component_1_1setting.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1setting.html,4,['configurat'],['configuration']
Deployability,"﻿. SOFA API: sofa::component::setting::BackgroundSetting Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; Protected Member Functions |; List of all members . sofa::component::setting::BackgroundSetting Class Reference . #include <BackgroundSetting.h>; Class for the configuration of background settings. ; More... Inheritance diagram for sofa::component::setting::BackgroundSetting:. [legend]; Detailed Description; Class for the configuration of background settings. . Public Attributes; sofa::core::objectmodel::RenamedData< sofa::type::RGBAColor > color;  ; sofa::core::objectmodel::DataFileName image;  Image to be used as background of the viewer. More...;  ; Data< sofa::type::RGBAColor > d_color;  Color of the background. More...;  ; sofa::core::objectmodel::DataFileName d_image;  Image to be used as background of the viewer. More...;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  . Public Member Functions;  SOFA_CLASS (BackgroundSetting, core::objectmodel::Co",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1setting_1_1_background_setting.html:356,configurat,configuration,356,api/master/sofa/html/classsofa_1_1component_1_1setting_1_1_background_setting.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1setting_1_1_background_setting.html,2,['configurat'],['configuration']
Deployability,"﻿. SOFA API: sofa::component::setting::SofaDefaultPathSetting Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; Protected Member Functions |; List of all members . sofa::component::setting::SofaDefaultPathSetting Class Reference . #include <SofaDefaultPathSetting.h>; Class for the configuration of default path for sofa application. ; More... Inheritance diagram for sofa::component::setting::SofaDefaultPathSetting:. [legend]; Detailed Description; Class for the configuration of default path for sofa application. . Public Attributes; sofa::core::objectmodel::RenamedData< std::string > gnuplotPath;  ; sofa::core::objectmodel::Data< std::string > d_gnuplotPath;  Path where will be saved the gnuplot files. More...;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  . Public Member Functions;  SOFA_CLASS (SofaDefaultPathSetting, core::objectmodel::ConfigurationSetting);  Sofa macro to define typedef. More...;  ;  Public Member Functions inherited from sofa::core::objec",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1setting_1_1_sofa_default_path_setting.html:371,configurat,configuration,371,api/master/sofa/html/classsofa_1_1component_1_1setting_1_1_sofa_default_path_setting.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1setting_1_1_sofa_default_path_setting.html,2,['configurat'],['configuration']
Deployability,"﻿. SOFA API: sofa::component::setting::StatsSetting Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; Protected Member Functions |; List of all members . sofa::component::setting::StatsSetting Class Reference . #include <StatsSetting.h>; Class for the configuration of stats settings. ; More... Inheritance diagram for sofa::component::setting::StatsSetting:. [legend]; Detailed Description; Class for the configuration of stats settings. . Public Attributes; sofa::core::objectmodel::RenamedData< bool > dumpState;  ; sofa::core::objectmodel::RenamedData< bool > logTime;  ; sofa::core::objectmodel::RenamedData< bool > exportState;  ; Data< bool > d_dumpState;  Dump state vectors at each time step of the simulation. More...;  ; Data< bool > d_logTime;  Output in the console an average of the time spent during different stages of the simulation. More...;  ; Data< bool > d_exportState;  Create GNUPLOT files with the positions, velocities and forces of all the simulated objects of the scene. More...;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::strin",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1setting_1_1_stats_setting.html:341,configurat,configuration,341,api/master/sofa/html/classsofa_1_1component_1_1setting_1_1_stats_setting.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1setting_1_1_stats_setting.html,2,['configurat'],['configuration']
Deployability,"﻿. SOFA API: sofa::component::setting::ViewerSetting Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; Protected Member Functions |; List of all members . sofa::component::setting::ViewerSetting Class Reference . #include <ViewerSetting.h>; Class for the configuration of viewer settings. ; More... Inheritance diagram for sofa::component::setting::ViewerSetting:. [legend]; Detailed Description; Class for the configuration of viewer settings. . Public Attributes; sofa::core::objectmodel::RenamedData< sofa::type::Vec< 2, int > > resolution;  ; sofa::core::objectmodel::RenamedData< bool > fullscreen;  ; sofa::core::objectmodel::RenamedData< sofa::helper::OptionsGroup > cameraMode;  ; sofa::core::objectmodel::RenamedData< sofa::helper::OptionsGroup > objectPickingMethod;  ; Data< sofa::type::Vec< 2, int > > d_resolution;  resolution of the Viewer More...;  ; Data< bool > d_fullscreen;  Fullscreen mode. More...;  ; Data< sofa::helper::OptionsGroup > d_cameraMode;  Camera mode. More...;  ; Data< sofa::helper::OptionsGroup > d_objectPickingMethod;  The method used to pick objects. More...;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1setting_1_1_viewer_setting.html:344,configurat,configuration,344,api/master/sofa/html/classsofa_1_1component_1_1setting_1_1_viewer_setting.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1setting_1_1_viewer_setting.html,2,['configurat'],['configuration']
Deployability,"﻿. SOFA API: sofa::component::solidmechanics::fem::elastic::FastTetrahedralCorotationalForceField< DataTypes >::TetrahedronRestInformation Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Friends |; List of all members . sofa::component::solidmechanics::fem::elastic::FastTetrahedralCorotationalForceField< DataTypes >::TetrahedronRestInformation Class Reference . #include <FastTetrahedralCorotationalForceField.h>; data structure stored for each tetrahedron ; More...; Detailed Description; template<class DataTypes>; class sofa::component::solidmechanics::fem::elastic::FastTetrahedralCorotationalForceField< DataTypes >::TetrahedronRestInformation; data structure stored for each tetrahedron . Public Attributes; Coord shapeVector [4];  shape vector at the rest configuration More...;  ; Real restVolume;  rest volume More...;  ; Coord restEdgeVector [6];  ; Mat3x3 linearDfDxDiag [4];  ; Mat3x3 linearDfDx [6];  ; Mat3x3 rotation;  ; Mat3x3 restRotation;  ; Real edgeOrientation [6];  . Friends; std::ostream & operator<< (std::ostream &os, const TetrahedronRestInformation &);  Output stream. More...;  ; std::istream & operator>> (std::istream &in, TetrahedronRestInformation &);  Input stream. More...;  . Attribute details. ◆ edgeOrientation. template<class DataTypes > . Real sofa::component::solidmechanics::fem::elastic::FastTetrahedralCorotationalForceField< DataTypes >::TetrahedronRestInformation::edgeOrientation[6]. ◆ linearDfDx. template<class DataTypes > . Mat3x3 sofa::component::solidmechanics::fem::elastic::FastTetrahedralCorotationalForceField< DataTypes >::TetrahedronRestInformation::linearDfDx[6]. ◆ linearDfDxDiag. template<class DataTypes > . Mat3x3 sofa::component::solidmechanics::fem::elastic::FastTetrahedralCorotationalForceField< DataTypes >::TetrahedronRestInformation::linearDfDxDiag[4]. ◆ restEdgeVector. template<class DataTypes > . Coord sofa::component::solidmechanics::fem::elastic::FastTetrahedr",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_fast_tetrahedral_corotational_for61007de5689b896ba934034e84420a35.html:829,configurat,configuration,829,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_fast_tetrahedral_corotational_for61007de5689b896ba934034e84420a35.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_fast_tetrahedral_corotational_for61007de5689b896ba934034e84420a35.html,1,['configurat'],['configuration']
Deployability,"﻿. SOFA API: sofa::component::solidmechanics::tensormass::TetrahedralTensorMassForceField< DataTypes > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Protected Attributes |; Public Member Functions |; Protected Member Functions |; List of all members . sofa::component::solidmechanics::tensormass::TetrahedralTensorMassForceField< DataTypes > Class Template Reference . #include <TetrahedralTensorMassForceField.h>. Inheritance diagram for sofa::component::solidmechanics::tensormass::TetrahedralTensorMassForceField< DataTypes >:. [legend]. Classes; class  EdgeRestInformation;  . Protected Attributes; VecCoord _initialPoints;  the initial positions of the points More...;  ; bool updateMatrix;  ; sofa::core::objectmodel::RenamedData< Real > f_poissonRatio;  ; sofa::core::objectmodel::RenamedData< Real > f_youngModulus;  ; Data< Real > d_poissonRatio;  Poisson ratio in Hooke's law. More...;  ; Data< Real > d_youngModulus;  Young's modulus in Hooke's law. More...;  ; Real lambda;  ; Real mu;  first Lame coefficient More...;  ; SingleLink< TetrahedralTensorMassForceField< DataTypes >, sofa::core::topology::BaseMeshTopology, BaseLink::FLAG_STOREPATH|BaseLink::FLAG_STRONGLINK > l_topology;  second Lame coefficient More...;  ; sofa::core::objectmodel::RenamedData< edgeRestInfoVector > edgeInfo;  ; core::topology::EdgeData< edgeRestInfoVector > d_edgeInfo;  Internal edge data. More...;  ; sofa::core::topology::BaseMeshTopology * m_topology;  ;  Protected Attributes inherited from sofa::core::behavior::StateAccessor; MultiLink< StateAccessor, BaseMechanicalState, BaseLink::FLAG_DUPLICATE > l_mechanicalStates;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObject; SingleLink< BaseObject, BaseContext, BaseLink::FLAG_DOUBLELINK > l_context;  ; LinkSlaves l_slaves;  ; SingleLink< BaseObject, BaseObject, BaseLink::FLAG_DOUBLELINK > l_master;  ;  Protected Attributes inherited from sofa::core::objectmo",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1tensormass_1_1_tetrahedral_tensor_mass_force_field.html:747,update,updateMatrix,747,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1tensormass_1_1_tetrahedral_tensor_mass_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1tensormass_1_1_tetrahedral_tensor_mass_force_field.html,1,['update'],['updateMatrix']
Deployability,"﻿. SOFA API: sofa::core::BehaviorModel Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Protected Member Functions |; List of all members . sofa::core::BehaviorModel Class Referenceabstract . #include <BehaviorModel.h>; Abstract Interface of components defining the behavior of a simulated object. ; More... Inheritance diagram for sofa::core::BehaviorModel:. [legend]; Detailed Description; Abstract Interface of components defining the behavior of a simulated object. ; This Interface is used by ""black-box"" objects (such as some fluid algorithms) that are present in a SOFA simulation but which do not use the internal behavior components (MechanicalState, ForceField, etc) defined in the sofa::core::behavior namespace.; A BehaviorModel simply has to implement the updatePosition method to compute a new simulation step. . Public Member Functions;  SOFA_ABSTRACT_CLASS (BehaviorModel, objectmodel::BaseObject);  ; virtual void updatePosition (SReal dt)=0;  Computation of a new simulation step. More...;  ; virtual bool addBBox (SReal *, SReal *);  ; bool insertInNode (objectmodel::BaseNode *node) override;  ; bool removeInNode (objectmodel::BaseNode *node) override;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObject;  SOFA_CLASS (BaseObject, Base);  ; virtual void draw (const core::visual::VisualParams *);  Render internal data of this object, for debugging purposes. More...;  ; virtual void computeBBox (const core::ExecParams *, bool=false);  ; void setSrc (const std::string &v, std::vector< std::string > *attributeList=nullptr);  Sets a source Object and parses it to collect dependent Data. More...;  ; void setSrc (const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr);  ; Base * findLinkDestClass (const BaseClass *destType, const std::string &path, const BaseLink *link) override;  ; virtual std::string getPathName () const override;  Re",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_behavior_model.html:838,update,updatePosition,838,api/master/sofa/html/classsofa_1_1core_1_1_behavior_model.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_behavior_model.html,2,['update'],['updatePosition']
Deployability,"﻿. SOFA API: sofa::core::DataEngine Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Protected Member Functions |; List of all members . sofa::core::DataEngine Class Referenceabstract . #include <DataEngine.h>; from a set of Data inputs computes a set of Data outputs ; More... Inheritance diagram for sofa::core::DataEngine:. [legend]; Detailed Description; from a set of Data inputs computes a set of Data outputs ; Implementation good rules:; void init() { addInput // indicate all inputs addOutput // indicate all outputs }; // optional (called each time a data is modified in the gui) // it is not always desired void reinit() { update(); }; void doUpdate() override { access your inputs, set your outputs... } . Public Member Functions;  SOFA_ABSTRACT_CLASS (DataEngine, core::objectmodel::BaseObject);  ; void update () final;  ; void addInput (sofa::core::objectmodel::BaseData *data);  Add a new input to this engine. More...;  ; void addOutput (objectmodel::BaseData *n);  Add a new output to this engine. More...;  ;  Public Member Functions inherited from sofa::core::DataTrackerDDGNode;  DataTrackerDDGNode ();  ; void addInputs (std::initializer_list< sofa::core::objectmodel::BaseData * > datas);  Create a DataCallback object associated with multiple Data fields. More...;  ; void addOutputs (std::initializer_list< sofa::core::objectmodel::BaseData * > datas);  ; virtual void cleanDirty (const core::ExecParams *params=nullptr);  ; void updateAllInputsIfDirty ();  ;  Public Member Functions inherited from sofa::core::objectmodel::DDGNode;  DDGNode ();  Constructor. More...;  ; virtual ~DDGNode ();  Destructor. Automatically remove remaining links. More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void delInput (DDGNode *n);  Remove an input from this node. More...;  ; void addOutput (DDGNode *n);  Add a new output to this node. More...;  ; void delOutput (DDGNode *n);  Rem",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_data_engine.html:703,update,update,703,api/master/sofa/html/classsofa_1_1core_1_1_data_engine.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_data_engine.html,2,['update'],['update']
Deployability,"﻿. SOFA API: sofa::core::DataTrackerCallback Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; List of all members . sofa::core::DataTrackerCallback Class Reference . #include <DataTrackerCallback.h>. Inheritance diagram for sofa::core::DataTrackerCallback:. [legend]; Detailed Description; a DDGNode that automatically triggers its update function when asking for an output and any input changed. Similar behavior than a DataEngine, but this is NOT a component and can be used everywhere.; Note that it contains a DataTracker (m_dataTracker) to be able to check precisely which input changed if needed.; **** Implementation good rules: (similar to DataEngine); //init addInput // indicate all inputs addOutput // indicate all outputs setDirtyValue(); // the engine must start dirty (of course, no output are up-to-date); DataTrackerCallback is usually created using the ""addUpdateCallback()"" method from Base. Thus the context is usually passed to the lambda making all public & private attributes & methods of the component accessible within the callback function. example:; addUpdateCallback(""name"", {&name}, [this](DataTracker& tracker){ // Increment the state counter but without changing the state. return d_componentState.getValue(); }, {&d_componentState});; A member function with the same signature - core::objectmodel::ComponentState(DataTracker&) - can also be used.; The update of the inputs is done for you before calling the callback, and they are also cleaned for you after the call. Thus there's no need to manually call updateAllInputsIfDirty() or cleanDirty() (see implementation of update() . Protected Attributes; std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> m_callback;  ; sofa::core::objectmodel::Base * m_owner {nullptr};  ;  Protected Attributes inherited from sofa::core::DataTrackerDDGNode; DataTracker m_dataTracker;  ;  Protected Attributes inherit",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_data_tracker_callback.html:425,update,update,425,api/master/sofa/html/classsofa_1_1core_1_1_data_tracker_callback.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_data_tracker_callback.html,1,['update'],['update']
Deployability,﻿. SOFA API: sofa::core::DataTrackerFunctor< FunctorType > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::core::DataTrackerFunctor< FunctorType > Class Template Reference . #include <DataTrackerFunctor.h>. Inheritance diagram for sofa::core::DataTrackerFunctor< FunctorType >:. [legend]; Detailed Description; template<typename FunctorType>; class sofa::core::DataTrackerFunctor< FunctorType >; A DDGNode that will call a given Functor as soon as one of its input changes (a pointer to this DataTrackerFunctor is passed as parameter in the functor) . Public Member Functions;  DataTrackerFunctor (FunctorType &functor);  ; void setDirtyValue () override;  ; void update () override;  This method is needed by DDGNode. More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::DDGNode;  DDGNode ();  Constructor. More...;  ; virtual ~DDGNode ();  Destructor. Automatically remove remaining links. More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void delInput (DDGNode *n);  Remove an input from this node. More...;  ; void addOutput (DDGNode *n);  Add a new output to this node. More...;  ; void delOutput (DDGNode *n);  Remove an output from this node. More...;  ; const DDGLinkContainer & getInputs ();  Get the list of inputs for this DDGNode. More...;  ; const DDGLinkContainer & getOutputs ();  Get the list of outputs for this DDGNode. More...;  ; bool isDirty () const;  Returns true if the DDGNode needs to be updated. More...;  ; virtual void setDirtyOutputs ();  Indicate the outputs needs to be updated. This method must be called after changing the value of this node. More...;  ; void cleanDirty ();  Set dirty flag to false. More...;  ; virtual void notifyEndEdit ();  Notify links that the DGNode has been modified. More...;  ; void updateIfDirty () const;  Utility method to call update if necessary. This method should be c,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_data_tracker_functor.html:771,update,update,771,api/master/sofa/html/classsofa_1_1core_1_1_data_tracker_functor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_data_tracker_functor.html,1,['update'],['update']
Deployability,"﻿. SOFA API: sofa::core::ExecParams Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Public Member Functions |; Static Public Member Functions |; List of all members . sofa::core::ExecParams Class Reference . #include <ExecParams.h>; Class gathering parameters use by most components methods, and transmitted by all visitors. ; More... Inheritance diagram for sofa::core::ExecParams:. [legend]; Detailed Description; Class gathering parameters use by most components methods, and transmitted by all visitors. . Public Member Functions; bool checkValidStorage () const;  ; ExecMode execMode () const;  Mode of execution requested. More...;  ; int threadID () const;  Index of current thread (0 corresponding to the only thread in sequential mode, or first thread in parallel mode) More...;  ; int nbThreads () const;  Number of threads currently known to Sofa. More...;  ;  ExecParams ();  ; void update ();  Make sure this instance is up-to-date relative to the current thread. More...;  ; ExecParams & setExecMode (ExecMode v);  Request a specific mode of execution. More...;  ; ExecParams & setThreadID (int v);  Specify the index of the current thread. More...;  . Static Public Member Functions; static ExecParams * defaultInstance ();  Get the default ExecParams, to be used to provide a default values for method parameters. More...;  . Constructor details. ◆ ExecParams(). sofa::core::ExecParams::ExecParams ; (; ). inline . Function details. ◆ checkValidStorage(). bool sofa::core::ExecParams::checkValidStorage ; (; ); const. ◆ defaultInstance(). ExecParams * sofa::core::ExecParams::defaultInstance ; (; ). static . Get the default ExecParams, to be used to provide a default values for method parameters. . ◆ execMode(). ExecMode sofa::core::ExecParams::execMode ; (; ); const. inline . Mode of execution requested. . ◆ nbThreads(). int sofa::core::ExecParams::nbThreads ; (; ); const. inline . Number of threads currently known to Sofa.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_exec_params.html:949,update,update,949,api/master/sofa/html/classsofa_1_1core_1_1_exec_params.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_exec_params.html,1,['update'],['update']
Deployability,"﻿. SOFA API: sofa::core::MechanicalParams Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; Static Public Member Functions |; List of all members . sofa::core::MechanicalParams Class Reference . #include <MechanicalParams.h>; Class gathering parameters use by mechanical components methods, and transmitted by mechanical visitors. ; More... Inheritance diagram for sofa::core::MechanicalParams:. [legend]; Detailed Description; Class gathering parameters use by mechanical components methods, and transmitted by mechanical visitors. . Protected Attributes; SReal m_dt;  Time step. More...;  ; bool m_implicit;  Is the time integration scheme implicit ? More...;  ; bool m_energy;  Should the kinematic and potential energies be computed ? More...;  ; ConstMultiVecCoordId m_x;  Ids of position vector. More...;  ; ConstMultiVecDerivId m_v;  Ids of velocity vector. More...;  ; ConstMultiVecDerivId m_f;  Ids of force vector. More...;  ; ConstMultiVecDerivId m_dx;  Ids of dx vector (for implicit schemes) More...;  ; ConstMultiVecDerivId m_df;  Ids of df vector (for implicit schemes) More...;  ; SReal m_mFactor;  Mass matrix contributions factor (for implicit schemes) More...;  ; SReal m_bFactor;  Damping matrix contributions factor (for implicit schemes) More...;  ; SReal m_kFactor;  Stiffness matrix contributions factor (for implicit schemes) More...;  ; bool m_supportOnlySymmetricMatrix;  True if a symmetric matrix is assumed in the left-hand term of the dynamics equations, for solvers specialized on symmetric matrices. More...;  . Public Member Functions; bool symmetricMatrix () const =delete;  ; bool supportOnlySymmetricMatrix () const;  Symmetric matrix flag, for solvers specialized on symmetric matrices. More...;  ; bool energy () const;  Should the kinematic and potential energies be computed ? More...;  ;  MechanicalParams (const sofa::core::ExecParams &p=sofa::core::ExecParams());  ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_mechanical_params.html:715,integrat,integration,715,api/master/sofa/html/classsofa_1_1core_1_1_mechanical_params.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_mechanical_params.html,1,['integrat'],['integration']
Deployability,"﻿. SOFA API: sofa::core::behavior::BaseAnimationLoop Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Protected Attributes |; Public Member Functions |; Protected Member Functions |; List of all members . sofa::core::behavior::BaseAnimationLoop Class Referenceabstract . #include <BaseAnimationLoop.h>; Component responsible for main animation algorithms, managing how and when mechanical computation happens in one animation step. ; More... Inheritance diagram for sofa::core::behavior::BaseAnimationLoop:. [legend]; Detailed Description; Component responsible for main animation algorithms, managing how and when mechanical computation happens in one animation step. ; This class can optionally replace the default computation scheme of computing collisions then doing an integration step.; Note that it is in a preliminary stage, hence its functionalities and API will certainly change soon. . Public Attributes; SingleLink< BaseAnimationLoop, core::objectmodel::BaseNode, BaseLink::FLAG_STOREPATH > l_node;  ; Data< bool > d_computeBoundingBox;  If true, compute the global bounding box of the scene at each time step. Used mostly for rendering. More...;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Lo",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_animation_loop.html:837,integrat,integration,837,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_animation_loop.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_animation_loop.html,1,['integrat'],['integration']
Deployability,"﻿. SOFA API: sofa::core::behavior::BaseForceField Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Protected Member Functions |; List of all members . sofa::core::behavior::BaseForceField Class Referenceabstract . #include <BaseForceField.h>; Component computing forces within simulated bodies. ; More... Inheritance diagram for sofa::core::behavior::BaseForceField:. [legend]; Detailed Description; Component computing forces within simulated bodies. ; This class define the abstract API common to all force fields. A force field computes forces applied to one or more simulated body given its current position and velocity.; Forces can be internal to a given body (attached to one MechanicalState, see the ForceField class), or link several bodies together (such as contact forces, see the InteractionForceField class).; For implicit integration schemes, it must also compute the derivative ( df, given a displacement dx ). . Public Attributes; Rayleigh Damping (stiffness contribution); Data< SReal > rayleighStiffness;  Rayleigh Damping stiffness matrix coefficient. More...;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_force_field.html:905,integrat,integration,905,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_force_field.html,1,['integrat'],['integration']
Deployability,"﻿. SOFA API: sofa::core::behavior::BaseInteractionForceField Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::core::behavior::BaseInteractionForceField Class Reference . #include <BaseInteractionForceField.h>; BaseInteractionForceField is a force field linking several bodies (MechanicalState) together. ; More... Inheritance diagram for sofa::core::behavior::BaseInteractionForceField:. [legend]; Detailed Description; BaseInteractionForceField is a force field linking several bodies (MechanicalState) together. ; An interaction force field computes forces applied to several simulated bodies given their current positions and velocities.; For implicit integration schemes, it must also compute the derivative ( df, given a displacement dx ). . Public Member Functions;  SOFA_ABSTRACT_CLASS (BaseInteractionForceField, BaseForceField);  ; virtual BaseMechanicalState * getMechModel1 ();  ; virtual BaseMechanicalState * getMechModel2 ();  ; void addKToMatrix (const MechanicalParams *, const sofa::core::behavior::MultiMatrixAccessor *) override;  Compute the system matrix corresponding to . More...;  ; virtual void initGnuplot (const std::string path);  initialization to export potential energy to gnuplot files format More...;  ; virtual void exportGnuplot (SReal time);  export kinetic and potential energy state at ""time"" to a gnuplot file More...;  ; bool insertInNode (objectmodel::BaseNode *node) override;  ; bool removeInNode (objectmodel::BaseNode *node) override;  ;  Public Member Functions inherited from sofa::core::behavior::BaseForceField;  SOFA_ABSTRACT_CLASS (BaseForceField, StateAccessor);  ; virtual void addForce (const MechanicalParams *mparams, MultiVecDerivId fId)=0;  Given the current position and velocity states, update the current force vector by computing and adding the forces associated with this ForceField. More...;  ; virtual void addDForce (const MechanicalParam",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_interaction_force_field.html:752,integrat,integration,752,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_interaction_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_interaction_force_field.html,1,['integrat'],['integration']
Deployability,"﻿. SOFA API: sofa::core::behavior::BaseMass Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; Protected Member Functions |; List of all members . sofa::core::behavior::BaseMass Class Referenceabstract . #include <BaseMass.h>; Component responsible for mass-related computations (gravity, acceleration). ; More... Inheritance diagram for sofa::core::behavior::BaseMass:. [legend]; Detailed Description; Component responsible for mass-related computations (gravity, acceleration). ; Mass can be defined either as a scalar, vector, or a full mass-matrix. It is responsible for converting forces to accelerations (for explicit integrators), or displacements to forces (for implicit integrators).; It is often also a ForceField, computing gravity-related forces. . Public Attributes; Data< bool > m_separateGravity;  ; Rayleigh Damping (mass contribution); Data< SReal > rayleighMass;  Rayleigh Damping mass matrix coefficient. More...;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_mass.html:712,integrat,integrators,712,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_mass.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_mass.html,2,['integrat'],['integrators']
Deployability,"﻿. SOFA API: sofa::core::behavior::ForceField< TDataTypes > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; List of all members . sofa::core::behavior::ForceField< TDataTypes > Class Template Referenceabstract . #include <ForceField.h>; Component computing forces within a simulated body. ; More... Inheritance diagram for sofa::core::behavior::ForceField< TDataTypes >:. [legend]; Detailed Description; template<class TDataTypes>; class sofa::core::behavior::ForceField< TDataTypes >; Component computing forces within a simulated body. ; This class defines the abstract API common to force fields using a given type of DOFs. A force field computes forces applied to one simulated body given its current position and velocity.; For implicit integration schemes, it must also compute the derivative ( df, given a displacement dx ). . Public Member Functions;  SOFA_CLASS2 (SOFA_TEMPLATE(ForceField, TDataTypes), BaseForceField, SOFA_TEMPLATE(SingleStateAccessor, TDataTypes));  ; Vector operations; void addForce (const MechanicalParams *mparams, MultiVecDerivId fId) override;  ; virtual void addForce (const MechanicalParams *, DataVecDeriv &f, const DataVecCoord &x, const DataVecDeriv &v)=0;  ; void addDForce (const MechanicalParams *mparams, MultiVecDerivId dfId) override;  ; virtual void addDForce (const MechanicalParams *mparams, DataVecDeriv &df, const DataVecDeriv &dx)=0;  ; virtual void addClambda (const MechanicalParams *mparams, DataVecDeriv &df, const DataVecDeriv &lambda, SReal cFactor);  ; SReal getPotentialEnergy (const MechanicalParams *mparams) const override;  ; virtual SReal getPotentialEnergy (const MechanicalParams *, const DataVecCoord &x) const =0;  ; virtual void addClambda (const MechanicalParams *, MultiVecDerivId, MultiVecDerivId, SReal);  Accumulate the contribution of the C compliant matrix multiplied by the given L",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_force_field.html:885,integrat,integration,885,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_force_field.html,1,['integrat'],['integration']
Deployability,"﻿. SOFA API: sofa::core::behavior::Mass< DataTypes > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; Protected Member Functions |; List of all members . sofa::core::behavior::Mass< DataTypes > Class Template Reference . #include <Mass.h>; Component responsible for mass-related computations (gravity, acceleration). ; More... Inheritance diagram for sofa::core::behavior::Mass< DataTypes >:. [legend]; Detailed Description; template<class DataTypes>; class sofa::core::behavior::Mass< DataTypes >; Component responsible for mass-related computations (gravity, acceleration). ; Mass can be defined either as a scalar, vector, or a full mass-matrix. It is responsible for converting forces to accelerations (for explicit integrators), or displacements to forces (for implicit integrators).; It is also a ForceField, computing gravity-related forces. . Protected Attributes; std::unique_ptr< std::ofstream > m_gnuplotFileEnergy;  stream to export Kinematic, Potential and Mechanical Energy to gnuplot files More...;  ;  Protected Attributes inherited from sofa::core::behavior::StateAccessor; MultiLink< StateAccessor, BaseMechanicalState, BaseLink::FLAG_DUPLICATE > l_mechanicalStates;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObject; SingleLink< BaseObject, BaseContext, BaseLink::FLAG_DOUBLELINK > l_context;  ; LinkSlaves l_slaves;  ; SingleLink< BaseObject, BaseObject, BaseLink::FLAG_DOUBLELINK > l_master;  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  ;  Protected Attributes inheri",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_mass.html:822,integrat,integrators,822,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_mass.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_mass.html,2,['integrat'],['integrators']
Deployability,"﻿. SOFA API: sofa::core::behavior::OdeSolver Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Protected Member Functions |; List of all members . sofa::core::behavior::OdeSolver Class Referenceabstract . #include <OdeSolver.h>; Component responsible for timestep integration, i.e. advancing the state from time t to t+dt. ; More... Inheritance diagram for sofa::core::behavior::OdeSolver:. [legend]; Detailed Description; Component responsible for timestep integration, i.e. advancing the state from time t to t+dt. ; This class currently control both the integration scheme (explicit, implicit, static, etc), and the linear system resolution algorithm (conjugate gradient, matrix direct inversion, etc). Those two aspect will probably be separated in a future version.; While all computations required to do the integration step are handled by this object, they should not be implemented directly in it, but instead the solver propagates orders (or Visitor) to the other components in the scenegraph that will locally execute them. This allow for greater flexibility (the solver can just ask for the forces to be computed without knowing what type of forces are present), as well as performances (some computations can be executed in parallel). . Public Member Functions;  SOFA_ABSTRACT_CLASS (OdeSolver, objectmodel::BaseObject);  ; virtual void solve (const core::ExecParams *, SReal, MultiVecCoordId, MultiVecDerivId)=0;  ; virtual void solve (const core::ExecParams *params, SReal dt);  ; virtual void computeResidual (const core::ExecParams *, SReal, sofa::core::MultiVecCoordId, sofa::core::MultiVecDerivId);  ; virtual SReal getIntegrationFactor (int, int) const;  ; virtual SReal getSolutionIntegrationFactor (int) const;  ; virtual SReal getVelocityIntegrationFactor () const;  ; virtual SReal getPositionIntegrationFactor () const;  ; bool insertInNode (objectmodel::BaseNode *node) override;  ; bool removeInNode (object",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_ode_solver.html:332,integrat,integration,332,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_ode_solver.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_ode_solver.html,4,['integrat'],['integration']
Deployability,"﻿. SOFA API: sofa::core::collision Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes . sofa::core::collision Namespace Reference . Classes; class  BroadPhaseDetection;  given a set of root collision models, computes potentially colliding pairs. More...;  ; class  CollisionAlgorithm;  ; class  CollisionGroupManager;  Given a set of contacts, create integration groups. More...;  ; class  Contact;  contact response component handling the response between a pair of models More...;  ; class  ContactManager;  Given a set of detected contact points, create contact response components. More...;  ; class  Detection;  ; class  DetectionOutput;  Generic description of a contact point, used for most collision models except special cases such as GPU-based collisions. More...;  ; class  DetectionOutputVector;  Abstract description of a set of contact point. More...;  ; class  TDetectionOutputVector;  Generic description of a set of contact point between two specific collision models. More...;  ; class  BaseIntersector;  ; class  ElementIntersector;  ; class  IntersectorMap;  ; class  Intersection;  Given 2 collision elements, test if an intersection is possible (for bounding volumes), or compute intersection points if any. More...;  ; class  MemberElementIntersector;  ; class  BaseIntersectorCreator;  ; class  IntersectorFactory;  ; class  IntersectorCreator;  ; class  NarrowPhaseDetection;  Given a set of potentially colliding pairs of models, compute set of contact points. More...;  ; class  Pipeline;  Pipeline component gather list of collision models and control the sequence of computations. More...;  . sofacorecollision; Generated on Mon Nov 11 2024 03:15:46 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1collision.html:403,integrat,integration,403,api/master/sofa/html/namespacesofa_1_1core_1_1collision.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1collision.html,1,['integrat'],['integration']
Deployability,"﻿. SOFA API: sofa::core::collision::CollisionAlgorithm Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; Protected Member Functions |; List of all members . sofa::core::collision::CollisionAlgorithm Class Referenceabstract . #include <CollisionAlgorithm.h>. Inheritance diagram for sofa::core::collision::CollisionAlgorithm:. [legend]. Protected Attributes; Instance instance;  Current collision 'pipeline' instance, allowing to store multiple internal states. More...;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObject; SingleLink< BaseObject, BaseContext, BaseLink::FLAG_DOUBLELINK > l_context;  ; LinkSlaves l_slaves;  ; SingleLink< BaseObject, BaseObject, BaseLink::FLAG_DOUBLELINK > l_master;  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  . Public Member Functions;  SOFA_ABSTRACT_CLASS (CollisionAlgorithm, objectmodel::BaseObject);  ; virtual void setInstance (Instance inst);  Allow to store multiple internal states by specifying a different collision pipeline 'instance'. More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObject;  SOFA_CLASS (BaseObject, Base);  ; virtual void draw (const core::visual::VisualParams *);  Render internal data of this object, for debugging purposes. More...;  ; virtual void computeBBox (const core::ExecParams *, bool=false);  ; void setSrc (const std::string &v, std::vector< std::string > *attributeList=nullptr);  Sets a source Object and parses it to collect dependent Data. More...;  ; void setSrc (const std::string &v",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_collision_algorithm.html:489,pipeline,pipeline,489,api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_collision_algorithm.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_collision_algorithm.html,1,['pipeline'],['pipeline']
Deployability,"﻿. SOFA API: sofa::core::collision::CollisionGroupManager Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; Protected Member Functions |; List of all members . sofa::core::collision::CollisionGroupManager Class Referenceabstract . #include <CollisionGroupManager.h>; Given a set of contacts, create integration groups. ; More... Inheritance diagram for sofa::core::collision::CollisionGroupManager:. [legend]; Detailed Description; Given a set of contacts, create integration groups. ; For each pair of objects in contacts :. Look which mechanical integration algorithm is used; If they are “compatible”, create a algorithm merging them; Often simply the most stable of the two. Explicit Euler + Explicit Runge Kutta -> Explicit Runge Kutta; Explicit * + Implicit Euler -> Implicit Euler . Protected Attributes; sofa::type::vector< core::objectmodel::BaseContext::SPtr > groups;  integration groups More...;  ; std::map< Instance, sofa::type::vector< core::objectmodel::BaseContext::SPtr > > storedGroups;  ;  Protected Attributes inherited from sofa::core::collision::CollisionAlgorithm; Instance instance;  Current collision 'pipeline' instance, allowing to store multiple internal states. More...;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObject; SingleLink< BaseObject, BaseContext, BaseLink::FLAG_DOUBLELINK > l_context;  ; LinkSlaves l_slaves;  ; SingleLink< BaseObject, BaseObject, BaseLink::FLAG_DOUBLELINK > l_master;  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  . Public Member Function",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_collision_group_manager.html:391,integrat,integration,391,api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_collision_group_manager.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_collision_group_manager.html,4,['integrat'],['integration']
Deployability,"﻿. SOFA API: sofa::core::collision::ContactManager Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; Protected Member Functions |; List of all members . sofa::core::collision::ContactManager Class Referenceabstract . #include <ContactManager.h>; Given a set of detected contact points, create contact response components. ; More... Inheritance diagram for sofa::core::collision::ContactManager:. [legend]; Detailed Description; Given a set of detected contact points, create contact response components. . Protected Attributes; Intersection * intersectionMethod;  Current intersection method. More...;  ; ContactVector contacts;  ; std::map< Instance, Intersection * > storedIntersectionMethod;  All intersection methods. More...;  ; std::map< Instance, ContactVector > storedContacts;  ;  Protected Attributes inherited from sofa::core::collision::CollisionAlgorithm; Instance instance;  Current collision 'pipeline' instance, allowing to store multiple internal states. More...;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObject; SingleLink< BaseObject, BaseContext, BaseLink::FLAG_DOUBLELINK > l_context;  ; LinkSlaves l_slaves;  ; SingleLink< BaseObject, BaseObject, BaseLink::FLAG_DOUBLELINK > l_master;  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  . Public Member Functions;  SOFA_ABSTRACT_CLASS (ContactManager, CollisionAlgorithm);  ; virtual void createContacts (const DetectionOutputMap &outputs)=0;  ; virtual const ContactVector & getContacts ();  ; virtual void removeContacts (const C",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_contact_manager.html:1000,pipeline,pipeline,1000,api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_contact_manager.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_contact_manager.html,1,['pipeline'],['pipeline']
Deployability,"﻿. SOFA API: sofa::core::collision::Detection Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; Protected Member Functions |; List of all members . sofa::core::collision::Detection Class Reference . #include <Detection.h>. Inheritance diagram for sofa::core::collision::Detection:. [legend]. Protected Attributes; Intersection * intersectionMethod;  Current intersection method. More...;  ; std::map< Instance, Intersection * > storedIntersectionMethod;  All intersection methods. More...;  ;  Protected Attributes inherited from sofa::core::collision::CollisionAlgorithm; Instance instance;  Current collision 'pipeline' instance, allowing to store multiple internal states. More...;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObject; SingleLink< BaseObject, BaseContext, BaseLink::FLAG_DOUBLELINK > l_context;  ; LinkSlaves l_slaves;  ; SingleLink< BaseObject, BaseObject, BaseLink::FLAG_DOUBLELINK > l_master;  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  . Public Member Functions;  SOFA_CLASS (Detection, CollisionAlgorithm);  ; virtual void setIntersectionMethod (Intersection *v);  virtual because subclasses might do precomputations based on intersection algorithms More...;  ; Intersection * getIntersectionMethod () const;  ; virtual bool needsDeepBoundingTree () const;  Returns true if the detection algorithm requires a deep bounding tree i.e. a depth that can be superior to 1. More...;  ;  Public Member Functions inherited from sofa::core::collision::CollisionAlgorithm;  SOFA_ABSTRA",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_detection.html:704,pipeline,pipeline,704,api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_detection.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_detection.html,1,['pipeline'],['pipeline']
Deployability,"﻿. SOFA API: sofa::core::collision::DetectionOutputVector Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Protected Member Functions |; List of all members . sofa::core::collision::DetectionOutputVector Class Referenceabstract . #include <DetectionOutput.h>; Abstract description of a set of contact point. ; More... Inheritance diagram for sofa::core::collision::DetectionOutputVector:. [legend]; Detailed Description; Abstract description of a set of contact point. . Public Member Functions; virtual void clear ()=0;  Clear the content of this vector. More...;  ; virtual unsigned int size () const =0;  Current size (number of detected contacts. More...;  ; bool empty () const;  Test if the vector is empty. More...;  ; virtual void release ();  Delete this vector from memory once the contact pair is no longer active. More...;  ; virtual type::Vec3 getFirstPosition (unsigned idx)=0;  Const iterator to iterate the detection pairs. More...;  ; virtual type::Vec3 getSecondPosition (unsigned idx)=0;  Const iterator end to iterate the detection pairs. More...;  . Protected Member Functions; virtual ~DetectionOutputVector ();  . Constructor details. ◆ ~DetectionOutputVector(). virtual sofa::core::collision::DetectionOutputVector::~DetectionOutputVector ; (; ). inlineprotectedvirtual . Function details. ◆ clear(). virtual void sofa::core::collision::DetectionOutputVector::clear ; (; ). pure virtual . Clear the content of this vector. ; Implemented in sofa::core::collision::TDetectionOutputVector< CM1, CM2 >. ◆ empty(). bool sofa::core::collision::DetectionOutputVector::empty ; (; ); const. inline . Test if the vector is empty. . ◆ getFirstPosition(). virtual type::Vec3 sofa::core::collision::DetectionOutputVector::getFirstPosition ; (; unsigned ; idx). pure virtual . Const iterator to iterate the detection pairs. ; Implemented in sofa::core::collision::TDetectionOutputVector< CM1, CM2 >. ◆ getSecondPosition().",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_detection_output_vector.html:808,release,release,808,api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_detection_output_vector.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_detection_output_vector.html,1,['release'],['release']
Deployability,"﻿. SOFA API: sofa::core::objectmodel::Aspect Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Friends |; List of all members . sofa::core::objectmodel::Aspect Class Reference . #include <AspectPool.h>; Detailed Description; This class represents an allocated aspect. AspectPool returns a smart pointer to an object of this class to give the aspect ownership to the caller. It is safe to use this class from several threads. . Public Member Functions; int aspectID () const;  ; void add_ref ();  ; void release ();  . Friends; class AspectPool;  . Function details. ◆ add_ref(). void sofa::core::objectmodel::Aspect::add_ref ; (; ). Add a reference to this aspect. Note that you should avoid using this method directly, use AspectRef instead to handle it automatically . ◆ aspectID(). int sofa::core::objectmodel::Aspect::aspectID ; (; ); const. inline . ◆ release(). void sofa::core::objectmodel::Aspect::release ; (; ). Release a reference to this aspect. Note that you should avoid using this method directly, use AspectRef instead to handle it automatically . Related details. ◆ AspectPool. friend class AspectPool. friend . sofacoreobjectmodelAspect; Generated on Mon Nov 11 2024 03:15:52 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect.html:571,release,release,571,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect.html,3,['release'],['release']
Deployability,"﻿. SOFA API: sofa::core::objectmodel::AspectBuffer Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; List of all members . sofa::core::objectmodel::AspectBuffer Class Reference . #include <AspectPool.h>; Detailed Description; This class is responsible for providing a buffer for communicating aspects between threads, such that only the most up to date aspect is kept, and the previous one is reused to send the next update. This is similar to triple buffering. . Protected Attributes; AspectPool & pool;  ; AtomicInt latestID;  -1 or aspect ID of the last version sent More...;  ; AtomicInt availableID;  -1 or aspect ID available to send the next version More...;  . Public Member Functions;  AspectBuffer (AspectPool &pool);  ;  ~AspectBuffer ();  ; AspectRef allocate ();  Allocate an aspect ID to prepare the next version, reusing a recent one if possible. More...;  ; void push (AspectRef id);  Send a new version, overriding the latest if it was not already received (in which case it can be ""recycled"" using allocate) More...;  ; bool pop (AspectRef &id);  Receive the latest version, return true if one is available, or false otherwise (in which case id is unchanged) More...;  ; void clear ();  . Attribute details. ◆ availableID. AtomicInt sofa::core::objectmodel::AspectBuffer::availableID. protected . -1 or aspect ID available to send the next version . ◆ latestID. AtomicInt sofa::core::objectmodel::AspectBuffer::latestID. protected . -1 or aspect ID of the last version sent . ◆ pool. AspectPool& sofa::core::objectmodel::AspectBuffer::pool. protected . Constructor details. ◆ AspectBuffer(). sofa::core::objectmodel::AspectBuffer::AspectBuffer ; (; AspectPool & ; pool). ◆ ~AspectBuffer(). sofa::core::objectmodel::AspectBuffer::~AspectBuffer ; (; ). Function details. ◆ allocate(). AspectRef sofa::core::objectmodel::AspectBuffer::allocate ; (; ). Allocate an aspect ID to prepare the next ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_buffer.html:509,update,update,509,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_buffer.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_buffer.html,1,['update'],['update']
Deployability,"﻿. SOFA API: sofa::core::objectmodel::AspectPool Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Protected Member Functions |; Friends |; List of all members . sofa::core::objectmodel::AspectPool Class Reference . #include <AspectPool.h>; Detailed Description; This class is responsible for managing the pool of available aspects numbers. It is safe to use this class from several thread. . Public Member Functions;  AspectPool ();  ;  ~AspectPool ();  ; void setReleaseCallback (const std::function< void(int)> &callback);  ; AspectRef allocate ();  ; AspectRef getAspect (int id);  ; int nbAspects () const;  ; int getAspectCounter (int id) const;  . Protected Member Functions; void release (int id);  . Friends; class Aspect;  . Constructor details. ◆ AspectPool(). sofa::core::objectmodel::AspectPool::AspectPool ; (; ). Constructor: creates a new aspect pool. . ◆ ~AspectPool(). sofa::core::objectmodel::AspectPool::~AspectPool ; (; ). Destructor. . Function details. ◆ allocate(). AspectRef sofa::core::objectmodel::AspectPool::allocate ; (; ). Request a new aspect. The returned object should stay alive as long as the aspect is in use. It it possible to duplicate the AspectRef if several threads/algorithm use the same aspect. If no aspect remains available, null pointer is returned. . ◆ getAspect(). AspectRef sofa::core::objectmodel::AspectPool::getAspect ; (; int ; id). ◆ getAspectCounter(). int sofa::core::objectmodel::AspectPool::getAspectCounter ; (; int ; id); const. inline . ◆ nbAspects(). int sofa::core::objectmodel::AspectPool::nbAspects ; (; ); const. inline . ◆ release(). void sofa::core::objectmodel::AspectPool::release ; (; int ; id). protected . Release the aspect having the specified number. It makes the number immediately available to satisfy subsequent AspectPool::allocate requests. . ◆ setReleaseCallback(). void sofa::core::objectmodel::AspectPool::setReleaseCallback ; (; const std::functio",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_pool.html:756,release,release,756,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_pool.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_pool.html,1,['release'],['release']
Deployability,"﻿. SOFA API: sofa::core::objectmodel::ConfigurationSetting Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Protected Member Functions |; List of all members . sofa::core::objectmodel::ConfigurationSetting Class Reference . #include <ConfigurationSetting.h>; Base class for all the configuration settings of SOFA. ; More... Inheritance diagram for sofa::core::objectmodel::ConfigurationSetting:. [legend]; Detailed Description; Base class for all the configuration settings of SOFA. . Public Member Functions;  SOFA_CLASS (ConfigurationSetting, BaseObject);  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; bool insertInNode (objectmodel::BaseNode *node) override;  ; bool removeInNode (objectmodel::BaseNode *node) override;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObject;  SOFA_CLASS (BaseObject, Base);  ; virtual void draw (const core::visual::VisualParams *);  Render internal data of this object, for debugging purposes. More...;  ; virtual void computeBBox (const core::ExecParams *, bool=false);  ; void setSrc (const std::string &v, std::vector< std::string > *attributeList=nullptr);  Sets a source Object and parses it to collect dependent Data. More...;  ; void setSrc (const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr);  ; Base * findLinkDestClass (const BaseClass *destType, const std::string &path, const BaseLink *link) override;  ; virtual std::string getPathName () const override;  Return the full path name of this object. More...;  ; SReal getTime () const;  Current time. More...;  ; const BaseContext * getContext () const;  ; BaseContext * getContext ();  ; const BaseObject * getMaster () const;  ; BaseObject * getMaster ();  ; const VecSlaves & getSlaves () const;  ; BaseObject * getSlave (const std::string &name) const;  ; virtual void add",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting.html:351,configurat,configuration,351,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting.html,2,['configurat'],['configuration']
Deployability,﻿. SOFA API: sofa::core::objectmodel::DDGNode Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Protected Attributes |; Public Member Functions |; Protected Member Functions |; List of all members . sofa::core::objectmodel::DDGNode Class Referenceabstract . #include <DDGNode.h>; A DDGNode is a vertex in the data dependencies graph. The data dependency graph is used to update the data when some of other changes and it is at the root of the implementation of the data update mecanisme as well as DataEngines. ; More... Inheritance diagram for sofa::core::objectmodel::DDGNode:. [legend]; Detailed Description; A DDGNode is a vertex in the data dependencies graph. The data dependency graph is used to update the data when some of other changes and it is at the root of the implementation of the data update mecanisme as well as DataEngines. . Protected Attributes; DDGLinkContainer inputs;  ; DDGLinkContainer outputs;  . Public Member Functions;  DDGNode ();  Constructor. More...;  ; virtual ~DDGNode ();  Destructor. Automatically remove remaining links. More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void delInput (DDGNode *n);  Remove an input from this node. More...;  ; void addOutput (DDGNode *n);  Add a new output to this node. More...;  ; void delOutput (DDGNode *n);  Remove an output from this node. More...;  ; const DDGLinkContainer & getInputs ();  Get the list of inputs for this DDGNode. More...;  ; const DDGLinkContainer & getOutputs ();  Get the list of outputs for this DDGNode. More...;  ; virtual void update ()=0;  Update this value. More...;  ; bool isDirty () const;  Returns true if the DDGNode needs to be updated. More...;  ; virtual void setDirtyValue ();  Indicate the value needs to be updated. More...;  ; virtual void setDirtyOutputs ();  Indicate the outputs needs to be updated. This method must be called after changing the value of this node. More...;  ; void cleanDirty ,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_d_d_g_node.html:423,update,update,423,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_d_d_g_node.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_d_d_g_node.html,4,['update'],['update']
Deployability,"﻿. SOFA API: sofa::core::objectmodel::DataContentValue< T, false > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::core::objectmodel::DataContentValue< T, false > Class Template Reference . #include <DataContentValue.h>. Public Member Functions;  DataContentValue ();  ;  DataContentValue (const T &value);  ;  DataContentValue (const DataContentValue &dc);  ; DataContentValue & operator= (const DataContentValue &dc);  ; T * beginEdit ();  ; void endEdit ();  ; const T & getValue () const;  ; void setValue (const T &value);  ; void release ();  . Constructor details. ◆ DataContentValue() [1/3]. template<class T > . sofa::core::objectmodel::DataContentValue< T, false >::DataContentValue ; (; ). inline . ◆ DataContentValue() [2/3]. template<class T > . sofa::core::objectmodel::DataContentValue< T, false >::DataContentValue ; (; const T & ; value). inlineexplicit . ◆ DataContentValue() [3/3]. template<class T > . sofa::core::objectmodel::DataContentValue< T, false >::DataContentValue ; (; const DataContentValue< T, false > & ; dc). inline . Function details. ◆ beginEdit(). template<class T > . T* sofa::core::objectmodel::DataContentValue< T, false >::beginEdit ; (; ). inline . ◆ endEdit(). template<class T > . void sofa::core::objectmodel::DataContentValue< T, false >::endEdit ; (; ). inline . ◆ getValue(). template<class T > . const T& sofa::core::objectmodel::DataContentValue< T, false >::getValue ; (; ); const. inline . ◆ operator=(). template<class T > . DataContentValue& sofa::core::objectmodel::DataContentValue< T, false >::operator= ; (; const DataContentValue< T, false > & ; dc). inline . ◆ release(). template<class T > . void sofa::core::objectmodel::DataContentValue< T, false >::release ; (; ). inline . ◆ setValue(). template<class T > . void sofa::core::objectmodel::DataContentValue< T, false >::setValue ; (; const T & ; value). inline . sofacoreobjectmode",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_content_value_3_01_t_00_01false_01_4.html:643,release,release,643,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_content_value_3_01_t_00_01false_01_4.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_content_value_3_01_t_00_01false_01_4.html,1,['release'],['release']
Deployability,"﻿. SOFA API: sofa::core::objectmodel::DataContentValue< T, true > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::core::objectmodel::DataContentValue< T, true > Class Template Reference . #include <DataContentValue.h>. Public Member Functions;  DataContentValue ();  ;  DataContentValue (const T &value);  ;  DataContentValue (const DataContentValue &dc);  ;  ~DataContentValue ();  ; DataContentValue & operator= (const DataContentValue &dc);  ; T * beginEdit ();  ; void endEdit ();  ; const T & getValue () const;  ; void setValue (const T &value);  ; void release ();  . Constructor details. ◆ DataContentValue() [1/3]. template<class T > . sofa::core::objectmodel::DataContentValue< T, true >::DataContentValue ; (; ). inline . ◆ DataContentValue() [2/3]. template<class T > . sofa::core::objectmodel::DataContentValue< T, true >::DataContentValue ; (; const T & ; value). inlineexplicit . ◆ DataContentValue() [3/3]. template<class T > . sofa::core::objectmodel::DataContentValue< T, true >::DataContentValue ; (; const DataContentValue< T, true > & ; dc). inline . ◆ ~DataContentValue(). template<class T > . sofa::core::objectmodel::DataContentValue< T, true >::~DataContentValue ; (; ). inline . Function details. ◆ beginEdit(). template<class T > . T* sofa::core::objectmodel::DataContentValue< T, true >::beginEdit ; (; ). inline . ◆ endEdit(). template<class T > . void sofa::core::objectmodel::DataContentValue< T, true >::endEdit ; (; ). inline . ◆ getValue(). template<class T > . const T& sofa::core::objectmodel::DataContentValue< T, true >::getValue ; (; ); const. inline . ◆ operator=(). template<class T > . DataContentValue& sofa::core::objectmodel::DataContentValue< T, true >::operator= ; (; const DataContentValue< T, true > & ; dc). inline . ◆ release(). template<class T > . void sofa::core::objectmodel::DataContentValue< T, true >::release ; (; ). inline . ◆ setValu",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_content_value_3_01_t_00_01true_01_4.html:667,release,release,667,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_content_value_3_01_t_00_01true_01_4.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_content_value_3_01_t_00_01true_01_4.html,1,['release'],['release']
Deployability,"﻿. SOFA API: sofa::core::objectmodel::KeyreleasedEvent Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; Static Public Member Functions |; List of all members . sofa::core::objectmodel::KeyreleasedEvent Class Reference . #include <KeyreleasedEvent.h>; This event is propagated along the objects when a key on the keyboard is released. ; More... Inheritance diagram for sofa::core::objectmodel::KeyreleasedEvent:. [legend]; Detailed Description; This event is propagated along the objects when a key on the keyboard is released. ; AuthorJuan Pablo de la Plata . Protected Attributes; char m_char;  Store the key. More...;  ;  Protected Attributes inherited from sofa::core::objectmodel::Event; bool m_handled;  . Public Member Functions;  KeyreleasedEvent (char);  Constructor. More...;  ;  ~KeyreleasedEvent () override;  Destructor. More...;  ; char getKey () const;  Return the key released. More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::Event;  Event ();  ; virtual ~Event ();  ; void setHandled ();  Tag the event as handled, i.e. the event needs not be propagated further. More...;  ; bool isHandled () const;  Returns true of the event has been handled. More...;  ; virtual const char * getClassName () const;  ; virtual size_t getEventTypeIndex () const =0;  . Static Public Member Functions; static const char * GetClassName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Event; static const char * GetClassName ();  ; static size_t getEventTypeCount ();  . Additional Inherited Members;  Static Protected Attributes inherited from sofa::core::objectmodel::Event; static size_t s_lastEventTypeIndex = 0;  storing the last given id More...;  . Attribute details. ◆ m_char. char sofa::core::objectmodel::KeyreleasedEvent::m_char. protected . Store the key. . Constructor details. ◆ KeyreleasedEvent(). sofa::core::objectmodel::KeyreleasedEv",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_keyreleased_event.html:417,release,released,417,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_keyreleased_event.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_keyreleased_event.html,3,['release'],['released']
Deployability,"﻿. SOFA API: sofa::core::visual::VisualLoop Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Protected Member Functions |; List of all members . sofa::core::visual::VisualLoop Class Reference . #include <VisualLoop.h>. Inheritance diagram for sofa::core::visual::VisualLoop:. [legend]. Public Member Functions;  SOFA_CLASS (VisualLoop, VisualModel);  ; virtual void initStep (sofa::core::visual::VisualParams *);  Initialize the textures. More...;  ; virtual void updateStep (sofa::core::visual::VisualParams *);  Update the Visual Models: triggers the Mappings. More...;  ; virtual void updateContextStep (sofa::core::visual::VisualParams *);  Update contexts. Required before drawing the scene if root flags are modified. More...;  ; virtual void drawStep (sofa::core::visual::VisualParams *);  Render the scene. More...;  ; virtual void computeBBoxStep (sofa::core::visual::VisualParams *, SReal *, SReal *, bool);  Compute the bounding box of the scene. If init is set to ""true"", then minBBox and maxBBox will be initialised to a default value. More...;  ; bool insertInNode (objectmodel::BaseNode *node) override;  ; bool removeInNode (objectmodel::BaseNode *node) override;  ;  Public Member Functions inherited from sofa::core::visual::VisualModel;  SOFA_ABSTRACT_CLASS (VisualModel, objectmodel::BaseObject);  ; virtual void drawVisual (const VisualParams *) final;  Display the VisualModel object. More...;  ; void initVisual (const VisualParams *);  Initialize the textures, or other graphical resources. More...;  ; virtual void initVisual () final;  ; void updateVisual (const VisualParams *);  used to update the model if necessary. More...;  ; virtual void updateVisual () final;  ; virtual void clearVisual ();  clear some graphical resources (generally called before the deleteVisitor). More...;  ; virtual void fwdDraw (VisualParams *);  Called before objects in the current branch are displayed. More...;  ; virtua",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1visual_1_1_visual_loop.html:533,update,updateStep,533,api/master/sofa/html/classsofa_1_1core_1_1visual_1_1_visual_loop.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1visual_1_1_visual_loop.html,2,['update'],"['updateContextStep', 'updateStep']"
Deployability,"﻿. SOFA API: sofa::core::visual::VisualModel Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; Protected Member Functions |; List of all members . sofa::core::visual::VisualModel Class Reference . #include <VisualModel.h>; An interface which all VisualModel inherit. ; More... Inheritance diagram for sofa::core::visual::VisualModel:. [legend]; Detailed Description; An interface which all VisualModel inherit. ; This Interface is used for the VisualModel, which all visible objects must implement.; VisualModels are drawn by calling their draw method. The method update is used to recompute some internal data (such as normals) after the simulation has computed a new timestep.; Most VisualModel are bound by a Mapping to a BehaviorModel or MechanicalState. . Public Attributes; Data< bool > d_enable;  Display the object or not. More...;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  . Public Member Functions;  SOFA_ABSTRACT_CLASS (VisualModel, objectmodel::BaseObject)",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1visual_1_1_visual_model.html:653,update,update,653,api/master/sofa/html/classsofa_1_1core_1_1visual_1_1_visual_model.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1visual_1_1_visual_model.html,1,['update'],['update']
Deployability,"﻿. SOFA API: sofa::gl::Cylinder Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Static Public Member Functions |; List of all members . sofa::gl::Cylinder Class Reference . #include <Cylinder.h>. Public Member Functions;  SOFA_ATTRIBUTE_REPLACED__TYPEMEMBER (Vector3, sofa::type::Vec3);  ;  Cylinder (SReal len=1.0_sreal);  ;  Cylinder (const Vec3 &len);  ;  Cylinder (const Vec3 &center, const Quaternion &orient, const Vec3 &length);  ;  Cylinder (const Vec3 &center, const double orient[4][4], const Vec3 &length);  ;  Cylinder (const double *mat, const Vec3 &length);  ;  Cylinder (const Vec3 &center, const Quaternion &orient, SReal length=1.0_sreal);  ;  Cylinder (const Vec3 &center, const double orient[4][4], SReal length=1.0_sreal);  ;  Cylinder (const double *mat, SReal length=1.0_sreal);  ;  ~Cylinder ();  ; void update (const Vec3 &center, const Quaternion &orient=Quaternion());  ; void update (const Vec3 &center, const double orient[4][4]);  ; void update (const double *mat);  ; void draw ();  . Static Public Member Functions; static void draw (const Vec3 &center, const Quaternion &orient, const Vec3 &length);  ; static void draw (const Vec3 &center, const double orient[4][4], const Vec3 &length);  ; static void draw (const double *mat, const Vec3 &length);  ; static void draw (const Vec3 &center, const Quaternion &orient, SReal length=1.0_sreal);  ; static void draw (const Vec3 &center, const double orient[4][4], SReal length=1.0_sreal);  ; static void draw (const double *mat, SReal length=1.0_sreal);  ; static void clear ();  . Constructor details. ◆ Cylinder() [1/8]. sofa::gl::Cylinder::Cylinder ; (; SReal ; len = 1.0_sreal). ◆ Cylinder() [2/8]. sofa::gl::Cylinder::Cylinder ; (; const Vec3 & ; len). ◆ Cylinder() [3/8]. sofa::gl::Cylinder::Cylinder ; (; const Vec3 & ; center, . const Quaternion & ; orient, . const Vec3 & ; length . ). ◆ Cylinder() [4/8]. sofa::gl::Cylinder::Cylinder ; (; cons",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1_cylinder.html:897,update,update,897,api/master/sofa/html/classsofa_1_1gl_1_1_cylinder.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1_cylinder.html,3,['update'],['update']
Deployability,"﻿. SOFA API: sofa::gl::Texture Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::gl::Texture Class Reference . #include <Texture.h>. Public Member Functions;  Texture ();  ;  Texture (helper::io::Image *img, bool repeat=true, bool linearInterpolation=true, bool generateMipmaps=true, bool srgbColorspace=false, float minLod=-1000, float maxLod=1000);  ; helper::io::Image * getImage (void);  ; GLuint getTarget () const;  ; void bind (void);  ; void unbind (void);  ; void init ();  ; void update ();  ;  ~Texture ();  ; GLuint getId () const;  . Constructor details. ◆ Texture() [1/2]. sofa::gl::Texture::Texture ; (; ). inline . ◆ Texture() [2/2]. sofa::gl::Texture::Texture ; (; helper::io::Image * ; img, . bool ; repeat = true, . bool ; linearInterpolation = true, . bool ; generateMipmaps = true, . bool ; srgbColorspace = false, . float ; minLod = -1000, . float ; maxLod = 1000 . ). inline . ◆ ~Texture(). sofa::gl::Texture::~Texture ; (; void ; ). Function details. ◆ bind(). void sofa::gl::Texture::bind ; (; void ; ). ◆ getId(). GLuint sofa::gl::Texture::getId ; (; ); const. inline . ◆ getImage(). helper::io::Image * sofa::gl::Texture::getImage ; (; void ; ). ◆ getTarget(). GLuint sofa::gl::Texture::getTarget ; (; ); const. inline . ◆ init(). void sofa::gl::Texture::init ; (; void ; ). ◆ unbind(). void sofa::gl::Texture::unbind ; (; void ; ). ◆ update(). void sofa::gl::Texture::update ; (; ). sofaglTexture; Generated on Mon Nov 11 2024 03:18:55 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1_texture.html:586,update,update,586,api/master/sofa/html/classsofa_1_1gl_1_1_texture.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1_texture.html,3,['update'],['update']
Deployability,﻿. SOFA API: sofa::gl::component::rendering3d::OglModel Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Protected Attributes |; Public Member Functions |; Protected Member Functions |; List of all members . sofa::gl::component::rendering3d::OglModel Class Reference . #include <OglModel.h>; Main class for rendering 3D model in SOFA. ; More... Inheritance diagram for sofa::gl::component::rendering3d::OglModel:. [legend]; Detailed Description; Main class for rendering 3D model in SOFA. ; This class implements VisuelModelImpl with rendering functions using OpenGL. . Public Attributes; Data< bool > blendTransparency;  Blend transparent parts. More...;  ;  Public Attributes inherited from sofa::component::visual::VisualModelImpl; bool useTopology;  True if list of d_facets should be taken from the attached topology. More...;  ; int lastMeshRev;  Time stamps from the last time the mesh was updated from the topology. More...;  ; bool castShadow;  True if object cast shadows. More...;  ; sofa::core::topology::BaseMeshTopology * m_topology;  ; sofa::core::objectmodel::RenamedData< bool > m_initRestPositions;  ; sofa::core::objectmodel::RenamedData< bool > m_useNormals;  ; sofa::core::objectmodel::RenamedData< bool > m_updateNormals;  ; sofa::core::objectmodel::RenamedData< bool > m_computeTangents;  ; sofa::core::objectmodel::RenamedData< bool > m_updateTangents;  ; sofa::core::objectmodel::RenamedData< bool > m_handleDynamicTopology;  ; sofa::core::objectmodel::RenamedData< bool > m_fixMergedUVSeams;  ; sofa::core::objectmodel::RenamedData< bool > m_keepLines;  ; sofa::core::objectmodel::RenamedData< VecCoord > m_vertices2;  ; sofa::core::objectmodel::RenamedData< VecTexCoord > m_vtexcoords;  ; sofa::core::objectmodel::RenamedData< VecCoord > m_vtangents;  ; sofa::core::objectmodel::RenamedData< VecCoord > m_vbitangents;  ; sofa::core::objectmodel::RenamedData< VecVisualEdge > m_edges;  ; sofa::core::objectmodel:,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_ogl_model.html:960,update,updated,960,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_ogl_model.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_ogl_model.html,1,['update'],['updated']
Deployability,﻿. SOFA API: sofa::gl::component::shader::OglShaderVisualModel Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Protected Attributes |; Public Member Functions |; Protected Member Functions |; List of all members . sofa::gl::component::shader::OglShaderVisualModel Class Reference . #include <OglShaderVisualModel.h>. Inheritance diagram for sofa::gl::component::shader::OglShaderVisualModel:. [legend]. Public Attributes; OglFloat3Attribute * vrestpositions;  ; OglFloat3Attribute * vrestnormals;  ; OglMatrix4Variable * modelMatrixUniform;  ;  Public Attributes inherited from sofa::gl::component::rendering3d::OglModel; Data< bool > blendTransparency;  Blend transparent parts. More...;  ;  Public Attributes inherited from sofa::component::visual::VisualModelImpl; bool useTopology;  True if list of d_facets should be taken from the attached topology. More...;  ; int lastMeshRev;  Time stamps from the last time the mesh was updated from the topology. More...;  ; bool castShadow;  True if object cast shadows. More...;  ; sofa::core::topology::BaseMeshTopology * m_topology;  ; sofa::core::objectmodel::RenamedData< bool > m_initRestPositions;  ; sofa::core::objectmodel::RenamedData< bool > m_useNormals;  ; sofa::core::objectmodel::RenamedData< bool > m_updateNormals;  ; sofa::core::objectmodel::RenamedData< bool > m_computeTangents;  ; sofa::core::objectmodel::RenamedData< bool > m_updateTangents;  ; sofa::core::objectmodel::RenamedData< bool > m_handleDynamicTopology;  ; sofa::core::objectmodel::RenamedData< bool > m_fixMergedUVSeams;  ; sofa::core::objectmodel::RenamedData< bool > m_keepLines;  ; sofa::core::objectmodel::RenamedData< VecCoord > m_vertices2;  ; sofa::core::objectmodel::RenamedData< VecTexCoord > m_vtexcoords;  ; sofa::core::objectmodel::RenamedData< VecCoord > m_vtangents;  ; sofa::core::objectmodel::RenamedData< VecCoord > m_vbitangents;  ; sofa::core::objectmodel::RenamedData< VecVisualEdge > m_,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_shader_visual_model.html:994,update,updated,994,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_shader_visual_model.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_shader_visual_model.html,1,['update'],['updated']
Deployability,"﻿. SOFA API: sofa::gui::qt::ObjectStateListener Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::gui::qt::ObjectStateListener Class Reference . #include <GraphListenerQListView.h>. Inheritance diagram for sofa::gui::qt::ObjectStateListener:. [legend]; Detailed Description; A listener to connect changes on the component state with its graphical view. The listener is added to the ComponentState of an object to track changes to and update the icon/treewidgetitem when this happens. . Public Attributes; QTreeWidgetItem * item;  ; sofa::core::objectmodel::Base::SPtr object;  . Public Member Functions;  ObjectStateListener (QTreeWidgetItem *item_, sofa::core::objectmodel::Base *object_);  ;  ~ObjectStateListener () override;  ; void update () override;  Update this value. More...;  ; void notifyEndEdit () override;  Notify links that the DGNode has been modified. More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::DDGNode;  DDGNode ();  Constructor. More...;  ; virtual ~DDGNode ();  Destructor. Automatically remove remaining links. More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void delInput (DDGNode *n);  Remove an input from this node. More...;  ; void addOutput (DDGNode *n);  Add a new output to this node. More...;  ; void delOutput (DDGNode *n);  Remove an output from this node. More...;  ; const DDGLinkContainer & getInputs ();  Get the list of inputs for this DDGNode. More...;  ; const DDGLinkContainer & getOutputs ();  Get the list of outputs for this DDGNode. More...;  ; bool isDirty () const;  Returns true if the DDGNode needs to be updated. More...;  ; virtual void setDirtyValue ();  Indicate the value needs to be updated. More...;  ; virtual void setDirtyOutputs ();  Indicate the outputs needs to be updated. This method must be called after changing the value of this node. More...;  ; vo",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_object_state_listener.html:551,update,update,551,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_object_state_listener.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_object_state_listener.html,2,['update'],['update']
Deployability,"﻿. SOFA API: sofa::gui::qt::ProfilerChartView Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; Protected Member Functions |; Signals |; Public Slots |; List of all members . sofa::gui::qt::ProfilerChartView Class Reference . #include <SofaWindowProfiler.h>; The ProfilerChartView class is a override of QtCharts::QChartView to be able to catch mouse selection and update all widgets of. ; More... Inheritance diagram for sofa::gui::qt::ProfilerChartView:. [legend]; Detailed Description; The ProfilerChartView class is a override of QtCharts::QChartView to be able to catch mouse selection and update all widgets of. ; See alsoSofaWindowProfiler Will also override drawForeground to draw a line to show the selected step. . Protected Attributes; int m_bufferSize;  copy of the series size to check if selection is not out of bound More...;  ; QPointF m_lineSelect;  2D point of the line to draw the selection More...;  ; QPointF m_lineOrigin;  ; int m_pointSelected;  Step number selected on the graph. -1 if none. More...;  ; int m_maxY;  Stored value of the Y axis max. More...;  . Public Member Functions;  ProfilerChartView (QChart *chart, QWidget *parent, int bufferSize);  ; void updateYMax (int y);  method to update the max value of the Y axis (for line rendering). More...;  . Protected Member Functions; virtual void mousePressEvent (QMouseEvent *event);  Override to catch mouse selection on the graph. More...;  ; virtual void drawForeground (QPainter *painter, const QRectF &rect);  Override to draw line at the step selected. More...;  . Signals; void pointSelected (int);  signal emitted when a step has been selected on the graph More...;  . Public Slots; void updateSelection (int x);  method to update the selection on the graph. More...;  . Attribute details. ◆ m_bufferSize. int sofa::gui::qt::ProfilerChartView::m_bufferSize. protected . copy of the series size to check if selection is ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_profiler_chart_view.html:457,update,update,457,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_profiler_chart_view.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_profiler_chart_view.html,2,['update'],['update']
Deployability,"﻿. SOFA API: sofa::gui::qt::QDisplayTreeItemWidget Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Protected Slots |; List of all members . sofa::gui::qt::QDisplayTreeItemWidget Class Reference . #include <QDisplayPropertyWidget.h>. Inheritance diagram for sofa::gui::qt::QDisplayTreeItemWidget:. [legend]. Public Member Functions;  QDisplayTreeItemWidget (QWidget *parent=nullptr, QTreeWidgetItem *item=nullptr);  ;  ~QDisplayTreeItemWidget () override;  . Protected Slots; void updateDirtyWidget ();  . Constructor details. ◆ QDisplayTreeItemWidget(). sofa::gui::qt::QDisplayTreeItemWidget::QDisplayTreeItemWidget ; (; QWidget * ; parent = nullptr, . QTreeWidgetItem * ; item = nullptr . ). ◆ ~QDisplayTreeItemWidget(). sofa::gui::qt::QDisplayTreeItemWidget::~QDisplayTreeItemWidget ; (; ). override . Function details. ◆ updateDirtyWidget. void sofa::gui::qt::QDisplayTreeItemWidget::updateDirtyWidget ; (; ). protectedslot . sofaguiqtQDisplayTreeItemWidget; Generated on Mon Nov 11 2024 03:23:43 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_display_tree_item_widget.html:550,update,updateDirtyWidget,550,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_display_tree_item_widget.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_display_tree_item_widget.html,3,['update'],['updateDirtyWidget']
Deployability,"﻿. SOFA API: sofa::gui::qt::QEnergyStatWidget Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::gui::qt::QEnergyStatWidget Class Reference . #include <QEnergyStatWidget.h>. Inheritance diagram for sofa::gui::qt::QEnergyStatWidget:. [legend]. Public Member Functions;  QEnergyStatWidget (QWidget *parent, simulation::Node *node);  ;  ~QEnergyStatWidget ();  ; void stepImpl () override;  the only function that should be overloaded More...;  ;  Public Member Functions inherited from sofa::gui::qt::QGraphStatWidget;  QGraphStatWidget (QWidget *parent, simulation::Node *node, const QString &title, unsigned numberOfCurves, int bufferSize);  ; virtual ~QGraphStatWidget ();  ; virtual void step () final;  Main method called to update the graph. More...;  . Additional Inherited Members;  Protected Attributes inherited from sofa::gui::qt::QGraphStatWidget; simulation::Node * m_node;  pointer to the node monitored More...;  ; int m_bufferSize;  size of the buffers to stored More...;  ; QChart * m_chart;  Pointer to the chart Data. More...;  ; std::vector< QLineSeries * > m_curves;  vector of series to be plotted More...;  ; QValueAxis * m_axisX;  x axis pointer More...;  ; QValueAxis * m_axisY;  y axis pointer More...;  ; SReal m_yMin;  min y axis value stored More...;  ; SReal m_yMax;  max y axis value stored More...;  ; SReal m_lastTime;  last timestep monitored More...;  ; int m_cptStep;  step counter monitored More...;  ;  Protected Member Functions inherited from sofa::gui::qt::QGraphStatWidget; void setCurve (unsigned index, const QString &name, const QColor &color);  set the index-th curve (index must be < _numberOfCurves) More...;  ; void updateYAxisBounds (SReal value);  Method to update Y axis scale. More...;  ; void flushSeries ();  flush data from series not anymore displayed More...;  . Constructor details. ◆ QEnergyStatWidget(). sofa::gui::qt::QEnergyStatWidget::QEnergySt",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_energy_stat_widget.html:823,update,update,823,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_energy_stat_widget.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_energy_stat_widget.html,1,['update'],['update']
Deployability,"﻿. SOFA API: sofa::gui::qt::QMomentumStatWidget Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::gui::qt::QMomentumStatWidget Class Reference . #include <QMomentumStatWidget.h>. Inheritance diagram for sofa::gui::qt::QMomentumStatWidget:. [legend]. Public Member Functions;  QMomentumStatWidget (QWidget *parent, simulation::Node *node);  ; virtual ~QMomentumStatWidget ();  ; void stepImpl () override;  the only function that should be overloaded More...;  ;  Public Member Functions inherited from sofa::gui::qt::QGraphStatWidget;  QGraphStatWidget (QWidget *parent, simulation::Node *node, const QString &title, unsigned numberOfCurves, int bufferSize);  ; virtual ~QGraphStatWidget ();  ; virtual void step () final;  Main method called to update the graph. More...;  . Additional Inherited Members;  Protected Attributes inherited from sofa::gui::qt::QGraphStatWidget; simulation::Node * m_node;  pointer to the node monitored More...;  ; int m_bufferSize;  size of the buffers to stored More...;  ; QChart * m_chart;  Pointer to the chart Data. More...;  ; std::vector< QLineSeries * > m_curves;  vector of series to be plotted More...;  ; QValueAxis * m_axisX;  x axis pointer More...;  ; QValueAxis * m_axisY;  y axis pointer More...;  ; SReal m_yMin;  min y axis value stored More...;  ; SReal m_yMax;  max y axis value stored More...;  ; SReal m_lastTime;  last timestep monitored More...;  ; int m_cptStep;  step counter monitored More...;  ;  Protected Member Functions inherited from sofa::gui::qt::QGraphStatWidget; void setCurve (unsigned index, const QString &name, const QColor &color);  set the index-th curve (index must be < _numberOfCurves) More...;  ; void updateYAxisBounds (SReal value);  Method to update Y axis scale. More...;  ; void flushSeries ();  flush data from series not anymore displayed More...;  . Constructor details. ◆ QMomentumStatWidget(). sofa::gui::qt::QMoment",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_momentum_stat_widget.html:842,update,update,842,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_momentum_stat_widget.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_momentum_stat_widget.html,1,['update'],['update']
Deployability,"﻿. SOFA API: sofa::gui::qt::QMouseWheelAdjustmentGuard Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Protected Member Functions |; List of all members . sofa::gui::qt::QMouseWheelAdjustmentGuard Class Reference . #include <QMouseWheelAdjustementGuard.h>; Filter qt events to allows wheel event to only be accepted when the widget has focus. ; More... Inheritance diagram for sofa::gui::qt::QMouseWheelAdjustmentGuard:. [legend]; Detailed Description; Filter qt events to allows wheel event to only be accepted when the widget has focus. ; To use it you need to do: myWidget->setFocusPolicy(Qt::StrongFocus); myWidget->installEventFilter(new MouseWheelWidgetAdjustmentGuard(ui.comboBox));; This code is grabbed from: https://stackoverflow.com/questions/5821802/qspinbox-inside-a-qscrollarea-how-to-prevent-spin-box-from-stealing-focus-when . Public Member Functions;  QMouseWheelAdjustmentGuard (QObject *parent);  . Protected Member Functions; bool eventFilter (QObject *o, QEvent *e) override;  . Constructor details. ◆ QMouseWheelAdjustmentGuard(). sofa::gui::qt::QMouseWheelAdjustmentGuard::QMouseWheelAdjustmentGuard ; (; QObject * ; parent). explicit . Function details. ◆ eventFilter(). bool sofa::gui::qt::QMouseWheelAdjustmentGuard::eventFilter ; (; QObject * ; o, . QEvent * ; e . ). overrideprotected . sofaguiqtQMouseWheelAdjustmentGuard; Generated on Mon Nov 11 2024 03:23:43 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_mouse_wheel_adjustment_guard.html:690,install,installEventFilter,690,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_mouse_wheel_adjustment_guard.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_mouse_wheel_adjustment_guard.html,1,['install'],['installEventFilter']
Deployability,"﻿. SOFA API: sofa::gui::qt::SofaMouseManager Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; Protected Member Functions |; Public Slots |; List of all members . sofa::gui::qt::SofaMouseManager Class Reference . #include <SofaMouseManager.h>. Inheritance diagram for sofa::gui::qt::SofaMouseManager:. [legend]. Protected Attributes; common::PickHandler * pickHandler;  ; std::map< int, std::string > mapIndexOperation;  ; type::fixed_array< std::string, common::NONE > usedOperations;  . Public Member Functions;  SofaMouseManager (QWidget *parent);  ;  ~SofaMouseManager () override;  ; void updateContent ();  ; void setPickHandler (common::PickHandler *);  ; std::map< int, std::string > & getMapIndexOperation ();  ; void updateOperation (sofa::component::setting::MouseButtonSetting *setting);  ; void updateOperation (common::MOUSE_BUTTON button, const std::string &id);  . Protected Member Functions; void updateOperation (common::Operation *op);  . Public Slots; void selectOperation (int);  . Attribute details. ◆ mapIndexOperation. std::map< int, std::string > sofa::gui::qt::SofaMouseManager::mapIndexOperation. protected . ◆ pickHandler. common::PickHandler* sofa::gui::qt::SofaMouseManager::pickHandler. protected . ◆ usedOperations. type::fixed_array< std::string, common::NONE > sofa::gui::qt::SofaMouseManager::usedOperations. protected . Constructor details. ◆ SofaMouseManager(). sofa::gui::qt::SofaMouseManager::SofaMouseManager ; (; QWidget * ; parent). ◆ ~SofaMouseManager(). sofa::gui::qt::SofaMouseManager::~SofaMouseManager ; (; ). override . Function details. ◆ getMapIndexOperation(). std::map< int, std::string >& sofa::gui::qt::SofaMouseManager::getMapIndexOperation ; (; ). inline . ◆ selectOperation. void sofa::gui::qt::SofaMouseManager::selectOperation ; (; int ; operation). slot . ◆ setPickHandler(). void sofa::gui::qt::SofaMouseManager::setPickHandler ; (; common::PickHan",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_sofa_mouse_manager.html:686,update,updateContent,686,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_sofa_mouse_manager.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_sofa_mouse_manager.html,3,['update'],"['updateContent', 'updateOperation']"
Deployability,﻿. SOFA API: sofa::gui::qt::SofaPluginManager Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Signals |; Public Slots |; List of all members . sofa::gui::qt::SofaPluginManager Class Reference . #include <SofaPluginManager.h>. Inheritance diagram for sofa::gui::qt::SofaPluginManager:. [legend]. Public Member Functions;  SofaPluginManager (QWidget *parent);  ; void updatePluginsListView ();  . Signals; void libraryAdded ();  ; void libraryRemoved ();  . Public Slots; void addLibrary ();  ; void removeLibrary ();  ; void updateComponentList ();  ; void updateDescription ();  . Constructor details. ◆ SofaPluginManager(). sofa::gui::qt::SofaPluginManager::SofaPluginManager ; (; QWidget * ; parent). Function details. ◆ addLibrary. void sofa::gui::qt::SofaPluginManager::addLibrary ; (; ). slot . ◆ libraryAdded. void sofa::gui::qt::SofaPluginManager::libraryAdded ; (; ). signal . ◆ libraryRemoved. void sofa::gui::qt::SofaPluginManager::libraryRemoved ; (; ). signal . ◆ removeLibrary. void sofa::gui::qt::SofaPluginManager::removeLibrary ; (; ). slot . ◆ updateComponentList. void sofa::gui::qt::SofaPluginManager::updateComponentList ; (; ). slot . ◆ updateDescription. void sofa::gui::qt::SofaPluginManager::updateDescription ; (; ). slot . ◆ updatePluginsListView(). void sofa::gui::qt::SofaPluginManager::updatePluginsListView ; (; ). sofaguiqtSofaPluginManager; Generated on Mon Nov 11 2024 03:25:43 for SOFA API by 1.9.1 . ,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_sofa_plugin_manager.html:436,update,updatePluginsListView,436,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_sofa_plugin_manager.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_sofa_plugin_manager.html,9,['update'],"['updateComponentList', 'updateDescription', 'updatePluginsListView']"
Deployability,﻿. SOFA API: sofa::gui::qt::SofaSceneGraphWidget Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; Signals |; List of all members . sofa::gui::qt::SofaSceneGraphWidget Class Reference . #include <SofaSceneGraphWidget.h>. Inheritance diagram for sofa::gui::qt::SofaSceneGraphWidget:. [legend]. Protected Attributes; bool m_isDirty;  ; bool m_isLocked;  . Public Member Functions;  SofaSceneGraphWidget (QWidget *parent);  ;  ~SofaSceneGraphWidget ();  ; void lock ();  ; void unLock ();  ; bool isDirty ();  ; bool isLocked ();  Returns true if the view updates for any scene graph change is disable. More...;  ; void setViewToDirty ();  . Signals; void dirtynessChanged (bool isDirty);  Connect to this signal to be notified when the dirtiness status of the QSofaListView changed. More...;  ; void lockingChanged (bool isLocked);  Connect to this signal to be notified when the locking status changed. More...;  . Attribute details. ◆ m_isDirty. bool sofa::gui::qt::SofaSceneGraphWidget::m_isDirty. protected . Indicate that the view is de-synchronized with the real content of the simulation graph. This can happen if the graph has been freezed (i.e. not graphically updated) for performance reason while simulating complex scenes. . ◆ m_isLocked. bool sofa::gui::qt::SofaSceneGraphWidget::m_isLocked. protected . Constructor details. ◆ SofaSceneGraphWidget(). sofa::gui::qt::SofaSceneGraphWidget::SofaSceneGraphWidget ; (; QWidget * ; parent). inline . ◆ ~SofaSceneGraphWidget(). sofa::gui::qt::SofaSceneGraphWidget::~SofaSceneGraphWidget ; (; ). inline . Function details. ◆ dirtynessChanged. void sofa::gui::qt::SofaSceneGraphWidget::dirtynessChanged ; (; bool ; isDirty). signal . Connect to this signal to be notified when the dirtiness status of the QSofaListView changed. . ◆ isDirty(). bool sofa::gui::qt::SofaSceneGraphWidget::isDirty ; (; ). Returns true if the view is not synchronized anymore wit,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_sofa_scene_graph_widget.html:645,update,updates,645,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_sofa_scene_graph_widget.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_sofa_scene_graph_widget.html,1,['update'],['updates']
Deployability,"﻿. SOFA API: sofa::gui::qt::SofaVideoRecorderManager Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; Static Public Member Functions |; Public Slots |; List of all members . sofa::gui::qt::SofaVideoRecorderManager Class Reference . #include <SofaVideoRecorderManager.h>. Inheritance diagram for sofa::gui::qt::SofaVideoRecorderManager:. [legend]. Protected Attributes; RecordingType currentRecordingType;  ; CaptureOptionsWidget * captureOptionsWidget;  ; MovieOptionsWidget * movieOptionsWidget;  ; QWidget * screenshotsOptionsWidget;  . Public Member Functions;  SofaVideoRecorderManager (QWidget *parent=Q_NULLPTR);  ; void updateContent ();  ; std::string getCodecExtension ();  ; std::string getCodecName ();  ; unsigned int getFramerate ();  ; unsigned int getBitrate ();  ; bool realtime ();  ; unsigned int getFrameskip ();  ; RecordingType getRecordingType ();  . Static Public Member Functions; static SofaVideoRecorderManager * getInstance ();  ; static void internalAddWidget (QWidget *parent, QWidget *widgetToAdd);  . Public Slots; virtual void onChangeRecordingType ();  ; virtual void close ();  . Attribute details. ◆ captureOptionsWidget. CaptureOptionsWidget* sofa::gui::qt::SofaVideoRecorderManager::captureOptionsWidget. protected . ◆ currentRecordingType. RecordingType sofa::gui::qt::SofaVideoRecorderManager::currentRecordingType. protected . ◆ movieOptionsWidget. MovieOptionsWidget* sofa::gui::qt::SofaVideoRecorderManager::movieOptionsWidget. protected . ◆ screenshotsOptionsWidget. QWidget* sofa::gui::qt::SofaVideoRecorderManager::screenshotsOptionsWidget. protected . Constructor details. ◆ SofaVideoRecorderManager(). sofa::gui::qt::SofaVideoRecorderManager::SofaVideoRecorderManager ; (; QWidget * ; parent = Q_NULLPTR). Function details. ◆ close. void sofa::gui::qt::SofaVideoRecorderManager::close ; (; ). virtualslot . ◆ getBitrate(). unsigned int sofa::gui::qt::SofaVideoR",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_sofa_video_recorder_manager.html:720,update,updateContent,720,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_sofa_video_recorder_manager.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_sofa_video_recorder_manager.html,1,['update'],['updateContent']
Deployability,﻿. SOFA API: sofa::gui::qt::qrgbacolorpicker_h::QRGBAColorPicker Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; Signals |; Protected Slots |; List of all members . sofa::gui::qt::qrgbacolorpicker_h::QRGBAColorPicker Class Reference . #include <QRGBAColorPicker.h>. Inheritance diagram for sofa::gui::qt::qrgbacolorpicker_h::QRGBAColorPicker:. [legend]; Detailed Description; Implement a widget to select a color either using a color wheel or by three values. . Protected Attributes; QRgb _rgba;  ; QLineEdit * _r;  ; QLineEdit * _g;  ; QLineEdit * _b;  ; QLineEdit * _a;  ; QPushButton * _colorButton;  . Public Member Functions;  QRGBAColorPicker (QWidget *parent);  ; void setColor (const type::RGBAColor &color);  ; void setColor (const Vec4f &color);  ; type::RGBAColor getColor () const;  . Signals; void hasChanged ();  . Protected Slots; void updateRGBAColor ();  ; void redrawColorButton ();  ; void raiseQColorDialog ();  . Attribute details. ◆ _a. QLineEdit* sofa::gui::qt::qrgbacolorpicker_h::QRGBAColorPicker::_a. protected . ◆ _b. QLineEdit* sofa::gui::qt::qrgbacolorpicker_h::QRGBAColorPicker::_b. protected . ◆ _colorButton. QPushButton* sofa::gui::qt::qrgbacolorpicker_h::QRGBAColorPicker::_colorButton. protected . ◆ _g. QLineEdit* sofa::gui::qt::qrgbacolorpicker_h::QRGBAColorPicker::_g. protected . ◆ _r. QLineEdit* sofa::gui::qt::qrgbacolorpicker_h::QRGBAColorPicker::_r. protected . ◆ _rgba. QRgb sofa::gui::qt::qrgbacolorpicker_h::QRGBAColorPicker::_rgba. protected . Constructor details. ◆ QRGBAColorPicker(). sofa::gui::qt::qrgbacolorpicker_h::QRGBAColorPicker::QRGBAColorPicker ; (; QWidget * ; parent). Function details. ◆ getColor(). type::RGBAColor sofa::gui::qt::qrgbacolorpicker_h::QRGBAColorPicker::getColor ; (; ); const. ◆ hasChanged. void sofa::gui::qt::qrgbacolorpicker_h::QRGBAColorPicker::hasChanged ; (; ). signal . ◆ raiseQColorDialog. void sofa::gui::qt::qrgbacolorp,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1qrgbacolorpicker__h_1_1_q_r_g_b_a_color_picker.html:945,update,updateRGBAColor,945,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1qrgbacolorpicker__h_1_1_q_r_g_b_a_color_picker.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1qrgbacolorpicker__h_1_1_q_r_g_b_a_color_picker.html,1,['update'],['updateRGBAColor']
Deployability,"﻿. SOFA API: sofa::helper Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Classes |; Typedefs |; Enumerations |; Functions |; Variables . sofa::helper Namespace Reference . Namespaces;  advancedtimer;  ;  console;  ;  io;  This allow MeshTrian to interact with the messaging system. ;  ;  lifecycle;  ;  logging;  This allow Base object to interact with the messaging system. ;  ;  messaging;  ;  polygon_cube_intersection;  ;  system;  ;  visual;  . Classes; class  ReadAccessor< core::objectmodel::Data< T > >;  ; class  WriteAccessor< core::objectmodel::Data< T > >;  ; class  WriteOnlyAccessor< core::objectmodel::Data< T > >;  The WriteOnlyAccessor provides an access to the Data without triggering an engine update. This should be the preferred writeAccessor for most of the cases as it avoids unnecessary Data updates. More...;  ; class  ReadAccessor;  ; class  ReadAccessor< VectorLikeType, std::enable_if_t< sofa::type::trait::is_vector< VectorLikeType >::value > >;  ; class  ReadAccessorVector;  ; class  WriteAccessor;  ; class  WriteAccessor< VectorLikeType, std::enable_if_t< sofa::type::trait::is_vector< VectorLikeType >::value > >;  ; class  WriteAccessorVector;  WriteAccessor implementation class for vector types. More...;  ; class  WriteOnlyAccessor;  ; class  WriteOnlyAccessor< VectorLikeType, std::enable_if_t< sofa::type::trait::is_vector< VectorLikeType >::value > >;  ; class  TimerData;  ; class  Record;  ; class  StepData;  ; class  AdvancedTimer;  ; class  BackTrace;  ; class  ColorMap;  ; class  Decompose;  ; class  NoArgument;  Allow us to use BaseCreator and Factory without using any Arguments. More...;  ; class  BaseCreator;  ; class  Factory;  ; class  Creator;  ; class  CreatorFn;  ; class  BasicDispatcher;  ; class  FnDispatcher;  ; class  SingletonFnDispatcher;  ; struct  GenerateRigidInfo;  storing rigid infos needed for RigidMass More...;  ; struct  IndexOpenMP;  ; struct  CleanupCheck;  ; ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html:775,update,update,775,api/master/sofa/html/namespacesofa_1_1helper.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html,2,['update'],"['update', 'updates']"
Deployability,"﻿. SOFA API: sofa::helper::ReadAccessor< core::objectmodel::Data< T > > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::helper::ReadAccessor< core::objectmodel::Data< T > > Class Template Reference . #include <Data.h>. Inheritance diagram for sofa::helper::ReadAccessor< core::objectmodel::Data< T > >:. [legend]; Detailed Description; template<class T>; class sofa::helper::ReadAccessor< core::objectmodel::Data< T > >; Warningthe Data is updated (if needed) only by the Accessor constructor . Public Member Functions;  ReadAccessor (const data_container_type &d);  ;  ReadAccessor (const data_container_type *d);  ;  Public Member Functions inherited from sofa::helper::ReadAccessor< T, Enable >;  ReadAccessor (const container_type &container);  ; const_reference ref () const;  ;  operator const_reference () const;  ; const_pointer operator-> () const;  ; const_reference operator* () const;  . Additional Inherited Members;  Protected Attributes inherited from sofa::helper::ReadAccessor< T, Enable >; const container_type * vref;  . Constructor details. ◆ ReadAccessor() [1/2]. template<class T > . sofa::helper::ReadAccessor< core::objectmodel::Data< T > >::ReadAccessor ; (; const data_container_type & ; d). inline . ◆ ReadAccessor() [2/2]. template<class T > . sofa::helper::ReadAccessor< core::objectmodel::Data< T > >::ReadAccessor ; (; const data_container_type * ; d). inline . sofahelperReadAccessor< core::objectmodel::Data< T > >; Generated on Mon Nov 11 2024 03:26:02 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_read_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4.html:547,update,updated,547,api/master/sofa/html/classsofa_1_1helper_1_1_read_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_read_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4.html,1,['update'],['updated']
Deployability,"﻿. SOFA API: sofa::helper::WriteAccessor< core::objectmodel::Data< T > > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; Protected Member Functions |; List of all members . sofa::helper::WriteAccessor< core::objectmodel::Data< T > > Class Template Reference . #include <Data.h>. Inheritance diagram for sofa::helper::WriteAccessor< core::objectmodel::Data< T > >:. [legend]; Detailed Description; template<class T>; class sofa::helper::WriteAccessor< core::objectmodel::Data< T > >; Read/Write Accessor. The Data is updated before being accessible. This means an expensive chain of Data link and Engine updates can be called For a pure write only Accessor, prefer WriteOnlyAccessor< core::objectmodel::Data<T> > Warningthe Data is updated (if needed) only by the Accessor constructor . Protected Attributes; data_container_type & data;  ;  Protected Attributes inherited from sofa::helper::WriteAccessor< T, Enable >; container_type * vref;  . Public Member Functions;  WriteAccessor (const WriteAccessor &)=delete;  ; WriteAccessor & operator= (const WriteAccessor &)=delete;  ;  WriteAccessor (data_container_type &d);  ;  WriteAccessor (data_container_type *d);  ;  ~WriteAccessor ();  ;  Public Member Functions inherited from sofa::helper::WriteAccessor< T, Enable >;  WriteAccessor (container_type &container);  ; const_reference ref () const;  ; reference wref ();  ;  operator const_reference () const;  ; const_pointer operator-> () const;  ; const_reference operator* () const;  ;  operator reference ();  ; pointer operator-> ();  ; reference operator* ();  ; template<class T2 > ; void operator= (const T2 &v);  . Protected Member Functions;  WriteAccessor (container_type *c, data_container_type &d);  . Attribute details. ◆ data. template<class T > . data_container_type& sofa::helper::WriteAccessor< core::objectmodel::Data< T > >::data. protected . Constructor details. ◆ WriteAcces",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4.html:619,update,updated,619,api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4.html,3,['update'],"['updated', 'updates']"
Deployability,"﻿. SOFA API: sofa::helper::WriteOnlyAccessor< core::objectmodel::Data< T > > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::helper::WriteOnlyAccessor< core::objectmodel::Data< T > > Class Template Reference . #include <Data.h>; The WriteOnlyAccessor provides an access to the Data without triggering an engine update. This should be the preferred writeAccessor for most of the cases as it avoids unnecessary Data updates. ; More... Inheritance diagram for sofa::helper::WriteOnlyAccessor< core::objectmodel::Data< T > >:. [legend]; Detailed Description; template<class T>; class sofa::helper::WriteOnlyAccessor< core::objectmodel::Data< T > >; The WriteOnlyAccessor provides an access to the Data without triggering an engine update. This should be the preferred writeAccessor for most of the cases as it avoids unnecessary Data updates. ; Warningread access to the Data is NOT up-to-date . Public Member Functions;  WriteOnlyAccessor (const WriteOnlyAccessor &)=delete;  ; WriteOnlyAccessor & operator= (const WriteOnlyAccessor &)=delete;  ;  WriteOnlyAccessor (data_container_type &d);  ;  WriteOnlyAccessor (data_container_type *d);  ;  Public Member Functions inherited from sofa::helper::WriteAccessor< core::objectmodel::Data< T > >;  WriteAccessor (const WriteAccessor &)=delete;  ; WriteAccessor & operator= (const WriteAccessor &)=delete;  ;  WriteAccessor (data_container_type &d);  ;  WriteAccessor (data_container_type *d);  ;  ~WriteAccessor ();  ;  Public Member Functions inherited from sofa::helper::WriteAccessor< T, Enable >;  WriteAccessor (container_type &container);  ; const_reference ref () const;  ; reference wref ();  ;  operator const_reference () const;  ; const_pointer operator-> () const;  ; const_reference operator* () const;  ;  operator reference ();  ; pointer operator-> ();  ; reference operator* ();  ; template<class T2 > ; void operator= (const T2 &v);",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_only_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4.html:418,update,update,418,api/master/sofa/html/classsofa_1_1helper_1_1_write_only_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_only_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4.html,4,['update'],"['update', 'updates']"
Deployability,"﻿. SOFA API: sofa::helper::kdTree< Coord > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Protected Attributes |; Public Member Functions |; Protected Member Functions |; List of all members . sofa::helper::kdTree< Coord > Class Template Reference . #include <kdTree.h>; Detailed Description; template<class Coord>; class sofa::helper::kdTree< Coord >; This class implements classical kd tree for nearest neighbors search; the tree is rebuild from points by calling build(p); N nearest points from point x (in terms of euclidean distance) are retrieved with getNClosest(distance/index_List , x , N); Caching may be used to speed up retrieval: if dx< (d(n)-d(0))/2, then the closest point is in the n-1 cached points (updateCachedDistances is used to update the n-1 distances) see for instance: [zhang92] report and [simon96] thesis for more details. AuthorBenjamin Gilles . Classes; struct  TREENODE;  . Protected Attributes; type::vector< TREENODE > tree;  ; unsigned int firstNode;  . Public Member Functions; bool isEmpty () const;  ; void build (const VecCoord &positions);  update tree (to be used whenever positions have changed) More...;  ; void build (const VecCoord &positions, const type::vector< unsigned int > &ROI);  update tree based on positions subset (to be used whenever points p have changed) More...;  ; void getNClosest (distanceSet &cl, const Coord &x, const VecCoord &positions, const unsigned int n) const;  get an ordered set of n distance/index pairs between positions and x More...;  ; unsigned int getClosest (const Coord &x, const VecCoord &positions) const;  get the index of the closest point between positions and x More...;  ; bool getNClosestCached (distanceSet &cl, distanceToPoint &cacheThresh_max, distanceToPoint &cacheThresh_min, Coord &previous_x, const Coord &x, const VecCoord &positions, const unsigned int n) const;  use distance caching to accelerate closest point computation when positions ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1kd_tree.html:781,update,updateCachedDistances,781,api/master/sofa/html/classsofa_1_1helper_1_1kd_tree.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1kd_tree.html,2,['update'],"['update', 'updateCachedDistances']"
Deployability,"﻿. SOFA API: sofa::helper::system::FileEventListener Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::helper::system::FileEventListener Class Referenceabstract . #include <FileMonitor.h>; Contains an event-based API to monitor file changes. ; More... Inheritance diagram for sofa::helper::system::FileEventListener:. [legend]; Detailed Description; Contains an event-based API to monitor file changes. ; Those functions are here only to avoid depending on an external library, and they provide only basic functionality.; This set of functions is not meant to be complete, but it can be completed if need be.; Example of use: 1) implement the FileEventListener interface 2) register the files you want to monitor using FileMonitor::addFile(""mypath/to/file"", &mylistener); 3) call the update function to process & trigger the events.; The system does not contains any hidden thread. If you request the monitoring to happens in an hidden thread you can implement it externally. . Public Member Functions; virtual ~FileEventListener ();  ; virtual void fileHasChanged (const std::string &filename)=0;  . Constructor details. ◆ ~FileEventListener(). virtual sofa::helper::system::FileEventListener::~FileEventListener ; (; ). inlinevirtual . Function details. ◆ fileHasChanged(). virtual void sofa::helper::system::FileEventListener::fileHasChanged ; (; const std::string & ; filename). pure virtual . Implemented in sofa::gui::qt::RealGUIFileListener, and sofa::gl::GLSLFileListener. sofahelpersystemFileEventListener; Generated on Mon Nov 11 2024 03:31:03 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_file_event_listener.html:880,update,update,880,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_file_event_listener.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_file_event_listener.html,1,['update'],['update']
Deployability,"﻿. SOFA API: sofa::helper::system::FileMonitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Member Functions |; List of all members . sofa::helper::system::FileMonitor Class Reference . #include <FileMonitor.h>. Static Public Member Functions; static int addFile (const std::string &filename, FileEventListener *listener);  add a new filepath to monitor and a listener to be triggered in case of change. returns >= 0 if the file was successfully added returns < 0 in case of error. More...;  ; static int addFile (const std::string &directoryname, const std::string &filename, FileEventListener *listener);  add a new path and file to monitor and a listener to be triggered in case of change. returns >= 0 if the file was successfully added returns < 0 in case of error. More...;  ; static int updates (int timeout=1);  check if the file have changed, colalesc the similar events and notify the listener. timeout is the number of seconds to block the calling process. Can be 0 (in this case it return immediately if there is no event. return -1 in case of error return >= 0 otherwise. More...;  ; static void removeListener (FileEventListener *listener);  remove the provided listener. If the listener is not existing, do nothing If the listener is nullptr, do nothing If the listener is associated with one or more file...remove all the associations. Keep in mind that the file are still monitored. More...;  ; static void removeFileListener (const std::string &filename, FileEventListener *listener);  remove the provided listener for a given file If the listener is not existing, do nothing If the listener is nullptr, do nothing If the listener is associated with one or more file...remove all the associations. Keep in mind that the file are still monitored. More...;  . Function details. ◆ addFile() [1/2]. int sofa::helper::system::FileMonitor::addFile ; (; const std::string & ; directoryname, . const std::string & ; filename, . Fil",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_file_monitor.html:854,update,updates,854,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_file_monitor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_file_monitor.html,1,['update'],['updates']
Deployability,"﻿. SOFA API: sofa::helper::system::MonitoredFile Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::helper::system::MonitoredFile Class Reference . Public Attributes; FileEventListener * m_listener {nullptr};  ; string m_filename;  . Public Member Functions;  MonitoredFile (const string &filename, FileEventListener *listener);  ;  ~MonitoredFile ();  ; bool update ();  ;  MonitoredFile (const string &filename, FileEventListener *listener);  ; bool update ();  . Attribute details. ◆ m_filename. string sofa::helper::system::MonitoredFile::m_filename. ◆ m_listener. FileEventListener * sofa::helper::system::MonitoredFile::m_listener {nullptr}. Constructor details. ◆ MonitoredFile() [1/2]. sofa::helper::system::MonitoredFile::MonitoredFile ; (; const string & ; filename, . FileEventListener * ; listener . ). inline . ◆ ~MonitoredFile(). sofa::helper::system::MonitoredFile::~MonitoredFile ; (; ). inline . ◆ MonitoredFile() [2/2]. sofa::helper::system::MonitoredFile::MonitoredFile ; (; const string & ; filename, . FileEventListener * ; listener . ). inline . Function details. ◆ update() [1/2]. bool sofa::helper::system::MonitoredFile::update ; (; ). inline . ◆ update() [2/2]. bool sofa::helper::system::MonitoredFile::update ; (; ). inline . sofahelpersystemMonitoredFile; Generated on Mon Nov 11 2024 03:31:03 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_monitored_file.html:476,update,update,476,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_monitored_file.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_monitored_file.html,6,['update'],['update']
Deployability,"﻿. SOFA API: sofa::simulation Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Classes |; Typedefs |; Enumerations |; Functions |; Variables . sofa::simulation Namespace Reference . Namespaces;  Colors;  ;  common;  ;  core;  ;  graph;  ;  mechanicalvisitor;  ;  node;  ;  xml;  . Classes; class  FindByTypeVisitor;  ; class  SceneLoaderPHP;  ; class  SceneLoaderXML;  ; class  TransformationVisitor;  ; class  AnimateBeginEvent;  ; class  AnimateEndEvent;  ; class  AnimateVisitor;  ; class  BaseMechanicalVisitor;  ; class  BehaviorUpdatePositionVisitor;  ; class  CleanupVisitor;  ; class  CollisionAnimationLoop;  Component responsible for main simulation algorithms, managing how and when collisions and integrations computations happen. More...;  ; class  CollisionBeginEvent;  ; class  CollisionEndEvent;  ; class  CollisionVisitor;  Compute collision reset, detection and response in one step. More...;  ; class  CollisionResetVisitor;  Remove collision response from last step. More...;  ; class  CollisionDetectionVisitor;  Compute collision detection. More...;  ; class  CollisionResponseVisitor;  Compute collision response. More...;  ; class  CpuTask;  ; class  CpuTaskStatus;  ; class  DeactivationVisitor;  ; class  DefaultAnimationLoop;  Default Animation Loop to be created when no AnimationLoop found on simulation::node. More...;  ; class  StdTaskAllocator;  ; class  DefaultTaskScheduler;  ; class  DefaultVisualManagerLoop;  Default VisualManager Loop to be created when no VisualManager found on simulation::node. More...;  ; class  DeleteVisitor;  ; class  BuildConstraintSystemEndEvent;  ; class  SimulationInitDoneEvent;  ; class  SimulationInitStartEvent;  ; class  SimulationInitTexturesDoneEvent;  ; class  SimulationStartEvent;  ; class  SimulationStopEvent;  ; class  SolveConstraintSystemEndEvent;  ; class  InitGnuplotVisitor;  ; class  ExportGnuplotVisitor;  ; class  ExportVisualModelOBJVisitor;  ; class  I",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation.html:769,integrat,integrations,769,api/master/sofa/html/namespacesofa_1_1simulation.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation.html,1,['integrat'],['integrations']
Deployability,"﻿. SOFA API: sofa::simulation::CollisionAnimationLoop Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Member Functions |; List of all members . sofa::simulation::CollisionAnimationLoop Class Reference . #include <CollisionAnimationLoop.h>; Component responsible for main simulation algorithms, managing how and when collisions and integrations computations happen. ; More... Inheritance diagram for sofa::simulation::CollisionAnimationLoop:. [legend]; Detailed Description; Component responsible for main simulation algorithms, managing how and when collisions and integrations computations happen. ; This class can optionally replace the default computation scheme of computing collisions then doing an integration step.; Note that it is in a preliminary stage, hence its functionalities and API will certainly change soon. . Protected Member Functions;  CollisionAnimationLoop ();  ;  ~CollisionAnimationLoop () override;  ;  Protected Member Functions inherited from sofa::core::behavior::BaseAnimationLoop;  BaseAnimationLoop ();  ;  ~BaseAnimationLoop () override;  ; void storeResetState () override;  Save the initial state for later uses in reset() More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::o",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html:384,integrat,integrations,384,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html,3,['integrat'],"['integration', 'integrations']"
Deployability,"﻿. SOFA API: sofa::simulation::IntegrateBeginEvent Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Member Functions |; List of all members . sofa::simulation::IntegrateBeginEvent Class Reference . #include <IntegrateBeginEvent.h>. Inheritance diagram for sofa::simulation::IntegrateBeginEvent:. [legend]; Detailed Description; Event fired by IntegrateVisitor before performing the integrate detection step. . Static Public Member Functions; static const char * GetClassName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Event; static const char * GetClassName ();  ; static size_t getEventTypeCount ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::core::objectmodel::Event; bool m_handled;  ;  Static Protected Attributes inherited from sofa::core::objectmodel::Event; static size_t s_lastEventTypeIndex = 0;  storing the last given id More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::Event;  Event ();  ; virtual ~Event ();  ; void setHandled ();  Tag the event as handled, i.e. the event needs not be propagated further. More...;  ; bool isHandled () const;  Returns true of the event has been handled. More...;  ; virtual const char * getClassName () const;  ; virtual size_t getEventTypeIndex () const =0;  . Function details. ◆ GetClassName(). static const char* sofa::simulation::IntegrateBeginEvent::GetClassName ; (; ). inlinestatic . sofasimulationIntegrateBeginEvent; Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_integrate_begin_event.html:438,integrat,integrate,438,api/master/sofa/html/classsofa_1_1simulation_1_1_integrate_begin_event.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_integrate_begin_event.html,1,['integrat'],['integrate']
Deployability,"﻿. SOFA API: sofa::simulation::IntegrateEndEvent Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Member Functions |; List of all members . sofa::simulation::IntegrateEndEvent Class Reference . #include <IntegrateEndEvent.h>. Inheritance diagram for sofa::simulation::IntegrateEndEvent:. [legend]; Detailed Description; Event fired by IntegrateVisitor after performing the integrate detection step. . Static Public Member Functions; static const char * GetClassName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Event; static const char * GetClassName ();  ; static size_t getEventTypeCount ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::core::objectmodel::Event; bool m_handled;  ;  Static Protected Attributes inherited from sofa::core::objectmodel::Event; static size_t s_lastEventTypeIndex = 0;  storing the last given id More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::Event;  Event ();  ; virtual ~Event ();  ; void setHandled ();  Tag the event as handled, i.e. the event needs not be propagated further. More...;  ; bool isHandled () const;  Returns true of the event has been handled. More...;  ; virtual const char * getClassName () const;  ; virtual size_t getEventTypeIndex () const =0;  . Function details. ◆ GetClassName(). static const char* sofa::simulation::IntegrateEndEvent::GetClassName ; (; ). inlinestatic . sofasimulationIntegrateEndEvent; Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_integrate_end_event.html:429,integrat,integrate,429,api/master/sofa/html/classsofa_1_1simulation_1_1_integrate_end_event.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_integrate_end_event.html,1,['integrat'],['integrate']
Deployability,"﻿. SOFA API: sofa::simulation::Simulation Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::Simulation Class Referenceabstract . #include <Simulation.h>. Inheritance diagram for sofa::simulation::Simulation:. [legend]; Detailed Description; Main controller of the scene. Defines how the scene is inited at the beginning, and updated at each time step. Derives from Base in order to use smart pointers and model the parameters as Datas, which makes their edition easy in the GUI. . Static Public Attributes; static Simulation::SPtr theSimulation { nullptr };  . Public Member Functions;  Simulation ();  ; virtual ~Simulation ();  ;  Simulation (const Simulation &n)=delete;  ; Simulation & operator= (const Simulation &n)=delete;  ; virtual void print (Node *root)=delete;  Print all object in the graph. More...;  ; virtual void init (Node *root)=delete;  Initialize the objects. More...;  ; virtual void initNode (Node *node)=delete;  Init a node without changing the context of the simulation. More...;  ; virtual void animate (Node *root, SReal dt=0.0)=delete;  Execute one timestep. If dt is 0, the dt parameter in the graph will be used. More...;  ; virtual void updateVisual (Node *root)=delete;  Update the Visual Models: triggers the Mappings. More...;  ; virtual void reset (Node *root)=delete;  Reset to initial state. More...;  ; virtual void initTextures (Node *root)=delete;  Initialize the textures. More...;  ; virtual void updateContext (Node *root)=delete;  Update contexts. Required before drawing the scene if root flags are modified. More...;  ; virtual void updateVisualContext (Node *root)=delete;  Update contexts. Required before drawing the scene if root flags are modified. More...;  ; virtual void computeBBox (Node *root, SReal *minBBox, SReal *maxBBox, bool init=true)=delete;  ; virtual void computeTotalBBox (Node *root, SReal *minBB",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_simulation.html:461,update,updated,461,api/master/sofa/html/classsofa_1_1simulation_1_1_simulation.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_simulation.html,1,['update'],['updated']
Deployability,"﻿. SOFA API: sofa::simulation::UpdateInternalDataVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::simulation::UpdateInternalDataVisitor Class Reference . #include <UpdateInternalDataVisitor.h>. Inheritance diagram for sofa::simulation::UpdateInternalDataVisitor:. [legend]; Detailed Description; Triggers the updateInternal() function to update method called when variables (used to compute other internal variables) are modified . Public Member Functions;  UpdateInternalDataVisitor (const core::ExecParams *params);  ; void processUpdateInternalData (simulation::Node *node, sofa::core::objectmodel::BaseObject *baseObj);  ; Result processNodeTopDown (simulation::Node *node) override;  Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. More...;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ; const char * getCategoryName () const override;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual void processNodeBottomUp (simulation::Node *);  Callback method called after child node have been processed and before going back to the parent node. More...;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_internal_data_visitor.html:414,update,updateInternal,414,api/master/sofa/html/classsofa_1_1simulation_1_1_update_internal_data_visitor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_internal_data_visitor.html,2,['update'],"['update', 'updateInternal']"
Deployability,"﻿. SOFA API: sofa::simulation::graph::DAGSimulation Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::simulation::graph::DAGSimulation Class Reference . #include <DAGSimulation.h>. Inheritance diagram for sofa::simulation::graph::DAGSimulation:. [legend]; Detailed Description; Main controller of the scene. Defines how the scene is inited at the beginning, and updated at each time step. Derives from BaseObject in order to model the parameters as Datas, which makes their edition easy in the GUI. . Public Member Functions;  DAGSimulation ();  ;  ~DAGSimulation () override;  ; virtual NodeSPtr createNewGraph (const std::string &name) override;  create a new graph(or tree) and return its root node. More...;  ; virtual NodeSPtr createNewNode (const std::string &name) override;  creates and returns a new node. More...;  ; bool isDirectedAcyclicGraph () override;  Can the simulation handle a directed acyclic graph? More...;  ;  Public Member Functions inherited from sofa::simulation::Simulation;  Simulation ();  ; virtual ~Simulation ();  ;  Simulation (const Simulation &n)=delete;  ; Simulation & operator= (const Simulation &n)=delete;  ; virtual void print (Node *root)=delete;  Print all object in the graph. More...;  ; virtual void init (Node *root)=delete;  Initialize the objects. More...;  ; virtual void initNode (Node *node)=delete;  Init a node without changing the context of the simulation. More...;  ; virtual void animate (Node *root, SReal dt=0.0)=delete;  Execute one timestep. If dt is 0, the dt parameter in the graph will be used. More...;  ; virtual void updateVisual (Node *root)=delete;  Update the Visual Models: triggers the Mappings. More...;  ; virtual void reset (Node *root)=delete;  Reset to initial state. More...;  ; virtual void initTextures (Node *root)=delete;  Initialize the textures. More...;  ; virtual void updateContext (Node *root)=delete;  Update conte",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_simulation.html:458,update,updated,458,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_simulation.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_simulation.html,1,['update'],['updated']
Deployability,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalAddMBKdxVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalAddMBKdxVisitor Class Reference . #include <MechanicalAddMBKdxVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalAddMBKdxVisitor:. [legend]; Detailed Description; Accumulate the product of the system matrix by a given vector. Typically used in implicit integration solved by a Conjugate Gradient algorithm. The current value of the dx vector is used. This action is typically called after a MechanicalPropagateDxAndResetForceVisitor. . Public Attributes; sofa::core::MultiVecDerivId res;  ; bool accumulate;  Accumulate everything back to the DOFs through the mappings. More...;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalAddMBKdxVisitor (const sofa::core::MechanicalParams *mparams, sofa::core::MultiVecDerivId res, bool accumulate=true);  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMappedMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; Result fwdForceField (simulation::Node *, sofa::core::behavior::BaseForceField *ff) override;  Process all the BaseForceField. More...;  ; void bwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; void bwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_kdx_visitor.html:569,integrat,integration,569,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_kdx_visitor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_kdx_visitor.html,1,['integrat'],['integration']
Deployability,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalAddMDxVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalAddMDxVisitor Class Reference . #include <MechanicalAddMDxVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalAddMDxVisitor:. [legend]; Detailed Description; Accumulate the product of the mass matrix by a given vector. Typically used in implicit integration solved by a Conjugate Gradient algorithm. Note that if a dx vector is given, it is used and propagated by the mappings, Otherwise the current value is used. . Public Attributes; sofa::core::MultiVecDerivId res;  ; sofa::core::MultiVecDerivId dx;  ; SReal factor;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalAddMDxVisitor (const sofa::core::MechanicalParams *mparams, sofa::core::MultiVecDerivId res, sofa::core::MultiVecDerivId dx, SReal factor);  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMass (simulation::Node *, sofa::core::behavior::BaseMass *mass) override;  Process the BaseMass. More...;  ; const char * getClassName () const override;  ; virtual std::string getInfos () const override;  ; Result fwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *) override;  Process the BaseMechanicalMapping. More...;  ; Result fwdMappedMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; bool isThreadSafe () const override;  Specify wheth",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_dx_visitor.html:559,integrat,integration,559,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_dx_visitor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_dx_visitor.html,1,['integrat'],['integration']
Deployability,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalBeginIntegrationVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalBeginIntegrationVisitor Class Reference . #include <MechanicalBeginIntegrationVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalBeginIntegrationVisitor:. [legend]; Detailed Description; Visitor used to prepare a time integration step. Typically, does nothing. . Public Attributes; SReal dt;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalBeginIntegrationVisitor (const sofa::core::ExecParams *_params, SReal _dt);  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMappedMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; const char * getClassName () const override;  ; bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *) override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const over",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_begin_integration_visitor.html:542,integrat,integration,542,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_begin_integration_visitor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_begin_integration_visitor.html,1,['integrat'],['integration']
Deployability,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalIntegrateConstraintsVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalIntegrateConstraintsVisitor Class Reference . #include <MechanicalIntegrateConstraintVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalIntegrateConstraintsVisitor:. [legend]; Detailed Description; Apply the motion correction computed from constraint force influence . Public Attributes; const sofa::core::ConstraintParams * cparams;  ; const double positionFactor;  use the OdeSolver to get the position integration factor More...;  ; const double velocityFactor;  use the OdeSolver to get the position integration factor More...;  ; sofa::core::ConstMultiVecDerivId correctionId;  ; sofa::core::MultiVecDerivId dxId;  ; sofa::core::MultiVecCoordId xId;  ; sofa::core::MultiVecDerivId vId;  ; int offset;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalIntegrateConstraintsVisitor (const core::ConstraintParams *cparams, double pf, double vf, sofa::core::ConstMultiVecDerivId correction, sofa::core::MultiVecDerivId dx=sofa::core::MultiVecDerivId(sofa::core::VecDerivId::dx()), sofa::core::MultiVecCoordId x=sofa::core::MultiVecCoordId(sofa::core::VecCoordId::position()), sofa::core::MultiVecDerivId v=sofa::core::MultiVecDerivId(sofa::core::VecDerivId::velocity()));  ; Result fwdMechanicalState (simulation::Node *, core::behavior::BaseMechanicalState *ms) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisit",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integrate_constraints_visitor.html:733,integrat,integration,733,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integrate_constraints_visitor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integrate_constraints_visitor.html,2,['integrat'],['integration']
Deployability,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalIntegrationVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalIntegrationVisitor Class Reference . #include <MechanicalIntegrationVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalIntegrationVisitor:. [legend]; Detailed Description; Visitor used to do a time integration step using OdeSolvers . Public Attributes; SReal dt;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalIntegrationVisitor (const sofa::core::ExecParams *m_params, SReal _dt);  ; Result fwdOdeSolver (simulation::Node *node, sofa::core::behavior::OdeSolver *obj) override;  Process the OdeSolver. More...;  ; Result fwdInteractionForceField (simulation::Node *, sofa::core::behavior::BaseInteractionForceField *obj) override;  Process all the InteractionForceField. More...;  ; const char * getClassName () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map);  ; Result processNodeTopDown (simulation::Node *node) override;  This method calls the fwd* methods during the forward",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integration_visitor.html:517,integrat,integration,517,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integration_visitor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integration_visitor.html,1,['integrat'],['integration']
Deployability,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalPropagateOnlyPositionAndVelocityVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalPropagateOnlyPositionAndVelocityVisitor Class Reference . #include <MechanicalPropagateOnlyPositionAndVelocityVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalPropagateOnlyPositionAndVelocityVisitor:. [legend]; Detailed Description; Propagate positions and velocities to all the levels of the hierarchy. At each level, the mappings form the parent to the child is applied. After the execution of this action, all the (mapped) degrees of freedom are consistent with the independent degrees of freedom. This action is typically applied after time integration of the independent degrees of freedom.; Note that this visitor only propagate through the mappings, and does not apply projective constraints as was previously done by MechanicalPropagatePositionAndVelocityVisitor. Use MechanicalProjectPositionAndVelocityVisitor before this visitor if projection is needed. . Public Attributes; SReal currentTime;  ; sofa::core::MultiVecCoordId x;  ; sofa::core::MultiVecDerivId v;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalPropagateOnlyPositionAndVelocityVisitor (const sofa::core::MechanicalParams *mparams, SReal time=0, sofa::core::MultiVecCoordId x=sofa::core::VecId::position(), sofa::core::MultiVecDerivId v=sofa::core::VecId::velocity());  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMechanicalMapping (si",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_and_velocity_visitor.html:887,integrat,integration,887,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_and_velocity_visitor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_and_velocity_visitor.html,1,['integrat'],['integration']
Deployability,"﻿. SOFA API: sofa::simulation::node Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Functions . sofa::simulation::node Namespace Reference . Functions; sofa::simulation::Node * getNodeFrom (sofa::core::objectmodel::BaseContext *context);  ; sofa::core::objectmodel::BaseContext * toBaseContext (sofa::simulation::Node *node);  ; void initRoot (Node *root);  Initialize the objects. More...;  ; void init (Node *node);  Init a node without changing the context of the simulation. More...;  ; void exportInXML (Node *root, const char *fileName);  Print all object in the graph in XML format. More...;  ; void print (Node *root);  Print all object in the graph. More...;  ; void updateVisualContext (Node *root);  Update contexts. Required before drawing the scene if root flags are modified. More...;  ; void animate (Node *root, SReal dt=0.0);  Execute one timestep. If dt is 0, the dt parameter in the graph will be used. More...;  ; void updateVisual (Node *root);  Update the Visual Models: triggers the Mappings. More...;  ; void reset (Node *root);  Reset to initial state. More...;  ; void initTextures (Node *root);  Initialize the textures. More...;  ; void updateContext (Node *root);  Update contexts. Required before drawing the scene if root flags are modified. More...;  ; void computeBBox (Node *root, SReal *minBBox, SReal *maxBBox, bool init);  ; void computeTotalBBox (Node *root, SReal *minBBox, SReal *maxBBox);  ; void draw (sofa::core::visual::VisualParams *vparams, Node *root);  Render the scene. More...;  ; void exportOBJ (Node *root, const char *filename, bool exportMTL=true);  Export a scene to an OBJ 3D Scene. More...;  ; void exportGraph (Node *root, const char *filename=nullptr);  Print all objects in the graph in the given file (format is given by the filename extension) More...;  ; void dumpState (Node *root, std::ofstream &out);  Dump the current state in the given stream. More...;  ; NodeSPtr load (const std::stri",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation_1_1node.html:723,update,updateVisualContext,723,api/master/sofa/html/namespacesofa_1_1simulation_1_1node.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation_1_1node.html,1,['update'],['updateVisualContext']
Deployability,"﻿. SOFA API: sofa::testing::MainGtestMessageHandler Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Member Functions |; List of all members . sofa::testing::MainGtestMessageHandler Class Reference . #include <TestMessageHandler.h>; Detailed Description; Inherited from MessageHandler, this handler must be installed to have the testing subsystem working. By default it is added in Sofa_test but if you are not inheriting from Sofa_test you have to install it manually. . Static Public Member Functions; static helper::logging::MessageHandler * getInstance ();  . Function details. ◆ getInstance(). MessageHandler * sofa::testing::MainGtestMessageHandler::getInstance ; (; ). static . sofatestingMainGtestMessageHandler; Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_main_gtest_message_handler.html:363,install,installed,363,api/master/sofa/html/classsofa_1_1testing_1_1_main_gtest_message_handler.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_main_gtest_message_handler.html,2,['install'],"['install', 'installed']"
Energy Efficiency," (; ); const. inline . Getter to global potential energy accumulated. . ◆ getEdgeInfo(). template<class DataTypes > . sofa::core::topology::EdgeData<type::vector<EdgeInformation> >& sofa::component::solidmechanics::spring::TriangularBendingSprings< DataTypes >::getEdgeInfo ; (; ). inline . ◆ getKd(). template<class DataTypes > . virtual Real sofa::component::solidmechanics::spring::TriangularBendingSprings< DataTypes >::getKd ; (; ); const. inlinevirtual . Getter/setter on the mesh spring damping. . ◆ getKs(). template<class DataTypes > . virtual Real sofa::component::solidmechanics::spring::TriangularBendingSprings< DataTypes >::getKs ; (; ); const. inlinevirtual . Getter/setter on the mesh spring stiffness. . ◆ getPotentialEnergy(). template<class DataTypes > . SReal sofa::component::solidmechanics::spring::TriangularBendingSprings< DataTypes >::getPotentialEnergy ; (; const core::MechanicalParams * ; mparams, . const DataVecCoord & ; d_x . ); const. overridevirtual . Getter on the potential energy. ; Implements sofa::core::behavior::ForceField< DataTypes >. ◆ init(). template<class DataTypes > . void sofa::component::solidmechanics::spring::TriangularBendingSprings< DataTypes >::init ; (; void ; ). overridevirtual . Initialization method called at graph creation and modification, during top-down traversal. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ reinit(). template<class DataTypes > . void sofa::component::solidmechanics::spring::TriangularBendingSprings< DataTypes >::reinit. overridevirtual . Update method called when variables used in precomputation are modified. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ setKd(). template<class DataTypes > . void sofa::component::solidmechanics::spring::TriangularBendingSprings< DataTypes >::setKd ; (; const Real ; kd). ◆ setKs(). template<class DataTypes > . void sofa::component::solidmechanics::spring::TriangularBendingSprings< DataTypes >::setKs ; (; const Real ; ks). ◆ SOFA_CLASS(). temp",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_triangular_bending_springs.html:29004,energy,energy,29004,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_triangular_bending_springs.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_triangular_bending_springs.html,1,['energy'],['energy']
Energy Efficiency, - Topic: [SOLVED] SofaPython3 on Win 11. /sofapython3-pygame-rendering-example-not-working; ; SOFA - Topic: [SOLVED] SofaPython3 pygame rendering example not working. /sofapython3-seg-fault-with-cvxpy; ; SOFA - Topic: SofaPython3 Seg Fault with CVXPY. /sofapython3-signal-catching; ; SOFA - Topic: SofaPython3 signal catching. /sofapython3-troubles-starting-sofa-gui-from-python-script; ; SOFA - Topic: SofaPython3: Troubles starting Sofa GUI from Python script. /sofapython3-windows-10; ; SOFA - Topic: [SOLVED] SofaPython3 Windows 10. /sofapython3-windows-10-compile-error; ; SOFA - Topic: SofaPython3 windows 10 compile error. /sofapython3-with-python-3-6; ; SOFA - Topic: [SOLVED] SofaPython3 with Python 3.6. /sofapython3-with-sofa-in-windows-10; ; SOFA - Topic: [SOLVED] Sofapython3 with SOFA in Windows 10. /sofapython3-with-v20-12-02-binary-install-on-win10; ; SOFA - Topic: [SOLVED] SofaPython3 with v20.12.02 binary install on Win10. /sofapython-monitor-error-with-mechanicalobject; ; SOFA - Topic: SofaPython Monitor error with MechanicalObject. /sofapython-not-found; ; SOFA - Topic: [SOLVED] SofaPython NOT found. /sofapython-pick-objects; ; SOFA - Topic: [SOLVED] SofaPython Pick objects. /sofapython-simulation-naning-after-runtime-model-changes; ; SOFA - Topic: SofaPython Simulation NaN'ing after runtime model changes. /sofa-registry-objectfactory-problem; . /page; . /14; ; SOFA - Topic: [SOLVED] Sofa registry (ObjectFactory) problem. /4; ; SOFA - Topic: [SOLVED] Sofa registry (ObjectFactory) problem. /8; ; SOFA - Topic: [SOLVED] Sofa registry (ObjectFactory) problem. SOFA - Topic: [SOLVED] Sofa registry (ObjectFactory) problem. /sofa-research-teams-and-companies-are-hiring; ; SOFA - Topic: SOFA research teams and companies are hiring. /sofaros-connector; ; SOFA - Topic: SofaRos Connector. /sofa-scenes-not-displayed-correctly; ; SOFA - Topic: SOFA scenes not displayed correctly. /sofa-scene-with-imposed-displacements-and-von-mises-stress-computation-in-2d; ; SOFA - Topi,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/index-wcopy.html:395354,monitor,monitor-error-with-mechanicalobject,395354,index-wcopy.html,https://www.sofa-framework.org,https://www.sofa-framework.org/index-wcopy.html,1,['monitor'],['monitor-error-with-mechanicalobject']
Energy Efficiency," . bool ; interactionForceField = false, . bool ; propagate = false . ). pure virtual . Free a previously allocated temporary vector. ; Implemented in sofa::simulation::common::VectorOperations. ◆ v_free() [2/2]. virtual void sofa::core::behavior::BaseVectorOperations::v_free ; (; sofa::core::MultiVecDerivId & ; id, . bool ; interactionForceField = false, . bool ; propagate = false . ). pure virtual . Implemented in sofa::simulation::common::VectorOperations. ◆ v_multiop(). virtual void sofa::core::behavior::BaseVectorOperations::v_multiop ; (; const core::behavior::BaseMechanicalState::VMultiOp & ; o). pure virtual . Implemented in sofa::simulation::common::VectorOperations. ◆ v_norm(). virtual void sofa::core::behavior::BaseVectorOperations::v_norm ; (; core::ConstMultiVecId ; a, . unsigned ; l . ). pure virtual . Compute the norm of a vector ( get result using finish ). The type of norm is set by parameter l. Use 0 for the infinite norm. Note that the 2-norm is more efficiently computed using the square root of the dot product. ; Implemented in sofa::simulation::common::VectorOperations. ◆ v_op(). virtual void sofa::core::behavior::BaseVectorOperations::v_op ; (; core::MultiVecId ; v, . core::ConstMultiVecId ; a, . core::ConstMultiVecId ; b, . SReal ; f = 1.0 . ). pure virtual . v=a+b*f ; Implemented in sofa::simulation::common::VectorOperations. ◆ v_peq(). virtual void sofa::core::behavior::BaseVectorOperations::v_peq ; (; core::MultiVecId ; v, . core::ConstMultiVecId ; a, . SReal ; f = 1.0 . ). pure virtual . v+=f*a ; Implemented in sofa::simulation::common::VectorOperations. ◆ v_realloc() [1/2]. virtual void sofa::core::behavior::BaseVectorOperations::v_realloc ; (; sofa::core::MultiVecCoordId & ; id, . bool ; interactionForceField = false, . bool ; propagate = false, . const VecIdProperties & ; properties = {} . ). pure virtual . keep already allocated vectors and allocates others. If interactionForceField, also allocates mechanical states linked by an Intera",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_vector_operations.html:6624,efficient,efficiently,6624,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_vector_operations.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_vector_operations.html,1,['efficient'],['efficiently']
Energy Efficiency," . ◆ MechanicalParams() [2/2]. sofa::core::MechanicalParams::MechanicalParams ; (; const MechanicalParams & ; mparams). Copy Constructor. . Function details. ◆ bFactor(). SReal sofa::core::MechanicalParams::bFactor ; (; ); const. inline . Damping matrix contributions factor (for implicit schemes) . ◆ defaultInstance(). const MechanicalParams * sofa::core::MechanicalParams::defaultInstance ; (; ). static . Get the default MechanicalParams, to be used to provide a default values for method parameters. . ◆ df() [1/2]. ConstMultiVecDerivId& sofa::core::MechanicalParams::df ; (; ). inline . ◆ df() [2/2]. const ConstMultiVecDerivId& sofa::core::MechanicalParams::df ; (; ); const. inline . ◆ dt(). SReal sofa::core::MechanicalParams::dt ; (; ); const. inline . Time step. . ◆ dx() [1/2]. ConstMultiVecDerivId& sofa::core::MechanicalParams::dx ; (; ). inline . ◆ dx() [2/2]. const ConstMultiVecDerivId& sofa::core::MechanicalParams::dx ; (; ); const. inline . ◆ energy(). bool sofa::core::MechanicalParams::energy ; (; ); const. inline . Should the kinematic and potential energies be computed ? . ◆ f() [1/2]. ConstMultiVecDerivId& sofa::core::MechanicalParams::f ; (; ). inline . ◆ f() [2/2]. const ConstMultiVecDerivId& sofa::core::MechanicalParams::f ; (; ); const. inline . ◆ getKFactorUsed(). bool sofa::core::MechanicalParams::getKFactorUsed ; (; ); const. inline . ◆ implicit(). bool sofa::core::MechanicalParams::implicit ; (; ); const. inline . Is the time integration scheme implicit ? . ◆ implicitPosition(). const SReal& sofa::core::MechanicalParams::implicitPosition ; (; ); const. inline . ◆ implicitVelocity(). const SReal& sofa::core::MechanicalParams::implicitVelocity ; (; ); const. inline . ◆ kFactor(). SReal sofa::core::MechanicalParams::kFactor ; (; ); const. inline . Stiffness matrix contributions factor (for implicit schemes) . ◆ kFactorIncludingRayleighDamping(). SReal sofa::core::MechanicalParams::kFactorIncludingRayleighDamping ; (; SReal ; rayleighStiffness); const. ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_mechanical_params.html:11657,energy,energy,11657,api/master/sofa/html/classsofa_1_1core_1_1_mechanical_params.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_mechanical_params.html,1,['energy'],['energy']
Energy Efficiency, /feed; ; Distortion – SOFA. SOFA - Topic Tag: Distortion. /dlls-issue; . /feed; ; DLLs issue – SOFA. SOFA - Topic Tag: DLLs issue. /docker; . /feed; ; docker – SOFA. SOFA - Topic Tag: docker. /documentation; . /feed; ; documentation – SOFA. SOFA - Topic Tag: documentation. /documentation-color-alpha; . /feed; ; documentation color alpha – SOFA. SOFA - Topic Tag: documentation color alpha. /doe; . /feed; ; doe – SOFA. SOFA - Topic Tag: doe. /dynamic-systems; . /feed; ; Dynamic systems – SOFA. SOFA - Topic Tag: Dynamic systems. /edge_removal; . /feed; ; edge_removal – SOFA. SOFA - Topic Tag: edge_removal. /eigen; . /feed; ; Eigen – SOFA. SOFA - Topic Tag: Eigen. /elastic; . /feed; ; Elastic – SOFA. SOFA - Topic Tag: Elastic. /elasticity; . /feed; ; elasticity – SOFA. SOFA - Topic Tag: elasticity. /elastoplastic; . /feed; ; Elastoplastic – SOFA. SOFA - Topic Tag: Elastoplastic. /energy; . /feed; ; Energy – SOFA. SOFA - Topic Tag: Energy. /engine-data-update-energy; . /feed; ; engine data update energy – SOFA. SOFA - Topic Tag: engine data update energy. /error; . /feed; ; error – SOFA. SOFA - Topic Tag: error. /error-5; . /feed; ; Error 5 – SOFA. SOFA - Topic Tag: Error 5. /error-determination; . /feed; ; error determination – SOFA. SOFA - Topic Tag: error determination. /event; . /feed; ; event – SOFA. SOFA - Topic Tag: event. /events; . /feed; ; events – SOFA. SOFA - Topic Tag: events. /execution-time; . /feed; ; Execution time – SOFA. SOFA - Topic Tag: Execution time. /experience; . /feed; ; experience – SOFA. SOFA - Topic Tag: experience. /export; . /feed; ; export – SOFA. SOFA - Topic Tag: export. /exporter-obj-files-normals-estimation; . /feed; ; exporter ; OBJ files ; normals estimation – SOFA. SOFA - Topic Tag: exporter ; OBJ files ; normals estimation. /export-mesh; . /feed; ; export mesh – SOFA. SOFA - Topic Tag: export mesh. /external; . /feed; ; external – SOFA. SOFA - Topic Tag: external. /external-data-com-port; . /feed; ; external data COM port – SOFA. S,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/index-wcopy.html:441495,energy,energy,441495,index-wcopy.html,https://www.sofa-framework.org,https://www.sofa-framework.org/index-wcopy.html,1,['energy'],['energy']
Energy Efficiency, /how-to-import-sofa-in-softrobot; ; SOFA - Topic: How to import sofa in SoftRobot. /how-to-import-volume-mesh-from-matlab-iso2mesh-toolkit; ; SOFA - Topic: [SOLVED] How to import volume mesh from Matlab iso2mesh toolkit?. /how-to-incise-3d-object; . /page; . /10; ; SOFA - Topic: [SOLVED] How to incise 3d object. /11; ; SOFA - Topic: [SOLVED] How to incise 3d object. /3; ; SOFA - Topic: [SOLVED] How to incise 3d object. /5; ; SOFA - Topic: [SOLVED] How to incise 3d object. SOFA - Topic: [SOLVED] How to incise 3d object. /how-to-increase-fps-of-a-scene-including-more-than-20000-tetrahedral-mesh; ; SOFA - Topic: [SOLVED] How to increase FPS of a scene including more than 20000 tetrahedral mesh. /how-to-integrate-the-new-fem-methods-into-sofa-engine; ; SOFA - Topic: How to integrate the new FEM methods into SOFA engine. /how-to-interact-with-3d-deformable-objects-in-sofa; ; SOFA - Topic: How to interact with 3D deformable objects in SOFA. /how-to-know-the-collision-force-or-energy; ; SOFA - Topic: How to know the collision force or energy. /how-to-learn-mesh-editing-programming; . /feed; ; [SOLVED] How to learn mesh editing programming? – SOFA. SOFA - Topic: [SOLVED] How to learn mesh editing programming?. /how-to-learn-using-sofa; ; SOFA - Topic: How to learn using SOFA. /how-to-look-at-the-example-of-the-source-codec; ; SOFA - Topic: [SOLVED] How to look at the example of the source code(c++) ?. /how-to-make-a-6dof-simulation-act-like-a-4dof-make-3d-act-like-2d-simulation; ; SOFA - Topic: How to make a 6DOF simulation act like a 4DOF (make 3d act like 2d simulation)?. /how-to-make-a-modal-analysis; ; SOFA - Topic: how to: Make a modal analysis. /how-to-make-a-pythonscript-controller-with-sofapython3; ; SOFA - Topic: [SOLVED] How to make a PythonScript controller with SofaPython3. /how-to-make-local-refined-tetrahedral-mesh; ; SOFA - Topic: How to make local refined tetrahedral mesh?. /how-to-make-some-part-of-an-object-elastic-and-other-part-plastic; ; SOFA - Topic: H,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/index-wcopy.html:324983,energy,energy,324983,index-wcopy.html,https://www.sofa-framework.org,https://www.sofa-framework.org/index-wcopy.html,2,['energy'],['energy']
Energy Efficiency," ALL_DEVICE_VALID enum valuesofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >protected; allocate(int d) constsofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >inlineprotected; allocSizesofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >protected; begin() constsofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >inline; begin()sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >inline; buffer_id_type typedefsofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >; bufferIsRegisteredsofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >mutableprotected; bufferObjectsofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >protected; bufferRead(bool create=false)sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >inline; bufferWrite(bool create=false)sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >inline; capacity() constsofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >inline; checkIndex(Size i) constsofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >inlineprotected; clear()sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >inline; clearSizesofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >mutableprotected; const_iterator typedefsofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >; const_reference typedefsofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >; copyToDevice(int d=0) constsofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >inlineprotected; copyToHost() constsofa::type::vector_device< T, MemoryManager, Dat",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1vector__device-members.html:427,allocate,allocate,427,api/master/sofa/html/classsofa_1_1type_1_1vector__device-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1vector__device-members.html,1,['allocate'],['allocate']
Energy Efficiency," DataTypes > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Attributes |; Public Member Functions |; List of all members . sofa::component::solidmechanics::fem::hyperelastic::material::Costa< DataTypes > Class Template Reference . #include <Costa.h>. Inheritance diagram for sofa::component::solidmechanics::fem::hyperelastic::material::Costa< DataTypes >:. [legend]; Detailed Description; template<class DataTypes>; class sofa::component::solidmechanics::fem::hyperelastic::material::Costa< DataTypes >; a Class that describe a generic hyperelastic material : example of Boyce and Arruda The material is described based on continuum mechanics and the description is independent to any discretization method like the finite element method. A material is generically described by a strain energy function and its first and second derivatives. In practice the energy is the sum of several energy terms which depends on 2 quantities : the determinant of the deformation gradient J and the right Cauchy Green deformation tensor . Static Public Attributes; static constexpr std::string_view Name = ""Costa"";  . Public Member Functions; virtual Real getStrainEnergy (StrainInformation< DataTypes > *sinfo, const MaterialParameters< DataTypes > &param);  ; virtual void deriveSPKTensor (StrainInformation< DataTypes > *sinfo, const MaterialParameters< DataTypes > &param, MatrixSym &SPKTensorGeneral);  ; virtual void applyElasticityTensor (StrainInformation< DataTypes > *sinfo, const MaterialParameters< DataTypes > &param, const MatrixSym &inputTensor, MatrixSym &outputTensor);  ; virtual void ElasticityTensor (StrainInformation< DataTypes > *sinfo, const MaterialParameters< DataTypes > &param, Matrix6 &outputTensor);  ;  Public Member Functions inherited from sofa::component::solidmechanics::fem::hyperelastic::material::HyperelasticMaterial< DataTypes >; virtual ~HyperelasticMaterial ();  . Attribute details. ◆ Name. template<cla",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_costa.html:1006,energy,energy,1006,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_costa.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_costa.html,2,['energy'],['energy']
Energy Efficiency," DataTypes > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Attributes |; Public Member Functions |; List of all members . sofa::component::solidmechanics::fem::hyperelastic::material::Ogden< DataTypes > Class Template Reference . #include <Ogden.h>. Inheritance diagram for sofa::component::solidmechanics::fem::hyperelastic::material::Ogden< DataTypes >:. [legend]; Detailed Description; template<class DataTypes>; class sofa::component::solidmechanics::fem::hyperelastic::material::Ogden< DataTypes >; a Class that describe a generic hyperelastic material : example of Boyce and Arruda The material is described based on continuum mechanics and the description is independent to any discretization method like the finite element method. A material is generically described by a strain energy function and its first and second derivatives. In practice the energy is the sum of several energy terms which depends on 2 quantities : the determinant of the deformation gradient J and the right Cauchy Green deformation tensor . Static Public Attributes; static constexpr std::string_view Name = ""Ogden"";  . Public Member Functions; Real getStrainEnergy (StrainInformation< DataTypes > *sinfo, const MaterialParameters< DataTypes > &param) override;  ; void deriveSPKTensor (StrainInformation< DataTypes > *sinfo, const MaterialParameters< DataTypes > &param, MatrixSym &SPKTensorGeneral) override;  ; void applyElasticityTensor (StrainInformation< DataTypes > *sinfo, const MaterialParameters< DataTypes > &param, const MatrixSym &inputTensor, MatrixSym &outputTensor) override;  ; void ElasticityTensor (StrainInformation< DataTypes > *sinfo, const MaterialParameters< DataTypes > &param, Matrix6 &outputTensor) override;  ;  Public Member Functions inherited from sofa::component::solidmechanics::fem::hyperelastic::material::HyperelasticMaterial< DataTypes >; virtual ~HyperelasticMaterial ();  . Attribute details. ◆ Name. template",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_ogden.html:1006,energy,energy,1006,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_ogden.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_ogden.html,2,['energy'],['energy']
Energy Efficiency," ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  . Attribute details. ◆ alarmDistance. sofa::core::objectmodel::RenamedData<SReal> sofa::component::collision::detection::intersection::BaseProximityIntersection::alarmDistance. ◆ contactDistance. sofa::core::objectmodel::RenamedData<SReal> sofa::component::collision::detection::intersection::BaseProximityIntersection::contactDistance. ◆ d_alarmDistance. Data<SReal> sofa::component::collision::detection::intersection::BaseProximityIntersection::d_alarmDistance. Distance above which the intersection computations ignores the proximity pair. This distance can also be used in some broad phase algorithms to reduce the search area. . ◆ d_contactDistance. Data<SReal> sofa::component::collision::detection::intersection::BaseProximityIntersection::d_contactDistance. Distance below which a contact is created. . Constructor details. ◆ BaseProximityIntersection(). sofa::component::collision::detection::intersection::BaseProximityIntersection::BaseProximityIntersection ; (; ). protected . ◆ ~BaseProximityIntersection(). sofa::component::collision::detection::intersection::BaseProximityIntersection::~BaseProximityIntersection ; (; ). inlineoverrideprotected . Function details. ◆ computeIntersection() [1/2]. int sofa::component::collision::detection::intersection::BaseProximityIntersection::computeIntersection ; (; collision::geometry::Cube & ; cube1, . collision::geometry::Cube & ; cube2, . OutputVector * ; contacts . ). virtualdelete . Reimplemented from sofa::component::collision::detection::intersection::DiscreteIntersection.; Reimplemented in sofa::component::collision::de",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1intersection_1_1_base_proximity_intersection.html:20127,reduce,reduce,20127,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1intersection_1_1_base_proximity_intersection.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1intersection_1_1_base_proximity_intersection.html,1,['reduce'],['reduce']
Energy Efficiency, SOFA - Topic Tag: configurations. /connect; . /feed; ; connect – SOFA. SOFA - Topic Tag: connect. /connect-sofa; . /feed; ; Connect SOFA – SOFA. SOFA - Topic Tag: Connect SOFA. /constraint; . /feed; ; constraint – SOFA. SOFA - Topic Tag: constraint. /constraint-forces; . /feed; ; Constraint Forces – SOFA. SOFA - Topic Tag: Constraint Forces. /constraintresolution-h; . /feed; ; ConstraintResolution.h – SOFA. SOFA - Topic Tag: ConstraintResolution.h. /constraints; . /feed; ; constraints – SOFA. SOFA - Topic Tag: constraints. /constraint-solver; . /feed; ; Constraint Solver – SOFA. SOFA - Topic Tag: Constraint Solver. /contact; . /feed; ; contact – SOFA. SOFA - Topic Tag: contact. /contact-force; . /feed; ; contact force – SOFA. SOFA - Topic Tag: contact force. /contactlistener; . /feed; ; contactlistener – SOFA. SOFA - Topic Tag: contactlistener. /contain; . /feed; ; contain – SOFA. SOFA - Topic Tag: contain. /continuum-robots-beam-adaptater-constraints; . /feed; ; continuum robots; beam adaptater; constraints – SOFA. SOFA - Topic Tag: continuum robots; beam adaptater; constraints. /control; . /feed; ; control – SOFA. SOFA - Topic Tag: control. /controller; . /feed; ; Controller – SOFA. SOFA - Topic Tag: Controller. /control-xml-variables-in-c-or-python; . /feed; ; Control xml variables in C++ or Python. – SOFA. SOFA - Topic Tag: Control xml variables in C++ or Python. /coulomb; . /feed; ; coulomb – SOFA. SOFA - Topic Tag: coulomb. /cpp-controller; . /feed; ; Cpp controller – SOFA. SOFA - Topic Tag: Cpp controller. /cpp-make-error; . /feed; ; cpp make error – SOFA. SOFA - Topic Tag: cpp make error. /cpp-plugins; . /feed; ; cpp plugins – SOFA. SOFA - Topic Tag: cpp plugins. /crash; . /feed; ; crash – SOFA. SOFA - Topic Tag: crash. /crevice; . /feed; ; crevice – SOFA. SOFA - Topic Tag: crevice. /cube; . /feed; ; cube – SOFA. SOFA - Topic Tag: cube. /cuda; . /feed; ; Cuda – SOFA. SOFA - Topic Tag: Cuda. /cuda-benchmark; . /feed; ; CUDA Benchmark – SOFA. SOFA - Topic Tag:,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/index-wcopy.html:437483,adapt,adaptater,437483,index-wcopy.html,https://www.sofa-framework.org,https://www.sofa-framework.org/index-wcopy.html,1,['adapt'],['adaptater']
Energy Efficiency," _ForceFieldType >::node. ◆ TEST_ALL. template<typename _ForceFieldType > . const unsigned char sofa::ForceField_test< _ForceFieldType >::TEST_ALL = UCHAR_MAX. static . testing everything . ◆ TEST_POTENTIAL_ENERGY. template<typename _ForceFieldType > . const unsigned char sofa::ForceField_test< _ForceFieldType >::TEST_POTENTIAL_ENERGY = 1. static . testing getPotentialEnergy function. The tests will only work with conservative forces (if dissipative forces such as viscosity or damping are computed, the test is wrong) . Constructor details. ◆ ForceField_test() [1/2]. template<typename _ForceFieldType > . sofa::ForceField_test< _ForceFieldType >::ForceField_test ; (; ). inline . } ; Create a scene with a node, a state and a forcefield.; . ◆ ForceField_test() [2/2]. template<typename _ForceFieldType > . sofa::ForceField_test< _ForceFieldType >::ForceField_test ; (; std::string ; filename). inline . Create a scene from a xml file. . Function details. ◆ run_test(). template<typename _ForceFieldType > . void sofa::ForceField_test< _ForceFieldType >::run_test ; (; const VecCoord & ; x, . const VecDeriv & ; v, . const VecDeriv & ; ef, . bool ; initScene = true . ). inline . Given positions and velocities, checks that the expected forces are obtained, and that a small change of positions generates the corresponding change of forces. ; Parameters. xpositions ; vvelocities ; efexpected forces This function first checks that the expected forces are obtained. Then, it checks getPotentialEnergy. And then, it checks the stiffness, unless member checkStiffness is set to false. A new position is created using a small random change, and the new force is computed. The change of potential energy is compared to the dot product between displacement and force. The change of force is compared to the change computed by function addDForce, and to the product of the position change with the stiffness matrix. . sofaForceField_test; Generated on Mon Nov 11 2024 02:19:50 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1_force_field__test.html:8979,energy,energy,8979,api/master/sofa/html/structsofa_1_1_force_field__test.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1_force_field__test.html,1,['energy'],['energy']
Energy Efficiency," _fbosofa::gui::qt::GLPickHandlerprotected; _fboAllocatedsofa::gui::qt::GLPickHandlerprotected; _fboParamssofa::gui::qt::GLPickHandlerprotected; activateRay(int width, int height, core::objectmodel::BaseNode *root)sofa::gui::common::PickHandler; addCallBack(CallBackPicker *c)sofa::gui::common::PickHandlerinline; allocateSelectionBuffer(int width, int height) overridesofa::gui::qt::GLPickHandlervirtual; callbackssofa::gui::common::PickHandlerprotected; changeOperation(sofa::component::setting::MouseButtonSetting *setting)sofa::gui::common::PickHandler; changeOperation(MOUSE_BUTTON button, const std::string &op)sofa::gui::common::PickHandler; clearCallBacks()sofa::gui::common::PickHandlerinline; deactivateRay()sofa::gui::common::PickHandler; destroySelectionBuffer() overridesofa::gui::qt::GLPickHandlervirtual; findCollision()sofa::gui::common::PickHandlerprotectedvirtual; findCollisionUsingBruteForce(const type::Vec3 &origin, const type::Vec3 &direction, double maxLength, core::objectmodel::BaseNode *root)sofa::gui::common::PickHandlerstatic; findCollisionUsingBruteForce()sofa::gui::common::PickHandlerprotected; findCollisionUsingColourCoding(const type::Vec3 &origin, const type::Vec3 &direction) overridesofa::gui::qt::GLPickHandlervirtual; sofa::gui::common::PickHandler::findCollisionUsingColourCoding()sofa::gui::common::PickHandlerprotected; findCollisionUsingPipeline()sofa::gui::common::PickHandlerprotected; getCallBackPicker()sofa::gui::common::PickHandlerinline; getInteraction()sofa::gui::common::PickHandler; getLastPicked()sofa::gui::common::PickHandlerinline; getOperation(MOUSE_BUTTON button)sofa::gui::common::PickHandlerinline; GLPickHandler(double defaultLength=1000000)sofa::gui::qt::GLPickHandler; handleMouseEvent(MOU",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_g_l_pick_handler-members.html:560,allocate,allocateSelectionBuffer,560,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_g_l_pick_handler-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_g_l_pick_handler-members.html,1,['allocate'],['allocateSelectionBuffer']
Energy Efficiency," activateRay(int width, int height, core::objectmodel::BaseNode *root)sofa::gui::common::PickHandler; addCallBack(CallBackPicker *c)sofa::gui::common::PickHandlerinline; allocateSelectionBuffer(int width, int height)sofa::gui::common::PickHandlervirtual; callbackssofa::gui::common::PickHandlerprotected; changeOperation(sofa::component::setting::MouseButtonSetting *setting)sofa::gui::common::PickHandler; changeOperation(MOUSE_BUTTON button, const std::string &op)sofa::gui::common::PickHandler; clearCallBacks()sofa::gui::common::PickHandlerinline; deactivateRay()sofa::gui::common::PickHandler; destroySelectionBuffer()sofa::gui::common::PickHandlervirtual; findCollision()sofa::gui::common::PickHandlerprotectedvirtual; findCollisionUsingBruteForce(const type::Vec3 &origin, const type::Vec3 &direction, double maxLength, core::objectmodel::BaseNode *root)sofa::gui::common::PickHandlerstatic; findCollisionUsingBruteForce()sofa::gui::common::PickHandlerprotected; findCollisionUsingColourCoding(const type::Vec3 &origin, const type::Vec3 &direction)sofa::gui::common::PickHandlervirtual; findCollisionUsingColourCoding()sofa::gui::common::PickHandlerprotected; findCollisionUsingPipeline()sofa::gui::common::PickHandlerprotected; getCallBackPicker()sofa::gui::common::PickHandlerinline; getInteraction()sofa::gui::common::PickHandler; getLastPicked()sofa::gui::common::PickHandlerinline; getOperation(MOUSE_BUTTON button)sofa::gui::common::PickHandlerinline; handleMouseEvent(MOUSE_STATUS status, MOUSE_BUTTON button)sofa::gui::common::PickHandler; init(core::objectmodel::BaseNode *root)sofa::gui::common::PickHandler; instanceComponentssofa::gui::common::PickHandlerprotected; interactionsofa::gui::common::PickHandlerprotected; interactorInUs",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1common_1_1_pick_handler-members.html:420,allocate,allocateSelectionBuffer,420,api/master/sofa/html/classsofa_1_1gui_1_1common_1_1_pick_handler-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1common_1_1_pick_handler-members.html,1,['allocate'],['allocateSelectionBuffer']
Energy Efficiency," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; allocateSystem() overridesofa::component::linearsystem::CompositeLinearSystem< TMatrix, TVector >protectedvirtual; assembleSystem(const core::MechanicalParams *) overridesofa::component::linearsystem::CompositeLinearSystem< TMatrix, TVector >protectedvirtual; associateLocalMatrixToComponents(const core::MechanicalParams *)sofa::component::linearsystem::TypedMatrixLinearSystem< TMatrix, TVector >inlineprotectedvirtual; Base()sofa::core::objectmodel::Baseprotected; BaseMatrixLinearSystem()sofa::core::behavior::BaseMatrixLinearSystemprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; buildSystemMatrix(const core::MechanicalParams *mparams)sofa::core::behavior::BaseMatrixLinearSystem; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprot",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsystem_1_1_composite_linear_system-members.html:1327,allocate,allocateSystem,1327,api/master/sofa/html/classsofa_1_1component_1_1linearsystem_1_1_composite_linear_system-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsystem_1_1_composite_linear_system-members.html,1,['allocate'],['allocateSystem']
Energy Efficiency," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; allocateSystem()sofa::component::linearsystem::TypedMatrixLinearSystem< TMatrix, TVector >protectedvirtual; applyProjectiveConstraints(const core::MechanicalParams *mparams) overridesofa::component::linearsystem::ConstantSparsityPatternSystem< TMatrix, TVector >virtual; assembleMappedMatrices(const core::MechanicalParams *mparams)sofa::component::linearsystem::MatrixLinearSystem< TMatrix, TVector >protectedvirtual; assemblePrecomputedMappedMassMatrix(const core::MechanicalParams *mparams, linearalgebra::BaseMatrix *destination)sofa::component::linearsystem::MatrixLinearSystem< TMatrix, TVector >protected; assembleSystem(const core::MechanicalParams *mparams) overridesofa::component::linearsystem::MatrixLinearSystem< TMatrix, TVector >protectedvirtual; associateLocalMatrixTo(sofa::core::matrixaccumulator::get_component_type< c > *component, const core::MechanicalParams *mparams)sofa::component::linearsystem::MatrixLinearSystem< TMatrix, TVector >protected; associateLocalMatrixToComponents(const",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsystem_1_1_constant_sparsity_pattern_system-members.html:1343,allocate,allocateSystem,1343,api/master/sofa/html/classsofa_1_1component_1_1linearsystem_1_1_constant_sparsity_pattern_system-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsystem_1_1_constant_sparsity_pattern_system-members.html,1,['allocate'],['allocateSystem']
Energy Efficiency," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; allocateSystem()sofa::component::linearsystem::TypedMatrixLinearSystem< TMatrix, TVector >protectedvirtual; applyProjectiveConstraints(const core::MechanicalParams *mparams)sofa::component::linearsystem::MatrixLinearSystem< TMatrix, TVector >protectedvirtual; assembleMappedMatrices(const core::MechanicalParams *mparams)sofa::component::linearsystem::MatrixLinearSystem< TMatrix, TVector >protectedvirtual; assemblePrecomputedMappedMassMatrix(const core::MechanicalParams *mparams, linearalgebra::BaseMatrix *destination)sofa::component::linearsystem::MatrixLinearSystem< TMatrix, TVector >protected; assembleSystem(const core::MechanicalParams *mparams) overridesofa::component::linearsystem::MatrixLinearSystem< TMatrix, TVector >protectedvirtual; associateLocalMatrixTo(sofa::core::matrixaccumulator::get_component_type< c > *component, const core::MechanicalParams *mparams)sofa::component::linearsystem::MatrixLinearSystem< TMatrix, TVector >protected; associateLocalMatrixToComponents(const core::Mech",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsystem_1_1_matrix_linear_system-members.html:1321,allocate,allocateSystem,1321,api/master/sofa/html/classsofa_1_1component_1_1linearsystem_1_1_matrix_linear_system-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsystem_1_1_matrix_linear_system-members.html,1,['allocate'],['allocateSystem']
Energy Efficiency," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; allocateSystem()sofa::component::linearsystem::TypedMatrixLinearSystem< TMatrix, TVector >protectedvirtual; assembleSystem(const core::MechanicalParams *) overridesofa::component::linearsystem::MatrixFreeSystem< TMatrix, TVector >inlinevirtual; associateLocalMatrixToComponents(const core::MechanicalParams *) overridesofa::component::linearsystem::MatrixFreeSystem< TMatrix, TVector >inlinevirtual; Base()sofa::core::objectmodel::Baseprotected; BaseMatrixLinearSystem()sofa::core::behavior::BaseMatrixLinearSystemprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; buildSystemMatrix(const core::MechanicalParams *mparams)sofa::core::behavior::BaseMatrixLinearSystem; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLin",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsystem_1_1_matrix_free_system-members.html:1317,allocate,allocateSystem,1317,api/master/sofa/html/classsofa_1_1component_1_1linearsystem_1_1_matrix_free_system-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsystem_1_1_matrix_free_system-members.html,1,['allocate'],['allocateSystem']
Energy Efficiency," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; allocateSystem()sofa::component::linearsystem::TypedMatrixLinearSystem< TMatrix, TVector >protectedvirtual; assembleSystem(const core::MechanicalParams *)sofa::core::behavior::BaseMatrixLinearSystemprotectedvirtual; associateLocalMatrixToComponents(const core::MechanicalParams *)sofa::component::linearsystem::TypedMatrixLinearSystem< TMatrix, TVector >inlineprotectedvirtual; Base()sofa::core::objectmodel::Baseprotected; BaseMatrixLinearSystem()sofa::core::behavior::BaseMatrixLinearSystemprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; buildSystemMatrix(const core::MechanicalParams *mparams)sofa::core::behavior::BaseMatrixLinearSystem; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsolver_1_1preconditioner_1_1_precomputed_matrix_system-members.html:1363,allocate,allocateSystem,1363,api/master/sofa/html/classsofa_1_1component_1_1linearsolver_1_1preconditioner_1_1_precomputed_matrix_system-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsolver_1_1preconditioner_1_1_precomputed_matrix_system-members.html,3,['allocate'],['allocateSystem']
Energy Efficiency," allocateSystem()sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >; clearSystem()sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >; clearSystem()sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >; clearSystem()sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >; createSystemMatrix()sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >; createSystemRHSVector()sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >; createSystemRHSVector()sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >; createSystemRHSVector()sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >; createSystemSolutionVector()sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >; createSystemSolutionVector()sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >; createSystemSolutionVector()sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >; getMatrix() constsofa::component::linearsystem::LinearSystemData< TMatrix, TVector >inline; getRHS() constsofa::component::linearsystem::LinearSystemData< TMatrix, TVector >inline; getSolution() constsofa::component::linearsystem::LinearSystemData< TMatrix, TVector >inline; matrixsofa::component::linearsystem::LinearSystemData< TMatrix, TVector >; MatrixType typedefsofa::component::linearsystem::LinearSystemData< TMatrix, TVector >; resizeSystem(sofa::Size n)sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >; resizeSystem(sofa::Size n)sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >; resizeSystem(sofa::Size n)sofa::component::linearsystem::Linea",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_linear_system_data-members.html:325,allocate,allocateSystem,325,api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_linear_system_data-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_linear_system_data-members.html,1,['allocate'],['allocateSystem']
Energy Efficiency," associations. Keep in mind that the file are still monitored. More...;  ; static void removeFileListener (const std::string &filename, FileEventListener *listener);  remove the provided listener for a given file If the listener is not existing, do nothing If the listener is nullptr, do nothing If the listener is associated with one or more file...remove all the associations. Keep in mind that the file are still monitored. More...;  . Function details. ◆ addFile() [1/2]. int sofa::helper::system::FileMonitor::addFile ; (; const std::string & ; directoryname, . const std::string & ; filename, . FileEventListener * ; listener . ). static . add a new path and file to monitor and a listener to be triggered in case of change. returns >= 0 if the file was successfully added returns < 0 in case of error. . ◆ addFile() [2/2]. int sofa::helper::system::FileMonitor::addFile ; (; const std::string & ; filename, . FileEventListener * ; listener . ). static . add a new filepath to monitor and a listener to be triggered in case of change. returns >= 0 if the file was successfully added returns < 0 in case of error. . ◆ removeFileListener(). void sofa::helper::system::FileMonitor::removeFileListener ; (; const std::string & ; filename, . FileEventListener * ; listener . ). static . remove the provided listener for a given file If the listener is not existing, do nothing If the listener is nullptr, do nothing If the listener is associated with one or more file...remove all the associations. Keep in mind that the file are still monitored. . ◆ removeListener(). void sofa::helper::system::FileMonitor::removeListener ; (; FileEventListener * ; listener). static . remove the provided listener. If the listener is not existing, do nothing If the listener is nullptr, do nothing If the listener is associated with one or more file...remove all the associations. Keep in mind that the file are still monitored. . ◆ updates(). int sofa::helper::system::FileMonitor::updates ; (; int ; timeout = 1",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_file_monitor.html:2380,monitor,monitor,2380,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_file_monitor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_file_monitor.html,1,['monitor'],['monitor']
Energy Efficiency, bFactor() constsofa::core::MechanicalParamsinline; checkValidStorage() constsofa::core::ExecParams; defaultInstance()sofa::core::MechanicalParamsstatic; df() constsofa::core::MechanicalParamsinline; df()sofa::core::MechanicalParamsinline; dt() constsofa::core::MechanicalParamsinline; dx() constsofa::core::MechanicalParamsinline; dx()sofa::core::MechanicalParamsinline; energy() constsofa::core::MechanicalParamsinline; EXEC_DEBUG enum valuesofa::core::ExecParams; EXEC_DEFAULT enum valuesofa::core::ExecParams; EXEC_GPU enum valuesofa::core::ExecParams; EXEC_GRAPH enum valuesofa::core::ExecParams; EXEC_NONE enum valuesofa::core::ExecParams; execMode() constsofa::core::ExecParamsinline; ExecMode enum namesofa::core::ExecParams; ExecParams()sofa::core::ExecParamsinline; f() constsofa::core::MechanicalParamsinline; f()sofa::core::MechanicalParamsinline; getKFactorUsed() constsofa::core::MechanicalParamsinline; implicit() constsofa::core::MechanicalParamsinline; implicitPosition() constsofa::core::MechanicalParamsinline; implicitVelocity() constsofa::core::MechanicalParamsinline; kFactor() constsofa::core::MechanicalParamsinline; kFactorIncludingRayleighDamping(SReal rayleighStiffness) constsofa::core::MechanicalParamsinline; m_bFactorsofa::core::MechanicalParamsprotected; m_dfsofa::core::MechanicalParamsprotected; m_dtsofa::core::MechanicalParamsprotected; m_dxsofa::core::MechanicalParamsprotected; m_energysofa::core::MechanicalParamsprotected; m_fsofa::core::MechanicalParamsprotected; m_implicitsofa::core::MechanicalParamsprotected; m_implicitPositionsofa::core::MechanicalParamsprotected; m_implicitVelocitysofa::core::MechanicalParamsprotected; m_kFactorsofa::core::MechanicalParamsprotected; m_kFactorUsedsofa::core::MechanicalPara,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_mechanical_params-members.html:618,energy,energy,618,api/master/sofa/html/classsofa_1_1core_1_1_mechanical_params-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_mechanical_params-members.html,1,['energy'],['energy']
Energy Efficiency," char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, BaseData::DataFlags dataFlags);  Helper method used by initData() More...;  ; template<class T > ; void initData0 (Data< T > *field, typename Data< T >::InitData &res, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  . Attribute details. ◆ d_DOFsV. Data< type::vector<unsigned int> > sofa::component::playback::WriteState::d_DOFsV. set the velocity DOFs to write . ◆ d_DOFsX. Data< type::vector<unsigned int> > sofa::component::playback::WriteState::d_DOFsX. set the position DOFs to write . ◆ d_filename. sofa::core::objectmodel::DataFileName sofa::component::playback::WriteState::d_filename. ◆ d_keperiod. Data< double > sofa::component::playback::WriteState::d_keperiod. set the period to measure the kinetic energy increase . ◆ d_period. Data< double > sofa::component::playback::WriteState::d_period. period between outputs . ◆ d_stopAt. Data< double > sofa::component::playback::WriteState::d_stopAt. stop the simulation when the given threshold is reached . ◆ d_time. Data< type::vector<double> > sofa::component::playback::WriteState::d_time. set time to write outputs (by default export at t=0) . ◆ d_writeF. Data< bool > sofa::component::playback::WriteState::d_writeF. flag enabling output of F vector . ◆ d_writeV. Data< bool > sofa::component::playback::WriteState::d_writeV. flag enabling output of V vector . ◆ d_writeX. Data< bool > sofa::component::playback::WriteState::d_writeX. flag enabling output of X vector . ◆ d_writeX0. Data< bool > sofa::component::playback::WriteState::d_writeX0. flag enabling output of X0 vector . ◆ firstExport. bool sofa::component::playback::WriteState::firstExport. protected . ◆ kineticEnergyThresholdReached. bool sofa::component::playback::WriteSt",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1playback_1_1_write_state.html:15028,energy,energy,15028,api/master/sofa/html/classsofa_1_1component_1_1playback_1_1_write_state.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1playback_1_1_write_state.html,1,['energy'],['energy']
Energy Efficiency," const MaterialParameters< DataTypes > & ; , . const MatrixSym & ; , . MatrixSym & ;  . ). inlineoverridevirtual . computes the Elasticity Tensor of the current configuration ; Reimplemented from sofa::component::solidmechanics::fem::hyperelastic::material::HyperelasticMaterial< DataTypes >. ◆ deriveSPKTensor(). template<class DataTypes > . void sofa::component::solidmechanics::fem::hyperelastic::material::NeoHookean< DataTypes >::deriveSPKTensor ; (; StrainInformation< DataTypes > * ; sinfo, . const MaterialParameters< DataTypes > & ; param, . MatrixSym & ; SPKTensorGeneral . ). inlineoverridevirtual . Compute the second Piola-Kirchhoff stress tensor in terms of the right Cauchy-Green deformation tensor ; Reimplemented from sofa::component::solidmechanics::fem::hyperelastic::material::HyperelasticMaterial< DataTypes >. ◆ ElasticityTensor(). template<class DataTypes > . void sofa::component::solidmechanics::fem::hyperelastic::material::NeoHookean< DataTypes >::ElasticityTensor ; (; StrainInformation< DataTypes > * ; sinfo, . const MaterialParameters< DataTypes > & ; param, . Matrix6 & ; outputTensor . ). inlineoverridevirtual . Reimplemented from sofa::component::solidmechanics::fem::hyperelastic::material::HyperelasticMaterial< DataTypes >. ◆ getStrainEnergy(). template<class DataTypes > . Real sofa::component::solidmechanics::fem::hyperelastic::material::NeoHookean< DataTypes >::getStrainEnergy ; (; StrainInformation< DataTypes > * ; sinfo, . const MaterialParameters< DataTypes > & ; param . ). inlineoverridevirtual . Strain energy density function for a compressible Neo-Hookean material, taken from: ""Javier Bonet and Richard D Wood. 2008. Nonlinear continuum mechanics for; finite element analysis. Cambridge University Press"" ; Reimplemented from sofa::component::solidmechanics::fem::hyperelastic::material::HyperelasticMaterial< DataTypes >. sofacomponentsolidmechanicsfemhyperelasticmaterialNeoHookean; Generated on Mon Nov 11 2024 03:02:25 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_neo_hookean.html:3584,energy,energy,3584,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_neo_hookean.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_neo_hookean.html,1,['energy'],['energy']
Energy Efficiency," const core::VecIdProperties & ; properties = {} . ). overridevirtual . Reallocate a new temporary vector. ; Implements sofa::core::behavior::BaseMechanicalState. ◆ vReallocImpl(). template<class DataTypes > . template<core::VecType vtype> . void sofa::component::statecontainer::MechanicalObject< DataTypes >::vReallocImpl ; (; core::TVecId< vtype, core::V_WRITE > ; v, . const core::VecIdProperties & ; properties . ). protected . Generic implementation of the method vRealloc. . ◆ vSize(). template<class DataTypes > . Size sofa::component::statecontainer::MechanicalObject< DataTypes >::vSize ; (; const core::ExecParams * ; params, . core::ConstVecId ; v . ). overridevirtual . Get vector size. ; Implements sofa::core::behavior::BaseMechanicalState. ◆ vSum(). template<class DataTypes > . SReal sofa::component::statecontainer::MechanicalObject< DataTypes >::vSum ; (; const core::ExecParams * ; params, . core::ConstVecId ; a, . unsigned ; l . ). overridevirtual . Sum of the entries of state vector a at the power of l>0. This is used to compute the l-norm of the vector. ; Implements sofa::core::behavior::BaseMechanicalState. ◆ vThreshold(). template<class DataTypes > . void sofa::component::statecontainer::MechanicalObject< DataTypes >::vThreshold ; (; core::VecId ; a, . SReal ; threshold . ). overridevirtual . Apply a threshold (lower bound) to all entries. ; Implements sofa::core::behavior::BaseMechanicalState. ◆ write() [1/3]. template<class DataTypes > . Data< typename MechanicalObject< DataTypes >::MatrixDeriv > * sofa::component::statecontainer::MechanicalObject< DataTypes >::write ; (; core::MatrixDerivId ; v). overridevirtual . Implements sofa::core::State< DataTypes >. ◆ write() [2/3]. template<class DataTypes > . Data< typename MechanicalObject< DataTypes >::VecCoord > * sofa::component::statecontainer::MechanicalObject< DataTypes >::write ; (; core::VecCoordId ; v). overridevirtual . Implements sofa::core::State< DataTypes >. ◆ write() [3/3]. template<class Data",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1statecontainer_1_1_mechanical_object.html:76938,power,power,76938,api/master/sofa/html/classsofa_1_1component_1_1statecontainer_1_1_mechanical_object.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1statecontainer_1_1_mechanical_object.html,1,['power'],['power']
Energy Efficiency," core::ExecParams *params, core::VecCoordId v, core::ConstVecCoordId vSrc) override;  Free a temporary vector. More...;  ; void vInit (const core::ExecParams *params, core::VecDerivId v, core::ConstVecDerivId vSrc) override;  Initialize an unset vector. More...;  ; void vOp (const core::ExecParams *params, core::VecId v, core::ConstVecId a=core::ConstVecId::null(), core::ConstVecId b=core::ConstVecId::null(), SReal f=1.0) override;  Initialize an unset vector. More...;  ; void vMultiOp (const core::ExecParams *params, const VMultiOp &ops) override;  Perform a sequence of linear vector accumulation operation $r_i = sum_j (v_j*f_{ij})$. More...;  ; void vThreshold (core::VecId a, SReal threshold) override;  Apply a threshold (lower bound) to all entries. More...;  ; SReal vDot (const core::ExecParams *params, core::ConstVecId a, core::ConstVecId b) override;  Compute the scalar products between two vectors. More...;  ; SReal vSum (const core::ExecParams *params, core::ConstVecId a, unsigned l) override;  Sum of the entries of state vector a at the power of l>0. This is used to compute the l-norm of the vector. More...;  ; SReal vMax (const core::ExecParams *params, core::ConstVecId a) override;  Maximum of the absolute values of the entries of state vector a. This is used to compute the infinite-norm of the vector. More...;  ; Size vSize (const core::ExecParams *params, core::ConstVecId v) override;  Get vector size. More...;  ; void resetForce (const core::ExecParams *params, core::VecDerivId f=core::VecDerivId::force()) override;  Set F = 0. More...;  ; void resetAcc (const core::ExecParams *params, core::VecDerivId a=core::VecDerivId::dx()) override;  Set Acc =0. More...;  ; void resetConstraint (const core::ConstraintParams *cparams) override;  Reset the constraint matrix. More...;  ; void getConstraintJacobian (const core::ConstraintParams *cparams, sofa::linearalgebra::BaseMatrix *J, unsigned int &off) override;  build the jacobian of the constraint in a baseMatr",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1statecontainer_1_1_mechanical_object.html:16449,power,power,16449,api/master/sofa/html/classsofa_1_1component_1_1statecontainer_1_1_mechanical_object.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1statecontainer_1_1_mechanical_object.html,1,['power'],['power']
Energy Efficiency, displacement export. /distortion; . /feed; ; Distortion – SOFA. SOFA - Topic Tag: Distortion. /dlls-issue; . /feed; ; DLLs issue – SOFA. SOFA - Topic Tag: DLLs issue. /docker; . /feed; ; docker – SOFA. SOFA - Topic Tag: docker. /documentation; . /feed; ; documentation – SOFA. SOFA - Topic Tag: documentation. /documentation-color-alpha; . /feed; ; documentation color alpha – SOFA. SOFA - Topic Tag: documentation color alpha. /doe; . /feed; ; doe – SOFA. SOFA - Topic Tag: doe. /dynamic-systems; . /feed; ; Dynamic systems – SOFA. SOFA - Topic Tag: Dynamic systems. /edge_removal; . /feed; ; edge_removal – SOFA. SOFA - Topic Tag: edge_removal. /eigen; . /feed; ; Eigen – SOFA. SOFA - Topic Tag: Eigen. /elastic; . /feed; ; Elastic – SOFA. SOFA - Topic Tag: Elastic. /elasticity; . /feed; ; elasticity – SOFA. SOFA - Topic Tag: elasticity. /elastoplastic; . /feed; ; Elastoplastic – SOFA. SOFA - Topic Tag: Elastoplastic. /energy; . /feed; ; Energy – SOFA. SOFA - Topic Tag: Energy. /engine-data-update-energy; . /feed; ; engine data update energy – SOFA. SOFA - Topic Tag: engine data update energy. /error; . /feed; ; error – SOFA. SOFA - Topic Tag: error. /error-5; . /feed; ; Error 5 – SOFA. SOFA - Topic Tag: Error 5. /error-determination; . /feed; ; error determination – SOFA. SOFA - Topic Tag: error determination. /event; . /feed; ; event – SOFA. SOFA - Topic Tag: event. /events; . /feed; ; events – SOFA. SOFA - Topic Tag: events. /execution-time; . /feed; ; Execution time – SOFA. SOFA - Topic Tag: Execution time. /experience; . /feed; ; experience – SOFA. SOFA - Topic Tag: experience. /export; . /feed; ; export – SOFA. SOFA - Topic Tag: export. /exporter-obj-files-normals-estimation; . /feed; ; exporter ; OBJ files ; normals estimation – SOFA. SOFA - Topic Tag: exporter ; OBJ files ; normals estimation. /export-mesh; . /feed; ; export mesh – SOFA. SOFA - Topic Tag: export mesh. /external; . /feed; ; external – SOFA. SOFA - Topic Tag: external. /external-data-com-port; . /fee,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/index-wcopy.html:441457,energy,energy,441457,index-wcopy.html,https://www.sofa-framework.org,https://www.sofa-framework.org/index-wcopy.html,1,['energy'],['energy']
Energy Efficiency," endBlockRow() or endSortedBlockRow() to validate the row insertion. See alsocreateBlock( unsigned column, const Block& b ) . endBlockRow() ; Warningempty rows should be created with a call to beginBlockRow + endSortedBlockRow . ◆ copyFrom(). template<class InDataTypes , class OutDataTypes > . template<class AnyReal > . void sofa::linearalgebra::EigenSparseMatrix< InDataTypes, OutDataTypes >::copyFrom ; (; const CompressedRowSparseMatrix< type::Mat< Nout, Nin, AnyReal > > & ; crs). inline . Set from a CompressedRowSparseMatrix. Preconditioncrs must be compressed . ◆ createBlock(). template<class InDataTypes , class OutDataTypes > . void sofa::linearalgebra::EigenSparseMatrix< InDataTypes, OutDataTypes >::createBlock ; (; unsigned ; column, . const Block & ; b . ). inline . Create a block in the current row, which must be previously initialized using beginBlockRow(unsigned row).; If the blocks are NOT created in column order, call endBlockRow(). If the blocks are given in column order, endSortedBlockRow() will be more efficient.; The blocks are not actually created in the matrix until method endBlockRow()/endSortedBlockRow() is called.; Warningthe block must NOT already exist . ◆ endBlockRow(). template<class InDataTypes , class OutDataTypes > . void sofa::linearalgebra::EigenSparseMatrix< InDataTypes, OutDataTypes >::endBlockRow ; (; ). inline . Finalize the creation of the current block row. See alsobeginBlockRow(unsigned row) . createBlock( unsigned column, const Block& b ); If the block have been given in column order, endSortedBlockRow() is more efficient. . ◆ endSortedBlockRow(). template<class InDataTypes , class OutDataTypes > . void sofa::linearalgebra::EigenSparseMatrix< InDataTypes, OutDataTypes >::endSortedBlockRow ; (; ). inline . Finalize the creation of the current block row with blocks given in column order. See alsobeginBlockRow(unsigned row) . createBlock( unsigned column, const Block& b ) in column order . ◆ insertBackBlock(). template<class InDataT",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html:23729,efficient,efficient,23729,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html,1,['efficient'],['efficient']
Energy Efficiency," in sofa::component::statecontainer::MechanicalObject< DataTypes >, and sofa::component::statecontainer::MechanicalObject< T >. ◆ vRealloc() [2/2]. virtual void sofa::core::behavior::BaseMechanicalState::vRealloc ; (; const ExecParams * ; params, . VecDerivId ; v, . const core::VecIdProperties & ; properties = {} . ). pure virtual . Reallocate a new temporary vector. ; Implemented in sofa::component::statecontainer::MechanicalObject< DataTypes >, and sofa::component::statecontainer::MechanicalObject< T >. ◆ vSize(). virtual Size sofa::core::behavior::BaseMechanicalState::vSize ; (; const ExecParams * ; params, . ConstVecId ; v . ). pure virtual . Get vector size. ; Implemented in sofa::component::statecontainer::MechanicalObject< DataTypes >, and sofa::component::statecontainer::MechanicalObject< T >. ◆ vSum(). virtual SReal sofa::core::behavior::BaseMechanicalState::vSum ; (; const ExecParams * ; params, . ConstVecId ; a, . unsigned ; l . ). pure virtual . Sum of the entries of state vector a at the power of l>0. This is used to compute the l-norm of the vector. ; Implemented in sofa::component::statecontainer::MechanicalObject< DataTypes >, and sofa::component::statecontainer::MechanicalObject< T >. ◆ vThreshold(). virtual void sofa::core::behavior::BaseMechanicalState::vThreshold ; (; VecId ; a, . SReal ; threshold . ). pure virtual . Apply a threshold (lower bound) to all entries. ; Implemented in sofa::component::statecontainer::MechanicalObject< DataTypes >, and sofa::component::statecontainer::MechanicalObject< T >. ◆ writeState(). void sofa::core::behavior::BaseMechanicalState::writeState ; (; std::ostream & ; out). virtual . Write current state to the given output stream. ; Reimplemented in sofa::component::statecontainer::MechanicalObject< DataTypes >, and sofa::component::statecontainer::MechanicalObject< T >. ◆ writeVec(). virtual void sofa::core::behavior::BaseMechanicalState::writeVec ; (; ConstVecId ; v, . std::ostream & ; out . ). pure virtual . Impl",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_mechanical_state.html:46656,power,power,46656,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_mechanical_state.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_mechanical_state.html,1,['power'],['power']
Energy Efficiency," is more efficiently computed using the square root of the dot product. ; Implements sofa::core::behavior::BaseVectorOperations. ◆ v_op(). void sofa::simulation::common::VectorOperations::v_op ; (; core::MultiVecId ; v, . core::ConstMultiVecId ; a, . core::ConstMultiVecId ; b, . SReal ; f = 1.0 . ). overridevirtual . v=a+b*f ; Implements sofa::core::behavior::BaseVectorOperations. ◆ v_peq(). void sofa::simulation::common::VectorOperations::v_peq ; (; core::MultiVecId ; v, . core::ConstMultiVecId ; a, . SReal ; f = 1.0 . ). overridevirtual . v+=f*a ; Implements sofa::core::behavior::BaseVectorOperations. ◆ v_realloc() [1/2]. void sofa::simulation::common::VectorOperations::v_realloc ; (; sofa::core::MultiVecCoordId & ; id, . bool ; interactionForceField = false, . bool ; propagate = false, . const core::VecIdProperties & ; properties = {} . ). overridevirtual . keep already allocated vectors and allocates others. If interactionForceField, also allocates mechanical states linked by an InteractionForceField ; Implements sofa::core::behavior::BaseVectorOperations. ◆ v_realloc() [2/2]. void sofa::simulation::common::VectorOperations::v_realloc ; (; sofa::core::MultiVecDerivId & ; id, . bool ; interactionForceField = false, . bool ; propagate = false, . const core::VecIdProperties & ; properties = {} . ). overridevirtual . Implements sofa::core::behavior::BaseVectorOperations. ◆ v_size(). size_t sofa::simulation::common::VectorOperations::v_size ; (; core::MultiVecId ; v). overridevirtual . Implements sofa::core::behavior::BaseVectorOperations. ◆ v_teq(). void sofa::simulation::common::VectorOperations::v_teq ; (; core::MultiVecId ; v, . SReal ; f . ). overridevirtual . v*=f ; Implements sofa::core::behavior::BaseVectorOperations. ◆ v_threshold(). void sofa::simulation::common::VectorOperations::v_threshold ; (; core::MultiVecId ; a, . SReal ; threshold . ). overridevirtual . nullify the values below the given threshold ; Implements sofa::core::behavior::BaseVectorOperatio",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_vector_operations.html:7748,allocate,allocates,7748,api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_vector_operations.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_vector_operations.html,1,['allocate'],['allocates']
Energy Efficiency," last attached point free (only used for Rigid DOFs) More...;  ; Data< bool > f_restRotations;  true to use rest rotations local offsets (only used for Rigid DOFs) More...;  ; Data< type::Vec3 > f_lastPos;  position at which the attach constraint should become inactive More...;  ; Data< type::Vec3 > f_lastDir;  direction from lastPos at which the attach coustraint should become inactive More...;  ; Data< bool > f_clamp;  true to clamp particles at lastPos instead of freeing them. More...;  ; Data< Real > f_minDistance;  the constraint become inactive if the distance between the points attached is bigger than minDistance. More...;  ; Data< Real > d_positionFactor;  IN: Factor applied to projection of position. More...;  ; Data< Real > d_velocityFactor;  IN: Factor applied to projection of velocity. More...;  ; Data< Real > d_responseFactor;  IN: Factor applied to projection of force/acceleration. More...;  ; Data< type::vector< Real > > d_constraintFactor;  Vector of factors adapting the application of the constraint per pair of points (0 -> the constraint is released. 1 -> the constraint is fully constrained) More...;  ; type::vector< bool > activeFlags;  ; type::vector< bool > constraintReleased;  ; type::vector< Real > lastDist;  ; type::vector< type::Quat< SReal > > restRotations;  ;  Public Attributes inherited from sofa::core::behavior::PairInteractionProjectiveConstraintSet< DataTypes >; Data< SReal > endTime;  The constraint stops acting after the given value. Use a negative value for infinite constraints. More...;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at run",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_attach_projective_constraint.html:2518,adapt,adapting,2518,api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_attach_projective_constraint.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_attach_projective_constraint.html,1,['adapt'],['adapting']
Energy Efficiency," matrix contributions factor (for implicit schemes) . ◆ m_kFactorUsed. bool sofa::core::MechanicalParams::m_kFactorUsed. mutableprotected . Checks if the stiffness matrix contributions factor has been accessed. . ◆ m_mFactor. SReal sofa::core::MechanicalParams::m_mFactor. protected . Mass matrix contributions factor (for implicit schemes) . ◆ m_supportOnlySymmetricMatrix. bool sofa::core::MechanicalParams::m_supportOnlySymmetricMatrix. protected . True if a symmetric matrix is assumed in the left-hand term of the dynamics equations, for solvers specialized on symmetric matrices. . ◆ m_v. ConstMultiVecDerivId sofa::core::MechanicalParams::m_v. protected . Ids of velocity vector. . ◆ m_x. ConstMultiVecCoordId sofa::core::MechanicalParams::m_x. protected . Ids of position vector. . Constructor details. ◆ MechanicalParams() [1/2]. sofa::core::MechanicalParams::MechanicalParams ; (; const sofa::core::ExecParams & ; p = sofa::core::ExecParams()). Constructor, initializing all VecIds to default values, implicit and energy flags to false. . ◆ MechanicalParams() [2/2]. sofa::core::MechanicalParams::MechanicalParams ; (; const MechanicalParams & ; mparams). Copy Constructor. . Function details. ◆ bFactor(). SReal sofa::core::MechanicalParams::bFactor ; (; ); const. inline . Damping matrix contributions factor (for implicit schemes) . ◆ defaultInstance(). const MechanicalParams * sofa::core::MechanicalParams::defaultInstance ; (; ). static . Get the default MechanicalParams, to be used to provide a default values for method parameters. . ◆ df() [1/2]. ConstMultiVecDerivId& sofa::core::MechanicalParams::df ; (; ). inline . ◆ df() [2/2]. const ConstMultiVecDerivId& sofa::core::MechanicalParams::df ; (; ); const. inline . ◆ dt(). SReal sofa::core::MechanicalParams::dt ; (; ); const. inline . Time step. . ◆ dx() [1/2]. ConstMultiVecDerivId& sofa::core::MechanicalParams::dx ; (; ). inline . ◆ dx() [2/2]. const ConstMultiVecDerivId& sofa::core::MechanicalParams::dx ; (; ); const. in",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_mechanical_params.html:10627,energy,energy,10627,api/master/sofa/html/classsofa_1_1core_1_1_mechanical_params.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_mechanical_params.html,1,['energy'],['energy']
Energy Efficiency," members . sofa::core::behavior::BaseMechanicalState Class Referenceabstract . #include <BaseMechanicalState.h>; Component storing all state vectors of a simulated body (position, velocity, etc). ; More... Inheritance diagram for sofa::core::behavior::BaseMechanicalState:. [legend]; Detailed Description; Component storing all state vectors of a simulated body (position, velocity, etc). ; This class only contains the data of the body and not any of its active computations, which are handled by the Mass, ForceField, and Constraint components.; Two types of vectors are used : ; VecCoord ; : containing positions. ; VecDeriv ; : derivative values, i.e. velocity, forces, displacements. In most cases they are the same (i.e. 3D/2D point particles), but they can be different (rigid frames for instance). Several pre-defined vectors are stored : ; position ; ; velocity ; ; force ; ; dx ; (displacement). Other vectors can be allocated to store other temporary values. Vectors can be assigned efficiently by just swapping pointers.; In addition to state vectors, the current constraint system matrix is also stored, containing the coefficient of each constraint defined over the DOFs in this body. . Classes; class  ConstraintBlock;  ; class  VMultiOpEntry;  . Public Member Functions;  SOFA_ABSTRACT_CLASS (BaseMechanicalState, BaseState);  ;  SOFA_BASE_CAST_IMPLEMENTATION (BaseMechanicalState);  ; bool insertInNode (objectmodel::BaseNode *node) override;  ; bool removeInNode (objectmodel::BaseNode *node) override;  ; Methods allowing to have access to the geometry without a template class (generic but not efficient); virtual SReal getPX (Index) const;  ; virtual SReal getPY (Index) const;  ; virtual SReal getPZ (Index) const;  ; Mechanical integration related methods; Note: all these methods can now be implemented generically using VecId-based operations . virtual void beginIntegration (SReal);  Called at the beginning of each integration step. More...;  ; virtual void endIntegration (",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_mechanical_state.html:1219,efficient,efficiently,1219,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_mechanical_state.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_mechanical_state.html,1,['efficient'],['efficiently']
Energy Efficiency," names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  ;  Static Public Member Functions inherited from sofa::component::linearsystem::TypedMatrixLinearSystem< TMatrix, TVector >; static std::string GetCustomTemplateName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseObject; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  ;  Protected Member Functions inherited from sofa::component::linearsystem::TypedMatrixLinearSystem< TMatrix, TVector >; void preAssembleSystem (const core::MechanicalParams *) override;  ; virtual void allocateSystem ();  ; virtual void resizeVectors (sofa::Size n);  Set the size of RHS and solution to n. More...;  ; void copyLocalVectorToGlobalVector (core::MultiVecDerivId v, TVector *globalVector);  ; SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API void copyLocalVectorToGlobalVector (core::MultiVecDerivId v, GraphScatteredVector *globalVector);  ; void copyLocalVectorToGlobalVector (core::MultiVecDerivId v, GraphScatteredVector *globalVector);  ;  Protected Member Functions inherited from sofa::core::behavior::BaseMatrixLinearSystem;  BaseMatrixLinearSystem ();  ; virtual void postAssembleSystem (const core::MechanicalParams *);  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal upd",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsystem_1_1_matrix_free_system.html:15018,allocate,allocateSystem,15018,api/master/sofa/html/classsofa_1_1component_1_1linearsystem_1_1_matrix_free_system.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsystem_1_1_matrix_free_system.html,1,['allocate'],['allocateSystem']
Energy Efficiency," no event. return -1 in case of error return >= 0 otherwise. More...;  ; static void removeListener (FileEventListener *listener);  remove the provided listener. If the listener is not existing, do nothing If the listener is nullptr, do nothing If the listener is associated with one or more file...remove all the associations. Keep in mind that the file are still monitored. More...;  ; static void removeFileListener (const std::string &filename, FileEventListener *listener);  remove the provided listener for a given file If the listener is not existing, do nothing If the listener is nullptr, do nothing If the listener is associated with one or more file...remove all the associations. Keep in mind that the file are still monitored. More...;  . Function details. ◆ addFile() [1/2]. int sofa::helper::system::FileMonitor::addFile ; (; const std::string & ; directoryname, . const std::string & ; filename, . FileEventListener * ; listener . ). static . add a new path and file to monitor and a listener to be triggered in case of change. returns >= 0 if the file was successfully added returns < 0 in case of error. . ◆ addFile() [2/2]. int sofa::helper::system::FileMonitor::addFile ; (; const std::string & ; filename, . FileEventListener * ; listener . ). static . add a new filepath to monitor and a listener to be triggered in case of change. returns >= 0 if the file was successfully added returns < 0 in case of error. . ◆ removeFileListener(). void sofa::helper::system::FileMonitor::removeFileListener ; (; const std::string & ; filename, . FileEventListener * ; listener . ). static . remove the provided listener for a given file If the listener is not existing, do nothing If the listener is nullptr, do nothing If the listener is associated with one or more file...remove all the associations. Keep in mind that the file are still monitored. . ◆ removeListener(). void sofa::helper::system::FileMonitor::removeListener ; (; FileEventListener * ; listener). static . remove the provi",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_file_monitor.html:2070,monitor,monitor,2070,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_file_monitor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_file_monitor.html,1,['monitor'],['monitor']
Energy Efficiency," of norm is set by parameter l. Use 0 for the infinite norm. Note that the 2-norm is more efficiently computed using the square root of the dot product. ; Implemented in sofa::simulation::common::VectorOperations. ◆ v_op(). virtual void sofa::core::behavior::BaseVectorOperations::v_op ; (; core::MultiVecId ; v, . core::ConstMultiVecId ; a, . core::ConstMultiVecId ; b, . SReal ; f = 1.0 . ). pure virtual . v=a+b*f ; Implemented in sofa::simulation::common::VectorOperations. ◆ v_peq(). virtual void sofa::core::behavior::BaseVectorOperations::v_peq ; (; core::MultiVecId ; v, . core::ConstMultiVecId ; a, . SReal ; f = 1.0 . ). pure virtual . v+=f*a ; Implemented in sofa::simulation::common::VectorOperations. ◆ v_realloc() [1/2]. virtual void sofa::core::behavior::BaseVectorOperations::v_realloc ; (; sofa::core::MultiVecCoordId & ; id, . bool ; interactionForceField = false, . bool ; propagate = false, . const VecIdProperties & ; properties = {} . ). pure virtual . keep already allocated vectors and allocates others. If interactionForceField, also allocates mechanical states linked by an InteractionForceField ; Implemented in sofa::simulation::common::VectorOperations. ◆ v_realloc() [2/2]. virtual void sofa::core::behavior::BaseVectorOperations::v_realloc ; (; sofa::core::MultiVecDerivId & ; id, . bool ; interactionForceField = false, . bool ; propagate = false, . const VecIdProperties & ; properties = {} . ). pure virtual . Implemented in sofa::simulation::common::VectorOperations. ◆ v_size(). virtual size_t sofa::core::behavior::BaseVectorOperations::v_size ; (; core::MultiVecId ; v). pure virtual . Implemented in sofa::simulation::common::VectorOperations. ◆ v_teq(). virtual void sofa::core::behavior::BaseVectorOperations::v_teq ; (; core::MultiVecId ; v, . SReal ; f . ). pure virtual . v*=f ; Implemented in sofa::simulation::common::VectorOperations. ◆ v_threshold(). virtual void sofa::core::behavior::BaseVectorOperations::v_threshold ; (; core::MultiVecId ; a, . SRea",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_vector_operations.html:7522,allocate,allocated,7522,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_vector_operations.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_vector_operations.html,2,['allocate'],"['allocated', 'allocates']"
Energy Efficiency," of the element inside the vector map See alsom_map2Elements ; Parameters. {Index}element index of the full Data vector to find in the vector map . Returns{type::vector<Index>} positions of all the occurrence of the element in the vector map. return empty vector if not found. ; Reimplemented from sofa::core::topology::TopologySubsetData< core::topology::BaseMeshTopology::Point, type::vector< Index > >. ◆ removePostProcess(). void sofa::core::topology::TopologySubsetIndices::removePostProcess ; (; sofa::Index ; elemId). overrideprotectedvirtual . Internal method called at the end of See alsoremove method to apply internal mechanism, such as updating the map size ; Parameters. nbElementsNumber of element removed. . Reimplemented from sofa::core::topology::TopologySubsetData< core::topology::BaseMeshTopology::Point, type::vector< Index > >. ◆ swapPostProcess(). void sofa::core::topology::TopologySubsetIndices::swapPostProcess ; (; Index ; i1, . Index ; i2 . ). overrideprotectedvirtual . Internal method called at the end of See alsoswap method to apply internal mechanism, such as map swap. ; Parameters. i1First element index to be swapped. ; i2Second element index to be swapped with first one. . Reimplemented from sofa::core::topology::TopologySubsetData< core::topology::BaseMeshTopology::Point, type::vector< Index > >. ◆ updateLastIndex(). void sofa::core::topology::TopologySubsetIndices::updateLastIndex ; (; Index ; posLastIndex, . Index ; newGlobalId . ). overrideprotectedvirtual . Internal method to update the last element of this Data and/or map when the topology buffer is reduced. Parameters. posLastIndexIndex position of the last topology element in this subset. ; newGlobalIdGlobal topology element index to be set at Data[posLastIndex]. . Reimplemented from sofa::core::topology::TopologySubsetData< core::topology::BaseMeshTopology::Point, type::vector< Index > >. sofacoretopologyTopologySubsetIndices; Generated on Mon Nov 11 2024 03:16:04 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topology_subset_indices.html:25251,reduce,reduced,25251,api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topology_subset_indices.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topology_subset_indices.html,1,['reduce'],['reduced']
Energy Efficiency," sofa::core::behavior::BaseMechanicalState. ◆ vAllocImpl(). template<class DataTypes > . template<core::VecType vtype> . void sofa::component::statecontainer::MechanicalObject< DataTypes >::vAllocImpl ; (; core::TVecId< vtype, core::V_WRITE > ; v, . const core::VecIdProperties & ; properties . ). protected . Generic implementation of the method vAlloc. . ◆ vAvail() [1/2]. template<class DataTypes > . void sofa::component::statecontainer::MechanicalObject< DataTypes >::vAvail ; (; const core::ExecParams * ; params, . core::VecCoordId & ; v . ). overridevirtual . Increment the index of the given VecCoordId, so that all 'allocated' vectors in this state have a lower index. ; Implements sofa::core::behavior::BaseMechanicalState. ◆ vAvail() [2/2]. template<class DataTypes > . void sofa::component::statecontainer::MechanicalObject< DataTypes >::vAvail ; (; const core::ExecParams * ; params, . core::VecDerivId & ; v . ). overridevirtual . Increment the index of the given VecDerivId, so that all 'allocated' vectors in this state have a lower index. ; Implements sofa::core::behavior::BaseMechanicalState. ◆ vAvailImpl(). template<class DataTypes > . template<core::VecType vtype> . void sofa::component::statecontainer::MechanicalObject< DataTypes >::vAvailImpl ; (; core::TVecId< vtype, core::V_WRITE > & ; v, . sofa::type::vector< Data< core::StateVecType_t< DataTypes, vtype > > * > & ; dataContainer . ). protected . Generic implementation of the method vAvail. . ◆ vDot(). template<class DataTypes > . SReal sofa::component::statecontainer::MechanicalObject< DataTypes >::vDot ; (; const core::ExecParams * ; params, . core::ConstVecId ; a, . core::ConstVecId ; b . ). overridevirtual . Compute the scalar products between two vectors. ; Implements sofa::core::behavior::BaseMechanicalState. ◆ vFree() [1/2]. template<class DataTypes > . void sofa::component::statecontainer::MechanicalObject< DataTypes >::vFree ; (; const core::ExecParams * ; params, . core::VecCoordId ; v . ). overrid",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1statecontainer_1_1_mechanical_object.html:70953,allocate,allocated,70953,api/master/sofa/html/classsofa_1_1component_1_1statecontainer_1_1_mechanical_object.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1statecontainer_1_1_mechanical_object.html,1,['allocate'],['allocated']
Energy Efficiency," template<class DataTypes > . virtual Real sofa::component::solidmechanics::tensormass::TetrahedralTensorMassForceField< DataTypes >::getLambda ; (; ); const. inlinevirtual . ◆ getMu(). template<class DataTypes > . virtual Real sofa::component::solidmechanics::tensormass::TetrahedralTensorMassForceField< DataTypes >::getMu ; (; ); const. inlinevirtual . ◆ getPotentialEnergy() [1/2]. template<class DataTypes > . SReal sofa::component::solidmechanics::tensormass::TetrahedralTensorMassForceField< DataTypes >::getPotentialEnergy ; (; const core::MechanicalParams * ; , . const DataVecCoord & ;  . ); const. inlineoverridevirtual . Implements sofa::core::behavior::ForceField< DataTypes >. ◆ getPotentialEnergy() [2/2]. template<class DataTypes > . SReal sofa::component::solidmechanics::tensormass::TetrahedralTensorMassForceField< DataTypes >::getPotentialEnergy ; (; const core::MechanicalParams * ; mparams); const. overridevirtual . Get the potential energy associated to this ForceField during the last call of addForce( const MechanicalParams* mparams );. ; Used to estimate the total energy of the system by some post-stabilization techniques. ; Implements sofa::core::behavior::BaseForceField. ◆ init(). template<class DataTypes > . void sofa::component::solidmechanics::tensormass::TetrahedralTensorMassForceField< DataTypes >::init ; (; void ; ). overridevirtual . Initialization method called at graph creation and modification, during top-down traversal. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ initNeighbourhoodPoints(). template<class DataTypes > . void sofa::component::solidmechanics::tensormass::TetrahedralTensorMassForceField< DataTypes >::initNeighbourhoodPoints. ◆ setPoissonRatio(). template<class DataTypes > . void sofa::component::solidmechanics::tensormass::TetrahedralTensorMassForceField< DataTypes >::setPoissonRatio ; (; const Real ; ratio). inline . ◆ setYoungModulus(). template<class DataTypes > . void sofa::component::solidmechanics::tensormass",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1tensormass_1_1_tetrahedral_tensor_mass_force_field.html:28617,energy,energy,28617,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1tensormass_1_1_tetrahedral_tensor_mass_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1tensormass_1_1_tetrahedral_tensor_mass_force_field.html,1,['energy'],['energy']
Energy Efficiency," template<class DataTypes > . void sofa::component::solidmechanics::fem::hyperelastic::material::STVenantKirchhoff< DataTypes >::applyElasticityTensor ; (; StrainInformation< DataTypes > * ; , . const MaterialParameters< DataTypes > & ; , . const MatrixSym & ; , . MatrixSym & ;  . ). inlineoverridevirtual . computes the Elasticity Tensor of the current configuration ; Reimplemented from sofa::component::solidmechanics::fem::hyperelastic::material::HyperelasticMaterial< DataTypes >. ◆ deriveSPKTensor(). template<class DataTypes > . void sofa::component::solidmechanics::fem::hyperelastic::material::STVenantKirchhoff< DataTypes >::deriveSPKTensor ; (; StrainInformation< DataTypes > * ; , . const MaterialParameters< DataTypes > & ; , . MatrixSym & ;  . ). inlineoverridevirtual . computes the second Piola Kirchhoff stress tensor of the current configuration ; Reimplemented from sofa::component::solidmechanics::fem::hyperelastic::material::HyperelasticMaterial< DataTypes >. ◆ ElasticityTensor(). template<class DataTypes > . void sofa::component::solidmechanics::fem::hyperelastic::material::STVenantKirchhoff< DataTypes >::ElasticityTensor ; (; StrainInformation< DataTypes > * ; , . const MaterialParameters< DataTypes > & ; param, . Matrix6 & ; outputTensor . ). inlineoverridevirtual . Reimplemented from sofa::component::solidmechanics::fem::hyperelastic::material::HyperelasticMaterial< DataTypes >. ◆ getStrainEnergy(). template<class DataTypes > . Real sofa::component::solidmechanics::fem::hyperelastic::material::STVenantKirchhoff< DataTypes >::getStrainEnergy ; (; StrainInformation< DataTypes > * ; , . const MaterialParameters< DataTypes > & ;  . ). inlineoverridevirtual . returns the strain energy of the current configuration ; Reimplemented from sofa::component::solidmechanics::fem::hyperelastic::material::HyperelasticMaterial< DataTypes >. sofacomponentsolidmechanicsfemhyperelasticmaterialSTVenantKirchhoff; Generated on Mon Nov 11 2024 03:02:25 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_s_t_venant_kirchhoff.html:3603,energy,energy,3603,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_s_t_venant_kirchhoff.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_s_t_venant_kirchhoff.html,1,['energy'],['energy']
Energy Efficiency," to input model. ; Reimplemented in sofa::component::mapping::linear::SimpleTesselatedTetraTopologicalMapping. ◆ setPathInputObject(). void sofa::core::topology::TopologicalMapping::setPathInputObject ; (; const std::string & ; o). inline . Set the path to the objects mapped in the scene graph. . ◆ setPathOutputObject(). void sofa::core::topology::TopologicalMapping::setPathOutputObject ; (; const std::string & ; o). inline . ◆ setTopologies(). void sofa::core::topology::TopologicalMapping::setTopologies ; (; In * ; from, . Out * ; to . ). virtual . Specify the input and output models. . ◆ SOFA_ABSTRACT_CLASS(). sofa::core::topology::TopologicalMapping::SOFA_ABSTRACT_CLASS ; (; TopologicalMapping ; , . objectmodel::BaseObject ;  . ). ◆ updateTopologicalMappingBottomUp(). virtual void sofa::core::topology::TopologicalMapping::updateTopologicalMappingBottomUp ; (; ). inlinevirtual . Method called at each topological changes propagation which comes from the OUTPUT topology to adapt the INPUT topology : ; Reimplemented in sofa::component::mapping::linear::SimpleTesselatedTetraTopologicalMapping. ◆ updateTopologicalMappingTopDown(). virtual void sofa::core::topology::TopologicalMapping::updateTopologicalMappingTopDown ; (; ). pure virtual . Method called at each topological changes propagation which comes from the INPUT topology to adapt the OUTPUT topology : ; Implemented in sofa::component::topology::mapping::Triangle2EdgeTopologicalMapping, sofa::component::topology::mapping::Tetra2TriangleTopologicalMapping, sofa::component::topology::mapping::SubsetTopologicalMapping, sofa::component::topology::mapping::Quad2TriangleTopologicalMapping, sofa::component::topology::mapping::IdentityTopologicalMapping, sofa::component::topology::mapping::Hexa2TetraTopologicalMapping, sofa::component::topology::mapping::Hexa2QuadTopologicalMapping, sofa::component::topology::mapping::Edge2QuadTopologicalMapping, sofa::component::topology::mapping::CenterPointTopologicalMapping, sofa::comp",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topological_mapping.html:23281,adapt,adapt,23281,api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topological_mapping.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topological_mapping.html,1,['adapt'],['adapt']
Energy Efficiency," together. ; More... Inheritance diagram for sofa::core::behavior::BaseInteractionForceField:. [legend]; Detailed Description; BaseInteractionForceField is a force field linking several bodies (MechanicalState) together. ; An interaction force field computes forces applied to several simulated bodies given their current positions and velocities.; For implicit integration schemes, it must also compute the derivative ( df, given a displacement dx ). . Public Member Functions;  SOFA_ABSTRACT_CLASS (BaseInteractionForceField, BaseForceField);  ; virtual BaseMechanicalState * getMechModel1 ();  ; virtual BaseMechanicalState * getMechModel2 ();  ; void addKToMatrix (const MechanicalParams *, const sofa::core::behavior::MultiMatrixAccessor *) override;  Compute the system matrix corresponding to . More...;  ; virtual void initGnuplot (const std::string path);  initialization to export potential energy to gnuplot files format More...;  ; virtual void exportGnuplot (SReal time);  export kinetic and potential energy state at ""time"" to a gnuplot file More...;  ; bool insertInNode (objectmodel::BaseNode *node) override;  ; bool removeInNode (objectmodel::BaseNode *node) override;  ;  Public Member Functions inherited from sofa::core::behavior::BaseForceField;  SOFA_ABSTRACT_CLASS (BaseForceField, StateAccessor);  ; virtual void addForce (const MechanicalParams *mparams, MultiVecDerivId fId)=0;  Given the current position and velocity states, update the current force vector by computing and adding the forces associated with this ForceField. More...;  ; virtual void addDForce (const MechanicalParams *mparams, MultiVecDerivId dfId)=0;  Compute the force derivative given a small displacement from the position and velocity used in the previous call to addForce(). More...;  ; virtual void addMBKdx (const MechanicalParams *mparams, MultiVecDerivId dfId);  Accumulate the contribution of M, B, and/or K matrices multiplied by the dx vector with the given coefficients. More...;  ; virtual",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_interaction_force_field.html:1405,energy,energy,1405,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_interaction_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_interaction_force_field.html,1,['energy'],['energy']
Energy Efficiency," v=0 ; Implemented in sofa::simulation::common::VectorOperations. ◆ v_dot(). virtual void sofa::core::behavior::BaseVectorOperations::v_dot ; (; core::ConstMultiVecId ; a, . core::ConstMultiVecId ; b . ). pure virtual . a dot b ( get result using finish ) ; Implemented in sofa::simulation::common::VectorOperations. ◆ v_eq() [1/2]. virtual void sofa::core::behavior::BaseVectorOperations::v_eq ; (; core::MultiVecId ; v, . core::ConstMultiVecId ; a . ). pure virtual . v=a ; Implemented in sofa::simulation::common::VectorOperations. ◆ v_eq() [2/2]. virtual void sofa::core::behavior::BaseVectorOperations::v_eq ; (; core::MultiVecId ; v, . core::ConstMultiVecId ; a, . SReal ; f . ). pure virtual . v=f*a ; Implemented in sofa::simulation::common::VectorOperations. ◆ v_free() [1/2]. virtual void sofa::core::behavior::BaseVectorOperations::v_free ; (; sofa::core::MultiVecCoordId & ; id, . bool ; interactionForceField = false, . bool ; propagate = false . ). pure virtual . Free a previously allocated temporary vector. ; Implemented in sofa::simulation::common::VectorOperations. ◆ v_free() [2/2]. virtual void sofa::core::behavior::BaseVectorOperations::v_free ; (; sofa::core::MultiVecDerivId & ; id, . bool ; interactionForceField = false, . bool ; propagate = false . ). pure virtual . Implemented in sofa::simulation::common::VectorOperations. ◆ v_multiop(). virtual void sofa::core::behavior::BaseVectorOperations::v_multiop ; (; const core::behavior::BaseMechanicalState::VMultiOp & ; o). pure virtual . Implemented in sofa::simulation::common::VectorOperations. ◆ v_norm(). virtual void sofa::core::behavior::BaseVectorOperations::v_norm ; (; core::ConstMultiVecId ; a, . unsigned ; l . ). pure virtual . Compute the norm of a vector ( get result using finish ). The type of norm is set by parameter l. Use 0 for the infinite norm. Note that the 2-norm is more efficiently computed using the square root of the dot product. ; Implemented in sofa::simulation::common::VectorOperations. ◆ ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_vector_operations.html:5746,allocate,allocated,5746,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_vector_operations.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_vector_operations.html,1,['allocate'],['allocated']
Energy Efficiency," virtual void addMassDensity (const sofa::type::vector< Index > &indices, const sofa::type::vector< sofa::type::vector< Index > > &ancestors, const sofa::type::vector< sofa::type::vector< SReal > > &coefs);  ; Check and standard initialization functions from mass information; virtual bool checkVertexMass ();  ; virtual void initFromVertexMass ();  ; virtual bool checkMassDensity ();  ; virtual void initFromMassDensity ();  ; virtual bool checkTotalMass ();  ; virtual void checkTotalMassInit ();  ; virtual void initFromTotalMass ();  ; bool checkEdgeMass ();  ; void initFromVertexAndEdgeMass ();  ;  Public Member Functions inherited from sofa::core::behavior::Mass< DataTypes >;  SOFA_CLASS2 (SOFA_TEMPLATE(Mass, DataTypes), SOFA_TEMPLATE(ForceField, DataTypes), BaseMass);  ; void initGnuplot (const std::string path) override;  initialization to export kinetic and potential energy to gnuplot files format More...;  ; void exportGnuplot (const MechanicalParams *mparams, SReal time) override;  export kinetic and potential energy state at ""time"" to a gnuplot file More...;  ; void addGravityToV (const MechanicalParams *mparams, MultiVecDerivId) override;  perform v += dt*g operation. Used if mass wants to added G separately from the other forces to v. More...;  ; SReal getElementMass (sofa::Index) const override;  recover the mass of an element More...;  ; void getElementMass (sofa::Index index, linearalgebra::BaseMatrix *m) const override;  Get the matrix relative to the DOF at index. More...;  ; bool insertInNode (objectmodel::BaseNode *node) override;  ; bool removeInNode (objectmodel::BaseNode *node) override;  ; void addMDx (const MechanicalParams *mparams, MultiVecDerivId fid, SReal factor) override;  f += factor M dx More...;  ; void accFromF (const MechanicalParams *mparams, MultiVecDerivId aid) override;  ; void addDForce (const MechanicalParams *, DataVecDeriv &, const DataVecDeriv &) override;  Mass forces (gravity) often have null derivative. More...;  ; void ad",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_mesh_matrix_mass.html:11351,energy,energy,11351,api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_mesh_matrix_mass.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_mesh_matrix_mass.html,1,['energy'],['energy']
Energy Efficiency," void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, BaseData::DataFlags dataFlags);  Helper method used by initData() More...;  ; template<class T > ; void initData0 (Data< T > *field, typename Data< T >::InitData &res, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  . Vectors allocation and generic operations (based on VecId); Increment the index of the given VecCoordId, so that all 'allocated' vectors in this state have a lower index . typedef type::vector< VMultiOpEntry > VMultiOp;  ; virtual void vAvail (const ExecParams *params, VecCoordId &v)=0;  ; virtual void vAvail (const ExecParams *params, VecDerivId &v)=0;  Increment the index of the given VecDerivId, so that all 'allocated' vectors in this state have a lower index. More...;  ; virtual void vAlloc (const ExecParams *params, VecCoordId v, const core::VecIdProperties &properties={})=0;  Increment the index of the given MatrixDerivId, so that all 'allocated' vectors in this state have a lower index. More...;  ; virtual void vAlloc (const ExecParams *params, VecDerivId v, const core::VecIdProperties &properties={})=0;  Allocate a new temporary vector. More...;  ; virtual void vRealloc (const ExecParams *params, VecCoordId v, const core::VecIdProperties &properties={})=0;  Allocate a new temporary vector. More...;  ; virtual void vRealloc (const ExecParams *params, VecDerivId v, const core::VecIdProperties &properties={})=0;  Reallocate a new temporary vector. More...;  ; virtual void vFree (const ExecParams *params, VecCoordId v)=0;  Free a temporary vector. More...;  ; virtual void vFree (const ExecParams *params, VecDerivId v)=0;  Free a temporary vector. More...;  ; virtual void vInit (const ExecParams *params, VecCoordId v, ConstVecCoordId vSrc)=0;  Free a temporary vector. More...;  ; virtual void vInit (const ExecParams *params, VecDerivId v, ConstVecDerivId vSrc)",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_mechanical_state.html:18550,allocate,allocated,18550,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_mechanical_state.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_mechanical_state.html,1,['allocate'],['allocated']
Energy Efficiency,"  ; SReal getPotentialEnergy (const core::MechanicalParams *, const DataVecCoord &data_x1, const DataVecCoord &data_x2) const override;  ; virtual void addKToMatrix (const core::MechanicalParams *mparams, const sofa::core::behavior::MultiMatrixAccessor *matrix) override;  Compute the system matrix corresponding to . More...;  ; void buildStiffnessMatrix (core::behavior::StiffnessMatrix *matrix) override;  ; void buildDampingMatrix (core::behavior::DampingMatrix *) override;  ; void draw (const core::visual::VisualParams *vparams) override;  Render internal data of this object, for debugging purposes. More...;  ; void computeBBox (const core::ExecParams *params, bool onlyVisible=false) override;  ; core::behavior::MechanicalState< DataTypes > * getObject1 ();  ; core::behavior::MechanicalState< DataTypes > * getObject2 ();  ; const sofa::type::vector< Spring > & getSprings () const;  ; SReal getArrowSize () const;  ; void setArrowSize (float s);  ; int getDrawMode () const;  ; void setDrawMode (int m);  ; void clear (sofa::Size reserve=0);  ; void removeSpring (sofa::Index idSpring);  ; void addSpring (sofa::Index m1, sofa::Index m2, SReal ks, SReal kd, SReal initlen);  ; void addSpring (const Spring &spring);  ; void initGnuplot (const std::string path) override;  initialization to export kinetic, potential energy and force intensity to gnuplot files format More...;  ; void exportGnuplot (SReal time) override;  export kinetic and potential energy state at ""time"" to a gnuplot file More...;  ;  Public Member Functions inherited from sofa::core::behavior::PairInteractionForceField< DataTypes >;  SOFA_ABSTRACT_CLASS2 (SOFA_TEMPLATE(PairInteractionForceField, DataTypes), BaseInteractionForceField, SOFA_TEMPLATE2(PairStateAccessor, DataTypes, DataTypes));  ; void setPathObject1 (const std::string &path);  Set the Object1 path. More...;  ; void setPathObject2 (const std::string &path);  Set the Object2 path. More...;  ; std::string getPathObject1 () const;  Retrieve the Ob",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_mesh_spring_force_field.html:7759,energy,energy,7759,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_mesh_spring_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_mesh_spring_force_field.html,6,['energy'],['energy']
Energy Efficiency,"  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  . Constructor details. ◆ CenterPointTopologicalMapping(). sofa::component::topology::mapping::CenterPointTopologicalMapping::CenterPointTopologicalMapping ; (; ). protected . Constructor. . ◆ ~CenterPointTopologicalMapping(). sofa::component::topology::mapping::CenterPointTopologicalMapping::~CenterPointTopologicalMapping ; (; ). inlineoverrideprotected . Destructor. ; Does nothing. . Function details. ◆ getFromIndex(). Index sofa::component::topology::mapping::CenterPointTopologicalMapping::getFromIndex ; (; Index ; ind). inlineoverridevirtual . Reimplemented from sofa::core::topology::TopologicalMapping. ◆ getGlobIndex(). Index sofa::component::topology::mapping::CenterPointTopologicalMapping::getGlobIndex ; (; Index ; ind). inlineoverridevirtual . Reimplemented from sofa::core::topology::TopologicalMapping. ◆ init(). void sofa::component::topology::mapping::CenterPointTopologicalMapping::init ; (; void ; ). overridevirtual . Initializes the target BaseTopology from the source BaseTopology. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ SOFA_CLASS(). sofa::component::topology::mapping::CenterPointTopologicalMapping::SOFA_CLASS ; (; CenterPointTopologicalMapping ; , . sofa::core::topology::TopologicalMapping ;  . ). ◆ updateTopologicalMappingTopDown(). void sofa::component::topology::mapping::CenterPointTopologicalMapping::updateTopologicalMappingTopDown ; (; ). overridevirtual . Method called at each topological changes propagation which comes from the INPUT topology to adapt the OUTPUT topology : ; Implements sofa::core::topology::TopologicalMapping. sofacomponenttopologymappingCenterPointTopologicalMapping; Generated on Mon Nov 11 2024 03:10:03 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1mapping_1_1_center_point_topological_mapping.html:18158,adapt,adapt,18158,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1mapping_1_1_center_point_topological_mapping.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1mapping_1_1_center_point_topological_mapping.html,1,['adapt'],['adapt']
Energy Efficiency,"  ~LCP ();  ; void reset (void);  ; void allocate (unsigned int maxConst);  ; SReal ** getW (void);  ; SReal & getMu (void);  ; SReal * getDfree (void);  ; SReal getTolerance (void);  ; SReal getMaxIter (void);  ; SReal * getF (void);  ; SReal * getF_1 (void);  ; SReal * getD (void);  ; bool useInitialGuess (void);  ; unsigned int getDim (void);  ; unsigned int setDim (unsigned int nbC);  ; unsigned int getMaxConst (void);  ; void setNumItMax (int input_numItMax);  ; void setTol (SReal input_tol);  ; void setLCP (unsigned int input_dim, SReal *input_dfree, SReal **input_W, SReal *input_f, SReal &input_mu, SReal &input_tol, int input_numItMax);  ; void solveNLCP (bool convergenceTest, std::vector< SReal > *residuals=nullptr, std::vector< SReal > *violations=nullptr);  . Attribute details. ◆ error. SReal sofa::helper::LCP::error. ◆ it. int sofa::helper::LCP::it. Constructor details. ◆ LCP(). sofa::helper::LCP::LCP ; (; ). ◆ ~LCP(). sofa::helper::LCP::~LCP ; (; ). Function details. ◆ allocate(). void sofa::helper::LCP::allocate ; (; unsigned int ; maxConst). ◆ getD(). SReal* sofa::helper::LCP::getD ; (; void ; ). inline . ◆ getDfree(). SReal* sofa::helper::LCP::getDfree ; (; void ; ). inline . ◆ getDim(). unsigned int sofa::helper::LCP::getDim ; (; void ; ). inline . ◆ getF(). SReal* sofa::helper::LCP::getF ; (; void ; ). inline . ◆ getF_1(). SReal* sofa::helper::LCP::getF_1 ; (; void ; ). inline . ◆ getMaxConst(). unsigned int sofa::helper::LCP::getMaxConst ; (; void ; ). inline . ◆ getMaxIter(). SReal sofa::helper::LCP::getMaxIter ; (; void ; ). inline . ◆ getMu(). SReal& sofa::helper::LCP::getMu ; (; void ; ). inline . ◆ getTolerance(). SReal sofa::helper::LCP::getTolerance ; (; void ; ). inline . ◆ getW(). SReal** sofa::helper::LCP::getW ; (; void ; ). inline . ◆ reset(). void sofa::helper::LCP::reset ; (; void ; ). ◆ setDim(). unsigned int sofa::helper::LCP::setDim ; (; unsigned int ; nbC). inline . ◆ setLCP(). void sofa::helper::LCP::setLCP ; (; unsigned int ; in",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_l_c_p.html:1328,allocate,allocate,1328,api/master/sofa/html/classsofa_1_1helper_1_1_l_c_p.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_l_c_p.html,1,['allocate'],['allocate']
Energy Efficiency,"#include <MeshSpringForceField.h>. Inheritance diagram for sofa::component::solidmechanics::spring::MeshSpringForceField< DataTypes >:. [legend]. Protected Attributes; Data< Real > d_linesStiffness;  Stiffness for the Lines. More...;  ; Data< Real > d_linesDamping;  Damping for the Lines. More...;  ; Data< Real > d_trianglesStiffness;  Stiffness for the Triangles. More...;  ; Data< Real > d_trianglesDamping;  Damping for the Triangles. More...;  ; Data< Real > d_quadsStiffness;  Stiffness for the Quads. More...;  ; Data< Real > d_quadsDamping;  Damping for the Quads. More...;  ; Data< Real > d_tetrahedraStiffness;  Stiffness for the Tetrahedra. More...;  ; Data< Real > d_tetrahedraDamping;  Damping for the Tetrahedra. More...;  ; Data< Real > d_cubesStiffness;  Stiffness for the Cubes. More...;  ; Data< Real > d_cubesDamping;  Damping for the Cubes. More...;  ; Data< bool > d_noCompression;  Only consider elongation. More...;  ; Data< Real > d_drawMinElongationRange;  Min range of elongation (red eongation - blue neutral - green compression) More...;  ; Data< Real > d_drawMaxElongationRange;  Max range of elongation (red eongation - blue neutral - green compression) More...;  ; Data< Real > d_drawSpringSize;  Size of drawed lines. More...;  ; Data< type::Vec< 2, sofa::Index > > d_localRange;  optional range of local DOF indices. Any computation involving only indices outside of this range are discarded (useful for parallelization using mesh partitioning) More...;  ; SingleLink< MeshSpringForceField< DataTypes >, sofa::core::topology::BaseMeshTopology, BaseLink::FLAG_STOREPATH|BaseLink::FLAG_STRONGLINK > l_topology;  Link to be set to the topology container in the component graph. More...;  ;  Protected Attributes inherited from sofa::component::solidmechanics::spring::SpringForceField< DataTypes >; sofa::type::vector< Mat > dfdx;  ; core::objectmodel::DataFileName fileSprings;  ; core::objectmodel::DataCallback c_springCallBack;  ; bool areSpringIndicesDirty { true }",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_mesh_spring_force_field.html:1432,green,green,1432,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_mesh_spring_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_mesh_spring_force_field.html,1,['green'],['green']
Energy Efficiency,"&properties={}) override;  ; void v_clear (core::MultiVecId v) override;  v=0 More...;  ; void v_eq (core::MultiVecId v, core::ConstMultiVecId a) override;  v=a More...;  ; void v_eq (core::MultiVecId v, core::ConstMultiVecId a, SReal f) override;  v=f*a More...;  ; void v_peq (core::MultiVecId v, core::ConstMultiVecId a, SReal f=1.0) override;  v+=f*a More...;  ; void v_teq (core::MultiVecId v, SReal f) override;  v*=f More...;  ; void v_op (core::MultiVecId v, core::ConstMultiVecId a, core::ConstMultiVecId b, SReal f=1.0) override;  v=a+b*f More...;  ; void v_multiop (const core::behavior::BaseMechanicalState::VMultiOp &o) override;  ; void v_dot (core::ConstMultiVecId a, core::ConstMultiVecId b) override;  a dot b ( get result using finish ) More...;  ; void v_norm (core::ConstMultiVecId a, unsigned l) override;  Compute the norm of a vector ( get result using finish ). The type of norm is set by parameter l. Use 0 for the infinite norm. Note that the 2-norm is more efficiently computed using the square root of the dot product. More...;  ; void v_threshold (core::MultiVecId a, SReal threshold) override;  nullify the values below the given threshold More...;  ; SReal finish () override;  ; void print (sofa::core::ConstMultiVecId v, std::ostream &out, std::string prefix="""", std::string suffix="""") override;  ; size_t v_size (core::MultiVecId v) override;  ;  Public Member Functions inherited from sofa::core::behavior::BaseVectorOperations;  BaseVectorOperations (const core::ExecParams *params, core::objectmodel::BaseContext *ctx);  ; virtual ~BaseVectorOperations ();  . Attribute details. ◆ executeVisitor. VisitorExecuteFunc sofa::simulation::common::VectorOperations::executeVisitor. protected . ◆ result. SReal sofa::simulation::common::VectorOperations::result. protected . Result of latest v_dot operation. . Constructor details. ◆ VectorOperations(). sofa::simulation::common::VectorOperations::VectorOperations ; (; const sofa::core::ExecParams * ; params, . sofa::c",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_vector_operations.html:2821,efficient,efficiently,2821,api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_vector_operations.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_vector_operations.html,1,['efficient'],['efficiently']
Energy Efficiency,"();  ; void stepImpl () override;  the only function that should be overloaded More...;  ;  Public Member Functions inherited from sofa::gui::qt::QGraphStatWidget;  QGraphStatWidget (QWidget *parent, simulation::Node *node, const QString &title, unsigned numberOfCurves, int bufferSize);  ; virtual ~QGraphStatWidget ();  ; virtual void step () final;  Main method called to update the graph. More...;  . Additional Inherited Members;  Protected Attributes inherited from sofa::gui::qt::QGraphStatWidget; simulation::Node * m_node;  pointer to the node monitored More...;  ; int m_bufferSize;  size of the buffers to stored More...;  ; QChart * m_chart;  Pointer to the chart Data. More...;  ; std::vector< QLineSeries * > m_curves;  vector of series to be plotted More...;  ; QValueAxis * m_axisX;  x axis pointer More...;  ; QValueAxis * m_axisY;  y axis pointer More...;  ; SReal m_yMin;  min y axis value stored More...;  ; SReal m_yMax;  max y axis value stored More...;  ; SReal m_lastTime;  last timestep monitored More...;  ; int m_cptStep;  step counter monitored More...;  ;  Protected Member Functions inherited from sofa::gui::qt::QGraphStatWidget; void setCurve (unsigned index, const QString &name, const QColor &color);  set the index-th curve (index must be < _numberOfCurves) More...;  ; void updateYAxisBounds (SReal value);  Method to update Y axis scale. More...;  ; void flushSeries ();  flush data from series not anymore displayed More...;  . Constructor details. ◆ QMomentumStatWidget(). sofa::gui::qt::QMomentumStatWidget::QMomentumStatWidget ; (; QWidget * ; parent, . simulation::Node * ; node . ). ◆ ~QMomentumStatWidget(). sofa::gui::qt::QMomentumStatWidget::~QMomentumStatWidget ; (; ). virtual . Function details. ◆ stepImpl(). void sofa::gui::qt::QMomentumStatWidget::stepImpl ; (; ). overridevirtual . the only function that should be overloaded ; Implements sofa::gui::qt::QGraphStatWidget. sofaguiqtQMomentumStatWidget; Generated on Mon Nov 11 2024 03:23:43 for SOFA",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_momentum_stat_widget.html:1479,monitor,monitored,1479,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_momentum_stat_widget.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_momentum_stat_widget.html,1,['monitor'],['monitored']
Energy Efficiency,"). std::string sofa::core::objectmodel::BaseData::decodeTypeName ; (; const std::type_info & ; t). static . Helper method to decode the type name to a more readable form if possible. . ◆ endEditVoidPtr(). void sofa::core::objectmodel::BaseData::endEditVoidPtr ; (; ). Must be called after beginEditVoidPtr(), after you are finished modifying this Data. ; End edit current value as a void pointer (use getValueTypeInfo to find how to access it) . ◆ forceSet(). void sofa::core::objectmodel::BaseData::forceSet ; (; ). inline . Reset the isSet flag to true, to indicate that the current value has been modified. . ◆ genericCopyValueFrom(). bool sofa::core::objectmodel::BaseData::genericCopyValueFrom ; (; const BaseData * ; parent). protected . Try to update this Data from the value of its parent in ""fast mode"";. ; Update this Data from the value of its parent. . ◆ getCounter(). int sofa::core::objectmodel::BaseData::getCounter ; (; ); const. inline . Return the number of changes since creation This can be used to efficiently detect changes . ◆ getData(). BaseData* sofa::core::objectmodel::BaseData::getData ; (; ); const. inline . This method is needed by DDGNode. . ◆ getDefaultValueString(). virtual std::string sofa::core::objectmodel::BaseData::getDefaultValueString ; (; ); const. pure virtual . Get a string representation of the default value held in this Data. ; Implemented in sofa::core::objectmodel::Data< T >, sofa::core::objectmodel::Data< sofa::type::BoundingBox >, sofa::core::objectmodel::Data< sofa::core::objectmodel::TagSet >, sofa::core::objectmodel::Data< SeqTetrahedra >, sofa::core::objectmodel::Data< sofa::type::Vec< 2, int > >, sofa::core::objectmodel::Data< sofa::type::RGBAColor >, sofa::core::objectmodel::Data< std::map< std::string, sofa::type::vector< double > > >, sofa::core::objectmodel::Data< sofa::type::vector< sofa::type::fixed_array< int, 3 > > >, sofa::core::objectmodel::Data< long >, sofa::core::objectmodel::Data< sofa::type::vector< sofa::type::vect",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html:13075,efficient,efficiently,13075,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html,1,['efficient'],['efficiently']
Energy Efficiency,"*field, BaseData::BaseInitData &res, const char *name, const char *help, BaseData::DataFlags dataFlags);  Helper method used by initData() More...;  ; template<class T > ; void initData0 (Data< T > *field, typename Data< T >::InitData &res, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ;  Protected Member Functions inherited from sofa::core::State< DataTypes >;  State ();  ;  ~State () override;  . Static Protected Member Functions; template<core::VecType vtype, core::VecAccess vaccess> ; static void setVecIdProperties (core::TVecId< vtype, vaccess > v, const core::VecIdProperties &properties, core::BaseData *vec_d);  . Friends; class MechanicalObjectInternalData< DataTypes >;  . Integration-related data; sofa::type::vector< Data< VecCoord > * > vectorsCoord;  Coordinates DOFs vectors table (static and dynamic allocated) More...;  ; sofa::type::vector< Data< VecDeriv > * > vectorsDeriv;  Derivates DOFs vectors table (static and dynamic allocated) More...;  ; sofa::type::vector< Data< MatrixDeriv > * > vectorsMatrixDeriv;  Constraint vectors table. More...;  ; void setVecCoord (core::ConstVecCoordId, Data< VecCoord > *);  Inserts VecCoord DOF coordinates vector at index in the vectorsCoord container. More...;  ; void setVecDeriv (core::ConstVecDerivId, Data< VecDeriv > *);  Inserts VecDeriv DOF derivates vector at index in the vectorsDeriv container. More...;  ; void setVecMatrixDeriv (core::ConstMatrixDerivId, Data< MatrixDeriv > *);  Inserts MatrixDeriv DOF at index in the MatrixDeriv container. More...;  . Additional Inherited Members;  Static Public Member Functions inherited from sofa::core::behavior::MechanicalState< DataTypes >; static std::string shortName (const T *ptr=nullptr, objectmodel::BaseObjectDescription *arg=nullptr);  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseObject; template<class T > ; static bool canCreate (T *, Ba",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1statecontainer_1_1_mechanical_object.html:33687,allocate,allocated,33687,api/master/sofa/html/classsofa_1_1component_1_1statecontainer_1_1_mechanical_object.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1statecontainer_1_1_mechanical_object.html,1,['allocate'],['allocated']
Energy Efficiency,"*field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, BaseData::DataFlags dataFlags);  Helper method used by initData() More...;  ; template<class T > ; void initData0 (Data< T > *field, typename Data< T >::InitData &res, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  . Function details. ◆ computePermutation(). void sofa::component::linearsolver::ordering::NaturalOrderingMethod::computePermutation ; (; const SparseMatrixPattern & ; inPattern, . int * ; outPermutation, . int * ; outInversePermutation . ). overridevirtual . Computes a permutation so that a permutation matrix can be applied on sparse matrices before a factorization. It helps to reduce the number of elements in the decomposition, hence improving the computation time when solving a linear system. Parameters. inPatternThe sparse matrix pattern as an input ; outPermutationThe output permutation. A memory space of the size of the matrix is expected. ; outInversePermutationThe inverse of the computed permutation. A memory space of the size of the matrix is expected. . Implements sofa::core::behavior::BaseOrderingMethod. ◆ methodName(). std::string sofa::component::linearsolver::ordering::NaturalOrderingMethod::methodName ; (; ); const. overridevirtual . Returns an identifier for the method name. This can be used as a key in a factory of solvers. See @EigenDirectSparseSolver ; Implements sofa::core::behavior::BaseOrderingMethod. ◆ SOFA_CLASS(). sofa::component::linearsolver::ordering::NaturalOrderingMethod::SOFA_CLASS ; (; NaturalOrderingMethod ; , . core::behavior::BaseOrderingMethod ;  . ). sofacomponentlinearsolverorderingNaturalOrderingMethod; Generated on Mon Nov 11 2024 02:47:32 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsolver_1_1ordering_1_1_natural_ordering_method.html:13603,reduce,reduce,13603,api/master/sofa/html/classsofa_1_1component_1_1linearsolver_1_1ordering_1_1_natural_ordering_method.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsolver_1_1ordering_1_1_natural_ordering_method.html,1,['reduce'],['reduce']
Energy Efficiency,"*node) override;  ; bool removeInNode (objectmodel::BaseNode *node) override;  ;  Public Member Functions inherited from sofa::core::behavior::BaseForceField;  SOFA_ABSTRACT_CLASS (BaseForceField, StateAccessor);  ; virtual void addForce (const MechanicalParams *mparams, MultiVecDerivId fId)=0;  Given the current position and velocity states, update the current force vector by computing and adding the forces associated with this ForceField. More...;  ; virtual void addDForce (const MechanicalParams *mparams, MultiVecDerivId dfId)=0;  Compute the force derivative given a small displacement from the position and velocity used in the previous call to addForce(). More...;  ; virtual void addMBKdx (const MechanicalParams *mparams, MultiVecDerivId dfId);  Accumulate the contribution of M, B, and/or K matrices multiplied by the dx vector with the given coefficients. More...;  ; virtual SReal getPotentialEnergy (const MechanicalParams *mparams=mechanicalparams::defaultInstance()) const =0;  Get the potential energy associated to this ForceField during the last call of addForce( const MechanicalParams* mparams );. More...;  ; virtual void addBToMatrix (const MechanicalParams *mparams, const sofa::core::behavior::MultiMatrixAccessor *matrix);  Compute the system matrix corresponding to . More...;  ; virtual void addMBKToMatrix (const MechanicalParams *mparams, const sofa::core::behavior::MultiMatrixAccessor *matrix);  Compute the system matrix corresponding to . More...;  ; virtual void buildStiffnessMatrix (StiffnessMatrix *matrix);  ; virtual void buildDampingMatrix (DampingMatrix *matrix);  ; virtual const sofa::linearalgebra::BaseMatrix * getComplianceMatrix (const MechanicalParams *);  ; virtual void addClambda (const MechanicalParams *, MultiVecDerivId, MultiVecDerivId, SReal);  Accumulate the contribution of the C compliant matrix multiplied by the given Lagrange multipliers lambda vector with the given cFactor coefficient. More...;  ;  Public Member Functions inherited",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_interaction_force_field.html:2515,energy,energy,2515,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_interaction_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_interaction_force_field.html,1,['energy'],['energy']
Energy Efficiency,", N > operator+ (const Monomial_LD< Real, N > &a);  ; Monomial_LD< Real, N > operator- (const Monomial_LD< Real, N > &a);  ; Monomial_LD< Real, N > operator* (const Monomial_LD< Real, N > &a);  ; Real operator() (const RNpoint &x) const;  Evaluating value. More...;  ; Real operator() (const RNpoint &x, unsigned int idvar) const;  Evaluating first partial derivative by idvar-th variable. More...;  ; Monomial_LD< Real, N > d (const unsigned int &ideriv) const;  Evaluating partial derivative hight order by idvar-th variable in ideriv-th order. More...;  ; void writeToStream (std::ostream &ff) const;  ; void readFromStream (std::istream &ff);  . Friends; template<typename FReal , unsigned int FN> ; Monomial_LD< FReal, FN > & operator* (const FReal &alpha, Monomial_LD< FReal, FN > &r);  . Attribute details. ◆ coef. template<typename Real , unsigned int N> . Real sofa::helper::Monomial_LD< Real, N >::coef. ◆ powers. template<typename Real , unsigned int N> . sofa::type::Vec<N,int> sofa::helper::Monomial_LD< Real, N >::powers. ◆ variables. template<typename Real , unsigned int N> . sofa::type::Vec<N,std::string> sofa::helper::Monomial_LD< Real, N >::variables. protected . Constructor details. ◆ Monomial_LD() [1/3]. template<typename Real , unsigned int N> . sofa::helper::Monomial_LD< Real, N >::Monomial_LD. Tools used in FEM computing . ◆ Monomial_LD() [2/3]. template<typename Real , unsigned int N> . sofa::helper::Monomial_LD< Real, N >::Monomial_LD ; (; Real ; m_coef, .  ; ... . ). ◆ Monomial_LD() [3/3]. template<typename Real , unsigned int N> . sofa::helper::Monomial_LD< Real, N >::Monomial_LD ; (; const Monomial_LD< Real, N > & ; a). Function details. ◆ d(). template<typename Real , unsigned int N> . Monomial_LD< Real, N > sofa::helper::Monomial_LD< Real, N >::d ; (; const unsigned int & ; ideriv); const. Evaluating partial derivative hight order by idvar-th variable in ideriv-th order. ; Derivative operator allowing to write p1=p2.d(x); . ◆ degree(). template<typename",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_monomial___l_d.html:3270,power,powers,3270,api/master/sofa/html/classsofa_1_1helper_1_1_monomial___l_d.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_monomial___l_d.html,1,['power'],['powers']
Energy Efficiency,", unsigned int idvar) constsofa::helper::Monomial_LD< Real, N >; operator*(const Real &alpha)sofa::helper::Monomial_LD< Real, N >inline; operator*(const Monomial_LD< Real, N > &a)sofa::helper::Monomial_LD< Real, N >inline; operator*(const FReal &alpha, Monomial_LD< FReal, FN > &r)sofa::helper::Monomial_LD< Real, N >friend; operator*=(const Real &alpha)sofa::helper::Monomial_LD< Real, N >inline; operator*=(const Monomial_LD< Real, N > &b)sofa::helper::Monomial_LD< Real, N >; operator+() constsofa::helper::Monomial_LD< Real, N >inline; operator+(const Monomial_LD< Real, N > &a)sofa::helper::Monomial_LD< Real, N >inline; operator+=(const Monomial_LD< Real, N > &b)sofa::helper::Monomial_LD< Real, N >; operator-() constsofa::helper::Monomial_LD< Real, N >inline; operator-(const Monomial_LD< Real, N > &a)sofa::helper::Monomial_LD< Real, N >inline; operator-=(const Monomial_LD< Real, N > &b)sofa::helper::Monomial_LD< Real, N >; operator/(const Real &alpha)sofa::helper::Monomial_LD< Real, N >inline; operator/=(const Real &alpha)sofa::helper::Monomial_LD< Real, N >inline; operator=(const Monomial_LD< Real, N > &b)sofa::helper::Monomial_LD< Real, N >; operator==(const Monomial_LD< Real, N > &b) constsofa::helper::Monomial_LD< Real, N >; powerssofa::helper::Monomial_LD< Real, N >; readFromStream(std::istream &ff)sofa::helper::Monomial_LD< Real, N >; RNpoint typedefsofa::helper::Monomial_LD< Real, N >; SetCoef(const Real &m_coef)sofa::helper::Monomial_LD< Real, N >inline; SetPower(int numbervar, int powervalue)sofa::helper::Monomial_LD< Real, N >inline; variablessofa::helper::Monomial_LD< Real, N >protected; writeToStream(std::ostream &ff) constsofa::helper::Monomial_LD< Real, N >; x enum valuesofa::helper::Monomial_LD< Real, N >; xy enum valuesofa::helper::Monomial_LD< Real, N >; y enum valuesofa::helper::Monomial_LD< Real, N >; yz enum valuesofa::helper::Monomial_LD< Real, N >; z enum valuesofa::helper::Monomial_LD< Real, N >; zx enum valuesofa::helper::Monomial_LD< Real, N >.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_monomial___l_d-members.html:2205,power,powerssofa,2205,api/master/sofa/html/classsofa_1_1helper_1_1_monomial___l_d-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_monomial___l_d-members.html,2,['power'],"['powerssofa', 'powervalue']"
Energy Efficiency,. /constraint-on-collision-model-points; ; SOFA - Topic: Constraint on collision model points. /constraint-tutorial-scene-crash; . /feed; ; [SOLVED] Constraint Tutorial scene crash – SOFA. SOFA - Topic: [SOLVED] Constraint Tutorial scene crash. /contactlistener-error-on-sofapython3; ; SOFA - Topic: [SOLVED] ContactListener error on SofaPython3. /continuous-collision-detection; ; SOFA - Topic: Continuous collision detection. /continuously-grid-topology; ; SOFA - Topic: [SOLVED] Continuously Grid Topology. /continuous-rotation-of-view-by-mouse-click-and-move; ; SOFA - Topic: [SOLVED] Continuous rotation of view by mouse click and move. /contributing-to-sofa; ; SOFA - Topic: [SOLVED] Contributing to SOFA. /contributor-list-updated; ; SOFA - Topic: Contributor list updated!. /control-actuators-and-receive-sensor-variables-of-scene-scn; ; SOFA - Topic: Control actuators and receive sensor variables of scene .scn. /control-actuators-and-receive-sensor-variables-of-scene-scn-legged-robot; ; SOFA - Topic: [SOLVED] Control actuators and receive sensor variables of scene .scn Legged Robot. /converting-the-stl-mesh-to-vtk-mesh; ; SOFA - Topic: [SOLVED] Converting the STL mesh to VTK mesh. /could-not-find-git-for-clone-of-sofapython3; ; SOFA - Topic: [SOLVED] could not find git for clone of SofaPython3. /could-not-read-value-for-data-field-position-and-segfault; ; SOFA - Topic: [SOLVED] “Could not read value for data field position” and segfault. /could-sofa-use-full-python-instead-of-being-embedded-in-xml-file-using-component; . /feed; ; [SOLVED] Could sofa use full Python instead of being embedded in XML file using component – SOFA. SOFA - Topic: [SOLVED] Could sofa use full Python instead of being embedded in XML file using component. /could-you-explain-the-difference-between-geomaigc-and-sensible-plugin; . /feed; ; [SOLVED] Could you explain the difference between Geomaigc and sensible plugin? – SOFA. SOFA - Topic: [SOLVED] Could you explain the difference between Geomaigc ,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/index-wcopy.html:281503,sensor,sensor-variables-of-scene-scn-legged-robot,281503,index-wcopy.html,https://www.sofa-framework.org,https://www.sofa-framework.org/index-wcopy.html,2,['sensor'],"['sensor', 'sensor-variables-of-scene-scn-legged-robot']"
Energy Efficiency,". More...;  ; Data< bool > alphaBlend;  Enable alpha blending. More...;  ; Data< bool > depthTest;  Enable depth testing. More...;  ; Data< int > cullFace;  Face culling (0 = no culling, 1 = cull back faces, 2 = cull front faces) More...;  ; Data< GLfloat > lineWidth;  Line width (set if != 1, only for lines rendering) More...;  ; Data< GLfloat > pointSize;  Point size (set if != 1, only for points rendering) More...;  ; Data< bool > lineSmooth;  Enable smooth line rendering. More...;  ; Data< bool > pointSmooth;  Enable smooth point rendering. More...;  ; DeprecatedAndRemoved isEnabled;  ; Data< sofa::helper::OptionsGroup > primitiveType;  Select types of primitives to send (necessary for some shader types such as geometry or tessellation) More...;  ; Data< sofa::helper::OptionsGroup > blendEquation;  if alpha blending is enabled this specifies how source and destination colors are combined More...;  ; Data< sofa::helper::OptionsGroup > sourceFactor;  if alpha blending is enabled this specifies how the red, green, blue, and alpha source blending factors are computed More...;  ; Data< sofa::helper::OptionsGroup > destFactor;  if alpha blending is enabled this specifies how the red, green, blue, and alpha destination blending factors are computed More...;  ; GLenum blendEq;  ; GLenum sfactor;  ; GLenum dfactor;  ; sofa::gl::Texture * tex;  ; GLuint vbo;  ; GLuint iboEdges;  ; GLuint iboTriangles;  ; GLuint iboQuads;  ; bool VBOGenDone;  ; bool initDone;  ; bool useEdges;  ; bool useTriangles;  ; bool useQuads;  ; bool canUsePatches;  ; size_t oldVerticesSize;  ; size_t oldNormalsSize;  ; size_t oldTexCoordsSize;  ; size_t oldTangentsSize;  ; size_t oldBitangentsSize;  ; size_t oldEdgesSize;  ; size_t oldTrianglesSize;  ; size_t oldQuadsSize;  ; int edgesRevision;  ; int trianglesRevision;  ; int quadsRevision;  ; std::vector< sofa::type::Vec3f > verticesTmpBuffer;  ; std::vector< sofa::type::Vec3f > normalsTmpBuffer;  ; std::vector< sofa::gl::Texture * > textures;  ; ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_merge_visual_models.html:28499,green,green,28499,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_merge_visual_models.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_merge_visual_models.html,3,['green'],['green']
Energy Efficiency,". SOFA API: sofa::component::solidmechanics::spring::FastTriangularBendingSprings< _DataTypes >::EdgeSpring Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; Friends |; List of all members . sofa::component::solidmechanics::spring::FastTriangularBendingSprings< _DataTypes >::EdgeSpring Class Reference . #include <FastTriangularBendingSprings.h>. Public Attributes; sofa::type::Vec< 4, unsigned > vid;  vertex indices, in circular order More...;  ; sofa::type::Vec< 4, Real > alpha;  weight of each vertex in the bending vector More...;  ; Real lambda;  bending stiffness More...;  ; bool is_activated;  ; bool is_initialized;  . Public Member Functions; void setEdgeSpring (const VecCoord &p, unsigned iA, unsigned iB, unsigned iC, unsigned iD, Real materialBendingStiffness);  Store the vertex indices and perform all the precomputations. More...;  ; Real addForce (VecDeriv &f, const VecCoord &p, const VecDeriv &) const;  Accumulates force and return potential energy. More...;  ; void addDForce (VecDeriv &df, const VecDeriv &dp, Real kfactor) const;  ; void addStiffness (sofa::linearalgebra::BaseMatrix *bm, unsigned int offset, SReal scale, core::behavior::ForceField< _DataTypes > *ff) const;  Stiffness matrix assembly. More...;  ; void getStiffness (StiffnessMatrix &K) const;  Compliant stiffness matrix assembly. More...;  ; void replaceIndex (Index oldIndex, Index newIndex);  replace a vertex index with another one More...;  ; void replaceIndices (const type::vector< Index > &newIndices);  replace all the vertex indices with the given ones More...;  . Friends; std::ostream & operator<< (std::ostream &os, const EdgeSpring &);  Output stream. More...;  ; std::istream & operator>> (std::istream &in, EdgeSpring &);  Input stream. More...;  . Attribute details. ◆ alpha. template<class _DataTypes > . sofa::type::Vec<4,Real> sofa::component::solidmechanics::spring::FastTriangularBendingSpring",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_fast_triangular_bending_springs_1_1_edge_spring.html:1056,energy,energy,1056,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_fast_triangular_bending_springs_1_1_edge_spring.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_fast_triangular_bending_springs_1_1_edge_spring.html,1,['energy'],['energy']
Energy Efficiency,". inline . Retrieve the Object2 path. . ◆ getPotentialEnergy() [1/2]. template<class DataTypes > . SReal sofa::core::behavior::PairInteractionForceField< DataTypes >::getPotentialEnergy ; (; const MechanicalParams * ; mparams); const. overridevirtual . Get the potential energy associated to this ForceField.; Used to estimate the total energy of the system by some post-stabilization techniques.; This method retrieves the x vector from the MechanicalState and call the internal getPotentialEnergy(const VecCoord&,const VecCoord&) method implemented by the component. ; Implements sofa::core::behavior::BaseForceField. ◆ getPotentialEnergy() [2/2]. template<class TDataTypes > . virtual SReal sofa::core::behavior::PairInteractionForceField< TDataTypes >::getPotentialEnergy ; (; const MechanicalParams * ; mparams, . const DataVecCoord & ; x1, . const DataVecCoord & ; x2 . ); const. pure virtual . Get the potential energy associated to this ForceField.; Used to estimate the total energy of the system by some post-stabilization techniques.; This method must be implemented by the component, and is usually called by the generic ForceField::getPotentialEnergy() method. ; Implemented in sofa::component::solidmechanics::spring::RepulsiveSpringForceField< DataTypes >, sofa::component::collision::response::contact::PenalityContactForceField< DataTypes >, sofa::component::solidmechanics::spring::SpringForceField< DataTypes >, sofa::component::solidmechanics::spring::VectorSpringForceField< DataTypes >, sofa::component::solidmechanics::spring::PolynomialSpringsForceField< DataTypes >, sofa::component::solidmechanics::spring::JointSpringForceField< DataTypes >, sofa::component::solidmechanics::spring::GearSpringForceField< DataTypes >, and sofa::component::solidmechanics::spring::FrameSpringForceField< DataTypes >. ◆ setPathObject1(). template<class TDataTypes > . void sofa::core::behavior::PairInteractionForceField< TDataTypes >::setPathObject1 ; (; const std::string & ; path). inline ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_pair_interaction_force_field.html:27217,energy,energy,27217,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_pair_interaction_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_pair_interaction_force_field.html,1,['energy'],['energy']
Energy Efficiency,". inline . ◆ CreateString() [1/4]. std::string sofa::core::objectmodel::BaseLink::CreateString ; (; Base * ; object, . Base * ; from . ). static . ◆ CreateString() [2/4]. std::string sofa::core::objectmodel::BaseLink::CreateString ; (; Base * ; object, . BaseData * ; data, . Base * ; from . ). static . ◆ CreateString() [3/4]. std::string sofa::core::objectmodel::BaseLink::CreateString ; (; BaseData * ; data, . Base * ; from . ). static . ◆ CreateString() [4/4]. std::string sofa::core::objectmodel::BaseLink::CreateString ; (; const std::string & ; path, . const std::string & ; data = """" . ). static . ◆ CreateStringData(). std::string sofa::core::objectmodel::BaseLink::CreateStringData ; (; BaseData * ; data). static . ◆ CreateStringPath(). std::string sofa::core::objectmodel::BaseLink::CreateStringPath ; (; Base * ; object, . Base * ; from . ). static . ◆ getCounter(). int sofa::core::objectmodel::BaseLink::getCounter ; (; ); const. inline . Return the number of changes since creation This can be used to efficiently detect changes . ◆ getDestClass(). virtual const BaseClass* sofa::core::objectmodel::BaseLink::getDestClass ; (; ); const. pure virtual . Implemented in sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >, sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags &~BaseLink::FLAG_MULTILINK >, and sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags|BaseLink::FLAG_MULTILINK >. ◆ getFlag(). bool sofa::core::objectmodel::BaseLink::getFlag ; (; LinkFlagsEnum ; flag); const. inline . Get one flag. . ◆ getHelp(). const std::string& sofa::core::objectmodel::BaseLink::getHelp ; (; ); const. inline . Get help message. . ◆ getLinkedBase(). Base* sofa::core::objectmodel::BaseLink::getLinkedBase ; (; std::size_t ; index = 0); const. inline . ◆ getLinkedPath(). std::string sofa::core::objectmodel::BaseLink::getLinkedPath ; (; const std::size_t ; index = 0); const. ◆ getName(). const std::string& sofa::core::objectmodel::BaseLink::getName ; (; )",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_link.html:5541,efficient,efficiently,5541,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_link.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_link.html,1,['efficient'],['efficiently']
Energy Efficiency,". template<typename _ForceFieldType > . bool sofa::ForceField_test< _ForceFieldType >::checkStiffness. If false, stops the test after checking the force, without checking the stiffness. Default value is true. . ◆ debug. template<typename _ForceFieldType > . bool sofa::ForceField_test< _ForceFieldType >::debug. Print debug messages. Default is false. . ◆ deltaRange. template<typename _ForceFieldType > . std::pair<Real,Real> sofa::ForceField_test< _ForceFieldType >::deltaRange. Minimum/Maximum amplitudes of the random perturbation used to check the stiffness using finite differences. ; WarningShould be more than errorMax/stiffness. This is not checked automatically. . ◆ dof. template<typename _ForceFieldType > . DOF::SPtr sofa::ForceField_test< _ForceFieldType >::dof. ◆ errorFactorPotentialEnergy. template<typename _ForceFieldType > . SReal sofa::ForceField_test< _ForceFieldType >::errorFactorPotentialEnergy. The test for potential energy is successful if the (infinite norm of the) difference is less than errorFactorPotentialEnergy * errorMax *epsilon (default = 1) . ◆ errorMax. template<typename _ForceFieldType > . SReal sofa::ForceField_test< _ForceFieldType >::errorMax. tolerance in precision test. The actual value is this one times the epsilon of the Real numbers (typically float or double) . ◆ flags. template<typename _ForceFieldType > . unsigned char sofa::ForceField_test< _ForceFieldType >::flags. testing options. (all by default). To be used with precaution. . ◆ force. template<typename _ForceFieldType > . ForceField::SPtr sofa::ForceField_test< _ForceFieldType >::force. ◆ node. template<typename _ForceFieldType > . simulation::Node::SPtr sofa::ForceField_test< _ForceFieldType >::node. ◆ TEST_ALL. template<typename _ForceFieldType > . const unsigned char sofa::ForceField_test< _ForceFieldType >::TEST_ALL = UCHAR_MAX. static . testing everything . ◆ TEST_POTENTIAL_ENERGY. template<typename _ForceFieldType > . const unsigned char sofa::ForceField_test< _ForceFiel",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1_force_field__test.html:6530,energy,energy,6530,api/master/sofa/html/structsofa_1_1_force_field__test.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1_force_field__test.html,1,['energy'],['energy']
Energy Efficiency,"...;  ; size_t size () const;  . Friends; std::ostream & operator<< (std::ostream &out, const TMultiVec< vtype > &mv);  . Attribute details. ◆ dynamic. template<VecType vtype> . bool sofa::core::behavior::TMultiVec< vtype >::dynamic. protected . Flag indicating if this vector was dynamically allocated. . ◆ v. template<VecType vtype> . MyMultiVecId sofa::core::behavior::TMultiVec< vtype >::v. protected . Identifier of this vector. . ◆ vop. template<VecType vtype> . BaseVectorOperations* sofa::core::behavior::TMultiVec< vtype >::vop. protected . Solver who is using this vector. . Constructor details. ◆ TMultiVec() [1/3]. template<VecType vtype> . sofa::core::behavior::TMultiVec< vtype >::TMultiVec ; (; BaseVectorOperations * ; vop, . MyMultiVecId ; v . ). inline . Refers to a state vector with the given ID (VecId::position(), VecId::velocity(), etc). . ◆ TMultiVec() [2/3]. template<VecType vtype> . sofa::core::behavior::TMultiVec< vtype >::TMultiVec ; (; ). inline . Refers to a not yet allocated state vector. . ◆ TMultiVec() [3/3]. template<VecType vtype> . sofa::core::behavior::TMultiVec< vtype >::TMultiVec ; (; BaseVectorOperations * ; vop, . bool ; dynamic = true, . const VecIdProperties & ; properties = {} . ). inline . Allocate a new temporary vector with the given type (sofa::core::V_COORD or sofa::core::V_DERIV). . ◆ ~TMultiVec(). template<VecType vtype> . sofa::core::behavior::TMultiVec< vtype >::~TMultiVec ; (; ). inline . Function details. ◆ clear(). template<VecType vtype> . void sofa::core::behavior::TMultiVec< vtype >::clear ; (; ). inline . v = 0 . ◆ dot(). template<VecType vtype> . SReal sofa::core::behavior::TMultiVec< vtype >::dot ; (; MyMultiVecId ; a). inline . Returnsv.a . ◆ eq() [1/3]. template<VecType vtype> . void sofa::core::behavior::TMultiVec< vtype >::eq ; (; AllMultiVecId ; a, . AllMultiVecId ; b, . SReal ; f = 1.0 . ). inline . v = a+b*f . ◆ eq() [2/3]. template<VecType vtype> . void sofa::core::behavior::TMultiVec< vtype >::eq ; (; MyMult",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_t_multi_vec.html:3705,allocate,allocated,3705,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_t_multi_vec.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_t_multi_vec.html,1,['allocate'],['allocated']
Energy Efficiency,".;  ; bool isTheOutputTopologySubdividingTheInputOne () override;  return true if the output topology subdivide the input one. (the topology uses the Loc2GlobVec/Glob2LocMap/In2OutMap structs and share the same DOFs) More...;  ; Index getGlobIndex (Index ind) override;  ; Index getFromIndex (Index ind) override;  ;  Public Member Functions inherited from sofa::core::topology::TopologicalMapping;  SOFA_ABSTRACT_CLASS (TopologicalMapping, objectmodel::BaseObject);  ; virtual void setTopologies (In *from, Out *to);  Specify the input and output models. More...;  ; void setPathInputObject (const std::string &o);  Set the path to the objects mapped in the scene graph. More...;  ; void setPathOutputObject (const std::string &o);  ; In * getFrom ();  Accessor to the INPUT topology of the TopologicalMapping : More...;  ; Out * getTo ();  Accessor to the OUTPUT topology of the TopologicalMapping : More...;  ; virtual void updateTopologicalMappingBottomUp ();  Method called at each topological changes propagation which comes from the OUTPUT topology to adapt the INPUT topology : More...;  ; virtual bool propagateFromInputToOutputModel ();  Return true if this mapping is able to propagate topological changes from input to output model. More...;  ; virtual bool propagateFromOutputToInputModel ();  Return true if this mapping is able to propagate topological changes from output to input model. More...;  ; const std::map< Index, Index > & getGlob2LocMap ();  Accessor to index maps : More...;  ; void dumpGlob2LocMap ();  ; void dumpLoc2GlobVec ();  ; virtual bool checkTopologies ();  Method to check the topology mapping maps regarding the upper topology. More...;  ; virtual void getFromIndex (type::vector< Index > &, const Index) const;  ; const std::map< Index, sofa::type::vector< Index > > & getIn2OutMap ();  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObject;  SOFA_CLASS (BaseObject, Base);  ; virtual void draw (const core::visual::VisualParams *);  R",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1mapping_1_1_subset_topological_mapping.html:6557,adapt,adapt,6557,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1mapping_1_1_subset_topological_mapping.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1mapping_1_1_subset_topological_mapping.html,1,['adapt'],['adapt']
Energy Efficiency,".;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, BaseData::DataFlags dataFlags);  Helper method used by initData() More...;  ; template<class T > ; void initData0 (Data< T > *field, typename Data< T >::InitData &res, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  . Function details. ◆ computePermutation(). template<class EigenOrderingMethodType > . void sofa::component::linearsolver::ordering::BaseEigenOrderingMethod< EigenOrderingMethodType >::computePermutation ; (; const SparseMatrixPattern & ; inPattern, . int * ; outPermutation, . int * ; outInversePermutation . ). overridevirtual . Computes a permutation so that a permutation matrix can be applied on sparse matrices before a factorization. It helps to reduce the number of elements in the decomposition, hence improving the computation time when solving a linear system. Parameters. inPatternThe sparse matrix pattern as an input ; outPermutationThe output permutation. A memory space of the size of the matrix is expected. ; outInversePermutationThe inverse of the computed permutation. A memory space of the size of the matrix is expected. . Implements sofa::core::behavior::BaseOrderingMethod. ◆ SOFA_CLASS(). template<class EigenOrderingMethodType > . sofa::component::linearsolver::ordering::BaseEigenOrderingMethod< EigenOrderingMethodType >::SOFA_CLASS ; (; BaseEigenOrderingMethod< EigenOrderingMethodType > ; , . core::behavior::BaseOrderingMethod ;  . ). sofacomponentlinearsolverorderingBaseEigenOrderingMethod; Generated on Mon Nov 11 2024 02:47:32 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsolver_1_1ordering_1_1_base_eigen_ordering_method.html:14184,reduce,reduce,14184,api/master/sofa/html/classsofa_1_1component_1_1linearsolver_1_1ordering_1_1_base_eigen_ordering_method.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsolver_1_1ordering_1_1_base_eigen_ordering_method.html,1,['reduce'],['reduce']
Energy Efficiency,"0, 1, 0, 1), . const type::Vec4f & ; colorZ = type::Vec4f(0, 0, 1, 1) . ). staticdelete . ◆ draw() [10/16]. void sofa::gl::Axis::draw ; (; const type::Vec3 & ; center, . const Quaternion & ; orient, . const type::Vec3 & ; length, . const type::RGBAColor & ; colorX = type::RGBAColor::red(), . const type::RGBAColor & ; colorY = type::RGBAColor::green(), . const type::RGBAColor & ; colorZ = type::RGBAColor::red() . ). static . ◆ draw() [11/16]. static void sofa::gl::Axis::draw ; (; const type::Vec3 & ; center, . const Quaternion & ; orient, . const type::Vec3 & ; length, . const type::Vec4f & ; colorX = type::Vec4f(1, 0, 0, 1), . const type::Vec4f & ; colorY = type::Vec4f(0, 1, 0, 1), . const type::Vec4f & ; colorZ = type::Vec4f(0, 0, 1, 1) . ). staticdelete . ◆ draw() [12/16]. void sofa::gl::Axis::draw ; (; const type::Vec3 & ; center, . const Quaternion & ; orient, . SReal ; length = 1.0_sreal, . const type::RGBAColor & ; colorX = type::RGBAColor::red(), . const type::RGBAColor & ; colorY = type::RGBAColor::green(), . const type::RGBAColor & ; colorZ = type::RGBAColor::red() . ). static . ◆ draw() [13/16]. static void sofa::gl::Axis::draw ; (; const type::Vec3 & ; center, . const Quaternion & ; orient, . SReal ; length = 1.0_sreal, . const type::Vec4f & ; colorX = type::Vec4f(1, 0, 0, 1), . const type::Vec4f & ; colorY = type::Vec4f(0, 1, 0, 1), . const type::Vec4f & ; colorZ = type::Vec4f(0, 0, 1, 1) . ). staticdelete . ◆ draw() [14/16]. void sofa::gl::Axis::draw ; (; const type::Vec3 & ; center, . const type::Vec3 & ; ext, . const double & ; r1, . const double & ; r2 . ). static . ◆ draw() [15/16]. void sofa::gl::Axis::draw ; (; const type::Vec3 & ; center, . const type::Vec3 & ; ext, . const double & ; radius . ). static . ◆ draw() [16/16]. void sofa::gl::Axis::draw ; (; const type::Vec4f & ; colorX = type::Vec4f(1, 0, 0, 1), . const type::Vec4f & ; colorY = type::Vec4f(0, 1, 0, 1), . const type::Vec4f & ; colorZ = type::Vec4f(0, 0, 1, 1) . ). delete . ◆ SOFA_ATTRI",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1_axis.html:9554,green,green,9554,api/master/sofa/html/classsofa_1_1gl_1_1_axis.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1_axis.html,1,['green'],['green']
Energy Efficiency,"4f(0, 1, 0, 1), . const type::Vec4f & ; colorZ = type::Vec4f(0, 0, 1, 1) . ). staticdelete . ◆ draw() [8/16]. void sofa::gl::Axis::draw ; (; const type::Vec3 & ; center, . const double ; orient[4][4], . SReal ; length = 1.0_sreal, . const type::RGBAColor & ; colorX = type::RGBAColor::red(), . const type::RGBAColor & ; colorY = type::RGBAColor::green(), . const type::RGBAColor & ; colorZ = type::RGBAColor::red() . ). static . ◆ draw() [9/16]. static void sofa::gl::Axis::draw ; (; const type::Vec3 & ; center, . const double ; orient[4][4], . SReal ; length = 1.0_sreal, . const type::Vec4f & ; colorX = type::Vec4f(1, 0, 0, 1), . const type::Vec4f & ; colorY = type::Vec4f(0, 1, 0, 1), . const type::Vec4f & ; colorZ = type::Vec4f(0, 0, 1, 1) . ). staticdelete . ◆ draw() [10/16]. void sofa::gl::Axis::draw ; (; const type::Vec3 & ; center, . const Quaternion & ; orient, . const type::Vec3 & ; length, . const type::RGBAColor & ; colorX = type::RGBAColor::red(), . const type::RGBAColor & ; colorY = type::RGBAColor::green(), . const type::RGBAColor & ; colorZ = type::RGBAColor::red() . ). static . ◆ draw() [11/16]. static void sofa::gl::Axis::draw ; (; const type::Vec3 & ; center, . const Quaternion & ; orient, . const type::Vec3 & ; length, . const type::Vec4f & ; colorX = type::Vec4f(1, 0, 0, 1), . const type::Vec4f & ; colorY = type::Vec4f(0, 1, 0, 1), . const type::Vec4f & ; colorZ = type::Vec4f(0, 0, 1, 1) . ). staticdelete . ◆ draw() [12/16]. void sofa::gl::Axis::draw ; (; const type::Vec3 & ; center, . const Quaternion & ; orient, . SReal ; length = 1.0_sreal, . const type::RGBAColor & ; colorX = type::RGBAColor::red(), . const type::RGBAColor & ; colorY = type::RGBAColor::green(), . const type::RGBAColor & ; colorZ = type::RGBAColor::red() . ). static . ◆ draw() [13/16]. static void sofa::gl::Axis::draw ; (; const type::Vec3 & ; center, . const Quaternion & ; orient, . SReal ; length = 1.0_sreal, . const type::Vec4f & ; colorX = type::Vec4f(1, 0, 0, 1), . const type::V",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1_axis.html:8877,green,green,8877,api/master/sofa/html/classsofa_1_1gl_1_1_axis.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1_axis.html,1,['green'],['green']
Energy Efficiency,"79a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; Protected Member Functions |; List of all members . sofa::gui::qt::QGraphStatWidget Class Referenceabstract . #include <QGraphStatWidget.h>. Inheritance diagram for sofa::gui::qt::QGraphStatWidget:. [legend]; Detailed Description; Base class to make graphes in the stat tab of the node widget TODO add gnuplot export . Protected Attributes; simulation::Node * m_node;  pointer to the node monitored More...;  ; int m_bufferSize;  size of the buffers to stored More...;  ; QChart * m_chart;  Pointer to the chart Data. More...;  ; std::vector< QLineSeries * > m_curves;  vector of series to be plotted More...;  ; QValueAxis * m_axisX;  x axis pointer More...;  ; QValueAxis * m_axisY;  y axis pointer More...;  ; SReal m_yMin;  min y axis value stored More...;  ; SReal m_yMax;  max y axis value stored More...;  ; SReal m_lastTime;  last timestep monitored More...;  ; int m_cptStep;  step counter monitored More...;  . Public Member Functions;  QGraphStatWidget (QWidget *parent, simulation::Node *node, const QString &title, unsigned numberOfCurves, int bufferSize);  ; virtual ~QGraphStatWidget ();  ; virtual void step () final;  Main method called to update the graph. More...;  ; virtual void stepImpl ()=0;  the only function that should be overloaded More...;  . Protected Member Functions; void setCurve (unsigned index, const QString &name, const QColor &color);  set the index-th curve (index must be < _numberOfCurves) More...;  ; void updateYAxisBounds (SReal value);  Method to update Y axis scale. More...;  ; void flushSeries ();  flush data from series not anymore displayed More...;  . Attribute details. ◆ m_axisX. QValueAxis* sofa::gui::qt::QGraphStatWidget::m_axisX. protected . x axis pointer . ◆ m_axisY. QValueAxis* sofa::gui::qt::QGraphStatWidget::m_axisY. protected . y axis pointer . ◆ m_bufferSize. int sofa::gui::qt::QGraphStatWidget::m_bufferSize. protected .",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_graph_stat_widget.html:1086,monitor,monitored,1086,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_graph_stat_widget.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_graph_stat_widget.html,1,['monitor'],['monitored']
Energy Efficiency,"9a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; Friends |; List of all members . sofa::core::behavior::TMultiVec< vtype > Class Template Reference . #include <MultiVec.h>. Inheritance diagram for sofa::core::behavior::TMultiVec< vtype >:. [legend]; Detailed Description; template<VecType vtype>; class sofa::core::behavior::TMultiVec< vtype >; Helper class providing a high-level view of underlying state vectors.; It is used to convert math-like operations to call to computation methods. . Protected Attributes; BaseVectorOperations * vop;  Solver who is using this vector. More...;  ; MyMultiVecId v;  Identifier of this vector. More...;  ; bool dynamic;  Flag indicating if this vector was dynamically allocated. More...;  . Public Member Functions;  TMultiVec (BaseVectorOperations *vop, MyMultiVecId v);  Refers to a state vector with the given ID (VecId::position(), VecId::velocity(), etc). More...;  ;  TMultiVec ();  Refers to a not yet allocated state vector. More...;  ;  TMultiVec (BaseVectorOperations *vop, bool dynamic=true, const VecIdProperties &properties={});  Allocate a new temporary vector with the given type (sofa::core::V_COORD or sofa::core::V_DERIV). More...;  ;  ~TMultiVec ();  ;  operator MyMultiVecId ();  Automatic conversion to the underlying VecId. More...;  ;  operator ConstMyMultiVecId ();  ;  operator AllMultiVecId ();  ;  operator ConstAllMultiVecId ();  ; const MyMultiVecId & id () const;  ; MyMultiVecId & id ();  ; BaseVectorOperations * ops ();  ; void setOps (BaseVectorOperations *op);  ; void realloc (BaseVectorOperations *_vop, bool interactionForceField=false, bool propagate=false, const VecIdProperties &properties={});  ; void clear ();  v = 0 More...;  ; void eq (MyMultiVecId a);  v = a More...;  ; void eq (MyMultiVecId a, SReal f);  v = a*f More...;  ; void peq (AllMultiVecId a, SReal f=1.0);  v += a*f More...;  ; void teq (SReal f);  v *= f More...;  ; void eq (AllMultiVecId ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_t_multi_vec.html:1104,allocate,allocated,1104,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_t_multi_vec.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_t_multi_vec.html,1,['allocate'],['allocated']
Energy Efficiency,":. [legend]; Detailed Description; Class gathering parameters use by constraint components methods, and transmitted by visitors read the velocity and position and where the . Protected Attributes; ConstMultiVecCoordId m_x;  Ids of position vector. More...;  ; ConstMultiVecDerivId m_v;  Ids of velocity vector. More...;  ; MultiMatrixDerivId m_j;  Ids of the constraint jacobian matrix. More...;  ; MultiVecDerivId m_dx;  Ids of constraint correction vector. More...;  ; MultiVecDerivId m_lambda;  Ids of constraint lambda vector. More...;  ; ConstraintOrder m_constOrder;  Description of the order of the constraint. More...;  ; double m_smoothFactor;  Smooth contribution factor (for smooth constraints resolution) More...;  . Public Member Functions;  SOFA_ATTRIBUTE_DISABLED__CONSTORDER () static const expr auto POS;  ;  SOFA_ATTRIBUTE_DISABLED__CONSTORDER () static const expr auto VEL;  ;  SOFA_ATTRIBUTE_DISABLED__CONSTORDER () static const expr auto ACC;  ;  SOFA_ATTRIBUTE_DISABLED__CONSTORDER () static const expr auto POS_AND_VEL;  ; std::string_view getName () const;  ;  ConstraintParams (const sofa::core::ExecParams &p= *sofa::core::execparams::defaultInstance());  Constructor, initializing all VecIds to default values, implicit and energy flags to false. More...;  ; ConstraintParams & setExecParams (const core::ExecParams *params);  ; Flags and parameters getters; ConstraintOrder constOrder () const;  ; ConstraintParams & setOrder (ConstraintOrder o);  ; double smoothFactor () const;  Smooth contribution factor (for smooth constraints resolution) More...;  ; Access to vectors from a given state container (i.e. State or MechanicalState); template<class S > ; const Data< typename S::VecCoord > * readX (const S *state) const;  Read access to the free (unconstrained) position vector. More...;  ; template<class S > ; const Data< typename S::VecDeriv > * readV (const S *state) const;  Read access to the free (unconstrained) velocity vector. More...;  ; template<class S > ; ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_constraint_params.html:1621,energy,energy,1621,api/master/sofa/html/classsofa_1_1core_1_1_constraint_params.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_constraint_params.html,1,['energy'],['energy']
Energy Efficiency,"::DataFlags dataFlags);  Helper method used by initData() More...;  ; template<class T > ; void initData0 (Data< T > *field, typename Data< T >::InitData &res, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  . Function details. ◆ addKToMatrix(). void sofa::core::behavior::BaseInteractionForceField::addKToMatrix ; (; const MechanicalParams * ; mparams, . const sofa::core::behavior::MultiMatrixAccessor * ; matrix . ). inlineoverridevirtual . Compute the system matrix corresponding to . ; Parameters. mparamsmparams->kFactor() is the coefficient for stiffness contributions (i.e. DOFs term in the ODE) ; matrixthe matrix to add the result to . Implements sofa::core::behavior::BaseForceField. ◆ exportGnuplot(). virtual void sofa::core::behavior::BaseInteractionForceField::exportGnuplot ; (; SReal ; time). inlinevirtual . export kinetic and potential energy state at ""time"" to a gnuplot file ; Reimplemented in sofa::component::solidmechanics::spring::SpringForceField< DataTypes >. ◆ getMechModel1(). BaseMechanicalState * sofa::core::behavior::BaseInteractionForceField::getMechModel1 ; (; ). virtual . Get the first MechanicalState . ◆ getMechModel2(). BaseMechanicalState * sofa::core::behavior::BaseInteractionForceField::getMechModel2 ; (; ). virtual . Get the first MechanicalState . ◆ initGnuplot(). virtual void sofa::core::behavior::BaseInteractionForceField::initGnuplot ; (; const std::string ; path). inlinevirtual . initialization to export potential energy to gnuplot files format ; Reimplemented in sofa::component::solidmechanics::spring::SpringForceField< DataTypes >. ◆ insertInNode(). bool sofa::core::behavior::BaseInteractionForceField::insertInNode ; (; objectmodel::BaseNode * ; ). overridevirtual . the component can insert itself directly in the right sequence in the Node so the Node does not have to test its type against all known types Returnstrue if the component was ins",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_interaction_force_field.html:17364,energy,energy,17364,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_interaction_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_interaction_force_field.html,1,['energy'],['energy']
Energy Efficiency,"::EigenBaseSparseMatrix< TReal >::choleskySolve ; (; VectorEigen & ; x, . const VectorEigen & ; b . ); const. inline . Solve Ax=b, where A is this matrix. WARNING: ldltDecompose() must be called first. x and b can be the same vector. . ◆ clear(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::clear ; (; ). inlineoverridevirtual . Set all values to 0, by resizing to the same size. ; Implements sofa::linearalgebra::BaseMatrix. ◆ clearCol(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::clearCol ; (; Index ; col). inlineoverridevirtual . Clears the all the entries of column imin to column imax-1. Not efficient ! ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearCols(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::clearCols ; (; Index ; imin, . Index ; imax . ). inlineoverridevirtual . Set all the entries of column i and of row i to 0. Not efficient ! ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRow(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::clearRow ; (; Index ; i). inlineoverridevirtual . Set all the entries of a row to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRowCol(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::clearRowCol ; (; Index ; i). inlineoverridevirtual . Clears all the entries of rows imin to imax-1 and columns imin to imax-1. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRows(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::clearRows ; (; Index ; imin, . Index ; imax . ). inlineoverridevirtual . Set all the entries of rows imin to imax-1 to 0. ; Set all the entries of a column to 0. Not efficient ! ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRowsCols(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::clearRowsCols ;",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html:20133,efficient,efficient,20133,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html,1,['efficient'],['efficient']
Energy Efficiency,"::MultiVecId ; v). overridevirtual . v=0 ; Implements sofa::core::behavior::BaseVectorOperations. ◆ v_dot(). void sofa::simulation::common::VectorOperations::v_dot ; (; core::ConstMultiVecId ; a, . core::ConstMultiVecId ; b . ). overridevirtual . a dot b ( get result using finish ) ; Implements sofa::core::behavior::BaseVectorOperations. ◆ v_eq() [1/2]. void sofa::simulation::common::VectorOperations::v_eq ; (; core::MultiVecId ; v, . core::ConstMultiVecId ; a . ). overridevirtual . v=a ; Implements sofa::core::behavior::BaseVectorOperations. ◆ v_eq() [2/2]. void sofa::simulation::common::VectorOperations::v_eq ; (; core::MultiVecId ; v, . core::ConstMultiVecId ; a, . SReal ; f . ). overridevirtual . v=f*a ; Implements sofa::core::behavior::BaseVectorOperations. ◆ v_free() [1/2]. void sofa::simulation::common::VectorOperations::v_free ; (; sofa::core::MultiVecCoordId & ; id, . bool ; interactionForceField = false, . bool ; propagate = false . ). overridevirtual . Free a previously allocated temporary vector. ; Implements sofa::core::behavior::BaseVectorOperations. ◆ v_free() [2/2]. void sofa::simulation::common::VectorOperations::v_free ; (; sofa::core::MultiVecDerivId & ; id, . bool ; interactionForceField = false, . bool ; propagate = false . ). overridevirtual . Implements sofa::core::behavior::BaseVectorOperations. ◆ v_multiop(). void sofa::simulation::common::VectorOperations::v_multiop ; (; const core::behavior::BaseMechanicalState::VMultiOp & ; o). overridevirtual . Implements sofa::core::behavior::BaseVectorOperations. ◆ v_norm(). void sofa::simulation::common::VectorOperations::v_norm ; (; core::ConstMultiVecId ; a, . unsigned ; l . ). overridevirtual . Compute the norm of a vector ( get result using finish ). The type of norm is set by parameter l. Use 0 for the infinite norm. Note that the 2-norm is more efficiently computed using the square root of the dot product. ; Implements sofa::core::behavior::BaseVectorOperations. ◆ v_op(). void sofa::simulation::",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_vector_operations.html:5949,allocate,allocated,5949,api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_vector_operations.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_vector_operations.html,1,['allocate'],['allocated']
Energy Efficiency,"::PenalityContactForceField< DataTypes >::clear ; (; sofa::Size ; reserve = 0). ◆ draw(). template<class DataTypes > . void sofa::component::collision::response::contact::PenalityContactForceField< DataTypes >::draw ; (; const core::visual::VisualParams * ; ). overridevirtual . Render internal data of this object, for debugging purposes. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ getContact(). template<class DataTypes > . const type::vector< Contact >& sofa::component::collision::response::contact::PenalityContactForceField< DataTypes >::getContact ; (; ); const. inline . ◆ getPotentialEnergy(). template<class DataTypes > . SReal sofa::component::collision::response::contact::PenalityContactForceField< DataTypes >::getPotentialEnergy ; (; const sofa::core::MechanicalParams * ; mparams, . const DataVecCoord & ; x1, . const DataVecCoord & ; x2 . ); const. overridevirtual . Get the potential energy associated to this ForceField.; Used to estimate the total energy of the system by some post-stabilization techniques.; This method must be implemented by the component, and is usually called by the generic ForceField::getPotentialEnergy() method. ; Implements sofa::core::behavior::PairInteractionForceField< DataTypes >. ◆ grabPoint(). template<class DataTypes > . void sofa::component::collision::response::contact::PenalityContactForceField< DataTypes >::grabPoint ; (; const core::behavior::MechanicalState< defaulttype::Vec3Types > * ; tool, . const type::vector< sofa::Index > & ; index, . type::vector< std::pair< core::objectmodel::BaseObject *, type::Vec3f > > & ; result, . type::vector< sofa::Index > & ; triangle, . type::vector< sofa::Index > & ; index_point . ). ◆ SOFA_CLASS(). template<class DataTypes > . sofa::component::collision::response::contact::PenalityContactForceField< DataTypes >::SOFA_CLASS ; (; SOFA_TEMPLATE(PenalityContactForceField< DataTypes >, DataTypes) ; , . SOFA_TEMPLATE(core::behavior::PairInteractionForceField, DataTypes) ;  . ). s",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1contact_1_1_penality_contact_force_field.html:26781,energy,energy,26781,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1contact_1_1_penality_contact_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1contact_1_1_penality_contact_force_field.html,1,['energy'],['energy']
Energy Efficiency,"::RGBAColor::red())sofa::gl::Axisstatic; draw(const type::Vec3 &center, const double orient[4][4], const type::Vec3 &length, const type::RGBAColor &colorX=type::RGBAColor::red(), const type::RGBAColor &colorY=type::RGBAColor::green(), const type::RGBAColor &colorZ=type::RGBAColor::red())sofa::gl::Axisstatic; draw(const double *mat, const type::Vec3 &length, const type::RGBAColor &colorX=type::RGBAColor::red(), const type::RGBAColor &colorY=type::RGBAColor::green(), const type::RGBAColor &colorZ=type::RGBAColor::red())sofa::gl::Axisstatic; draw(const type::Vec3 &center, const Quaternion &orient, SReal length=1.0_sreal, const type::RGBAColor &colorX=type::RGBAColor::red(), const type::RGBAColor &colorY=type::RGBAColor::green(), const type::RGBAColor &colorZ=type::RGBAColor::red())sofa::gl::Axisstatic; draw(const type::Vec3 &center, const double orient[4][4], SReal length=1.0_sreal, const type::RGBAColor &colorX=type::RGBAColor::red(), const type::RGBAColor &colorY=type::RGBAColor::green(), const type::RGBAColor &colorZ=type::RGBAColor::red())sofa::gl::Axisstatic; draw(const double *mat, SReal length=1.0_sreal, const type::RGBAColor &colorX=type::RGBAColor::red(), const type::RGBAColor &colorY=type::RGBAColor::green(), const type::RGBAColor &colorZ=type::RGBAColor::red())sofa::gl::Axisstatic; draw(const type::Vec4f &colorX=type::Vec4f(1, 0, 0, 1), const type::Vec4f &colorY=type::Vec4f(0, 1, 0, 1), const type::Vec4f &colorZ=type::Vec4f(0, 0, 1, 1))=deletesofa::gl::Axis; draw(const type::Vec3 &center, const Quaternion &orient, const type::Vec3 &length, const type::Vec4f &colorX=type::Vec4f(1, 0, 0, 1), const type::Vec4f &colorY=type::Vec4f(0, 1, 0, 1), const type::Vec4f &colorZ=type::Vec4f(0, 0, 1, 1))=deletesofa::gl::Axisstatic; draw(const type::Vec3 &center, const double orient[4][4], const type::Vec3 &length, const type::Vec4f &colorX=type::Vec4f(1, 0, 0, 1), const type::Vec4f &colorY=type::Vec4f(0, 1, 0, 1), const type::Vec4f &colorZ=type::Vec4f(0, 0, 1, 1))=deletesof",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1_axis-members.html:2261,green,green,2261,api/master/sofa/html/classsofa_1_1gl_1_1_axis-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1_axis-members.html,1,['green'],['green']
Energy Efficiency,"::RenamedData< SReal > f_hamiltonianEnergy;  ; sofa::core::objectmodel::RenamedData< bool > f_useIncrementalPotentialEnergy;  ; Data< SReal > d_newtonError;  Error tolerance for Newton iterations. More...;  ; Data< unsigned int > d_newtonSteps;  Maximum number of Newton steps. More...;  ; Data< SReal > d_rayleighStiffness;  Rayleigh damping coefficient related to stiffness, > 0. More...;  ; Data< SReal > d_rayleighMass;  Rayleigh damping coefficient related to mass, > 0. More...;  ; Data< bool > d_saveEnergyInFile;  If kinetic and potential energies should be dumped in a CSV file at each iteration. More...;  ; Data< bool > d_explicit;  Use explicit integration scheme. More...;  ; Data< std::string > d_fileName;  File name where kinetic and potential energies are saved in a CSV file. More...;  ; Data< bool > d_computeHamiltonian;  Compute hamiltonian. More...;  ; Data< SReal > d_hamiltonianEnergy;  hamiltonian energy More...;  ; Data< bool > d_useIncrementalPotentialEnergy;  use real potential energy, if false use approximate potential energy More...;  ; Data< bool > d_threadSafeVisitor;  If true, do not use realloc and free visitors in fwdInteractionForceField. More...;  ; sofa::core::objectmodel::lifecycle::RemovedData f_verbose {this, ""v23.12"", ""v24.06"", ""verbose"", ""This Data is no longer used""};  ; std::ofstream energies;  ; int cpt;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box Mo",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1backward_1_1_variational_symplectic_solver.html:2489,energy,energy,2489,api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1backward_1_1_variational_symplectic_solver.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1backward_1_1_variational_symplectic_solver.html,2,['energy'],['energy']
Energy Efficiency,":BaseContext * ctx;  ; SReal result;  . Public Member Functions;  VectorOperations (const sofa::core::ExecParams *params, sofa::core::objectmodel::BaseContext *ctx, bool precomputedTraversalOrder=false);  ; void v_alloc (sofa::core::MultiVecCoordId &v, const core::VecIdProperties &properties={}) override;  Allocate a temporary vector. More...;  ; void v_alloc (sofa::core::MultiVecDerivId &v, const core::VecIdProperties &properties={}) override;  ; void v_free (sofa::core::MultiVecCoordId &id, bool interactionForceField=false, bool propagate=false) override;  Free a previously allocated temporary vector. More...;  ; void v_free (sofa::core::MultiVecDerivId &id, bool interactionForceField=false, bool propagate=false) override;  ; void v_realloc (sofa::core::MultiVecCoordId &id, bool interactionForceField=false, bool propagate=false, const core::VecIdProperties &properties={}) override;  keep already allocated vectors and allocates others. If interactionForceField, also allocates mechanical states linked by an InteractionForceField More...;  ; void v_realloc (sofa::core::MultiVecDerivId &id, bool interactionForceField=false, bool propagate=false, const core::VecIdProperties &properties={}) override;  ; void v_clear (core::MultiVecId v) override;  v=0 More...;  ; void v_eq (core::MultiVecId v, core::ConstMultiVecId a) override;  v=a More...;  ; void v_eq (core::MultiVecId v, core::ConstMultiVecId a, SReal f) override;  v=f*a More...;  ; void v_peq (core::MultiVecId v, core::ConstMultiVecId a, SReal f=1.0) override;  v+=f*a More...;  ; void v_teq (core::MultiVecId v, SReal f) override;  v*=f More...;  ; void v_op (core::MultiVecId v, core::ConstMultiVecId a, core::ConstMultiVecId b, SReal f=1.0) override;  v=a+b*f More...;  ; void v_multiop (const core::behavior::BaseMechanicalState::VMultiOp &o) override;  ; void v_dot (core::ConstMultiVecId a, core::ConstMultiVecId b) override;  a dot b ( get result using finish ) More...;  ; void v_norm (core::ConstMultiVecId a, unsig",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_vector_operations.html:1629,allocate,allocates,1629,api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_vector_operations.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_vector_operations.html,1,['allocate'],['allocates']
Energy Efficiency,":BaseMechanicalState;  SOFA_ABSTRACT_CLASS (BaseMechanicalState, BaseState);  ;  SOFA_BASE_CAST_IMPLEMENTATION (BaseMechanicalState);  ; bool insertInNode (objectmodel::BaseNode *node) override;  ; bool removeInNode (objectmodel::BaseNode *node) override;  ; virtual void handleStateChange (core::topology::Topology *t);  Handle state Changes from a given Topology. More...;  ; virtual Size getMatrixBlockSize () const;  Get the number of scalars per Deriv value, as necessary to build mechanical matrices and vectors. More...;  ; virtual Size getMatrixSize () const;  Get the number of rows necessary to build mechanical matrices and vectors. More...;  ; virtual void copyToBuffer (SReal *dst, ConstVecId src, unsigned int n) const =0;  Copy data to an external, user-allocated buffer. More...;  ; virtual void copyFromBuffer (VecId dst, const SReal *src, unsigned int n)=0;  Copy data from an external, user-allocated buffer. More...;  ; virtual void addFromBuffer (VecId dst, const SReal *src, unsigned int n)=0;  Add data from an external, user-allocated buffer. More...;  ;  Public Member Functions inherited from sofa::core::BaseState;  SOFA_ABSTRACT_CLASS (BaseState, objectmodel::BaseObject);  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObject;  SOFA_CLASS (BaseObject, Base);  ; void setSrc (const std::string &v, std::vector< std::string > *attributeList=nullptr);  Sets a source Object and parses it to collect dependent Data. More...;  ; void setSrc (const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr);  ; Base * findLinkDestClass (const BaseClass *destType, const std::string &path, const BaseLink *link) override;  ; virtual std::string getPathName () const override;  Return the full path name of this object. More...;  ; SReal getTime () const;  Current time. More...;  ; const BaseContext * getContext () const;  ; BaseContext * getContext ();  ; const BaseObject * getMaster () const;  ; BaseObject * getMas",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1statecontainer_1_1_mechanical_object.html:19645,allocate,allocated,19645,api/master/sofa/html/classsofa_1_1component_1_1statecontainer_1_1_mechanical_object.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1statecontainer_1_1_mechanical_object.html,1,['allocate'],['allocated']
Energy Efficiency,":MultiVecCoordId & ; id, . bool ; interactionForceField = false, . bool ; propagate = false . ). overridevirtual . Free a previously allocated temporary vector. ; Implements sofa::core::behavior::BaseVectorOperations. ◆ v_free() [2/2]. void sofa::simulation::common::VectorOperations::v_free ; (; sofa::core::MultiVecDerivId & ; id, . bool ; interactionForceField = false, . bool ; propagate = false . ). overridevirtual . Implements sofa::core::behavior::BaseVectorOperations. ◆ v_multiop(). void sofa::simulation::common::VectorOperations::v_multiop ; (; const core::behavior::BaseMechanicalState::VMultiOp & ; o). overridevirtual . Implements sofa::core::behavior::BaseVectorOperations. ◆ v_norm(). void sofa::simulation::common::VectorOperations::v_norm ; (; core::ConstMultiVecId ; a, . unsigned ; l . ). overridevirtual . Compute the norm of a vector ( get result using finish ). The type of norm is set by parameter l. Use 0 for the infinite norm. Note that the 2-norm is more efficiently computed using the square root of the dot product. ; Implements sofa::core::behavior::BaseVectorOperations. ◆ v_op(). void sofa::simulation::common::VectorOperations::v_op ; (; core::MultiVecId ; v, . core::ConstMultiVecId ; a, . core::ConstMultiVecId ; b, . SReal ; f = 1.0 . ). overridevirtual . v=a+b*f ; Implements sofa::core::behavior::BaseVectorOperations. ◆ v_peq(). void sofa::simulation::common::VectorOperations::v_peq ; (; core::MultiVecId ; v, . core::ConstMultiVecId ; a, . SReal ; f = 1.0 . ). overridevirtual . v+=f*a ; Implements sofa::core::behavior::BaseVectorOperations. ◆ v_realloc() [1/2]. void sofa::simulation::common::VectorOperations::v_realloc ; (; sofa::core::MultiVecCoordId & ; id, . bool ; interactionForceField = false, . bool ; propagate = false, . const core::VecIdProperties & ; properties = {} . ). overridevirtual . keep already allocated vectors and allocates others. If interactionForceField, also allocates mechanical states linked by an InteractionForceField ; Imp",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_vector_operations.html:6800,efficient,efficiently,6800,api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_vector_operations.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_vector_operations.html,1,['efficient'],['efficiently']
Energy Efficiency,":SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  ;  Static Protected Member Functions inherited from sofa::core::loader::BaseLoader; static void skipToEOL (FILE *f);  ; static bool readLine (char *buf, int size, FILE *f);  . Attribute details. ◆ _forceBinary. sofa::core::objectmodel::RenamedData<bool> sofa::component::io::mesh::MeshSTLLoader::_forceBinary. ◆ _headerSize. sofa::core::objectmodel::RenamedData<unsigned int> sofa::component::io::mesh::MeshSTLLoader::_headerSize. ◆ d_forceBinary. Data<bool> sofa::component::io::mesh::MeshSTLLoader::d_forceBinary. Force reading in binary mode. Even in first keyword of the file is solid. . ◆ d_headerSize. Data<unsigned int> sofa::component::io::mesh::MeshSTLLoader::d_headerSize. Size of the header binary file (just before the number of facet). . ◆ d_mergePositionUsingMap. Data<bool> sofa::component::io::mesh::MeshSTLLoader::d_mergePositionUsingMap. Since positions are duplicated in a STL, they have to be merged. Using a map to do so will temporarily duplicate memory but should be more efficient. Disable it if memory is really an issue. . Constructor details. ◆ MeshSTLLoader(). sofa::component::io::mesh::MeshSTLLoader::MeshSTLLoader ; (; ). protected . Function details. ◆ readBinarySTL(). bool sofa::component::io::mesh::MeshSTLLoader::readBinarySTL ; (; const char * ; filename). protected . ◆ readSTL(). bool sofa::component::io::mesh::MeshSTLLoader::readSTL ; (; std::ifstream & ; file). protected . ◆ SOFA_CLASS(). sofa::component::io::mesh::MeshSTLLoader::SOFA_CLASS ; (; MeshSTLLoader ; , . sofa::core::loader::MeshLoader ;  . ). sofacomponentiomeshMeshSTLLoader; Generated on Mon Nov 11 2024 02:46:08 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1io_1_1mesh_1_1_mesh_s_t_l_loader.html:21705,efficient,efficient,21705,api/master/sofa/html/classsofa_1_1component_1_1io_1_1mesh_1_1_mesh_s_t_l_loader.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1io_1_1mesh_1_1_mesh_s_t_l_loader.html,1,['efficient'],['efficient']
Energy Efficiency,":qt::QGraphStatWidget Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; Protected Member Functions |; List of all members . sofa::gui::qt::QGraphStatWidget Class Referenceabstract . #include <QGraphStatWidget.h>. Inheritance diagram for sofa::gui::qt::QGraphStatWidget:. [legend]; Detailed Description; Base class to make graphes in the stat tab of the node widget TODO add gnuplot export . Protected Attributes; simulation::Node * m_node;  pointer to the node monitored More...;  ; int m_bufferSize;  size of the buffers to stored More...;  ; QChart * m_chart;  Pointer to the chart Data. More...;  ; std::vector< QLineSeries * > m_curves;  vector of series to be plotted More...;  ; QValueAxis * m_axisX;  x axis pointer More...;  ; QValueAxis * m_axisY;  y axis pointer More...;  ; SReal m_yMin;  min y axis value stored More...;  ; SReal m_yMax;  max y axis value stored More...;  ; SReal m_lastTime;  last timestep monitored More...;  ; int m_cptStep;  step counter monitored More...;  . Public Member Functions;  QGraphStatWidget (QWidget *parent, simulation::Node *node, const QString &title, unsigned numberOfCurves, int bufferSize);  ; virtual ~QGraphStatWidget ();  ; virtual void step () final;  Main method called to update the graph. More...;  ; virtual void stepImpl ()=0;  the only function that should be overloaded More...;  . Protected Member Functions; void setCurve (unsigned index, const QString &name, const QColor &color);  set the index-th curve (index must be < _numberOfCurves) More...;  ; void updateYAxisBounds (SReal value);  Method to update Y axis scale. More...;  ; void flushSeries ();  flush data from series not anymore displayed More...;  . Attribute details. ◆ m_axisX. QValueAxis* sofa::gui::qt::QGraphStatWidget::m_axisX. protected . x axis pointer . ◆ m_axisY. QValueAxis* sofa::gui::qt::QGraphStatWidget::m_axisY. protected . y axis pointer . ◆ m_bufferSize. int sofa:",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_graph_stat_widget.html:1035,monitor,monitored,1035,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_graph_stat_widget.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_graph_stat_widget.html,1,['monitor'],['monitored']
Energy Efficiency,":red())sofa::gl::Axis; draw(const type::Vec3 &center, const Quaternion &orient, const type::Vec3 &length, const type::RGBAColor &colorX=type::RGBAColor::red(), const type::RGBAColor &colorY=type::RGBAColor::green(), const type::RGBAColor &colorZ=type::RGBAColor::red())sofa::gl::Axisstatic; draw(const type::Vec3 &center, const double orient[4][4], const type::Vec3 &length, const type::RGBAColor &colorX=type::RGBAColor::red(), const type::RGBAColor &colorY=type::RGBAColor::green(), const type::RGBAColor &colorZ=type::RGBAColor::red())sofa::gl::Axisstatic; draw(const double *mat, const type::Vec3 &length, const type::RGBAColor &colorX=type::RGBAColor::red(), const type::RGBAColor &colorY=type::RGBAColor::green(), const type::RGBAColor &colorZ=type::RGBAColor::red())sofa::gl::Axisstatic; draw(const type::Vec3 &center, const Quaternion &orient, SReal length=1.0_sreal, const type::RGBAColor &colorX=type::RGBAColor::red(), const type::RGBAColor &colorY=type::RGBAColor::green(), const type::RGBAColor &colorZ=type::RGBAColor::red())sofa::gl::Axisstatic; draw(const type::Vec3 &center, const double orient[4][4], SReal length=1.0_sreal, const type::RGBAColor &colorX=type::RGBAColor::red(), const type::RGBAColor &colorY=type::RGBAColor::green(), const type::RGBAColor &colorZ=type::RGBAColor::red())sofa::gl::Axisstatic; draw(const double *mat, SReal length=1.0_sreal, const type::RGBAColor &colorX=type::RGBAColor::red(), const type::RGBAColor &colorY=type::RGBAColor::green(), const type::RGBAColor &colorZ=type::RGBAColor::red())sofa::gl::Axisstatic; draw(const type::Vec4f &colorX=type::Vec4f(1, 0, 0, 1), const type::Vec4f &colorY=type::Vec4f(0, 1, 0, 1), const type::Vec4f &colorZ=type::Vec4f(0, 0, 1, 1))=deletesofa::gl::Axis; draw(const type::Vec3 &center, const Quaternion &orient, const type::Vec3 &length, const type::Vec4f &colorX=type::Vec4f(1, 0, 0, 1), const type::Vec4f &colorY=type::Vec4f(0, 1, 0, 1), const type::Vec4f &colorZ=type::Vec4f(0, 0, 1, 1))=deletesofa::gl::Axisstat",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1_axis-members.html:1994,green,green,1994,api/master/sofa/html/classsofa_1_1gl_1_1_axis-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1_axis-members.html,1,['green'],['green']
Energy Efficiency,"; (; SReal ; f). inline . v /= f . ◆ operator=() [1/2]. template<VecType vtype> . void sofa::core::behavior::TMultiVec< vtype >::operator= ; (; const TMultiVec< vtype > & ; a). inline . v = a . ◆ operator=() [2/2]. template<VecType vtype> . void sofa::core::behavior::TMultiVec< vtype >::operator= ; (; MyMultiVecId ; a). inline . v = a . ◆ ops(). template<VecType vtype> . BaseVectorOperations* sofa::core::behavior::TMultiVec< vtype >::ops ; (; ). inline . ◆ peq(). template<VecType vtype> . void sofa::core::behavior::TMultiVec< vtype >::peq ; (; AllMultiVecId ; a, . SReal ; f = 1.0 . ). inline . v += a*f . ◆ realloc(). template<VecType vtype> . void sofa::core::behavior::TMultiVec< vtype >::realloc ; (; BaseVectorOperations * ; _vop, . bool ; interactionForceField = false, . bool ; propagate = false, . const VecIdProperties & ; properties = {} . ). inline . allocates vector for every newly appeared mechanical states (initializing them to 0 and does not modify already allocated mechanical states) Parameters. interactionForceFieldset to true, also allocate external mechanical states linked by an InteractionForceField (TODO remove this option by seeing external mmstates as abstract null vectors) . ◆ setOps(). template<VecType vtype> . void sofa::core::behavior::TMultiVec< vtype >::setOps ; (; BaseVectorOperations * ; op). inline . ◆ size(). template<VecType vtype> . size_t sofa::core::behavior::TMultiVec< vtype >::size ; (; ); const. inline . ◆ teq(). template<VecType vtype> . void sofa::core::behavior::TMultiVec< vtype >::teq ; (; SReal ; f). inline . v *= f . ◆ threshold(). template<VecType vtype> . void sofa::core::behavior::TMultiVec< vtype >::threshold ; (; SReal ; threshold). inline . nullify values below given threshold . Related details. ◆ operator<<. template<VecType vtype> . std::ostream& operator<< ; (; std::ostream & ; out, . const TMultiVec< vtype > & ; mv . ). friend . sofacorebehaviorTMultiVec; Generated on Mon Nov 11 2024 03:15:16 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_t_multi_vec.html:7934,allocate,allocate,7934,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_t_multi_vec.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_t_multi_vec.html,1,['allocate'],['allocate']
Energy Efficiency,"; ; /*! Truncated class, inheritance relation is hidden */; class Truncated : public Invisible { };; ; /* Class not documented with doxygen comments */; class Undocumented { };; ; /*! Class that is inherited using public inheritance */; class PublicBase : public Truncated { };; ; /*! A template class */; template<class T> class Templ { };; ; /*! Class that is inherited using protected inheritance */; class ProtectedBase { };; ; /*! Class that is inherited using private inheritance */; class PrivateBase { };; ; /*! Class that is used by the Inherited class */; class Used { };; ; /*! Super class that inherits a number of other classes */; class Inherited : public PublicBase,; protected ProtectedBase,; private PrivateBase,; public Undocumented,; public Templ<int>; {; private:; Used *m_usedClass;; };; This will result in the following graph:; The boxes in the above graph have the following meaning: . A filled gray box represents the struct or class for which the graph is generated. . A box with a black border denotes a documented struct or class. . A box with a gray border denotes an undocumented struct or class. . A box with a red border denotes a documented struct or class forwhich not all inheritance/containment relations are shown. A graph is truncated if it does not fit within the specified boundaries. . The arrows have the following meaning: . A dark blue arrow is used to visualize a public inheritance relation between two classes. . A dark green arrow is used for protected inheritance. . A dark red arrow is used for private inheritance. . A purple dashed arrow is used if a class is contained or used by another class. The arrow is labelled with the variable(s) through which the pointed class or struct is accessible. . A yellow dashed arrow denotes a relation between a template instance and the template class it was instantiated from. The arrow is labelled with the template parameters of the instance. . Generated on Mon Nov 11 2024 03:36:34 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/graph_legend.html:1760,green,green,1760,api/master/sofa/html/graph_legend.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/graph_legend.html,1,['green'],['green']
Energy Efficiency,; ; meshing – SOFA. SOFA - Topic Tag: meshing. /meshloader; . /feed; ; meshloader – SOFA. SOFA - Topic Tag: meshloader. /metis; . /feed; ; metis – SOFA. SOFA - Topic Tag: metis. /missing-dll; . /feed; ; Missing dll – SOFA. SOFA - Topic Tag: Missing dll. /missing-header; . /feed; ; Missing Header – SOFA. SOFA - Topic Tag: Missing Header. /mobile-app; . /feed; ; mobile app – SOFA. SOFA - Topic Tag: mobile app. /model; . /feed; ; model – SOFA. SOFA - Topic Tag: model. /modeler; . /feed; ; modeler – SOFA. SOFA - Topic Tag: modeler. /modeler-exe-error; . /feed; ; Modeler.exe error – SOFA. SOFA - Topic Tag: Modeler.exe error. /modeler-usage; . /feed; ; Modeler usage – SOFA. SOFA - Topic Tag: Modeler usage. /modelorderreduction; . /feed; ; ModelOrderReduction – SOFA. SOFA - Topic Tag: ModelOrderReduction. /model-order-reduction; . /feed; ; model order reduction – SOFA. SOFA - Topic Tag: model order reduction. /modification; . /feed; ; modification – SOFA. SOFA - Topic Tag: modification. /monitor; . /feed; ; Monitor – SOFA. SOFA - Topic Tag: Monitor. /monitor-object-exporting; . /feed; ; Monitor Object; Exporting – SOFA. SOFA - Topic Tag: Monitor Object; Exporting. /monitor-objects; . /feed; ; Monitor objects – SOFA. SOFA - Topic Tag: Monitor objects. /mor; . /feed; ; MOR – SOFA. SOFA - Topic Tag: MOR. /motor; . /feed; ; Motor – SOFA. SOFA - Topic Tag: Motor. /mouse; . /feed; ; mouse – SOFA. SOFA - Topic Tag: mouse. /mouse-interaction; . /feed; ; mouse interaction – SOFA. SOFA - Topic Tag: mouse interaction. /mouse-manager; . /feed; ; Mouse Manager – SOFA. SOFA - Topic Tag: Mouse Manager. /mouse-manager-properties-call-in-xml-scene; . /feed; ; Mouse Manager properties call in Xml scene. – SOFA. SOFA - Topic Tag: Mouse Manager properties call in Xml scene. /move; . /feed; ; move – SOFA. SOFA - Topic Tag: move. /movement; . /feed; ; movement – SOFA. SOFA - Topic Tag: movement. /moving; . /feed; ; moving – SOFA. SOFA - Topic Tag: moving. /msh; . /feed; ; msh – SOFA. SOFA - Top,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/index-wcopy.html:457887,monitor,monitor,457887,index-wcopy.html,https://www.sofa-framework.org,https://www.sofa-framework.org/index-wcopy.html,1,['monitor'],['monitor']
Energy Efficiency,"; List of all members . sofa::component::topology::mapping::CenterPointTopologicalMapping Class Reference . #include <CenterPointTopologicalMapping.h>. Inheritance diagram for sofa::component::topology::mapping::CenterPointTopologicalMapping:. [legend]; Detailed Description; This class, called CenterPointTopologicalMapping, is a specific implementation of the interface TopologicalMapping where :; INPUT TOPOLOGY = any MeshTopology OUTPUT TOPOLOGY = A PointSetTopologie, as the boundary of the INPUT TOPOLOGY; Each primitive in the input Topology will be mapped to a point in the output topology.; CenterPointTopologicalMapping class is templated by the pair (INPUT TOPOLOGY, OUTPUT TOPOLOGY) . Public Member Functions;  SOFA_CLASS (CenterPointTopologicalMapping, sofa::core::topology::TopologicalMapping);  ; void init () override;  Initializes the target BaseTopology from the source BaseTopology. More...;  ; void updateTopologicalMappingTopDown () override;  Method called at each topological changes propagation which comes from the INPUT topology to adapt the OUTPUT topology : More...;  ; Index getGlobIndex (Index ind) override;  ; Index getFromIndex (Index ind) override;  ;  Public Member Functions inherited from sofa::core::topology::TopologicalMapping;  SOFA_ABSTRACT_CLASS (TopologicalMapping, objectmodel::BaseObject);  ; virtual void setTopologies (In *from, Out *to);  Specify the input and output models. More...;  ; void setPathInputObject (const std::string &o);  Set the path to the objects mapped in the scene graph. More...;  ; void setPathOutputObject (const std::string &o);  ; In * getFrom ();  Accessor to the INPUT topology of the TopologicalMapping : More...;  ; Out * getTo ();  Accessor to the OUTPUT topology of the TopologicalMapping : More...;  ; virtual void updateTopologicalMappingBottomUp ();  Method called at each topological changes propagation which comes from the OUTPUT topology to adapt the INPUT topology : More...;  ; virtual bool propagateFromInputTo",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1mapping_1_1_center_point_topological_mapping.html:1283,adapt,adapt,1283,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1mapping_1_1_center_point_topological_mapping.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1mapping_1_1_center_point_topological_mapping.html,1,['adapt'],['adapt']
Energy Efficiency,"; core::objectmodel::BaseContext * ctx;  ; SReal result;  . Public Member Functions;  BaseVectorOperations (const core::ExecParams *params, core::objectmodel::BaseContext *ctx);  ; virtual ~BaseVectorOperations ();  ; virtual void v_alloc (sofa::core::MultiVecCoordId &id, const VecIdProperties &properties={})=0;  Allocate a temporary vector. More...;  ; virtual void v_alloc (sofa::core::MultiVecDerivId &id, const VecIdProperties &properties={})=0;  ; virtual void v_free (sofa::core::MultiVecCoordId &id, bool interactionForceField=false, bool propagate=false)=0;  Free a previously allocated temporary vector. More...;  ; virtual void v_free (sofa::core::MultiVecDerivId &id, bool interactionForceField=false, bool propagate=false)=0;  ; virtual void v_realloc (sofa::core::MultiVecCoordId &id, bool interactionForceField=false, bool propagate=false, const VecIdProperties &properties={})=0;  keep already allocated vectors and allocates others. If interactionForceField, also allocates mechanical states linked by an InteractionForceField More...;  ; virtual void v_realloc (sofa::core::MultiVecDerivId &id, bool interactionForceField=false, bool propagate=false, const VecIdProperties &properties={})=0;  ; virtual void v_clear (core::MultiVecId v)=0;  v=0 More...;  ; virtual void v_eq (core::MultiVecId v, core::ConstMultiVecId a)=0;  v=a More...;  ; virtual void v_eq (core::MultiVecId v, core::ConstMultiVecId a, SReal f)=0;  v=f*a More...;  ; virtual void v_peq (core::MultiVecId v, core::ConstMultiVecId a, SReal f=1.0)=0;  v+=f*a More...;  ; virtual void v_teq (core::MultiVecId v, SReal f)=0;  v*=f More...;  ; virtual void v_op (core::MultiVecId v, core::ConstMultiVecId a, core::ConstMultiVecId b, SReal f=1.0)=0;  v=a+b*f More...;  ; virtual void v_multiop (const core::behavior::BaseMechanicalState::VMultiOp &o)=0;  ; virtual void v_dot (core::ConstMultiVecId a, core::ConstMultiVecId b)=0;  a dot b ( get result using finish ) More...;  ; virtual void v_norm (core::ConstMultiVec",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_vector_operations.html:1441,allocate,allocates,1441,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_vector_operations.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_vector_operations.html,1,['allocate'],['allocates']
Energy Efficiency,"; sofa::core::objectmodel::RenamedData< bool > useLinePoint;  ; sofa::core::objectmodel::RenamedData< bool > useLineLine;  ; Data< bool > d_useSphereTriangle;  activate Sphere-Triangle intersection tests More...;  ; Data< bool > d_usePointPoint;  activate Point-Point intersection tests More...;  ; Data< bool > d_useSurfaceNormals;  Compute the norms of the Detection Outputs by considering the normals of the surfaces involved. More...;  ; Data< bool > d_useLinePoint;  activate Line-Point intersection tests More...;  ; Data< bool > d_useLineLine;  activate Line-Line intersection tests More...;  ;  Public Attributes inherited from sofa::component::collision::detection::intersection::BaseProximityIntersection; sofa::core::objectmodel::RenamedData< SReal > alarmDistance;  ; sofa::core::objectmodel::RenamedData< SReal > contactDistance;  ; Data< SReal > d_alarmDistance;  Distance above which the intersection computations ignores the proximity pair. This distance can also be used in some broad phase algorithms to reduce the search area. More...;  ; Data< SReal > d_contactDistance;  Distance below which a contact is created. More...;  ;  Public Attributes inherited from sofa::component::collision::detection::intersection::DiscreteIntersection; core::collision::IntersectorMap intersectors;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1intersection_1_1_min_proximity_intersection.html:2788,reduce,reduce,2788,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1intersection_1_1_min_proximity_intersection.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1intersection_1_1_min_proximity_intersection.html,1,['reduce'],['reduce']
Energy Efficiency,";  ; sofa::core::objectmodel::RenamedData< bool > f_computeHamiltonian;  ; sofa::core::objectmodel::RenamedData< SReal > f_hamiltonianEnergy;  ; sofa::core::objectmodel::RenamedData< bool > f_useIncrementalPotentialEnergy;  ; Data< SReal > d_newtonError;  Error tolerance for Newton iterations. More...;  ; Data< unsigned int > d_newtonSteps;  Maximum number of Newton steps. More...;  ; Data< SReal > d_rayleighStiffness;  Rayleigh damping coefficient related to stiffness, > 0. More...;  ; Data< SReal > d_rayleighMass;  Rayleigh damping coefficient related to mass, > 0. More...;  ; Data< bool > d_saveEnergyInFile;  If kinetic and potential energies should be dumped in a CSV file at each iteration. More...;  ; Data< bool > d_explicit;  Use explicit integration scheme. More...;  ; Data< std::string > d_fileName;  File name where kinetic and potential energies are saved in a CSV file. More...;  ; Data< bool > d_computeHamiltonian;  Compute hamiltonian. More...;  ; Data< SReal > d_hamiltonianEnergy;  hamiltonian energy More...;  ; Data< bool > d_useIncrementalPotentialEnergy;  use real potential energy, if false use approximate potential energy More...;  ; Data< bool > d_threadSafeVisitor;  If true, do not use realloc and free visitors in fwdInteractionForceField. More...;  ; sofa::core::objectmodel::lifecycle::RemovedData f_verbose {this, ""v23.12"", ""v24.06"", ""verbose"", ""This Data is no longer used""};  ; std::ofstream energies;  ; int cpt;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the o",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1backward_1_1_variational_symplectic_solver.html:2404,energy,energy,2404,api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1backward_1_1_variational_symplectic_solver.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1backward_1_1_variational_symplectic_solver.html,1,['energy'],['energy']
Energy Efficiency,";  ; template<class T > ; void initData0 (Data< T > *field, typename Data< T >::InitData &res, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  . Constructor details. ◆ ~BaseOrderingMethod(). sofa::core::behavior::BaseOrderingMethod::~BaseOrderingMethod ; (; ). overridedefault . Function details. ◆ computeInverseFromPermutation(). void sofa::core::behavior::BaseOrderingMethod::computeInverseFromPermutation ; (; int ; matrixSize, . const int * ; inPermutation, . int * ; outInversePermutation . ). static . ◆ computePermutation(). virtual void sofa::core::behavior::BaseOrderingMethod::computePermutation ; (; const SparseMatrixPattern & ; inPattern, . int * ; outPermutation, . int * ; outInversePermutation . ). pure virtual . Computes a permutation so that a permutation matrix can be applied on sparse matrices before a factorization. It helps to reduce the number of elements in the decomposition, hence improving the computation time when solving a linear system. Parameters. inPatternThe sparse matrix pattern as an input ; outPermutationThe output permutation. A memory space of the size of the matrix is expected. ; outInversePermutationThe inverse of the computed permutation. A memory space of the size of the matrix is expected. . Implemented in sofa::component::linearsolver::ordering::NaturalOrderingMethod, sofa::component::linearsolver::ordering::BaseEigenOrderingMethod< EigenOrderingMethodType >, sofa::component::linearsolver::ordering::BaseEigenOrderingMethod< Eigen::COLAMDOrdering< int > >, and sofa::component::linearsolver::ordering::BaseEigenOrderingMethod< Eigen::AMDOrdering< int > >. ◆ methodName(). virtual std::string sofa::core::behavior::BaseOrderingMethod::methodName ; (; ); const. pure virtual . Returns an identifier for the method name. This can be used as a key in a factory of solvers. See @EigenDirectSparseSolver ; Implemented in sofa::component::linearsolver::or",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_ordering_method.html:14034,reduce,reduce,14034,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_ordering_method.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_ordering_method.html,1,['reduce'],['reduce']
Energy Efficiency,";  ; void addFromBuffer (VecId dst, const SReal *src, unsigned n) override;  ;  Public Member Functions inherited from sofa::core::behavior::BaseMechanicalState;  SOFA_ABSTRACT_CLASS (BaseMechanicalState, BaseState);  ;  SOFA_BASE_CAST_IMPLEMENTATION (BaseMechanicalState);  ; bool insertInNode (objectmodel::BaseNode *node) override;  ; bool removeInNode (objectmodel::BaseNode *node) override;  ; virtual void handleStateChange (core::topology::Topology *t);  Handle state Changes from a given Topology. More...;  ; virtual Size getMatrixBlockSize () const;  Get the number of scalars per Deriv value, as necessary to build mechanical matrices and vectors. More...;  ; virtual Size getMatrixSize () const;  Get the number of rows necessary to build mechanical matrices and vectors. More...;  ; virtual void copyToBuffer (SReal *dst, ConstVecId src, unsigned int n) const =0;  Copy data to an external, user-allocated buffer. More...;  ; virtual void copyFromBuffer (VecId dst, const SReal *src, unsigned int n)=0;  Copy data from an external, user-allocated buffer. More...;  ; virtual void addFromBuffer (VecId dst, const SReal *src, unsigned int n)=0;  Add data from an external, user-allocated buffer. More...;  ;  Public Member Functions inherited from sofa::core::BaseState;  SOFA_ABSTRACT_CLASS (BaseState, objectmodel::BaseObject);  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObject;  SOFA_CLASS (BaseObject, Base);  ; void setSrc (const std::string &v, std::vector< std::string > *attributeList=nullptr);  Sets a source Object and parses it to collect dependent Data. More...;  ; void setSrc (const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr);  ; Base * findLinkDestClass (const BaseClass *destType, const std::string &path, const BaseLink *link) override;  ; virtual std::string getPathName () const override;  Return the full path name of this object. More...;  ; SReal getTime () const;  Current time. More...; ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1statecontainer_1_1_mechanical_object.html:19506,allocate,allocated,19506,api/master/sofa/html/classsofa_1_1component_1_1statecontainer_1_1_mechanical_object.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1statecontainer_1_1_mechanical_object.html,1,['allocate'],['allocated']
Energy Efficiency,";  ;  Protected Attributes inherited from sofa::core::behavior::PairStateAccessor< DataTypes1, DataTypes2 >; SingleLink< PairStateAccessor< DataTypes1, DataTypes2 >, MechanicalState< DataTypes1 >, BaseLink::FLAG_STOREPATH|BaseLink::FLAG_STRONGLINK > mstate1;  ; SingleLink< PairStateAccessor< DataTypes1, DataTypes2 >, MechanicalState< DataTypes2 >, BaseLink::FLAG_STOREPATH|BaseLink::FLAG_STRONGLINK > mstate2;  . Attribute details. ◆ activeFlags. template<class DataTypes > . type::vector<bool> sofa::component::constraint::projective::AttachProjectiveConstraint< DataTypes >::activeFlags. ◆ constraintReleased. template<class DataTypes > . type::vector<bool> sofa::component::constraint::projective::AttachProjectiveConstraint< DataTypes >::constraintReleased. ◆ d_constraintFactor. template<class DataTypes > . Data< type::vector<Real> > sofa::component::constraint::projective::AttachProjectiveConstraint< DataTypes >::d_constraintFactor. Vector of factors adapting the application of the constraint per pair of points (0 -> the constraint is released. 1 -> the constraint is fully constrained) . ◆ d_positionFactor. template<class DataTypes > . Data< Real > sofa::component::constraint::projective::AttachProjectiveConstraint< DataTypes >::d_positionFactor. IN: Factor applied to projection of position. . ◆ d_responseFactor. template<class DataTypes > . Data< Real > sofa::component::constraint::projective::AttachProjectiveConstraint< DataTypes >::d_responseFactor. IN: Factor applied to projection of force/acceleration. . ◆ d_velocityFactor. template<class DataTypes > . Data< Real > sofa::component::constraint::projective::AttachProjectiveConstraint< DataTypes >::d_velocityFactor. IN: Factor applied to projection of velocity. . ◆ f_clamp. template<class DataTypes > . Data<bool> sofa::component::constraint::projective::AttachProjectiveConstraint< DataTypes >::f_clamp. true to clamp particles at lastPos instead of freeing them. . ◆ f_freeRotations. template<class DataTypes > . Data<b",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_attach_projective_constraint.html:24819,adapt,adapting,24819,api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_attach_projective_constraint.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_attach_projective_constraint.html,1,['adapt'],['adapting']
Energy Efficiency,";  Set the Object1 path. More...;  ; void setPathObject2 (const std::string &path);  Set the Object2 path. More...;  ; std::string getPathObject1 () const;  Retrieve the Object1 path. More...;  ; std::string getPathObject2 () const;  Retrieve the Object2 path. More...;  ; void addForce (const MechanicalParams *mparams, MultiVecDerivId fId) override;  ; void addDForce (const MechanicalParams *mparams, MultiVecDerivId dfId) override;  ; SReal getPotentialEnergy (const MechanicalParams *mparams) const override;  ;  Public Member Functions inherited from sofa::core::behavior::BaseInteractionForceField;  SOFA_ABSTRACT_CLASS (BaseInteractionForceField, BaseForceField);  ; virtual BaseMechanicalState * getMechModel1 ();  ; virtual BaseMechanicalState * getMechModel2 ();  ; void addKToMatrix (const MechanicalParams *, const sofa::core::behavior::MultiMatrixAccessor *) override;  Compute the system matrix corresponding to . More...;  ; virtual void initGnuplot (const std::string path);  initialization to export potential energy to gnuplot files format More...;  ; virtual void exportGnuplot (SReal time);  export kinetic and potential energy state at ""time"" to a gnuplot file More...;  ; bool insertInNode (objectmodel::BaseNode *node) override;  ; bool removeInNode (objectmodel::BaseNode *node) override;  ;  Public Member Functions inherited from sofa::core::behavior::BaseForceField;  SOFA_ABSTRACT_CLASS (BaseForceField, StateAccessor);  ; virtual void addMBKdx (const MechanicalParams *mparams, MultiVecDerivId dfId);  Accumulate the contribution of M, B, and/or K matrices multiplied by the dx vector with the given coefficients. More...;  ; virtual void addBToMatrix (const MechanicalParams *mparams, const sofa::core::behavior::MultiMatrixAccessor *matrix);  Compute the system matrix corresponding to . More...;  ; virtual const sofa::linearalgebra::BaseMatrix * getComplianceMatrix (const MechanicalParams *);  ; virtual void addClambda (const MechanicalParams *, MultiVecDerivId, M",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_polynomial_springs_force_field.html:8127,energy,energy,8127,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_polynomial_springs_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_polynomial_springs_force_field.html,1,['energy'],['energy']
Energy Efficiency,";  Set the Object1 path. More...;  ; void setPathObject2 (const std::string &path);  Set the Object2 path. More...;  ; std::string getPathObject1 () const;  Retrieve the Object1 path. More...;  ; std::string getPathObject2 () const;  Retrieve the Object2 path. More...;  ; void addForce (const MechanicalParams *mparams, MultiVecDerivId fId) override;  ; void addDForce (const MechanicalParams *mparams, MultiVecDerivId dfId) override;  ; SReal getPotentialEnergy (const MechanicalParams *mparams) const override;  ;  Public Member Functions inherited from sofa::core::behavior::BaseInteractionForceField;  SOFA_ABSTRACT_CLASS (BaseInteractionForceField, BaseForceField);  ; virtual BaseMechanicalState * getMechModel1 ();  ; virtual BaseMechanicalState * getMechModel2 ();  ; void addKToMatrix (const MechanicalParams *, const sofa::core::behavior::MultiMatrixAccessor *) override;  Compute the system matrix corresponding to . More...;  ; virtual void initGnuplot (const std::string path);  initialization to export potential energy to gnuplot files format More...;  ; virtual void exportGnuplot (SReal time);  export kinetic and potential energy state at ""time"" to a gnuplot file More...;  ; bool insertInNode (objectmodel::BaseNode *node) override;  ; bool removeInNode (objectmodel::BaseNode *node) override;  ;  Public Member Functions inherited from sofa::core::behavior::BaseForceField;  SOFA_ABSTRACT_CLASS (BaseForceField, StateAccessor);  ; virtual void addMBKdx (const MechanicalParams *mparams, MultiVecDerivId dfId);  Accumulate the contribution of M, B, and/or K matrices multiplied by the dx vector with the given coefficients. More...;  ; virtual void addBToMatrix (const MechanicalParams *mparams, const sofa::core::behavior::MultiMatrixAccessor *matrix);  Compute the system matrix corresponding to . More...;  ; virtual void addMBKToMatrix (const MechanicalParams *mparams, const sofa::core::behavior::MultiMatrixAccessor *matrix);  Compute the system matrix corresponding to . Mo",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_frame_spring_force_field.html:5582,energy,energy,5582,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_frame_spring_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_frame_spring_force_field.html,5,['energy'],['energy']
Energy Efficiency,"< T, MemoryManager, DataTypeInfoManager >::vector_device ; (; ). inline . ◆ vector_device() [2/4]. template<class T , class MemoryManager , class DataTypeInfoManager > . sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >::vector_device ; (; const Size ; n). inlineexplicit . ◆ vector_device() [3/4]. template<class T , class MemoryManager , class DataTypeInfoManager > . sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >::vector_device ; (; const vector_device< T, MemoryManager, DataTypeInfoManager > & ; v). inline . ◆ vector_device() [4/4]. template<class T , class MemoryManager , class DataTypeInfoManager > . sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >::vector_device ; (; const std::initializer_list< T > & ; t). inline . ◆ ~vector_device(). template<class T , class MemoryManager , class DataTypeInfoManager > . sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >::~vector_device ; (; ). inline . Function details. ◆ allocate(). template<class T , class MemoryManager , class DataTypeInfoManager > . void sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >::allocate ; (; int ; d); const. inlineprotected . ◆ begin() [1/2]. template<class T , class MemoryManager , class DataTypeInfoManager > . iterator sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >::begin ; (; ). inline . ◆ begin() [2/2]. template<class T , class MemoryManager , class DataTypeInfoManager > . const_iterator sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >::begin ; (; ); const. inline . ◆ bufferRead(). template<class T , class MemoryManager , class DataTypeInfoManager > . buffer_id_type sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >::bufferRead ; (; bool ; create = false). inline . Get the Buffer Object ID for reading. . ◆ bufferWrite(). template<class T , class MemoryManager , class DataTypeInfoManager > . buffer_id_type sofa::type::vector_device< T, MemoryManager, Dat",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1vector__device.html:8629,allocate,allocate,8629,api/master/sofa/html/classsofa_1_1type_1_1vector__device.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1vector__device.html,1,['allocate'],['allocate']
Energy Efficiency,"<class DataTypes > . GearSpringForceField<DataTypes>::Real sofa::component::solidmechanics::spring::GearSpringForceField< DataTypes >::getAngleAroundAxis ; (; Coord ; p1, . Coord ; p2, . unsigned int ; axis . ). inline . ◆ getObject1(). template<class DataTypes > . core::behavior::MechanicalState<DataTypes>* sofa::component::solidmechanics::spring::GearSpringForceField< DataTypes >::getObject1 ; (; ). inline . ◆ getObject2(). template<class DataTypes > . core::behavior::MechanicalState<DataTypes>* sofa::component::solidmechanics::spring::GearSpringForceField< DataTypes >::getObject2 ; (; ). inline . ◆ getPotentialEnergy(). template<class DataTypes > . SReal sofa::component::solidmechanics::spring::GearSpringForceField< DataTypes >::getPotentialEnergy ; (; const core::MechanicalParams * ; mparams, . const DataVecCoord & ; x1, . const DataVecCoord & ; x2 . ); const. inlineoverridevirtual . Get the potential energy associated to this ForceField.; Used to estimate the total energy of the system by some post-stabilization techniques.; This method must be implemented by the component, and is usually called by the generic ForceField::getPotentialEnergy() method. ; Implements sofa::core::behavior::PairInteractionForceField< DataTypes >. ◆ getSprings(). template<class DataTypes > . sofa::type::vector<Spring>* sofa::component::solidmechanics::spring::GearSpringForceField< DataTypes >::getSprings ; (; ). inline . ◆ getVectorAngle() [1/2]. template<class DataTypes > . void sofa::component::solidmechanics::spring::GearSpringForceField< DataTypes >::getVectorAngle ; (; Coord ; p1, . Coord ; p2, . unsigned int ; axis, . Vector & ; w . ). inline . ◆ getVectorAngle() [2/2]. template<class DataTypes > . void sofa::component::solidmechanics::spring::GearSpringForceField< DataTypes >::getVectorAngle ; (; Vector ; u, . Vector ; v, . Vector & ; w . ). inline . ◆ init(). template<class DataTypes > . void sofa::component::solidmechanics::spring::GearSpringForceField< DataTypes >::init ; (;",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_gear_spring_force_field.html:30974,energy,energy,30974,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_gear_spring_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_gear_spring_force_field.html,1,['energy'],['energy']
Energy Efficiency,"<class DataTypes > . void sofa::component::solidmechanics::spring::FrameSpringForceField< DataTypes >::draw ; (; const core::visual::VisualParams * ; ). overridevirtual . Render internal data of this object, for debugging purposes. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ getObject1(). template<class DataTypes > . core::behavior::MechanicalState<DataTypes>* sofa::component::solidmechanics::spring::FrameSpringForceField< DataTypes >::getObject1 ; (; ). inline . ◆ getObject2(). template<class DataTypes > . core::behavior::MechanicalState<DataTypes>* sofa::component::solidmechanics::spring::FrameSpringForceField< DataTypes >::getObject2 ; (; ). inline . ◆ getPotentialEnergy(). template<class DataTypes > . SReal sofa::component::solidmechanics::spring::FrameSpringForceField< DataTypes >::getPotentialEnergy ; (; const core::MechanicalParams * ; mparams, . const DataVecCoord & ; x1, . const DataVecCoord & ; x2 . ); const. inlineoverridevirtual . Get the potential energy associated to this ForceField.; Used to estimate the total energy of the system by some post-stabilization techniques.; This method must be implemented by the component, and is usually called by the generic ForceField::getPotentialEnergy() method. ; Implements sofa::core::behavior::PairInteractionForceField< DataTypes >. ◆ getSprings(). template<class DataTypes > . sofa::type::vector<Spring>* sofa::component::solidmechanics::spring::FrameSpringForceField< DataTypes >::getSprings ; (; ). inline . ◆ init(). template<class DataTypes > . void sofa::component::solidmechanics::spring::FrameSpringForceField< DataTypes >::init ; (; void ; ). overridevirtual . Initialization method called at graph creation and modification, during top-down traversal. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ SOFA_CLASS(). template<class DataTypes > . sofa::component::solidmechanics::spring::FrameSpringForceField< DataTypes >::SOFA_CLASS ; (; SOFA_TEMPLATE(FrameSpringForceField< DataTypes >, Data",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_frame_spring_force_field.html:28890,energy,energy,28890,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_frame_spring_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_frame_spring_force_field.html,1,['energy'],['energy']
Energy Efficiency,"<class DataTypes > . void sofa::component::solidmechanics::spring::JointSpringForceField< DataTypes >::draw ; (; const core::visual::VisualParams * ; ). overridevirtual . Render internal data of this object, for debugging purposes. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ getObject1(). template<class DataTypes > . core::behavior::MechanicalState<DataTypes>* sofa::component::solidmechanics::spring::JointSpringForceField< DataTypes >::getObject1 ; (; ). inline . ◆ getObject2(). template<class DataTypes > . core::behavior::MechanicalState<DataTypes>* sofa::component::solidmechanics::spring::JointSpringForceField< DataTypes >::getObject2 ; (; ). inline . ◆ getPotentialEnergy(). template<class DataTypes > . SReal sofa::component::solidmechanics::spring::JointSpringForceField< DataTypes >::getPotentialEnergy ; (; const core::MechanicalParams * ; mparams, . const DataVecCoord & ; x1, . const DataVecCoord & ; x2 . ); const. inlineoverridevirtual . Get the potential energy associated to this ForceField.; Used to estimate the total energy of the system by some post-stabilization techniques.; This method must be implemented by the component, and is usually called by the generic ForceField::getPotentialEnergy() method. ; Implements sofa::core::behavior::PairInteractionForceField< DataTypes >. ◆ getSprings(). template<class DataTypes > . sofa::type::vector<Spring>* sofa::component::solidmechanics::spring::JointSpringForceField< DataTypes >::getSprings ; (; ). inline . ◆ init(). template<class DataTypes > . void sofa::component::solidmechanics::spring::JointSpringForceField< DataTypes >::init ; (; void ; ). overridevirtual . Initialization method called at graph creation and modification, during top-down traversal. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ projectTorsion(). template<class DataTypes > . void sofa::component::solidmechanics::spring::JointSpringForceField< DataTypes >::projectTorsion ; (; Spring & ; spring). protected . ◆ SOFA_CL",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_joint_spring_force_field.html:32148,energy,energy,32148,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_joint_spring_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_joint_spring_force_field.html,1,['energy'],['energy']
Energy Efficiency,"= type::RGBAColor::green(), . const type::RGBAColor & ; colorZ = type::RGBAColor::red() . ). ◆ draw() [6/16]. void sofa::gl::Axis::draw ; (; const type::Vec3 & ; center, . const double ; orient[4][4], . const type::Vec3 & ; length, . const type::RGBAColor & ; colorX = type::RGBAColor::red(), . const type::RGBAColor & ; colorY = type::RGBAColor::green(), . const type::RGBAColor & ; colorZ = type::RGBAColor::red() . ). static . ◆ draw() [7/16]. static void sofa::gl::Axis::draw ; (; const type::Vec3 & ; center, . const double ; orient[4][4], . const type::Vec3 & ; length, . const type::Vec4f & ; colorX = type::Vec4f(1, 0, 0, 1), . const type::Vec4f & ; colorY = type::Vec4f(0, 1, 0, 1), . const type::Vec4f & ; colorZ = type::Vec4f(0, 0, 1, 1) . ). staticdelete . ◆ draw() [8/16]. void sofa::gl::Axis::draw ; (; const type::Vec3 & ; center, . const double ; orient[4][4], . SReal ; length = 1.0_sreal, . const type::RGBAColor & ; colorX = type::RGBAColor::red(), . const type::RGBAColor & ; colorY = type::RGBAColor::green(), . const type::RGBAColor & ; colorZ = type::RGBAColor::red() . ). static . ◆ draw() [9/16]. static void sofa::gl::Axis::draw ; (; const type::Vec3 & ; center, . const double ; orient[4][4], . SReal ; length = 1.0_sreal, . const type::Vec4f & ; colorX = type::Vec4f(1, 0, 0, 1), . const type::Vec4f & ; colorY = type::Vec4f(0, 1, 0, 1), . const type::Vec4f & ; colorZ = type::Vec4f(0, 0, 1, 1) . ). staticdelete . ◆ draw() [10/16]. void sofa::gl::Axis::draw ; (; const type::Vec3 & ; center, . const Quaternion & ; orient, . const type::Vec3 & ; length, . const type::RGBAColor & ; colorX = type::RGBAColor::red(), . const type::RGBAColor & ; colorY = type::RGBAColor::green(), . const type::RGBAColor & ; colorZ = type::RGBAColor::red() . ). static . ◆ draw() [11/16]. static void sofa::gl::Axis::draw ; (; const type::Vec3 & ; center, . const Quaternion & ; orient, . const type::Vec3 & ; length, . const type::Vec4f & ; colorX = type::Vec4f(1, 0, 0, 1), . const type::V",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1_axis.html:8201,green,green,8201,api/master/sofa/html/classsofa_1_1gl_1_1_axis.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1_axis.html,1,['green'],['green']
Energy Efficiency,"> ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  ;  Static Protected Member Functions inherited from sofa::component::solidmechanics::spring::SpringForceField< DataTypes >; template<class Matrix > ; static void addToMatrix (Matrix *globalMatrix, const unsigned int offsetRow, const unsigned int offsetCol, const Mat &localMatrix);  . Attribute details. ◆ d_cubesDamping. template<class DataTypes > . Data< Real > sofa::component::solidmechanics::spring::MeshSpringForceField< DataTypes >::d_cubesDamping. protected . Damping for the Cubes. . ◆ d_cubesStiffness. template<class DataTypes > . Data< Real > sofa::component::solidmechanics::spring::MeshSpringForceField< DataTypes >::d_cubesStiffness. protected . Stiffness for the Cubes. . ◆ d_drawMaxElongationRange. template<class DataTypes > . Data< Real > sofa::component::solidmechanics::spring::MeshSpringForceField< DataTypes >::d_drawMaxElongationRange. protected . Max range of elongation (red eongation - blue neutral - green compression) . ◆ d_drawMinElongationRange. template<class DataTypes > . Data< Real > sofa::component::solidmechanics::spring::MeshSpringForceField< DataTypes >::d_drawMinElongationRange. protected . Min range of elongation (red eongation - blue neutral - green compression) . ◆ d_drawSpringSize. template<class DataTypes > . Data< Real > sofa::component::solidmechanics::spring::MeshSpringForceField< DataTypes >::d_drawSpringSize. protected . Size of drawed lines. . ◆ d_linesDamping. template<class DataTypes > . Data< Real > sofa::component::solidmechanics::spring::MeshSpringForceField< DataTypes >::d_linesDamping. protected . Damping for the Lines. . ◆ d_linesStiffness. template<class DataTypes > . Data< Real > sofa::component::solidmechanics::spring::MeshSpringForceField< DataTypes >::d_linesStiffness. protected . Stiffness for the Lines. . ◆ d_localRange. template<class DataTypes > . Data< type::Vec<2, sofa::Index> > sofa::component::solidmechanics::spring::Mesh",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_mesh_spring_force_field.html:28925,green,green,28925,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_mesh_spring_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_mesh_spring_force_field.html,1,['green'],['green']
Energy Efficiency,"CallBacks ();  ; ComponentMouseInteraction * getInteraction ();  ; BodyPicked * getLastPicked ();  . Additional Inherited Members;  Static Public Member Functions inherited from sofa::gui::common::PickHandler; static BodyPicked findCollisionUsingBruteForce (const type::Vec3 &origin, const type::Vec3 &direction, double maxLength, core::objectmodel::BaseNode *root);  ;  Protected Member Functions inherited from sofa::gui::common::PickHandler; virtual BodyPicked findCollision ();  ; BodyPicked findCollisionUsingPipeline ();  ; BodyPicked findCollisionUsingBruteForce ();  ; BodyPicked findCollisionUsingColourCoding ();  ; bool needToCastRay ();  ; void setCompatibleInteractor ();  . Attribute details. ◆ _fbo. gl::FrameBufferObject sofa::gui::qt::GLPickHandler::_fbo. protected . ◆ _fboAllocated. bool sofa::gui::qt::GLPickHandler::_fboAllocated. protected . ◆ _fboParams. gl::fboParameters sofa::gui::qt::GLPickHandler::_fboParams. protected . Constructor details. ◆ GLPickHandler(). sofa::gui::qt::GLPickHandler::GLPickHandler ; (; double ; defaultLength = 1000000). ◆ ~GLPickHandler(). sofa::gui::qt::GLPickHandler::~GLPickHandler ; (; ). overridevirtual . Function details. ◆ allocateSelectionBuffer(). void sofa::gui::qt::GLPickHandler::allocateSelectionBuffer ; (; int ; width, . int ; height . ). overridevirtual . Reimplemented from sofa::gui::common::PickHandler. ◆ destroySelectionBuffer(). void sofa::gui::qt::GLPickHandler::destroySelectionBuffer ; (; ). overridevirtual . Reimplemented from sofa::gui::common::PickHandler. ◆ findCollisionUsingColourCoding(). BodyPicked sofa::gui::qt::GLPickHandler::findCollisionUsingColourCoding ; (; const type::Vec3 & ; origin, . const type::Vec3 & ; direction . ). overridevirtual . Reimplemented from sofa::gui::common::PickHandler. Enum details. ◆ PickingMethod. enum sofa::gui::qt::GLPickHandler::PickingMethod. EnumeratorRAY_CASTING ; SELECTION_BUFFER . sofaguiqtGLPickHandler; Generated on Mon Nov 11 2024 03:23:37 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_g_l_pick_handler.html:3746,allocate,allocateSelectionBuffer,3746,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_g_l_pick_handler.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_g_l_pick_handler.html,2,['allocate'],['allocateSelectionBuffer']
Energy Efficiency,"Color &colorZ=type::RGBAColor::red());  ; static void draw (const type::Vec3 &center, const double orient[4][4], const type::Vec3 &length, const type::RGBAColor &colorX=type::RGBAColor::red(), const type::RGBAColor &colorY=type::RGBAColor::green(), const type::RGBAColor &colorZ=type::RGBAColor::red());  ; static void draw (const double *mat, const type::Vec3 &length, const type::RGBAColor &colorX=type::RGBAColor::red(), const type::RGBAColor &colorY=type::RGBAColor::green(), const type::RGBAColor &colorZ=type::RGBAColor::red());  ; static void draw (const type::Vec3 &center, const Quaternion &orient, SReal length=1.0_sreal, const type::RGBAColor &colorX=type::RGBAColor::red(), const type::RGBAColor &colorY=type::RGBAColor::green(), const type::RGBAColor &colorZ=type::RGBAColor::red());  ; static void draw (const type::Vec3 &center, const double orient[4][4], SReal length=1.0_sreal, const type::RGBAColor &colorX=type::RGBAColor::red(), const type::RGBAColor &colorY=type::RGBAColor::green(), const type::RGBAColor &colorZ=type::RGBAColor::red());  ; static void draw (const double *mat, SReal length=1.0_sreal, const type::RGBAColor &colorX=type::RGBAColor::red(), const type::RGBAColor &colorY=type::RGBAColor::green(), const type::RGBAColor &colorZ=type::RGBAColor::red());  ; static void draw (const type::Vec3 &center, const Quaternion &orient, const type::Vec3 &length, const type::Vec4f &colorX=type::Vec4f(1, 0, 0, 1), const type::Vec4f &colorY=type::Vec4f(0, 1, 0, 1), const type::Vec4f &colorZ=type::Vec4f(0, 0, 1, 1))=delete;  ; static void draw (const type::Vec3 &center, const double orient[4][4], const type::Vec3 &length, const type::Vec4f &colorX=type::Vec4f(1, 0, 0, 1), const type::Vec4f &colorY=type::Vec4f(0, 1, 0, 1), const type::Vec4f &colorZ=type::Vec4f(0, 0, 1, 1))=delete;  ; static void draw (const type::Vec3 &center, const Quaternion &orient, SReal length=1.0_sreal, const type::Vec4f &colorX=type::Vec4f(1, 0, 0, 1), const type::Vec4f &colorY=type::Vec4f(0, 1,",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1_axis.html:3040,green,green,3040,api/master/sofa/html/classsofa_1_1gl_1_1_axis.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1_axis.html,1,['green'],['green']
Energy Efficiency,"Cols ; (; Index ; imin, . Index ; imax . ). inlineoverridevirtual . Set all the entries of column i and of row i to 0. Not efficient ! ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRow(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::clearRow ; (; Index ; i). inlineoverridevirtual . Set all the entries of a row to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRowCol(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::clearRowCol ; (; Index ; i). inlineoverridevirtual . Clears all the entries of rows imin to imax-1 and columns imin to imax-1. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRows(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::clearRows ; (; Index ; imin, . Index ; imax . ). inlineoverridevirtual . Set all the entries of rows imin to imax-1 to 0. ; Set all the entries of a column to 0. Not efficient ! ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRowsCols(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::clearRowsCols ; (; Index ; imin, . Index ; imax . ). inlineoverridevirtual . Clears all the values in rows imin to imax-1 and columns imin to imax-1. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ coeffRef(). template<class TReal > . Real& sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::coeffRef ; (; Index ; i, . Index ; j . ). inline . Return a reference to the given entry in the compressed matrix.There can (must ?) be a value at this place already. Efficient only if the it is at the last place of the compressed matrix. . ◆ colSize(). template<class TReal > . Index sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::colSize ; (; void ; ); const. inlineoverridevirtual . number of columns ; Implements sofa::linearalgebra::BaseMatrix. ◆ compress(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::compres",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html:20980,efficient,efficient,20980,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html,1,['efficient'],['efficient']
Energy Efficiency,"Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseObject; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  . Attribute details. ◆ d_rate. Data<SReal> sofa::component::odesolver::forward::DampVelocitySolver::d_rate. Factor used to reduce the velocities. Typically between 0 and 1. . ◆ d_threshold. Data<SReal> sofa::component::odesolver::forward::DampVelocitySolver::d_threshold. Threshold under which the velocities are canceled. . ◆ rate. sofa::core::objectmodel::RenamedData<SReal> sofa::component::odesolver::forward::DampVelocitySolver::rate. ◆ threshold. sofa::core::objectmodel::RenamedData<SReal> sofa::component::odesolver::forward::DampVelocitySolver::threshold. Constructor details. ◆ DampVelocitySolver(). sofa::component::odesolver::forward::DampVelocitySolver::DampVelocitySolver ; (; ). protected . Function details. ◆ getIntegrationFactor(). SReal sofa::component::odesolver::forward::DampVelocitySolver::getIntegrationFactor ; (; int ; inputDerivative, . int ; outputDerivative . ); const. inlineoverridevirtual . Given an input derivative order (0 for position, 1 for velocity, 2 for acceleration), how much will it affect the output derivative of the given order. ; Reimplemented from sofa::core::behavior::OdeSolve",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1forward_1_1_damp_velocity_solver.html:14286,reduce,reduce,14286,api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1forward_1_1_damp_velocity_solver.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1forward_1_1_damp_velocity_solver.html,1,['reduce'],['reduce']
Energy Efficiency,"Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  . Public Member Functions;  SOFA_ABSTRACT_CLASS (TopologicalMapping, objectmodel::BaseObject);  ; virtual void setTopologies (In *from, Out *to);  Specify the input and output models. More...;  ; void setPathInputObject (const std::string &o);  Set the path to the objects mapped in the scene graph. More...;  ; void setPathOutputObject (const std::string &o);  ; In * getFrom ();  Accessor to the INPUT topology of the TopologicalMapping : More...;  ; Out * getTo ();  Accessor to the OUTPUT topology of the TopologicalMapping : More...;  ; virtual void updateTopologicalMappingTopDown ()=0;  Method called at each topological changes propagation which comes from the INPUT topology to adapt the OUTPUT topology : More...;  ; virtual void updateTopologicalMappingBottomUp ();  Method called at each topological changes propagation which comes from the OUTPUT topology to adapt the INPUT topology : More...;  ; virtual bool propagateFromInputToOutputModel ();  Return true if this mapping is able to propagate topological changes from input to output model. More...;  ; virtual bool propagateFromOutputToInputModel ();  Return true if this mapping is able to propagate topological changes from output to input model. More...;  ; virtual bool isTheOutputTopologySubdividingTheInputOne ();  return true if the output topology subdivide the input one. (the topology uses the Loc2GlobVec/Glob2LocMap/In2OutMap structs and share the same DOFs) More...;  ; const std::map< Index, Index > & getGlob2LocMap ();  Accessor to index maps : More...;  ; virtual Index getGlobIndex (Index ind);  ; virtual Index getFromIndex (Index ind);  ; void dumpGlob2LocMap ();  ; void dumpLoc2GlobVec ();  ; virtual bool checkTopologies ();  Method to check the topology mapping maps regarding the upper topology. More...;  ; virtual void",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topological_mapping.html:4560,adapt,adapt,4560,api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topological_mapping.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topological_mapping.html,1,['adapt'],['adapt']
Energy Efficiency,"DataTypes > . material::MaterialParameters<DataTypes> sofa::component::solidmechanics::fem::hyperelastic::StandardTetrahedralFEMForceField< DataTypes >::globalParameters. ◆ l_topology. template<class DataTypes > . SingleLink<StandardTetrahedralFEMForceField<DataTypes>, sofa::core::topology::BaseMeshTopology, BaseLink::FLAG_STOREPATH | BaseLink::FLAG_STRONGLINK> sofa::component::solidmechanics::fem::hyperelastic::StandardTetrahedralFEMForceField< DataTypes >::l_topology. protected . Link to be set to the topology container in the component graph. . ◆ m_topology. template<class DataTypes > . core::topology::BaseMeshTopology* sofa::component::solidmechanics::fem::hyperelastic::StandardTetrahedralFEMForceField< DataTypes >::m_topology. protected . ◆ myMaterial. template<class DataTypes > . material::HyperelasticMaterial<DataTypes>* sofa::component::solidmechanics::fem::hyperelastic::StandardTetrahedralFEMForceField< DataTypes >::myMaterial. protected . the array that describes the complete material energy and its derivatives . ◆ myposition. template<class DataTypes > . VecCoord sofa::component::solidmechanics::fem::hyperelastic::StandardTetrahedralFEMForceField< DataTypes >::myposition. protected . ◆ tetrahedronInfo. template<class DataTypes > . core::topology::TetrahedronData<tetrahedronRestInfoVector> sofa::component::solidmechanics::fem::hyperelastic::StandardTetrahedralFEMForceField< DataTypes >::tetrahedronInfo. protected . Internal tetrahedron data. . ◆ updateMatrix. template<class DataTypes > . bool sofa::component::solidmechanics::fem::hyperelastic::StandardTetrahedralFEMForceField< DataTypes >::updateMatrix. protected . the initial positions of the points . Constructor details. ◆ StandardTetrahedralFEMForceField(). template<class DataTypes > . sofa::component::solidmechanics::fem::hyperelastic::StandardTetrahedralFEMForceField< DataTypes >::StandardTetrahedralFEMForceField. protected . ◆ ~StandardTetrahedralFEMForceField(). template<class DataTypes > . sofa::co",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1_standard_tetrahedral_f_e_m_force_field.html:23456,energy,energy,23456,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1_standard_tetrahedral_f_e_m_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1_standard_tetrahedral_f_e_m_force_field.html,1,['energy'],['energy']
Energy Efficiency,"DataTypes >, sofa::component::solidmechanics::fem::elastic::HexahedronFEMForceFieldAndMass< DataTypes >, sofa::component::mechanicalload::QuadPressureForceField< DataTypes >, sofa::component::mechanicalload::DiagonalVelocityDampingForceField< DataTypes >, sofa::component::mass::UniformMass< DataTypes >, sofa::component::mass::MeshMatrixMass< DataTypes, GeometricalTypes >, sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >, and sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >. ◆ getComplianceMatrix(). virtual const sofa::linearalgebra::BaseMatrix* sofa::core::behavior::BaseForceField::getComplianceMatrix ; (; const MechanicalParams * ; ). inlinevirtual . Return a pointer to the compliance matrix C . ◆ getPotentialEnergy(). virtual SReal sofa::core::behavior::BaseForceField::getPotentialEnergy ; (; const MechanicalParams * ; mparams = mechanicalparams::defaultInstance()); const. pure virtual . Get the potential energy associated to this ForceField during the last call of addForce( const MechanicalParams* mparams );. ; Used to estimate the total energy of the system by some post-stabilization techniques. ; Implemented in sofa::core::behavior::PairInteractionForceField< TDataTypes >, sofa::core::behavior::PairInteractionForceField< DataTypes >, sofa::core::behavior::MixedInteractionForceField< TDataTypes1, TDataTypes2 >, sofa::core::behavior::Mass< DataTypes >, sofa::core::behavior::ForceField< TDataTypes >, sofa::core::behavior::ForceField< _DataTypes >, sofa::core::behavior::ForceField< T >, sofa::core::behavior::ForceField< DataTypes >, sofa::component::solidmechanics::tensormass::TetrahedralTensorMassForceField< DataTypes >, and sofa::component::solidmechanics::fem::elastic::HexahedronFEMForceFieldAndMass< DataTypes >. ◆ insertInNode(). bool sofa::core::behavior::BaseForceField::insertInNode ; (; objectmodel::BaseNode * ; ). overridevirtual . the component can insert itself directly in the right sequence in the Node so the Node does ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_force_field.html:33565,energy,energy,33565,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_force_field.html,1,['energy'],['energy']
Energy Efficiency,"Deriv & ; dx1, . VecDeriv & ; df2, . const VecDeriv & ; dx2, . sofa::Index ; i, . const Spring & ; spring, . SReal ; kFactor, . SReal ; bFactor . ). ◆ computeSpringForce(). template<class DataTypes > . auto sofa::component::solidmechanics::spring::SpringForceField< DataTypes >::computeSpringForce ; (; const VecCoord & ; p1, . const VecDeriv & ; v1, . const VecCoord & ; p2, . const VecDeriv & ; v2, . const Spring & ; spring . ). protectedvirtual . ◆ draw(). template<class DataTypes > . void sofa::component::solidmechanics::spring::SpringForceField< DataTypes >::draw ; (; const core::visual::VisualParams * ; ). overridevirtual . Render internal data of this object, for debugging purposes. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ exportGnuplot(). template<class DataTypes > . void sofa::component::solidmechanics::spring::SpringForceField< DataTypes >::exportGnuplot ; (; SReal ; time). overridevirtual . export kinetic and potential energy state at ""time"" to a gnuplot file ; Reimplemented from sofa::core::behavior::BaseInteractionForceField. ◆ getArrowSize(). template<class DataTypes > . SReal sofa::component::solidmechanics::spring::SpringForceField< DataTypes >::getArrowSize ; (; ); const. inline . ◆ getDrawMode(). template<class DataTypes > . int sofa::component::solidmechanics::spring::SpringForceField< DataTypes >::getDrawMode ; (; ); const. inline . ◆ getObject1(). template<class DataTypes > . core::behavior::MechanicalState<DataTypes>* sofa::component::solidmechanics::spring::SpringForceField< DataTypes >::getObject1 ; (; ). inline . ◆ getObject2(). template<class DataTypes > . core::behavior::MechanicalState<DataTypes>* sofa::component::solidmechanics::spring::SpringForceField< DataTypes >::getObject2 ; (; ). inline . ◆ getPotentialEnergy(). template<class DataTypes > . SReal sofa::component::solidmechanics::spring::SpringForceField< DataTypes >::getPotentialEnergy ; (; const core::MechanicalParams * ; mparams, . const DataVecCoord & ; x1, . con",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_spring_force_field.html:37348,energy,energy,37348,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_spring_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_spring_force_field.html,1,['energy'],['energy']
Energy Efficiency,"EMForceField<DataTypes>, sofa::core::topology::BaseMeshTopology, BaseLink::FLAG_STOREPATH | BaseLink::FLAG_STRONGLINK> sofa::component::solidmechanics::fem::hyperelastic::TetrahedronHyperelasticityFEMForceField< DataTypes >::l_topology. Link to be set to the topology container in the component graph. . ◆ m_edgeInfo. template<class DataTypes > . EdgeData<sofa::type::vector<EdgeInformation> > sofa::component::solidmechanics::fem::hyperelastic::TetrahedronHyperelasticityFEMForceField< DataTypes >::m_edgeInfo. Internal edge data. . ◆ m_initialPoints. template<class DataTypes > . VecCoord sofa::component::solidmechanics::fem::hyperelastic::TetrahedronHyperelasticityFEMForceField< DataTypes >::m_initialPoints. protected . ◆ m_myMaterial. template<class DataTypes > . std::unique_ptr<material::HyperelasticMaterial<DataTypes> > sofa::component::solidmechanics::fem::hyperelastic::TetrahedronHyperelasticityFEMForceField< DataTypes >::m_myMaterial. protected . the array that describes the complete material energy and its derivatives . ◆ m_tetrahedronInfo. template<class DataTypes > . TetrahedronData<sofa::type::vector<TetrahedronRestInformation> > sofa::component::solidmechanics::fem::hyperelastic::TetrahedronHyperelasticityFEMForceField< DataTypes >::m_tetrahedronInfo. Internal tetrahedron data. . ◆ m_topology. template<class DataTypes > . core::topology::BaseMeshTopology* sofa::component::solidmechanics::fem::hyperelastic::TetrahedronHyperelasticityFEMForceField< DataTypes >::m_topology. protected . ◆ m_updateMatrix. template<class DataTypes > . bool sofa::component::solidmechanics::fem::hyperelastic::TetrahedronHyperelasticityFEMForceField< DataTypes >::m_updateMatrix. protected . the initial positions of the points . Constructor details. ◆ TetrahedronHyperelasticityFEMForceField(). template<class DataTypes > . sofa::component::solidmechanics::fem::hyperelastic::TetrahedronHyperelasticityFEMForceField< DataTypes >::TetrahedronHyperelasticityFEMForceField. protected . ◆ ~Tetr",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1_tetrahedron_hyperelasticity_f_e_m_force_field.html:23866,energy,energy,23866,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1_tetrahedron_hyperelasticity_f_e_m_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1_tetrahedron_hyperelasticity_f_e_m_force_field.html,1,['energy'],['energy']
Energy Efficiency,FA. SOFA - Topic Tag: ArticulatedSystemMapping. /articulation; . /feed; ; Articulation – SOFA. SOFA - Topic Tag: Articulation. /articulationcenter; . /feed; ; ArticulationCenter – SOFA. SOFA - Topic Tag: ArticulationCenter. /articulation-rigid-orientation; . /feed; ; articulation; rigid; orientation – SOFA. SOFA - Topic Tag: articulation; rigid; orientation. /attach; . /feed; ; attach – SOFA. SOFA - Topic Tag: attach. /attachconstraint; . /feed; ; AttachConstraint – SOFA. SOFA - Topic Tag: AttachConstraint. /attachconstraint-surface-area-rigidmapping; . /feed; ; AttachConstraint surface area RigidMapping – SOFA. SOFA - Topic Tag: AttachConstraint surface area RigidMapping. /autocollision; . /feed; ; autocollision – SOFA. SOFA - Topic Tag: autocollision. /batch; . /feed; ; batch – SOFA. SOFA - Topic Tag: batch. /batch-analysis-python; . /feed; ; batch analysis python – SOFA. SOFA - Topic Tag: batch analysis python. /beam; . /feed; ; beam – SOFA. SOFA - Topic Tag: beam. /beam-adaptater-python-controller; . /feed; ; beam adaptater; Python controller – SOFA. SOFA - Topic Tag: beam adaptater; Python controller. /beamadapter; . /feed; ; BeamAdapter – SOFA. SOFA - Topic Tag: BeamAdapter. /beamadapter-controller; . /feed; ; BeamAdapter Controller – SOFA. SOFA - Topic Tag: BeamAdapter Controller. /beamfemforcefield; . /feed; ; BeamFEMForceField – SOFA. SOFA - Topic Tag: BeamFEMForceField. /beamfemforcefield-setting-problem; . /feed; ; BeamFEMForceField Setting Problem – SOFA. SOFA - Topic Tag: BeamFEMForceField Setting Problem. /beamfemforcefield-unstable; . /feed; ; BeamFEMForceField unstable – SOFA. SOFA - Topic Tag: BeamFEMForceField unstable. /beginners; . /feed; ; beginners – SOFA. SOFA - Topic Tag: beginners. /begin-start-sofa; . /feed; ; begin start sofa – SOFA. SOFA - Topic Tag: begin start sofa. /bilateralinteractionconstraint; . /feed; ; BilateralInteractionConstraint – SOFA. SOFA - Topic Tag: BilateralInteractionConstraint. /binaries; . /feed; ; binaries – SOFA. SO,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/index-wcopy.html:428374,adapt,adaptater-python-controller,428374,index-wcopy.html,https://www.sofa-framework.org,https://www.sofa-framework.org/index-wcopy.html,1,['adapt'],['adaptater-python-controller']
Energy Efficiency,"GBAColor::green(), const type::RGBAColor &colorZ=type::RGBAColor::red())sofa::gl::Axisstatic; draw(const type::Vec3 &center, const double orient[4][4], SReal length=1.0_sreal, const type::RGBAColor &colorX=type::RGBAColor::red(), const type::RGBAColor &colorY=type::RGBAColor::green(), const type::RGBAColor &colorZ=type::RGBAColor::red())sofa::gl::Axisstatic; draw(const double *mat, SReal length=1.0_sreal, const type::RGBAColor &colorX=type::RGBAColor::red(), const type::RGBAColor &colorY=type::RGBAColor::green(), const type::RGBAColor &colorZ=type::RGBAColor::red())sofa::gl::Axisstatic; draw(const type::Vec4f &colorX=type::Vec4f(1, 0, 0, 1), const type::Vec4f &colorY=type::Vec4f(0, 1, 0, 1), const type::Vec4f &colorZ=type::Vec4f(0, 0, 1, 1))=deletesofa::gl::Axis; draw(const type::Vec3 &center, const Quaternion &orient, const type::Vec3 &length, const type::Vec4f &colorX=type::Vec4f(1, 0, 0, 1), const type::Vec4f &colorY=type::Vec4f(0, 1, 0, 1), const type::Vec4f &colorZ=type::Vec4f(0, 0, 1, 1))=deletesofa::gl::Axisstatic; draw(const type::Vec3 &center, const double orient[4][4], const type::Vec3 &length, const type::Vec4f &colorX=type::Vec4f(1, 0, 0, 1), const type::Vec4f &colorY=type::Vec4f(0, 1, 0, 1), const type::Vec4f &colorZ=type::Vec4f(0, 0, 1, 1))=deletesofa::gl::Axisstatic; draw(const double *mat, const type::Vec3 &length, const type::Vec4f &colorX=type::Vec4f(1, 0, 0, 1), const type::Vec4f &colorY=type::Vec4f(0, 1, 0, 1), const type::Vec4f &colorZ=type::Vec4f(0, 0, 1, 1))=deletesofa::gl::Axis; draw(const type::Vec3 &center, const Quaternion &orient, SReal length=1.0_sreal, const type::Vec4f &colorX=type::Vec4f(1, 0, 0, 1), const type::Vec4f &colorY=type::Vec4f(0, 1, 0, 1), const type::Vec4f &colorZ=type::Vec4f(0, 0, 1, 1))=deletesofa::gl::Axisstatic; draw(const type::Vec3 &center, const double orient[4][4], SReal length=1.0_sreal, const type::Vec4f &colorX=type::Vec4f(1, 0, 0, 1), const type::Vec4f &colorY=type::Vec4f(0, 1, 0, 1), const type::Vec4f &colorZ=",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1_axis-members.html:2494,green,green,2494,api/master/sofa/html/classsofa_1_1gl_1_1_axis-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1_axis-members.html,1,['green'],['green']
Energy Efficiency,"Manager , class DataTypeInfoManager > . sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >::vector_device ; (; const Size ; n). inlineexplicit . ◆ vector_device() [3/4]. template<class T , class MemoryManager , class DataTypeInfoManager > . sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >::vector_device ; (; const vector_device< T, MemoryManager, DataTypeInfoManager > & ; v). inline . ◆ vector_device() [4/4]. template<class T , class MemoryManager , class DataTypeInfoManager > . sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >::vector_device ; (; const std::initializer_list< T > & ; t). inline . ◆ ~vector_device(). template<class T , class MemoryManager , class DataTypeInfoManager > . sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >::~vector_device ; (; ). inline . Function details. ◆ allocate(). template<class T , class MemoryManager , class DataTypeInfoManager > . void sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >::allocate ; (; int ; d); const. inlineprotected . ◆ begin() [1/2]. template<class T , class MemoryManager , class DataTypeInfoManager > . iterator sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >::begin ; (; ). inline . ◆ begin() [2/2]. template<class T , class MemoryManager , class DataTypeInfoManager > . const_iterator sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >::begin ; (; ); const. inline . ◆ bufferRead(). template<class T , class MemoryManager , class DataTypeInfoManager > . buffer_id_type sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >::bufferRead ; (; bool ; create = false). inline . Get the Buffer Object ID for reading. . ◆ bufferWrite(). template<class T , class MemoryManager , class DataTypeInfoManager > . buffer_id_type sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >::bufferWrite ; (; bool ; create = false). inline . Get the Buffer Object ID for writing. . ◆ capacity(). templa",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1vector__device.html:8785,allocate,allocate,8785,api/master/sofa/html/classsofa_1_1type_1_1vector__device.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1vector__device.html,1,['allocate'],['allocate']
Energy Efficiency,"Mapping);  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; void updateTopologicalMappingTopDown () override;  Translates the TopologyChange objects from the source to the target. More...;  ; Index getFromIndex (Index ind) override;  ;  Public Member Functions inherited from sofa::core::topology::TopologicalMapping;  SOFA_ABSTRACT_CLASS (TopologicalMapping, objectmodel::BaseObject);  ; virtual void setTopologies (In *from, Out *to);  Specify the input and output models. More...;  ; void setPathInputObject (const std::string &o);  Set the path to the objects mapped in the scene graph. More...;  ; void setPathOutputObject (const std::string &o);  ; In * getFrom ();  Accessor to the INPUT topology of the TopologicalMapping : More...;  ; Out * getTo ();  Accessor to the OUTPUT topology of the TopologicalMapping : More...;  ; virtual void updateTopologicalMappingBottomUp ();  Method called at each topological changes propagation which comes from the OUTPUT topology to adapt the INPUT topology : More...;  ; virtual bool propagateFromInputToOutputModel ();  Return true if this mapping is able to propagate topological changes from input to output model. More...;  ; virtual bool propagateFromOutputToInputModel ();  Return true if this mapping is able to propagate topological changes from output to input model. More...;  ; virtual bool isTheOutputTopologySubdividingTheInputOne ();  return true if the output topology subdivide the input one. (the topology uses the Loc2GlobVec/Glob2LocMap/In2OutMap structs and share the same DOFs) More...;  ; const std::map< Index, Index > & getGlob2LocMap ();  Accessor to index maps : More...;  ; virtual Index getGlobIndex (Index ind);  ; void dumpGlob2LocMap ();  ; void dumpLoc2GlobVec ();  ; virtual bool checkTopologies ();  Method to check the topology mapping maps regarding the upper topology. More...;  ; virtual void getFromIndex (type::vector< Index > &, con",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1mapping_1_1_identity_topological_mapping.html:1882,adapt,adapt,1882,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1mapping_1_1_identity_topological_mapping.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1mapping_1_1_identity_topological_mapping.html,1,['adapt'],['adapt']
Energy Efficiency,"Member Functions;  SOFA_ABSTRACT_CLASS (BaseForceField, StateAccessor);  ; bool insertInNode (objectmodel::BaseNode *node) override;  ; bool removeInNode (objectmodel::BaseNode *node) override;  ; Vector operations; virtual void addForce (const MechanicalParams *mparams, MultiVecDerivId fId)=0;  Given the current position and velocity states, update the current force vector by computing and adding the forces associated with this ForceField. More...;  ; virtual void addDForce (const MechanicalParams *mparams, MultiVecDerivId dfId)=0;  Compute the force derivative given a small displacement from the position and velocity used in the previous call to addForce(). More...;  ; virtual void addMBKdx (const MechanicalParams *mparams, MultiVecDerivId dfId);  Accumulate the contribution of M, B, and/or K matrices multiplied by the dx vector with the given coefficients. More...;  ; virtual SReal getPotentialEnergy (const MechanicalParams *mparams=mechanicalparams::defaultInstance()) const =0;  Get the potential energy associated to this ForceField during the last call of addForce( const MechanicalParams* mparams );. More...;  ; Matrix operations; virtual void addKToMatrix (const MechanicalParams *mparams, const sofa::core::behavior::MultiMatrixAccessor *matrix)=0;  Compute the system matrix corresponding to . More...;  ; virtual void addBToMatrix (const MechanicalParams *mparams, const sofa::core::behavior::MultiMatrixAccessor *matrix);  Compute the system matrix corresponding to . More...;  ; virtual void addMBKToMatrix (const MechanicalParams *mparams, const sofa::core::behavior::MultiMatrixAccessor *matrix);  Compute the system matrix corresponding to . More...;  ; virtual void buildStiffnessMatrix (StiffnessMatrix *matrix);  ; virtual void buildDampingMatrix (DampingMatrix *matrix);  ;  Public Member Functions inherited from sofa::core::behavior::StateAccessor;  SOFA_ABSTRACT_CLASS (StateAccessor, objectmodel::BaseObject);  ; virtual const MultiLink< StateAccessor, BaseMech",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_force_field.html:3160,energy,energy,3160,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_force_field.html,1,['energy'],['energy']
Energy Efficiency,"NT_LINEARSOLVER_ITERATIVE_API void clearSystem ();  ; void createSystemRHSVector ();  ; void createSystemSolutionVector ();  ; void resizeSystem (sofa::Size n);  ; void clearSystem ();  . Attribute details. ◆ matrix. template<typename TMatrix , typename TVector > . StoredMatrixType sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >::matrix { nullptr }. The global matrix of the linear system. If the linear system is written as Ax=b, it is A. . ◆ rhs. template<typename TMatrix , typename TVector > . StoredVectorType sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >::rhs { nullptr }. The right-hand side of the linear system. If the linear system is written as Ax=b, it is b. . ◆ solution. template<typename TMatrix , typename TVector > . StoredVectorType sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >::solution { nullptr }. The solution of the linear system. If the linear system is written as Ax=b, it is x. . Function details. ◆ allocateSystem(). template<typename TMatrix , typename TVector > . void sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >::allocateSystem. ◆ clearSystem() [1/3]. SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API void sofa::component::linearsystem::LinearSystemData< GraphScatteredMatrix, GraphScatteredVector >::clearSystem ; (; ). ◆ clearSystem() [2/3]. void sofa::component::linearsystem::LinearSystemData< GraphScatteredMatrix, GraphScatteredVector >::clearSystem ; (; ). ◆ clearSystem() [3/3]. template<typename TMatrix , typename TVector > . void sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >::clearSystem. ◆ createSystemMatrix(). template<typename TMatrix , typename TVector > . void sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >::createSystemMatrix. Allocate the object for the global matrix. . ◆ createSystemRHSVector() [1/3]. SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API void sofa::component::linearsystem::LinearSystemData< GraphScatteredMatrix, ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_linear_system_data.html:2523,allocate,allocateSystem,2523,api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_linear_system_data.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_linear_system_data.html,1,['allocate'],['allocateSystem']
Energy Efficiency,OFA - Topic Tag: Articulation. /articulationcenter; . /feed; ; ArticulationCenter – SOFA. SOFA - Topic Tag: ArticulationCenter. /articulation-rigid-orientation; . /feed; ; articulation; rigid; orientation – SOFA. SOFA - Topic Tag: articulation; rigid; orientation. /attach; . /feed; ; attach – SOFA. SOFA - Topic Tag: attach. /attachconstraint; . /feed; ; AttachConstraint – SOFA. SOFA - Topic Tag: AttachConstraint. /attachconstraint-surface-area-rigidmapping; . /feed; ; AttachConstraint surface area RigidMapping – SOFA. SOFA - Topic Tag: AttachConstraint surface area RigidMapping. /autocollision; . /feed; ; autocollision – SOFA. SOFA - Topic Tag: autocollision. /batch; . /feed; ; batch – SOFA. SOFA - Topic Tag: batch. /batch-analysis-python; . /feed; ; batch analysis python – SOFA. SOFA - Topic Tag: batch analysis python. /beam; . /feed; ; beam – SOFA. SOFA - Topic Tag: beam. /beam-adaptater-python-controller; . /feed; ; beam adaptater; Python controller – SOFA. SOFA - Topic Tag: beam adaptater; Python controller. /beamadapter; . /feed; ; BeamAdapter – SOFA. SOFA - Topic Tag: BeamAdapter. /beamadapter-controller; . /feed; ; BeamAdapter Controller – SOFA. SOFA - Topic Tag: BeamAdapter Controller. /beamfemforcefield; . /feed; ; BeamFEMForceField – SOFA. SOFA - Topic Tag: BeamFEMForceField. /beamfemforcefield-setting-problem; . /feed; ; BeamFEMForceField Setting Problem – SOFA. SOFA - Topic Tag: BeamFEMForceField Setting Problem. /beamfemforcefield-unstable; . /feed; ; BeamFEMForceField unstable – SOFA. SOFA - Topic Tag: BeamFEMForceField unstable. /beginners; . /feed; ; beginners – SOFA. SOFA - Topic Tag: beginners. /begin-start-sofa; . /feed; ; begin start sofa – SOFA. SOFA - Topic Tag: begin start sofa. /bilateralinteractionconstraint; . /feed; ; BilateralInteractionConstraint – SOFA. SOFA - Topic Tag: BilateralInteractionConstraint. /binaries; . /feed; ; binaries – SOFA. SOFA - Topic Tag: binaries. /binary; . /feed; ; binary – SOFA. SOFA - Topic Tag: binary. /blood-fl,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/index-wcopy.html:428479,adapt,adaptater,428479,index-wcopy.html,https://www.sofa-framework.org,https://www.sofa-framework.org/index-wcopy.html,1,['adapt'],['adaptater']
Energy Efficiency,"Open source framework for multi-physics simuation. Public Member Functions |; Protected Member Functions |; Friends |; List of all members . sofa::core::objectmodel::AspectPool Class Reference . #include <AspectPool.h>; Detailed Description; This class is responsible for managing the pool of available aspects numbers. It is safe to use this class from several thread. . Public Member Functions;  AspectPool ();  ;  ~AspectPool ();  ; void setReleaseCallback (const std::function< void(int)> &callback);  ; AspectRef allocate ();  ; AspectRef getAspect (int id);  ; int nbAspects () const;  ; int getAspectCounter (int id) const;  . Protected Member Functions; void release (int id);  . Friends; class Aspect;  . Constructor details. ◆ AspectPool(). sofa::core::objectmodel::AspectPool::AspectPool ; (; ). Constructor: creates a new aspect pool. . ◆ ~AspectPool(). sofa::core::objectmodel::AspectPool::~AspectPool ; (; ). Destructor. . Function details. ◆ allocate(). AspectRef sofa::core::objectmodel::AspectPool::allocate ; (; ). Request a new aspect. The returned object should stay alive as long as the aspect is in use. It it possible to duplicate the AspectRef if several threads/algorithm use the same aspect. If no aspect remains available, null pointer is returned. . ◆ getAspect(). AspectRef sofa::core::objectmodel::AspectPool::getAspect ; (; int ; id). ◆ getAspectCounter(). int sofa::core::objectmodel::AspectPool::getAspectCounter ; (; int ; id); const. inline . ◆ nbAspects(). int sofa::core::objectmodel::AspectPool::nbAspects ; (; ); const. inline . ◆ release(). void sofa::core::objectmodel::AspectPool::release ; (; int ; id). protected . Release the aspect having the specified number. It makes the number immediately available to satisfy subsequent AspectPool::allocate requests. . ◆ setReleaseCallback(). void sofa::core::objectmodel::AspectPool::setReleaseCallback ; (; const std::function< void(int)> & ; callback). Related details. ◆ Aspect. friend class Aspect. friend . so",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_pool.html:1105,allocate,allocate,1105,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_pool.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_pool.html,1,['allocate'],['allocate']
Energy Efficiency,"Quaternion &orient, const type::Vec3 &length)sofa::gl::Axis; Axis(const type::Vec3 &center, const double orient[4][4], const type::Vec3 &length)sofa::gl::Axis; Axis(const double *mat, const type::Vec3 &length)sofa::gl::Axis; Axis(const type::Vec3 &center, const Quaternion &orient, SReal length=1.0_sreal)sofa::gl::Axis; Axis(const type::Vec3 &center, const double orient[4][4], SReal length=1.0_sreal)sofa::gl::Axis; Axis(const double *mat, SReal length=1.0_sreal)sofa::gl::Axis; clear()sofa::gl::Axisinlinestatic; draw(const type::RGBAColor &colorX=type::RGBAColor::red(), const type::RGBAColor &colorY=type::RGBAColor::green(), const type::RGBAColor &colorZ=type::RGBAColor::red())sofa::gl::Axis; draw(const type::Vec3 &center, const Quaternion &orient, const type::Vec3 &length, const type::RGBAColor &colorX=type::RGBAColor::red(), const type::RGBAColor &colorY=type::RGBAColor::green(), const type::RGBAColor &colorZ=type::RGBAColor::red())sofa::gl::Axisstatic; draw(const type::Vec3 &center, const double orient[4][4], const type::Vec3 &length, const type::RGBAColor &colorX=type::RGBAColor::red(), const type::RGBAColor &colorY=type::RGBAColor::green(), const type::RGBAColor &colorZ=type::RGBAColor::red())sofa::gl::Axisstatic; draw(const double *mat, const type::Vec3 &length, const type::RGBAColor &colorX=type::RGBAColor::red(), const type::RGBAColor &colorY=type::RGBAColor::green(), const type::RGBAColor &colorZ=type::RGBAColor::red())sofa::gl::Axisstatic; draw(const type::Vec3 &center, const Quaternion &orient, SReal length=1.0_sreal, const type::RGBAColor &colorX=type::RGBAColor::red(), const type::RGBAColor &colorY=type::RGBAColor::green(), const type::RGBAColor &colorZ=type::RGBAColor::red())sofa::gl::Axisstatic; draw(const type::Vec3 &center, const double orient[4][4], SReal length=1.0_sreal, const type::RGBAColor &colorX=type::RGBAColor::red(), const type::RGBAColor &colorY=type::RGBAColor::green(), const type::RGBAColor &colorZ=type::RGBAColor::red())sofa::gl::Axisstat",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1_axis-members.html:962,green,green,962,api/master/sofa/html/classsofa_1_1gl_1_1_axis-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1_axis-members.html,4,['green'],['green']
Energy Efficiency,"Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Attributes |; Public Member Functions |; List of all members . sofa::component::solidmechanics::fem::hyperelastic::material::MooneyRivlin< DataTypes > Class Template Reference . #include <MooneyRivlin.h>. Inheritance diagram for sofa::component::solidmechanics::fem::hyperelastic::material::MooneyRivlin< DataTypes >:. [legend]; Detailed Description; template<class DataTypes>; class sofa::component::solidmechanics::fem::hyperelastic::material::MooneyRivlin< DataTypes >; a Class that describe a generic hyperelastic material : example of Boyce and Arruda The material is described based on continuum mechanics and the description is independent to any discretization method like the finite element method. A material is generically described by a strain energy function and its first and second derivatives. In practice the energy is the sum of several energy terms which depends on 2 quantities : the determinant of the deformation gradient J and the right Cauchy Green deformation tensor . Static Public Attributes; static constexpr std::string_view Name = ""MooneyRivlin"";  . Public Member Functions; Real getStrainEnergy (StrainInformation< DataTypes > *sinfo, const MaterialParameters< DataTypes > &param) override;  ; void deriveSPKTensor (StrainInformation< DataTypes > *sinfo, const MaterialParameters< DataTypes > &param, MatrixSym &SPKTensorGeneral) override;  ; void applyElasticityTensor (StrainInformation< DataTypes > *sinfo, const MaterialParameters< DataTypes > &param, const MatrixSym &inputTensor, MatrixSym &outputTensor) override;  ; void ElasticityTensor (StrainInformation< DataTypes > *sinfo, const MaterialParameters< DataTypes > &param, Matrix6 &outputTensor) override;  ;  Public Member Functions inherited from sofa::component::solidmechanics::fem::hyperelastic::material::HyperelasticMaterial< DataTypes >; virtual ~HyperelasticMaterial ();  . Attribute details. ◆ Name. t",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_mooney_rivlin.html:1041,energy,energy,1041,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_mooney_rivlin.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_mooney_rivlin.html,2,['energy'],['energy']
Energy Efficiency,"RenamedData< Real > f_youngModulus;  ; sofa::core::objectmodel::RenamedData< Real > f_dampingRatio;  ; sofa::core::objectmodel::RenamedData< bool > f_useAngularSprings;  ; sofa::core::objectmodel::RenamedData< bool > f_compressible;  ; sofa::core::objectmodel::RenamedData< Real > f_stiffnessMatrixRegularizationWeight;  ; sofa::core::topology::TriangleData< type::vector< TriangleRestInformation > > d_triangleInfo;  Internal triangle data. More...;  ; sofa::core::topology::EdgeData< type::vector< EdgeRestInformation > > d_edgeInfo;  Internal edge data. More...;  ; Data< VecCoord > d_initialPoints;  Initial Position. More...;  ; bool updateMatrix;  ; Data< Real > d_poissonRatio;  Poisson ratio in Hooke's law. More...;  ; Data< Real > d_youngModulus;  Young modulus in Hooke's law. More...;  ; Data< Real > d_dampingRatio;  Ratio damping/stiffness. More...;  ; Data< bool > d_useAngularSprings;  If Angular Springs should be used or not. More...;  ; Data< bool > d_compressible;  If additional energy penalizing compressibility should be used. More...;  ; Data< Real > d_stiffnessMatrixRegularizationWeight;  Regularization of the Stiffnes Matrix (between 0 and 1) More...;  ; Real lambda;  ; Real mu;  first Lame coefficient More...;  ; sofa::core::topology::BaseMeshTopology * m_topology;  Pointer to the current topology. More...;  ;  Protected Attributes inherited from sofa::core::behavior::StateAccessor; MultiLink< StateAccessor, BaseMechanicalState, BaseLink::FLAG_DUPLICATE > l_mechanicalStates;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObject; SingleLink< BaseObject, BaseContext, BaseLink::FLAG_DOUBLELINK > l_context;  ; LinkSlaves l_slaves;  ; SingleLink< BaseObject, BaseObject, BaseLink::FLAG_DOUBLELINK > l_master;  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_triangular_biquadratic_springs_force_field.html:3656,energy,energy,3656,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_triangular_biquadratic_springs_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_triangular_biquadratic_springs_force_field.html,1,['energy'],['energy']
Energy Efficiency,"Scheduler * > > m_lastInserted {};  . Public Member Functions; bool addTaskSchedulerToRegistry (TaskScheduler *taskScheduler, const std::string &taskSchedulerName);  ; TaskScheduler * getTaskScheduler (const std::string &taskSchedulerName) const;  ; bool hasScheduler (const std::string &taskSchedulerName) const;  ; const std::optional< std::pair< std::string, TaskScheduler * > > & getLastInserted () const;  ; void clear ();  ;  ~TaskSchedulerRegistry ();  . Attribute details. ◆ m_lastInserted. std::optional<std::pair<std::string, TaskScheduler*> > sofa::simulation::TaskSchedulerRegistry::m_lastInserted {}. protected . ◆ m_schedulers. std::map<std::string, TaskScheduler*> sofa::simulation::TaskSchedulerRegistry::m_schedulers. protected . Constructor details. ◆ ~TaskSchedulerRegistry(). sofa::simulation::TaskSchedulerRegistry::~TaskSchedulerRegistry ; (; ). Function details. ◆ addTaskSchedulerToRegistry(). bool sofa::simulation::TaskSchedulerRegistry::addTaskSchedulerToRegistry ; (; TaskScheduler * ; taskScheduler, . const std::string & ; taskSchedulerName . ). Add a task scheduler to the registry and transfer the ownership . ◆ clear(). void sofa::simulation::TaskSchedulerRegistry::clear ; (; ). Clear the registry and destroy the task schedulers sstored in the registry . ◆ getLastInserted(). const std::optional< std::pair< std::string, TaskScheduler * > > & sofa::simulation::TaskSchedulerRegistry::getLastInserted ; (; ); const. ◆ getTaskScheduler(). TaskScheduler * sofa::simulation::TaskSchedulerRegistry::getTaskScheduler ; (; const std::string & ; taskSchedulerName); const. Returnsa @TaskScheduler if the scheduler name is found in the registry, nullptr otherwise . ◆ hasScheduler(). bool sofa::simulation::TaskSchedulerRegistry::hasScheduler ; (; const std::string & ; taskSchedulerName); const. Returnstrue if the scheduler name is found in the registry, false otherwise . sofasimulationTaskSchedulerRegistry; Generated on Mon Nov 11 2024 03:34:14 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_task_scheduler_registry.html:1680,schedul,scheduler,1680,api/master/sofa/html/classsofa_1_1simulation_1_1_task_scheduler_registry.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_task_scheduler_registry.html,4,['schedul'],"['scheduler', 'schedulers']"
Energy Efficiency,"SpringForceField< DataTypes >::draw ; (; const core::visual::VisualParams * ; ). overridevirtual . Render internal data of this object, for debugging purposes. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ getObject1(). template<class DataTypes > . core::behavior::MechanicalState<DataTypes>* sofa::component::solidmechanics::spring::FrameSpringForceField< DataTypes >::getObject1 ; (; ). inline . ◆ getObject2(). template<class DataTypes > . core::behavior::MechanicalState<DataTypes>* sofa::component::solidmechanics::spring::FrameSpringForceField< DataTypes >::getObject2 ; (; ). inline . ◆ getPotentialEnergy(). template<class DataTypes > . SReal sofa::component::solidmechanics::spring::FrameSpringForceField< DataTypes >::getPotentialEnergy ; (; const core::MechanicalParams * ; mparams, . const DataVecCoord & ; x1, . const DataVecCoord & ; x2 . ); const. inlineoverridevirtual . Get the potential energy associated to this ForceField.; Used to estimate the total energy of the system by some post-stabilization techniques.; This method must be implemented by the component, and is usually called by the generic ForceField::getPotentialEnergy() method. ; Implements sofa::core::behavior::PairInteractionForceField< DataTypes >. ◆ getSprings(). template<class DataTypes > . sofa::type::vector<Spring>* sofa::component::solidmechanics::spring::FrameSpringForceField< DataTypes >::getSprings ; (; ). inline . ◆ init(). template<class DataTypes > . void sofa::component::solidmechanics::spring::FrameSpringForceField< DataTypes >::init ; (; void ; ). overridevirtual . Initialization method called at graph creation and modification, during top-down traversal. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ SOFA_CLASS(). template<class DataTypes > . sofa::component::solidmechanics::spring::FrameSpringForceField< DataTypes >::SOFA_CLASS ; (; SOFA_TEMPLATE(FrameSpringForceField< DataTypes >, DataTypes) ; , . SOFA_TEMPLATE(core::behavior::PairInteractionForceField, Da",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_frame_spring_force_field.html:28956,energy,energy,28956,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_frame_spring_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_frame_spring_force_field.html,1,['energy'],['energy']
Energy Efficiency,"SpringForceField< DataTypes >::draw ; (; const core::visual::VisualParams * ; ). overridevirtual . Render internal data of this object, for debugging purposes. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ getObject1(). template<class DataTypes > . core::behavior::MechanicalState<DataTypes>* sofa::component::solidmechanics::spring::JointSpringForceField< DataTypes >::getObject1 ; (; ). inline . ◆ getObject2(). template<class DataTypes > . core::behavior::MechanicalState<DataTypes>* sofa::component::solidmechanics::spring::JointSpringForceField< DataTypes >::getObject2 ; (; ). inline . ◆ getPotentialEnergy(). template<class DataTypes > . SReal sofa::component::solidmechanics::spring::JointSpringForceField< DataTypes >::getPotentialEnergy ; (; const core::MechanicalParams * ; mparams, . const DataVecCoord & ; x1, . const DataVecCoord & ; x2 . ); const. inlineoverridevirtual . Get the potential energy associated to this ForceField.; Used to estimate the total energy of the system by some post-stabilization techniques.; This method must be implemented by the component, and is usually called by the generic ForceField::getPotentialEnergy() method. ; Implements sofa::core::behavior::PairInteractionForceField< DataTypes >. ◆ getSprings(). template<class DataTypes > . sofa::type::vector<Spring>* sofa::component::solidmechanics::spring::JointSpringForceField< DataTypes >::getSprings ; (; ). inline . ◆ init(). template<class DataTypes > . void sofa::component::solidmechanics::spring::JointSpringForceField< DataTypes >::init ; (; void ; ). overridevirtual . Initialization method called at graph creation and modification, during top-down traversal. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ projectTorsion(). template<class DataTypes > . void sofa::component::solidmechanics::spring::JointSpringForceField< DataTypes >::projectTorsion ; (; Spring & ; spring). protected . ◆ SOFA_CLASS(). template<class DataTypes > . sofa::component::solidmechanics::spr",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_joint_spring_force_field.html:32214,energy,energy,32214,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_joint_spring_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_joint_spring_force_field.html,1,['energy'],['energy']
Energy Efficiency,"String(). RGBAColor sofa::type::RGBAColor::fromString ; (; const std::string & ; str). static . ◆ fromVec4() [1/4]. static RGBAColor sofa::type::RGBAColor::fromVec4 ; (; const type::fixed_array< double, 4 > & ; color). staticdelete . ◆ fromVec4() [2/4]. static RGBAColor sofa::type::RGBAColor::fromVec4 ; (; const type::fixed_array< float, 4 > & ; color). staticdelete . ◆ fromVec4() [3/4]. static RGBAColor sofa::type::RGBAColor::fromVec4 ; (; const Vec4d & ; color). staticdelete . ◆ fromVec4() [4/4]. static RGBAColor sofa::type::RGBAColor::fromVec4 ; (; const Vec4f & ; color). staticdelete . ◆ g() [1/3]. constexpr float& sofa::type::RGBAColor::g ; (; ). inlineconstexpr . ◆ g() [2/3]. constexpr const float& sofa::type::RGBAColor::g ; (; ); const. inlineconstexpr . ◆ g() [3/3]. constexpr void sofa::type::RGBAColor::g ; (; const float ; g). inlineconstexpr . ◆ gray(). constexpr const RGBAColor & sofa::type::RGBAColor::gray ; (; ). staticconstexpr . ◆ green(). constexpr const RGBAColor & sofa::type::RGBAColor::green ; (; ). staticconstexpr . ◆ lighten(). RGBAColor sofa::type::RGBAColor::lighten ; (; const RGBAColor & ; in, . const SReal ; factor . ). static . enlight a color by a given factor. . ◆ lightgray(). constexpr const RGBAColor & sofa::type::RGBAColor::lightgray ; (; ). staticconstexpr . ◆ magenta(). constexpr const RGBAColor & sofa::type::RGBAColor::magenta ; (; ). staticconstexpr . ◆ operator!=(). bool sofa::type::RGBAColor::operator!= ; (; const RGBAColor & ; b); const. inline . ◆ operator*(). RGBAColor sofa::type::RGBAColor::operator* ; (; float ; f); const. ◆ operator<(). bool sofa::type::RGBAColor::operator< ; (; const RGBAColor & ; b); const. inline . ◆ operator==(). bool sofa::type::RGBAColor::operator== ; (; const RGBAColor & ; b); const. inline . ◆ operator[]() [1/2]. constexpr float& sofa::type::RGBAColor::operator[] ; (; std::size_t ; i). inlineconstexpr . ◆ operator[]() [2/2]. constexpr const float& sofa::type::RGBAColor::operator[] ; (; std::size_t ; ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_r_g_b_a_color.html:8123,green,green,8123,api/master/sofa/html/classsofa_1_1type_1_1_r_g_b_a_color.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_r_g_b_a_color.html,1,['green'],['green']
Energy Efficiency,"Topology. More...;  ; void updateTopologicalMappingTopDown () override;  Translates the TopologyChange objects from the source to the target. More...;  ; Index getFromIndex (Index ind) override;  ; bool checkTopologies () override;  Method to check the topology mapping maps regarding the upper topology. More...;  ;  Public Member Functions inherited from sofa::core::topology::TopologicalMapping;  SOFA_ABSTRACT_CLASS (TopologicalMapping, objectmodel::BaseObject);  ; virtual void setTopologies (In *from, Out *to);  Specify the input and output models. More...;  ; void setPathInputObject (const std::string &o);  Set the path to the objects mapped in the scene graph. More...;  ; void setPathOutputObject (const std::string &o);  ; In * getFrom ();  Accessor to the INPUT topology of the TopologicalMapping : More...;  ; Out * getTo ();  Accessor to the OUTPUT topology of the TopologicalMapping : More...;  ; virtual void updateTopologicalMappingBottomUp ();  Method called at each topological changes propagation which comes from the OUTPUT topology to adapt the INPUT topology : More...;  ; virtual bool propagateFromInputToOutputModel ();  Return true if this mapping is able to propagate topological changes from input to output model. More...;  ; virtual bool propagateFromOutputToInputModel ();  Return true if this mapping is able to propagate topological changes from output to input model. More...;  ; virtual bool isTheOutputTopologySubdividingTheInputOne ();  return true if the output topology subdivide the input one. (the topology uses the Loc2GlobVec/Glob2LocMap/In2OutMap structs and share the same DOFs) More...;  ; const std::map< Index, Index > & getGlob2LocMap ();  Accessor to index maps : More...;  ; virtual Index getGlobIndex (Index ind);  ; void dumpGlob2LocMap ();  ; void dumpLoc2GlobVec ();  ; virtual void getFromIndex (type::vector< Index > &, const Index) const;  ; const std::map< Index, sofa::type::vector< Index > > & getIn2OutMap ();  ;  Public Member Function",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1mapping_1_1_tetra2_triangle_topological_mapping.html:3862,adapt,adapt,3862,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1mapping_1_1_tetra2_triangle_topological_mapping.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1mapping_1_1_tetra2_triangle_topological_mapping.html,1,['adapt'],['adapt']
Energy Efficiency,"TypeInfo< TDataType >::size ; (; ). inlinestatic . ◆ size() [2/2]. template<class TDataType > . static sofa::Size sofa::defaulttype::IncompleteTypeInfo< TDataType >::size ; (; const DataType & ; ). inlinestatic . Enum details. ◆ anonymous enum. template<class TDataType > . anonymous enum. EnumeratorValidInfo 1 if this type has valid infos . ◆ anonymous enum. template<class TDataType > . anonymous enum. EnumeratorFixedSize 1 if this type has a fixed size . ◆ anonymous enum. template<class TDataType > . anonymous enum. EnumeratorZeroConstructor 1 if the constructor is equivalent to setting memory to 0 . ◆ anonymous enum. template<class TDataType > . anonymous enum. EnumeratorSimpleCopy 1 if copying the data can be done with a memcpy . ◆ anonymous enum. template<class TDataType > . anonymous enum. EnumeratorSimpleLayout 1 if the layout in memory is simply N values of the same base type . ◆ anonymous enum. template<class TDataType > . anonymous enum. EnumeratorInteger 1 if this type uses integer values . ◆ anonymous enum. template<class TDataType > . anonymous enum. EnumeratorScalar 1 if this type uses scalar values . ◆ anonymous enum. template<class TDataType > . anonymous enum. EnumeratorText 1 if this type uses text values . ◆ anonymous enum. template<class TDataType > . anonymous enum. EnumeratorCopyOnWrite 1 if this type uses copy-on-write. The memory is shared with its source Data while only the source is changing (and the source modifications are then visible in the current Data). As soon as modifications are applied to the current Data, it will allocate its own value, and no longer shares memory with the source. . ◆ anonymous enum. template<class TDataType > . anonymous enum. EnumeratorContainer 1 if this type is a container . ◆ anonymous enum. template<class TDataType > . anonymous enum. EnumeratorSize largest known fixed size for this type, as returned by size() . sofadefaulttypeIncompleteTypeInfo; Generated on Mon Nov 11 2024 03:18:44 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1defaulttype_1_1_incomplete_type_info.html:4651,allocate,allocate,4651,api/master/sofa/html/structsofa_1_1defaulttype_1_1_incomplete_type_info.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1defaulttype_1_1_incomplete_type_info.html,1,['allocate'],['allocate']
Energy Efficiency,"UBLELINK > l_master;  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  ;  Protected Attributes inherited from sofa::core::behavior::SingleStateAccessor< DataTypes >; SingleLink< SingleStateAccessor< DataTypes >, MechanicalState< DataTypes >, BaseLink::FLAG_STRONGLINK > mstate;  . Public Member Functions;  SOFA_CLASS2 (SOFA_TEMPLATE(Mass, DataTypes), SOFA_TEMPLATE(ForceField, DataTypes), BaseMass);  ; void initGnuplot (const std::string path) override;  initialization to export kinetic and potential energy to gnuplot files format More...;  ; void exportGnuplot (const MechanicalParams *mparams, SReal time) override;  export kinetic and potential energy state at ""time"" to a gnuplot file More...;  ; void addGravityToV (const MechanicalParams *mparams, MultiVecDerivId) override;  perform v += dt*g operation. Used if mass wants to added G separately from the other forces to v. More...;  ; virtual void addGravityToV (const MechanicalParams *, DataVecDeriv &);  ; SReal getElementMass (sofa::Index) const override;  recover the mass of an element More...;  ; void getElementMass (sofa::Index index, linearalgebra::BaseMatrix *m) const override;  Get the matrix relative to the DOF at index. More...;  ; bool insertInNode (objectmodel::BaseNode *node) override;  ; bool removeInNode (objectmodel::BaseNode *node) override;  ; Vector operations; $ f += factor M dx $; This method retrieves the force and dx vector and call the internal addMDx(const MechanicalParams*, DataVecDeriv&, const DataVecDeriv&, SReal) method implemented by the component. . void addMDx (const MechanicalParams *mparams, MultiVecDerivId fid,",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_mass.html:2552,energy,energy,2552,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_mass.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_mass.html,1,['energy'],['energy']
Energy Efficiency,"VecId ; a, . AllMultiVecId ; b, . SReal ; f = 1.0 . ). inline . v = a+b*f . ◆ eq() [2/3]. template<VecType vtype> . void sofa::core::behavior::TMultiVec< vtype >::eq ; (; MyMultiVecId ; a). inline . v = a . ◆ eq() [3/3]. template<VecType vtype> . void sofa::core::behavior::TMultiVec< vtype >::eq ; (; MyMultiVecId ; a, . SReal ; f . ). inline . v = a*f . ◆ id() [1/2]. template<VecType vtype> . MyMultiVecId& sofa::core::behavior::TMultiVec< vtype >::id ; (; ). inline . ◆ id() [2/2]. template<VecType vtype> . const MyMultiVecId& sofa::core::behavior::TMultiVec< vtype >::id ; (; ); const. inline . ◆ norm() [1/2]. template<VecType vtype> . SReal sofa::core::behavior::TMultiVec< vtype >::norm ; (; ). inline . Returnssqrt(v.v) . ◆ norm() [2/2]. template<VecType vtype> . SReal sofa::core::behavior::TMultiVec< vtype >::norm ; (; unsigned ; l). inline . Compute the norm of a vector. The type of norm is set by parameter l. Use 0 for the infinite norm. Note that the 2-norm is more efficiently computed using the square root of the dot product. . ◆ operator AllMultiVecId(). template<VecType vtype> . sofa::core::behavior::TMultiVec< vtype >::operator AllMultiVecId ; (; ). inline . ◆ operator ConstAllMultiVecId(). template<VecType vtype> . sofa::core::behavior::TMultiVec< vtype >::operator ConstAllMultiVecId ; (; ). inline . ◆ operator ConstMyMultiVecId(). template<VecType vtype> . sofa::core::behavior::TMultiVec< vtype >::operator ConstMyMultiVecId ; (; ). inline . ◆ operator MyMultiVecId(). template<VecType vtype> . sofa::core::behavior::TMultiVec< vtype >::operator MyMultiVecId ; (; ). inline . Automatic conversion to the underlying VecId. . ◆ operator*(). template<VecType vtype> . SReal sofa::core::behavior::TMultiVec< vtype >::operator* ; (; MyMultiVecId ; a). inline . return the scalar product dot(v,a) . ◆ operator*=(). template<VecType vtype> . void sofa::core::behavior::TMultiVec< vtype >::operator*= ; (; SReal ; f). inline . v *= f . ◆ operator+=(). template<VecType vtype>",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_t_multi_vec.html:5513,efficient,efficiently,5513,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_t_multi_vec.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_t_multi_vec.html,1,['efficient'],['efficiently']
Energy Efficiency,"a::gl::Axis::draw ; (; const double * ; mat, . const type::Vec3 & ; length, . const type::Vec4f & ; colorX = type::Vec4f(1, 0, 0, 1), . const type::Vec4f & ; colorY = type::Vec4f(0, 1, 0, 1), . const type::Vec4f & ; colorZ = type::Vec4f(0, 0, 1, 1) . ). delete . ◆ draw() [3/16]. void sofa::gl::Axis::draw ; (; const double * ; mat, . SReal ; length = 1.0_sreal, . const type::RGBAColor & ; colorX = type::RGBAColor::red(), . const type::RGBAColor & ; colorY = type::RGBAColor::green(), . const type::RGBAColor & ; colorZ = type::RGBAColor::red() . ). static . ◆ draw() [4/16]. static void sofa::gl::Axis::draw ; (; const double * ; mat, . SReal ; length = 1.0_sreal, . const type::Vec4f & ; colorX = type::Vec4f(1, 0, 0, 1), . const type::Vec4f & ; colorY = type::Vec4f(0, 1, 0, 1), . const type::Vec4f & ; colorZ = type::Vec4f(0, 0, 1, 1) . ). staticdelete . ◆ draw() [5/16]. void sofa::gl::Axis::draw ; (; const type::RGBAColor & ; colorX = type::RGBAColor::red(), . const type::RGBAColor & ; colorY = type::RGBAColor::green(), . const type::RGBAColor & ; colorZ = type::RGBAColor::red() . ). ◆ draw() [6/16]. void sofa::gl::Axis::draw ; (; const type::Vec3 & ; center, . const double ; orient[4][4], . const type::Vec3 & ; length, . const type::RGBAColor & ; colorX = type::RGBAColor::red(), . const type::RGBAColor & ; colorY = type::RGBAColor::green(), . const type::RGBAColor & ; colorZ = type::RGBAColor::red() . ). static . ◆ draw() [7/16]. static void sofa::gl::Axis::draw ; (; const type::Vec3 & ; center, . const double ; orient[4][4], . const type::Vec3 & ; length, . const type::Vec4f & ; colorX = type::Vec4f(1, 0, 0, 1), . const type::Vec4f & ; colorY = type::Vec4f(0, 1, 0, 1), . const type::Vec4f & ; colorZ = type::Vec4f(0, 0, 1, 1) . ). staticdelete . ◆ draw() [8/16]. void sofa::gl::Axis::draw ; (; const type::Vec3 & ; center, . const double ; orient[4][4], . SReal ; length = 1.0_sreal, . const type::RGBAColor & ; colorX = type::RGBAColor::red(), . const type::RGBAColor & ; co",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1_axis.html:7198,green,green,7198,api/master/sofa/html/classsofa_1_1gl_1_1_axis.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1_axis.html,1,['green'],['green']
Energy Efficiency,"a< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  . Protected Attributes; core::behavior::MechanicalState< DataTypes > * mstate;  ; sofa::core::objectmodel::RenamedData< bool > computeNormals;  ; sofa::core::objectmodel::RenamedData< bool > m_displayFreePosition;  ; Data< bool > d_computeNormals;  activate computation of normal vectors (required for some collision detection algorithms) More...;  ; VecDeriv normals;  ; Data< bool > d_displayFreePosition;  Display Collision Model Points free position(in green) More...;  ; SingleLink< PointCollisionModel< DataTypes >, sofa::core::topology::BaseMeshTopology, BaseLink::FLAG_STOREPATH|BaseLink::FLAG_STRONGLINK > l_topology;  Link to be set to the topology container in the component graph. More...;  ;  Protected Attributes inherited from sofa::core::CollisionModel; Data< bool > bActive;  ; Data< bool > bMoving;  flag indicating if this object is changing position between iterations More...;  ; Data< bool > bSimulated;  flag indicating if this object is controlled by a simulation More...;  ; Data< bool > bSelfCollision;  flag indication if the object can self collide More...;  ; Data< SReal > proximity;  Distance to the actual (visual) surface. More...;  ; Data< SReal > contactStiffness;  Default contact stiffness. More...;  ; Data< SReal > contactFriction;  Default contact friction (damping) coefficient. More...;  ; Data< SReal > contactRestitution;  Default contact coefficient of restitutio",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_point_collision_model.html:2451,green,green,2451,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_point_collision_model.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_point_collision_model.html,1,['green'],['green']
Energy Efficiency,ader * getExporterEntryFileName (std::string filename);  Get an exporter entry given a file name. More...;  ; SceneLoader * addEntry (SceneLoader *loader);  Add a scene loader. More...;  ; SceneLoaderList * getEntries ();  Get the list of loaders. More...;  ; std::vector< std::string > extensions ();  . Static Public Member Functions; static SceneLoaderFactory * getInstance ();  Get the ObjectFactory singleton instance. More...;  . Attribute details. ◆ registry. SceneLoaderList sofa::simulation::SceneLoaderFactory::registry. protected . Main class registry. . Constructor details. ◆ ~SceneLoaderFactory(). sofa::simulation::SceneLoaderFactory::~SceneLoaderFactory ; (; ). Function details. ◆ addEntry(). SceneLoader * sofa::simulation::SceneLoaderFactory::addEntry ; (; SceneLoader * ; loader). Add a scene loader. . ◆ extensions(). std::vector< std::string > sofa::simulation::SceneLoaderFactory::extensions ; (; ). Get the list of supported extension. It returns a vector of string but it is RVO optimized so the overhead is reduced. . ◆ getEntries(). SceneLoaderList* sofa::simulation::SceneLoaderFactory::getEntries ; (; ). inline . Get the list of loaders. . ◆ getEntryFileExtension(). SceneLoader * sofa::simulation::SceneLoaderFactory::getEntryFileExtension ; (; std::string ; extension). Get an entry given a file extension. . ◆ getEntryFileName(). SceneLoader * sofa::simulation::SceneLoaderFactory::getEntryFileName ; (; std::string ; filename). Get an entry given a file name. ; Get an entry given a file extension. . ◆ getExporterEntryFileExtension(). SceneLoader * sofa::simulation::SceneLoaderFactory::getExporterEntryFileExtension ; (; std::string ; extension). Get an exporter entry given a file extension. . ◆ getExporterEntryFileName(). SceneLoader * sofa::simulation::SceneLoaderFactory::getExporterEntryFileName ; (; std::string ; filename). Get an exporter entry given a file name. . ◆ getInstance(). SceneLoaderFactory * sofa::simulation::SceneLoaderFactory::getInstance ;,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_factory.html:1850,reduce,reduced,1850,api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_factory.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_factory.html,1,['reduce'],['reduced']
Energy Efficiency,"alParams *, const DataVecDeriv &) const override;  < vMv/2 using dof->getV() override More...;  ; SReal getPotentialEnergy (const core::MechanicalParams *, const DataVecCoord &) const override;  ; SReal getPotentialEnergy (const core::MechanicalParams *) const override;  Mgx. More...;  ; void addDForce (const core::MechanicalParams *mparams, DataVecDeriv &df, const DataVecDeriv &dx) override;  ; void addGravityToV (const core::MechanicalParams *mparams, DataVecDeriv &d_v) override;  ; SReal getElementMass (Index index) const override;  Get the mass relative to the DOF at index. More...;  ; void draw (const core::visual::VisualParams *vparams) override;  Render internal data of this object, for debugging purposes. More...;  ; virtual void initTextures ();  ; virtual void update ();  ; void setDensity (Real d);  ; Real getDensity ();  ; void addKToMatrix (sofa::linearalgebra::BaseMatrix *matrix, SReal kFact, unsigned int &offset) override;  ;  Public Member Functions inherited from sofa::core::behavior::Mass< DataTypes >;  SOFA_CLASS2 (SOFA_TEMPLATE(Mass, DataTypes), SOFA_TEMPLATE(ForceField, DataTypes), BaseMass);  ; void initGnuplot (const std::string path) override;  initialization to export kinetic and potential energy to gnuplot files format More...;  ; void exportGnuplot (const MechanicalParams *mparams, SReal time) override;  export kinetic and potential energy state at ""time"" to a gnuplot file More...;  ; void addGravityToV (const MechanicalParams *mparams, MultiVecDerivId) override;  perform v += dt*g operation. Used if mass wants to added G separately from the other forces to v. More...;  ; SReal getElementMass (sofa::Index) const override;  recover the mass of an element More...;  ; void getElementMass (sofa::Index index, linearalgebra::BaseMatrix *m) const override;  Get the matrix relative to the DOF at index. More...;  ; bool insertInNode (objectmodel::BaseNode *node) override;  ; bool removeInNode (objectmodel::BaseNode *node) override;  ; void addMDx (",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_hexahedron_f_e_m_force_field_and_mass.html:6497,energy,energy,6497,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_hexahedron_f_e_m_force_field_and_mass.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_hexahedron_f_e_m_force_field_and_mass.html,1,['energy'],['energy']
Energy Efficiency,"al_LD.h>; A generic monomial with N variables of type Real. A monomial is one term of a polynomial. ; More...; Detailed Description; template<typename Real, unsigned int N>; class sofa::helper::Monomial_LD< Real, N >; A generic monomial with N variables of type Real. A monomial is one term of a polynomial. ; Todo this first version of polynomial is a linear presentation. This presentation is efficient for arithmetic operator like +,-,*,/ and derivative. But is not optimized for the evaluating (comparing to the recurrent presentation). . Public Attributes; Real coef;  ; sofa::type::Vec< N, int > powers;  . Protected Attributes; sofa::type::Vec< N, std::string > variables;  . Public Member Functions;  Monomial_LD ();  ;  Monomial_LD (Real,...);  ;  Monomial_LD (const Monomial_LD< Real, N > &a);  ; Monomial_LD< Real, N > & operator= (const Monomial_LD< Real, N > &b);  ; void SetCoef (const Real &m_coef);  Setting of Monomial_LD. More...;  ; void SetPower (int numbervar, int powervalue);  ; int degree ();  Return the total degree of monomial. More...;  ; bool operator== (const Monomial_LD< Real, N > &b) const;  Logical operators. More...;  ; bool operator!= (const Monomial_LD< Real, N > &b) const;  ; bool isSamePowers (const Monomial_LD< Real, N > &b) const;  ; bool isnullptr () const;  ; Monomial_LD< Real, N > & operator*= (const Real &alpha);  Mathematical operators. More...;  ; Monomial_LD< Real, N > & operator/= (const Real &alpha);  ; Monomial_LD< Real, N > & operator+= (const Monomial_LD< Real, N > &b);  ; Monomial_LD< Real, N > & operator-= (const Monomial_LD< Real, N > &b);  ; Monomial_LD< Real, N > & operator*= (const Monomial_LD< Real, N > &b);  ; Monomial_LD< Real, N > operator+ () const;  ; Monomial_LD< Real, N > operator- () const;  ; Monomial_LD< Real, N > operator* (const Real &alpha);  ; Monomial_LD< Real, N > operator/ (const Real &alpha);  ; Monomial_LD< Real, N > operator+ (const Monomial_LD< Real, N > &a);  ; Monomial_LD< Real, N > operator- (const Mo",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_monomial___l_d.html:1323,power,powervalue,1323,api/master/sofa/html/classsofa_1_1helper_1_1_monomial___l_d.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_monomial___l_d.html,1,['power'],['powervalue']
Energy Efficiency,"arameters< DataTypes > & ; , . Matrix6 & ;  . ). inlinevirtual . Reimplemented in sofa::component::solidmechanics::fem::hyperelastic::material::VerondaWestman< DataTypes >, sofa::component::solidmechanics::fem::hyperelastic::material::StableNeoHookean< DataTypes >, sofa::component::solidmechanics::fem::hyperelastic::material::Ogden< DataTypes >, sofa::component::solidmechanics::fem::hyperelastic::material::NeoHookean< DataTypes >, sofa::component::solidmechanics::fem::hyperelastic::material::MooneyRivlin< DataTypes >, sofa::component::solidmechanics::fem::hyperelastic::material::Costa< DataTypes >, sofa::component::solidmechanics::fem::hyperelastic::material::BoyceAndArruda< DataTypes >, and sofa::component::solidmechanics::fem::hyperelastic::material::STVenantKirchhoff< DataTypes >. ◆ getStrainEnergy(). template<class DataTypes > . virtual Real sofa::component::solidmechanics::fem::hyperelastic::material::HyperelasticMaterial< DataTypes >::getStrainEnergy ; (; StrainInformation< DataTypes > * ; , . const MaterialParameters< DataTypes > & ;  . ). inlinevirtual . returns the strain energy of the current configuration ; Reimplemented in sofa::component::solidmechanics::fem::hyperelastic::material::VerondaWestman< DataTypes >, sofa::component::solidmechanics::fem::hyperelastic::material::STVenantKirchhoff< DataTypes >, sofa::component::solidmechanics::fem::hyperelastic::material::StableNeoHookean< DataTypes >, sofa::component::solidmechanics::fem::hyperelastic::material::Ogden< DataTypes >, sofa::component::solidmechanics::fem::hyperelastic::material::NeoHookean< DataTypes >, sofa::component::solidmechanics::fem::hyperelastic::material::MooneyRivlin< DataTypes >, sofa::component::solidmechanics::fem::hyperelastic::material::Costa< DataTypes >, and sofa::component::solidmechanics::fem::hyperelastic::material::BoyceAndArruda< DataTypes >. sofacomponentsolidmechanicsfemhyperelasticmaterialHyperelasticMaterial; Generated on Mon Nov 11 2024 03:02:25 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_hyperelastic_material.html:5396,energy,energy,5396,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_hyperelastic_material.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_hyperelastic_material.html,1,['energy'],['energy']
Energy Efficiency,"are/sofa/examples"") }, { { Utils::getSofaPathTo(""etc/sofa.ini""), {""SHARE_DIR"", ""EXAMPLES_DIR""} } });  Default repository. More...;  . Typedef Documentation. ◆ ListOfFiles. typedef vector<string> sofa::helper::system::ListOfFiles. ◆ ListOfListeners. typedef vector<FileEventListener*> sofa::helper::system::ListOfListeners. ◆ ListOfMonitors. typedef list< MonitoredFile > sofa::helper::system::ListOfMonitors. Function Documentation. ◆ addAFileListenerInDict(). void sofa::helper::system::addAFileListenerInDict ; (; string ; pathfilename, . FileEventListener * ; listener . ). ◆ catch_alarm(). void sofa::helper::system::catch_alarm ; (; int ; sig). ◆ cleanPath(). std::string sofa::helper::system::cleanPath ; (; const std::string & ; path). ◆ eventmaskToString(). const char * sofa::helper::system::eventmaskToString ; (; int ; evtmask). ◆ FileMonitor_init(). int sofa::helper::system::FileMonitor_init ; (; ). Variable Documentation. ◆ DataRepository. SOFA_HELPER_API FileRepository sofa::helper::system::DataRepository ; (; ""SOFA_DATA_PATH"" ; , . { Utils::getSofaPathTo(""share/sofa""), Utils::getSofaPathTo(""share/sofa/examples"") } ; , . { { Utils::getSofaPathTo(""etc/sofa.ini""), {""SHARE_DIR"", ""EXAMPLES_DIR""} } } ;  . ). Default repository. . ◆ dir2files. map<string, ListOfFiles> sofa::helper::system::dir2files. ◆ fd2fn. map<int, string> sofa::helper::system::fd2fn. ◆ file2listener. map<string, ListOfListeners> sofa::helper::system::file2listener. ◆ filemonitor_inotifyfd. int sofa::helper::system::filemonitor_inotifyfd =-1. ◆ keep_going. volatile sig_atomic_t sofa::helper::system::keep_going = 1. ◆ monitors. ListOfMonitors sofa::helper::system::monitors. ◆ PluginRepository. SOFA_HELPER_API FileRepository sofa::helper::system::PluginRepository ; (; ""SOFA_PLUGIN_PATH"" ; , . { Utils::getSofaPathTo(""plugins""), Utils::getSofaPathTo(""collections""), Utils::getSofaPathTo(""lib""), } ;  . ). Default repository. . sofahelpersystem; Generated on Mon Nov 11 2024 03:31:03 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1system.html:3374,monitor,monitors,3374,api/master/sofa/html/namespacesofa_1_1helper_1_1system.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1system.html,2,['monitor'],['monitors']
Energy Efficiency,"aseMatrix from the state stored in a local vector. ; Implemented in sofa::component::statecontainer::MechanicalObject< DataTypes >, and sofa::component::statecontainer::MechanicalObject< T >. ◆ copyToBaseVector(). virtual void sofa::core::behavior::BaseMechanicalState::copyToBaseVector ; (; linearalgebra::BaseVector * ; dest, . ConstVecId ; src, . unsigned int & ; offset . ). pure virtual . Copy data to a global BaseVector from the state stored in a local vector. ; Parameters. offsetthe offset in the BaseVector where the scalar values will be used. It will be updated to the first scalar value after the ones used by this operation when this method returns . Implemented in sofa::component::statecontainer::MechanicalObject< DataTypes >, and sofa::component::statecontainer::MechanicalObject< T >. ◆ copyToBuffer(). virtual void sofa::core::behavior::BaseMechanicalState::copyToBuffer ; (; SReal * ; dst, . ConstVecId ; src, . unsigned int ; n . ); const. pure virtual . Copy data to an external, user-allocated buffer. ; Exact element count must be provided for consistency checks. . ◆ endIntegration(). virtual void sofa::core::behavior::BaseMechanicalState::endIntegration ; (; const ExecParams * ; params, . SReal ;  . ). inlinevirtual . Called at the end of each integration step. ; Reimplemented in sofa::component::statecontainer::MechanicalObject< DataTypes >, and sofa::component::statecontainer::MechanicalObject< T >. ◆ exportGnuplot(). virtual void sofa::core::behavior::BaseMechanicalState::exportGnuplot ; (; SReal ; ). inlinevirtual . Reimplemented in sofa::component::statecontainer::MechanicalObject< DataTypes >, and sofa::component::statecontainer::MechanicalObject< T >. ◆ getConstraintJacobian(). virtual void sofa::core::behavior::BaseMechanicalState::getConstraintJacobian ; (; const ConstraintParams * ; params, . sofa::linearalgebra::BaseMatrix * ; J, . unsigned int & ; off . ). pure virtual . build the jacobian of the constraint in a baseMatrix ; Implemented in sofa:",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_mechanical_state.html:31934,allocate,allocated,31934,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_mechanical_state.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_mechanical_state.html,1,['allocate'],['allocated']
Energy Efficiency,"ass TDataTypes > . template<class T > . static T::SPtr sofa::core::behavior::PairInteractionForceField< TDataTypes >::create ; (; T * ; , . core::objectmodel::BaseContext * ; context, . core::objectmodel::BaseObjectDescription * ; arg . ). inlinestatic . Construction method called by ObjectFactory. . ◆ getPathObject1(). template<class TDataTypes > . std::string sofa::core::behavior::PairInteractionForceField< TDataTypes >::getPathObject1 ; (; ); const. inline . Retrieve the Object1 path. . ◆ getPathObject2(). template<class TDataTypes > . std::string sofa::core::behavior::PairInteractionForceField< TDataTypes >::getPathObject2 ; (; ); const. inline . Retrieve the Object2 path. . ◆ getPotentialEnergy() [1/2]. template<class DataTypes > . SReal sofa::core::behavior::PairInteractionForceField< DataTypes >::getPotentialEnergy ; (; const MechanicalParams * ; mparams); const. overridevirtual . Get the potential energy associated to this ForceField.; Used to estimate the total energy of the system by some post-stabilization techniques.; This method retrieves the x vector from the MechanicalState and call the internal getPotentialEnergy(const VecCoord&,const VecCoord&) method implemented by the component. ; Implements sofa::core::behavior::BaseForceField. ◆ getPotentialEnergy() [2/2]. template<class TDataTypes > . virtual SReal sofa::core::behavior::PairInteractionForceField< TDataTypes >::getPotentialEnergy ; (; const MechanicalParams * ; mparams, . const DataVecCoord & ; x1, . const DataVecCoord & ; x2 . ); const. pure virtual . Get the potential energy associated to this ForceField.; Used to estimate the total energy of the system by some post-stabilization techniques.; This method must be implemented by the component, and is usually called by the generic ForceField::getPotentialEnergy() method. ; Implemented in sofa::component::solidmechanics::spring::RepulsiveSpringForceField< DataTypes >, sofa::component::collision::response::contact::PenalityContactForceField< DataTy",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_pair_interaction_force_field.html:26569,energy,energy,26569,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_pair_interaction_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_pair_interaction_force_field.html,1,['energy'],['energy']
Energy Efficiency,"atWidget ();  ; void stepImpl () override;  the only function that should be overloaded More...;  ;  Public Member Functions inherited from sofa::gui::qt::QGraphStatWidget;  QGraphStatWidget (QWidget *parent, simulation::Node *node, const QString &title, unsigned numberOfCurves, int bufferSize);  ; virtual ~QGraphStatWidget ();  ; virtual void step () final;  Main method called to update the graph. More...;  . Additional Inherited Members;  Protected Attributes inherited from sofa::gui::qt::QGraphStatWidget; simulation::Node * m_node;  pointer to the node monitored More...;  ; int m_bufferSize;  size of the buffers to stored More...;  ; QChart * m_chart;  Pointer to the chart Data. More...;  ; std::vector< QLineSeries * > m_curves;  vector of series to be plotted More...;  ; QValueAxis * m_axisX;  x axis pointer More...;  ; QValueAxis * m_axisY;  y axis pointer More...;  ; SReal m_yMin;  min y axis value stored More...;  ; SReal m_yMax;  max y axis value stored More...;  ; SReal m_lastTime;  last timestep monitored More...;  ; int m_cptStep;  step counter monitored More...;  ;  Protected Member Functions inherited from sofa::gui::qt::QGraphStatWidget; void setCurve (unsigned index, const QString &name, const QColor &color);  set the index-th curve (index must be < _numberOfCurves) More...;  ; void updateYAxisBounds (SReal value);  Method to update Y axis scale. More...;  ; void flushSeries ();  flush data from series not anymore displayed More...;  . Constructor details. ◆ QEnergyStatWidget(). sofa::gui::qt::QEnergyStatWidget::QEnergyStatWidget ; (; QWidget * ; parent, . simulation::Node * ; node . ). ◆ ~QEnergyStatWidget(). sofa::gui::qt::QEnergyStatWidget::~QEnergyStatWidget ; (; ). Function details. ◆ stepImpl(). void sofa::gui::qt::QEnergyStatWidget::stepImpl ; (; ). overridevirtual . the only function that should be overloaded ; Implements sofa::gui::qt::QGraphStatWidget. sofaguiqtQEnergyStatWidget; Generated on Mon Nov 11 2024 03:23:43 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_energy_stat_widget.html:1460,monitor,monitored,1460,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_energy_stat_widget.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_energy_stat_widget.html,2,['monitor'],['monitored']
Energy Efficiency,"ation-issue; ; SOFA - Topic: Model Order Reduction Phase 3 (animation issue). /model-order-reduction-problem-with-cglinearsolver; ; SOFA - Topic: Model Order reduction problem with CGLinearSolver. /modification-of-forcefields-positions; ; SOFA - Topic: Modification of forcefields’ positions. /modify-fields-of-a-node-components-such-as-translationrotation-from-c-api; ; SOFA - Topic: [SOLVED] Modify fields of a node components (such as translation/rotation) from C++ API. /modifying-the-trunk-example; ; SOFA - Topic: [SOLVED] Modifying The Trunk Example. /modify-origin-and-orientation-of-a-meshoglmodel-to-be-the-same-as-another-mesh; ; SOFA - Topic: [SOLVED] Modify origin and orientation of a mesh(oglModel) to be the same as another mesh. /modulenotfounderror-sofa-helper-with-binary-install-v21-06-02; ; SOFA - Topic: ModuleNotFoundError … ‘Sofa.Helper’ with Binary install v21.06.02. /modules-attributes; ; SOFA - Topic: [SOLVED] Modules, attributes. /monitor-not-exporting-data; ; SOFA - Topic: [SOLVED] Monitor not exporting data. /mounting-a-rigid-object-to-a-single-point; ; SOFA - Topic: Mounting a rigid object to a single point. /movement-restriction-at-some-points-of-an-object; ; SOFA - Topic: [SOLVED] Movement restriction at some points of an object. /moving-a-model-with-key-controls; ; SOFA - Topic: [SOLVED] Moving a model with key controls. /moving-an-object-by-keyboard; ; SOFA - Topic: [SOLVED] Moving an object by keyboard. /moving-the-starting-point-of-a-beam; ; SOFA - Topic: [SOLVED] Moving the starting point of a beam. /moving-to-github-discussions-lets-vote; ; SOFA - Topic: Moving to GitHub discussions –> let’s vote!. /multimaterial-soft-robotic-finger-simulation-issue; ; SOFA - Topic: Multimaterial soft robotic finger simulation issue. /multiple-errors-when-building-sofa-on-win7-vs2012; ; SOFA - Topic: [SOLVED] Multiple Errors when building SOFA on Win7, VS2012. /multiple-objects-in-a-obj-file; ; SOFA - Topic: Multiple objects in a .obj file. /multiple-tags-",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/index-wcopy.html:351033,monitor,monitor-not-exporting-data,351033,index-wcopy.html,https://www.sofa-framework.org,https://www.sofa-framework.org/index-wcopy.html,1,['monitor'],['monitor-not-exporting-data']
Energy Efficiency,"aulttype::MapMapSparseMatrix< T >::begin ; (; ); const. inline . ◆ clear(). template<class T > . void sofa::defaulttype::MapMapSparseMatrix< T >::clear ; (; ). inline . Removes every matrix elements. . ◆ empty(). template<class T > . bool sofa::defaulttype::MapMapSparseMatrix< T >::empty ; (; ); const. inline . Returnstrue if the matrix is empty . ◆ end() [1/2]. template<class T > . RowIterator sofa::defaulttype::MapMapSparseMatrix< T >::end ; (; ). inline . ◆ end() [2/2]. template<class T > . RowConstIterator sofa::defaulttype::MapMapSparseMatrix< T >::end ; (; ); const. inline . ◆ multTransposeBaseVector(). template<class T > . template<class VecDeriv > . void sofa::defaulttype::MapMapSparseMatrix< T >::multTransposeBaseVector ; (; VecDeriv & ; res, . const sofa::linearalgebra::BaseVector * ; lambda . ); const. inline . ◆ newLine(). template<class T > . RowIterator sofa::defaulttype::MapMapSparseMatrix< T >::newLine ; (; ). inline . ReturnsIterator on new allocated row Creates a new row in the sparse matrix with the last+1 key index . ◆ readLine(). template<class T > . RowConstIterator sofa::defaulttype::MapMapSparseMatrix< T >::readLine ; (; KeyType ; lIndex); const. inline . ReturnsConstant Iterator on specified row ; Parameters. lIndexrow index If lIndex row doesn't exist, returns end iterator . ◆ size(). template<class T > . std::size_t sofa::defaulttype::MapMapSparseMatrix< T >::size ; (; ); const. inline . Returnsthe number of rows . ◆ writeLine() [1/2]. template<class T > . RowIterator sofa::defaulttype::MapMapSparseMatrix< T >::writeLine ; (; KeyType ; lIndex). inline . ReturnsIterator on specified row ; Parameters. lIndexrow index If lIndex row doesn't exist, creates the line and returns an iterator on it . ◆ writeLine() [2/2]. template<class T > . std::pair< RowIterator, bool > sofa::defaulttype::MapMapSparseMatrix< T >::writeLine ; (; KeyType ; lIndex, . RowType ; row . ). inline . ReturnsPair of Iterator on specified row and boolean on true if insertio",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1defaulttype_1_1_map_map_sparse_matrix.html:3235,allocate,allocated,3235,api/master/sofa/html/classsofa_1_1defaulttype_1_1_map_map_sparse_matrix.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1defaulttype_1_1_map_map_sparse_matrix.html,1,['allocate'],['allocated']
Energy Efficiency,"ay()sofa::type::RGBAColorstatic; data() const noexceptsofa::type::RGBAColorinline; end() noexceptsofa::type::RGBAColorinline; end() const noexceptsofa::type::RGBAColorinline; fromFloat(float r, float g, float b, float a)sofa::type::RGBAColorstatic; fromHSVA(float h, float s, float v, float a)sofa::type::RGBAColorstatic; fromStdArray(const std::array< float, 4 > &color)sofa::type::RGBAColorstatic; fromStdArray(const std::array< double, 4 > &color)sofa::type::RGBAColorstatic; fromString(const std::string &str)sofa::type::RGBAColorstatic; fromVec4(const type::fixed_array< float, 4 > &color)=deletesofa::type::RGBAColorstatic; fromVec4(const type::fixed_array< double, 4 > &color)=deletesofa::type::RGBAColorstatic; fromVec4(const Vec4f &color)=deletesofa::type::RGBAColorstatic; fromVec4(const Vec4d &color)=deletesofa::type::RGBAColorstatic; g()sofa::type::RGBAColorinline; g() constsofa::type::RGBAColorinline; g(const float g)sofa::type::RGBAColorinline; gray()sofa::type::RGBAColorstatic; green()sofa::type::RGBAColorstatic; lighten(const RGBAColor &in, const SReal factor)sofa::type::RGBAColorstatic; lightgray()sofa::type::RGBAColorstatic; magenta()sofa::type::RGBAColorstatic; NumberOfComponentssofa::type::RGBAColorstatic; operator!=(const RGBAColor &b) constsofa::type::RGBAColorinline; operator*(float f) constsofa::type::RGBAColor; operator<(const RGBAColor &b) constsofa::type::RGBAColorinline; operator<<(std::ostream &i, const RGBAColor &t)sofa::type::RGBAColorfriend; operator==(const RGBAColor &b) constsofa::type::RGBAColorinline; operator>>(std::istream &i, RGBAColor &t)sofa::type::RGBAColorfriend; operator[](std::size_t i)sofa::type::RGBAColorinline; operator[](std::size_t i) constsofa::type::RGBAColorinline; r()sofa::type::RGBAColorinline; r() constsofa::type::RGBAColorinline; r(const float r)sofa::type::RGBAColorinline; read(const std::string &str, RGBAColor &color)sofa::type::RGBAColorstatic; red()sofa::type::RGBAColorstatic; RGBAColor()sofa::type::RGBAColorinline; ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_r_g_b_a_color-members.html:1895,green,green,1895,api/master/sofa/html/classsofa_1_1type_1_1_r_g_b_a_color-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_r_g_b_a_color-members.html,1,['green'],['green']
Energy Efficiency,"ber Functions |; Friends |; List of all members . sofa::core::objectmodel::AspectPool Class Reference . #include <AspectPool.h>; Detailed Description; This class is responsible for managing the pool of available aspects numbers. It is safe to use this class from several thread. . Public Member Functions;  AspectPool ();  ;  ~AspectPool ();  ; void setReleaseCallback (const std::function< void(int)> &callback);  ; AspectRef allocate ();  ; AspectRef getAspect (int id);  ; int nbAspects () const;  ; int getAspectCounter (int id) const;  . Protected Member Functions; void release (int id);  . Friends; class Aspect;  . Constructor details. ◆ AspectPool(). sofa::core::objectmodel::AspectPool::AspectPool ; (; ). Constructor: creates a new aspect pool. . ◆ ~AspectPool(). sofa::core::objectmodel::AspectPool::~AspectPool ; (; ). Destructor. . Function details. ◆ allocate(). AspectRef sofa::core::objectmodel::AspectPool::allocate ; (; ). Request a new aspect. The returned object should stay alive as long as the aspect is in use. It it possible to duplicate the AspectRef if several threads/algorithm use the same aspect. If no aspect remains available, null pointer is returned. . ◆ getAspect(). AspectRef sofa::core::objectmodel::AspectPool::getAspect ; (; int ; id). ◆ getAspectCounter(). int sofa::core::objectmodel::AspectPool::getAspectCounter ; (; int ; id); const. inline . ◆ nbAspects(). int sofa::core::objectmodel::AspectPool::nbAspects ; (; ); const. inline . ◆ release(). void sofa::core::objectmodel::AspectPool::release ; (; int ; id). protected . Release the aspect having the specified number. It makes the number immediately available to satisfy subsequent AspectPool::allocate requests. . ◆ setReleaseCallback(). void sofa::core::objectmodel::AspectPool::setReleaseCallback ; (; const std::function< void(int)> & ; callback). Related details. ◆ Aspect. friend class Aspect. friend . sofacoreobjectmodelAspectPool; Generated on Mon Nov 11 2024 03:15:52 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_pool.html:1872,allocate,allocate,1872,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_pool.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_pool.html,1,['allocate'],['allocate']
Energy Efficiency,"c Member Functions |; Protected Member Functions |; List of all members . sofa::core::behavior::BaseMechanicalState Class Referenceabstract . #include <BaseMechanicalState.h>; Component storing all state vectors of a simulated body (position, velocity, etc). ; More... Inheritance diagram for sofa::core::behavior::BaseMechanicalState:. [legend]; Detailed Description; Component storing all state vectors of a simulated body (position, velocity, etc). ; This class only contains the data of the body and not any of its active computations, which are handled by the Mass, ForceField, and Constraint components.; Two types of vectors are used : ; VecCoord ; : containing positions. ; VecDeriv ; : derivative values, i.e. velocity, forces, displacements. In most cases they are the same (i.e. 3D/2D point particles), but they can be different (rigid frames for instance). Several pre-defined vectors are stored : ; position ; ; velocity ; ; force ; ; dx ; (displacement). Other vectors can be allocated to store other temporary values. Vectors can be assigned efficiently by just swapping pointers.; In addition to state vectors, the current constraint system matrix is also stored, containing the coefficient of each constraint defined over the DOFs in this body. . Classes; class  ConstraintBlock;  ; class  VMultiOpEntry;  . Public Member Functions;  SOFA_ABSTRACT_CLASS (BaseMechanicalState, BaseState);  ;  SOFA_BASE_CAST_IMPLEMENTATION (BaseMechanicalState);  ; bool insertInNode (objectmodel::BaseNode *node) override;  ; bool removeInNode (objectmodel::BaseNode *node) override;  ; Methods allowing to have access to the geometry without a template class (generic but not efficient); virtual SReal getPX (Index) const;  ; virtual SReal getPY (Index) const;  ; virtual SReal getPZ (Index) const;  ; Mechanical integration related methods; Note: all these methods can now be implemented generically using VecId-based operations . virtual void beginIntegration (SReal);  Called at the beginning of ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_mechanical_state.html:1152,allocate,allocated,1152,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_mechanical_state.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_mechanical_state.html,1,['allocate'],['allocated']
Energy Efficiency,"cDeriv &a, const DataVecDeriv &f) override;  ; SReal getKineticEnergy (const core::MechanicalParams *, const DataVecDeriv &) const override;  < vMv/2 using dof->getV() override More...;  ; SReal getPotentialEnergy (const core::MechanicalParams *, const DataVecCoord &) const override;  ; SReal getPotentialEnergy (const core::MechanicalParams *) const override;  Mgx. More...;  ; void addDForce (const core::MechanicalParams *mparams, DataVecDeriv &df, const DataVecDeriv &dx) override;  ; SReal getElementMass (Index index) const override;  Get the mass relative to the DOF at index. More...;  ; void draw (const core::visual::VisualParams *vparams) override;  Render internal data of this object, for debugging purposes. More...;  ; virtual void initTextures ();  ; virtual void update ();  ; void setDensity (Real d);  ; Real getDensity ();  ; void addKToMatrix (sofa::linearalgebra::BaseMatrix *matrix, SReal kFact, unsigned int &offset) override;  ;  Public Member Functions inherited from sofa::core::behavior::Mass< DataTypes >;  SOFA_CLASS2 (SOFA_TEMPLATE(Mass, DataTypes), SOFA_TEMPLATE(ForceField, DataTypes), BaseMass);  ; void initGnuplot (const std::string path) override;  initialization to export kinetic and potential energy to gnuplot files format More...;  ; void exportGnuplot (const MechanicalParams *mparams, SReal time) override;  export kinetic and potential energy state at ""time"" to a gnuplot file More...;  ; void addGravityToV (const MechanicalParams *mparams, MultiVecDerivId) override;  perform v += dt*g operation. Used if mass wants to added G separately from the other forces to v. More...;  ; SReal getElementMass (sofa::Index) const override;  recover the mass of an element More...;  ; void getElementMass (sofa::Index index, linearalgebra::BaseMatrix *m) const override;  Get the matrix relative to the DOF at index. More...;  ; bool insertInNode (objectmodel::BaseNode *node) override;  ; bool removeInNode (objectmodel::BaseNode *node) override;  ; void addMDx (",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1nonuniform_1_1_non_uniform_hexahedron_f_e_m_force_field_and_mass.html:8371,energy,energy,8371,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1nonuniform_1_1_non_uniform_hexahedron_f_e_m_force_field_and_mass.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1nonuniform_1_1_non_uniform_hexahedron_f_e_m_force_field_and_mass.html,1,['energy'],['energy']
Energy Efficiency,"cDeriv &df, const DataVecDeriv &dx) override;  ; void addGravityToV (const core::MechanicalParams *mparams, DataVecDeriv &d_v) override;  ; SReal getElementMass (Index index) const override;  Get the mass relative to the DOF at index. More...;  ; void draw (const core::visual::VisualParams *vparams) override;  Render internal data of this object, for debugging purposes. More...;  ; virtual void initTextures ();  ; virtual void update ();  ; void setDensity (Real d);  ; Real getDensity ();  ; void addKToMatrix (sofa::linearalgebra::BaseMatrix *matrix, SReal kFact, unsigned int &offset) override;  ;  Public Member Functions inherited from sofa::core::behavior::Mass< DataTypes >;  SOFA_CLASS2 (SOFA_TEMPLATE(Mass, DataTypes), SOFA_TEMPLATE(ForceField, DataTypes), BaseMass);  ; void initGnuplot (const std::string path) override;  initialization to export kinetic and potential energy to gnuplot files format More...;  ; void exportGnuplot (const MechanicalParams *mparams, SReal time) override;  export kinetic and potential energy state at ""time"" to a gnuplot file More...;  ; void addGravityToV (const MechanicalParams *mparams, MultiVecDerivId) override;  perform v += dt*g operation. Used if mass wants to added G separately from the other forces to v. More...;  ; SReal getElementMass (sofa::Index) const override;  recover the mass of an element More...;  ; void getElementMass (sofa::Index index, linearalgebra::BaseMatrix *m) const override;  Get the matrix relative to the DOF at index. More...;  ; bool insertInNode (objectmodel::BaseNode *node) override;  ; bool removeInNode (objectmodel::BaseNode *node) override;  ; void addMDx (const MechanicalParams *mparams, MultiVecDerivId fid, SReal factor) override;  f += factor M dx More...;  ; void accFromF (const MechanicalParams *mparams, MultiVecDerivId aid) override;  ; void addDForce (const MechanicalParams *, DataVecDeriv &, const DataVecDeriv &) override;  Mass forces (gravity) often have null derivative. More...;  ; void ad",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_hexahedron_f_e_m_force_field_and_mass.html:6645,energy,energy,6645,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_hexahedron_f_e_m_force_field_and_mass.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_hexahedron_f_e_m_force_field_and_mass.html,1,['energy'],['energy']
Energy Efficiency,"ce . #include <CompressedRowSparseMatrixGeneric.h>. Inheritance diagram for sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >:. [legend]. Classes; struct  IndexedBlock;  ; class  Range;  . Public Attributes; Index nBlockRow;  Size. More...;  ; Index nBlockCol;  Mathematical size of the matrix, in blocks. More...;  ; VecIndex rowIndex;  Compressed sparse data structure. More...;  ; VecIndex rowBegin;  column indices of non-empty blocks in each row. The column indices of the non-empty block within the i-th non-empty row are all the colsIndex[j], j in [rowBegin[i],rowBegin[i+1]) More...;  ; VecIndex colsIndex;  column indices of all the non-empty blocks, sorted by increasing row index and column index More...;  ; VecBlock colsValue;  values of the non-empty blocks, in the same order as in colsIndex More...;  ; VecFlag touchedBlock;  boolean vector, i-th value is true if block has been touched since last compression. More...;  ; VecIndexedBlock btemp;  Additional storage to make block insertion more efficient. More...;  ; bool skipCompressZero;  ; VecIndex oldRowIndex;  Temporary vectors used during compression. More...;  ; VecIndex oldRowBegin;  ; VecIndex oldColsIndex;  ; VecBlock oldColsValue;  . Static Public Attributes; static constexpr sofa::Index NL = traits::NL;  Number of rows of a block. More...;  ; static constexpr sofa::Index NC = traits::NC;  Number of columns of a block. More...;  ; static constexpr Index s_invalidIndex = std::is_signed_v<Index> ? std::numeric_limits<Index>::lowest() : std::numeric_limits<Index>::max();  ;  Static Public Attributes inherited from sofa::linearalgebra::CRSDefaultPolicy; static constexpr bool IsAlwaysSquare = false;  Set to true if this matrix is always square (must be true for symmetric) More...;  ; static constexpr bool IsAlwaysSymmetric = false;  Set to true if this matrix is always symmetric (IsAlwaysSquare should be true) More...;  ; static constexpr bool AutoSize = false;  Set to true if the size o",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_generic.html:1488,efficient,efficient,1488,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_generic.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_generic.html,1,['efficient'],['efficient']
Energy Efficiency,cement-export; . /feed; ; displacement export – SOFA. SOFA - Topic Tag: displacement export. /distortion; . /feed; ; Distortion – SOFA. SOFA - Topic Tag: Distortion. /dlls-issue; . /feed; ; DLLs issue – SOFA. SOFA - Topic Tag: DLLs issue. /docker; . /feed; ; docker – SOFA. SOFA - Topic Tag: docker. /documentation; . /feed; ; documentation – SOFA. SOFA - Topic Tag: documentation. /documentation-color-alpha; . /feed; ; documentation color alpha – SOFA. SOFA - Topic Tag: documentation color alpha. /doe; . /feed; ; doe – SOFA. SOFA - Topic Tag: doe. /dynamic-systems; . /feed; ; Dynamic systems – SOFA. SOFA - Topic Tag: Dynamic systems. /edge_removal; . /feed; ; edge_removal – SOFA. SOFA - Topic Tag: edge_removal. /eigen; . /feed; ; Eigen – SOFA. SOFA - Topic Tag: Eigen. /elastic; . /feed; ; Elastic – SOFA. SOFA - Topic Tag: Elastic. /elasticity; . /feed; ; elasticity – SOFA. SOFA - Topic Tag: elasticity. /elastoplastic; . /feed; ; Elastoplastic – SOFA. SOFA - Topic Tag: Elastoplastic. /energy; . /feed; ; Energy – SOFA. SOFA - Topic Tag: Energy. /engine-data-update-energy; . /feed; ; engine data update energy – SOFA. SOFA - Topic Tag: engine data update energy. /error; . /feed; ; error – SOFA. SOFA - Topic Tag: error. /error-5; . /feed; ; Error 5 – SOFA. SOFA - Topic Tag: Error 5. /error-determination; . /feed; ; error determination – SOFA. SOFA - Topic Tag: error determination. /event; . /feed; ; event – SOFA. SOFA - Topic Tag: event. /events; . /feed; ; events – SOFA. SOFA - Topic Tag: events. /execution-time; . /feed; ; Execution time – SOFA. SOFA - Topic Tag: Execution time. /experience; . /feed; ; experience – SOFA. SOFA - Topic Tag: experience. /export; . /feed; ; export – SOFA. SOFA - Topic Tag: export. /exporter-obj-files-normals-estimation; . /feed; ; exporter ; OBJ files ; normals estimation – SOFA. SOFA - Topic Tag: exporter ; OBJ files ; normals estimation. /export-mesh; . /feed; ; export mesh – SOFA. SOFA - Topic Tag: export mesh. /external; . /feed; ; extern,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/index-wcopy.html:441377,energy,energy,441377,index-wcopy.html,https://www.sofa-framework.org,https://www.sofa-framework.org/index-wcopy.html,1,['energy'],['energy']
Energy Efficiency,"city. (default=false) . ◆ showVectorsScale. template<class DataTypes > . Data< float > sofa::component::statecontainer::MechanicalObject< DataTypes >::showVectorsScale. Scale for vectors display. (default=0.0001) . ◆ translation. template<class DataTypes > . Data< type::Vec3 > sofa::component::statecontainer::MechanicalObject< DataTypes >::translation. protected . Translation of the DOFs. . ◆ translation2. template<class DataTypes > . Data< type::Vec3 > sofa::component::statecontainer::MechanicalObject< DataTypes >::translation2. protected . Translation of the DOFs, applied after the rest position has been computed. . ◆ v. template<class DataTypes > . Data< VecDeriv > sofa::component::statecontainer::MechanicalObject< DataTypes >::v. velocity coordinates of the degrees of freedom . ◆ vectorsCoord. template<class DataTypes > . sofa::type::vector< Data< VecCoord > * > sofa::component::statecontainer::MechanicalObject< DataTypes >::vectorsCoord. protected . Coordinates DOFs vectors table (static and dynamic allocated) . ◆ vectorsDeriv. template<class DataTypes > . sofa::type::vector< Data< VecDeriv > * > sofa::component::statecontainer::MechanicalObject< DataTypes >::vectorsDeriv. protected . Derivates DOFs vectors table (static and dynamic allocated) . ◆ vectorsMatrixDeriv. template<class DataTypes > . sofa::type::vector< Data< MatrixDeriv > * > sofa::component::statecontainer::MechanicalObject< DataTypes >::vectorsMatrixDeriv. protected . Constraint vectors table. . ◆ vfree. template<class DataTypes > . Data< VecDeriv > sofa::component::statecontainer::MechanicalObject< DataTypes >::vfree. free velocity coordinates of the degrees of freedom . ◆ x. template<class DataTypes > . Data< VecCoord > sofa::component::statecontainer::MechanicalObject< DataTypes >::x. position coordinates of the degrees of freedom . ◆ x0. template<class DataTypes > . Data< VecCoord > sofa::component::statecontainer::MechanicalObject< DataTypes >::x0. rest position coordinates of the degrees of",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1statecontainer_1_1_mechanical_object.html:41235,allocate,allocated,41235,api/master/sofa/html/classsofa_1_1component_1_1statecontainer_1_1_mechanical_object.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1statecontainer_1_1_mechanical_object.html,1,['allocate'],['allocated']
Energy Efficiency,"ck that DataTypes matches the MechanicalState. . ◆ create(). template<class TDataTypes > . template<class T > . static T::SPtr sofa::core::behavior::PairInteractionForceField< TDataTypes >::create ; (; T * ; , . core::objectmodel::BaseContext * ; context, . core::objectmodel::BaseObjectDescription * ; arg . ). inlinestatic . Construction method called by ObjectFactory. . ◆ getPathObject1(). template<class TDataTypes > . std::string sofa::core::behavior::PairInteractionForceField< TDataTypes >::getPathObject1 ; (; ); const. inline . Retrieve the Object1 path. . ◆ getPathObject2(). template<class TDataTypes > . std::string sofa::core::behavior::PairInteractionForceField< TDataTypes >::getPathObject2 ; (; ); const. inline . Retrieve the Object2 path. . ◆ getPotentialEnergy() [1/2]. template<class DataTypes > . SReal sofa::core::behavior::PairInteractionForceField< DataTypes >::getPotentialEnergy ; (; const MechanicalParams * ; mparams); const. overridevirtual . Get the potential energy associated to this ForceField.; Used to estimate the total energy of the system by some post-stabilization techniques.; This method retrieves the x vector from the MechanicalState and call the internal getPotentialEnergy(const VecCoord&,const VecCoord&) method implemented by the component. ; Implements sofa::core::behavior::BaseForceField. ◆ getPotentialEnergy() [2/2]. template<class TDataTypes > . virtual SReal sofa::core::behavior::PairInteractionForceField< TDataTypes >::getPotentialEnergy ; (; const MechanicalParams * ; mparams, . const DataVecCoord & ; x1, . const DataVecCoord & ; x2 . ); const. pure virtual . Get the potential energy associated to this ForceField.; Used to estimate the total energy of the system by some post-stabilization techniques.; This method must be implemented by the component, and is usually called by the generic ForceField::getPotentialEnergy() method. ; Implemented in sofa::component::solidmechanics::spring::RepulsiveSpringForceField< DataTypes >, sofa::co",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_pair_interaction_force_field.html:26503,energy,energy,26503,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_pair_interaction_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_pair_interaction_force_field.html,1,['energy'],['energy']
Energy Efficiency,"class DataTypes > . Data< type::Vec3 > sofa::component::statecontainer::MechanicalObject< DataTypes >::translation. protected . Translation of the DOFs. . ◆ translation2. template<class DataTypes > . Data< type::Vec3 > sofa::component::statecontainer::MechanicalObject< DataTypes >::translation2. protected . Translation of the DOFs, applied after the rest position has been computed. . ◆ v. template<class DataTypes > . Data< VecDeriv > sofa::component::statecontainer::MechanicalObject< DataTypes >::v. velocity coordinates of the degrees of freedom . ◆ vectorsCoord. template<class DataTypes > . sofa::type::vector< Data< VecCoord > * > sofa::component::statecontainer::MechanicalObject< DataTypes >::vectorsCoord. protected . Coordinates DOFs vectors table (static and dynamic allocated) . ◆ vectorsDeriv. template<class DataTypes > . sofa::type::vector< Data< VecDeriv > * > sofa::component::statecontainer::MechanicalObject< DataTypes >::vectorsDeriv. protected . Derivates DOFs vectors table (static and dynamic allocated) . ◆ vectorsMatrixDeriv. template<class DataTypes > . sofa::type::vector< Data< MatrixDeriv > * > sofa::component::statecontainer::MechanicalObject< DataTypes >::vectorsMatrixDeriv. protected . Constraint vectors table. . ◆ vfree. template<class DataTypes > . Data< VecDeriv > sofa::component::statecontainer::MechanicalObject< DataTypes >::vfree. free velocity coordinates of the degrees of freedom . ◆ x. template<class DataTypes > . Data< VecCoord > sofa::component::statecontainer::MechanicalObject< DataTypes >::x. position coordinates of the degrees of freedom . ◆ x0. template<class DataTypes > . Data< VecCoord > sofa::component::statecontainer::MechanicalObject< DataTypes >::x0. rest position coordinates of the degrees of freedom . ◆ xfree. template<class DataTypes > . Data< VecCoord > sofa::component::statecontainer::MechanicalObject< DataTypes >::xfree. free position coordinates of the degrees of freedom . Constructor details. ◆ MechanicalObject(). templ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1statecontainer_1_1_mechanical_object.html:41473,allocate,allocated,41473,api/master/sofa/html/classsofa_1_1component_1_1statecontainer_1_1_mechanical_object.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1statecontainer_1_1_mechanical_object.html,1,['allocate'],['allocated']
Energy Efficiency,"const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ;  Protected Member Functions inherited from sofa::core::behavior::LinearSolverAccessor;  LinearSolverAccessor (LinearSolver *linearSolver=nullptr);  . Attribute details. ◆ cpt. int sofa::component::odesolver::backward::VariationalSymplecticSolver::cpt. ◆ d_computeHamiltonian. Data<bool> sofa::component::odesolver::backward::VariationalSymplecticSolver::d_computeHamiltonian. Compute hamiltonian. . ◆ d_explicit. Data<bool> sofa::component::odesolver::backward::VariationalSymplecticSolver::d_explicit. Use explicit integration scheme. . ◆ d_fileName. Data<std::string> sofa::component::odesolver::backward::VariationalSymplecticSolver::d_fileName. File name where kinetic and potential energies are saved in a CSV file. . ◆ d_hamiltonianEnergy. Data<SReal> sofa::component::odesolver::backward::VariationalSymplecticSolver::d_hamiltonianEnergy. hamiltonian energy . ◆ d_newtonError. Data<SReal> sofa::component::odesolver::backward::VariationalSymplecticSolver::d_newtonError. Error tolerance for Newton iterations. . ◆ d_newtonSteps. Data<unsigned int> sofa::component::odesolver::backward::VariationalSymplecticSolver::d_newtonSteps. Maximum number of Newton steps. . ◆ d_rayleighMass. Data<SReal> sofa::component::odesolver::backward::VariationalSymplecticSolver::d_rayleighMass. Rayleigh damping coefficient related to mass, > 0. . ◆ d_rayleighStiffness. Data<SReal> sofa::component::odesolver::backward::VariationalSymplecticSolver::d_rayleighStiffness. Rayleigh damping coefficient related to stiffness, > 0. . ◆ d_saveEnergyInFile. Data<bool> sofa::component::odesolver::backward::VariationalSymplecticSolver::d_saveEnergyInFile. If kinetic and potential energies should be dumped in a CSV file at each iteration. . ◆ d_threadSafeVisitor. Data<bool> sofa::component::odesolver::backward::VariationalSymplecticSolver::d_threadSafeVisitor. If true, d",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1backward_1_1_variational_symplectic_solver.html:17609,energy,energy,17609,api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1backward_1_1_variational_symplectic_solver.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1backward_1_1_variational_symplectic_solver.html,1,['energy'],['energy']
Energy Efficiency,"contacts vector. More...;  ;  Public Member Functions inherited from sofa::core::collision::ElementIntersector; virtual ~ElementIntersector ();  . Attribute details. ◆ impl. template<class Elem1 , class Elem2 , class T > . T* sofa::core::collision::MemberElementIntersector< Elem1, Elem2, T >::impl. protected . Constructor details. ◆ MemberElementIntersector(). template<class Elem1 , class Elem2 , class T > . sofa::core::collision::MemberElementIntersector< Elem1, Elem2, T >::MemberElementIntersector ; (; T * ; ptr). inline . Function details. ◆ beginIntersect(). template<class Elem1 , class Elem2 , class T > . int sofa::core::collision::MemberElementIntersector< Elem1, Elem2, T >::beginIntersect ; (; core::CollisionModel * ; model1, . core::CollisionModel * ; model2, . DetectionOutputVector *& ; contacts . ). inlineoverridevirtual . Begin intersection tests between two collision models. Return the number of contacts written in the contacts vector. If the given contacts vector is nullptr, then this method should allocate it. ; Implements sofa::core::collision::ElementIntersector. ◆ canIntersect() [1/2]. template<class Elem1 , class Elem2 , class T > . bool sofa::core::collision::MemberElementIntersector< Elem1, Elem2, T >::canIntersect ; (; core::CollisionElementIterator ; elem1, . core::CollisionElementIterator ; elem2 . ). virtualdelete . Test if 2 elements can collide. Note that this can be conservative (i.e. return true even when no collision is present) ; Reimplemented from sofa::core::collision::ElementIntersector. ◆ canIntersect() [2/2]. template<class Elem1 , class Elem2 , class T > . bool sofa::core::collision::MemberElementIntersector< Elem1, Elem2, T >::canIntersect ; (; core::CollisionElementIterator ; elem1, . core::CollisionElementIterator ; elem2, . const core::collision::Intersection * ; currentIntersection . ). inlineoverridevirtual . Test if 2 elements can collide. Note that this can be conservative (i.e. return true even when no collision is presen",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_member_element_intersector.html:2996,allocate,allocate,2996,api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_member_element_intersector.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_member_element_intersector.html,1,['allocate'],['allocate']
Energy Efficiency,"ct ID available to send the next version More...;  . Public Member Functions;  AspectBuffer (AspectPool &pool);  ;  ~AspectBuffer ();  ; AspectRef allocate ();  Allocate an aspect ID to prepare the next version, reusing a recent one if possible. More...;  ; void push (AspectRef id);  Send a new version, overriding the latest if it was not already received (in which case it can be ""recycled"" using allocate) More...;  ; bool pop (AspectRef &id);  Receive the latest version, return true if one is available, or false otherwise (in which case id is unchanged) More...;  ; void clear ();  . Attribute details. ◆ availableID. AtomicInt sofa::core::objectmodel::AspectBuffer::availableID. protected . -1 or aspect ID available to send the next version . ◆ latestID. AtomicInt sofa::core::objectmodel::AspectBuffer::latestID. protected . -1 or aspect ID of the last version sent . ◆ pool. AspectPool& sofa::core::objectmodel::AspectBuffer::pool. protected . Constructor details. ◆ AspectBuffer(). sofa::core::objectmodel::AspectBuffer::AspectBuffer ; (; AspectPool & ; pool). ◆ ~AspectBuffer(). sofa::core::objectmodel::AspectBuffer::~AspectBuffer ; (; ). Function details. ◆ allocate(). AspectRef sofa::core::objectmodel::AspectBuffer::allocate ; (; ). Allocate an aspect ID to prepare the next version, reusing a recent one if possible. . ◆ clear(). void sofa::core::objectmodel::AspectBuffer::clear ; (; ). Clear the buffers This must be called before either the AspectPool or this buffer is deleted . ◆ pop(). bool sofa::core::objectmodel::AspectBuffer::pop ; (; AspectRef & ; id). Receive the latest version, return true if one is available, or false otherwise (in which case id is unchanged) . ◆ push(). void sofa::core::objectmodel::AspectBuffer::push ; (; AspectRef ; id). Send a new version, overriding the latest if it was not already received (in which case it can be ""recycled"" using allocate) . sofacoreobjectmodelAspectBuffer; Generated on Mon Nov 11 2024 03:15:52 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_buffer.html:1881,allocate,allocate,1881,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_buffer.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_buffer.html,3,['allocate'],['allocate']
Energy Efficiency,"ctBuffer Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; List of all members . sofa::core::objectmodel::AspectBuffer Class Reference . #include <AspectPool.h>; Detailed Description; This class is responsible for providing a buffer for communicating aspects between threads, such that only the most up to date aspect is kept, and the previous one is reused to send the next update. This is similar to triple buffering. . Protected Attributes; AspectPool & pool;  ; AtomicInt latestID;  -1 or aspect ID of the last version sent More...;  ; AtomicInt availableID;  -1 or aspect ID available to send the next version More...;  . Public Member Functions;  AspectBuffer (AspectPool &pool);  ;  ~AspectBuffer ();  ; AspectRef allocate ();  Allocate an aspect ID to prepare the next version, reusing a recent one if possible. More...;  ; void push (AspectRef id);  Send a new version, overriding the latest if it was not already received (in which case it can be ""recycled"" using allocate) More...;  ; bool pop (AspectRef &id);  Receive the latest version, return true if one is available, or false otherwise (in which case id is unchanged) More...;  ; void clear ();  . Attribute details. ◆ availableID. AtomicInt sofa::core::objectmodel::AspectBuffer::availableID. protected . -1 or aspect ID available to send the next version . ◆ latestID. AtomicInt sofa::core::objectmodel::AspectBuffer::latestID. protected . -1 or aspect ID of the last version sent . ◆ pool. AspectPool& sofa::core::objectmodel::AspectBuffer::pool. protected . Constructor details. ◆ AspectBuffer(). sofa::core::objectmodel::AspectBuffer::AspectBuffer ; (; AspectPool & ; pool). ◆ ~AspectBuffer(). sofa::core::objectmodel::AspectBuffer::~AspectBuffer ; (; ). Function details. ◆ allocate(). AspectRef sofa::core::objectmodel::AspectBuffer::allocate ; (; ). Allocate an aspect ID to prepare the next version, reusing a recent one if possible",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_buffer.html:1108,allocate,allocate,1108,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_buffer.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_buffer.html,1,['allocate'],['allocate']
Energy Efficiency,"cted . ◆ mouseStatus. MOUSE_STATUS sofa::gui::common::PickHandler::mouseStatus. protected . ◆ operations. type::fixed_array< Operation*,NONE > sofa::gui::common::PickHandler::operations. protected . ◆ pickingMethod. PickingMethod sofa::gui::common::PickHandler::pickingMethod. protected . ◆ renderCallback. CallBackRender* sofa::gui::common::PickHandler::renderCallback. protected . ◆ useCollisions. bool sofa::gui::common::PickHandler::useCollisions. protected . Constructor details. ◆ PickHandler(). sofa::gui::common::PickHandler::PickHandler ; (; double ; defaultLength = 1000000). ◆ ~PickHandler(). sofa::gui::common::PickHandler::~PickHandler ; (; ). virtual . Function details. ◆ activateRay(). void sofa::gui::common::PickHandler::activateRay ; (; int ; width, . int ; height, . core::objectmodel::BaseNode * ; root . ). ◆ addCallBack(). void sofa::gui::common::PickHandler::addCallBack ; (; CallBackPicker * ; c). inline . ◆ allocateSelectionBuffer(). void sofa::gui::common::PickHandler::allocateSelectionBuffer ; (; int ; width, . int ; height . ). virtual . Reimplemented in sofa::gui::qt::GLPickHandler. ◆ changeOperation() [1/2]. Operation * sofa::gui::common::PickHandler::changeOperation ; (; MOUSE_BUTTON ; button, . const std::string & ; op . ). ◆ changeOperation() [2/2]. Operation * sofa::gui::common::PickHandler::changeOperation ; (; sofa::component::setting::MouseButtonSetting * ; setting). ◆ clearCallBacks(). void sofa::gui::common::PickHandler::clearCallBacks ; (; ). inline . ◆ deactivateRay(). void sofa::gui::common::PickHandler::deactivateRay ; (; ). ◆ destroySelectionBuffer(). void sofa::gui::common::PickHandler::destroySelectionBuffer ; (; ). virtual . Reimplemented in sofa::gui::qt::GLPickHandler. ◆ findCollision(). BodyPicked sofa::gui::common::PickHandler::findCollision ; (; ). protectedvirtual . ◆ findCollisionUsingBruteForce() [1/2]. BodyPicked sofa::gui::common::PickHandler::findCollisionUsingBruteForce ; (; ). protected . ◆ findCollisionUsingBruteForce(",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1common_1_1_pick_handler.html:4989,allocate,allocateSelectionBuffer,4989,api/master/sofa/html/classsofa_1_1gui_1_1common_1_1_pick_handler.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1common_1_1_pick_handler.html,1,['allocate'],['allocateSelectionBuffer']
Energy Efficiency,"cted Attributes |; Public Member Functions |; Protected Member Functions |; Friends |; List of all members . sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager > Class Template Reference . #include <vector_device.h>. Protected Attributes; Size vectorSize;  Current size of the vector. More...;  ; Size allocSize;  Allocated size on host. More...;  ; Size deviceVectorSize [MemoryManager::MAX_DEVICES];  Initialized size on each device. More...;  ; Size deviceAllocSize [MemoryManager::MAX_DEVICES];  Allocated size on each device. More...;  ; device_pointer devicePointer [MemoryManager::MAX_DEVICES];  Pointer to the data on the GPU side. More...;  ; Size clearSize;  when initializing missing device data, up to where entries should be set to zero ? More...;  ; T * hostPointer;  Pointer to the data on the CPU side. More...;  ; int deviceIsValid;  True if the data on the GPU is currently valid (up to the given deviceVectorSize of each device, i.e. additional space may need to be allocated and/or initialized) More...;  ; bool hostIsValid;  True if the data on the CPU is currently valid. More...;  ; bool bufferIsRegistered;  True if the buffer is registered with CUDA. More...;  ; buffer_id_type bufferObject;  Optional associated buffer ID. More...;  . Static Protected Attributes; static int cptid = 0;  . Public Member Functions;  vector_device ();  ;  vector_device (const Size n);  ;  vector_device (const vector_device< T, MemoryManager, DataTypeInfoManager > &v);  ;  vector_device (const std::initializer_list< T > &t);  ; bool isHostValid () const;  ; bool isDeviceValid (unsigned gpu) const;  ; void clear ();  ; void operator= (const vector_device< T, MemoryManager, DataTypeInfoManager > &v);  ;  ~vector_device ();  ; Size size () const;  ; Size capacity () const;  ; bool empty () const;  ; void reserve (Size s, Size WARP_SIZE=MemoryManager::BSIZE);  ; void fastResize (Size s, Size WARP_SIZE=MemoryManager::BSIZE);  resize the vector without calling constructors ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1vector__device.html:1215,allocate,allocated,1215,api/master/sofa/html/classsofa_1_1type_1_1vector__device.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1vector__device.html,1,['allocate'],['allocated']
Energy Efficiency,"ctor (const sofa::core::MechanicalParams *mparams, const sofa::core::matrixaccumulator::get_component_type< c > *object);  . Attribute details. ◆ l_linearSystems. template<class TMatrix , class TVector > . MultiLink< MyType, TypedMatrixLinearSystem<TMatrix, TVector>, BaseLink::FLAG_DUPLICATE > sofa::component::linearsystem::CompositeLinearSystem< TMatrix, TVector >::l_linearSystems. protected . Among the list of linear systems, which one is to be used by the linear solver. . ◆ l_solverLinearSystem. template<class TMatrix , class TVector > . SingleLink< MyType, TypedMatrixLinearSystem<TMatrix, TVector>, BaseLink::FLAG_STOREPATH | BaseLink::FLAG_STRONGLINK > sofa::component::linearsystem::CompositeLinearSystem< TMatrix, TVector >::l_solverLinearSystem. protected . Constructor details. ◆ CompositeLinearSystem(). template<class TMatrix , class TVector > . sofa::component::linearsystem::CompositeLinearSystem< TMatrix, TVector >::CompositeLinearSystem. protected . Function details. ◆ allocateSystem(). template<class TMatrix , class TVector > . void sofa::component::linearsystem::CompositeLinearSystem< TMatrix, TVector >::allocateSystem. overrideprotectedvirtual . Reimplemented from sofa::component::linearsystem::TypedMatrixLinearSystem< TMatrix, TVector >. ◆ assembleSystem(). template<class TMatrix , class TVector > . void sofa::component::linearsystem::CompositeLinearSystem< TMatrix, TVector >::assembleSystem ; (; const core::MechanicalParams * ; mechanical_params). overrideprotectedvirtual . Reimplemented from sofa::core::behavior::BaseMatrixLinearSystem. ◆ clearSystem(). template<class TMatrix , class TVector > . void sofa::component::linearsystem::CompositeLinearSystem< TMatrix, TVector >::clearSystem. overridevirtual . Reimplemented from sofa::component::linearsystem::TypedMatrixLinearSystem< TMatrix, TVector >. ◆ dispatchSystemRHS(). template<class TMatrix , class TVector > . void sofa::component::linearsystem::CompositeLinearSystem< TMatrix, TVector >::dispatchSyst",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsystem_1_1_composite_linear_system.html:19567,allocate,allocateSystem,19567,api/master/sofa/html/classsofa_1_1component_1_1linearsystem_1_1_composite_linear_system.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsystem_1_1_composite_linear_system.html,1,['allocate'],['allocateSystem']
Energy Efficiency,"d returns < 0 in case of error. More...;  ; static int updates (int timeout=1);  check if the file have changed, colalesc the similar events and notify the listener. timeout is the number of seconds to block the calling process. Can be 0 (in this case it return immediately if there is no event. return -1 in case of error return >= 0 otherwise. More...;  ; static void removeListener (FileEventListener *listener);  remove the provided listener. If the listener is not existing, do nothing If the listener is nullptr, do nothing If the listener is associated with one or more file...remove all the associations. Keep in mind that the file are still monitored. More...;  ; static void removeFileListener (const std::string &filename, FileEventListener *listener);  remove the provided listener for a given file If the listener is not existing, do nothing If the listener is nullptr, do nothing If the listener is associated with one or more file...remove all the associations. Keep in mind that the file are still monitored. More...;  . Function details. ◆ addFile() [1/2]. int sofa::helper::system::FileMonitor::addFile ; (; const std::string & ; directoryname, . const std::string & ; filename, . FileEventListener * ; listener . ). static . add a new path and file to monitor and a listener to be triggered in case of change. returns >= 0 if the file was successfully added returns < 0 in case of error. . ◆ addFile() [2/2]. int sofa::helper::system::FileMonitor::addFile ; (; const std::string & ; filename, . FileEventListener * ; listener . ). static . add a new filepath to monitor and a listener to be triggered in case of change. returns >= 0 if the file was successfully added returns < 0 in case of error. . ◆ removeFileListener(). void sofa::helper::system::FileMonitor::removeFileListener ; (; const std::string & ; filename, . FileEventListener * ; listener . ). static . remove the provided listener for a given file If the listener is not existing, do nothing If the listener is nullp",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_file_monitor.html:1813,monitor,monitored,1813,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_file_monitor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_file_monitor.html,1,['monitor'],['monitored']
Energy Efficiency,"d the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, BaseData::DataFlags dataFlags);  Helper method used by initData() More...;  ; template<class T > ; void initData0 (Data< T > *field, typename Data< T >::InitData &res, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  . Vectors allocation and generic operations (based on VecId); Increment the index of the given VecCoordId, so that all 'allocated' vectors in this state have a lower index . typedef type::vector< VMultiOpEntry > VMultiOp;  ; virtual void vAvail (const ExecParams *params, VecCoordId &v)=0;  ; virtual void vAvail (const ExecParams *params, VecDerivId &v)=0;  Increment the index of the given VecDerivId, so that all 'allocated' vectors in this state have a lower index. More...;  ; virtual void vAlloc (const ExecParams *params, VecCoordId v, const core::VecIdProperties &properties={})=0;  Increment the index of the given MatrixDerivId, so that all 'allocated' vectors in this state have a lower index. More...;  ; virtual void vAlloc (const ExecParams *params, VecDerivId v, const core::VecIdProperties &properties={})=0;  Allocate a new temporary vector. More...;  ; virtual void vRealloc (const ExecParams *params, VecCoordId v, const core::VecIdProperties &properties={})=0;  Allocate a new temporary vector. More...;  ; virtual void vRealloc (const ExecParams *params, VecDerivId ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_mechanical_state.html:18018,allocate,allocated,18018,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_mechanical_state.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_mechanical_state.html,1,['allocate'],['allocated']
Energy Efficiency,"d::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Static Public Member Functions; static std::string GetCustomTemplateName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseObject; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  . Protected Member Functions; void preAssembleSystem (const core::MechanicalParams *) override;  ; virtual void associateLocalMatrixToComponents (const core::MechanicalParams *);  ; virtual void allocateSystem ();  ; virtual void resizeVectors (sofa::Size n);  Set the size of RHS and solution to n. More...;  ; void copyLocalVectorToGlobalVector (core::MultiVecDerivId v, TVector *globalVector);  ; SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API void copyLocalVectorToGlobalVector (core::MultiVecDerivId v, GraphScatteredVector *globalVector);  ; void copyLocalVectorToGlobalVector (core::MultiVecDerivId v, GraphScatteredVector *globalVector);  ;  Protected Member Functions inherited from sofa::core::behavior::BaseMatrixLinearSystem;  BaseMatrixLinearSystem ();  ; virtual void assembleSystem (const core::MechanicalParams *);  ; virtual void postAssembleSystem (const core::MechanicalParams *);  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *b",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsystem_1_1_typed_matrix_linear_system.html:13792,allocate,allocateSystem,13792,api/master/sofa/html/classsofa_1_1component_1_1linearsystem_1_1_typed_matrix_linear_system.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsystem_1_1_typed_matrix_linear_system.html,1,['allocate'],['allocateSystem']
Energy Efficiency,"dAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  . Public Member Functions;  SOFA_ABSTRACT_CLASS (BaseMass, StateAccessor);  ; virtual void initGnuplot (const std::string path)=0;  initialization to export kinetic and potential energy to gnuplot files format More...;  ; virtual void exportGnuplot (const MechanicalParams *mparams, SReal time)=0;  export kinetic and potential energy state at ""time"" to a gnuplot file More...;  ; virtual SReal getElementMass (sofa::Index index) const =0;  Get the mass relative to the DOF at index. More...;  ; virtual void getElementMass (sofa::Index index, linearalgebra::BaseMatrix *m) const =0;  Get the matrix relative to the DOF at index. More...;  ; virtual bool isDiagonal () const =0;  ; bool insertInNode (objectmodel::BaseNode *node) override;  ; bool removeInNode (objectmodel::BaseNode *node) override;  ; Vector operations; virtual void addMDx (const MechanicalParams *mparams, MultiVecDerivId fid, SReal factor)=0;  f += factor M dx More...;  ; virtual void accFromF (const MechanicalParams *mparams, MultiVecDerivId aid)=0;  dx = M^-1 f More...;  ; virtual void addGravityToV (const MechanicalParams *mparams, MultiVecDerivId vid)=0;  Perform v += dt*g operation. Used if mass wants to added G separately from the other forces to v. More...;  ; virtual SReal getKineticEnergy (const MechanicalPa",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_mass.html:2335,energy,energy,2335,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_mass.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_mass.html,1,['energy'],['energy']
Energy Efficiency,"data (the matrix is set to zero) More...;  ; Index rowSize (void) const override;  number of rows More...;  ; Index colSize (void) const override;  number of columns More...;  ; void reserve (typename CompressedMatrix::Index reserveSize);  ; SReal element (Index i, Index j) const override;  Read the value of the element at row i, column j (using 0-based indices) More...;  ; void compress () override;  Add the values from the scheduled list, and clears the schedule list. More...;  ; Index * getRowBegin ();  ; Index * getColsIndex ();  ; Real * getColsValue ();  ; void clearRow (Index i) override;  Set all the entries of a row to 0. More...;  ; void clearRows (Index imin, Index imax) override;  Set all the entries of rows imin to imax-1 to 0. More...;  ; void clearCol (Index col) override;  Clears the all the entries of column imin to column imax-1. Not efficient ! More...;  ; void clearCols (Index imin, Index imax) override;  Set all the entries of column i and of row i to 0. Not efficient ! More...;  ; void clearRowCol (Index i) override;  Clears all the entries of rows imin to imax-1 and columns imin to imax-1. More...;  ; void clearRowsCols (Index imin, Index imax) override;  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; void clear () override;  Set all values to 0, by resizing to the same size. More...;  ; void mult (VectorEigen &result, const VectorEigen &data);  Matrix-vector product. More...;  ; void mult_MT (VectorEigen &result, const VectorEigen &data);  Matrix-vector product openmp multithreaded. More...;  ; template<class V1 , class V2 > ; void multVector (V1 &output, const V2 &input);  Matrix-Vector product (dense vector with contiguous memory layout) More...;  ; template<class V > ; V operator* (const V &input);  Matrix-Vector product (dense vector with contiguous memory layout) More...;  ; bool choleskyDecompose ();  Try to compute the LDLT decomposition, and return true if success. The matrix is unchanged. More...",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html:3962,efficient,efficient,3962,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html,1,['efficient'],['efficient']
Energy Efficiency,"data (the matrix is set to zero) More...;  ; Index rowSize (void) const override;  number of rows More...;  ; Index colSize (void) const override;  number of columns More...;  ; void reserve (typename CompressedMatrix::Index reserveSize);  ; SReal element (Index i, Index j) const override;  Read the value of the element at row i, column j (using 0-based indices) More...;  ; void compress () override;  Add the values from the scheduled list, and clears the schedule list. More...;  ; Index * getRowBegin ();  ; Index * getColsIndex ();  ; Real * getColsValue ();  ; void clearRow (Index i) override;  Set all the entries of a row to 0. More...;  ; void clearRows (Index imin, Index imax) override;  Set all the entries of rows imin to imax-1 to 0. More...;  ; void clearCol (Index col) override;  Clears the all the entries of column imin to column imax-1. Not efficient ! More...;  ; void clearCols (Index imin, Index imax) override;  Set all the entries of column i and of row i to 0. Not efficient ! More...;  ; void clearRowCol (Index i) override;  Clears all the entries of rows imin to imax-1 and columns imin to imax-1. More...;  ; void clearRowsCols (Index imin, Index imax) override;  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; void clear () override;  Set all values to 0, by resizing to the same size. More...;  ; void mult (VectorEigen &result, const VectorEigen &data);  Matrix-vector product. More...;  ; void mult_MT (VectorEigen &result, const VectorEigen &data);  Matrix-vector product openmp multithreaded. More...;  ; void multVector (V1 &output, const V2 &input);  Matrix-Vector product (dense vector with contiguous memory layout) More...;  ; V operator* (const V &input);  Matrix-Vector product (dense vector with contiguous memory layout) More...;  ; const char * Name ();  ; const char * Name ();  ; bool choleskyDecompose ();  Try to compute the LDLT decomposition, and return true if success. The matrix is unchanged. More...;  ;",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html:5233,efficient,efficient,5233,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html,1,['efficient'],['efficient']
Energy Efficiency,"der derivatives term in the ODE) . Implements sofa::core::behavior::BaseMass. ◆ addMToMatrix() [2/2]. template<class DataTypes > . void sofa::core::behavior::Mass< DataTypes >::addMToMatrix ; (; sofa::linearalgebra::BaseMatrix * ; matrix, . SReal ; mFact, . unsigned int & ; offset . ). virtual . Reimplemented in sofa::component::solidmechanics::fem::elastic::HexahedronFEMForceFieldAndMass< DataTypes >, sofa::component::solidmechanics::fem::elastic::HexahedralFEMForceFieldAndMass< DataTypes >, sofa::component::mass::UniformMass< DataTypes >, sofa::component::mass::MeshMatrixMass< DataTypes, GeometricalTypes >, sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >, and sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >. ◆ exportGnuplot(). template<class DataTypes > . void sofa::core::behavior::Mass< DataTypes >::exportGnuplot ; (; const MechanicalParams * ; mparams, . SReal ; time . ). overridevirtual . export kinetic and potential energy state at ""time"" to a gnuplot file ; Implements sofa::core::behavior::BaseMass. ◆ getElementMass() [1/2]. template<class DataTypes > . void sofa::core::behavior::Mass< DataTypes >::getElementMass ; (; sofa::Index ; index, . linearalgebra::BaseMatrix * ; m . ); const. overridevirtual . Get the matrix relative to the DOF at index. ; Implements sofa::core::behavior::BaseMass.; Reimplemented in sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >. ◆ getElementMass() [2/2]. template<class DataTypes > . SReal sofa::core::behavior::Mass< DataTypes >::getElementMass ; (; sofa::Index ; ); const. overridevirtual . recover the mass of an element ; Implements sofa::core::behavior::BaseMass.; Reimplemented in sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >. ◆ getKineticEnergy() [1/2]. template<class DataTypes > . SReal sofa::core::behavior::Mass< DataTypes >::getKineticEnergy ; (; const MechanicalParams * ; mparams); const. overridevirtual . $ e = 1/2 v^t M v $; This method retrieves the",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_mass.html:29703,energy,energy,29703,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_mass.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_mass.html,1,['energy'],['energy']
Energy Efficiency,"dex) const override;  Get the mass relative to the DOF at index. More...;  ; void setDensity (Real d);  ; Real getDensity ();  ; void addKToMatrix (sofa::linearalgebra::BaseMatrix *matrix, SReal kFact, unsigned int &offset) override;  ; void addKToMatrix (sofa::linearalgebra::BaseMatrix *, SReal, unsigned int &) override;  ; SReal getPotentialEnergy (const core::MechanicalParams *, const DataVecCoord &) const override;  ; SReal getPotentialEnergy (const MechanicalParams *mparams) const override;  ; SReal getPotentialEnergy (const MechanicalParams *mparams, const DataVecCoord &x) const override;  ;  Public Member Functions inherited from sofa::core::behavior::Mass< DataTypes >;  SOFA_CLASS2 (SOFA_TEMPLATE(Mass, DataTypes), SOFA_TEMPLATE(ForceField, DataTypes), BaseMass);  ; void initGnuplot (const std::string path) override;  initialization to export kinetic and potential energy to gnuplot files format More...;  ; void exportGnuplot (const MechanicalParams *mparams, SReal time) override;  export kinetic and potential energy state at ""time"" to a gnuplot file More...;  ; void addGravityToV (const MechanicalParams *mparams, MultiVecDerivId) override;  perform v += dt*g operation. Used if mass wants to added G separately from the other forces to v. More...;  ; SReal getElementMass (sofa::Index) const override;  recover the mass of an element More...;  ; void getElementMass (sofa::Index index, linearalgebra::BaseMatrix *m) const override;  Get the matrix relative to the DOF at index. More...;  ; bool insertInNode (objectmodel::BaseNode *node) override;  ; bool removeInNode (objectmodel::BaseNode *node) override;  ; void addMDx (const MechanicalParams *mparams, MultiVecDerivId fid, SReal factor) override;  f += factor M dx More...;  ; void accFromF (const MechanicalParams *mparams, MultiVecDerivId aid) override;  ; void addDForce (const MechanicalParams *, DataVecDeriv &, const DataVecDeriv &) override;  Mass forces (gravity) often have null derivative. More...;  ; void ad",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_hexahedral_f_e_m_force_field_and_mass.html:6340,energy,energy,6340,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_hexahedral_f_e_m_force_field_and_mass.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_hexahedral_f_e_m_force_field_and_mass.html,2,['energy'],['energy']
Energy Efficiency,dify and object in the scene and restart simulation. /how-to-move-objects-with-keyboard-and-mouse; . /feed; ; [SOLVED] How to move objects with keyboard and mouse? – SOFA. SOFA - Topic: [SOLVED] How to move objects with keyboard and mouse?. /how-to-not-check-some-collisions; ; SOFA - Topic: [SOLVED] How to not-check some collisions?. /how-to-obtain-the-contact-force; ; SOFA - Topic: [SOLVED] How to obtain the contact force?. /how-to-prevent-distortion-of-tetrahedralfem-in-collision; ; SOFA - Topic: How to prevent distortion of TetrahedralFEM in collision?. /how-to-properly-quit-runsofa; ; SOFA - Topic: How to properly quit runSofa?. /how-to-read-xml-file-in-sofa-where-to-read-it-in-c-code; ; SOFA - Topic: [SOLVED] How to read XML file in SOFA? Where to read it in c++ code?. /how-to-reduce-my-scene-space-how-to-fix-my-tool-movement-range; ; SOFA - Topic: [SOLVED] How to reduce my scene space ?How to fix my tool movement range ?. /how-to-reduce-overhead-in-persisting-contact; ; SOFA - Topic: [SOLVED] How to reduce overhead in persisting contact?. /how-to-run-a-py-file-several-times; ; SOFA - Topic: How to run a .py file several times?. /how-to-save-the-topology-of-component-sparsegridramification; ; SOFA - Topic: [SOLVED] How to save the topology of component SparseGridRamification?. /how-to-search-node; ; SOFA - Topic: How to search Node?. /how-to-send-data-to-sofa-through-socket; ; SOFA - Topic: [SOLVED] How to send data to SOFA through socket ?. /how-to-set-a-fixedtranslationconstraint-on-a-specific-mesh-index; ; SOFA - Topic: [SOLVED] How to set a FixedTranslationConstraint on a specific mesh index?. /how-to-set-a-nodes-rotation-in-the-c-code; ; SOFA - Topic: [SOLVED] How to set a node's rotation in the c++ code?. /how-to-set-collision-groups; ; SOFA - Topic: How to set collision groups. /how-to-set-links; ; SOFA - Topic: [SOLVED] How to set links. /how-to-set-the-anisotropic-material; ; SOFA - Topic: How to set the anisotropic material. /how-to-set-up-parameters-f,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/index-wcopy.html:328010,reduce,reduce-overhead-in-persisting-contact,328010,index-wcopy.html,https://www.sofa-framework.org,https://www.sofa-framework.org/index-wcopy.html,2,['reduce'],"['reduce', 'reduce-overhead-in-persisting-contact']"
Energy Efficiency,"d allocate (unsigned int maxConst);  ; SReal ** getW (void);  ; SReal & getMu (void);  ; SReal * getDfree (void);  ; SReal getTolerance (void);  ; SReal getMaxIter (void);  ; SReal * getF (void);  ; SReal * getF_1 (void);  ; SReal * getD (void);  ; bool useInitialGuess (void);  ; unsigned int getDim (void);  ; unsigned int setDim (unsigned int nbC);  ; unsigned int getMaxConst (void);  ; void setNumItMax (int input_numItMax);  ; void setTol (SReal input_tol);  ; void setLCP (unsigned int input_dim, SReal *input_dfree, SReal **input_W, SReal *input_f, SReal &input_mu, SReal &input_tol, int input_numItMax);  ; void solveNLCP (bool convergenceTest, std::vector< SReal > *residuals=nullptr, std::vector< SReal > *violations=nullptr);  . Attribute details. ◆ error. SReal sofa::helper::LCP::error. ◆ it. int sofa::helper::LCP::it. Constructor details. ◆ LCP(). sofa::helper::LCP::LCP ; (; ). ◆ ~LCP(). sofa::helper::LCP::~LCP ; (; ). Function details. ◆ allocate(). void sofa::helper::LCP::allocate ; (; unsigned int ; maxConst). ◆ getD(). SReal* sofa::helper::LCP::getD ; (; void ; ). inline . ◆ getDfree(). SReal* sofa::helper::LCP::getDfree ; (; void ; ). inline . ◆ getDim(). unsigned int sofa::helper::LCP::getDim ; (; void ; ). inline . ◆ getF(). SReal* sofa::helper::LCP::getF ; (; void ; ). inline . ◆ getF_1(). SReal* sofa::helper::LCP::getF_1 ; (; void ; ). inline . ◆ getMaxConst(). unsigned int sofa::helper::LCP::getMaxConst ; (; void ; ). inline . ◆ getMaxIter(). SReal sofa::helper::LCP::getMaxIter ; (; void ; ). inline . ◆ getMu(). SReal& sofa::helper::LCP::getMu ; (; void ; ). inline . ◆ getTolerance(). SReal sofa::helper::LCP::getTolerance ; (; void ; ). inline . ◆ getW(). SReal** sofa::helper::LCP::getW ; (; void ; ). inline . ◆ reset(). void sofa::helper::LCP::reset ; (; void ; ). ◆ setDim(). unsigned int sofa::helper::LCP::setDim ; (; unsigned int ; nbC). inline . ◆ setLCP(). void sofa::helper::LCP::setLCP ; (; unsigned int ; input_dim, . SReal * ; input_dfree, . SRe",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_l_c_p.html:1364,allocate,allocate,1364,api/master/sofa/html/classsofa_1_1helper_1_1_l_c_p.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_l_c_p.html,1,['allocate'],['allocate']
Energy Efficiency,"e . #include <BaseInteractionForceField.h>; BaseInteractionForceField is a force field linking several bodies (MechanicalState) together. ; More... Inheritance diagram for sofa::core::behavior::BaseInteractionForceField:. [legend]; Detailed Description; BaseInteractionForceField is a force field linking several bodies (MechanicalState) together. ; An interaction force field computes forces applied to several simulated bodies given their current positions and velocities.; For implicit integration schemes, it must also compute the derivative ( df, given a displacement dx ). . Public Member Functions;  SOFA_ABSTRACT_CLASS (BaseInteractionForceField, BaseForceField);  ; virtual BaseMechanicalState * getMechModel1 ();  ; virtual BaseMechanicalState * getMechModel2 ();  ; void addKToMatrix (const MechanicalParams *, const sofa::core::behavior::MultiMatrixAccessor *) override;  Compute the system matrix corresponding to . More...;  ; virtual void initGnuplot (const std::string path);  initialization to export potential energy to gnuplot files format More...;  ; virtual void exportGnuplot (SReal time);  export kinetic and potential energy state at ""time"" to a gnuplot file More...;  ; bool insertInNode (objectmodel::BaseNode *node) override;  ; bool removeInNode (objectmodel::BaseNode *node) override;  ;  Public Member Functions inherited from sofa::core::behavior::BaseForceField;  SOFA_ABSTRACT_CLASS (BaseForceField, StateAccessor);  ; virtual void addForce (const MechanicalParams *mparams, MultiVecDerivId fId)=0;  Given the current position and velocity states, update the current force vector by computing and adding the forces associated with this ForceField. More...;  ; virtual void addDForce (const MechanicalParams *mparams, MultiVecDerivId dfId)=0;  Compute the force derivative given a small displacement from the position and velocity used in the previous call to addForce(). More...;  ; virtual void addMBKdx (const MechanicalParams *mparams, MultiVecDerivId dfId);  Accu",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_interaction_force_field.html:1291,energy,energy,1291,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_interaction_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_interaction_force_field.html,1,['energy'],['energy']
Energy Efficiency,"e . ◆ operator-=(). template<typename Real , unsigned int N> . Monomial_LD< Real, N > & sofa::helper::Monomial_LD< Real, N >::operator-= ; (; const Monomial_LD< Real, N > & ; b). ◆ operator/(). template<typename Real , unsigned int N> . Monomial_LD<Real,N> sofa::helper::Monomial_LD< Real, N >::operator/ ; (; const Real & ; alpha). inline . ◆ operator/=(). template<typename Real , unsigned int N> . Monomial_LD<Real,N>& sofa::helper::Monomial_LD< Real, N >::operator/= ; (; const Real & ; alpha). inline . ◆ operator=(). template<typename Real , unsigned int N> . Monomial_LD< Real, N > & sofa::helper::Monomial_LD< Real, N >::operator= ; (; const Monomial_LD< Real, N > & ; b). ◆ operator==(). template<typename Real , unsigned int N> . bool sofa::helper::Monomial_LD< Real, N >::operator== ; (; const Monomial_LD< Real, N > & ; b); const. Logical operators. . ◆ readFromStream(). template<typename Real , unsigned int N> . void sofa::helper::Monomial_LD< Real, N >::readFromStream ; (; std::istream & ; ff). ◆ SetCoef(). template<typename Real , unsigned int N> . void sofa::helper::Monomial_LD< Real, N >::SetCoef ; (; const Real & ; m_coef). inline . Setting of Monomial_LD. . ◆ SetPower(). template<typename Real , unsigned int N> . void sofa::helper::Monomial_LD< Real, N >::SetPower ; (; int ; numbervar, . int ; powervalue . ). inline . ◆ writeToStream(). template<typename Real , unsigned int N> . void sofa::helper::Monomial_LD< Real, N >::writeToStream ; (; std::ostream & ; ff); const. Enum details. ◆ anonymous enum. template<typename Real , unsigned int N> . anonymous enum. to define the derivative operator m_mono.d(x), m_mono.d(y) . Enumeratorx ; y ; z ; xy ; yz ; zx . Related details. ◆ operator*. template<typename Real , unsigned int N> . template<typename FReal , unsigned int FN> . Monomial_LD<FReal,FN>& operator* ; (; const FReal & ; alpha, . Monomial_LD< FReal, FN > & ; r . ). friend . sofahelperMonomial_LD; Generated on Mon Nov 11 2024 03:30:30 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_monomial___l_d.html:8145,power,powervalue,8145,api/master/sofa/html/classsofa_1_1helper_1_1_monomial___l_d.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_monomial___l_d.html,1,['power'],['powervalue']
Energy Efficiency,"e. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Attributes |; Public Member Functions |; List of all members . sofa::component::solidmechanics::fem::hyperelastic::material::BoyceAndArruda< DataTypes > Class Template Reference . #include <BoyceAndArruda.h>. Inheritance diagram for sofa::component::solidmechanics::fem::hyperelastic::material::BoyceAndArruda< DataTypes >:. [legend]; Detailed Description; template<class DataTypes>; class sofa::component::solidmechanics::fem::hyperelastic::material::BoyceAndArruda< DataTypes >; a Class that describe a generic hyperelastic material : example of Boyce and Arruda The material is described based on continuum mechanics and the description is independent to any discretization method like the finite element method. A material is generically described by a strain energy function and its first and second derivatives. In practice the energy is the sum of several energy terms which depends on 2 quantities : the determinant of the deformation gradient J and the right Cauchy Green deformation tensor . Static Public Attributes; static constexpr std::string_view Name = ""ArrudaBoyce"";  . Public Member Functions; virtual Real getStrainEnergy (StrainInformation< DataTypes > *sinfo, const MaterialParameters< DataTypes > &param);  ; virtual void deriveSPKTensor (StrainInformation< DataTypes > *sinfo, const MaterialParameters< DataTypes > &param, MatrixSym &SPKTensorGeneral);  ; virtual void applyElasticityTensor (StrainInformation< DataTypes > *sinfo, const MaterialParameters< DataTypes > &param, const MatrixSym &inputTensor, MatrixSym &outputTensor);  ; virtual void ElasticityTensor (StrainInformation< DataTypes > *sinfo, const MaterialParameters< DataTypes > &param, Matrix6 &outputTensor);  ;  Public Member Functions inherited from sofa::component::solidmechanics::fem::hyperelastic::material::HyperelasticMaterial< DataTypes >; virtual ~HyperelasticMaterial ();  . Attribute details. ◆ Name. templa",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_boyce_and_arruda.html:1051,energy,energy,1051,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_boyce_and_arruda.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_boyce_and_arruda.html,2,['energy'],['energy']
Energy Efficiency,"e. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Attributes |; Public Member Functions |; List of all members . sofa::component::solidmechanics::fem::hyperelastic::material::VerondaWestman< DataTypes > Class Template Reference . #include <VerondaWestman.h>. Inheritance diagram for sofa::component::solidmechanics::fem::hyperelastic::material::VerondaWestman< DataTypes >:. [legend]; Detailed Description; template<class DataTypes>; class sofa::component::solidmechanics::fem::hyperelastic::material::VerondaWestman< DataTypes >; a Class that describe a generic hyperelastic material : example of Boyce and Arruda The material is described based on continuum mechanics and the description is independent to any discretization method like the finite element method. A material is generically described by a strain energy function and its first and second derivatives. In practice the energy is the sum of several energy terms which depends on 2 quantities : the determinant of the deformation gradient J and the right Cauchy Green deformation tensor . Static Public Attributes; static constexpr std::string_view Name = ""VerondaWestman"";  . Public Member Functions; Real getStrainEnergy (StrainInformation< DataTypes > *sinfo, const MaterialParameters< DataTypes > &param) override;  ; void deriveSPKTensor (StrainInformation< DataTypes > *sinfo, const MaterialParameters< DataTypes > &param, MatrixSym &SPKTensorGeneral) override;  ; void applyElasticityTensor (StrainInformation< DataTypes > *sinfo, const MaterialParameters< DataTypes > &param, const MatrixSym &inputTensor, MatrixSym &outputTensor) override;  ; void ElasticityTensor (StrainInformation< DataTypes > *sinfo, const MaterialParameters< DataTypes > &param, Matrix6 &outputTensor) override;  ;  Public Member Functions inherited from sofa::component::solidmechanics::fem::hyperelastic::material::HyperelasticMaterial< DataTypes >; virtual ~HyperelasticMaterial ();  . Attribute details. ◆ Name.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_veronda_westman.html:1051,energy,energy,1051,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_veronda_westman.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_veronda_westman.html,2,['energy'],['energy']
Energy Efficiency,"e::UNKNOWN;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObject; SingleLink< BaseObject, BaseContext, BaseLink::FLAG_DOUBLELINK > l_context;  ; LinkSlaves l_slaves;  ; SingleLink< BaseObject, BaseObject, BaseLink::FLAG_DOUBLELINK > l_master;  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  . Public Member Functions;  SOFA_CLASS (Mesh2PointTopologicalMapping, sofa::core::topology::TopologicalMapping);  ; void init () override;  Initializes the target BaseTopology from the source BaseTopology. More...;  ; void updateTopologicalMappingTopDown () override;  Method called at each topological changes propagation which comes from the INPUT topology to adapt the OUTPUT topology : More...;  ; Index getGlobIndex (Index ind) override;  ; Index getFromIndex (Index ind) override;  ; const type::vector< type::vector< Index > > & getPointsMappedFromPoint () const;  ; const type::vector< type::vector< Index > > & getPointsMappedFromEdge () const;  ; const type::vector< type::vector< Index > > & getPointsMappedFromTriangle () const;  ; const type::vector< type::vector< Index > > & getPointsMappedFromQuad () const;  ; const type::vector< type::vector< Index > > & getPointsMappedFromTetra () const;  ; const type::vector< type::vector< Index > > & getPointsMappedFromHexa () const;  ; const type::vector< Vec3d > & getPointBaryCoords () const;  ; const type::vector< Vec3d > & getEdgeBaryCoords () const;  ; const type::vector< Vec3d > & getTriangleBaryCoords () const;  ; const type::vector< Vec3d > & getQuadBaryCoords () const;  ; const type::vector< Vec3d > & getTetraBaryCoords () const;  ;",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1linear_1_1_mesh2_point_topological_mapping.html:4220,adapt,adapt,4220,api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1linear_1_1_mesh2_point_topological_mapping.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1linear_1_1_mesh2_point_topological_mapping.html,1,['adapt'],['adapt']
Energy Efficiency,"e::vector< Index > ; _map2Elements). Method to set a vector map to rull this subsetData. Will set. ; See alsom_usingMap to true Otherwise will use the Data as the map . ◆ supportNewTopologyElements(). template<class ElementType , class VecT > . void sofa::core::topology::TopologySubsetData< ElementType, VecT >::supportNewTopologyElements ; (; bool ; value). inline . Method to activate/unactivate the See alsom_addNewElements option. To allow this TopologySubsetData to add new elements. By default . m_addNewElements is set to false. ; Parameters. {bool}to change m_addNewElements value. . ◆ swap(). template<typename ElementType , typename VecT > . void sofa::core::topology::TopologySubsetData< ElementType, VecT >::swap ; (; Index ; i1, . Index ; i2 . ). override . Swaps values of this subsetmap at indices i1 and i2. (only if i1 and i2 < subset size()) . ◆ swapPostProcess(). template<typename ElementType , typename VecT > . void sofa::core::topology::TopologySubsetData< ElementType, VecT >::swapPostProcess ; (; Index ; i1, . Index ; i2 . ). protectedvirtual . Internal method called at the end of See alsoswap method to apply internal mechanism, such as map swap. ; Parameters. i1First element index to be swapped. ; i2Second element index to be swapped with first one. . Reimplemented in sofa::core::topology::TopologySubsetIndices. ◆ updateLastIndex(). template<typename ElementType , typename VecT > . void sofa::core::topology::TopologySubsetData< ElementType, VecT >::updateLastIndex ; (; Index ; posLastIndex, . Index ; newGlobalId . ). protectedvirtual . Internal method to update the last element of this Data and/or map when the topology buffer is reduced. Parameters. posLastIndexIndex position of the last topology element in this subset. ; newGlobalIdGlobal topology element index to be set at Data[posLastIndex]. . Reimplemented in sofa::core::topology::TopologySubsetIndices. sofacoretopologyTopologySubsetData; Generated on Mon Nov 11 2024 03:16:04 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topology_subset_data.html:30022,reduce,reduced,30022,api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topology_subset_data.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topology_subset_data.html,1,['reduce'],['reduced']
Energy Efficiency,"e<class DataTypes > . void sofa::component::collision::response::contact::PenalityContactForceField< DataTypes >::clear ; (; sofa::Size ; reserve = 0). ◆ draw(). template<class DataTypes > . void sofa::component::collision::response::contact::PenalityContactForceField< DataTypes >::draw ; (; const core::visual::VisualParams * ; ). overridevirtual . Render internal data of this object, for debugging purposes. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ getContact(). template<class DataTypes > . const type::vector< Contact >& sofa::component::collision::response::contact::PenalityContactForceField< DataTypes >::getContact ; (; ); const. inline . ◆ getPotentialEnergy(). template<class DataTypes > . SReal sofa::component::collision::response::contact::PenalityContactForceField< DataTypes >::getPotentialEnergy ; (; const sofa::core::MechanicalParams * ; mparams, . const DataVecCoord & ; x1, . const DataVecCoord & ; x2 . ); const. overridevirtual . Get the potential energy associated to this ForceField.; Used to estimate the total energy of the system by some post-stabilization techniques.; This method must be implemented by the component, and is usually called by the generic ForceField::getPotentialEnergy() method. ; Implements sofa::core::behavior::PairInteractionForceField< DataTypes >. ◆ grabPoint(). template<class DataTypes > . void sofa::component::collision::response::contact::PenalityContactForceField< DataTypes >::grabPoint ; (; const core::behavior::MechanicalState< defaulttype::Vec3Types > * ; tool, . const type::vector< sofa::Index > & ; index, . type::vector< std::pair< core::objectmodel::BaseObject *, type::Vec3f > > & ; result, . type::vector< sofa::Index > & ; triangle, . type::vector< sofa::Index > & ; index_point . ). ◆ SOFA_CLASS(). template<class DataTypes > . sofa::component::collision::response::contact::PenalityContactForceField< DataTypes >::SOFA_CLASS ; (; SOFA_TEMPLATE(PenalityContactForceField< DataTypes >, DataTypes) ; , . SOFA_",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1contact_1_1_penality_contact_force_field.html:26715,energy,energy,26715,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1contact_1_1_penality_contact_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1contact_1_1_penality_contact_force_field.html,1,['energy'],['energy']
Energy Efficiency,"eMatrixConstraint< TBlock, Policy > &sc);  read from an input stream More...;  . Additional Inherited Members;  Public Attributes inherited from sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSConstraintPolicy >; Index nBlockRow;  Size. More...;  ; Index nBlockCol;  Mathematical size of the matrix, in blocks. More...;  ; VecIndex rowIndex;  Compressed sparse data structure. More...;  ; VecIndex rowBegin;  column indices of non-empty blocks in each row. The column indices of the non-empty block within the i-th non-empty row are all the colsIndex[j], j in [rowBegin[i],rowBegin[i+1]) More...;  ; VecIndex colsIndex;  column indices of all the non-empty blocks, sorted by increasing row index and column index More...;  ; VecBlock colsValue;  values of the non-empty blocks, in the same order as in colsIndex More...;  ; VecFlag touchedBlock;  boolean vector, i-th value is true if block has been touched since last compression. More...;  ; VecIndexedBlock btemp;  Additional storage to make block insertion more efficient. More...;  ; bool skipCompressZero;  ; VecIndex oldRowIndex;  Temporary vectors used during compression. More...;  ; VecIndex oldRowBegin;  ; VecIndex oldColsIndex;  ; VecBlock oldColsValue;  ;  Protected Member Functions inherited from sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSConstraintPolicy >; bool registerNewCol (Index &colId, TBlock &bvalue);  Add a new col into matrix. More...;  ; std::pair< Index, Index > registerBtempLine (typename VecIndexedBlock::const_iterator &itbtemp);  Add a complete new line from btemp into matrix. More...;  ; void fullyCompressBtemp ();  Clear matrix and just add btemp array. More...;  ; Block * insertBtemp (const Index i, const Index j);  Method to easy insert new block into btemp. More...;  ; Index getMaxColIndex ();  Method to easy have the max colIndex. Could only be used if AutoSize policy is activated. More...;  ; void deleteRow (Index rowId);  Method to easy delete row given posi",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_constraint.html:10131,efficient,efficient,10131,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_constraint.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_constraint.html,1,['efficient'],['efficient']
Energy Efficiency,"eObject; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  . Attribute details. ◆ _initialPoints. template<class DataTypes > . sofa::core::objectmodel::RenamedData<VecCoord> sofa::component::solidmechanics::spring::TriangularBiquadraticSpringsForceField< DataTypes >::_initialPoints. protected . ◆ d_compressible. template<class DataTypes > . Data<bool> sofa::component::solidmechanics::spring::TriangularBiquadraticSpringsForceField< DataTypes >::d_compressible. protected . If additional energy penalizing compressibility should be used. . ◆ d_dampingRatio. template<class DataTypes > . Data<Real> sofa::component::solidmechanics::spring::TriangularBiquadraticSpringsForceField< DataTypes >::d_dampingRatio. protected . Ratio damping/stiffness. . ◆ d_edgeInfo. template<class DataTypes > . sofa::core::topology::EdgeData<type::vector<EdgeRestInformation> > sofa::component::solidmechanics::spring::TriangularBiquadraticSpringsForceField< DataTypes >::d_edgeInfo. protected . Internal edge data. . ◆ d_initialPoints. template<class DataTypes > . Data< VecCoord > sofa::component::solidmechanics::spring::TriangularBiquadraticSpringsForceField< DataTypes >::d_initialPoints. protected . Initial Position. . ◆ d_poissonRatio. template<class DataTypes > . Data<Real> sofa::component::solidmechanics::spring::TriangularBiquadraticSpringsForceField< DataTypes >::d_poissonRatio. protected . Poisson ratio in Hooke's law. . ◆ d_stiffnessMatrixRegularizationWeight. template<class DataTypes > . Data<Real> sofa::c",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_triangular_biquadratic_springs_force_field.html:21958,energy,energy,21958,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_triangular_biquadratic_springs_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_triangular_biquadratic_springs_force_field.html,1,['energy'],['energy']
Energy Efficiency,"eVector *dest, ConstVecId src, unsigned int &offset)=0;  Add data to a global BaseVector from the state stored in a local vector. More...;  ; virtual void addFromBaseVectorSameSize (VecId dest, const linearalgebra::BaseVector *src, unsigned int &offset)=0;  Perform dest[i][j] += src[offset + i][j] 0<= i < src_entries 0<= j < 3 (for 3D objects) 0 <= j < 2 (for 2D objects) More...;  ; virtual void addFromBaseVectorDifferentSize (VecId dest, const linearalgebra::BaseVector *src, unsigned int &offset)=0;  Perform dest[ offset + i ][j] += src[i][j] 0<= i < src_entries 0<= j < 3 (for 3D objects) 0 <= j < 2 (for 2D objects) More...;  ; virtual void printDOF (ConstVecId v, std::ostream &out=std::cerr, int firstIndex=0, int range=-1) const =0;  ; virtual unsigned printDOFWithElapsedTime (ConstVecId, unsigned=0, unsigned=0, std::ostream &=std::cerr);  ; virtual void initGnuplot (const std::string);  ; virtual void exportGnuplot (SReal);  ; virtual void writeVec (ConstVecId v, std::ostream &out)=0;  ; virtual void readVec (VecId v, std::istream &in)=0;  ; virtual SReal compareVec (ConstVecId v, std::istream &in)=0;  ; virtual void vAvail (const ExecParams *params, VecCoordId &v)=0;  ; virtual void vAvail (const ExecParams *params, VecDerivId &v)=0;  Increment the index of the given VecDerivId, so that all 'allocated' vectors in this state have a lower index. More...;  ; virtual void vAlloc (const ExecParams *params, VecCoordId v, const core::VecIdProperties &properties={})=0;  Increment the index of the given MatrixDerivId, so that all 'allocated' vectors in this state have a lower index. More...;  ; virtual void vAlloc (const ExecParams *params, VecDerivId v, const core::VecIdProperties &properties={})=0;  Allocate a new temporary vector. More...;  ; virtual void vRealloc (const ExecParams *params, VecCoordId v, const core::VecIdProperties &properties={})=0;  Allocate a new temporary vector. More...;  ; virtual void vRealloc (const ExecParams *params, VecDerivId v, const core:",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_mechanical_state.html:8730,allocate,allocated,8730,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_mechanical_state.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_mechanical_state.html,1,['allocate'],['allocated']
Energy Efficiency,"eVectorOperations Class Referenceabstract . #include <BaseVectorOperations.h>. Inheritance diagram for sofa::core::behavior::BaseVectorOperations:. [legend]. Protected Attributes; const core::ExecParams * params;  ; core::objectmodel::BaseContext * ctx;  ; SReal result;  . Public Member Functions;  BaseVectorOperations (const core::ExecParams *params, core::objectmodel::BaseContext *ctx);  ; virtual ~BaseVectorOperations ();  ; virtual void v_alloc (sofa::core::MultiVecCoordId &id, const VecIdProperties &properties={})=0;  Allocate a temporary vector. More...;  ; virtual void v_alloc (sofa::core::MultiVecDerivId &id, const VecIdProperties &properties={})=0;  ; virtual void v_free (sofa::core::MultiVecCoordId &id, bool interactionForceField=false, bool propagate=false)=0;  Free a previously allocated temporary vector. More...;  ; virtual void v_free (sofa::core::MultiVecDerivId &id, bool interactionForceField=false, bool propagate=false)=0;  ; virtual void v_realloc (sofa::core::MultiVecCoordId &id, bool interactionForceField=false, bool propagate=false, const VecIdProperties &properties={})=0;  keep already allocated vectors and allocates others. If interactionForceField, also allocates mechanical states linked by an InteractionForceField More...;  ; virtual void v_realloc (sofa::core::MultiVecDerivId &id, bool interactionForceField=false, bool propagate=false, const VecIdProperties &properties={})=0;  ; virtual void v_clear (core::MultiVecId v)=0;  v=0 More...;  ; virtual void v_eq (core::MultiVecId v, core::ConstMultiVecId a)=0;  v=a More...;  ; virtual void v_eq (core::MultiVecId v, core::ConstMultiVecId a, SReal f)=0;  v=f*a More...;  ; virtual void v_peq (core::MultiVecId v, core::ConstMultiVecId a, SReal f=1.0)=0;  v+=f*a More...;  ; virtual void v_teq (core::MultiVecId v, SReal f)=0;  v*=f More...;  ; virtual void v_op (core::MultiVecId v, core::ConstMultiVecId a, core::ConstMultiVecId b, SReal f=1.0)=0;  v=a+b*f More...;  ; virtual void v_multiop (const core",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_vector_operations.html:1370,allocate,allocated,1370,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_vector_operations.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_vector_operations.html,2,['allocate'],"['allocated', 'allocates']"
Energy Efficiency,"ecompose(). template<class TReal > . bool sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::choleskyDecompose ; (; ). inline . Try to compute the LDLT decomposition, and return true if success. The matrix is unchanged. . ◆ choleskySolve(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::choleskySolve ; (; VectorEigen & ; x, . const VectorEigen & ; b . ); const. inline . Solve Ax=b, where A is this matrix. WARNING: ldltDecompose() must be called first. x and b can be the same vector. . ◆ clear(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::clear ; (; ). inlineoverridevirtual . Set all values to 0, by resizing to the same size. ; Implements sofa::linearalgebra::BaseMatrix. ◆ clearCol(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::clearCol ; (; Index ; col). inlineoverridevirtual . Clears the all the entries of column imin to column imax-1. Not efficient ! ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearCols(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::clearCols ; (; Index ; imin, . Index ; imax . ). inlineoverridevirtual . Set all the entries of column i and of row i to 0. Not efficient ! ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRow(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::clearRow ; (; Index ; i). inlineoverridevirtual . Set all the entries of a row to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRowCol(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::clearRowCol ; (; Index ; i). inlineoverridevirtual . Clears all the entries of rows imin to imax-1 and columns imin to imax-1. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRows(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::clearRows ; (; Index ; imin, . Index ; imax . ). inlineov",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html:19841,efficient,efficient,19841,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html,1,['efficient'],['efficient']
Energy Efficiency,"ee, . bool ; _parallelSolve = false, . bool ; computeForceIsolatedInteractionForceFields = false . ). Function details. ◆ fwdInteractionForceField(). void sofa::simulation::SolveVisitor::fwdInteractionForceField ; (; Node * ; node, . core::behavior::BaseInteractionForceField * ; forceField . ). ◆ getCategoryName(). const char* sofa::simulation::SolveVisitor::getCategoryName ; (; ); const. inlineoverridevirtual . Return a category name for this action. Only used for debugging / profiling purposes ; Reimplemented from sofa::simulation::Visitor. ◆ getClassName(). const char* sofa::simulation::SolveVisitor::getClassName ; (; ); const. inlineoverridevirtual . Return a class name for this visitor Only used for debugging / profiling purposes ; Reimplemented from sofa::simulation::Visitor. ◆ getDt(). SReal sofa::simulation::SolveVisitor::getDt ; (; ); const. ◆ initializeTaskScheduler(). void sofa::simulation::SolveVisitor::initializeTaskScheduler ; (; ). protected . Initialize the task scheduler if it is not done already. . ◆ isThreadSafe(). bool sofa::simulation::SolveVisitor::isThreadSafe ; (; ); const. inlineoverridevirtual . Specify whether this action can be parallelized. ; Reimplemented from sofa::simulation::Visitor. ◆ parallelSolve(). void sofa::simulation::SolveVisitor::parallelSolve ; (; simulation::Node * ; node). protected . Function called if the solvers run concurrently Solving tasks are added to the list of tasks and start to run. However, there is no check that the tasks finished. This is done later, once all nodes have been traversed. . ◆ processNodeBottomUp(). void sofa::simulation::SolveVisitor::processNodeBottomUp ; (; simulation::Node * ; ). overridevirtual . Callback method called after child node have been processed and before going back to the parent node. ; Reimplemented from sofa::simulation::Visitor. ◆ processNodeTopDown(). Visitor::Result sofa::simulation::SolveVisitor::processNodeTopDown ; (; simulation::Node * ; ). overridevirtual . Callback met",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_solve_visitor.html:8361,schedul,scheduler,8361,api/master/sofa/html/classsofa_1_1simulation_1_1_solve_visitor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_solve_visitor.html,1,['schedul'],['scheduler']
Energy Efficiency,"ehavior::OdeSolver::~OdeSolver ; (; ). overrideprotected . Function details. ◆ computeResidual(). virtual void sofa::core::behavior::OdeSolver::computeResidual ; (; const core::ExecParams * ; , . SReal ; , . sofa::core::MultiVecCoordId ; , . sofa::core::MultiVecDerivId ;  . ). inlinevirtual . Compute the residual of the newton iteration; pos_t and vel_t are the position and velocities at the beginning of the time step the result is accumulated in Vecid::force() . ◆ getIntegrationFactor(). virtual SReal sofa::core::behavior::OdeSolver::getIntegrationFactor ; (; int ; , . int ;  . ); const. inlinevirtual . Given an input derivative order (0 for position, 1 for velocity, 2 for acceleration), how much will it affect the output derivative of the given order.; This method is used to compute the constraint corrections and adapt the resolution if using baumgart type scheme For example, a backward-Euler dynamic implicit integrator would use: Input: x_t v_t a_{t+dt} x_{t+dt} 1 dt dt^2 v_{t+dt} 0 1 dt; If the linear system is expressed on s = a_{t+dt} dt, then the final factors are: Input: x_t v_t a_t s x_{t+dt} 1 dt 0 dt v_{t+dt} 0 1 0 1 a_{t+dt} 0 0 0 1/dt The last column is returned by the getSolutionIntegrationFactor method.; FF: What is the meaning of the parameters ? ; Reimplemented in sofa::component::odesolver::backward::VariationalSymplecticSolver, sofa::component::odesolver::forward::RungeKutta4Solver, sofa::component::odesolver::forward::RungeKutta2Solver, sofa::component::odesolver::forward::EulerExplicitSolver, sofa::component::odesolver::forward::DampVelocitySolver, sofa::component::odesolver::forward::CentralDifferenceSolver, sofa::component::odesolver::backward::StaticSolver, sofa::component::odesolver::backward::NewmarkImplicitSolver, and sofa::component::odesolver::backward::EulerImplicitSolver. ◆ getPositionIntegrationFactor(). virtual SReal sofa::core::behavior::OdeSolver::getPositionIntegrationFactor ; (; ); const. inlinevirtual . Given the solution dx of ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_ode_solver.html:15176,adapt,adapt,15176,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_ode_solver.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_ode_solver.html,1,['adapt'],['adapt']
Energy Efficiency,"el1, core::CollisionModel *model2, DetectionOutputVector *contacts)=0;  End intersection tests between two collision models. Return the number of contacts written in the contacts vector. More...;  ; virtual std::string name () const =0;  ; virtual bool canIntersect (core::CollisionElementIterator, core::CollisionElementIterator)=delete;  ; virtual int intersect (core::CollisionElementIterator, core::CollisionElementIterator, DetectionOutputVector *)=delete;  . Constructor details. ◆ ~ElementIntersector(). virtual sofa::core::collision::ElementIntersector::~ElementIntersector ; (; ). inlinevirtual . Function details. ◆ beginIntersect(). virtual int sofa::core::collision::ElementIntersector::beginIntersect ; (; core::CollisionModel * ; model1, . core::CollisionModel * ; model2, . DetectionOutputVector *& ; contacts . ). pure virtual . Begin intersection tests between two collision models. Return the number of contacts written in the contacts vector. If the given contacts vector is nullptr, then this method should allocate it. ; Implemented in sofa::core::collision::MemberElementIntersector< Elem1, Elem2, T >, and sofa::component::collision::detection::algorithm::MirrorIntersector. ◆ canIntersect() [1/2]. virtual bool sofa::core::collision::ElementIntersector::canIntersect ; (; core::CollisionElementIterator ; elem1, . core::CollisionElementIterator ; elem2, . const core::collision::Intersection * ; currentIntersection . ). pure virtual . Test if 2 elements can collide. Note that this can be conservative (i.e. return true even when no collision is present) ; Implemented in sofa::core::collision::MemberElementIntersector< Elem1, Elem2, T >, and sofa::component::collision::detection::algorithm::MirrorIntersector. ◆ canIntersect() [2/2]. virtual bool sofa::core::collision::ElementIntersector::canIntersect ; (; core::CollisionElementIterator ; , . core::CollisionElementIterator ;  . ). virtualdelete . Reimplemented in sofa::core::collision::MemberElementIntersector< Elem1,",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_element_intersector.html:2244,allocate,allocate,2244,api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_element_intersector.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_element_intersector.html,1,['allocate'],['allocate']
Energy Efficiency,"eld_test< _ForceFieldType >; Helper for writing ForceField tests. The constructor creates a root node and adds it a State and a ForceField (of the parameter type of this template class). Pointers to node, state and force are available. Deriving the ForceField test from this class makes it easy to write: just call function run_test with positions, velocities and the corresponding expected forces. This function automatically checks not only the forces (function addForce), but also the stiffness (methods addDForce and addKToMatrix), using finite differences. ; AuthorFrançois Faure, 2014 . Public Attributes; Scene elements; { . DOF::SPtr dof;  ; ForceField::SPtr force;  ; simulation::Node::SPtr node;  ; Precision and control parameters; }; { . SReal errorMax;  tolerance in precision test. The actual value is this one times the epsilon of the Real numbers (typically float or double) More...;  ; SReal errorFactorPotentialEnergy;  The test for potential energy is successful if the (infinite norm of the) difference is less than errorFactorPotentialEnergy * errorMax *epsilon (default = 1) More...;  ; std::pair< Real, Real > deltaRange;  Minimum/Maximum amplitudes of the random perturbation used to check the stiffness using finite differences. More...;  ; bool checkStiffness;  If false, stops the test after checking the force, without checking the stiffness. Default value is true. More...;  ; bool debug;  ;  Public Attributes inherited from sofa::testing::BaseTest; sofa::testing::MessageAsTestFailure m_fatal;  ; sofa::testing::MessageAsTestFailure m_error;  . Tested API; }; { . unsigned char flags;  ; static const unsigned char TEST_POTENTIAL_ENERGY = 1;  testing getPotentialEnergy function. The tests will only work with conservative forces (if dissipative forces such as viscosity or damping are computed, the test is wrong) More...;  ; static const unsigned char TEST_ALL = UCHAR_MAX;  testing everything More...;  ;  ForceField_test ();  } More...;  ;  ForceField_test (std::st",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1_force_field__test.html:1942,energy,energy,1942,api/master/sofa/html/structsofa_1_1_force_field__test.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1_force_field__test.html,1,['energy'],['energy']
Energy Efficiency,"emented in sofa::component::statecontainer::MechanicalObject< DataTypes >, and sofa::component::statecontainer::MechanicalObject< T >. ◆ resetForce(). virtual void sofa::core::behavior::BaseMechanicalState::resetForce ; (; const ExecParams * ; params, . VecDerivId ; f = VecDerivId::force() . ). inlinevirtual . Set F = 0. ; Reimplemented in sofa::component::statecontainer::MechanicalObject< DataTypes >, and sofa::component::statecontainer::MechanicalObject< T >. ◆ SOFA_ABSTRACT_CLASS(). sofa::core::behavior::BaseMechanicalState::SOFA_ABSTRACT_CLASS ; (; BaseMechanicalState ; , . BaseState ;  . ). ◆ SOFA_BASE_CAST_IMPLEMENTATION(). sofa::core::behavior::BaseMechanicalState::SOFA_BASE_CAST_IMPLEMENTATION ; (; BaseMechanicalState ; ). ◆ vAlloc() [1/2]. virtual void sofa::core::behavior::BaseMechanicalState::vAlloc ; (; const ExecParams * ; params, . VecCoordId ; v, . const core::VecIdProperties & ; properties = {} . ). pure virtual . Increment the index of the given MatrixDerivId, so that all 'allocated' vectors in this state have a lower index. ; Allocate a new temporary vector ; Implemented in sofa::component::statecontainer::MechanicalObject< DataTypes >, and sofa::component::statecontainer::MechanicalObject< T >. ◆ vAlloc() [2/2]. virtual void sofa::core::behavior::BaseMechanicalState::vAlloc ; (; const ExecParams * ; params, . VecDerivId ; v, . const core::VecIdProperties & ; properties = {} . ). pure virtual . Allocate a new temporary vector. ; Implemented in sofa::component::statecontainer::MechanicalObject< DataTypes >, and sofa::component::statecontainer::MechanicalObject< T >. ◆ vAvail() [1/2]. virtual void sofa::core::behavior::BaseMechanicalState::vAvail ; (; const ExecParams * ; params, . VecCoordId & ; v . ). pure virtual . Implemented in sofa::component::statecontainer::MechanicalObject< DataTypes >, and sofa::component::statecontainer::MechanicalObject< T >. ◆ vAvail() [2/2]. virtual void sofa::core::behavior::BaseMechanicalState::vAvail ; (; const ExecP",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_mechanical_state.html:40416,allocate,allocated,40416,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_mechanical_state.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_mechanical_state.html,1,['allocate'],['allocated']
Energy Efficiency,"enter, . const Quaternion & ; orient, . const type::Vec3 & ; length . ). ◆ Axis() [4/8]. sofa::gl::Axis::Axis ; (; const type::Vec3 & ; center, . const double ; orient[4][4], . const type::Vec3 & ; length . ). ◆ Axis() [5/8]. sofa::gl::Axis::Axis ; (; const double * ; mat, . const type::Vec3 & ; length . ). ◆ Axis() [6/8]. sofa::gl::Axis::Axis ; (; const type::Vec3 & ; center, . const Quaternion & ; orient, . SReal ; length = 1.0_sreal . ). ◆ Axis() [7/8]. sofa::gl::Axis::Axis ; (; const type::Vec3 & ; center, . const double ; orient[4][4], . SReal ; length = 1.0_sreal . ). ◆ Axis() [8/8]. sofa::gl::Axis::Axis ; (; const double * ; mat, . SReal ; length = 1.0_sreal . ). ◆ ~Axis(). sofa::gl::Axis::~Axis ; (; ). Function details. ◆ clear(). static void sofa::gl::Axis::clear ; (; ). inlinestatic . ◆ draw() [1/16]. void sofa::gl::Axis::draw ; (; const double * ; mat, . const type::Vec3 & ; length, . const type::RGBAColor & ; colorX = type::RGBAColor::red(), . const type::RGBAColor & ; colorY = type::RGBAColor::green(), . const type::RGBAColor & ; colorZ = type::RGBAColor::red() . ). static . ◆ draw() [2/16]. void sofa::gl::Axis::draw ; (; const double * ; mat, . const type::Vec3 & ; length, . const type::Vec4f & ; colorX = type::Vec4f(1, 0, 0, 1), . const type::Vec4f & ; colorY = type::Vec4f(0, 1, 0, 1), . const type::Vec4f & ; colorZ = type::Vec4f(0, 0, 1, 1) . ). delete . ◆ draw() [3/16]. void sofa::gl::Axis::draw ; (; const double * ; mat, . SReal ; length = 1.0_sreal, . const type::RGBAColor & ; colorX = type::RGBAColor::red(), . const type::RGBAColor & ; colorY = type::RGBAColor::green(), . const type::RGBAColor & ; colorZ = type::RGBAColor::red() . ). static . ◆ draw() [4/16]. static void sofa::gl::Axis::draw ; (; const double * ; mat, . SReal ; length = 1.0_sreal, . const type::Vec4f & ; colorX = type::Vec4f(1, 0, 0, 1), . const type::Vec4f & ; colorY = type::Vec4f(0, 1, 0, 1), . const type::Vec4f & ; colorZ = type::Vec4f(0, 0, 1, 1) . ). staticdelete . ◆ draw() [",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1_axis.html:6068,green,green,6068,api/master/sofa/html/classsofa_1_1gl_1_1_axis.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1_axis.html,1,['green'],['green']
Energy Efficiency,ents-of-an-object; ; SOFA - Topic: Constrain and control movements of an object. /constraining-a-spring; ; SOFA - Topic: [SOLVED] Constraining a spring. /constraint-on-collision-model-points; ; SOFA - Topic: Constraint on collision model points. /constraint-tutorial-scene-crash; . /feed; ; [SOLVED] Constraint Tutorial scene crash – SOFA. SOFA - Topic: [SOLVED] Constraint Tutorial scene crash. /contactlistener-error-on-sofapython3; ; SOFA - Topic: [SOLVED] ContactListener error on SofaPython3. /continuous-collision-detection; ; SOFA - Topic: Continuous collision detection. /continuously-grid-topology; ; SOFA - Topic: [SOLVED] Continuously Grid Topology. /continuous-rotation-of-view-by-mouse-click-and-move; ; SOFA - Topic: [SOLVED] Continuous rotation of view by mouse click and move. /contributing-to-sofa; ; SOFA - Topic: [SOLVED] Contributing to SOFA. /contributor-list-updated; ; SOFA - Topic: Contributor list updated!. /control-actuators-and-receive-sensor-variables-of-scene-scn; ; SOFA - Topic: Control actuators and receive sensor variables of scene .scn. /control-actuators-and-receive-sensor-variables-of-scene-scn-legged-robot; ; SOFA - Topic: [SOLVED] Control actuators and receive sensor variables of scene .scn Legged Robot. /converting-the-stl-mesh-to-vtk-mesh; ; SOFA - Topic: [SOLVED] Converting the STL mesh to VTK mesh. /could-not-find-git-for-clone-of-sofapython3; ; SOFA - Topic: [SOLVED] could not find git for clone of SofaPython3. /could-not-read-value-for-data-field-position-and-segfault; ; SOFA - Topic: [SOLVED] “Could not read value for data field position” and segfault. /could-sofa-use-full-python-instead-of-being-embedded-in-xml-file-using-component; . /feed; ; [SOLVED] Could sofa use full Python instead of being embedded in XML file using component – SOFA. SOFA - Topic: [SOLVED] Could sofa use full Python instead of being embedded in XML file using component. /could-you-explain-the-difference-between-geomaigc-and-sensible-plugin; . /feed; ; [SOLVED] C,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/index-wcopy.html:281363,sensor,sensor-variables-of-scene-scn,281363,index-wcopy.html,https://www.sofa-framework.org,https://www.sofa-framework.org/index-wcopy.html,2,['sensor'],"['sensor', 'sensor-variables-of-scene-scn']"
Energy Efficiency,"error-with-test-scene-required-plugins-error; ; SOFA - Topic: [SOLVED] Error with test scene, Required plugins error. /error-with-tetrahedraltensormassforcefield; ; SOFA - Topic: [SOLVED] error with TetrahedralTensorMassForceField. /estimate-pressure; ; SOFA - Topic: [SOLVED] Estimate Pressure. /estimating-external-force-on-a-vertex; ; SOFA - Topic: Estimating external force on a vertex. /evaluate-forces-whitout-using-visitors; ; SOFA - Topic: [SOLVED] Evaluate forces whitout using visitors. /examples-for-simulating-interacting-models; ; SOFA - Topic: Examples for simulating interacting models. /executation-time; ; SOFA - Topic: [SOLVED] execution time. /exploding-bunny; ; SOFA - Topic: Exploding bunny. /export-data-with-writestate; ; SOFA - Topic: [SOLVED] Export data with WriteState. /export-graph-button-causes-runsofa-to-segfault-sigsegv-and-crash; ; SOFA - Topic: [SOLVED] Export Graph Button causes runSofa to segfault (SIGSEGV) and crash. /exporting-files-using-monitor; ; SOFA - Topic: [SOLVED] Exporting files using Monitor. /exporting-forcefields; . /feed; ; [SOLVED] exporting forcefields – SOFA. /page; . /2; ; SOFA - Topic: [SOLVED] exporting forcefields. /3; ; SOFA - Topic: [SOLVED] exporting forcefields. /5; ; SOFA - Topic: [SOLVED] exporting forcefields. SOFA - Topic: [SOLVED] exporting forcefields. /exporting-obj-files-wrong-normals; ; SOFA - Topic: Exporting OBJ files : wrong normals. /exporting-states; . /feed; ; [SOLVED] Exporting States – SOFA. SOFA - Topic: [SOLVED] Exporting States. /exporting-the-visual-model; ; SOFA - Topic: [SOLVED] exporting the visual model. /export-object-velocity-and-position-values-in-each-time-step; ; SOFA - Topic: [SOLVED] Export Object velocity and position values in each time step. /exportsave-displacement-field-of-a-simulation; ; SOFA - Topic: [SOLVED] Export/Save displacement field of a simulation. /export-the-state-of-a-specified-node; ; SOFA - Topic: [SOLVED] Export the state of a specified node. /external-force-on-a-",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/index-wcopy.html:300474,monitor,monitor,300474,index-wcopy.html,https://www.sofa-framework.org,https://www.sofa-framework.org/index-wcopy.html,1,['monitor'],['monitor']
Energy Efficiency,"es1 , class DataTypes2 > . void sofa::core::behavior::MixedInteractionForceField< DataTypes1, DataTypes2 >::addForce ; (; const MechanicalParams * ; mparams, . MultiVecDerivId ; fId . ). overridevirtual . Given the current position and velocity states, update the current force vector by computing and adding the forces associated with this ForceField.; If the ForceField can be represented as a matrix, this method computes $ f += B v + K x $; This method retrieves the force, x and v vector from the two MechanicalState and call the internal addForce(VecDeriv&,VecDeriv&,const VecCoord&,const VecCoord&,const VecDeriv&,const VecDeriv&) method implemented by the component. ; Implements sofa::core::behavior::BaseForceField. ◆ getPotentialEnergy() [1/2]. template<class DataTypes1 , class DataTypes2 > . SReal sofa::core::behavior::MixedInteractionForceField< DataTypes1, DataTypes2 >::getPotentialEnergy ; (; const MechanicalParams * ; mparams); const. overridevirtual . Get the potential energy associated to this ForceField.; Used to estimate the total energy of the system by some post-stabilization techniques.; This method retrieves the x vector from the MechanicalState and call the internal getPotentialEnergy(const VecCoord&,const VecCoord&) method implemented by the component. ; Implements sofa::core::behavior::BaseForceField. ◆ getPotentialEnergy() [2/2]. template<class TDataTypes1 , class TDataTypes2 > . virtual SReal sofa::core::behavior::MixedInteractionForceField< TDataTypes1, TDataTypes2 >::getPotentialEnergy ; (; const MechanicalParams * ; mparams, . const DataVecCoord1 & ; x1, . const DataVecCoord2 & ; x2 . ); const. pure virtual . Get the potential energy associated to this ForceField.; Used to estimate the total energy of the system by some post-stabilization techniques.; This method must be implemented by the component, and is usually called by the generic MixedInteractionForceField::getPotentialEnergy() method. ; Implemented in sofa::component::mechanicalload::In",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_mixed_interaction_force_field.html:23732,energy,energy,23732,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_mixed_interaction_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_mixed_interaction_force_field.html,1,['energy'],['energy']
Energy Efficiency,eshloader – SOFA. SOFA - Topic Tag: meshloader. /metis; . /feed; ; metis – SOFA. SOFA - Topic Tag: metis. /missing-dll; . /feed; ; Missing dll – SOFA. SOFA - Topic Tag: Missing dll. /missing-header; . /feed; ; Missing Header – SOFA. SOFA - Topic Tag: Missing Header. /mobile-app; . /feed; ; mobile app – SOFA. SOFA - Topic Tag: mobile app. /model; . /feed; ; model – SOFA. SOFA - Topic Tag: model. /modeler; . /feed; ; modeler – SOFA. SOFA - Topic Tag: modeler. /modeler-exe-error; . /feed; ; Modeler.exe error – SOFA. SOFA - Topic Tag: Modeler.exe error. /modeler-usage; . /feed; ; Modeler usage – SOFA. SOFA - Topic Tag: Modeler usage. /modelorderreduction; . /feed; ; ModelOrderReduction – SOFA. SOFA - Topic Tag: ModelOrderReduction. /model-order-reduction; . /feed; ; model order reduction – SOFA. SOFA - Topic Tag: model order reduction. /modification; . /feed; ; modification – SOFA. SOFA - Topic Tag: modification. /monitor; . /feed; ; Monitor – SOFA. SOFA - Topic Tag: Monitor. /monitor-object-exporting; . /feed; ; Monitor Object; Exporting – SOFA. SOFA - Topic Tag: Monitor Object; Exporting. /monitor-objects; . /feed; ; Monitor objects – SOFA. SOFA - Topic Tag: Monitor objects. /mor; . /feed; ; MOR – SOFA. SOFA - Topic Tag: MOR. /motor; . /feed; ; Motor – SOFA. SOFA - Topic Tag: Motor. /mouse; . /feed; ; mouse – SOFA. SOFA - Topic Tag: mouse. /mouse-interaction; . /feed; ; mouse interaction – SOFA. SOFA - Topic Tag: mouse interaction. /mouse-manager; . /feed; ; Mouse Manager – SOFA. SOFA - Topic Tag: Mouse Manager. /mouse-manager-properties-call-in-xml-scene; . /feed; ; Mouse Manager properties call in Xml scene. – SOFA. SOFA - Topic Tag: Mouse Manager properties call in Xml scene. /move; . /feed; ; move – SOFA. SOFA - Topic Tag: move. /movement; . /feed; ; movement – SOFA. SOFA - Topic Tag: movement. /moving; . /feed; ; moving – SOFA. SOFA - Topic Tag: moving. /msh; . /feed; ; msh – SOFA. SOFA - Topic Tag: msh. /msh-fem-liver-demo-macos; . /feed; ; msh FEM liver-demo Mac,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/index-wcopy.html:457951,monitor,monitor-object-exporting,457951,index-wcopy.html,https://www.sofa-framework.org,https://www.sofa-framework.org/index-wcopy.html,1,['monitor'],['monitor-object-exporting']
Energy Efficiency,"etMass () const;  ; SReal getTotalMass () const;  ; void setTotalMass (SReal m);  ; void setFileMass (const std::string &file);  }@ More...;  ; std::string getFileMass () const;  ; void loadRigidMass (const std::string &filename);  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; void initDefaultImpl ();  ; Check and standard initialization functions from mass information; virtual bool checkVertexMass ();  ; virtual void initFromVertexMass ();  ; virtual bool checkTotalMass ();  ; virtual void initFromTotalMass ();  ;  Public Member Functions inherited from sofa::core::behavior::Mass< DataTypes >;  SOFA_CLASS2 (SOFA_TEMPLATE(Mass, DataTypes), SOFA_TEMPLATE(ForceField, DataTypes), BaseMass);  ; void initGnuplot (const std::string path) override;  initialization to export kinetic and potential energy to gnuplot files format More...;  ; void exportGnuplot (const MechanicalParams *mparams, SReal time) override;  export kinetic and potential energy state at ""time"" to a gnuplot file More...;  ; void addGravityToV (const MechanicalParams *mparams, MultiVecDerivId) override;  perform v += dt*g operation. Used if mass wants to added G separately from the other forces to v. More...;  ; SReal getElementMass (sofa::Index) const override;  recover the mass of an element More...;  ; void getElementMass (sofa::Index index, linearalgebra::BaseMatrix *m) const override;  Get the matrix relative to the DOF at index. More...;  ; bool insertInNode (objectmodel::BaseNode *node) override;  ; bool removeInNode (objectmodel::BaseNode *node) override;  ; void addMDx (const MechanicalParams *mparams, MultiVecDerivId fid, SReal factor) override;  f += factor M dx More...;  ; void accFromF (const MechanicalParams *mparams, MultiVecDerivId aid) override;  ; void addDForce (const MechanicalParams *, DataVecDeriv &, const DataVecDeriv &) override;  Mass forces (gravity) often have null derivative. More...;  ; void ad",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_uniform_mass.html:9374,energy,energy,9374,api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_uniform_mass.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_uniform_mass.html,1,['energy'],['energy']
Energy Efficiency,"fa::component::mechanicalload::QuadPressureForceField< DataTypes >, sofa::component::mechanicalload::DiagonalVelocityDampingForceField< DataTypes >, sofa::component::mass::UniformMass< DataTypes >, sofa::component::mass::MeshMatrixMass< DataTypes, GeometricalTypes >, sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >, and sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >. ◆ getComplianceMatrix(). virtual const sofa::linearalgebra::BaseMatrix* sofa::core::behavior::BaseForceField::getComplianceMatrix ; (; const MechanicalParams * ; ). inlinevirtual . Return a pointer to the compliance matrix C . ◆ getPotentialEnergy(). virtual SReal sofa::core::behavior::BaseForceField::getPotentialEnergy ; (; const MechanicalParams * ; mparams = mechanicalparams::defaultInstance()); const. pure virtual . Get the potential energy associated to this ForceField during the last call of addForce( const MechanicalParams* mparams );. ; Used to estimate the total energy of the system by some post-stabilization techniques. ; Implemented in sofa::core::behavior::PairInteractionForceField< TDataTypes >, sofa::core::behavior::PairInteractionForceField< DataTypes >, sofa::core::behavior::MixedInteractionForceField< TDataTypes1, TDataTypes2 >, sofa::core::behavior::Mass< DataTypes >, sofa::core::behavior::ForceField< TDataTypes >, sofa::core::behavior::ForceField< _DataTypes >, sofa::core::behavior::ForceField< T >, sofa::core::behavior::ForceField< DataTypes >, sofa::component::solidmechanics::tensormass::TetrahedralTensorMassForceField< DataTypes >, and sofa::component::solidmechanics::fem::elastic::HexahedronFEMForceFieldAndMass< DataTypes >. ◆ insertInNode(). bool sofa::core::behavior::BaseForceField::insertInNode ; (; objectmodel::BaseNode * ; ). overridevirtual . the component can insert itself directly in the right sequence in the Node so the Node does not have to test its type against all known types Returnstrue if the component was inserted ; Reimplemented",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_force_field.html:33701,energy,energy,33701,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_force_field.html,1,['energy'],['energy']
Energy Efficiency,"fa::component::statecontainer::MechanicalObject< DataTypes >, and sofa::component::statecontainer::MechanicalObject< T >. ◆ vAlloc() [2/2]. virtual void sofa::core::behavior::BaseMechanicalState::vAlloc ; (; const ExecParams * ; params, . VecDerivId ; v, . const core::VecIdProperties & ; properties = {} . ). pure virtual . Allocate a new temporary vector. ; Implemented in sofa::component::statecontainer::MechanicalObject< DataTypes >, and sofa::component::statecontainer::MechanicalObject< T >. ◆ vAvail() [1/2]. virtual void sofa::core::behavior::BaseMechanicalState::vAvail ; (; const ExecParams * ; params, . VecCoordId & ; v . ). pure virtual . Implemented in sofa::component::statecontainer::MechanicalObject< DataTypes >, and sofa::component::statecontainer::MechanicalObject< T >. ◆ vAvail() [2/2]. virtual void sofa::core::behavior::BaseMechanicalState::vAvail ; (; const ExecParams * ; params, . VecDerivId & ; v . ). pure virtual . Increment the index of the given VecDerivId, so that all 'allocated' vectors in this state have a lower index. ; Implemented in sofa::component::statecontainer::MechanicalObject< DataTypes >, and sofa::component::statecontainer::MechanicalObject< T >. ◆ vDot(). virtual SReal sofa::core::behavior::BaseMechanicalState::vDot ; (; const ExecParams * ; params, . ConstVecId ; a, . ConstVecId ; b . ). pure virtual . Compute the scalar products between two vectors. ; Implemented in sofa::component::statecontainer::MechanicalObject< DataTypes >, and sofa::component::statecontainer::MechanicalObject< T >. ◆ vFree() [1/2]. virtual void sofa::core::behavior::BaseMechanicalState::vFree ; (; const ExecParams * ; params, . VecCoordId ; v . ). pure virtual . Free a temporary vector. ; Implemented in sofa::component::statecontainer::MechanicalObject< DataTypes >, and sofa::component::statecontainer::MechanicalObject< T >. ◆ vFree() [2/2]. virtual void sofa::core::behavior::BaseMechanicalState::vFree ; (; const ExecParams * ; params, . VecDerivId ; v . ). p",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_mechanical_state.html:41526,allocate,allocated,41526,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_mechanical_state.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_mechanical_state.html,1,['allocate'],['allocated']
Energy Efficiency,"fa::type::Vec4f);  ;  SOFA_ATTRIBUTE_REPLACED__TYPEMEMBER (Vec3d, sofa::type::Vec3d);  ;  Axis (SReal len=1.0_sreal);  ;  Axis (const type::Vec3 &len);  ;  Axis (const type::Vec3 &center, const Quaternion &orient, const type::Vec3 &length);  ;  Axis (const type::Vec3 &center, const double orient[4][4], const type::Vec3 &length);  ;  Axis (const double *mat, const type::Vec3 &length);  ;  Axis (const type::Vec3 &center, const Quaternion &orient, SReal length=1.0_sreal);  ;  Axis (const type::Vec3 &center, const double orient[4][4], SReal length=1.0_sreal);  ;  Axis (const double *mat, SReal length=1.0_sreal);  ;  ~Axis ();  ; void update (const type::Vec3 &center, const Quaternion &orient=Quaternion());  ; void update (const type::Vec3 &center, const double orient[4][4]);  ; void update (const double *mat);  ; void draw (const type::RGBAColor &colorX=type::RGBAColor::red(), const type::RGBAColor &colorY=type::RGBAColor::green(), const type::RGBAColor &colorZ=type::RGBAColor::red());  ; void draw (const type::Vec4f &colorX=type::Vec4f(1, 0, 0, 1), const type::Vec4f &colorY=type::Vec4f(0, 1, 0, 1), const type::Vec4f &colorZ=type::Vec4f(0, 0, 1, 1))=delete;  ; void draw (const double *mat, const type::Vec3 &length, const type::Vec4f &colorX=type::Vec4f(1, 0, 0, 1), const type::Vec4f &colorY=type::Vec4f(0, 1, 0, 1), const type::Vec4f &colorZ=type::Vec4f(0, 0, 1, 1))=delete;  . Static Public Member Functions; static void draw (const type::Vec3 &center, const Quaternion &orient, const type::Vec3 &length, const type::RGBAColor &colorX=type::RGBAColor::red(), const type::RGBAColor &colorY=type::RGBAColor::green(), const type::RGBAColor &colorZ=type::RGBAColor::red());  ; static void draw (const type::Vec3 &center, const double orient[4][4], const type::Vec3 &length, const type::RGBAColor &colorX=type::RGBAColor::red(), const type::RGBAColor &colorY=type::RGBAColor::green(), const type::RGBAColor &colorZ=type::RGBAColor::red());  ; static void draw (const double *mat, const t",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1_axis.html:1328,green,green,1328,api/master/sofa/html/classsofa_1_1gl_1_1_axis.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1_axis.html,1,['green'],['green']
Energy Efficiency,"field. More...;  ; void addAlias (BaseData *field, const char *alias);  Add an alias to a Data. More...;  ; void addLink (BaseLink *l);  Add a link. More...;  ; void addAlias (BaseLink *link, const char *alias);  Add an alias to a Link. More...;  ; const VecData & getDataFields () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapData & getDataAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; const VecLink & getLinks () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapLink & getLinkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Protected Member Functions;  CompositeLinearSystem ();  ; void allocateSystem () override;  ; void resizeVectors (sofa::Size n) override;  Set the size of RHS and solution to n. More...;  ; void preAssembleSystem (const core::MechanicalParams *) override;  ; void assembleSystem (const core::MechanicalParams *) override;  ; void postAssembleSystem (const core::MechanicalParams *) override;  List of linear systems to assemble. More...;  ;  Protected Member Functions inherited from sofa::component::linearsystem::TypedMatrixLinearSystem< TMatrix, TVector >; void preAssembleSystem (const core::MechanicalParams *) override;  ; virtual void associateLocalMatrixToComponents (const core::MechanicalParams *);  ; void copyLocalVectorToGlobalVector (core::MultiVecDerivId v, TVector *globalVector);  ; SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API void copyLocalVectorToGlobalVector (core::MultiVecDerivId v, GraphScatteredVector *globalVector);  ; void copyLocalVectorToGlobalVector (core::MultiVecDerivId v, GraphScatteredVector *globalVector);  ;  Protected Member Functions inherited from s",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsystem_1_1_composite_linear_system.html:14017,allocate,allocateSystem,14017,api/master/sofa/html/classsofa_1_1component_1_1linearsystem_1_1_composite_linear_system.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsystem_1_1_composite_linear_system.html,1,['allocate'],['allocateSystem']
Energy Efficiency,"float, 4 > & ; color). static . ◆ fromString(). RGBAColor sofa::type::RGBAColor::fromString ; (; const std::string & ; str). static . ◆ fromVec4() [1/4]. static RGBAColor sofa::type::RGBAColor::fromVec4 ; (; const type::fixed_array< double, 4 > & ; color). staticdelete . ◆ fromVec4() [2/4]. static RGBAColor sofa::type::RGBAColor::fromVec4 ; (; const type::fixed_array< float, 4 > & ; color). staticdelete . ◆ fromVec4() [3/4]. static RGBAColor sofa::type::RGBAColor::fromVec4 ; (; const Vec4d & ; color). staticdelete . ◆ fromVec4() [4/4]. static RGBAColor sofa::type::RGBAColor::fromVec4 ; (; const Vec4f & ; color). staticdelete . ◆ g() [1/3]. constexpr float& sofa::type::RGBAColor::g ; (; ). inlineconstexpr . ◆ g() [2/3]. constexpr const float& sofa::type::RGBAColor::g ; (; ); const. inlineconstexpr . ◆ g() [3/3]. constexpr void sofa::type::RGBAColor::g ; (; const float ; g). inlineconstexpr . ◆ gray(). constexpr const RGBAColor & sofa::type::RGBAColor::gray ; (; ). staticconstexpr . ◆ green(). constexpr const RGBAColor & sofa::type::RGBAColor::green ; (; ). staticconstexpr . ◆ lighten(). RGBAColor sofa::type::RGBAColor::lighten ; (; const RGBAColor & ; in, . const SReal ; factor . ). static . enlight a color by a given factor. . ◆ lightgray(). constexpr const RGBAColor & sofa::type::RGBAColor::lightgray ; (; ). staticconstexpr . ◆ magenta(). constexpr const RGBAColor & sofa::type::RGBAColor::magenta ; (; ). staticconstexpr . ◆ operator!=(). bool sofa::type::RGBAColor::operator!= ; (; const RGBAColor & ; b); const. inline . ◆ operator*(). RGBAColor sofa::type::RGBAColor::operator* ; (; float ; f); const. ◆ operator<(). bool sofa::type::RGBAColor::operator< ; (; const RGBAColor & ; b); const. inline . ◆ operator==(). bool sofa::type::RGBAColor::operator== ; (; const RGBAColor & ; b); const. inline . ◆ operator[]() [1/2]. constexpr float& sofa::type::RGBAColor::operator[] ; (; std::size_t ; i). inlineconstexpr . ◆ operator[]() [2/2]. constexpr const float& sofa::type::RGB",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_r_g_b_a_color.html:8063,green,green,8063,api/master/sofa/html/classsofa_1_1type_1_1_r_g_b_a_color.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_r_g_b_a_color.html,1,['green'],['green']
Energy Efficiency,"formMass< DataTypes >, sofa::component::mass::UniformMass< DataTypes >, sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >, sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >, sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >, sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >, sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >, sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >, sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >, sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >, sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >, sofa::component::mass::UniformMass< DataTypes >, and sofa::component::mass::UniformMass< DataTypes >. ◆ initGnuplot(). template<class DataTypes > . void sofa::core::behavior::Mass< DataTypes >::initGnuplot ; (; const std::string ; path). overridevirtual . initialization to export kinetic and potential energy to gnuplot files format ; Implements sofa::core::behavior::BaseMass. ◆ insertInNode(). template<class DataTypes > . bool sofa::core::behavior::Mass< DataTypes >::insertInNode ; (; objectmodel::BaseNode * ; ). inlineoverridevirtual . the component can insert itself directly in the right sequence in the Node so the Node does not have to test its type against all known types Returnstrue if the component was inserted ; Reimplemented from sofa::core::behavior::BaseMass. ◆ removeInNode(). template<class DataTypes > . bool sofa::core::behavior::Mass< DataTypes >::removeInNode ; (; objectmodel::BaseNode * ; ). inlineoverridevirtual . the component can remove itself directly in the right sequence in the Node so the Node does not have to test its type against all known types Returnstrue if the component was removed ; Reimplemented from sofa::core::behavior::BaseMass. ◆ SOFA_CLASS2(). template<class DataTypes > . sofa::core::behavior::Mass< DataTypes >::SOFA_CLASS2 ; (; SOFA_TEMPLATE(Mass< DataTypes >, ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_mass.html:35096,energy,energy,35096,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_mass.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_mass.html,1,['energy'],['energy']
Energy Efficiency,g-dll; . /feed; ; Missing dll – SOFA. SOFA - Topic Tag: Missing dll. /missing-header; . /feed; ; Missing Header – SOFA. SOFA - Topic Tag: Missing Header. /mobile-app; . /feed; ; mobile app – SOFA. SOFA - Topic Tag: mobile app. /model; . /feed; ; model – SOFA. SOFA - Topic Tag: model. /modeler; . /feed; ; modeler – SOFA. SOFA - Topic Tag: modeler. /modeler-exe-error; . /feed; ; Modeler.exe error – SOFA. SOFA - Topic Tag: Modeler.exe error. /modeler-usage; . /feed; ; Modeler usage – SOFA. SOFA - Topic Tag: Modeler usage. /modelorderreduction; . /feed; ; ModelOrderReduction – SOFA. SOFA - Topic Tag: ModelOrderReduction. /model-order-reduction; . /feed; ; model order reduction – SOFA. SOFA - Topic Tag: model order reduction. /modification; . /feed; ; modification – SOFA. SOFA - Topic Tag: modification. /monitor; . /feed; ; Monitor – SOFA. SOFA - Topic Tag: Monitor. /monitor-object-exporting; . /feed; ; Monitor Object; Exporting – SOFA. SOFA - Topic Tag: Monitor Object; Exporting. /monitor-objects; . /feed; ; Monitor objects – SOFA. SOFA - Topic Tag: Monitor objects. /mor; . /feed; ; MOR – SOFA. SOFA - Topic Tag: MOR. /motor; . /feed; ; Motor – SOFA. SOFA - Topic Tag: Motor. /mouse; . /feed; ; mouse – SOFA. SOFA - Topic Tag: mouse. /mouse-interaction; . /feed; ; mouse interaction – SOFA. SOFA - Topic Tag: mouse interaction. /mouse-manager; . /feed; ; Mouse Manager – SOFA. SOFA - Topic Tag: Mouse Manager. /mouse-manager-properties-call-in-xml-scene; . /feed; ; Mouse Manager properties call in Xml scene. – SOFA. SOFA - Topic Tag: Mouse Manager properties call in Xml scene. /move; . /feed; ; move – SOFA. SOFA - Topic Tag: move. /movement; . /feed; ; movement – SOFA. SOFA - Topic Tag: movement. /moving; . /feed; ; moving – SOFA. SOFA - Topic Tag: moving. /msh; . /feed; ; msh – SOFA. SOFA - Topic Tag: msh. /msh-fem-liver-demo-macos; . /feed; ; msh FEM liver-demo MacOS – SOFA. SOFA - Topic Tag: msh FEM liver-demo MacOS. /msh-file; . /feed; ; msh file – SOFA. SOFA - Topic Tag: ,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/index-wcopy.html:458068,monitor,monitor-objects,458068,index-wcopy.html,https://www.sofa-framework.org,https://www.sofa-framework.org/index-wcopy.html,1,['monitor'],['monitor-objects']
Energy Efficiency,g: Distortion. /dlls-issue; . /feed; ; DLLs issue – SOFA. SOFA - Topic Tag: DLLs issue. /docker; . /feed; ; docker – SOFA. SOFA - Topic Tag: docker. /documentation; . /feed; ; documentation – SOFA. SOFA - Topic Tag: documentation. /documentation-color-alpha; . /feed; ; documentation color alpha – SOFA. SOFA - Topic Tag: documentation color alpha. /doe; . /feed; ; doe – SOFA. SOFA - Topic Tag: doe. /dynamic-systems; . /feed; ; Dynamic systems – SOFA. SOFA - Topic Tag: Dynamic systems. /edge_removal; . /feed; ; edge_removal – SOFA. SOFA - Topic Tag: edge_removal. /eigen; . /feed; ; Eigen – SOFA. SOFA - Topic Tag: Eigen. /elastic; . /feed; ; Elastic – SOFA. SOFA - Topic Tag: Elastic. /elasticity; . /feed; ; elasticity – SOFA. SOFA - Topic Tag: elasticity. /elastoplastic; . /feed; ; Elastoplastic – SOFA. SOFA - Topic Tag: Elastoplastic. /energy; . /feed; ; Energy – SOFA. SOFA - Topic Tag: Energy. /engine-data-update-energy; . /feed; ; engine data update energy – SOFA. SOFA - Topic Tag: engine data update energy. /error; . /feed; ; error – SOFA. SOFA - Topic Tag: error. /error-5; . /feed; ; Error 5 – SOFA. SOFA - Topic Tag: Error 5. /error-determination; . /feed; ; error determination – SOFA. SOFA - Topic Tag: error determination. /event; . /feed; ; event – SOFA. SOFA - Topic Tag: event. /events; . /feed; ; events – SOFA. SOFA - Topic Tag: events. /execution-time; . /feed; ; Execution time – SOFA. SOFA - Topic Tag: Execution time. /experience; . /feed; ; experience – SOFA. SOFA - Topic Tag: experience. /export; . /feed; ; export – SOFA. SOFA - Topic Tag: export. /exporter-obj-files-normals-estimation; . /feed; ; exporter ; OBJ files ; normals estimation – SOFA. SOFA - Topic Tag: exporter ; OBJ files ; normals estimation. /export-mesh; . /feed; ; export mesh – SOFA. SOFA - Topic Tag: export mesh. /external; . /feed; ; external – SOFA. SOFA - Topic Tag: external. /external-data-com-port; . /feed; ; external data COM port – SOFA. SOFA - Topic Tag: external data COM port. /ex,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/index-wcopy.html:441547,energy,energy,441547,index-wcopy.html,https://www.sofa-framework.org,https://www.sofa-framework.org/index-wcopy.html,1,['energy'],['energy']
Energy Efficiency,gue. /configurations; . /feed; ; configurations – SOFA. SOFA - Topic Tag: configurations. /connect; . /feed; ; connect – SOFA. SOFA - Topic Tag: connect. /connect-sofa; . /feed; ; Connect SOFA – SOFA. SOFA - Topic Tag: Connect SOFA. /constraint; . /feed; ; constraint – SOFA. SOFA - Topic Tag: constraint. /constraint-forces; . /feed; ; Constraint Forces – SOFA. SOFA - Topic Tag: Constraint Forces. /constraintresolution-h; . /feed; ; ConstraintResolution.h – SOFA. SOFA - Topic Tag: ConstraintResolution.h. /constraints; . /feed; ; constraints – SOFA. SOFA - Topic Tag: constraints. /constraint-solver; . /feed; ; Constraint Solver – SOFA. SOFA - Topic Tag: Constraint Solver. /contact; . /feed; ; contact – SOFA. SOFA - Topic Tag: contact. /contact-force; . /feed; ; contact force – SOFA. SOFA - Topic Tag: contact force. /contactlistener; . /feed; ; contactlistener – SOFA. SOFA - Topic Tag: contactlistener. /contain; . /feed; ; contain – SOFA. SOFA - Topic Tag: contain. /continuum-robots-beam-adaptater-constraints; . /feed; ; continuum robots; beam adaptater; constraints – SOFA. SOFA - Topic Tag: continuum robots; beam adaptater; constraints. /control; . /feed; ; control – SOFA. SOFA - Topic Tag: control. /controller; . /feed; ; Controller – SOFA. SOFA - Topic Tag: Controller. /control-xml-variables-in-c-or-python; . /feed; ; Control xml variables in C++ or Python. – SOFA. SOFA - Topic Tag: Control xml variables in C++ or Python. /coulomb; . /feed; ; coulomb – SOFA. SOFA - Topic Tag: coulomb. /cpp-controller; . /feed; ; Cpp controller – SOFA. SOFA - Topic Tag: Cpp controller. /cpp-make-error; . /feed; ; cpp make error – SOFA. SOFA - Topic Tag: cpp make error. /cpp-plugins; . /feed; ; cpp plugins – SOFA. SOFA - Topic Tag: cpp plugins. /crash; . /feed; ; crash – SOFA. SOFA - Topic Tag: crash. /crevice; . /feed; ; crevice – SOFA. SOFA - Topic Tag: crevice. /cube; . /feed; ; cube – SOFA. SOFA - Topic Tag: cube. /cuda; . /feed; ; Cuda – SOFA. SOFA - Topic Tag: Cuda. /cuda-benchm,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/index-wcopy.html:437426,adapt,adaptater-constraints,437426,index-wcopy.html,https://www.sofa-framework.org,https://www.sofa-framework.org/index-wcopy.html,1,['adapt'],['adaptater-constraints']
Energy Efficiency,"gy from the source BaseTopology. More...;  ; void updateTopologicalMappingTopDown () override;  Method called at each topological changes propagation which comes from the INPUT topology to adapt the OUTPUT topology : More...;  ; Index getGlobIndex (Index ind) override;  ; Index getFromIndex (Index ind) override;  ;  Public Member Functions inherited from sofa::core::topology::TopologicalMapping;  SOFA_ABSTRACT_CLASS (TopologicalMapping, objectmodel::BaseObject);  ; virtual void setTopologies (In *from, Out *to);  Specify the input and output models. More...;  ; void setPathInputObject (const std::string &o);  Set the path to the objects mapped in the scene graph. More...;  ; void setPathOutputObject (const std::string &o);  ; In * getFrom ();  Accessor to the INPUT topology of the TopologicalMapping : More...;  ; Out * getTo ();  Accessor to the OUTPUT topology of the TopologicalMapping : More...;  ; virtual void updateTopologicalMappingBottomUp ();  Method called at each topological changes propagation which comes from the OUTPUT topology to adapt the INPUT topology : More...;  ; virtual bool propagateFromInputToOutputModel ();  Return true if this mapping is able to propagate topological changes from input to output model. More...;  ; virtual bool propagateFromOutputToInputModel ();  Return true if this mapping is able to propagate topological changes from output to input model. More...;  ; virtual bool isTheOutputTopologySubdividingTheInputOne ();  return true if the output topology subdivide the input one. (the topology uses the Loc2GlobVec/Glob2LocMap/In2OutMap structs and share the same DOFs) More...;  ; const std::map< Index, Index > & getGlob2LocMap ();  Accessor to index maps : More...;  ; void dumpGlob2LocMap ();  ; void dumpLoc2GlobVec ();  ; virtual bool checkTopologies ();  Method to check the topology mapping maps regarding the upper topology. More...;  ; virtual void getFromIndex (type::vector< Index > &, const Index) const;  ; const std::map< Index, ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1mapping_1_1_center_point_topological_mapping.html:2153,adapt,adapt,2153,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1mapping_1_1_center_point_topological_mapping.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1mapping_1_1_center_point_topological_mapping.html,1,['adapt'],['adapt']
Energy Efficiency,"h SOFA on a 64 bits architecture. /using-beamadapter-and-interventional-controller; ; SOFA - Topic: [SOLVED] Using BeamAdapter and Interventional controller. /using-beams-when-modeling-the-vessels-as-a-mechanical-structure; ; SOFA - Topic: [SOLVED] Using beams when modeling the vessels as a mechanical structure. /using-freemotionanimationloop-is-stopping-tetrahedronfemforcefield; ; SOFA - Topic: [SOLVED] Using ""FreeMotionAnimationLoop"" is stopping ""TetrahedronFEMForceField"". /using-geomagic; ; SOFA - Topic: [SOLVED] Using Geomagic. /using-meshless-methods-on-native-cad-geometry-using-isogeometric-or-xfem; . /feed; ; Using meshless methods on native CAD geometry using isogeometric or XFEM – SOFA. SOFA - Topic: Using meshless methods on native CAD geometry using isogeometric or XFEM. /using-meshobjloader; ; SOFA - Topic: Using MeshObjLoader. /using-model-reduction-in-sofa; ; SOFA - Topic: [SOLVED] Using model reduction in SOFA. /using-monitors-and-sofacarving-makes-my-scene-crash; ; SOFA - Topic: Using Monitors and SofaCarving makes my scene crash. /using-navigation-recorded-camera; ; SOFA - Topic: Using Navigation Recorded Camera. /using-ni-library-in-sofa-envronment; . /feed; ; [SOLVED] Using NI library in sofa envronment – SOFA. SOFA - Topic: [SOLVED] Using NI library in sofa envronment. /using-python-to-move-some-points-or-parts-of-an-object; ; SOFA - Topic: [SOLVED] Using Python to move some points or parts of an object. /using-sensable-plugin-in-custion-c-application; ; SOFA - Topic: [SOLVED] Using Sensable plugin in custion c++ application. /using-sofacarving-with-obj-files; ; SOFA - Topic: [SOLVED] Using SOFACarving with OBJ files. /using-sofa-cuda; ; SOFA - Topic: Using SOFA CUDA. /using-sofa-in-the-context-of-reinforcement-leaening; ; SOFA - Topic: Using SOFA in the context of reinforcement leaening. /using-sofa-to-build-pneumatic-actuated-robot-arm; ; SOFA - Topic: [SOLVED] Using SOFA to build pneumatic actuated robot arm. /using-sofa-to-simulate-viscoelasti",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/index-wcopy.html:413755,monitor,monitors-and-sofacarving-makes-my-scene-crash,413755,index-wcopy.html,https://www.sofa-framework.org,https://www.sofa-framework.org/index-wcopy.html,1,['monitor'],['monitors-and-sofacarving-makes-my-scene-crash']
Energy Efficiency,"hOutputObject(). void sofa::core::topology::TopologicalMapping::setPathOutputObject ; (; const std::string & ; o). inline . ◆ setTopologies(). void sofa::core::topology::TopologicalMapping::setTopologies ; (; In * ; from, . Out * ; to . ). virtual . Specify the input and output models. . ◆ SOFA_ABSTRACT_CLASS(). sofa::core::topology::TopologicalMapping::SOFA_ABSTRACT_CLASS ; (; TopologicalMapping ; , . objectmodel::BaseObject ;  . ). ◆ updateTopologicalMappingBottomUp(). virtual void sofa::core::topology::TopologicalMapping::updateTopologicalMappingBottomUp ; (; ). inlinevirtual . Method called at each topological changes propagation which comes from the OUTPUT topology to adapt the INPUT topology : ; Reimplemented in sofa::component::mapping::linear::SimpleTesselatedTetraTopologicalMapping. ◆ updateTopologicalMappingTopDown(). virtual void sofa::core::topology::TopologicalMapping::updateTopologicalMappingTopDown ; (; ). pure virtual . Method called at each topological changes propagation which comes from the INPUT topology to adapt the OUTPUT topology : ; Implemented in sofa::component::topology::mapping::Triangle2EdgeTopologicalMapping, sofa::component::topology::mapping::Tetra2TriangleTopologicalMapping, sofa::component::topology::mapping::SubsetTopologicalMapping, sofa::component::topology::mapping::Quad2TriangleTopologicalMapping, sofa::component::topology::mapping::IdentityTopologicalMapping, sofa::component::topology::mapping::Hexa2TetraTopologicalMapping, sofa::component::topology::mapping::Hexa2QuadTopologicalMapping, sofa::component::topology::mapping::Edge2QuadTopologicalMapping, sofa::component::topology::mapping::CenterPointTopologicalMapping, sofa::component::mapping::linear::SimpleTesselatedTetraTopologicalMapping, sofa::component::mapping::linear::SimpleTesselatedHexaTopologicalMapping, and sofa::component::mapping::linear::Mesh2PointTopologicalMapping. sofacoretopologyTopologicalMapping; Generated on Mon Nov 11 2024 03:16:02 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topological_mapping.html:23642,adapt,adapt,23642,api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topological_mapping.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topological_mapping.html,1,['adapt'],['adapt']
Energy Efficiency,"ha);  ; Monomial_LD< Real, N > operator/ (const Real &alpha);  ; Monomial_LD< Real, N > operator+ (const Monomial_LD< Real, N > &a);  ; Monomial_LD< Real, N > operator- (const Monomial_LD< Real, N > &a);  ; Monomial_LD< Real, N > operator* (const Monomial_LD< Real, N > &a);  ; Real operator() (const RNpoint &x) const;  Evaluating value. More...;  ; Real operator() (const RNpoint &x, unsigned int idvar) const;  Evaluating first partial derivative by idvar-th variable. More...;  ; Monomial_LD< Real, N > d (const unsigned int &ideriv) const;  Evaluating partial derivative hight order by idvar-th variable in ideriv-th order. More...;  ; void writeToStream (std::ostream &ff) const;  ; void readFromStream (std::istream &ff);  . Friends; template<typename FReal , unsigned int FN> ; Monomial_LD< FReal, FN > & operator* (const FReal &alpha, Monomial_LD< FReal, FN > &r);  . Attribute details. ◆ coef. template<typename Real , unsigned int N> . Real sofa::helper::Monomial_LD< Real, N >::coef. ◆ powers. template<typename Real , unsigned int N> . sofa::type::Vec<N,int> sofa::helper::Monomial_LD< Real, N >::powers. ◆ variables. template<typename Real , unsigned int N> . sofa::type::Vec<N,std::string> sofa::helper::Monomial_LD< Real, N >::variables. protected . Constructor details. ◆ Monomial_LD() [1/3]. template<typename Real , unsigned int N> . sofa::helper::Monomial_LD< Real, N >::Monomial_LD. Tools used in FEM computing . ◆ Monomial_LD() [2/3]. template<typename Real , unsigned int N> . sofa::helper::Monomial_LD< Real, N >::Monomial_LD ; (; Real ; m_coef, .  ; ... . ). ◆ Monomial_LD() [3/3]. template<typename Real , unsigned int N> . sofa::helper::Monomial_LD< Real, N >::Monomial_LD ; (; const Monomial_LD< Real, N > & ; a). Function details. ◆ d(). template<typename Real , unsigned int N> . Monomial_LD< Real, N > sofa::helper::Monomial_LD< Real, N >::d ; (; const unsigned int & ; ideriv); const. Evaluating partial derivative hight order by idvar-th variable in ideriv-th order. ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_monomial___l_d.html:3158,power,powers,3158,api/master/sofa/html/classsofa_1_1helper_1_1_monomial___l_d.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_monomial___l_d.html,1,['power'],['powers']
Energy Efficiency,"helper::Polynomial_LD< Real, N >::operator- ; (; const Polynomial_LD< Real, N > & ; a). inline . ◆ operator-=(). template<typename Real , unsigned int N> . Polynomial_LD< Real, N > & sofa::helper::Polynomial_LD< Real, N >::operator-= ; (; const Polynomial_LD< Real, N > & ; b). ◆ operator/(). template<typename Real , unsigned int N> . Polynomial_LD<Real,N> sofa::helper::Polynomial_LD< Real, N >::operator/ ; (; const Real & ; alpha). inline . ◆ operator/=(). template<typename Real , unsigned int N> . Polynomial_LD< Real, N > & sofa::helper::Polynomial_LD< Real, N >::operator/= ; (; const Real & ; alpha). ◆ operator=(). template<typename Real , unsigned int N> . Polynomial_LD<Real,N>& sofa::helper::Polynomial_LD< Real, N >::operator= ; (; const Polynomial_LD< Real, N > & ; b). inline . Assign operator. . ◆ operator==(). template<typename Real , unsigned int N> . bool sofa::helper::Polynomial_LD< Real, N >::operator== ; (; const Polynomial_LD< Real, N > & ; b); const. Return true if a and b has the same powers. . ◆ readFromStream(). template<typename Real , unsigned int N> . void sofa::helper::Polynomial_LD< Real, N >::readFromStream ; (; std::istream & ; stream). ◆ Set(). template<typename Real , unsigned int N> . void sofa::helper::Polynomial_LD< Real, N >::Set ; (; const unsigned int ; nbofTerm, .  ; ... . ). ◆ setnbOfMonomial(). template<typename Real , unsigned int N> . void sofa::helper::Polynomial_LD< Real, N >::setnbOfMonomial ; (; int ; m_nbofmonomial). ◆ sort(). template<typename Real , unsigned int N> . void sofa::helper::Polynomial_LD< Real, N >::sort. ◆ sortByVar(). template<typename Real , unsigned int N> . void sofa::helper::Polynomial_LD< Real, N >::sortByVar ; (; unsigned int ; idVar). protected . ◆ writeToStream(). template<typename Real , unsigned int N> . void sofa::helper::Polynomial_LD< Real, N >::writeToStream ; (; std::ostream & ; stream); const. Related details. ◆ operator* [1/2]. template<typename Real , unsigned int N> . template<typename FRea",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_polynomial___l_d.html:8796,power,powers,8796,api/master/sofa/html/classsofa_1_1helper_1_1_polynomial___l_d.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_polynomial___l_d.html,1,['power'],['powers']
Energy Efficiency,"iations. Keep in mind that the file are still monitored. More...;  . Function details. ◆ addFile() [1/2]. int sofa::helper::system::FileMonitor::addFile ; (; const std::string & ; directoryname, . const std::string & ; filename, . FileEventListener * ; listener . ). static . add a new path and file to monitor and a listener to be triggered in case of change. returns >= 0 if the file was successfully added returns < 0 in case of error. . ◆ addFile() [2/2]. int sofa::helper::system::FileMonitor::addFile ; (; const std::string & ; filename, . FileEventListener * ; listener . ). static . add a new filepath to monitor and a listener to be triggered in case of change. returns >= 0 if the file was successfully added returns < 0 in case of error. . ◆ removeFileListener(). void sofa::helper::system::FileMonitor::removeFileListener ; (; const std::string & ; filename, . FileEventListener * ; listener . ). static . remove the provided listener for a given file If the listener is not existing, do nothing If the listener is nullptr, do nothing If the listener is associated with one or more file...remove all the associations. Keep in mind that the file are still monitored. . ◆ removeListener(). void sofa::helper::system::FileMonitor::removeListener ; (; FileEventListener * ; listener). static . remove the provided listener. If the listener is not existing, do nothing If the listener is nullptr, do nothing If the listener is associated with one or more file...remove all the associations. Keep in mind that the file are still monitored. . ◆ updates(). int sofa::helper::system::FileMonitor::updates ; (; int ; timeout = 1). static . check if the file have changed, colalesc the similar events and notify the listener. timeout is the number of seconds to block the calling process. Can be 0 (in this case it return immediately if there is no event. return -1 in case of error return >= 0 otherwise. . sofahelpersystemFileMonitor; Generated on Mon Nov 11 2024 03:31:03 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_file_monitor.html:2934,monitor,monitored,2934,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_file_monitor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_file_monitor.html,2,['monitor'],['monitored']
Energy Efficiency,"ibution c> ; void setSharedMatrix (sofa::core::matrixaccumulator::get_component_type< c > *object, const PairMechanicalStates &pair, std::shared_ptr< LocalMappedMatrixType< Real > > matrix);  ; template<Contribution c> ; sofa::type::vector< sofa::core::matrixaccumulator::get_component_type< c > * > getContributors () const;  Get the list of components contributing to the global matrix through the contribution type . More...;  ; void buildGroupsOfComponentAssociatedToMechanicalStates (std::map< PairMechanicalStates, GroupOfComponentsAssociatedToAPairOfMechanicalStates > &groups);  ; virtual void makeCreateDispatcher ();  ; virtual std::shared_ptr< sofa::core::matrixaccumulator::IndexVerificationStrategy > makeIndexVerificationStrategy (sofa::core::objectmodel::BaseObject *component);  ; virtual BaseMatrixProjectionMethod< LocalMappedMatrixType< Real > >::SPtr createMatrixMapping (const PairMechanicalStates &pair);  ; BaseMatrixProjectionMethod< LocalMappedMatrixType< Real > > * findProjectionMethod (const PairMechanicalStates &pair);  ; void assemblePrecomputedMappedMassMatrix (const core::MechanicalParams *mparams, linearalgebra::BaseMatrix *destination);  ; void recomputeMappedMassMatrix (const core::MechanicalParams *mparams, BaseMass *mass);  ;  Protected Member Functions inherited from sofa::component::linearsystem::TypedMatrixLinearSystem< TMatrix, TVector >; void preAssembleSystem (const core::MechanicalParams *) override;  ; virtual void allocateSystem ();  ; virtual void resizeVectors (sofa::Size n);  Set the size of RHS and solution to n. More...;  ; void copyLocalVectorToGlobalVector (core::MultiVecDerivId v, TVector *globalVector);  ; SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API void copyLocalVectorToGlobalVector (core::MultiVecDerivId v, GraphScatteredVector *globalVector);  ; void copyLocalVectorToGlobalVector (core::MultiVecDerivId v, GraphScatteredVector *globalVector);  ;  Protected Member Functions inherited from sofa::core::behavior::BaseMatrixLinearS",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsystem_1_1_matrix_linear_system.html:21807,allocate,allocateSystem,21807,api/master/sofa/html/classsofa_1_1component_1_1linearsystem_1_1_matrix_linear_system.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsystem_1_1_matrix_linear_system.html,1,['allocate'],['allocateSystem']
Energy Efficiency,"ics::spring::SpringForceField< DataTypes >::getArrowSize ; (; ); const. inline . ◆ getDrawMode(). template<class DataTypes > . int sofa::component::solidmechanics::spring::SpringForceField< DataTypes >::getDrawMode ; (; ); const. inline . ◆ getObject1(). template<class DataTypes > . core::behavior::MechanicalState<DataTypes>* sofa::component::solidmechanics::spring::SpringForceField< DataTypes >::getObject1 ; (; ). inline . ◆ getObject2(). template<class DataTypes > . core::behavior::MechanicalState<DataTypes>* sofa::component::solidmechanics::spring::SpringForceField< DataTypes >::getObject2 ; (; ). inline . ◆ getPotentialEnergy(). template<class DataTypes > . SReal sofa::component::solidmechanics::spring::SpringForceField< DataTypes >::getPotentialEnergy ; (; const core::MechanicalParams * ; mparams, . const DataVecCoord & ; x1, . const DataVecCoord & ; x2 . ); const. overridevirtual . Get the potential energy associated to this ForceField.; Used to estimate the total energy of the system by some post-stabilization techniques.; This method must be implemented by the component, and is usually called by the generic ForceField::getPotentialEnergy() method. ; Implements sofa::core::behavior::PairInteractionForceField< DataTypes >. ◆ getSprings(). template<class DataTypes > . const sofa::type::vector< Spring >& sofa::component::solidmechanics::spring::SpringForceField< DataTypes >::getSprings ; (; ); const. inline . ◆ init(). template<class DataTypes > . void sofa::component::solidmechanics::spring::SpringForceField< DataTypes >::init ; (; void ; ). overridevirtual . Initialization method called at graph creation and modification, during top-down traversal. ; Reimplemented from sofa::core::objectmodel::BaseObject.; Reimplemented in sofa::component::solidmechanics::spring::TriangleBendingSprings< DataTypes >. ◆ initGnuplot(). template<class DataTypes > . void sofa::component::solidmechanics::spring::SpringForceField< DataTypes >::initGnuplot ; (; const std::string ; pat",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_spring_force_field.html:38525,energy,energy,38525,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_spring_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_spring_force_field.html,1,['energy'],['energy']
Energy Efficiency,"ing DOFsX and DOFsV Stop to write the state if the kinematic energy reach a given threshold (stopAt) The energy will be measured at each period determined by keperiod . Public Attributes; sofa::core::objectmodel::DataFileName d_filename;  ; Data< bool > d_writeX;  flag enabling output of X vector More...;  ; Data< bool > d_writeX0;  flag enabling output of X0 vector More...;  ; Data< bool > d_writeV;  flag enabling output of V vector More...;  ; Data< bool > d_writeF;  flag enabling output of F vector More...;  ; Data< type::vector< double > > d_time;  set time to write outputs (by default export at t=0) More...;  ; Data< double > d_period;  period between outputs More...;  ; Data< type::vector< unsigned int > > d_DOFsX;  set the position DOFs to write More...;  ; Data< type::vector< unsigned int > > d_DOFsV;  set the velocity DOFs to write More...;  ; Data< double > d_stopAt;  stop the simulation when the given threshold is reached More...;  ; Data< double > d_keperiod;  set the period to measure the kinetic energy increase More...;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1playback_1_1_write_state.html:1649,energy,energy,1649,api/master/sofa/html/classsofa_1_1component_1_1playback_1_1_write_state.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1playback_1_1_write_state.html,1,['energy'],['energy']
Energy Efficiency,"ing::TriangularBendingSprings< DataTypes >::buildDampingMatrix ; (; core::behavior::DampingMatrix * ; ). finalvirtual . Reimplemented from sofa::core::behavior::BaseForceField. ◆ buildStiffnessMatrix(). template<class DataTypes > . void sofa::component::solidmechanics::spring::TriangularBendingSprings< DataTypes >::buildStiffnessMatrix ; (; core::behavior::StiffnessMatrix * ; matrix). overridevirtual . Reimplemented from sofa::core::behavior::BaseForceField. ◆ draw(). template<class DataTypes > . void sofa::component::solidmechanics::spring::TriangularBendingSprings< DataTypes >::draw ; (; const core::visual::VisualParams * ; ). overridevirtual . Render internal data of this object, for debugging purposes. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ getAccumulatedPotentialEnergy(). template<class DataTypes > . SReal sofa::component::solidmechanics::spring::TriangularBendingSprings< DataTypes >::getAccumulatedPotentialEnergy ; (; ); const. inline . Getter to global potential energy accumulated. . ◆ getEdgeInfo(). template<class DataTypes > . sofa::core::topology::EdgeData<type::vector<EdgeInformation> >& sofa::component::solidmechanics::spring::TriangularBendingSprings< DataTypes >::getEdgeInfo ; (; ). inline . ◆ getKd(). template<class DataTypes > . virtual Real sofa::component::solidmechanics::spring::TriangularBendingSprings< DataTypes >::getKd ; (; ); const. inlinevirtual . Getter/setter on the mesh spring damping. . ◆ getKs(). template<class DataTypes > . virtual Real sofa::component::solidmechanics::spring::TriangularBendingSprings< DataTypes >::getKs ; (; ); const. inlinevirtual . Getter/setter on the mesh spring stiffness. . ◆ getPotentialEnergy(). template<class DataTypes > . SReal sofa::component::solidmechanics::spring::TriangularBendingSprings< DataTypes >::getPotentialEnergy ; (; const core::MechanicalParams * ; mparams, . const DataVecCoord & ; d_x . ); const. overridevirtual . Getter on the potential energy. ; Implements sofa::core::beha",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_triangular_bending_springs.html:28045,energy,energy,28045,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_triangular_bending_springs.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_triangular_bending_springs.html,1,['energy'],['energy']
Energy Efficiency,"ingForceField< DataTypes >::draw ; (; const core::visual::VisualParams * ; ). overridevirtual . Render internal data of this object, for debugging purposes. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ getObject1(). template<class DataTypes > . core::behavior::MechanicalState<DataTypes>* sofa::component::solidmechanics::spring::VectorSpringForceField< DataTypes >::getObject1 ; (; ). inline . ◆ getObject2(). template<class DataTypes > . core::behavior::MechanicalState<DataTypes>* sofa::component::solidmechanics::spring::VectorSpringForceField< DataTypes >::getObject2 ; (; ). inline . ◆ getPotentialEnergy(). template<class DataTypes > . SReal sofa::component::solidmechanics::spring::VectorSpringForceField< DataTypes >::getPotentialEnergy ; (; const core::MechanicalParams * ; mparams, . const DataVecCoord & ; x1, . const DataVecCoord & ; x2 . ); const. inlineoverridevirtual . Get the potential energy associated to this ForceField.; Used to estimate the total energy of the system by some post-stabilization techniques.; This method must be implemented by the component, and is usually called by the generic ForceField::getPotentialEnergy() method. ; Implements sofa::core::behavior::PairInteractionForceField< DataTypes >. ◆ getSpringArray(). template<class DataTypes > . const core::topology::EdgeData<sofa::type::vector<Spring> >& sofa::component::solidmechanics::spring::VectorSpringForceField< DataTypes >::getSpringArray ; (; ); const. inline . ◆ getStiffness(). template<class DataTypes > . Real sofa::component::solidmechanics::spring::VectorSpringForceField< DataTypes >::getStiffness ; (; ); const. inline . ◆ getViscosity(). template<class DataTypes > . const Real sofa::component::solidmechanics::spring::VectorSpringForceField< DataTypes >::getViscosity ; (; ); const. inline . ◆ init(). template<class DataTypes > . void sofa::component::solidmechanics::spring::VectorSpringForceField< DataTypes >::init ; (; void ; ). overridevirtual . Initialization method ca",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_vector_spring_force_field.html:31305,energy,energy,31305,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_vector_spring_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_vector_spring_force_field.html,1,['energy'],['energy']
Energy Efficiency,"ing getPathObject1 () const;  Retrieve the Object1 path. More...;  ; std::string getPathObject2 () const;  Retrieve the Object2 path. More...;  ; void addForce (const MechanicalParams *mparams, MultiVecDerivId fId) override;  ; void addDForce (const MechanicalParams *mparams, MultiVecDerivId dfId) override;  ; SReal getPotentialEnergy (const MechanicalParams *mparams) const override;  ;  Public Member Functions inherited from sofa::core::behavior::BaseInteractionForceField;  SOFA_ABSTRACT_CLASS (BaseInteractionForceField, BaseForceField);  ; virtual BaseMechanicalState * getMechModel1 ();  ; virtual BaseMechanicalState * getMechModel2 ();  ; void addKToMatrix (const MechanicalParams *, const sofa::core::behavior::MultiMatrixAccessor *) override;  Compute the system matrix corresponding to . More...;  ; virtual void initGnuplot (const std::string path);  initialization to export potential energy to gnuplot files format More...;  ; virtual void exportGnuplot (SReal time);  export kinetic and potential energy state at ""time"" to a gnuplot file More...;  ; bool insertInNode (objectmodel::BaseNode *node) override;  ; bool removeInNode (objectmodel::BaseNode *node) override;  ;  Public Member Functions inherited from sofa::core::behavior::BaseForceField;  SOFA_ABSTRACT_CLASS (BaseForceField, StateAccessor);  ; virtual void addMBKdx (const MechanicalParams *mparams, MultiVecDerivId dfId);  Accumulate the contribution of M, B, and/or K matrices multiplied by the dx vector with the given coefficients. More...;  ; virtual void addBToMatrix (const MechanicalParams *mparams, const sofa::core::behavior::MultiMatrixAccessor *matrix);  Compute the system matrix corresponding to . More...;  ; virtual const sofa::linearalgebra::BaseMatrix * getComplianceMatrix (const MechanicalParams *);  ; virtual void addClambda (const MechanicalParams *, MultiVecDerivId, MultiVecDerivId, SReal);  Accumulate the contribution of the C compliant matrix multiplied by the given Lagrange multipliers lam",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_polynomial_springs_force_field.html:8241,energy,energy,8241,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_polynomial_springs_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_polynomial_springs_force_field.html,1,['energy'],['energy']
Energy Efficiency,"ing getPathObject1 () const;  Retrieve the Object1 path. More...;  ; std::string getPathObject2 () const;  Retrieve the Object2 path. More...;  ; void addForce (const MechanicalParams *mparams, MultiVecDerivId fId) override;  ; void addDForce (const MechanicalParams *mparams, MultiVecDerivId dfId) override;  ; SReal getPotentialEnergy (const MechanicalParams *mparams) const override;  ;  Public Member Functions inherited from sofa::core::behavior::BaseInteractionForceField;  SOFA_ABSTRACT_CLASS (BaseInteractionForceField, BaseForceField);  ; virtual BaseMechanicalState * getMechModel1 ();  ; virtual BaseMechanicalState * getMechModel2 ();  ; void addKToMatrix (const MechanicalParams *, const sofa::core::behavior::MultiMatrixAccessor *) override;  Compute the system matrix corresponding to . More...;  ; virtual void initGnuplot (const std::string path);  initialization to export potential energy to gnuplot files format More...;  ; virtual void exportGnuplot (SReal time);  export kinetic and potential energy state at ""time"" to a gnuplot file More...;  ; bool insertInNode (objectmodel::BaseNode *node) override;  ; bool removeInNode (objectmodel::BaseNode *node) override;  ;  Public Member Functions inherited from sofa::core::behavior::BaseForceField;  SOFA_ABSTRACT_CLASS (BaseForceField, StateAccessor);  ; virtual void addMBKdx (const MechanicalParams *mparams, MultiVecDerivId dfId);  Accumulate the contribution of M, B, and/or K matrices multiplied by the dx vector with the given coefficients. More...;  ; virtual void addBToMatrix (const MechanicalParams *mparams, const sofa::core::behavior::MultiMatrixAccessor *matrix);  Compute the system matrix corresponding to . More...;  ; virtual void addMBKToMatrix (const MechanicalParams *mparams, const sofa::core::behavior::MultiMatrixAccessor *matrix);  Compute the system matrix corresponding to . More...;  ; virtual const sofa::linearalgebra::BaseMatrix * getComplianceMatrix (const MechanicalParams *);  ; virtual void addCl",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1contact_1_1_penality_contact_force_field.html:6780,energy,energy,6780,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1contact_1_1_penality_contact_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1contact_1_1_penality_contact_force_field.html,1,['energy'],['energy']
Energy Efficiency,"ing getPathObject1 () const;  Retrieve the Object1 path. More...;  ; std::string getPathObject2 () const;  Retrieve the Object2 path. More...;  ; void addForce (const MechanicalParams *mparams, MultiVecDerivId fId) override;  ; void addDForce (const MechanicalParams *mparams, MultiVecDerivId dfId) override;  ; SReal getPotentialEnergy (const MechanicalParams *mparams) const override;  ;  Public Member Functions inherited from sofa::core::behavior::BaseInteractionForceField;  SOFA_ABSTRACT_CLASS (BaseInteractionForceField, BaseForceField);  ; virtual BaseMechanicalState * getMechModel1 ();  ; virtual BaseMechanicalState * getMechModel2 ();  ; void addKToMatrix (const MechanicalParams *, const sofa::core::behavior::MultiMatrixAccessor *) override;  Compute the system matrix corresponding to . More...;  ; virtual void initGnuplot (const std::string path);  initialization to export potential energy to gnuplot files format More...;  ; virtual void exportGnuplot (SReal time);  export kinetic and potential energy state at ""time"" to a gnuplot file More...;  ; bool insertInNode (objectmodel::BaseNode *node) override;  ; bool removeInNode (objectmodel::BaseNode *node) override;  ;  Public Member Functions inherited from sofa::core::behavior::BaseForceField;  SOFA_ABSTRACT_CLASS (BaseForceField, StateAccessor);  ; virtual void addMBKdx (const MechanicalParams *mparams, MultiVecDerivId dfId);  Accumulate the contribution of M, B, and/or K matrices multiplied by the dx vector with the given coefficients. More...;  ; virtual void addBToMatrix (const MechanicalParams *mparams, const sofa::core::behavior::MultiMatrixAccessor *matrix);  Compute the system matrix corresponding to . More...;  ; virtual void addMBKToMatrix (const MechanicalParams *mparams, const sofa::core::behavior::MultiMatrixAccessor *matrix);  Compute the system matrix corresponding to . More...;  ; virtual void buildStiffnessMatrix (StiffnessMatrix *matrix);  ; virtual const sofa::linearalgebra::BaseMatrix * getCo",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_frame_spring_force_field.html:5696,energy,energy,5696,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_frame_spring_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_frame_spring_force_field.html,4,['energy'],['energy']
Energy Efficiency,"int &offset)=0;  Perform dest[ offset + i ][j] += src[i][j] 0<= i < src_entries 0<= j < 3 (for 3D objects) 0 <= j < 2 (for 2D objects) More...;  ; virtual void printDOF (ConstVecId v, std::ostream &out=std::cerr, int firstIndex=0, int range=-1) const =0;  ; virtual unsigned printDOFWithElapsedTime (ConstVecId, unsigned=0, unsigned=0, std::ostream &=std::cerr);  ; virtual void initGnuplot (const std::string);  ; virtual void exportGnuplot (SReal);  ; virtual void writeVec (ConstVecId v, std::ostream &out)=0;  ; virtual void readVec (VecId v, std::istream &in)=0;  ; virtual SReal compareVec (ConstVecId v, std::istream &in)=0;  ; virtual void vAvail (const ExecParams *params, VecCoordId &v)=0;  ; virtual void vAvail (const ExecParams *params, VecDerivId &v)=0;  Increment the index of the given VecDerivId, so that all 'allocated' vectors in this state have a lower index. More...;  ; virtual void vAlloc (const ExecParams *params, VecCoordId v, const core::VecIdProperties &properties={})=0;  Increment the index of the given MatrixDerivId, so that all 'allocated' vectors in this state have a lower index. More...;  ; virtual void vAlloc (const ExecParams *params, VecDerivId v, const core::VecIdProperties &properties={})=0;  Allocate a new temporary vector. More...;  ; virtual void vRealloc (const ExecParams *params, VecCoordId v, const core::VecIdProperties &properties={})=0;  Allocate a new temporary vector. More...;  ; virtual void vRealloc (const ExecParams *params, VecDerivId v, const core::VecIdProperties &properties={})=0;  Reallocate a new temporary vector. More...;  ; virtual void vFree (const ExecParams *params, VecCoordId v)=0;  Free a temporary vector. More...;  ; virtual void vFree (const ExecParams *params, VecDerivId v)=0;  Free a temporary vector. More...;  ; virtual void vInit (const ExecParams *params, VecCoordId v, ConstVecCoordId vSrc)=0;  Free a temporary vector. More...;  ; virtual void vInit (const ExecParams *params, VecDerivId v, ConstVecDerivId vSrc)",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_mechanical_state.html:8965,allocate,allocated,8965,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_mechanical_state.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_mechanical_state.html,1,['allocate'],['allocated']
Energy Efficiency,"int > > &);  Find mechanical particles hit by the given ray. More...;  ; virtual Size getMatrixBlockSize () const;  Get the number of scalars per Deriv value, as necessary to build mechanical matrices and vectors. More...;  ; virtual Size getMatrixSize () const;  Get the number of rows necessary to build mechanical matrices and vectors. More...;  ; virtual void copyToBaseVector (linearalgebra::BaseVector *dest, ConstVecId src, unsigned int &offset)=0;  Copy data to a global BaseVector from the state stored in a local vector. More...;  ; virtual void copyFromBaseVector (VecId dest, const linearalgebra::BaseVector *src, unsigned int &offset)=0;  Copy data to a local vector from the state stored in a global BaseVector. More...;  ; virtual void copyToBaseMatrix (linearalgebra::BaseMatrix *dest, ConstMatrixDerivId src, unsigned int &offset)=0;  Copy data to a global BaseMatrix from the state stored in a local vector. More...;  ; virtual void copyToBuffer (SReal *dst, ConstVecId src, unsigned int n) const =0;  Copy data to an external, user-allocated buffer. More...;  ; virtual void copyFromBuffer (VecId dst, const SReal *src, unsigned int n)=0;  Copy data from an external, user-allocated buffer. More...;  ; virtual void addFromBuffer (VecId dst, const SReal *src, unsigned int n)=0;  Add data from an external, user-allocated buffer. More...;  ; virtual void addToBaseVector (linearalgebra::BaseVector *dest, ConstVecId src, unsigned int &offset)=0;  Add data to a global BaseVector from the state stored in a local vector. More...;  ; virtual void addFromBaseVectorSameSize (VecId dest, const linearalgebra::BaseVector *src, unsigned int &offset)=0;  Perform dest[i][j] += src[offset + i][j] 0<= i < src_entries 0<= j < 3 (for 3D objects) 0 <= j < 2 (for 2D objects) More...;  ; virtual void addFromBaseVectorDifferentSize (VecId dest, const linearalgebra::BaseVector *src, unsigned int &offset)=0;  Perform dest[ offset + i ][j] += src[i][j] 0<= i < src_entries 0<= j < 3 (for 3D obje",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_mechanical_state.html:7055,allocate,allocated,7055,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_mechanical_state.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_mechanical_state.html,1,['allocate'],['allocated']
Energy Efficiency,"inter deviceWrite (int gpu=MemoryManager::getBufferDevice());  ; const T * hostRead () const;  ; T * hostWrite ();  ; const T * hostReadAt (int i) const;  ; T * hostWriteAt (int i);  ; buffer_id_type bufferRead (bool create=false);  Get the Buffer Object ID for reading. More...;  ; buffer_id_type bufferWrite (bool create=false);  Get the Buffer Object ID for writing. More...;  ; void push_back (const T &t);  ; void pop_back ();  ; const T & operator[] (Size i) const;  ; T & operator[] (Size i);  ; const T * data () const;  ; T * data ();  ; const T & getCached (Size i) const;  ; const T & getSingle (Size i) const;  ; const_iterator begin () const;  ; const_iterator end () const;  ; iterator begin ();  ; iterator end ();  ; iterator erase (iterator position);  ; iterator insert (iterator position, const T &x);  . Protected Member Functions; void allocate (int d) const;  ; void copyToHost () const;  ; void copyToDevice (int d=0) const;  ; void copyToHostSingle (Size i) const;  ; void checkIndex (Size i) const;  ; void registerBuffer () const;  ; void mapBuffer () const;  ; void unmapBuffer () const;  ; void unregisterBuffer () const;  ; void createBuffer ();  . Friends; std::ostream & operator<< (std::ostream &os, const vector_device< T, MemoryManager, DataTypeInfoManager > &vec);  Output stream. More...;  ; std::istream & operator>> (std::istream &in, vector_device< T, MemoryManager, DataTypeInfoManager > &vec);  Input stream. More...;  . Attribute details. ◆ allocSize. template<class T , class MemoryManager , class DataTypeInfoManager > . Size sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >::allocSize. protected . Allocated size on host. . ◆ bufferIsRegistered. template<class T , class MemoryManager , class DataTypeInfoManager > . bool sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >::bufferIsRegistered. mutableprotected . True if the buffer is registered with CUDA. . ◆ bufferObject. template<class T , class MemoryManager , class",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1vector__device.html:3892,allocate,allocate,3892,api/master/sofa/html/classsofa_1_1type_1_1vector__device.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1vector__device.html,1,['allocate'],['allocate']
Energy Efficiency,"ionSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  . Protected Attributes; core::topology::BaseMeshTopology * m_topology;  ; VecCoord _initialPoints;  ; bool updateMatrix;  the initial positions of the points More...;  ; bool _meshSaved;  ; Data< std::string > f_materialName;  the name of the material to be used More...;  ; Data< SetParameterArray > f_parameterSet;  The global parameters specifying the material. More...;  ; Data< SetAnisotropyDirectionArray > f_anisotropySet;  The global directions of anisotropy of the material. More...;  ; Data< std::string > f_parameterFileName;  the name of the file describing the material parameters for all tetrahedra More...;  ; SingleLink< StandardTetrahedralFEMForceField< DataTypes >, sofa::core::topology::BaseMeshTopology, BaseLink::FLAG_STOREPATH|BaseLink::FLAG_STRONGLINK > l_topology;  Link to be set to the topology container in the component graph. More...;  ; material::HyperelasticMaterial< DataTypes > * myMaterial;  the array that describes the complete material energy and its derivatives More...;  ; core::topology::TetrahedronData< tetrahedronRestInfoVector > tetrahedronInfo;  Internal tetrahedron data. More...;  ; core::topology::EdgeData< edgeInformationVector > edgeInfo;  Internal edge data. More...;  ; VecCoord myposition;  ;  Protected Attributes inherited from sofa::core::behavior::StateAccessor; MultiLink< StateAccessor, BaseMechanicalState, BaseLink::FLAG_DUPLICATE > l_mechanicalStates;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObject; SingleLink< BaseObject, BaseContext, BaseLink::FLAG_DOUBLELINK > l_context;  ; LinkSlaves l_slaves;  ; SingleLink< BaseObject, BaseObject, BaseLink::FLAG_DOUBLELINK > l_master;  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1_standard_tetrahedral_f_e_m_force_field.html:3385,energy,energy,3385,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1_standard_tetrahedral_f_e_m_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1_standard_tetrahedral_f_e_m_force_field.html,1,['energy'],['energy']
Energy Efficiency,"irtual void vFree (const ExecParams *params, VecCoordId v)=0;  Free a temporary vector. More...;  ; virtual void vFree (const ExecParams *params, VecDerivId v)=0;  Free a temporary vector. More...;  ; virtual void vInit (const ExecParams *params, VecCoordId v, ConstVecCoordId vSrc)=0;  Free a temporary vector. More...;  ; virtual void vInit (const ExecParams *params, VecDerivId v, ConstVecDerivId vSrc)=0;  Initialize an unset vector. More...;  ; virtual void vOp (const ExecParams *params, VecId v, ConstVecId a=ConstVecId::null(), ConstVecId b=ConstVecId::null(), SReal f=1.0)=0;  Initialize an unset vector. More...;  ; virtual void vMultiOp (const ExecParams *params, const VMultiOp &ops);  Perform a sequence of linear vector accumulation operation $r_i = sum_j (v_j*f_{ij})$. More...;  ; virtual SReal vDot (const ExecParams *params, ConstVecId a, ConstVecId b)=0;  Compute the scalar products between two vectors. More...;  ; virtual SReal vSum (const ExecParams *params, ConstVecId a, unsigned l)=0;  Sum of the entries of state vector a at the power of l>0. This is used to compute the l-norm of the vector. More...;  ; virtual SReal vMax (const ExecParams *params, ConstVecId a)=0;  Maximum of the absolute values of the entries of state vector a. This is used to compute the infinite-norm of the vector. More...;  ; virtual Size vSize (const ExecParams *params, ConstVecId v)=0;  Get vector size. More...;  ; virtual void vThreshold (VecId a, SReal threshold)=0;  Apply a threshold (lower bound) to all entries. More...;  . Additional Inherited Members;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extr",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_mechanical_state.html:20140,power,power,20140,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_mechanical_state.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_mechanical_state.html,1,['power'],['power']
Energy Efficiency,"irtual void vFree (const ExecParams *params, VecCoordId v)=0;  Free a temporary vector. More...;  ; virtual void vFree (const ExecParams *params, VecDerivId v)=0;  Free a temporary vector. More...;  ; virtual void vInit (const ExecParams *params, VecCoordId v, ConstVecCoordId vSrc)=0;  Free a temporary vector. More...;  ; virtual void vInit (const ExecParams *params, VecDerivId v, ConstVecDerivId vSrc)=0;  Initialize an unset vector. More...;  ; virtual void vOp (const ExecParams *params, VecId v, ConstVecId a=ConstVecId::null(), ConstVecId b=ConstVecId::null(), SReal f=1.0)=0;  Initialize an unset vector. More...;  ; virtual void vMultiOp (const ExecParams *params, const VMultiOp &ops);  Perform a sequence of linear vector accumulation operation $r_i = sum_j (v_j*f_{ij})$. More...;  ; virtual SReal vDot (const ExecParams *params, ConstVecId a, ConstVecId b)=0;  Compute the scalar products between two vectors. More...;  ; virtual SReal vSum (const ExecParams *params, ConstVecId a, unsigned l)=0;  Sum of the entries of state vector a at the power of l>0. This is used to compute the l-norm of the vector. More...;  ; virtual SReal vMax (const ExecParams *params, ConstVecId a)=0;  Maximum of the absolute values of the entries of state vector a. This is used to compute the infinite-norm of the vector. More...;  ; virtual Size vSize (const ExecParams *params, ConstVecId v)=0;  Get vector size. More...;  ; virtual void vThreshold (VecId a, SReal threshold)=0;  Apply a threshold (lower bound) to all entries. More...;  ;  Public Member Functions inherited from sofa::core::BaseState;  SOFA_ABSTRACT_CLASS (BaseState, objectmodel::BaseObject);  ; virtual Size getSize () const =0;  Current size of all stored vectors. More...;  ; virtual void resize (Size vsize)=0;  Resize all stored vector. More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObject;  SOFA_CLASS (BaseObject, Base);  ; virtual void draw (const core::visual::VisualParams *);  Render int",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_mechanical_state.html:10555,power,power,10555,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_mechanical_state.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_mechanical_state.html,1,['power'],['power']
Energy Efficiency,"ision::detection::intersection::BaseProximityIntersection Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; Protected Member Functions |; List of all members . sofa::component::collision::detection::intersection::BaseProximityIntersection Class Reference . #include <BaseProximityIntersection.h>. Inheritance diagram for sofa::component::collision::detection::intersection::BaseProximityIntersection:. [legend]; Detailed Description; Base class for intersections methods using proximities. It introduces Datas for the alarm distance and contact distance. Cubes intersection is modified to use proximities. . Public Attributes; sofa::core::objectmodel::RenamedData< SReal > alarmDistance;  ; sofa::core::objectmodel::RenamedData< SReal > contactDistance;  ; Data< SReal > d_alarmDistance;  Distance above which the intersection computations ignores the proximity pair. This distance can also be used in some broad phase algorithms to reduce the search area. More...;  ; Data< SReal > d_contactDistance;  Distance below which a contact is created. More...;  ;  Public Attributes inherited from sofa::component::collision::detection::intersection::DiscreteIntersection; core::collision::IntersectorMap intersectors;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1intersection_1_1_base_proximity_intersection.html:1056,reduce,reduce,1056,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1intersection_1_1_base_proximity_intersection.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1intersection_1_1_base_proximity_intersection.html,1,['reduce'],['reduce']
Energy Efficiency,"it by the given ray. More...;  ; Interface with BaseMatrix / BaseVector; virtual Size getMatrixBlockSize () const;  Get the number of scalars per Deriv value, as necessary to build mechanical matrices and vectors. More...;  ; virtual Size getMatrixSize () const;  Get the number of rows necessary to build mechanical matrices and vectors. More...;  ; virtual void copyToBaseVector (linearalgebra::BaseVector *dest, ConstVecId src, unsigned int &offset)=0;  Copy data to a global BaseVector from the state stored in a local vector. More...;  ; virtual void copyFromBaseVector (VecId dest, const linearalgebra::BaseVector *src, unsigned int &offset)=0;  Copy data to a local vector from the state stored in a global BaseVector. More...;  ; virtual void copyToBaseMatrix (linearalgebra::BaseMatrix *dest, ConstMatrixDerivId src, unsigned int &offset)=0;  Copy data to a global BaseMatrix from the state stored in a local vector. More...;  ; virtual void copyToBuffer (SReal *dst, ConstVecId src, unsigned int n) const =0;  Copy data to an external, user-allocated buffer. More...;  ; virtual void copyFromBuffer (VecId dst, const SReal *src, unsigned int n)=0;  Copy data from an external, user-allocated buffer. More...;  ; virtual void addFromBuffer (VecId dst, const SReal *src, unsigned int n)=0;  Add data from an external, user-allocated buffer. More...;  ; virtual void addToBaseVector (linearalgebra::BaseVector *dest, ConstVecId src, unsigned int &offset)=0;  Add data to a global BaseVector from the state stored in a local vector. More...;  ; virtual void addFromBaseVectorSameSize (VecId dest, const linearalgebra::BaseVector *src, unsigned int &offset)=0;  Perform dest[i][j] += src[offset + i][j] 0<= i < src_entries 0<= j < 3 (for 3D objects) 0 <= j < 2 (for 2D objects) More...;  ; virtual void addFromBaseVectorDifferentSize (VecId dest, const linearalgebra::BaseVector *src, unsigned int &offset)=0;  Perform dest[ offset + i ][j] += src[i][j] 0<= i < src_entries 0<= j < 3 (for 3D obje",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_mechanical_state.html:5862,allocate,allocated,5862,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_mechanical_state.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_mechanical_state.html,1,['allocate'],['allocated']
Energy Efficiency,"ited from sofa::core::behavior::MixedInteractionForceField< TDataTypes1, TDataTypes2 >;  SOFA_ABSTRACT_CLASS2 (SOFA_TEMPLATE2(MixedInteractionForceField, TDataTypes1, TDataTypes2), BaseInteractionForceField, SOFA_TEMPLATE2(PairStateAccessor, TDataTypes1, TDataTypes2));  ; void addForce (const MechanicalParams *mparams, MultiVecDerivId fId) override;  ; void addDForce (const MechanicalParams *mparams, MultiVecDerivId dfId) override;  ; SReal getPotentialEnergy (const MechanicalParams *mparams) const override;  ;  Public Member Functions inherited from sofa::core::behavior::BaseInteractionForceField;  SOFA_ABSTRACT_CLASS (BaseInteractionForceField, BaseForceField);  ; virtual BaseMechanicalState * getMechModel1 ();  ; virtual BaseMechanicalState * getMechModel2 ();  ; void addKToMatrix (const MechanicalParams *, const sofa::core::behavior::MultiMatrixAccessor *) override;  Compute the system matrix corresponding to . More...;  ; virtual void initGnuplot (const std::string path);  initialization to export potential energy to gnuplot files format More...;  ; virtual void exportGnuplot (SReal time);  export kinetic and potential energy state at ""time"" to a gnuplot file More...;  ; bool insertInNode (objectmodel::BaseNode *node) override;  ; bool removeInNode (objectmodel::BaseNode *node) override;  ;  Public Member Functions inherited from sofa::core::behavior::BaseForceField;  SOFA_ABSTRACT_CLASS (BaseForceField, StateAccessor);  ; virtual void addMBKdx (const MechanicalParams *mparams, MultiVecDerivId dfId);  Accumulate the contribution of M, B, and/or K matrices multiplied by the dx vector with the given coefficients. More...;  ; virtual void addBToMatrix (const MechanicalParams *mparams, const sofa::core::behavior::MultiMatrixAccessor *matrix);  Compute the system matrix corresponding to . More...;  ; virtual void addMBKToMatrix (const MechanicalParams *mparams, const sofa::core::behavior::MultiMatrixAccessor *matrix);  Compute the system matrix corresponding to . Mo",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_interaction_ellipsoid_force_field.html:6756,energy,energy,6756,api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_interaction_ellipsoid_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_interaction_ellipsoid_force_field.html,1,['energy'],['energy']
Energy Efficiency,"ition values. ; Deriv ; Deriv; : derivative values (velocity, forces, displacements). ; VecReal ; VecReal; : container of scalar values with the same API as sofa::type::vector. ; VecCoord ; sofa::core::behavior::MechanicalState::VecCoordDataTypes::VecCoord VecCoordContainer of Coord values with the same API as sofa::type::vector.Definition: MechanicalState.h:70; : container of Coord values with the same API as sofa::type::vector. ; VecDeriv ; sofa::core::behavior::MechanicalState::VecDerivDataTypes::VecDeriv VecDerivContainer of Deriv values with the same API as sofa::type::vector.Definition: MechanicalState.h:72; : container of Deriv values with the same API as sofa::type::vector. ; MatrixDeriv ; sofa::core::behavior::MechanicalState::MatrixDerivDataTypes::MatrixDeriv MatrixDerivSparse matrix containing derivative values (constraints)Definition: MechanicalState.h:74; : vector of constraints. Other vectors can be allocated to store other temporary values. Vectors can be assigned efficiently by just swapping pointers.; In addition to state vectors, the current constraint system matrix is also stored, containing the coefficient of each constraint defined over the DOFs in this body. . Public Member Functions;  SOFA_CLASS2 (SOFA_TEMPLATE(MechanicalState, TDataTypes), BaseMechanicalState, SOFA_TEMPLATE(State, TDataTypes));  ; Size getCoordDimension () const override;  ; Size getDerivDimension () const override;  ; virtual void getIndicesInSpace (sofa::type::vector< Index > &, Real, Real, Real, Real, Real, Real) const =0;  Get the indices of the particles located in the given bounding box. More...;  ; void copyToBuffer (SReal *dst, ConstVecId src, unsigned n) const override;  ; void copyFromBuffer (VecId dst, const SReal *src, unsigned n) override;  ; void addFromBuffer (VecId dst, const SReal *src, unsigned n) override;  ;  Public Member Functions inherited from sofa::core::behavior::BaseMechanicalState;  SOFA_ABSTRACT_CLASS (BaseMechanicalState, BaseState);  ;  SOFA_BASE",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_mechanical_state.html:2230,efficient,efficiently,2230,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_mechanical_state.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_mechanical_state.html,1,['efficient'],['efficiently']
Energy Efficiency,"ixedInteractionForceField, TDataTypes1, TDataTypes2), BaseInteractionForceField, SOFA_TEMPLATE2(PairStateAccessor, TDataTypes1, TDataTypes2));  ; void addForce (const MechanicalParams *mparams, MultiVecDerivId fId) override;  ; void addDForce (const MechanicalParams *mparams, MultiVecDerivId dfId) override;  ; SReal getPotentialEnergy (const MechanicalParams *mparams) const override;  ;  Public Member Functions inherited from sofa::core::behavior::BaseInteractionForceField;  SOFA_ABSTRACT_CLASS (BaseInteractionForceField, BaseForceField);  ; virtual BaseMechanicalState * getMechModel1 ();  ; virtual BaseMechanicalState * getMechModel2 ();  ; void addKToMatrix (const MechanicalParams *, const sofa::core::behavior::MultiMatrixAccessor *) override;  Compute the system matrix corresponding to . More...;  ; virtual void initGnuplot (const std::string path);  initialization to export potential energy to gnuplot files format More...;  ; virtual void exportGnuplot (SReal time);  export kinetic and potential energy state at ""time"" to a gnuplot file More...;  ; bool insertInNode (objectmodel::BaseNode *node) override;  ; bool removeInNode (objectmodel::BaseNode *node) override;  ;  Public Member Functions inherited from sofa::core::behavior::BaseForceField;  SOFA_ABSTRACT_CLASS (BaseForceField, StateAccessor);  ; virtual void addMBKdx (const MechanicalParams *mparams, MultiVecDerivId dfId);  Accumulate the contribution of M, B, and/or K matrices multiplied by the dx vector with the given coefficients. More...;  ; virtual void addBToMatrix (const MechanicalParams *mparams, const sofa::core::behavior::MultiMatrixAccessor *matrix);  Compute the system matrix corresponding to . More...;  ; virtual void addMBKToMatrix (const MechanicalParams *mparams, const sofa::core::behavior::MultiMatrixAccessor *matrix);  Compute the system matrix corresponding to . More...;  ; virtual void buildStiffnessMatrix (StiffnessMatrix *matrix);  ; virtual const sofa::linearalgebra::BaseMatrix * getCo",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_interaction_ellipsoid_force_field.html:6870,energy,energy,6870,api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_interaction_ellipsoid_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_interaction_ellipsoid_force_field.html,1,['energy'],['energy']
Energy Efficiency,"lSymplecticSolver::d_newtonSteps. Maximum number of Newton steps. . ◆ d_rayleighMass. Data<SReal> sofa::component::odesolver::backward::VariationalSymplecticSolver::d_rayleighMass. Rayleigh damping coefficient related to mass, > 0. . ◆ d_rayleighStiffness. Data<SReal> sofa::component::odesolver::backward::VariationalSymplecticSolver::d_rayleighStiffness. Rayleigh damping coefficient related to stiffness, > 0. . ◆ d_saveEnergyInFile. Data<bool> sofa::component::odesolver::backward::VariationalSymplecticSolver::d_saveEnergyInFile. If kinetic and potential energies should be dumped in a CSV file at each iteration. . ◆ d_threadSafeVisitor. Data<bool> sofa::component::odesolver::backward::VariationalSymplecticSolver::d_threadSafeVisitor. If true, do not use realloc and free visitors in fwdInteractionForceField. . ◆ d_useIncrementalPotentialEnergy. Data<bool> sofa::component::odesolver::backward::VariationalSymplecticSolver::d_useIncrementalPotentialEnergy. use real potential energy, if false use approximate potential energy . ◆ energies. std::ofstream sofa::component::odesolver::backward::VariationalSymplecticSolver::energies. ◆ f_computeHamiltonian. sofa::core::objectmodel::RenamedData<bool> sofa::component::odesolver::backward::VariationalSymplecticSolver::f_computeHamiltonian. ◆ f_explicit. sofa::core::objectmodel::RenamedData<bool> sofa::component::odesolver::backward::VariationalSymplecticSolver::f_explicit. ◆ f_fileName. sofa::core::objectmodel::RenamedData<std::string> sofa::component::odesolver::backward::VariationalSymplecticSolver::f_fileName. ◆ f_hamiltonianEnergy. sofa::core::objectmodel::RenamedData<SReal> sofa::component::odesolver::backward::VariationalSymplecticSolver::f_hamiltonianEnergy. ◆ f_newtonError. sofa::core::objectmodel::RenamedData<SReal> sofa::component::odesolver::backward::VariationalSymplecticSolver::f_newtonError. ◆ f_newtonSteps. sofa::core::objectmodel::RenamedData<unsigned int> sofa::component::odesolver::backward::VariationalSymplecticS",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1backward_1_1_variational_symplectic_solver.html:18839,energy,energy,18839,api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1backward_1_1_variational_symplectic_solver.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1backward_1_1_variational_symplectic_solver.html,2,['energy'],['energy']
Energy Efficiency,"lace. Scheduled additions must be finalized using function compress(). More...;  ; void beginRow (Index index);  ; void insertBack (Index row, Index col, Real value);  ; Real & coeffRef (Index i, Index j);  Return a reference to the given entry in the compressed matrix.There can (must ?) be a value at this place already. Efficient only if the it is at the last place of the compressed matrix. More...;  ; void copy (const EigenBaseSparseMatrix &m, unsigned nbCol, unsigned shift);  ; void resize (Index nbRow, Index nbCol) override;  Resize the matrix without preserving the data (the matrix is set to zero) More...;  ; Index rowSize (void) const override;  number of rows More...;  ; Index colSize (void) const override;  number of columns More...;  ; void reserve (typename CompressedMatrix::Index reserveSize);  ; SReal element (Index i, Index j) const override;  Read the value of the element at row i, column j (using 0-based indices) More...;  ; void compress () override;  Add the values from the scheduled list, and clears the schedule list. More...;  ; Index * getRowBegin ();  ; Index * getColsIndex ();  ; Real * getColsValue ();  ; void clearRow (Index i) override;  Set all the entries of a row to 0. More...;  ; void clearRows (Index imin, Index imax) override;  Set all the entries of rows imin to imax-1 to 0. More...;  ; void clearCol (Index col) override;  Clears the all the entries of column imin to column imax-1. Not efficient ! More...;  ; void clearCols (Index imin, Index imax) override;  Set all the entries of column i and of row i to 0. Not efficient ! More...;  ; void clearRowCol (Index i) override;  Clears all the entries of rows imin to imax-1 and columns imin to imax-1. More...;  ; void clearRowsCols (Index imin, Index imax) override;  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; void clear () override;  Set all values to 0, by resizing to the same size. More...;  ; void mult (VectorEigen &result, const VectorEigen &da",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html:3397,schedul,scheduled,3397,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html,4,['schedul'],"['schedule', 'scheduled']"
Energy Efficiency,"lass Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Protected Member Functions |; Friends |; List of all members . sofa::core::objectmodel::AspectPool Class Reference . #include <AspectPool.h>; Detailed Description; This class is responsible for managing the pool of available aspects numbers. It is safe to use this class from several thread. . Public Member Functions;  AspectPool ();  ;  ~AspectPool ();  ; void setReleaseCallback (const std::function< void(int)> &callback);  ; AspectRef allocate ();  ; AspectRef getAspect (int id);  ; int nbAspects () const;  ; int getAspectCounter (int id) const;  . Protected Member Functions; void release (int id);  . Friends; class Aspect;  . Constructor details. ◆ AspectPool(). sofa::core::objectmodel::AspectPool::AspectPool ; (; ). Constructor: creates a new aspect pool. . ◆ ~AspectPool(). sofa::core::objectmodel::AspectPool::~AspectPool ; (; ). Destructor. . Function details. ◆ allocate(). AspectRef sofa::core::objectmodel::AspectPool::allocate ; (; ). Request a new aspect. The returned object should stay alive as long as the aspect is in use. It it possible to duplicate the AspectRef if several threads/algorithm use the same aspect. If no aspect remains available, null pointer is returned. . ◆ getAspect(). AspectRef sofa::core::objectmodel::AspectPool::getAspect ; (; int ; id). ◆ getAspectCounter(). int sofa::core::objectmodel::AspectPool::getAspectCounter ; (; int ; id); const. inline . ◆ nbAspects(). int sofa::core::objectmodel::AspectPool::nbAspects ; (; ); const. inline . ◆ release(). void sofa::core::objectmodel::AspectPool::release ; (; int ; id). protected . Release the aspect having the specified number. It makes the number immediately available to satisfy subsequent AspectPool::allocate requests. . ◆ setReleaseCallback(). void sofa::core::objectmodel::AspectPool::setReleaseCallback ; (; const std::function< void(int)> & ; callback). Related details. ◆ A",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_pool.html:1046,allocate,allocate,1046,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_pool.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_pool.html,1,['allocate'],['allocate']
Energy Efficiency,"lass  Allocator;  Task Allocator class interface used to allocate tasks. More...;  ; class  Status;  Task Status class interface used to synchronize tasks. More...;  . Public Attributes; int m_id;  . Protected Attributes; int m_scheduledThread;  . Public Member Functions;  Task (int scheduledThread);  ; virtual ~Task ()=default;  ; virtual MemoryAlloc run ()=0;  ; virtual Task::Status * getStatus (void) const =0;  ; int getScheduledThread () const;  . Static Public Member Functions; static void * operator new (std::size_t sz);  ; static void operator delete (void *ptr);  ; static void operator delete (void *ptr, std::size_t sz);  ; static void * operator new[] (std::size_t sz)=delete;  ; static Task::Allocator * getAllocator ();  ; static void setAllocator (Task::Allocator *allocator);  . Attribute details. ◆ m_id. int sofa::simulation::Task::m_id. ◆ m_scheduledThread. int sofa::simulation::Task::m_scheduledThread. protected . Constructor details. ◆ Task(). sofa::simulation::Task::Task ; (; int ; scheduledThread). ◆ ~Task(). virtual sofa::simulation::Task::~Task ; (; ). virtualdefault . Function details. ◆ getAllocator(). Task::Allocator * sofa::simulation::Task::getAllocator ; (; ). static . ◆ getScheduledThread(). int sofa::simulation::Task::getScheduledThread ; (; ); const. ◆ getStatus(). virtual Task::Status* sofa::simulation::Task::getStatus ; (; void ; ); const. pure virtual . Implemented in sofa::simulation::CpuTask. ◆ operator delete() [1/2]. void sofa::simulation::Task::operator delete ; (; void * ; ptr). static . ◆ operator delete() [2/2]. void sofa::simulation::Task::operator delete ; (; void * ; ptr, . std::size_t ; sz . ). static . ◆ operator new(). void * sofa::simulation::Task::operator new ; (; std::size_t ; sz). static . ◆ operator new[](). static void* sofa::simulation::Task::operator new[] ; (; std::size_t ; sz). staticdelete . ◆ run(). virtual MemoryAlloc sofa::simulation::Task::run ; (; ). pure virtual . Implemented in sofa::simulation::InitPerT",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_task.html:1460,schedul,scheduledThread,1460,api/master/sofa/html/classsofa_1_1simulation_1_1_task.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_task.html,1,['schedul'],['scheduledThread']
Energy Efficiency,lass  InitVisitor;  ; class  IntegrateBeginEvent;  ; class  IntegrateEndEvent;  ; class  SpinLock;  ; class  ScopedLock;  ; class  MainTaskSchedulerFactory;  ; class  MainTaskSchedulerRegistry;  ; class  MechanicalVisitor;  ; class  MechanicalVPrintVisitor;  ; class  MechanicalVPrintWithElapsedTimeVisitor;  ; class  DofPrintVisitor;  ; class  MutationListener;  Generic API to handle mutations of the graph. More...;  ; class  NodeSequence;  ; class  NodeSingle;  ; class  Node;  ; struct  Range;  ; class  ParallelSparseMatrixProduct;  ; class  PauseEvent;  ; class  PipelineImpl;  ; class  PositionEvent;  ; class  PrintVisitor;  ; class  PropagateEventVisitor;  ; class  RequiredPlugin;  ; class  ResetVisitor;  ; class  StoreResetStateVisitor;  ; class  SceneCheck;  ; class  SceneCheckMainRegistry;  ; class  SceneCheckRegistry;  ; class  SceneLoader;  Main class used to register scene file loaders. More...;  ; class  SceneLoaderFactory;  ; class  Simulation;  ; class  SolveVisitor;  ; class  SolveVisitorTask;  A task to provide to a task scheduler in which a solver solves. More...;  ; class  StateChangeVisitor;  ; class  Task;  ; class  TaskScheduler;  ; class  TaskSchedulerFactory;  ; class  TaskSchedulerRegistry;  ; class  TopologyChangeVisitor;  ; class  UpdateBoundingBoxVisitor;  ; class  UpdateContextVisitor;  ; class  UpdateSimulationContextVisitor;  ; class  UpdateVisualContextVisitor;  ; class  UpdateInternalDataVisitor;  ; class  UpdateLinksVisitor;  ; class  UpdateMappingEndEvent;  ; class  UpdateMappingVisitor;  ; class  VelocityThresholdVisitor;  ; class  Visitor;  Base class for visitors propagated recursively through the scenegraph. More...;  ; class  VisualVisitor;  ; class  VisualDrawVisitor;  ; class  VisualUpdateVisitor;  ; class  VisualInitVisitor;  ; class  VisualComputeBBoxVisitor;  ; class  VisualClearVisitor;  ; class  WorkerThread;  ; class  WriteStateVisitor;  ; class  XMLPrintVisitor;  . Typedefs; typedef sofa::core::sptr< Node > NodeSPtr;  ; t,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation.html:3077,schedul,scheduler,3077,api/master/sofa/html/namespacesofa_1_1simulation.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation.html,1,['schedul'],['scheduler']
Energy Efficiency,"le; Ray/Point; Ray/Line . Public Attributes; sofa::core::objectmodel::RenamedData< bool > filterIntersection;  ; sofa::core::objectmodel::RenamedData< double > angleCone;  ; sofa::core::objectmodel::RenamedData< double > coneFactor;  ; sofa::core::objectmodel::RenamedData< bool > useLMDFilters;  ; Data< bool > d_filterIntersection;  Activate LMD filter. More...;  ; Data< double > d_angleCone;  Filtering cone extension angle. More...;  ; Data< double > d_coneFactor;  Factor for filtering cone angle computation. More...;  ; Data< bool > d_useLMDFilters;  Use external cone computation. More...;  ;  Public Attributes inherited from sofa::component::collision::detection::intersection::BaseProximityIntersection; sofa::core::objectmodel::RenamedData< SReal > alarmDistance;  ; sofa::core::objectmodel::RenamedData< SReal > contactDistance;  ; Data< SReal > d_alarmDistance;  Distance above which the intersection computations ignores the proximity pair. This distance can also be used in some broad phase algorithms to reduce the search area. More...;  ; Data< SReal > d_contactDistance;  Distance below which a contact is created. More...;  ;  Public Attributes inherited from sofa::component::collision::detection::intersection::DiscreteIntersection; core::collision::IntersectorMap intersectors;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1intersection_1_1_local_min_distance.html:1921,reduce,reduce,1921,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1intersection_1_1_local_min_distance.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1intersection_1_1_local_min_distance.html,1,['reduce'],['reduce']
Energy Efficiency,"ling, 1 = cull back faces, 2 = cull front faces) More...;  ; Data< GLfloat > lineWidth;  Line width (set if != 1, only for lines rendering) More...;  ; Data< GLfloat > pointSize;  Point size (set if != 1, only for points rendering) More...;  ; Data< bool > lineSmooth;  Enable smooth line rendering. More...;  ; Data< bool > pointSmooth;  Enable smooth point rendering. More...;  ; DeprecatedAndRemoved isEnabled;  ; Data< sofa::helper::OptionsGroup > primitiveType;  Select types of primitives to send (necessary for some shader types such as geometry or tessellation) More...;  ; Data< sofa::helper::OptionsGroup > blendEquation;  if alpha blending is enabled this specifies how source and destination colors are combined More...;  ; Data< sofa::helper::OptionsGroup > sourceFactor;  if alpha blending is enabled this specifies how the red, green, blue, and alpha source blending factors are computed More...;  ; Data< sofa::helper::OptionsGroup > destFactor;  if alpha blending is enabled this specifies how the red, green, blue, and alpha destination blending factors are computed More...;  ; GLenum blendEq;  ; GLenum sfactor;  ; GLenum dfactor;  ; sofa::gl::Texture * tex;  ; GLuint vbo;  ; GLuint iboEdges;  ; GLuint iboTriangles;  ; GLuint iboQuads;  ; bool VBOGenDone;  ; bool initDone;  ; bool useEdges;  ; bool useTriangles;  ; bool useQuads;  ; bool canUsePatches;  ; size_t oldVerticesSize;  ; size_t oldNormalsSize;  ; size_t oldTexCoordsSize;  ; size_t oldTangentsSize;  ; size_t oldBitangentsSize;  ; size_t oldEdgesSize;  ; size_t oldTrianglesSize;  ; size_t oldQuadsSize;  ; int edgesRevision;  ; int trianglesRevision;  ; int quadsRevision;  ; std::vector< sofa::type::Vec3f > verticesTmpBuffer;  ; std::vector< sofa::type::Vec3f > normalsTmpBuffer;  ; std::vector< sofa::gl::Texture * > textures;  ; std::map< int, int > materialTextureIdMap;  ;  Protected Attributes inherited from sofa::component::visual::VisualModelImpl; std::set< sofa::core::topology::BaseMeshTopology::Trian",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_merge_visual_models.html:28676,green,green,28676,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_merge_visual_models.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_merge_visual_models.html,3,['green'],['green']
Energy Efficiency,"links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  ;  Protected Attributes inherited from sofa::core::behavior::SingleStateAccessor< DataTypes >; SingleLink< SingleStateAccessor< DataTypes >, MechanicalState< DataTypes >, BaseLink::FLAG_STRONGLINK > mstate;  . Public Member Functions;  SOFA_CLASS (SOFA_TEMPLATE(TetrahedralTensorMassForceField, DataTypes), SOFA_TEMPLATE(core::behavior::ForceField, DataTypes));  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; void initNeighbourhoodPoints ();  ; void addForce (const core::MechanicalParams *mparams, DataVecDeriv &d_f, const DataVecCoord &d_x, const DataVecDeriv &d_v) override;  ; void addDForce (const core::MechanicalParams *mparams, DataVecDeriv &d_df, const DataVecDeriv &d_dx) override;  ; void buildStiffnessMatrix (sofa::core::behavior::StiffnessMatrix *matrix) override;  ; void buildDampingMatrix (core::behavior::DampingMatrix *) final;  ; SReal getPotentialEnergy (const core::MechanicalParams *, const DataVecCoord &) const override;  ; virtual Real getLambda () const;  ; virtual Real getMu () const;  ; SReal getPotentialEnergy (const core::MechanicalParams *mparams) const override;  Get the potential energy associated to this ForceField during the last call of addForce( const MechanicalParams* mparams );. More...;  ; void setYoungModulus (const Real modulus);  ; void setPoissonRatio (const Real ratio);  ; void draw (const core::visual::VisualParams *vparams) override;  Render internal data of this object, for debugging purposes. More...;  ; void updateLameCoefficients ();  compute lambda and mu based on the Young modulus and Poisson ratio More...;  ; void createEdgeRestInformation (Index edgeIndex, EdgeRestInformation &ei, const core::topology::BaseMeshTopology::Edge &, const sofa::type::vector< Index > &, const sofa::type::vector< SReal > &);  ; void applyTetrahedronCreation (const s",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1tensormass_1_1_tetrahedral_tensor_mass_force_field.html:3572,energy,energy,3572,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1tensormass_1_1_tetrahedral_tensor_mass_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1tensormass_1_1_tetrahedral_tensor_mass_force_field.html,1,['energy'],['energy']
Energy Efficiency,"llMultiVecId a, SReal f=1.0);  v += a*f More...;  ; void teq (SReal f);  v *= f More...;  ; void eq (AllMultiVecId a, AllMultiVecId b, SReal f=1.0);  v = a+b*f More...;  ; SReal dot (MyMultiVecId a);  ; void threshold (SReal threshold);  nullify values below given threshold More...;  ; SReal norm ();  ; SReal norm (unsigned l);  ; void operator= (MyMultiVecId a);  v = a More...;  ; void operator= (const TMultiVec< vtype > &a);  v = a More...;  ; void operator+= (MyMultiVecId a);  v += a More...;  ; void operator-= (MyMultiVecId a);  v -= a More...;  ; void operator*= (SReal f);  v *= f More...;  ; void operator/= (SReal f);  v /= f More...;  ; SReal operator* (MyMultiVecId a);  return the scalar product dot(v,a) More...;  ; size_t size () const;  . Friends; std::ostream & operator<< (std::ostream &out, const TMultiVec< vtype > &mv);  . Attribute details. ◆ dynamic. template<VecType vtype> . bool sofa::core::behavior::TMultiVec< vtype >::dynamic. protected . Flag indicating if this vector was dynamically allocated. . ◆ v. template<VecType vtype> . MyMultiVecId sofa::core::behavior::TMultiVec< vtype >::v. protected . Identifier of this vector. . ◆ vop. template<VecType vtype> . BaseVectorOperations* sofa::core::behavior::TMultiVec< vtype >::vop. protected . Solver who is using this vector. . Constructor details. ◆ TMultiVec() [1/3]. template<VecType vtype> . sofa::core::behavior::TMultiVec< vtype >::TMultiVec ; (; BaseVectorOperations * ; vop, . MyMultiVecId ; v . ). inline . Refers to a state vector with the given ID (VecId::position(), VecId::velocity(), etc). . ◆ TMultiVec() [2/3]. template<VecType vtype> . sofa::core::behavior::TMultiVec< vtype >::TMultiVec ; (; ). inline . Refers to a not yet allocated state vector. . ◆ TMultiVec() [3/3]. template<VecType vtype> . sofa::core::behavior::TMultiVec< vtype >::TMultiVec ; (; BaseVectorOperations * ; vop, . bool ; dynamic = true, . const VecIdProperties & ; properties = {} . ). inline . Allocate a new temporary vector ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_t_multi_vec.html:2999,allocate,allocated,2999,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_t_multi_vec.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_t_multi_vec.html,1,['allocate'],['allocated']
Energy Efficiency,"llisions;  ; type::fixed_array< Operation *, NONE > operations;  ; type::vector< CallBackPicker * > callbacks;  ; CallBackRender * renderCallback;  ; PickingMethod pickingMethod;  ; double m_defaultLength;  Default length of the ray. Set by constructor. More...;  . Public Member Functions;  GLPickHandler (double defaultLength=1000000);  ; virtual ~GLPickHandler () override;  ; void allocateSelectionBuffer (int width, int height) override;  ; void destroySelectionBuffer () override;  ; common::BodyPicked findCollisionUsingColourCoding (const type::Vec3 &origin, const type::Vec3 &direction) override;  ;  Public Member Functions inherited from sofa::gui::common::PickHandler;  PickHandler (double defaultLength=1000000);  ; virtual ~PickHandler ();  ; void activateRay (int width, int height, core::objectmodel::BaseNode *root);  ; void deactivateRay ();  ; void setPickingMethod (PickingMethod method);  ; bool useSelectionBufferMethod () const;  ; void updateRay (const sofa::type::Vec3 &position, const sofa::type::Vec3 &orientation);  ; void handleMouseEvent (MOUSE_STATUS status, MOUSE_BUTTON button);  ; void init (core::objectmodel::BaseNode *root);  ; void reset ();  ; void unload ();  ; void setColourRenderCallback (CallBackRender *colourRender);  ; void updateMouse2D (MousePosition mouse);  ; Operation * getOperation (MOUSE_BUTTON button);  ; Operation * changeOperation (sofa::component::setting::MouseButtonSetting *setting);  ; Operation * changeOperation (MOUSE_BUTTON button, const std::string &op);  ; void addCallBack (CallBackPicker *c);  ; type::vector< CallBackPicker * > getCallBackPicker ();  ; void clearCallBacks ();  ; ComponentMouseInteraction * getInteraction ();  ; BodyPicked * getLastPicked ();  . Additional Inherited Members;  Static Public Member Functions inherited from sofa::gui::common::PickHandler; static BodyPicked findCollisionUsingBruteForce (const type::Vec3 &origin, const type::Vec3 &direction, double maxLength, core::objectmodel::BaseNode *root)",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_g_l_pick_handler.html:1310,allocate,allocateSelectionBuffer,1310,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_g_l_pick_handler.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_g_l_pick_handler.html,1,['allocate'],['allocateSelectionBuffer']
Energy Efficiency,"lload::PlaneForceField< DataTypes >, sofa::component::mechanicalload::OscillatingTorsionPressureForceField< DataTypes >, sofa::component::mechanicalload::EllipsoidForceField< DataTypes >, sofa::component::mechanicalload::EdgePressureForceField< DataTypes >, sofa::component::mechanicalload::ConicalForceField< DataTypes >, sofa::component::mechanicalload::LinearForceField< DataTypes >, sofa::component::mechanicalload::LinearForceField< DataTypes >, sofa::component::mechanicalload::LinearForceField< DataTypes >, sofa::component::mechanicalload::LinearForceField< DataTypes >, sofa::component::mechanicalload::ConstantForceField< DataTypes >, sofa::component::mechanicalload::ConstantForceField< DataTypes >, sofa::component::mechanicalload::ConstantForceField< DataTypes >, and sofa::component::mechanicalload::ConstantForceField< DataTypes >. ◆ getPotentialEnergy() [2/2]. template<class DataTypes > . SReal sofa::core::behavior::ForceField< DataTypes >::getPotentialEnergy ; (; const MechanicalParams * ; mparams); const. overridevirtual . Get the potential energy associated to this ForceField.; Used to estimate the total energy of the system by some post-stabilization techniques.; This method must be implemented by the component, and is usually called by the generic ForceField::getPotentialEnergy(const MechanicalParams* mparams) method. ; Implements sofa::core::behavior::BaseForceField. ◆ shortName(). template<class TDataTypes > . template<class T > . static std::string sofa::core::behavior::ForceField< TDataTypes >::shortName ; (; const T * ; ptr = nullptr, . objectmodel::BaseObjectDescription * ; arg = nullptr . ). inlinestatic . ◆ SOFA_CLASS2(). template<class TDataTypes > . sofa::core::behavior::ForceField< TDataTypes >::SOFA_CLASS2 ; (; SOFA_TEMPLATE(ForceField< TDataTypes >, TDataTypes) ; , . BaseForceField< TDataTypes > ; , . SOFA_TEMPLATE(SingleStateAccessor, TDataTypes) ;  . ). sofacorebehaviorForceField; Generated on Mon Nov 11 2024 03:15:04 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_force_field.html:39893,energy,energy,39893,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_force_field.html,2,['energy'],['energy']
Energy Efficiency,"lti-physics simuation. Protected Attributes |; Public Member Functions |; List of all members . sofa::simulation::common::VectorOperations Class Reference . #include <VectorOperations.h>. Inheritance diagram for sofa::simulation::common::VectorOperations:. [legend]. Protected Attributes; VisitorExecuteFunc executeVisitor;  ; SReal result;  Result of latest v_dot operation. More...;  ;  Protected Attributes inherited from sofa::core::behavior::BaseVectorOperations; const core::ExecParams * params;  ; core::objectmodel::BaseContext * ctx;  ; SReal result;  . Public Member Functions;  VectorOperations (const sofa::core::ExecParams *params, sofa::core::objectmodel::BaseContext *ctx, bool precomputedTraversalOrder=false);  ; void v_alloc (sofa::core::MultiVecCoordId &v, const core::VecIdProperties &properties={}) override;  Allocate a temporary vector. More...;  ; void v_alloc (sofa::core::MultiVecDerivId &v, const core::VecIdProperties &properties={}) override;  ; void v_free (sofa::core::MultiVecCoordId &id, bool interactionForceField=false, bool propagate=false) override;  Free a previously allocated temporary vector. More...;  ; void v_free (sofa::core::MultiVecDerivId &id, bool interactionForceField=false, bool propagate=false) override;  ; void v_realloc (sofa::core::MultiVecCoordId &id, bool interactionForceField=false, bool propagate=false, const core::VecIdProperties &properties={}) override;  keep already allocated vectors and allocates others. If interactionForceField, also allocates mechanical states linked by an InteractionForceField More...;  ; void v_realloc (sofa::core::MultiVecDerivId &id, bool interactionForceField=false, bool propagate=false, const core::VecIdProperties &properties={}) override;  ; void v_clear (core::MultiVecId v) override;  v=0 More...;  ; void v_eq (core::MultiVecId v, core::ConstMultiVecId a) override;  v=a More...;  ; void v_eq (core::MultiVecId v, core::ConstMultiVecId a, SReal f) override;  v=f*a More...;  ; void v_peq (core::Mu",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_vector_operations.html:1230,allocate,allocated,1230,api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_vector_operations.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_vector_operations.html,1,['allocate'],['allocated']
Energy Efficiency,"ltiVecDerivId dfId) override;  ; virtual void addDForce (const MechanicalParams *mparams, DataVecDeriv &df1, DataVecDeriv &df2, const DataVecDeriv &dx1, const DataVecDeriv &dx2)=0;  ; SReal getPotentialEnergy (const MechanicalParams *mparams) const override;  ; virtual SReal getPotentialEnergy (const MechanicalParams *mparams, const DataVecCoord &x1, const DataVecCoord &x2) const =0;  ;  Public Member Functions inherited from sofa::core::behavior::BaseInteractionForceField;  SOFA_ABSTRACT_CLASS (BaseInteractionForceField, BaseForceField);  ; virtual BaseMechanicalState * getMechModel1 ();  ; virtual BaseMechanicalState * getMechModel2 ();  ; void addKToMatrix (const MechanicalParams *, const sofa::core::behavior::MultiMatrixAccessor *) override;  Compute the system matrix corresponding to . More...;  ; virtual void initGnuplot (const std::string path);  initialization to export potential energy to gnuplot files format More...;  ; virtual void exportGnuplot (SReal time);  export kinetic and potential energy state at ""time"" to a gnuplot file More...;  ; bool insertInNode (objectmodel::BaseNode *node) override;  ; bool removeInNode (objectmodel::BaseNode *node) override;  ;  Public Member Functions inherited from sofa::core::behavior::BaseForceField;  SOFA_ABSTRACT_CLASS (BaseForceField, StateAccessor);  ; virtual void addMBKdx (const MechanicalParams *mparams, MultiVecDerivId dfId);  Accumulate the contribution of M, B, and/or K matrices multiplied by the dx vector with the given coefficients. More...;  ; virtual void addBToMatrix (const MechanicalParams *mparams, const sofa::core::behavior::MultiMatrixAccessor *matrix);  Compute the system matrix corresponding to . More...;  ; virtual void addMBKToMatrix (const MechanicalParams *mparams, const sofa::core::behavior::MultiMatrixAccessor *matrix);  Compute the system matrix corresponding to . More...;  ; virtual void buildStiffnessMatrix (StiffnessMatrix *matrix);  ; virtual void buildDampingMatrix (DampingMatrix *matri",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_pair_interaction_force_field.html:2772,energy,energy,2772,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_pair_interaction_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_pair_interaction_force_field.html,1,['energy'],['energy']
Energy Efficiency,"m sofa::core::behavior::BaseForceField. ◆ calcF(). template<class DataTypes1 , class DataTypes2 > . bool sofa::component::mechanicalload::InteractionEllipsoidForceField< DataTypes1, DataTypes2 >::calcF ; (; const Coord1 & ; p1, . const Deriv1 & ; v1, . Deriv1 & ; f1, . Mat & ; dfdx . ). protected . ◆ draw(). template<class DataTypes1 , class DataTypes2 > . void sofa::component::mechanicalload::InteractionEllipsoidForceField< DataTypes1, DataTypes2 >::draw ; (; const core::visual::VisualParams * ; ). overridevirtual . Render internal data of this object, for debugging purposes. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ getPotentialEnergy(). template<class DataTypes1 , class DataTypes2 > . SReal sofa::component::mechanicalload::InteractionEllipsoidForceField< DataTypes1, DataTypes2 >::getPotentialEnergy ; (; const sofa::core::MechanicalParams * ; mparams, . const DataVecCoord1 & ; x1, . const DataVecCoord2 & ; x2 . ); const. overridevirtual . Get the potential energy associated to this ForceField.; Used to estimate the total energy of the system by some post-stabilization techniques.; This method must be implemented by the component, and is usually called by the generic MixedInteractionForceField::getPotentialEnergy() method. ; Implements sofa::core::behavior::MixedInteractionForceField< TDataTypes1, TDataTypes2 >. ◆ init(). template<class DataTypes1 , class DataTypes2 > . void sofa::component::mechanicalload::InteractionEllipsoidForceField< DataTypes1, DataTypes2 >::init ; (; void ; ). overridevirtual . Initialization method called at graph creation and modification, during top-down traversal. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ initCalcF(). template<class DataTypes1 , class DataTypes2 > . void sofa::component::mechanicalload::InteractionEllipsoidForceField< DataTypes1, DataTypes2 >::initCalcF. protected . ◆ reinit(). template<class DataTypes1 , class DataTypes2 > . void sofa::component::mechanicalload::InteractionEllipsoidFo",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_interaction_ellipsoid_force_field.html:27807,energy,energy,27807,api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_interaction_ellipsoid_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_interaction_ellipsoid_force_field.html,1,['energy'],['energy']
Energy Efficiency,"m, unsigned nbCol, unsigned shift);  ; void resize (Index nbRow, Index nbCol) override;  Resize the matrix without preserving the data (the matrix is set to zero) More...;  ; Index rowSize (void) const override;  number of rows More...;  ; Index colSize (void) const override;  number of columns More...;  ; void reserve (typename CompressedMatrix::Index reserveSize);  ; SReal element (Index i, Index j) const override;  Read the value of the element at row i, column j (using 0-based indices) More...;  ; void compress () override;  Add the values from the scheduled list, and clears the schedule list. More...;  ; Index * getRowBegin ();  ; Index * getColsIndex ();  ; Real * getColsValue ();  ; void clearRow (Index i) override;  Set all the entries of a row to 0. More...;  ; void clearRows (Index imin, Index imax) override;  Set all the entries of rows imin to imax-1 to 0. More...;  ; void clearCol (Index col) override;  Clears the all the entries of column imin to column imax-1. Not efficient ! More...;  ; void clearCols (Index imin, Index imax) override;  Set all the entries of column i and of row i to 0. Not efficient ! More...;  ; void clearRowCol (Index i) override;  Clears all the entries of rows imin to imax-1 and columns imin to imax-1. More...;  ; void clearRowsCols (Index imin, Index imax) override;  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; void clear () override;  Set all values to 0, by resizing to the same size. More...;  ; void mult (VectorEigen &result, const VectorEigen &data);  Matrix-vector product. More...;  ; void mult_MT (VectorEigen &result, const VectorEigen &data);  Matrix-vector product openmp multithreaded. More...;  ; template<class V1 , class V2 > ; void multVector (V1 &output, const V2 &input);  Matrix-Vector product (dense vector with contiguous memory layout) More...;  ; template<class V > ; V operator* (const V &input);  Matrix-Vector product (dense vector with contiguous memory layout) More...; ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html:3832,efficient,efficient,3832,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html,1,['efficient'],['efficient']
Energy Efficiency,"m, unsigned nbCol, unsigned shift);  ; void resize (Index nbRow, Index nbCol) override;  Resize the matrix without preserving the data (the matrix is set to zero) More...;  ; Index rowSize (void) const override;  number of rows More...;  ; Index colSize (void) const override;  number of columns More...;  ; void reserve (typename CompressedMatrix::Index reserveSize);  ; SReal element (Index i, Index j) const override;  Read the value of the element at row i, column j (using 0-based indices) More...;  ; void compress () override;  Add the values from the scheduled list, and clears the schedule list. More...;  ; Index * getRowBegin ();  ; Index * getColsIndex ();  ; Real * getColsValue ();  ; void clearRow (Index i) override;  Set all the entries of a row to 0. More...;  ; void clearRows (Index imin, Index imax) override;  Set all the entries of rows imin to imax-1 to 0. More...;  ; void clearCol (Index col) override;  Clears the all the entries of column imin to column imax-1. Not efficient ! More...;  ; void clearCols (Index imin, Index imax) override;  Set all the entries of column i and of row i to 0. Not efficient ! More...;  ; void clearRowCol (Index i) override;  Clears all the entries of rows imin to imax-1 and columns imin to imax-1. More...;  ; void clearRowsCols (Index imin, Index imax) override;  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; void clear () override;  Set all values to 0, by resizing to the same size. More...;  ; void mult (VectorEigen &result, const VectorEigen &data);  Matrix-vector product. More...;  ; void mult_MT (VectorEigen &result, const VectorEigen &data);  Matrix-vector product openmp multithreaded. More...;  ; void multVector (V1 &output, const V2 &input);  Matrix-Vector product (dense vector with contiguous memory layout) More...;  ; V operator* (const V &input);  Matrix-Vector product (dense vector with contiguous memory layout) More...;  ; const char * Name ();  ; const char * Name ();  ; b",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html:5103,efficient,efficient,5103,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html,1,['efficient'],['efficient']
Energy Efficiency,"mSolutionVector ();  ; void resizeSystem (sofa::Size n);  ; void clearSystem ();  . Attribute details. ◆ matrix. template<typename TMatrix , typename TVector > . StoredMatrixType sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >::matrix { nullptr }. The global matrix of the linear system. If the linear system is written as Ax=b, it is A. . ◆ rhs. template<typename TMatrix , typename TVector > . StoredVectorType sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >::rhs { nullptr }. The right-hand side of the linear system. If the linear system is written as Ax=b, it is b. . ◆ solution. template<typename TMatrix , typename TVector > . StoredVectorType sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >::solution { nullptr }. The solution of the linear system. If the linear system is written as Ax=b, it is x. . Function details. ◆ allocateSystem(). template<typename TMatrix , typename TVector > . void sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >::allocateSystem. ◆ clearSystem() [1/3]. SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API void sofa::component::linearsystem::LinearSystemData< GraphScatteredMatrix, GraphScatteredVector >::clearSystem ; (; ). ◆ clearSystem() [2/3]. void sofa::component::linearsystem::LinearSystemData< GraphScatteredMatrix, GraphScatteredVector >::clearSystem ; (; ). ◆ clearSystem() [3/3]. template<typename TMatrix , typename TVector > . void sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >::clearSystem. ◆ createSystemMatrix(). template<typename TMatrix , typename TVector > . void sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >::createSystemMatrix. Allocate the object for the global matrix. . ◆ createSystemRHSVector() [1/3]. SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API void sofa::component::linearsystem::LinearSystemData< GraphScatteredMatrix, GraphScatteredVector >::createSystemRHSVector ; (; ). ◆ createSystemRHSVector() [2/3]. void sofa::compon",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_linear_system_data.html:2664,allocate,allocateSystem,2664,api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_linear_system_data.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_linear_system_data.html,1,['allocate'],['allocateSystem']
Energy Efficiency,"mat, . SReal ; length = 1.0_sreal, . const type::RGBAColor & ; colorX = type::RGBAColor::red(), . const type::RGBAColor & ; colorY = type::RGBAColor::green(), . const type::RGBAColor & ; colorZ = type::RGBAColor::red() . ). static . ◆ draw() [4/16]. static void sofa::gl::Axis::draw ; (; const double * ; mat, . SReal ; length = 1.0_sreal, . const type::Vec4f & ; colorX = type::Vec4f(1, 0, 0, 1), . const type::Vec4f & ; colorY = type::Vec4f(0, 1, 0, 1), . const type::Vec4f & ; colorZ = type::Vec4f(0, 0, 1, 1) . ). staticdelete . ◆ draw() [5/16]. void sofa::gl::Axis::draw ; (; const type::RGBAColor & ; colorX = type::RGBAColor::red(), . const type::RGBAColor & ; colorY = type::RGBAColor::green(), . const type::RGBAColor & ; colorZ = type::RGBAColor::red() . ). ◆ draw() [6/16]. void sofa::gl::Axis::draw ; (; const type::Vec3 & ; center, . const double ; orient[4][4], . const type::Vec3 & ; length, . const type::RGBAColor & ; colorX = type::RGBAColor::red(), . const type::RGBAColor & ; colorY = type::RGBAColor::green(), . const type::RGBAColor & ; colorZ = type::RGBAColor::red() . ). static . ◆ draw() [7/16]. static void sofa::gl::Axis::draw ; (; const type::Vec3 & ; center, . const double ; orient[4][4], . const type::Vec3 & ; length, . const type::Vec4f & ; colorX = type::Vec4f(1, 0, 0, 1), . const type::Vec4f & ; colorY = type::Vec4f(0, 1, 0, 1), . const type::Vec4f & ; colorZ = type::Vec4f(0, 0, 1, 1) . ). staticdelete . ◆ draw() [8/16]. void sofa::gl::Axis::draw ; (; const type::Vec3 & ; center, . const double ; orient[4][4], . SReal ; length = 1.0_sreal, . const type::RGBAColor & ; colorX = type::RGBAColor::red(), . const type::RGBAColor & ; colorY = type::RGBAColor::green(), . const type::RGBAColor & ; colorZ = type::RGBAColor::red() . ). static . ◆ draw() [9/16]. static void sofa::gl::Axis::draw ; (; const type::Vec3 & ; center, . const double ; orient[4][4], . SReal ; length = 1.0_sreal, . const type::Vec4f & ; colorX = type::Vec4f(1, 0, 0, 1), . const type::Vec4",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1_axis.html:7526,green,green,7526,api/master/sofa/html/classsofa_1_1gl_1_1_axis.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1_axis.html,1,['green'],['green']
Energy Efficiency,"matrixaccumulator::get_component_type< c > *object, const PairMechanicalStates &pair);  ; template<Contribution c> ; void setSharedMatrix (sofa::core::matrixaccumulator::get_component_type< c > *object, const PairMechanicalStates &pair, std::shared_ptr< LocalMappedMatrixType< Real > > matrix);  ; template<Contribution c> ; sofa::type::vector< sofa::core::matrixaccumulator::get_component_type< c > * > getContributors () const;  Get the list of components contributing to the global matrix through the contribution type . More...;  ; void buildGroupsOfComponentAssociatedToMechanicalStates (std::map< PairMechanicalStates, GroupOfComponentsAssociatedToAPairOfMechanicalStates > &groups);  ; virtual BaseMatrixProjectionMethod< LocalMappedMatrixType< Real > >::SPtr createMatrixMapping (const PairMechanicalStates &pair);  ; BaseMatrixProjectionMethod< LocalMappedMatrixType< Real > > * findProjectionMethod (const PairMechanicalStates &pair);  ; void assemblePrecomputedMappedMassMatrix (const core::MechanicalParams *mparams, linearalgebra::BaseMatrix *destination);  ; void recomputeMappedMassMatrix (const core::MechanicalParams *mparams, BaseMass *mass);  ;  Protected Member Functions inherited from sofa::component::linearsystem::TypedMatrixLinearSystem< TMatrix, TVector >; void preAssembleSystem (const core::MechanicalParams *) override;  ; virtual void allocateSystem ();  ; virtual void resizeVectors (sofa::Size n);  Set the size of RHS and solution to n. More...;  ; void copyLocalVectorToGlobalVector (core::MultiVecDerivId v, TVector *globalVector);  ; SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API void copyLocalVectorToGlobalVector (core::MultiVecDerivId v, GraphScatteredVector *globalVector);  ; void copyLocalVectorToGlobalVector (core::MultiVecDerivId v, GraphScatteredVector *globalVector);  ;  Protected Member Functions inherited from sofa::core::behavior::BaseMatrixLinearSystem;  BaseMatrixLinearSystem ();  ; virtual void postAssembleSystem (const core::MechanicalParams *); ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsystem_1_1_constant_sparsity_pattern_system.html:22108,allocate,allocateSystem,22108,api/master/sofa/html/classsofa_1_1component_1_1linearsystem_1_1_constant_sparsity_pattern_system.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsystem_1_1_constant_sparsity_pattern_system.html,1,['allocate'],['allocateSystem']
Energy Efficiency,"me, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, BaseData::DataFlags dataFlags);  Helper method used by initData() More...;  ; template<class T > ; void initData0 (Data< T > *field, typename Data< T >::InitData &res, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ;  Protected Member Functions inherited from sofa::core::State< DataTypes >;  State ();  ;  ~State () override;  . Static Protected Member Functions; template<core::VecType vtype, core::VecAccess vaccess> ; static void setVecIdProperties (core::TVecId< vtype, vaccess > v, const core::VecIdProperties &properties, core::BaseData *vec_d);  . Friends; class MechanicalObjectInternalData< DataTypes >;  . Integration-related data; sofa::type::vector< Data< VecCoord > * > vectorsCoord;  Coordinates DOFs vectors table (static and dynamic allocated) More...;  ; sofa::type::vector< Data< VecDeriv > * > vectorsDeriv;  Derivates DOFs vectors table (static and dynamic allocated) More...;  ; sofa::type::vector< Data< MatrixDeriv > * > vectorsMatrixDeriv;  Constraint vectors table. More...;  ; void setVecCoord (core::ConstVecCoordId, Data< VecCoord > *);  Inserts VecCoord DOF coordinates vector at index in the vectorsCoord container. More...;  ; void setVecDeriv (core::ConstVecDerivId, Data< VecDeriv > *);  Inserts VecDeriv DOF derivates vector at index in the vectorsDeriv container. More...;  ; void setVecMatrixDeriv (core::ConstMatrixDerivId, Data< MatrixDeriv > *);  Inserts MatrixDeriv DOF at index in the MatrixDeriv container. More...;  . Additional Inherited Members;  Static Public Member Functions inherited from sofa::core::behavior::MechanicalState< DataTypes >; static std::string shortName (const T *ptr=nullptr, objectmodel::BaseObjectDescription *arg=nullptr)",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1statecontainer_1_1_mechanical_object.html:33559,allocate,allocated,33559,api/master/sofa/html/classsofa_1_1component_1_1statecontainer_1_1_mechanical_object.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1statecontainer_1_1_mechanical_object.html,1,['allocate'],['allocated']
Energy Efficiency,"meSize ; (; VecId ; dest, . const linearalgebra::BaseVector * ; src, . unsigned int & ; offset . ). pure virtual . Perform dest[i][j] += src[offset + i][j] 0<= i < src_entries 0<= j < 3 (for 3D objects) 0 <= j < 2 (for 2D objects) ; Parameters. offsetthe offset in the BaseVector where the scalar values will be used. It will be updated to the first scalar value after the ones used by this operation when this method returns . Implemented in sofa::component::statecontainer::MechanicalObject< DataTypes >, sofa::component::statecontainer::MechanicalObject< T >, sofa::component::statecontainer::MechanicalObject< DataTypes >, sofa::component::statecontainer::MechanicalObject< T >, sofa::component::statecontainer::MechanicalObject< DataTypes >, and sofa::component::statecontainer::MechanicalObject< T >. ◆ addFromBuffer(). virtual void sofa::core::behavior::BaseMechanicalState::addFromBuffer ; (; VecId ; dst, . const SReal * ; src, . unsigned int ; n . ). pure virtual . Add data from an external, user-allocated buffer. ; Exact element count must be provided for consistency checks. . ◆ addToBaseVector(). virtual void sofa::core::behavior::BaseMechanicalState::addToBaseVector ; (; linearalgebra::BaseVector * ; dest, . ConstVecId ; src, . unsigned int & ; offset . ). pure virtual . Add data to a global BaseVector from the state stored in a local vector. ; Parameters. offsetthe offset in the BaseVector where the scalar values will be used. It will be updated to the first scalar value after the ones used by this operation when this method returns . Implemented in sofa::component::statecontainer::MechanicalObject< DataTypes >, and sofa::component::statecontainer::MechanicalObject< T >. ◆ applyRotation() [1/2]. virtual void sofa::core::behavior::BaseMechanicalState::applyRotation ; (; const ; SReal, . const ; SReal, . const ; SReal . ). inlinevirtual . Rotate the current state. ; This method is optional, it is used when the user want to interactively change the position of an objec",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_mechanical_state.html:25892,allocate,allocated,25892,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_mechanical_state.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_mechanical_state.html,1,['allocate'],['allocated']
Energy Efficiency,"method must be implemented by the component. Parameters. matrixmatrix to add the result to ; mparamsmparams->mFactor() is the coefficient for mass contributions (i.e. second-order derivatives term in the ODE) . Implemented in sofa::core::behavior::Mass< DataTypes >. ◆ buildMassMatrix(). void sofa::core::behavior::BaseMass::buildMassMatrix ; (; sofa::core::behavior::MassMatrixAccumulator * ; matrices). virtual . Reimplemented in sofa::component::solidmechanics::fem::elastic::HexahedronFEMForceFieldAndMass< DataTypes >, sofa::component::mass::UniformMass< DataTypes >, sofa::component::mass::MeshMatrixMass< DataTypes, GeometricalTypes >, sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >, and sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >. ◆ exportGnuplot(). virtual void sofa::core::behavior::BaseMass::exportGnuplot ; (; const MechanicalParams * ; mparams, . SReal ; time . ). pure virtual . export kinetic and potential energy state at ""time"" to a gnuplot file ; Implemented in sofa::core::behavior::Mass< DataTypes >. ◆ getElementMass() [1/2]. virtual SReal sofa::core::behavior::BaseMass::getElementMass ; (; sofa::Index ; index); const. pure virtual . Get the mass relative to the DOF at index. ; Implemented in sofa::core::behavior::Mass< DataTypes >, sofa::component::solidmechanics::fem::elastic::HexahedralFEMForceFieldAndMass< DataTypes >, sofa::component::mass::UniformMass< DataTypes >, sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >, sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >, sofa::component::solidmechanics::fem::elastic::HexahedronFEMForceFieldAndMass< DataTypes >, and sofa::component::mass::MeshMatrixMass< DataTypes, GeometricalTypes >. ◆ getElementMass() [2/2]. virtual void sofa::core::behavior::BaseMass::getElementMass ; (; sofa::Index ; index, . linearalgebra::BaseMatrix * ; m . ); const. pure virtual . Get the matrix relative to the DOF at index. ; Implemented in sofa::component::mas",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_mass.html:18586,energy,energy,18586,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_mass.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_mass.html,1,['energy'],['energy']
Energy Efficiency,"model::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  . Public Member Functions;  SOFA_ABSTRACT_CLASS (TopologicalMapping, objectmodel::BaseObject);  ; virtual void setTopologies (In *from, Out *to);  Specify the input and output models. More...;  ; void setPathInputObject (const std::string &o);  Set the path to the objects mapped in the scene graph. More...;  ; void setPathOutputObject (const std::string &o);  ; In * getFrom ();  Accessor to the INPUT topology of the TopologicalMapping : More...;  ; Out * getTo ();  Accessor to the OUTPUT topology of the TopologicalMapping : More...;  ; virtual void updateTopologicalMappingTopDown ()=0;  Method called at each topological changes propagation which comes from the INPUT topology to adapt the OUTPUT topology : More...;  ; virtual void updateTopologicalMappingBottomUp ();  Method called at each topological changes propagation which comes from the OUTPUT topology to adapt the INPUT topology : More...;  ; virtual bool propagateFromInputToOutputModel ();  Return true if this mapping is able to propagate topological changes from input to output model. More...;  ; virtual bool propagateFromOutputToInputModel ();  Return true if this mapping is able to propagate topological changes from output to input model. More...;  ; virtual bool isTheOutputTopologySubdividingTheInputOne ();  return true if the output topology subdivide the input one. (the topology uses the Loc2GlobVec/Glob2LocMap/In2OutMap structs and share the same DOFs) More...;  ; const std::map< Index, Index > & getGlob2LocMap ();  Accessor to index maps : More...;  ; virtual Index getGlobIndex (Index ind);  ; virtual Index getFromIndex (Index ind);  ; vo",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topological_mapping.html:4375,adapt,adapt,4375,api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topological_mapping.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topological_mapping.html,1,['adapt'],['adapt']
Energy Efficiency,"mpl () override;  the only function that should be overloaded More...;  ;  Public Member Functions inherited from sofa::gui::qt::QGraphStatWidget;  QGraphStatWidget (QWidget *parent, simulation::Node *node, const QString &title, unsigned numberOfCurves, int bufferSize);  ; virtual ~QGraphStatWidget ();  ; virtual void step () final;  Main method called to update the graph. More...;  . Additional Inherited Members;  Protected Attributes inherited from sofa::gui::qt::QGraphStatWidget; simulation::Node * m_node;  pointer to the node monitored More...;  ; int m_bufferSize;  size of the buffers to stored More...;  ; QChart * m_chart;  Pointer to the chart Data. More...;  ; std::vector< QLineSeries * > m_curves;  vector of series to be plotted More...;  ; QValueAxis * m_axisX;  x axis pointer More...;  ; QValueAxis * m_axisY;  y axis pointer More...;  ; SReal m_yMin;  min y axis value stored More...;  ; SReal m_yMax;  max y axis value stored More...;  ; SReal m_lastTime;  last timestep monitored More...;  ; int m_cptStep;  step counter monitored More...;  ;  Protected Member Functions inherited from sofa::gui::qt::QGraphStatWidget; void setCurve (unsigned index, const QString &name, const QColor &color);  set the index-th curve (index must be < _numberOfCurves) More...;  ; void updateYAxisBounds (SReal value);  Method to update Y axis scale. More...;  ; void flushSeries ();  flush data from series not anymore displayed More...;  . Constructor details. ◆ QMomentumStatWidget(). sofa::gui::qt::QMomentumStatWidget::QMomentumStatWidget ; (; QWidget * ; parent, . simulation::Node * ; node . ). ◆ ~QMomentumStatWidget(). sofa::gui::qt::QMomentumStatWidget::~QMomentumStatWidget ; (; ). virtual . Function details. ◆ stepImpl(). void sofa::gui::qt::QMomentumStatWidget::stepImpl ; (; ). overridevirtual . the only function that should be overloaded ; Implements sofa::gui::qt::QGraphStatWidget. sofaguiqtQMomentumStatWidget; Generated on Mon Nov 11 2024 03:23:43 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_momentum_stat_widget.html:1530,monitor,monitored,1530,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_momentum_stat_widget.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_momentum_stat_widget.html,1,['monitor'],['monitored']
Energy Efficiency,"mplate<class DataTypes1 , class DataTypes2 > . SReal sofa::core::behavior::MixedInteractionForceField< DataTypes1, DataTypes2 >::getPotentialEnergy ; (; const MechanicalParams * ; mparams); const. overridevirtual . Get the potential energy associated to this ForceField.; Used to estimate the total energy of the system by some post-stabilization techniques.; This method retrieves the x vector from the MechanicalState and call the internal getPotentialEnergy(const VecCoord&,const VecCoord&) method implemented by the component. ; Implements sofa::core::behavior::BaseForceField. ◆ getPotentialEnergy() [2/2]. template<class TDataTypes1 , class TDataTypes2 > . virtual SReal sofa::core::behavior::MixedInteractionForceField< TDataTypes1, TDataTypes2 >::getPotentialEnergy ; (; const MechanicalParams * ; mparams, . const DataVecCoord1 & ; x1, . const DataVecCoord2 & ; x2 . ); const. pure virtual . Get the potential energy associated to this ForceField.; Used to estimate the total energy of the system by some post-stabilization techniques.; This method must be implemented by the component, and is usually called by the generic MixedInteractionForceField::getPotentialEnergy() method. ; Implemented in sofa::component::mechanicalload::InteractionEllipsoidForceField< TDataTypes1, TDataTypes2 >. ◆ shortName(). template<class TDataTypes1 , class TDataTypes2 > . template<class T > . static std::string sofa::core::behavior::MixedInteractionForceField< TDataTypes1, TDataTypes2 >::shortName ; (; const T * ; ptr = nullptr, . objectmodel::BaseObjectDescription * ; arg = nullptr . ). inlinestatic . ◆ SOFA_ABSTRACT_CLASS2(). template<class TDataTypes1 , class TDataTypes2 > . sofa::core::behavior::MixedInteractionForceField< TDataTypes1, TDataTypes2 >::SOFA_ABSTRACT_CLASS2 ; (; SOFA_TEMPLATE2(MixedInteractionForceField< TDataTypes1, TDataTypes2 >, TDataTypes1, TDataTypes2) ; , . BaseInteractionForceField ; , . SOFA_TEMPLATE2(PairStateAccessor, TDataTypes1, TDataTypes2) ;  . ). sofacorebehavio",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_mixed_interaction_force_field.html:24484,energy,energy,24484,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_mixed_interaction_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_mixed_interaction_force_field.html,1,['energy'],['energy']
Energy Efficiency,"mplicit and energy flags to false. . ◆ MechanicalParams() [2/2]. sofa::core::MechanicalParams::MechanicalParams ; (; const MechanicalParams & ; mparams). Copy Constructor. . Function details. ◆ bFactor(). SReal sofa::core::MechanicalParams::bFactor ; (; ); const. inline . Damping matrix contributions factor (for implicit schemes) . ◆ defaultInstance(). const MechanicalParams * sofa::core::MechanicalParams::defaultInstance ; (; ). static . Get the default MechanicalParams, to be used to provide a default values for method parameters. . ◆ df() [1/2]. ConstMultiVecDerivId& sofa::core::MechanicalParams::df ; (; ). inline . ◆ df() [2/2]. const ConstMultiVecDerivId& sofa::core::MechanicalParams::df ; (; ); const. inline . ◆ dt(). SReal sofa::core::MechanicalParams::dt ; (; ); const. inline . Time step. . ◆ dx() [1/2]. ConstMultiVecDerivId& sofa::core::MechanicalParams::dx ; (; ). inline . ◆ dx() [2/2]. const ConstMultiVecDerivId& sofa::core::MechanicalParams::dx ; (; ); const. inline . ◆ energy(). bool sofa::core::MechanicalParams::energy ; (; ); const. inline . Should the kinematic and potential energies be computed ? . ◆ f() [1/2]. ConstMultiVecDerivId& sofa::core::MechanicalParams::f ; (; ). inline . ◆ f() [2/2]. const ConstMultiVecDerivId& sofa::core::MechanicalParams::f ; (; ); const. inline . ◆ getKFactorUsed(). bool sofa::core::MechanicalParams::getKFactorUsed ; (; ); const. inline . ◆ implicit(). bool sofa::core::MechanicalParams::implicit ; (; ); const. inline . Is the time integration scheme implicit ? . ◆ implicitPosition(). const SReal& sofa::core::MechanicalParams::implicitPosition ; (; ); const. inline . ◆ implicitVelocity(). const SReal& sofa::core::MechanicalParams::implicitVelocity ; (; ); const. inline . ◆ kFactor(). SReal sofa::core::MechanicalParams::kFactor ; (; ); const. inline . Stiffness matrix contributions factor (for implicit schemes) . ◆ kFactorIncludingRayleighDamping(). SReal sofa::core::MechanicalParams::kFactorIncludingRayleighDamping ; (; ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_mechanical_params.html:11612,energy,energy,11612,api/master/sofa/html/classsofa_1_1core_1_1_mechanical_params.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_mechanical_params.html,1,['energy'],['energy']
Energy Efficiency,"mputed using the square root of the dot product. ; Implemented in sofa::simulation::common::VectorOperations. ◆ v_op(). virtual void sofa::core::behavior::BaseVectorOperations::v_op ; (; core::MultiVecId ; v, . core::ConstMultiVecId ; a, . core::ConstMultiVecId ; b, . SReal ; f = 1.0 . ). pure virtual . v=a+b*f ; Implemented in sofa::simulation::common::VectorOperations. ◆ v_peq(). virtual void sofa::core::behavior::BaseVectorOperations::v_peq ; (; core::MultiVecId ; v, . core::ConstMultiVecId ; a, . SReal ; f = 1.0 . ). pure virtual . v+=f*a ; Implemented in sofa::simulation::common::VectorOperations. ◆ v_realloc() [1/2]. virtual void sofa::core::behavior::BaseVectorOperations::v_realloc ; (; sofa::core::MultiVecCoordId & ; id, . bool ; interactionForceField = false, . bool ; propagate = false, . const VecIdProperties & ; properties = {} . ). pure virtual . keep already allocated vectors and allocates others. If interactionForceField, also allocates mechanical states linked by an InteractionForceField ; Implemented in sofa::simulation::common::VectorOperations. ◆ v_realloc() [2/2]. virtual void sofa::core::behavior::BaseVectorOperations::v_realloc ; (; sofa::core::MultiVecDerivId & ; id, . bool ; interactionForceField = false, . bool ; propagate = false, . const VecIdProperties & ; properties = {} . ). pure virtual . Implemented in sofa::simulation::common::VectorOperations. ◆ v_size(). virtual size_t sofa::core::behavior::BaseVectorOperations::v_size ; (; core::MultiVecId ; v). pure virtual . Implemented in sofa::simulation::common::VectorOperations. ◆ v_teq(). virtual void sofa::core::behavior::BaseVectorOperations::v_teq ; (; core::MultiVecId ; v, . SReal ; f . ). pure virtual . v*=f ; Implemented in sofa::simulation::common::VectorOperations. ◆ v_threshold(). virtual void sofa::core::behavior::BaseVectorOperations::v_threshold ; (; core::MultiVecId ; a, . SReal ; threshold . ). pure virtual . nullify the values below the given threshold ; Implemented in sofa::si",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_vector_operations.html:7593,allocate,allocates,7593,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_vector_operations.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_vector_operations.html,1,['allocate'],['allocates']
Energy Efficiency,"n precomputation are modified. More...;  ; void init ();  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; void init ();  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; void draw (const core::visual::VisualParams *vparams);  Render internal data of this object, for debugging purposes. More...;  ; type::Vec6 getMomentum (const core::MechanicalParams *, const DataVecCoord &vx, const DataVecDeriv &vv) const;  ; type::Vec6 getMomentum (const core::MechanicalParams *, const DataVecCoord &vx, const DataVecDeriv &vv) const;  ; Read and write access functions in mass information; virtual const Real & getMassDensity ();  ; virtual const Real & getTotalMass ();  ; virtual void setVertexMass (sofa::type::vector< Real > vertexMass);  ; virtual void setMassDensity (Real massDensityValue);  ; virtual void setTotalMass (Real totalMass);  ; Check and standard initialization functions from mass information; virtual bool checkVertexMass ();  ; virtual void initFromVertexMass ();  ; virtual bool checkMassDensity ();  ; virtual void initFromMassDensity ();  ; virtual bool checkTotalMass ();  ; virtual void checkTotalMassInit ();  ; virtual void initFromTotalMass ();  ;  Public Member Functions inherited from sofa::core::behavior::Mass< DataTypes >;  SOFA_CLASS2 (SOFA_TEMPLATE(Mass, DataTypes), SOFA_TEMPLATE(ForceField, DataTypes), BaseMass);  ; void initGnuplot (const std::string path) override;  initialization to export kinetic and potential energy to gnuplot files format More...;  ; void exportGnuplot (const MechanicalParams *mparams, SReal time) override;  export kinetic and potential energy state at ""time"" to a gnuplot file More...;  ; void addGravityToV (const MechanicalParams *mparams, MultiVecDerivId) override;  perform v += dt*g operation. Used if mass wants to added G separately from the other forces to v. More...;  ; SReal getElementMass (sofa::Index) const override",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_diagonal_mass.html:11864,energy,energy,11864,api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_diagonal_mass.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_diagonal_mass.html,1,['energy'],['energy']
Energy Efficiency,"nager , class DataTypeInfoManager > . Size sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >::clearSize. mutableprotected . when initializing missing device data, up to where entries should be set to zero ? . ◆ cptid. template<class T , class MemoryManager , class DataTypeInfoManager > . int sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >::cptid = 0. inlinestaticprotected . ◆ deviceAllocSize. template<class T , class MemoryManager , class DataTypeInfoManager > . Size sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >::deviceAllocSize[MemoryManager::MAX_DEVICES]. mutableprotected . Allocated size on each device. . ◆ deviceIsValid. template<class T , class MemoryManager , class DataTypeInfoManager > . int sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >::deviceIsValid. mutableprotected . True if the data on the GPU is currently valid (up to the given deviceVectorSize of each device, i.e. additional space may need to be allocated and/or initialized) . ◆ devicePointer. template<class T , class MemoryManager , class DataTypeInfoManager > . device_pointer sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >::devicePointer[MemoryManager::MAX_DEVICES]. mutableprotected . Pointer to the data on the GPU side. . ◆ deviceVectorSize. template<class T , class MemoryManager , class DataTypeInfoManager > . Size sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >::deviceVectorSize[MemoryManager::MAX_DEVICES]. mutableprotected . Initialized size on each device. . ◆ hostIsValid. template<class T , class MemoryManager , class DataTypeInfoManager > . bool sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >::hostIsValid. mutableprotected . True if the data on the CPU is currently valid. . ◆ hostPointer. template<class T , class MemoryManager , class DataTypeInfoManager > . T* sofa::type::vector_device< T, MemoryManager, DataTypeInfoManager >::hostPointer. protected . Pointer ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1vector__device.html:6249,allocate,allocated,6249,api/master/sofa/html/classsofa_1_1type_1_1vector__device.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1vector__device.html,1,['allocate'],['allocated']
Energy Efficiency,"neoverridevirtual . computes the Elasticity Tensor of the current configuration ; Reimplemented from sofa::component::solidmechanics::fem::hyperelastic::material::HyperelasticMaterial< DataTypes >. ◆ deriveSPKTensor(). template<class DataTypes > . void sofa::component::solidmechanics::fem::hyperelastic::material::StableNeoHookean< DataTypes >::deriveSPKTensor ; (; StrainInformation< DataTypes > * ; sinfo, . const MaterialParameters< DataTypes > & ; param, . MatrixSym & ; SPKTensorGeneral . ). inlineoverridevirtual . Compute the second Piola-Kirchhoff stress tensor in terms of the right Cauchy-Green deformation tensor ; Reimplemented from sofa::component::solidmechanics::fem::hyperelastic::material::HyperelasticMaterial< DataTypes >. ◆ ElasticityTensor(). template<class DataTypes > . void sofa::component::solidmechanics::fem::hyperelastic::material::StableNeoHookean< DataTypes >::ElasticityTensor ; (; StrainInformation< DataTypes > * ; sinfo, . const MaterialParameters< DataTypes > & ; param, . Matrix6 & ; outputTensor . ). inlineoverridevirtual . Reimplemented from sofa::component::solidmechanics::fem::hyperelastic::material::HyperelasticMaterial< DataTypes >. ◆ getStrainEnergy(). template<class DataTypes > . Real sofa::component::solidmechanics::fem::hyperelastic::material::StableNeoHookean< DataTypes >::getStrainEnergy ; (; StrainInformation< DataTypes > * ; sinfo, . const MaterialParameters< DataTypes > & ; param . ). inlineoverridevirtual . Strain energy density function for a stable Neo-Hookean material. The regularized origin barrier is removed according to ""Kim, Theodore,; and David Eberle. ""Dynamic deformables: implementation and production practicalities (now with code!)."" ACM SIGGRAPH 2022 Courses. 2022. 1-259."" ; Reimplemented from sofa::component::solidmechanics::fem::hyperelastic::material::HyperelasticMaterial< DataTypes >. sofacomponentsolidmechanicsfemhyperelasticmaterialStableNeoHookean; Generated on Mon Nov 11 2024 03:02:25 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_stable_neo_hookean.html:3805,energy,energy,3805,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_stable_neo_hookean.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_stable_neo_hookean.html,1,['energy'],['energy']
Energy Efficiency,"ng finish ). The type of norm is set by parameter l. Use 0 for the infinite norm. Note that the 2-norm is more efficiently computed using the square root of the dot product. ; Implements sofa::core::behavior::BaseVectorOperations. ◆ v_op(). void sofa::simulation::common::VectorOperations::v_op ; (; core::MultiVecId ; v, . core::ConstMultiVecId ; a, . core::ConstMultiVecId ; b, . SReal ; f = 1.0 . ). overridevirtual . v=a+b*f ; Implements sofa::core::behavior::BaseVectorOperations. ◆ v_peq(). void sofa::simulation::common::VectorOperations::v_peq ; (; core::MultiVecId ; v, . core::ConstMultiVecId ; a, . SReal ; f = 1.0 . ). overridevirtual . v+=f*a ; Implements sofa::core::behavior::BaseVectorOperations. ◆ v_realloc() [1/2]. void sofa::simulation::common::VectorOperations::v_realloc ; (; sofa::core::MultiVecCoordId & ; id, . bool ; interactionForceField = false, . bool ; propagate = false, . const core::VecIdProperties & ; properties = {} . ). overridevirtual . keep already allocated vectors and allocates others. If interactionForceField, also allocates mechanical states linked by an InteractionForceField ; Implements sofa::core::behavior::BaseVectorOperations. ◆ v_realloc() [2/2]. void sofa::simulation::common::VectorOperations::v_realloc ; (; sofa::core::MultiVecDerivId & ; id, . bool ; interactionForceField = false, . bool ; propagate = false, . const core::VecIdProperties & ; properties = {} . ). overridevirtual . Implements sofa::core::behavior::BaseVectorOperations. ◆ v_size(). size_t sofa::simulation::common::VectorOperations::v_size ; (; core::MultiVecId ; v). overridevirtual . Implements sofa::core::behavior::BaseVectorOperations. ◆ v_teq(). void sofa::simulation::common::VectorOperations::v_teq ; (; core::MultiVecId ; v, . SReal ; f . ). overridevirtual . v*=f ; Implements sofa::core::behavior::BaseVectorOperations. ◆ v_threshold(). void sofa::simulation::common::VectorOperations::v_threshold ; (; core::MultiVecId ; a, . SReal ; threshold . ). overridevirtua",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_vector_operations.html:7677,allocate,allocated,7677,api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_vector_operations.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_vector_operations.html,2,['allocate'],"['allocated', 'allocates']"
Energy Efficiency,ng. /articulation; . /feed; ; Articulation – SOFA. SOFA - Topic Tag: Articulation. /articulationcenter; . /feed; ; ArticulationCenter – SOFA. SOFA - Topic Tag: ArticulationCenter. /articulation-rigid-orientation; . /feed; ; articulation; rigid; orientation – SOFA. SOFA - Topic Tag: articulation; rigid; orientation. /attach; . /feed; ; attach – SOFA. SOFA - Topic Tag: attach. /attachconstraint; . /feed; ; AttachConstraint – SOFA. SOFA - Topic Tag: AttachConstraint. /attachconstraint-surface-area-rigidmapping; . /feed; ; AttachConstraint surface area RigidMapping – SOFA. SOFA - Topic Tag: AttachConstraint surface area RigidMapping. /autocollision; . /feed; ; autocollision – SOFA. SOFA - Topic Tag: autocollision. /batch; . /feed; ; batch – SOFA. SOFA - Topic Tag: batch. /batch-analysis-python; . /feed; ; batch analysis python – SOFA. SOFA - Topic Tag: batch analysis python. /beam; . /feed; ; beam – SOFA. SOFA - Topic Tag: beam. /beam-adaptater-python-controller; . /feed; ; beam adaptater; Python controller – SOFA. SOFA - Topic Tag: beam adaptater; Python controller. /beamadapter; . /feed; ; BeamAdapter – SOFA. SOFA - Topic Tag: BeamAdapter. /beamadapter-controller; . /feed; ; BeamAdapter Controller – SOFA. SOFA - Topic Tag: BeamAdapter Controller. /beamfemforcefield; . /feed; ; BeamFEMForceField – SOFA. SOFA - Topic Tag: BeamFEMForceField. /beamfemforcefield-setting-problem; . /feed; ; BeamFEMForceField Setting Problem – SOFA. SOFA - Topic Tag: BeamFEMForceField Setting Problem. /beamfemforcefield-unstable; . /feed; ; BeamFEMForceField unstable – SOFA. SOFA - Topic Tag: BeamFEMForceField unstable. /beginners; . /feed; ; beginners – SOFA. SOFA - Topic Tag: beginners. /begin-start-sofa; . /feed; ; begin start sofa – SOFA. SOFA - Topic Tag: begin start sofa. /bilateralinteractionconstraint; . /feed; ; BilateralInteractionConstraint – SOFA. SOFA - Topic Tag: BilateralInteractionConstraint. /binaries; . /feed; ; binaries – SOFA. SOFA - Topic Tag: binaries. /binary; . /feed; ,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/index-wcopy.html:428419,adapt,adaptater,428419,index-wcopy.html,https://www.sofa-framework.org,https://www.sofa-framework.org/index-wcopy.html,1,['adapt'],['adaptater']
Energy Efficiency,"nherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, BaseData::DataFlags dataFlags);  Helper method used by initData() More...;  ; template<class T > ; void initData0 (Data< T > *field, typename Data< T >::InitData &res, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  . Vectors allocation and generic operations (based on VecId); Increment the index of the given VecCoordId, so that all 'allocated' vectors in this state have a lower index . typedef type::vector< VMultiOpEntry > VMultiOp;  ; virtual void vAvail (const ExecParams *params, VecCoordId &v)=0;  ; virtual void vAvail (const ExecParams *params, VecDerivId &v)=0;  Increment the index of the given VecDerivId, so that all 'allocated' vectors in this state have a lower index. More...;  ; virtual void vAlloc (const ExecParams *params, VecCoordId v, const core::VecIdProperties &properties={})=0;  Increment the index of the given MatrixDerivId, so that all 'allocated' vectors in this state have a lower index. More...;  ; virtual void vAlloc (const ExecParams *params, VecDerivId v, const core::VecIdProperties &properties={})=0;  Allocate a new temporary vector. More...;  ; virtual void vRealloc (const ExecParams *params, VecCoordId v, const core::VecIdProperties &properties={})=0;  Allocate a new temporary vector. More...;  ; virtual void vRealloc (const ExecParams *params, VecDerivId v, const core::VecIdProperties &properties={})=0;  Reallocate a new temporary vector. More...;  ; virtual void vFree (const ExecParams *params, VecCoordId v)=0;  Free a temporary vector. More...;  ; virtual void vFree (const ExecParam",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_mechanical_state.html:18315,allocate,allocated,18315,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_mechanical_state.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_mechanical_state.html,1,['allocate'],['allocated']
Energy Efficiency,"ning;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  . Public Member Functions;  SOFA_ABSTRACT_CLASS (BaseMass, StateAccessor);  ; virtual void initGnuplot (const std::string path)=0;  initialization to export kinetic and potential energy to gnuplot files format More...;  ; virtual void exportGnuplot (const MechanicalParams *mparams, SReal time)=0;  export kinetic and potential energy state at ""time"" to a gnuplot file More...;  ; virtual SReal getElementMass (sofa::Index index) const =0;  Get the mass relative to the DOF at index. More...;  ; virtual void getElementMass (sofa::Index index, linearalgebra::BaseMatrix *m) const =0;  Get the matrix relative to the DOF at index. More...;  ; virtual bool isDiagonal () const =0;  ; bool insertInNode (objectmodel::BaseNode *node) override;  ; bool removeInNode (objectmodel::BaseNode *node) override;  ; Vector operations; virtual void addMDx (const MechanicalParams *mparams, MultiVecDerivId fid, SReal factor)=0;  f += factor M dx More...;  ; virtual void accFromF (const MechanicalParams *mparams, MultiVecDerivId aid)=0;  dx = M^-1 f More...;  ; virtual void addGravityToV (const MechanicalParams *mparam",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_mass.html:2186,energy,energy,2186,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_mass.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_mass.html,1,['energy'],['energy']
Energy Efficiency,"nitor file changes. More...;  ; class  FileMonitor;  ; class  MonitoredFile;  ; class  FileRepository;  ; class  FileSystem;  Contains functions to interact with the file system. More...;  ; class  Locale;  ; class  TemporaryLocale;  RAII class to modify the locale temporarily. More...;  ; class  PipeProcess;  ; class  Plugin;  ; class  PluginManager;  ; class  SetDirectory;  . Typedefs; typedef vector< string > ListOfFiles;  ; typedef vector< FileEventListener * > ListOfListeners;  ; typedef list< MonitoredFile * > ListOfMonitors;  . Functions; const char * eventmaskToString (int evtmask);  ; void addAFileListenerInDict (string pathfilename, FileEventListener *listener);  ; int FileMonitor_init ();  ; void catch_alarm (int sig);  ; std::string cleanPath (const std::string &path);  . Variables; map< string, ListOfFiles > dir2files;  ; map< int, string > fd2fn;  ; map< string, ListOfListeners > file2listener;  ; int filemonitor_inotifyfd =-1;  ; ListOfMonitors monitors;  ; volatile sig_atomic_t keep_going = 1;  ; FileRepository PluginRepository (""SOFA_PLUGIN_PATH"", { Utils::getSofaPathTo(""plugins""), Utils::getSofaPathTo(""collections""), Utils::getSofaPathTo(""lib""), });  Default repository. More...;  ; FileRepository DataRepository (""SOFA_DATA_PATH"", { Utils::getSofaPathTo(""share/sofa""), Utils::getSofaPathTo(""share/sofa/examples"") }, { { Utils::getSofaPathTo(""etc/sofa.ini""), {""SHARE_DIR"", ""EXAMPLES_DIR""} } });  Default repository. More...;  . Typedef Documentation. ◆ ListOfFiles. typedef vector<string> sofa::helper::system::ListOfFiles. ◆ ListOfListeners. typedef vector<FileEventListener*> sofa::helper::system::ListOfListeners. ◆ ListOfMonitors. typedef list< MonitoredFile > sofa::helper::system::ListOfMonitors. Function Documentation. ◆ addAFileListenerInDict(). void sofa::helper::system::addAFileListenerInDict ; (; string ; pathfilename, . FileEventListener * ; listener . ). ◆ catch_alarm(). void sofa::helper::system::catch_alarm ; (; int ; sig). ◆ cleanPath(). std::",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1system.html:1408,monitor,monitors,1408,api/master/sofa/html/namespacesofa_1_1helper_1_1system.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1system.html,1,['monitor'],['monitors']
Energy Efficiency,"nst DataVecCoord &x2, const DataVecDeriv &v1, const DataVecDeriv &v2)=0;  ; void addDForce (const MechanicalParams *mparams, MultiVecDerivId dfId) override;  ; virtual void addDForce (const MechanicalParams *mparams, DataVecDeriv &df1, DataVecDeriv &df2, const DataVecDeriv &dx1, const DataVecDeriv &dx2)=0;  ; SReal getPotentialEnergy (const MechanicalParams *mparams) const override;  ; virtual SReal getPotentialEnergy (const MechanicalParams *mparams, const DataVecCoord &x1, const DataVecCoord &x2) const =0;  ;  Public Member Functions inherited from sofa::core::behavior::BaseInteractionForceField;  SOFA_ABSTRACT_CLASS (BaseInteractionForceField, BaseForceField);  ; virtual BaseMechanicalState * getMechModel1 ();  ; virtual BaseMechanicalState * getMechModel2 ();  ; void addKToMatrix (const MechanicalParams *, const sofa::core::behavior::MultiMatrixAccessor *) override;  Compute the system matrix corresponding to . More...;  ; virtual void initGnuplot (const std::string path);  initialization to export potential energy to gnuplot files format More...;  ; virtual void exportGnuplot (SReal time);  export kinetic and potential energy state at ""time"" to a gnuplot file More...;  ; bool insertInNode (objectmodel::BaseNode *node) override;  ; bool removeInNode (objectmodel::BaseNode *node) override;  ;  Public Member Functions inherited from sofa::core::behavior::BaseForceField;  SOFA_ABSTRACT_CLASS (BaseForceField, StateAccessor);  ; virtual void addMBKdx (const MechanicalParams *mparams, MultiVecDerivId dfId);  Accumulate the contribution of M, B, and/or K matrices multiplied by the dx vector with the given coefficients. More...;  ; virtual void addBToMatrix (const MechanicalParams *mparams, const sofa::core::behavior::MultiMatrixAccessor *matrix);  Compute the system matrix corresponding to . More...;  ; virtual void addMBKToMatrix (const MechanicalParams *mparams, const sofa::core::behavior::MultiMatrixAccessor *matrix);  Compute the system matrix corresponding to . Mo",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_pair_interaction_force_field.html:2658,energy,energy,2658,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_pair_interaction_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_pair_interaction_force_field.html,1,['energy'],['energy']
Energy Efficiency,"nst char *name, const char *help, BaseData::DataFlags dataFlags);  Helper method used by initData() More...;  ; template<class T > ; void initData0 (Data< T > *field, typename Data< T >::InitData &res, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  . Friends; class TLine< DataTypes >;  . Attribute details. ◆ bothSide. template<class TDataTypes > . sofa::core::objectmodel::RenamedData<bool> sofa::component::collision::geometry::LineCollisionModel< TDataTypes >::bothSide. ◆ d_bothSide. template<class TDataTypes > . Data<bool> sofa::component::collision::geometry::LineCollisionModel< TDataTypes >::d_bothSide. activate collision on both side of the line model (when surface normals are defined on these lines) . ◆ d_displayFreePosition. template<class TDataTypes > . Data<bool> sofa::component::collision::geometry::LineCollisionModel< TDataTypes >::d_displayFreePosition. Display Collision Model Points free position(in green) . ◆ elems. template<class TDataTypes > . sofa::type::vector<LineData> sofa::component::collision::geometry::LineCollisionModel< TDataTypes >::elems. protected . ◆ l_topology. template<class TDataTypes > . SingleLink<LineCollisionModel<DataTypes>, sofa::core::topology::BaseMeshTopology, BaseLink::FLAG_STOREPATH | BaseLink::FLAG_STRONGLINK> sofa::component::collision::geometry::LineCollisionModel< TDataTypes >::l_topology. Link to be set to the topology container in the component graph. . ◆ m_displayFreePosition. template<class TDataTypes > . sofa::core::objectmodel::RenamedData<bool> sofa::component::collision::geometry::LineCollisionModel< TDataTypes >::m_displayFreePosition. ◆ meshRevision. template<class TDataTypes > . int sofa::component::collision::geometry::LineCollisionModel< TDataTypes >::meshRevision. protected . ◆ mpoints. template<class TDataTypes > . PointCollisionModel<sofa::defaulttype::Vec3Types>* sofa::component::collision::geometry::LineCollis",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_line_collision_model.html:22618,green,green,22618,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_line_collision_model.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_line_collision_model.html,1,['green'],['green']
Energy Efficiency,"nstraintParams::m_constOrder. protected . Description of the order of the constraint. . ◆ m_dx. MultiVecDerivId sofa::core::ConstraintParams::m_dx. protected . Ids of constraint correction vector. . ◆ m_j. MultiMatrixDerivId sofa::core::ConstraintParams::m_j. protected . Ids of the constraint jacobian matrix. . ◆ m_lambda. MultiVecDerivId sofa::core::ConstraintParams::m_lambda. protected . Ids of constraint lambda vector. . ◆ m_smoothFactor. double sofa::core::ConstraintParams::m_smoothFactor. protected . Smooth contribution factor (for smooth constraints resolution) . ◆ m_v. ConstMultiVecDerivId sofa::core::ConstraintParams::m_v. protected . Ids of velocity vector. . ◆ m_x. ConstMultiVecCoordId sofa::core::ConstraintParams::m_x. protected . Ids of position vector. . Constructor details. ◆ ConstraintParams(). sofa::core::ConstraintParams::ConstraintParams ; (; const sofa::core::ExecParams & ; p = *sofa::core::execparams::defaultInstance()). Constructor, initializing all VecIds to default values, implicit and energy flags to false. . Function details. ◆ constOrder(). ConstraintOrder sofa::core::ConstraintParams::constOrder ; (; ); const. inline . ◆ defaultInstance(). const ConstraintParams * sofa::core::ConstraintParams::defaultInstance ; (; ). static . Get the default MechanicalParams, to be used to provide a default values for method parameters. ; Get the default ConstraintParams, to be used to provide a default values for method parameters. . ◆ dx() [1/2]. MultiVecDerivId& sofa::core::ConstraintParams::dx ; (; ). inline . Returns ids of the constraint correction vectors. . ◆ dx() [2/2]. const MultiVecDerivId& sofa::core::ConstraintParams::dx ; (; ); const. inline . Returns ids of the constraint correction vectors. . ◆ getName(). std::string_view sofa::core::ConstraintParams::getName ; (; ); const. inline . ◆ j() [1/2]. MultiMatrixDerivId& sofa::core::ConstraintParams::j ; (; ). inline . Returns ids of the constraint jacobian matrices. . ◆ j() [2/2]. const MultiMat",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_constraint_params.html:7531,energy,energy,7531,api/master/sofa/html/classsofa_1_1core_1_1_constraint_params.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_constraint_params.html,1,['energy'],['energy']
Energy Efficiency,"number of elements in the container The number of elements in each range is homogeneous, except for the last range which may contain more elements. . ◆ parallelForEach(). template<class InputIt , class UnaryFunction > . UnaryFunction sofa::simulation::parallelForEach ; (; TaskScheduler & ; taskScheduler, . InputIt ; first, . InputIt ; last, . UnaryFunction ; f . ). Applies the given function object f to the result of dereferencing every iterator in the range [first, last), in parallel. . ◆ parallelForEachRange(). template<class InputIt , class UnaryFunction > . UnaryFunction sofa::simulation::parallelForEachRange ; (; TaskScheduler & ; taskScheduler, . InputIt ; first, . InputIt ; last, . UnaryFunction ; f . ). Applies in parallel the given function object f to a list of ranges generated from [first, last); The signature of the function f should be equivalent to the following: void fun(const Range<InputIt>& a); The signature does not need to have const &.; A task scheduler must be provided and correctly initialized. The number of generated ranges depends on the threads available in the task scheduler. . ◆ setSimulation(). void sofa::simulation::setSimulation ; (; Simulation * ; s). delete . Set the (unique) simulation which controls the scene. . Variable Documentation. ◆ DefaultAnimationLoopClass. int sofa::simulation::DefaultAnimationLoopClass. Initial value:= core::RegisterObject(""Simulation loop to use in scene without constraints nor contact.""); .add<DefaultAnimationLoop>(); .addDocumentationURL(std::string(sofa::SOFA_DOCUMENTATION_URL) + std::string(""components/animationloops/defaultanimationloop/"")); .addDescription(R""(; This loop triggers the following steps:; - build and solve all linear systems in the scene : collision and time integration to compute the new values of the dofs; - update the context (dt++); - update the mappings; - update the bounding box (volume covering all objects of the scene))""). ◆ DefaultTaskSchedulerRegistered. const bool sofa::simula",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation.html:9409,schedul,scheduler,9409,api/master/sofa/html/namespacesofa_1_1simulation.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation.html,1,['schedul'],['scheduler']
Energy Efficiency,o model a deformable object with a deep crevice?. /how-to-modify-and-object-in-the-scene-and-restart-simulation; ; SOFA - Topic: How to modify and object in the scene and restart simulation. /how-to-move-objects-with-keyboard-and-mouse; . /feed; ; [SOLVED] How to move objects with keyboard and mouse? – SOFA. SOFA - Topic: [SOLVED] How to move objects with keyboard and mouse?. /how-to-not-check-some-collisions; ; SOFA - Topic: [SOLVED] How to not-check some collisions?. /how-to-obtain-the-contact-force; ; SOFA - Topic: [SOLVED] How to obtain the contact force?. /how-to-prevent-distortion-of-tetrahedralfem-in-collision; ; SOFA - Topic: How to prevent distortion of TetrahedralFEM in collision?. /how-to-properly-quit-runsofa; ; SOFA - Topic: How to properly quit runSofa?. /how-to-read-xml-file-in-sofa-where-to-read-it-in-c-code; ; SOFA - Topic: [SOLVED] How to read XML file in SOFA? Where to read it in c++ code?. /how-to-reduce-my-scene-space-how-to-fix-my-tool-movement-range; ; SOFA - Topic: [SOLVED] How to reduce my scene space ?How to fix my tool movement range ?. /how-to-reduce-overhead-in-persisting-contact; ; SOFA - Topic: [SOLVED] How to reduce overhead in persisting contact?. /how-to-run-a-py-file-several-times; ; SOFA - Topic: How to run a .py file several times?. /how-to-save-the-topology-of-component-sparsegridramification; ; SOFA - Topic: [SOLVED] How to save the topology of component SparseGridRamification?. /how-to-search-node; ; SOFA - Topic: How to search Node?. /how-to-send-data-to-sofa-through-socket; ; SOFA - Topic: [SOLVED] How to send data to SOFA through socket ?. /how-to-set-a-fixedtranslationconstraint-on-a-specific-mesh-index; ; SOFA - Topic: [SOLVED] How to set a FixedTranslationConstraint on a specific mesh index?. /how-to-set-a-nodes-rotation-in-the-c-code; ; SOFA - Topic: [SOLVED] How to set a node's rotation in the c++ code?. /how-to-set-collision-groups; ; SOFA - Topic: How to set collision groups. /how-to-set-links; ; SOFA - Topic: [SOLVED,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/index-wcopy.html:327853,reduce,reduce-my-scene-space-how-to-fix-my-tool-movement-range,327853,index-wcopy.html,https://www.sofa-framework.org,https://www.sofa-framework.org/index-wcopy.html,2,['reduce'],"['reduce', 'reduce-my-scene-space-how-to-fix-my-tool-movement-range']"
Energy Efficiency,"odel::RenamedData<bool> sofa::component::collision::geometry::PointCollisionModel< TDataTypes >::bothSide. ◆ computeNormals. template<class TDataTypes > . sofa::core::objectmodel::RenamedData<bool> sofa::component::collision::geometry::PointCollisionModel< TDataTypes >::computeNormals. protected . ◆ d_bothSide. template<class TDataTypes > . Data<bool> sofa::component::collision::geometry::PointCollisionModel< TDataTypes >::d_bothSide. activate collision on both side of the point model (when surface normals are defined on these points) . ◆ d_computeNormals. template<class TDataTypes > . Data<bool> sofa::component::collision::geometry::PointCollisionModel< TDataTypes >::d_computeNormals. protected . activate computation of normal vectors (required for some collision detection algorithms) . ◆ d_displayFreePosition. template<class TDataTypes > . Data<bool> sofa::component::collision::geometry::PointCollisionModel< TDataTypes >::d_displayFreePosition. protected . Display Collision Model Points free position(in green) . ◆ l_topology. template<class TDataTypes > . SingleLink<PointCollisionModel<DataTypes>, sofa::core::topology::BaseMeshTopology, BaseLink::FLAG_STOREPATH | BaseLink::FLAG_STRONGLINK> sofa::component::collision::geometry::PointCollisionModel< TDataTypes >::l_topology. protected . Link to be set to the topology container in the component graph. . ◆ m_displayFreePosition. template<class TDataTypes > . sofa::core::objectmodel::RenamedData<bool> sofa::component::collision::geometry::PointCollisionModel< TDataTypes >::m_displayFreePosition. protected . ◆ mstate. template<class TDataTypes > . core::behavior::MechanicalState<DataTypes>* sofa::component::collision::geometry::PointCollisionModel< TDataTypes >::mstate. protected . ◆ normals. template<class TDataTypes > . VecDeriv sofa::component::collision::geometry::PointCollisionModel< TDataTypes >::normals. protected . Constructor details. ◆ PointCollisionModel(). template<class DataTypes > . sofa::component::collisi",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_point_collision_model.html:23041,green,green,23041,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_point_collision_model.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_point_collision_model.html,1,['green'],['green']
Energy Efficiency,"oid sofa::core::behavior::TMultiVec< vtype >::operator/= ; (; SReal ; f). inline . v /= f . ◆ operator=() [1/2]. template<VecType vtype> . void sofa::core::behavior::TMultiVec< vtype >::operator= ; (; const TMultiVec< vtype > & ; a). inline . v = a . ◆ operator=() [2/2]. template<VecType vtype> . void sofa::core::behavior::TMultiVec< vtype >::operator= ; (; MyMultiVecId ; a). inline . v = a . ◆ ops(). template<VecType vtype> . BaseVectorOperations* sofa::core::behavior::TMultiVec< vtype >::ops ; (; ). inline . ◆ peq(). template<VecType vtype> . void sofa::core::behavior::TMultiVec< vtype >::peq ; (; AllMultiVecId ; a, . SReal ; f = 1.0 . ). inline . v += a*f . ◆ realloc(). template<VecType vtype> . void sofa::core::behavior::TMultiVec< vtype >::realloc ; (; BaseVectorOperations * ; _vop, . bool ; interactionForceField = false, . bool ; propagate = false, . const VecIdProperties & ; properties = {} . ). inline . allocates vector for every newly appeared mechanical states (initializing them to 0 and does not modify already allocated mechanical states) Parameters. interactionForceFieldset to true, also allocate external mechanical states linked by an InteractionForceField (TODO remove this option by seeing external mmstates as abstract null vectors) . ◆ setOps(). template<VecType vtype> . void sofa::core::behavior::TMultiVec< vtype >::setOps ; (; BaseVectorOperations * ; op). inline . ◆ size(). template<VecType vtype> . size_t sofa::core::behavior::TMultiVec< vtype >::size ; (; ); const. inline . ◆ teq(). template<VecType vtype> . void sofa::core::behavior::TMultiVec< vtype >::teq ; (; SReal ; f). inline . v *= f . ◆ threshold(). template<VecType vtype> . void sofa::core::behavior::TMultiVec< vtype >::threshold ; (; SReal ; threshold). inline . nullify values below given threshold . Related details. ◆ operator<<. template<VecType vtype> . std::ostream& operator<< ; (; std::ostream & ; out, . const TMultiVec< vtype > & ; mv . ). friend . sofacorebehaviorTMultiVec; Genera",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_t_multi_vec.html:7742,allocate,allocates,7742,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_t_multi_vec.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_t_multi_vec.html,2,['allocate'],"['allocated', 'allocates']"
Energy Efficiency,"oid setTranslation (SReal dx, SReal dy, SReal dz);  ; void setRotation (SReal rx, SReal ry, SReal rz);  ; void setScale (SReal sx, SReal sy, SReal sz);  ; virtual type::Vec3 getTranslation () const;  ; virtual type::Vec3 getRotation () const;  ; type::Vec3 getScale () const override;  ; Integration related methods; void beginIntegration (SReal dt) override;  Called at the beginning of each integration step. More...;  ; void endIntegration (const core::ExecParams *params, SReal dt) override;  Called at the end of each integration step. More...;  ; void accumulateForce (const core::ExecParams *params, core::VecDerivId f=core::VecDerivId::force()) override;  Add stored external forces to F. More...;  ; void vAvail (const core::ExecParams *params, core::VecCoordId &v) override;  Increment the index of the given VecCoordId, so that all 'allocated' vectors in this state have a lower index. More...;  ; void vAvail (const core::ExecParams *params, core::VecDerivId &v) override;  Increment the index of the given VecDerivId, so that all 'allocated' vectors in this state have a lower index. More...;  ; void vAlloc (const core::ExecParams *params, core::VecCoordId v, const core::VecIdProperties &properties={}) override;  Increment the index of the given MatrixDerivId, so that all 'allocated' vectors in this state have a lower index. More...;  ; void vAlloc (const core::ExecParams *params, core::VecDerivId v, const core::VecIdProperties &properties={}) override;  Allocate a new temporary vector. More...;  ; void vRealloc (const core::ExecParams *params, core::VecCoordId v, const core::VecIdProperties &properties={}) override;  Allocate a new temporary vector. More...;  ; void vRealloc (const core::ExecParams *params, core::VecDerivId v, const core::VecIdProperties &properties={}) override;  Reallocate a new temporary vector. More...;  ; void vFree (const core::ExecParams *params, core::VecCoordId v) override;  Free a temporary vector. More...;  ; void vFree (const core::ExecPara",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1statecontainer_1_1_mechanical_object.html:14334,allocate,allocated,14334,api/master/sofa/html/classsofa_1_1component_1_1statecontainer_1_1_mechanical_object.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1statecontainer_1_1_mechanical_object.html,1,['allocate'],['allocated']
Energy Efficiency,"om sofa::core::objectmodel::BaseObject. ◆ getAngleAroundAxis(). template<class DataTypes > . GearSpringForceField<DataTypes>::Real sofa::component::solidmechanics::spring::GearSpringForceField< DataTypes >::getAngleAroundAxis ; (; Coord ; p1, . Coord ; p2, . unsigned int ; axis . ). inline . ◆ getObject1(). template<class DataTypes > . core::behavior::MechanicalState<DataTypes>* sofa::component::solidmechanics::spring::GearSpringForceField< DataTypes >::getObject1 ; (; ). inline . ◆ getObject2(). template<class DataTypes > . core::behavior::MechanicalState<DataTypes>* sofa::component::solidmechanics::spring::GearSpringForceField< DataTypes >::getObject2 ; (; ). inline . ◆ getPotentialEnergy(). template<class DataTypes > . SReal sofa::component::solidmechanics::spring::GearSpringForceField< DataTypes >::getPotentialEnergy ; (; const core::MechanicalParams * ; mparams, . const DataVecCoord & ; x1, . const DataVecCoord & ; x2 . ); const. inlineoverridevirtual . Get the potential energy associated to this ForceField.; Used to estimate the total energy of the system by some post-stabilization techniques.; This method must be implemented by the component, and is usually called by the generic ForceField::getPotentialEnergy() method. ; Implements sofa::core::behavior::PairInteractionForceField< DataTypes >. ◆ getSprings(). template<class DataTypes > . sofa::type::vector<Spring>* sofa::component::solidmechanics::spring::GearSpringForceField< DataTypes >::getSprings ; (; ). inline . ◆ getVectorAngle() [1/2]. template<class DataTypes > . void sofa::component::solidmechanics::spring::GearSpringForceField< DataTypes >::getVectorAngle ; (; Coord ; p1, . Coord ; p2, . unsigned int ; axis, . Vector & ; w . ). inline . ◆ getVectorAngle() [2/2]. template<class DataTypes > . void sofa::component::solidmechanics::spring::GearSpringForceField< DataTypes >::getVectorAngle ; (; Vector ; u, . Vector ; v, . Vector & ; w . ). inline . ◆ init(). template<class DataTypes > . void sofa::compone",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_gear_spring_force_field.html:30908,energy,energy,30908,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_gear_spring_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_gear_spring_force_field.html,1,['energy'],['energy']
Energy Efficiency,"on method called at graph creation and modification, during top-down traversal. More...;  ; void reinit () override;  Update method called when variables used in precomputation are modified. More...;  ; void addForce (const core::MechanicalParams *mparams, DataVecDeriv &d_f, const DataVecCoord &d_x, const DataVecDeriv &d_v) override;  ; void addDForce (const core::MechanicalParams *mparams, DataVecDeriv &d_df, const DataVecDeriv &d_dx) override;  ; void buildStiffnessMatrix (core::behavior::StiffnessMatrix *matrix) override;  ; void buildDampingMatrix (core::behavior::DampingMatrix *) final;  ; void draw (const core::visual::VisualParams *vparams) override;  Render internal data of this object, for debugging purposes. More...;  ; virtual Real getKs () const;  Getter/setter on the mesh spring stiffness. More...;  ; void setKs (const Real ks);  ; virtual Real getKd () const;  Getter/setter on the mesh spring damping. More...;  ; void setKd (const Real kd);  ; SReal getAccumulatedPotentialEnergy () const;  Getter to global potential energy accumulated. More...;  ; SReal getPotentialEnergy (const core::MechanicalParams *mparams, const DataVecCoord &d_x) const override;  Getter on the potential energy. More...;  ; sofa::core::topology::EdgeData< type::vector< EdgeInformation > > & getEdgeInfo ();  ;  Public Member Functions inherited from sofa::core::behavior::ForceField< DataTypes >;  SOFA_CLASS2 (SOFA_TEMPLATE(ForceField, DataTypes), BaseForceField, SOFA_TEMPLATE(SingleStateAccessor, DataTypes));  ; void addForce (const MechanicalParams *mparams, MultiVecDerivId fId) override;  ; void addDForce (const MechanicalParams *mparams, MultiVecDerivId dfId) override;  ; virtual void addClambda (const MechanicalParams *mparams, DataVecDeriv &df, const DataVecDeriv &lambda, SReal cFactor);  ; virtual void addClambda (const MechanicalParams *, MultiVecDerivId, MultiVecDerivId, SReal);  Accumulate the contribution of the C compliant matrix multiplied by the given Lagrange multiplie",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_triangular_bending_springs.html:5754,energy,energy,5754,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_triangular_bending_springs.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_triangular_bending_springs.html,1,['energy'],['energy']
Energy Efficiency,"on of L . ◆ cholDcmp(). template<Size n, class real > . bool sofa::type::cholDcmp ; (; Mat< n, n, real > & ; L, . const Mat< n, n, real > & ; M . ). Cholesky decomposition: compute triangular matrix L such that M=L.Lt PreconditionM must be symmetric positive definite returns false is the decomposition fails . ◆ cholInv(). template<Size n, class real > . bool sofa::type::cholInv ; (; Mat< n, n, real > & ; Inv, . const Mat< n, n, real > & ; M . ). Inversion of a positive symmetric definite (PSD) matrix using a Cholesky decomposition. Returns false if the matrix is not PSD. . ◆ cholSlv(). template<Size n, class real > . bool sofa::type::cholSlv ; (; Vec< n, real > & ; x, . const Mat< n, n, real > & ; M, . const Vec< n, real > & ; b . ). Cholesky solution: solve the system Mx=b using a Cholesky decomposition. PreconditionM must be symmetric positive definite Returns false is the decomposition fails. If you have several solutions to perform with the same matrix M and different vectors b, it is more efficient to factor the matrix once and then use back-substitution for each vector. . ◆ cleanup(). SOFA_TYPE_API void sofa::type::cleanup ; (; ). Clean up the resources used by the SofaHelper library. . ◆ cond(). template<int m, int n, typename Real > . Real sofa::type::cond ; (; Mat< m, n, Real > & ; a). return the condition number of the matrix a following the euclidean norm (using the svd decomposition to find singular values) . ◆ cross() [1/2]. template<typename real1 , typename real2 > . constexpr real1 sofa::type::cross ; (; const type::Vec< 2, real1 > & ; a, . const type::Vec< 2, real2 > & ; b . ). constexprnoexcept . Cross product for 2-elements vectors. . ◆ cross() [2/2]. template<typename real1 , typename real2 > . constexpr Vec<3,real1> sofa::type::cross ; (; const Vec< 3, real1 > & ; a, . const Vec< 3, real2 > & ; b . ). constexprnoexcept . Cross product for 3-elements vectors. . ◆ crossProductMatrix(). template<class Real > . constexpr Mat<3, 3, Real> sofa::type::",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1type.html:30218,efficient,efficient,30218,api/master/sofa/html/namespacesofa_1_1type.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1type.html,1,['efficient'],['efficient']
Energy Efficiency,"on sofa::gui::common::PickHandler::mousePosition. protected . ◆ mouseStatus. MOUSE_STATUS sofa::gui::common::PickHandler::mouseStatus. protected . ◆ operations. type::fixed_array< Operation*,NONE > sofa::gui::common::PickHandler::operations. protected . ◆ pickingMethod. PickingMethod sofa::gui::common::PickHandler::pickingMethod. protected . ◆ renderCallback. CallBackRender* sofa::gui::common::PickHandler::renderCallback. protected . ◆ useCollisions. bool sofa::gui::common::PickHandler::useCollisions. protected . Constructor details. ◆ PickHandler(). sofa::gui::common::PickHandler::PickHandler ; (; double ; defaultLength = 1000000). ◆ ~PickHandler(). sofa::gui::common::PickHandler::~PickHandler ; (; ). virtual . Function details. ◆ activateRay(). void sofa::gui::common::PickHandler::activateRay ; (; int ; width, . int ; height, . core::objectmodel::BaseNode * ; root . ). ◆ addCallBack(). void sofa::gui::common::PickHandler::addCallBack ; (; CallBackPicker * ; c). inline . ◆ allocateSelectionBuffer(). void sofa::gui::common::PickHandler::allocateSelectionBuffer ; (; int ; width, . int ; height . ). virtual . Reimplemented in sofa::gui::qt::GLPickHandler. ◆ changeOperation() [1/2]. Operation * sofa::gui::common::PickHandler::changeOperation ; (; MOUSE_BUTTON ; button, . const std::string & ; op . ). ◆ changeOperation() [2/2]. Operation * sofa::gui::common::PickHandler::changeOperation ; (; sofa::component::setting::MouseButtonSetting * ; setting). ◆ clearCallBacks(). void sofa::gui::common::PickHandler::clearCallBacks ; (; ). inline . ◆ deactivateRay(). void sofa::gui::common::PickHandler::deactivateRay ; (; ). ◆ destroySelectionBuffer(). void sofa::gui::common::PickHandler::destroySelectionBuffer ; (; ). virtual . Reimplemented in sofa::gui::qt::GLPickHandler. ◆ findCollision(). BodyPicked sofa::gui::common::PickHandler::findCollision ; (; ). protectedvirtual . ◆ findCollisionUsingBruteForce() [1/2]. BodyPicked sofa::gui::common::PickHandler::findCollisionUsingBruteFo",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1common_1_1_pick_handler.html:4925,allocate,allocateSelectionBuffer,4925,api/master/sofa/html/classsofa_1_1gui_1_1common_1_1_pick_handler.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1common_1_1_pick_handler.html,1,['allocate'],['allocateSelectionBuffer']
Energy Efficiency,"onDiffusionFEMForceField< DataTypes >::computeEdgeDiffusionCoefficient. protected . Function computing the edge diffusion coefficient from tetrahedral information. . ◆ draw(). template<class DataTypes > . void sofa::component::diffusion::TetrahedronDiffusionFEMForceField< DataTypes >::draw ; (; const core::visual::VisualParams * ; ). overridevirtual . Render internal data of this object, for debugging purposes. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ getDiffusionCoefficient(). template<class DataTypes > . TetrahedronDiffusionFEMForceField< DataTypes >::VectorReal sofa::component::diffusion::TetrahedronDiffusionFEMForceField< DataTypes >::getDiffusionCoefficient. Get diffusion coefficient coefficient. . ◆ getPotentialEnergy(). template<class DataTypes > . SReal sofa::component::diffusion::TetrahedronDiffusionFEMForceField< DataTypes >::getPotentialEnergy ; (; const core::MechanicalParams * ; , . const DataVecCoord & ; x . ); const. overridevirtual . Return Potential energy of the mesh. ; Implements sofa::core::behavior::ForceField< DataTypes >. ◆ getTetraDiffusionCoefficient(). template<class DataTypes > . TetrahedronDiffusionFEMForceField< DataTypes >::Real sofa::component::diffusion::TetrahedronDiffusionFEMForceField< DataTypes >::getTetraDiffusionCoefficient ; (; Index ; i). Get diffusion coefficient for tetra i. . ◆ init(). template<class DataTypes > . void sofa::component::diffusion::TetrahedronDiffusionFEMForceField< DataTypes >::init ; (; void ; ). overridevirtual . Other usual SOFA functions ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ reinit(). template<class DataTypes > . void sofa::component::diffusion::TetrahedronDiffusionFEMForceField< DataTypes >::reinit. overridevirtual . Update method called when variables used in precomputation are modified. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ setDiffusionCoefficient() [1/2]. template<class DataTypes > . void sofa::component::diffusion::TetrahedronDiffusionFEM",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1diffusion_1_1_tetrahedron_diffusion_f_e_m_force_field.html:27331,energy,energy,27331,api/master/sofa/html/classsofa_1_1component_1_1diffusion_1_1_tetrahedron_diffusion_f_e_m_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1diffusion_1_1_tetrahedron_diffusion_f_e_m_force_field.html,1,['energy'],['energy']
Energy Efficiency,"onst MechanicalParams * ; mparams = mechanicalparams::defaultInstance()); const. pure virtual . vMv/2 ; Implemented in sofa::core::behavior::Mass< DataTypes >. ◆ getMomentum(). virtual type::Vec6 sofa::core::behavior::BaseMass::getMomentum ; (; const MechanicalParams * ; mparams = mechanicalparams::defaultInstance()); const. pure virtual . (Mv,xMv+Iw) (linear and angular momenta against world origin) ; Implemented in sofa::core::behavior::Mass< DataTypes >. ◆ getPotentialEnergy(). virtual SReal sofa::core::behavior::BaseMass::getPotentialEnergy ; (; const MechanicalParams * ; mparams = mechanicalparams::defaultInstance()); const. pure virtual . Mgx. ; Implemented in sofa::core::behavior::Mass< DataTypes >, and sofa::component::solidmechanics::fem::elastic::HexahedronFEMForceFieldAndMass< DataTypes >. ◆ initGnuplot(). virtual void sofa::core::behavior::BaseMass::initGnuplot ; (; const std::string ; path). pure virtual . initialization to export kinetic and potential energy to gnuplot files format ; Implemented in sofa::core::behavior::Mass< DataTypes >. ◆ insertInNode(). bool sofa::core::behavior::BaseMass::insertInNode ; (; objectmodel::BaseNode * ; ). overridevirtual . the component can insert itself directly in the right sequence in the Node so the Node does not have to test its type against all known types Returnstrue if the component was inserted ; Reimplemented from sofa::core::objectmodel::BaseObject.; Reimplemented in sofa::core::behavior::Mass< DataTypes >. ◆ isDiagonal(). virtual bool sofa::core::behavior::BaseMass::isDiagonal ; (; ); const. pure virtual . Implemented in sofa::component::solidmechanics::fem::elastic::HexahedronFEMForceFieldAndMass< DataTypes >, sofa::component::solidmechanics::fem::elastic::HexahedralFEMForceFieldAndMass< DataTypes >, sofa::component::mass::UniformMass< DataTypes >, sofa::component::mass::MeshMatrixMass< DataTypes, GeometricalTypes >, sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >, and sofa::component::m",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_mass.html:20971,energy,energy,20971,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_mass.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_mass.html,1,['energy'],['energy']
Energy Efficiency,"onst type::RGBAColor &colorX=type::RGBAColor::red(), const type::RGBAColor &colorY=type::RGBAColor::green(), const type::RGBAColor &colorZ=type::RGBAColor::red());  ; void draw (const type::Vec4f &colorX=type::Vec4f(1, 0, 0, 1), const type::Vec4f &colorY=type::Vec4f(0, 1, 0, 1), const type::Vec4f &colorZ=type::Vec4f(0, 0, 1, 1))=delete;  ; void draw (const double *mat, const type::Vec3 &length, const type::Vec4f &colorX=type::Vec4f(1, 0, 0, 1), const type::Vec4f &colorY=type::Vec4f(0, 1, 0, 1), const type::Vec4f &colorZ=type::Vec4f(0, 0, 1, 1))=delete;  . Static Public Member Functions; static void draw (const type::Vec3 &center, const Quaternion &orient, const type::Vec3 &length, const type::RGBAColor &colorX=type::RGBAColor::red(), const type::RGBAColor &colorY=type::RGBAColor::green(), const type::RGBAColor &colorZ=type::RGBAColor::red());  ; static void draw (const type::Vec3 &center, const double orient[4][4], const type::Vec3 &length, const type::RGBAColor &colorX=type::RGBAColor::red(), const type::RGBAColor &colorY=type::RGBAColor::green(), const type::RGBAColor &colorZ=type::RGBAColor::red());  ; static void draw (const double *mat, const type::Vec3 &length, const type::RGBAColor &colorX=type::RGBAColor::red(), const type::RGBAColor &colorY=type::RGBAColor::green(), const type::RGBAColor &colorZ=type::RGBAColor::red());  ; static void draw (const type::Vec3 &center, const Quaternion &orient, SReal length=1.0_sreal, const type::RGBAColor &colorX=type::RGBAColor::red(), const type::RGBAColor &colorY=type::RGBAColor::green(), const type::RGBAColor &colorZ=type::RGBAColor::red());  ; static void draw (const type::Vec3 &center, const double orient[4][4], SReal length=1.0_sreal, const type::RGBAColor &colorX=type::RGBAColor::red(), const type::RGBAColor &colorY=type::RGBAColor::green(), const type::RGBAColor &colorZ=type::RGBAColor::red());  ; static void draw (const double *mat, SReal length=1.0_sreal, const type::RGBAColor &colorX=type::RGBAColor::red(), const ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1_axis.html:2019,green,green,2019,api/master/sofa/html/classsofa_1_1gl_1_1_axis.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1_axis.html,3,['green'],['green']
Energy Efficiency,"onstexpr . Function details. ◆ applyElasticityTensor(). template<class DataTypes > . virtual void sofa::component::solidmechanics::fem::hyperelastic::material::Costa< DataTypes >::applyElasticityTensor ; (; StrainInformation< DataTypes > * ; , . const MaterialParameters< DataTypes > & ; , . const MatrixSym & ; , . MatrixSym & ;  . ). inlinevirtual . computes the Elasticity Tensor of the current configuration ; Reimplemented from sofa::component::solidmechanics::fem::hyperelastic::material::HyperelasticMaterial< DataTypes >. ◆ deriveSPKTensor(). template<class DataTypes > . virtual void sofa::component::solidmechanics::fem::hyperelastic::material::Costa< DataTypes >::deriveSPKTensor ; (; StrainInformation< DataTypes > * ; , . const MaterialParameters< DataTypes > & ; , . MatrixSym & ;  . ). inlinevirtual . computes the second Piola Kirchhoff stress tensor of the current configuration ; Reimplemented from sofa::component::solidmechanics::fem::hyperelastic::material::HyperelasticMaterial< DataTypes >. ◆ ElasticityTensor(). template<class DataTypes > . virtual void sofa::component::solidmechanics::fem::hyperelastic::material::Costa< DataTypes >::ElasticityTensor ; (; StrainInformation< DataTypes > * ; sinfo, . const MaterialParameters< DataTypes > & ; param, . Matrix6 & ; outputTensor . ). inlinevirtual . Reimplemented from sofa::component::solidmechanics::fem::hyperelastic::material::HyperelasticMaterial< DataTypes >. ◆ getStrainEnergy(). template<class DataTypes > . virtual Real sofa::component::solidmechanics::fem::hyperelastic::material::Costa< DataTypes >::getStrainEnergy ; (; StrainInformation< DataTypes > * ; , . const MaterialParameters< DataTypes > & ;  . ). inlinevirtual . returns the strain energy of the current configuration ; Reimplemented from sofa::component::solidmechanics::fem::hyperelastic::material::HyperelasticMaterial< DataTypes >. sofacomponentsolidmechanicsfemhyperelasticmaterialCosta; Generated on Mon Nov 11 2024 03:01:05 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_costa.html:3957,energy,energy,3957,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_costa.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_costa.html,1,['energy'],['energy']
Energy Efficiency,"onstexpr . Function details. ◆ applyElasticityTensor(). template<class DataTypes > . void sofa::component::solidmechanics::fem::hyperelastic::material::Ogden< DataTypes >::applyElasticityTensor ; (; StrainInformation< DataTypes > * ; , . const MaterialParameters< DataTypes > & ; , . const MatrixSym & ; , . MatrixSym & ;  . ). inlineoverridevirtual . computes the Elasticity Tensor of the current configuration ; Reimplemented from sofa::component::solidmechanics::fem::hyperelastic::material::HyperelasticMaterial< DataTypes >. ◆ deriveSPKTensor(). template<class DataTypes > . void sofa::component::solidmechanics::fem::hyperelastic::material::Ogden< DataTypes >::deriveSPKTensor ; (; StrainInformation< DataTypes > * ; , . const MaterialParameters< DataTypes > & ; , . MatrixSym & ;  . ). inlineoverridevirtual . computes the second Piola Kirchhoff stress tensor of the current configuration ; Reimplemented from sofa::component::solidmechanics::fem::hyperelastic::material::HyperelasticMaterial< DataTypes >. ◆ ElasticityTensor(). template<class DataTypes > . void sofa::component::solidmechanics::fem::hyperelastic::material::Ogden< DataTypes >::ElasticityTensor ; (; StrainInformation< DataTypes > * ; sinfo, . const MaterialParameters< DataTypes > & ; param, . Matrix6 & ; outputTensor . ). inlineoverridevirtual . Reimplemented from sofa::component::solidmechanics::fem::hyperelastic::material::HyperelasticMaterial< DataTypes >. ◆ getStrainEnergy(). template<class DataTypes > . Real sofa::component::solidmechanics::fem::hyperelastic::material::Ogden< DataTypes >::getStrainEnergy ; (; StrainInformation< DataTypes > * ; , . const MaterialParameters< DataTypes > & ;  . ). inlineoverridevirtual . returns the strain energy of the current configuration ; Reimplemented from sofa::component::solidmechanics::fem::hyperelastic::material::HyperelasticMaterial< DataTypes >. sofacomponentsolidmechanicsfemhyperelasticmaterialOgden; Generated on Mon Nov 11 2024 03:02:25 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_ogden.html:3961,energy,energy,3961,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_ogden.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_ogden.html,1,['energy'],['energy']
Energy Efficiency,"ontainer::MechanicalObject< DataTypes >::SOFA_CLASS ; (; SOFA_TEMPLATE(MechanicalObject< DataTypes >, DataTypes) ; , . SOFA_TEMPLATE(sofa::core::behavior::MechanicalState, DataTypes) ;  . ). ◆ storeResetState(). template<class DataTypes > . void sofa::component::statecontainer::MechanicalObject< DataTypes >::storeResetState. overridevirtual . Save the initial state for later uses in reset() ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ swapValues(). template<class DataTypes > . void sofa::component::statecontainer::MechanicalObject< DataTypes >::swapValues ; (; const sofa::Index ; idx1, . const sofa::Index ; idx2 . ). Exchange values at indices idx1 and idx2. . ◆ vAlloc() [1/2]. template<class DataTypes > . void sofa::component::statecontainer::MechanicalObject< DataTypes >::vAlloc ; (; const core::ExecParams * ; params, . core::VecCoordId ; v, . const core::VecIdProperties & ; properties = {} . ). overridevirtual . Increment the index of the given MatrixDerivId, so that all 'allocated' vectors in this state have a lower index. ; Allocate a new temporary vector ; Implements sofa::core::behavior::BaseMechanicalState. ◆ vAlloc() [2/2]. template<class DataTypes > . void sofa::component::statecontainer::MechanicalObject< DataTypes >::vAlloc ; (; const core::ExecParams * ; params, . core::VecDerivId ; v, . const core::VecIdProperties & ; properties = {} . ). overridevirtual . Allocate a new temporary vector. ; Implements sofa::core::behavior::BaseMechanicalState. ◆ vAllocImpl(). template<class DataTypes > . template<core::VecType vtype> . void sofa::component::statecontainer::MechanicalObject< DataTypes >::vAllocImpl ; (; core::TVecId< vtype, core::V_WRITE > ; v, . const core::VecIdProperties & ; properties . ). protected . Generic implementation of the method vAlloc. . ◆ vAvail() [1/2]. template<class DataTypes > . void sofa::component::statecontainer::MechanicalObject< DataTypes >::vAvail ; (; const core::ExecParams * ; params, . core::VecCoordId & ; v . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1statecontainer_1_1_mechanical_object.html:69501,allocate,allocated,69501,api/master/sofa/html/classsofa_1_1component_1_1statecontainer_1_1_mechanical_object.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1statecontainer_1_1_mechanical_object.html,1,['allocate'],['allocated']
Energy Efficiency,"opyToBuffer (SReal *dst, ConstVecId src, unsigned n) const override;  ; void copyFromBuffer (VecId dst, const SReal *src, unsigned n) override;  ; void addFromBuffer (VecId dst, const SReal *src, unsigned n) override;  ;  Public Member Functions inherited from sofa::core::behavior::BaseMechanicalState;  SOFA_ABSTRACT_CLASS (BaseMechanicalState, BaseState);  ;  SOFA_BASE_CAST_IMPLEMENTATION (BaseMechanicalState);  ; bool insertInNode (objectmodel::BaseNode *node) override;  ; bool removeInNode (objectmodel::BaseNode *node) override;  ; virtual void handleStateChange (core::topology::Topology *t);  Handle state Changes from a given Topology. More...;  ; virtual Size getMatrixBlockSize () const;  Get the number of scalars per Deriv value, as necessary to build mechanical matrices and vectors. More...;  ; virtual Size getMatrixSize () const;  Get the number of rows necessary to build mechanical matrices and vectors. More...;  ; virtual void copyToBuffer (SReal *dst, ConstVecId src, unsigned int n) const =0;  Copy data to an external, user-allocated buffer. More...;  ; virtual void copyFromBuffer (VecId dst, const SReal *src, unsigned int n)=0;  Copy data from an external, user-allocated buffer. More...;  ; virtual void addFromBuffer (VecId dst, const SReal *src, unsigned int n)=0;  Add data from an external, user-allocated buffer. More...;  ;  Public Member Functions inherited from sofa::core::BaseState;  SOFA_ABSTRACT_CLASS (BaseState, objectmodel::BaseObject);  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObject;  SOFA_CLASS (BaseObject, Base);  ; void setSrc (const std::string &v, std::vector< std::string > *attributeList=nullptr);  Sets a source Object and parses it to collect dependent Data. More...;  ; void setSrc (const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr);  ; Base * findLinkDestClass (const BaseClass *destType, const std::string &path, const BaseLink *link) override;  ; virtual std:",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1statecontainer_1_1_mechanical_object.html:19365,allocate,allocated,19365,api/master/sofa/html/classsofa_1_1component_1_1statecontainer_1_1_mechanical_object.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1statecontainer_1_1_mechanical_object.html,1,['allocate'],['allocated']
Energy Efficiency,"or::DampingMatrix *) override;  ; void draw (const core::visual::VisualParams *vparams) override;  Render internal data of this object, for debugging purposes. More...;  ; void computeBBox (const core::ExecParams *params, bool onlyVisible=false) override;  ; core::behavior::MechanicalState< DataTypes > * getObject1 ();  ; core::behavior::MechanicalState< DataTypes > * getObject2 ();  ; const sofa::type::vector< Spring > & getSprings () const;  ; SReal getArrowSize () const;  ; void setArrowSize (float s);  ; int getDrawMode () const;  ; void setDrawMode (int m);  ; void clear (sofa::Size reserve=0);  ; void removeSpring (sofa::Index idSpring);  ; void addSpring (sofa::Index m1, sofa::Index m2, SReal ks, SReal kd, SReal initlen);  ; void addSpring (const Spring &spring);  ; void initGnuplot (const std::string path) override;  initialization to export kinetic, potential energy and force intensity to gnuplot files format More...;  ; void exportGnuplot (SReal time) override;  export kinetic and potential energy state at ""time"" to a gnuplot file More...;  ;  Public Member Functions inherited from sofa::core::behavior::PairInteractionForceField< DataTypes >;  SOFA_ABSTRACT_CLASS2 (SOFA_TEMPLATE(PairInteractionForceField, DataTypes), BaseInteractionForceField, SOFA_TEMPLATE2(PairStateAccessor, DataTypes, DataTypes));  ; void setPathObject1 (const std::string &path);  Set the Object1 path. More...;  ; void setPathObject2 (const std::string &path);  Set the Object2 path. More...;  ; std::string getPathObject1 () const;  Retrieve the Object1 path. More...;  ; std::string getPathObject2 () const;  Retrieve the Object2 path. More...;  ; void addForce (const MechanicalParams *mparams, MultiVecDerivId fId) override;  ; void addDForce (const MechanicalParams *mparams, MultiVecDerivId dfId) override;  ; SReal getPotentialEnergy (const MechanicalParams *mparams) const override;  ;  Public Member Functions inherited from sofa::core::behavior::BaseInteractionForceField;  SOFA_ABSTRACT_",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_mesh_spring_force_field.html:7894,energy,energy,7894,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_mesh_spring_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_mesh_spring_force_field.html,6,['energy'],['energy']
Energy Efficiency,"orZ=type::RGBAColor::red());  ; static void draw (const type::Vec3 &center, const Quaternion &orient, SReal length=1.0_sreal, const type::RGBAColor &colorX=type::RGBAColor::red(), const type::RGBAColor &colorY=type::RGBAColor::green(), const type::RGBAColor &colorZ=type::RGBAColor::red());  ; static void draw (const type::Vec3 &center, const double orient[4][4], SReal length=1.0_sreal, const type::RGBAColor &colorX=type::RGBAColor::red(), const type::RGBAColor &colorY=type::RGBAColor::green(), const type::RGBAColor &colorZ=type::RGBAColor::red());  ; static void draw (const double *mat, SReal length=1.0_sreal, const type::RGBAColor &colorX=type::RGBAColor::red(), const type::RGBAColor &colorY=type::RGBAColor::green(), const type::RGBAColor &colorZ=type::RGBAColor::red());  ; static void draw (const type::Vec3 &center, const Quaternion &orient, const type::Vec3 &length, const type::Vec4f &colorX=type::Vec4f(1, 0, 0, 1), const type::Vec4f &colorY=type::Vec4f(0, 1, 0, 1), const type::Vec4f &colorZ=type::Vec4f(0, 0, 1, 1))=delete;  ; static void draw (const type::Vec3 &center, const double orient[4][4], const type::Vec3 &length, const type::Vec4f &colorX=type::Vec4f(1, 0, 0, 1), const type::Vec4f &colorY=type::Vec4f(0, 1, 0, 1), const type::Vec4f &colorZ=type::Vec4f(0, 0, 1, 1))=delete;  ; static void draw (const type::Vec3 &center, const Quaternion &orient, SReal length=1.0_sreal, const type::Vec4f &colorX=type::Vec4f(1, 0, 0, 1), const type::Vec4f &colorY=type::Vec4f(0, 1, 0, 1), const type::Vec4f &colorZ=type::Vec4f(0, 0, 1, 1))=delete;  ; static void draw (const type::Vec3 &center, const double orient[4][4], SReal length=1.0_sreal, const type::Vec4f &colorX=type::Vec4f(1, 0, 0, 1), const type::Vec4f &colorY=type::Vec4f(0, 1, 0, 1), const type::Vec4f &colorZ=type::Vec4f(0, 0, 1, 1))=delete;  ; static void draw (const double *mat, SReal length=1.0_sreal, const type::Vec4f &colorX=type::Vec4f(1, 0, 0, 1), const type::Vec4f &colorY=type::Vec4f(0, 1, 0, 1), const type::Ve",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1_axis.html:3269,green,green,3269,api/master/sofa/html/classsofa_1_1gl_1_1_axis.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1_axis.html,1,['green'],['green']
Energy Efficiency,"orce vector. More...;  ; ConstMultiVecDerivId m_dx;  Ids of dx vector (for implicit schemes) More...;  ; ConstMultiVecDerivId m_df;  Ids of df vector (for implicit schemes) More...;  ; SReal m_mFactor;  Mass matrix contributions factor (for implicit schemes) More...;  ; SReal m_bFactor;  Damping matrix contributions factor (for implicit schemes) More...;  ; SReal m_kFactor;  Stiffness matrix contributions factor (for implicit schemes) More...;  ; bool m_supportOnlySymmetricMatrix;  True if a symmetric matrix is assumed in the left-hand term of the dynamics equations, for solvers specialized on symmetric matrices. More...;  . Public Member Functions; bool symmetricMatrix () const =delete;  ; bool supportOnlySymmetricMatrix () const;  Symmetric matrix flag, for solvers specialized on symmetric matrices. More...;  ; bool energy () const;  Should the kinematic and potential energies be computed ? More...;  ;  MechanicalParams (const sofa::core::ExecParams &p=sofa::core::ExecParams());  Constructor, initializing all VecIds to default values, implicit and energy flags to false. More...;  ;  MechanicalParams (const MechanicalParams &mparams);  Copy Constructor. More...;  ; MechanicalParams * setExecParams (const core::ExecParams *params);  ; MechanicalParams * operator= (const MechanicalParams &mparams);  ; Flags and parameters getters; SReal dt () const;  Time step. More...;  ; bool implicit () const;  Is the time integration scheme implicit ? More...;  ; SReal mFactor () const;  Mass matrix contributions factor (for implicit schemes) More...;  ; SReal bFactor () const;  Damping matrix contributions factor (for implicit schemes) More...;  ; SReal kFactor () const;  Stiffness matrix contributions factor (for implicit schemes) More...;  ; Rayleigh Damping D = rayleighStiffness*K - rayleighMass*M; SReal kFactorIncludingRayleighDamping (SReal rayleighStiffness) const;  ; SReal mFactorIncludingRayleighDamping (SReal rayleighMass) const;  ; Access to vectors from a given state c",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_mechanical_params.html:2070,energy,energy,2070,api/master/sofa/html/classsofa_1_1core_1_1_mechanical_params.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_mechanical_params.html,1,['energy'],['energy']
Energy Efficiency,"ore::topology::TopologicalMapping);  ; void init () override;  Initializes the target BaseTopology from the source BaseTopology. More...;  ; void updateTopologicalMappingTopDown () override;  Translates the TopologyChange objects from the source to the target. More...;  ; Index getFromIndex (Index ind) override;  ;  Public Member Functions inherited from sofa::core::topology::TopologicalMapping;  SOFA_ABSTRACT_CLASS (TopologicalMapping, objectmodel::BaseObject);  ; virtual void setTopologies (In *from, Out *to);  Specify the input and output models. More...;  ; void setPathInputObject (const std::string &o);  Set the path to the objects mapped in the scene graph. More...;  ; void setPathOutputObject (const std::string &o);  ; In * getFrom ();  Accessor to the INPUT topology of the TopologicalMapping : More...;  ; Out * getTo ();  Accessor to the OUTPUT topology of the TopologicalMapping : More...;  ; virtual void updateTopologicalMappingBottomUp ();  Method called at each topological changes propagation which comes from the OUTPUT topology to adapt the INPUT topology : More...;  ; virtual bool propagateFromInputToOutputModel ();  Return true if this mapping is able to propagate topological changes from input to output model. More...;  ; virtual bool propagateFromOutputToInputModel ();  Return true if this mapping is able to propagate topological changes from output to input model. More...;  ; virtual bool isTheOutputTopologySubdividingTheInputOne ();  return true if the output topology subdivide the input one. (the topology uses the Loc2GlobVec/Glob2LocMap/In2OutMap structs and share the same DOFs) More...;  ; const std::map< Index, Index > & getGlob2LocMap ();  Accessor to index maps : More...;  ; virtual Index getGlobIndex (Index ind);  ; void dumpGlob2LocMap ();  ; void dumpLoc2GlobVec ();  ; virtual bool checkTopologies ();  Method to check the topology mapping maps regarding the upper topology. More...;  ; virtual void getFromIndex (type::vector< Index > &, con",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1mapping_1_1_edge2_quad_topological_mapping.html:4388,adapt,adapt,4388,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1mapping_1_1_edge2_quad_topological_mapping.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1mapping_1_1_edge2_quad_topological_mapping.html,5,['adapt'],['adapt']
Energy Efficiency,"ors are used : ; VecCoord ; : containing positions. ; VecDeriv ; : derivative values, i.e. velocity, forces, displacements. In most cases they are the same (i.e. 3D/2D point particles), but they can be different (rigid frames for instance). Several pre-defined vectors are stored : ; position ; ; velocity ; ; force ; ; dx ; (displacement). Other vectors can be allocated to store other temporary values. Vectors can be assigned efficiently by just swapping pointers.; In addition to state vectors, the current constraint system matrix is also stored, containing the coefficient of each constraint defined over the DOFs in this body. . Classes; class  ConstraintBlock;  ; class  VMultiOpEntry;  . Public Member Functions;  SOFA_ABSTRACT_CLASS (BaseMechanicalState, BaseState);  ;  SOFA_BASE_CAST_IMPLEMENTATION (BaseMechanicalState);  ; bool insertInNode (objectmodel::BaseNode *node) override;  ; bool removeInNode (objectmodel::BaseNode *node) override;  ; Methods allowing to have access to the geometry without a template class (generic but not efficient); virtual SReal getPX (Index) const;  ; virtual SReal getPY (Index) const;  ; virtual SReal getPZ (Index) const;  ; Mechanical integration related methods; Note: all these methods can now be implemented generically using VecId-based operations . virtual void beginIntegration (SReal);  Called at the beginning of each integration step. More...;  ; virtual void endIntegration (const ExecParams *params, SReal);  Called at the end of each integration step. More...;  ; virtual void resetForce (const ExecParams *params, VecDerivId f=VecDerivId::force());  Set F = 0. More...;  ; virtual void resetAcc (const ExecParams *params, VecDerivId a=VecDerivId::dx());  Set Acc =0. More...;  ; virtual void accumulateForce (const ExecParams *params, VecDerivId f=VecDerivId::force());  Add stored external forces to F. More...;  ; Constraints related methods; virtual void resetConstraint (const ConstraintParams *params)=0;  Reset the constraint matr",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_mechanical_state.html:1839,efficient,efficient,1839,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_mechanical_state.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_mechanical_state.html,1,['efficient'],['efficient']
Energy Efficiency,"otected . Relationships between the mechanical states and their associated components. . ◆ m_masses. template<class TMatrix , class TVector > . sofa::type::vector<sofa::core::behavior::BaseMass*> sofa::component::linearsystem::TypedMatrixLinearSystem< TMatrix, TVector >::m_masses. protected . The list of masses contributing to the matrix assembly. . ◆ m_mechanicalMappings. template<class TMatrix , class TVector > . sofa::type::vector<sofa::core::BaseMapping*> sofa::component::linearsystem::TypedMatrixLinearSystem< TMatrix, TVector >::m_mechanicalMappings. protected . The list of mechanical mappings contributing to the matrix assembly. . ◆ m_projectiveConstraints. template<class TMatrix , class TVector > . sofa::type::vector<sofa::core::behavior::BaseProjectiveConstraintSet*> sofa::component::linearsystem::TypedMatrixLinearSystem< TMatrix, TVector >::m_projectiveConstraints. protected . The list of projective constraints contributing to the matrix assembly. . Function details. ◆ allocateSystem(). template<class TMatrix , class TVector > . void sofa::component::linearsystem::TypedMatrixLinearSystem< TMatrix, TVector >::allocateSystem. protectedvirtual . Reimplemented in sofa::component::linearsystem::CompositeLinearSystem< TMatrix, TVector >. ◆ associateLocalMatrixToComponents(). template<class TMatrix , class TVector > . virtual void sofa::component::linearsystem::TypedMatrixLinearSystem< TMatrix, TVector >::associateLocalMatrixToComponents ; (; const core::MechanicalParams * ; ). inlineprotectedvirtual . Reimplemented in sofa::component::linearsystem::MatrixLinearSystem< TMatrix, TVector >, and sofa::component::linearsystem::MatrixFreeSystem< TMatrix, TVector >. ◆ clearSystem(). template<class TMatrix , class TVector > . void sofa::component::linearsystem::TypedMatrixLinearSystem< TMatrix, TVector >::clearSystem. virtual . Reimplemented in sofa::component::linearsystem::ConstantSparsityPatternSystem< TMatrix, TVector >, and sofa::component::linearsystem::CompositeLi",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsystem_1_1_typed_matrix_linear_system.html:18922,allocate,allocateSystem,18922,api/master/sofa/html/classsofa_1_1component_1_1linearsystem_1_1_typed_matrix_linear_system.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsystem_1_1_typed_matrix_linear_system.html,1,['allocate'],['allocateSystem']
Energy Efficiency,"params->kFactor() is the coefficient for stiffness contributions (i.e. DOFs term in the ODE) ; matrixthe matrix to add the result to . Implements sofa::core::behavior::BaseForceField. ◆ exportGnuplot(). virtual void sofa::core::behavior::BaseInteractionForceField::exportGnuplot ; (; SReal ; time). inlinevirtual . export kinetic and potential energy state at ""time"" to a gnuplot file ; Reimplemented in sofa::component::solidmechanics::spring::SpringForceField< DataTypes >. ◆ getMechModel1(). BaseMechanicalState * sofa::core::behavior::BaseInteractionForceField::getMechModel1 ; (; ). virtual . Get the first MechanicalState . ◆ getMechModel2(). BaseMechanicalState * sofa::core::behavior::BaseInteractionForceField::getMechModel2 ; (; ). virtual . Get the first MechanicalState . ◆ initGnuplot(). virtual void sofa::core::behavior::BaseInteractionForceField::initGnuplot ; (; const std::string ; path). inlinevirtual . initialization to export potential energy to gnuplot files format ; Reimplemented in sofa::component::solidmechanics::spring::SpringForceField< DataTypes >. ◆ insertInNode(). bool sofa::core::behavior::BaseInteractionForceField::insertInNode ; (; objectmodel::BaseNode * ; ). overridevirtual . the component can insert itself directly in the right sequence in the Node so the Node does not have to test its type against all known types Returnstrue if the component was inserted ; Reimplemented from sofa::core::behavior::BaseForceField. ◆ removeInNode(). bool sofa::core::behavior::BaseInteractionForceField::removeInNode ; (; objectmodel::BaseNode * ; ). overridevirtual . the component can remove itself directly in the right sequence in the Node so the Node does not have to test its type against all known types Returnstrue if the component was removed ; Reimplemented from sofa::core::behavior::BaseForceField. ◆ SOFA_ABSTRACT_CLASS(). sofa::core::behavior::BaseInteractionForceField::SOFA_ABSTRACT_CLASS ; (; BaseInteractionForceField ; , . BaseForceField ;  . ). sofacore",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_interaction_force_field.html:17978,energy,energy,17978,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_interaction_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_interaction_force_field.html,1,['energy'],['energy']
Energy Efficiency,"pdateYAxisBounds (SReal value);  Method to update Y axis scale. More...;  ; void flushSeries ();  flush data from series not anymore displayed More...;  . Attribute details. ◆ m_axisX. QValueAxis* sofa::gui::qt::QGraphStatWidget::m_axisX. protected . x axis pointer . ◆ m_axisY. QValueAxis* sofa::gui::qt::QGraphStatWidget::m_axisY. protected . y axis pointer . ◆ m_bufferSize. int sofa::gui::qt::QGraphStatWidget::m_bufferSize. protected . size of the buffers to stored . ◆ m_chart. QChart* sofa::gui::qt::QGraphStatWidget::m_chart. protected . Pointer to the chart Data. . ◆ m_cptStep. int sofa::gui::qt::QGraphStatWidget::m_cptStep. protected . step counter monitored . ◆ m_curves. std::vector< QLineSeries *> sofa::gui::qt::QGraphStatWidget::m_curves. protected . vector of series to be plotted . ◆ m_lastTime. SReal sofa::gui::qt::QGraphStatWidget::m_lastTime. protected . last timestep monitored . ◆ m_node. simulation::Node* sofa::gui::qt::QGraphStatWidget::m_node. protected . pointer to the node monitored . ◆ m_yMax. SReal sofa::gui::qt::QGraphStatWidget::m_yMax. protected . max y axis value stored . ◆ m_yMin. SReal sofa::gui::qt::QGraphStatWidget::m_yMin. protected . min y axis value stored . Constructor details. ◆ QGraphStatWidget(). sofa::gui::qt::QGraphStatWidget::QGraphStatWidget ; (; QWidget * ; parent, . simulation::Node * ; node, . const QString & ; title, . unsigned ; numberOfCurves, . int ; bufferSize . ). ◆ ~QGraphStatWidget(). sofa::gui::qt::QGraphStatWidget::~QGraphStatWidget ; (; ). virtual . Function details. ◆ flushSeries(). void sofa::gui::qt::QGraphStatWidget::flushSeries ; (; ). protected . flush data from series not anymore displayed . ◆ setCurve(). void sofa::gui::qt::QGraphStatWidget::setCurve ; (; unsigned ; index, . const QString & ; name, . const QColor & ; color . ). protected . set the index-th curve (index must be < _numberOfCurves) . ◆ step(). void sofa::gui::qt::QGraphStatWidget::step ; (; ). finalvirtual . Main method called to update the gr",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_graph_stat_widget.html:2642,monitor,monitored,2642,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_graph_stat_widget.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_graph_stat_widget.html,1,['monitor'],['monitored']
Energy Efficiency,"peInfo< TDataType >::size ; (; ). inlinestatic . ◆ size() [2/2]. template<class TDataType > . static sofa::Size sofa::defaulttype::DefaultDataTypeInfo< TDataType >::size ; (; const DataType & ; ). inlinestatic . Enum details. ◆ anonymous enum. template<class TDataType > . anonymous enum. EnumeratorValidInfo 1 if this type has valid infos . ◆ anonymous enum. template<class TDataType > . anonymous enum. EnumeratorFixedSize 1 if this type has a fixed size . ◆ anonymous enum. template<class TDataType > . anonymous enum. EnumeratorZeroConstructor 1 if the constructor is equivalent to setting memory to 0 . ◆ anonymous enum. template<class TDataType > . anonymous enum. EnumeratorSimpleCopy 1 if copying the data can be done with a memcpy . ◆ anonymous enum. template<class TDataType > . anonymous enum. EnumeratorSimpleLayout 1 if the layout in memory is simply N values of the same base type . ◆ anonymous enum. template<class TDataType > . anonymous enum. EnumeratorInteger 1 if this type uses integer values . ◆ anonymous enum. template<class TDataType > . anonymous enum. EnumeratorScalar 1 if this type uses scalar values . ◆ anonymous enum. template<class TDataType > . anonymous enum. EnumeratorText 1 if this type uses text values . ◆ anonymous enum. template<class TDataType > . anonymous enum. EnumeratorCopyOnWrite 1 if this type uses copy-on-write. The memory is shared with its source Data while only the source is changing (and the source modifications are then visible in the current Data). As soon as modifications are applied to the current Data, it will allocate its own value, and no longer shares memory with the source. . ◆ anonymous enum. template<class TDataType > . anonymous enum. EnumeratorContainer 1 if this type is a container . ◆ anonymous enum. template<class TDataType > . anonymous enum. EnumeratorSize largest known fixed size for this type, as returned by size() . sofadefaulttypeDefaultDataTypeInfo; Generated on Mon Nov 11 2024 03:18:43 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1defaulttype_1_1_default_data_type_info.html:4821,allocate,allocate,4821,api/master/sofa/html/structsofa_1_1defaulttype_1_1_default_data_type_info.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1defaulttype_1_1_default_data_type_info.html,1,['allocate'],['allocate']
Energy Efficiency,"per Deriv value, as necessary to build mechanical matrices and vectors. More...;  ; virtual Size getMatrixSize () const;  Get the number of rows necessary to build mechanical matrices and vectors. More...;  ; virtual void copyToBaseVector (linearalgebra::BaseVector *dest, ConstVecId src, unsigned int &offset)=0;  Copy data to a global BaseVector from the state stored in a local vector. More...;  ; virtual void copyFromBaseVector (VecId dest, const linearalgebra::BaseVector *src, unsigned int &offset)=0;  Copy data to a local vector from the state stored in a global BaseVector. More...;  ; virtual void copyToBaseMatrix (linearalgebra::BaseMatrix *dest, ConstMatrixDerivId src, unsigned int &offset)=0;  Copy data to a global BaseMatrix from the state stored in a local vector. More...;  ; virtual void copyToBuffer (SReal *dst, ConstVecId src, unsigned int n) const =0;  Copy data to an external, user-allocated buffer. More...;  ; virtual void copyFromBuffer (VecId dst, const SReal *src, unsigned int n)=0;  Copy data from an external, user-allocated buffer. More...;  ; virtual void addFromBuffer (VecId dst, const SReal *src, unsigned int n)=0;  Add data from an external, user-allocated buffer. More...;  ; virtual void addToBaseVector (linearalgebra::BaseVector *dest, ConstVecId src, unsigned int &offset)=0;  Add data to a global BaseVector from the state stored in a local vector. More...;  ; virtual void addFromBaseVectorSameSize (VecId dest, const linearalgebra::BaseVector *src, unsigned int &offset)=0;  Perform dest[i][j] += src[offset + i][j] 0<= i < src_entries 0<= j < 3 (for 3D objects) 0 <= j < 2 (for 2D objects) More...;  ; virtual void addFromBaseVectorDifferentSize (VecId dest, const linearalgebra::BaseVector *src, unsigned int &offset)=0;  Perform dest[ offset + i ][j] += src[i][j] 0<= i < src_entries 0<= j < 3 (for 3D objects) 0 <= j < 2 (for 2D objects) More...;  ; Data output; virtual void printDOF (ConstVecId v, std::ostream &out=std::cerr, int firstIndex=0, ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_mechanical_state.html:6003,allocate,allocated,6003,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_mechanical_state.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_mechanical_state.html,1,['allocate'],['allocated']
Energy Efficiency,"per Deriv value, as necessary to build mechanical matrices and vectors. More...;  ; virtual Size getMatrixSize () const;  Get the number of rows necessary to build mechanical matrices and vectors. More...;  ; virtual void copyToBaseVector (linearalgebra::BaseVector *dest, ConstVecId src, unsigned int &offset)=0;  Copy data to a global BaseVector from the state stored in a local vector. More...;  ; virtual void copyFromBaseVector (VecId dest, const linearalgebra::BaseVector *src, unsigned int &offset)=0;  Copy data to a local vector from the state stored in a global BaseVector. More...;  ; virtual void copyToBaseMatrix (linearalgebra::BaseMatrix *dest, ConstMatrixDerivId src, unsigned int &offset)=0;  Copy data to a global BaseMatrix from the state stored in a local vector. More...;  ; virtual void copyToBuffer (SReal *dst, ConstVecId src, unsigned int n) const =0;  Copy data to an external, user-allocated buffer. More...;  ; virtual void copyFromBuffer (VecId dst, const SReal *src, unsigned int n)=0;  Copy data from an external, user-allocated buffer. More...;  ; virtual void addFromBuffer (VecId dst, const SReal *src, unsigned int n)=0;  Add data from an external, user-allocated buffer. More...;  ; virtual void addToBaseVector (linearalgebra::BaseVector *dest, ConstVecId src, unsigned int &offset)=0;  Add data to a global BaseVector from the state stored in a local vector. More...;  ; virtual void addFromBaseVectorSameSize (VecId dest, const linearalgebra::BaseVector *src, unsigned int &offset)=0;  Perform dest[i][j] += src[offset + i][j] 0<= i < src_entries 0<= j < 3 (for 3D objects) 0 <= j < 2 (for 2D objects) More...;  ; virtual void addFromBaseVectorDifferentSize (VecId dest, const linearalgebra::BaseVector *src, unsigned int &offset)=0;  Perform dest[ offset + i ][j] += src[i][j] 0<= i < src_entries 0<= j < 3 (for 3D objects) 0 <= j < 2 (for 2D objects) More...;  ; virtual void printDOF (ConstVecId v, std::ostream &out=std::cerr, int firstIndex=0, int range=-1)",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_mechanical_state.html:7196,allocate,allocated,7196,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_mechanical_state.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_mechanical_state.html,1,['allocate'],['allocated']
Energy Efficiency,"pes1 , class DataTypes2 > . bool sofa::component::mechanicalload::InteractionEllipsoidForceField< DataTypes1, DataTypes2 >::calcF ; (; const Coord1 & ; p1, . const Deriv1 & ; v1, . Deriv1 & ; f1, . Mat & ; dfdx . ). protected . ◆ draw(). template<class DataTypes1 , class DataTypes2 > . void sofa::component::mechanicalload::InteractionEllipsoidForceField< DataTypes1, DataTypes2 >::draw ; (; const core::visual::VisualParams * ; ). overridevirtual . Render internal data of this object, for debugging purposes. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ getPotentialEnergy(). template<class DataTypes1 , class DataTypes2 > . SReal sofa::component::mechanicalload::InteractionEllipsoidForceField< DataTypes1, DataTypes2 >::getPotentialEnergy ; (; const sofa::core::MechanicalParams * ; mparams, . const DataVecCoord1 & ; x1, . const DataVecCoord2 & ; x2 . ); const. overridevirtual . Get the potential energy associated to this ForceField.; Used to estimate the total energy of the system by some post-stabilization techniques.; This method must be implemented by the component, and is usually called by the generic MixedInteractionForceField::getPotentialEnergy() method. ; Implements sofa::core::behavior::MixedInteractionForceField< TDataTypes1, TDataTypes2 >. ◆ init(). template<class DataTypes1 , class DataTypes2 > . void sofa::component::mechanicalload::InteractionEllipsoidForceField< DataTypes1, DataTypes2 >::init ; (; void ; ). overridevirtual . Initialization method called at graph creation and modification, during top-down traversal. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ initCalcF(). template<class DataTypes1 , class DataTypes2 > . void sofa::component::mechanicalload::InteractionEllipsoidForceField< DataTypes1, DataTypes2 >::initCalcF. protected . ◆ reinit(). template<class DataTypes1 , class DataTypes2 > . void sofa::component::mechanicalload::InteractionEllipsoidForceField< DataTypes1, DataTypes2 >::reinit. overridevirtual . Update met",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_interaction_ellipsoid_force_field.html:27873,energy,energy,27873,api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_interaction_ellipsoid_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_interaction_ellipsoid_force_field.html,1,['energy'],['energy']
Energy Efficiency,"pleTesselatedHexaTopologicalMapping, sofa::core::topology::TopologicalMapping);  ; void init () override;  Initializes the target BaseTopology from the source BaseTopology. More...;  ; void updateTopologicalMappingTopDown () override;  Translates the TopologyChange objects from the source to the target. More...;  ;  Public Member Functions inherited from sofa::core::topology::TopologicalMapping;  SOFA_ABSTRACT_CLASS (TopologicalMapping, objectmodel::BaseObject);  ; virtual void setTopologies (In *from, Out *to);  Specify the input and output models. More...;  ; void setPathInputObject (const std::string &o);  Set the path to the objects mapped in the scene graph. More...;  ; void setPathOutputObject (const std::string &o);  ; In * getFrom ();  Accessor to the INPUT topology of the TopologicalMapping : More...;  ; Out * getTo ();  Accessor to the OUTPUT topology of the TopologicalMapping : More...;  ; virtual void updateTopologicalMappingBottomUp ();  Method called at each topological changes propagation which comes from the OUTPUT topology to adapt the INPUT topology : More...;  ; virtual bool propagateFromInputToOutputModel ();  Return true if this mapping is able to propagate topological changes from input to output model. More...;  ; virtual bool propagateFromOutputToInputModel ();  Return true if this mapping is able to propagate topological changes from output to input model. More...;  ; virtual bool isTheOutputTopologySubdividingTheInputOne ();  return true if the output topology subdivide the input one. (the topology uses the Loc2GlobVec/Glob2LocMap/In2OutMap structs and share the same DOFs) More...;  ; const std::map< Index, Index > & getGlob2LocMap ();  Accessor to index maps : More...;  ; virtual Index getGlobIndex (Index ind);  ; virtual Index getFromIndex (Index ind);  ; void dumpGlob2LocMap ();  ; void dumpLoc2GlobVec ();  ; virtual bool checkTopologies ();  Method to check the topology mapping maps regarding the upper topology. More...;  ; virtual void",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1linear_1_1_simple_tesselated_hexa_topological_mapping.html:3485,adapt,adapt,3485,api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1linear_1_1_simple_tesselated_hexa_topological_mapping.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1linear_1_1_simple_tesselated_hexa_topological_mapping.html,1,['adapt'],['adapt']
Energy Efficiency,"ponentMouseInteraction * > instanceComponents;  ; BodyPicked lastPicked;  ; bool useCollisions;  ; type::fixed_array< Operation *, NONE > operations;  ; type::vector< CallBackPicker * > callbacks;  ; CallBackRender * renderCallback;  ; PickingMethod pickingMethod;  ; double m_defaultLength;  Default length of the ray. Set by constructor. More...;  . Public Member Functions;  PickHandler (double defaultLength=1000000);  ; virtual ~PickHandler ();  ; void activateRay (int width, int height, core::objectmodel::BaseNode *root);  ; void deactivateRay ();  ; virtual void allocateSelectionBuffer (int width, int height);  ; virtual void destroySelectionBuffer ();  ; void setPickingMethod (PickingMethod method);  ; bool useSelectionBufferMethod () const;  ; void updateRay (const sofa::type::Vec3 &position, const sofa::type::Vec3 &orientation);  ; void handleMouseEvent (MOUSE_STATUS status, MOUSE_BUTTON button);  ; void init (core::objectmodel::BaseNode *root);  ; void reset ();  ; void unload ();  ; void setColourRenderCallback (CallBackRender *colourRender);  ; void updateMouse2D (MousePosition mouse);  ; Operation * getOperation (MOUSE_BUTTON button);  ; Operation * changeOperation (sofa::component::setting::MouseButtonSetting *setting);  ; Operation * changeOperation (MOUSE_BUTTON button, const std::string &op);  ; void addCallBack (CallBackPicker *c);  ; type::vector< CallBackPicker * > getCallBackPicker ();  ; void clearCallBacks ();  ; virtual BodyPicked findCollisionUsingColourCoding (const type::Vec3 &origin, const type::Vec3 &direction);  ; ComponentMouseInteraction * getInteraction ();  ; BodyPicked * getLastPicked ();  . Static Public Member Functions; static BodyPicked findCollisionUsingBruteForce (const type::Vec3 &origin, const type::Vec3 &direction, double maxLength, core::objectmodel::BaseNode *root);  . Protected Member Functions; virtual BodyPicked findCollision ();  ; BodyPicked findCollisionUsingPipeline ();  ; BodyPicked findCollisionUsingBruteForce ();  ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1common_1_1_pick_handler.html:1323,allocate,allocateSelectionBuffer,1323,api/master/sofa/html/classsofa_1_1gui_1_1common_1_1_pick_handler.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1common_1_1_pick_handler.html,1,['allocate'],['allocateSelectionBuffer']
Energy Efficiency,"r::PairInteractionForceField< TDataTypes >::getPathObject2 ; (; ); const. inline . Retrieve the Object2 path. . ◆ getPotentialEnergy() [1/2]. template<class DataTypes > . SReal sofa::core::behavior::PairInteractionForceField< DataTypes >::getPotentialEnergy ; (; const MechanicalParams * ; mparams); const. overridevirtual . Get the potential energy associated to this ForceField.; Used to estimate the total energy of the system by some post-stabilization techniques.; This method retrieves the x vector from the MechanicalState and call the internal getPotentialEnergy(const VecCoord&,const VecCoord&) method implemented by the component. ; Implements sofa::core::behavior::BaseForceField. ◆ getPotentialEnergy() [2/2]. template<class TDataTypes > . virtual SReal sofa::core::behavior::PairInteractionForceField< TDataTypes >::getPotentialEnergy ; (; const MechanicalParams * ; mparams, . const DataVecCoord & ; x1, . const DataVecCoord & ; x2 . ); const. pure virtual . Get the potential energy associated to this ForceField.; Used to estimate the total energy of the system by some post-stabilization techniques.; This method must be implemented by the component, and is usually called by the generic ForceField::getPotentialEnergy() method. ; Implemented in sofa::component::solidmechanics::spring::RepulsiveSpringForceField< DataTypes >, sofa::component::collision::response::contact::PenalityContactForceField< DataTypes >, sofa::component::solidmechanics::spring::SpringForceField< DataTypes >, sofa::component::solidmechanics::spring::VectorSpringForceField< DataTypes >, sofa::component::solidmechanics::spring::PolynomialSpringsForceField< DataTypes >, sofa::component::solidmechanics::spring::JointSpringForceField< DataTypes >, sofa::component::solidmechanics::spring::GearSpringForceField< DataTypes >, and sofa::component::solidmechanics::spring::FrameSpringForceField< DataTypes >. ◆ setPathObject1(). template<class TDataTypes > . void sofa::core::behavior::PairInteractionForceField",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_pair_interaction_force_field.html:27151,energy,energy,27151,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_pair_interaction_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_pair_interaction_force_field.html,1,['energy'],['energy']
Energy Efficiency,"rceField< DataTypes >. ◆ addForce(). virtual void sofa::core::behavior::BaseForceField::addForce ; (; const MechanicalParams * ; mparams, . MultiVecDerivId ; fId . ). pure virtual . Given the current position and velocity states, update the current force vector by computing and adding the forces associated with this ForceField. ; If the ForceField can be represented as a matrix, this method computes . where K is the stiffness matrix (associated with forces which derive from a potential), and B is the damping matrix (associated with viscous forces). Very often, at least one of these matrices is null.; Parameters. mparams; sofa::core::mechanicalparams::bFactor(mparams) is the coefficient for damping contributions (i.e. first derivatives term in the ODE); mparams->kFactor() is the coefficient for stiffness contributions (i.e. DOFs term in the ODE); mparams->readX() is the input vector of position; mparams->readV() is the input vector of velocity; mparams->readF() is the input vector of force; if mparams->energy() is true, the method computes and internally stores the potential energy, which will be subsequently returned by method getPotentialEnergy() . fIdthe output vector of forces . Implemented in sofa::core::behavior::PairInteractionForceField< TDataTypes >, sofa::core::behavior::PairInteractionForceField< DataTypes >, sofa::core::behavior::MixedInteractionForceField< TDataTypes1, TDataTypes2 >, sofa::core::behavior::ForceField< TDataTypes >, sofa::core::behavior::ForceField< _DataTypes >, sofa::core::behavior::ForceField< T >, and sofa::core::behavior::ForceField< DataTypes >. ◆ addKToMatrix(). virtual void sofa::core::behavior::BaseForceField::addKToMatrix ; (; const MechanicalParams * ; mparams, . const sofa::core::behavior::MultiMatrixAccessor * ; matrix . ). pure virtual . Compute the system matrix corresponding to . ; Parameters. mparamsmparams->kFactor() is the coefficient for stiffness contributions (i.e. DOFs term in the ODE) ; matrixthe matrix to add the re",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_force_field.html:21206,energy,energy,21206,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_force_field.html,2,['energy'],['energy']
Energy Efficiency,"rceField< DataTypes1, DataTypes2 >::addForce ; (; const MechanicalParams * ; mparams, . MultiVecDerivId ; fId . ). overridevirtual . Given the current position and velocity states, update the current force vector by computing and adding the forces associated with this ForceField.; If the ForceField can be represented as a matrix, this method computes $ f += B v + K x $; This method retrieves the force, x and v vector from the two MechanicalState and call the internal addForce(VecDeriv&,VecDeriv&,const VecCoord&,const VecCoord&,const VecDeriv&,const VecDeriv&) method implemented by the component. ; Implements sofa::core::behavior::BaseForceField. ◆ getPotentialEnergy() [1/2]. template<class DataTypes1 , class DataTypes2 > . SReal sofa::core::behavior::MixedInteractionForceField< DataTypes1, DataTypes2 >::getPotentialEnergy ; (; const MechanicalParams * ; mparams); const. overridevirtual . Get the potential energy associated to this ForceField.; Used to estimate the total energy of the system by some post-stabilization techniques.; This method retrieves the x vector from the MechanicalState and call the internal getPotentialEnergy(const VecCoord&,const VecCoord&) method implemented by the component. ; Implements sofa::core::behavior::BaseForceField. ◆ getPotentialEnergy() [2/2]. template<class TDataTypes1 , class TDataTypes2 > . virtual SReal sofa::core::behavior::MixedInteractionForceField< TDataTypes1, TDataTypes2 >::getPotentialEnergy ; (; const MechanicalParams * ; mparams, . const DataVecCoord1 & ; x1, . const DataVecCoord2 & ; x2 . ); const. pure virtual . Get the potential energy associated to this ForceField.; Used to estimate the total energy of the system by some post-stabilization techniques.; This method must be implemented by the component, and is usually called by the generic MixedInteractionForceField::getPotentialEnergy() method. ; Implemented in sofa::component::mechanicalload::InteractionEllipsoidForceField< TDataTypes1, TDataTypes2 >. ◆ shortName().",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_mixed_interaction_force_field.html:23798,energy,energy,23798,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_mixed_interaction_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_mixed_interaction_force_field.html,1,['energy'],['energy']
Energy Efficiency,"rd CoordPosition values.Definition: MechanicalState.h:64; : position values. ; Deriv ; Deriv; : derivative values (velocity, forces, displacements). ; VecReal ; VecReal; : container of scalar values with the same API as sofa::type::vector. ; VecCoord ; sofa::core::behavior::MechanicalState::VecCoordDataTypes::VecCoord VecCoordContainer of Coord values with the same API as sofa::type::vector.Definition: MechanicalState.h:70; : container of Coord values with the same API as sofa::type::vector. ; VecDeriv ; sofa::core::behavior::MechanicalState::VecDerivDataTypes::VecDeriv VecDerivContainer of Deriv values with the same API as sofa::type::vector.Definition: MechanicalState.h:72; : container of Deriv values with the same API as sofa::type::vector. ; MatrixDeriv ; sofa::core::behavior::MechanicalState::MatrixDerivDataTypes::MatrixDeriv MatrixDerivSparse matrix containing derivative values (constraints)Definition: MechanicalState.h:74; : vector of constraints. Other vectors can be allocated to store other temporary values. Vectors can be assigned efficiently by just swapping pointers.; In addition to state vectors, the current constraint system matrix is also stored, containing the coefficient of each constraint defined over the DOFs in this body. . Public Member Functions;  SOFA_CLASS2 (SOFA_TEMPLATE(MechanicalState, TDataTypes), BaseMechanicalState, SOFA_TEMPLATE(State, TDataTypes));  ; Size getCoordDimension () const override;  ; Size getDerivDimension () const override;  ; virtual void getIndicesInSpace (sofa::type::vector< Index > &, Real, Real, Real, Real, Real, Real) const =0;  Get the indices of the particles located in the given bounding box. More...;  ; void copyToBuffer (SReal *dst, ConstVecId src, unsigned n) const override;  ; void copyFromBuffer (VecId dst, const SReal *src, unsigned n) override;  ; void addFromBuffer (VecId dst, const SReal *src, unsigned n) override;  ;  Public Member Functions inherited from sofa::core::behavior::BaseMechanicalState;  SOF",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_mechanical_state.html:2163,allocate,allocated,2163,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_mechanical_state.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_mechanical_state.html,1,['allocate'],['allocated']
Energy Efficiency,"rementalPotentialEnergy. SReal sofa::component::odesolver::backward::VariationalSymplecticSolver::m_incrementalPotentialEnergy. protected . ◆ pID. sofa::core::MultiVecDerivId sofa::component::odesolver::backward::VariationalSymplecticSolver::pID. protected . Constructor details. ◆ VariationalSymplecticSolver(). sofa::component::odesolver::backward::VariationalSymplecticSolver::VariationalSymplecticSolver ; (; ). Function details. ◆ getIntegrationFactor(). SReal sofa::component::odesolver::backward::VariationalSymplecticSolver::getIntegrationFactor ; (; int ; , . int ;  . ); const. inlineoverridevirtual . Given an input derivative order (0 for position, 1 for velocity, 2 for acceleration), how much will it affect the output derivative of the given order.; This method is used to compute the constraint corrections and adapt the resolution if using baumgart type scheme For example, a backward-Euler dynamic implicit integrator would use: Input: x_t v_t a_{t+dt} x_{t+dt} 1 dt dt^2 v_{t+dt} 0 1 dt; If the linear system is expressed on s = a_{t+dt} dt, then the final factors are: Input: x_t v_t a_t s x_{t+dt} 1 dt 0 dt v_{t+dt} 0 1 0 1 a_{t+dt} 0 0 0 1/dt The last column is returned by the getSolutionIntegrationFactor method.; FF: What is the meaning of the parameters ? ; Reimplemented from sofa::core::behavior::OdeSolver. ◆ getPositionIntegrationFactor(). SReal sofa::component::odesolver::backward::VariationalSymplecticSolver::getPositionIntegrationFactor ; (; ); const. inlineoverridevirtual . Given a displacement as computed by the linear system inversion, how much will it affect the position; This method is used to compute the compliance for contact corrections For Euler methods, it is typically dt². ; Reimplemented from sofa::core::behavior::OdeSolver. ◆ getSolutionIntegrationFactor(). SReal sofa::component::odesolver::backward::VariationalSymplecticSolver::getSolutionIntegrationFactor ; (; int ; ); const. inlineoverridevirtual . Given a solution of the linear system, h",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1backward_1_1_variational_symplectic_solver.html:21549,adapt,adapt,21549,api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1backward_1_1_variational_symplectic_solver.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1backward_1_1_variational_symplectic_solver.html,1,['adapt'],['adapt']
Energy Efficiency,"rgy (const core::MechanicalParams *, const DataVecCoord &x) const;  ; void draw (const core::visual::VisualParams *vparams);  Render internal data of this object, for debugging purposes. More...;  ; Read and write access functions in mass information; void setMass (const MassType &d_vertexMass);  ; const MassType & getVertexMass () const;  ; const MassType & getMass () const;  ; SReal getTotalMass () const;  ; void setTotalMass (SReal m);  ; void setFileMass (const std::string &file);  }@ More...;  ; std::string getFileMass () const;  ; void loadRigidMass (const std::string &filename);  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; void initDefaultImpl ();  ; Check and standard initialization functions from mass information; virtual bool checkVertexMass ();  ; virtual void initFromVertexMass ();  ; virtual bool checkTotalMass ();  ; virtual void initFromTotalMass ();  ;  Public Member Functions inherited from sofa::core::behavior::Mass< DataTypes >;  SOFA_CLASS2 (SOFA_TEMPLATE(Mass, DataTypes), SOFA_TEMPLATE(ForceField, DataTypes), BaseMass);  ; void initGnuplot (const std::string path) override;  initialization to export kinetic and potential energy to gnuplot files format More...;  ; void exportGnuplot (const MechanicalParams *mparams, SReal time) override;  export kinetic and potential energy state at ""time"" to a gnuplot file More...;  ; void addGravityToV (const MechanicalParams *mparams, MultiVecDerivId) override;  perform v += dt*g operation. Used if mass wants to added G separately from the other forces to v. More...;  ; SReal getElementMass (sofa::Index) const override;  recover the mass of an element More...;  ; void getElementMass (sofa::Index index, linearalgebra::BaseMatrix *m) const override;  Get the matrix relative to the DOF at index. More...;  ; bool insertInNode (objectmodel::BaseNode *node) override;  ; bool removeInNode (objectmodel::BaseNode *node) override;  ; vo",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_uniform_mass.html:9226,energy,energy,9226,api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_uniform_mass.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_uniform_mass.html,1,['energy'],['energy']
Energy Efficiency,"riangularBendingSprings< DataTypes >::d_ks. uniform stiffness for the all springs . ◆ d_showSprings. template<class DataTypes > . Data<bool> sofa::component::solidmechanics::spring::TriangularBendingSprings< DataTypes >::d_showSprings. option to draw springs . ◆ edgeInfo. template<class DataTypes > . sofa::core::objectmodel::RenamedData<type::vector<EdgeInformation> > sofa::component::solidmechanics::spring::TriangularBendingSprings< DataTypes >::edgeInfo. ◆ l_topology. template<class DataTypes > . SingleLink<TriangularBendingSprings<DataTypes>, sofa::core::topology::BaseMeshTopology, BaseLink::FLAG_STOREPATH | BaseLink::FLAG_STRONGLINK> sofa::component::solidmechanics::spring::TriangularBendingSprings< DataTypes >::l_topology. Link to be set to the topology container in the component graph. . ◆ m_potentialEnergy. template<class DataTypes > . SReal sofa::component::solidmechanics::spring::TriangularBendingSprings< DataTypes >::m_potentialEnergy. protected . potential energy accumulate in method ; See alsoaddForce . ◆ m_topology. template<class DataTypes > . sofa::core::topology::BaseMeshTopology* sofa::component::solidmechanics::spring::TriangularBendingSprings< DataTypes >::m_topology. protected . Pointer to the linked topology used to create this spring forcefield. . Constructor details. ◆ TriangularBendingSprings(). template<class DataTypes > . sofa::component::solidmechanics::spring::TriangularBendingSprings< DataTypes >::TriangularBendingSprings. protected . ◆ ~TriangularBendingSprings(). template<class DataTypes > . sofa::component::solidmechanics::spring::TriangularBendingSprings< DataTypes >::~TriangularBendingSprings. protectedvirtual . Function details. ◆ addDForce(). template<class DataTypes > . void sofa::component::solidmechanics::spring::TriangularBendingSprings< DataTypes >::addDForce ; (; const core::MechanicalParams * ; mparams, . DataVecDeriv & ; df, . const DataVecDeriv & ; dx . ). overridevirtual . Internal addDForce Overloaded function, usually c",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_triangular_bending_springs.html:22718,energy,energy,22718,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_triangular_bending_springs.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_triangular_bending_springs.html,1,['energy'],['energy']
Energy Efficiency,"riangularBendingSprings< _DataTypes >::EdgeSpring::is_initialized. ◆ lambda. template<class _DataTypes > . Real sofa::component::solidmechanics::spring::FastTriangularBendingSprings< _DataTypes >::EdgeSpring::lambda. bending stiffness . ◆ vid. template<class _DataTypes > . sofa::type::Vec<4,unsigned> sofa::component::solidmechanics::spring::FastTriangularBendingSprings< _DataTypes >::EdgeSpring::vid. vertex indices, in circular order . Function details. ◆ addDForce(). template<class _DataTypes > . void sofa::component::solidmechanics::spring::FastTriangularBendingSprings< _DataTypes >::EdgeSpring::addDForce ; (; VecDeriv & ; df, . const VecDeriv & ; dp, . Real ; kfactor . ); const. inline . ◆ addForce(). template<class _DataTypes > . FastTriangularBendingSprings< _DataTypes >::Real sofa::component::solidmechanics::spring::FastTriangularBendingSprings< _DataTypes >::EdgeSpring::addForce ; (; VecDeriv & ; f, . const VecCoord & ; p, . const VecDeriv & ;  . ); const. Accumulates force and return potential energy. . ◆ addStiffness(). template<class _DataTypes > . void sofa::component::solidmechanics::spring::FastTriangularBendingSprings< _DataTypes >::EdgeSpring::addStiffness ; (; sofa::linearalgebra::BaseMatrix * ; bm, . unsigned int ; offset, . SReal ; scale, . core::behavior::ForceField< _DataTypes > * ; ff . ); const. Stiffness matrix assembly. . ◆ getStiffness(). template<class _DataTypes > . void sofa::component::solidmechanics::spring::FastTriangularBendingSprings< _DataTypes >::EdgeSpring::getStiffness ; (; StiffnessMatrix & ; K); const. Compliant stiffness matrix assembly. . ◆ replaceIndex(). template<class _DataTypes > . void sofa::component::solidmechanics::spring::FastTriangularBendingSprings< _DataTypes >::EdgeSpring::replaceIndex ; (; Index ; oldIndex, . Index ; newIndex . ). replace a vertex index with another one . ◆ replaceIndices(). template<class _DataTypes > . void sofa::component::solidmechanics::spring::FastTriangularBendingSprings< _DataTypes >::Edg",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_fast_triangular_bending_springs_1_1_edge_spring.html:3361,energy,energy,3361,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_fast_triangular_bending_springs_1_1_edge_spring.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_fast_triangular_bending_springs_1_1_edge_spring.html,1,['energy'],['energy']
Energy Efficiency,"ring &name, const QColor &color);  set the index-th curve (index must be < _numberOfCurves) More...;  ; void updateYAxisBounds (SReal value);  Method to update Y axis scale. More...;  ; void flushSeries ();  flush data from series not anymore displayed More...;  . Attribute details. ◆ m_axisX. QValueAxis* sofa::gui::qt::QGraphStatWidget::m_axisX. protected . x axis pointer . ◆ m_axisY. QValueAxis* sofa::gui::qt::QGraphStatWidget::m_axisY. protected . y axis pointer . ◆ m_bufferSize. int sofa::gui::qt::QGraphStatWidget::m_bufferSize. protected . size of the buffers to stored . ◆ m_chart. QChart* sofa::gui::qt::QGraphStatWidget::m_chart. protected . Pointer to the chart Data. . ◆ m_cptStep. int sofa::gui::qt::QGraphStatWidget::m_cptStep. protected . step counter monitored . ◆ m_curves. std::vector< QLineSeries *> sofa::gui::qt::QGraphStatWidget::m_curves. protected . vector of series to be plotted . ◆ m_lastTime. SReal sofa::gui::qt::QGraphStatWidget::m_lastTime. protected . last timestep monitored . ◆ m_node. simulation::Node* sofa::gui::qt::QGraphStatWidget::m_node. protected . pointer to the node monitored . ◆ m_yMax. SReal sofa::gui::qt::QGraphStatWidget::m_yMax. protected . max y axis value stored . ◆ m_yMin. SReal sofa::gui::qt::QGraphStatWidget::m_yMin. protected . min y axis value stored . Constructor details. ◆ QGraphStatWidget(). sofa::gui::qt::QGraphStatWidget::QGraphStatWidget ; (; QWidget * ; parent, . simulation::Node * ; node, . const QString & ; title, . unsigned ; numberOfCurves, . int ; bufferSize . ). ◆ ~QGraphStatWidget(). sofa::gui::qt::QGraphStatWidget::~QGraphStatWidget ; (; ). virtual . Function details. ◆ flushSeries(). void sofa::gui::qt::QGraphStatWidget::flushSeries ; (; ). protected . flush data from series not anymore displayed . ◆ setCurve(). void sofa::gui::qt::QGraphStatWidget::setCurve ; (; unsigned ; index, . const QString & ; name, . const QColor & ; color . ). protected . set the index-th curve (index must be < _numberOfCurves) . ◆",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_graph_stat_widget.html:2529,monitor,monitored,2529,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_graph_stat_widget.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_graph_stat_widget.html,1,['monitor'],['monitored']
Energy Efficiency,"rix (Matrix *globalMatrix, const unsigned int offsetRow, const unsigned int offsetCol, const Mat &localMatrix);  . Attribute details. ◆ d_cubesDamping. template<class DataTypes > . Data< Real > sofa::component::solidmechanics::spring::MeshSpringForceField< DataTypes >::d_cubesDamping. protected . Damping for the Cubes. . ◆ d_cubesStiffness. template<class DataTypes > . Data< Real > sofa::component::solidmechanics::spring::MeshSpringForceField< DataTypes >::d_cubesStiffness. protected . Stiffness for the Cubes. . ◆ d_drawMaxElongationRange. template<class DataTypes > . Data< Real > sofa::component::solidmechanics::spring::MeshSpringForceField< DataTypes >::d_drawMaxElongationRange. protected . Max range of elongation (red eongation - blue neutral - green compression) . ◆ d_drawMinElongationRange. template<class DataTypes > . Data< Real > sofa::component::solidmechanics::spring::MeshSpringForceField< DataTypes >::d_drawMinElongationRange. protected . Min range of elongation (red eongation - blue neutral - green compression) . ◆ d_drawSpringSize. template<class DataTypes > . Data< Real > sofa::component::solidmechanics::spring::MeshSpringForceField< DataTypes >::d_drawSpringSize. protected . Size of drawed lines. . ◆ d_linesDamping. template<class DataTypes > . Data< Real > sofa::component::solidmechanics::spring::MeshSpringForceField< DataTypes >::d_linesDamping. protected . Damping for the Lines. . ◆ d_linesStiffness. template<class DataTypes > . Data< Real > sofa::component::solidmechanics::spring::MeshSpringForceField< DataTypes >::d_linesStiffness. protected . Stiffness for the Lines. . ◆ d_localRange. template<class DataTypes > . Data< type::Vec<2, sofa::Index> > sofa::component::solidmechanics::spring::MeshSpringForceField< DataTypes >::d_localRange. protected . optional range of local DOF indices. Any computation involving only indices outside of this range are discarded (useful for parallelization using mesh partitioning) . ◆ d_noCompression. template<class Dat",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_mesh_spring_force_field.html:29186,green,green,29186,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_mesh_spring_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_mesh_spring_force_field.html,1,['green'],['green']
Energy Efficiency,"rom sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  . Protected Attributes; SReal m_potentialEnergy;  potential energy accumulate in method More...;  ; sofa::core::topology::BaseMeshTopology * m_topology;  Pointer to the linked topology used to create this spring forcefield. More...;  ;  Protected Attributes inherited from sofa::core::behavior::StateAccessor; MultiLink< StateAccessor, BaseMechanicalState, BaseLink::FLAG_DUPLICATE > l_mechanicalStates;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObject; SingleLink< BaseObject, BaseContext, BaseLink::FLAG_DOUBLELINK > l_context;  ; LinkSlaves l_slaves;  ; SingleLink< BaseObject, BaseObject, BaseLink::FLAG_DOUBLELINK > l_master;  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-ma",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_triangular_bending_springs.html:3286,energy,energy,3286,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_triangular_bending_springs.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_triangular_bending_springs.html,1,['energy'],['energy']
Energy Efficiency,"roperties={})=0;  ; virtual void v_clear (core::MultiVecId v)=0;  v=0 More...;  ; virtual void v_eq (core::MultiVecId v, core::ConstMultiVecId a)=0;  v=a More...;  ; virtual void v_eq (core::MultiVecId v, core::ConstMultiVecId a, SReal f)=0;  v=f*a More...;  ; virtual void v_peq (core::MultiVecId v, core::ConstMultiVecId a, SReal f=1.0)=0;  v+=f*a More...;  ; virtual void v_teq (core::MultiVecId v, SReal f)=0;  v*=f More...;  ; virtual void v_op (core::MultiVecId v, core::ConstMultiVecId a, core::ConstMultiVecId b, SReal f=1.0)=0;  v=a+b*f More...;  ; virtual void v_multiop (const core::behavior::BaseMechanicalState::VMultiOp &o)=0;  ; virtual void v_dot (core::ConstMultiVecId a, core::ConstMultiVecId b)=0;  a dot b ( get result using finish ) More...;  ; virtual void v_norm (core::ConstMultiVecId a, unsigned l)=0;  Compute the norm of a vector ( get result using finish ). The type of norm is set by parameter l. Use 0 for the infinite norm. Note that the 2-norm is more efficiently computed using the square root of the dot product. More...;  ; virtual void v_threshold (core::MultiVecId a, SReal threshold)=0;  nullify the values below the given threshold More...;  ; virtual SReal finish ()=0;  ; virtual void print (core::ConstMultiVecId v, std::ostream &out, std::string prefix="""", std::string suffix="""")=0;  ; virtual size_t v_size (core::MultiVecId v)=0;  . Attribute details. ◆ ctx. core::objectmodel::BaseContext* sofa::core::behavior::BaseVectorOperations::ctx. protected . ◆ params. const core::ExecParams* sofa::core::behavior::BaseVectorOperations::params. protected . ◆ result. SReal sofa::core::behavior::BaseVectorOperations::result. protected . Constructor details. ◆ BaseVectorOperations(). sofa::core::behavior::BaseVectorOperations::BaseVectorOperations ; (; const core::ExecParams * ; params, . core::objectmodel::BaseContext * ; ctx . ). inline . ◆ ~BaseVectorOperations(). virtual sofa::core::behavior::BaseVectorOperations::~BaseVectorOperations ; (; ). inlinevir",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_vector_operations.html:2637,efficient,efficiently,2637,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_vector_operations.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_vector_operations.html,1,['efficient'],['efficiently']
Energy Efficiency,"rotected . ◆ pointSize. Data<GLfloat> sofa::gl::component::rendering3d::OglModel::pointSize. protected . Point size (set if != 1, only for points rendering) . ◆ pointSmooth. Data<bool> sofa::gl::component::rendering3d::OglModel::pointSmooth. protected . Enable smooth point rendering. . ◆ premultipliedAlpha. Data<bool> sofa::gl::component::rendering3d::OglModel::premultipliedAlpha. protected . is alpha premultiplied ? . ◆ primitiveType. Data<sofa::helper::OptionsGroup> sofa::gl::component::rendering3d::OglModel::primitiveType. protected . Select types of primitives to send (necessary for some shader types such as geometry or tessellation) . ◆ quadsRevision. int sofa::gl::component::rendering3d::OglModel::quadsRevision. protected . ◆ sfactor. GLenum sofa::gl::component::rendering3d::OglModel::sfactor. protected . ◆ sourceFactor. Data<sofa::helper::OptionsGroup> sofa::gl::component::rendering3d::OglModel::sourceFactor. protected . if alpha blending is enabled this specifies how the red, green, blue, and alpha source blending factors are computed . ◆ tex. sofa::gl::Texture* sofa::gl::component::rendering3d::OglModel::tex. protected . ◆ textures. std::vector<sofa::gl::Texture*> sofa::gl::component::rendering3d::OglModel::textures. protected . ◆ trianglesRevision. int sofa::gl::component::rendering3d::OglModel::trianglesRevision. protected . ◆ useEdges. bool sofa::gl::component::rendering3d::OglModel::useEdges. protected . ◆ useQuads. bool sofa::gl::component::rendering3d::OglModel::useQuads. protected . ◆ useTriangles. bool sofa::gl::component::rendering3d::OglModel::useTriangles. protected . ◆ vbo. GLuint sofa::gl::component::rendering3d::OglModel::vbo. protected . ◆ VBOGenDone. bool sofa::gl::component::rendering3d::OglModel::VBOGenDone. protected . ◆ verticesTmpBuffer. std::vector<sofa::type::Vec3f> sofa::gl::component::rendering3d::OglModel::verticesTmpBuffer. protected . These two buffers are used to convert the data field to float type before being sent to opengl . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_ogl_model.html:34987,green,green,34987,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_ogl_model.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_ogl_model.html,1,['green'],['green']
Energy Efficiency,"rows necessary to build mechanical matrices and vectors. More...;  ; virtual void copyToBaseVector (linearalgebra::BaseVector *dest, ConstVecId src, unsigned int &offset)=0;  Copy data to a global BaseVector from the state stored in a local vector. More...;  ; virtual void copyFromBaseVector (VecId dest, const linearalgebra::BaseVector *src, unsigned int &offset)=0;  Copy data to a local vector from the state stored in a global BaseVector. More...;  ; virtual void copyToBaseMatrix (linearalgebra::BaseMatrix *dest, ConstMatrixDerivId src, unsigned int &offset)=0;  Copy data to a global BaseMatrix from the state stored in a local vector. More...;  ; virtual void copyToBuffer (SReal *dst, ConstVecId src, unsigned int n) const =0;  Copy data to an external, user-allocated buffer. More...;  ; virtual void copyFromBuffer (VecId dst, const SReal *src, unsigned int n)=0;  Copy data from an external, user-allocated buffer. More...;  ; virtual void addFromBuffer (VecId dst, const SReal *src, unsigned int n)=0;  Add data from an external, user-allocated buffer. More...;  ; virtual void addToBaseVector (linearalgebra::BaseVector *dest, ConstVecId src, unsigned int &offset)=0;  Add data to a global BaseVector from the state stored in a local vector. More...;  ; virtual void addFromBaseVectorSameSize (VecId dest, const linearalgebra::BaseVector *src, unsigned int &offset)=0;  Perform dest[i][j] += src[offset + i][j] 0<= i < src_entries 0<= j < 3 (for 3D objects) 0 <= j < 2 (for 2D objects) More...;  ; virtual void addFromBaseVectorDifferentSize (VecId dest, const linearalgebra::BaseVector *src, unsigned int &offset)=0;  Perform dest[ offset + i ][j] += src[i][j] 0<= i < src_entries 0<= j < 3 (for 3D objects) 0 <= j < 2 (for 2D objects) More...;  ; Data output; virtual void printDOF (ConstVecId v, std::ostream &out=std::cerr, int firstIndex=0, int range=-1) const =0;  ; virtual unsigned printDOFWithElapsedTime (ConstVecId, unsigned=0, unsigned=0, std::ostream &=std::cerr);  ; virtu",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_mechanical_state.html:6142,allocate,allocated,6142,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_mechanical_state.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_mechanical_state.html,1,['allocate'],['allocated']
Energy Efficiency,"rows necessary to build mechanical matrices and vectors. More...;  ; virtual void copyToBaseVector (linearalgebra::BaseVector *dest, ConstVecId src, unsigned int &offset)=0;  Copy data to a global BaseVector from the state stored in a local vector. More...;  ; virtual void copyFromBaseVector (VecId dest, const linearalgebra::BaseVector *src, unsigned int &offset)=0;  Copy data to a local vector from the state stored in a global BaseVector. More...;  ; virtual void copyToBaseMatrix (linearalgebra::BaseMatrix *dest, ConstMatrixDerivId src, unsigned int &offset)=0;  Copy data to a global BaseMatrix from the state stored in a local vector. More...;  ; virtual void copyToBuffer (SReal *dst, ConstVecId src, unsigned int n) const =0;  Copy data to an external, user-allocated buffer. More...;  ; virtual void copyFromBuffer (VecId dst, const SReal *src, unsigned int n)=0;  Copy data from an external, user-allocated buffer. More...;  ; virtual void addFromBuffer (VecId dst, const SReal *src, unsigned int n)=0;  Add data from an external, user-allocated buffer. More...;  ; virtual void addToBaseVector (linearalgebra::BaseVector *dest, ConstVecId src, unsigned int &offset)=0;  Add data to a global BaseVector from the state stored in a local vector. More...;  ; virtual void addFromBaseVectorSameSize (VecId dest, const linearalgebra::BaseVector *src, unsigned int &offset)=0;  Perform dest[i][j] += src[offset + i][j] 0<= i < src_entries 0<= j < 3 (for 3D objects) 0 <= j < 2 (for 2D objects) More...;  ; virtual void addFromBaseVectorDifferentSize (VecId dest, const linearalgebra::BaseVector *src, unsigned int &offset)=0;  Perform dest[ offset + i ][j] += src[i][j] 0<= i < src_entries 0<= j < 3 (for 3D objects) 0 <= j < 2 (for 2D objects) More...;  ; virtual void printDOF (ConstVecId v, std::ostream &out=std::cerr, int firstIndex=0, int range=-1) const =0;  ; virtual unsigned printDOFWithElapsedTime (ConstVecId, unsigned=0, unsigned=0, std::ostream &=std::cerr);  ; virtual void initG",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_mechanical_state.html:7335,allocate,allocated,7335,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_mechanical_state.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_mechanical_state.html,1,['allocate'],['allocated']
Energy Efficiency,"rs of collision models can be extended. For example, see MeshMinProximityIntersection which adds support for Point/Point, Line/Point, etc.; Supported by default:; Cube/Cube; Sphere/Sphere (rigid or vec3) MeshMinProximityIntersection adds support for:; Point/Point; Line/Point; Line/Line; Triangle/Point; Triangle/Line; Triangle/Triangle; Sphere/Point; RigidSphere/Point; Line/RigidSphere; Line/Sphere; Triangle/RigidSphere; Triangle/Sphere . Public Attributes; sofa::core::objectmodel::RenamedData< bool > useLineLine;  ; Data< bool > d_useLineLine;  Line-line collision detection enabled. More...;  ;  Public Attributes inherited from sofa::component::collision::detection::intersection::BaseProximityIntersection; sofa::core::objectmodel::RenamedData< SReal > alarmDistance;  ; sofa::core::objectmodel::RenamedData< SReal > contactDistance;  ; Data< SReal > d_alarmDistance;  Distance above which the intersection computations ignores the proximity pair. This distance can also be used in some broad phase algorithms to reduce the search area. More...;  ; Data< SReal > d_contactDistance;  Distance below which a contact is created. More...;  ;  Public Attributes inherited from sofa::component::collision::detection::intersection::DiscreteIntersection; core::collision::IntersectorMap intersectors;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1intersection_1_1_new_proximity_intersection.html:1668,reduce,reduce,1668,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1intersection_1_1_new_proximity_intersection.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1intersection_1_1_new_proximity_intersection.html,1,['reduce'],['reduce']
Energy Efficiency,"s TDataTypes1, class TDataTypes2>; class sofa::core::behavior::MixedInteractionForceField< TDataTypes1, TDataTypes2 >; Component computing forces between a pair of simulated body. ; This class define the abstract API common to interaction force fields between a pair of bodies using a given type of DOFs. . Public Member Functions;  SOFA_ABSTRACT_CLASS2 (SOFA_TEMPLATE2(MixedInteractionForceField, TDataTypes1, TDataTypes2), BaseInteractionForceField, SOFA_TEMPLATE2(PairStateAccessor, TDataTypes1, TDataTypes2));  ;  Public Member Functions inherited from sofa::core::behavior::BaseInteractionForceField;  SOFA_ABSTRACT_CLASS (BaseInteractionForceField, BaseForceField);  ; virtual BaseMechanicalState * getMechModel1 ();  ; virtual BaseMechanicalState * getMechModel2 ();  ; void addKToMatrix (const MechanicalParams *, const sofa::core::behavior::MultiMatrixAccessor *) override;  Compute the system matrix corresponding to . More...;  ; virtual void initGnuplot (const std::string path);  initialization to export potential energy to gnuplot files format More...;  ; virtual void exportGnuplot (SReal time);  export kinetic and potential energy state at ""time"" to a gnuplot file More...;  ; bool insertInNode (objectmodel::BaseNode *node) override;  ; bool removeInNode (objectmodel::BaseNode *node) override;  ;  Public Member Functions inherited from sofa::core::behavior::BaseForceField;  SOFA_ABSTRACT_CLASS (BaseForceField, StateAccessor);  ; virtual void addMBKdx (const MechanicalParams *mparams, MultiVecDerivId dfId);  Accumulate the contribution of M, B, and/or K matrices multiplied by the dx vector with the given coefficients. More...;  ; virtual void addBToMatrix (const MechanicalParams *mparams, const sofa::core::behavior::MultiMatrixAccessor *matrix);  Compute the system matrix corresponding to . More...;  ; virtual void addMBKToMatrix (const MechanicalParams *mparams, const sofa::core::behavior::MultiMatrixAccessor *matrix);  Compute the system matrix corresponding to . Mo",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_mixed_interaction_force_field.html:1669,energy,energy,1669,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_mixed_interaction_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_mixed_interaction_force_field.html,1,['energy'],['energy']
Energy Efficiency,"s TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::clearRowsCols ; (; Index ; imin, . Index ; imax . ). inlineoverridevirtual . Clears all the values in rows imin to imax-1 and columns imin to imax-1. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ coeffRef(). template<class TReal > . Real& sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::coeffRef ; (; Index ; i, . Index ; j . ). inline . Return a reference to the given entry in the compressed matrix.There can (must ?) be a value at this place already. Efficient only if the it is at the last place of the compressed matrix. . ◆ colSize(). template<class TReal > . Index sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::colSize ; (; void ; ); const. inlineoverridevirtual . number of columns ; Implements sofa::linearalgebra::BaseMatrix. ◆ compress(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::compress ; (; ). inlineoverridevirtual . Add the values from the scheduled list, and clears the schedule list. ; See alsoset(Index i, Index j, double v). ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ copy(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::copy ; (; const EigenBaseSparseMatrix< TReal > & ; m, . unsigned ; nbCol, . unsigned ; shift . ). inline . Clear and resize this to (m.rows,nbCol) and initialize it with the given matrix, columns shifted of the given value: this(i,j+shift) = m(i,j). @precond nbCol >= m.cols + shift . ◆ element(). template<class TReal > . SReal sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::element ; (; Index ; i, . Index ; j . ); const. inlineoverridevirtual . Read the value of the element at row i, column j (using 0-based indices) ; Implements sofa::linearalgebra::BaseMatrix. ◆ getColsIndex(). template<class TReal > . Index* sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::getColsIndex ; (; ). inline . ◆ getColsValue(). template<class TReal > . Real* sofa::linearalgebra",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html:22068,schedul,scheduled,22068,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html,2,['schedul'],"['schedule', 'scheduled']"
Energy Efficiency,"s homogeneous, except for the last range which may contain more elements. . ◆ parallelForEach(). template<class InputIt , class UnaryFunction > . UnaryFunction sofa::simulation::parallelForEach ; (; TaskScheduler & ; taskScheduler, . InputIt ; first, . InputIt ; last, . UnaryFunction ; f . ). Applies the given function object f to the result of dereferencing every iterator in the range [first, last), in parallel. . ◆ parallelForEachRange(). template<class InputIt , class UnaryFunction > . UnaryFunction sofa::simulation::parallelForEachRange ; (; TaskScheduler & ; taskScheduler, . InputIt ; first, . InputIt ; last, . UnaryFunction ; f . ). Applies in parallel the given function object f to a list of ranges generated from [first, last); The signature of the function f should be equivalent to the following: void fun(const Range<InputIt>& a); The signature does not need to have const &.; A task scheduler must be provided and correctly initialized. The number of generated ranges depends on the threads available in the task scheduler. . ◆ setSimulation(). void sofa::simulation::setSimulation ; (; Simulation * ; s). delete . Set the (unique) simulation which controls the scene. . Variable Documentation. ◆ DefaultAnimationLoopClass. int sofa::simulation::DefaultAnimationLoopClass. Initial value:= core::RegisterObject(""Simulation loop to use in scene without constraints nor contact.""); .add<DefaultAnimationLoop>(); .addDocumentationURL(std::string(sofa::SOFA_DOCUMENTATION_URL) + std::string(""components/animationloops/defaultanimationloop/"")); .addDescription(R""(; This loop triggers the following steps:; - build and solve all linear systems in the scene : collision and time integration to compute the new values of the dofs; - update the context (dt++); - update the mappings; - update the bounding box (volume covering all objects of the scene))""). ◆ DefaultTaskSchedulerRegistered. const bool sofa::simulation::DefaultTaskSchedulerRegistered. Initial value:= MainTaskSchedulerFact",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation.html:9539,schedul,scheduler,9539,api/master/sofa/html/namespacesofa_1_1simulation.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation.html,1,['schedul'],['scheduler']
Energy Efficiency,"s inherited from sofa::core::objectmodel::BaseObject; SingleLink< BaseObject, BaseContext, BaseLink::FLAG_DOUBLELINK > l_context;  ; LinkSlaves l_slaves;  ; SingleLink< BaseObject, BaseObject, BaseLink::FLAG_DOUBLELINK > l_master;  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  ;  Protected Attributes inherited from sofa::core::behavior::SingleStateAccessor< DataTypes >; SingleLink< SingleStateAccessor< DataTypes >, MechanicalState< DataTypes >, BaseLink::FLAG_STRONGLINK > mstate;  . Public Member Functions;  SOFA_CLASS2 (SOFA_TEMPLATE(Mass, DataTypes), SOFA_TEMPLATE(ForceField, DataTypes), BaseMass);  ; void initGnuplot (const std::string path) override;  initialization to export kinetic and potential energy to gnuplot files format More...;  ; void exportGnuplot (const MechanicalParams *mparams, SReal time) override;  export kinetic and potential energy state at ""time"" to a gnuplot file More...;  ; void addGravityToV (const MechanicalParams *mparams, MultiVecDerivId) override;  perform v += dt*g operation. Used if mass wants to added G separately from the other forces to v. More...;  ; virtual void addGravityToV (const MechanicalParams *, DataVecDeriv &);  ; SReal getElementMass (sofa::Index) const override;  recover the mass of an element More...;  ; void getElementMass (sofa::Index index, linearalgebra::BaseMatrix *m) const override;  Get the matrix relative to the DOF at index. More...;  ; bool insertInNode (objectmodel::BaseNode *node) override;  ; bool removeInNode (objectmodel::BaseNode *node) override;  ; Vector operations; $ f += factor M dx $; This method retrieves the force and dx",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_mass.html:2404,energy,energy,2404,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_mass.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_mass.html,1,['energy'],['energy']
Energy Efficiency,"s of the lines in the MatrixDeriv container. ; Reimplemented in sofa::component::statecontainer::MechanicalObject< DataTypes >, and sofa::component::statecontainer::MechanicalObject< T >. ◆ copyFromBaseVector(). virtual void sofa::core::behavior::BaseMechanicalState::copyFromBaseVector ; (; VecId ; dest, . const linearalgebra::BaseVector * ; src, . unsigned int & ; offset . ). pure virtual . Copy data to a local vector from the state stored in a global BaseVector. ; Parameters. offsetthe offset in the BaseVector where the scalar values will be used. It will be updated to the first scalar value after the ones used by this operation when this method returns . Implemented in sofa::component::statecontainer::MechanicalObject< DataTypes >, and sofa::component::statecontainer::MechanicalObject< T >. ◆ copyFromBuffer(). virtual void sofa::core::behavior::BaseMechanicalState::copyFromBuffer ; (; VecId ; dst, . const SReal * ; src, . unsigned int ; n . ). pure virtual . Copy data from an external, user-allocated buffer. ; Exact element count must be provided for consistency checks. . ◆ copyToBaseMatrix(). virtual void sofa::core::behavior::BaseMechanicalState::copyToBaseMatrix ; (; linearalgebra::BaseMatrix * ; dest, . ConstMatrixDerivId ; src, . unsigned int & ; offset . ). pure virtual . Copy data to a global BaseMatrix from the state stored in a local vector. ; Implemented in sofa::component::statecontainer::MechanicalObject< DataTypes >, and sofa::component::statecontainer::MechanicalObject< T >. ◆ copyToBaseVector(). virtual void sofa::core::behavior::BaseMechanicalState::copyToBaseVector ; (; linearalgebra::BaseVector * ; dest, . ConstVecId ; src, . unsigned int & ; offset . ). pure virtual . Copy data to a global BaseVector from the state stored in a local vector. ; Parameters. offsetthe offset in the BaseVector where the scalar values will be used. It will be updated to the first scalar value after the ones used by this operation when this method returns . Implemented",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_mechanical_state.html:30610,allocate,allocated,30610,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_mechanical_state.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_mechanical_state.html,1,['allocate'],['allocated']
Energy Efficiency,"s sofa::core::behavior::BaseForceField. ◆ getPotentialEnergy() [1/2]. template<class DataTypes1 , class DataTypes2 > . SReal sofa::core::behavior::MixedInteractionForceField< DataTypes1, DataTypes2 >::getPotentialEnergy ; (; const MechanicalParams * ; mparams); const. overridevirtual . Get the potential energy associated to this ForceField.; Used to estimate the total energy of the system by some post-stabilization techniques.; This method retrieves the x vector from the MechanicalState and call the internal getPotentialEnergy(const VecCoord&,const VecCoord&) method implemented by the component. ; Implements sofa::core::behavior::BaseForceField. ◆ getPotentialEnergy() [2/2]. template<class TDataTypes1 , class TDataTypes2 > . virtual SReal sofa::core::behavior::MixedInteractionForceField< TDataTypes1, TDataTypes2 >::getPotentialEnergy ; (; const MechanicalParams * ; mparams, . const DataVecCoord1 & ; x1, . const DataVecCoord2 & ; x2 . ); const. pure virtual . Get the potential energy associated to this ForceField.; Used to estimate the total energy of the system by some post-stabilization techniques.; This method must be implemented by the component, and is usually called by the generic MixedInteractionForceField::getPotentialEnergy() method. ; Implemented in sofa::component::mechanicalload::InteractionEllipsoidForceField< TDataTypes1, TDataTypes2 >. ◆ shortName(). template<class TDataTypes1 , class TDataTypes2 > . template<class T > . static std::string sofa::core::behavior::MixedInteractionForceField< TDataTypes1, TDataTypes2 >::shortName ; (; const T * ; ptr = nullptr, . objectmodel::BaseObjectDescription * ; arg = nullptr . ). inlinestatic . ◆ SOFA_ABSTRACT_CLASS2(). template<class TDataTypes1 , class TDataTypes2 > . sofa::core::behavior::MixedInteractionForceField< TDataTypes1, TDataTypes2 >::SOFA_ABSTRACT_CLASS2 ; (; SOFA_TEMPLATE2(MixedInteractionForceField< TDataTypes1, TDataTypes2 >, TDataTypes1, TDataTypes2) ; , . BaseInteractionForceField ; , . SOFA_TEMPLA",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_mixed_interaction_force_field.html:24418,energy,energy,24418,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_mixed_interaction_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_mixed_interaction_force_field.html,1,['energy'],['energy']
Energy Efficiency,"s used in precomputation are modified. More...;  ; void draw (const core::visual::VisualParams *) override;  Render internal data of this object, for debugging purposes. More...;  ; void addForce (const core::MechanicalParams *mparams, DataVecDeriv &dF, const DataVecCoord &dX, const DataVecDeriv &) override;  Forcefield functions for Matrix system. Adding force to global forcefield vector. More...;  ; void addDForce (const sofa::core::MechanicalParams *, DataVecDeriv &dF, const DataVecDeriv &dX) override;  Forcefield functions for Matrix system. Adding derivate force to global forcefield vector. More...;  ; void addKToMatrix (const core::MechanicalParams *mparams, const sofa::core::behavior::MultiMatrixAccessor *matrix) override;  Forcefield functions for Matrix system. Adding derivate force to global forcefield vector. (direct solver) More...;  ; void buildStiffnessMatrix (core::behavior::StiffnessMatrix *matrix) override;  ; void buildDampingMatrix (core::behavior::DampingMatrix *) override;  ; SReal getPotentialEnergy (const core::MechanicalParams *, const DataVecCoord &x) const override;  Return Potential energy of the mesh. More...;  ; sofa::type::vector< Real > getDiffusionCoefficient ();  Get diffusion coefficient coefficient. More...;  ; Real getTetraDiffusionCoefficient (Index i);  Get diffusion coefficient for tetra i. More...;  ; void setDiffusionCoefficient (const Real val);  Set diffusion coefficient with constant value. More...;  ; void setDiffusionCoefficient (const sofa::type::vector< Real > val);  Set diffusion coefficient with vector of value for each tetra. More...;  ;  Public Member Functions inherited from sofa::core::behavior::ForceField< DataTypes >;  SOFA_CLASS2 (SOFA_TEMPLATE(ForceField, DataTypes), BaseForceField, SOFA_TEMPLATE(SingleStateAccessor, DataTypes));  ; void addForce (const MechanicalParams *mparams, MultiVecDerivId fId) override;  ; void addDForce (const MechanicalParams *mparams, MultiVecDerivId dfId) override;  ; virtual void a",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1diffusion_1_1_tetrahedron_diffusion_f_e_m_force_field.html:5856,energy,energy,5856,api/master/sofa/html/classsofa_1_1component_1_1diffusion_1_1_tetrahedron_diffusion_f_e_m_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1diffusion_1_1_tetrahedron_diffusion_f_e_m_force_field.html,1,['energy'],['energy']
Energy Efficiency,"s() [8/8]. sofa::gl::Axis::Axis ; (; const double * ; mat, . SReal ; length = 1.0_sreal . ). ◆ ~Axis(). sofa::gl::Axis::~Axis ; (; ). Function details. ◆ clear(). static void sofa::gl::Axis::clear ; (; ). inlinestatic . ◆ draw() [1/16]. void sofa::gl::Axis::draw ; (; const double * ; mat, . const type::Vec3 & ; length, . const type::RGBAColor & ; colorX = type::RGBAColor::red(), . const type::RGBAColor & ; colorY = type::RGBAColor::green(), . const type::RGBAColor & ; colorZ = type::RGBAColor::red() . ). static . ◆ draw() [2/16]. void sofa::gl::Axis::draw ; (; const double * ; mat, . const type::Vec3 & ; length, . const type::Vec4f & ; colorX = type::Vec4f(1, 0, 0, 1), . const type::Vec4f & ; colorY = type::Vec4f(0, 1, 0, 1), . const type::Vec4f & ; colorZ = type::Vec4f(0, 0, 1, 1) . ). delete . ◆ draw() [3/16]. void sofa::gl::Axis::draw ; (; const double * ; mat, . SReal ; length = 1.0_sreal, . const type::RGBAColor & ; colorX = type::RGBAColor::red(), . const type::RGBAColor & ; colorY = type::RGBAColor::green(), . const type::RGBAColor & ; colorZ = type::RGBAColor::red() . ). static . ◆ draw() [4/16]. static void sofa::gl::Axis::draw ; (; const double * ; mat, . SReal ; length = 1.0_sreal, . const type::Vec4f & ; colorX = type::Vec4f(1, 0, 0, 1), . const type::Vec4f & ; colorY = type::Vec4f(0, 1, 0, 1), . const type::Vec4f & ; colorZ = type::Vec4f(0, 0, 1, 1) . ). staticdelete . ◆ draw() [5/16]. void sofa::gl::Axis::draw ; (; const type::RGBAColor & ; colorX = type::RGBAColor::red(), . const type::RGBAColor & ; colorY = type::RGBAColor::green(), . const type::RGBAColor & ; colorZ = type::RGBAColor::red() . ). ◆ draw() [6/16]. void sofa::gl::Axis::draw ; (; const type::Vec3 & ; center, . const double ; orient[4][4], . const type::Vec3 & ; length, . const type::RGBAColor & ; colorX = type::RGBAColor::red(), . const type::RGBAColor & ; colorY = type::RGBAColor::green(), . const type::RGBAColor & ; colorZ = type::RGBAColor::red() . ). static . ◆ draw() [7/16]. static ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1_axis.html:6654,green,green,6654,api/master/sofa/html/classsofa_1_1gl_1_1_axis.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1_axis.html,1,['green'],['green']
Energy Efficiency,"s, OutDataTypes > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Protected Attributes |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; List of all members . sofa::linearalgebra::EigenSparseMatrix< InDataTypes, OutDataTypes > Class Template Reference . #include <EigenSparseMatrix.h>. Inheritance diagram for sofa::linearalgebra::EigenSparseMatrix< InDataTypes, OutDataTypes >:. [legend]; Detailed Description; template<class InDataTypes, class OutDataTypes>; class sofa::linearalgebra::EigenSparseMatrix< InDataTypes, OutDataTypes >; Variant of EigenBaseSparseMatrix, capable of block-view access. The blocks correspond to matrix blocks of the size of the DataTypes Deriv.; There are two ways of filling the matrix:; Random block access is provided by method wBlock. Use compress() after the last insertion.; Block rows can be efficiently appended using methods beginBlockRow, createBlock, endBlockRow. Use compress() after the last insertion. The rows must be created in increasing index order. The two ways of filling the matrix can not be used at the same time. . Classes; struct  map_traits;  . Protected Attributes; BlockMatMap incomingBlocks;  To store block-view data before it is compressed in optimized format. More...;  ;  Protected Attributes inherited from sofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >; SimplicialCholesky cholesky;  used to factorize the matrix and solve systems using Cholesky method, for symmetric positive definite matrices only. More...;  . Public Member Functions;  EigenSparseMatrix (int nbRow=0, int nbCol=0);  ; void resizeBlocks (int nbBlockRows, int nbBlockCols);  Resize the matrix without preserving the data (the matrix is set to zero), with the size given in number of blocks. More...;  ; void addBlock (unsigned row, unsigned col, const Block &b);  Schedule the addition of the block at the ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html:1036,efficient,efficiently,1036,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html,1,['efficient'],['efficiently']
Energy Efficiency,"ses. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ getFirstObjectIndices(). template<class DataTypes > . const VecIndex& sofa::component::solidmechanics::spring::PolynomialSpringsForceField< DataTypes >::getFirstObjectIndices ; (; ); const. inline . ◆ getObject1(). template<class DataTypes > . core::behavior::MechanicalState<DataTypes>* sofa::component::solidmechanics::spring::PolynomialSpringsForceField< DataTypes >::getObject1 ; (; ). inline . ◆ getObject2(). template<class DataTypes > . core::behavior::MechanicalState<DataTypes>* sofa::component::solidmechanics::spring::PolynomialSpringsForceField< DataTypes >::getObject2 ; (; ). inline . ◆ getPotentialEnergy(). template<class DataTypes > . virtual SReal sofa::component::solidmechanics::spring::PolynomialSpringsForceField< DataTypes >::getPotentialEnergy ; (; const core::MechanicalParams * ; mparams, . const DataVecCoord & ; x1, . const DataVecCoord & ; x2 . ); const. inlineoverridevirtual . Get the potential energy associated to this ForceField.; Used to estimate the total energy of the system by some post-stabilization techniques.; This method must be implemented by the component, and is usually called by the generic ForceField::getPotentialEnergy() method. ; Implements sofa::core::behavior::PairInteractionForceField< DataTypes >. ◆ getSecondObjectIndices(). template<class DataTypes > . const VecIndex& sofa::component::solidmechanics::spring::PolynomialSpringsForceField< DataTypes >::getSecondObjectIndices ; (; ); const. inline . ◆ PolynomialDerivativeValue(). template<class DataTypes > . double sofa::component::solidmechanics::spring::PolynomialSpringsForceField< DataTypes >::PolynomialDerivativeValue ; (; unsigned int ; springIndex, . double ; strainValue . ). protected . ◆ PolynomialValue(). template<class DataTypes > . double sofa::component::solidmechanics::spring::PolynomialSpringsForceField< DataTypes >::PolynomialValue ; (; unsigned int ; springIndex, . double ; strainValue . ). protected ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_polynomial_springs_force_field.html:33432,energy,energy,33432,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_polynomial_springs_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_polynomial_springs_force_field.html,1,['energy'],['energy']
Energy Efficiency,"sion-mapping; ; SOFA - Topic: Beam collision mapping. /beamfemforcefield-setting; . /feed; ; BeamFEMForceField Setting – SOFA. SOFA - Topic: BeamFEMForceField Setting. /begining-with-sofa; . /feed; ; [SOLVED] begining with SOFA – SOFA. SOFA - Topic: [SOLVED] begining with SOFA. /beginner-question-sofa-scenes-plugins-and-3rd-party-applications; ; SOFA - Topic: [Beginner Question] sofa scenes, plugins and 3rd party applications. /best-practice-for-setting-up-an-animation; ; SOFA - Topic: Best practice for setting up an animation?. /best-way-to-detect-and-quantify-interpenetration; ; SOFA - Topic: Best way to detect and quantify interpenetration. /best-way-to-implement-ligaments-attaching-finger-bones-together; ; SOFA - Topic: Best Way to Implement Ligaments Attaching Finger Bones Together. /bilateralinteractionconstraint-causes-unrealistic-motion; ; SOFA - Topic: BilateralInteractionConstraint causes unrealistic motion. /bilateralinteractionconstraint-reduces-gravity-by-100x; ; SOFA - Topic: [SOLVED] BilateralInteractionConstraint reduces gravity by 100x. /bilateralinteractionconstraint-with-caribou-solver; ; SOFA - Topic: BilateralInteractionConstraint with Caribou Solver. /binaries-generation; ; SOFA - Topic: Binaries generation. /binary-plugins; . /page; . /2; ; SOFA - Topic: [SOLVED] Binary Plugins. /7; ; SOFA - Topic: [SOLVED] Binary Plugins. SOFA - Topic: [SOLVED] Binary Plugins. /binary-release-linux-libs-libicui18n-so-55-missing; ; SOFA - Topic: [SOLVED] Binary release linux libs – libicui18n.so.55 missing. /bindings-python-for-new-data-types; . /feed; ; [SOLVED] Bindings python for new data types – SOFA. SOFA - Topic: [SOLVED] Bindings python for new data types. /biomechanical-modeling-and-surgical-simulation-research-and-development-engineer; . /page; . /4; ; SOFA - Topic: Biomechanical Modeling and Surgical Simulation Research and Development Engineer. SOFA - Topic: Biomechanical Modeling and Surgical Simulation Research and Development Engineer. /blood-flo",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/index-wcopy.html:261050,reduce,reduces-gravity-by-,261050,index-wcopy.html,https://www.sofa-framework.org,https://www.sofa-framework.org/index-wcopy.html,2,['reduce'],"['reduces', 'reduces-gravity-by-']"
Energy Efficiency,"ss DataTypes > . void sofa::component::solidmechanics::spring::VectorSpringForceField< DataTypes >::draw ; (; const core::visual::VisualParams * ; ). overridevirtual . Render internal data of this object, for debugging purposes. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ getObject1(). template<class DataTypes > . core::behavior::MechanicalState<DataTypes>* sofa::component::solidmechanics::spring::VectorSpringForceField< DataTypes >::getObject1 ; (; ). inline . ◆ getObject2(). template<class DataTypes > . core::behavior::MechanicalState<DataTypes>* sofa::component::solidmechanics::spring::VectorSpringForceField< DataTypes >::getObject2 ; (; ). inline . ◆ getPotentialEnergy(). template<class DataTypes > . SReal sofa::component::solidmechanics::spring::VectorSpringForceField< DataTypes >::getPotentialEnergy ; (; const core::MechanicalParams * ; mparams, . const DataVecCoord & ; x1, . const DataVecCoord & ; x2 . ); const. inlineoverridevirtual . Get the potential energy associated to this ForceField.; Used to estimate the total energy of the system by some post-stabilization techniques.; This method must be implemented by the component, and is usually called by the generic ForceField::getPotentialEnergy() method. ; Implements sofa::core::behavior::PairInteractionForceField< DataTypes >. ◆ getSpringArray(). template<class DataTypes > . const core::topology::EdgeData<sofa::type::vector<Spring> >& sofa::component::solidmechanics::spring::VectorSpringForceField< DataTypes >::getSpringArray ; (; ); const. inline . ◆ getStiffness(). template<class DataTypes > . Real sofa::component::solidmechanics::spring::VectorSpringForceField< DataTypes >::getStiffness ; (; ); const. inline . ◆ getViscosity(). template<class DataTypes > . const Real sofa::component::solidmechanics::spring::VectorSpringForceField< DataTypes >::getViscosity ; (; ); const. inline . ◆ init(). template<class DataTypes > . void sofa::component::solidmechanics::spring::VectorSpringForceField< Dat",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_vector_spring_force_field.html:31239,energy,energy,31239,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_vector_spring_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_vector_spring_force_field.html,1,['energy'],['energy']
Energy Efficiency,"ss information; virtual const Real & getMassDensity ();  ; virtual const Real & getTotalMass ();  ; virtual void setVertexMass (sofa::type::vector< Real > vertexMass);  ; virtual void setMassDensity (Real massDensityValue);  ; virtual void setTotalMass (Real totalMass);  ; Check and standard initialization functions from mass information; virtual bool checkVertexMass ();  ; virtual void initFromVertexMass ();  ; virtual bool checkMassDensity ();  ; virtual void initFromMassDensity ();  ; virtual bool checkTotalMass ();  ; virtual void checkTotalMassInit ();  ; virtual void initFromTotalMass ();  ;  Public Member Functions inherited from sofa::core::behavior::Mass< DataTypes >;  SOFA_CLASS2 (SOFA_TEMPLATE(Mass, DataTypes), SOFA_TEMPLATE(ForceField, DataTypes), BaseMass);  ; void initGnuplot (const std::string path) override;  initialization to export kinetic and potential energy to gnuplot files format More...;  ; void exportGnuplot (const MechanicalParams *mparams, SReal time) override;  export kinetic and potential energy state at ""time"" to a gnuplot file More...;  ; void addGravityToV (const MechanicalParams *mparams, MultiVecDerivId) override;  perform v += dt*g operation. Used if mass wants to added G separately from the other forces to v. More...;  ; SReal getElementMass (sofa::Index) const override;  recover the mass of an element More...;  ; void getElementMass (sofa::Index index, linearalgebra::BaseMatrix *m) const override;  Get the matrix relative to the DOF at index. More...;  ; bool insertInNode (objectmodel::BaseNode *node) override;  ; bool removeInNode (objectmodel::BaseNode *node) override;  ; void addMDx (const MechanicalParams *mparams, MultiVecDerivId fid, SReal factor) override;  f += factor M dx More...;  ; void accFromF (const MechanicalParams *mparams, MultiVecDerivId aid) override;  ; void addDForce (const MechanicalParams *, DataVecDeriv &, const DataVecDeriv &) override;  Mass forces (gravity) often have null derivative. More...;  ; void ad",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_diagonal_mass.html:12012,energy,energy,12012,api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_diagonal_mass.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_diagonal_mass.html,1,['energy'],['energy']
Energy Efficiency,"ssForceField< DataTypes >::getLambda ; (; ); const. inlinevirtual . ◆ getMu(). template<class DataTypes > . virtual Real sofa::component::solidmechanics::tensormass::TetrahedralTensorMassForceField< DataTypes >::getMu ; (; ); const. inlinevirtual . ◆ getPotentialEnergy() [1/2]. template<class DataTypes > . SReal sofa::component::solidmechanics::tensormass::TetrahedralTensorMassForceField< DataTypes >::getPotentialEnergy ; (; const core::MechanicalParams * ; , . const DataVecCoord & ;  . ); const. inlineoverridevirtual . Implements sofa::core::behavior::ForceField< DataTypes >. ◆ getPotentialEnergy() [2/2]. template<class DataTypes > . SReal sofa::component::solidmechanics::tensormass::TetrahedralTensorMassForceField< DataTypes >::getPotentialEnergy ; (; const core::MechanicalParams * ; mparams); const. overridevirtual . Get the potential energy associated to this ForceField during the last call of addForce( const MechanicalParams* mparams );. ; Used to estimate the total energy of the system by some post-stabilization techniques. ; Implements sofa::core::behavior::BaseForceField. ◆ init(). template<class DataTypes > . void sofa::component::solidmechanics::tensormass::TetrahedralTensorMassForceField< DataTypes >::init ; (; void ; ). overridevirtual . Initialization method called at graph creation and modification, during top-down traversal. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ initNeighbourhoodPoints(). template<class DataTypes > . void sofa::component::solidmechanics::tensormass::TetrahedralTensorMassForceField< DataTypes >::initNeighbourhoodPoints. ◆ setPoissonRatio(). template<class DataTypes > . void sofa::component::solidmechanics::tensormass::TetrahedralTensorMassForceField< DataTypes >::setPoissonRatio ; (; const Real ; ratio). inline . ◆ setYoungModulus(). template<class DataTypes > . void sofa::component::solidmechanics::tensormass::TetrahedralTensorMassForceField< DataTypes >::setYoungModulus ; (; const Real ; modulus). inline . ◆ SOFA",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1tensormass_1_1_tetrahedral_tensor_mass_force_field.html:28753,energy,energy,28753,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1tensormass_1_1_tetrahedral_tensor_mass_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1tensormass_1_1_tetrahedral_tensor_mass_force_field.html,1,['energy'],['energy']
Energy Efficiency,"ssMatrix (sofa::core::behavior::MassMatrixAccumulator *matrices) override;  ; void accFromF (const core::MechanicalParams *mparams, DataVecDeriv &a, const DataVecDeriv &f) override;  ; SReal getKineticEnergy (const core::MechanicalParams *, const DataVecDeriv &) const override;  < vMv/2 using dof->getV() override More...;  ; SReal getPotentialEnergy (const core::MechanicalParams *, const DataVecCoord &) const override;  ; SReal getPotentialEnergy (const core::MechanicalParams *) const override;  Mgx. More...;  ; void addDForce (const core::MechanicalParams *mparams, DataVecDeriv &df, const DataVecDeriv &dx) override;  ; SReal getElementMass (Index index) const override;  Get the mass relative to the DOF at index. More...;  ; virtual void initTextures ();  ; virtual void update ();  ; void setDensity (Real d);  ; Real getDensity ();  ; void addKToMatrix (sofa::linearalgebra::BaseMatrix *matrix, SReal kFact, unsigned int &offset) override;  ;  Public Member Functions inherited from sofa::core::behavior::Mass< DataTypes >;  SOFA_CLASS2 (SOFA_TEMPLATE(Mass, DataTypes), SOFA_TEMPLATE(ForceField, DataTypes), BaseMass);  ; void initGnuplot (const std::string path) override;  initialization to export kinetic and potential energy to gnuplot files format More...;  ; void exportGnuplot (const MechanicalParams *mparams, SReal time) override;  export kinetic and potential energy state at ""time"" to a gnuplot file More...;  ; void addGravityToV (const MechanicalParams *mparams, MultiVecDerivId) override;  perform v += dt*g operation. Used if mass wants to added G separately from the other forces to v. More...;  ; SReal getElementMass (sofa::Index) const override;  recover the mass of an element More...;  ; void getElementMass (sofa::Index index, linearalgebra::BaseMatrix *m) const override;  Get the matrix relative to the DOF at index. More...;  ; bool insertInNode (objectmodel::BaseNode *node) override;  ; bool removeInNode (objectmodel::BaseNode *node) override;  ; void addMDx (",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1nonuniform_1_1_hexahedron_composite_f_e_m_force_field_and_mass.html:10681,energy,energy,10681,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1nonuniform_1_1_hexahedron_composite_f_e_m_force_field_and_mass.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1nonuniform_1_1_hexahedron_composite_f_e_m_force_field_and_mass.html,1,['energy'],['energy']
Energy Efficiency,"string & ; text). ◆ castTo(). template<class Dest > . Dest sofa::core::castTo ; (; sofa::core::objectmodel::Base * ; base). Dynamic cast from Base* into the type parameter Dest. . ◆ castToBase(). template<class Source > . sofa::core::objectmodel::Base* sofa::core::castToBase ; (; Source * ; b). Dynamic cast from the type parameter B* into Base*. ; CORE::OPAQUE FUNCTION /////////////////////////////////////////////////; CORE::OPAQUE function are a groupe of function that make ""opaque"" some of the common sofa behaviors.; Core::Opaque functions are:; Base* sofa::core::castToBase(T*) replace dynamic_cast<Base*>(T*);; T* sofa::core::castTo(Base*) replace dynamic_cast<T*>(Base*);; sofa:core::objectmodel::base::GetClass<T>() replace T::GetClass();. These functions are called ""opaque"" as they work with only forward declaration of the involved types in comparison to class methods the requires the full class declaration to be used.; It is highly recommended to use as much as possible opaque function in header files as this allow to reduce the dependency tree.; Opaque function may be slower at runtime (by one function call) but this is true only if LTO isn't able to optimize them properly. If you have experience/feedback with LTO please join the discussion in https://github.com/sofa-framework/sofa/discussions/1822 Defines the baseline functions for a type all the types in-herit from Base. These are non-opaque function that needs to be specialized in order to implement an opaque version for a given type. . ◆ cleanup(). SOFA_CORE_API void sofa::core::cleanup ; (; ). Clean up the resources used by the SofaCore library, as well as its dependencies: SofaDefaultType, SofaHelper. . ◆ findTemplatedCreator(). void sofa::core::findTemplatedCreator ; (; objectmodel::BaseContext * ; context, . const ObjectFactory::Creator::SPtr & ; creator, . const std::string & ; templateName, . std::map< std::string, std::vector< std::string >> & ; creatorsErrors, . std::vector< std::pair< std::string, ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html:19451,reduce,reduce,19451,api/master/sofa/html/namespacesofa_1_1core.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html,1,['reduce'],['reduce']
Energy Efficiency,"t computing forces between a pair of simulated body. ; This class define the abstract API common to interaction force fields between a pair of bodies using a given type of DOFs. . Public Member Functions;  SOFA_ABSTRACT_CLASS2 (SOFA_TEMPLATE2(MixedInteractionForceField, TDataTypes1, TDataTypes2), BaseInteractionForceField, SOFA_TEMPLATE2(PairStateAccessor, TDataTypes1, TDataTypes2));  ;  Public Member Functions inherited from sofa::core::behavior::BaseInteractionForceField;  SOFA_ABSTRACT_CLASS (BaseInteractionForceField, BaseForceField);  ; virtual BaseMechanicalState * getMechModel1 ();  ; virtual BaseMechanicalState * getMechModel2 ();  ; void addKToMatrix (const MechanicalParams *, const sofa::core::behavior::MultiMatrixAccessor *) override;  Compute the system matrix corresponding to . More...;  ; virtual void initGnuplot (const std::string path);  initialization to export potential energy to gnuplot files format More...;  ; virtual void exportGnuplot (SReal time);  export kinetic and potential energy state at ""time"" to a gnuplot file More...;  ; bool insertInNode (objectmodel::BaseNode *node) override;  ; bool removeInNode (objectmodel::BaseNode *node) override;  ;  Public Member Functions inherited from sofa::core::behavior::BaseForceField;  SOFA_ABSTRACT_CLASS (BaseForceField, StateAccessor);  ; virtual void addMBKdx (const MechanicalParams *mparams, MultiVecDerivId dfId);  Accumulate the contribution of M, B, and/or K matrices multiplied by the dx vector with the given coefficients. More...;  ; virtual void addBToMatrix (const MechanicalParams *mparams, const sofa::core::behavior::MultiMatrixAccessor *matrix);  Compute the system matrix corresponding to . More...;  ; virtual void addMBKToMatrix (const MechanicalParams *mparams, const sofa::core::behavior::MultiMatrixAccessor *matrix);  Compute the system matrix corresponding to . More...;  ; virtual void buildStiffnessMatrix (StiffnessMatrix *matrix);  ; virtual void buildDampingMatrix (DampingMatrix *matri",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_mixed_interaction_force_field.html:1783,energy,energy,1783,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_mixed_interaction_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_mixed_interaction_force_field.html,1,['energy'],['energy']
Energy Efficiency,"t override;  Mgx. More...;  ; void addDForce (const core::MechanicalParams *mparams, DataVecDeriv &df, const DataVecDeriv &dx) override;  ; SReal getElementMass (Index index) const override;  Get the mass relative to the DOF at index. More...;  ; void draw (const core::visual::VisualParams *vparams) override;  Render internal data of this object, for debugging purposes. More...;  ; virtual void initTextures ();  ; virtual void update ();  ; void setDensity (Real d);  ; Real getDensity ();  ; void addKToMatrix (sofa::linearalgebra::BaseMatrix *matrix, SReal kFact, unsigned int &offset) override;  ;  Public Member Functions inherited from sofa::core::behavior::Mass< DataTypes >;  SOFA_CLASS2 (SOFA_TEMPLATE(Mass, DataTypes), SOFA_TEMPLATE(ForceField, DataTypes), BaseMass);  ; void initGnuplot (const std::string path) override;  initialization to export kinetic and potential energy to gnuplot files format More...;  ; void exportGnuplot (const MechanicalParams *mparams, SReal time) override;  export kinetic and potential energy state at ""time"" to a gnuplot file More...;  ; void addGravityToV (const MechanicalParams *mparams, MultiVecDerivId) override;  perform v += dt*g operation. Used if mass wants to added G separately from the other forces to v. More...;  ; SReal getElementMass (sofa::Index) const override;  recover the mass of an element More...;  ; void getElementMass (sofa::Index index, linearalgebra::BaseMatrix *m) const override;  Get the matrix relative to the DOF at index. More...;  ; bool insertInNode (objectmodel::BaseNode *node) override;  ; bool removeInNode (objectmodel::BaseNode *node) override;  ; void addMDx (const MechanicalParams *mparams, MultiVecDerivId fid, SReal factor) override;  f += factor M dx More...;  ; void accFromF (const MechanicalParams *mparams, MultiVecDerivId aid) override;  ; void addDForce (const MechanicalParams *, DataVecDeriv &, const DataVecDeriv &) override;  Mass forces (gravity) often have null derivative. More...;  ; void ad",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1nonuniform_1_1_non_uniform_hexahedron_f_e_m_force_field_and_mass.html:8519,energy,energy,8519,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1nonuniform_1_1_non_uniform_hexahedron_f_e_m_force_field_and_mass.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1nonuniform_1_1_non_uniform_hexahedron_f_e_m_force_field_and_mass.html,1,['energy'],['energy']
Energy Efficiency,"tObjectIndices(). template<class DataTypes > . const VecIndex& sofa::component::solidmechanics::spring::PolynomialSpringsForceField< DataTypes >::getFirstObjectIndices ; (; ); const. inline . ◆ getObject1(). template<class DataTypes > . core::behavior::MechanicalState<DataTypes>* sofa::component::solidmechanics::spring::PolynomialSpringsForceField< DataTypes >::getObject1 ; (; ). inline . ◆ getObject2(). template<class DataTypes > . core::behavior::MechanicalState<DataTypes>* sofa::component::solidmechanics::spring::PolynomialSpringsForceField< DataTypes >::getObject2 ; (; ). inline . ◆ getPotentialEnergy(). template<class DataTypes > . virtual SReal sofa::component::solidmechanics::spring::PolynomialSpringsForceField< DataTypes >::getPotentialEnergy ; (; const core::MechanicalParams * ; mparams, . const DataVecCoord & ; x1, . const DataVecCoord & ; x2 . ); const. inlineoverridevirtual . Get the potential energy associated to this ForceField.; Used to estimate the total energy of the system by some post-stabilization techniques.; This method must be implemented by the component, and is usually called by the generic ForceField::getPotentialEnergy() method. ; Implements sofa::core::behavior::PairInteractionForceField< DataTypes >. ◆ getSecondObjectIndices(). template<class DataTypes > . const VecIndex& sofa::component::solidmechanics::spring::PolynomialSpringsForceField< DataTypes >::getSecondObjectIndices ; (; ); const. inline . ◆ PolynomialDerivativeValue(). template<class DataTypes > . double sofa::component::solidmechanics::spring::PolynomialSpringsForceField< DataTypes >::PolynomialDerivativeValue ; (; unsigned int ; springIndex, . double ; strainValue . ). protected . ◆ PolynomialValue(). template<class DataTypes > . double sofa::component::solidmechanics::spring::PolynomialSpringsForceField< DataTypes >::PolynomialValue ; (; unsigned int ; springIndex, . double ; strainValue . ). protected . ◆ recomputeIndices(). template<class DataTypes > . void sofa::componen",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_polynomial_springs_force_field.html:33498,energy,energy,33498,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_polynomial_springs_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_polynomial_springs_force_field.html,1,['energy'],['energy']
Energy Efficiency,"tRotation () const;  ; type::Vec3 getScale () const override;  ; Integration related methods; void beginIntegration (SReal dt) override;  Called at the beginning of each integration step. More...;  ; void endIntegration (const core::ExecParams *params, SReal dt) override;  Called at the end of each integration step. More...;  ; void accumulateForce (const core::ExecParams *params, core::VecDerivId f=core::VecDerivId::force()) override;  Add stored external forces to F. More...;  ; void vAvail (const core::ExecParams *params, core::VecCoordId &v) override;  Increment the index of the given VecCoordId, so that all 'allocated' vectors in this state have a lower index. More...;  ; void vAvail (const core::ExecParams *params, core::VecDerivId &v) override;  Increment the index of the given VecDerivId, so that all 'allocated' vectors in this state have a lower index. More...;  ; void vAlloc (const core::ExecParams *params, core::VecCoordId v, const core::VecIdProperties &properties={}) override;  Increment the index of the given MatrixDerivId, so that all 'allocated' vectors in this state have a lower index. More...;  ; void vAlloc (const core::ExecParams *params, core::VecDerivId v, const core::VecIdProperties &properties={}) override;  Allocate a new temporary vector. More...;  ; void vRealloc (const core::ExecParams *params, core::VecCoordId v, const core::VecIdProperties &properties={}) override;  Allocate a new temporary vector. More...;  ; void vRealloc (const core::ExecParams *params, core::VecDerivId v, const core::VecIdProperties &properties={}) override;  Reallocate a new temporary vector. More...;  ; void vFree (const core::ExecParams *params, core::VecCoordId v) override;  Free a temporary vector. More...;  ; void vFree (const core::ExecParams *params, core::VecDerivId v) override;  Free a temporary vector. More...;  ; void vInit (const core::ExecParams *params, core::VecCoordId v, core::ConstVecCoordId vSrc) override;  Free a temporary vector. More...;  ; voi",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1statecontainer_1_1_mechanical_object.html:14580,allocate,allocated,14580,api/master/sofa/html/classsofa_1_1component_1_1statecontainer_1_1_mechanical_object.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1statecontainer_1_1_mechanical_object.html,1,['allocate'],['allocated']
Energy Efficiency,"t_type< c > *object);  . Attribute details. ◆ l_linearSystems. template<class TMatrix , class TVector > . MultiLink< MyType, TypedMatrixLinearSystem<TMatrix, TVector>, BaseLink::FLAG_DUPLICATE > sofa::component::linearsystem::CompositeLinearSystem< TMatrix, TVector >::l_linearSystems. protected . Among the list of linear systems, which one is to be used by the linear solver. . ◆ l_solverLinearSystem. template<class TMatrix , class TVector > . SingleLink< MyType, TypedMatrixLinearSystem<TMatrix, TVector>, BaseLink::FLAG_STOREPATH | BaseLink::FLAG_STRONGLINK > sofa::component::linearsystem::CompositeLinearSystem< TMatrix, TVector >::l_solverLinearSystem. protected . Constructor details. ◆ CompositeLinearSystem(). template<class TMatrix , class TVector > . sofa::component::linearsystem::CompositeLinearSystem< TMatrix, TVector >::CompositeLinearSystem. protected . Function details. ◆ allocateSystem(). template<class TMatrix , class TVector > . void sofa::component::linearsystem::CompositeLinearSystem< TMatrix, TVector >::allocateSystem. overrideprotectedvirtual . Reimplemented from sofa::component::linearsystem::TypedMatrixLinearSystem< TMatrix, TVector >. ◆ assembleSystem(). template<class TMatrix , class TVector > . void sofa::component::linearsystem::CompositeLinearSystem< TMatrix, TVector >::assembleSystem ; (; const core::MechanicalParams * ; mechanical_params). overrideprotectedvirtual . Reimplemented from sofa::core::behavior::BaseMatrixLinearSystem. ◆ clearSystem(). template<class TMatrix , class TVector > . void sofa::component::linearsystem::CompositeLinearSystem< TMatrix, TVector >::clearSystem. overridevirtual . Reimplemented from sofa::component::linearsystem::TypedMatrixLinearSystem< TMatrix, TVector >. ◆ dispatchSystemRHS(). template<class TMatrix , class TVector > . void sofa::component::linearsystem::CompositeLinearSystem< TMatrix, TVector >::dispatchSystemRHS ; (; core::MultiVecDerivId ; v). overridevirtual . Reimplemented from sofa::component::linearsy",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsystem_1_1_composite_linear_system.html:19707,allocate,allocateSystem,19707,api/master/sofa/html/classsofa_1_1component_1_1linearsystem_1_1_composite_linear_system.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsystem_1_1_composite_linear_system.html,1,['allocate'],['allocateSystem']
Energy Efficiency,"tatic Public Member Functions |; Friends |; List of all members . sofa::component::linearsolver::GraphScatteredVector Class Reference . #include <GraphScatteredTypes.h>. Inheritance diagram for sofa::component::linearsolver::GraphScatteredVector:. [legend]. Public Member Functions;  GraphScatteredVector (core::behavior::BaseVectorOperations *p, core::VecDerivId id);  ;  GraphScatteredVector (core::behavior::BaseVectorOperations *p);  ; void set (core::MultiVecDerivId id);  ; void reset ();  ; void add (int, SReal);  TO IMPLEMENT. More...;  ; void set (int, SReal);  TO IMPLEMENT. More...;  ; SReal element (int);  ; void resize (int);  ; void operator= (const MultExpr< GraphScatteredMatrix, GraphScatteredVector > &expr);  ;  Public Member Functions inherited from sofa::core::behavior::TMultiVec< V_DERIV >;  TMultiVec (BaseVectorOperations *vop, MyMultiVecId v);  Refers to a state vector with the given ID (VecId::position(), VecId::velocity(), etc). More...;  ;  TMultiVec ();  Refers to a not yet allocated state vector. More...;  ;  TMultiVec (BaseVectorOperations *vop, bool dynamic=true, const VecIdProperties &properties={});  Allocate a new temporary vector with the given type (sofa::core::V_COORD or sofa::core::V_DERIV). More...;  ;  ~TMultiVec ();  ;  operator MyMultiVecId ();  Automatic conversion to the underlying VecId. More...;  ;  operator ConstMyMultiVecId ();  ;  operator AllMultiVecId ();  ;  operator ConstAllMultiVecId ();  ; const MyMultiVecId & id () const;  ; MyMultiVecId & id ();  ; BaseVectorOperations * ops ();  ; void setOps (BaseVectorOperations *op);  ; void realloc (BaseVectorOperations *_vop, bool interactionForceField=false, bool propagate=false, const VecIdProperties &properties={});  ; void clear ();  v = 0 More...;  ; void eq (MyMultiVecId a);  v = a More...;  ; void eq (MyMultiVecId a, SReal f);  v = a*f More...;  ; void eq (AllMultiVecId a, AllMultiVecId b, SReal f=1.0);  v = a+b*f More...;  ; void peq (AllMultiVecId a, SReal f=1.0);  v +=",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsolver_1_1_graph_scattered_vector.html:1193,allocate,allocated,1193,api/master/sofa/html/classsofa_1_1component_1_1linearsolver_1_1_graph_scattered_vector.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsolver_1_1_graph_scattered_vector.html,1,['allocate'],['allocated']
Energy Efficiency,"td::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  . Protected Attributes; core::topology::BaseMeshTopology * m_topology;  ; VecCoord m_initialPoints;  ; bool m_updateMatrix;  the initial positions of the points More...;  ; std::unique_ptr< material::HyperelasticMaterial< DataTypes > > m_myMaterial;  the array that describes the complete material energy and its derivatives More...;  ;  Protected Attributes inherited from sofa::core::behavior::StateAccessor; MultiLink< StateAccessor, BaseMechanicalState, BaseLink::FLAG_DUPLICATE > l_mechanicalStates;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObject; SingleLink< BaseObject, BaseContext, BaseLink::FLAG_DOUBLELINK > l_context;  ; LinkSlaves l_slaves;  ; SingleLink< BaseObject, BaseObject, BaseLink::FLAG_DOUBLELINK > l_master;  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  ;  Protected Attributes inherited from sofa::core::behavior:",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1_tetrahedron_hyperelasticity_f_e_m_force_field.html:3969,energy,energy,3969,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1_tetrahedron_hyperelasticity_f_e_m_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1_tetrahedron_hyperelasticity_f_e_m_force_field.html,1,['energy'],['energy']
Energy Efficiency,"tected . Enable alpha blending. . ◆ blendEq. GLenum sofa::gl::component::rendering3d::OglModel::blendEq. protected . ◆ blendEquation. Data<sofa::helper::OptionsGroup> sofa::gl::component::rendering3d::OglModel::blendEquation. protected . if alpha blending is enabled this specifies how source and destination colors are combined . ◆ blendTransparency. Data<bool> sofa::gl::component::rendering3d::OglModel::blendTransparency. Blend transparent parts. . ◆ canUsePatches. bool sofa::gl::component::rendering3d::OglModel::canUsePatches. protected . ◆ cullFace. Data<int> sofa::gl::component::rendering3d::OglModel::cullFace. protected . Face culling (0 = no culling, 1 = cull back faces, 2 = cull front faces) . ◆ depthTest. Data<bool> sofa::gl::component::rendering3d::OglModel::depthTest. protected . Enable depth testing. . ◆ destFactor. Data<sofa::helper::OptionsGroup> sofa::gl::component::rendering3d::OglModel::destFactor. protected . if alpha blending is enabled this specifies how the red, green, blue, and alpha destination blending factors are computed . ◆ dfactor. GLenum sofa::gl::component::rendering3d::OglModel::dfactor. protected . ◆ edgesRevision. int sofa::gl::component::rendering3d::OglModel::edgesRevision. protected . ◆ iboEdges. GLuint sofa::gl::component::rendering3d::OglModel::iboEdges. protected . ◆ iboQuads. GLuint sofa::gl::component::rendering3d::OglModel::iboQuads. protected . ◆ iboTriangles. GLuint sofa::gl::component::rendering3d::OglModel::iboTriangles. protected . ◆ initDone. bool sofa::gl::component::rendering3d::OglModel::initDone. protected . ◆ isEnabled. DeprecatedAndRemoved sofa::gl::component::rendering3d::OglModel::isEnabled. protected . ◆ lineSmooth. Data<bool> sofa::gl::component::rendering3d::OglModel::lineSmooth. protected . Enable smooth line rendering. . ◆ lineWidth. Data<GLfloat> sofa::gl::component::rendering3d::OglModel::lineWidth. protected . Line width (set if != 1, only for lines rendering) . ◆ materialTextureIdMap. std::map<int, int> ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_ogl_model.html:32006,green,green,32006,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_ogl_model.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_ogl_model.html,1,['green'],['green']
Energy Efficiency,"template<class TMatrix , class TVector > . sofa::type::vector<sofa::core::behavior::BaseMass*> sofa::component::linearsystem::TypedMatrixLinearSystem< TMatrix, TVector >::m_masses. protected . The list of masses contributing to the matrix assembly. . ◆ m_mechanicalMappings. template<class TMatrix , class TVector > . sofa::type::vector<sofa::core::BaseMapping*> sofa::component::linearsystem::TypedMatrixLinearSystem< TMatrix, TVector >::m_mechanicalMappings. protected . The list of mechanical mappings contributing to the matrix assembly. . ◆ m_projectiveConstraints. template<class TMatrix , class TVector > . sofa::type::vector<sofa::core::behavior::BaseProjectiveConstraintSet*> sofa::component::linearsystem::TypedMatrixLinearSystem< TMatrix, TVector >::m_projectiveConstraints. protected . The list of projective constraints contributing to the matrix assembly. . Function details. ◆ allocateSystem(). template<class TMatrix , class TVector > . void sofa::component::linearsystem::TypedMatrixLinearSystem< TMatrix, TVector >::allocateSystem. protectedvirtual . Reimplemented in sofa::component::linearsystem::CompositeLinearSystem< TMatrix, TVector >. ◆ associateLocalMatrixToComponents(). template<class TMatrix , class TVector > . virtual void sofa::component::linearsystem::TypedMatrixLinearSystem< TMatrix, TVector >::associateLocalMatrixToComponents ; (; const core::MechanicalParams * ; ). inlineprotectedvirtual . Reimplemented in sofa::component::linearsystem::MatrixLinearSystem< TMatrix, TVector >, and sofa::component::linearsystem::MatrixFreeSystem< TMatrix, TVector >. ◆ clearSystem(). template<class TMatrix , class TVector > . void sofa::component::linearsystem::TypedMatrixLinearSystem< TMatrix, TVector >::clearSystem. virtual . Reimplemented in sofa::component::linearsystem::ConstantSparsityPatternSystem< TMatrix, TVector >, and sofa::component::linearsystem::CompositeLinearSystem< TMatrix, TVector >. ◆ copyLocalVectorToGlobalVector() [1/3]. SOFA_COMPONENT_LINEARSOLVER_I",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsystem_1_1_typed_matrix_linear_system.html:19064,allocate,allocateSystem,19064,api/master/sofa/html/classsofa_1_1component_1_1linearsystem_1_1_typed_matrix_linear_system.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsystem_1_1_typed_matrix_linear_system.html,1,['allocate'],['allocateSystem']
Energy Efficiency,"temporary vector ; Implements sofa::core::behavior::BaseMechanicalState. ◆ vAlloc() [2/2]. template<class DataTypes > . void sofa::component::statecontainer::MechanicalObject< DataTypes >::vAlloc ; (; const core::ExecParams * ; params, . core::VecDerivId ; v, . const core::VecIdProperties & ; properties = {} . ). overridevirtual . Allocate a new temporary vector. ; Implements sofa::core::behavior::BaseMechanicalState. ◆ vAllocImpl(). template<class DataTypes > . template<core::VecType vtype> . void sofa::component::statecontainer::MechanicalObject< DataTypes >::vAllocImpl ; (; core::TVecId< vtype, core::V_WRITE > ; v, . const core::VecIdProperties & ; properties . ). protected . Generic implementation of the method vAlloc. . ◆ vAvail() [1/2]. template<class DataTypes > . void sofa::component::statecontainer::MechanicalObject< DataTypes >::vAvail ; (; const core::ExecParams * ; params, . core::VecCoordId & ; v . ). overridevirtual . Increment the index of the given VecCoordId, so that all 'allocated' vectors in this state have a lower index. ; Implements sofa::core::behavior::BaseMechanicalState. ◆ vAvail() [2/2]. template<class DataTypes > . void sofa::component::statecontainer::MechanicalObject< DataTypes >::vAvail ; (; const core::ExecParams * ; params, . core::VecDerivId & ; v . ). overridevirtual . Increment the index of the given VecDerivId, so that all 'allocated' vectors in this state have a lower index. ; Implements sofa::core::behavior::BaseMechanicalState. ◆ vAvailImpl(). template<class DataTypes > . template<core::VecType vtype> . void sofa::component::statecontainer::MechanicalObject< DataTypes >::vAvailImpl ; (; core::TVecId< vtype, core::V_WRITE > & ; v, . sofa::type::vector< Data< core::StateVecType_t< DataTypes, vtype > > * > & ; dataContainer . ). protected . Generic implementation of the method vAvail. . ◆ vDot(). template<class DataTypes > . SReal sofa::component::statecontainer::MechanicalObject< DataTypes >::vDot ; (; const core::ExecParams * ; p",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1statecontainer_1_1_mechanical_object.html:70575,allocate,allocated,70575,api/master/sofa/html/classsofa_1_1component_1_1statecontainer_1_1_mechanical_object.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1statecontainer_1_1_mechanical_object.html,1,['allocate'],['allocated']
Energy Efficiency,"teq (SReal f);  v *= f More...;  ; SReal dot (MyMultiVecId a);  ; void threshold (SReal threshold);  nullify values below given threshold More...;  ; SReal norm ();  ; SReal norm (unsigned l);  ; void operator= (MyMultiVecId a);  v = a More...;  ; void operator= (const TMultiVec< vtype > &a);  v = a More...;  ; void operator+= (MyMultiVecId a);  v += a More...;  ; void operator-= (MyMultiVecId a);  v -= a More...;  ; void operator*= (SReal f);  v *= f More...;  ; void operator/= (SReal f);  v /= f More...;  ; SReal operator* (MyMultiVecId a);  return the scalar product dot(v,a) More...;  ; size_t size () const;  . Static Public Member Functions; static const char * Name ();  . Friends; class GraphScatteredMatrix;  . Additional Inherited Members;  Protected Attributes inherited from sofa::core::behavior::TMultiVec< V_DERIV >; BaseVectorOperations * vop;  Solver who is using this vector. More...;  ; MyMultiVecId v;  Identifier of this vector. More...;  ; bool dynamic;  Flag indicating if this vector was dynamically allocated. More...;  . Constructor details. ◆ GraphScatteredVector() [1/2]. sofa::component::linearsolver::GraphScatteredVector::GraphScatteredVector ; (; core::behavior::BaseVectorOperations * ; p, . core::VecDerivId ; id . ). inline . ◆ GraphScatteredVector() [2/2]. sofa::component::linearsolver::GraphScatteredVector::GraphScatteredVector ; (; core::behavior::BaseVectorOperations * ; p). inline . Function details. ◆ add(). void sofa::component::linearsolver::GraphScatteredVector::add ; (; int ; , . SReal ;  . ). inline . TO IMPLEMENT. . ◆ element(). SReal sofa::component::linearsolver::GraphScatteredVector::element ; (; int ; ). inline . ◆ Name(). static const char* sofa::component::linearsolver::GraphScatteredVector::Name ; (; ). inlinestatic . ◆ operator=(). void sofa::component::linearsolver::GraphScatteredVector::operator= ; (; const MultExpr< GraphScatteredMatrix, GraphScatteredVector > & ; expr). ◆ reset(). void sofa::component::linearsolver::GraphSc",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsolver_1_1_graph_scattered_vector.html:3235,allocate,allocated,3235,api/master/sofa/html/classsofa_1_1component_1_1linearsolver_1_1_graph_scattered_vector.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsolver_1_1_graph_scattered_vector.html,1,['allocate'],['allocated']
Energy Efficiency,"teraction. SOFA - Topic: [SOLVED] New Mouse Interaction. /newomnidriver-gnode-cannot-access-protected-member; . /embed; ; SOFA - Topic: [SOLVED] NewOmniDriver: GNode cannot access protected member. /page; . /3; ; SOFA - Topic: [SOLVED] NewOmniDriver: GNode cannot access protected member. /4; ; SOFA - Topic: [SOLVED] NewOmniDriver: GNode cannot access protected member. SOFA - Topic: [SOLVED] NewOmniDriver: GNode cannot access protected member. /new-online-support-sessions; ; SOFA - Topic: New: online support sessions!. /new-release-v16-08; . /feed; ; New Release v16.08! – SOFA. SOFA - Topic: New Release v16.08!. /new-release-v16-12; ; SOFA - Topic: New Release v16.12!. /new-release-v17-12; ; SOFA - Topic: New Release v17.12!. /new-release-v18-06; ; SOFA - Topic: New release v18.06!. /new-sofa-technical-member-amc; ; SOFA - Topic: New SOFA technical member: AMC!. /new-to-sofa-here-are-my-thoughts; ; SOFA - Topic: New to sofa. Here are my thoughts. /new-training-session-scheduled; ; SOFA - Topic: New training session scheduled!. /new-tutorials-for-sofa; ; SOFA - Topic: New tutorials for SOFA. /new-version-of-blender-sofa; . /page; . /4; ; SOFA - Topic: New version of Blender SOFA. SOFA - Topic: New version of Blender SOFA. /new-video-tutorial-howto-configure-and-install-on-linux; ; SOFA - Topic: New video tutorial: HowTo configure and install on Linux. /new-website; . /page; . /10; ; SOFA - Topic: New website !. /11; ; SOFA - Topic: New website !. /5; ; SOFA - Topic: New website !. SOFA - Topic: New website !. /no-boost-item-list-after-cmake-configure; ; SOFA - Topic: [SOLVED] No boost item list after cmake configure. /no-collision-between-the-collision-models; . /embed; ; SOFA - Topic: [SOLVED] No collision between the collision models. SOFA - Topic: [SOLVED] No collision between the collision models. /no-createscene-nor-createsceneandcontroller-module-method-found-error; ; SOFA - Topic: [SOLVED] no ""createScene"" nor ""createSceneAndController"" module method found erro",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/index-wcopy.html:355102,schedul,scheduled,355102,index-wcopy.html,https://www.sofa-framework.org,https://www.sofa-framework.org/index-wcopy.html,2,['schedul'],['scheduled']
Energy Efficiency,"texpr ComponentArray & array () noexcept;  direct access to array More...;  ; constexpr ComponentArray::iterator begin () noexcept;  ; constexpr ComponentArray::const_iterator begin () const noexcept;  ; constexpr ComponentArray::iterator end () noexcept;  ; constexpr ComponentArray::const_iterator end () const noexcept;  . Static Public Member Functions; static RGBAColor fromVec4 (const type::fixed_array< float, 4 > &color)=delete;  ; static RGBAColor fromVec4 (const type::fixed_array< double, 4 > &color)=delete;  ; static RGBAColor fromVec4 (const Vec4f &color)=delete;  ; static RGBAColor fromVec4 (const Vec4d &color)=delete;  ; static RGBAColor fromString (const std::string &str);  ; static RGBAColor fromFloat (float r, float g, float b, float a);  ; static RGBAColor fromStdArray (const std::array< float, 4 > &color);  ; static RGBAColor fromStdArray (const std::array< double, 4 > &color);  ; static RGBAColor fromHSVA (float h, float s, float v, float a);  ; static bool read (const std::string &str, RGBAColor &color);  ; constexpr static const RGBAColor & white ();  ; constexpr static const RGBAColor & black ();  ; constexpr static const RGBAColor & red ();  ; constexpr static const RGBAColor & green ();  ; constexpr static const RGBAColor & blue ();  ; constexpr static const RGBAColor & cyan ();  ; constexpr static const RGBAColor & magenta ();  ; constexpr static const RGBAColor & yellow ();  ; constexpr static const RGBAColor & gray ();  ; constexpr static const RGBAColor & darkgray ();  ; constexpr static const RGBAColor & lightgray ();  ; static RGBAColor lighten (const RGBAColor &in, const SReal factor);  enlight a color by a given factor. More...;  ; static constexpr RGBAColor clamp (const RGBAColor &color, float min, float max);  ; static constexpr sofa::Size size ();  . Friends; SOFA_TYPE_API std::ostream & operator<< (std::ostream &i, const RGBAColor &t);  Write to an output stream. More...;  ; SOFA_TYPE_API std::istream & operator>> (std::istream &i, RG",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_r_g_b_a_color.html:2988,green,green,2988,api/master/sofa/html/classsofa_1_1type_1_1_r_g_b_a_color.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_r_g_b_a_color.html,1,['green'],['green']
Energy Efficiency,"ticEnergy (const core::MechanicalParams *, const DataVecDeriv &) const override;  < vMv/2 using dof->getV() override More...;  ; void addDForce (const core::MechanicalParams *mparams, DataVecDeriv &df, const DataVecDeriv &dx) override;  ; void addGravityToV (const core::MechanicalParams *mparams, DataVecDeriv &d_v) override;  ; void draw (const core::visual::VisualParams *vparams) override;  Render internal data of this object, for debugging purposes. More...;  ; SReal getElementMass (sofa::Index index) const override;  Get the mass relative to the DOF at index. More...;  ; void setDensity (Real d);  ; Real getDensity ();  ; void addKToMatrix (sofa::linearalgebra::BaseMatrix *matrix, SReal kFact, unsigned int &offset) override;  ; void addKToMatrix (sofa::linearalgebra::BaseMatrix *, SReal, unsigned int &) override;  ; SReal getPotentialEnergy (const core::MechanicalParams *, const DataVecCoord &) const override;  ; SReal getPotentialEnergy (const MechanicalParams *mparams) const override;  ; SReal getPotentialEnergy (const MechanicalParams *mparams, const DataVecCoord &x) const override;  ;  Public Member Functions inherited from sofa::core::behavior::Mass< DataTypes >;  SOFA_CLASS2 (SOFA_TEMPLATE(Mass, DataTypes), SOFA_TEMPLATE(ForceField, DataTypes), BaseMass);  ; void initGnuplot (const std::string path) override;  initialization to export kinetic and potential energy to gnuplot files format More...;  ; void exportGnuplot (const MechanicalParams *mparams, SReal time) override;  export kinetic and potential energy state at ""time"" to a gnuplot file More...;  ; void addGravityToV (const MechanicalParams *mparams, MultiVecDerivId) override;  perform v += dt*g operation. Used if mass wants to added G separately from the other forces to v. More...;  ; SReal getElementMass (sofa::Index) const override;  recover the mass of an element More...;  ; void getElementMass (sofa::Index index, linearalgebra::BaseMatrix *m) const override;  Get the matrix relative to the DOF at ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_hexahedral_f_e_m_force_field_and_mass.html:6192,energy,energy,6192,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_hexahedral_f_e_m_force_field_and_mass.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_hexahedral_f_e_m_force_field_and_mass.html,2,['energy'],['energy']
Energy Efficiency,"tions |; List of all members . sofa::linearalgebra::EigenBaseSparseMatrix< TReal > Class Template Reference . #include <EigenBaseSparseMatrix.h>. Inheritance diagram for sofa::linearalgebra::EigenBaseSparseMatrix< TReal >:. [legend]; Detailed Description; template<class TReal>; class sofa::linearalgebra::EigenBaseSparseMatrix< TReal >; Sparse matrix based on the Eigen library.; An Eigen::SparseMatrix<Real, RowMajor> matrix is used to store the data in Compressed Row Storage mode. This matrix can not be accessed randomly. Two access modes are implemented.; The first access mode consists in inserting entries in increasing row, increasing column order. Method beginRow(Index index) must be called before any entry can be appended to row i. WarningbeginRow must be called even for empty rows Then insertBack(i,j,value) must be used in for increasing j. There is no need to explicitly end a row. Finally, method compress() must be called after the last entry has been inserted. This is the most efficient access mode.; The second access mode is randow access, but you access an auxiliary matrix. Method add is used to add a value at a given location. Method compress() is then used to transfer this data to the compressed matrix. There is no way to replace an entry, you can only add.; Rows, columns, or the full matrix can be set to zero using the clear* methods. . Public Attributes; CompressedMatrix compressedMatrix;  the compressed matrix More...;  . Protected Attributes; SimplicialCholesky cholesky;  used to factorize the matrix and solve systems using Cholesky method, for symmetric positive definite matrices only. More...;  . Public Member Functions;  EigenBaseSparseMatrix (Index nbRow=0, Index nbCol=0);  ;  EigenBaseSparseMatrix (const ThisMatrix &m);  copy constructor More...;  ; void operator= (const ThisMatrix &m);  copy operator More...;  ; void set (Index i, Index j, double v) override;  Write the value of the element at row i, column j (using 0-based indices) More...;  ; v",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html:1260,efficient,efficient,1260,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html,1,['efficient'],['efficient']
Energy Efficiency,"tributes; Index nRow;  Size. More...;  ; Index nCol;  Mathematical size of the matrix, in scalars. More...;  ;  Public Attributes inherited from sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSMechanicalPolicy >; Index nBlockRow;  Size. More...;  ; Index nBlockCol;  Mathematical size of the matrix, in blocks. More...;  ; VecIndex rowIndex;  Compressed sparse data structure. More...;  ; VecIndex rowBegin;  column indices of non-empty blocks in each row. The column indices of the non-empty block within the i-th non-empty row are all the colsIndex[j], j in [rowBegin[i],rowBegin[i+1]) More...;  ; VecIndex colsIndex;  column indices of all the non-empty blocks, sorted by increasing row index and column index More...;  ; VecBlock colsValue;  values of the non-empty blocks, in the same order as in colsIndex More...;  ; VecFlag touchedBlock;  boolean vector, i-th value is true if block has been touched since last compression. More...;  ; VecIndexedBlock btemp;  Additional storage to make block insertion more efficient. More...;  ; bool skipCompressZero;  ; VecIndex oldRowIndex;  Temporary vectors used during compression. More...;  ; VecIndex oldRowBegin;  ; VecIndex oldColsIndex;  ; VecBlock oldColsValue;  . Static Public Attributes; static constexpr sofa::Index NL = traits::NL;  Number of rows of a block. More...;  ; static constexpr sofa::Index NC = traits::NC;  Number of columns of a block. More...;  ;  Static Public Attributes inherited from sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSMechanicalPolicy >; static constexpr sofa::Index NL;  Number of rows of a block. More...;  ; static constexpr sofa::Index NC;  Number of columns of a block. More...;  ; static constexpr Index s_invalidIndex;  ;  Static Public Attributes inherited from sofa::linearalgebra::CRSMechanicalPolicy; static constexpr bool CompressZeros = false;  ; static constexpr bool IsAlwaysSquare = true;  ; static constexpr bool IsAlwaysSymmetric = true;  ; static constex",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html:1664,efficient,efficient,1664,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html,1,['efficient'],['efficient']
Energy Efficiency,"triggered in case of change. returns >= 0 if the file was successfully added returns < 0 in case of error. More...;  ; static int addFile (const std::string &directoryname, const std::string &filename, FileEventListener *listener);  add a new path and file to monitor and a listener to be triggered in case of change. returns >= 0 if the file was successfully added returns < 0 in case of error. More...;  ; static int updates (int timeout=1);  check if the file have changed, colalesc the similar events and notify the listener. timeout is the number of seconds to block the calling process. Can be 0 (in this case it return immediately if there is no event. return -1 in case of error return >= 0 otherwise. More...;  ; static void removeListener (FileEventListener *listener);  remove the provided listener. If the listener is not existing, do nothing If the listener is nullptr, do nothing If the listener is associated with one or more file...remove all the associations. Keep in mind that the file are still monitored. More...;  ; static void removeFileListener (const std::string &filename, FileEventListener *listener);  remove the provided listener for a given file If the listener is not existing, do nothing If the listener is nullptr, do nothing If the listener is associated with one or more file...remove all the associations. Keep in mind that the file are still monitored. More...;  . Function details. ◆ addFile() [1/2]. int sofa::helper::system::FileMonitor::addFile ; (; const std::string & ; directoryname, . const std::string & ; filename, . FileEventListener * ; listener . ). static . add a new path and file to monitor and a listener to be triggered in case of change. returns >= 0 if the file was successfully added returns < 0 in case of error. . ◆ addFile() [2/2]. int sofa::helper::system::FileMonitor::addFile ; (; const std::string & ; filename, . FileEventListener * ; listener . ). static . add a new filepath to monitor and a listener to be triggered in case of chang",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_file_monitor.html:1449,monitor,monitored,1449,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_file_monitor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_file_monitor.html,1,['monitor'],['monitored']
Energy Efficiency,"tual void step () final;  Main method called to update the graph. More...;  ; virtual void stepImpl ()=0;  the only function that should be overloaded More...;  . Protected Member Functions; void setCurve (unsigned index, const QString &name, const QColor &color);  set the index-th curve (index must be < _numberOfCurves) More...;  ; void updateYAxisBounds (SReal value);  Method to update Y axis scale. More...;  ; void flushSeries ();  flush data from series not anymore displayed More...;  . Attribute details. ◆ m_axisX. QValueAxis* sofa::gui::qt::QGraphStatWidget::m_axisX. protected . x axis pointer . ◆ m_axisY. QValueAxis* sofa::gui::qt::QGraphStatWidget::m_axisY. protected . y axis pointer . ◆ m_bufferSize. int sofa::gui::qt::QGraphStatWidget::m_bufferSize. protected . size of the buffers to stored . ◆ m_chart. QChart* sofa::gui::qt::QGraphStatWidget::m_chart. protected . Pointer to the chart Data. . ◆ m_cptStep. int sofa::gui::qt::QGraphStatWidget::m_cptStep. protected . step counter monitored . ◆ m_curves. std::vector< QLineSeries *> sofa::gui::qt::QGraphStatWidget::m_curves. protected . vector of series to be plotted . ◆ m_lastTime. SReal sofa::gui::qt::QGraphStatWidget::m_lastTime. protected . last timestep monitored . ◆ m_node. simulation::Node* sofa::gui::qt::QGraphStatWidget::m_node. protected . pointer to the node monitored . ◆ m_yMax. SReal sofa::gui::qt::QGraphStatWidget::m_yMax. protected . max y axis value stored . ◆ m_yMin. SReal sofa::gui::qt::QGraphStatWidget::m_yMin. protected . min y axis value stored . Constructor details. ◆ QGraphStatWidget(). sofa::gui::qt::QGraphStatWidget::QGraphStatWidget ; (; QWidget * ; parent, . simulation::Node * ; node, . const QString & ; title, . unsigned ; numberOfCurves, . int ; bufferSize . ). ◆ ~QGraphStatWidget(). sofa::gui::qt::QGraphStatWidget::~QGraphStatWidget ; (; ). virtual . Function details. ◆ flushSeries(). void sofa::gui::qt::QGraphStatWidget::flushSeries ; (; ). protected . flush data from series not an",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_graph_stat_widget.html:2298,monitor,monitored,2298,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_graph_stat_widget.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_graph_stat_widget.html,1,['monitor'],['monitored']
Energy Efficiency,"ublic Member Functions; static void draw (const type::Vec3 &center, const Quaternion &orient, const type::Vec3 &length, const type::RGBAColor &colorX=type::RGBAColor::red(), const type::RGBAColor &colorY=type::RGBAColor::green(), const type::RGBAColor &colorZ=type::RGBAColor::red());  ; static void draw (const type::Vec3 &center, const double orient[4][4], const type::Vec3 &length, const type::RGBAColor &colorX=type::RGBAColor::red(), const type::RGBAColor &colorY=type::RGBAColor::green(), const type::RGBAColor &colorZ=type::RGBAColor::red());  ; static void draw (const double *mat, const type::Vec3 &length, const type::RGBAColor &colorX=type::RGBAColor::red(), const type::RGBAColor &colorY=type::RGBAColor::green(), const type::RGBAColor &colorZ=type::RGBAColor::red());  ; static void draw (const type::Vec3 &center, const Quaternion &orient, SReal length=1.0_sreal, const type::RGBAColor &colorX=type::RGBAColor::red(), const type::RGBAColor &colorY=type::RGBAColor::green(), const type::RGBAColor &colorZ=type::RGBAColor::red());  ; static void draw (const type::Vec3 &center, const double orient[4][4], SReal length=1.0_sreal, const type::RGBAColor &colorX=type::RGBAColor::red(), const type::RGBAColor &colorY=type::RGBAColor::green(), const type::RGBAColor &colorZ=type::RGBAColor::red());  ; static void draw (const double *mat, SReal length=1.0_sreal, const type::RGBAColor &colorX=type::RGBAColor::red(), const type::RGBAColor &colorY=type::RGBAColor::green(), const type::RGBAColor &colorZ=type::RGBAColor::red());  ; static void draw (const type::Vec3 &center, const Quaternion &orient, const type::Vec3 &length, const type::Vec4f &colorX=type::Vec4f(1, 0, 0, 1), const type::Vec4f &colorY=type::Vec4f(0, 1, 0, 1), const type::Vec4f &colorZ=type::Vec4f(0, 0, 1, 1))=delete;  ; static void draw (const type::Vec3 &center, const double orient[4][4], const type::Vec3 &length, const type::Vec4f &colorX=type::Vec4f(1, 0, 0, 1), const type::Vec4f &colorY=type::Vec4f(0, 1, 0, 1), cons",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1_axis.html:2777,green,green,2777,api/master/sofa/html/classsofa_1_1gl_1_1_axis.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1_axis.html,1,['green'],['green']
Energy Efficiency,"ulsiveSpringForceField ; (; ). protecteddefault . Function details. ◆ addForce(). template<class DataTypes > . void sofa::component::solidmechanics::spring::RepulsiveSpringForceField< DataTypes >::addForce ; (; const sofa::core::MechanicalParams * ; mparams, . DataVecDeriv & ; f1, . DataVecDeriv & ; f2, . const DataVecCoord & ; x1, . const DataVecCoord & ; x2, . const DataVecDeriv & ; v1, . const DataVecDeriv & ; v2 . ). overridevirtual . Given the current position and velocity states, update the current force vector by computing and adding the forces associated with this ForceField.; If the ForceField can be represented as a matrix, this method computes $ f += B v + K x $; This method must be implemented by the component, and is usually called by the generic ForceField::addForce() method. ; Implements sofa::core::behavior::PairInteractionForceField< DataTypes >. ◆ getPotentialEnergy(). template<class DataTypes > . SReal sofa::component::solidmechanics::spring::RepulsiveSpringForceField< DataTypes >::getPotentialEnergy ; (; const sofa::core::MechanicalParams * ; mparams, . const DataVecCoord & ; x1, . const DataVecCoord & ; x2 . ); const. overridevirtual . Get the potential energy associated to this ForceField.; Used to estimate the total energy of the system by some post-stabilization techniques.; This method must be implemented by the component, and is usually called by the generic ForceField::getPotentialEnergy() method. ; Implements sofa::core::behavior::PairInteractionForceField< DataTypes >. ◆ SOFA_CLASS(). template<class DataTypes > . sofa::component::solidmechanics::spring::RepulsiveSpringForceField< DataTypes >::SOFA_CLASS ; (; SOFA_TEMPLATE(RepulsiveSpringForceField< DataTypes >, DataTypes) ; , . SOFA_TEMPLATE(SpringForceField, DataTypes) ;  . ). Enum details. ◆ anonymous enum. template<class DataTypes > . anonymous enum. EnumeratorN . sofacomponentsolidmechanicsspringRepulsiveSpringForceField; Generated on Mon Nov 11 2024 03:04:32 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_repulsive_spring_force_field.html:27585,energy,energy,27585,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_repulsive_spring_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_repulsive_spring_force_field.html,2,['energy'],['energy']
Energy Efficiency,"unsigned int &offset) override;  ; void addFromBaseVectorDifferentSize (core::VecId dest, const linearalgebra::BaseVector *src, unsigned int &offset) override;  ; Initial transformations accessors.; void setTranslation (SReal dx, SReal dy, SReal dz);  ; void setRotation (SReal rx, SReal ry, SReal rz);  ; void setScale (SReal sx, SReal sy, SReal sz);  ; virtual type::Vec3 getTranslation () const;  ; virtual type::Vec3 getRotation () const;  ; type::Vec3 getScale () const override;  ; Integration related methods; void beginIntegration (SReal dt) override;  Called at the beginning of each integration step. More...;  ; void endIntegration (const core::ExecParams *params, SReal dt) override;  Called at the end of each integration step. More...;  ; void accumulateForce (const core::ExecParams *params, core::VecDerivId f=core::VecDerivId::force()) override;  Add stored external forces to F. More...;  ; void vAvail (const core::ExecParams *params, core::VecCoordId &v) override;  Increment the index of the given VecCoordId, so that all 'allocated' vectors in this state have a lower index. More...;  ; void vAvail (const core::ExecParams *params, core::VecDerivId &v) override;  Increment the index of the given VecDerivId, so that all 'allocated' vectors in this state have a lower index. More...;  ; void vAlloc (const core::ExecParams *params, core::VecCoordId v, const core::VecIdProperties &properties={}) override;  Increment the index of the given MatrixDerivId, so that all 'allocated' vectors in this state have a lower index. More...;  ; void vAlloc (const core::ExecParams *params, core::VecDerivId v, const core::VecIdProperties &properties={}) override;  Allocate a new temporary vector. More...;  ; void vRealloc (const core::ExecParams *params, core::VecCoordId v, const core::VecIdProperties &properties={}) override;  Allocate a new temporary vector. More...;  ; void vRealloc (const core::ExecParams *params, core::VecDerivId v, const core::VecIdProperties &properties={}) ov",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1statecontainer_1_1_mechanical_object.html:14134,allocate,allocated,14134,api/master/sofa/html/classsofa_1_1component_1_1statecontainer_1_1_mechanical_object.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1statecontainer_1_1_mechanical_object.html,1,['allocate'],['allocated']
Energy Efficiency,"usually called by the generic ForceField::getPotentialEnergy() method. ; Implements sofa::core::behavior::PairInteractionForceField< DataTypes >. ◆ getSprings(). template<class DataTypes > . const sofa::type::vector< Spring >& sofa::component::solidmechanics::spring::SpringForceField< DataTypes >::getSprings ; (; ); const. inline . ◆ init(). template<class DataTypes > . void sofa::component::solidmechanics::spring::SpringForceField< DataTypes >::init ; (; void ; ). overridevirtual . Initialization method called at graph creation and modification, during top-down traversal. ; Reimplemented from sofa::core::objectmodel::BaseObject.; Reimplemented in sofa::component::solidmechanics::spring::TriangleBendingSprings< DataTypes >. ◆ initGnuplot(). template<class DataTypes > . void sofa::component::solidmechanics::spring::SpringForceField< DataTypes >::initGnuplot ; (; const std::string ; path). overridevirtual . initialization to export kinetic, potential energy and force intensity to gnuplot files format ; Reimplemented from sofa::core::behavior::BaseInteractionForceField. ◆ initializeTopologyHandler(). template<class DataTypes > . void sofa::component::solidmechanics::spring::SpringForceField< DataTypes >::initializeTopologyHandler ; (; sofa::core::topology::TopologySubsetIndices & ; indices, . core::topology::BaseMeshTopology * ; topology, . sofa::Index ; mstateId . ). protected . ◆ load(). template<class DataTypes > . bool sofa::component::solidmechanics::spring::SpringForceField< DataTypes >::load ; (; const char * ; filename). ◆ reinit(). template<class DataTypes > . void sofa::component::solidmechanics::spring::SpringForceField< DataTypes >::reinit. overridevirtual . Update method called when variables used in precomputation are modified. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ removeSpring(). template<class DataTypes > . void sofa::component::solidmechanics::spring::SpringForceField< DataTypes >::removeSpring ; (; sofa::Index ; idSpring). ◆ setAr",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_spring_force_field.html:39606,energy,energy,39606,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_spring_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_spring_force_field.html,1,['energy'],['energy']
Energy Efficiency,"variables used in precomputation are modified. More...;  ; void addForce (const core::MechanicalParams *mparams, DataVecDeriv &d_f, const DataVecCoord &d_x, const DataVecDeriv &d_v) override;  ; void addDForce (const core::MechanicalParams *mparams, DataVecDeriv &d_df, const DataVecDeriv &d_dx) override;  ; void buildStiffnessMatrix (core::behavior::StiffnessMatrix *matrix) override;  ; void buildDampingMatrix (core::behavior::DampingMatrix *) final;  ; void draw (const core::visual::VisualParams *vparams) override;  Render internal data of this object, for debugging purposes. More...;  ; virtual Real getKs () const;  Getter/setter on the mesh spring stiffness. More...;  ; void setKs (const Real ks);  ; virtual Real getKd () const;  Getter/setter on the mesh spring damping. More...;  ; void setKd (const Real kd);  ; SReal getAccumulatedPotentialEnergy () const;  Getter to global potential energy accumulated. More...;  ; SReal getPotentialEnergy (const core::MechanicalParams *mparams, const DataVecCoord &d_x) const override;  Getter on the potential energy. More...;  ; sofa::core::topology::EdgeData< type::vector< EdgeInformation > > & getEdgeInfo ();  ;  Public Member Functions inherited from sofa::core::behavior::ForceField< DataTypes >;  SOFA_CLASS2 (SOFA_TEMPLATE(ForceField, DataTypes), BaseForceField, SOFA_TEMPLATE(SingleStateAccessor, DataTypes));  ; void addForce (const MechanicalParams *mparams, MultiVecDerivId fId) override;  ; void addDForce (const MechanicalParams *mparams, MultiVecDerivId dfId) override;  ; virtual void addClambda (const MechanicalParams *mparams, DataVecDeriv &df, const DataVecDeriv &lambda, SReal cFactor);  ; virtual void addClambda (const MechanicalParams *, MultiVecDerivId, MultiVecDerivId, SReal);  Accumulate the contribution of the C compliant matrix multiplied by the given Lagrange multipliers lambda vector with the given cFactor coefficient. More...;  ; SReal getPotentialEnergy (const MechanicalParams *mparams) const override;  ; v",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_triangular_bending_springs.html:5917,energy,energy,5917,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_triangular_bending_springs.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_triangular_bending_springs.html,1,['energy'],['energy']
Energy Efficiency,"vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  ;  Static Public Member Functions inherited from sofa::component::linearsystem::TypedMatrixLinearSystem< TMatrix, TVector >; static std::string GetCustomTemplateName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseObject; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  ;  Protected Member Functions inherited from sofa::component::linearsystem::TypedMatrixLinearSystem< TMatrix, TVector >; void preAssembleSystem (const core::MechanicalParams *) override;  ; virtual void associateLocalMatrixToComponents (const core::MechanicalParams *);  ; virtual void allocateSystem ();  ; virtual void resizeVectors (sofa::Size n);  Set the size of RHS and solution to n. More...;  ; void copyLocalVectorToGlobalVector (core::MultiVecDerivId v, TVector *globalVector);  ; SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API void copyLocalVectorToGlobalVector (core::MultiVecDerivId v, GraphScatteredVector *globalVector);  ; void copyLocalVectorToGlobalVector (core::MultiVecDerivId v, GraphScatteredVector *globalVector);  ;  Protected Member Functions inherited from sofa::core::behavior::BaseMatrixLinearSystem;  BaseMatrixLinearSystem ();  ; virtual void assembleSystem (const core::MechanicalParams *);  ; virtual void postAssembleSystem (const core::MechanicalParams *);  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObjec",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsolver_1_1preconditioner_1_1_precomputed_matrix_system.html:15048,allocate,allocateSystem,15048,api/master/sofa/html/classsofa_1_1component_1_1linearsolver_1_1preconditioner_1_1_precomputed_matrix_system.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsolver_1_1preconditioner_1_1_precomputed_matrix_system.html,2,['allocate'],['allocateSystem']
Energy Efficiency,"vector< Vec3d > & getTriangleBaryCoords () const;  ; const type::vector< Vec3d > & getQuadBaryCoords () const;  ; const type::vector< Vec3d > & getTetraBaryCoords () const;  ; const type::vector< Vec3d > & getHexaBaryCoords () const;  ; const type::vector< std::pair< Element, Index > > & getPointSource () const;  ;  Public Member Functions inherited from sofa::core::topology::TopologicalMapping;  SOFA_ABSTRACT_CLASS (TopologicalMapping, objectmodel::BaseObject);  ; virtual void setTopologies (In *from, Out *to);  Specify the input and output models. More...;  ; void setPathInputObject (const std::string &o);  Set the path to the objects mapped in the scene graph. More...;  ; void setPathOutputObject (const std::string &o);  ; In * getFrom ();  Accessor to the INPUT topology of the TopologicalMapping : More...;  ; Out * getTo ();  Accessor to the OUTPUT topology of the TopologicalMapping : More...;  ; virtual void updateTopologicalMappingBottomUp ();  Method called at each topological changes propagation which comes from the OUTPUT topology to adapt the INPUT topology : More...;  ; virtual bool propagateFromInputToOutputModel ();  Return true if this mapping is able to propagate topological changes from input to output model. More...;  ; virtual bool propagateFromOutputToInputModel ();  Return true if this mapping is able to propagate topological changes from output to input model. More...;  ; virtual bool isTheOutputTopologySubdividingTheInputOne ();  return true if the output topology subdivide the input one. (the topology uses the Loc2GlobVec/Glob2LocMap/In2OutMap structs and share the same DOFs) More...;  ; const std::map< Index, Index > & getGlob2LocMap ();  Accessor to index maps : More...;  ; void dumpGlob2LocMap ();  ; void dumpLoc2GlobVec ();  ; virtual bool checkTopologies ();  Method to check the topology mapping maps regarding the upper topology. More...;  ; virtual void getFromIndex (type::vector< Index > &, const Index) const;  ; const std::map< Index, ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1linear_1_1_mesh2_point_topological_mapping.html:6046,adapt,adapt,6046,api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1linear_1_1_mesh2_point_topological_mapping.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1linear_1_1_mesh2_point_topological_mapping.html,1,['adapt'],['adapt']
Energy Efficiency,"verride;  Parse the given description to assign values to this object's fields and potentially other parameters. More...;  ; Vec6 getMomentum (const core::MechanicalParams *, const DataVecCoord &vx, const DataVecDeriv &vv) const;  ; template<class DataTypes , class GeometricalTypes > ; void applyEdgeMassCreation (Index, MassType &EdgeMass, const core::topology::BaseMeshTopology::Edge &, const sofa::type::vector< Index > &, const sofa::type::vector< SReal > &);  ; Read and write access functions in mass information; virtual const sofa::type::vector< MassType > & getVertexMass ();  ; virtual const sofa::type::vector< MassType > & getMassDensity ();  ; virtual const Real & getTotalMass ();  ; virtual void setVertexMass (sofa::type::vector< MassType > vertexMass);  ; virtual void setMassDensity (sofa::type::vector< MassType > massDensity);  ; virtual void setMassDensity (MassType massDensityValue);  ; virtual void setTotalMass (MassType totalMass);  ; virtual void addMassDensity (const sofa::type::vector< Index > &indices, const sofa::type::vector< sofa::type::vector< Index > > &ancestors, const sofa::type::vector< sofa::type::vector< SReal > > &coefs);  ; Check and standard initialization functions from mass information; virtual bool checkVertexMass ();  ; virtual void initFromVertexMass ();  ; virtual bool checkMassDensity ();  ; virtual void initFromMassDensity ();  ; virtual bool checkTotalMass ();  ; virtual void checkTotalMassInit ();  ; virtual void initFromTotalMass ();  ; bool checkEdgeMass ();  ; void initFromVertexAndEdgeMass ();  ;  Public Member Functions inherited from sofa::core::behavior::Mass< DataTypes >;  SOFA_CLASS2 (SOFA_TEMPLATE(Mass, DataTypes), SOFA_TEMPLATE(ForceField, DataTypes), BaseMass);  ; void initGnuplot (const std::string path) override;  initialization to export kinetic and potential energy to gnuplot files format More...;  ; void exportGnuplot (const MechanicalParams *mparams, SReal time) override;  export kinetic and potential energy s",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_mesh_matrix_mass.html:11203,energy,energy,11203,api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_mesh_matrix_mass.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_mesh_matrix_mass.html,1,['energy'],['energy']
Energy Efficiency,"version issues on Windows. /4; ; SOFA - Topic: [SOLVED] Qt version issues on Windows. SOFA - Topic: [SOLVED] Qt version issues on Windows. /quarter-window-display-on-macos; ; SOFA - Topic: Quarter-window display on macOS. /quasi-static-simulation-without-dynamics; ; SOFA - Topic: [SOLVED] Quasi-static simulation, without dynamics. /queries-about-tetrahedralization-with-the-cgal-plugin; . /feed; ; [SOLVED] Queries about tetrahedralization with the CGAL Plugin. – SOFA. SOFA - Topic: [SOLVED] Queries about tetrahedralization with the CGAL Plugin. /question-about-an-object-self-contact-2; ; SOFA - Topic: Question about an object self contact. /question-about-calling-header-of-sofameshcollision-from-sofabasecollision; ; SOFA - Topic: [SOLVED] Question about calling header of SofaMeshCollision from SofaBaseCollision. /question-about-collisionelementiterator; ; SOFA - Topic: Question about CollisionElementIterator. /question-about-neo-hookean-strain-energy-function-implemented-in-sofa; ; SOFA - Topic: Question about Neo-Hookean Strain Energy function implemented in Sofa. /question-about-pre-deformed-bellow-actuator; ; SOFA - Topic: Question about pre-deformed bellow actuator. /question-about-sofa; ; SOFA - Topic: Question about SOFA. /question-about-the-sofarobots-plugin; ; SOFA - Topic: [SOLVED] Question about the SofaRobots Plugin. /question-about-tutorial-for-topologyvolumedifferentmesh; ; SOFA - Topic: [SOLVED] Question about tutorial for TopologyVolumeDifferentMesh. /question-about-variable-meaning-in-collision-component; ; SOFA - Topic: [SOLVED] Question about variable meaning in collision component. /questionns-about-installation; ; SOFA - Topic: Questionns about installation. /question-on-tetrahedronhyperelasticityfemforcefield; ; SOFA - Topic: [SOLVED] Question on TetrahedronHyperelasticityFEMForceField. /questions-about-carvingmanager-omnisofa; . /feed; ; [SOLVED] Questions about CarvingManager & OmniSOFA – SOFA. /page; . /2; ; SOFA - Topic: [SOLVED] Questions abo",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/index-wcopy.html:373180,energy,energy-function-implemented-in-sofa,373180,index-wcopy.html,https://www.sofa-framework.org,https://www.sofa-framework.org/index-wcopy.html,1,['energy'],['energy-function-implemented-in-sofa']
Energy Efficiency,"wSize(). template<class DataTypes > . SReal sofa::component::solidmechanics::spring::SpringForceField< DataTypes >::getArrowSize ; (; ); const. inline . ◆ getDrawMode(). template<class DataTypes > . int sofa::component::solidmechanics::spring::SpringForceField< DataTypes >::getDrawMode ; (; ); const. inline . ◆ getObject1(). template<class DataTypes > . core::behavior::MechanicalState<DataTypes>* sofa::component::solidmechanics::spring::SpringForceField< DataTypes >::getObject1 ; (; ). inline . ◆ getObject2(). template<class DataTypes > . core::behavior::MechanicalState<DataTypes>* sofa::component::solidmechanics::spring::SpringForceField< DataTypes >::getObject2 ; (; ). inline . ◆ getPotentialEnergy(). template<class DataTypes > . SReal sofa::component::solidmechanics::spring::SpringForceField< DataTypes >::getPotentialEnergy ; (; const core::MechanicalParams * ; mparams, . const DataVecCoord & ; x1, . const DataVecCoord & ; x2 . ); const. overridevirtual . Get the potential energy associated to this ForceField.; Used to estimate the total energy of the system by some post-stabilization techniques.; This method must be implemented by the component, and is usually called by the generic ForceField::getPotentialEnergy() method. ; Implements sofa::core::behavior::PairInteractionForceField< DataTypes >. ◆ getSprings(). template<class DataTypes > . const sofa::type::vector< Spring >& sofa::component::solidmechanics::spring::SpringForceField< DataTypes >::getSprings ; (; ); const. inline . ◆ init(). template<class DataTypes > . void sofa::component::solidmechanics::spring::SpringForceField< DataTypes >::init ; (; void ; ). overridevirtual . Initialization method called at graph creation and modification, during top-down traversal. ; Reimplemented from sofa::core::objectmodel::BaseObject.; Reimplemented in sofa::component::solidmechanics::spring::TriangleBendingSprings< DataTypes >. ◆ initGnuplot(). template<class DataTypes > . void sofa::component::solidmechanics::spring:",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_spring_force_field.html:38459,energy,energy,38459,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_spring_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_spring_force_field.html,1,['energy'],['energy']
Energy Efficiency,"wSparseMatrix. Preconditioncrs must be compressed . ◆ createBlock(). template<class InDataTypes , class OutDataTypes > . void sofa::linearalgebra::EigenSparseMatrix< InDataTypes, OutDataTypes >::createBlock ; (; unsigned ; column, . const Block & ; b . ). inline . Create a block in the current row, which must be previously initialized using beginBlockRow(unsigned row).; If the blocks are NOT created in column order, call endBlockRow(). If the blocks are given in column order, endSortedBlockRow() will be more efficient.; The blocks are not actually created in the matrix until method endBlockRow()/endSortedBlockRow() is called.; Warningthe block must NOT already exist . ◆ endBlockRow(). template<class InDataTypes , class OutDataTypes > . void sofa::linearalgebra::EigenSparseMatrix< InDataTypes, OutDataTypes >::endBlockRow ; (; ). inline . Finalize the creation of the current block row. See alsobeginBlockRow(unsigned row) . createBlock( unsigned column, const Block& b ); If the block have been given in column order, endSortedBlockRow() is more efficient. . ◆ endSortedBlockRow(). template<class InDataTypes , class OutDataTypes > . void sofa::linearalgebra::EigenSparseMatrix< InDataTypes, OutDataTypes >::endSortedBlockRow ; (; ). inline . Finalize the creation of the current block row with blocks given in column order. See alsobeginBlockRow(unsigned row) . createBlock( unsigned column, const Block& b ) in column order . ◆ insertBackBlock(). template<class InDataTypes , class OutDataTypes > . void sofa::linearalgebra::EigenSparseMatrix< InDataTypes, OutDataTypes >::insertBackBlock ; (; unsigned ; row, . unsigned ; col, . const Block & ; b . ). inline . Insert ASAP in the compressed matrix. There must be no value at this place already. Warningbasically works only if there is only one block on the row . empty rows should be created with a call to beginBlockRow + endSortedBlockRow . ◆ map() [1/2]. template<class InDataTypes , class OutDataTypes > . template<class VecDeriv > .",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html:24272,efficient,efficient,24272,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html,1,['efficient'],['efficient']
Energy Efficiency,"y (const core::MechanicalParams *, const DataVecCoord &) const override;  ; SReal getPotentialEnergy (const core::MechanicalParams *) const override;  Mgx. More...;  ; void addDForce (const core::MechanicalParams *mparams, DataVecDeriv &df, const DataVecDeriv &dx) override;  ; SReal getElementMass (Index index) const override;  Get the mass relative to the DOF at index. More...;  ; virtual void initTextures ();  ; virtual void update ();  ; void setDensity (Real d);  ; Real getDensity ();  ; void addKToMatrix (sofa::linearalgebra::BaseMatrix *matrix, SReal kFact, unsigned int &offset) override;  ;  Public Member Functions inherited from sofa::core::behavior::Mass< DataTypes >;  SOFA_CLASS2 (SOFA_TEMPLATE(Mass, DataTypes), SOFA_TEMPLATE(ForceField, DataTypes), BaseMass);  ; void initGnuplot (const std::string path) override;  initialization to export kinetic and potential energy to gnuplot files format More...;  ; void exportGnuplot (const MechanicalParams *mparams, SReal time) override;  export kinetic and potential energy state at ""time"" to a gnuplot file More...;  ; void addGravityToV (const MechanicalParams *mparams, MultiVecDerivId) override;  perform v += dt*g operation. Used if mass wants to added G separately from the other forces to v. More...;  ; SReal getElementMass (sofa::Index) const override;  recover the mass of an element More...;  ; void getElementMass (sofa::Index index, linearalgebra::BaseMatrix *m) const override;  Get the matrix relative to the DOF at index. More...;  ; bool insertInNode (objectmodel::BaseNode *node) override;  ; bool removeInNode (objectmodel::BaseNode *node) override;  ; void addMDx (const MechanicalParams *mparams, MultiVecDerivId fid, SReal factor) override;  f += factor M dx More...;  ; void accFromF (const MechanicalParams *mparams, MultiVecDerivId aid) override;  ; void addDForce (const MechanicalParams *, DataVecDeriv &, const DataVecDeriv &) override;  Mass forces (gravity) often have null derivative. More...;  ; void ad",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1nonuniform_1_1_hexahedron_composite_f_e_m_force_field_and_mass.html:10829,energy,energy,10829,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1nonuniform_1_1_hexahedron_composite_f_e_m_force_field_and_mass.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1nonuniform_1_1_hexahedron_composite_f_e_m_force_field_and_mass.html,1,['energy'],['energy']
Energy Efficiency,"yElasticityTensor(). template<class DataTypes > . void sofa::component::solidmechanics::fem::hyperelastic::material::MooneyRivlin< DataTypes >::applyElasticityTensor ; (; StrainInformation< DataTypes > * ; , . const MaterialParameters< DataTypes > & ; , . const MatrixSym & ; , . MatrixSym & ;  . ). inlineoverridevirtual . computes the Elasticity Tensor of the current configuration ; Reimplemented from sofa::component::solidmechanics::fem::hyperelastic::material::HyperelasticMaterial< DataTypes >. ◆ deriveSPKTensor(). template<class DataTypes > . void sofa::component::solidmechanics::fem::hyperelastic::material::MooneyRivlin< DataTypes >::deriveSPKTensor ; (; StrainInformation< DataTypes > * ; , . const MaterialParameters< DataTypes > & ; , . MatrixSym & ;  . ). inlineoverridevirtual . computes the second Piola Kirchhoff stress tensor of the current configuration ; Reimplemented from sofa::component::solidmechanics::fem::hyperelastic::material::HyperelasticMaterial< DataTypes >. ◆ ElasticityTensor(). template<class DataTypes > . void sofa::component::solidmechanics::fem::hyperelastic::material::MooneyRivlin< DataTypes >::ElasticityTensor ; (; StrainInformation< DataTypes > * ; sinfo, . const MaterialParameters< DataTypes > & ; param, . Matrix6 & ; outputTensor . ). inlineoverridevirtual . Reimplemented from sofa::component::solidmechanics::fem::hyperelastic::material::HyperelasticMaterial< DataTypes >. ◆ getStrainEnergy(). template<class DataTypes > . Real sofa::component::solidmechanics::fem::hyperelastic::material::MooneyRivlin< DataTypes >::getStrainEnergy ; (; StrainInformation< DataTypes > * ; , . const MaterialParameters< DataTypes > & ;  . ). inlineoverridevirtual . returns the strain energy of the current configuration ; Reimplemented from sofa::component::solidmechanics::fem::hyperelastic::material::HyperelasticMaterial< DataTypes >. sofacomponentsolidmechanicsfemhyperelasticmaterialMooneyRivlin; Generated on Mon Nov 11 2024 03:02:25 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_mooney_rivlin.html:4045,energy,energy,4045,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_mooney_rivlin.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_mooney_rivlin.html,1,['energy'],['energy']
Energy Efficiency,"yTensor(). template<class DataTypes > . virtual void sofa::component::solidmechanics::fem::hyperelastic::material::BoyceAndArruda< DataTypes >::applyElasticityTensor ; (; StrainInformation< DataTypes > * ; , . const MaterialParameters< DataTypes > & ; , . const MatrixSym & ; , . MatrixSym & ;  . ). inlinevirtual . computes the Elasticity Tensor of the current configuration ; Reimplemented from sofa::component::solidmechanics::fem::hyperelastic::material::HyperelasticMaterial< DataTypes >. ◆ deriveSPKTensor(). template<class DataTypes > . virtual void sofa::component::solidmechanics::fem::hyperelastic::material::BoyceAndArruda< DataTypes >::deriveSPKTensor ; (; StrainInformation< DataTypes > * ; , . const MaterialParameters< DataTypes > & ; , . MatrixSym & ;  . ). inlinevirtual . computes the second Piola Kirchhoff stress tensor of the current configuration ; Reimplemented from sofa::component::solidmechanics::fem::hyperelastic::material::HyperelasticMaterial< DataTypes >. ◆ ElasticityTensor(). template<class DataTypes > . virtual void sofa::component::solidmechanics::fem::hyperelastic::material::BoyceAndArruda< DataTypes >::ElasticityTensor ; (; StrainInformation< DataTypes > * ; sinfo, . const MaterialParameters< DataTypes > & ; param, . Matrix6 & ; outputTensor . ). inlinevirtual . Reimplemented from sofa::component::solidmechanics::fem::hyperelastic::material::HyperelasticMaterial< DataTypes >. ◆ getStrainEnergy(). template<class DataTypes > . virtual Real sofa::component::solidmechanics::fem::hyperelastic::material::BoyceAndArruda< DataTypes >::getStrainEnergy ; (; StrainInformation< DataTypes > * ; , . const MaterialParameters< DataTypes > & ;  . ). inlinevirtual . returns the strain energy of the current configuration ; Reimplemented from sofa::component::solidmechanics::fem::hyperelastic::material::HyperelasticMaterial< DataTypes >. sofacomponentsolidmechanicsfemhyperelasticmaterialBoyceAndArruda; Generated on Mon Nov 11 2024 03:00:51 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_boyce_and_arruda.html:4059,energy,energy,4059,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_boyce_and_arruda.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_boyce_and_arruda.html,1,['energy'],['energy']
Energy Efficiency,"yTensor(). template<class DataTypes > . void sofa::component::solidmechanics::fem::hyperelastic::material::VerondaWestman< DataTypes >::applyElasticityTensor ; (; StrainInformation< DataTypes > * ; , . const MaterialParameters< DataTypes > & ; , . const MatrixSym & ; , . MatrixSym & ;  . ). inlineoverridevirtual . computes the Elasticity Tensor of the current configuration ; Reimplemented from sofa::component::solidmechanics::fem::hyperelastic::material::HyperelasticMaterial< DataTypes >. ◆ deriveSPKTensor(). template<class DataTypes > . void sofa::component::solidmechanics::fem::hyperelastic::material::VerondaWestman< DataTypes >::deriveSPKTensor ; (; StrainInformation< DataTypes > * ; , . const MaterialParameters< DataTypes > & ; , . MatrixSym & ;  . ). inlineoverridevirtual . computes the second Piola Kirchhoff stress tensor of the current configuration ; Reimplemented from sofa::component::solidmechanics::fem::hyperelastic::material::HyperelasticMaterial< DataTypes >. ◆ ElasticityTensor(). template<class DataTypes > . void sofa::component::solidmechanics::fem::hyperelastic::material::VerondaWestman< DataTypes >::ElasticityTensor ; (; StrainInformation< DataTypes > * ; sinfo, . const MaterialParameters< DataTypes > & ; param, . Matrix6 & ; outputTensor . ). inlineoverridevirtual . Reimplemented from sofa::component::solidmechanics::fem::hyperelastic::material::HyperelasticMaterial< DataTypes >. ◆ getStrainEnergy(). template<class DataTypes > . Real sofa::component::solidmechanics::fem::hyperelastic::material::VerondaWestman< DataTypes >::getStrainEnergy ; (; StrainInformation< DataTypes > * ; , . const MaterialParameters< DataTypes > & ;  . ). inlineoverridevirtual . returns the strain energy of the current configuration ; Reimplemented from sofa::component::solidmechanics::fem::hyperelastic::material::HyperelasticMaterial< DataTypes >. sofacomponentsolidmechanicsfemhyperelasticmaterialVerondaWestman; Generated on Mon Nov 11 2024 03:02:25 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_veronda_westman.html:4069,energy,energy,4069,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_veronda_westman.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_veronda_westman.html,1,['energy'],['energy']
Energy Efficiency,"ynomial_LD< Real, N > Class Template Reference . #include <Polynomial_LD.h>; A generic polynomial with N variables of type Real. A polynomial is a list composed of several monomials. ; More...; Detailed Description; template<typename Real, unsigned int N>; class sofa::helper::Polynomial_LD< Real, N >; A generic polynomial with N variables of type Real. A polynomial is a list composed of several monomials. . Public Attributes; unsigned int nbOfMonomial;  ; MonomialsList listOfMonoMial;  . Public Member Functions;  Polynomial_LD ();  Default constructor. More...;  ;  Polynomial_LD (const Polynomial_LD< Real, N > &a);  Copy constructor. More...;  ;  Polynomial_LD (const Monomial_LD< Real, N > &a);  ; Polynomial_LD< Real, N > & operator= (const Polynomial_LD< Real, N > &b);  Assign operator. More...;  ;  Polynomial_LD (const unsigned int nbofTerm,...);  setting of Polynomial More...;  ; void Set (const unsigned int nbofTerm,...);  ; int degree ();  ; bool operator== (const Polynomial_LD< Real, N > &b) const;  Return true if a and b has the same powers. More...;  ; bool operator!= (const Polynomial_LD< Real, N > &b) const;  ; Polynomial_LD< Real, N > & operator*= (const Real &alpha);  ; Polynomial_LD< Real, N > & operator/= (const Real &alpha);  ; Polynomial_LD< Real, N > & operator+= (const Monomial_LD< Real, N > &b);  ; Polynomial_LD< Real, N > & operator+= (const Polynomial_LD< Real, N > &b);  ; Polynomial_LD< Real, N > & operator-= (const Polynomial_LD< Real, N > &b);  ; Polynomial_LD< Real, N > operator+ () const;  ; Polynomial_LD< Real, N > operator- () const;  ; Polynomial_LD< Real, N > & operator*= (const Polynomial_LD< Real, N > &b);  ; Polynomial_LD< Real, N > operator* (const Real &alpha);  ; Polynomial_LD< Real, N > operator/ (const Real &alpha);  ; Polynomial_LD< Real, N > operator+ (const Monomial_LD< Real, N > &a);  ; Polynomial_LD< Real, N > operator+ (const Polynomial_LD< Real, N > &a);  ; Polynomial_LD< Real, N > operator- (const Polynomial_LD< Real, N >",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_polynomial___l_d.html:1337,power,powers,1337,api/master/sofa/html/classsofa_1_1helper_1_1_polynomial___l_d.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_polynomial___l_d.html,1,['power'],['powers']
Energy Efficiency,"ypes >:. [legend]. Protected Attributes; Data< Real > d_linesStiffness;  Stiffness for the Lines. More...;  ; Data< Real > d_linesDamping;  Damping for the Lines. More...;  ; Data< Real > d_trianglesStiffness;  Stiffness for the Triangles. More...;  ; Data< Real > d_trianglesDamping;  Damping for the Triangles. More...;  ; Data< Real > d_quadsStiffness;  Stiffness for the Quads. More...;  ; Data< Real > d_quadsDamping;  Damping for the Quads. More...;  ; Data< Real > d_tetrahedraStiffness;  Stiffness for the Tetrahedra. More...;  ; Data< Real > d_tetrahedraDamping;  Damping for the Tetrahedra. More...;  ; Data< Real > d_cubesStiffness;  Stiffness for the Cubes. More...;  ; Data< Real > d_cubesDamping;  Damping for the Cubes. More...;  ; Data< bool > d_noCompression;  Only consider elongation. More...;  ; Data< Real > d_drawMinElongationRange;  Min range of elongation (red eongation - blue neutral - green compression) More...;  ; Data< Real > d_drawMaxElongationRange;  Max range of elongation (red eongation - blue neutral - green compression) More...;  ; Data< Real > d_drawSpringSize;  Size of drawed lines. More...;  ; Data< type::Vec< 2, sofa::Index > > d_localRange;  optional range of local DOF indices. Any computation involving only indices outside of this range are discarded (useful for parallelization using mesh partitioning) More...;  ; SingleLink< MeshSpringForceField< DataTypes >, sofa::core::topology::BaseMeshTopology, BaseLink::FLAG_STOREPATH|BaseLink::FLAG_STRONGLINK > l_topology;  Link to be set to the topology container in the component graph. More...;  ;  Protected Attributes inherited from sofa::component::solidmechanics::spring::SpringForceField< DataTypes >; sofa::type::vector< Mat > dfdx;  ; core::objectmodel::DataFileName fileSprings;  ; core::objectmodel::DataCallback c_springCallBack;  ; bool areSpringIndicesDirty { true };  ; bool maskInUse;  ; Real m_potentialEnergy;  ; SpringForceFieldInternalData< DataTypes > data;  ; std::array< sofa::core::t",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_mesh_spring_force_field.html:1559,green,green,1559,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_mesh_spring_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_mesh_spring_force_field.html,1,['green'],['green']
Energy Efficiency," ; bool canIntersect (core::CollisionElementIterator elem1, core::CollisionElementIterator elem2) override=delete;  ; int intersect (core::CollisionElementIterator elem1, core::CollisionElementIterator elem2, core::collision::DetectionOutputVector *contacts) override=delete;  ;  Public Member Functions inherited from sofa::core::collision::ElementIntersector; virtual ~ElementIntersector ();  . Attribute details. ◆ intersector. core::collision::ElementIntersector* sofa::component::collision::detection::algorithm::MirrorIntersector::intersector { nullptr }. Function details. ◆ beginIntersect(). int sofa::component::collision::detection::algorithm::MirrorIntersector::beginIntersect ; (; core::CollisionModel * ; model1, . core::CollisionModel * ; model2, . core::collision::DetectionOutputVector *& ; contacts . ). inlineoverridevirtual . Begin intersection tests between two collision models. Return the number of contacts written in the contacts vector. If the given contacts vector is nullptr, then this method should allocate it. ; Implements sofa::core::collision::ElementIntersector. ◆ canIntersect() [1/2]. bool sofa::component::collision::detection::algorithm::MirrorIntersector::canIntersect ; (; core::CollisionElementIterator ; elem1, . core::CollisionElementIterator ; elem2 . ). overridevirtualdelete . Reimplemented from sofa::core::collision::ElementIntersector. ◆ canIntersect() [2/2]. bool sofa::component::collision::detection::algorithm::MirrorIntersector::canIntersect ; (; core::CollisionElementIterator ; elem1, . core::CollisionElementIterator ; elem2, . const core::collision::Intersection * ; currentIntersection . ). inlineoverridevirtual . Test if 2 elements can collide. Note that this can be conservative (i.e. return true even when no collision is present) ; Implements sofa::core::collision::ElementIntersector. ◆ endIntersect(). int sofa::component::collision::detection::algorithm::MirrorIntersector::endIntersect ; (; core::CollisionModel * ; model1, . core::C",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_mirror_intersector.html:2672,allocate,allocate,2672,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_mirror_intersector.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_mirror_intersector.html,1,['allocate'],['allocate']
Energy Efficiency," ; step). inlineprotected . ◆ internalCheck() [2/2]. bool sofa::component::mapping::linear::Mesh2PointTopologicalMapping::internalCheck ; (; const char * ; step, . const type::fixed_array< size_t, NB_ELEMENTS > & ; nbInputRemoved . ). protected . Check consistency of internal maps and output topology. . ◆ removeInput(). void sofa::component::mapping::linear::Mesh2PointTopologicalMapping::removeInput ; (; Element ; elem, . const sofa::type::vector< Index > & ; tab . ). protected . ◆ removeOutputPoints(). void sofa::component::mapping::linear::Mesh2PointTopologicalMapping::removeOutputPoints ; (; const sofa::type::vector< Index > & ; tab). protected . ◆ renumberInput(). void sofa::component::mapping::linear::Mesh2PointTopologicalMapping::renumberInput ; (; Element ; elem, . const sofa::type::vector< Index > & ; index . ). protected . ◆ SOFA_CLASS(). sofa::component::mapping::linear::Mesh2PointTopologicalMapping::SOFA_CLASS ; (; Mesh2PointTopologicalMapping ; , . sofa::core::topology::TopologicalMapping ;  . ). ◆ swapInput(). void sofa::component::mapping::linear::Mesh2PointTopologicalMapping::swapInput ; (; Element ; elem, . Index ; i1, . Index ; i2 . ). protected . ◆ swapOutputPoints(). void sofa::component::mapping::linear::Mesh2PointTopologicalMapping::swapOutputPoints ; (; Index ; i1, . Index ; i2, . bool ; removeLast = false . ). protected . ◆ updateTopologicalMappingTopDown(). void sofa::component::mapping::linear::Mesh2PointTopologicalMapping::updateTopologicalMappingTopDown ; (; ). overridevirtual . Method called at each topological changes propagation which comes from the INPUT topology to adapt the OUTPUT topology : ; Implements sofa::core::topology::TopologicalMapping. Enum details. ◆ Element. enum sofa::component::mapping::linear::Mesh2PointTopologicalMapping::Element. EnumeratorPOINT ; EDGE ; TRIANGLE ; QUAD ; TETRA ; HEXA ; NB_ELEMENTS . sofacomponentmappinglinearMesh2PointTopologicalMapping; Generated on Mon Nov 11 2024 02:50:45 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1linear_1_1_mesh2_point_topological_mapping.html:29512,adapt,adapt,29512,api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1linear_1_1_mesh2_point_topological_mapping.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1linear_1_1_mesh2_point_topological_mapping.html,1,['adapt'],['adapt']
Energy Efficiency," ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *)=delete;  ; virtual void processNodeBottomUp (simulation::Node *node, LocalStorage *)=delete;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Protected Member Functions; void sequentialSolve (simulation::Node *node);  Function called if the solvers run sequentially. More...;  ; void parallelSolve (simulation::Node *node);  ; void initializeTaskScheduler ();  Initialize the task scheduler if it is not done already. More...;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visi",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_solve_visitor.html:4495,schedul,scheduler,4495,api/master/sofa/html/classsofa_1_1simulation_1_1_solve_visitor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_solve_visitor.html,1,['schedul'],['scheduler']
Energy Efficiency," Ids of position vector. More...;  ; ConstMultiVecDerivId m_v;  Ids of velocity vector. More...;  ; ConstMultiVecDerivId m_f;  Ids of force vector. More...;  ; ConstMultiVecDerivId m_dx;  Ids of dx vector (for implicit schemes) More...;  ; ConstMultiVecDerivId m_df;  Ids of df vector (for implicit schemes) More...;  ; SReal m_mFactor;  Mass matrix contributions factor (for implicit schemes) More...;  ; SReal m_bFactor;  Damping matrix contributions factor (for implicit schemes) More...;  ; SReal m_kFactor;  Stiffness matrix contributions factor (for implicit schemes) More...;  ; bool m_supportOnlySymmetricMatrix;  True if a symmetric matrix is assumed in the left-hand term of the dynamics equations, for solvers specialized on symmetric matrices. More...;  . Public Member Functions; bool symmetricMatrix () const =delete;  ; bool supportOnlySymmetricMatrix () const;  Symmetric matrix flag, for solvers specialized on symmetric matrices. More...;  ; bool energy () const;  Should the kinematic and potential energies be computed ? More...;  ;  MechanicalParams (const sofa::core::ExecParams &p=sofa::core::ExecParams());  Constructor, initializing all VecIds to default values, implicit and energy flags to false. More...;  ;  MechanicalParams (const MechanicalParams &mparams);  Copy Constructor. More...;  ; MechanicalParams * setExecParams (const core::ExecParams *params);  ; MechanicalParams * operator= (const MechanicalParams &mparams);  ; Flags and parameters getters; SReal dt () const;  Time step. More...;  ; bool implicit () const;  Is the time integration scheme implicit ? More...;  ; SReal mFactor () const;  Mass matrix contributions factor (for implicit schemes) More...;  ; SReal bFactor () const;  Damping matrix contributions factor (for implicit schemes) More...;  ; SReal kFactor () const;  Stiffness matrix contributions factor (for implicit schemes) More...;  ; Rayleigh Damping D = rayleighStiffness*K - rayleighMass*M; SReal kFactorIncludingRayleighDamping (SReal r",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_mechanical_params.html:1834,energy,energy,1834,api/master/sofa/html/classsofa_1_1core_1_1_mechanical_params.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_mechanical_params.html,1,['energy'],['energy']
Energy Efficiency," blockMultTranspose (const TBlock &blockA, const TBlock &blockB);  ; template<typename TBlock2 , typename TPolicy2 > ; void transposeFullRows (CompressedRowSparseMatrixGeneric< TBlock2, TPolicy2 > &res) const;  Transpose the matrix into res, works only for 3 array variant (""full rows"") matrices, ie which can be expressed using the rowBegin, colsIndex and colsValue arrays solely. More...;  ; template<typename RB , typename RP , typename MB , typename MP > ; void mul (CompressedRowSparseMatrixGeneric< RB, RP > &res, const CompressedRowSparseMatrixGeneric< MB, MP > &m) const;  ; template<typename RB , typename RP , typename MB , typename MP > ; void mulTranspose (CompressedRowSparseMatrixGeneric< RB, RP > &res, const CompressedRowSparseMatrixGeneric< MB, MP > &m) const;  . Attribute details. ◆ btemp. template<typename TBlock , typename TPolicy = CRSDefaultPolicy> . VecIndexedBlock sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >::btemp. Additional storage to make block insertion more efficient. ; unsorted blocks and their indices . ◆ colsIndex. template<typename TBlock , typename TPolicy = CRSDefaultPolicy> . VecIndex sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >::colsIndex. column indices of all the non-empty blocks, sorted by increasing row index and column index . ◆ colsValue. template<typename TBlock , typename TPolicy = CRSDefaultPolicy> . VecBlock sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >::colsValue. values of the non-empty blocks, in the same order as in colsIndex . ◆ nBlockCol. template<typename TBlock , typename TPolicy = CRSDefaultPolicy> . Index sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >::nBlockCol. Mathematical size of the matrix, in blocks. . ◆ nBlockRow. template<typename TBlock , typename TPolicy = CRSDefaultPolicy> . Index sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >::nBlockRow. Size. . ◆ NC. template<typename TBlock",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_generic.html:10181,efficient,efficient,10181,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_generic.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_generic.html,1,['efficient'],['efficient']
Energy Efficiency," executeVisitor;  ; SReal result;  Result of latest v_dot operation. More...;  ;  Protected Attributes inherited from sofa::core::behavior::BaseVectorOperations; const core::ExecParams * params;  ; core::objectmodel::BaseContext * ctx;  ; SReal result;  . Public Member Functions;  VectorOperations (const sofa::core::ExecParams *params, sofa::core::objectmodel::BaseContext *ctx, bool precomputedTraversalOrder=false);  ; void v_alloc (sofa::core::MultiVecCoordId &v, const core::VecIdProperties &properties={}) override;  Allocate a temporary vector. More...;  ; void v_alloc (sofa::core::MultiVecDerivId &v, const core::VecIdProperties &properties={}) override;  ; void v_free (sofa::core::MultiVecCoordId &id, bool interactionForceField=false, bool propagate=false) override;  Free a previously allocated temporary vector. More...;  ; void v_free (sofa::core::MultiVecDerivId &id, bool interactionForceField=false, bool propagate=false) override;  ; void v_realloc (sofa::core::MultiVecCoordId &id, bool interactionForceField=false, bool propagate=false, const core::VecIdProperties &properties={}) override;  keep already allocated vectors and allocates others. If interactionForceField, also allocates mechanical states linked by an InteractionForceField More...;  ; void v_realloc (sofa::core::MultiVecDerivId &id, bool interactionForceField=false, bool propagate=false, const core::VecIdProperties &properties={}) override;  ; void v_clear (core::MultiVecId v) override;  v=0 More...;  ; void v_eq (core::MultiVecId v, core::ConstMultiVecId a) override;  v=a More...;  ; void v_eq (core::MultiVecId v, core::ConstMultiVecId a, SReal f) override;  v=f*a More...;  ; void v_peq (core::MultiVecId v, core::ConstMultiVecId a, SReal f=1.0) override;  v+=f*a More...;  ; void v_teq (core::MultiVecId v, SReal f) override;  v*=f More...;  ; void v_op (core::MultiVecId v, core::ConstMultiVecId a, core::ConstMultiVecId b, SReal f=1.0) override;  v=a+b*f More...;  ; void v_multiop (const core::behav",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_vector_operations.html:1558,allocate,allocated,1558,api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_vector_operations.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_vector_operations.html,2,['allocate'],"['allocated', 'allocates']"
Energy Efficiency,– SOFA. SOFA - Topic Tag: connect. /connect-sofa; . /feed; ; Connect SOFA – SOFA. SOFA - Topic Tag: Connect SOFA. /constraint; . /feed; ; constraint – SOFA. SOFA - Topic Tag: constraint. /constraint-forces; . /feed; ; Constraint Forces – SOFA. SOFA - Topic Tag: Constraint Forces. /constraintresolution-h; . /feed; ; ConstraintResolution.h – SOFA. SOFA - Topic Tag: ConstraintResolution.h. /constraints; . /feed; ; constraints – SOFA. SOFA - Topic Tag: constraints. /constraint-solver; . /feed; ; Constraint Solver – SOFA. SOFA - Topic Tag: Constraint Solver. /contact; . /feed; ; contact – SOFA. SOFA - Topic Tag: contact. /contact-force; . /feed; ; contact force – SOFA. SOFA - Topic Tag: contact force. /contactlistener; . /feed; ; contactlistener – SOFA. SOFA - Topic Tag: contactlistener. /contain; . /feed; ; contain – SOFA. SOFA - Topic Tag: contain. /continuum-robots-beam-adaptater-constraints; . /feed; ; continuum robots; beam adaptater; constraints – SOFA. SOFA - Topic Tag: continuum robots; beam adaptater; constraints. /control; . /feed; ; control – SOFA. SOFA - Topic Tag: control. /controller; . /feed; ; Controller – SOFA. SOFA - Topic Tag: Controller. /control-xml-variables-in-c-or-python; . /feed; ; Control xml variables in C++ or Python. – SOFA. SOFA - Topic Tag: Control xml variables in C++ or Python. /coulomb; . /feed; ; coulomb – SOFA. SOFA - Topic Tag: coulomb. /cpp-controller; . /feed; ; Cpp controller – SOFA. SOFA - Topic Tag: Cpp controller. /cpp-make-error; . /feed; ; cpp make error – SOFA. SOFA - Topic Tag: cpp make error. /cpp-plugins; . /feed; ; cpp plugins – SOFA. SOFA - Topic Tag: cpp plugins. /crash; . /feed; ; crash – SOFA. SOFA - Topic Tag: crash. /crevice; . /feed; ; crevice – SOFA. SOFA - Topic Tag: crevice. /cube; . /feed; ; cube – SOFA. SOFA - Topic Tag: cube. /cuda; . /feed; ; Cuda – SOFA. SOFA - Topic Tag: Cuda. /cuda-benchmark; . /feed; ; CUDA Benchmark – SOFA. SOFA - Topic Tag: CUDA Benchmark. /cutfem; . /feed; ; cutFEM – SOFA. SOFA - Topic,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/index-wcopy.html:437555,adapt,adaptater,437555,index-wcopy.html,https://www.sofa-framework.org,https://www.sofa-framework.org/index-wcopy.html,1,['adapt'],['adaptater']
Energy Efficiency,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::component::solidmechanics::spring::SpringForceField< DataTypes >::SpringForce Member List . This is the complete list of members for sofa::component::solidmechanics::spring::SpringForceField< DataTypes >::SpringForce, including all inherited members. dForce_dXsofa::component::solidmechanics::spring::SpringForceField< DataTypes >::SpringForce; DPos typedefsofa::component::solidmechanics::spring::SpringForceField< DataTypes >::SpringForce; energysofa::component::solidmechanics::spring::SpringForceField< DataTypes >::SpringForce; forcesofa::component::solidmechanics::spring::SpringForceField< DataTypes >::SpringForce. Generated on Mon Nov 11 2024 03:05:12 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1solidmechanics_1_1spring_1_1_spring_force_field_1_1_spring_force-members.html:548,energy,energysofa,548,api/master/sofa/html/structsofa_1_1component_1_1solidmechanics_1_1spring_1_1_spring_force_field_1_1_spring_force-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1solidmechanics_1_1spring_1_1_spring_force_field_1_1_spring_force-members.html,1,['energy'],['energysofa']
Energy Efficiency,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::objectmodel::AspectBuffer Member List . This is the complete list of members for sofa::core::objectmodel::AspectBuffer, including all inherited members. allocate()sofa::core::objectmodel::AspectBuffer; AspectBuffer(AspectPool &pool)sofa::core::objectmodel::AspectBuffer; AtomicInt typedefsofa::core::objectmodel::AspectBufferprotected; availableIDsofa::core::objectmodel::AspectBufferprotected; clear()sofa::core::objectmodel::AspectBuffer; latestIDsofa::core::objectmodel::AspectBufferprotected; poolsofa::core::objectmodel::AspectBufferprotected; pop(AspectRef &id)sofa::core::objectmodel::AspectBuffer; push(AspectRef id)sofa::core::objectmodel::AspectBuffer; ~AspectBuffer()sofa::core::objectmodel::AspectBuffer. Generated on Mon Nov 11 2024 03:15:52 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_buffer-members.html:265,allocate,allocate,265,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_buffer-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_buffer-members.html,1,['allocate'],['allocate']
Energy Efficiency,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::objectmodel::AspectPool Member List . This is the complete list of members for sofa::core::objectmodel::AspectPool, including all inherited members. allocate()sofa::core::objectmodel::AspectPool; Aspect classsofa::core::objectmodel::AspectPoolfriend; AspectPool()sofa::core::objectmodel::AspectPool; getAspect(int id)sofa::core::objectmodel::AspectPool; getAspectCounter(int id) constsofa::core::objectmodel::AspectPoolinline; nbAspects() constsofa::core::objectmodel::AspectPoolinline; release(int id)sofa::core::objectmodel::AspectPoolprotected; setReleaseCallback(const std::function< void(int)> &callback)sofa::core::objectmodel::AspectPool; ~AspectPool()sofa::core::objectmodel::AspectPool. Generated on Mon Nov 11 2024 03:15:52 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_pool-members.html:261,allocate,allocate,261,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_pool-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_pool-members.html,1,['allocate'],['allocate']
Energy Efficiency,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::helper::LCP Member List . This is the complete list of members for sofa::helper::LCP, including all inherited members. allocate(unsigned int maxConst)sofa::helper::LCP; errorsofa::helper::LCP; getD(void)sofa::helper::LCPinline; getDfree(void)sofa::helper::LCPinline; getDim(void)sofa::helper::LCPinline; getF(void)sofa::helper::LCPinline; getF_1(void)sofa::helper::LCPinline; getMaxConst(void)sofa::helper::LCPinline; getMaxIter(void)sofa::helper::LCPinline; getMu(void)sofa::helper::LCPinline; getTolerance(void)sofa::helper::LCPinline; getW(void)sofa::helper::LCPinline; itsofa::helper::LCP; LCP()sofa::helper::LCP; reset(void)sofa::helper::LCP; setDim(unsigned int nbC)sofa::helper::LCPinline; setLCP(unsigned int input_dim, SReal *input_dfree, SReal **input_W, SReal *input_f, SReal &input_mu, SReal &input_tol, int input_numItMax)sofa::helper::LCP; setNumItMax(int input_numItMax)sofa::helper::LCPinline; setTol(SReal input_tol)sofa::helper::LCPinline; solveNLCP(bool convergenceTest, std::vector< SReal > *residuals=nullptr, std::vector< SReal > *violations=nullptr)sofa::helper::LCP; useInitialGuess(void)sofa::helper::LCPinline; ~LCP()sofa::helper::LCP. Generated on Mon Nov 11 2024 03:30:17 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_l_c_p-members.html:225,allocate,allocate,225,api/master/sofa/html/classsofa_1_1helper_1_1_l_c_p-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_l_c_p-members.html,1,['allocate'],['allocate']
Energy Efficiency,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::CpuTask Member List . This is the complete list of members for sofa::simulation::CpuTask, including all inherited members. CpuTask(Status *status, int scheduledThread=-1)sofa::simulation::CpuTask; Dynamic enum valuesofa::simulation::Task; getAllocator()sofa::simulation::Taskstatic; getScheduledThread() constsofa::simulation::Task; getStatus(void) const override finalsofa::simulation::CpuTaskvirtual; m_idsofa::simulation::Task; m_scheduledThreadsofa::simulation::Taskprotected; MemoryAlloc enum namesofa::simulation::Task; operator delete(void *ptr)sofa::simulation::Taskstatic; operator delete(void *ptr, std::size_t sz)sofa::simulation::Taskstatic; operator new(std::size_t sz)sofa::simulation::Taskstatic; operator new[](std::size_t sz)=deletesofa::simulation::Taskstatic; run()=0sofa::simulation::Taskpure virtual; setAllocator(Task::Allocator *allocator)sofa::simulation::Taskstatic; Stack enum valuesofa::simulation::Task; Static enum valuesofa::simulation::Task; Status typedefsofa::simulation::CpuTask; Task(int scheduledThread)sofa::simulation::Task; ~CpuTask()=defaultsofa::simulation::CpuTaskvirtual; ~Task()=defaultsofa::simulation::Taskvirtual. Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_cpu_task-members.html:269,schedul,scheduledThread,269,api/master/sofa/html/classsofa_1_1simulation_1_1_cpu_task-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_cpu_task-members.html,2,['schedul'],['scheduledThread']
Energy Efficiency,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::InitPerThreadDataTask Member List . This is the complete list of members for sofa::simulation::InitPerThreadDataTask, including all inherited members. CpuTask(Status *status, int scheduledThread=-1)sofa::simulation::CpuTask; Dynamic enum valuesofa::simulation::Task; getAllocator()sofa::simulation::Taskstatic; getScheduledThread() constsofa::simulation::Task; getStatus(void) const override finalsofa::simulation::CpuTaskvirtual; InitPerThreadDataTask(std::atomic< int > *atomicCounter, std::mutex *mutex, CpuTask::Status *status)sofa::simulation::InitPerThreadDataTask; m_idsofa::simulation::Task; m_scheduledThreadsofa::simulation::Taskprotected; MemoryAlloc enum namesofa::simulation::Task; operator delete(void *ptr)sofa::simulation::Taskstatic; operator delete(void *ptr, std::size_t sz)sofa::simulation::Taskstatic; operator new(std::size_t sz)sofa::simulation::Taskstatic; operator new[](std::size_t sz)=deletesofa::simulation::Taskstatic; run() overridesofa::simulation::InitPerThreadDataTaskvirtual; setAllocator(Task::Allocator *allocator)sofa::simulation::Taskstatic; Stack enum valuesofa::simulation::Task; Static enum valuesofa::simulation::Task; Status typedefsofa::simulation::CpuTask; Task(int scheduledThread)sofa::simulation::Task; ~CpuTask()=defaultsofa::simulation::CpuTaskvirtual; ~InitPerThreadDataTask() override=defaultsofa::simulation::InitPerThreadDataTask; ~Task()=defaultsofa::simulation::Taskvirtual. Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_init_per_thread_data_task-members.html:297,schedul,scheduledThread,297,api/master/sofa/html/classsofa_1_1simulation_1_1_init_per_thread_data_task-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_init_per_thread_data_task-members.html,2,['schedul'],['scheduledThread']
Energy Efficiency,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::SolveVisitorTask Member List . This is the complete list of members for sofa::simulation::SolveVisitorTask, including all inherited members. CpuTask(Status *status, int scheduledThread=-1)sofa::simulation::CpuTask; Dynamic enum valuesofa::simulation::Task; getAllocator()sofa::simulation::Taskstatic; getScheduledThread() constsofa::simulation::Task; getStatus(void) const override finalsofa::simulation::CpuTaskvirtual; m_idsofa::simulation::Task; m_scheduledThreadsofa::simulation::Taskprotected; MemoryAlloc enum namesofa::simulation::Task; operator delete(void *ptr)sofa::simulation::Taskstatic; operator delete(void *ptr, std::size_t sz)sofa::simulation::Taskstatic; operator new(std::size_t sz)sofa::simulation::Taskstatic; operator new[](std::size_t sz)=deletesofa::simulation::Taskstatic; run() finalsofa::simulation::SolveVisitorTaskvirtual; setAllocator(Task::Allocator *allocator)sofa::simulation::Taskstatic; SolveVisitorTask(sofa::simulation::CpuTask::Status *status, sofa::core::behavior::OdeSolver *odeSolver, const sofa::core::ExecParams *params, SReal dt, sofa::core::MultiVecCoordId x, sofa::core::MultiVecDerivId v)sofa::simulation::SolveVisitorTaskinline; Stack enum valuesofa::simulation::Task; Static enum valuesofa::simulation::Task; Status typedefsofa::simulation::CpuTask; Task(int scheduledThread)sofa::simulation::Task; ~CpuTask()=defaultsofa::simulation::CpuTaskvirtual; ~SolveVisitorTask() override=defaultsofa::simulation::SolveVisitorTask; ~Task()=defaultsofa::simulation::Taskvirtual. Generated on Mon Nov 11 2024 03:34:14 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_solve_visitor_task-members.html:287,schedul,scheduledThread,287,api/master/sofa/html/classsofa_1_1simulation_1_1_solve_visitor_task-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_solve_visitor_task-members.html,2,['schedul'],['scheduledThread']
Energy Efficiency,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::StdTaskAllocator Member List . This is the complete list of members for sofa::simulation::StdTaskAllocator, including all inherited members. allocate(std::size_t sz) finalsofa::simulation::StdTaskAllocatorinlinevirtual; free(void *ptr, std::size_t sz) finalsofa::simulation::StdTaskAllocatorinlinevirtual. Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_std_task_allocator-members.html:259,allocate,allocate,259,api/master/sofa/html/classsofa_1_1simulation_1_1_std_task_allocator-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_std_task_allocator-members.html,1,['allocate'],['allocate']
Energy Efficiency,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::Task Member List . This is the complete list of members for sofa::simulation::Task, including all inherited members. Dynamic enum valuesofa::simulation::Task; getAllocator()sofa::simulation::Taskstatic; getScheduledThread() constsofa::simulation::Task; getStatus(void) const =0sofa::simulation::Taskpure virtual; m_idsofa::simulation::Task; m_scheduledThreadsofa::simulation::Taskprotected; MemoryAlloc enum namesofa::simulation::Task; operator delete(void *ptr)sofa::simulation::Taskstatic; operator delete(void *ptr, std::size_t sz)sofa::simulation::Taskstatic; operator new(std::size_t sz)sofa::simulation::Taskstatic; operator new[](std::size_t sz)=deletesofa::simulation::Taskstatic; run()=0sofa::simulation::Taskpure virtual; setAllocator(Task::Allocator *allocator)sofa::simulation::Taskstatic; Stack enum valuesofa::simulation::Task; Static enum valuesofa::simulation::Task; Task(int scheduledThread)sofa::simulation::Task; ~Task()=defaultsofa::simulation::Taskvirtual. Generated on Mon Nov 11 2024 03:34:14 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_task-members.html:1010,schedul,scheduledThread,1010,api/master/sofa/html/classsofa_1_1simulation_1_1_task-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_task-members.html,1,['schedul'],['scheduledThread']
Energy Efficiency,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::Task::Allocator Member List . This is the complete list of members for sofa::simulation::Task::Allocator, including all inherited members. allocate(std::size_t sz)=0sofa::simulation::Task::Allocatorpure virtual; free(void *ptr, std::size_t sz)=0sofa::simulation::Task::Allocatorpure virtual. Generated on Mon Nov 11 2024 03:34:14 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_task_1_1_allocator-members.html:257,allocate,allocate,257,api/master/sofa/html/classsofa_1_1simulation_1_1_task_1_1_allocator-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_task_1_1_allocator-members.html,1,['allocate'],['allocate']
Energy Efficiency,"﻿. SOFA API: sofa Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Classes |; Typedefs |; Functions |; Variables . sofa Namespace Reference . Namespaces;  collision_test;  ;  component;  ;  core;  ;  defaulttype;  ;  framework;  ;  geometry;  ;  gl;  Forward declaration. ;  ;  gui;  ;  helper;  ;  linearalgebra;  ;  mapping_test;  ;  simpleapi;  ;  simulation;  ;  testing;  ;  topology;  ;  type;  for std::pair ;  . Classes; class  TestDataEngine;  ; struct  DataEngine_test;  Helper for writing DataEngine tests. More...;  ; struct  MultiMapping_test;  Base class for the MultiMapping tests, directly adapted from Mapping_test. More...;  ; struct  AffinePatch_sofa_test;  ; struct  CylinderTractionStruct;  Structure which contains the nodes and the pointers useful for the cylindertraction test. More...;  ; struct  LinearElasticity_test;  ; struct  ForceField_test;  Helper for writing ForceField tests. The constructor creates a root node and adds it a State and a ForceField (of the parameter type of this template class). Pointers to node, state and force are available. Deriving the ForceField test from this class makes it easy to write: just call function run_test with positions, velocities and the corresponding expected forces. This function automatically checks not only the forces (function addForce), but also the stiffness (methods addDForce and addKToMatrix), using finite differences. More...;  ; struct  PatchTestStruct;  Structure which contains the nodes and the pointers useful for the patch test. More...;  ; class  TemplateAliasTest;  ; struct  AdvancedTimerTest;  ; struct  DefaultAnimationLoop_test;  . Typedefs; typedef Types< Vec3Types > DataTypes;  ; typedef component::statecontainer::MechanicalObject< defaulttype::Vec3Types > MechanicalObject3;  ; template<typename DataTypes > ; using Coord_t = typename DataTypes::Coord;  ; template<typename DataTypes > ; using Real_t = typename DataTypes::Real;  ; tem",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa.html:666,adapt,adapted,666,api/master/sofa/html/namespacesofa.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa.html,1,['adapt'],['adapted']
Energy Efficiency,"﻿. SOFA API: sofa::MultiMapping_test< _MultiMapping > Struct Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::MultiMapping_test< _MultiMapping > Struct Template Reference . #include <MultiMappingTestCreation.h>; Base class for the MultiMapping tests, directly adapted from Mapping_test. ; More... Inheritance diagram for sofa::MultiMapping_test< _MultiMapping >:. [legend]; Detailed Description; template<class _MultiMapping>; struct sofa::MultiMapping_test< _MultiMapping >; Base class for the MultiMapping tests, directly adapted from Mapping_test. ; See alsoMapping_test; AuthorFrançois Faure ; Date2014 . Public Attributes; core::MultiMapping< In, Out > * mapping;  the mapping to be tested More...;  ; type::vector< typename InDOFs::SPtr > inDofs;  mapping input More...;  ; OutDOFs::SPtr outDofs;  mapping output More...;  ; simulation::Node::SPtr root;  Root of the scene graph, created by the constructor an re-used in the tests. More...;  ; simulation::Node::SPtr child;  Child node, created by setupScene. More...;  ; type::vector< simulation::Node::SPtr > parents;  Parent nodes, created by setupScene. More...;  ; simulation::Simulation * simulation;  created by the constructor an re-used in the tests More...;  ; std::pair< Real, Real > deltaRange;  The minimum and maximum magnitudes of the change of each scalar value of the small displacement is deltaRange * numeric_limits<Real>::epsilon. This epsilon is 1.19209e-07 for float and 2.22045e-16 for double. More...;  ; Real errorMax;  The test is successful if the (infinite norm of the) difference is less than maxError * numeric_limits<Real>::epsilon. More...;  ;  Public Attributes inherited from sofa::testing::BaseTest; sofa::testing::MessageAsTestFailure m_fatal;  ; sofa::testing::MessageAsTestFailure m_error;  . Public Member Functions;  MultiMapping_test ();  ; void setupScene (int numParents);  ; OutDe",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1_multi_mapping__test.html:381,adapt,adapted,381,api/master/sofa/html/structsofa_1_1_multi_mapping__test.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1_multi_mapping__test.html,2,['adapt'],['adapted']
Energy Efficiency,"﻿. SOFA API: sofa::component::collision::geometry::LineCollisionModel< TDataTypes > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Public Attributes |; Protected Attributes |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Friends |; List of all members . sofa::component::collision::geometry::LineCollisionModel< TDataTypes > Class Template Reference . #include <LineModel.h>. Inheritance diagram for sofa::component::collision::geometry::LineCollisionModel< TDataTypes >:. [legend]. Classes; struct  LineData;  . Public Attributes; sofa::core::objectmodel::RenamedData< bool > bothSide;  ; Data< bool > d_bothSide;  activate collision on both side of the line model (when surface normals are defined on these lines) More...;  ; sofa::core::objectmodel::RenamedData< bool > m_displayFreePosition;  ; Data< bool > d_displayFreePosition;  Display Collision Model Points free position(in green) More...;  ; SingleLink< LineCollisionModel< DataTypes >, sofa::core::topology::BaseMeshTopology, BaseLink::FLAG_STOREPATH|BaseLink::FLAG_STRONGLINK > l_topology;  Link to be set to the topology container in the component graph. More...;  ;  Public Attributes inherited from sofa::core::CollisionModel; CollisionElementActiver * myCollElemActiver;  CollisionElementActiver that activate or deactivate collision element during execution. More...;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belon",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_line_collision_model.html:994,green,green,994,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_line_collision_model.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_line_collision_model.html,1,['green'],['green']
Energy Efficiency,"﻿. SOFA API: sofa::component::io::mesh::MeshSTLLoader Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; Protected Member Functions |; List of all members . sofa::component::io::mesh::MeshSTLLoader Class Reference . #include <MeshSTLLoader.h>. Inheritance diagram for sofa::component::io::mesh::MeshSTLLoader:. [legend]. Public Attributes; sofa::core::objectmodel::RenamedData< bool > _forceBinary;  ; sofa::core::objectmodel::RenamedData< unsigned int > _headerSize;  ; Data< unsigned int > d_headerSize;  Size of the header binary file (just before the number of facet). More...;  ; Data< bool > d_forceBinary;  Force reading in binary mode. Even in first keyword of the file is solid. More...;  ; Data< bool > d_mergePositionUsingMap;  Since positions are duplicated in a STL, they have to be merged. Using a map to do so will temporarily duplicate memory but should be more efficient. Disable it if memory is really an issue. More...;  ;  Public Attributes inherited from sofa::core::loader::MeshLoader; Data< type::vector< Vec3 > > d_positions;  Vertices of the mesh loaded. More...;  ; Data< type::vector< Polyline > > d_polylines;  Polylines of the mesh loaded. More...;  ; Data< type::vector< Edge > > d_edges;  Edges of the mesh loaded. More...;  ; Data< type::vector< Triangle > > d_triangles;  Triangles of the mesh loaded. More...;  ; Data< type::vector< Quad > > d_quads;  Quads of the mesh loaded. More...;  ; Data< type::vector< type::vector< Topology::ElemID > > > d_polygons;  Polygons of the mesh loaded. More...;  ; Data< type::vector< HighOrderEdgePosition > > d_highOrderEdgePositions;  High order edge points of the mesh loaded. More...;  ; Data< type::vector< HighOrderTrianglePosition > > d_highOrderTrianglePositions;  High order triangle points of the mesh loaded. More...;  ; Data< type::vector< HighOrderQuadPosition > > d_highOrderQuadPositions;  High order quad points of the mesh lo",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1io_1_1mesh_1_1_mesh_s_t_l_loader.html:966,efficient,efficient,966,api/master/sofa/html/classsofa_1_1component_1_1io_1_1mesh_1_1_mesh_s_t_l_loader.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1io_1_1mesh_1_1_mesh_s_t_l_loader.html,1,['efficient'],['efficient']
Energy Efficiency,"﻿. SOFA API: sofa::component::linearsystem::LinearSystemData< TMatrix, TVector > Struct Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::component::linearsystem::LinearSystemData< TMatrix, TVector > Struct Template Reference . #include <LinearSystemData.h>. Public Attributes; StoredMatrixType matrix { nullptr };  The global matrix of the linear system. If the linear system is written as Ax=b, it is A. More...;  ; StoredVectorType rhs { nullptr };  The right-hand side of the linear system. If the linear system is written as Ax=b, it is b. More...;  ; StoredVectorType solution { nullptr };  The solution of the linear system. If the linear system is written as Ax=b, it is x. More...;  . Public Member Functions; MatrixType * getMatrix () const;  ; VectorType * getRHS () const;  ; VectorType * getSolution () const;  ; void allocateSystem ();  ; void createSystemMatrix ();  Allocate the object for the global matrix. More...;  ; void createSystemRHSVector ();  Allocate the object for the RHS. More...;  ; void createSystemSolutionVector ();  Allocate the object for the solution. More...;  ; void resizeSystem (sofa::Size n);  ; void clearSystem ();  ; SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API void createSystemRHSVector ();  ; SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API void createSystemSolutionVector ();  ; SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API void resizeSystem (sofa::Size n);  ; SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API void clearSystem ();  ; void createSystemRHSVector ();  ; void createSystemSolutionVector ();  ; void resizeSystem (sofa::Size n);  ; void clearSystem ();  . Attribute details. ◆ matrix. template<typename TMatrix , typename TVector > . StoredMatrixType sofa::component::linearsystem::LinearSystemData< TMatrix, TVector >::matrix { nullptr }. The global matrix of the linear system. If the linear system is written as Ax=b, it is A. . ◆ rhs. ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_linear_system_data.html:951,allocate,allocateSystem,951,api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_linear_system_data.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1linearsystem_1_1_linear_system_data.html,1,['allocate'],['allocateSystem']
Energy Efficiency,"﻿. SOFA API: sofa::component::odesolver::forward::DampVelocitySolver Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; Protected Member Functions |; List of all members . sofa::component::odesolver::forward::DampVelocitySolver Class Reference . #include <DampVelocitySolver.h>. Inheritance diagram for sofa::component::odesolver::forward::DampVelocitySolver:. [legend]; Detailed Description; Velocity damping and thresholding. This is not an ODE solver, but it can be used as a post-process after a real ODE solver. . Public Attributes; sofa::core::objectmodel::RenamedData< SReal > rate;  ; sofa::core::objectmodel::RenamedData< SReal > threshold;  ; Data< SReal > d_rate;  Factor used to reduce the velocities. Typically between 0 and 1. More...;  ; Data< SReal > d_threshold;  Threshold under which the velocities are canceled. More...;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  . Public Member Functions;  SOFA_CLASS (DampVelocitySolver, sofa::core::behavior::OdeS",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1forward_1_1_damp_velocity_solver.html:779,reduce,reduce,779,api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1forward_1_1_damp_velocity_solver.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1forward_1_1_damp_velocity_solver.html,1,['reduce'],['reduce']
Energy Efficiency,"﻿. SOFA API: sofa::component::playback::WriteState Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Protected Attributes |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; List of all members . sofa::component::playback::WriteState Class Reference . #include <WriteState.h>. Inheritance diagram for sofa::component::playback::WriteState:. [legend]; Detailed Description; Write State vectors to file at a given set of time instants A period can be established at the last time instant The DoFs to print can be chosen using DOFsX and DOFsV Stop to write the state if the kinematic energy reach a given threshold (stopAt) The energy will be measured at each period determined by keperiod . Public Attributes; sofa::core::objectmodel::DataFileName d_filename;  ; Data< bool > d_writeX;  flag enabling output of X vector More...;  ; Data< bool > d_writeX0;  flag enabling output of X0 vector More...;  ; Data< bool > d_writeV;  flag enabling output of V vector More...;  ; Data< bool > d_writeF;  flag enabling output of F vector More...;  ; Data< type::vector< double > > d_time;  set time to write outputs (by default export at t=0) More...;  ; Data< double > d_period;  period between outputs More...;  ; Data< type::vector< unsigned int > > d_DOFsX;  set the position DOFs to write More...;  ; Data< type::vector< unsigned int > > d_DOFsV;  set the velocity DOFs to write More...;  ; Data< double > d_stopAt;  stop the simulation when the given threshold is reached More...;  ; Data< double > d_keperiod;  set the period to measure the kinetic energy increase More...;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1playback_1_1_write_state.html:685,energy,energy,685,api/master/sofa/html/classsofa_1_1component_1_1playback_1_1_write_state.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1playback_1_1_write_state.html,2,['energy'],['energy']
Energy Efficiency,"﻿. SOFA API: sofa::component::playback::WriteTopology Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Protected Attributes |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; List of all members . sofa::component::playback::WriteTopology Class Reference . #include <WriteTopology.h>. Inheritance diagram for sofa::component::playback::WriteTopology:. [legend]; Detailed Description; Write Topology containers information into a file at a given set of time instants A period can be established at the last time instant. The information to write can be chosen. by default there will be only commun containers. An option is available to write shells containers.; This part is not handle yet: Stop to write infos if the kinematic energy reach a given threshold (stopAt) The energy will be measured at each period determined by keperiod . Public Attributes; sofa::core::objectmodel::DataFileName f_filename;  ; sofa::core::objectmodel::RenamedData< bool > f_writeContainers;  ; sofa::core::objectmodel::RenamedData< bool > f_writeShellContainers;  ; sofa::core::objectmodel::RenamedData< double > f_interval;  ; sofa::core::objectmodel::RenamedData< type::vector< double > > f_time;  ; sofa::core::objectmodel::RenamedData< double > f_period;  ; sofa::core::objectmodel::DataFileName d_filename;  ; Data< bool > d_writeContainers;  flag enabling output of common topology containers. More...;  ; Data< bool > d_writeShellContainers;  flag enabling output of specific shell topology containers. More...;  ; Data< double > d_interval;  time duration between outputs More...;  ; Data< type::vector< double > > d_time;  set time to write outputs More...;  ; Data< double > d_period;  period between outputs More...;  ; SingleLink< WriteTopology, sofa::core::topology::BaseMeshTopology, BaseLink::FLAG_STOREPATH|BaseLink::FLAG_STRONGLINK > l_topology;  Link to be set to the topology container in the comp",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1playback_1_1_write_topology.html:832,energy,energy,832,api/master/sofa/html/classsofa_1_1component_1_1playback_1_1_write_topology.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1playback_1_1_write_topology.html,2,['energy'],['energy']
Energy Efficiency,"﻿. SOFA API: sofa::component::solidmechanics::fem::hyperelastic::material::BoyceAndArruda< DataTypes > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Attributes |; Public Member Functions |; List of all members . sofa::component::solidmechanics::fem::hyperelastic::material::BoyceAndArruda< DataTypes > Class Template Reference . #include <BoyceAndArruda.h>. Inheritance diagram for sofa::component::solidmechanics::fem::hyperelastic::material::BoyceAndArruda< DataTypes >:. [legend]; Detailed Description; template<class DataTypes>; class sofa::component::solidmechanics::fem::hyperelastic::material::BoyceAndArruda< DataTypes >; a Class that describe a generic hyperelastic material : example of Boyce and Arruda The material is described based on continuum mechanics and the description is independent to any discretization method like the finite element method. A material is generically described by a strain energy function and its first and second derivatives. In practice the energy is the sum of several energy terms which depends on 2 quantities : the determinant of the deformation gradient J and the right Cauchy Green deformation tensor . Static Public Attributes; static constexpr std::string_view Name = ""ArrudaBoyce"";  . Public Member Functions; virtual Real getStrainEnergy (StrainInformation< DataTypes > *sinfo, const MaterialParameters< DataTypes > &param);  ; virtual void deriveSPKTensor (StrainInformation< DataTypes > *sinfo, const MaterialParameters< DataTypes > &param, MatrixSym &SPKTensorGeneral);  ; virtual void applyElasticityTensor (StrainInformation< DataTypes > *sinfo, const MaterialParameters< DataTypes > &param, const MatrixSym &inputTensor, MatrixSym &outputTensor);  ; virtual void ElasticityTensor (StrainInformation< DataTypes > *sinfo, const MaterialParameters< DataTypes > &param, Matrix6 &outputTensor);  ;  Public Member Functions inherited from sofa::component::solidmechanics::fem::hype",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_boyce_and_arruda.html:981,energy,energy,981,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_boyce_and_arruda.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_boyce_and_arruda.html,1,['energy'],['energy']
Energy Efficiency,"﻿. SOFA API: sofa::component::solidmechanics::fem::hyperelastic::material::Costa< DataTypes > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Attributes |; Public Member Functions |; List of all members . sofa::component::solidmechanics::fem::hyperelastic::material::Costa< DataTypes > Class Template Reference . #include <Costa.h>. Inheritance diagram for sofa::component::solidmechanics::fem::hyperelastic::material::Costa< DataTypes >:. [legend]; Detailed Description; template<class DataTypes>; class sofa::component::solidmechanics::fem::hyperelastic::material::Costa< DataTypes >; a Class that describe a generic hyperelastic material : example of Boyce and Arruda The material is described based on continuum mechanics and the description is independent to any discretization method like the finite element method. A material is generically described by a strain energy function and its first and second derivatives. In practice the energy is the sum of several energy terms which depends on 2 quantities : the determinant of the deformation gradient J and the right Cauchy Green deformation tensor . Static Public Attributes; static constexpr std::string_view Name = ""Costa"";  . Public Member Functions; virtual Real getStrainEnergy (StrainInformation< DataTypes > *sinfo, const MaterialParameters< DataTypes > &param);  ; virtual void deriveSPKTensor (StrainInformation< DataTypes > *sinfo, const MaterialParameters< DataTypes > &param, MatrixSym &SPKTensorGeneral);  ; virtual void applyElasticityTensor (StrainInformation< DataTypes > *sinfo, const MaterialParameters< DataTypes > &param, const MatrixSym &inputTensor, MatrixSym &outputTensor);  ; virtual void ElasticityTensor (StrainInformation< DataTypes > *sinfo, const MaterialParameters< DataTypes > &param, Matrix6 &outputTensor);  ;  Public Member Functions inherited from sofa::component::solidmechanics::fem::hyperelastic::material::HyperelasticMaterial< DataTypes",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_costa.html:936,energy,energy,936,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_costa.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_costa.html,1,['energy'],['energy']
Energy Efficiency,"﻿. SOFA API: sofa::component::solidmechanics::fem::hyperelastic::material::HyperelasticMaterial< DataTypes > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::component::solidmechanics::fem::hyperelastic::material::HyperelasticMaterial< DataTypes > Class Template Reference . #include <HyperelasticMaterial.h>. Inheritance diagram for sofa::component::solidmechanics::fem::hyperelastic::material::HyperelasticMaterial< DataTypes >:. [legend]; Detailed Description; template<class DataTypes>; class sofa::component::solidmechanics::fem::hyperelastic::material::HyperelasticMaterial< DataTypes >; a Class that describe a generic hyperelastic material . The material is described based on continuum mechanics and the description is independent to any discretization method like the finite element method. A material is generically described by a strain energy function and its first and second derivatives. . Public Member Functions; virtual ~HyperelasticMaterial ();  ; virtual Real getStrainEnergy (StrainInformation< DataTypes > *, const MaterialParameters< DataTypes > &);  ; virtual void deriveSPKTensor (StrainInformation< DataTypes > *, const MaterialParameters< DataTypes > &, MatrixSym &);  ; virtual void applyElasticityTensor (StrainInformation< DataTypes > *, const MaterialParameters< DataTypes > &, const MatrixSym &, MatrixSym &);  ; virtual void ElasticityTensor (StrainInformation< DataTypes > *, const MaterialParameters< DataTypes > &, Matrix6 &);  . Constructor details. ◆ ~HyperelasticMaterial(). template<class DataTypes > . virtual sofa::component::solidmechanics::fem::hyperelastic::material::HyperelasticMaterial< DataTypes >::~HyperelasticMaterial ; (; ). inlinevirtual . Function details. ◆ applyElasticityTensor(). template<class DataTypes > . virtual void sofa::component::solidmechanics::fem::hyperelastic::material::HyperelasticMaterial< DataTypes >::applyElasticityTe",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_hyperelastic_material.html:955,energy,energy,955,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_hyperelastic_material.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_hyperelastic_material.html,1,['energy'],['energy']
Energy Efficiency,"﻿. SOFA API: sofa::component::solidmechanics::fem::hyperelastic::material::MaterialParameters< DataTypes > Struct Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; List of all members . sofa::component::solidmechanics::fem::hyperelastic::material::MaterialParameters< DataTypes > Struct Template Reference . #include <HyperelasticMaterial.h>; Detailed Description; template<typename DataTypes>; struct sofa::component::solidmechanics::fem::hyperelastic::material::MaterialParameters< DataTypes >; structure that store the parameters required to that are necessary to compute the strain energy The material parameters might be constant in space (homogeneous material) or not . Public Attributes; std::vector< Real > parameterArray;  ; std::vector< Coord > anisotropyDirection;  ; std::vector< Real > parameterAlpha;  ; std::vector< Real > parameterTau;  . Attribute details. ◆ anisotropyDirection. template<typename DataTypes > . std::vector<Coord> sofa::component::solidmechanics::fem::hyperelastic::material::MaterialParameters< DataTypes >::anisotropyDirection. the direction of anisotropy in the rest configuration : the size of the array is 0 if the material is isotropic, 1 if it is transversely isotropic and 2 for orthotropic materials (assumed to be orthogonal to each other) . ◆ parameterAlpha. template<typename DataTypes > . std::vector<Real> sofa::component::solidmechanics::fem::hyperelastic::material::MaterialParameters< DataTypes >::parameterAlpha. for viscous part, give the real alphai and taui such as alpha(t)= alpha0+sum(1,N)alphaiexp(-t/taui) . ◆ parameterArray. template<typename DataTypes > . std::vector<Real> sofa::component::solidmechanics::fem::hyperelastic::material::MaterialParameters< DataTypes >::parameterArray. an array of Real values that correspond to the material parameters : the size depends on the material, e.g. 2 Lame coefficients for St-Venant Kirchhoff materials . ◆ parameterTau. template<t",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_material_parameters.html:651,energy,energy,651,api/master/sofa/html/structsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_material_parameters.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_material_parameters.html,1,['energy'],['energy']
Energy Efficiency,"﻿. SOFA API: sofa::component::solidmechanics::fem::hyperelastic::material::MooneyRivlin< DataTypes > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Attributes |; Public Member Functions |; List of all members . sofa::component::solidmechanics::fem::hyperelastic::material::MooneyRivlin< DataTypes > Class Template Reference . #include <MooneyRivlin.h>. Inheritance diagram for sofa::component::solidmechanics::fem::hyperelastic::material::MooneyRivlin< DataTypes >:. [legend]; Detailed Description; template<class DataTypes>; class sofa::component::solidmechanics::fem::hyperelastic::material::MooneyRivlin< DataTypes >; a Class that describe a generic hyperelastic material : example of Boyce and Arruda The material is described based on continuum mechanics and the description is independent to any discretization method like the finite element method. A material is generically described by a strain energy function and its first and second derivatives. In practice the energy is the sum of several energy terms which depends on 2 quantities : the determinant of the deformation gradient J and the right Cauchy Green deformation tensor . Static Public Attributes; static constexpr std::string_view Name = ""MooneyRivlin"";  . Public Member Functions; Real getStrainEnergy (StrainInformation< DataTypes > *sinfo, const MaterialParameters< DataTypes > &param) override;  ; void deriveSPKTensor (StrainInformation< DataTypes > *sinfo, const MaterialParameters< DataTypes > &param, MatrixSym &SPKTensorGeneral) override;  ; void applyElasticityTensor (StrainInformation< DataTypes > *sinfo, const MaterialParameters< DataTypes > &param, const MatrixSym &inputTensor, MatrixSym &outputTensor) override;  ; void ElasticityTensor (StrainInformation< DataTypes > *sinfo, const MaterialParameters< DataTypes > &param, Matrix6 &outputTensor) override;  ;  Public Member Functions inherited from sofa::component::solidmechanics::fem::hyperelas",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_mooney_rivlin.html:971,energy,energy,971,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_mooney_rivlin.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_mooney_rivlin.html,1,['energy'],['energy']
Energy Efficiency,"﻿. SOFA API: sofa::component::solidmechanics::fem::hyperelastic::material::Ogden< DataTypes > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Attributes |; Public Member Functions |; List of all members . sofa::component::solidmechanics::fem::hyperelastic::material::Ogden< DataTypes > Class Template Reference . #include <Ogden.h>. Inheritance diagram for sofa::component::solidmechanics::fem::hyperelastic::material::Ogden< DataTypes >:. [legend]; Detailed Description; template<class DataTypes>; class sofa::component::solidmechanics::fem::hyperelastic::material::Ogden< DataTypes >; a Class that describe a generic hyperelastic material : example of Boyce and Arruda The material is described based on continuum mechanics and the description is independent to any discretization method like the finite element method. A material is generically described by a strain energy function and its first and second derivatives. In practice the energy is the sum of several energy terms which depends on 2 quantities : the determinant of the deformation gradient J and the right Cauchy Green deformation tensor . Static Public Attributes; static constexpr std::string_view Name = ""Ogden"";  . Public Member Functions; Real getStrainEnergy (StrainInformation< DataTypes > *sinfo, const MaterialParameters< DataTypes > &param) override;  ; void deriveSPKTensor (StrainInformation< DataTypes > *sinfo, const MaterialParameters< DataTypes > &param, MatrixSym &SPKTensorGeneral) override;  ; void applyElasticityTensor (StrainInformation< DataTypes > *sinfo, const MaterialParameters< DataTypes > &param, const MatrixSym &inputTensor, MatrixSym &outputTensor) override;  ; void ElasticityTensor (StrainInformation< DataTypes > *sinfo, const MaterialParameters< DataTypes > &param, Matrix6 &outputTensor) override;  ;  Public Member Functions inherited from sofa::component::solidmechanics::fem::hyperelastic::material::HyperelasticMaterial< DataT",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_ogden.html:936,energy,energy,936,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_ogden.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_ogden.html,1,['energy'],['energy']
Energy Efficiency,"﻿. SOFA API: sofa::component::solidmechanics::fem::hyperelastic::material::VerondaWestman< DataTypes > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Attributes |; Public Member Functions |; List of all members . sofa::component::solidmechanics::fem::hyperelastic::material::VerondaWestman< DataTypes > Class Template Reference . #include <VerondaWestman.h>. Inheritance diagram for sofa::component::solidmechanics::fem::hyperelastic::material::VerondaWestman< DataTypes >:. [legend]; Detailed Description; template<class DataTypes>; class sofa::component::solidmechanics::fem::hyperelastic::material::VerondaWestman< DataTypes >; a Class that describe a generic hyperelastic material : example of Boyce and Arruda The material is described based on continuum mechanics and the description is independent to any discretization method like the finite element method. A material is generically described by a strain energy function and its first and second derivatives. In practice the energy is the sum of several energy terms which depends on 2 quantities : the determinant of the deformation gradient J and the right Cauchy Green deformation tensor . Static Public Attributes; static constexpr std::string_view Name = ""VerondaWestman"";  . Public Member Functions; Real getStrainEnergy (StrainInformation< DataTypes > *sinfo, const MaterialParameters< DataTypes > &param) override;  ; void deriveSPKTensor (StrainInformation< DataTypes > *sinfo, const MaterialParameters< DataTypes > &param, MatrixSym &SPKTensorGeneral) override;  ; void applyElasticityTensor (StrainInformation< DataTypes > *sinfo, const MaterialParameters< DataTypes > &param, const MatrixSym &inputTensor, MatrixSym &outputTensor) override;  ; void ElasticityTensor (StrainInformation< DataTypes > *sinfo, const MaterialParameters< DataTypes > &param, Matrix6 &outputTensor) override;  ;  Public Member Functions inherited from sofa::component::solidmechanics::fe",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_veronda_westman.html:981,energy,energy,981,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_veronda_westman.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_veronda_westman.html,1,['energy'],['energy']
Energy Efficiency,"﻿. SOFA API: sofa::component::solidmechanics::spring::SpringForceField< DataTypes >::SpringForce Struct Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; List of all members . sofa::component::solidmechanics::spring::SpringForceField< DataTypes >::SpringForce Struct Reference . #include <SpringForceField.h>. Public Attributes; Real energy;  ; std::pair< DPos, DPos > force;  ; type::MatNoInit< N, N, Real > dForce_dX;  . Attribute details. ◆ dForce_dX. template<class DataTypes > . type::MatNoInit<N, N, Real> sofa::component::solidmechanics::spring::SpringForceField< DataTypes >::SpringForce::dForce_dX. ◆ energy. template<class DataTypes > . Real sofa::component::solidmechanics::spring::SpringForceField< DataTypes >::SpringForce::energy. ◆ force. template<class DataTypes > . std::pair<DPos, DPos> sofa::component::solidmechanics::spring::SpringForceField< DataTypes >::SpringForce::force. sofacomponentsolidmechanicsspringSpringForceFieldSpringForce; Generated on Mon Nov 11 2024 03:05:12 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1solidmechanics_1_1spring_1_1_spring_force_field_1_1_spring_force.html:390,energy,energy,390,api/master/sofa/html/structsofa_1_1component_1_1solidmechanics_1_1spring_1_1_spring_force_field_1_1_spring_force.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1solidmechanics_1_1spring_1_1_spring_force_field_1_1_spring_force.html,3,['energy'],['energy']
Energy Efficiency,"﻿. SOFA API: sofa::component::topology::container::dynamic Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Functions |; Variables . sofa::component::topology::container::dynamic Namespace Reference . Classes; class  DynamicSparseGridGeometryAlgorithms;  ; class  DynamicSparseGridTopologyContainer;  ; class  DynamicSparseGridTopologyModifier;  ; class  BasicArrayInterface;  A class used as an interface with an array : Useful to compute geometric information on each edge in an efficient way. More...;  ; class  EdgeSetGeometryAlgorithms;  ; class  EdgeSetTopologyContainer;  ; class  EdgeSetTopologyModifier;  ; class  HexahedronSetGeometryAlgorithms;  ; class  HexahedronSetTopologyContainer;  ; class  HexahedronSetTopologyModifier;  ; class  MultilevelHexahedronSetTopologyContainer;  ; class  MultilevelModification;  ; class  NumericalIntegrationDescriptor;  Cross product for 3-elements vectors. More...;  ; class  PointSetGeometryAlgorithms;  ; class  PointSetTopologyContainer;  ; class  PointSetTopologyModifier;  ; class  QuadSetGeometryAlgorithms;  ; class  QuadSetTopologyContainer;  ; class  QuadSetTopologyModifier;  ; class  TetrahedronSetGeometryAlgorithms;  ; class  TetrahedronSetTopologyContainer;  ; class  TetrahedronSetTopologyModifier;  ; class  TriangleSetGeometryAlgorithms;  ; class  TriangleSetTopologyContainer;  : Object that stores a set of triangles and provides access to each triangle and its edges and vertices More...;  ; class  TriangleSetTopologyModifier;  . Functions; template<class Real > ; Real areaProduct (const sofa::type::Vec< 3, Real > &a, const sofa::type::Vec< 3, Real > &b);  Cross product for 3-elements Vectors. More...;  ; template<class Real > ; Real areaProduct (const type::Vec< 2, Real > &a, const type::Vec< 2, Real > &b);  area for 2-elements sofa::type::vectors. More...;  ; template<class Real > ; Real areaProduct (const type::Vec< 1, Real > &, const type::Vec< 1, Real > &);  ar",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1topology_1_1container_1_1dynamic.html:538,efficient,efficient,538,api/master/sofa/html/namespacesofa_1_1component_1_1topology_1_1container_1_1dynamic.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1topology_1_1container_1_1dynamic.html,1,['efficient'],['efficient']
Energy Efficiency,﻿. SOFA API: sofa::component::topology::container::dynamic::BasicArrayInterface< T > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::component::topology::container::dynamic::BasicArrayInterface< T > Class Template Referenceabstract . #include <EdgeSetGeometryAlgorithms.h>; A class used as an interface with an array : Useful to compute geometric information on each edge in an efficient way. ; More...; Detailed Description; template<class T>; class sofa::component::topology::container::dynamic::BasicArrayInterface< T >; A class used as an interface with an array : Useful to compute geometric information on each edge in an efficient way. . Public Member Functions; virtual T & operator[] (int i)=0;  ; virtual ~BasicArrayInterface ();  . Constructor details. ◆ ~BasicArrayInterface(). template<class T > . virtual sofa::component::topology::container::dynamic::BasicArrayInterface< T >::~BasicArrayInterface ; (; ). inlinevirtual . Function details. ◆ operator[](). template<class T > . virtual T& sofa::component::topology::container::dynamic::BasicArrayInterface< T >::operator[] ; (; int ; i). pure virtual . sofacomponenttopologycontainerdynamicBasicArrayInterface; Generated on Mon Nov 11 2024 03:10:02 for SOFA API by 1.9.1 . ,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_basic_array_interface.html:485,efficient,efficient,485,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_basic_array_interface.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_basic_array_interface.html,2,['efficient'],['efficient']
Energy Efficiency,"﻿. SOFA API: sofa::core::BaseVecId Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; Protected Member Functions |; List of all members . sofa::core::BaseVecId Class Reference . #include <VecId.h>. Inheritance diagram for sofa::core::BaseVecId:. [legend]; Detailed Description; This is a base class for TVecId that contains all the data stored.; NoteTVecId itself stores no data, in order to be able to convert between templates inplace with reinterpret_cast for performance reasons (typically when working with TMultiVecId instances, which would otherwise copy maps of TVecId). This is (a little) less efficient for non V_ALL versions, but is without comparison with the loss of performance with the typical operation of passing a stored ""TMultiVecId<!V_ALL,V_WRITE>"" to a method taking a ""const TMultiVecId<V_ALL,V_READ>&"". . Public Attributes; VecType type;  ; unsigned int index;  . Public Member Functions; VecType getType () const;  ; unsigned int getIndex () const;  . Protected Member Functions;  BaseVecId (VecType t, unsigned int i);  . Attribute details. ◆ index. unsigned int sofa::core::BaseVecId::index. ◆ type. VecType sofa::core::BaseVecId::type. Constructor details. ◆ BaseVecId(). sofa::core::BaseVecId::BaseVecId ; (; VecType ; t, . unsigned int ; i . ). inlineprotected . Function details. ◆ getIndex(). unsigned int sofa::core::BaseVecId::getIndex ; (; ); const. inline . ◆ getType(). VecType sofa::core::BaseVecId::getType ; (; ); const. inline . sofacoreBaseVecId; Generated on Mon Nov 11 2024 03:14:11 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_base_vec_id.html:691,efficient,efficient,691,api/master/sofa/html/classsofa_1_1core_1_1_base_vec_id.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_base_vec_id.html,1,['efficient'],['efficient']
Energy Efficiency,"﻿. SOFA API: sofa::core::behavior::BaseVectorOperations Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; List of all members . sofa::core::behavior::BaseVectorOperations Class Referenceabstract . #include <BaseVectorOperations.h>. Inheritance diagram for sofa::core::behavior::BaseVectorOperations:. [legend]. Protected Attributes; const core::ExecParams * params;  ; core::objectmodel::BaseContext * ctx;  ; SReal result;  . Public Member Functions;  BaseVectorOperations (const core::ExecParams *params, core::objectmodel::BaseContext *ctx);  ; virtual ~BaseVectorOperations ();  ; virtual void v_alloc (sofa::core::MultiVecCoordId &id, const VecIdProperties &properties={})=0;  Allocate a temporary vector. More...;  ; virtual void v_alloc (sofa::core::MultiVecDerivId &id, const VecIdProperties &properties={})=0;  ; virtual void v_free (sofa::core::MultiVecCoordId &id, bool interactionForceField=false, bool propagate=false)=0;  Free a previously allocated temporary vector. More...;  ; virtual void v_free (sofa::core::MultiVecDerivId &id, bool interactionForceField=false, bool propagate=false)=0;  ; virtual void v_realloc (sofa::core::MultiVecCoordId &id, bool interactionForceField=false, bool propagate=false, const VecIdProperties &properties={})=0;  keep already allocated vectors and allocates others. If interactionForceField, also allocates mechanical states linked by an InteractionForceField More...;  ; virtual void v_realloc (sofa::core::MultiVecDerivId &id, bool interactionForceField=false, bool propagate=false, const VecIdProperties &properties={})=0;  ; virtual void v_clear (core::MultiVecId v)=0;  v=0 More...;  ; virtual void v_eq (core::MultiVecId v, core::ConstMultiVecId a)=0;  v=a More...;  ; virtual void v_eq (core::MultiVecId v, core::ConstMultiVecId a, SReal f)=0;  v=f*a More...;  ; virtual void v_peq (core::MultiVecId v, core::ConstMultiVecId a, SReal f=1.0)=0;  v+=f*",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_vector_operations.html:1046,allocate,allocated,1046,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_vector_operations.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_vector_operations.html,1,['allocate'],['allocated']
Energy Efficiency,"﻿. SOFA API: sofa::core::behavior::BlocMatrixWriter< TBloc > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Public Member Functions |; List of all members . sofa::core::behavior::BlocMatrixWriter< TBloc > Class Template Reference . #include <BlocMatrixWriter.h>; Detailed Description; template<typename TBloc>; class sofa::core::behavior::BlocMatrixWriter< TBloc >; This class is a helper to efficiently implement addKToMatrix in forcefields (and is could later be used for mapping, etc.) See TriangularFEMForceFieldOptim for an example. . Classes; class  BaseMatrixWriter;  ; class  BlocBaseMatrixWriter;  ; class  BlocCRSMatrixWriter;  ; class  CRSMatrixWriter;  ; struct  DispatcherForceField_addKToMatrix;  . Public Member Functions; template<class Dispatcher > ; void apply (Dispatcher &dispatch, sofa::linearalgebra::BaseMatrix *m, unsigned int offsetL, unsigned int offsetC);  ; template<class FF > ; void addKToMatrix (FF *main, const sofa::core::MechanicalParams *mparams, sofa::core::behavior::MultiMatrixAccessor::MatrixRef r);  . Function details. ◆ addKToMatrix(). template<typename TBloc > . template<class FF > . void sofa::core::behavior::BlocMatrixWriter< TBloc >::addKToMatrix ; (; FF * ; main, . const sofa::core::MechanicalParams * ; mparams, . sofa::core::behavior::MultiMatrixAccessor::MatrixRef ; r . ). inline . ◆ apply(). template<typename TBloc > . template<class Dispatcher > . void sofa::core::behavior::BlocMatrixWriter< TBloc >::apply ; (; Dispatcher & ; dispatch, . sofa::linearalgebra::BaseMatrix * ; m, . unsigned int ; offsetL, . unsigned int ; offsetC . ). inline . Enum details. ◆ anonymous enum. template<typename TBloc > . anonymous enum. EnumeratorNL . ◆ anonymous enum. template<typename TBloc > . anonymous enum. EnumeratorNC . sofacorebehaviorBlocMatrixWriter; Generated on Mon Nov 11 2024 03:15:04 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_bloc_matrix_writer.html:456,efficient,efficiently,456,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_bloc_matrix_writer.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_bloc_matrix_writer.html,1,['efficient'],['efficiently']
Energy Efficiency,"﻿. SOFA API: sofa::core::behavior::TMultiVec< vtype > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; Friends |; List of all members . sofa::core::behavior::TMultiVec< vtype > Class Template Reference . #include <MultiVec.h>. Inheritance diagram for sofa::core::behavior::TMultiVec< vtype >:. [legend]; Detailed Description; template<VecType vtype>; class sofa::core::behavior::TMultiVec< vtype >; Helper class providing a high-level view of underlying state vectors.; It is used to convert math-like operations to call to computation methods. . Protected Attributes; BaseVectorOperations * vop;  Solver who is using this vector. More...;  ; MyMultiVecId v;  Identifier of this vector. More...;  ; bool dynamic;  Flag indicating if this vector was dynamically allocated. More...;  . Public Member Functions;  TMultiVec (BaseVectorOperations *vop, MyMultiVecId v);  Refers to a state vector with the given ID (VecId::position(), VecId::velocity(), etc). More...;  ;  TMultiVec ();  Refers to a not yet allocated state vector. More...;  ;  TMultiVec (BaseVectorOperations *vop, bool dynamic=true, const VecIdProperties &properties={});  Allocate a new temporary vector with the given type (sofa::core::V_COORD or sofa::core::V_DERIV). More...;  ;  ~TMultiVec ();  ;  operator MyMultiVecId ();  Automatic conversion to the underlying VecId. More...;  ;  operator ConstMyMultiVecId ();  ;  operator AllMultiVecId ();  ;  operator ConstAllMultiVecId ();  ; const MyMultiVecId & id () const;  ; MyMultiVecId & id ();  ; BaseVectorOperations * ops ();  ; void setOps (BaseVectorOperations *op);  ; void realloc (BaseVectorOperations *_vop, bool interactionForceField=false, bool propagate=false, const VecIdProperties &properties={});  ; void clear ();  v = 0 More...;  ; void eq (MyMultiVecId a);  v = a More...;  ; void eq (MyMultiVecId a, SReal f);  v = a*f More...;  ; void peq (AllMultiVecId a, SReal",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_t_multi_vec.html:863,allocate,allocated,863,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_t_multi_vec.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_t_multi_vec.html,1,['allocate'],['allocated']
Energy Efficiency,"﻿. SOFA API: sofa::core::objectmodel::Aspect Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Friends |; List of all members . sofa::core::objectmodel::Aspect Class Reference . #include <AspectPool.h>; Detailed Description; This class represents an allocated aspect. AspectPool returns a smart pointer to an object of this class to give the aspect ownership to the caller. It is safe to use this class from several threads. . Public Member Functions; int aspectID () const;  ; void add_ref ();  ; void release ();  . Friends; class AspectPool;  . Function details. ◆ add_ref(). void sofa::core::objectmodel::Aspect::add_ref ; (; ). Add a reference to this aspect. Note that you should avoid using this method directly, use AspectRef instead to handle it automatically . ◆ aspectID(). int sofa::core::objectmodel::Aspect::aspectID ; (; ); const. inline . ◆ release(). void sofa::core::objectmodel::Aspect::release ; (; ). Release a reference to this aspect. Note that you should avoid using this method directly, use AspectRef instead to handle it automatically . Related details. ◆ AspectPool. friend class AspectPool. friend . sofacoreobjectmodelAspect; Generated on Mon Nov 11 2024 03:15:52 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect.html:318,allocate,allocated,318,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect.html,1,['allocate'],['allocated']
Energy Efficiency,"﻿. SOFA API: sofa::core::objectmodel::AspectBuffer Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; List of all members . sofa::core::objectmodel::AspectBuffer Class Reference . #include <AspectPool.h>; Detailed Description; This class is responsible for providing a buffer for communicating aspects between threads, such that only the most up to date aspect is kept, and the previous one is reused to send the next update. This is similar to triple buffering. . Protected Attributes; AspectPool & pool;  ; AtomicInt latestID;  -1 or aspect ID of the last version sent More...;  ; AtomicInt availableID;  -1 or aspect ID available to send the next version More...;  . Public Member Functions;  AspectBuffer (AspectPool &pool);  ;  ~AspectBuffer ();  ; AspectRef allocate ();  Allocate an aspect ID to prepare the next version, reusing a recent one if possible. More...;  ; void push (AspectRef id);  Send a new version, overriding the latest if it was not already received (in which case it can be ""recycled"" using allocate) More...;  ; bool pop (AspectRef &id);  Receive the latest version, return true if one is available, or false otherwise (in which case id is unchanged) More...;  ; void clear ();  . Attribute details. ◆ availableID. AtomicInt sofa::core::objectmodel::AspectBuffer::availableID. protected . -1 or aspect ID available to send the next version . ◆ latestID. AtomicInt sofa::core::objectmodel::AspectBuffer::latestID. protected . -1 or aspect ID of the last version sent . ◆ pool. AspectPool& sofa::core::objectmodel::AspectBuffer::pool. protected . Constructor details. ◆ AspectBuffer(). sofa::core::objectmodel::AspectBuffer::AspectBuffer ; (; AspectPool & ; pool). ◆ ~AspectBuffer(). sofa::core::objectmodel::AspectBuffer::~AspectBuffer ; (; ). Function details. ◆ allocate(). AspectRef sofa::core::objectmodel::AspectBuffer::allocate ; (; ). Allocate an aspect ID to prepare the next ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_buffer.html:855,allocate,allocate,855,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_buffer.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_buffer.html,1,['allocate'],['allocate']
Energy Efficiency,"﻿. SOFA API: sofa::core::objectmodel::AspectPool Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Protected Member Functions |; Friends |; List of all members . sofa::core::objectmodel::AspectPool Class Reference . #include <AspectPool.h>; Detailed Description; This class is responsible for managing the pool of available aspects numbers. It is safe to use this class from several thread. . Public Member Functions;  AspectPool ();  ;  ~AspectPool ();  ; void setReleaseCallback (const std::function< void(int)> &callback);  ; AspectRef allocate ();  ; AspectRef getAspect (int id);  ; int nbAspects () const;  ; int getAspectCounter (int id) const;  . Protected Member Functions; void release (int id);  . Friends; class Aspect;  . Constructor details. ◆ AspectPool(). sofa::core::objectmodel::AspectPool::AspectPool ; (; ). Constructor: creates a new aspect pool. . ◆ ~AspectPool(). sofa::core::objectmodel::AspectPool::~AspectPool ; (; ). Destructor. . Function details. ◆ allocate(). AspectRef sofa::core::objectmodel::AspectPool::allocate ; (; ). Request a new aspect. The returned object should stay alive as long as the aspect is in use. It it possible to duplicate the AspectRef if several threads/algorithm use the same aspect. If no aspect remains available, null pointer is returned. . ◆ getAspect(). AspectRef sofa::core::objectmodel::AspectPool::getAspect ; (; int ; id). ◆ getAspectCounter(). int sofa::core::objectmodel::AspectPool::getAspectCounter ; (; int ; id); const. inline . ◆ nbAspects(). int sofa::core::objectmodel::AspectPool::nbAspects ; (; ); const. inline . ◆ release(). void sofa::core::objectmodel::AspectPool::release ; (; int ; id). protected . Release the aspect having the specified number. It makes the number immediately available to satisfy subsequent AspectPool::allocate requests. . ◆ setReleaseCallback(). void sofa::core::objectmodel::AspectPool::setReleaseCallback ; (; const std::functio",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_pool.html:607,allocate,allocate,607,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_pool.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_aspect_pool.html,1,['allocate'],['allocate']
Energy Efficiency,"﻿. SOFA API: sofa::core::objectmodel::BaseContext Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Protected Attributes |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Friends |; List of all members . sofa::core::objectmodel::BaseContext Class Reference . #include <BaseContext.h>; Base class for Context classes, storing shared variables and parameters. ; More... Inheritance diagram for sofa::core::objectmodel::BaseContext:. [legend]; Detailed Description; Base class for Context classes, storing shared variables and parameters. ; A Context contains values or pointers to variables and parameters shared by a group of objects, typically referring to the same simulated body. Derived classes can defined simple isolated contexts or more powerful hierarchical representations (scene-graphs), in which case the context also implements the BaseNode interface.; AuthorJeremie Allard . Classes; class  GetObjectsCallBack;  ; class  GetObjectsCallBackT;  Helper functor allowing to insert an object into a container. More...;  . Protected Attributes; ComponentNameHelper m_nameHelper;  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  . Public Member Functions;  SOFA_CLASS (BaseContext, Base);  ; virtual const Vec3 & getGravity () const;  Gravity in local coordinates. More...;  ; virtual void setGravity (const Vec3 &);  Gravity in local coordinates. More...;  ; virtual BaseContext * getRootContext () const;  Get the root context of the graph. More...;  ; virtual bool hasAncestor (const BaseContext *) const;  ; Compone",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:839,power,powerful,839,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,1,['power'],['powerful']
Energy Efficiency,"﻿. SOFA API: sofa::defaulttype::AbstractTypeInfo Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Protected Member Functions |; List of all members . sofa::defaulttype::AbstractTypeInfo Class Referenceabstract . #include <AbstractTypeInfo.h>. Inheritance diagram for sofa::defaulttype::AbstractTypeInfo:. [legend]; Detailed Description; Information about the type of a value stored in a Data.; AbstractTypeInfo is part of the introspection/reflection capabilities of the Sofa scene graph API. It provides information about the type of the content of Data objects (Is it a simple type? A container? How much memory should be allocated to copy it?), and allows manipulating Data generically, without knowing their exact type.; This class is primarily used to copy information across BaseData objects, for example when there exists a link between two instances of BaseData. E.g. this mechanism allows you to copy the content of a Data<vector<int>> into a Data<vector<double>>, because there is an acceptable conversion between integer and double, and because both Data use a resizable container.; Using TypeInfo; Use BaseData::getValueTypeInfo() to get a pointer to an AbtractTypeInfo, and BaseData::getValueVoidPtr() to get a pointer to the content of a Data. You can then use the methods of AbtractTypeInfo to access the Data generically.; Very basic example: BaseData *data = getADataFromSomewhere();; const AbstractTypeInfo *typeinfo = data->getValueTypeInfo();; const void* ptr = data->getValueVoidPtr();; for (int i = 0 ; i < typeinfo->size(ptr) ; i++); std::string value = typeinfo->getTextValue(ptr, 0);; sofa::defaulttype::AbstractTypeInfo::AbstractTypeInfoAbstractTypeInfo()Definition: AbstractTypeInfo.h:177; Note about size and indices; All the getValue() and setValue() methods take an index as a parameter, which means that every type is abstracted to a one-dimensional container. See the detailed description of DataType",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1defaulttype_1_1_abstract_type_info.html:693,allocate,allocated,693,api/master/sofa/html/classsofa_1_1defaulttype_1_1_abstract_type_info.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1defaulttype_1_1_abstract_type_info.html,1,['allocate'],['allocated']
Energy Efficiency,"﻿. SOFA API: sofa::gui::qt::QEnergyStatWidget Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::gui::qt::QEnergyStatWidget Class Reference . #include <QEnergyStatWidget.h>. Inheritance diagram for sofa::gui::qt::QEnergyStatWidget:. [legend]. Public Member Functions;  QEnergyStatWidget (QWidget *parent, simulation::Node *node);  ;  ~QEnergyStatWidget ();  ; void stepImpl () override;  the only function that should be overloaded More...;  ;  Public Member Functions inherited from sofa::gui::qt::QGraphStatWidget;  QGraphStatWidget (QWidget *parent, simulation::Node *node, const QString &title, unsigned numberOfCurves, int bufferSize);  ; virtual ~QGraphStatWidget ();  ; virtual void step () final;  Main method called to update the graph. More...;  . Additional Inherited Members;  Protected Attributes inherited from sofa::gui::qt::QGraphStatWidget; simulation::Node * m_node;  pointer to the node monitored More...;  ; int m_bufferSize;  size of the buffers to stored More...;  ; QChart * m_chart;  Pointer to the chart Data. More...;  ; std::vector< QLineSeries * > m_curves;  vector of series to be plotted More...;  ; QValueAxis * m_axisX;  x axis pointer More...;  ; QValueAxis * m_axisY;  y axis pointer More...;  ; SReal m_yMin;  min y axis value stored More...;  ; SReal m_yMax;  max y axis value stored More...;  ; SReal m_lastTime;  last timestep monitored More...;  ; int m_cptStep;  step counter monitored More...;  ;  Protected Member Functions inherited from sofa::gui::qt::QGraphStatWidget; void setCurve (unsigned index, const QString &name, const QColor &color);  set the index-th curve (index must be < _numberOfCurves) More...;  ; void updateYAxisBounds (SReal value);  Method to update Y axis scale. More...;  ; void flushSeries ();  flush data from series not anymore displayed More...;  . Constructor details. ◆ QEnergyStatWidget(). sofa::gui::qt::QEnergyStatWidget::QEnergySt",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_energy_stat_widget.html:1001,monitor,monitored,1001,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_energy_stat_widget.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_energy_stat_widget.html,1,['monitor'],['monitored']
Energy Efficiency,"﻿. SOFA API: sofa::gui::qt::QGraphStatWidget Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; Protected Member Functions |; List of all members . sofa::gui::qt::QGraphStatWidget Class Referenceabstract . #include <QGraphStatWidget.h>. Inheritance diagram for sofa::gui::qt::QGraphStatWidget:. [legend]; Detailed Description; Base class to make graphes in the stat tab of the node widget TODO add gnuplot export . Protected Attributes; simulation::Node * m_node;  pointer to the node monitored More...;  ; int m_bufferSize;  size of the buffers to stored More...;  ; QChart * m_chart;  Pointer to the chart Data. More...;  ; std::vector< QLineSeries * > m_curves;  vector of series to be plotted More...;  ; QValueAxis * m_axisX;  x axis pointer More...;  ; QValueAxis * m_axisY;  y axis pointer More...;  ; SReal m_yMin;  min y axis value stored More...;  ; SReal m_yMax;  max y axis value stored More...;  ; SReal m_lastTime;  last timestep monitored More...;  ; int m_cptStep;  step counter monitored More...;  . Public Member Functions;  QGraphStatWidget (QWidget *parent, simulation::Node *node, const QString &title, unsigned numberOfCurves, int bufferSize);  ; virtual ~QGraphStatWidget ();  ; virtual void step () final;  Main method called to update the graph. More...;  ; virtual void stepImpl ()=0;  the only function that should be overloaded More...;  . Protected Member Functions; void setCurve (unsigned index, const QString &name, const QColor &color);  set the index-th curve (index must be < _numberOfCurves) More...;  ; void updateYAxisBounds (SReal value);  Method to update Y axis scale. More...;  ; void flushSeries ();  flush data from series not anymore displayed More...;  . Attribute details. ◆ m_axisX. QValueAxis* sofa::gui::qt::QGraphStatWidget::m_axisX. protected . x axis pointer . ◆ m_axisY. QValueAxis* sofa::gui::qt::QGraphStatWidget::m_axisY. protected . y axis pointer . ◆ ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_graph_stat_widget.html:576,monitor,monitored,576,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_graph_stat_widget.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_graph_stat_widget.html,1,['monitor'],['monitored']
Energy Efficiency,"﻿. SOFA API: sofa::gui::qt::QMomentumStatWidget Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::gui::qt::QMomentumStatWidget Class Reference . #include <QMomentumStatWidget.h>. Inheritance diagram for sofa::gui::qt::QMomentumStatWidget:. [legend]. Public Member Functions;  QMomentumStatWidget (QWidget *parent, simulation::Node *node);  ; virtual ~QMomentumStatWidget ();  ; void stepImpl () override;  the only function that should be overloaded More...;  ;  Public Member Functions inherited from sofa::gui::qt::QGraphStatWidget;  QGraphStatWidget (QWidget *parent, simulation::Node *node, const QString &title, unsigned numberOfCurves, int bufferSize);  ; virtual ~QGraphStatWidget ();  ; virtual void step () final;  Main method called to update the graph. More...;  . Additional Inherited Members;  Protected Attributes inherited from sofa::gui::qt::QGraphStatWidget; simulation::Node * m_node;  pointer to the node monitored More...;  ; int m_bufferSize;  size of the buffers to stored More...;  ; QChart * m_chart;  Pointer to the chart Data. More...;  ; std::vector< QLineSeries * > m_curves;  vector of series to be plotted More...;  ; QValueAxis * m_axisX;  x axis pointer More...;  ; QValueAxis * m_axisY;  y axis pointer More...;  ; SReal m_yMin;  min y axis value stored More...;  ; SReal m_yMax;  max y axis value stored More...;  ; SReal m_lastTime;  last timestep monitored More...;  ; int m_cptStep;  step counter monitored More...;  ;  Protected Member Functions inherited from sofa::gui::qt::QGraphStatWidget; void setCurve (unsigned index, const QString &name, const QColor &color);  set the index-th curve (index must be < _numberOfCurves) More...;  ; void updateYAxisBounds (SReal value);  Method to update Y axis scale. More...;  ; void flushSeries ();  flush data from series not anymore displayed More...;  . Constructor details. ◆ QMomentumStatWidget(). sofa::gui::qt::QMoment",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_momentum_stat_widget.html:1020,monitor,monitored,1020,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_momentum_stat_widget.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_momentum_stat_widget.html,1,['monitor'],['monitored']
Energy Efficiency,"﻿. SOFA API: sofa::helper::LCP Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::helper::LCP Class Reference . #include <LCPcalc.h>. Public Attributes; int it;  ; SReal error;  . Public Member Functions;  LCP ();  ;  ~LCP ();  ; void reset (void);  ; void allocate (unsigned int maxConst);  ; SReal ** getW (void);  ; SReal & getMu (void);  ; SReal * getDfree (void);  ; SReal getTolerance (void);  ; SReal getMaxIter (void);  ; SReal * getF (void);  ; SReal * getF_1 (void);  ; SReal * getD (void);  ; bool useInitialGuess (void);  ; unsigned int getDim (void);  ; unsigned int setDim (unsigned int nbC);  ; unsigned int getMaxConst (void);  ; void setNumItMax (int input_numItMax);  ; void setTol (SReal input_tol);  ; void setLCP (unsigned int input_dim, SReal *input_dfree, SReal **input_W, SReal *input_f, SReal &input_mu, SReal &input_tol, int input_numItMax);  ; void solveNLCP (bool convergenceTest, std::vector< SReal > *residuals=nullptr, std::vector< SReal > *violations=nullptr);  . Attribute details. ◆ error. SReal sofa::helper::LCP::error. ◆ it. int sofa::helper::LCP::it. Constructor details. ◆ LCP(). sofa::helper::LCP::LCP ; (; ). ◆ ~LCP(). sofa::helper::LCP::~LCP ; (; ). Function details. ◆ allocate(). void sofa::helper::LCP::allocate ; (; unsigned int ; maxConst). ◆ getD(). SReal* sofa::helper::LCP::getD ; (; void ; ). inline . ◆ getDfree(). SReal* sofa::helper::LCP::getDfree ; (; void ; ). inline . ◆ getDim(). unsigned int sofa::helper::LCP::getDim ; (; void ; ). inline . ◆ getF(). SReal* sofa::helper::LCP::getF ; (; void ; ). inline . ◆ getF_1(). SReal* sofa::helper::LCP::getF_1 ; (; void ; ). inline . ◆ getMaxConst(). unsigned int sofa::helper::LCP::getMaxConst ; (; void ; ). inline . ◆ getMaxIter(). SReal sofa::helper::LCP::getMaxIter ; (; void ; ). inline . ◆ getMu(). SReal& sofa::helper::LCP::getMu ; (; void ; ). inline . ◆ getTolerance(). SRea",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_l_c_p.html:373,allocate,allocate,373,api/master/sofa/html/classsofa_1_1helper_1_1_l_c_p.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_l_c_p.html,1,['allocate'],['allocate']
Energy Efficiency,"﻿. SOFA API: sofa::helper::Monomial_LD< Real, N > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Protected Attributes |; Public Member Functions |; Friends |; List of all members . sofa::helper::Monomial_LD< Real, N > Class Template Reference . #include <Polynomial_LD.h>; A generic monomial with N variables of type Real. A monomial is one term of a polynomial. ; More...; Detailed Description; template<typename Real, unsigned int N>; class sofa::helper::Monomial_LD< Real, N >; A generic monomial with N variables of type Real. A monomial is one term of a polynomial. ; Todo this first version of polynomial is a linear presentation. This presentation is efficient for arithmetic operator like +,-,*,/ and derivative. But is not optimized for the evaluating (comparing to the recurrent presentation). . Public Attributes; Real coef;  ; sofa::type::Vec< N, int > powers;  . Protected Attributes; sofa::type::Vec< N, std::string > variables;  . Public Member Functions;  Monomial_LD ();  ;  Monomial_LD (Real,...);  ;  Monomial_LD (const Monomial_LD< Real, N > &a);  ; Monomial_LD< Real, N > & operator= (const Monomial_LD< Real, N > &b);  ; void SetCoef (const Real &m_coef);  Setting of Monomial_LD. More...;  ; void SetPower (int numbervar, int powervalue);  ; int degree ();  Return the total degree of monomial. More...;  ; bool operator== (const Monomial_LD< Real, N > &b) const;  Logical operators. More...;  ; bool operator!= (const Monomial_LD< Real, N > &b) const;  ; bool isSamePowers (const Monomial_LD< Real, N > &b) const;  ; bool isnullptr () const;  ; Monomial_LD< Real, N > & operator*= (const Real &alpha);  Mathematical operators. More...;  ; Monomial_LD< Real, N > & operator/= (const Real &alpha);  ; Monomial_LD< Real, N > & operator+= (const Monomial_LD< Real, N > &b);  ; Monomial_LD< Real, N > & operator-= (const Monomial_LD< Real, N > &b);  ; Monomial_LD< Real, N > & operator*= (const Monomial_LD< ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_monomial___l_d.html:732,efficient,efficient,732,api/master/sofa/html/classsofa_1_1helper_1_1_monomial___l_d.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_monomial___l_d.html,2,"['efficient', 'power']","['efficient', 'powers']"
Energy Efficiency,"﻿. SOFA API: sofa::helper::OwnershipSPtr< T > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::helper::OwnershipSPtr< T > Class Template Reference . #include <OwnershipSPtr.h>; Detailed Description; template<class T>; class sofa::helper::OwnershipSPtr< T >; Smart pointer where the user precises if it must take the ownership (and so be in charge of deleting the data). Either it can point to an existing data without taking the ownership or it can point to a new temporary Data that will be deleted when this smart pointer is deleted (taking ownership). WarningMaybe an equivalent smart pointer exists in stl or boost that I do not know ; AuthorMatthieu Nesme . Public Member Functions;  OwnershipSPtr ();  default constructor: no pointed data, no ownership More...;  ;  OwnershipSPtr (const T *t, bool ownership);  point to a data, manually set ownership More...;  ;  OwnershipSPtr (const OwnershipSPtr< T > &other);  copy constructor that steals the ownership if 'other' had it More...;  ;  ~OwnershipSPtr ();  destructor will delete the data only if it has the ownership More...;  ; void operator= (const OwnershipSPtr< T > &other);  copy operator is stealing the ownership if 'other' had it More...;  ; const T & operator* () const;  get a const ref to the pointed data More...;  ; const T * operator-> () const;  get a const pointer to the pointer data More...;  . Constructor details. ◆ OwnershipSPtr() [1/3]. template<class T > . sofa::helper::OwnershipSPtr< T >::OwnershipSPtr ; (; ). inline . default constructor: no pointed data, no ownership . ◆ OwnershipSPtr() [2/3]. template<class T > . sofa::helper::OwnershipSPtr< T >::OwnershipSPtr ; (; const T * ; t, . bool ; ownership . ). inline . point to a data, manually set ownership . ◆ OwnershipSPtr() [3/3]. template<class T > . sofa::helper::OwnershipSPtr< T >::OwnershipSPtr ; (; const OwnershipSPtr< T > & ; other). inline . copy ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_ownership_s_ptr.html:446,charge,charge,446,api/master/sofa/html/classsofa_1_1helper_1_1_ownership_s_ptr.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_ownership_s_ptr.html,1,['charge'],['charge']
Energy Efficiency,"﻿. SOFA API: sofa::helper::system Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Classes |; Typedefs |; Functions |; Variables . sofa::helper::system Namespace Reference . Namespaces;  thread;  . Classes; class  DynamicLibrary;  Wrapper around the dynamic library facilities of the operating system. More...;  ; class  FileEventListener;  Contains an event-based API to monitor file changes. More...;  ; class  FileMonitor;  ; class  MonitoredFile;  ; class  FileRepository;  ; class  FileSystem;  Contains functions to interact with the file system. More...;  ; class  Locale;  ; class  TemporaryLocale;  RAII class to modify the locale temporarily. More...;  ; class  PipeProcess;  ; class  Plugin;  ; class  PluginManager;  ; class  SetDirectory;  . Typedefs; typedef vector< string > ListOfFiles;  ; typedef vector< FileEventListener * > ListOfListeners;  ; typedef list< MonitoredFile * > ListOfMonitors;  . Functions; const char * eventmaskToString (int evtmask);  ; void addAFileListenerInDict (string pathfilename, FileEventListener *listener);  ; int FileMonitor_init ();  ; void catch_alarm (int sig);  ; std::string cleanPath (const std::string &path);  . Variables; map< string, ListOfFiles > dir2files;  ; map< int, string > fd2fn;  ; map< string, ListOfListeners > file2listener;  ; int filemonitor_inotifyfd =-1;  ; ListOfMonitors monitors;  ; volatile sig_atomic_t keep_going = 1;  ; FileRepository PluginRepository (""SOFA_PLUGIN_PATH"", { Utils::getSofaPathTo(""plugins""), Utils::getSofaPathTo(""collections""), Utils::getSofaPathTo(""lib""), });  Default repository. More...;  ; FileRepository DataRepository (""SOFA_DATA_PATH"", { Utils::getSofaPathTo(""share/sofa""), Utils::getSofaPathTo(""share/sofa/examples"") }, { { Utils::getSofaPathTo(""etc/sofa.ini""), {""SHARE_DIR"", ""EXAMPLES_DIR""} } });  Default repository. More...;  . Typedef Documentation. ◆ ListOfFiles. typedef vector<string> sofa::helper::system::ListOfFiles. ◆ ListO",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1system.html:432,monitor,monitor,432,api/master/sofa/html/namespacesofa_1_1helper_1_1system.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1system.html,1,['monitor'],['monitor']
Energy Efficiency,"﻿. SOFA API: sofa::helper::system::FileEventListener Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::helper::system::FileEventListener Class Referenceabstract . #include <FileMonitor.h>; Contains an event-based API to monitor file changes. ; More... Inheritance diagram for sofa::helper::system::FileEventListener:. [legend]; Detailed Description; Contains an event-based API to monitor file changes. ; Those functions are here only to avoid depending on an external library, and they provide only basic functionality.; This set of functions is not meant to be complete, but it can be completed if need be.; Example of use: 1) implement the FileEventListener interface 2) register the files you want to monitor using FileMonitor::addFile(""mypath/to/file"", &mylistener); 3) call the update function to process & trigger the events.; The system does not contains any hidden thread. If you request the monitoring to happens in an hidden thread you can implement it externally. . Public Member Functions; virtual ~FileEventListener ();  ; virtual void fileHasChanged (const std::string &filename)=0;  . Constructor details. ◆ ~FileEventListener(). virtual sofa::helper::system::FileEventListener::~FileEventListener ; (; ). inlinevirtual . Function details. ◆ fileHasChanged(). virtual void sofa::helper::system::FileEventListener::fileHasChanged ; (; const std::string & ; filename). pure virtual . Implemented in sofa::gui::qt::RealGUIFileListener, and sofa::gl::GLSLFileListener. sofahelpersystemFileEventListener; Generated on Mon Nov 11 2024 03:31:03 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_file_event_listener.html:316,monitor,monitor,316,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_file_event_listener.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_file_event_listener.html,4,['monitor'],"['monitor', 'monitoring']"
Energy Efficiency,"﻿. SOFA API: sofa::helper::system::FileMonitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Member Functions |; List of all members . sofa::helper::system::FileMonitor Class Reference . #include <FileMonitor.h>. Static Public Member Functions; static int addFile (const std::string &filename, FileEventListener *listener);  add a new filepath to monitor and a listener to be triggered in case of change. returns >= 0 if the file was successfully added returns < 0 in case of error. More...;  ; static int addFile (const std::string &directoryname, const std::string &filename, FileEventListener *listener);  add a new path and file to monitor and a listener to be triggered in case of change. returns >= 0 if the file was successfully added returns < 0 in case of error. More...;  ; static int updates (int timeout=1);  check if the file have changed, colalesc the similar events and notify the listener. timeout is the number of seconds to block the calling process. Can be 0 (in this case it return immediately if there is no event. return -1 in case of error return >= 0 otherwise. More...;  ; static void removeListener (FileEventListener *listener);  remove the provided listener. If the listener is not existing, do nothing If the listener is nullptr, do nothing If the listener is associated with one or more file...remove all the associations. Keep in mind that the file are still monitored. More...;  ; static void removeFileListener (const std::string &filename, FileEventListener *listener);  remove the provided listener for a given file If the listener is not existing, do nothing If the listener is nullptr, do nothing If the listener is associated with one or more file...remove all the associations. Keep in mind that the file are still monitored. More...;  . Function details. ◆ addFile() [1/2]. int sofa::helper::system::FileMonitor::addFile ; (; const std::string & ; directoryname, . const std::string & ; filename, . Fil",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_file_monitor.html:406,monitor,monitor,406,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_file_monitor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_file_monitor.html,2,['monitor'],['monitor']
Energy Efficiency,﻿. SOFA API: sofa::helper::system::thread::FixedPower2Size< N > Struct Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes . sofa::helper::system::thread::FixedPower2Size< N > Struct Template Reference . #include <CircularQueue.h>; Detailed Description; template<int N>; struct sofa::helper::system::thread::FixedPower2Size< N >; This is a storage policy for CircularQueue that uses a compile-time fixed-size array aligned on the upper power of 2 of the specified template parameter. . Classes; class  type;  . sofahelpersystemthreadFixedPower2Size; Generated on Mon Nov 11 2024 03:31:03 for SOFA API by 1.9.1 . ,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1helper_1_1system_1_1thread_1_1_fixed_power2_size.html:486,power,power,486,api/master/sofa/html/structsofa_1_1helper_1_1system_1_1thread_1_1_fixed_power2_size.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1helper_1_1system_1_1thread_1_1_fixed_power2_size.html,1,['power'],['power']
Energy Efficiency,"﻿. SOFA API: sofa::helper::system::thread::ManyThreadsPerEnd Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Protected Member Functions |; List of all members . sofa::helper::system::thread::ManyThreadsPerEnd Class Reference . #include <CircularQueue.h>. Inheritance diagram for sofa::helper::system::thread::ManyThreadsPerEnd:. [legend]; Detailed Description; This is a lock-free (but not wait-free) multi-producer multi-consumer implementation of a circular queue matching the ThreadAccessPolicy of CircularQueue. NotemaxCapacity parameters MUST always be a power of 2. . Protected Attributes; AtomicInt head;  ; AtomicInt tail;  . Protected Member Functions;  ManyThreadsPerEnd ();  ; bool isEmpty (unsigned maxSize) const;  ; bool isFull (unsigned maxSize) const;  ; unsigned size (unsigned maxSize) const;  ; void init (AtomicInt array[], int maxCapacity);  ; bool push (AtomicInt array[], int maxSize, int maxCapacity, const AtomicInt &item);  ; bool pop (AtomicInt array[], int maxSize, int maxCapacity, AtomicInt &item, bool clear=true);  ; unsigned skip (AtomicInt array[], int maxSize, int maxCapacity, unsigned outmaxsize, bool clear=true);  ; template<class OutputIterator > ; unsigned pop (AtomicInt array[], int maxSize, int maxCapacity, OutputIterator out, unsigned outmaxsize, bool clear=true);  . Attribute details. ◆ head. AtomicInt sofa::helper::system::thread::ManyThreadsPerEnd::head. protected . ◆ tail. AtomicInt sofa::helper::system::thread::ManyThreadsPerEnd::tail. protected . Constructor details. ◆ ManyThreadsPerEnd(). SOFA_HELPER_API sofa::helper::system::thread::ManyThreadsPerEnd::ManyThreadsPerEnd ; (; ). inlineprotected . Function details. ◆ init(). SOFA_HELPER_API void sofa::helper::system::thread::ManyThreadsPerEnd::init ; (; AtomicInt ; array[], . int ; maxCapacity . ). inlineprotected . ◆ isEmpty(). SOFA_HELPER_API bool sofa::helper::system::thread::ManyThreadsPerEnd::isEmpty ; (; unsigned ;",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1thread_1_1_many_threads_per_end.html:627,power,power,627,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1thread_1_1_many_threads_per_end.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1thread_1_1_many_threads_per_end.html,1,['power'],['power']
Energy Efficiency,"﻿. SOFA API: sofa::simulation::CpuTask Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::simulation::CpuTask Class Reference . #include <CpuTask.h>. Inheritance diagram for sofa::simulation::CpuTask:. [legend]; Detailed Description; Base class to implement a CPU task all the tasks running on the CPU should inherits from this class . Public Member Functions; Status * getStatus (void) const override final;  ;  CpuTask (Status *status, int scheduledThread=-1);  ; virtual ~CpuTask ()=default;  ;  Public Member Functions inherited from sofa::simulation::Task;  Task (int scheduledThread);  ; virtual ~Task ()=default;  ; virtual MemoryAlloc run ()=0;  ; int getScheduledThread () const;  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Task; int m_id;  ;  Protected Attributes inherited from sofa::simulation::Task; int m_scheduledThread;  ;  Static Public Member Functions inherited from sofa::simulation::Task; static void * operator new (std::size_t sz);  ; static void operator delete (void *ptr);  ; static void operator delete (void *ptr, std::size_t sz);  ; static void * operator new[] (std::size_t sz)=delete;  ; static Task::Allocator * getAllocator ();  ; static void setAllocator (Task::Allocator *allocator);  . Constructor details. ◆ CpuTask(). sofa::simulation::CpuTask::CpuTask ; (; CpuTask::Status * ; status, . int ; scheduledThread = -1 . ). ◆ ~CpuTask(). virtual sofa::simulation::CpuTask::~CpuTask ; (; ). virtualdefault . Function details. ◆ getStatus(). CpuTask::Status * sofa::simulation::CpuTask::getStatus ; (; void ; ); const. finaloverridevirtual . Implements sofa::simulation::Task. sofasimulationCpuTask; Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_cpu_task.html:537,schedul,scheduledThread,537,api/master/sofa/html/classsofa_1_1simulation_1_1_cpu_task.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_cpu_task.html,3,['schedul'],['scheduledThread']
Energy Efficiency,"﻿. SOFA API: sofa::simulation::InitPerThreadDataTask Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::simulation::InitPerThreadDataTask Class Reference . #include <InitTasks.h>. Inheritance diagram for sofa::simulation::InitPerThreadDataTask:. [legend]. Public Member Functions;  InitPerThreadDataTask (std::atomic< int > *atomicCounter, std::mutex *mutex, CpuTask::Status *status);  ;  ~InitPerThreadDataTask () override=default;  ; MemoryAlloc run () override;  ;  Public Member Functions inherited from sofa::simulation::CpuTask; Status * getStatus (void) const override final;  ;  CpuTask (Status *status, int scheduledThread=-1);  ; virtual ~CpuTask ()=default;  ;  Public Member Functions inherited from sofa::simulation::Task;  Task (int scheduledThread);  ; virtual ~Task ()=default;  ; int getScheduledThread () const;  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Task; int m_id;  ;  Protected Attributes inherited from sofa::simulation::Task; int m_scheduledThread;  ;  Static Public Member Functions inherited from sofa::simulation::Task; static void * operator new (std::size_t sz);  ; static void operator delete (void *ptr);  ; static void operator delete (void *ptr, std::size_t sz);  ; static void * operator new[] (std::size_t sz)=delete;  ; static Task::Allocator * getAllocator ();  ; static void setAllocator (Task::Allocator *allocator);  . Constructor details. ◆ InitPerThreadDataTask(). sofa::simulation::InitPerThreadDataTask::InitPerThreadDataTask ; (; std::atomic< int > * ; atomicCounter, . std::mutex * ; mutex, . CpuTask::Status * ; status . ). ◆ ~InitPerThreadDataTask(). sofa::simulation::InitPerThreadDataTask::~InitPerThreadDataTask ; (; ). overridedefault . Function details. ◆ run(). Task::MemoryAlloc sofa::simulation::InitPerThreadDataTask::run ; (; ). overridevirtual . Implements sofa::simulation::Task. sofasimulationInitPer",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_init_per_thread_data_task.html:711,schedul,scheduledThread,711,api/master/sofa/html/classsofa_1_1simulation_1_1_init_per_thread_data_task.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_init_per_thread_data_task.html,2,['schedul'],['scheduledThread']
Energy Efficiency,"﻿. SOFA API: sofa::simulation::MainTaskSchedulerFactory Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Member Functions |; List of all members . sofa::simulation::MainTaskSchedulerFactory Class Reference . #include <MainTaskSchedulerFactory.h>; Detailed Description; A set of static function with the same interface than @TaskSchedulerFactory, working on a single instance of @TaskSchedulerFactory.; The static functions @createInRegistry use the factory to instantiate a task scheduler and store it in @MainTaskSchedulerRegistry . Static Public Member Functions; static bool registerScheduler (const std::string &name, const std::function< TaskScheduler *()> &creatorFunc);  ; static TaskScheduler * instantiate (const std::string &name);  ; static std::set< std::string > getAvailableSchedulers ();  ; static TaskScheduler * createInRegistry (const std::string &name);  ; static TaskScheduler * createInRegistry ();  ; static std::string defaultTaskSchedulerType ();  . Function details. ◆ createInRegistry() [1/2]. TaskScheduler * sofa::simulation::MainTaskSchedulerFactory::createInRegistry ; (; ). static . ◆ createInRegistry() [2/2]. TaskScheduler * sofa::simulation::MainTaskSchedulerFactory::createInRegistry ; (; const std::string & ; name). static . ◆ defaultTaskSchedulerType(). std::string sofa::simulation::MainTaskSchedulerFactory::defaultTaskSchedulerType ; (; ). static . ◆ getAvailableSchedulers(). std::set< std::string > sofa::simulation::MainTaskSchedulerFactory::getAvailableSchedulers ; (; ). static . ◆ instantiate(). TaskScheduler * sofa::simulation::MainTaskSchedulerFactory::instantiate ; (; const std::string & ; name). static . ◆ registerScheduler(). bool sofa::simulation::MainTaskSchedulerFactory::registerScheduler ; (; const std::string & ; name, . const std::function< TaskScheduler *()> & ; creatorFunc . ). static . sofasimulationMainTaskSchedulerFactory; Generated on Mon Nov 11 2024 03:33:58 for SOFA API b",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_main_task_scheduler_factory.html:535,schedul,scheduler,535,api/master/sofa/html/classsofa_1_1simulation_1_1_main_task_scheduler_factory.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_main_task_scheduler_factory.html,1,['schedul'],['scheduler']
Energy Efficiency,"﻿. SOFA API: sofa::simulation::SolveVisitorTask Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::simulation::SolveVisitorTask Class Reference . #include <SolveVisitor.h>; A task to provide to a task scheduler in which a solver solves. ; More... Inheritance diagram for sofa::simulation::SolveVisitorTask:. [legend]; Detailed Description; A task to provide to a task scheduler in which a solver solves. . Public Member Functions;  SolveVisitorTask (sofa::simulation::CpuTask::Status *status, sofa::core::behavior::OdeSolver *odeSolver, const sofa::core::ExecParams *params, SReal dt, sofa::core::MultiVecCoordId x, sofa::core::MultiVecDerivId v);  ;  ~SolveVisitorTask () override=default;  ; sofa::simulation::Task::MemoryAlloc run () final;  ;  Public Member Functions inherited from sofa::simulation::CpuTask; Status * getStatus (void) const override final;  ;  CpuTask (Status *status, int scheduledThread=-1);  ; virtual ~CpuTask ()=default;  ;  Public Member Functions inherited from sofa::simulation::Task;  Task (int scheduledThread);  ; virtual ~Task ()=default;  ; int getScheduledThread () const;  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Task; int m_id;  ;  Protected Attributes inherited from sofa::simulation::Task; int m_scheduledThread;  ;  Static Public Member Functions inherited from sofa::simulation::Task; static void * operator new (std::size_t sz);  ; static void operator delete (void *ptr);  ; static void operator delete (void *ptr, std::size_t sz);  ; static void * operator new[] (std::size_t sz)=delete;  ; static Task::Allocator * getAllocator ();  ; static void setAllocator (Task::Allocator *allocator);  . Constructor details. ◆ SolveVisitorTask(). sofa::simulation::SolveVisitorTask::SolveVisitorTask ; (; sofa::simulation::CpuTask::Status * ; status, . sofa::core::behavior::OdeSolver * ; odeSolver, . const sofa::core::ExecPar",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_solve_visitor_task.html:296,schedul,scheduler,296,api/master/sofa/html/classsofa_1_1simulation_1_1_solve_visitor_task.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_solve_visitor_task.html,4,['schedul'],"['scheduledThread', 'scheduler']"
Energy Efficiency,"﻿. SOFA API: sofa::simulation::StdTaskAllocator Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::simulation::StdTaskAllocator Class Reference . Inheritance diagram for sofa::simulation::StdTaskAllocator:. [legend]. Public Member Functions; void * allocate (std::size_t sz) final;  ; void free (void *ptr, std::size_t sz) final;  . Function details. ◆ allocate(). void* sofa::simulation::StdTaskAllocator::allocate ; (; std::size_t ; sz). inlinefinalvirtual . Implements sofa::simulation::Task::Allocator. ◆ free(). void sofa::simulation::StdTaskAllocator::free ; (; void * ; ptr, . std::size_t ; sz . ). inlinefinalvirtual . Implements sofa::simulation::Task::Allocator. sofasimulationStdTaskAllocator; Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_std_task_allocator.html:344,allocate,allocate,344,api/master/sofa/html/classsofa_1_1simulation_1_1_std_task_allocator.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_std_task_allocator.html,3,['allocate'],['allocate']
Energy Efficiency,"﻿. SOFA API: sofa::simulation::Task Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Public Attributes |; Protected Attributes |; Public Member Functions |; Static Public Member Functions |; List of all members . sofa::simulation::Task Class Referenceabstract . #include <Task.h>. Inheritance diagram for sofa::simulation::Task:. [legend]; Detailed Description; Task class interface . Classes; class  Allocator;  Task Allocator class interface used to allocate tasks. More...;  ; class  Status;  Task Status class interface used to synchronize tasks. More...;  . Public Attributes; int m_id;  . Protected Attributes; int m_scheduledThread;  . Public Member Functions;  Task (int scheduledThread);  ; virtual ~Task ()=default;  ; virtual MemoryAlloc run ()=0;  ; virtual Task::Status * getStatus (void) const =0;  ; int getScheduledThread () const;  . Static Public Member Functions; static void * operator new (std::size_t sz);  ; static void operator delete (void *ptr);  ; static void operator delete (void *ptr, std::size_t sz);  ; static void * operator new[] (std::size_t sz)=delete;  ; static Task::Allocator * getAllocator ();  ; static void setAllocator (Task::Allocator *allocator);  . Attribute details. ◆ m_id. int sofa::simulation::Task::m_id. ◆ m_scheduledThread. int sofa::simulation::Task::m_scheduledThread. protected . Constructor details. ◆ Task(). sofa::simulation::Task::Task ; (; int ; scheduledThread). ◆ ~Task(). virtual sofa::simulation::Task::~Task ; (; ). virtualdefault . Function details. ◆ getAllocator(). Task::Allocator * sofa::simulation::Task::getAllocator ; (; ). static . ◆ getScheduledThread(). int sofa::simulation::Task::getScheduledThread ; (; ); const. ◆ getStatus(). virtual Task::Status* sofa::simulation::Task::getStatus ; (; void ; ); const. pure virtual . Implemented in sofa::simulation::CpuTask. ◆ operator delete() [1/2]. void sofa::simulation::Task::operator delete ; (; void * ; ptr). static . ◆ op",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_task.html:505,allocate,allocate,505,api/master/sofa/html/classsofa_1_1simulation_1_1_task.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_task.html,2,"['allocate', 'schedul']","['allocate', 'scheduledThread']"
Energy Efficiency,"﻿. SOFA API: sofa::simulation::Task::Allocator Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::simulation::Task::Allocator Class Referenceabstract . #include <Task.h>; Task Allocator class interface used to allocate tasks. ; More... Inheritance diagram for sofa::simulation::Task::Allocator:. [legend]; Detailed Description; Task Allocator class interface used to allocate tasks. . Public Member Functions; virtual void * allocate (std::size_t sz)=0;  ; virtual void free (void *ptr, std::size_t sz)=0;  . Function details. ◆ allocate(). virtual void* sofa::simulation::Task::Allocator::allocate ; (; std::size_t ; sz). pure virtual . Implemented in sofa::simulation::StdTaskAllocator. ◆ free(). virtual void sofa::simulation::Task::Allocator::free ; (; void * ; ptr, . std::size_t ; sz . ). pure virtual . Implemented in sofa::simulation::StdTaskAllocator. sofasimulationTaskAllocator; Generated on Mon Nov 11 2024 03:34:14 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_task_1_1_allocator.html:305,allocate,allocate,305,api/master/sofa/html/classsofa_1_1simulation_1_1_task_1_1_allocator.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_task_1_1_allocator.html,5,['allocate'],['allocate']
Energy Efficiency,"﻿. SOFA API: sofa::simulation::TaskScheduler Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Static Public Member Functions |; Friends |; List of all members . sofa::simulation::TaskScheduler Class Referenceabstract . #include <TaskScheduler.h>. Inheritance diagram for sofa::simulation::TaskScheduler:. [legend]; Detailed Description; Base class for a task scheduler; The API allows to:; initialize the scheduler with a number of dedicated threads; add a task to the scheduler; wait until all tasks are done etc. . Public Member Functions; virtual ~TaskScheduler ()=default;  ; virtual void init (const unsigned int nbThread=0)=0;  ; virtual void stop (void)=0;  ; virtual unsigned int getThreadCount (void) const =0;  ; virtual const char * getCurrentThreadName ()=0;  ; virtual int getCurrentThreadType ()=0;  ; virtual bool addTask (Task *task)=0;  ; virtual bool addTask (Task::Status &status, const std::function< void()> &task);  ; virtual void workUntilDone (Task::Status *status)=0;  ; virtual Task::Allocator * getTaskAllocator ()=0;  . Static Public Member Functions; static unsigned GetHardwareThreadsCount ();  . Friends; class Task;  . Constructor details. ◆ ~TaskScheduler(). virtual sofa::simulation::TaskScheduler::~TaskScheduler ; (; ). virtualdefault . Function details. ◆ addTask() [1/2]. virtual bool sofa::simulation::TaskScheduler::addTask ; (; Task * ; task). pure virtual . Implemented in sofa::simulation::DefaultTaskScheduler. ◆ addTask() [2/2]. bool sofa::simulation::TaskScheduler::addTask ; (; Task::Status & ; status, . const std::function< void()> & ; task . ). virtual . ◆ getCurrentThreadName(). virtual const char* sofa::simulation::TaskScheduler::getCurrentThreadName ; (; ). pure virtual . Implemented in sofa::simulation::DefaultTaskScheduler. ◆ getCurrentThreadType(). virtual int sofa::simulation::TaskScheduler::getCurrentThreadType ; (; ). pure virtual . Implemented in sofa::simulation::D",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_task_scheduler.html:428,schedul,scheduler,428,api/master/sofa/html/classsofa_1_1simulation_1_1_task_scheduler.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_task_scheduler.html,3,['schedul'],['scheduler']
Energy Efficiency,"﻿. SOFA API: sofa::simulation::TaskSchedulerFactory Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::simulation::TaskSchedulerFactory Class Reference . #include <TaskSchedulerFactory.h>; Detailed Description; Simple factory structure used to instantiate a @TaskScheduler based on a name. The name and a creation function must be registered before trying to instantiate. . Public Member Functions; bool registerScheduler (const std::string &name, const std::function< TaskScheduler *()> &creatorFunc);  ; TaskScheduler * instantiate (const std::string &name);  ; std::set< std::string > getAvailableSchedulers ();  . Function details. ◆ getAvailableSchedulers(). std::set< std::string > sofa::simulation::TaskSchedulerFactory::getAvailableSchedulers ; (; ). Returnsa list of registered schedulers . ◆ instantiate(). TaskScheduler * sofa::simulation::TaskSchedulerFactory::instantiate ; (; const std::string & ; name). ◆ registerScheduler(). bool sofa::simulation::TaskSchedulerFactory::registerScheduler ; (; const std::string & ; name, . const std::function< TaskScheduler *()> & ; creatorFunc . ). Register a new scheduler in the factory; Parameters. namekey in the factory ; creatorFuncfunction creating a new TaskScheduler or a derived class . Returnsfalse if scheduler could not be registered . sofasimulationTaskSchedulerFactory; Generated on Mon Nov 11 2024 03:34:14 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_task_scheduler_factory.html:882,schedul,schedulers,882,api/master/sofa/html/classsofa_1_1simulation_1_1_task_scheduler_factory.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_task_scheduler_factory.html,3,['schedul'],"['scheduler', 'schedulers']"
Energy Efficiency,"﻿. SOFA API: sofa::simulation::TaskSchedulerRegistry Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; List of all members . sofa::simulation::TaskSchedulerRegistry Class Reference . #include <TaskSchedulerRegistry.h>; Detailed Description; Container for task schedulers and its associated name The registry is also owner of the schedulers: it destroys them in its destructor . Protected Attributes; std::map< std::string, TaskScheduler * > m_schedulers;  ; std::optional< std::pair< std::string, TaskScheduler * > > m_lastInserted {};  . Public Member Functions; bool addTaskSchedulerToRegistry (TaskScheduler *taskScheduler, const std::string &taskSchedulerName);  ; TaskScheduler * getTaskScheduler (const std::string &taskSchedulerName) const;  ; bool hasScheduler (const std::string &taskSchedulerName) const;  ; const std::optional< std::pair< std::string, TaskScheduler * > > & getLastInserted () const;  ; void clear ();  ;  ~TaskSchedulerRegistry ();  . Attribute details. ◆ m_lastInserted. std::optional<std::pair<std::string, TaskScheduler*> > sofa::simulation::TaskSchedulerRegistry::m_lastInserted {}. protected . ◆ m_schedulers. std::map<std::string, TaskScheduler*> sofa::simulation::TaskSchedulerRegistry::m_schedulers. protected . Constructor details. ◆ ~TaskSchedulerRegistry(). sofa::simulation::TaskSchedulerRegistry::~TaskSchedulerRegistry ; (; ). Function details. ◆ addTaskSchedulerToRegistry(). bool sofa::simulation::TaskSchedulerRegistry::addTaskSchedulerToRegistry ; (; TaskScheduler * ; taskScheduler, . const std::string & ; taskSchedulerName . ). Add a task scheduler to the registry and transfer the ownership . ◆ clear(). void sofa::simulation::TaskSchedulerRegistry::clear ; (; ). Clear the registry and destroy the task schedulers sstored in the registry . ◆ getLastInserted(). const std::optional< std::pair< std::string, TaskScheduler * > > & sofa::simulation::TaskSchedule",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_task_scheduler_registry.html:352,schedul,schedulers,352,api/master/sofa/html/classsofa_1_1simulation_1_1_task_scheduler_registry.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_task_scheduler_registry.html,2,['schedul'],['schedulers']
Energy Efficiency,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalComputeEnergyVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalComputeEnergyVisitor Class Reference . #include <MechanicalComputeEnergyVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalComputeEnergyVisitor:. [legend]; Detailed Description; Compute the amount of mechanical energy @author Francois Faure; . Public Member Functions;  MechanicalComputeEnergyVisitor (const sofa::core::MechanicalParams *mparams);  ;  ~MechanicalComputeEnergyVisitor () override;  ; SReal getKineticEnergy ();  ; SReal getPotentialEnergy ();  ; Result fwdMass (simulation::Node *, sofa::core::behavior::BaseMass *mass) override;  Process the BaseMass. More...;  ; Result fwdForceField (simulation::Node *, sofa::core::behavior::BaseForceField *f) override;  Process the BaseForceField. More...;  ; const char * getClassName () const override;  ; void execute (sofa::core::objectmodel::BaseContext *c, bool precomputedTraversalOrder=false) override;  Alias for context->executeVisitor(this) More...;  ;  Public Member Functions inherited from sofa::simulation::MechanicalVisitor;  MechanicalVisitor (const sofa::core::MechanicalParams *m_mparams);  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map);  ; Result processNodeTopDown (simulation::Node *node) override;  This method calls the fwd",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_energy_visitor.html:511,energy,energy,511,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_energy_visitor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_energy_visitor.html,1,['energy'],['energy']
Energy Efficiency,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalVNormVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalVNormVisitor Class Reference . #include <MechanicalVNormVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalVNormVisitor:. [legend]; Detailed Description; Compute the norm of a vector. The type of norm is set by parameter l. Use 0 for the infinite norm. Note that the 2-norm is more efficiently computed using the square root of the dot product. AuthorFrancois Faure, 2013 . Public Attributes; sofa::core::ConstMultiVecId a;  ; unsigned l;  Type of norm: for l>0, , while we use l=0 for the infinite norm: . More...;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalVNormVisitor (const sofa::core::ExecParams *params, sofa::core::ConstMultiVecId a, unsigned l);  ; SReal getResult () const;  ; Result fwdMechanicalState (VisitorContext *ctx, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; const char * getClassName () const override;  ; virtual std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char *",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_norm_visitor.html:595,efficient,efficiently,595,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_norm_visitor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_norm_visitor.html,1,['efficient'],['efficiently']
Integrability," #include <TopologySubsetData.h>; A class for storing element related data. Automatically manages topology changes. ; More... Inheritance diagram for sofa::core::topology::TopologySubsetData< ElementType, VecT >:. [legend]; Detailed Description; template<class ElementType, class VecT>; class sofa::core::topology::TopologySubsetData< ElementType, VecT >; A class for storing element related data. Automatically manages topology changes. ; This class is a wrapper of class type::vector that is made to take care transparently of all topology changes that might happen (non exhaustive list: elements added, removed, fused, renumbered). . Protected Attributes; sofa::type::vector< Index > m_map2Elements;  same size as this SubsetData but contains id of element link to each data[] More...;  ; bool m_addNewElements = false;  ;  Protected Attributes inherited from sofa::core::topology::TopologyData< ElementType, VecT >; std::unique_ptr< TopologyDataElementHandler > m_topologyHandler;  ; bool m_isTopologyDynamic;  ;  Protected Attributes inherited from sofa::core::topology::BaseTopologyData< VecT >; sofa::core::topology::BaseMeshTopology * m_topology;  Pointer to the Topology this TopologyData is depending on. More...;  ; Index m_lastElementIndex;  ;  Protected Attributes inherited from sofa::core::objectmodel::Data< T >; T m_defaultValue;  ; ValueType m_value;  Value. More...;  ;  Protected Attributes inherited from sofa::core::objectmodel::DDGNode; DDGLinkContainer inputs;  ; DDGLinkContainer outputs;  . Public Member Functions;  TopologySubsetData (const typename sofa::core::topology::BaseTopologyData< VecT >::InitData &data);  Default Constructor to init Data. More...;  ; void setMap2Elements (const sofa::type::vector< Index > _map2Elements);  Method to set a vector map to rull this subsetData. Will set. More...;  ; sofa::type::vector< Index > & getMap2Elements ();  Getter of the vector map indices. More...;  ; void supportNewTopologyElements (bool value);  ; bool isNewTopology",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topology_subset_data.html:1567,depend,depending,1567,api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topology_subset_data.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topology_subset_data.html,1,['depend'],['depending']
Integrability," ();  ; WriteOnlyVecDeriv writeOnlyDx ();  ; ReadVecDeriv readNormals () const;  ; const AccumulationVecId< TDataTypes, V_DERIV, V_READ > & readTotalForces () const;  Returns a proxy objects offering simplified access to elements of the cumulative sum of all force containers. More...;  ; void addToTotalForces (core::ConstVecDerivId forceId) override;  The provided VecDerivId will contribute to the sum of all force containers. More...;  ; void removeFromTotalForces (core::ConstVecDerivId forceId) override;  ;  State ();  ;  ~State () override;  . Additional Inherited Members;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObject; SingleLink< BaseObject, BaseContext, BaseLink::FLAG_DOUBLELINK > l_context;  ; LinkSlaves l_slaves;  ; SingleLink< BaseObject, BaseObject, BaseLink::FLAG_DOUBLELINK > l_master;  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of field",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_state.html:14363,message,messages,14363,api/master/sofa/html/classsofa_1_1core_1_1_state.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_state.html,1,['message'],['messages']
Integrability," ();  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, BaseData::DataFlags dataFlags);  Helper method used by initData() More...;  ; template<class T > ; void initData0 (Data< T > *field, typename Data< T >::InitData &res, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  . Additional Inherited Members;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  ;  Public Member Functions inherited from sofa::core::objectmodel::Base; virtual const BaseClass * getClass () const;  ; void addDeprecatedAttribute (lifecycle::DeprecatedData *attribute);  ; void addUpdateCallback (const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs);  ; void addOutput",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory.html:2849,message,messages,2849,api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory.html,1,['message'],['messages']
Integrability," (ActiveFlags & FLAG_MULTILINK) != 0;  ; static constexpr bool StorePath = (ActiveFlags & FLAG_STOREPATH) != 0;  . Protected Attributes; OwnerType * m_owner {nullptr};  ; Container m_value;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseLink; unsigned int m_flags;  ; std::string m_name;  ; std::string m_help;  ; int m_counter;  Number of changes since creation. More...;  . Public Member Functions;  TLink ();  ;  TLink (const InitLink< OwnerType > &init);  ;  ~TLink () override;  ; size_t size () const;  ; bool empty () const;  ; const Container & getValue () const;  ; const_iterator begin () const;  ; const_iterator end () const;  ; const_reverse_iterator rbegin () const;  ; const_reverse_iterator rend () const;  ; void clear ();  ; bool addBegin (DestPtr v);  ; bool add (DestPtr v);  ; bool add (DestPtr v, const std::string &path);  ; bool addPath (const std::string &path);  ; bool remove (DestPtr v);  ; bool removeAt (std::size_t index);  ; bool removePath (const std::string &path);  ; const BaseClass * getDestClass () const override;  ; const BaseClass * getOwnerClass () const override;  ; size_t getSize () const override;  ; sofa::core::objectmodel::Base * getOwnerBase () const override;  ; void setOwner (OwnerType *owner);  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseLink;  BaseLink (LinkFlags flags);  ;  BaseLink (const BaseInitLink &init, LinkFlags flags);  ; virtual ~BaseLink ();  ; const std::string & getName () const;  ; void setName (const std::string &name);  ; const std::string & getHelp () const;  Get help message. More...;  ; void setHelp (const std::string &val);  Set help message. More...;  ; void setFlag (LinkFlagsEnum flag, bool b);  Set one of the flags. More...;  ; bool getFlag (LinkFlagsEnum flag) const;  Get one flag. More...;  ; bool isMultiLink () const;  ; bool isStrongLink () const;  ; bool isDoubleLink () const;  ; bool isDuplicate () const;  ; bool storePath () const;  ; void setPersistent",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_t_link.html:2670,message,message,2670,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_t_link.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_t_link.html,1,['message'],['message']
Integrability," (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (T *&ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic list of objects access template ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:6442,wrap,wrapper,6442,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,4,['wrap'],['wrapper']
Integrability," (VecId v, std::istream &in)=0;  ; virtual SReal compareVec (ConstVecId v, std::istream &in)=0;  ;  Public Member Functions inherited from sofa::core::BaseState;  SOFA_ABSTRACT_CLASS (BaseState, objectmodel::BaseObject);  ; virtual Size getSize () const =0;  Current size of all stored vectors. More...;  ; virtual void resize (Size vsize)=0;  Resize all stored vector. More...;  ; virtual void addToTotalForces (core::ConstVecDerivId forceId);  ; virtual void removeFromTotalForces (core::ConstVecDerivId forceId);  ; virtual objectmodel::BaseData * baseWrite (VecId v)=0;  ; virtual const objectmodel::BaseData * baseRead (ConstVecId v) const =0;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObject;  SOFA_CLASS (BaseObject, Base);  ; virtual void draw (const core::visual::VisualParams *);  Render internal data of this object, for debugging purposes. More...;  ; virtual void computeBBox (const core::ExecParams *, bool=false);  ; void setSrc (const std::string &v, std::vector< std::string > *attributeList=nullptr);  Sets a source Object and parses it to collect dependent Data. More...;  ; void setSrc (const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr);  ; Base * findLinkDestClass (const BaseClass *destType, const std::string &path, const BaseLink *link) override;  ; virtual std::string getPathName () const override;  Return the full path name of this object. More...;  ; SReal getTime () const;  Current time. More...;  ; const BaseContext * getContext () const;  ; BaseContext * getContext ();  ; const BaseObject * getMaster () const;  ; BaseObject * getMaster ();  ; const VecSlaves & getSlaves () const;  ; BaseObject * getSlave (const std::string &name) const;  ; virtual void addSlave (BaseObject::SPtr s);  ; virtual void removeSlave (BaseObject::SPtr s);  ; virtual void handleEvent (Event *);  Handle an event. More...;  ; virtual void handleTopologyChange ();  ; virtual void handleTopologyChange (core",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_mechanical_state.html:8355,depend,dependent,8355,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_mechanical_state.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_mechanical_state.html,1,['depend'],['dependent']
Integrability," *&ptr, const std::string &path, const BaseLink *link);  . Static Public Member Functions; static std::string GetCustomTemplateName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseObject; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  . Protected Member Functions;  SOFA_ATTRIBUTE_REPLACED__TYPEMEMBER (Vector3, sofa::type::Vec3);  ; void integrateMesh ();  integrates the whole mesh More...;  ; void integrateTriangle (type::Vec3 kV0, type::Vec3 kV1, type::Vec3 kV2);  ; void generateRigid ();  generates the RigidMass from the mesh integral More...;  ;  Protected Member Functions inherited from sofa::core::DataEngine;  DataEngine ();  Constructor. More...;  ;  ~DataEngine () override;  Destructor. Do nothing. More...;  ; virtual void doInternalUpdate () final;  Prevent engines to use the internalUpdate mechanism, so that only update/doUpdate is used. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::DDGNode; virtual void doAddInput (DDGNode *n);  ; virtual void doDelInput (DDGNode *n);  ; virtual void doAddOutput (DDGNode *n);  ; virtual void doDelOutput (DDGNode *n);  ; void cleanDirtyOutputsOfInputs ();  the dirtyOutputs flags of all the inputs will be set to false More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseCont",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_generate_rigid_mass.html:14002,integrat,integrateTriangle,14002,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_generate_rigid_mass.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_generate_rigid_mass.html,1,['integrat'],['integrateTriangle']
Integrability," *help, BaseData::DataFlags dataFlags);  Helper method used by initData() More...;  ; template<class T > ; void initData0 (Data< T > *field, typename Data< T >::InitData &res, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  . Friends; class Ray;  . Additional Inherited Members;  Public Attributes inherited from sofa::core::CollisionModel; CollisionElementActiver * myCollElemActiver;  CollisionElementActiver that activate or deactivate collision element during execution. More...;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseObject; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions i",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_ray_collision_model.html:20271,message,messages,20271,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_ray_collision_model.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_ray_collision_model.html,1,['message'],['messages']
Integrability," *name, const char *help, bool isDisplayed=true, bool isReadOnly=false)sofa::core::objectmodel::Baseprotected; initData0(BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, BaseData::DataFlags dataFlags)sofa::core::objectmodel::Baseprotected; initData0(Data< T > *field, typename Data< T >::InitData &res, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false)sofa::core::objectmodel::Baseinlineprotected; initLarge(sofa::Index i, const Element &elem)sofa::component::solidmechanics::fem::elastic::HexahedronFEMForceField< DataTypes >protected; initPolar(sofa::Index i, const Element &elem)sofa::component::solidmechanics::fem::elastic::HexahedronFEMForceField< DataTypes >protected; initSmall(sofa::Index i, const Element &elem)sofa::component::solidmechanics::fem::elastic::HexahedronFEMForceField< DataTypes >protected; insertInNode(objectmodel::BaseNode *node) overridesofa::core::behavior::BaseForceFieldvirtual; integrateStiffness(int signx0, int signy0, int signz0, int signx1, int signy1, int signz1, const Real u, const Real v, const Real w, const Mat33 &J_1)sofa::component::solidmechanics::fem::elastic::HexahedronFEMForceField< DataTypes >protectedstatic; isCompliancesofa::core::behavior::BaseForceField; isComponentStateValid() constsofa::core::objectmodel::Baseinline; l_contextsofa::core::objectmodel::BaseObjectprotected; l_mastersofa::core::objectmodel::BaseObjectprotected; l_mechanicalStatessofa::core::behavior::StateAccessorprotected; l_slavessofa::core::objectmodel::BaseObjectprotected; l_topologysofa::component::solidmechanics::fem::elastic::BaseLinearElasticityFEMForceField< DataTypes >; LARGE enum valuesofa::component::solidmechanics::fem::elastic::HexahedronFEMForceField< DataTypes >; LinkSlaves typedefsofa::core::objectmodel::BaseObject; m_aliasDatasofa::core::objectmodel::Baseprotected; m_aliasLinksofa::core::objectmodel::Baseprotected; m_definitionSourceFileNamesofa::core::objectmodel::Bas",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_hexahedron_f_e_m_force_field-members.html:19097,integrat,integrateStiffness,19097,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_hexahedron_f_e_m_force_field-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_hexahedron_f_e_m_force_field-members.html,1,['integrat'],['integrateStiffness']
Integrability," *params=core::execparams::defaultInstance());  Activate collision pipeline. More...;  ; virtual void integrate (const core::ExecParams *params, SReal dt);  Activate OdeSolvers. More...;  ; const Solvers & getSolverSequence ();  . Additional Inherited Members;  Public Attributes inherited from sofa::core::behavior::BaseAnimationLoop; SingleLink< BaseAnimationLoop, core::objectmodel::BaseNode, BaseLink::FLAG_STOREPATH > l_node;  ; Data< bool > d_computeBoundingBox;  If true, compute the global bounding box of the scene at each time step. Used mostly for rendering. More...;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  ;  Protected Attributes inherited from sofa::core::behavior::BaseAnimationLoop; SReal m_resetTime;  Stores starting time of the simulation. More...;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObject; SingleLink< BaseObject, BaseContext, BaseLink::FLAG_DOUBLELINK > l_context;  ; LinkSlaves l_slaves;  ; SingleLink< BaseObject, BaseObject, BaseLink::FLAG_DOUBLELINK > l_master;  ;  Protected Attributes inherit",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html:4589,message,messages,4589,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html,1,['message'],['messages']
Integrability," *previousMaster, core::objectmodel::BaseObject *master, core::objectmodel::BaseObject *slave);  . Static Public Member Functions; template<class RealObject > ; static Node::SPtr create (RealObject *, sofa::core::objectmodel::BaseObjectDescription *arg);  ; static Node::SPtr create (const std::string &name);  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseContext; static BaseContext * getDefault ();  . Protected Member Functions;  Node (const std::string &name="""");  ; virtual ~Node () override;  ; virtual bool doAddObject (sofa::core::objectmodel::BaseObject::SPtr obj, sofa::core::objectmodel::TypeOfInsertion insertionLocation=sofa::core::objectmodel::TypeOfInsertion::AtEnd);  Add an object. Detect the implemented interfaces and add the object to the corresponding lists. More...;  ; virtual bool doRemoveObject (sofa::core::objectmodel::BaseObject::SPtr obj);  Remove an object. More...;  ; virtual void doMoveObject (sofa::core::objectmodel::BaseObject::SPtr sobj, Node *prev_parent);  Remove an object. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseNode;  BaseNode ();  ;  ~BaseNode () override;  ; void setObjectContext (BaseObject::SPtr obj);  Set the context of an object to this. More...;  ; void clearObjectContext (BaseObject::SPtr obj);  Reset the context of an object. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, Base",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:28113,interface,interfaces,28113,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,1,['interface'],['interfaces']
Integrability," *ptr=nullptr, objectmodel::BaseObjectDescription *arg=nullptr);  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseObject; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  ;  Static Public Member Functions inherited from sofa::component::solidmechanics::fem::elastic::BaseLinearElasticityFEMForceField< DataTypes >; static std::pair< Real, Real > toLameParameters (_2DMaterials, Real youngModulus, Real poissonRatio);  ; static std::pair< Real, Real > toLameParameters (_3DMaterials, Real youngModulus, Real poissonRatio);  ;  Static Protected Member Functions inherited from sofa::component::solidmechanics::fem::elastic::HexahedronFEMForceField< DataTypes >; static Mat33 integrateStiffness (int signx0, int signy0, int signz0, int signx1, int signy1, int signz1, const Real u, const Real v, const Real w, const Mat33 &J_1);  ; static void computeForce (Displacement &F, const Displacement &Depl, const ElementStiffness &K);  ; static void computeRotationLarge (Transformation &r, Coord &edgex, Coord &edgey);  . Attribute details. ◆ _finalWeights. template<class DataTypes > . type::vector< std::pair<Index, Weight> > sofa::component::solidmechanics::fem::nonuniform::HexahedronCompositeFEMForceFieldAndMass< DataTypes >::_finalWeights. ◆ _weights. template<class DataTypes > . type::vector< type::vector<Weight> > sofa::component::solidmechanics::fem::nonuniform::HexahedronCompositeFEMForceFieldAndMass< DataTypes >::_weights. ◆ CoarseToFine. template<class DataTypes > . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1nonuniform_1_1_hexahedron_composite_f_e_m_force_field_and_mass.html:33980,integrat,integrateStiffness,33980,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1nonuniform_1_1_hexahedron_composite_f_e_m_force_field_and_mass.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1nonuniform_1_1_hexahedron_composite_f_e_m_force_field_and_mass.html,1,['integrat'],['integrateStiffness']
Integrability," *ptr=nullptr, objectmodel::BaseObjectDescription *arg=nullptr);  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseObject; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  ;  Static Public Member Functions inherited from sofa::component::solidmechanics::fem::elastic::BaseLinearElasticityFEMForceField< DataTypes >; static std::pair< Real, Real > toLameParameters (_2DMaterials, Real youngModulus, Real poissonRatio);  ; static std::pair< Real, Real > toLameParameters (_3DMaterials, Real youngModulus, Real poissonRatio);  ;  Static Protected Member Functions inherited from sofa::component::solidmechanics::fem::elastic::HexahedronFEMForceField< DataTypes >; static Mat33 integrateStiffness (int signx0, int signy0, int signz0, int signx1, int signy1, int signz1, const Real u, const Real v, const Real w, const Mat33 &J_1);  ; static void computeForce (Displacement &F, const Displacement &Depl, const ElementStiffness &K);  ; static void computeRotationLarge (Transformation &r, Coord &edgex, Coord &edgey);  . Attribute details. ◆ _lumpedMasses. template<class DataTypes > . type::vector<Coord> sofa::component::solidmechanics::fem::elastic::HexahedronFEMForceFieldAndMass< DataTypes >::_lumpedMasses. protected . masses per particle computed by lumping mass matrices . ◆ _particleMasses. template<class DataTypes > . MassVector sofa::component::solidmechanics::fem::elastic::HexahedronFEMForceFieldAndMass< DataTypes >::_particleMasses. protected . masses per particle in",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_hexahedron_f_e_m_force_field_and_mass.html:29441,integrat,integrateStiffness,29441,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_hexahedron_f_e_m_force_field_and_mass.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_hexahedron_f_e_m_force_field_and_mass.html,1,['integrat'],['integrateStiffness']
Integrability," *ptr=nullptr, objectmodel::BaseObjectDescription *arg=nullptr);  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseObject; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  ;  Static Public Member Functions inherited from sofa::component::solidmechanics::fem::elastic::BaseLinearElasticityFEMForceField< DataTypes >; static std::pair< Real, Real > toLameParameters (_2DMaterials, Real youngModulus, Real poissonRatio);  ; static std::pair< Real, Real > toLameParameters (_3DMaterials, Real youngModulus, Real poissonRatio);  ;  Static Protected Member Functions inherited from sofa::component::solidmechanics::fem::elastic::HexahedronFEMForceField< DataTypes >; static Mat33 integrateStiffness (int signx0, int signy0, int signz0, int signx1, int signy1, int signz1, const Real u, const Real v, const Real w, const Mat33 &J_1);  ; static void computeForce (Displacement &F, const Displacement &Depl, const ElementStiffness &K);  ; static void computeRotationLarge (Transformation &r, Coord &edgex, Coord &edgey);  . Attribute details. ◆ d_nbVirtualFinerLevels. template<class DataTypes > . Data<int> sofa::component::solidmechanics::fem::nonuniform::NonUniformHexahedronFEMForceFieldAndMass< DataTypes >::d_nbVirtualFinerLevels. use virtual finer levels, in order to compte non-uniform stiffness . ◆ d_totalMass. template<class DataTypes > . Data<Real> sofa::component::solidmechanics::fem::nonuniform::NonUniformHexahedronFEMForceFieldAndMass< DataTypes >::d_totalMass. ◆ d_use",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1nonuniform_1_1_non_uniform_hexahedron_f_e_m_force_field_and_mass.html:31534,integrat,integrateStiffness,31534,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1nonuniform_1_1_non_uniform_hexahedron_f_e_m_force_field_and_mass.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1nonuniform_1_1_non_uniform_hexahedron_f_e_m_force_field_and_mass.html,1,['integrat'],['integrateStiffness']
Integrability," 2, int > > resolution;  ; sofa::core::objectmodel::RenamedData< bool > fullscreen;  ; sofa::core::objectmodel::RenamedData< sofa::helper::OptionsGroup > cameraMode;  ; sofa::core::objectmodel::RenamedData< sofa::helper::OptionsGroup > objectPickingMethod;  ; Data< sofa::type::Vec< 2, int > > d_resolution;  resolution of the Viewer More...;  ; Data< bool > d_fullscreen;  Fullscreen mode. More...;  ; Data< sofa::helper::OptionsGroup > d_cameraMode;  Camera mode. More...;  ; Data< sofa::helper::OptionsGroup > d_objectPickingMethod;  The method used to pick objects. More...;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  . Public Member Functions;  SOFA_CLASS (ViewerSetting, ConfigurationSetting);  Sofa macro to define typedef. More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::ConfigurationSetting;  SOFA_CLASS (ConfigurationSetting, BaseObject);  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; bool insertInNode (objectmodel::BaseNode *node) ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1setting_1_1_viewer_setting.html:1625,message,messages,1625,api/master/sofa/html/classsofa_1_1component_1_1setting_1_1_viewer_setting.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1setting_1_1_viewer_setting.html,1,['message'],['messages']
Integrability," ; Implements sofa::simulation::SceneLoader. ◆ doLoadFromMemory(). NodeSPtr sofa::simulation::SceneLoaderXML::doLoadFromMemory ; (; const char * ; filename, . const char * ; data . ). load a scene from memory (typically : an xml into a string) . ◆ getExtensionList(). void sofa::simulation::SceneLoaderXML::getExtensionList ; (; ExtensionList * ; list). overridevirtual . get the list of file extensions ; Implements sofa::simulation::SceneLoader. ◆ getFileTypeDesc(). std::string sofa::simulation::SceneLoaderXML::getFileTypeDesc ; (; ). overridevirtual . get the file type description ; Implements sofa::simulation::SceneLoader. ◆ loadFromMemory(). Node::SPtr sofa::simulation::SceneLoaderXML::loadFromMemory ; (; const char * ; filename, . const char * ; data . ). static . load a scene from memory (typically : an xml into a string) ; Load from a string in memory. . ◆ processXML(). Node::SPtr sofa::simulation::SceneLoaderXML::processXML ; (; xml::BaseElement * ; xml, . const char * ; filename . ). static . generic function to process xml tree (after loading the xml structure) ; Load a scene from a file. . ◆ syntaxForAddingRequiredPlugin(). bool sofa::simulation::SceneLoaderXML::syntaxForAddingRequiredPlugin ; (; const std::string & ; pluginName, . const std::vector< std::string > & ; listComponents, . std::ostream & ; ss, . sofa::simulation::Node * ; nodeWhereAdded . ). overridevirtual . Write into a ostream the syntax to add a RequiredPlugin component in the scene file. The syntax depends on the file format, hence the SceneLoader. The function returns true if the derived SceneLoader implements this function, false otherwise. ; Reimplemented from sofa::simulation::SceneLoader. ◆ write(). void sofa::simulation::SceneLoaderXML::write ; (; sofa::simulation::Node * ; node, . const char * ; filename . ). overridevirtual . write the file ; Reimplemented from sofa::simulation::SceneLoader. sofasimulationSceneLoaderXML; Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_x_m_l.html:5252,depend,depends,5252,api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_x_m_l.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_x_m_l.html,1,['depend'],['depends']
Integrability," ; More... Inheritance diagram for sofa::core::visual::ShaderElement:. [legend]; Detailed Description; A basic interface to define an element to be used with a Shader. . Public Member Functions;  SOFA_ABSTRACT_CLASS (ShaderElement, objectmodel::BaseObject);  ; virtual ShaderElementType getSEType () const =0;  Returns the type of shader element (texture, macro, variable, or attribute) More...;  ; virtual const std::string & getSEID () const =0;  ; virtual const core::objectmodel::BaseData * getSEValue () const =0;  ; virtual core::objectmodel::BaseData * getSEValue ()=0;  ; virtual int getSESizePerVertex ();  ; virtual int getSETotalSize ();  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObject;  SOFA_CLASS (BaseObject, Base);  ; virtual void draw (const core::visual::VisualParams *);  Render internal data of this object, for debugging purposes. More...;  ; virtual void computeBBox (const core::ExecParams *, bool=false);  ; void setSrc (const std::string &v, std::vector< std::string > *attributeList=nullptr);  Sets a source Object and parses it to collect dependent Data. More...;  ; void setSrc (const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr);  ; Base * findLinkDestClass (const BaseClass *destType, const std::string &path, const BaseLink *link) override;  ; virtual std::string getPathName () const override;  Return the full path name of this object. More...;  ; virtual bool insertInNode (BaseNode *);  ; virtual bool removeInNode (BaseNode *);  ; SReal getTime () const;  Current time. More...;  ; const BaseContext * getContext () const;  ; BaseContext * getContext ();  ; const BaseObject * getMaster () const;  ; BaseObject * getMaster ();  ; const VecSlaves & getSlaves () const;  ; BaseObject * getSlave (const std::string &name) const;  ; virtual void addSlave (BaseObject::SPtr s);  ; virtual void removeSlave (BaseObject::SPtr s);  ; virtual void handleEvent (Event *);  Handle an event. More..",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1visual_1_1_shader_element.html:1458,depend,dependent,1458,api/master/sofa/html/classsofa_1_1core_1_1visual_1_1_shader_element.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1visual_1_1_shader_element.html,1,['depend'],['dependent']
Integrability," ; SOFA - Topic: [SOLVED] Error while building SOFA on Windows 7, QGLViewer/Qt conflict. /error-while-buildin-sofa-in-linux; ; SOFA - Topic: [SOLVED] Error while building SOFA in Linux. /error-while-build-sofa-in-linux; ; SOFA - Topic: [SOLVED] Error while build SOFA in Linux. /error-while-compiling-sofa-in-mac-os-yosemitegl-shader-support-requires-glew; ; SOFA - Topic: [SOLVED] Error while compiling SOFA in Mac OS Yosemite:""GL Shader support requires GLEW."". /error-while-compiling-sofa-v2012-with-sofapython-3; ; SOFA - Topic: Error while compiling SOFA v2012 with Sofapython 3. /error-while-compiling-softrobots-and-stilib-plugin; ; SOFA - Topic: [SOLVED] Error while compiling Softrobots and STILIB plugin. /error-while-sofapython3-installation; ; SOFA - Topic: [SOLVED] Error while SofaPython3 installation. /error-while-use-sofa-c-template-in-tutorial; ; SOFA - Topic: Error while use Sofa c++ template in tutorial. /error-with-cimg-plugin-with-dependancy-to-skeleton-h-does-not-compile; ; SOFA - Topic: [SOLVED] Error with CImg: plugin with dependency to skeleton.h does not compile. /error-with-global-bounding-box; . /feed; ; [SOLVED] Error with global bounding box – SOFA. SOFA - Topic: [SOLVED] Error with global bounding box. /error-with-plugin-flexible; ; SOFA - Topic: [SOLVED] Error with plugin Flexible. /error-with-plugins-with-sofarosconnector; ; SOFA - Topic: Error with plugins with ""SofaROSConnector"". /error-with-test-scene-required-plugins-error; ; SOFA - Topic: [SOLVED] Error with test scene, Required plugins error. /error-with-tetrahedraltensormassforcefield; ; SOFA - Topic: [SOLVED] error with TetrahedralTensorMassForceField. /estimate-pressure; ; SOFA - Topic: [SOLVED] Estimate Pressure. /estimating-external-force-on-a-vertex; ; SOFA - Topic: Estimating external force on a vertex. /evaluate-forces-whitout-using-visitors; ; SOFA - Topic: [SOLVED] Evaluate forces whitout using visitors. /examples-for-simulating-interacting-models; ; SOFA - Topic: Examples for s",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/index-wcopy.html:299021,depend,dependancy-to-skeleton-h-does-not-compile,299021,index-wcopy.html,https://www.sofa-framework.org,https://www.sofa-framework.org/index-wcopy.html,2,['depend'],"['dependancy-to-skeleton-h-does-not-compile', 'dependency']"
Integrability, ; SOFA – Modern GUI using GLFW. /modular-fem-mechanics; ; SOFA – Modular FEM Mechanics. /multi-material-tool; ; SOFA – Multi-Material Tool. /multithreading; ; SOFA – Multithreading. /openigtlink; ; SOFA – OpenIGTLink. /pardiso-contact-solver; ; SOFA – Pardiso Contact Solver. /porous-visco-hyperelasticity; ; SOFA – Porous Visco-Hyperelasticity. /pyqt-widget-for-cameras; ; SOFA – PyQt Widget for Cameras. /python-template-scenes; ; SOFA – Python Template Scenes. /reinforcement-learning-framework; ; SOFA – Reinforcement Learning Framework. /reinforcement-learning-with-domain-randomization; ; SOFA – Reinforcement Learning with Domain Randomization. /rendering-hardware-interface-rhi; ; SOFA – Rendering Hardware Interface (RHI). /shape-matching; ; SOFA – Shape Matching. /shell-elastic-fem; ; SOFA – Shell Elastic FEM. /sofa-godot-basic-renderer; ; SOFA – SOFA & Godot – Basic Renderer. /sofa-unity3d-basic-renderer; ; SOFA – SOFA & Unity3D – Basic Renderer. /sofa-unity3d-full-integration; ; SOFA – SOFA & Unity3D – Full Integration. /sofa-unrealengine-5-basic-renderer; ; SOFA – SOFA & UnrealEngine 5 – Basic Renderer. /soft-rigid-hybrid-arms; ; SOFA – Soft-Rigid Hybrid Arms. /softrobots; ; SOFA – Models and Actuators for Soft-Robots. /tearing; ; SOFA – Tearing. /tetrahedral-mesh-tool; ; SOFA – Tetrahedral Mesh Tool. /timoshenko-beam-catheters; ; SOFA – Timoshenko Beam: catheters. /tutorial-probe-tissue-interaction; ; SOFA – Tutorial: probe-tissue interaction. /ultra-sound-rendering; . /embed; ; Ultra-Sound Rendering – SOFA. SOFA – Ultra-Sound Rendering. /visco-elasticity; ; SOFA – Visco-Elasticity. /x-ray-rendering; ; SOFA – X-Ray Rendering. /xxl-robot; ; SOFA – XXL Robot. SOFA – Plugins. /publications; . /add-a-publication-with-hal; ; SOFA – Add a publication with HAL. /feed; . 	Comments on: Publications	. SOFA – Publications. /submit; ; SOFA – Submit your asset. comments; . /feed; . 	Comments for SOFA	. community; . /feedback; ; SOFA – Feedback Form. /forum; . /feed; ; SOFA ,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/index-wcopy.html:246637,integrat,integration,246637,index-wcopy.html,https://www.sofa-framework.org,https://www.sofa-framework.org/index-wcopy.html,1,['integrat'],['integration']
Integrability," ; void getObjects (Container *list, SearchDirection dir=SearchUp);  List all objects of this node deriving from a given class. More...;  ; template<class Container > ; Container * getObjects (Container *result, SearchDirection dir=SearchUp);  Returns a list of object of type passed as a parameter. More...;  ; template<class Container > ; Container & getObjects (Container &result, SearchDirection dir=SearchUp);  ; template<class Object = sofa::core::objectmodel::BaseObject> ; std::vector< Object * > getObjects (SearchDirection dir=SearchUp);  ; template<class T > ; T * get (SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:5098,wrap,wrapper,5098,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,4,['wrap'],['wrapper']
Integrability," > & ; out, . const Data< typename Out::MatrixDeriv > & ; in . ). override . ◆ applyJT() [2/2]. template<class TIn , class TOut > . void sofa::component::mapping::linear::BarycentricMapping< TIn, TOut >::applyJT ; (; const core::MechanicalParams * ; mparams, . Data< typename In::VecDeriv > & ; out, . const Data< typename Out::VecDeriv > & ; in . ). override . ◆ draw(). template<class TIn , class TOut > . void sofa::component::mapping::linear::BarycentricMapping< TIn, TOut >::draw ; (; const core::visual::VisualParams * ; vparams). override . ◆ getJ(). template<class TIn , class TOut > . const sofa::linearalgebra::BaseMatrix * sofa::component::mapping::linear::BarycentricMapping< TIn, TOut >::getJ. override . ◆ getJs(). template<class TIn , class TOut > . const type::vector< linearalgebra::BaseMatrix * > * sofa::component::mapping::linear::BarycentricMapping< TIn, TOut >::getJs. overridevirtual . ◆ getMapper(). template<class TIn , class TOut > . TopologyBarycentricMapper<InDataTypes,OutDataTypes>* sofa::component::mapping::linear::BarycentricMapping< TIn, TOut >::getMapper ; (; ). inline . interface for continuous friction contact . ◆ handleTopologyChange(). template<class TIn , class TOut > . void sofa::component::mapping::linear::BarycentricMapping< TIn, TOut >::handleTopologyChange ; (; core::topology::Topology * ; t). override . ◆ init(). template<class TIn , class TOut > . void sofa::component::mapping::linear::BarycentricMapping< TIn, TOut >::init ; (; void ; ). override . ◆ reinit(). template<class TIn , class TOut > . void sofa::component::mapping::linear::BarycentricMapping< TIn, TOut >::reinit. override . ◆ SOFA_CLASS(). template<class TIn , class TOut > . sofa::component::mapping::linear::BarycentricMapping< TIn, TOut >::SOFA_CLASS ; (; SOFA_TEMPLATE2(BarycentricMapping< TIn, TOut >, TIn, TOut) ; , . SOFA_TEMPLATE2(LinearMapping, TIn, TOut) ;  . ). sofacomponentmappinglinearBarycentricMapping; Generated on Mon Nov 11 2024 02:48:15 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1linear_1_1_barycentric_mapping.html:6804,interface,interface,6804,api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1linear_1_1_barycentric_mapping.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1linear_1_1_barycentric_mapping.html,1,['interface'],['interface']
Integrability," > . T* sofa::core::objectmodel::BaseContext::get ; (; SearchDirection ; dir = SearchUp); const. inline . Generic object access template wrapper, possibly searching up or down from the current context. . ◆ get() [8/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; sptr< T > & ; ptr, . const std::string & ; path . ); const. inline . Generic object access template wrapper, given a path from the current context. . ◆ get() [9/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; sptr< T > & ; ptr, . const Tag & ; tag, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. . ◆ get() [10/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; sptr< T > & ; ptr, . const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. . ◆ get() [11/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; sptr< T > & ; ptr, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, possibly searching up or down from the current context. . ◆ get() [12/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; T *& ; ptr, . const std::string & ; path . ); const. inline . Generic object access template wrapper, given a path from the current context. . ◆ get() [13/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; T *& ; ptr, . const Tag & ; tag, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. . ◆ get() [14/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; T *& ; ptr, . const TagSet & ; tags, . SearchDire",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:21603,wrap,wrapper,21603,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,1,['wrap'],['wrapper']
Integrability," > Class Template Reference . #include <QuatToRigidEngine.h>. Inheritance diagram for sofa::component::engine::transform::QuatToRigidEngine< DataTypes >:. [legend]. Public Attributes; Data< type::vector< Vec3 > > f_positions;  Positions (Vector of 3) More...;  ; Data< type::vector< Quat > > f_orientations;  Orientations (Quaternion) More...;  ; Data< type::vector< Vec3 > > f_colinearPositions;  Optional positions to restrict output to be colinear in the quaternion Z direction. More...;  ; Data< type::vector< RigidVec3 > > f_rigids;  Rigid (Position + Orientation) More...;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  . Public Member Functions;  SOFA_CLASS (QuatToRigidEngine, sofa::core::DataEngine);  ; void doUpdate () override;  Where you put your engine's impl. More...;  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; void reinit () override;  Update method called when variables used in precomputation are modified. More...;  ;  Public Member Functions inherited ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_quat_to_rigid_engine.html:1360,message,messages,1360,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_quat_to_rigid_engine.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_quat_to_rigid_engine.html,1,['message'],['messages']
Integrability," API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Classes |; Enumerations |; Functions |; Variables . sofa::core::visual Namespace Reference . Namespaces;  visualparams;  . Classes; class  DisplayFlags;  Class which describes the display of components in a hierarchical fashion DisplayFlags are conveyed by the VisualParams, and therefore are accessible in a read only fashion inside a Component draw method. A component can tell if it should draw something on the display by looking at the current state of the displayFlags through the VisualParams parameter. DisplayFlags are embeddable inside a Data and can therefore read/write their state from a stream. More...;  ; class  FlagTreeItem;  ; class  Shader;  A basic interface to define a Shader for different system (OpenGL, DirectX, ...). More...;  ; class  ShaderElement;  A basic interface to define an element to be used with a Shader. More...;  ; struct  tristate;  ; class  VisualLoop;  ; class  VisualManager;  ; class  VisualModel;  An interface which all VisualModel inherit. More...;  ; class  VisualParams;  Class gathering parameters used by visual components and by the draw method of each component. Transmitted by visitors. More...;  ; class  VisualState;  . Enumerations; enum  { API_OpenGL = 0; , API_OGRE = 1; , API_OpenSceneGraph = 2; , API_OpenSG = 3; };  The enumeration used to describe potentially supported graphics API. More...;  . Functions; SOFA_CORE_API std::ostream & operator<< (std::ostream &os, const FlagTreeItem &root);  ; SOFA_CORE_API std::istream & operator>> (std::istream &in, FlagTreeItem &root);  ; SOFA_CORE_API std::ostream & operator<< (std::ostream &os, const DisplayFlags &flags);  ; SOFA_CORE_API std::istream & operator>> (std::istream &in, DisplayFlags &flags);  ; DisplayFlags merge_displayFlags (const DisplayFlags &previous, const DisplayFlags &current);  ; DisplayFlags difference_displayFlags (const DisplayFlags &previous, const DisplayFlags &current);  ; trist",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1visual.html:1088,interface,interface,1088,api/master/sofa/html/namespacesofa_1_1core_1_1visual.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1visual.html,1,['interface'],['interface']
Integrability," Data. More...;  ; void addLink (BaseLink *l);  Add a link. More...;  ; void addAlias (BaseLink *link, const char *alias);  Add an alias to a Link. More...;  ; const VecData & getDataFields () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapData & getDataAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; const VecLink & getLinks () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapLink & getLinkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Protected Member Functions;  HexahedronSetTopologyModifier ();  ;  ~HexahedronSetTopologyModifier () override;  ; void addHexahedraWarning (const size_t nHexahedra, const sofa::type::vector< Hexahedron > &hexahedraList, const sofa::type::vector< HexahedronID > &hexahedraIndexList);  Sends a message to warn that some hexahedra were added in this topology. More...;  ; void addHexahedraWarning (const size_t nHexahedra, const sofa::type::vector< Hexahedron > &hexahedraList, const sofa::type::vector< HexahedronID > &hexahedraIndexList, const sofa::type::vector< sofa::type::vector< HexahedronID > > &ancestors, const sofa::type::vector< sofa::type::vector< SReal > > &baryCoefs);  Sends a message to warn that some hexahedra were added in this topology. More...;  ; virtual void addHexahedraProcess (const sofa::type::vector< Hexahedron > &hexahedra);  Actually Add some hexahedra to this topology. More...;  ; virtual void removeHexahedraWarning (sofa::type::vector< HexahedronID > &hexahedra);  Sends a message to warn that some hexahedra are about to be deleted. More...;  ; virtual void removeHexahedraProcess (const sofa::type::vector< HexahedronID > &indices, const bool ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_hexahedron_set_topology_modifier.html:18112,message,message,18112,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_hexahedron_set_topology_modifier.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_hexahedron_set_topology_modifier.html,1,['message'],['message']
Integrability," DataTypes > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Attributes |; Public Member Functions |; List of all members . sofa::component::solidmechanics::fem::hyperelastic::material::Costa< DataTypes > Class Template Reference . #include <Costa.h>. Inheritance diagram for sofa::component::solidmechanics::fem::hyperelastic::material::Costa< DataTypes >:. [legend]; Detailed Description; template<class DataTypes>; class sofa::component::solidmechanics::fem::hyperelastic::material::Costa< DataTypes >; a Class that describe a generic hyperelastic material : example of Boyce and Arruda The material is described based on continuum mechanics and the description is independent to any discretization method like the finite element method. A material is generically described by a strain energy function and its first and second derivatives. In practice the energy is the sum of several energy terms which depends on 2 quantities : the determinant of the deformation gradient J and the right Cauchy Green deformation tensor . Static Public Attributes; static constexpr std::string_view Name = ""Costa"";  . Public Member Functions; virtual Real getStrainEnergy (StrainInformation< DataTypes > *sinfo, const MaterialParameters< DataTypes > &param);  ; virtual void deriveSPKTensor (StrainInformation< DataTypes > *sinfo, const MaterialParameters< DataTypes > &param, MatrixSym &SPKTensorGeneral);  ; virtual void applyElasticityTensor (StrainInformation< DataTypes > *sinfo, const MaterialParameters< DataTypes > &param, const MatrixSym &inputTensor, MatrixSym &outputTensor);  ; virtual void ElasticityTensor (StrainInformation< DataTypes > *sinfo, const MaterialParameters< DataTypes > &param, Matrix6 &outputTensor);  ;  Public Member Functions inherited from sofa::component::solidmechanics::fem::hyperelastic::material::HyperelasticMaterial< DataTypes >; virtual ~HyperelasticMaterial ();  . Attribute details. ◆ Name. template<cla",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_costa.html:1054,depend,depends,1054,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_costa.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_costa.html,1,['depend'],['depends']
Integrability," DataTypes > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Attributes |; Public Member Functions |; List of all members . sofa::component::solidmechanics::fem::hyperelastic::material::Ogden< DataTypes > Class Template Reference . #include <Ogden.h>. Inheritance diagram for sofa::component::solidmechanics::fem::hyperelastic::material::Ogden< DataTypes >:. [legend]; Detailed Description; template<class DataTypes>; class sofa::component::solidmechanics::fem::hyperelastic::material::Ogden< DataTypes >; a Class that describe a generic hyperelastic material : example of Boyce and Arruda The material is described based on continuum mechanics and the description is independent to any discretization method like the finite element method. A material is generically described by a strain energy function and its first and second derivatives. In practice the energy is the sum of several energy terms which depends on 2 quantities : the determinant of the deformation gradient J and the right Cauchy Green deformation tensor . Static Public Attributes; static constexpr std::string_view Name = ""Ogden"";  . Public Member Functions; Real getStrainEnergy (StrainInformation< DataTypes > *sinfo, const MaterialParameters< DataTypes > &param) override;  ; void deriveSPKTensor (StrainInformation< DataTypes > *sinfo, const MaterialParameters< DataTypes > &param, MatrixSym &SPKTensorGeneral) override;  ; void applyElasticityTensor (StrainInformation< DataTypes > *sinfo, const MaterialParameters< DataTypes > &param, const MatrixSym &inputTensor, MatrixSym &outputTensor) override;  ; void ElasticityTensor (StrainInformation< DataTypes > *sinfo, const MaterialParameters< DataTypes > &param, Matrix6 &outputTensor) override;  ;  Public Member Functions inherited from sofa::component::solidmechanics::fem::hyperelastic::material::HyperelasticMaterial< DataTypes >; virtual ~HyperelasticMaterial ();  . Attribute details. ◆ Name. template",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_ogden.html:1054,depend,depends,1054,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_ogden.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_ogden.html,1,['depend'],['depends']
Integrability," List of all members . sofa::component::setting::SofaDefaultPathSetting Class Reference . #include <SofaDefaultPathSetting.h>; Class for the configuration of default path for sofa application. ; More... Inheritance diagram for sofa::component::setting::SofaDefaultPathSetting:. [legend]; Detailed Description; Class for the configuration of default path for sofa application. . Public Attributes; sofa::core::objectmodel::RenamedData< std::string > gnuplotPath;  ; sofa::core::objectmodel::Data< std::string > d_gnuplotPath;  Path where will be saved the gnuplot files. More...;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  . Public Member Functions;  SOFA_CLASS (SofaDefaultPathSetting, core::objectmodel::ConfigurationSetting);  Sofa macro to define typedef. More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::ConfigurationSetting;  SOFA_CLASS (ConfigurationSetting, BaseObject);  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; bool insertInNode (o",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1setting_1_1_sofa_default_path_setting.html:1246,message,messages,1246,api/master/sofa/html/classsofa_1_1component_1_1setting_1_1_sofa_default_path_setting.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1setting_1_1_sofa_default_path_setting.html,1,['message'],['messages']
Integrability," Matrix to constrained space using offset parameter. ; Reimplemented from sofa::component::constraint::projective::FixedProjectiveConstraint< DataTypes >. ◆ applyConstraint() [2/3]. template<class DataTypes > . void sofa::component::constraint::projective::PartialFixedProjectiveConstraint< DataTypes >::applyConstraint ; (; const core::MechanicalParams * ; , . linearalgebra::BaseVector * ; , . const sofa::core::behavior::MultiMatrixAccessor * ;  . ). overridevirtual . Project the global Mechanical Vector to constrained space using offset parameter. ; Reimplemented from sofa::component::constraint::projective::FixedProjectiveConstraint< DataTypes >. ◆ applyConstraint() [3/3]. template<class DataTypes > . void sofa::component::constraint::projective::PartialFixedProjectiveConstraint< DataTypes >::applyConstraint ; (; sofa::core::behavior::ZeroDirichletCondition * ; zeroDirichletCondition). overridevirtual . Project the global matrix to constrained space by using the ZeroDirichletCondition interface It allows to define what rows and columns to discard for the projection. ; Reimplemented from sofa::component::constraint::projective::FixedProjectiveConstraint< DataTypes >. ◆ projectJacobianMatrix(). template<class DataTypes > . void sofa::component::constraint::projective::PartialFixedProjectiveConstraint< DataTypes >::projectJacobianMatrix ; (; const core::MechanicalParams * ; , . DataMatrixDeriv & ; cData . ). overridevirtual . Project c to constrained space (c models a constraint).; This method must be implemented by the component to handle Lagrange Multiplier based constraint ; Reimplemented from sofa::component::constraint::projective::FixedProjectiveConstraint< DataTypes >. ◆ projectMatrix(). template<class DataTypes > . void sofa::component::constraint::projective::PartialFixedProjectiveConstraint< DataTypes >::projectMatrix ; (; sofa::linearalgebra::BaseMatrix * ; M, . unsigned ; offset . ). overridevirtual . Project the given matrix (Experimental API). See doc in",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_partial_fixed_projective_constraint.html:23590,interface,interface,23590,api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_partial_fixed_projective_constraint.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_partial_fixed_projective_constraint.html,1,['interface'],['interface']
Integrability," More...;  . Additional Inherited Members;  Public Attributes inherited from sofa::core::behavior::PairInteractionConstraint< TDataTypes >; Data< SReal > endTime;  The constraint stops acting after the given value. Use a negative value for infinite constraints. More...;  ;  Public Attributes inherited from sofa::core::behavior::BaseConstraintSet; Data< sofa::Index > d_constraintIndex;  Constraint index (first index in the right hand term resolution vector) More...;  ; sofa::core::objectmodel::RenamedData< unsigned int > m_constraintIndex;  ; DeprecatedAndRemoved m_cId {};  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  ;  Static Public Member Functions inherited from sofa::core::behavior::PairInteractionConstraint< TDataTypes >; template<class T > ; static bool canCreate (T *&obj, objectmodel::BaseContext *context, objectmodel::BaseObjectDescription *arg);  ; template<class T > ; static T::SPtr create (T *p0, core::objectmodel::BaseContext *context, core::objectmodel::BaseObjectDescription *arg);  Construction method called by ObjectFactory. More",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1model_1_1_bilateral_lagrangian_constraint.html:23693,message,messages,23693,api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1model_1_1_bilateral_lagrangian_constraint.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1model_1_1_bilateral_lagrangian_constraint.html,1,['message'],['messages']
Integrability," More...;  ; Data< bool > showIndices;  Show indices. (default=false) More...;  ; Data< float > showIndicesScale;  Scale for indices display. (default=0.02) More...;  ; Data< bool > showVectors;  Show velocity. (default=false) More...;  ; Data< float > showVectorsScale;  Scale for vectors display. (default=0.0001) More...;  ; Data< int > drawMode;  The way vectors will be drawn: - 0: Line - 1:Cylinder - 2: Arrow. The DOFS will be drawn: - 0: point - >1: sphere. (default=0) More...;  ; Data< type::RGBAColor > d_color;  Color for object display. (default=[1 1 1 1]) More...;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  ;  Public Attributes inherited from sofa::core::State< DataTypes >; AccumulationVecId< DataTypes, V_DERIV, V_READ > accumulatedForces;  Stores all the VecDerivId corresponding to a force. They can then be accumulated. More...;  . Protected Attributes; Data< int > d_size;  Size of the vectors. More...;  ; SingleLink< MechanicalObject< DataTypes >, core::topology::BaseMeshTopology, BaseLink::FLAG_STRONGLINK|BaseLink::FLAG_STOREPATH >",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1statecontainer_1_1_mechanical_object.html:3433,message,messages,3433,api/master/sofa/html/classsofa_1_1component_1_1statecontainer_1_1_mechanical_object.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1statecontainer_1_1_mechanical_object.html,1,['message'],['messages']
Integrability," More...;  ; const VecLink & getLinks () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapLink & getLinkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Protected Member Functions;  HexahedronSetTopologyModifier ();  ;  ~HexahedronSetTopologyModifier () override;  ; void addHexahedraWarning (const size_t nHexahedra, const sofa::type::vector< Hexahedron > &hexahedraList, const sofa::type::vector< HexahedronID > &hexahedraIndexList);  Sends a message to warn that some hexahedra were added in this topology. More...;  ; void addHexahedraWarning (const size_t nHexahedra, const sofa::type::vector< Hexahedron > &hexahedraList, const sofa::type::vector< HexahedronID > &hexahedraIndexList, const sofa::type::vector< sofa::type::vector< HexahedronID > > &ancestors, const sofa::type::vector< sofa::type::vector< SReal > > &baryCoefs);  Sends a message to warn that some hexahedra were added in this topology. More...;  ; virtual void addHexahedraProcess (const sofa::type::vector< Hexahedron > &hexahedra);  Actually Add some hexahedra to this topology. More...;  ; virtual void removeHexahedraWarning (sofa::type::vector< HexahedronID > &hexahedra);  Sends a message to warn that some hexahedra are about to be deleted. More...;  ; virtual void removeHexahedraProcess (const sofa::type::vector< HexahedronID > &indices, const bool removeIsolatedItems=false);  Remove a subset of hexahedra. More...;  ; void addQuadsProcess (const sofa::type::vector< Quad > &quads) override;  Actually Add some quads to this topology. More...;  ; void removeQuadsProcess (const sofa::type::vector< QuadID > &indices, const bool removeIsolatedEdges=false, const bool removeIsolatedPoints=false) override;  Remove a subset of quads",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_hexahedron_set_topology_modifier.html:18510,message,message,18510,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_hexahedron_set_topology_modifier.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_hexahedron_set_topology_modifier.html,1,['message'],['message']
Integrability," Object component that points have been added or will be removed. More...;  ; void notifyEndingEvent () override;  ;  Public Member Functions inherited from sofa::core::topology::TopologyModifier;  SOFA_CLASS (TopologyModifier, BaseTopologyObject);  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ;  Public Member Functions inherited from sofa::core::topology::BaseTopologyObject;  SOFA_CLASS (BaseTopologyObject, core::objectmodel::BaseObject);  ; bool insertInNode (objectmodel::BaseNode *node) override;  ; bool removeInNode (objectmodel::BaseNode *node) override;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObject;  SOFA_CLASS (BaseObject, Base);  ; virtual void draw (const core::visual::VisualParams *);  Render internal data of this object, for debugging purposes. More...;  ; virtual void computeBBox (const core::ExecParams *, bool=false);  ; void setSrc (const std::string &v, std::vector< std::string > *attributeList=nullptr);  Sets a source Object and parses it to collect dependent Data. More...;  ; void setSrc (const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr);  ; Base * findLinkDestClass (const BaseClass *destType, const std::string &path, const BaseLink *link) override;  ; virtual std::string getPathName () const override;  Return the full path name of this object. More...;  ; SReal getTime () const;  Current time. More...;  ; const BaseContext * getContext () const;  ; BaseContext * getContext ();  ; const BaseObject * getMaster () const;  ; BaseObject * getMaster ();  ; const VecSlaves & getSlaves () const;  ; BaseObject * getSlave (const std::string &name) const;  ; virtual void addSlave (BaseObject::SPtr s);  ; virtual void removeSlave (BaseObject::SPtr s);  ; virtual void handleEvent (Event *);  Handle an event. More...;  ; virtual void handleTopologyChange ();  ; virtual void handleTopologyChange (core",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_dynamic_sparse_grid_topology_modifier.html:9777,depend,dependent,9777,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_dynamic_sparse_grid_topology_modifier.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_dynamic_sparse_grid_topology_modifier.html,5,['depend'],['dependent']
Integrability," SReal v, SReal w, SReal q, SReal &fx, SReal &fy, SReal &fz)=0;  ; virtual void computeWrench (const sofa::type::Transform< SReal > &, const sofa::type::SpatialVector< SReal > &, sofa::type::SpatialVector< SReal > &)=0;  ; virtual void setReferencePosition (sofa::type::Transform< SReal > &referencePosition);  ; virtual bool isEnabled ();  ; virtual void setLock (bool value);  Abstract method to lock or unlock the force feedback computation. To be implemented by child class if needed. More...;  ;  Public Member Functions inherited from sofa::core::behavior::BaseController;  SOFA_ABSTRACT_CLASS (BaseController, core::objectmodel::BaseObject);  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObject;  SOFA_CLASS (BaseObject, Base);  ; virtual void draw (const core::visual::VisualParams *);  Render internal data of this object, for debugging purposes. More...;  ; virtual void computeBBox (const core::ExecParams *, bool=false);  ; void setSrc (const std::string &v, std::vector< std::string > *attributeList=nullptr);  Sets a source Object and parses it to collect dependent Data. More...;  ; void setSrc (const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr);  ; Base * findLinkDestClass (const BaseClass *destType, const std::string &path, const BaseLink *link) override;  ; virtual std::string getPathName () const override;  Return the full path name of this object. More...;  ; virtual bool insertInNode (BaseNode *);  ; virtual bool removeInNode (BaseNode *);  ; SReal getTime () const;  Current time. More...;  ; const BaseContext * getContext () const;  ; BaseContext * getContext ();  ; const BaseObject * getMaster () const;  ; BaseObject * getMaster ();  ; const VecSlaves & getSlaves () const;  ; BaseObject * getSlave (const std::string &name) const;  ; virtual void addSlave (BaseObject::SPtr s);  ; virtual void removeSlave (BaseObject::SPtr s);  ; virtual void handleEvent (Event *);  Handle an event. More..",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1haptics_1_1_force_feedback.html:3135,depend,dependent,3135,api/master/sofa/html/classsofa_1_1component_1_1haptics_1_1_force_feedback.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1haptics_1_1_force_feedback.html,1,['depend'],['dependent']
Integrability," T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  . Additional Inherited Members;  Public Attributes inherited from sofa::core::topology::TopologicalMapping; SingleLink< TopologicalMapping, In, BaseLink::FLAG_STOREPATH|BaseLink::FLAG_STRONGLINK > fromModel;  Input source BaseTopology. More...;  ; SingleLink< TopologicalMapping, Out, BaseLink::FLAG_STOREPATH|BaseLink::FLAG_STRONGLINK > toModel;  Output target BaseTopology. More...;  ; Data< sofa::type::vector< Index > > Loc2GlobDataVec;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  ;  Protected Attributes inherited from sofa::core::topology::TopologicalMapping; std::map< Index, Index > Glob2LocMap;  ; std::map< Index, sofa::type::vector< Index > > In2OutMap;  ; ElementType m_inputType = geometry::ElementType::UNKNOWN;  ; ElementType m_outputType = geometry::ElementType::UNKNOWN;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObject; SingleLink< BaseObject, BaseContext, BaseLink::FLAG_DOU",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1mapping_1_1_center_point_topological_mapping.html:14108,message,messages,14108,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1mapping_1_1_center_point_topological_mapping.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1mapping_1_1_center_point_topological_mapping.html,4,['message'],['messages']
Integrability," T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  . Additional Inherited Members;  Public Attributes inherited from sofa::core::topology::TopologicalMapping; SingleLink< TopologicalMapping, In, BaseLink::FLAG_STOREPATH|BaseLink::FLAG_STRONGLINK > fromModel;  Input source BaseTopology. More...;  ; SingleLink< TopologicalMapping, Out, BaseLink::FLAG_STOREPATH|BaseLink::FLAG_STRONGLINK > toModel;  Output target BaseTopology. More...;  ; Data< sofa::type::vector< Index > > Loc2GlobDataVec;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  ;  Static Public Member Functions inherited from sofa::core::topology::TopologicalMapping; template<class T > ; static bool canCreate (T *&obj, core::objectmodel::BaseContext *context, core::objectmodel::BaseObjectDescription *arg);  ; template<class T > ; static T::SPtr create (T *, core::objectmodel::BaseContext *context, core::objectmodel::BaseObjectDescription *arg);  ;  Static Public Member Functions inherited from sofa::core:",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1linear_1_1_mesh2_point_topological_mapping.html:19081,message,messages,19081,api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1linear_1_1_mesh2_point_topological_mapping.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1linear_1_1_mesh2_point_topological_mapping.html,5,['message'],['messages']
Integrability," Template Reference . #include <AverageCoord.h>. Inheritance diagram for sofa::component::engine::analyze::AverageCoord< DataTypes >:. [legend]; Detailed Description; template<class DataTypes>; class sofa::component::engine::analyze::AverageCoord< DataTypes >; This class computes the average of a set of Coordinates . Public Attributes; Data< VecIndex > d_indices;  indices of the coordinates to average More...;  ; Data< unsigned > d_vecId;  index of the vector (default value corresponds to core::VecCoordId::position() ) More...;  ; Data< Coord > d_average;  result More...;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  . Public Member Functions;  SOFA_CLASS (SOFA_TEMPLATE(AverageCoord, DataTypes), core::DataEngine);  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; void reinit () override;  Update method called when variables used in precomputation are modified. More...;  ; void doUpdate () override;  Where you put your engine's impl. More...;  ; void handleEvent (co",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1analyze_1_1_average_coord.html:1354,message,messages,1354,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1analyze_1_1_average_coord.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1analyze_1_1_average_coord.html,1,['message'],['messages']
Integrability," Topic: [SOLVED] Flexible plugin fails to compile in v17.12. /flexible-plugin-or-core; . /feed; ; [SOLVED] Flexible plugin or core? – SOFA. SOFA - Topic: [SOLVED] Flexible plugin or core?. /floating-behaviour-in-soft-actuators-with-bilateralinteractionconstraint; ; SOFA - Topic: Floating behaviour in soft actuators with BilateralInteractionConstraint. /floating-point-exception; ; SOFA - Topic: [SOLVED] Floating point exception. /floor-as-a-projective-constraint; ; SOFA - Topic: [SOLVED] Floor as a projective constraint. /force-feedback-not-working-correctly-when-using-two-haptic-devices; ; SOFA - Topic: [SOLVED] Force feedback not working correctly when using two haptic devices. /forcefields-adddforce; . /feed; ; [SOLVED] Forcefield’s addDForce – SOFA. /page; . /11; ; SOFA - Topic: [SOLVED] Forcefield’s addDForce. /12; ; SOFA - Topic: [SOLVED] Forcefield’s addDForce. /3; ; SOFA - Topic: [SOLVED] Forcefield’s addDForce. SOFA - Topic: [SOLVED] Forcefield’s addDForce. /forcefields-collisions-and-integration; . /feed; ; [SOLVED] Forcefields, collisions and integration – SOFA. SOFA - Topic: [SOLVED] Forcefields, collisions and integration. /forcefield-with-implicit-iterative-solver; ; SOFA - Topic: [SOLVED] ForceField with implicit iterative solver. /forcefield-with-python-controller; ; SOFA - Topic: ForceField with Python controller. /force-induced-topoligical-modification-of-triangular-mesh; ; SOFA - Topic: [SOLVED] Force Induced Topological Modification of Triangular Mesh. /forceps-assembly; . /feed; ; [SOLVED] Forceps assembly – SOFA. /page; . /15; ; SOFA - Topic: [SOLVED] Forceps assembly. /16; ; SOFA - Topic: [SOLVED] Forceps assembly. /4; ; SOFA - Topic: [SOLVED] Forceps assembly. SOFA - Topic: [SOLVED] Forceps assembly. /forces-not-getting-rendered-with-geomagic-touch; ; SOFA - Topic: [SOLVED] Forces not getting rendered with Geomagic touch. /forces-on-bending-pneunet; ; SOFA - Topic: [SOLVED] Forces on bending pneunet. /forum-help; ; SOFA - Topic: forum help. /fo",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/index-wcopy.html:306321,integrat,integration,306321,index-wcopy.html,https://www.sofa-framework.org,https://www.sofa-framework.org/index-wcopy.html,1,['integrat'],['integration']
Integrability," VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  . Public Member Functions;  SOFA_ABSTRACT_CLASS (BaseAddResourceRepository, sofa::core::objectmodel::BaseObject);  ; void parse (sofa::core::objectmodel::BaseObjectDescription *arg) override;  Parse the given description to assign values to this object's fields and potentially other parameters. More...;  ; bool updateRepositoryPath ();  ; void cleanup () override;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObject;  SOFA_CLASS (BaseObject, Base);  ; virtual void draw (const core::visual::VisualParams *);  Render internal data of this object, for debugging purposes. More...;  ; virtual void computeBBox (const core::ExecParams *, bool=false);  ; void setSrc (const std::string &v, std::vector< std::string > *attributeList=nullptr);  Sets a source Object and parses it to collect dependent Data. More...;  ; void setSrc (const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr);  ; Base * findLinkDestClass (const BaseClass *destType, const std::string &path, const BaseLink *link) override;  ; virtual std::string getPathName () const override;  Return the full path name of this object. More...;  ; virtual bool insertInNode (BaseNode *);  ; virtual bool removeInNode (BaseNode *);  ; SReal getTime () const;  Current time. More...;  ; const BaseContext * getContext () const;  ; BaseContext * getContext ();  ; const BaseObject * getMaster () const;  ; BaseObject * getMaster ();  ; const VecSlaves & getSlaves () const;  ; BaseObject * getSlave (const std::string &name) const;  ; virtual void addSlave (BaseObject::SPtr s);  ; virtual void removeSlave (BaseObject::SPtr s);  ; virtual void handleEvent (Event *);  Handle an event. More..",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1sceneutility_1_1_base_add_resource_repository.html:3134,depend,dependent,3134,api/master/sofa/html/classsofa_1_1component_1_1sceneutility_1_1_base_add_resource_repository.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1sceneutility_1_1_base_add_resource_repository.html,1,['depend'],['dependent']
Integrability," a Data. More...;  ; void addLink (BaseLink *l);  Add a link. More...;  ; void addAlias (BaseLink *link, const char *alias);  Add an alias to a Link. More...;  ; const VecData & getDataFields () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapData & getDataAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; const VecLink & getLinks () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapLink & getLinkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Protected Member Functions;  TriangleSetTopologyModifier ();  ;  ~TriangleSetTopologyModifier () override;  ; void addTrianglesWarning (const sofa::Size nTriangles, const sofa::type::vector< Triangle > &trianglesList, const sofa::type::vector< TriangleID > &trianglesIndexList);  Sends a message to warn that some triangles were added in this topology. More...;  ; void addTrianglesWarning (const sofa::Size nTriangles, const sofa::type::vector< Triangle > &trianglesList, const sofa::type::vector< TriangleID > &trianglesIndexList, const sofa::type::vector< sofa::type::vector< TriangleID > > &ancestors, const sofa::type::vector< sofa::type::vector< SReal > > &baryCoefs);  Sends a message to warn that some triangles were added in this topology. More...;  ; virtual void addTrianglesProcess (const sofa::type::vector< Triangle > &triangles);  Effectively Add some triangles. Test precondition and apply: More...;  ; virtual void removeTrianglesWarning (sofa::type::vector< TriangleID > &triangles);  Sends a message to warn that some triangles are about to be deleted. More...;  ; virtual void removeTrianglesProcess (const sofa::type::vector< TriangleID > &indices, const ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_triangle_set_topology_modifier.html:17618,message,message,17618,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_triangle_set_topology_modifier.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_triangle_set_topology_modifier.html,1,['message'],['message']
Integrability," able to propagate topological changes from input to output model. More...;  ; virtual bool propagateFromOutputToInputModel ();  Return true if this mapping is able to propagate topological changes from output to input model. More...;  ; const std::map< Index, Index > & getGlob2LocMap ();  Accessor to index maps : More...;  ; void dumpGlob2LocMap ();  ; void dumpLoc2GlobVec ();  ; virtual bool checkTopologies ();  Method to check the topology mapping maps regarding the upper topology. More...;  ; virtual void getFromIndex (type::vector< Index > &, const Index) const;  ; const std::map< Index, sofa::type::vector< Index > > & getIn2OutMap ();  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObject;  SOFA_CLASS (BaseObject, Base);  ; virtual void draw (const core::visual::VisualParams *);  Render internal data of this object, for debugging purposes. More...;  ; virtual void computeBBox (const core::ExecParams *, bool=false);  ; void setSrc (const std::string &v, std::vector< std::string > *attributeList=nullptr);  Sets a source Object and parses it to collect dependent Data. More...;  ; void setSrc (const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr);  ; Base * findLinkDestClass (const BaseClass *destType, const std::string &path, const BaseLink *link) override;  ; virtual std::string getPathName () const override;  Return the full path name of this object. More...;  ; virtual bool insertInNode (BaseNode *);  ; virtual bool removeInNode (BaseNode *);  ; SReal getTime () const;  Current time. More...;  ; const BaseContext * getContext () const;  ; BaseContext * getContext ();  ; const BaseObject * getMaster () const;  ; BaseObject * getMaster ();  ; const VecSlaves & getSlaves () const;  ; BaseObject * getSlave (const std::string &name) const;  ; virtual void addSlave (BaseObject::SPtr s);  ; virtual void removeSlave (BaseObject::SPtr s);  ; virtual void handleEvent (Event *);  Handle an event. More..",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1mapping_1_1_subset_topological_mapping.html:7772,depend,dependent,7772,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1mapping_1_1_subset_topological_mapping.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1mapping_1_1_subset_topological_mapping.html,1,['depend'],['dependent']
Integrability," after a topology change. More...;  ; SingleLink< TaitSurfacePressureForceField< DataTypes >, sofa::core::topology::BaseMeshTopology, BaseLink::FLAG_STOREPATH|BaseLink::FLAG_STRONGLINK > l_topology;  Link to be set to the topology container in the component graph. More...;  ;  Public Attributes inherited from sofa::core::behavior::BaseForceField; Data< SReal > rayleighStiffness;  Rayleigh Damping stiffness matrix coefficient. More...;  ; objectmodel::lifecycle::DeprecatedData isCompliance;  Considered as compliance, else considered as stiffness (default to false) More...;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  . Protected Attributes; sofa::core::topology::BaseMeshTopology * m_topology;  ; int lastTopologyRevision;  ; Real reset_injectedVolume;  ; Real reset_currentInjectedVolume;  ; VecDeriv gradV;  ;  Protected Attributes inherited from sofa::core::behavior::StateAccessor; MultiLink< StateAccessor, BaseMechanicalState, BaseLink::FLAG_DUPLICATE > l_mechanicalStates;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObj",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_tait_surface_pressure_force_field.html:5070,message,messages,5070,api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_tait_surface_pressure_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_tait_surface_pressure_force_field.html,1,['message'],['messages']
Integrability," algorithms, managing how and when mechanical computation happens in one animation step. ; This class can optionally replace the default computation scheme of computing collisions then doing an integration step.; Note that it is in a preliminary stage, hence its functionalities and API will certainly change soon. . Public Attributes; SingleLink< BaseAnimationLoop, core::objectmodel::BaseNode, BaseLink::FLAG_STOREPATH > l_node;  ; Data< bool > d_computeBoundingBox;  If true, compute the global bounding box of the scene at each time step. Used mostly for rendering. More...;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  . Protected Attributes; SReal m_resetTime;  Stores starting time of the simulation. More...;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObject; SingleLink< BaseObject, BaseContext, BaseLink::FLAG_DOUBLELINK > l_context;  ; LinkSlaves l_slaves;  ; SingleLink< BaseObject, BaseObject, BaseLink::FLAG_DOUBLELINK > l_master;  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::st",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_animation_loop.html:1659,message,messages,1659,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_animation_loop.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_animation_loop.html,1,['message'],['messages']
Integrability," alias to a Link. More...;  ; const VecData & getDataFields () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapData & getDataAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; const VecLink & getLinks () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapLink & getLinkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Protected Member Functions;  RuleBasedContactManager ();  ;  ~RuleBasedContactManager () override;  ; std::string replaceVariables (std::string response);  ;  Protected Member Functions inherited from sofa::component::collision::response::contact::CollisionResponse;  CollisionResponse ();  ;  ~CollisionResponse () override=default;  ; void changeInstance (Instance inst) override;  ; void contactCreationError (std::stringstream &errorStream, const core::CollisionModel *model1, const core::CollisionModel *model2, std::string &responseUsed);  Write messages in stringstream in case a contact failed to be created. More...;  ; void createNewContacts (const DetectionOutputMap &outputsMap, Size &nbContact);  Create contacts if it has not been created before. More...;  ; void removeInactiveContacts (const DetectionOutputMap &outputsMap, Size &nbContact);  ; void setNumberOfContacts () const;  ;  Protected Member Functions inherited from sofa::core::collision::ContactManager;  ContactManager ();  Constructor. More...;  ;  ~ContactManager () override;  Destructor. More...;  ; void changeInstance (Instance inst) override;  ;  Protected Member Functions inherited from sofa::core::collision::CollisionAlgorithm;  CollisionAlgorithm ();  ;  Protected Member Functions inherited from sofa::core::objectmod",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1contact_1_1_rule_based_contact_manager.html:14474,message,messages,14474,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1contact_1_1_rule_based_contact_manager.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1contact_1_1_rule_based_contact_manager.html,1,['message'],['messages']
Integrability," aliases of this object. More...;  ; const VecLink & getLinks () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapLink & getLinkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; virtual Base * findLinkDestClass (const BaseClass *destType, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Friends; std::ostream & operator<< (std::ostream &o, const Id< Base > &t);  ; std::istream & operator>> (std::istream &i, Id< Base > &t);  . Additional Inherited Members;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id.html:8765,message,messages,8765,api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id.html,1,['message'],['messages']
Integrability," aliases) More...;  . Public Member Functions;  SOFA_CLASS (TopologicalChangeProcessor, core::objectmodel::BaseObject);  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; void reinit () override;  Update method called when variables used in precomputation are modified. More...;  ; virtual void readDataFile ();  ; void handleEvent (sofa::core::objectmodel::Event *event) override;  Handle an event. More...;  ; void setTime (double time);  ; void processTopologicalChanges ();  ; void processTopologicalChanges (double time);  ; bool readNext (double time, std::vector< std::string > &lines);  ; void draw (const core::visual::VisualParams *vparams) override;  Render internal data of this object, for debugging purposes. More...;  ; void updateTriangleIncisionInformation ();  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObject;  SOFA_CLASS (BaseObject, Base);  ; virtual void computeBBox (const core::ExecParams *, bool=false);  ; void setSrc (const std::string &v, std::vector< std::string > *attributeList=nullptr);  Sets a source Object and parses it to collect dependent Data. More...;  ; void setSrc (const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr);  ; Base * findLinkDestClass (const BaseClass *destType, const std::string &path, const BaseLink *link) override;  ; virtual std::string getPathName () const override;  Return the full path name of this object. More...;  ; virtual bool insertInNode (BaseNode *);  ; virtual bool removeInNode (BaseNode *);  ; SReal getTime () const;  Current time. More...;  ; const BaseContext * getContext () const;  ; BaseContext * getContext ();  ; const BaseObject * getMaster () const;  ; BaseObject * getMaster ();  ; const VecSlaves & getSlaves () const;  ; BaseObject * getSlave (const std::string &name) const;  ; virtual void addSlave (BaseObject::SPtr s);  ; virtual void removeSlave (BaseO",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1utility_1_1_topological_change_processor.html:7096,depend,dependent,7096,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1utility_1_1_topological_change_processor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1utility_1_1_topological_change_processor.html,1,['depend'],['dependent']
Integrability," bool isDisplayed=true, bool isReadOnly=false);  ;  ~Data () override;  Destructor. More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseData;  BaseData (const BaseInitData &init);  ;  BaseData (const std::string &helpMsg, DataFlags flags=FLAG_DEFAULT);  ;  BaseData (const char *helpMsg, DataFlags flags=FLAG_DEFAULT);  ;  BaseData (const std::string &helpMsg, bool isDisplayed=true, bool isReadOnly=false);  ;  BaseData (const char *helpMsg, bool isDisplayed=true, bool isReadOnly=false);  ;  ~BaseData () override;  Destructor. More...;  ; const void * getValueVoidPtr () const;  Get current value as a void pointer (use getValueTypeInfo to find how to access it) More...;  ; void * beginEditVoidPtr ();  Begin edit current value as a void pointer (use getValueTypeInfo to find how to access it) More...;  ; void endEditVoidPtr ();  Must be called after beginEditVoidPtr(), after you are finished modifying this Data. More...;  ; const std::string & getHelp () const;  Get a help message that describes this Data. More...;  ; void setHelp (const std::string &val);  Set the help message. More...;  ; const std::string & getGroup () const;  Get group. More...;  ; void setGroup (const std::string &val);  Set group. More...;  ; const std::string & getWidget () const;  Get widget. More...;  ; void setWidget (const char *val);  Set widget. More...;  ; virtual std::string getLinkPath () const;  If we use the Data as a link and not as value directly. More...;  ; virtual bool canBeLinked () const;  ; Base * getOwner () const;  Return the Base component owning this Data. More...;  ; void setOwner (Base *o);  Set the owner of this Data. More...;  ; BaseData * getData () const;  This method is needed by DDGNode. More...;  ; const std::string & getName () const;  Return the name of this Data within the Base component. More...;  ; void setName (const std::string &name);  ; bool hasDefaultValue () const;  Return whether the Data has a default value or not. More...;  ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name.html:4932,message,message,4932,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name.html,7,['message'],['message']
Integrability," bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, BaseData::DataFlags dataFlags);  Helper method used by initData() More...;  ; template<class T > ; void initData0 (Data< T > *field, typename Data< T >::InitData &res, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ;  Protected Member Functions inherited from sofa::core::behavior::LinearSolverAccessor;  LinearSolverAccessor (LinearSolver *linearSolver=nullptr);  . Attribute details. ◆ cpt. int sofa::component::odesolver::backward::VariationalSymplecticSolver::cpt. ◆ d_computeHamiltonian. Data<bool> sofa::component::odesolver::backward::VariationalSymplecticSolver::d_computeHamiltonian. Compute hamiltonian. . ◆ d_explicit. Data<bool> sofa::component::odesolver::backward::VariationalSymplecticSolver::d_explicit. Use explicit integration scheme. . ◆ d_fileName. Data<std::string> sofa::component::odesolver::backward::VariationalSymplecticSolver::d_fileName. File name where kinetic and potential energies are saved in a CSV file. . ◆ d_hamiltonianEnergy. Data<SReal> sofa::component::odesolver::backward::VariationalSymplecticSolver::d_hamiltonianEnergy. hamiltonian energy . ◆ d_newtonError. Data<SReal> sofa::component::odesolver::backward::VariationalSymplecticSolver::d_newtonError. Error tolerance for Newton iterations. . ◆ d_newtonSteps. Data<unsigned int> sofa::component::odesolver::backward::VariationalSymplecticSolver::d_newtonSteps. Maximum number of Newton steps. . ◆ d_rayleighMass. Data<SReal> sofa::component::odesolver::backward::VariationalSymplecticSolver::d_rayleighMass. Rayleigh damping coefficient related to mass, > 0. . ◆ d_rayleighStiffness. Data<SReal> sofa::component::odesolver::backward::VariationalSymplecticSolver::d_rayleighStiffness. Rayleigh damping coefficient related to stiffness, > 0. . ◆",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1backward_1_1_variational_symplectic_solver.html:17267,integrat,integration,17267,api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1backward_1_1_variational_symplectic_solver.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1backward_1_1_variational_symplectic_solver.html,1,['integrat'],['integration']
Integrability," bottom-up traversals. It is typically located in the same graph node as the slave, with the master in the parent node, but this is not a must. Mappings typically store constant local coordinates of the output points, and update the output points by applying input displacements to the local coordinates. . Public Attributes; Data< bool > f_mapForces;  Are forces mapped ? More...;  ; Data< bool > f_mapConstraints;  Are constraints mapped ? More...;  ; Data< bool > f_mapMasses;  Are masses mapped ? More...;  ; Data< bool > f_mapMatrices;  Are matrix explicit mapped? More...;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  . Public Member Functions;  SOFA_ABSTRACT_CLASS (BaseMapping, objectmodel::BaseObject);  ; virtual bool isLinear () const;  ; virtual void apply (const MechanicalParams *mparams=mechanicalparams::defaultInstance(), MultiVecCoordId outPos=VecCoordId::position(), ConstMultiVecCoordId inPos=ConstVecCoordId::position())=0;  Apply the transformation from the input model to the output model (like apply displacement from BehaviorModel to ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_base_mapping.html:1920,message,messages,1920,api/master/sofa/html/classsofa_1_1core_1_1_base_mapping.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_base_mapping.html,1,['message'],['messages']
Integrability," by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, BaseData::DataFlags dataFlags);  Helper method used by initData() More...;  ; template<class T > ; void initData0 (Data< T > *field, typename Data< T >::InitData &res, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ;  Protected Member Functions inherited from sofa::core::State< TDataTypes >;  State ();  ;  ~State () override;  . Additional Inherited Members;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  ;  Public Attributes inherited from sofa::core::State< TDataTypes >; AccumulationVecId< TDataTypes, V_DERIV, V_READ > accumulatedForces;  Stores all the VecDerivId corresponding to a force. They can then be accumulated. More...;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObject; SingleLink< BaseObject, BaseContext, BaseLink::FLAG_DOUBLELINK > l_context;  ; LinkSlaves l_slaves;  ; SingleLink< BaseObject, Ba",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_mechanical_state.html:24658,message,messages,24658,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_mechanical_state.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_mechanical_state.html,1,['message'],['messages']
Integrability," char *alias);  Add an alias to a Link. More...;  ; const VecData & getDataFields () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapData & getDataAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; const VecLink & getLinks () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapLink & getLinkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Protected Member Functions;  DynamicSparseGridTopologyModifier ();  ;  ~DynamicSparseGridTopologyModifier () override;  ;  Protected Member Functions inherited from sofa::component::topology::container::dynamic::HexahedronSetTopologyModifier;  HexahedronSetTopologyModifier ();  ;  ~HexahedronSetTopologyModifier () override;  ; void addHexahedraWarning (const size_t nHexahedra, const sofa::type::vector< Hexahedron > &hexahedraList, const sofa::type::vector< HexahedronID > &hexahedraIndexList);  Sends a message to warn that some hexahedra were added in this topology. More...;  ; void addHexahedraWarning (const size_t nHexahedra, const sofa::type::vector< Hexahedron > &hexahedraList, const sofa::type::vector< HexahedronID > &hexahedraIndexList, const sofa::type::vector< sofa::type::vector< HexahedronID > > &ancestors, const sofa::type::vector< sofa::type::vector< SReal > > &baryCoefs);  Sends a message to warn that some hexahedra were added in this topology. More...;  ; virtual void removeHexahedraWarning (sofa::type::vector< HexahedronID > &hexahedra);  Sends a message to warn that some hexahedra are about to be deleted. More...;  ; void addQuadsProcess (const sofa::type::vector< Quad > &quads) override;  Actually Add some quads to this topology. More...;  ; void rem",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_dynamic_sparse_grid_topology_modifier.html:18063,message,message,18063,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_dynamic_sparse_grid_topology_modifier.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_dynamic_sparse_grid_topology_modifier.html,1,['message'],['message']
Integrability," check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  . Attribute details. ◆ d_loadedPlugins. sofa::core::objectmodel::Data<type::vector<std::string> > sofa::simulation::RequiredPlugin::d_loadedPlugins. List of the plugins that are have been loaded. . ◆ d_pluginName. sofa::core::objectmodel::Data<type::vector<std::string> > sofa::simulation::RequiredPlugin::d_pluginName. plugin name (or several names if you need to load different plugins or a plugin with several alternate names) . ◆ d_requireAll. sofa::core::objectmodel::Data<bool> sofa::simulation::RequiredPlugin::d_requireAll. Display an error message if any plugin names failed to be loaded. . ◆ d_requireOne. sofa::core::objectmodel::Data<bool> sofa::simulation::RequiredPlugin::d_requireOne. Display an error message if no plugin names were successfully loaded. . ◆ d_stopAfterFirstNameFound. sofa::core::objectmodel::Data<bool> sofa::simulation::RequiredPlugin::d_stopAfterFirstNameFound. Stop after the first plugin name that is loaded successfully. . ◆ d_stopAfterFirstSuffixFound. sofa::core::objectmodel::Data<bool> sofa::simulation::RequiredPlugin::d_stopAfterFirstSuffixFound. For each plugin name, stop after the first suffix that is loaded successfully. . ◆ d_suffixMap. sofa::core::objectmodel::Data<type::vector<type::fixed_array<std::string,2> > > sofa::simulation::RequiredPlugin::d_suffixMap. standard->custom suffixes pairs (to be used if the plugin is compiled outside of Sofa with a non standard way of differentiating versions), using ! to represent empty suffix . Constructor details. ◆ RequiredPlugin(). sofa::simulation::RequiredPlugin",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html:14614,message,message,14614,api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html,1,['message'],['message']
Integrability," component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  . Public Member Functions;  SOFA_ABSTRACT_CLASS (BaseLoader, objectmodel::BaseObject);  ; virtual bool load ()=0;  ; virtual bool canLoad ();  ; void parse (objectmodel::BaseObjectDescription *arg) override;  Parse the given description to assign values to this object's fields and potentially other parameters. More...;  ; void setFilename (std::string f);  ; const std::string & getFilename ();  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObject;  SOFA_CLASS (BaseObject, Base);  ; virtual void draw (const core::visual::VisualParams *);  Render internal data of this object, for debugging purposes. More...;  ; virtual void computeBBox (const core::ExecParams *, bool=false);  ; void setSrc (const std::string &v, std::vector< std::string > *attributeList=nullptr);  Sets a source Object and parses it to collect dependent Data. More...;  ; void setSrc (const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr);  ; Base * findLinkDestClass (const BaseClass *destType, const std::string &path, const BaseLink *link) override;  ; virtual std::string getPathName () const override;  Return the full path name of this object. More...;  ; virtual bool insertInNode (BaseNode *);  ; virtual bool removeInNode (BaseNode *);  ; SReal getTime () const;  Current time. More...;  ; const BaseContext * getContext () const;  ; BaseContext * getContext ();  ; const BaseObject * getMaster () const;  ; BaseObject * getMaster ();  ; const VecSlaves & getSlaves () const;  ; BaseObject * getSlave (const std::string &name) const;  ; virtual void addSlave (BaseObject::SPtr s);  ; virtual void removeSlave (BaseObject::SPtr s);  ; virtual void handleEvent (Event *);  Handle an event. More..",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_base_loader.html:2308,depend,dependent,2308,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_base_loader.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_base_loader.html,1,['depend'],['dependent']
Integrability," compute vertex normals by averaging face normals . Public Attributes; Data< VecCoord > position;  Vertices of the mesh. More...;  ; Data< type::vector< type::fixed_array< unsigned int, 3 > > > triangles;  Triangles of the mesh. More...;  ; Data< type::vector< type::fixed_array< unsigned int, 4 > > > quads;  Quads of the mesh. More...;  ; Data< VecCoord > normals;  Computed vertex normals of the mesh. More...;  ; Data< bool > invertNormals;  Swap normals. More...;  ; Data< bool > useAngles;  Use incident angles to weight faces normal contributions at each vertex. More...;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  . Public Member Functions;  SOFA_CLASS (SOFA_TEMPLATE(NormalsFromPoints, DataTypes), core::DataEngine);  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; void reinit () override;  Update method called when variables used in precomputation are modified. More...;  ; void doUpdate () override;  Where you put your engine's impl. More...;  ;  Public Member ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_normals_from_points.html:1654,message,messages,1654,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_normals_from_points.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_normals_from_points.html,1,['message'],['messages']
Integrability," const Quat &orientation);  ; virtual void internalUpdate ();  ; void handleEvent (sofa::core::objectmodel::Event *event) override;  Handle an event. More...;  ; void computeZ ();  ; virtual bool isStereo ();  ; virtual void setCurrentSide (Side);  ; virtual Side getCurrentSide ();  ; virtual void setStereoEnabled (bool);  ; virtual bool getStereoEnabled ();  ; virtual void setStereoMode (StereoMode);  ; virtual StereoMode getStereoMode ();  ; virtual void setStereoStrategy (StereoStrategy);  ; virtual StereoStrategy getStereoStrategy ();  ; virtual void setStereoShift (double);  ; virtual double getStereoShift ();  ; void draw (const core::visual::VisualParams *) override;  Render internal data of this object, for debugging purposes. More...;  ; void computeClippingPlane (const core::visual::VisualParams *vp, double &zNear, double &zFar);  ; virtual void drawCamera (const core::visual::VisualParams *);  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObject;  SOFA_CLASS (BaseObject, Base);  ; virtual void computeBBox (const core::ExecParams *, bool=false);  ; void setSrc (const std::string &v, std::vector< std::string > *attributeList=nullptr);  Sets a source Object and parses it to collect dependent Data. More...;  ; void setSrc (const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr);  ; Base * findLinkDestClass (const BaseClass *destType, const std::string &path, const BaseLink *link) override;  ; virtual std::string getPathName () const override;  Return the full path name of this object. More...;  ; virtual bool insertInNode (BaseNode *);  ; virtual bool removeInNode (BaseNode *);  ; SReal getTime () const;  Current time. More...;  ; const BaseContext * getContext () const;  ; BaseContext * getContext ();  ; const BaseObject * getMaster () const;  ; BaseObject * getMaster ();  ; const VecSlaves & getSlaves () const;  ; BaseObject * getSlave (const std::string &name) const;  ; virtual void addSlav",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1visual_1_1_camera.html:5147,depend,dependent,5147,api/master/sofa/html/classsofa_1_1component_1_1visual_1_1_camera.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1visual_1_1_camera.html,1,['depend'],['dependent']
Integrability," const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ;  Protected Member Functions inherited from sofa::core::behavior::SingleStateAccessor< DataTypes >;  SingleStateAccessor (MechanicalState< DataTypes > *mm=nullptr);  ;  ~SingleStateAccessor () override=default;  . Additional Inherited Members;  Public Attributes inherited from sofa::core::behavior::ProjectiveConstraintSet< DataTypes >; Data< Real > endTime;  The constraint stops acting after the given value. Use a negative value for infinite constraints. More...;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  ;  Static Public Member Functions inherited from sofa::core::behavior::ProjectiveConstraintSet< DataTypes >; template<class T > ; static bool canCreate (T *&obj, objectmodel::BaseContext *context, objectmodel::BaseObjectDescription *arg);  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseObject; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction c",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_fixed_rotation_projective_constraint.html:17484,message,messages,17484,api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_fixed_rotation_projective_constraint.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_fixed_rotation_projective_constraint.html,2,['message'],['messages']
Integrability," const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false)sofa::core::objectmodel::Baseinline; initData0(BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false)sofa::core::objectmodel::Baseprotected; initData0(BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, BaseData::DataFlags dataFlags)sofa::core::objectmodel::Baseprotected; initData0(Data< T > *field, typename Data< T >::InitData &res, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false)sofa::core::objectmodel::Baseinlineprotected; initLarge(const int i)sofa::component::solidmechanics::fem::elastic::HexahedralFEMForceField< DataTypes >protected; initPolar(const int i)sofa::component::solidmechanics::fem::elastic::HexahedralFEMForceField< DataTypes >protected; insertInNode(objectmodel::BaseNode *node) overridesofa::core::behavior::BaseForceFieldvirtual; integrateStiffness(int signx0, int signy0, int signz0, int signx1, int signy1, int signz1, const Real u, const Real v, const Real w, const Mat33 &J_1)sofa::component::solidmechanics::fem::elastic::HexahedralFEMForceField< DataTypes >protected; isCompliancesofa::core::behavior::BaseForceField; isComponentStateValid() constsofa::core::objectmodel::Baseinline; l_contextsofa::core::objectmodel::BaseObjectprotected; l_mastersofa::core::objectmodel::BaseObjectprotected; l_mechanicalStatessofa::core::behavior::StateAccessorprotected; l_slavessofa::core::objectmodel::BaseObjectprotected; l_topologysofa::component::solidmechanics::fem::elastic::BaseLinearElasticityFEMForceField< DataTypes >; LARGE enum valuesofa::component::solidmechanics::fem::elastic::HexahedralFEMForceField< DataTypes >; LinkSlaves typedefsofa::core::objectmodel::BaseObject; m_aliasDatasofa::core::objectmodel::Baseprotected; m_aliasLinksofa::core::objectmodel::Baseprotected; m_definitionSourceFileNamesofa::core::objectmodel::Base; m_d",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_hexahedral_f_e_m_force_field-members.html:15886,integrat,integrateStiffness,15886,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_hexahedral_f_e_m_force_field-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_hexahedral_f_e_m_force_field-members.html,1,['integrat'],['integrateStiffness']
Integrability," const core::objectmodel::BaseData * getSEValue () const override;  ; core::objectmodel::BaseData * getSEValue () override;  ;  Public Member Functions inherited from sofa::gl::component::shader::OglShaderElement;  OglShaderElement ();  ;  ~OglShaderElement () override;  ; const std::string getId () const;  ; void setID (std::string str);  ; void setIndexShader (unsigned int index);  ; const std::string & getSEID () const override;  ;  Public Member Functions inherited from sofa::core::visual::ShaderElement;  SOFA_ABSTRACT_CLASS (ShaderElement, objectmodel::BaseObject);  ; virtual int getSESizePerVertex ();  ; virtual int getSETotalSize ();  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObject;  SOFA_CLASS (BaseObject, Base);  ; virtual void draw (const core::visual::VisualParams *);  Render internal data of this object, for debugging purposes. More...;  ; virtual void computeBBox (const core::ExecParams *, bool=false);  ; void setSrc (const std::string &v, std::vector< std::string > *attributeList=nullptr);  Sets a source Object and parses it to collect dependent Data. More...;  ; void setSrc (const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr);  ; Base * findLinkDestClass (const BaseClass *destType, const std::string &path, const BaseLink *link) override;  ; virtual std::string getPathName () const override;  Return the full path name of this object. More...;  ; virtual bool insertInNode (BaseNode *);  ; virtual bool removeInNode (BaseNode *);  ; SReal getTime () const;  Current time. More...;  ; const BaseContext * getContext () const;  ; BaseContext * getContext ();  ; const BaseObject * getMaster () const;  ; BaseObject * getMaster ();  ; const VecSlaves & getSlaves () const;  ; BaseObject * getSlave (const std::string &name) const;  ; virtual void addSlave (BaseObject::SPtr s);  ; virtual void removeSlave (BaseObject::SPtr s);  ; virtual void handleEvent (Event *);  Handle an event. More..",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_shader_macro.html:2181,depend,dependent,2181,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_shader_macro.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_shader_macro.html,1,['depend'],['dependent']
Integrability," const;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseData;  BaseData (const BaseInitData &init);  ;  BaseData (const std::string &helpMsg, DataFlags flags=FLAG_DEFAULT);  ;  BaseData (const char *helpMsg, DataFlags flags=FLAG_DEFAULT);  ;  BaseData (const std::string &helpMsg, bool isDisplayed=true, bool isReadOnly=false);  ;  BaseData (const char *helpMsg, bool isDisplayed=true, bool isReadOnly=false);  ;  ~BaseData () override;  Destructor. More...;  ; const void * getValueVoidPtr () const;  Get current value as a void pointer (use getValueTypeInfo to find how to access it) More...;  ; void * beginEditVoidPtr ();  Begin edit current value as a void pointer (use getValueTypeInfo to find how to access it) More...;  ; void endEditVoidPtr ();  Must be called after beginEditVoidPtr(), after you are finished modifying this Data. More...;  ; const std::string & getHelp () const;  Get a help message that describes this Data. More...;  ; void setHelp (const std::string &val);  Set the help message. More...;  ; const std::string & getGroup () const;  Get group. More...;  ; void setGroup (const std::string &val);  Set group. More...;  ; const std::string & getWidget () const;  Get widget. More...;  ; void setWidget (const char *val);  Set widget. More...;  ; virtual std::string getLinkPath () const;  If we use the Data as a link and not as value directly. More...;  ; virtual bool canBeLinked () const;  ; Base * getOwner () const;  Return the Base component owning this Data. More...;  ; void setOwner (Base *o);  Set the owner of this Data. More...;  ; BaseData * getData () const;  This method is needed by DDGNode. More...;  ; const std::string & getName () const;  Return the name of this Data within the Base component. More...;  ; void setName (const std::string &name);  ; bool hasDefaultValue () const;  Return whether the Data has a default value or not. More...;  ; bool setParent (BaseData *parent, const std::string &path=std::string());  Link to ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data.html:5543,message,message,5543,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data.html,1,['message'],['message']
Integrability," core::MultiVecDerivId dv, core::ConstMultiVecDerivId correction) override;  ; void applyPredictiveConstraintForce (const core::ConstraintParams *cparams, core::MultiVecDerivId f, const linearalgebra::BaseVector *lambda) override;  ; MechanicalState< DataTypes > * getMState () const;  ; void setMState (MechanicalState< DataTypes > *_mstate);  ;  Public Member Functions inherited from sofa::core::behavior::BaseConstraintCorrection;  SOFA_ABSTRACT_CLASS (BaseConstraintCorrection, objectmodel::BaseObject);  ; virtual bool isActive ();  ; virtual void rebuildSystem (SReal, SReal);  ; virtual void computeResidual (const core::ExecParams *, linearalgebra::BaseVector *);  ; virtual void getComplianceWithConstraintMerge (linearalgebra::BaseMatrix *, std::vector< int > &);  For multigrid approach => constraints are merged. More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObject;  SOFA_CLASS (BaseObject, Base);  ; virtual void computeBBox (const core::ExecParams *, bool=false);  ; void setSrc (const std::string &v, std::vector< std::string > *attributeList=nullptr);  Sets a source Object and parses it to collect dependent Data. More...;  ; void setSrc (const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr);  ; Base * findLinkDestClass (const BaseClass *destType, const std::string &path, const BaseLink *link) override;  ; virtual std::string getPathName () const override;  Return the full path name of this object. More...;  ; virtual bool insertInNode (BaseNode *);  ; virtual bool removeInNode (BaseNode *);  ; SReal getTime () const;  Current time. More...;  ; const BaseContext * getContext () const;  ; BaseContext * getContext ();  ; const BaseObject * getMaster () const;  ; BaseObject * getMaster ();  ; const VecSlaves & getSlaves () const;  ; BaseObject * getSlave (const std::string &name) const;  ; virtual void addSlave (BaseObject::SPtr s);  ; virtual void removeSlave (BaseObject::SPtr s);  ; virt",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1correction_1_1_precomputed_constraint_correction.html:9943,depend,dependent,9943,api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1correction_1_1_precomputed_constraint_correction.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1correction_1_1_precomputed_constraint_correction.html,1,['depend'],['dependent']
Integrability, coulomb. /cpp-controller; . /feed; ; Cpp controller – SOFA. SOFA - Topic Tag: Cpp controller. /cpp-make-error; . /feed; ; cpp make error – SOFA. SOFA - Topic Tag: cpp make error. /cpp-plugins; . /feed; ; cpp plugins – SOFA. SOFA - Topic Tag: cpp plugins. /crash; . /feed; ; crash – SOFA. SOFA - Topic Tag: crash. /crevice; . /feed; ; crevice – SOFA. SOFA - Topic Tag: crevice. /cube; . /feed; ; cube – SOFA. SOFA - Topic Tag: cube. /cuda; . /feed; ; Cuda – SOFA. SOFA - Topic Tag: Cuda. /cuda-benchmark; . /feed; ; CUDA Benchmark – SOFA. SOFA - Topic Tag: CUDA Benchmark. /cutfem; . /feed; ; cutFEM – SOFA. SOFA - Topic Tag: cutFEM. /cut-soft-body; . /feed; ; cut soft body – SOFA. SOFA - Topic Tag: cut soft body. /cutting; . /feed; ; cutting – SOFA. SOFA - Topic Tag: cutting. /cutting-simulation; . /feed; ; Cutting Simulation – SOFA. SOFA - Topic Tag: Cutting Simulation. /damping; . /feed; ; damping – SOFA. SOFA - Topic Tag: damping. /damping-force-field-integration; . /feed; ; damping force field integration – SOFA. SOFA - Topic Tag: damping force field integration. /damping-gravity-fallspeed-eulerimplicitsolver-constantforcefield; . /feed; ; Damping Gravity fallspeed EulerImplicitSolver ConstantForceField – SOFA. SOFA - Topic Tag: Damping Gravity fallspeed EulerImplicitSolver ConstantForceField. /data; . /feed; ; Data – SOFA. SOFA - Topic Tag: Data. /data-component; . /feed; ; Data Component – SOFA. SOFA - Topic Tag: Data Component. /datadisplay-pointdata-c; . /feed; ; DataDisplay pointData C++ – SOFA. SOFA - Topic Tag: DataDisplay pointData C++. /debian-package-cmake; . /feed; ; debian package cmake – SOFA. SOFA - Topic Tag: debian package cmake. /debug; . /feed; ; debug – SOFA. SOFA - Topic Tag: debug. /default-shader; . /feed; ; default shader – SOFA. SOFA - Topic Tag: default shader. /deformable; . /feed; ; deformable – SOFA. SOFA - Topic Tag: deformable. /deformable-object; . /feed; ; Deformable object – SOFA. SOFA - Topic Tag: Deformable object. /deformation; . /fee,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/index-wcopy.html:438932,integrat,integration,438932,index-wcopy.html,https://www.sofa-framework.org,https://www.sofa-framework.org/index-wcopy.html,1,['integrat'],['integration']
Integrability," description ; Implemented in sofa::simulation::SceneLoaderXML, and sofa::simulation::SceneLoaderPHP. ◆ load(). sofa::simulation::NodeSPtr sofa::simulation::SceneLoader::load ; (; const std::string & ; filename, . bool ; reload = false, . const std::vector< std::string > & ; sceneArgs = std::vector<std::string>(0) . ). load the file . ◆ notifyLoadingSceneAfter(). void sofa::simulation::SceneLoader::notifyLoadingSceneAfter ; (; sofa::simulation::NodeSPtr ; node, . SceneLoader * ; sceneLoader . ). staticprotected . ◆ notifyLoadingSceneBefore(). void sofa::simulation::SceneLoader::notifyLoadingSceneBefore ; (; SceneLoader * ; sceneLoader). staticprotected . ◆ notifyReloadingSceneAfter(). void sofa::simulation::SceneLoader::notifyReloadingSceneAfter ; (; sofa::simulation::NodeSPtr ; node, . SceneLoader * ; sceneLoader . ). staticprotected . ◆ notifyReloadingSceneBefore(). void sofa::simulation::SceneLoader::notifyReloadingSceneBefore ; (; SceneLoader * ; sceneLoader). staticprotected . ◆ removeListener(). void sofa::simulation::SceneLoader::removeListener ; (; Listener * ; l). static . removing a listener . ◆ syntaxForAddingRequiredPlugin(). bool sofa::simulation::SceneLoader::syntaxForAddingRequiredPlugin ; (; const std::string & ; pluginName, . const std::vector< std::string > & ; listComponents, . std::ostream & ; ss, . sofa::simulation::Node * ; nodeWhereAdded . ). virtual . Write into a ostream the syntax to add a RequiredPlugin component in the scene file. The syntax depends on the file format, hence the SceneLoader. The function returns true if the derived SceneLoader implements this function, false otherwise. ; Reimplemented in sofa::simulation::SceneLoaderXML. ◆ write(). virtual void sofa::simulation::SceneLoader::write ; (; sofa::simulation::Node * ; , . const char * ;  . ). inlinevirtual . write scene graph in the file ; Reimplemented in sofa::simulation::SceneLoaderXML. sofasimulationSceneLoader; Generated on Mon Nov 11 2024 03:34:14 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader.html:5771,depend,depends,5771,api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader.html,1,['depend'],['depends']
Integrability," each cylinder. More...;  ; Data< VecReal > d_cylinder_heights;  The cylinder heights. More...;  ; Data< VecAxisCoord > d_cylinder_local_axes;  ; Data< Real > d_default_radius;  The default radius. More...;  ; Data< Real > d_default_height;  The default height. More...;  ; Data< Coord > d_default_local_axis;  The default local axis cylinder is modeled around. More...;  ;  Public Attributes inherited from sofa::core::CollisionModel; CollisionElementActiver * myCollElemActiver;  CollisionElementActiver that activate or deactivate collision element during execution. More...;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  . Protected Attributes; core::behavior::MechanicalState< DataTypes > * m_mstate;  ;  Protected Attributes inherited from sofa::core::CollisionModel; Data< bool > bActive;  ; Data< bool > bMoving;  flag indicating if this object is changing position between iterations More...;  ; Data< bool > bSimulated;  flag indicating if this object is controlled by a simulation More...;  ; Data< bool > bSelfCollision;  flag indication if the obj",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_cylinder_collision_model.html:1873,message,messages,1873,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_cylinder_collision_model.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_cylinder_collision_model.html,1,['message'],['messages']
Integrability," for sofa::component::visual::Visual3DText:. [legend]; Detailed Description; Draw camera-oriented (billboard) 3D text. . Public Attributes; Data< std::string > d_text;  Test to display. More...;  ; Data< type::Vec3f > d_position;  3d position More...;  ; Data< float > d_scale;  text scale More...;  ; Data< sofa::type::RGBAColor > d_color;  text color. (default=[1.0,1.0,1.0,1.0]) More...;  ; Data< bool > d_depthTest;  perform depth test More...;  ;  Public Attributes inherited from sofa::core::visual::VisualModel; Data< bool > d_enable;  Display the object or not. More...;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  . Public Member Functions;  SOFA_CLASS (Visual3DText, core::visual::VisualModel);  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; void reinit () override;  Update method called when variables used in precomputation are modified. More...;  ; void doDrawVisual (const core::visual::VisualParams *vparams) override;  ; void drawTransparent (const core::vi",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1visual_1_1_visual3_d_text.html:1412,message,messages,1412,api/master/sofa/html/classsofa_1_1component_1_1visual_1_1_visual3_d_text.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1visual_1_1_visual3_d_text.html,1,['message'],['messages']
Integrability," generated from [first, last); The signature of the function f should be equivalent to the following: void fun(const Range<InputIt>& a); The signature does not need to have const &.; A task scheduler must be provided and correctly initialized. The number of generated ranges depends on the threads available in the task scheduler. . ◆ setSimulation(). void sofa::simulation::setSimulation ; (; Simulation * ; s). delete . Set the (unique) simulation which controls the scene. . Variable Documentation. ◆ DefaultAnimationLoopClass. int sofa::simulation::DefaultAnimationLoopClass. Initial value:= core::RegisterObject(""Simulation loop to use in scene without constraints nor contact.""); .add<DefaultAnimationLoop>(); .addDocumentationURL(std::string(sofa::SOFA_DOCUMENTATION_URL) + std::string(""components/animationloops/defaultanimationloop/"")); .addDescription(R""(; This loop triggers the following steps:; - build and solve all linear systems in the scene : collision and time integration to compute the new values of the dofs; - update the context (dt++); - update the mappings; - update the bounding box (volume covering all objects of the scene))""). ◆ DefaultTaskSchedulerRegistered. const bool sofa::simulation::DefaultTaskSchedulerRegistered. Initial value:= MainTaskSchedulerFactory::registerScheduler(; DefaultTaskScheduler::name(),; &DefaultTaskScheduler::create). ◆ DefaultVisualManagerLoopClass. int sofa::simulation::DefaultVisualManagerLoopClass. Initial value:= core::RegisterObject(""The simplest Visual Loop Manager, created by default when user do not put on scene""); .add< DefaultVisualManagerLoop >(). ◆ loaderPHP. const SceneLoader* sofa::simulation::loaderPHP = SceneLoaderFactory::getInstance()->addEntry(new SceneLoaderPHP()). ◆ loaderXML. const SceneLoader* sofa::simulation::loaderXML = SceneLoaderFactory::getInstance()->addEntry(new SceneLoaderXML()). ◆ RequiredPluginClass. int sofa::simulation::RequiredPluginClass. Initial value:= core::RegisterObject(""Load the required ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation.html:10198,integrat,integration,10198,api/master/sofa/html/namespacesofa_1_1simulation.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation.html,1,['integrat'],['integration']
Integrability," implemented in children classes. More...;  ; virtual void removeTrianglesPostProcessing (const sofa::type::vector< TriangleID > &edgeToBeRemoved, const sofa::type::vector< TriangleID > &vertexToBeRemoved);  : Postprocessing to apply to topology triangles. Nothing to do in this class. This function should be implemented in children classes. More...;  ; virtual bool addTrianglesPreconditions (const sofa::type::vector< Triangle > &triangles);  Precondition to fulfill before adding triangles. No preconditions are needed in this class. This function should be implemented in children classes. More...;  ; virtual void addTrianglesPostProcessing (const sofa::type::vector< Triangle > &triangles);  : Postprocessing to apply to topology triangles. Nothing to do in this class. This function should be implemented in children classes. More...;  ;  Protected Member Functions inherited from sofa::component::topology::container::dynamic::EdgeSetTopologyModifier;  EdgeSetTopologyModifier ();  ;  ~EdgeSetTopologyModifier () override;  ; virtual void addEdgesWarning (const sofa::Size nEdges);  Sends a message to warn that some edges were added in this topology. More...;  ; virtual void addEdgesWarning (const sofa::Size nEdges, const sofa::type::vector< Edge > &edgesList, const sofa::type::vector< EdgeID > &edgesIndexList, const sofa::type::vector< sofa::type::vector< EdgeID > > &ancestors);  Sends a message to warn that some edges were added in this topology. More...;  ; virtual void addEdgesWarning (const sofa::Size nEdges, const sofa::type::vector< Edge > &edgesList, const sofa::type::vector< EdgeID > &edgesIndexList, const sofa::type::vector< core::topology::EdgeAncestorElem > &ancestorElems);  Sends a message to warn that some edges were added in this topology. More...;  ; virtual void removeEdgesWarning (sofa::type::vector< EdgeID > &edges);  Sends a message to warn that some edges are about to be deleted. More...;  ;  Protected Member Functions inherited from sofa::component::top",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_tetrahedron_set_topology_modifier.html:25648,message,message,25648,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_tetrahedron_set_topology_modifier.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_tetrahedron_set_topology_modifier.html,2,['message'],['message']
Integrability," ind_q (not normed) More...;  ; bool isQuadInPlane (const QuadID ind_q, const PointID ind_p, const type::Vec< 3, Real > &plane_vect) const;  Tests if a quad indexed by ind_q (and incident to the vertex indexed by ind_p) is included or not in the plane defined by (ind_p, plane_vect) More...;  ; bool isPointInQuad (const QuadID ind_q, const sofa::type::Vec< 3, Real > &p) const;  ; void draw (const core::visual::VisualParams *vparams) override;  Render internal data of this object, for debugging purposes. More...;  ; void writeMSHfile (const char *filename) const;  ;  Public Member Functions inherited from sofa::component::topology::container::dynamic::EdgeSetGeometryAlgorithms< DataTypes >;  SOFA_CLASS (SOFA_TEMPLATE(EdgeSetGeometryAlgorithms, DataTypes), SOFA_TEMPLATE(PointSetGeometryAlgorithms, DataTypes));  ; Real computeEdgeLength (const EdgeID i) const;  computes the length of edge no i and returns it More...;  ; void computeEdgeLength (BasicArrayInterface< Real > &ai) const;  computes the edge length of all edges and stores it in the array interface More...;  ; Real computeRestEdgeLength (const EdgeID i) const;  computes the initial length of edge no i and returns it More...;  ; Real computeRestSquareEdgeLength (const EdgeID i) const;  computes the initial square length of edge no i and returns it More...;  ; void computeEdgeAABB (const EdgeID i, CPos &minCoord, CPos &maxCoord) const;  ; Coord computeEdgeCenter (const EdgeID i) const;  ; Coord computeEdgeDirection (const EdgeID i) const;  ; Coord computeRestEdgeDirection (const EdgeID i) const;  ; void getEdgeVertexCoordinates (const EdgeID i, Coord[2]) const;  ; void getRestEdgeVertexCoordinates (const EdgeID i, Coord[2]) const;  ; bool isPointOnEdge (const sofa::type::Vec< 3, Real > &pt, const EdgeID ind_e) const;  ; sofa::type::vector< SReal > computeEdgeBarycentricCoordinates (const sofa::type::Vec< 3, Real > &p, PointID ind_p1, PointID ind_p2, bool useRestPosition=false) const;  Compute the barycentric coor",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_dynamic_sparse_grid_geometry_algorithms.html:12334,interface,interface,12334,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_dynamic_sparse_grid_geometry_algorithms.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_dynamic_sparse_grid_geometry_algorithms.html,3,['interface'],['interface']
Integrability," index of the Rigid it is mapped from. More...;  ; Data< bool > d_globalToLocalCoords;  are the output DOFs initially expressed in global coordinates More...;  ;  Public Attributes inherited from sofa::core::Mapping< TIn, TOut >; Data< bool > f_applyRestPosition;  ;  Public Attributes inherited from sofa::core::BaseMapping; Data< bool > f_mapForces;  Are forces mapped ? More...;  ; Data< bool > f_mapConstraints;  Are constraints mapped ? More...;  ; Data< bool > f_mapMasses;  Are masses mapped ? More...;  ; Data< bool > f_mapMatrices;  Are matrix explicit mapped? More...;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  ;  Public Attributes inherited from sofa::component::mapping::nonlinear::NonLinearMappingData< true >; Data< helper::OptionsGroup > d_geometricStiffness;  Method used to compute the geometric stiffness. More...;  . Protected Attributes; std::unique_ptr< MatrixType > m_matrixJ;  ; bool m_updateJ;  ; SparseMatrixEigen m_eigenJacobian;  Jacobian of the mapping used by getJs. More...;  ; type::vector< sofa::linearalgebra::BaseMatrix * ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1nonlinear_1_1_rigid_mapping.html:2264,message,messages,2264,api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1nonlinear_1_1_rigid_mapping.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1nonlinear_1_1_rigid_mapping.html,1,['message'],['messages']
Integrability," it affect the output derivative of the given order.; FF: What is the meaning of the parameters ? ; Reimplemented from sofa::core::behavior::OdeSolver. ◆ getVelocityIntegrationFactor(). SReal sofa::component::odesolver::backward::VariationalSymplecticSolver::getVelocityIntegrationFactor ; (; ); const. inlineoverridevirtual . Given a displacement as computed by the linear system inversion, how much will it affect the velocity; This method is used to compute the compliance for contact corrections For Euler methods, it is typically dt. ; Reimplemented from sofa::core::behavior::OdeSolver. ◆ init(). void sofa::component::odesolver::backward::VariationalSymplecticSolver::init ; (; void ; ). overridevirtual . Initialization method called at graph creation and modification, during top-down traversal. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ parse(). void sofa::component::odesolver::backward::VariationalSymplecticSolver::parse ; (; core::objectmodel::BaseObjectDescription * ; arg). overridevirtual . Parse the given description to assign values to this object's fields and potentially other parameters. ; Reimplemented from sofa::core::objectmodel::Base. ◆ SOFA_CLASS2(). sofa::component::odesolver::backward::VariationalSymplecticSolver::SOFA_CLASS2 ; (; VariationalSymplecticSolver ; , . sofa::core::behavior::OdeSolver ; , . sofa::core::behavior::LinearSolverAccessor ;  . ). ◆ solve(). void sofa::component::odesolver::backward::VariationalSymplecticSolver::solve ; (; const core::ExecParams * ; , . SReal ; , . sofa::core::MultiVecCoordId ; , . sofa::core::MultiVecDerivId ;  . ). overridevirtual . Main computation method.; Specify and execute all computation for timestep integration, i.e. advancing the state from time t to t+dt, putting the resulting position and velocity in the provided vectors. ; Implements sofa::core::behavior::OdeSolver. sofacomponentodesolverbackwardVariationalSymplecticSolver; Generated on Mon Nov 11 2024 02:56:13 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1backward_1_1_variational_symplectic_solver.html:24439,integrat,integration,24439,api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1backward_1_1_variational_symplectic_solver.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1backward_1_1_variational_symplectic_solver.html,1,['integrat'],['integration']
Integrability," it affect the position. More...;  ; SReal getIntegrationFactor (int inputDerivative, int outputDerivative) const override;  ; SReal getSolutionIntegrationFactor (int outputDerivative) const override;  ;  Public Member Functions inherited from sofa::core::behavior::OdeSolver;  SOFA_ABSTRACT_CLASS (OdeSolver, objectmodel::BaseObject);  ; virtual void solve (const core::ExecParams *params, SReal dt);  ; virtual void computeResidual (const core::ExecParams *, SReal, sofa::core::MultiVecCoordId, sofa::core::MultiVecDerivId);  ; bool insertInNode (objectmodel::BaseNode *node) override;  ; bool removeInNode (objectmodel::BaseNode *node) override;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObject;  SOFA_CLASS (BaseObject, Base);  ; virtual void draw (const core::visual::VisualParams *);  Render internal data of this object, for debugging purposes. More...;  ; virtual void computeBBox (const core::ExecParams *, bool=false);  ; void setSrc (const std::string &v, std::vector< std::string > *attributeList=nullptr);  Sets a source Object and parses it to collect dependent Data. More...;  ; void setSrc (const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr);  ; Base * findLinkDestClass (const BaseClass *destType, const std::string &path, const BaseLink *link) override;  ; virtual std::string getPathName () const override;  Return the full path name of this object. More...;  ; SReal getTime () const;  Current time. More...;  ; const BaseContext * getContext () const;  ; BaseContext * getContext ();  ; const BaseObject * getMaster () const;  ; BaseObject * getMaster ();  ; const VecSlaves & getSlaves () const;  ; BaseObject * getSlave (const std::string &name) const;  ; virtual void addSlave (BaseObject::SPtr s);  ; virtual void removeSlave (BaseObject::SPtr s);  ; virtual void handleEvent (Event *);  Handle an event. More...;  ; virtual void handleTopologyChange ();  ; virtual void handleTopologyChange (core",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1backward_1_1_newmark_implicit_solver.html:5941,depend,dependent,5941,api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1backward_1_1_newmark_implicit_solver.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1backward_1_1_newmark_implicit_solver.html,1,['depend'],['dependent']
Integrability," last, . UnaryFunction ; f . ). Applies the given function object f to the Range [first, last); The signature of the function f should be equivalent to the following: void fun(const Range<InputIt>& a); The signature does not need to have const & . ◆ getSimulation(). Simulation * sofa::simulation::getSimulation ; (; ). Get the (unique) simulation which controls the scene. Automatically creates one if no Simulation has been set. . ◆ init(). SOFA_SIMULATION_API void sofa::simulation::init ; (; ). ◆ initThreadLocalData(). SOFA_SIMULATION_CORE_API void sofa::simulation::initThreadLocalData ; (; ). ◆ makeRangesForLoop(). template<class InputIt > . sofa::type::vector<Range<InputIt> > sofa::simulation::makeRangesForLoop ; (; const InputIt ; first, . const InputIt ; last, . const unsigned int ; nbRangesHint . ). Function returning a list of ranges from an iterable container. The number of ranges depends on: 1) the desired number of ranges provided in a parameter 2) the number of elements in the container The number of elements in each range is homogeneous, except for the last range which may contain more elements. . ◆ parallelForEach(). template<class InputIt , class UnaryFunction > . UnaryFunction sofa::simulation::parallelForEach ; (; TaskScheduler & ; taskScheduler, . InputIt ; first, . InputIt ; last, . UnaryFunction ; f . ). Applies the given function object f to the result of dereferencing every iterator in the range [first, last), in parallel. . ◆ parallelForEachRange(). template<class InputIt , class UnaryFunction > . UnaryFunction sofa::simulation::parallelForEachRange ; (; TaskScheduler & ; taskScheduler, . InputIt ; first, . InputIt ; last, . UnaryFunction ; f . ). Applies in parallel the given function object f to a list of ranges generated from [first, last); The signature of the function f should be equivalent to the following: void fun(const Range<InputIt>& a); The signature does not need to have const &.; A task scheduler must be provided and correctly initia",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation.html:8356,depend,depends,8356,api/master/sofa/html/namespacesofa_1_1simulation.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation.html,1,['depend'],['depends']
Integrability," library. More...;  ; static int unload (Handle handle);  Unload a dynamic library loaded with load(). More...;  ; static void * getSymbolAddress (Handle handle, const std::string &symbol);  Get the address of a symbol. More...;  ; static std::string getLastError ();  Get the message for the most recent error that occurred from load(), unload() or getSymbolAddress(). More...;  . Attribute details. ◆ extension. const std::string sofa::helper::system::DynamicLibrary::extension = ""so"". static . System-specific file extension for a dynamic library (e.g. ""so""). . ◆ prefix. const std::string sofa::helper::system::DynamicLibrary::prefix = ""lib"". static . System-specific file prefix for a dynamic library (e.g. ""lib""). . Function details. ◆ getLastError(). std::string sofa::helper::system::DynamicLibrary::getLastError ; (; ). static . Get the message for the most recent error that occurred from load(), unload() or getSymbolAddress(). ; ReturnsThe error message, or an empty string if no errors have occurred since initialization or since it was last called. . ◆ getSymbolAddress(). void * sofa::helper::system::DynamicLibrary::getSymbolAddress ; (; Handle ; handle, . const std::string & ; symbol . ). static . Get the address of a symbol. ; Parameters. handleThe handle of a library. ; symbolThe symbol to look for. . ReturnsA pointer to the symbol if it was found, or nullptr on error. . ◆ load(). DynamicLibrary::Handle sofa::helper::system::DynamicLibrary::load ; (; const std::string & ; filename). static . Load a dynamic library. ; Parameters. filenameThe library to load. . ReturnsA handle, that must be unloaded with unload(). Use Handle::isValid() to know if the loading was successful. . ◆ unload(). int sofa::helper::system::DynamicLibrary::unload ; (; Handle ; handle). static . Unload a dynamic library loaded with load(). ; Parameters. handleThe handle of a library. . Returns0 on success, and nonzero on error. . sofahelpersystemDynamicLibrary; Generated on Mon Nov 11 2024 03:31",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_dynamic_library.html:1886,message,message,1886,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_dynamic_library.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_dynamic_library.html,1,['message'],['message']
Integrability," missing device data, up to where entries should be set to zero ? More...;  ; T * hostPointer;  Pointer to the data on the CPU side. More...;  ; int deviceIsValid;  True if the data on the GPU is currently valid (up to the given deviceVectorSize of each device, i.e. additional space may need to be allocated and/or initialized) More...;  ; bool hostIsValid;  True if the data on the CPU is currently valid. More...;  ; bool bufferIsRegistered;  True if the buffer is registered with CUDA. More...;  ; buffer_id_type bufferObject;  Optional associated buffer ID. More...;  . Static Protected Attributes; static int cptid = 0;  . Public Member Functions;  vector_device ();  ;  vector_device (const Size n);  ;  vector_device (const vector_device< T, MemoryManager, DataTypeInfoManager > &v);  ;  vector_device (const std::initializer_list< T > &t);  ; bool isHostValid () const;  ; bool isDeviceValid (unsigned gpu) const;  ; void clear ();  ; void operator= (const vector_device< T, MemoryManager, DataTypeInfoManager > &v);  ;  ~vector_device ();  ; Size size () const;  ; Size capacity () const;  ; bool empty () const;  ; void reserve (Size s, Size WARP_SIZE=MemoryManager::BSIZE);  ; void fastResize (Size s, Size WARP_SIZE=MemoryManager::BSIZE);  resize the vector without calling constructors or destructors, and without synchronizing the device and host copy More...;  ; void recreate (Size s, Size WARP_SIZE=MemoryManager::BSIZE);  resize the vector discarding any old values, without calling constructors or destructors, and without synchronizing the device and host copy More...;  ; void invalidateDevice ();  ; void invalidateHost ();  ; void memsetDevice (int v=0);  ; void memsetHost (int v=0);  ; void resize (Size s, Size WARP_SIZE=MemoryManager::BSIZE);  ; void swap (vector_device< T, MemoryManager, DataTypeInfoManager > &v);  ; const device_pointer deviceReadAt (int i, int gpu=MemoryManager::getBufferDevice()) const;  ; const device_pointer deviceRead (int gpu=MemoryManager::ge",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1vector__device.html:2244,synchroniz,synchronizing,2244,api/master/sofa/html/classsofa_1_1type_1_1vector__device.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1vector__device.html,1,['synchroniz'],['synchronizing']
Integrability," of all members . sofa::component::solidmechanics::fem::hyperelastic::material::PlasticMaterial Class Reference . #include <PlasticMaterial.h>. Inheritance diagram for sofa::component::solidmechanics::fem::hyperelastic::material::PlasticMaterial:. [legend]; Detailed Description; Plastic material (proof of principle) . Public Attributes; Data< SReal > _poissonRatio;  Poisson ratio in Hooke's law. More...;  ; Data< SReal > _youngModulus;  Young modulus in Hooke's law. More...;  ; VecDouble _E;  ; VecDouble _epsilon;  ; VecStress _sigma;  ; VecDouble _previousVonMisesStrain;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  . Public Member Functions;  SOFA_CLASS (PlasticMaterial, BaseMaterial);  ;  SOFA_ATTRIBUTE_REPLACED__TYPEMEMBER (Vector3, sofa::type::Vec3);  ;  PlasticMaterial ();  ; void computeStress (Vec3 &stress, Vec3 &strain, unsigned int &elementIndex) override;  ; void computeDStress (Vec3 &dstress, Vec3 &dstrain) override;  ; SReal computeVonMisesStrain (Vec3 &strain);  ; void computeStressOnSection (Vec3 &Stress, Vec3 Strain, int section",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_plastic_material.html:1250,message,messages,1250,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_plastic_material.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_plastic_material.html,1,['message'],['messages']
Integrability," of all members . sofa::core::BaseMatrixAccumulatorComponent< c > Class Template Reference . #include <BaseMatrixAccumulatorComponent.h>. Inheritance diagram for sofa::core::BaseMatrixAccumulatorComponent< c >:. [legend]; Detailed Description; template<matrixaccumulator::Contribution c>; class sofa::core::BaseMatrixAccumulatorComponent< c >; Matrix accumulator which is also a BaseObject. It is designed to be associated with another component. . Public Attributes; SingleLink< MyType, ComponentType, BaseLink::FLAG_STOREPATH|BaseLink::FLAG_STRONGLINK > l_associatedComponent;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  . Public Member Functions;  SOFA_ABSTRACT_CLASS (BaseMatrixAccumulatorComponent, objectmodel::BaseObject);  ;  ~BaseMatrixAccumulatorComponent () override=default;  ;  BaseMatrixAccumulatorComponent ();  ; void associateObject (ComponentType *object);  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObject;  SOFA_CLASS (BaseObject, Base);  ; virtual void draw (const core::visual::VisualParams *);  Render inte",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_base_matrix_accumulator_component.html:1229,message,messages,1229,api/master/sofa/html/classsofa_1_1core_1_1_base_matrix_accumulator_component.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_base_matrix_accumulator_component.html,1,['message'],['messages']
Integrability," of hexahedron IDs to be removed. More...;  ; Data< bool > d_saveIndicesAtInit;  set to 'true' to save the incision to do in the init to incise even after a movement More...;  ; Data< SReal > d_epsilonSnapPath;  epsilon snap path More...;  ; Data< SReal > d_epsilonSnapBorder;  epsilon snap path More...;  ; Data< bool > d_draw;  draw information More...;  ; SingleLink< TopologicalChangeProcessor, sofa::core::topology::BaseMeshTopology, BaseLink::FLAG_STOREPATH|BaseLink::FLAG_STRONGLINK > l_topology;  Link to be set to the topology container in the component graph. More...;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  . Protected Attributes; core::topology::BaseMeshTopology * m_topology;  ; std::ifstream * infile;  ; double nextTime;  ; double lastTime;  ; double loopTime;  ; std::vector< TriangleIncisionInformation > triangleIncisionInformation;  ; std::vector< std::string > linesAboutIncision;  ; std::vector< Index > errorTrianglesIndices;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObject; SingleLink< BaseObject, Base",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1utility_1_1_topological_change_processor.html:4378,message,messages,4378,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1utility_1_1_topological_change_processor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1utility_1_1_topological_change_processor.html,1,['message'],['messages']
Integrability," of the group containing this constraint. This ID is used to specify which constraints are solved by which solver, by specifying in each solver which groups of constraints it should handle. More...;  ; void setGroup (int g);  Set the ID of the group containing this constraint. This ID is used to specify which constraints are solved by which solver, by specifying in each solver which groups of constraints it should handle. More...;  ; virtual void getConstraintInfo (const ConstraintParams *cParams, VecConstraintBlockInfo &blocks, VecPersistentID &ids, VecConstCoord &positions, VecConstDeriv &directions, VecConstArea &areas);  ; virtual void getConstraintResolution (std::vector< ConstraintResolution * > &resTab, unsigned int &offset);  ; type::vector< std::string > getIdentifiers ();  ;  Public Member Functions inherited from sofa::core::behavior::BaseConstraintSet;  SOFA_ABSTRACT_CLASS (BaseConstraintSet, objectmodel::BaseObject);  ; virtual void resetConstraint ();  ; virtual void setConstraintId (unsigned cId);  ; virtual void processGeometricalData ();  ; virtual void getConstraintViolation (const ConstraintParams *, linearalgebra::BaseVector *, unsigned int);  ; bool insertInNode (objectmodel::BaseNode *node) override;  ; bool removeInNode (objectmodel::BaseNode *node) override;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObject;  SOFA_CLASS (BaseObject, Base);  ; void setSrc (const std::string &v, std::vector< std::string > *attributeList=nullptr);  Sets a source Object and parses it to collect dependent Data. More...;  ; void setSrc (const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr);  ; Base * findLinkDestClass (const BaseClass *destType, const std::string &path, const BaseLink *link) override;  ; virtual std::string getPathName () const override;  Return the full path name of this object. More...;  ; SReal getTime () const;  Current time. More...;  ; const BaseContext * getContext () ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1model_1_1_bilateral_lagrangian_constraint.html:10205,depend,dependent,10205,api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1model_1_1_bilateral_lagrangian_constraint.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1model_1_1_bilateral_lagrangian_constraint.html,2,['depend'],['dependent']
Integrability," of triangles normal More...;  ; Data< bool > d_useCurvature;  use the curvature of the mesh to avoid some self-intersection test More...;  ; SingleLink< TriangleCollisionModel< DataTypes >, sofa::core::topology::BaseMeshTopology, BaseLink::FLAG_STOREPATH|BaseLink::FLAG_STRONGLINK > l_topology;  Link to be set to the topology container in the component graph. More...;  ;  Public Attributes inherited from sofa::core::CollisionModel; CollisionElementActiver * myCollElemActiver;  CollisionElementActiver that activate or deactivate collision element during execution. More...;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  . Protected Attributes; core::behavior::MechanicalState< DataTypes > * m_mstate;  Pointer to the corresponding MechanicalState. More...;  ; sofa::core::topology::BaseMeshTopology * m_topology;  Pointer to the corresponding Topology. More...;  ; VecDeriv m_normals;  Vector of normal direction per triangle. More...;  ; const sofa::core::topology::BaseMeshTopology::SeqTriangles * m_triangles;  m_triangles More...;  ; sofa::core::topol",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_triangle_collision_model.html:2210,message,messages,2210,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_triangle_collision_model.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_triangle_collision_model.html,1,['message'],['messages']
Integrability," of triangles normal More...;  ; Data< bool > d_useCurvature;  use the curvature of the mesh to avoid some self-intersection test More...;  ; SingleLink< TriangleCollisionModel< DataTypes >, sofa::core::topology::BaseMeshTopology, BaseLink::FLAG_STOREPATH|BaseLink::FLAG_STRONGLINK > l_topology;  Link to be set to the topology container in the component graph. More...;  ;  Public Attributes inherited from sofa::core::CollisionModel; CollisionElementActiver * myCollElemActiver;  CollisionElementActiver that activate or deactivate collision element during execution. More...;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  . Public Member Functions;  SOFA_CLASS (TriangleModelInRegularGrid, TriangleCollisionModel< sofa::defaulttype::Vec3Types >);  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; void computeBoundingTree (int maxDepth=0) override;  Create or update the bounding volume hierarchy. More...;  ;  Public Member Functions inherited from sofa::component::collision",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_triangle_model_in_regular_grid.html:2008,message,messages,2008,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_triangle_model_in_regular_grid.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_triangle_model_in_regular_grid.html,1,['message'],['messages']
Integrability," of triangles normal More...;  ; Data< bool > d_useCurvature;  use the curvature of the mesh to avoid some self-intersection test More...;  ; SingleLink< TriangleCollisionModel< DataTypes >, sofa::core::topology::BaseMeshTopology, BaseLink::FLAG_STOREPATH|BaseLink::FLAG_STRONGLINK > l_topology;  Link to be set to the topology container in the component graph. More...;  ;  Public Attributes inherited from sofa::core::CollisionModel; CollisionElementActiver * myCollElemActiver;  CollisionElementActiver that activate or deactivate collision element during execution. More...;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  ;  Public Attributes inherited from sofa::helper::TriangleOctreeRoot; const SeqTriangles * octreeTriangles;  the triangles used as input to construct the octree More...;  ; const VecCoord * octreePos;  the positions of vertices used as input to construct the octree More...;  ; TriangleOctree * octreeRoot;  the first node of the octree More...;  ; int cubeSize;  the size of the octree cube More...;  . Public Member Functions;  SOFA_",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_triangle_octree_model.html:1863,message,messages,1863,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_triangle_octree_model.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_triangle_octree_model.html,1,['message'],['messages']
Integrability," offers functions to add and remove VecId objects from the list of containers that contribute to the cumulative sum. More...;  ; class  MappingMatrixAccumulator;  ; class  ListMappingMatrixAccumulator;  ; class  GeometricStiffnessMatrix;  ; class  BaseMapping;  ; class  BaseMatrixAccumulatorComponent;  ; struct  get_base_object_strong;  ; class  BaseState;  Component storing position and velocity vectors. More...;  ; class  BehaviorModel;  Abstract Interface of components defining the behavior of a simulated object. More...;  ; class  CategoryLibrary;  An Generic Category of the Sofa Library. More...;  ; class  BaseCollisionElementIterator;  Base class for reference to an collision element defined by its index More...;  ; class  TCollisionElementIterator;  Reference to an collision element defined by its index inside a given collision model. More...;  ; class  CollisionElementIterator;  Reference to an abstract collision element. More...;  ; class  CollisionElementActiver;  ; class  CollisionModel;  Abstract CollisionModel interface. More...;  ; class  ComponentLibrary;  An Generic Component of the Sofa Library. More...;  ; class  ComponentNameHelper;  ; class  ConstraintParams;  ; class  DataEngine;  from a set of Data inputs computes a set of Data outputs More...;  ; struct  DataTracker;  ; class  DataTrackerDDGNode;  A DDGNode with trackable input Data (containing a DataTracker) More...;  ; class  DataTrackerCallback;  ; class  DataTrackerFunctor;  ; class  DerivativeMatrix;  ; class  ExecParams;  Class gathering parameters use by most components methods, and transmitted by all visitors. More...;  ; struct  CleanupCheck;  ; class  Mapping;  Specialized interface to convert a model state of type TIn to a model state of type TOut. This is basically a sofa::core::BaseMapping with given input and output types. More...;  ; class  MatrixAccumulatorInterface;  ; class  MatrixAccumulatorIndexChecker;  ; class  ListMatrixAccumulator;  ; class  MechanicalParams;  Class gat",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html:2336,interface,interface,2336,api/master/sofa/html/namespacesofa_1_1core.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html,1,['interface'],['interface']
Integrability," override;  Gravity in local coordinates. More...;  ; SReal getDt () const override;  Simulation timestep. More...;  ; SReal getTime () const override;  Simulation time. More...;  ; bool getAnimate () const override;  Animation flag. More...;  ; void setDt (SReal dt) override;  Simulation timestep. More...;  ; virtual void setTime (SReal t);  Simulation time. More...;  ; void setAnimate (bool val) override;  Animation flag. More...;  ; void setChangeSleepingState (bool val) override;  Sleeping state change of the context. More...;  ; virtual void setDisplayWorldGravity (bool val);  Display flags: Gravity. More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseContext;  SOFA_CLASS (BaseContext, Base);  ; virtual bool hasAncestor (const BaseContext *) const;  ; ComponentNameHelper & getNameHelper ();  Returns utilitary object to uniquely name objects in the context. More...;  ; virtual core::topology::BaseMeshTopology * getMeshTopology (SearchDirection dir=SearchUp) const;  Mesh Topology (unified interface for both static and dynamic topologies) More...;  ; virtual core::behavior::BaseMass * getMass () const;  Mass. More...;  ; template<class Object , class Container > ; void getObjects (Container *list, SearchDirection dir=SearchUp);  List all objects of this node deriving from a given class. More...;  ; template<class Container > ; Container * getObjects (Container *result, SearchDirection dir=SearchUp);  Returns a list of object of type passed as a parameter. More...;  ; template<class Container > ; Container & getObjects (Container &result, SearchDirection dir=SearchUp);  ; template<class Object = sofa::core::objectmodel::BaseObject> ; std::vector< Object * > getObjects (SearchDirection dir=SearchUp);  ; template<class T > ; T * get (SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, SearchDirection dir=Sea",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:22536,interface,interface,22536,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,1,['interface'],['interface']
Integrability," parsing the list of TopologyHandlers linked to this topology. More...;  ;  Protected Member Functions inherited from sofa::component::topology::container::dynamic::TriangleSetTopologyModifier;  TriangleSetTopologyModifier ();  ;  ~TriangleSetTopologyModifier () override;  ; void addTrianglesWarning (const sofa::Size nTriangles, const sofa::type::vector< Triangle > &trianglesList, const sofa::type::vector< TriangleID > &trianglesIndexList);  Sends a message to warn that some triangles were added in this topology. More...;  ; void addTrianglesWarning (const sofa::Size nTriangles, const sofa::type::vector< Triangle > &trianglesList, const sofa::type::vector< TriangleID > &trianglesIndexList, const sofa::type::vector< sofa::type::vector< TriangleID > > &ancestors, const sofa::type::vector< sofa::type::vector< SReal > > &baryCoefs);  Sends a message to warn that some triangles were added in this topology. More...;  ; virtual void removeTrianglesWarning (sofa::type::vector< TriangleID > &triangles);  Sends a message to warn that some triangles are about to be deleted. More...;  ; void addEdgesWarning (const sofa::Size nEdges, const sofa::type::vector< Edge > &edgesList, const sofa::type::vector< EdgeID > &edgesIndexList) override;  Sends a message to warn that some edges were added in this topology. More...;  ; void addEdgesWarning (const sofa::Size nEdges, const sofa::type::vector< Edge > &edgesList, const sofa::type::vector< EdgeID > &edgesIndexList, const sofa::type::vector< sofa::type::vector< EdgeID > > &ancestors, const sofa::type::vector< sofa::type::vector< SReal > > &baryCoefs) override;  Sends a message to warn that some edges were added in this topology. More...;  ; void addEdgesProcess (const sofa::type::vector< Edge > &edges) override;  Add some edges to this topology. More...;  ; void removeEdgesProcess (const sofa::type::vector< EdgeID > &indices, const bool removeIsolatedItems=false) override;  Remove a subset of edges. More...;  ; void addPointsProcess (c",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_tetrahedron_set_topology_modifier.html:22364,message,message,22364,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_tetrahedron_set_topology_modifier.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_tetrahedron_set_topology_modifier.html,1,['message'],['message']
Integrability," protected . ◆ GearSpringForceField() [2/2]. template<class DataTypes > . sofa::component::solidmechanics::spring::GearSpringForceField< DataTypes >::GearSpringForceField ; (; MechanicalState * ; object1, . MechanicalState * ; object2 . ). protected . ◆ ~GearSpringForceField(). template<class DataTypes > . sofa::component::solidmechanics::spring::GearSpringForceField< DataTypes >::~GearSpringForceField. protectedvirtual . Function details. ◆ addDForce(). template<class DataTypes > . void sofa::component::solidmechanics::spring::GearSpringForceField< DataTypes >::addDForce ; (; const core::MechanicalParams * ; mparams, . DataVecDeriv & ; df1, . DataVecDeriv & ; df2, . const DataVecDeriv & ; dx1, . const DataVecDeriv & ; dx2 . ). overridevirtual . Compute the force derivative given a small displacement from the position and velocity used in the previous call to addForce().; The derivative should be directly derived from the computations done by addForce. Any forces neglected in addDForce will be integrated explicitly (i.e. using its value at the beginning of the timestep).; If the ForceField can be represented as a matrix, this method computes $ df += kFactor K dx + bFactor B dx $; This method must be implemented by the component, and is usually called by the generic PairInteractionForceField::addDForce() method.; To support old components that implement the deprecated addForce method without scalar coefficients, it defaults to using a temporaty vector to compute $ K dx $ and then manually scaling all values by kFactor. ; Implements sofa::core::behavior::PairInteractionForceField< DataTypes >. ◆ addForce(). template<class DataTypes > . void sofa::component::solidmechanics::spring::GearSpringForceField< DataTypes >::addForce ; (; const sofa::core::MechanicalParams * ; mparams, . DataVecDeriv & ; f1, . DataVecDeriv & ; f2, . const DataVecCoord & ; x1, . const DataVecCoord & ; x2, . const DataVecDeriv & ; v1, . const DataVecDeriv & ; v2 . ). overridevirtual . Given the c",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_gear_spring_force_field.html:26254,integrat,integrated,26254,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_gear_spring_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_gear_spring_force_field.html,1,['integrat'],['integrated']
Integrability," settings. . Public Attributes; sofa::core::objectmodel::RenamedData< bool > dumpState;  ; sofa::core::objectmodel::RenamedData< bool > logTime;  ; sofa::core::objectmodel::RenamedData< bool > exportState;  ; Data< bool > d_dumpState;  Dump state vectors at each time step of the simulation. More...;  ; Data< bool > d_logTime;  Output in the console an average of the time spent during different stages of the simulation. More...;  ; Data< bool > d_exportState;  Create GNUPLOT files with the positions, velocities and forces of all the simulated objects of the scene. More...;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  . Public Member Functions;  SOFA_CLASS (StatsSetting, core::objectmodel::ConfigurationSetting);  Sofa macro to define typedef. More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::ConfigurationSetting;  SOFA_CLASS (ConfigurationSetting, BaseObject);  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; bool insertInNode (objectmodel",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1setting_1_1_stats_setting.html:1533,message,messages,1533,api/master/sofa/html/classsofa_1_1component_1_1setting_1_1_stats_setting.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1setting_1_1_stats_setting.html,1,['message'],['messages']
Integrability," sofa::component::engine::select::MeshBoundaryROI:. [legend]; Detailed Description; This class outputs indices of boundary vertices of a triangle/quad mesh The boundary is detected using the number elements associated to the edges. An edge is considered on the boundary if it has a unique associated element. Authorbenjamin gilles . Public Attributes; Data< SeqTriangles > d_triangles;  inputs More...;  ; Data< SeqQuads > d_quads;  input quads More...;  ; Data< SetIndex > d_inputROI;  optional subset of the input mesh More...;  ; Data< SetIndex > d_indices;  outputs More...;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  . Public Member Functions;  SOFA_CLASS (MeshBoundaryROI, DataEngine);  ;  SOFA_ATTRIBUTE_REPLACED__TYPEMEMBER (Inherited, Inherit1);  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; void reinit () override;  Update method called when variables used in precomputation are modified. More...;  ; void doUpdate () override;  Where you put your engine's impl",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_mesh_boundary_r_o_i.html:1423,message,messages,1423,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_mesh_boundary_r_o_i.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_mesh_boundary_r_o_i.html,1,['message'],['messages']
Integrability," sofa::core::behavior::BaseConstraintCorrection;  SOFA_ABSTRACT_CLASS (BaseConstraintCorrection, objectmodel::BaseObject);  ; virtual bool isActive ();  ; virtual void getComplianceWithConstraintMerge (linearalgebra::BaseMatrix *, std::vector< int > &);  For multigrid approach => constraints are merged. More...;  ; virtual bool hasConstraintNumber (int);  ; virtual void resetForUnbuiltResolution (SReal *, std::list< unsigned int > &);  ; virtual void addConstraintDisplacement (SReal *, int, int);  ; virtual void setConstraintDForce (SReal *, int, int, bool);  ; virtual void getBlockDiagonalCompliance (linearalgebra::BaseMatrix *, int, int);  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObject;  SOFA_CLASS (BaseObject, Base);  ; virtual void draw (const core::visual::VisualParams *);  Render internal data of this object, for debugging purposes. More...;  ; virtual void computeBBox (const core::ExecParams *, bool=false);  ; void setSrc (const std::string &v, std::vector< std::string > *attributeList=nullptr);  Sets a source Object and parses it to collect dependent Data. More...;  ; void setSrc (const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr);  ; Base * findLinkDestClass (const BaseClass *destType, const std::string &path, const BaseLink *link) override;  ; virtual std::string getPathName () const override;  Return the full path name of this object. More...;  ; virtual bool insertInNode (BaseNode *);  ; virtual bool removeInNode (BaseNode *);  ; SReal getTime () const;  Current time. More...;  ; const BaseContext * getContext () const;  ; BaseContext * getContext ();  ; const BaseObject * getMaster () const;  ; BaseObject * getMaster ();  ; const VecSlaves & getSlaves () const;  ; BaseObject * getSlave (const std::string &name) const;  ; virtual void addSlave (BaseObject::SPtr s);  ; virtual void removeSlave (BaseObject::SPtr s);  ; virtual void handleEvent (Event *);  Handle an event. More..",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1correction_1_1_generic_constraint_correction.html:5945,depend,dependent,5945,api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1correction_1_1_generic_constraint_correction.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1correction_1_1_generic_constraint_correction.html,1,['depend'],['dependent']
Integrability," sofa::core::collision::Pipeline;  SOFA_ABSTRACT_CLASS (Pipeline, sofa::core::objectmodel::BaseObject);  ; void computeCollisions ();  ; const BroadPhaseDetection * getBroadPhaseDetection () const;  Broad phase collision detection method accessor. More...;  ; const NarrowPhaseDetection * getNarrowPhaseDetection () const;  Narrow phase collision detection method accessor. More...;  ; virtual std::set< std::string > getResponseList () const =0;  get the set of response available with the current collision pipeline More...;  ; bool insertInNode (objectmodel::BaseNode *node) override;  ; bool removeInNode (objectmodel::BaseNode *node) override;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObject;  SOFA_CLASS (BaseObject, Base);  ; virtual void draw (const core::visual::VisualParams *);  Render internal data of this object, for debugging purposes. More...;  ; virtual void computeBBox (const core::ExecParams *, bool=false);  ; void setSrc (const std::string &v, std::vector< std::string > *attributeList=nullptr);  Sets a source Object and parses it to collect dependent Data. More...;  ; void setSrc (const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr);  ; Base * findLinkDestClass (const BaseClass *destType, const std::string &path, const BaseLink *link) override;  ; virtual std::string getPathName () const override;  Return the full path name of this object. More...;  ; SReal getTime () const;  Current time. More...;  ; const BaseContext * getContext () const;  ; BaseContext * getContext ();  ; const BaseObject * getMaster () const;  ; BaseObject * getMaster ();  ; const VecSlaves & getSlaves () const;  ; BaseObject * getSlave (const std::string &name) const;  ; virtual void addSlave (BaseObject::SPtr s);  ; virtual void removeSlave (BaseObject::SPtr s);  ; virtual void handleEvent (Event *);  Handle an event. More...;  ; virtual void handleTopologyChange ();  ; virtual void handleTopologyChange (core",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html:2043,depend,dependent,2043,api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html,1,['depend'],['dependent']
Integrability," sofa::core::objectmodel::BaseContext;  SOFA_CLASS (BaseContext, Base);  ; ComponentNameHelper & getNameHelper ();  Returns utilitary object to uniquely name objects in the context. More...;  ; virtual core::topology::BaseMeshTopology * getMeshTopology (SearchDirection dir=SearchUp) const;  Mesh Topology (unified interface for both static and dynamic topologies) More...;  ; virtual core::behavior::BaseMass * getMass () const;  Mass. More...;  ; template<class Object , class Container > ; void getObjects (Container *list, SearchDirection dir=SearchUp);  List all objects of this node deriving from a given class. More...;  ; template<class Container > ; Container * getObjects (Container *result, SearchDirection dir=SearchUp);  Returns a list of object of type passed as a parameter. More...;  ; template<class Container > ; Container & getObjects (Container &result, SearchDirection dir=SearchUp);  ; template<class Object = sofa::core::objectmodel::BaseObject> ; std::vector< Object * > getObjects (SearchDirection dir=SearchUp);  ; template<class T > ; T * get (SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html:19970,wrap,wrapper,19970,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,1,['wrap'],['wrapper']
Integrability," sofa::core::objectmodel::BaseObject; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  . Attribute details. ◆ d_B. template<class DataTypes > . Data< Real > sofa::component::mechanicalload::TaitSurfacePressureForceField< DataTypes >::d_B. IN: Bulk modulus (resistance to uniform compression) . ◆ d_currentInjectedVolume. template<class DataTypes > . Data< Real > sofa::component::mechanicalload::TaitSurfacePressureForceField< DataTypes >::d_currentInjectedVolume. OUT: Current injected (or extracted) volume (taking into account maxInjectionRate) . ◆ d_currentPressure. template<class DataTypes > . Data< Real > sofa::component::mechanicalload::TaitSurfacePressureForceField< DataTypes >::d_currentPressure. OUT: Current pressure, as computed from the last surface position. . ◆ d_currentStiffness. template<class DataTypes > . Data< Real > sofa::component::mechanicalload::TaitSurfacePressureForceField< DataTypes >::d_currentStiffness. OUT: dP/dV at current volume and pressure. . ◆ d_currentSurfaceArea. template<class DataTypes > . Data< Real > sofa::component::mechanicalload::TaitSurfacePressureForceField< DataTypes >::d_currentSurfaceArea. OUT: Current surface area, as computed from the last surface position. . ◆ d_currentVolume. template<class DataTypes > . Data< Real > sofa::component::mechanicalload::TaitSurfacePressureForceField< DataTypes >::d_currentVolume. OUT: Current volume, as computed from the last surface position. . ◆ d_drawForceColor. template<class DataTypes > . Data< sofa::ty",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_tait_surface_pressure_force_field.html:23513,inject,injected,23513,api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_tait_surface_pressure_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_tait_surface_pressure_force_field.html,1,['inject'],['injected']
Integrability," sofa::core::objectmodel::ConfigurationSetting Class Reference . #include <ConfigurationSetting.h>; Base class for all the configuration settings of SOFA. ; More... Inheritance diagram for sofa::core::objectmodel::ConfigurationSetting:. [legend]; Detailed Description; Base class for all the configuration settings of SOFA. . Public Member Functions;  SOFA_CLASS (ConfigurationSetting, BaseObject);  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; bool insertInNode (objectmodel::BaseNode *node) override;  ; bool removeInNode (objectmodel::BaseNode *node) override;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObject;  SOFA_CLASS (BaseObject, Base);  ; virtual void draw (const core::visual::VisualParams *);  Render internal data of this object, for debugging purposes. More...;  ; virtual void computeBBox (const core::ExecParams *, bool=false);  ; void setSrc (const std::string &v, std::vector< std::string > *attributeList=nullptr);  Sets a source Object and parses it to collect dependent Data. More...;  ; void setSrc (const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr);  ; Base * findLinkDestClass (const BaseClass *destType, const std::string &path, const BaseLink *link) override;  ; virtual std::string getPathName () const override;  Return the full path name of this object. More...;  ; SReal getTime () const;  Current time. More...;  ; const BaseContext * getContext () const;  ; BaseContext * getContext ();  ; const BaseObject * getMaster () const;  ; BaseObject * getMaster ();  ; const VecSlaves & getSlaves () const;  ; BaseObject * getSlave (const std::string &name) const;  ; virtual void addSlave (BaseObject::SPtr s);  ; virtual void removeSlave (BaseObject::SPtr s);  ; virtual void handleEvent (Event *);  Handle an event. More...;  ; virtual void handleTopologyChange ();  ; virtual void handleTopologyChange (core",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting.html:1324,depend,dependent,1324,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting.html,1,['depend'],['dependent']
Integrability," sofa::helper::WriteAccessor< T, Enable > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; List of all members . sofa::helper::WriteAccessor< T, Enable > Class Template Reference . #include <WriteAccessor.h>. Inheritance diagram for sofa::helper::WriteAccessor< T, Enable >:. [legend]; Detailed Description; template<class T, class Enable = void>; class sofa::helper::WriteAccessor< T, Enable >; A WriteAccessor is a proxy class, holding a reference to a given container and providing access to its data, using an unified interface (similar to std::vector), hiding API differences within some containers.; Other advantadges of using a WriteAccessor are :. It can be faster that the default methods and operators of the container, as verifications and changes notifications can be handled in the accessor's constructor and destructor instead of at each item access.; Accesses can be logged for debugging or task dependencies analysis. The default implementation provides only minimal set of methods and operators, sufficient for scalar types but which should be overloaded for more complex types. Various template specializations are typically used, especially for core::objectmodel::Data<T> . Protected Attributes; container_type * vref;  . Public Member Functions;  WriteAccessor (container_type &container);  ; const_reference ref () const;  ; reference wref ();  ;  operator const_reference () const;  ; const_pointer operator-> () const;  ; const_reference operator* () const;  ;  operator reference ();  ; pointer operator-> ();  ; reference operator* ();  ; template<class T2 > ; void operator= (const T2 &v);  . Attribute details. ◆ vref. template<class T , class Enable = void> . container_type* sofa::helper::WriteAccessor< T, Enable >::vref. protected . Constructor details. ◆ WriteAccessor(). template<class T , class Enable = void> . sofa::helper::WriteAccessor< T, Enable >::WriteAccess",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor.html:1025,depend,dependencies,1025,api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor.html,1,['depend'],['dependencies']
Integrability," some points to this topology. More...;  ; void removePointsProcess (const sofa::type::vector< PointID > &indices, const bool removeDOF=true) override;  Remove a subset of points. More...;  ; void renumberPointsProcess (const sofa::type::vector< PointID > &index, const sofa::type::vector< PointID > &inv_index, const bool renumberDOF=true) override;  Reorder this topology. More...;  ; void propagateTopologicalEngineChanges () override;  function to propagate topological change events by parsing the list of TopologyHandlers linked to this topology. More...;  ;  Protected Member Functions inherited from sofa::component::topology::container::dynamic::EdgeSetTopologyModifier;  EdgeSetTopologyModifier ();  ;  ~EdgeSetTopologyModifier () override;  ; virtual void addEdgesWarning (const sofa::Size nEdges);  Sends a message to warn that some edges were added in this topology. More...;  ; virtual void addEdgesWarning (const sofa::Size nEdges, const sofa::type::vector< Edge > &edgesList, const sofa::type::vector< EdgeID > &edgesIndexList);  Sends a message to warn that some edges were added in this topology. More...;  ; virtual void addEdgesWarning (const sofa::Size nEdges, const sofa::type::vector< Edge > &edgesList, const sofa::type::vector< EdgeID > &edgesIndexList, const sofa::type::vector< sofa::type::vector< EdgeID > > &ancestors);  Sends a message to warn that some edges were added in this topology. More...;  ; virtual void addEdgesWarning (const sofa::Size nEdges, const sofa::type::vector< Edge > &edgesList, const sofa::type::vector< EdgeID > &edgesIndexList, const sofa::type::vector< sofa::type::vector< EdgeID > > &ancestors, const sofa::type::vector< sofa::type::vector< SReal > > &baryCoefs);  Sends a message to warn that some edges were added in this topology. More...;  ; virtual void addEdgesWarning (const sofa::Size nEdges, const sofa::type::vector< Edge > &edgesList, const sofa::type::vector< EdgeID > &edgesIndexList, const sofa::type::vector< core::topology::Edge",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_dynamic_sparse_grid_topology_modifier.html:22247,message,message,22247,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_dynamic_sparse_grid_topology_modifier.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_dynamic_sparse_grid_topology_modifier.html,3,['message'],['message']
Integrability," stiffness matrix should be used. More...;  ; Data< Real > d_defaultVolume;  Default Volume. More...;  ; Data< Deriv > d_mainDirection;  Main direction for pressure application. More...;  ; Data< Real > d_drawForceScale;  DEBUG: scale used to render force vectors. More...;  ;  Public Attributes inherited from sofa::core::behavior::BaseForceField; Data< SReal > rayleighStiffness;  Rayleigh Damping stiffness matrix coefficient. More...;  ; objectmodel::lifecycle::DeprecatedData isCompliance;  Considered as compliance, else considered as stiffness (default to false) More...;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  . Protected Attributes; type::vector< Deriv > m_f;  store forces for visualization More...;  ; SingleLink< SurfacePressureForceField< DataTypes >, sofa::core::topology::BaseMeshTopology, BaseLink::FLAG_STOREPATH|BaseLink::FLAG_STRONGLINK > l_topology;  Link to be set to the topology container in the component graph. More...;  ; State state;  In pulse mode, says wether pressure is increasing or decreasing. More...;  ; Real m_pulseMo",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_surface_pressure_force_field.html:3613,message,messages,3613,api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_surface_pressure_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_surface_pressure_force_field.html,1,['message'],['messages']
Integrability," template wrapper, given a required tag, possibly searching up or down from the current context. . ◆ get() [3/15]. template<class T > . T* sofa::core::objectmodel::BaseContext::get ; (; const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. . ◆ get() [4/15]. template<class T , class Container > . void sofa::core::objectmodel::BaseContext::get ; (; Container * ; list, . const Tag & ; tag, . SearchDirection ; dir = SearchUp . ); const. inline . Generic list of objects access template wrapper, given a required tag, possibly searching up or down from the current context. . ◆ get() [5/15]. template<class T , class Container > . void sofa::core::objectmodel::BaseContext::get ; (; Container * ; list, . const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. inline . Generic list of objects access template wrapper, given a set of required tags, possibly searching up or down from the current context. . ◆ get() [6/15]. template<class T , class Container > . void sofa::core::objectmodel::BaseContext::get ; (; Container * ; list, . SearchDirection ; dir = SearchUp . ); const. inline . Generic list of objects access template wrapper, possibly searching up or down from the current context. . ◆ get() [7/15]. template<class T > . T* sofa::core::objectmodel::BaseContext::get ; (; SearchDirection ; dir = SearchUp); const. inline . Generic object access template wrapper, possibly searching up or down from the current context. . ◆ get() [8/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; sptr< T > & ; ptr, . const std::string & ; path . ); const. inline . Generic object access template wrapper, given a path from the current context. . ◆ get() [9/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; sptr< T > & ; ptr, . const Tag & ; tag, . SearchDirection ; dir = SearchUp .",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:20215,wrap,wrapper,20215,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,1,['wrap'],['wrapper']
Integrability," the contribution of M, B, and/or K matrices multiplied by the dx vector with the given coefficients. More...;  ; virtual const sofa::linearalgebra::BaseMatrix * getComplianceMatrix (const MechanicalParams *);  ; virtual void addClambda (const MechanicalParams *, MultiVecDerivId, MultiVecDerivId, SReal);  Accumulate the contribution of the C compliant matrix multiplied by the given Lagrange multipliers lambda vector with the given cFactor coefficient. More...;  ;  Public Member Functions inherited from sofa::core::behavior::StateAccessor;  SOFA_ABSTRACT_CLASS (StateAccessor, objectmodel::BaseObject);  ; virtual const MultiLink< StateAccessor, BaseMechanicalState, BaseLink::FLAG_DUPLICATE >::Container & getMechanicalStates () const;  Return a list of mechanical states to which this component is associated. More...;  ; void computeBBox (const core::ExecParams *params, bool onlyVisible=false) override;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObject;  SOFA_CLASS (BaseObject, Base);  ; void setSrc (const std::string &v, std::vector< std::string > *attributeList=nullptr);  Sets a source Object and parses it to collect dependent Data. More...;  ; void setSrc (const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr);  ; Base * findLinkDestClass (const BaseClass *destType, const std::string &path, const BaseLink *link) override;  ; virtual std::string getPathName () const override;  Return the full path name of this object. More...;  ; SReal getTime () const;  Current time. More...;  ; const BaseContext * getContext () const;  ; BaseContext * getContext ();  ; const BaseObject * getMaster () const;  ; BaseObject * getMaster ();  ; const VecSlaves & getSlaves () const;  ; BaseObject * getSlave (const std::string &name) const;  ; virtual void addSlave (BaseObject::SPtr s);  ; virtual void removeSlave (BaseObject::SPtr s);  ; virtual void handleEvent (Event *);  Handle an event. More...;  ; virtual void ha",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_polynomial_rest_shape_springs_force_field.html:9623,depend,dependent,9623,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_polynomial_rest_shape_springs_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_polynomial_rest_shape_springs_force_field.html,1,['depend'],['dependent']
Integrability," the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (T *&ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const std::string &path) const;  G",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:5963,wrap,wrapper,5963,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,4,['wrap'],['wrapper']
Integrability," the system matrix corresponding to . More...;  ; virtual void buildStiffnessMatrix (StiffnessMatrix *matrix);  ; virtual const sofa::linearalgebra::BaseMatrix * getComplianceMatrix (const MechanicalParams *);  ; virtual void addClambda (const MechanicalParams *, MultiVecDerivId, MultiVecDerivId, SReal);  Accumulate the contribution of the C compliant matrix multiplied by the given Lagrange multipliers lambda vector with the given cFactor coefficient. More...;  ;  Public Member Functions inherited from sofa::core::behavior::StateAccessor;  SOFA_ABSTRACT_CLASS (StateAccessor, objectmodel::BaseObject);  ; virtual const MultiLink< StateAccessor, BaseMechanicalState, BaseLink::FLAG_DUPLICATE >::Container & getMechanicalStates () const;  Return a list of mechanical states to which this component is associated. More...;  ; void computeBBox (const core::ExecParams *params, bool onlyVisible=false) override;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObject;  SOFA_CLASS (BaseObject, Base);  ; void setSrc (const std::string &v, std::vector< std::string > *attributeList=nullptr);  Sets a source Object and parses it to collect dependent Data. More...;  ; void setSrc (const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr);  ; Base * findLinkDestClass (const BaseClass *destType, const std::string &path, const BaseLink *link) override;  ; virtual std::string getPathName () const override;  Return the full path name of this object. More...;  ; SReal getTime () const;  Current time. More...;  ; const BaseContext * getContext () const;  ; BaseContext * getContext ();  ; const BaseObject * getMaster () const;  ; BaseObject * getMaster ();  ; const VecSlaves & getSlaves () const;  ; BaseObject * getSlave (const std::string &name) const;  ; virtual void addSlave (BaseObject::SPtr s);  ; virtual void removeSlave (BaseObject::SPtr s);  ; virtual void handleEvent (Event *);  Handle an event. More...;  ; virtual void ha",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_interaction_ellipsoid_force_field.html:8850,depend,dependent,8850,api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_interaction_ellipsoid_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_interaction_ellipsoid_force_field.html,9,['depend'],['dependent']
Integrability," to be created when no VisualManager found on simulation::node. ; More... Inheritance diagram for sofa::simulation::DefaultVisualManagerLoop:. [legend]; Detailed Description; Default VisualManager Loop to be created when no VisualManager found on simulation::node. . Public Attributes; SingleLink< DefaultVisualManagerLoop, simulation::Node, BaseLink::FLAG_STOREPATH > l_node;  Link to the scene's node where the rendering will take place. More...;  ;  Public Attributes inherited from sofa::core::visual::VisualModel; Data< bool > d_enable;  Display the object or not. More...;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  . Public Member Functions;  SOFA_CLASS (DefaultVisualManagerLoop, sofa::core::visual::VisualLoop);  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; void initStep (sofa::core::visual::VisualParams *vparams) override;  Initialize the textures. More...;  ; void updateStep (sofa::core::visual::VisualParams *vparams) override;  Update the Visual Models: tr",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_default_visual_manager_loop.html:1389,message,messages,1389,api/master/sofa/html/classsofa_1_1simulation_1_1_default_visual_manager_loop.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_default_visual_manager_loop.html,1,['message'],['messages']
Integrability," type of DOFs. A Constraint computes constraints applied to one simulated body given its current position and velocity. . Public Attributes; Data< Real > endTime;  The constraint stops acting after the given value. Use a negative value for infinite constraints. More...;  ;  Public Attributes inherited from sofa::core::behavior::BaseConstraintSet; Data< sofa::Index > d_constraintIndex;  Constraint index (first index in the right hand term resolution vector) More...;  ; sofa::core::objectmodel::RenamedData< unsigned int > m_constraintIndex;  ; DeprecatedAndRemoved m_cId {};  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  . Public Member Functions;  SOFA_CLASS2 (SOFA_TEMPLATE(Constraint, DataTypes), BaseConstraint, SOFA_TEMPLATE(SingleStateAccessor, DataTypes));  ; virtual bool isActive () const;  if false, the constraint does nothing More...;  ; void getConstraintViolation (const ConstraintParams *cParams, linearalgebra::BaseVector *v) override;  ; virtual void getConstraintViolation (const ConstraintParams *cParams, linearalgebra::BaseVector *resV",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_constraint.html:1795,message,messages,1795,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_constraint.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_constraint.html,1,['message'],['messages']
Integrability," used by initData() More...;  ;  Protected Member Functions inherited from sofa::core::behavior::SingleStateAccessor< TDataTypes >;  SingleStateAccessor (MechanicalState< TDataTypes > *mm=nullptr);  ;  ~SingleStateAccessor () override=default;  . Additional Inherited Members;  Public Attributes inherited from sofa::core::behavior::BaseForceField; Data< SReal > rayleighStiffness;  Rayleigh Damping stiffness matrix coefficient. More...;  ; objectmodel::lifecycle::DeprecatedData isCompliance;  Considered as compliance, else considered as stiffness (default to false) More...;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  ;  Protected Attributes inherited from sofa::core::behavior::StateAccessor; MultiLink< StateAccessor, BaseMechanicalState, BaseLink::FLAG_DUPLICATE > l_mechanicalStates;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObject; SingleLink< BaseObject, BaseContext, BaseLink::FLAG_DOUBLELINK > l_context;  ; LinkSlaves l_slaves;  ; SingleLink< BaseObject, BaseObject, BaseLink::FLAG_DOUBLELINK > l_master;  ;  Protect",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_force_field.html:16743,message,messages,16743,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_force_field.html,1,['message'],['messages']
Integrability," virtual void endEdit ();  ; void setValue (const T &value);  ; const T & getValue () const;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseData;  BaseData (const BaseInitData &init);  ;  BaseData (const std::string &helpMsg, DataFlags flags=FLAG_DEFAULT);  ;  BaseData (const char *helpMsg, DataFlags flags=FLAG_DEFAULT);  ;  BaseData (const std::string &helpMsg, bool isDisplayed=true, bool isReadOnly=false);  ;  BaseData (const char *helpMsg, bool isDisplayed=true, bool isReadOnly=false);  ;  ~BaseData () override;  Destructor. More...;  ; const void * getValueVoidPtr () const;  Get current value as a void pointer (use getValueTypeInfo to find how to access it) More...;  ; void * beginEditVoidPtr ();  Begin edit current value as a void pointer (use getValueTypeInfo to find how to access it) More...;  ; void endEditVoidPtr ();  Must be called after beginEditVoidPtr(), after you are finished modifying this Data. More...;  ; const std::string & getHelp () const;  Get a help message that describes this Data. More...;  ; void setHelp (const std::string &val);  Set the help message. More...;  ; const std::string & getGroup () const;  Get group. More...;  ; void setGroup (const std::string &val);  Set group. More...;  ; const std::string & getWidget () const;  Get widget. More...;  ; void setWidget (const char *val);  Set widget. More...;  ; virtual std::string getLinkPath () const;  If we use the Data as a link and not as value directly. More...;  ; virtual bool canBeLinked () const;  ; Base * getOwner () const;  Return the Base component owning this Data. More...;  ; void setOwner (Base *o);  Set the owner of this Data. More...;  ; BaseData * getData () const;  This method is needed by DDGNode. More...;  ; const std::string & getName () const;  Return the name of this Data within the Base component. More...;  ; void setName (const std::string &name);  ; bool hasDefaultValue () const;  Return whether the Data has a default value or not. More...;  ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data.html:5444,message,message,5444,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data.html,1,['message'],['message']
Integrability," virtual void printValue (std::ostream &) const =0;  Print the value of this Data to a stream. More...;  ; virtual std::string getValueString () const =0;  Get a string representation of the value held in this Data. More...;  ; virtual std::string getDefaultValueString () const =0;  Get a string representation of the default value held in this Data. More...;  ; virtual std::string getValueTypeString () const =0;  Get the name of the type of the value held in this Data. More...;  ; virtual const sofa::defaulttype::AbstractTypeInfo * getValueTypeInfo () const =0;  ; const void * getValueVoidPtr () const;  Get current value as a void pointer (use getValueTypeInfo to find how to access it) More...;  ; void * beginEditVoidPtr ();  Begin edit current value as a void pointer (use getValueTypeInfo to find how to access it) More...;  ; void endEditVoidPtr ();  Must be called after beginEditVoidPtr(), after you are finished modifying this Data. More...;  ; const std::string & getHelp () const;  Get a help message that describes this Data. More...;  ; void setHelp (const std::string &val);  Set the help message. More...;  ; const std::string & getGroup () const;  Get group. More...;  ; void setGroup (const std::string &val);  Set group. More...;  ; const std::string & getWidget () const;  Get widget. More...;  ; void setWidget (const char *val);  Set widget. More...;  ; virtual std::string getLinkPath () const;  If we use the Data as a link and not as value directly. More...;  ; virtual bool canBeLinked () const;  ; Base * getOwner () const;  Return the Base component owning this Data. More...;  ; void setOwner (Base *o);  Set the owner of this Data. More...;  ; BaseData * getData () const;  This method is needed by DDGNode. More...;  ; const std::string & getName () const;  Return the name of this Data within the Base component. More...;  ; void setName (const std::string &name);  ; bool hasDefaultValue () const;  Return whether the Data has a default value or not. More...;  ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html:2968,message,message,2968,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html,1,['message'],['message']
Integrability," void sofa::component::constraint::projective::LinearMovementProjectiveConstraint< DataTypes >::clearKeyMovements. ◆ draw(). template<class DataTypes > . void sofa::component::constraint::projective::LinearMovementProjectiveConstraint< DataTypes >::draw ; (; const core::visual::VisualParams * ; ). overridevirtual . Render internal data of this object, for debugging purposes. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ init() [1/2]. SOFA_COMPONENT_CONSTRAINT_PROJECTIVE_API void sofa::component::constraint::projective::LinearMovementProjectiveConstraint< defaulttype::Rigid3Types >::init ; (; void ; ). virtual . Initialization method called at graph creation and modification, during top-down traversal. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ init() [2/2]. template<class DataTypes > . void sofa::component::constraint::projective::LinearMovementProjectiveConstraint< DataTypes >::init ; (; void ; ). overridevirtual . – Constraint interface ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ interpolatePosition() [1/2]. template<class DataTypes > . template<class MyCoord > . void sofa::component::constraint::projective::LinearMovementProjectiveConstraint< DataTypes >::interpolatePosition ; (; Real ; cT, . typename std::enable_if< std::is_same< MyCoord, defaulttype::RigidCoord< 3, Real > >::value, VecCoord >::type & ; x . ). protected . ◆ interpolatePosition() [2/2]. template<class DataTypes > . template<class MyCoord > . void sofa::component::constraint::projective::LinearMovementProjectiveConstraint< DataTypes >::interpolatePosition ; (; Real ; cT, . typename std::enable_if<!std::is_same< MyCoord, defaulttype::RigidCoord< 3, Real > >::value, VecCoord >::type & ; x . ). protected . ◆ projectJacobianMatrix(). template<class DataTypes > . void sofa::component::constraint::projective::LinearMovementProjectiveConstraint< DataTypes >::projectJacobianMatrix ; (; const core::MechanicalParams * ; , . DataMatrixDeriv & ; cData . ). overrid",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_linear_movement_projective_constraint.html:28633,interface,interface,28633,api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_linear_movement_projective_constraint.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_linear_movement_projective_constraint.html,1,['interface'],['interface']
Integrability," void sofa::gl::glTranslateNv< 2 > ; (; const float * ; p). inline . ◆ glTranslateT(). template<class Coord > . void sofa::gl::glTranslateT ; (; const Coord & ; c). inline . ◆ glTranslateT< double >(). template<> . void sofa::gl::glTranslateT< double > ; (; const double & ; c). inline . ◆ glTranslateT< float >(). template<> . void sofa::gl::glTranslateT< float > ; (; const float & ; c). inline . ◆ glVertexNv() [1/2]. template<int N> . void sofa::gl::glVertexNv ; (; const double * ; p). inline . ◆ glVertexNv() [2/2]. template<int N> . void sofa::gl::glVertexNv ; (; const float * ; ). inline . ◆ glVertexNv< 1 >() [1/2]. template<> . void sofa::gl::glVertexNv< 1 > ; (; const double * ; p). inline . ◆ glVertexNv< 1 >() [2/2]. template<> . void sofa::gl::glVertexNv< 1 > ; (; const float * ; p). inline . ◆ glVertexNv< 2 >() [1/2]. template<> . void sofa::gl::glVertexNv< 2 > ; (; const double * ; p). inline . ◆ glVertexNv< 2 >() [2/2]. template<> . void sofa::gl::glVertexNv< 2 > ; (; const float * ; p). inline . ◆ glVertexNv< 3 >(). template<> . void sofa::gl::glVertexNv< 3 > ; (; const float * ; p). inline . ◆ glVertexT(). template<class Coord > . void sofa::gl::glVertexT ; (; const Coord & ; c). inline . ◆ glVertexT< double >(). template<> . void sofa::gl::glVertexT< double > ; (; const double & ; c). inline . ◆ glVertexT< float >(). template<> . void sofa::gl::glVertexT< float > ; (; const float & ; c). inline . ◆ init(). SOFA_GL_API void sofa::gl::init ; (; ). Initialize the Sofa.GL library, as well as its dependencies: SofaDefaultType, SofaHelper. . ◆ isCleanedUp(). SOFA_GL_API bool sofa::gl::isCleanedUp ; (; ). Return true if and only if the Sofa.GL library has been cleaned up. . ◆ isInitialized(). SOFA_GL_API bool sofa::gl::isInitialized ; (; ). Return true if and only if the Sofa.GL library has been initialized. . Variable Documentation. ◆ GLSLIsSupported. bool sofa::gl::GLSLIsSupported = false. sofagl; Generated on Mon Nov 11 2024 03:18:55 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gl.html:12907,depend,dependencies,12907,api/master/sofa/html/namespacesofa_1_1gl.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gl.html,1,['depend'],['dependencies']
Integrability," void computeCollisionResponse () override;  Add collision response in the simulation graph. More...;  ;  Public Member Functions inherited from sofa::core::collision::Pipeline;  SOFA_ABSTRACT_CLASS (Pipeline, sofa::core::objectmodel::BaseObject);  ; void computeCollisions ();  ; const BroadPhaseDetection * getBroadPhaseDetection () const;  Broad phase collision detection method accessor. More...;  ; const NarrowPhaseDetection * getNarrowPhaseDetection () const;  Narrow phase collision detection method accessor. More...;  ; bool insertInNode (objectmodel::BaseNode *node) override;  ; bool removeInNode (objectmodel::BaseNode *node) override;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObject;  SOFA_CLASS (BaseObject, Base);  ; virtual void draw (const core::visual::VisualParams *);  Render internal data of this object, for debugging purposes. More...;  ; virtual void computeBBox (const core::ExecParams *, bool=false);  ; void setSrc (const std::string &v, std::vector< std::string > *attributeList=nullptr);  Sets a source Object and parses it to collect dependent Data. More...;  ; void setSrc (const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr);  ; Base * findLinkDestClass (const BaseClass *destType, const std::string &path, const BaseLink *link) override;  ; virtual std::string getPathName () const override;  Return the full path name of this object. More...;  ; SReal getTime () const;  Current time. More...;  ; const BaseContext * getContext () const;  ; BaseContext * getContext ();  ; const BaseObject * getMaster () const;  ; BaseObject * getMaster ();  ; const VecSlaves & getSlaves () const;  ; BaseObject * getSlave (const std::string &name) const;  ; virtual void addSlave (BaseObject::SPtr s);  ; virtual void removeSlave (BaseObject::SPtr s);  ; virtual void handleEvent (Event *);  Handle an event. More...;  ; virtual void handleTopologyChange ();  ; virtual void handleTopologyChange (core",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_collision_pipeline.html:3640,depend,dependent,3640,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_collision_pipeline.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_collision_pipeline.html,1,['depend'],['dependent']
Integrability," |; Protected Attributes |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; List of all members . sofa::component::linearsolver::MatrixLinearSolver< Matrix, Vector, NoThreadManager > Class Template Referenceabstract . #include <MatrixLinearSolver.h>. Inheritance diagram for sofa::component::linearsolver::MatrixLinearSolver< Matrix, Vector, NoThreadManager >:. [legend]. Classes; struct  LinearSystemData;  ; class  TempVectorContainer;  . Public Attributes; Data< bool > d_parallelInverseProduct;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  . Protected Attributes; MatrixLinearSolverInternalData< Vector > internalData;  ; std::unique_ptr< MatrixInvertData > invertData;  ; LinearSystemData linearSystem;  ; SReal currentMFactor;  ; SReal currentBFactor;  ; SReal currentKFactor;  ; SingleLink< MatrixLinearSolver< Matrix, Vector, NoThreadManager >, sofa::component::linearsystem::TypedMatrixLinearSystem< Matrix, Vector >, BaseLink::FLAG_STOREPATH|BaseLink::FLAG_STRONGLINK >",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsolver_1_1_matrix_linear_solver_3_01_matrix_00_01_vector_00_01_no_thread_manager_01_4.html:1242,message,messages,1242,api/master/sofa/html/classsofa_1_1component_1_1linearsolver_1_1_matrix_linear_solver_3_01_matrix_00_01_vector_00_01_no_thread_manager_01_4.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsolver_1_1_matrix_linear_solver_3_01_matrix_00_01_vector_00_01_no_thread_manager_01_4.html,1,['message'],['messages']
Integrability,"  . ). overridevirtual . Project the global Mechanical Matrix to constrained space using offset parameter. ; Reimplemented from sofa::core::behavior::BaseProjectiveConstraintSet. ◆ applyConstraint() [2/3]. template<class DataTypes > . void sofa::component::constraint::projective::LinearMovementProjectiveConstraint< DataTypes >::applyConstraint ; (; const core::MechanicalParams * ; , . linearalgebra::BaseVector * ; , . const sofa::core::behavior::MultiMatrixAccessor * ;  . ). overridevirtual . Project the global Mechanical Vector to constrained space using offset parameter. ; Reimplemented from sofa::core::behavior::BaseProjectiveConstraintSet. ◆ applyConstraint() [3/3]. template<class TDataTypes > . void sofa::component::constraint::projective::LinearMovementProjectiveConstraint< TDataTypes >::applyConstraint ; (; sofa::core::behavior::ZeroDirichletCondition * ; zeroDirichletCondition). overridevirtual . Project the global matrix to constrained space by using the ZeroDirichletCondition interface It allows to define what rows and columns to discard for the projection. ; Reimplemented from sofa::core::behavior::BaseProjectiveConstraintSet. ◆ clearIndices(). template<class DataTypes > . void sofa::component::constraint::projective::LinearMovementProjectiveConstraint< DataTypes >::clearIndices. methods to add/remove some indices, keyTimes, keyMovement . ◆ clearKeyMovements(). template<class DataTypes > . void sofa::component::constraint::projective::LinearMovementProjectiveConstraint< DataTypes >::clearKeyMovements. ◆ draw(). template<class DataTypes > . void sofa::component::constraint::projective::LinearMovementProjectiveConstraint< DataTypes >::draw ; (; const core::visual::VisualParams * ; ). overridevirtual . Render internal data of this object, for debugging purposes. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ init() [1/2]. SOFA_COMPONENT_CONSTRAINT_PROJECTIVE_API void sofa::component::constraint::projective::LinearMovementProjectiveConstraint< de",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_linear_movement_projective_constraint.html:27237,interface,interface,27237,api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_linear_movement_projective_constraint.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_linear_movement_projective_constraint.html,1,['interface'],['interface']
Integrability,"  ; Data< SeqTriangles > inputTriangles;  input triangles More...;  ; Data< SeqQuads > inputQuads;  input quads More...;  ; Data< SeqPositions > position;  outputs More...;  ; Data< SeqTriangles > triangles;  Triangles of closed mesh. More...;  ; Data< SeqQuads > quads;  Quads of closed mesh (=input quads with current method) More...;  ; Data< VecSeqIndex > indices;  Index lists of the closing parts. More...;  ; Data< SeqPositions > closingPosition;  Vertices of the closing parts. More...;  ; Data< SeqTriangles > closingTriangles;  Triangles of the closing parts. More...;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  . Public Member Functions;  SOFA_CLASS (SOFA_TEMPLATE(MeshClosingEngine, DataTypes), Inherited);  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; void reinit () override;  Update method called when variables used in precomputation are modified. More...;  ; void doUpdate () override;  Where you put your engine's impl. More...;  ;  Public Member Functio",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_mesh_closing_engine.html:1927,message,messages,1927,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_mesh_closing_engine.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_mesh_closing_engine.html,1,['message'],['messages']
Integrability,"  ; Data< SetIndex > f_indices;  Indices of the points contained in the ROI. More...;  ; Data< VecCoord > f_pointsInROI;  Points contained in the ROI. More...;  ; Data< type::vector< Real > > f_distanceInROI;  distance between the points contained in the ROI and the closest center. More...;  ; Data< SetIndex > f_indicesOut;  Indices of the points not contained in the ROI. More...;  ; Data< bool > p_drawSphere;  Draw sphere(s) More...;  ; Data< bool > p_drawPoints;  Draw Points. More...;  ; Data< double > _drawSize;  rendering size for box and topological elements More...;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  . Public Member Functions;  SOFA_CLASS (SOFA_TEMPLATE(ProximityROI, DataTypes), core::DataEngine);  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; void reinit () override;  Update method called when variables used in precomputation are modified. More...;  ; void doUpdate () override;  Where you put your engine's impl. More...;  ; void draw (const cor",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_proximity_r_o_i.html:2049,message,messages,2049,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_proximity_r_o_i.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_proximity_r_o_i.html,1,['message'],['messages']
Integrability,"  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, BaseData::DataFlags dataFlags);  Helper method used by initData() More...;  ; template<class T > ; void initData0 (Data< T > *field, typename Data< T >::InitData &res, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  . Attribute details. ◆ d_filename. Data<std::string> sofa::component::sceneutility::FileMessageHandlerComponent::d_filename. Name of the file into which the message will be saved in. . ◆ m_handler. helper::logging::MessageHandler* sofa::component::sceneutility::FileMessageHandlerComponent::m_handler { nullptr }. ◆ m_isValid. bool sofa::component::sceneutility::FileMessageHandlerComponent::m_isValid. Constructor details. ◆ FileMessageHandlerComponent(). sofa::component::sceneutility::FileMessageHandlerComponent::FileMessageHandlerComponent ; (; ). ◆ ~FileMessageHandlerComponent(). sofa::component::sceneutility::FileMessageHandlerComponent::~FileMessageHandlerComponent ; (; ). override . Function details. ◆ isValid(). bool sofa::component::sceneutility::FileMessageHandlerComponent::isValid ; (; ). inline . ◆ parse(). void sofa::component::sceneutility::FileMessageHandlerComponent::parse ; (; core::objectmodel::BaseObjectDescription * ; arg). overridevirtual . Inherited from BaseObject. Parse the given description to assign values to this object's fields and potentially other parameters. ; Reimplemented from sofa::core::objectmodel::Base.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1sceneutility_1_1_file_message_handler_component.html:13453,message,message,13453,api/master/sofa/html/classsofa_1_1component_1_1sceneutility_1_1_file_message_handler_component.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1sceneutility_1_1_file_message_handler_component.html,1,['message'],['message']
Integrability,"  ; void execute (Visitor *p, bool precomputedOrder=false);  Execute a recursive action starting from this node. More...;  ; template<class Act , class Params > ; void execute (const Params *params, bool precomputedOrder=false);  Execute a recursive action starting from this node. More...;  ; template<class Act > ; void execute (sofa::core::visual::VisualParams *vparams, bool precomputedOrder=false);  Execute a recursive action starting from this node. More...;  ; virtual void addChild (BaseNode::SPtr node) final;  ; virtual void removeChild (BaseNode::SPtr node) final;  Remove a child node. More...;  ; virtual void moveChild (BaseNode::SPtr node, BaseNode::SPtr prev_parent) final;  Move a node in this from another node. More...;  ; virtual bool addObject (sofa::core::objectmodel::BaseObject::SPtr obj, sofa::core::objectmodel::TypeOfInsertion insertionLocation=sofa::core::objectmodel::TypeOfInsertion::AtEnd) final;  Add an object and return this. Detect the implemented interfaces and add the object to the corresponding lists. More...;  ; virtual bool removeObject (sofa::core::objectmodel::BaseObject::SPtr obj) final;  Remove an object. More...;  ; virtual void moveObject (sofa::core::objectmodel::BaseObject::SPtr obj) final;  Move an object from another node. More...;  ; sofa::core::objectmodel::BaseObject * getObject (const std::string &name) const;  Find an object given its name. More...;  ; Base * findLinkDestClass (const sofa::core::objectmodel::BaseClass *destType, const std::string &path, const sofa::core::objectmodel::BaseLink *link) override;  ; void * getObject (const sofa::core::objectmodel::ClassInfo &class_info, SearchDirection dir=SearchUp) const override;  ; void getObjects (const sofa::core::objectmodel::ClassInfo &class_info, GetObjectsCallBack &container, SearchDirection dir=SearchUp) const override;  ; template<class Object , class Container > ; void getNodeObjects (Container *list);  List all objects of this node deriving from a given class. More..",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html:7777,interface,interfaces,7777,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,1,['interface'],['interfaces']
Integrability,"  ;  routingmessagehandler;  . Classes; class  RichConsoleStyleMessageFormatter;  The RichConsoleStyleMessageFormatter class. More...;  ; class  SofaComponentInfo;  ; class  ClangMessageHandler;  ; class  ClangStyleMessageFormatter;  ; struct  ComponentInfo;  ; class  ConsoleMessageHandler;  ; class  MainConsoleMessageHandler;  The MainConsoleMessageHandler class contains a singleton to ConsoleMessageHandler and offer static version of ConsoleMessageHandler API. More...;  ; class  DefaultStyleMessageFormatter;  ; class  ExceptionMessageHandler;  ; struct  FileInfo;  ; struct  FileInfoOwningFilename;  To keep a trace (file,line) from where the message have been created. More...;  ; class  FileMessageHandler;  ; class  Message;  ; class  MessageDispatcherImpl;  ; class  MessageDispatcher;  ; class  MessageFormatter;  ; class  MessageHandler;  ; class  SilentMessageHandler;  This class is a MessageHandler that simply do nothing with the message. More...;  ; class  TracyMessageHandler;  Send the message to the Tracy profiler. More...;  ; class  MainTracyMessageHandler;  The MainTracyMessageHandler class contains a singleton to TracyMessageHandler and offer static version of TracyMessageHandler API. More...;  . Typedefs; typedef boost::tokenizer< boost::char_separator< char > > tokenizer;  . Functions; void simpleFormat (size_t jsize, const std::string &text, size_t line_length, std::ostream &wrapped);  simpleFormat a text containing our markdown 'tags' More...;  ; bool notMuted (const sofa::core::objectmodel::Base *t);  ; bool notMuted (sofa::core::objectmodel::Base *t);  ; ComponentInfo::SPtr getComponentInfo (const sofa::core::objectmodel::Base *t);  This construct a new ComponentInfo object from a Base object. More...;  ; std::ostream & operator<< (std::ostream &out, const ComponentInfo &nfo);  ; std::ostream & operator<< (std::ostream &out, const ComponentInfo *nfo);  ; const ComponentInfo::SPtr getComponentInfo (const std::string &s);  This function is used in the m",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html:1404,message,message,1404,api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html,1,['message'],['message']
Integrability,"  Helper method used by initData() More...;  ; template<class T > ; void initData0 (Data< T > *field, typename Data< T >::InitData &res, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  . Friends; template<class DataTypes > ; class EdgeSetGeometryAlgorithms;  . Additional Inherited Members;  Public Attributes inherited from sofa::component::topology::container::dynamic::PointSetTopologyModifier; Data< bool > d_propagateToDOF;  Propagate changes to Mechanical object DOFs. More...;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  ;  Protected Attributes inherited from sofa::core::topology::TopologyModifier; TopologyContainer * m_topologyContainer;  Contains the actual topology data and give access to it (nature of these data heavily depends on the kind of topology). More...;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObject; SingleLink< BaseObject, BaseContext, BaseLink::FLAG_DOUBLELINK > l_context;  ; LinkSlaves l_slaves;  ; Singl",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_edge_set_topology_modifier.html:22161,message,messages,22161,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_edge_set_topology_modifier.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_edge_set_topology_modifier.html,1,['message'],['messages']
Integrability,"  Helper method used by initData() More...;  ; template<class T > ; void initData0 (Data< T > *field, typename Data< T >::InitData &res, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  . Friends; template<class DataTypes > ; class QuadSetGeometryAlgorithms;  . Additional Inherited Members;  Public Attributes inherited from sofa::component::topology::container::dynamic::PointSetTopologyModifier; Data< bool > d_propagateToDOF;  Propagate changes to Mechanical object DOFs. More...;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  ;  Protected Attributes inherited from sofa::core::topology::TopologyModifier; TopologyContainer * m_topologyContainer;  Contains the actual topology data and give access to it (nature of these data heavily depends on the kind of topology). More...;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObject; SingleLink< BaseObject, BaseContext, BaseLink::FLAG_DOUBLELINK > l_context;  ; LinkSlaves l_slaves;  ; Singl",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_quad_set_topology_modifier.html:23904,message,messages,23904,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_quad_set_topology_modifier.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_quad_set_topology_modifier.html,1,['message'],['messages']
Integrability,"  LinkTraitsDestPtr;  ; class  LinkTraitsDestPtr< TDestType, false >;  ; class  LinkTraitsDestPtr< TDestType, true >;  ; class  LinkTraitsValueType;  ; class  LinkTraitsValueType< TDestType, TDestPtr, strongLink, false >;  ; class  LinkTraitsValueType< TDestType, TDestPtr, strongLink, true >;  ; class  LinkTraitsContainer;  ; class  SinglePtr;  Class to hold 0-or-1 pointer. The interface is similar to std::vector (size/[]/begin/end), plus an automatic conversion to one pointer. More...;  ; class  LinkTraitsContainer< TDestType, TDestPtr, TValueType, false >;  ; class  LinkTraitsContainer< TDestType, TDestPtr, TValueType, true >;  ; class  TLink;  Container of all links in the scenegraph, from a given type of object (Owner) to another (Dest) More...;  ; class  MultiLink;  Container of vectors of links in the scenegraph, from a given type of object (Owner) to another (Dest) More...;  ; class  MouseEvent;  MouseEvent Class. More...;  ; class  RenamedData;  ; class  ScriptEvent;  Generic Event class to send a message through the simulation graph. More...;  ; class  New;  new operator for classes with smart pointers (such as all components deriving from Base) More...;  ; class  SPtr_dynamic_cast;  dynamic_cast operator for SPtr More...;  ; class  SPtr_static_cast;  static_cast operator for SPtr More...;  ; class  SPtr_const_cast;  const_cast operator for SPtr More...;  ; class  Tag;  A Tag is a string (internally converted to an integer), attached to objects in order to define subsets to process by specific visitors. More...;  ; class  TagSet;  ; class  vectorData;  ; class  VectorLinks;  . Typedefs; using AspectRef = sptr< Aspect >;  . Enumerations; enum class  ComponentState { ;   Undefined; , Loading; , Valid; , Dirty; , ;   Busy; , Invalid. };  ; enum class  PathType { FILE; , DIRECTORY; , BOTH; };  ; enum class  TypeOfInsertion { AtEnd; , AtBegin; };  Enum proposing two alternatives on where to add a new object in a node. More...;  ; enum class  DataEngineDataType {",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1objectmodel.html:5068,message,message,5068,api/master/sofa/html/namespacesofa_1_1core_1_1objectmodel.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1objectmodel.html,1,['message'],['message']
Integrability,"  Vector of factors adapting the application of the constraint per pair of points (0 -> the constraint is released. 1 -> the constraint is fully constrained) More...;  ; type::vector< bool > activeFlags;  ; type::vector< bool > constraintReleased;  ; type::vector< Real > lastDist;  ; type::vector< type::Quat< SReal > > restRotations;  ;  Public Attributes inherited from sofa::core::behavior::PairInteractionProjectiveConstraintSet< DataTypes >; Data< SReal > endTime;  The constraint stops acting after the given value. Use a negative value for infinite constraints. More...;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  . Public Member Functions;  SOFA_CLASS (SOFA_TEMPLATE(AttachProjectiveConstraint, DataTypes), SOFA_TEMPLATE(sofa::core::behavior::PairInteractionProjectiveConstraintSet, DataTypes));  ; void init () override;  Inherited from Base. More...;  ; void reinit () override;  Update method called when variables used in precomputation are modified. More...;  ; void draw (const core::visual::VisualParams *vparams) override;  Render internal ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_attach_projective_constraint.html:3514,message,messages,3514,api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_attach_projective_constraint.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_attach_projective_constraint.html,1,['message'],['messages']
Integrability,"  ellipsoid radius More...;  ; Data< Real > d_stiffness;  force stiffness (positive to repulse outward, negative inward) More...;  ; Data< Real > d_damping;  force damping More...;  ; Data< sofa::type::RGBAColor > d_color;  ellipsoid color. (default=0,0.5,1.0,1.0) More...;  ;  Public Attributes inherited from sofa::core::behavior::BaseForceField; Data< SReal > rayleighStiffness;  Rayleigh Damping stiffness matrix coefficient. More...;  ; objectmodel::lifecycle::DeprecatedData isCompliance;  Considered as compliance, else considered as stiffness (default to false) More...;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  . Static Public Attributes; static constexpr auto N = DataTypes::spatial_dimensions;  . Protected Attributes; Data< sofa::type::vector< Contact > > d_contacts;  Vector of contacts. More...;  ; EllipsoidForceFieldInternalData< DataTypes > data;  ;  Protected Attributes inherited from sofa::core::behavior::StateAccessor; MultiLink< StateAccessor, BaseMechanicalState, BaseLink::FLAG_DUPLICATE > l_mechanicalStates;  ;  Protected Attrib",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_ellipsoid_force_field.html:1712,message,messages,1712,api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_ellipsoid_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_ellipsoid_force_field.html,1,['message'],['messages']
Integrability,"  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  . Public Member Functions;  SOFA_CLASS (FileMessageHandlerComponent, core::objectmodel::BaseObject);  ;  FileMessageHandlerComponent ();  ;  ~FileMessageHandlerComponent () override;  ; void parse (core::objectmodel::BaseObjectDescription *arg) override;  ; bool isValid ();  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObject;  SOFA_CLASS (BaseObject, Base);  ; virtual void draw (const core::visual::VisualParams *);  Render internal data of this object, for debugging purposes. More...;  ; virtual void computeBBox (const core::ExecParams *, bool=false);  ; void setSrc (const std::string &v, std::vector< std::string > *attributeList=nullptr);  Sets a source Object and parses it to collect dependent Data. More...;  ; void setSrc (const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr);  ; Base * findLinkDestClass (const BaseClass *destType, const std::string &path, const BaseLink *link) override;  ; virtual std::string getPathName () const override;  Return the full path name of this object. More...;  ; virtual bool insertInNode (BaseNode *);  ; virtual bool removeInNode (BaseNode *);  ; SReal getTime () const;  Current time. More...;  ; const BaseContext * getContext () const;  ; BaseContext * getContext ();  ; const BaseObject * getMaster () const;  ; BaseObject * getMaster ();  ; const VecSlaves & getSlaves () const;  ; BaseObject * getSlave (const std::string &name) const;  ; virtual void addSlave (BaseObject::SPtr s);  ; virtual void removeSlave (BaseObject::SPtr s);  ; virtual void handleEvent (Event *);  Handle an event. More..",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1sceneutility_1_1_file_message_handler_component.html:2531,depend,dependent,2531,api/master/sofa/html/classsofa_1_1component_1_1sceneutility_1_1_file_message_handler_component.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1sceneutility_1_1_file_message_handler_component.html,1,['depend'],['dependent']
Integrability," – Italy. /prizes-for-defrost-success-in-soft-robotics; ; SOFA – Prizes for Defrost: success in soft-robotics. /publication-about-cardiac-electrophysiology-in-media; ; SOFA – Publication about cardiac electrophysiology in MedIA. /registration-to-the-sofa-week-2019-is-open; ; SOFA – Registration to the SOFA Week 2019 is open!. /research-is-going-forward-with-sofa; ; SOFA – Research is going forward with SOFA!. /share-your-publications-with-sofa; ; SOFA – Share your publications with SOFA!. /sofa-at-cmbbe-2023; ; SOFA – SOFA at CMBBE 2023. /sofa-at-eit-health-matchmaking-in-uppsala-sweden; ; SOFA – SOFA at EIT-Health matchmaking in Uppsala, Sweden. /sofa-at-fosdem-2017-in-brussels; ; SOFA – SOFA at FOSDEM 2017 in Brussels. /sofa-at-station-f; ; SOFA – SOFA at STATION F. /sofa-at-vivatech-2023; ; SOFA – SOFA at Vivatech 2023!. /sofa-at-vph-2022; ; SOFA – SOFA at VPH 2022. /sofa-at-vr-meetings-2016-in-lille; ; SOFA – SOFA at VR Meetings 2016 in Lille. /sofa-being-integrated-in-unity3d; ; SOFA – SOFA being integrated in Unity3D. /sofa-day-2016-in-strasbourg; ; SOFA – SOFA Day 2016 in Strasbourg. /sofa-gets-a-brand-new-design; . /feed; . 	Comments on: SOFA gets a brand-new design !	. SOFA – SOFA gets a brand-new design !. /sofa-in-robotics-2021-6-new-papers; ; SOFA – SOFA in Robotics 2021: 6 new papers. /sofa-in-the-jfr-2015; ; SOFA – SOFA in the JFR 2015. /sofa-is-on-twitter; ; SOFA – SOFA is on twitter !. /sofa-partner-of-medfit-2019; ; SOFA – SOFA partner of MedFIT 2019. /sofa-presented-at-medteq-2018-in-montreal; ; SOFA – SOFA presented at MedTeq 2018 in Montreal. /sofa-presented-in-webinar-radiologie-numerique-french; ; SOFA – SOFA presented in webinar “Radiologie Numérique” [French]. /sofa-soon-on-github; ; SOFA – SOFA soon on GitHub. /sofa-stc5-coming-soon; ; SOFA – SOFA STC#5 in Strasbourg. /sofa-technical-committee-3-upcoming-raise-your-expectations; ; SOFA – SOFA Technical Committee #3 upcoming: raise your expectations!. /sofa-technologies-exhibited-amd-learning",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/index-wcopy.html:7421,integrat,integrated-in-,7421,index-wcopy.html,https://www.sofa-framework.org,https://www.sofa-framework.org/index-wcopy.html,2,['integrat'],"['integrated', 'integrated-in-']"
Integrability," ◆ tokenizer. typedef boost::tokenizer<boost::char_separator<char> > sofa::helper::logging::tokenizer. Function Documentation. ◆ getComponentInfo() [1/3]. const ComponentInfo::SPtr sofa::helper::logging::getComponentInfo ; (; const ComponentInfo::SPtr & ; s). inline . This function is used in the msg_* macro to handle emitting case based on string. . ◆ getComponentInfo() [2/3]. ComponentInfo::SPtr sofa::helper::logging::getComponentInfo ; (; const sofa::core::objectmodel::Base * ; t). inline . This construct a new ComponentInfo object from a Base object. . ◆ getComponentInfo() [3/3]. const ComponentInfo::SPtr sofa::helper::logging::getComponentInfo ; (; const std::string & ; s). inline . This function is used in the msg_* macro to handle emitting case based on string. . ◆ getDefaultMessageHandlers(). std::vector<MessageHandler*> sofa::helper::logging::getDefaultMessageHandlers ; (; ). Threading issues... a mutex is serializing the access to the message API. Memory management: object are passed to the message info. some of them are duplicated other get a weak reference . ◆ getMainInstance(). MessageDispatcherImpl* sofa::helper::logging::getMainInstance ; (; ). ◆ notMuted() [1/4]. bool sofa::helper::logging::notMuted ; (; const ComponentInfo::SPtr & ; ). inline . ◆ notMuted() [2/4]. bool sofa::helper::logging::notMuted ; (; const sofa::core::objectmodel::Base * ; t). inline . ◆ notMuted() [3/4]. bool sofa::helper::logging::notMuted ; (; const std::string & ; ). inline . This function is used in the msg_* macro to handle string based on string. . ◆ notMuted() [4/4]. bool sofa::helper::logging::notMuted ; (; sofa::core::objectmodel::Base * ; t). inline . ◆ operator<<() [1/3]. std::ostream& sofa::helper::logging::operator<< ; (; std::ostream & ; out, . const ComponentInfo & ; nfo . ). ◆ operator<<() [2/3]. std::ostream& sofa::helper::logging::operator<< ; (; std::ostream & ; out, . const ComponentInfo * ; nfo . ). ◆ operator<<() [3/3]. SOFA_HELPER_API std::ostream & sofa",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html:4181,message,message,4181,api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html,1,['message'],['message']
Integrability,"""). More...;  . Static Public Member Functions; static Handle load (const std::string &filename);  Load a dynamic library. More...;  ; static int unload (Handle handle);  Unload a dynamic library loaded with load(). More...;  ; static void * getSymbolAddress (Handle handle, const std::string &symbol);  Get the address of a symbol. More...;  ; static std::string getLastError ();  Get the message for the most recent error that occurred from load(), unload() or getSymbolAddress(). More...;  . Attribute details. ◆ extension. const std::string sofa::helper::system::DynamicLibrary::extension = ""so"". static . System-specific file extension for a dynamic library (e.g. ""so""). . ◆ prefix. const std::string sofa::helper::system::DynamicLibrary::prefix = ""lib"". static . System-specific file prefix for a dynamic library (e.g. ""lib""). . Function details. ◆ getLastError(). std::string sofa::helper::system::DynamicLibrary::getLastError ; (; ). static . Get the message for the most recent error that occurred from load(), unload() or getSymbolAddress(). ; ReturnsThe error message, or an empty string if no errors have occurred since initialization or since it was last called. . ◆ getSymbolAddress(). void * sofa::helper::system::DynamicLibrary::getSymbolAddress ; (; Handle ; handle, . const std::string & ; symbol . ). static . Get the address of a symbol. ; Parameters. handleThe handle of a library. ; symbolThe symbol to look for. . ReturnsA pointer to the symbol if it was found, or nullptr on error. . ◆ load(). DynamicLibrary::Handle sofa::helper::system::DynamicLibrary::load ; (; const std::string & ; filename). static . Load a dynamic library. ; Parameters. filenameThe library to load. . ReturnsA handle, that must be unloaded with unload(). Use Handle::isValid() to know if the loading was successful. . ◆ unload(). int sofa::helper::system::DynamicLibrary::unload ; (; Handle ; handle). static . Unload a dynamic library loaded with load(). ; Parameters. handleThe handle of a library. .",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_dynamic_library.html:1774,message,message,1774,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_dynamic_library.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_dynamic_library.html,1,['message'],['message']
Integrability,"&typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ correctionId. sofa::core::ConstMultiVecDerivId sofa::simulation::mechanicalvisitor::MechanicalIntegrateConstraintsVisitor::correctionId. ◆ cparams. const sofa::core::ConstraintParams* sofa::simulation::mechanicalvisitor::MechanicalIntegrateConstraintsVisitor::cparams. ◆ dxId. sofa::core::MultiVecDerivId sofa::simulation::mechanicalvisitor::MechanicalIntegrateConstraintsVisitor::dxId. ◆ offset. int sofa::simulation::mechanicalvisitor::MechanicalIntegrateConstraintsVisitor::offset. ◆ positionFactor. const double sofa::simulation::mechanicalvisitor::MechanicalIntegrateConstraintsVisitor::positionFactor. use the OdeSolver to get the position integration factor . ◆ velocityFactor. const double sofa::simulation::mechanicalvisitor::MechanicalIntegrateConstraintsVisitor::velocityFactor. use the OdeSolver to get the position integration factor . ◆ vId. sofa::core::MultiVecDerivId sofa::simulation::mechanicalvisitor::MechanicalIntegrateConstraintsVisitor::vId. ◆ xId. sofa::core::MultiVecCoordId sofa::simulation::mechanicalvisitor::MechanicalIntegrateConstraintsVisitor::xId. Constructor details. ◆ MechanicalIntegrateConstraintsVisitor(). sofa::simulation::mechanicalvisitor::MechanicalIntegrateConstraintsVisitor::MechanicalIntegrateConstraintsVisitor ; (; const core::ConstraintParams * ; cparams, . double ; pf, . double ; vf, . sofa::core::ConstMultiVecDerivId ; correction, . sofa::core::MultiVecDerivId ; dx = sofa::core::MultiVecDerivId(sofa::core::VecDerivId::dx()), . sofa::core::MultiVecCoordId ; x = sofa::core::MultiVecCoordId(sofa::core::VecCoordId::position()), . sofa::core::MultiVecDerivId ; v = sofa::core::MultiVe",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integrate_constraints_visitor.html:13275,integrat,integration,13275,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integrate_constraints_visitor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integrate_constraints_visitor.html,1,['integrat'],['integration']
Integrability,"&x, const DataVecDeriv &v) override;  ;  Public Member Functions inherited from sofa::component::solidmechanics::fem::elastic::HexahedronFEMForceFieldAndMass< DataTypes >;  SOFA_CLASS2 (SOFA_TEMPLATE(HexahedronFEMForceFieldAndMass, DataTypes), SOFA_TEMPLATE(sofa::core::behavior::Mass, DataTypes), SOFA_TEMPLATE(HexahedronFEMForceField, DataTypes));  ; virtual void computeElementMasses ();  compute the mass matrices More...;  ; virtual void computeElementMass (ElementMass &Mass, const type::fixed_array< Coord, 8 > &nodes, const Index elementIndice, SReal stiffnessFactor=1.0);  compute the mass matrix of an element More...;  ; Real integrateMass (int signx, int signy, int signz, Real l0, Real l1, Real l2);  ; void addMToMatrix (sofa::linearalgebra::BaseMatrix *mat, SReal mFact, unsigned int &offset) override;  ; bool isDiagonal () const override;  ; void addKToMatrix (sofa::linearalgebra::BaseMatrix *matrix, SReal kFact, unsigned int &offset) override;  ; void buildStiffnessMatrix (core::behavior::StiffnessMatrix *) override;  ; void buildMassMatrix (sofa::core::behavior::MassMatrixAccumulator *matrices) override;  ; void accFromF (const core::MechanicalParams *mparams, DataVecDeriv &a, const DataVecDeriv &f) override;  ; SReal getKineticEnergy (const core::MechanicalParams *, const DataVecDeriv &) const override;  < vMv/2 using dof->getV() override More...;  ; SReal getPotentialEnergy (const core::MechanicalParams *, const DataVecCoord &) const override;  ; SReal getPotentialEnergy (const core::MechanicalParams *) const override;  Mgx. More...;  ; void addDForce (const core::MechanicalParams *mparams, DataVecDeriv &df, const DataVecDeriv &dx) override;  ; SReal getElementMass (Index index) const override;  Get the mass relative to the DOF at index. More...;  ; virtual void initTextures ();  ; virtual void update ();  ; void setDensity (Real d);  ; Real getDensity ();  ; void addKToMatrix (sofa::linearalgebra::BaseMatrix *matrix, SReal kFact, unsigned int &offset) overr",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1nonuniform_1_1_hexahedron_composite_f_e_m_force_field_and_mass.html:9030,integrat,integrateMass,9030,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1nonuniform_1_1_hexahedron_composite_f_e_m_force_field_and_mass.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1nonuniform_1_1_hexahedron_composite_f_e_m_force_field_and_mass.html,1,['integrat'],['integrateMass']
Integrability,"&x, const DataVecDeriv &v) override;  ;  Public Member Functions inherited from sofa::component::solidmechanics::fem::elastic::HexahedronFEMForceFieldAndMass< DataTypes >;  SOFA_CLASS2 (SOFA_TEMPLATE(HexahedronFEMForceFieldAndMass, DataTypes), SOFA_TEMPLATE(sofa::core::behavior::Mass, DataTypes), SOFA_TEMPLATE(HexahedronFEMForceField, DataTypes));  ; virtual void computeElementMasses ();  compute the mass matrices More...;  ; virtual void computeElementMass (ElementMass &Mass, const type::fixed_array< Coord, 8 > &nodes, const Index elementIndice, SReal stiffnessFactor=1.0);  compute the mass matrix of an element More...;  ; Real integrateMass (int signx, int signy, int signz, Real l0, Real l1, Real l2);  ; void addMToMatrix (sofa::linearalgebra::BaseMatrix *mat, SReal mFact, unsigned int &offset) override;  ; bool isDiagonal () const override;  ; void addKToMatrix (sofa::linearalgebra::BaseMatrix *matrix, SReal kFact, unsigned int &offset) override;  ; void buildStiffnessMatrix (core::behavior::StiffnessMatrix *) override;  ; void buildMassMatrix (sofa::core::behavior::MassMatrixAccumulator *matrices) override;  ; void accFromF (const core::MechanicalParams *mparams, DataVecDeriv &a, const DataVecDeriv &f) override;  ; SReal getKineticEnergy (const core::MechanicalParams *, const DataVecDeriv &) const override;  < vMv/2 using dof->getV() override More...;  ; SReal getPotentialEnergy (const core::MechanicalParams *, const DataVecCoord &) const override;  ; SReal getPotentialEnergy (const core::MechanicalParams *) const override;  Mgx. More...;  ; void addDForce (const core::MechanicalParams *mparams, DataVecDeriv &df, const DataVecDeriv &dx) override;  ; SReal getElementMass (Index index) const override;  Get the mass relative to the DOF at index. More...;  ; void draw (const core::visual::VisualParams *vparams) override;  Render internal data of this object, for debugging purposes. More...;  ; virtual void initTextures ();  ; virtual void update ();  ; void setDensit",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1nonuniform_1_1_non_uniform_hexahedron_f_e_m_force_field_and_mass.html:6582,integrat,integrateMass,6582,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1nonuniform_1_1_non_uniform_hexahedron_f_e_m_force_field_and_mass.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1nonuniform_1_1_non_uniform_hexahedron_f_e_m_force_field_and_mass.html,1,['integrat'],['integrateMass']
Integrability,"() ) { ... } . ◆ getTreeObjects() [2/4]. template<class Container > . Container& sofa::simulation::Node::getTreeObjects ; (; Container & ; result). inline . List all objects of this node and sub-nodes deriving from a given class. . ◆ getTreeObjects() [3/4]. template<class Object , class Container > . void sofa::simulation::Node::getTreeObjects ; (; Container * ; list). inline . List all objects of this node and sub-nodes deriving from a given class. . ◆ getTreeObjects() [4/4]. template<class Container > . Container* sofa::simulation::Node::getTreeObjects ; (; Container * ; result). inline . List all objects of this node and sub-nodes deriving from a given class. . ◆ getVisualLoop(). core::visual::VisualLoop * sofa::simulation::Node::getVisualLoop ; (; ); const. overridevirtual . Reimplemented from sofa::core::objectmodel::BaseNode. ◆ init(). void sofa::simulation::Node::init ; (; const sofa::core::ExecParams * ; params). Initialize the components. ; Initialize the components of this node and all the nodes which depend on it. . ◆ initialize(). void sofa::simulation::Node::initialize ; (; ). virtual . Must be called after each graph modification. Do not call it directly, apply an InitVisitor instead. . ◆ initVisualContext(). virtual void sofa::simulation::Node::initVisualContext ; (; ). inlinevirtual . Called during initialization to correctly propagate the visual context to the children. ; Reimplemented in sofa::simulation::graph::DAGNode. ◆ isInitialized(). bool sofa::simulation::Node::isInitialized ; (; ); const. inline . ◆ moveChild() [1/2]. virtual void sofa::simulation::Node::moveChild ; (; BaseNode::SPtr ; node). overridepure virtual . Move a node in this from another node. ; Implements sofa::core::objectmodel::BaseNode.; Implemented in sofa::simulation::graph::DAGNode. ◆ moveChild() [2/2]. void sofa::simulation::Node::moveChild ; (; BaseNode::SPtr ; node, . BaseNode::SPtr ; prev_parent . ). finalvirtual . Move a node in this from another node. ; Move a node fro",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:47110,depend,depend,47110,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,1,['depend'],['depend']
Integrability,"() [3/3]. template<class DataTypes > . void sofa::component::constraint::projective::FixedPlaneProjectiveConstraint< DataTypes >::applyConstraint ; (; sofa::core::behavior::ZeroDirichletCondition * ; zeroDirichletCondition). overridevirtual . Project the global matrix to constrained space by using the ZeroDirichletCondition interface It allows to define what rows and columns to discard for the projection. ; Reimplemented from sofa::core::behavior::BaseProjectiveConstraintSet. ◆ draw(). template<class DataTypes > . void sofa::component::constraint::projective::FixedPlaneProjectiveConstraint< DataTypes >::draw ; (; const VisualParams * ; ). overridevirtual . Render internal data of this object, for debugging purposes. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ init(). template<class DataTypes > . void sofa::component::constraint::projective::FixedPlaneProjectiveConstraint< DataTypes >::init ; (; void ; ). overridevirtual . inherited from the BaseObject interface ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ isPointInPlane(). template<class DataTypes > . bool sofa::component::constraint::projective::FixedPlaneProjectiveConstraint< DataTypes >::isPointInPlane ; (; const Coord & ; p); const. protected . ◆ projectJacobianMatrix(). template<class DataTypes > . void sofa::component::constraint::projective::FixedPlaneProjectiveConstraint< DataTypes >::projectJacobianMatrix ; (; const MechanicalParams * ; , . DataMatrixDeriv & ; cData . ). overridevirtual . Project c to constrained space (c models a constraint).; This method must be implemented by the component to handle Lagrange Multiplier based constraint ; Implements sofa::core::behavior::ProjectiveConstraintSet< DataTypes >. ◆ projectMatrix(). template<class DataTypes > . void sofa::component::constraint::projective::FixedPlaneProjectiveConstraint< DataTypes >::projectMatrix ; (; sofa::linearalgebra::BaseMatrix * ; M, . unsigned ; offset . ). overridevirtual . Implement projectMatrix for ass",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_fixed_plane_projective_constraint.html:23815,interface,interface,23815,api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_fixed_plane_projective_constraint.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_fixed_plane_projective_constraint.html,1,['interface'],['interface']
Integrability,"();  ; void closeEvent (QCloseEvent *) override;  ; void updateTables ();  ; virtual void updateValues ();  . Protected Slots; void clearMessages ();  . Attribute details. ◆ basenode. core::objectmodel::Base* sofa::gui::qt::ModifyObject::basenode. protected . ◆ buttonUpdate. QPushButton* sofa::gui::qt::ModifyObject::buttonUpdate. protected . ◆ data_. core::objectmodel::BaseData* sofa::gui::qt::ModifyObject::data_. protected . ◆ dialogFlags_. const ModifyObjectFlags sofa::gui::qt::ModifyObject::dialogFlags_. protected . ◆ dialogTab. QTabWidget* sofa::gui::qt::ModifyObject::dialogTab. protected . ◆ Id_. void* sofa::gui::qt::ModifyObject::Id_. protected . ◆ item_. QTreeWidgetItem* sofa::gui::qt::ModifyObject::item_. protected . ◆ m_numMessages. int sofa::gui::qt::ModifyObject::m_numMessages. protected . ◆ m_tabs. std::vector< QTabulationModifyObject* > sofa::gui::qt::ModifyObject::m_tabs. protected . ◆ messageEdit. QTextBrowser* sofa::gui::qt::ModifyObject::messageEdit. protected . ◆ messageTab. QWidget* sofa::gui::qt::ModifyObject::messageTab. protected . Constructor details. ◆ ModifyObject(). sofa::gui::qt::ModifyObject::ModifyObject ; (; void * ; Id, . QTreeWidgetItem * ; item_clicked, . QWidget * ; parent, . const ModifyObjectFlags & ; dialogFlags, . const char * ; name = nullptr, . bool ; modal = false, . Qt::WindowFlags ; f = Qt::WindowType::Widget . ). explicit . ◆ ~ModifyObject(). sofa::gui::qt::ModifyObject::~ModifyObject ; (; ). inlineoverride . Function details. ◆ accept. void sofa::gui::qt::ModifyObject::accept ; (; ). overrideslot . ◆ beginDataModification. void sofa::gui::qt::ModifyObject::beginDataModification ; (; sofa::core::objectmodel::BaseData * ; data). signal . ◆ beginObjectModification. void sofa::gui::qt::ModifyObject::beginObjectModification ; (; sofa::core::objectmodel::Base * ; object). signal . ◆ clearMessages. void sofa::gui::qt::ModifyObject::clearMessages ; (; ). protectedslot . ◆ closeEvent. void sofa::gui::qt::ModifyObject::closeEvent ;",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_modify_object.html:3124,message,messageTab,3124,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_modify_object.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_modify_object.html,1,['message'],['messageTab']
Integrability,"(StartNavigationButtonSetting, MouseButtonSetting);  ; std::string getOperationType () override;  ;  Public Member Functions inherited from sofa::component::setting::MouseButtonSetting;  SOFA_CLASS (MouseButtonSetting, core::objectmodel::ConfigurationSetting);  ;  Public Member Functions inherited from sofa::core::objectmodel::ConfigurationSetting;  SOFA_CLASS (ConfigurationSetting, BaseObject);  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; bool insertInNode (objectmodel::BaseNode *node) override;  ; bool removeInNode (objectmodel::BaseNode *node) override;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObject;  SOFA_CLASS (BaseObject, Base);  ; virtual void draw (const core::visual::VisualParams *);  Render internal data of this object, for debugging purposes. More...;  ; virtual void computeBBox (const core::ExecParams *, bool=false);  ; void setSrc (const std::string &v, std::vector< std::string > *attributeList=nullptr);  Sets a source Object and parses it to collect dependent Data. More...;  ; void setSrc (const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr);  ; Base * findLinkDestClass (const BaseClass *destType, const std::string &path, const BaseLink *link) override;  ; virtual std::string getPathName () const override;  Return the full path name of this object. More...;  ; SReal getTime () const;  Current time. More...;  ; const BaseContext * getContext () const;  ; BaseContext * getContext ();  ; const BaseObject * getMaster () const;  ; BaseObject * getMaster ();  ; const VecSlaves & getSlaves () const;  ; BaseObject * getSlave (const std::string &name) const;  ; virtual void addSlave (BaseObject::SPtr s);  ; virtual void removeSlave (BaseObject::SPtr s);  ; virtual void handleEvent (Event *);  Handle an event. More...;  ; virtual void handleTopologyChange ();  ; virtual void handleTopologyChange (core",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1component_1_1_start_navigation_button_setting.html:1568,depend,dependent,1568,api/master/sofa/html/classsofa_1_1gui_1_1component_1_1_start_navigation_button_setting.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1component_1_1_start_navigation_button_setting.html,1,['depend'],['dependent']
Integrability,") . ◆ Vec3dTypes. typedef StdVectorTypes< type::Vec3d, type::Vec3d, double > sofa::defaulttype::Vec3dTypes. 3D DOFs, double precision . ◆ Vec3fTypes. typedef StdVectorTypes< type::Vec3f, type::Vec3f, float > sofa::defaulttype::Vec3fTypes. 3f DOFs, single precision . ◆ Vec3Types. typedef StdVectorTypes<type::Vec3, type::Vec3, type::Vec3::value_type> sofa::defaulttype::Vec3Types. 3D DOFs, double precision (default) . ◆ Vec6dTypes. typedef StdVectorTypes< type::Vec6d, type::Vec6d, double > sofa::defaulttype::Vec6dTypes. 6D DOFs, double precision . ◆ Vec6fTypes. typedef StdVectorTypes< type::Vec6f, type::Vec6f, float > sofa::defaulttype::Vec6fTypes. 6f DOFs, single precision . ◆ Vec6Types. typedef StdVectorTypes<type::Vec6, type::Vec6, type::Vec6::value_type> sofa::defaulttype::Vec6Types. 6D DOFs, double precision (default) . ◆ VirtualTypeInfo. template<class T > . using sofa::defaulttype::VirtualTypeInfo = typedef DataTypeInfoDynamicWrapper<DataTypeInfo<T> >. We make an alias to wrap around the old name to the new one. . Enumeration Type Documentation. ◆ TypeInfoType. enum sofa::defaulttype::TypeInfoType. strong . Encodes the different kind of type infos stored in the TypeInfoRegistry. ; In the TyepeInfoRegistry we can store different type of type info depending on how much the developer want to provide precise information (or not) on its data type.; MISSING indicates that there was absolutely no valid information to trust in an AbstractTypeInfo object.; NAMEONLY indicates that only the getName() and getTypeName() function are returning valid information.; COMPLETE indicates that all the function like size/getSize/etc... are implemented. . EnumeratorMISSING ; NAMEONLY ; COMPLETE . Function Documentation. ◆ addMultTransposeEigen(). template<typename LhsDeriv , typename RhsDeriv , typename Real > . void sofa::defaulttype::addMultTransposeEigen ; (; MapMapSparseMatrix< LhsDeriv > & ; lhs, . const Eigen::SparseMatrix< Real, Eigen::RowMajor > & ; jacobian, . const MapMapSpar",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1defaulttype.html:16800,wrap,wrap,16800,api/master/sofa/html/namespacesofa_1_1defaulttype.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1defaulttype.html,1,['wrap'],['wrap']
Integrability,") ; Reimplemented in sofa::simulation::graph::DAGNode, and sofa::simulation::Node. ◆ getNameHelper(). ComponentNameHelper& sofa::core::objectmodel::BaseContext::getNameHelper ; (; ). inline . Returns utilitary object to uniquely name objects in the context. . ◆ getObject() [1/3]. void * sofa::core::objectmodel::BaseContext::getObject ; (; const ClassInfo & ; class_info, . const std::string & ; path . ); const. virtual . Generic object access, given a path from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented in sofa::simulation::Node, and sofa::simulation::graph::DAGNode. ◆ getObject() [2/3]. void * sofa::core::objectmodel::BaseContext::getObject ; (; const ClassInfo & ; class_info, . const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. virtual . Generic object access, given a set of required tags, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented in sofa::simulation::Node, and sofa::simulation::graph::DAGNode. ◆ getObject() [3/3]. void * sofa::core::objectmodel::BaseContext::getObject ; (; const ClassInfo & ; class_info, . SearchDirection ; dir = SearchUp . ); const. virtual . Generic object access, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented in sofa::simulation::Node. ◆ getObjects() [1/6]. void sofa::core::objectmodel::BaseContext::getObjects ; (; const ClassInfo & ; class_info, . GetObjectsCallBack & ; container, . const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. virtual . Generic list of objects access, given a set of required tags, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented in sofa",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:25668,wrap,wrapper,25668,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,1,['wrap'],['wrapper']
Integrability,") override;  ; std::pair< core::CollisionModel *, core::CollisionModel * > getCollisionModels () override;  Get the pair of collision models which are in contact. More...;  ; void setDetectionOutputs (OutputVector *outputs) override;  Set the generic description of a contact point. More...;  ; void createResponse (core::objectmodel::BaseContext *group) override;  ; void removeResponse () override;  ; bool keepAlive () override;  Return true if this contact should be kept alive, even if objects are no longer in collision. More...;  ; void setKeepAlive (bool val) override;  Control the keepAlive flag of the contact. More...;  ; void draw (const core::visual::VisualParams *vparams) override;  Render internal data of this object, for debugging purposes. More...;  ;  Public Member Functions inherited from sofa::core::collision::Contact;  SOFA_ABSTRACT_CLASS (Contact, objectmodel::BaseObject);  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObject;  SOFA_CLASS (BaseObject, Base);  ; virtual void computeBBox (const core::ExecParams *, bool=false);  ; void setSrc (const std::string &v, std::vector< std::string > *attributeList=nullptr);  Sets a source Object and parses it to collect dependent Data. More...;  ; void setSrc (const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr);  ; Base * findLinkDestClass (const BaseClass *destType, const std::string &path, const BaseLink *link) override;  ; virtual std::string getPathName () const override;  Return the full path name of this object. More...;  ; virtual bool insertInNode (BaseNode *);  ; virtual bool removeInNode (BaseNode *);  ; SReal getTime () const;  Current time. More...;  ; const BaseContext * getContext () const;  ; BaseContext * getContext ();  ; const BaseObject * getMaster () const;  ; BaseObject * getMaster ();  ; const VecSlaves & getSlaves () const;  ; BaseObject * getSlave (const std::string &name) const;  ; virtual void addSlave (BaseObject::",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1contact_1_1_barycentric_stick_contact.html:4346,depend,dependent,4346,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1contact_1_1_barycentric_stick_contact.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1contact_1_1_barycentric_stick_contact.html,1,['depend'],['dependent']
Integrability,") override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; void reinit () override;  Update method called when variables used in precomputation are modified. More...;  ; virtual void computeElementMasses ();  compute the mass matrices More...;  ; virtual void computeElementMass (ElementMass &Mass, const type::fixed_array< Coord, 8 > &nodes, const Index elementIndice, SReal stiffnessFactor=1.0);  compute the mass matrix of an element More...;  ; Real integrateMass (int signx, int signy, int signz, Real l0, Real l1, Real l2);  ; void addMDx (const core::MechanicalParams *mparams, DataVecDeriv &f, const DataVecDeriv &dx, SReal factor) override;  ; void addMToMatrix (sofa::linearalgebra::BaseMatrix *mat, SReal mFact, unsigned int &offset) override;  ; bool isDiagonal () const override;  ; void addKToMatrix (sofa::linearalgebra::BaseMatrix *matrix, SReal kFact, unsigned int &offset) override;  ; void buildStiffnessMatrix (core::behavior::StiffnessMatrix *) override;  ; void buildMassMatrix (sofa::core::behavior::MassMatrixAccumulator *matrices) override;  ; void accFromF (const core::MechanicalParams *mparams, DataVecDeriv &a, const DataVecDeriv &f) override;  ; void addForce (const core::MechanicalParams *mparams, DataVecDeriv &f, const DataVecCoord &x, const DataVecDeriv &v) override;  ; SReal getKineticEnergy (const core::MechanicalParams *, const DataVecDeriv &) const override;  < vMv/2 using dof->getV() override More...;  ; SReal getPotentialEnergy (const core::MechanicalParams *, const DataVecCoord &) const override;  ; SReal getPotentialEnergy (const core::MechanicalParams *) const override;  Mgx. More...;  ; void addDForce (const core::MechanicalParams *mparams, DataVecDeriv &df, const DataVecDeriv &dx) override;  ; void addGravityToV (const core::MechanicalParams *mparams, DataVecDeriv &d_v) override;  ; SReal getElementMass (Index index) const override;  Get the mass relative to the DOF at index. More...;",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_hexahedron_f_e_m_force_field_and_mass.html:4367,integrat,integrateMass,4367,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_hexahedron_f_e_m_force_field_and_mass.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_hexahedron_f_e_m_force_field_and_mass.html,1,['integrat'],['integrateMass']
Integrability,") relaxation Authorbenjamin gilles . Public Attributes; Data< unsigned int > number;  Sample number. More...;  ; Data< VecCoord > position;  Input positions. More...;  ; Data< SeqEdges > f_edges;  Input edges for geodesic sampling (Euclidean distances are used if not specified). More...;  ; Data< VecCoord > fixedPosition;  User defined sample positions. More...;  ; Data< unsigned int > maxIter;  Max number of Lloyd iterations. More...;  ; Data< VI > outputIndices;  Computed sample indices. More...;  ; Data< VecCoord > outputPosition;  Computed sample coordinates. More...;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  . Public Member Functions;  SOFA_CLASS (SOFA_TEMPLATE(MeshSampler, DataTypes), core::DataEngine);  ;  MeshSampler ();  ;  ~MeshSampler () override;  ; void reinit () override;  Update method called when variables used in precomputation are modified. More...;  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; void doUpdate () override;  Where you put you",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_mesh_sampler.html:1736,message,messages,1736,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_mesh_sampler.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_mesh_sampler.html,1,['message'],['messages']
Integrability,"). bool sofa::helper::system::FileRepository::findFileIn ; (; std::string & ; filename, . const std::string & ; path . ). staticprotected . Search file in a given path. . ◆ getDirectAccessProtocolPrefix(). const std::string& sofa::helper::system::FileRepository::getDirectAccessProtocolPrefix ; (; ); const. inline . ◆ getFile(). std::string sofa::helper::system::FileRepository::getFile ; (; std::string ; filename, . const std::string & ; basedir = """", . std::ostream * ; errlog = &std::cerr . ). inline . Alias for findFile, but returning the resolved file as the result. Less informative for errors, but sometimes easier to use . ◆ getFirstPath(). std::string sofa::helper::system::FileRepository::getFirstPath ; (; ). Get the first path into the set of paths. . ◆ getPaths(). const std::vector< std::string >& sofa::helper::system::FileRepository::getPaths ; (; ); const. inline . ◆ getPathsJoined(). const std::string sofa::helper::system::FileRepository::getPathsJoined ; (; ). ◆ getTempPath(). const std::string sofa::helper::system::FileRepository::getTempPath ; (; ); const. ◆ print(). void sofa::helper::system::FileRepository::print ; (; ). Print the list of path to std::cout. . ◆ relativeToPath(). std::string sofa::helper::system::FileRepository::relativeToPath ; (; std::string ; path, . std::string ; refPath . ). static . Returns a string such as refPath + string = path if path contains refPath. Otherwise returns path. . ◆ removePath(). void sofa::helper::system::FileRepository::removePath ; (; const std::string & ; path). Remove a path of the set of paths. . ◆ setDirectAccessProtocolPrefix(). void sofa::helper::system::FileRepository::setDirectAccessProtocolPrefix ; (; const std::string & ; protocolPrefix). inline . Related details. ◆ operator<<. std::ostream& operator<< ; (; std::ostream & ; _flux, . FileRepository ; _fr . ). friend . Display all current sofa search paths. . sofahelpersystemFileRepository; Generated on Mon Nov 11 2024 03:31:03 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_file_repository.html:9605,protocol,protocolPrefix,9605,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_file_repository.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_file_repository.html,1,['protocol'],['protocolPrefix']
Integrability,");  ; const std::string & getSEID () const override;  ;  Public Member Functions inherited from sofa::core::visual::ShaderElement;  SOFA_ABSTRACT_CLASS (ShaderElement, objectmodel::BaseObject);  ; virtual int getSESizePerVertex ();  ; virtual int getSETotalSize ();  . Additional Inherited Members;  Public Attributes inherited from sofa::gl::component::shader::OglVariable< type::vector< type::Vec2f > >; Data< type::vector< type::Vec2f > > value;  ;  Public Attributes inherited from sofa::core::visual::VisualModel; Data< bool > d_enable;  Display the object or not. More...;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObject; SingleLink< BaseObject, BaseContext, BaseLink::FLAG_DOUBLELINK > l_context;  ; LinkSlaves l_slaves;  ; SingleLink< BaseObject, BaseObject, BaseLink::FLAG_DOUBLELINK > l_master;  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of field",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_float_vector2_variable.html:12920,message,messages,12920,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_float_vector2_variable.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_float_vector2_variable.html,1,['message'],['messages']
Integrability,");  ; const std::string & getSEID () const override;  ;  Public Member Functions inherited from sofa::core::visual::ShaderElement;  SOFA_ABSTRACT_CLASS (ShaderElement, objectmodel::BaseObject);  ; virtual int getSESizePerVertex ();  ; virtual int getSETotalSize ();  . Additional Inherited Members;  Public Attributes inherited from sofa::gl::component::shader::OglVariable< type::vector< type::Vec3f > >; Data< type::vector< type::Vec3f > > value;  ;  Public Attributes inherited from sofa::core::visual::VisualModel; Data< bool > d_enable;  Display the object or not. More...;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObject; SingleLink< BaseObject, BaseContext, BaseLink::FLAG_DOUBLELINK > l_context;  ; LinkSlaves l_slaves;  ; SingleLink< BaseObject, BaseObject, BaseLink::FLAG_DOUBLELINK > l_master;  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of field",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_float_vector3_variable.html:12920,message,messages,12920,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_float_vector3_variable.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_float_vector3_variable.html,1,['message'],['messages']
Integrability,");  ; const std::string & getSEID () const override;  ;  Public Member Functions inherited from sofa::core::visual::ShaderElement;  SOFA_ABSTRACT_CLASS (ShaderElement, objectmodel::BaseObject);  ; virtual int getSESizePerVertex ();  ; virtual int getSETotalSize ();  . Additional Inherited Members;  Public Attributes inherited from sofa::gl::component::shader::OglVariable< type::vector< type::Vec4f > >; Data< type::vector< type::Vec4f > > value;  ;  Public Attributes inherited from sofa::core::visual::VisualModel; Data< bool > d_enable;  Display the object or not. More...;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObject; SingleLink< BaseObject, BaseContext, BaseLink::FLAG_DOUBLELINK > l_context;  ; LinkSlaves l_slaves;  ; SingleLink< BaseObject, BaseObject, BaseLink::FLAG_DOUBLELINK > l_master;  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of field",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_float_vector4_variable.html:12920,message,messages,12920,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_float_vector4_variable.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_float_vector4_variable.html,1,['message'],['messages']
Integrability,");  Get the linear system inverse matrix, or nullptr if this solver does not build it. More...;  ; virtual bool readFile (std::istream &);  Read the Matrix solver from a file. More...;  ; virtual bool writeFile (std::ostream &);  Read the Matrix solver from a file. More...;  ; virtual void freezeSystemMatrix ();  Ask the solver to no longer update the system matrix. More...;  ;  Public Member Functions inherited from sofa::core::behavior::BaseLinearSolver;  SOFA_ABSTRACT_CLASS (BaseLinearSolver, objectmodel::BaseObject);  ; bool insertInNode (objectmodel::BaseNode *node) override;  ; bool removeInNode (objectmodel::BaseNode *node) override;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObject;  SOFA_CLASS (BaseObject, Base);  ; virtual void draw (const core::visual::VisualParams *);  Render internal data of this object, for debugging purposes. More...;  ; virtual void computeBBox (const core::ExecParams *, bool=false);  ; void setSrc (const std::string &v, std::vector< std::string > *attributeList=nullptr);  Sets a source Object and parses it to collect dependent Data. More...;  ; void setSrc (const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr);  ; Base * findLinkDestClass (const BaseClass *destType, const std::string &path, const BaseLink *link) override;  ; virtual std::string getPathName () const override;  Return the full path name of this object. More...;  ; SReal getTime () const;  Current time. More...;  ; const BaseContext * getContext () const;  ; BaseContext * getContext ();  ; const BaseObject * getMaster () const;  ; BaseObject * getMaster ();  ; const VecSlaves & getSlaves () const;  ; BaseObject * getSlave (const std::string &name) const;  ; virtual void addSlave (BaseObject::SPtr s);  ; virtual void removeSlave (BaseObject::SPtr s);  ; virtual void handleEvent (Event *);  Handle an event. More...;  ; virtual void handleTopologyChange ();  ; virtual void handleTopologyChange (core",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsolver_1_1_base_matrix_linear_solver.html:4652,depend,dependent,4652,api/master/sofa/html/classsofa_1_1component_1_1linearsolver_1_1_base_matrix_linear_solver.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsolver_1_1_base_matrix_linear_solver.html,3,['depend'],['dependent']
Integrability,");  Update method called when variables used in precomputation are modified. More...;  ; void updateInternal ();  Update method called when variables (used to compute other internal variables) are modified. More...;  ; virtual void storeResetState ();  Save the initial state for later uses in reset() More...;  ; virtual void reset ();  Reset to initial state. More...;  ; virtual void cleanup ();  ; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  . Additional Inherited Members;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  . Attribute details. ◆ f_listening. Data<bool> sofa::core::objectmodel::BaseObject::f_listening. if true, handle the events, otherwise ignore the events . ◆ l_context. SingleLink<BaseObject, BaseContext, Ba",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html:12391,message,messages,12391,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html,1,['message'],['messages']
Integrability,"*f, std::list< unsigned int > &renumbering) override;  ; void addConstraintDisplacement (SReal *d, int begin, int end) override;  ; void setConstraintDForce (SReal *df, int begin, int end, bool update) override;  ; void getBlockDiagonalCompliance (linearalgebra::BaseMatrix *W, int begin, int end) override;  ; void convertConstraintMatrix (sofa::SignedIndex numberOfConstraints, const MatrixDeriv &inputConstraintMatrix);  Convert the constraint matrix. More...;  ; virtual void computeJ (sofa::linearalgebra::BaseMatrix *W, const MatrixDeriv &j);  . Additional Inherited Members;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  ;  Protected Attributes inherited from sofa::core::behavior::ConstraintCorrection< TDataTypes >; MechanicalState< DataTypes > * mstate;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObject; SingleLink< BaseObject, BaseContext, BaseLink::FLAG_DOUBLELINK > l_context;  ; LinkSlaves l_slaves;  ; SingleLink< BaseObject, BaseObject, BaseLink::FLAG_DOUBLELINK > l_master;  ;  Protected Attributes inherited from sofa:",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1correction_1_1_linear_solver_constraint_correction.html:16742,message,messages,16742,api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1correction_1_1_linear_solver_constraint_correction.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1correction_1_1_linear_solver_constraint_correction.html,1,['message'],['messages']
Integrability,"*help, BaseData::DataFlags dataFlags);  Helper method used by initData() More...;  ; template<class T > ; void initData0 (Data< T > *field, typename Data< T >::InitData &res, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  . Friends; class Cube;  . Additional Inherited Members;  Public Attributes inherited from sofa::core::CollisionModel; CollisionElementActiver * myCollElemActiver;  CollisionElementActiver that activate or deactivate collision element during execution. More...;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseObject; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions i",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_cube_collision_model.html:20516,message,messages,20516,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_cube_collision_model.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_cube_collision_model.html,1,['message'],['messages']
Integrability,", 3 > & getHexahedronNumericalIntegrationDescriptor ();  return a pointer to the container of cubature points More...;  ; void draw (const core::visual::VisualParams *vparams) override;  Render internal data of this object, for debugging purposes. More...;  ; void writeMSHfile (const char *filename) const;  ;  Public Member Functions inherited from sofa::component::topology::container::dynamic::QuadSetGeometryAlgorithms< DataTypes >;  SOFA_CLASS (SOFA_TEMPLATE(QuadSetGeometryAlgorithms, DataTypes), SOFA_TEMPLATE(EdgeSetGeometryAlgorithms, DataTypes));  ; void computeQuadAABB (const QuadID i, Coord &minCoord, Coord &maxCoord) const;  ; Coord computeQuadCenter (const QuadID i) const;  ; void getQuadVertexCoordinates (const QuadID i, Coord[4]) const;  ; void getRestQuadVertexCoordinates (const QuadID i, Coord[4]) const;  ; Real computeQuadArea (const QuadID i) const;  Computes the area of quad no i and returns it. More...;  ; void computeQuadArea (BasicArrayInterface< Real > &ai) const;  Computes the quad area of all quads are store in the array interface. More...;  ; Real computeRestQuadArea (const QuadID i) const;  Computes the initial area of quad no i and returns it. More...;  ; type::Vec< 3, double > computeQuadNormal (const QuadID ind_q) const;  Computes the normal vector of a quad indexed by ind_q (not normed) More...;  ; bool isQuadInPlane (const QuadID ind_q, const PointID ind_p, const type::Vec< 3, Real > &plane_vect) const;  Tests if a quad indexed by ind_q (and incident to the vertex indexed by ind_p) is included or not in the plane defined by (ind_p, plane_vect) More...;  ; bool isPointInQuad (const QuadID ind_q, const sofa::type::Vec< 3, Real > &p) const;  ; void draw (const core::visual::VisualParams *vparams) override;  Render internal data of this object, for debugging purposes. More...;  ; void writeMSHfile (const char *filename) const;  ;  Public Member Functions inherited from sofa::component::topology::container::dynamic::EdgeSetGeometryAlgorithms< ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_dynamic_sparse_grid_geometry_algorithms.html:11017,interface,interface,11017,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_dynamic_sparse_grid_geometry_algorithms.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_dynamic_sparse_grid_geometry_algorithms.html,2,['interface'],['interface']
Integrability,", >0 -> radius of spheres) More...;  ; SetIndex d_coordinates;  Coordinates of the fixed points. More...;  ; SingleLink< FixedTranslationProjectiveConstraint< DataTypes >, sofa::core::topology::BaseMeshTopology, BaseLink::FLAG_STOREPATH|BaseLink::FLAG_STRONGLINK > l_topology;  Link to be set to the topology container in the component graph. More...;  ;  Public Attributes inherited from sofa::core::behavior::ProjectiveConstraintSet< DataTypes >; Data< Real > endTime;  The constraint stops acting after the given value. Use a negative value for infinite constraints. More...;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  . Protected Attributes; FixedTranslationProjectiveConstraintInternalData< DataTypes > data;  ;  Protected Attributes inherited from sofa::core::behavior::BaseProjectiveConstraintSet; Data< int > group;  ID of the group containing this constraint. This ID is used to specify which constraints are solved by which solver, by specifying in each solver which groups of constraints it should handle. More...;  ;  Protected Attributes inheri",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_fixed_translation_projective_constraint.html:2398,message,messages,2398,api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_fixed_translation_projective_constraint.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_fixed_translation_projective_constraint.html,1,['message'],['messages']
Integrability,", bool isReadOnly=false)sofa::core::objectmodel::Baseinline; initData(Data< T > *field, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false)sofa::core::objectmodel::Baseinline; initData0(BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false)sofa::core::objectmodel::Baseprotected; initData0(BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, BaseData::DataFlags dataFlags)sofa::core::objectmodel::Baseprotected; initData0(Data< T > *field, typename Data< T >::InitData &res, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false)sofa::core::objectmodel::Baseinlineprotected; inputssofa::core::objectmodel::DDGNodeprotected; insertInNode(BaseNode *)sofa::core::objectmodel::BaseObjectinlinevirtual; integrateMesh()sofa::component::engine::generate::GenerateRigidMass< DataTypes, MassType >protected; integrateTriangle(type::Vec3 kV0, type::Vec3 kV1, type::Vec3 kV2)sofa::component::engine::generate::GenerateRigidMass< DataTypes, MassType >protected; isComponentStateValid() constsofa::core::objectmodel::Baseinline; isDirty() constsofa::core::objectmodel::DDGNodeinline; l_contextsofa::core::objectmodel::BaseObjectprotected; l_mastersofa::core::objectmodel::BaseObjectprotected; l_slavessofa::core::objectmodel::BaseObjectprotected; LinkSlaves typedefsofa::core::objectmodel::BaseObject; m_aliasDatasofa::core::objectmodel::Baseprotected; m_aliasLinksofa::core::objectmodel::Baseprotected; m_dataTrackersofa::core::DataTrackerDDGNodeprotected; m_definitionSourceFileNamesofa::core::objectmodel::Base; m_definitionSourceFilePossofa::core::objectmodel::Base; m_densitysofa::component::engine::generate::GenerateRigidMass< DataTypes, MassType >protected; m_instanciationSourceFileNamesofa::core::objectmodel::Base; m_instanciationSourceFilePossofa::core::objectmodel::Base; m_internalEnginesofa::core::objectmo",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_generate_rigid_mass-members.html:9206,integrat,integrateTriangle,9206,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_generate_rigid_mass-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_generate_rigid_mass-members.html,1,['integrat'],['integrateTriangle']
Integrability,", const sofa::type::vector< Edge > &edgesList, const sofa::type::vector< EdgeID > &edgesIndexList, const sofa::type::vector< sofa::type::vector< EdgeID > > &ancestors);  Sends a message to warn that some edges were added in this topology. More...;  ; virtual void addEdgesWarning (const sofa::Size nEdges, const sofa::type::vector< Edge > &edgesList, const sofa::type::vector< EdgeID > &edgesIndexList, const sofa::type::vector< sofa::type::vector< EdgeID > > &ancestors, const sofa::type::vector< sofa::type::vector< SReal > > &baryCoefs);  Sends a message to warn that some edges were added in this topology. More...;  ; virtual void addEdgesWarning (const sofa::Size nEdges, const sofa::type::vector< Edge > &edgesList, const sofa::type::vector< EdgeID > &edgesIndexList, const sofa::type::vector< core::topology::EdgeAncestorElem > &ancestorElems);  Sends a message to warn that some edges were added in this topology. More...;  ; virtual void removeEdgesWarning (sofa::type::vector< EdgeID > &edges);  Sends a message to warn that some edges are about to be deleted. More...;  ; void movePointsProcess (const sofa::type::vector< PointID > &id, const sofa::type::vector< sofa::type::vector< PointID > > &ancestors, const sofa::type::vector< sofa::type::vector< SReal > > &coefs, const bool moveDOF=true) override;  Move input points indices to input new coords. Also propagate event and update edgesAroundVertex for data handling. More...;  ;  Protected Member Functions inherited from sofa::component::topology::container::dynamic::PointSetTopologyModifier;  PointSetTopologyModifier ();  ;  ~PointSetTopologyModifier () override;  ; void addPointsWarning (const sofa::Size nPoints, const bool addDOF=true);  Sends a message to warn that some points were added in this topology. More...;  ; void addPointsWarning (const sofa::Size nPoints, const sofa::type::vector< sofa::type::vector< PointID > > &ancestors, const sofa::type::vector< sofa::type::vector< SReal > > &coefs, const bool addDOF=true",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_dynamic_sparse_grid_topology_modifier.html:23388,message,message,23388,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_dynamic_sparse_grid_topology_modifier.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_dynamic_sparse_grid_topology_modifier.html,3,['message'],['message']
Integrability,", double **);  Project the compliance Matrix to constrained space. More...;  ; virtual void projectMatrix (sofa::linearalgebra::BaseMatrix *, unsigned);  ; virtual void applyConstraint (sofa::core::behavior::ZeroDirichletCondition *);  ;  Public Member Functions inherited from sofa::core::behavior::StateAccessor;  SOFA_ABSTRACT_CLASS (StateAccessor, objectmodel::BaseObject);  ; virtual const MultiLink< StateAccessor, BaseMechanicalState, BaseLink::FLAG_DUPLICATE >::Container & getMechanicalStates () const;  Return a list of mechanical states to which this component is associated. More...;  ; void computeBBox (const core::ExecParams *params, bool onlyVisible=false) override;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObject;  SOFA_CLASS (BaseObject, Base);  ; virtual void draw (const core::visual::VisualParams *);  Render internal data of this object, for debugging purposes. More...;  ; void setSrc (const std::string &v, std::vector< std::string > *attributeList=nullptr);  Sets a source Object and parses it to collect dependent Data. More...;  ; void setSrc (const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr);  ; Base * findLinkDestClass (const BaseClass *destType, const std::string &path, const BaseLink *link) override;  ; virtual std::string getPathName () const override;  Return the full path name of this object. More...;  ; SReal getTime () const;  Current time. More...;  ; const BaseContext * getContext () const;  ; BaseContext * getContext ();  ; const BaseObject * getMaster () const;  ; BaseObject * getMaster ();  ; const VecSlaves & getSlaves () const;  ; BaseObject * getSlave (const std::string &name) const;  ; virtual void addSlave (BaseObject::SPtr s);  ; virtual void removeSlave (BaseObject::SPtr s);  ; virtual void handleEvent (Event *);  Handle an event. More...;  ; virtual void handleTopologyChange ();  ; virtual void handleTopologyChange (core::topology::Topology *t);  ; void ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_pair_interaction_projective_constraint_set.html:5636,depend,dependent,5636,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_pair_interaction_projective_constraint_set.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_pair_interaction_projective_constraint_set.html,3,['depend'],['dependent']
Integrability,", double **);  Project the compliance Matrix to constrained space. More...;  ; virtual void projectMatrix (sofa::linearalgebra::BaseMatrix *, unsigned);  ; virtual void applyConstraint (sofa::core::behavior::ZeroDirichletCondition *);  ;  Public Member Functions inherited from sofa::core::behavior::StateAccessor;  SOFA_ABSTRACT_CLASS (StateAccessor, objectmodel::BaseObject);  ; virtual const MultiLink< StateAccessor, BaseMechanicalState, BaseLink::FLAG_DUPLICATE >::Container & getMechanicalStates () const;  Return a list of mechanical states to which this component is associated. More...;  ; void computeBBox (const core::ExecParams *params, bool onlyVisible=false) override;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObject;  SOFA_CLASS (BaseObject, Base);  ; virtual void draw (const core::visual::VisualParams *);  Render internal data of this object, for debugging purposes. More...;  ; void setSrc (const std::string &v, std::vector< std::string > *attributeList=nullptr);  Sets a source Object and parses it to collect dependent Data. More...;  ; void setSrc (const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr);  ; Base * findLinkDestClass (const BaseClass *destType, const std::string &path, const BaseLink *link) override;  ; virtual std::string getPathName () const override;  Return the full path name of this object. More...;  ; SReal getTime () const;  Current time. More...;  ; const BaseContext * getContext () const;  ; BaseContext * getContext ();  ; const BaseObject * getMaster () const;  ; BaseObject * getMaster ();  ; const VecSlaves & getSlaves () const;  ; BaseObject * getSlave (const std::string &name) const;  ; virtual void addSlave (BaseObject::SPtr s);  ; virtual void removeSlave (BaseObject::SPtr s);  ; virtual void handleEvent (Event *);  Handle an event. More...;  ; virtual void handleTopologyChange (core::topology::Topology *t);  ; void parse (BaseObjectDescription *arg) overri",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_position_based_dynamics_projective_constraint.html:8203,depend,dependent,8203,api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_position_based_dynamics_projective_constraint.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_position_based_dynamics_projective_constraint.html,1,['depend'],['dependent']
Integrability,", possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented in sofa::simulation::Node, and sofa::simulation::graph::DAGNode. ◆ getObject() [3/3]. void * sofa::core::objectmodel::BaseContext::getObject ; (; const ClassInfo & ; class_info, . SearchDirection ; dir = SearchUp . ); const. virtual . Generic object access, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented in sofa::simulation::Node. ◆ getObjects() [1/6]. void sofa::core::objectmodel::BaseContext::getObjects ; (; const ClassInfo & ; class_info, . GetObjectsCallBack & ; container, . const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. virtual . Generic list of objects access, given a set of required tags, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented in sofa::simulation::Node, and sofa::simulation::graph::DAGNode. ◆ getObjects() [2/6]. void sofa::core::objectmodel::BaseContext::getObjects ; (; const ClassInfo & ; class_info, . GetObjectsCallBack & ; container, . SearchDirection ; dir = SearchUp . ); const. virtual . Generic list of objects access, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented in sofa::simulation::Node. ◆ getObjects() [3/6]. template<class Container > . Container& sofa::core::objectmodel::BaseContext::getObjects ; (; Container & ; result, . SearchDirection ; dir = SearchUp . ). inline . Returns a list of object of type passed as a parameter. eg: sofa::type::vector<VisualModel*> results; context->getObjects(results) ; . ◆ getObjects() [4/6]. template<class Object , class Container > . void sofa::core::objectmodel::B",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:26582,wrap,wrapper,26582,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,1,['wrap'],['wrapper']
Integrability,", unsigned int &offset) override;  Copy data to a global BaseMatrix from the state stored in a local vector. More...;  ; void addToBaseVector (linearalgebra::BaseVector *dest, core::ConstVecId src, unsigned int &offset) override;  ; void addFromBaseVectorSameSize (core::VecId dest, const linearalgebra::BaseVector *src, unsigned int &offset) override;  ; void addFromBaseVectorDifferentSize (core::VecId dest, const linearalgebra::BaseVector *src, unsigned int &offset) override;  ; Initial transformations accessors.; void setTranslation (SReal dx, SReal dy, SReal dz);  ; void setRotation (SReal rx, SReal ry, SReal rz);  ; void setScale (SReal sx, SReal sy, SReal sz);  ; virtual type::Vec3 getTranslation () const;  ; virtual type::Vec3 getRotation () const;  ; type::Vec3 getScale () const override;  ; Integration related methods; void beginIntegration (SReal dt) override;  Called at the beginning of each integration step. More...;  ; void endIntegration (const core::ExecParams *params, SReal dt) override;  Called at the end of each integration step. More...;  ; void accumulateForce (const core::ExecParams *params, core::VecDerivId f=core::VecDerivId::force()) override;  Add stored external forces to F. More...;  ; void vAvail (const core::ExecParams *params, core::VecCoordId &v) override;  Increment the index of the given VecCoordId, so that all 'allocated' vectors in this state have a lower index. More...;  ; void vAvail (const core::ExecParams *params, core::VecDerivId &v) override;  Increment the index of the given VecDerivId, so that all 'allocated' vectors in this state have a lower index. More...;  ; void vAlloc (const core::ExecParams *params, core::VecCoordId v, const core::VecIdProperties &properties={}) override;  Increment the index of the given MatrixDerivId, so that all 'allocated' vectors in this state have a lower index. More...;  ; void vAlloc (const core::ExecParams *params, core::VecDerivId v, const core::VecIdProperties &properties={}) override;  Allo",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1statecontainer_1_1_mechanical_object.html:13813,integrat,integration,13813,api/master/sofa/html/classsofa_1_1component_1_1statecontainer_1_1_mechanical_object.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1statecontainer_1_1_mechanical_object.html,1,['integrat'],['integration']
